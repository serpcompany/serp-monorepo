[
  {
    "owner": "cap-js",
    "repo": "docs",
    "content": "TITLE: Sales Organization Access Control\nDESCRIPTION: Demonstrates proper access control modeling with restricted attributes and separate grants for different roles.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_17\n\nLANGUAGE: cds\nCODE:\n```\nservice SalesService @(requires: ['SalesAdmin', 'SalesManager']) {\n  entity SalesOrgs @(restrict: [\n     { grant: '*',\n       to: 'SalesManager',\n       where: '$user.country = countryCode' },\n     { grant: '*',\n       to: 'SalesAdmin' } ]) {\n     countryCode: String; /*...*/\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Database Service in Node.js CAP Application\nDESCRIPTION: Demonstrates a complete implementation of a CatalogService that connects to a database service, handles a submitOrder action, and adds discount information to book titles.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nclass CatalogService extends cds.ApplicationService { async init() {\n\n  const db = await cds.connect.to('db') // connect to database service\n  const { Books } = db.entities         // get reflected definitions\n\n  // Reduce stock of ordered books if available stock suffices\n  this.on ('submitOrder', async req => {\n    const {book,quantity} = req.data\n    const n = await UPDATE (Books, book)\n      .with ({ stock: {'-=': quantity }})\n      .where ({ stock: {'>=': quantity }})\n    n > 0 || req.error (409,`${quantity} exceeds stock for book #${book}`)\n  })\n\n  // Add some discount for overstocked books\n  this.after ('each','Books', book => {\n    if (book.stock > 111) book.title += ` -- 11% discount!`\n  })\n\n  return super.init()\n}}\nmodule.exports = CatalogService\n```\n\n----------------------------------------\n\nTITLE: Using Common Reuse Types and Aspects in CDS\nDESCRIPTION: Shows how to use common reuse types and aspects from @sap/cds/common to create concise and interoperable models.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nusing { Country, managed } from '@sap/cds/common';\nentity Addresses : managed { //> using reuse aspect\n  street  : String;\n  town    : String;\n  country : Country; //> using reuse type\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Model in CDS\nDESCRIPTION: CDS schema definition for a bookshop application, including entities for Books, Authors, and Genres.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nusing { Currency, managed, sap } from '@sap/cds/common';\nnamespace sap.capire.bookshop;\n\nentity Books : managed {\n  key ID : Integer;\n  title  : localized String(111);\n  descr  : localized String(1111);\n  author : Association to Authors;\n  genre  : Association to Genres;\n  stock  : Integer;\n  price  : Decimal(9,2);\n  currency : Currency;\n}\n\nentity Authors : managed {\n  key ID : Integer;\n  name   : String(111);\n  books  : Association to many Books on books.author = $self;\n}\n\n/** Hierarchically organized Code List for Genres */\nentity Genres : sap.common.CodeList {\n  key ID   : Integer;\n  parent   : Association to Genres;\n  children : Composition of many Genres on children.parent = $self;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Model for Books and Authors\nDESCRIPTION: Shows a CDS model definition for Books and Authors entities, including their properties and associations. This model is used as a basis for generating Java interfaces.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_25\n\nLANGUAGE: cds\nCODE:\n```\nnamespace my.bookshop;\n\nentity Books {\n  key ID : Integer;\n  title  : String(111);\n  author : Association to Authors;\n}\n\nentity Authors {\n  key ID : Integer;\n  name   : String(111);\n  books  : Association to many Books on books.author = $self;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Development Tools Installation in CAP Java\nDESCRIPTION: Command line instructions to verify that the required tools (CDS, Java, and Maven) are correctly installed and configured for CAP Java development.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/getting-started.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds --version\njava --version\nmvn --version\n```\n\n----------------------------------------\n\nTITLE: Single Upsert Using Generated Entities in CAP Java\nDESCRIPTION: Demonstrates how to perform a single upsert operation using generated entity classes. This example creates or updates a book record with specific ID and title.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.BOOKS;\nimport bookshop.Books;\n\nBooks book = Books.create();\nbook.setId(101);\nbook.setTitle(\"CAP for Beginners\");\n\nCqnUpsert upsert = Upsert.into(BOOKS).entry(book);\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler for CAP Java Service\nDESCRIPTION: Sample implementation of a CatalogServiceHandler that handles book order submissions and applies discounts. It demonstrates event handling for SubmitOrder events and read operations on Books entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/testing.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\npublic class CatalogServiceHandler implements EventHandler {\n\n    private final PersistenceService db;\n\n    public CatalogServiceHandler(PersistenceService db) {\n        this.db = db;\n    }\n\n    @On\n    public void onSubmitOrder(SubmitOrderContext context) {\n        Integer quantity = context.getQuantity();\n        String bookId = context.getBook();\n\n        Optional<Books> book = db.run(Select.from(BOOKS).columns(Books_::stock).byId(bookId)).first(Books.class);\n\n        book.orElseThrow(() -> new ServiceException(ErrorStatuses.NOT_FOUND, MessageKeys.BOOK_MISSING)\n            .messageTarget(Books_.class, b -> b.ID()));\n\n        int stock = book.map(Books::getStock).get();\n\n        if (stock >= quantity) {\n            db.run(Update.entity(BOOKS).byId(bookId).data(Books.STOCK, stock -= quantity));\n            SubmitOrderContext.ReturnType result = SubmitOrderContext.ReturnType.create();\n            result.setStock(stock);\n            context.setResult(result);\n        } else {\n            throw new ServiceException(ErrorStatuses.CONFLICT, MessageKeys.ORDER_EXCEEDS_STOCK, quantity);\n        }\n    }\n\n    @After(event = CqnService.EVENT_READ)\n    public void discountBooks(Stream<Books> books) {\n        books.filter(b -> b.getTitle() != null).forEach(b -> {\n            loadStockIfNotSet(b);\n            discountBooksWithMoreThan111Stock(b);\n        });\n    }\n\n    private void discountBooksWithMoreThan111Stock(Books b) {\n        if (b.getStock() != null && b.getStock() > 111) {\n            b.setTitle(String.format(\"%s -- 11%% discount\", b.getTitle()));\n        }\n    }\n\n    private void loadStockIfNotSet(Books b) {\n        if (b.getId() != null && b.getStock() == null) {\n            b.setStock(db.run(Select.from(BOOKS).byId(b.getId()).columns(Books_::stock)).single(Books.class).getStock());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Associations in CDS\nDESCRIPTION: Shows how to define to-one and to-many associations between entities in CDS, capturing relationships between data structures.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\nentity Books { ...\n  author : Association to Authors; //> to one\n}\nentity Authors { ...\n  books : Association to many Books on books.author = $self;\n}\n```\n\n----------------------------------------\n\nTITLE: Using srv.run for Transaction Management in JavaScript\nDESCRIPTION: Demonstrates using srv.run to ensure multiple database operations are executed within a single transaction.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await cds.connect.to('db')\nawait db.run (tx => {\n  let [ Emily, Charlotte ] = await db.create (Authors, [\n    { name: 'Emily Brontë' },\n    { name: 'Charlotte Brontë' },\n  ])\n  await db.create (Books, [\n    { title: 'Wuthering Heights', author: Emily },\n    { title: 'Jane Eyre', author: Charlotte },\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Java CAP Project\nDESCRIPTION: Command to create a new CAP project configured for Java development using the 'cds init' command.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds init --java\n```\n\n----------------------------------------\n\nTITLE: Defining Common UUID Aspect in CDS\nDESCRIPTION: Defines a common 'cuid' aspect with a UUID primary key, promoting canonical naming and typing for primary keys.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\n// @sap/cds/common\naspect cuid { key ID : UUID }\n```\n\n----------------------------------------\n\nTITLE: Deep Update with Delta Representation in CAP Java\nDESCRIPTION: This snippet shows how to perform a deep update using delta representation. It demonstrates updating nested entities in a structured document, including marking items for removal.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.CdsList.delta;\n\nOrder order = Order.create(1000);\norder.setStatus(\"in process\");\nOrderItem item1 = OrderItem.create(1);\nitem1.setQuantity(2);\nOrderItem item2 = OrderItem.create(2);\nOrderItem item4 = OrderItem.create(4);\nitem4.setBook(Book.create(400));\nitem4.setQuantity(4);\n\n// items delta with order item 2 marked for removal\norder.setItems(delta(item1, item2.forRemoval(), item4));\n\nUpdate.entity(ORDER).data(order);\n```\n\n----------------------------------------\n\nTITLE: Managed Data with Auto-filled Fields\nDESCRIPTION: Shows how to use @cds.on.insert and @cds.on.update annotations to automatically manage creation and modification timestamps and users.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_20\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo { //...\n   createdAt  : Timestamp @cds.on.insert: $now;\n   createdBy  : User      @cds.on.insert: $user;\n   modifiedAt : Timestamp @cds.on.insert: $now  @cds.on.update: $now;\n   modifiedBy : User      @cds.on.insert: $user @cds.on.update: $user;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Forwarding in Node.js\nDESCRIPTION: JSON configuration to enable authorization token forwarding between microservices using the same XSUAA instance, eliminating the need for separate SAP BTP destinations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"kind\": \"odata\",\n    \"model\": \"./srv/external/OrdersService\",\n    \"credentials\": {\n      \"url\": \"<set via env var in deployment>\",\n      \"forwardAuthToken\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Catalog Service in CDS\nDESCRIPTION: CDS service definition for a CatalogService, providing read-only access to Books and a submitOrder action for authenticated users.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\nusing { sap.capire.bookshop as my } from '../db/schema';\nservice CatalogService @(path:'/browse') {\n\n  @readonly entity Books as select from my.Books {*,\n    author.name as author\n  } excluding { createdBy, modifiedBy };\n\n  @requires: 'authenticated-user'\n  action submitOrder (book: Books:ID, quantity: Integer);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Non-Constant Literal Values in CQL Select Statement (Java)\nDESCRIPTION: Demonstrates how to use CQL.val() to create non-constant literal values in a select statement. This method is used for values that may change at runtime or depend on external input.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.val;\n\nSelect.from(BOOKS).columns(b -> b.title(), val(\"available\").as(\"status\"))\n\t.where(b -> b.stock().gt(0));\n```\n\n----------------------------------------\n\nTITLE: Preventing SQL Injection in Node.js CAP Application\nDESCRIPTION: This snippet demonstrates how to safely handle user input when constructing CQL queries in a Node.js CAP application to prevent SQL injection attacks.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/aspects.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst entity = <from user input>\nconst column = <from user input>\nvalidate(entity, column) // for example, by comparing with positive list\nSELECT.from(entity).columns(column)\n```\n\n----------------------------------------\n\nTITLE: CDS Privilege Definition\nDESCRIPTION: Defines the general form of a privilege within the `@restrict` annotation. It specifies the events to which the privilege applies (`grant`), the user roles that are authorized (`to`), and an optional filter condition (`where`) that further restricts access on an instance level.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\n\n{ grant:<events>, to:<roles>, where:<filter-condition> }\n\n```\n\n----------------------------------------\n\nTITLE: Using Associations in CDS Queries\nDESCRIPTION: This snippet shows how to use associations in CDS queries to create a view of English books. It demonstrates the power of path expressions and associations in CDS.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nentity EnglishBooks as select from Books\nwhere author.country.code = 'GB';\n```\n\n----------------------------------------\n\nTITLE: Best Practice: Using Role-Specific Services in CAP Authorization\nDESCRIPTION: Example demonstrating the recommended approach of creating dedicated services for different roles. This provides clearer security boundaries and allows tailoring exposed data to specific roles.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_22\n\nLANGUAGE: cds\nCODE:\n```\n@path:'browse'\nservice CatalogService @(requires: 'authenticated-user') {\n  @readonly entity Books\n  as select from db.Books { title, publisher, price };\n}\n\n@path:'internal'\nservice VendorService @(requires: 'Vendor') {\n  entity Books @(restrict: [\n    { grant: 'READ' },\n    { grant: 'WRITE', to: 'vendor', where: '$user.publishers = publisher' } ])\n  as projection on db.Books;\n}\n\n@path:'internal'\nservice AccountantService @(requires: 'Accountant') {\n  @readonly entity Books as projection on db.Books;\n  action doAccounting();\n}\n/*...*/}\n```\n\n----------------------------------------\n\nTITLE: Customizing Content Security Policy with Helmet\nDESCRIPTION: Example of how to customize the Content Security Policy (CSP) using helmet middleware in a CAP application. This allows for fine-tuning security directives.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncds.on('bootstrap', app => {\n  app.use(\n    helmet({\n      contentSecurityPolicy: {\n        directives: {\n          ...helmet.contentSecurityPolicy.getDefaultDirectives()\n          // custom settings\n        }\n      }\n    })\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Authorization Rules with @restrict\nDESCRIPTION: Example of defining authorization rules using @restrict annotations to control access to entity operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_19\n\nLANGUAGE: cds\nCODE:\n```\nentity Books @(restrict: [\n  { grant: 'READ',   to: 'authenticated-user' },\n  { grant: 'CREATE', to: 'content-maintainer' },\n  { grant: 'UPDATE', to: 'content-maintainer' },\n  { grant: 'DELETE', to: 'admin' },\n]) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic CAP Service Interface\nDESCRIPTION: Demonstrates how to define a basic service interface in CDS with entities and actions. Includes CRUD entities for Books and Authors with a submitOrder action.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nservice BookshopService {\n  entity Books : cuid { title: String; author: Association to Authors }\n  entity Authors :cuid { name: String; }\n  action submitOrder ( book: UUID, quantity: Integer );\n}\n```\n\n----------------------------------------\n\nTITLE: Using CRUD-style API with CQN Objects\nDESCRIPTION: Demonstrates examples of using CRUD-style convenience methods with CQN query objects and chained operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nawait srv.read(Books,201)\nawait srv.read(Books).where({author_ID:106})\nawait srv.create(Books).entries({title:'Wuthering Heights'})\nawait srv.insert(Books).entries({title:'Catweazle'})\nawait srv.update(Books).set({discount:'10%'}).where({stock:{'>':111}})\nawait srv.update(Books,201).with({stock:111})\nawait srv.delete(Books,201)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Handlers in Node.js CAP Application\nDESCRIPTION: Demonstrates how to extend the CatalogService class in Node.js by adding an 'after' event handler for Books that adds discount information to book titles when stock is greater than 111.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nclass CatalogService extends cds.ApplicationService { init() {\n  const { Books } = cds.entities('CatalogService')\n\n  // Register your event handlers in here, for example:  \n  this.after ('each', Books, book => { \n    if (book.stock > 111) { \n      book.title += ` -- 11% discount!` \n    } \n  }) \n\n  return super.init()\n}}\nmodule.exports = CatalogService\n```\n\n----------------------------------------\n\nTITLE: Initializing CAP Project for Node.js\nDESCRIPTION: Command to create a new CAP project named 'bookshop' using the cds init command for Node.js.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds init bookshop\n```\n\n----------------------------------------\n\nTITLE: Defining CQN Query Types in TypeScript\nDESCRIPTION: Complete type definitions for CQN queries including INSERT, UPSERT, UPDATE, DELETE and SELECT operations. Includes detailed type definitions for expressions, references, and supporting data structures used in query construction.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cqn.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `INSERT` and `UPSERT` queries are represented by the same internal\n * structures. The `UPSERT` keyword is used to indicate that the\n * statement should be updated if the targeted data exists.\n * The `into` property specifies the target entity.\n *\n * The data to be inserted or updated can be specified in different ways:\n *\n * - in the `entries` property as deeply nested records.\n * - in the `columns` and `values` properties as in SQL.\n * - in the `columns` and `rows` properties, with `rows` being array of `values`.\n * - in the `from` property with a `SELECT` query to provide the data to be inserted.\n *\n * The latter is the equivalent of SQL's `INSERT INTO ... SELECT ...` statements.\n */\nexport class INSERT { INSERT: UPSERT['UPSERT'] }\nexport class UPSERT { UPSERT: {\n  into      : ref\n  entries?  : data[]\n  columns?  : string[]\n  values?   : scalar[]\n  rows?     : scalar[][]\n  from?     : SELECT\n}}\n\n\n/**\n * `UPDATE` queries are used to capture modifications to existing data.\n * They support a `where` clause to specify the rows to be updated,\n * and a `with` clause to specify the new values. Alternatively, the\n * `data` property can be used to specify updates with plain data only.\n */\nexport class UPDATE { UPDATE: {\n  entity  : ref\n  where?  : expr\n  data    : data\n  with    : changes\n}}\n\n\n/**\n * `DELETE` queries are used to remove data from a target datasource.\n * They support a `where` clause to specify the rows to be deleted.\n */\nexport class DELETE { DELETE: {\n  from    : ref\n  where?  : expr\n}}\n\n\n/**\n * `SELECT` queries are used to retrieve data from a target datasource,\n * and very much resemble SQL's `SELECT` statements, with these noteworthy\n * additions:\n *\n * - The `from` clause supports `{ref}` paths with infix filters.\n * - The `columns` clause supports deeply nested projections.\n * - The `count` property requests the total count, similar to OData's `$count`.\n * - The `one` property indicates that only a single record object shall be\n *   returned instead of an array.\n *\n * Also, CDS, and hence CQN, supports minimalistic `SELECT` statements with a `from`\n * as the only mandatory property, which is equivalent to SQL's `SELECT * from ...`.\n */\nexport class SELECT { SELECT: {\n  distinct?   : true\n  count?      : true\n  one?        : true\n  from        : source\n  columns?    : column[]\n  where?      : xo[]\n  having?     : xo[]\n  groupBy?    : expr[]\n  orderBy?    : order[]\n  limit?      : { rows: val, offset: val }\n}}\n\ntype source = OneOf< ref &as | SELECT | {\n  join : 'inner' | 'left' | 'right'\n  args : [ source, source ]\n  on?  : expr\n}>\n\ntype column = OneOf< '*' | expr &as &cast | ref &as & OneOf<(\n  { expand?: column[] } |\n  { inline?: column[] }\n)> &infix >\n\ntype order = expr & {\n  sort  : 'asc' | 'desc'\n  nulls : 'first' | 'last'\n}\n\n\ninterface changes { [elm:string]: OneOf< scalar | expr | changes | changes[] >}\ninterface data { [elm:string]: OneOf< scalar | data | data[] >}\ninterface as { as?: name }\ninterface cast { cast?: {type:name} }\n\ninterface infix {\n  orderBy?  : order[]\n  where?    : expr\n  limit?    : { rows: val, offset: val }\n}\n\n\n/**\n * Expressions can be entity or element references, query parameters,\n * literal values, lists of all the former, function calls, sub selects,\n * or compound expressions.\n */\nexport type expr  = OneOf< ref | val | xpr | list | func | param | SELECT >\nexport type ref   = { ref: OneOf< name | { id:name &infix } >[] }\nexport type val   = { val: scalar }\nexport type xpr   = { xpr: xo[] }\nexport type list  = { list: expr[] }\nexport type func  = { func: string, args: expr[] }\nexport type param = { ref: [ '?' | number | string ], param: true }\n\n/**\n * This is used in `{xpr}` objects as well as in `SELECT.where` clauses to\n * represent compound expressions as flat `xo` sequences.\n * Note that CQN by intent does not _understand_ expressions and therefore\n * keywords and operators are just represented as plain strings.\n * This allows us to translate to and from any other query languages,\n * including support for native SQL features.\n */\ntype xo       = OneOf< expr | keyword | operator >\ntype operator = '=' | '==' | '!=' | '<' | '<=' | '>' | '>='\ntype keyword  = 'in' | 'like' | 'and' | 'or' | 'not'\ntype scalar   = number | string | boolean | null\ntype name     = string\n\n\n\n// ---------------------------------------------------------------------------\n//  maybe coming later...\n\ndeclare class CREATE { CREATE: {} }\ndeclare class DROP { DROP: {} }\n\n\n// ---------------------------------------------------------------------------\n//  internal helpers...\n\ntype OneOf<U> = Partial<(U extends any ? (k:U) => void : never) extends (k: infer I) => void ? I : never>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom CORS for CAP.js Applications\nDESCRIPTION: Implementation of Cross-Origin Resource Sharing (CORS) configuration for CAP.js applications, allowing specific origins and handling preflight requests. This code should be used in production environments to restrict cross-origin access to trusted domains.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ORIGINS = { 'https://example.com': 1 }\ncds.on('bootstrap', app => app.use ((req, res, next) => {\n  if (req.headers.origin in ORIGINS) {\n    res.set('access-control-allow-origin', req.headers.origin)\n    if (req.method === 'OPTIONS') // preflight request\n      return res.set('access-control-allow-methods', 'GET,HEAD,PUT,PATCH,POST,DELETE').end()\n  }\n  next()\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Java SubmitOrderHandler with Imports\nDESCRIPTION: Full implementation of a Java CAP submitOrder handler including all necessary imports, dependency injection of PersistenceService, and complete order processing logic.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npackage com.sap.capire.bookshop.handlers;\n\nimport org.springframework.stereotype.Component;\nimport com.sap.cds.ql.Select;\nimport com.sap.cds.ql.Update;\nimport com.sap.cds.services.handler.EventHandler;\nimport com.sap.cds.services.handler.annotations.On;\nimport com.sap.cds.services.handler.annotations.ServiceName;\nimport com.sap.cds.services.persistence.PersistenceService;\nimport cds.gen.catalogservice.Books;\nimport cds.gen.catalogservice.Books_;\nimport cds.gen.catalogservice.CatalogService_;\nimport cds.gen.catalogservice.SubmitOrderContext;\n\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\npublic class SubmitOrderHandler implements EventHandler {\n\n  private final PersistenceService persistenceService;\n\n  public SubmitOrderHandler(PersistenceService persistenceService) {\n    this.persistenceService = persistenceService;\n  }\n\n  @On\n  public void onSubmitOrder(SubmitOrderContext context) {\n    Select<Books_> byId = Select.from(cds.gen.catalogservice.Books_.class).byId(context.getBook());\n    Books book = persistenceService.run(byId).single().as(Books.class);\n    if (context.getQuantity() > book.getStock())\n      throw new IllegalArgumentException(context.getQuantity() + \" exceeds stock for book #\" + book.getTitle());\n    book.setStock(book.getStock() - context.getQuantity());\n\n    persistenceService.run(Update.entity(Books_.CDS_NAME).data(book));\n\n    context.setCompleted();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Many-to-Many Associations with Aspects in CDS\nDESCRIPTION: Shows an optimized way to define many-to-many associations using compositions of aspects, reducing model complexity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_12\n\nLANGUAGE: cds\nCODE:\n```\nentity Projects { ...\n  members : Composition of many { key user : Association to Users };\n}\nentity Users { ...\n  projects : Composition of many Projects.members on projects.user = $self;\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Predicates Using CQL Interface in CAP Java\nDESCRIPTION: Demonstrates how to compose predicates using the CQL Interface in a tree-style approach, allowing for more flexible query construction.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_89\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.*;\nimport com.sap.cds.sql.cqn.CqnComparisonPredicate;\n\nCqnValue year = get(\"year\");\nCqnPredicate filter = and(comparison(year, Operator.GE, val(2000)), comparison(year, Operator.LE, val(2010)));\n```\n\n----------------------------------------\n\nTITLE: Custom Service Implementation\nDESCRIPTION: A pattern for creating a custom service implementation by extending the base ApplicationService class. This allows adding custom handlers while preserving the generic functionality.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/app-services.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// srv/admin-service.js\nconst cds = require('@sap/cds')\nmodule.exports = class AdminService extends cds.ApplicationService {\n  init() {\n    // register your handlers ...\n    return super.init()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Synchronous Requests to a Service\nDESCRIPTION: Method to send synchronous requests to a service for execution. Takes method, path, data, and headers as parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nasync function srv.send (\n  method   : string | { method, path?, data?, headers? } | { query, headers? },\n  path?    : string,\n  data?    : object | any,\n  headers? : object\n)\nreturn : result of this.dispatch(req)\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with Node.js in CAP\nDESCRIPTION: This JavaScript code demonstrates how to connect to a remote service and execute queries using CAP's querying API in Node.js. It includes examples of simple and complex queries.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst bupa = await cds.connect.to('API_BUSINESS_PARTNER');\n\nconst { A_BusinessPartner } = bupa.entities;\nconst result = await bupa.run(SELECT(A_BusinessPartner).limit(100));\n\nconst result = await bupa.run(SELECT.from(A_BusinessPartner, bp => {\n    bp('BusinessPartner'),\n    bp.to_BusinessPartnerAddress(addresses => {\n      addresses('*')\n    })\n  }).limit(100));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Handlers in Java CAP Application\nDESCRIPTION: Shows how to implement an event handler in Java using the @After annotation to add discount information to book titles after READ events when stock is greater than 111.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n  @After(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\n  public void addDiscountIfApplicable(List<Books> books) {\n    for (Books book : books) {\n      if (book.getStock() != null && book.getStock() > 111) {\n        book.setTitle(book.getTitle() + \" -- 11% discount!\");\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Testing submitOrder in Node.js CAP Application\nDESCRIPTION: HTTP request for testing the submitOrder functionality in a Node.js CAP application, specifying book ID and quantity with appropriate authentication.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_19\n\nLANGUAGE: http\nCODE:\n```\n### Submit Order\nPOST http://localhost:4004/browse/submitOrder\nContent-Type: application/json\nAuthorization: Basic alice:\n\n{\n  \"book\": 201,\n  \"quantity\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Postfix Projection in CQL\nDESCRIPTION: Demonstrates equivalent queries using standard SQL SELECT and CQL postfix projection syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cql.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name, address.street from Authors\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from Authors { name, address.street }\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Authentication Middleware with cds.User\nDESCRIPTION: Example of creating a custom authentication middleware that sets a dummy user with full privileges by extending the cds.User class and adding it to the current context.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nconst DummyUser = new class extends cds.User { is:()=>true }\nmodule.exports = (req,res,next) => {\n  cds.context.user = new DummyUser('dummy')\n  next()\n}\n```\n\n----------------------------------------\n\nTITLE: Role-Based Access Control with @requires\nDESCRIPTION: Demonstrates how to implement role-based access control using @requires annotation for services and entities\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nannotate BrowseBooksService with @(requires: 'authenticated-user');\nannotate ShopService.Books with @(requires: ['Vendor', 'ProcurementManager']);\nannotate ShopService.ReplicationAction with @(requires: 'system-user');\n```\n\n----------------------------------------\n\nTITLE: Installing CDS Development Kit\nDESCRIPTION: Command to install the @sap/cds-dk package globally, which provides the 'cds' command line interface for CAP development.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g @sap/cds-dk\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing a Manual Database Transaction in CAP JS\nDESCRIPTION: Example of creating, executing, and managing a manual transaction with the database service. The transaction includes reading, creating data, and explicitly committing or rolling back the transaction.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet db = await cds.connect.to('db')\nlet tx = db.tx()\ntry {\n  await tx.run (SELECT.from(Foo))\n  await tx.create (Foo, {...})\n  await tx.read (Foo)\n  await tx.commit()\n} catch(e) {\n  await tx.rollback(e)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Associations in CDS\nDESCRIPTION: Demonstrates how to implement many-to-many associations in CDS using a link entity and two one-to-many associations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\nentity Projects { ...\n  members : Composition of many Members on members.project = $self;\n}\nentity Users { ...\n  projects : Composition of many Members on projects.user = $self;\n}\nentity Members: cuid { // link table\n  project : Association to Projects;\n  user : Association to Users;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing submitOrder Handler in Java CAP Application\nDESCRIPTION: Shows how to implement a submitOrder handler in Java that checks book stock availability, updates the stock, and handles the order completion or error conditions.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\npublic class SubmitOrderHandler implements EventHandler {\n\n  private final PersistenceService persistenceService;\n\n  public SubmitOrderHandler(PersistenceService persistenceService) {\n    this.persistenceService = persistenceService;\n  }\n\n  @On\n  public void onSubmitOrder(SubmitOrderContext context) {\n    Select<Books_> byId = Select.from(cds.gen.catalogservice.Books_.class).byId(context.getBook());\n    Books book = persistenceService.run(byId).single().as(Books.class);\n    if (context.getQuantity() > book.getStock())\n      throw new IllegalArgumentException(context.getQuantity() + \" exceeds stock for book #\" + book.getTitle());\n    book.setStock(book.getStock() - context.getQuantity());\n    persistenceService.run(Update.entity(Books_.CDS_NAME).data(book));\n    context.setCompleted();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a CAP Java Project with CDS Tools\nDESCRIPTION: Alternative approach to create a new CAP Java project using the CDS initialization tools, which creates the project structure in the specified directory.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/getting-started.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncds init <PROJECT-ROOT> --java\n```\n\n----------------------------------------\n\nTITLE: Modifying Order-By Clauses in CQL Statements\nDESCRIPTION: Shows how to add or modify the ORDER BY clause of a query using the Modifier.orderBy method.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_103\n\nLANGUAGE: java\nCODE:\n```\n// query: SELECT from Books where title = 'Capire'\n// copy:  SELECT from Books where title = 'Capire' ORDER BY title desc\n\nCqnSelect copy = CQL.copy(query, new Modifier() {\n   @Override\n   public List<CqnSortSpecification> orderBy(List<CqnSortSpecification> order) {\n      order.add(CQL.get(\"title\").desc());\n      return order;\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js CAP Bookshop Sample\nDESCRIPTION: Command to create a new CAP project with bookshop sample for Node.js\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds init bookshop --add sample\ncd bookshop\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Books Entity with SQL\nDESCRIPTION: This SQL code selects the ID, title, and description from the `Books` entity, aliasing the title as `Title` and the description as `Description`. This is also valid CQL, so it can be used as a stand-in to SQL when talking to databases.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ID, title as Title, descr as Description from Books\n```\n\n----------------------------------------\n\nTITLE: Introspecting Query Result Row Type using rowType Method in CAP Java\nDESCRIPTION: This code snippet demonstrates how to use the rowType method to introspect the structure of a query result. It shows creating a query, executing it, and then examining the result's structure using the Reflection API. The example includes retrieving element names, checking specific element types, and handling non-existent elements.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nCqnSelect query = Select.from(AUTHOR)\n     .columns(a -> a.name().as(\"authorName\"), a -> a.age());\n\nResult result = service.run(query);\n\nCdsStructuredType rowType = result.rowType();\nrowType.elements(); // \"authorName\", \"age\"\nrowType.getElement(\"age\").getType().getQualifiedName();  // \"cds.Integer\"\nrowType.findElement(\"ID\"); // Optional.empty()\n```\n\n----------------------------------------\n\nTITLE: Error Handling Pattern for Preserving Error Origins in CAP.js\nDESCRIPTION: Example of proper error handling that preserves the origin of errors while augmenting them with additional information. This approach ensures that error tracing remains possible while providing context-specific details.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  // something\n} catch (e) {\n  // augment instead of replace details\n  e.message = 'Oh no! ' + e.message\n  e.additionalInfo = 'This is just an example.'\n  // re-throw same object\n  throw e\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers with on, before, after Methods\nDESCRIPTION: Shows comprehensive usage of on, before, and after methods to register event handlers for different entities and events.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nclass BooksService extends cds.ApplicationService {\n  init(){\n    const { Books, Authors } = this.entities\n    this.on ('READ',[Books,Authors], req => {...})\n    this.after ('READ',Books, books => {...})\n    this.after ('each',Books, book => {...})\n    this.before (['CREATE','UPDATE'],Books, req => {...})\n    this.on ('CREATE',Books, req => {...})\n    this.on ('UPDATE',Books, req => {...})\n    this.on ('submitOrder', req => {...})\n    this.before ('*', console.log)\n    return super.init()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CAP Project for Java\nDESCRIPTION: Command to create a new CAP project named 'bookshop' using the cds init command for Java, specifying Maven and a group ID.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds init bookshop --java --java:mvn -DgroupId=com.sap.capire\n```\n\n----------------------------------------\n\nTITLE: SELECT Query TypeScript Definition\nDESCRIPTION: TypeScript class declaration defining the structure of SELECT query objects including optional properties like distinct, count, columns, where clauses etc.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cqn.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass SELECT { SELECT: {\n  distinct?   : true\n  count?      : true\n  one?        : true\n  from        : source\n  columns?    : column[]\n  where?      : xo[]\n  having?     : xo[]\n  groupBy?    : expr[]\n  orderBy?    : order[]\n  limit?      : { rows: val, offset: val }\n}}\n```\n\n----------------------------------------\n\nTITLE: Bulk Upsert with Mixed Entity Creation Approaches\nDESCRIPTION: Shows a bulk upsert operation using different approaches to create entity instances. One entity is created using setter methods while another uses the put method to set properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.BOOKS;\nimport bookshop.Books;\n\nBooks b1 = Books.create(101);\nb1.setTitle(\"Odyssey\");\n\nBooks b2 = Books.create(103);\nb2.put(\"title\", \"Ulysses\");\n\nList<Books> data = Arrays.asList(b1, b2);\n\nCqnUpsert upsert = Upsert.into(BOOKS).entries(data);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using cds.utils Module in JavaScript\nDESCRIPTION: Demonstrates how to import and use common utility functions from the cds.utils module, including UUID generation, URI decoding, and file operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { uuid, read, fs, path, decodeURI } = cds.utils\nlet id = uuid() // generates a new UUID\nlet uri = decodeURI(\"%E0%A4%A\")\nlet json = await fs.promises.readFile( path.join(cds.root,'package.json'), 'utf8')\nlet pkg = await read ('package.json')\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with srv.run Method in TypeScript\nDESCRIPTION: Defines the run method for executing CQN queries, accepting single query objects or arrays of queries and returning the dispatch result.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nasync function srv.run (\n  query : CQN | CQN[]\n)\nreturn : result of this.dispatch(req)\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Read/Update Handlers\nDESCRIPTION: Example of implementing handlers for READ and UPDATE operations on Books and Authors entities using mock data structures.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Books, Authors } = this.entities\nthis.on ('READ',[Books,Authors], req => req.target.data)\nthis.on ('UPDATE',Books, req => {\n  let [ ID ] = req.params\n  return Object.assign (Books.data[ID], req.data)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Event Context Usage in Java\nDESCRIPTION: Demonstrates basic usage of EventContext interface for creating events, setting parameters and handling results.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nEventContext context = EventContext.create(\"myEvent\", null);\n\n// set parameters\ncontext.put(\"parameter1\", \"MyParameter1\");\ncontext.put(\"parameter2\", 2);\n\nsrv.emit(context); // process event\n\n// access return value\nObject result = context.get(\"result\");\n```\n\n----------------------------------------\n\nTITLE: Using Exists Predicate with Target Paths and User Attributes in CAP\nDESCRIPTION: Example demonstrating complex authorization with 'exists' predicate using target paths and user attributes. It shows how to derive authorization from entities connected via n:m relationships.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_19\n\nLANGUAGE: cds\nCODE:\n```\nservice ProductsService @(requires: 'authenticated-user') {\n entity Products @(restrict: [\n   { grant: '*',\n     where: 'exists producers.division[$user.division = name]'}]): cuid {\n    producers : Association to many ProducingDivisions\n                on producers.product = $self;\n  }\n  @readonly entity ProducingDivisions {\n    key product : Association to Products;\n    key division : Association to Divisions;\n  }\n  @readonly entity Divisions : cuid {\n    name : String;\n    producedProducts : Association to many ProducingDivisions\n                       on producedProducts.division = $self;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating an Overly Complex Entity Structure\nDESCRIPTION: Illustrates an overly complex and nested entity structure for Contacts, which should be avoided for simplicity and ease of use.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nentity Contacts {\n  isCompany   : Boolean;\n  companyData : CompanyDetails;\n  personData  : PersonDetails;\n}\ntype CompanyDetails {\n  name : String;\n}\ntype PersonDetails {\n  titles : AcademicTitles;\n  name   : PersonName;\n}\ntype PersonName : {\n  first  : String;\n  last   : String;\n}\ntype AcademicTitles : {\n  primary   : String;\n  secondary : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting CAP Development Server for Java\nDESCRIPTION: Command to start the CAP development server in watch mode for Java projects using Maven.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd srv && mvn cds:watch\n```\n\n----------------------------------------\n\nTITLE: CDS Restricting Read Access to Orders by Auditor\nDESCRIPTION: This CDS code snippet demonstrates how to restrict read access to the `Orders` entity to users with the `Auditor` role who also meet the condition `AuditBy = $user`. This means that only auditors whose `AuditBy` attribute matches the current user can read the order.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\nentity Orders @(restrict: [\n    { grant: 'READ', to: 'Auditor', where: 'AuditBy = $user' }\n  ]) {/*...*/}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Exists Predicate for Domain-Driven Authorization in CAP\nDESCRIPTION: Example showing how to use the 'exists' predicate in a 'where' condition to authorize access to projects based on user membership and role. This pattern allows authorization to be derived from associated entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_18\n\nLANGUAGE: cds\nCODE:\n```\nservice ProjectService @(requires: 'authenticated-user') {\n  entity Projects @(restrict: [\n     { grant: ['READ', 'WRITE'],\n       where: 'exists members[userId = $user and role = `Editor`]' } ]) {\n    members: Association to many Members; /*...*/\n  }\n  @readonly entity Members {\n    key userId  : User;\n    key role: String enum { Viewer; Editor; }; /*...*/\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using cds.compile to Process CDS Models\nDESCRIPTION: The cds.compile function is used to compile models from files or in-memory sources to CSN. It supports different input variants and returns either a Promise or a synchronous value depending on the input type.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cds.compile (\n  model :\n  \t'*', 'file:<filename>' | filenames[] |  // source files\n    CDL string | { CDL strings }           // sources in memory\n  ,\n  options : CSN_flavor | {\n    flavor?    : CSN_flavor,\n    min?       : boolean,\n    docs?      : boolean,\n    locations? : boolean,\n    messages?  : []\n  }\n)\ntype CSN_flavor = 'parsed' | 'inferred'\n```\n\n----------------------------------------\n\nTITLE: Creating Arithmetic Expressions in Java CQL\nDESCRIPTION: Demonstrates how to use CQL.expression to perform arithmetic operations in a query, calculating a discount price.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_96\n\nLANGUAGE: java\nCODE:\n```\n// CQL: SELECT from Books { *, price - 5 as discountPrice }\n\nCqnSelectListValue discountPrice = CQL.expression(\n   CQL.get(\"price\"), Operator.SUB, CQL.val(5)).as(\"discountPrice\"); // Price reduced by 5\nSelect.from(\"bookshop.Books\").columns(CQL.star(), discountPrice);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CDS Design-time APIs in JavaScript\nDESCRIPTION: Example of how to import and use the CDS design-time APIs in a JavaScript project after installing @sap/cds-dk. It shows the basic syntax for requiring the package and using the cds.import() function.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/index.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst cds = require('@sap/cds-dk')\ncds.import(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring XSUAA Application in xs-security.json\nDESCRIPTION: JSON configuration in xs-security.json for XSUAA application settings, including application name and tenant mode.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"xsappname\": \"bookshop-hybrid\",\n  \"tenant-mode\": \"dedicated\",\n  ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Performing Outbound Communication with JavaScript\nDESCRIPTION: This code snippet illustrates how to perform outbound communication in CAP using JavaScript. It demonstrates how to connect to a service (SomeService) and then emit an event (SomeEvent), send a request (SomeRequest), or read an entity (SomeEntity) with a specified condition.  `cds.connect.to` connects to the specified service, enabling subsequent communication.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst any = await cds.connect.to('SomeService')\nawait any.emit ('SomeEvent', {...data})\nawait any.send ('SomeRequest', {...data})\nawait any.read ('SomeEntity').where({ID:4711})\n```\n\n----------------------------------------\n\nTITLE: Testing Authenticated Endpoints\nDESCRIPTION: Example demonstrating how to set user credentials for testing authenticated endpoints using the basic authentication mechanism.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait GET('/admin/Books', { auth: { username: 'alice', password: '' } })\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic CAP Server in Node.js\nDESCRIPTION: Code example of the built-in server.js implementation that bootstraps CAP services. It creates an Express app, loads and compiles models, connects to services, and starts the HTTP server.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-server.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nmodule.exports = async function cds_server(options) {\n\n  // prepare express app\n  const o = { ...options, __proto__:defaults }\n  const app = cds.app = o.app || require('express')()\n  cds.emit ('bootstrap', app)\n\n  // mount static resources and middlewares\n  if (o.cors)      app.use (o.cors)                     //> if not in prod\n  if (o.health)    app.get ('/health', o.health)\n  if (o.static)    app.use (express.static (o.static))  //> defaults to ./app\n  if (o.favicon)   app.use ('/favicon.ico', o.favicon)  //> if none in ./app\n  if (o.index)     app.get ('/',o.index)                //> if none in ./app and not in prod\n\n  // load and prepare models\n  const csn = await cds.load('*') .then (cds.minify)\n  cds.model = cds.compile.for.nodejs (csn)\n  cds.emit ('loaded', cds.model)\n\n  // connect to essential framework services\n  if (cds.requires.db) cds.db = await cds.connect.to ('db') .then (_init)\n  if (cds.requires.messaging)   await cds.connect.to ('messaging')\n\n  // serve all services declared in models\n  await cds.serve ('all') .in (app)\n  await cds.emit ('served', cds.services)\n\n  // start http server\n  const port = o.port || process.env.PORT || 4004\n  return app.server = app.listen (port)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Basic CQL Query with CqnService in Java\nDESCRIPTION: Demonstrates how to create a basic CQL select query and execute it using the run method of a CqnService. The query selects the title and price columns from the bookshop.Books entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCqnService service = ...\n\nCqnSelect query = Select.from(\"bookshop.Books\")\n    .columns(\"title\", \"price\");\n\nResult result = service.run(query);\n```\n\n----------------------------------------\n\nTITLE: Defining Entity and Custom Types in CDS\nDESCRIPTION: Example showing how to define an entity with various built-in types and a custom type declaration. Demonstrates usage of UUID, String, Integer, and custom Decimal type.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/types.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nentity Books {\n  key ID : UUID;\n  title  : String(111);\n  stock  : Integer;\n  price  : Price;\n}\ntype Price : Decimal;\n```\n\n----------------------------------------\n\nTITLE: Project Structure for CAP Microservices Monorepo\nDESCRIPTION: Illustrates the directory structure of a CAP microservices monorepo, showing how individual services are organized with a common package.json at the root. The structure supports both direct folders and git submodules.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n<PROJECT-ROOT>/\n├─ bookstore/\n├─ orders/\n├─ reviews/\n├─ ...\n└─ package.json\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Service Projection in Node.js\nDESCRIPTION: This code implements a handler function in Node.js to delegate a query to a remote service. It connects to the external API_BUSINESS_PARTNER service and handles READ operations on the BusinessPartners entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = cds.service.impl(async function() {\n  const bupa = await cds.connect.to('API_BUSINESS_PARTNER');\n\n  this.on('READ', 'BusinessPartners', req => {\n      return bupa.run(req.query);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CDS Service Authentication\nDESCRIPTION: Example CDS model demonstrating service-level and entity-level authentication requirements using the @requires annotation. Shows how to configure public access and role-based restrictions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/security.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nservice BooksService @(requires: 'any') {\n  @readonly\n  entity Books @(requires: 'any') {...}\n\n  entity Reviews {...}\n\n  entity Orders @(requires: 'Customer') {...}\n}\n```\n\n----------------------------------------\n\nTITLE: UPSERT Query Example in JavaScript\nDESCRIPTION: Example of creating an UPSERT statement using the CAP.js query API. This demonstrates how to specify the target entity and provide data for upserting a record, which will either update an existing record or insert a new one based on the key values.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/databases.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nUPSERT.into('db.Books')\n  .entries({ ID: 4711, title: 'Wuthering Heights', stock: 100 })\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP APIs with GET/POST Methods\nDESCRIPTION: Example showing how to test HTTP endpoints using the bound functions GET and POST provided by cds.test.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { GET, POST } = cds.test(...)\nconst { data } = await GET ('/browse/Books')\nawait POST (`/browse/submitOrder`, { book: 201, quantity: 5 })\n```\n\n----------------------------------------\n\nTITLE: Efficient View Building with Projection (Good Practice)\nDESCRIPTION: This snippet shows an efficient way to create a view using a projection on OrdersHeaders. This approach allows for dynamic querying and avoids unnecessary JOINs, improving performance.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nentity OrderItemsViewAssoc as projection on OrdersHeaders;\n```\n\n----------------------------------------\n\nTITLE: Customization in CDS\nDESCRIPTION: This snippet demonstrates how CDS supports customization for SaaS scenarios, allowing customers to extend existing models for their private usage.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\n// SaaS customers can do the same for their private usage:\nusing { Books } from '@capire/bookshop';\nextend Books with { ISBN: String }\n```\n\n----------------------------------------\n\nTITLE: Preventing SQL Injection in Java CAP Application\nDESCRIPTION: This snippet shows how to safely handle user input when constructing CQL queries in a Java CAP application to prevent SQL injection attacks.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/aspects.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString entity = ...; // from user input;\nString column = ...; // from user input;\nvalidate(entity, column); // for example, by comparing with positive list\nSelect.from(entity).columns(b -> b.get(column));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication in JavaScript\nDESCRIPTION: JavaScript implementation of a custom authentication middleware that sets user context and tenant information for CAP.js applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function custom_auth (req, res, next) {\n  // do your custom authentication\n  cds.context.user = new cds.User({\n    id: '<user-id>',\n    roles: ['<role-a>', '<role-b>'],\n    attr: {\n      <user-attribute-a>: '<value>',\n      <user-attribute-b>: '<value>'\n    }\n  })\n  cds.context.tenant = '<tenant>'\n}\n```\n\n----------------------------------------\n\nTITLE: Searched Update in CAP Java\nDESCRIPTION: This snippet shows how to perform a searched update, which updates all entities matching a specific condition with the same data. It demonstrates updating the stock of books with titles containing 'CAP'.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nUpdate.entity(BOOKS).data(\"stock\", 100)\n   .where(b -> b.title().contains(\"CAP\"));\n```\n\n----------------------------------------\n\nTITLE: Building and Running a CAP Java Project\nDESCRIPTION: Command to build and run a CAP Java project using Spring Boot Maven plugin, which compiles the Java code, processes the CDS models, and starts the application.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/getting-started.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: CDS Service Definition with Combined Restrictions\nDESCRIPTION: This CDS code demonstrates how restrictions are combined at the service and entity levels.  The `CustomerService` requires `authenticated-user`, and the `Products` entity has additional restrictions for `READ`, `WRITE`, and `addRating`. The `Orders` entity has a restriction for `Customer` users to only access instances they created.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\nservice CustomerService @(requires: 'authenticated-user') {\n  entity Products @(restrict: [\n    { grant: 'READ' },\n    { grant: 'WRITE', to: 'Vendor' },\n    { grant: 'addRating', to: 'Customer'}\n  ]) {/*...*/}\n  actions {\n     action addRating (stars: Integer);\n  }\n  entity Orders @(restrict: [\n    { grant: '*', to: 'Customer', where: 'CreatedBy = $user' }\n  ]) {/*...*/}\n  action monthlyBalance @(requires: 'Vendor') ();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Strategy in package.json\nDESCRIPTION: Configuration examples for setting different authentication strategies (jwt, dummy, mocked, basic) in package.json using the cds.requires.auth configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"auth\": \"jwt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Events with Audit Log Service\nDESCRIPTION: JavaScript code to log custom events using the audit log service in a CAP application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait audit.log('Foo', { bar: 'baz' })\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions in Java CQL\nDESCRIPTION: Shows how to use built-in functions like min and max to calculate aggregate values from the Books entity columns.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_93\n\nLANGUAGE: java\nCODE:\n```\n// CQL: SELECT from Books { MIN(stock) as minStock, MAX(stock) as maxStock }\n\nCqnElementRef stock = CQL.get(\"stock\");\nSelect.from(\"bookshop.Books\").columns(\n   CQL.min(stock).as(\"minStock\"),\n   CQL.max(stock).as(\"maxStock\"));\n```\n\n----------------------------------------\n\nTITLE: Using Type-Only and Dynamic Imports in TypeScript Services\nDESCRIPTION: Shows TypeScript-specific patterns for working with model types, including type-only imports for annotations and dynamic import expressions for runtime use within service implementations.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\n// ❌ works during design time, but will cause runtime errors\nimport { Book } from '#cds-models/sap/capire/bookshop'\n// ✅ works during design time, but is fully erased during runtime\nimport type { Book } from '#cds-models/sap/capire/bookshop'\n\nclass CatalogService extends cds.ApplicationService { async init(){\n  // ✅ works both at design time and at runtime\n  const { Book } = await import('#cds-models/sap/capire/bookshop')\n}}\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Entity Models\nDESCRIPTION: This CDS code defines entity models for Books, Authors, Orders, OrderHeaders, and OrderItems, showcasing various relationships like associations and compositions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nentity Books {\n    key ID     : Integer;\n        title  : String;\n        author : Association to one Authors;\n}\n\nentity Authors {\n    key ID    : Integer;\n        name  : String;\n        books : Association to many Books on books.author = $self;\n}\n\nentity Orders {\n    key ID     : Integer;\n        header : Composition of one  OrderHeaders;\n        items  : Composition of many OrderItems;\n}\n\nentity OrderHeaders {\n    key ID     : Integer;\n        status : String;\n}\n\naspect OrderItems {\n    key ID     : Integer;\n        book   : Association to one Books;\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Testing submitOrder in Java CAP Application\nDESCRIPTION: HTTP request for testing the submitOrder functionality in a Java CAP application, specifying book ID and quantity with appropriate authentication.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_20\n\nLANGUAGE: http\nCODE:\n```\n### Submit Order\nPOST http://localhost:8080/odata/v4/browse/submitOrder\nContent-Type: application/json\nAuthorization: Basic authenticated:\n\n{\n  \"book\": 201,\n  \"quantity\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CDS Plugin in JavaScript\nDESCRIPTION: Shows how to create a basic cds-plugin.js file that registers to lifecycle events using the cds facade object.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-plugins.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.on('served', ()=>{ ... })\n```\n\n----------------------------------------\n\nTITLE: Separating UI Annotations into a Dedicated File (Preferred)\nDESCRIPTION: Factoring out UI annotations into a separate file to maintain a clean domain model. This approach follows the separation of concerns principle in Aspect-Oriented Modeling.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nusing { CatalogService } from '../srv/cat-service';\n\n// Annotations for List Pages\nannotate CatalogService.Books with @UI:{\n  SelectionFields: [\n    ID, price, currency_code\n  ],\n  LineItem: [\n    { Value: ID, Label: '{i18n>Title}' },\n    { Value: author, Label : '{i18n>Author}' },\n    { Value: genre.name},\n    { Value: price},\n    { Value: currency.symbol},\n  ]\n}\n\n// Annotations for Object Pages\nannotate CatalogService.Books with @UI:{\n  HeaderInfo: {\n    TypeName       : '{i18n>Book}',\n    TypeNamePlural : '{i18n>Books}',\n    Description    : { Value: author }\n  },\n  HeaderFacets: [{\n    $Type  : 'UI.ReferenceFacet',\n    Label  : '{i18n>Description}',\n    Target : '@UI.FieldGroup#Descr'\n  }],\n  Facets: [{\n    $Type  : 'UI.ReferenceFacet',\n    Label  : '{i18n>Details}',\n    Target : '@UI.FieldGroup#Price'\n  }],\n  FieldGroup #Descr : { Data: [{Value : descr}, ]},\n  FieldGroup #Price : { Data: [\n    { Value: price},\n    { Value: currency.symbol, Label: '{i18n>Currency}' },\n  ]}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocked Authentication with Custom Users\nDESCRIPTION: Advanced configuration for mocked authentication with custom user definitions including passwords, roles, and attributes in package.json.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"auth\": {\n      \"kind\": \"mocked\",\n      \"users\": {\n        \"<user.id>\": {\n          \"password\": \"<password>\",\n          \"roles\": [ \"<role-name>\", ... ],\n          \"attr\": { ... }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Entity with CDS\nDESCRIPTION: Demonstrates how to define a basic 'Books' entity using CDS, incorporating pre-defined aspects and managed associations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nusing { cuid, managed } from '@sap/cds/common';\nentity Books : cuid, managed {\n   title  : localized String;\n   descr  : localized String;\n   author : Association to Authors;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Parameterized Views on SAP HANA in Java\nDESCRIPTION: Demonstrates how to query a parameterized view on SAP HANA by providing parameter values that correspond to the view's defined parameters. The example queries a BooksView that filters books by a minimum stock level.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCqnSelect query = Select.from(\"BooksView\");\nvar params = Map.of(\"minStock\", 100);\n\nResult result = service.run(query, params);\n```\n\n----------------------------------------\n\nTITLE: Adding Capabilities to CAP Projects\nDESCRIPTION: Command demonstrating how to add various features and capabilities to an existing CAP project as needed. This follows the 'grow as you go' philosophy where components are added only when required.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/index.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds add hana,redis,mta,helm,mtx,multitenancy,extensibility...\n```\n\n----------------------------------------\n\nTITLE: Defining Read-only and Insert-only Entities in CAP Service\nDESCRIPTION: Example showing how to restrict entity operations using @readonly and @insertonly annotations in a CAP service definition\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nservice BookshopService {\n  @readonly entity Books {...}\n  @insertonly entity Orders {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Using I/O Streams in Queries with Annotated Binary Fields\nDESCRIPTION: Demonstrates how to handle binary data in CAP Java using I/O streams. The example shows how to insert a book record with a cover image stored as a binary stream from a file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_20\n\nLANGUAGE: cds\nCODE:\n```\nentity Books {\n  key ID : Integer;\n  title  : String;\n  ...\n  @Core.MediaType\n  coverImage : LargeBinary;\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n// Transaction started\n\nResult result;\ntry (InputStream resource = getResource(\"IMAGE.PNG\")) {\n    Map<String, Object> book = new HashMap<>();\n    book.put(\"title\", \"My Fancy Book\");\n    book.put(\"coverImage\", resource);\n\n    CqnInsert insert = Insert.into(\"bookshop.Books\").entry(book);\n    result = service.run(insert);\n}\n\n// Transaction finished\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers with Different Annotation Patterns in CAP Java SDK\nDESCRIPTION: Examples of different event handler registration patterns using @Before, @On, and @After annotations. Demonstrates registering for multiple events, overriding default service, and using String constants for event and entity names.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// registers on multiple events\n@Before(event = { \"CREATE\", \"UPDATE\" }, entity = \"AdminService.Books\")\n\n// overrides the default service on class-level\n// registers on any entity\n@On(service = \"CatalogService\", event = \"READ\")\n\n// usage of String constants is recommended\n@After(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\n```\n\n----------------------------------------\n\nTITLE: Using Dedicated Actions for Specific Use-Cases in CAP Authorization\nDESCRIPTION: Example showing how to restrict entity access and create actions with dedicated permissions for specific use cases. This provides finer-grained control than broad entity-level permissions.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_23\n\nLANGUAGE: cds\nCODE:\n```\nservice GitHubRepositoryService @(requires: 'authenticated-user') {\n  @readonly entity Organizations as projection on GitHub.Organizations actions {\n    @(requires: 'Admin') action rename(newName : String);\n    @(requires: 'Admin') action delete();\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Spring Security Filter Chain\nDESCRIPTION: Demonstrates how to create a custom Spring security configuration to allow public access to specific endpoints matching '/public/**'. Uses SecurityFilterChain with higher priority than default CAP security config.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/security.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableWebSecurity\n@Order(1) // needs to have higher priority than CAP security config\npublic class AppSecurityConfig {\n\n  @Bean\n  public SecurityFilterChain appFilterChain(HttpSecurity http) throws Exception {\n    return http\n      .securityMatcher(AntPathRequestMatcher.antMatcher(\"/public/**\"))\n      .csrf(c -> c.disable()) // don't insist on csrf tokens in put, post etc.\n      .authorizeHttpRequests(r -> r.anyRequest().permitAll())\n      .build();\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Securing CAP Application with Helmet Middleware\nDESCRIPTION: Example of how to secure a CAP application by mounting the helmet middleware using the bootstrapping mechanism. This adds various HTTP headers to enhance security.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// local ./server.js\nconst cds = require('@sap/cds')\nconst helmet = require('helmet')\n\ncds.on('bootstrap', app => {\n  app.use(helmet())\n})\n\nmodule.exports = cds.server // > delegate to default server.js\n```\n\n----------------------------------------\n\nTITLE: Defining Temporal Entities for Work Assignments and Departments in CDS\nDESCRIPTION: This snippet demonstrates how to define temporal entities for WorkAssignments and Departments using the '@sap/cds/common' temporal aspect.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nusing { temporal } from '@sap/cds/common';\nentity WorkAssignments : temporal {/*...*/\n  dept : Association to Departments;\n}\nentity Departments : temporal {/*...*/}\n```\n\n----------------------------------------\n\nTITLE: Sending Queries and Events to a Service\nDESCRIPTION: Shows different ways to send queries, requests, and events to a service for consumption.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait srv.read('Books')       //> READ Service.Books\nawait srv.send('foo',{bar:1}) //> foo {bar:1}\nawait srv.emit('foo',{bar:1}) //> foo {bar:1} //> foo\nawait srv.emit('bar')         //> bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Requests in OData Batch for Java CAP Applications\nDESCRIPTION: Configuration settings to limit the number of requests in OData batches for Java CAP applications, which helps prevent denial-of-service attacks. These settings can be applied to both OData V4 and V2 protocols.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/aspects.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ncds.odataV4.batch.maxRequests = <max_requests>\n```\n\nLANGUAGE: java\nCODE:\n```\ncds.odataV2.batch.maxRequests = <max_requests>\n```\n\n----------------------------------------\n\nTITLE: Using anyMatch Predicate in CAP Java CQL Query\nDESCRIPTION: Demonstrates the use of anyMatch predicate to select authors based on conditions applied to their associated books.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_82\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.AUTHORS;\n\nSelect.from(AUTHORS)\n  .where(a -> a.books().anyMatch(b ->\n    b.year().eq(2000).and(b.publisher().name().startsWith(\"X\"))));\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Data Model in CDS\nDESCRIPTION: This snippet demonstrates how to define a simple domain data model using CDS (Core Data Services) language. It includes entity definitions for Books and Authors with associations between them.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nusing { Country, cuid, managed } from '@sap/cds/common';\n\nentity Books : cuid, managed {\n  title  : localized String;\n  author : Association to Authors;\n}\n\nentity Authors : cuid, managed {\n  name    : String;\n  books   : Association to many Books on books.author = $self;\n  country : Country;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pessimistic Locking in CAP Java\nDESCRIPTION: Demonstrates how to use pessimistic locking in a transaction to prevent concurrent modification of the same data resource. The example shows locking a book record, updating it, and completing the transaction.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n// Start transaction\n// Obtain and set a write lock on the book with id 1\n\tservice.run(Select.from(\"bookshop.Books\").byId(1).lock());\n\t...\n// Update the book locked earlier\n\tMap<String, Object> data = Collections.singletonMap(\"title\", \"new title\");\n\tservice.run(Update.entity(\"bookshop.Books\").data(data).byId(1));\n// Finish transaction\n```\n\n----------------------------------------\n\nTITLE: Basic Event Handling in CAP Service\nDESCRIPTION: Demonstrates basic event emission and handling in a CAP service using the cds.Service class. Shows how to register multiple event listeners and emit events with payload data.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet srv = new cds.Service\n// Receiving Events\nsrv.on ('some event', msg => console.log('1st listener received:', msg))\nsrv.on ('some event', msg => console.log('2nd listener received:', msg))\n// Emitting Events\nawait srv.emit ('some event', { foo:11, bar:'12' })\n```\n\n----------------------------------------\n\nTITLE: Promise-based Transaction Handling in CAP JS\nDESCRIPTION: Shows how to handle transaction commit and rollback using promise chaining, allowing for more concise transaction management code.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = cds.tx()\ntx.run(...) .then (tx.commit, tx.rollback)\n```\n\n----------------------------------------\n\nTITLE: Integrating Remote into Local Services in CDS\nDESCRIPTION: This CDS code demonstrates how to combine local and remote services using associations. It defines a local Risks entity with a managed association to the remote Suppliers entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_34\n\nLANGUAGE: cds\nCODE:\n```\n@path: 'service/risk'\nservice RiskService {\n  entity Risks : managed {\n    key ID      : UUID  @(Core.Computed : true);\n    title       : String(100);\n    prio        : String(5);\n    supplier    : Association to Suppliers;\n  }\n\n  entity Suppliers as projection on BusinessPartner.A_BusinessPartner {\n    key BusinessPartner as ID,\n    BusinessPartnerFullName as fullName,\n    BusinessPartnerIsBlocked as isBlocked,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Propagating Request Context to Child Threads in CAP Java SDK\nDESCRIPTION: This code demonstrates how to propagate the parent request context to a child thread using RequestContextRunner. It ensures that all parameters from the parent context are available in the spawned thread, which is crucial for operations like authorization and database connections.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/request-contexts.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nRequestContextRunner runner = runtime.requestContext();\nFuture<Result> result = Executors.newSingleThreadExecutor().submit(() -> {\n\treturn runner.run(threadContext -> {\n\t\treturn persistenceService.run(Select.from(Books_.class));\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Modeling Document Structures in CDS\nDESCRIPTION: Demonstrates how to model document structures using compositions between Orders and OrderItems entities. The OrderItems are fully dependent objects of Orders.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_13\n\nLANGUAGE: cds\nCODE:\n```\nentity Orders { ...\n  Items : Composition of many OrderItems on Items.parent = $self;\n}\nentity OrderItems { // to be accessed through Orders only\n  key parent : Association to Orders;\n  key pos    : Integer;\n  quantity   : Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Polymorphism with a De-normalized Entity (Good Practice)\nDESCRIPTION: This example shows an alternative approach to modeling polymorphism using a de-normalized entity. This results in a single, sparsely populated DB table, which can be efficiently handled by modern databases.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\naspect apple  { appleDetails  : appleDetailsType; };\naspect banana { bananaDetails : bananaDetailsType;};\naspect cherry { cherryDetails : cherryDetailsType;};\naspect mango  { mangoDetails  : mangoDetailsType; };\nentity Fruit : apple, banana, cherry, mango, cuid, managed {\n    type        : String enum { apple; banana; cherry; mango };\n    description : String;\n    vendor      : Association to one Vendor;\n}\n```\n\n----------------------------------------\n\nTITLE: Database Reset for Tests\nDESCRIPTION: Methods for resetting and redeploying the database before each test execution using beforeEach hooks.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test } = cds.test()\nbeforeEach (test.data.reset)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach (async()=>{\n  await test.data.reset() // [!code focus]\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OData Capabilities Restrictions\nDESCRIPTION: Demonstrates how to use @Capabilities annotation to define granular operation restrictions on entities\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nservice SomeService {\n  @Capabilities: {\n    InsertRestrictions.Insertable: true,\n    UpdateRestrictions.Updatable: true,\n    DeleteRestrictions.Deletable: false\n  }\n  entity Foo { key ID : UUID }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Namespaces in CDS\nDESCRIPTION: Demonstrates how to use namespaces in CDS to create unique names without using fully qualified names throughout the code.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nnamespace foo.bar;\nentity Boo {}\nentity Moo : Boo {}\n```\n\n----------------------------------------\n\nTITLE: Overriding Generic Handlers in Custom Services\nDESCRIPTION: Example of how to override a specific generic handler in a custom service implementation. This approach allows modifying or extending specific functionality while maintaining others.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/app-services.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nclass YourService extends cds.ApplicationService {\n  static handle_validations() {\n    // Note: this is an instance of YourService here:\n    this.on('CREATE','*', req => {...})\n    return super.handle_validations()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Association Paths in CAP Authorization Rules\nDESCRIPTION: Example showing how to use CQL path expressions in where-conditions that navigate to elements of associated entities for authorization purposes. This allows filtering based on associated entity properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_20\n\nLANGUAGE: cds\nCODE:\n```\nservice SalesOrderService @(requires: 'authenticated-user') {\n  entity SalesOrders @(restrict: [\n     { grant: 'READ',\n       where: 'product.productType = $user.productType' } ]) {\n    product: Association to one Products;\n  }\n  entity Products {\n    productType: String(32); /*...*/\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Delete Operations with Static Entity References in Java\nDESCRIPTION: Shows how to construct a DELETE statement using statically imported entity references with a WHERE clause filter.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_44\n\nLANGUAGE: java\nCODE:\n```\n// static\nimport static bookshop.Bookshop_.ORDERS;\n\nCqnDelete delete = Delete.from(ORDERS)\n    .where(b -> b.OrderNo().eq(1000));\n```\n\n----------------------------------------\n\nTITLE: Separating Service Definitions from Authorization in CDS\nDESCRIPTION: Demonstrates the separation of concerns pattern using CDS Aspects to keep service definitions separate from authorization annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_26\n\nLANGUAGE: cds\nCODE:\n```\nservice ReviewsService {\n  /*...*/\n}\n\nservice CustomerService {\n  entity Orders {/*...*/}\n  entity Approval {/*...*/}\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Managed Type Model in CDS\nDESCRIPTION: Extends the common managed type from @sap/cds/common to add change history tracking functionality with timestamps, authors, and notes.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_21\n\nLANGUAGE: cds\nCODE:\n```\nusing { User, managed } from '@sap/cds/common';\nextend managed with {\n  ChangeNotes : Composition of many {\n    key timestamp : DateTime;\n    author : User;\n    note : String(1000);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Draft Services Example in Java\nDESCRIPTION: Demonstrates usage of Draft Service APIs including creating, patching, saving, reading, and editing drafts. Shows complete lifecycle of draft entity management.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/fiori-drafts.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.ORDERS;\n\nDraftService adminService = ...;\n// create draft\nOrders order = adminService.newDraft(Insert.into(ORDERS)).single(Orders.class);\n// set values\norder.setOrderNo(\"DE-123456\");\n// patch draft\nadminService.patchDraft(Update.entity(ORDERS).data(order)\n    .where(o -> o.ID().eq(order.getId()).and(o.IsActiveEntity().eq(false))));\n// save draft\nCqnSelect orderDraft = Select.from(ORDERS)\n    .where(o -> o.ID().eq(order.getId()).and(o.IsActiveEntity().eq(false)));\nadminService.saveDraft(orderDraft);\n// read draft\nOrders draftOrder = adminService.run(orderDraft).single().as(Order.class);\n// put draft back to edit mode\nCqnSelect orderActive = Select.from(ORDERS)\n    .where(o -> o.ID().eq(order.getId()).and(o.IsActiveEntity().eq(true)));\nadminService.editDraft(orderActive, true);\n// read entities in draft mode and activated entities\nadminService.run(Select.from(ORDERS).where(o -> o.ID().eq(order.getId())));\n```\n\n----------------------------------------\n\nTITLE: Starting a CAP Server with NPM Scripts\nDESCRIPTION: Configuration for package.json scripts to start a CAP server in production environments using the cds-serve binary from @sap/cds package instead of the cds CLI command.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-server.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"cds-serve\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity-Relationship Model for a Bookshop\nDESCRIPTION: Illustrates how to translate a bookshop requirement into a CDS domain model with entities for Books, Authors, and an enumeration for Genre.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nusing { cuid } from '@sap/cds/common';\n\nentity Books : cuid {\n  title  : String;\n  descr  : String;\n  genre  : Genre;\n  author : Association to Authors;\n}\n\nentity Authors : cuid {\n  name   : String;\n  books  : Association to many Books on books.author = $self;\n}\n\ntype Genre : String enum {\n  Mystery; Fiction; Drama;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Validation with before Handlers\nDESCRIPTION: Shows how to use before handlers for validating user input, including checking stock levels and order quantities.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nthis.before ('UPDATE',Books, req => {\n  const { stock } = req.data\n  if (stock < 0) req.error `${{ stock }} must be >= ${0}`\n})\nthis.before ('submitOrder', req => {\n  const { quantity } = req.data\n  if (quantity > 11) req.error `${{ quantity }} must not exceed ${11}`\n})\n```\n\n----------------------------------------\n\nTITLE: Using Expand for Deep Reading in CQL Select Statements (Java)\nDESCRIPTION: Shows how to use the expand method for deep reading in CQL select statements. This example expands the books association of authors, including specific book properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.AUTHORS;\n\nSelect.from(AUTHORS)\n    .columns(a -> a.name().as(\"author\"),\n             a -> a.books().expand(\n                      b -> b.title().as(\"book\"),\n                      b -> b.year()));\n```\n\n----------------------------------------\n\nTITLE: Modelling Custom Projection on Remote Entity in CDS\nDESCRIPTION: This CDS code demonstrates how to create a custom projection on a remote entity. It defines a Suppliers entity with renamed and subset fields from the remote A_BusinessPartner entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_30\n\nLANGUAGE: cds\nCODE:\n```\nusing { API_BUSINESS_PARTNER as bupa } from '../srv/external/API_BUSINESS_PARTNER';\n\nextend service RiskService with {\n  entity Suppliers as projection on bupa.A_BusinessPartner {\n    key BusinessPartner as ID,\n    BusinessPartnerFullName as fullName,\n    BusinessPartnerIsBlocked as isBlocked\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Handlers for Draft and Active Entities in JavaScript\nDESCRIPTION: Examples of how to register handlers for CRUD operations and bound actions/functions on both active and draft entities using the ApplicationService class.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/fiori.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// only active entities\nsrv.on(['CREATE', 'READ', 'UPDATE', 'DELETE'], 'MyEntity', /*...*/)\n// only draft entities\nsrv.on(['CREATE', 'READ', 'UPDATE', 'DELETE'], 'MyEntity.drafts', /*...*/)\n// bound action/function on active entity\nsrv.on('boundActionOrFunction', 'MyEntity', /*...*/)\n// bound action/function on draft entity\nsrv.on('boundActionOrFunction', 'MyEntity.drafts', /*...*/)\n```\n\n----------------------------------------\n\nTITLE: Testing CAP Service Layer Event Handler\nDESCRIPTION: Shows how to test an event handler by emitting a SubmitOrderContext to verify stock reduction logic. Tests successful order submission with quantity validation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/testing.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootTest\npublic class CatalogServiceTest {\n\n    @Autowired\n    @Qualifier(CatalogService_.CDS_NAME)\n    private CqnService catalogService;\n\n    @Test\n    public void submitOrder() {\n        SubmitOrderContext context = SubmitOrderContext.create();\n\n        // ID of a book known to have a stock quantity of 22\n        context.setBook(\"4a519e61-3c3a-4bd9-ab12-d7e0c5329933\");\n        context.setQuantity(2);\n        catalogService.emit(context);\n\n        assertEquals(22 - context.getQuantity(), context.getResult().getStock());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Authorization Annotations in Separate CDS File\nDESCRIPTION: Shows how to apply authorization annotations in a separate CDS file, keeping service definitions clean while maintaining proper access control.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_27\n\nLANGUAGE: cds\nCODE:\n```\nservice ReviewsService @(requires: 'authenticated-user'){\n  /*...*/\n}\n\nservice CustomerService @(requires: 'authenticated-user'){\n  entity Orders @(restrict: [\n    { grant: ['READ','WRITE'], to: 'admin' },\n    { grant: 'READ', where: 'buyer = $user' },\n  ]){/*...*/}\n  entity Approval @(restrict: [\n    { grant: 'WRITE', where: '$user.level > 2' }\n  ]){/*...*/}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a CAP Project\nDESCRIPTION: Commands for creating and running a new CAP project. 'cds init' creates a new project with default structure, while 'cds watch' starts the development server with live reload capabilities.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/index.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds init\ncds watch\n```\n\n----------------------------------------\n\nTITLE: Creating a CAP Java Project with Maven Archetype\nDESCRIPTION: Command to bootstrap a new CAP Java project using the Maven archetype. This initializes a project with the necessary structure and dependencies for CAP Java development.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/getting-started.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmvn archetype:generate -DarchetypeArtifactId=\"cds-services-archetype\" -DarchetypeGroupId=\"com.sap.cds\" -DarchetypeVersion=\"RELEASE\" -DinteractiveMode=true\n```\n\n----------------------------------------\n\nTITLE: Defining Actions and Functions in CAP JS\nDESCRIPTION: Demonstrates how to define bound and unbound actions/functions within a service, including parameters and return types.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'OrderService': {kind:\"service\"},\n  'OrderService.Orders': {kind:\"entity\", elements:{...}, actions:{\n    'validate': {kind:\"function\",\n      returns: {type: \"cds.Boolean\"}\n    }\n  }},\n  'OrderService.cancelOrder': {kind:\"action\",\n      params:{\n        'orderID': {type:\"cds.Integer\"},\n        'reason':  {type:\"cds.String\"},\n      },\n      returns: {elements:{\n        'ack': {enum:{ 'succeeded':{}, 'failed':{} }},\n        'msg': {type:\"cds.String\"},\n      }}\n    }\n  }}\n}})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Error Handler\nDESCRIPTION: Example of implementing a custom error handler that modifies error messages before they are sent to clients.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nthis.on ('error', (err, req) => {\n  err.message = 'Oh no! ' + err.message\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Row Results in CAP Java\nDESCRIPTION: Shows how to access single row results from queries that are expected to return exactly one row or potentially one row. Demonstrates the single() and first() methods.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nResult result = ...\n\nRow row = result.single();\n```\n\nLANGUAGE: java\nCODE:\n```\nResult result = ...\n\nOptional<Row> row = result.first();\nrow.ifPresent(r -> System.out.println(r.get(\"title\")));\n```\n\n----------------------------------------\n\nTITLE: Specifying Message Targets in CRUD Events\nDESCRIPTION: Java code demonstrating how to specify message targets in CRUD event handlers, using both generic and typed APIs provided by CAP Java SDK.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Before\npublic void validateTitle(CdsCreateEventContext context, Books book) {\n    // ...\n\n    // implicitly referring to cqn\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(b -> b.get(\"title\"));\n\n    // which is equivalent to explicitly referring to cqn\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(\"cqn\", b -> b.get(\"title\"));\n\n    // which is the same as using plain string\n    // assuming direct POST request\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(\"title\");\n\n    // which is the same as using plain string\n    // assuming surrounding bound action request with binding parameter \"in\",\n    // e.g. draftActivate\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(\"in/title\");\n}\n\n@Before\npublic void validateTitle(CdsCreateEventContext context, Books book) {\n    // ...\n\n    // implicitly referring to cqn\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(Books_.class, b -> b.title());\n}\n\n@Before\npublic void validateAuthorName(CdsCreateEventContext context, Books book) {\n    // ...\n\n    // using un-typed API\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(b -> b.to(\"author\").get(\"name\"));\n\n    // using typed API\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No author name specified\")\n        .messageTarget(Books_.class, b -> b.author().name());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Router Routes in xs-app.json\nDESCRIPTION: JSON configuration for the xs-app.json file that defines how incoming requests are forwarded to appropriate endpoints. This maps URL patterns to specific destinations for different services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routes\": [\n    { // [!code --]\n      \"source\": \"^/(.*)$\", // [!code --]\n      \"target\": \"$1\", // [!code --]\n      \"destination\": \"srv-api\", // [!code --]\n      \"csrfProtection\": true // [!code --]\n    } // [!code --]\n    { // [!code ++]\n      \"source\": \"^/admin/(.*)$\", // [!code ++]\n      \"target\": \"/admin/$1\", // [!code ++]\n      \"destination\": \"bookstore-api\", // [!code ++]\n      \"csrfProtection\": true // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      \"source\": \"^/browse/(.*)$\", // [!code ++]\n      \"target\": \"/browse/$1\", // [!code ++]\n      \"destination\": \"bookstore-api\", // [!code ++]\n      \"csrfProtection\": true // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      \"source\": \"^/user/(.*)$\", // [!code ++]\n      \"target\": \"/user/$1\", // [!code ++]\n      \"destination\": \"bookstore-api\", // [!code ++]\n      \"csrfProtection\": true // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      \"source\": \"^/odata/v4/orders/(.*)$\",  // [!code ++]\n      \"target\": \"/odata/v4/orders/$1\", // [!code ++]\n      \"destination\": \"orders-api\", // [!code ++]\n      \"csrfProtection\": true // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      \"source\": \"^/reviews/(.*)$\", // [!code ++]\n      \"target\": \"/reviews/$1\", // [!code ++]\n      \"destination\": \"reviews-api\", // [!code ++]\n      \"csrfProtection\": true // [!code ++]\n    } // [!code ++]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using req.diff to Calculate Data Changes\nDESCRIPTION: Demonstrates how to use the req.diff method to calculate the difference between database data and the request data. This is useful in 'before' handlers to examine changes before they are persisted.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst diff = await req.diff()\n```\n\n----------------------------------------\n\nTITLE: Initializing Monorepo with NPM Workspaces for CAP Microservices\nDESCRIPTION: Creates a new monorepo root directory using NPM workspaces to manage multiple CAP microservices. It defines a package.json file that includes all subdirectories as workspaces.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir capire\ncd capire\necho \"{\\\"name\\\":\\\"@capire/samples\\\",\\\"workspaces\\\":[\\\"*\\\"]}\" > package.json\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown with cds.exit() in JavaScript\nDESCRIPTION: Example of using cds.exit() for graceful server shutdown, demonstrating how to register shutdown event handlers that run before the server stops.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ncds.on('shutdown', async()=> fs.promises.rm('some-file.json'))\ncds.on('shutdown', ()=> console.log('shutdown'))\ncds.exit() //> will rune above handlers before stopping the server\n```\n\n----------------------------------------\n\nTITLE: Autowiring CDS Spring Beans in Java\nDESCRIPTION: These Java code snippets demonstrate how to autowire various CDS Spring beans in a Java class. Examples include CdsRuntime, CdsRuntimeConfigurer, ApplicationService, PersistenceService, ServiceCatalog, CdsModel, UserInfo, AuthenticationInfo, ParameterInfo, Messages, FeatureTogglesInfo, and CdsDataStore.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/spring-boot-integration.md#2025-04-18_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Autowired\nCdsRuntime runtime;\n\n@Autowired\nCdsRuntimeConfigurer configurer;\n\n@Autowired\n@Qualifier(CatalogService_.CDS_NAME)\nprivate ApplicationService cs;\n\n@Autowired\nprivate PersistenceService ps;\n\n@Autowired\nServiceCatalog catalog;\n\n@Autowired\nCdsModel model;\n\n@Autowired\nUserInfo userInfo;\n\n@Autowired\nAuthenticationInfo authInfo;\n\n@Autowired\nParameterInfo paramInfo;\n\n@Autowired\nMessages messages;\n\n@Autowired\nFeatureTogglesInfo ftsInfo;\n\n@Autowired\nCdsDataStore ds;\n```\n\n----------------------------------------\n\nTITLE: CDS Service Definition with Actions and Functions\nDESCRIPTION: This CDS code defines a service with an entity, actions, and functions, demonstrating how restrictions can be applied. The `addRating` action requires the 'Admin' role, and the `getViewsCount` function is restricted to users with the 'Admin' role.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\nservice CatalogService {\n  entity Products as projection on db.Products { ... }\n  actions {\n    @(requires: 'Admin')\n    action addRating (stars: Integer);\n  }\n  function getViewsCount @(restrict: [{ to: 'Admin' }]) () returns Integer;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Error Messages in CAP JavaScript\nDESCRIPTION: Shows how to create custom error messages with additional properties. The example demonstrates setting a custom error code, message, target field, and HTTP status code.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nreq.error ({\n  code: 'Some-Custom-Code',\n  message: 'Some Custom Error Message',\n  target: 'some_field',\n  status: 418\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Aspect Extension in CDS\nDESCRIPTION: Shows how to extend an existing entity with additional fields using the extend directive.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\nextend Books with {\n   someAdditionalField : String;\n}\n```\n\n----------------------------------------\n\nTITLE: CDS Restricting Read/Write Access to Reviews by Role\nDESCRIPTION: This CDS snippet shows how to grant read and write access to the `Reviews` entity to users with either the `Reviewer` or `Customer` role. The `grant` property specifies the events (`READ`, `WRITE`), and the `to` property lists the authorized roles (`Reviewer`, `Customer`).\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nentity Reviews @(restrict: [\n    { grant:['READ', 'WRITE'], to: ['Reviewer', 'Customer'] }\n  ]) {/*...*/}\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Secure Dependency Version in Java pom.xml\nDESCRIPTION: This XML snippet shows how to explicitly specify a secure version of a vulnerable dependency in the dependencyManagement section of the top-level pom.xml file. This is useful when needing to update a dependency version between CAP Java releases due to security vulnerabilities.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/versions.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n   […]\n   <dependency>\n       <groupId>…</groupId>\n       <artifactId>…</artifactId>\n       <version>…</version>\n   </dependency>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Using Typed Entity Access in Event Handlers in CAP Java SDK\nDESCRIPTION: Event handler using generated Books interface for typed access to entity data. This provides type-safe access to entity properties and improves code readability and maintainability.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = { CqnService.EVENT_CREATE, CqnService.EVENT_UPDATE },\n        entity = Books_.CDS_NAME)\npublic void changeBooks(List<Books> books) { }\n```\n\n----------------------------------------\n\nTITLE: Compiling CDS Model to OData EDM/EDMX\nDESCRIPTION: Examples of compiling a CDS model to OData v4 EDM/EDMX format, with options to select specific services or process all services.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// for one service\nlet edm = cds.compile.to.edm (csn, {service:'Catalog'})\nconsole.log (edm)\n```\n\n----------------------------------------\n\nTITLE: Handling Media Data with Custom Streaming Using req.reply in CAP Node.js\nDESCRIPTION: Example demonstrating how to return media data from a custom handler using req.reply with a Readable stream. Optional parameters for mimetype and filename can be included to specify content disposition headers.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsrv.on('READ', 'Books', (req, next) => {\n  const readable = new Readable()\n  req.reply(readable, {\n    mimetype: 'image/jpeg', // > optional\n    filename: 'cover.jpg', // > optional\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Entity References from Untyped Query Results\nDESCRIPTION: Shows how to create entity references from untyped query results. This approach allows working with entity references when the type information is not available at compile time.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nRow authorData = service.run(query).single();\nStructuredType<?> author = authorData.ref(); // untyped reference to Author[101]\n```\n\n----------------------------------------\n\nTITLE: Auto-Exposed Entities Example in CAP\nDESCRIPTION: Shows different ways entities can be exposed in services, including explicit exposure, auto-exposure, and compositions\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\ncontext db {\n  @cds.autoexpose\n  entity Categories : cuid { // explicitly auto-exposed (by @cds.autoexpose)\n    ...\n  }\n\n  entity Issues : cuid { // implicitly auto-exposed (by composition)\n    category: Association to Categories;\n    ...\n  }\n\n  entity Components : cuid { // explicitly exposed (by projection)\n    issues: Composition of many Issues;\n    ...\n  }\n}\n\nservice IssuesService {\n  entity Components as projection on db.Components;\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Nested Data with Path Access in CAP Java\nDESCRIPTION: Demonstrates how to use putPath and getPath methods to manipulate deeply nested data structures in a null-safe way. These methods allow creating nested maps on the fly and safely retrieving values from nested structures.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\ndata.putPath(\"author.name\", \"Bram Stoker\");\n```\n\nLANGUAGE: java\nCODE:\n```\nString authorName = data.getPath(\"author.name\");\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean b = data.containsPath(\"author.name\");\n```\n\nLANGUAGE: java\nCODE:\n```\nString authorName = data.removePath(\"author.name\");\n```\n\n----------------------------------------\n\nTITLE: Validating User Input Before Draft Activation in CAP Java\nDESCRIPTION: This example demonstrates how to validate user input right before an active entity is created during draft activation. It uses a @Before handler to intercept the CREATE event for OrderItems.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/fiori-drafts.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Before\npublic void validateOrderItem(CdsCreateEventContext context, OrderItems orderItem) {\n    // Add validation logic\n}\n```\n\n----------------------------------------\n\nTITLE: CDS Model Definition in .cds Format\nDESCRIPTION: Example of a CDS model defined in native .cds file format with product and order entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/models.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nentity Products {\n    key ID: Integer;\n    title: localized String(11);\n    description: localized String;\n}\nentity Orders {\n    product: Association to Products;\n    quantity: Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: CDS Combining Multiple Privileges for Orders\nDESCRIPTION: This CDS code demonstrates how to combine multiple privileges to define more complex access control rules for the `Orders` entity.  `Admin` users can read and write all orders, while other users can only read orders where their user ID matches the `buyer` property.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nentity Orders @(restrict: [\n    { grant: ['READ','WRITE'], to: 'Admin' },\n    { grant: 'READ', where: 'buyer = $user' }\n  ]) {/*...*/}\n\n```\n\n----------------------------------------\n\nTITLE: CQL Query Construction Methods\nDESCRIPTION: Demonstrates three equivalent ways to construct the same CQN query object - using CQL template strings, query builder API, and direct object construction.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cqn.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Parsing CQL tagged template strings\nlet query = cds.ql `SELECT from Foo`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Query building\nlet query = SELECT.from (ref`Foo`)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Constructing plain CQN objects\nlet query = {SELECT:{from:[{ref:['Foo']}]}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet results = await cds.run (query)\n```\n\n----------------------------------------\n\nTITLE: Getting Row Count from Update Result in Java\nDESCRIPTION: Shows how to obtain the number of rows affected by an update operation. The row count indicates how many rows were modified during the statement execution.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nCqnUpdate update = ...\n\nlong rowCount = service.run(update).rowCount();\n```\n\n----------------------------------------\n\nTITLE: Using Entity References for Subsequent Queries\nDESCRIPTION: Shows how to use entity references to build related queries on associated entities. The example demonstrates select, insert, update, and delete operations on associated entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_31\n\nLANGUAGE: java\nCODE:\n```\n// SELECT from Author[101].books { sum(stock) as stock }\nCqnSelect q = Select.from(joyce.books())\n     .columns(b -> func(\"sum\", b.stock()).as(\"stock\"));\n\nCqnInsert i = Insert.into(joyce.books())\n     .entry(\"title\", \"Ulysses\");\n\nCqnUpdate u = Update.entity(joyce.biography())\n     .data(\"price\", 29.95);\n\nCqnDelete d = Delete.from(joyce.address())\n     .where(b -> b.stock().lt(1));\n```\n\n----------------------------------------\n\nTITLE: Defining Query-Local Mixins for Associations in CDS\nDESCRIPTION: Shows how to use the 'mixin...into' clause to add unmanaged associations to the source of a query, which can be used and propagated in the query's projection.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cql.md#2025-04-18_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from Books mixin {\n  localized : Association to LocalizedBooks on localized.ID = ID;\n} into {\n  ID, localized.title\n};\n```\n\n----------------------------------------\n\nTITLE: Exposing Associations with Authorization Issues in CDS\nDESCRIPTION: Demonstrates a security issue where sensitive data can be accessed through exposed associations in CAP services, even when the target entity has authorization restrictions.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_24\n\nLANGUAGE: cds\nCODE:\n```\nnamespace db;\nentity Employees : cuid { // autoexposed!\n  name: String(128);\n  team: Association to Teams;\n  contract: Composition of Contracts;\n}\nentity Contracts @(requires:'Manager') : cuid { // autoexposed!\n  salary: Decimal;\n}\nentity Teams : cuid {\n  members: Composition of many Employees on members.team = $self;\n}\n\n\nservice ManageTeamsService @(requires:'Manager') {\n  entity Teams as projection on db.Teams;\n}\n\nservice BrowseEmployeesService @(requires:'Employee') {\n  @readonly entity Teams as projection on db.Teams; // navigate to Contracts!\n}\n```\n\n----------------------------------------\n\nTITLE: Persistent SQLite Database Configuration in Node.js\nDESCRIPTION: This JSON code in package.json configures a CAP project to use a persistent SQLite database. A dependency is having SQLite installed. Expected input is updating the file with 'kind' as 'sqlite' and provides the path to the SQLite file. The output is a local db.sqlite file where data persists.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n          \"kind\": \"sqlite\",\n          \"credentials\": { \"url\": \"db.sqlite\" }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Entity Restrictions in CDS\nDESCRIPTION: Shows how to define access restrictions at the database entity level, granting read access to users with the Buyer role.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_13\n\nLANGUAGE: cds\nCODE:\n```\nnamespace db;\nentity Books @(restrict: [\n  { grant: 'READ', to: 'Buyer' },\n]) {/*...*/}\n```\n\n----------------------------------------\n\nTITLE: Complex Search with Expressions in Java Query Builder\nDESCRIPTION: Demonstrates how to create complex search expressions using logical operators like OR to find entities matching multiple possible terms.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n// Book records -\n// (ID, title, name) VALUES (1, \"The greatest works of James Allen\", \"Unwin\")\n// (ID, title, name) VALUES (2, \"The greatest works of Emily Bronte\", \"Wuthering Heights\")\n\nSelect.from(\"bookshop.Books\")\n        .columns(\"id\", \"name\")\n        .search(term -> term.has(\"Allen\").or(term.has(\"Heights\")));\n```\n\n----------------------------------------\n\nTITLE: Starting a CAP Server in Tests\nDESCRIPTION: Example showing how to launch a CAP server in test files using cds.test(). This initializes the server in a beforeAll() hook and shuts it down in an afterAll() hook.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\ndescribe(()=>{\n  const test = cds.test(__dirname+'/..')\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing Remote Services with Associations in CDS\nDESCRIPTION: This CDS code shows how to expose associations of a remote service entity. It creates custom projections for Suppliers and SupplierAddresses, including an association between them.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_32\n\nLANGUAGE: cds\nCODE:\n```\nusing { API_BUSINESS_PARTNER as bupa } from '../srv/external/API_BUSINESS_PARTNER';\n\nextend service RiskService with {\n  entity Suppliers as projection on bupa.A_BusinessPartner {\n    key BusinessPartner as ID,\n    BusinessPartnerFullName as fullName,\n    BusinessPartnerIsBlocked as isBlocked,\n    to_BusinessPartnerAddress as addresses: redirected to SupplierAddresses\n  }\n\n  entity SupplierAddresses as projection on bupa.A_BusinessPartnerAddress {\n    BusinessPartner as bupaID,\n    AddressID as ID,\n    CityName as city,\n    StreetName as street,\n    County as county\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Messages API with Dependency Injection in Spring\nDESCRIPTION: Demonstrates accessing the Messages API in Spring through dependency injection to add warning and error messages, including additional details like error codes and help URLs.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nMessages messages;\n\nmessages.warn(\"No book title specified\");\nmessages.error(\"The book is no longer available\").code(\"BNA\").longTextUrl(\"/help/book-not-available\");\n```\n\n----------------------------------------\n\nTITLE: Declaring CDS View with Projection\nDESCRIPTION: This SQL code snippet declares a new entity named `LatestBooks` as a projection on the `Books` entity. It selects the ID and title from `Books` and the author's name, filtering the results based on the publication date. It is restricted to projections and filters.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nentity LatestBooks as projection on Books {\n   ID, title, author.name as author\n} where publication >= $now - 1 year\n```\n\n----------------------------------------\n\nTITLE: Invoking Custom Action Using Generated Service Interface\nDESCRIPTION: Demonstrates how to call a custom action using the generated service interface, providing the entity reference and action parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n  ...\n  private void someCustomMethod() {\n    String bookId = \"myBookId\";\n    Books_ ref = CQL.entity(Books_.class).filter(b -> b.ID().eq(bookId));\n    this.catService.review(ref, 5);\n  }\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using Common UUID Aspect in CDS Entities\nDESCRIPTION: Demonstrates how to use the 'cuid' aspect from @sap/cds/common to apply a UUID primary key to entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nusing { cuid } from '@sap/cds/common';\nentity Books : cuid { ... }\nentity Authors : cuid { ... }\n```\n\n----------------------------------------\n\nTITLE: Throwing ServiceExceptions with Different Error Statuses in Java\nDESCRIPTION: Examples of creating ServiceException instances with various error statuses to abort event processing and rollback transactions. Shows default error status, specifying custom error status, and including original exceptions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// default error status\nthrow new ServiceException(\"An internal server error occurred\", originalException);\n// specifying an error status\nthrow new ServiceException(ErrorStatuses.CONFLICT, \"Not enough stock available\");\n// specifying an error status and the original exception\nthrow new ServiceException(ErrorStatuses.BAD_REQUEST, \"No book title specified\", originalException);\n```\n\n----------------------------------------\n\nTITLE: Creating CQN Query from OData URL\nDESCRIPTION: This JavaScript code creates a Core Query Notation (CQN) query by parsing an incoming OData request URL. It selects the name and expands the books association from the `Authors` entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst OData = { URL: cds.odata.parse }\nlet q = OData.URL `/Authors?$select=name&$expand=books`\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom $count Support in READ Handlers in CAP Node.js\nDESCRIPTION: Example demonstrating how to support $count requests in custom READ handlers, including both direct /$count requests and $count=true query parameters. The handler checks the request structure to determine the appropriate response format.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsrv.on('READ', 'Books', function (req) {\n  // simple '/$count' request\n  if (req.query.SELECT.columns?.length === 1 && req.query.SELECT.columns[0].as === '$count')\n    return [{ $count: 100 }]\n  // support other '/$count' requests\n  ...\n\n  const resultSet = [ ... ]\n\n  // request contains $count=true \n  if (req.query.SELECT.count === true) resultSet.$count = 100\n\n  return resultSet\n})\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with a Primary Key\nDESCRIPTION: Shows how to define an entity with a primary key using the 'key' keyword in CDS.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\nentity Books {\n  key ID : UUID;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Handler for Books Entity in Java\nDESCRIPTION: Example of implementing a @Before event handler that executes before creating new books. Uses CqnService.EVENT_CREATE constant and CdsCreateEventContext.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = CqnService.EVENT_CREATE, entity = Books_.CDS_NAME)\npublic void createBooks(CdsCreateEventContext context, List<Books> books) { }\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Context Data from Event Context in CAP Java\nDESCRIPTION: This code demonstrates how to access various information from the Request Context in a CAP Java event handler. It shows how to retrieve user information, locale settings, JWT token authentication data, and feature toggle status.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/request-contexts.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = CqnService.EVENT_READ)\npublic void beforeRead(CdsReadEventContext context) {\n    UserInfo userInfo = context.getUserInfo();\n    boolean isAuthenticated = userInfo.isAuthenticated();\n\n    ParameterInfo parameterInfo = context.getParameterInfo();\n    Locale locale = parameterInfo.getLocale();\n\n    // OAuth2 authentication provided:\n    AuthenticationInfo authInfo = context.getAuthenticationInfo();\n    JwtTokenAuthenticationInfo jwtTokenInfo = authInfo.as(JwtTokenAuthenticationInfo.class);\n    String jwtToken = jwtTokenInfo.getToken();\n\n    FeatureTogglesInfo ftsInfo = context.getFeatureTogglesInfo();\n    if (ftsInfo.isEnabled(\"experimental\")) {\n      // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Service in CDS Language\nDESCRIPTION: A sample CDS definition for a service with entity projections. This demonstrates how to create a service that exposes entities from an underlying data model.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/app-services.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nservice AdminService {\n  entity Authors as projection on my.Authors;\n  entity Books as projection on my.Books;\n  entity Genre as projection on my.Genre;\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Approach for Triggering Custom Actions\nDESCRIPTION: Shows how to manually create and emit an event context for a custom action when type-safe interfaces are not available, including setting parameters and retrieving results.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n    EventContext context = EventContext.create(\"review\", \"CatalogService.Books\");\n    context.put(\"cqn\", Select.from(\"CatalogService.Books\").byId(\"myBookId\"));\n    context.put(\"rating\", review.getRating());\n\n    this.catService.emit(context);\n\n    Map<String, Object> result = (Map<String, Object>) context.get(\"result\");\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Docker Compose Configuration\nDESCRIPTION: YAML configuration for setting up a PostgreSQL database using Docker Compose.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    image: postgres:alpine\n    environment: { POSTGRES_PASSWORD: postgres }\n    ports: [ '5432:5432' ]\n    restart: always\n```\n\n----------------------------------------\n\nTITLE: Adding Build Commands for CAP Modules in YAML\nDESCRIPTION: This snippet demonstrates how to add build commands for each CAP module to be deployed. It includes commands for installing dependencies, building the shared database, and building individual services with specific options.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nbuild-parameters:\n  before-all:\n    - builder: custom\n      commands:\n        - npm ci\n        - npx cds build ./shared-db --for hana --production\n        - npx cds build ./orders --for nodejs --production --ws-pack\n        - npx cds build ./reviews --for nodejs --production\n        - npx cds build ./bookstore --for nodejs --production --ws-pack\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Event Context Usage in Java\nDESCRIPTION: Shows how to use type-safe event context interfaces for better parameter handling and result management.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCdsReadEventContext context = genericContext.as(CdsReadEventContext.class);\nCqnSelect select = context.getCqn();\ncontext.setResult(Collections.emptyList());\nResult result = context.getResult();\n```\n\n----------------------------------------\n\nTITLE: Consuming Remote Services with CQN Queries in CAP Java\nDESCRIPTION: Java code that demonstrates how to consume a remote service using CQN queries. The example injects a remote service as a CqnService and executes a select query to retrieve business partner address data.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\n@Qualifier(ApiBusinessPartner_.CDS_NAME)\nCqnService bupa;\n\nCqnSelect select = Select.from(ABusinessPartnerAddress_.class)\n    .where(a -> a.BusinessPartner().eq(\"4711\"));\n\nABusinessPartnerAddress address = bupa.run(select)\n    .single(ABusinessPartnerAddress.class);\n```\n\n----------------------------------------\n\nTITLE: Using .with() Method for Service Implementation\nDESCRIPTION: Examples of using the .with() method to specify service implementations, both as a file path and as an inline function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncds.serve('./srv/cat-service.cds') .with ('./srv/cat-service.js')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncds.serve('./srv/cat-service') .with (srv => {\n  srv.on ('READ','Books', (req) => req.reply([...]))\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Inbound Communication with JavaScript\nDESCRIPTION: This code snippet demonstrates how to handle inbound communication in CAP using JavaScript. It shows how to define event handlers for different types of events (SomeEvent), requests (SomeRequest), and entity reads (READ 'SomeEntity'). These handlers process the incoming data or queries.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nthis.on ('SomeEvent', msg => {/* process msg.data */})\nthis.on ('SomeRequest', req => {/* process req.data */})\nthis.on ('READ','SomeEntity', req => {/* process req.query */})\n```\n\n----------------------------------------\n\nTITLE: Creating CQN Query from CQL\nDESCRIPTION: This JavaScript code creates a Core Query Notation (CQN) query by parsing a CQL string. It selects the name and all properties of the books association from the `Authors` entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet q = CQL `SELECT from Authors { name, books{*} }`\n```\n\n----------------------------------------\n\nTITLE: Exposing Remote Service Entity in CDS\nDESCRIPTION: This snippet demonstrates how to expose a remote service entity by adding a projection on it to a CAP service. It extends the RiskService with a BusinessPartners entity projected from an external API.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_27\n\nLANGUAGE: cds\nCODE:\n```\nusing {  API_BUSINESS_PARTNER as bupa } from '../srv/external/API_BUSINESS_PARTNER';\n\nextend service RiskService with {\n  entity BusinessPartners as projection on bupa.A_BusinessPartner;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Update Results with ResultBuilder in Java\nDESCRIPTION: Demonstrates constructing a Result object for UPDATE operations using the updatedRows method, including both the count of updated rows and the updated data.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ResultBuilder.updatedRows;\n\nint updateCount = 1;  // number of updated rows\nMap<String, Object> data = new HashMap<>();\ndata.put(\"title\", \"CAP Java\");\nResult r = updatedRows(updateCount, data).result();\n```\n\n----------------------------------------\n\nTITLE: Setting Session Context Variables in CAP Java with Spring Boot\nDESCRIPTION: This comprehensive example shows how to set session context variables using JDBC APIs in a CAP Java application with Spring Boot. It includes a custom event handler that sets variables for all Persistence Service interactions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/changeset-contexts.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(value = \"*\", type = PersistenceService.class)\npublic class SessionContextHandler implements EventHandler {\n\n    private final static Set<ChangeSetContext> handled = Collections.synchronizedSet(new HashSet<>());\n\n    @Autowired\n    private DataSource dataSource;\n\n    @Before\n    protected void setSessionContextVariables(EventContext context) {\n        ChangeSetContext changeSet = context.getChangeSetContext();\n        // handle every transaction only once\n        if(handled.add(changeSet)) {\n            // set the session variable\n            setSessionContextVariable(\"foo\", \"bar\");\n\n            changeSet.register(new ChangeSetListener(){\n\n                @Override\n                public void beforeClose() {\n                    // clear the session variable\n                    setSessionContextVariable(\"foo\", null);\n                    handled.remove(changeSet);\n                }\n\n            });\n        }\n    }\n\n    private void setSessionContextVariable(String name, String value) {\n        Connection con = null;\n        try {\n            // obtains the transaction connection\n            con = DataSourceUtils.getConnection(dataSource);\n            con.setClientInfo(name, value);\n        } catch (SQLClientInfoException e) {\n            // handle appropriately\n        } finally {\n            // only releases the obtained connection\n            // the transaction connection is still kept open with the\n            // session variables set\n            DataSourceUtils.releaseConnection(con, dataSource);\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MTA Configuration with CDS CLI\nDESCRIPTION: Command to add MTA configuration to a CAP.js project if no mta.yaml file is present. This sets up the necessary structure for deployment with authentication.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\ncds add mta\n```\n\n----------------------------------------\n\nTITLE: Extracting Where Condition Values in Java\nDESCRIPTION: Extracts values from a CQN statement's where condition, demonstrating how to retrieve both key values and other filter values.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nCqnSelect select = context.getCqn();\nAnalysisResult result = cqnAnalyzer.analyze(select);\n\nMap<String, Object> targetKeys = result.targetKeys();\nInteger itemId = (Integer) targetKeys.get(\"ID\");   // 3\n\nMap<String, Object> filterValues = result.targetValues();\nString status = (String) filterValues.get(\"status\");   // 'open'\n```\n\n----------------------------------------\n\nTITLE: Prefilling Draft Fields with Default Values in CAP Java\nDESCRIPTION: This code shows how to register a @Before handler to prefill default values when a new draft is created for OrderItems. This executes before the user starts editing the draft in the UI.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/fiori-drafts.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Before\npublic void prefillOrderItems(DraftNewEventContext context, OrderItems orderItem) {\n    // Pre-fill fields with default values\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling In-Memory CDS Source Strings\nDESCRIPTION: Example of synchronously compiling a single CDL source string to CSN. In this mode, 'using from' clauses are not resolved.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet csn = cds.compile (`\n  using {cuid} from '@sap/cds/common';\n  entity Foo : cuid { foo:String }\n  entity Bar as projection on Foo;\n  extend Foo with { bar:String }\n`)\n```\n\n----------------------------------------\n\nTITLE: Creating Associations with 'on' Conditions in CAP JS\nDESCRIPTION: Illustrates how to define unmanaged associations with explicit 'on' conditions.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'Authors': { kind:\"entity\", elements:{\n    'books': { type:\"cds.Association\", target:\"Books\", cardinality{max:\"*\"},\n      on: [{ref:['books', 'author']}, '=', {ref:['$self']}]\n    },\n  }}\n }})\n```\n\n----------------------------------------\n\nTITLE: Specifying Message Targets in Bound Actions and Functions\nDESCRIPTION: Java code showing how to specify message targets in bound action and function handlers, including examples for action parameters and the bound entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Before\npublic void validateReview(BooksAddReviewContext context) {\n    // ...\n\n    // referring to action parameter \"reviewer\", targeting \"firstName\"\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid reviewer first name\")\n        .messageTarget(\"reviewer\", r -> r.get(\"firstName\"));\n\n    // which is equivalent to using the typed API\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid reviewer first name\")\n        .messageTarget(BooksAddReviewContext.REVIEWER, Reviewer_.class, r -> r.firstName());\n\n    // targeting \"rating\"\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid review rating\")\n        .messageTarget(\"rating\");\n\n    // targeting \"title\"\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid review title\")\n        .messageTarget(\"title\");\n\n     // targeting \"text\"\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid review text\")\n        .messageTarget(\"text\");\n}\n\n@Before\npublic void validateReview(BooksAddReviewContext context) {\n    // ...\n\n    // referring to the bound entity `Books`\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid book description\")\n        .messageTarget(b -> b.get(\"descr\"));\n\n    // or (using the typed API, referring to \"cqn\" implicitly)\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid book description\")\n        .messageTarget(Books_.class, b -> b.descr());\n\n    // which is the same as using plain string\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid book description\")\n        .messageTarget(\"in/descr\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Import for Type Annotations in TypeScript\nDESCRIPTION: Demonstrates how to use TypeScript's import syntax to specify types for function parameters, maintaining type inference for request data in a TypeScript project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport cds from '@sap/cds'\nconst service = new cds.ApplicationService\n\nimport { Books } from '#cds-models/sap/capire/bookshop'\nservice.on('READ', Books, readBooksHandler)\n\nfunction readBooksHandler (req: cds.TypedRequest<Books>) {\n  req.data // req.data is now properly known to be of type Books again\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating CQN Query using cds.ql APIs\nDESCRIPTION: This JavaScript code creates a Core Query Notation (CQN) query using `cds.ql` APIs. It selects the ID, name, and all properties of the books association from the `Authors` entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet q = SELECT.from (Authors, a=>{\n    a.ID, a.name, a.books('*')\n  })\n```\n\n----------------------------------------\n\nTITLE: Using ENDS WITH Predicate Function in CAP Java CQL Query\nDESCRIPTION: Illustrates the use of the ENDS WITH predicate function to filter books based on the title's suffix.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_78\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Books\")\n  .where(b -> b.get(\"title\")\n  .endsWith(\"Raven\"));\n```\n\n----------------------------------------\n\nTITLE: Checking User Roles with .is() Method\nDESCRIPTION: Example of using the .is() method to check if a user has a specific role, which is commonly used in authorization checks within request handlers.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (req.user.is('admin')) ...\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP HANA Cloud Feature in Java CAP Applications\nDESCRIPTION: Maven dependency configuration to add SAP HANA Cloud support to Java CAP applications using the cds-feature-hana feature.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-feature-hana</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Project Configuration in package.json\nDESCRIPTION: Example of static project configuration in package.json for a CAP project, showing how to define required services.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"db\": \"sql\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CAP Service Definition File\nDESCRIPTION: Creates a minimal CAP service definition file named 'services.cds' that contains a simple service with a 'Books' entity that has a UUID primary key.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\necho 'service CatalogService { entity Books { key ID: UUID; } }' \\\n    > services.cds\n```\n\n----------------------------------------\n\nTITLE: Extending Remote Service with Local Association in CDS\nDESCRIPTION: This CDS code shows how to augment a projection on a remote entity with a new association to a local entity. It adds a 'risks' association to the Suppliers entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_35\n\nLANGUAGE: cds\nCODE:\n```\nentity Suppliers as projection on bupa.A_BusinessPartner {\n  key BusinessPartner as ID,\n  BusinessPartnerFullName as fullName,\n  BusinessPartnerIsBlocked as isBlocked,\n  risks : Association to many Risks on risks.supplier.ID = ID,\n};\n```\n\n----------------------------------------\n\nTITLE: Event Handler Method Definition in TypeScript\nDESCRIPTION: Defines srv.handle method that processes events by executing registered event handlers for before, on, and after phases.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nasync function srv.handle (\n  this  : Transactional <srv>,\n  event : cds.Event | cds.Request\n)\nreturn : result of executed .on handlers\n```\n\n----------------------------------------\n\nTITLE: Updating with Expressions in CAP Java\nDESCRIPTION: This snippet demonstrates how to use expressions in updates, allowing for more complex update operations such as decreasing a value or combining update data with expressions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_37\n\nLANGUAGE: java\nCODE:\n```\n// dynamic\nUpdate.entity(BOOKS).byId(101).set(\"stock\", CQL.get(\"stock\").minus(1));\n\n// static\nUpdate.entity(BOOKS).byId(101).set(b -> b.stock(), s -> s.minus(1));\n```\n\nLANGUAGE: java\nCODE:\n```\nUpdate.entity(BOOKS).where(b -> b.stock().eq(0))\n   .data(\"available\", true)\n   .set(b -> b.stock(), s -> s.plus(CQL.param(\"addStock\")));\n```\n\n----------------------------------------\n\nTITLE: Analyzing Association Element in Java\nDESCRIPTION: Demonstrates how to inspect the details of an association element using the Model Reflection API.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nCdsElement authorElement = book.getAssociation(\"author\");\nCdsAssociationType toAuthor = authorElement.getType();\n\nCdsEntity author = toAuthor.getTarget(); // Entity: my.bookshop.Authors\nboolean association = toAuthor.isAssociation();   // true\nboolean composition = toAuthor.isComposition();   // false\n\nCardinality cardinality = toAuthor.getCardinality();\nString sourceMax = cardinality.getSourceMax();    // \"*\"\nString targetMin = cardinality.getTargetMin();    // \"0\"\nString targetMax = cardinality.getTargetMax();    // \"1\"\n\nStream<CdsElement> keys = toAuthor.keys();  // Stream: [ ID ]\nOptional<CqnExpression> onCondition = toAuthor.onCondition(); // empty\n```\n\n----------------------------------------\n\nTITLE: Registering Handlers for Draft-Specific Events in JavaScript\nDESCRIPTION: Examples of how to register handlers for draft-specific events such as NEW, CANCEL, EDIT, and SAVE using the ApplicationService class.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/fiori.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// When a new draft is created\nsrv.on('NEW', 'MyEntity.drafts', /*...*/)\n// When a draft is discarded\nsrv.on('CANCEL', 'MyEntity.drafts', /*...*/)\n// When a new draft is created from an active instance\nsrv.on('EDIT', 'MyEntity', /*...*/)\n// When the active entity is changed\nsrv.on('SAVE', 'MyEntity', /*...*/)\n```\n\n----------------------------------------\n\nTITLE: Customizing cds.context.user Middleware in CAP.js\nDESCRIPTION: Demonstrates how to register middleware to customize the user context after authentication but before the model context is set. The example shows how to modify the user ID by prepending a custom IDP identifier.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ncds.middlewares.before = [\n  cds.middlewares.context(),\n  cds.middlewares.trace(),\n  cds.middlewares.auth(),\n  function ctx_user (_,__,next) {\n    const ctx = cds.context\n    ctx.user.id = '<my-idp>' + ctx.user.id\n    next()\n  },\n  cds.middlewares.ctx_model()\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization with Next() Interceptor\nDESCRIPTION: Example of implementing an authorization check as an interceptor that decides whether to continue the request processing chain using next().\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Authorization check -> shadowing all other handlers registered below\nthis.on ('*', function authorize (req,next) {\n  if (!req.user.is('authenticated-user')) return req.reject('FORBIDDEN')\n  else return next()\n})\nthis.on ('READ',[Books,Authors], req => req.target.data)\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Event Handler with General Event Context in CAP Java SDK\nDESCRIPTION: Basic event handler method for READ events on Books entity using the general EventContext parameter. This provides access to general information about the triggered event.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\npublic void readBooks(EventContext context) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Internal CDS Service\nDESCRIPTION: Shows how to define a CDS service for internal use only by annotating it with @protocol:'none' to prevent external access via protocol adapters.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\n@protocol: 'none'\\nservice InternalService {\\n  ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Extending with Relationships in CDS\nDESCRIPTION: Extends the `managed` reuse type from `@sap/cds/common` with a composition to capture change notes, including timestamp, author, and a note. This allows tracking a history of changes for entities inheriting from the `managed` aspect.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\n```cds [db/common.cds]\nusing { User, managed } from '@sap/cds/common';\nextend managed with {\n  ChangeNotes : Composition of many {\n    key timestamp : DateTime;\n    author : User;\n    note : String(1000);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Projections in CQL Select Statements (Java)\nDESCRIPTION: Demonstrates how to define complex projections in CQL select statements using lambda expressions. This approach provides code completion benefits.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// dynamic\nSelect.from(\"bookshop.Books\")\n    .columns(b -> b.get(\"title\"),\n             b -> b.get(\"author.name\").as(\"authorName\"));\n\n// static\nimport static bookshop.Bookshop_.BOOKS;\n\nSelect.from(BOOKS)\n    .columns(b -> b.title(),\n             b -> b.author().name().as(\"authorName\"));\n```\n\n----------------------------------------\n\nTITLE: Launching Java CAP Server with Multitenancy\nDESCRIPTION: Maven command to start a Java CAP application server with local multitenancy profile enabled. Uses persistent database instead of in-memory storage.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncd srv\nmvn cds:watch -Dspring-boot.run.profiles=local-multitenancy\n```\n\n----------------------------------------\n\nTITLE: Service Protocol Configuration in CAP.js using @protocol Annotation\nDESCRIPTION: Demonstrates various ways to configure which protocols (OData, REST, GraphQL) a service is served at, including shorthand annotations and explicit configuration with custom paths.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\n@odata\nservice CatalogService {}\n//> serves CatalogService at: /odata/v4/catalog\n\n@protocol: 'odata'\nservice CatalogService {}\n//> serves CatalogService at: /odata/v4/catalog\n\n@protocol: ['odata', 'rest', 'graphql']\nservice CatalogService {}\n//> serves CatalogService at: /odata/v4/catalog, /rest/catalog and /graphql\n\n@protocol: [{ kind: 'odata', path: 'some/path' }]\nservice CatalogService {}\n//> serves CatalogService at: /odata/v4/some/path\n```\n\n----------------------------------------\n\nTITLE: Adding Multitenancy Support\nDESCRIPTION: Command to enable multitenancy configuration for production\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncds add multitenancy\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Instances in Served Event Handler\nDESCRIPTION: Example of using the served event to safely access service instances after all services have been bootstrapped and added to the Express app.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-server.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.on('served', (services)=>{\n  // We can savely access service instances through the provided argument:\n  const { CatalogService, db } = services\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting Managed Associations in CQL\nDESCRIPTION: Demonstrates how to select managed associations in CQL queries and access the associated data. The example retrieves the author of a book.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nCqnSelect select = Select.from(BOOKS).byId(123)\n                         .columns(b -> b.author());\n\nRow row = persistence.run(select).single();\n\nInteger authorId = row.getPath(\"author.ID\");\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers in CAP Node.js (Correct Approach)\nDESCRIPTION: Demonstrates the correct way to register event handlers in a CAP Node.js application, avoiding asynchronous operations that could lead to race conditions.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ncds.on('served', ()=>{\n  const { db } = cds.services\n  db.on('before',(req)=> console.log(req.event, req.path))\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Initialization Method\nDESCRIPTION: Shows how to override the init() method in a service subclass to register custom event handlers.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nclass BooksService extends cds.ApplicationService {\n  init(){\n    const { Books, Authors } = this.entities\n    this.before ('READ', Authors, req => {...})\n    this.after ('READ', Books, books => {...})\n    this.on ('submitOrder', req => {...})\n    return super.init()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeout in Remote Service\nDESCRIPTION: Configuration example showing how to set a custom request timeout value in milliseconds for remote service calls.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/remote-services.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"API_BUSINESS_PARTNER\": {\n    \"kind\": \"odata\",\n    \"credentials\": {\n      \"requestTimeout\": 1000000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Insert Operation Using List of Maps in CAP Java\nDESCRIPTION: Demonstrates how to perform a bulk insert operation using a List of Maps. This allows for inserting multiple book records in a single database operation, improving performance.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.BOOKS;\n\nvar data = List.of(\n\tMap.of(\"ID\", 101, \"title\", \"Capire\"),\n\tMap.of(\"ID\", 103, \"title\", \"CAP Java\"));\n\nCqnInsert insert = Insert.into(BOOKS).entries(data);\n```\n\n----------------------------------------\n\nTITLE: Programmatic Authorization Enforcement\nDESCRIPTION: Example showing how to programmatically enforce authorization rules defined in CDS models by using the cds.context.user API in service request handlers.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.serve ('CustomerService') .with (function(){\n  this.before ('*', req =>\n    req.user.is('authenticated') || req.reject(403)\n  )\n  this.before (['READ', 'CREATE'], 'Orders', req =>\n    req.user.is('admin') || req.reject(403)\n  )\n  this.before ('*', 'Approval', req =>\n    req.user.attr.level > 2 || req.reject(403)\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Using cds.import() to Convert API Specifications to CSN in JavaScript\nDESCRIPTION: Demonstrates the basic usage of cds.import() function to convert an API specification file to CSN. It includes the function signature and describes the available options for customizing the import process.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-import.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst csn = await cds.import(file, options)\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Entity Properties using Fluent-style Accessors in Java\nDESCRIPTION: Shows how to create and set properties for Author and Book entities using fluent-style accessor methods, which allow for method chaining.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n   Authors author = Authors.create().name(\"Emily Brontë\");\n   Books.create().author(author).title(\"Wuthering Heights\");\n```\n\n----------------------------------------\n\nTITLE: Using the cds env CLI Command\nDESCRIPTION: Examples of using the cds env command to view effective configurations in a CAP project, including listing all settings, getting specific settings, and viewing defaults.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds env               #> shortcut to `cds env ls`\ncds env ls            #> lists all settings in properties format\ncds env ls folders    #> lists the `folders` settings\ncds env get           #> prints all settings in JSON-like format\ncds env get folders   #> prints the `folders` settings\ncds env get defaults  #> prints defaults only\ncds env ?             #> get help\n```\n\n----------------------------------------\n\nTITLE: CAP CLI Usage Commands\nDESCRIPTION: Core command-line interface usage patterns for the CAP framework, showing basic syntax and command structure. Includes all available commands with their shortcut keys and descriptions for managing CAP projects, from initialization to deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-help.out.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncds <command> [<args>]\ncds <src>  =  cds compile <src>\ncds        =  cds help\n```\n\n----------------------------------------\n\nTITLE: Production Configuration with Destination for External Service\nDESCRIPTION: Enhanced package.json configuration using profiling to specify destination and path information only for production environment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"API_BUSINESS_PARTNER\": {\n      \"kind\": \"odata\",\n      \"model\": \"srv/external/API_BUSINESS_PARTNER\",\n      \"[production]\": {\n        \"credentials\": {\n          \"destination\": \"S4HANA\",\n          \"path\": \"/sap/opu/odata/sap/API_BUSINESS_PARTNER\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Persistent Database using cds deploy\nDESCRIPTION: This shell command deploys the CAP application to a persistent database as configured in package.json. It requires CAP CLI installed and a setup CAP project. By executing 'cds deploy', the database schema is created in the designated SQLite database file.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncds deploy\n```\n\n----------------------------------------\n\nTITLE: Registering Lifecycle Event Handlers in CAP Server\nDESCRIPTION: Example of registering handlers for CAP server lifecycle events using the cds facade object, allowing custom logic to be integrated at specific points in the server bootstrapping process.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-server.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\n// react on bootstrapping events...\ncds.on('bootstrap', ...)\ncds.on('served', ...)\n```\n\n----------------------------------------\n\nTITLE: Checking User Roles in CAP.js Service Implementation\nDESCRIPTION: JavaScript code snippet demonstrating how to check if a user has a specific role within a service implementation. This uses the req.user.is() method for authorization checks.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nreq.user.is (\"admin\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Authors with Nested Projections using SQL\nDESCRIPTION: This SQL query uses nested projections to select data from the `Authors` entity, including the ID, name, and related books with their IDs, titles, and genres. This showcases how CQL allows expanding result sets to data read from association targets.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from Authors {   -- postfix projection\n  ID, name, books {     -- nested projection to-many\n    ID, title, genre {  -- nested projection to-one\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sensitive Data Read Event Schema in CDS\nDESCRIPTION: CDS schema definition for logging sensitive data read events with data subject and object information.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nevent SensitiveDataRead : LogEntry {\n  data_subject : DataSubject;\n  object       : DataObject;\n  attributes   : many {\n    name       : String;\n  };\n  attachments  : many {\n    id         : String;\n    name       : String;\n  };\n  channel      : String;\n}\n\ntype DataObject {\n  type : String;\n  id   : {};\n}\n\ntype DataSubject : DataObject {\n  role : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Path Expression Queries\nDESCRIPTION: Shows how to access related entity elements using path expressions in both static and dynamic styles\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Static style\nSelect.from(BOOKS)\n    .columns(b -> b.title(), b -> b.author().name().as(\"author\"))\n    .where(b -> b.author().name().startsWith(\"A\"));\n\n// Dynamic style\nSelect.from(\"bookshop.Books\")\n    .columns(b -> b.get(\"title\"), b -> b.get(\"author.name\").as(\"author\"))\n    .where(b -> b.to(\"author\").get(\"name\").startsWith(\"A\"));\n```\n\n----------------------------------------\n\nTITLE: Constructing To-Many Associations in Java\nDESCRIPTION: This Java code demonstrates how to construct a to-many association representing an author with multiple books.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> book1 = new HashMap<>();\nbook1.put(\"ID\", 97);\nbook1.put(\"title\", \"Dracula\");\n\nMap<String, Object> book2 = new HashMap<>();\nbook2.put(\"ID\", 98);\nbook2.put(\"title\", \"Miss Betty\");\n\nMap<String, Object> author = new HashMap<>();\nauthor.put(\"ID\", 23);\nauthor.put(\"name\", \"Bram Stoker\");\nauthor.put(\"books\", Arrays.asList(book1, book2));\n```\n\n----------------------------------------\n\nTITLE: Accessing CQN Query in CAP JavaScript\nDESCRIPTION: Shows how incoming requests are captured as CQN (CAP Query Notation) queries in the request object. The example demonstrates the query structure for a simple GET request.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nreq.query = {SELECT:{from:{ref:['Books']}}}\n```\n\n----------------------------------------\n\nTITLE: Converting CDS Models to OpenAPI Using CLI\nDESCRIPTION: This command compiles all services in the 'srv/' directory and outputs OpenAPI files to the 'docs/' folder. It demonstrates basic usage of the CDS CLI for OpenAPI conversion.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/openapi.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds compile srv --service all -o docs --to openapi\n```\n\n----------------------------------------\n\nTITLE: Bulk Update of Multiple Entities in CAP Java\nDESCRIPTION: This snippet demonstrates how to perform a bulk update on multiple entities with individual update data. It uses the entries method to update different attributes of multiple orders in a single operation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_39\n\nLANGUAGE: java\nCODE:\n```\nOrders o1 = Orders.create(1);\no1.setStatus(\"canceled\");\n\nOrders o2 = Orders.create(2);\no2.setStatus(\"in process\");\n\nOrders o3 = Orders.create(3);\no3.put(\"header.comment\", \"Deliver with Order 2\");\n\nList<Orders> orders = Arrays.asList(o1, o2, o3);\nCqnUpdate update = Update.entity(ORDERS).entries(orders);\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types with CRUD Handlers in JavaScript\nDESCRIPTION: Illustrates how to use generated types with CRUD handlers (before, on, after) in a service implementation, providing type-safe access to request data.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nconst { Book, Books } = require('#cds-models/sap/capire/bookshop')\nconst service = new cds.ApplicationService\n\n// the payload is known to contain Books inside the respective handlers\nservice.before('READ', Books, req => {  })\n\n\nservice.on('READ', Books, req => {  })\n\n\nservice.after('READ', Books, (books, req) => {  })\n\n```\n\n----------------------------------------\n\nTITLE: Accessing cds.env in JavaScript\nDESCRIPTION: Example of accessing configuration settings programmatically through the cds.env module in a Node.js application.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst cds = require('@sap/cds')\nconsole.log (cds.env.requires.sql)\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Data with cds.ql in Node.js\nDESCRIPTION: This JavaScript code demonstrates reading nested data using `cds.ql`. It selects authors, their IDs, names, and books with stock greater than 4, including the genre name. The query also filters authors born before 1900 and orders the results by name in ascending order.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet authors = await SELECT.from `Authors` .columns `{` +\n\"   ID, name, books [where stock>4] {\\n\" +\n\"      ID, title, stock,\\n\" +\n\"      genre.name as genre\\n\" +\n\"   }\\n\" +\n`}` .where `born < 1900`\n.orderBy `name asc`\n```\n\n----------------------------------------\n\nTITLE: Security Event Logging in JavaScript\nDESCRIPTION: Example of logging a security event with user action and IP address.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait audit.log ('SecurityEvent', {\n  data: {\n    user: 'alice',\n    action: 'Attempt to access restricted service \"PDMService\" with insufficient authority'\n  },\n  ip: '127.0.0.1'\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Deep Insert/Upsert Operations in Java\nDESCRIPTION: Demonstrates how to perform deep insert and upsert operations that cascade along compositions. The example shows how to insert or upsert multiple book entries including their composition targets.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nIterable<Map<String, Object>> books;\n\nCqnInsert insert = Insert.into(\"bookshop.Books\").entries(books);\nResult result = service.run(insert);\n\nCqnUpsert upsert = Upsert.into(\"bookshop.Books\").entries(books);\nResult result = service.run(upsert);\n```\n\n----------------------------------------\n\nTITLE: Importing CDS Models Using Different Import Methods in JavaScript\nDESCRIPTION: Demonstrates two equivalent ways to import the Books entity in JavaScript: using a relative path to the @cds-models directory or using the configured subpath import with the #cds-models prefix.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// srv/cat-service.js\nconst { Books } = require('../@cds-models/sap/capire/bookshop')\nconst { Books } = require('#cds-models/sap/capire/bookshop')\n```\n\n----------------------------------------\n\nTITLE: Writing Tests Compatible with Jest and Mocha\nDESCRIPTION: Example of writing portable tests that can run with both Jest and Mocha test runners using the chai assertion library via cds.test.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my test suite', ()=>{\n  const { GET, expect } = cds.test(...)\n  it ('should test', ()=>{   // Jest & Mocha\n    const { data } = await GET ('/browse/Books')\n    expect(data.value).to.eql([ // chai style expect\n      { ID: 201, title: 'Wuthering Heights', author: 'Emily Brontë' },\n      { ID: 252, title: 'Eleonora', author: 'Edgar Allen Poe' },\n      //...\n    ])\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using SQL Append Annotations in CDS Entity Definition\nDESCRIPTION: This snippet demonstrates how to use @sql.append annotations in a CDS model to add native database clauses both at entity and field level. It configures persistent memory for the entity and fuzzy search for a text field.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\n@cds.persistence.journal\n@sql.append: 'PERSISTENT MEMORY ON'\nentity E {\n  ...,\n  @sql.append: 'FUZZY SEARCH INDEX ON'\n  text: String(100);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers with cds.Service\nDESCRIPTION: Demonstrates how to register event handlers with a service to handle READ operations on Books entity and custom events.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst srv = (new cds.Service)\n .on('READ','Books', req => console.log (req.event, req.entity))\n .on('foo', req => console.log (req.event, req.data))\n .on('*', msg => console.log (msg.event))\n```\n\n----------------------------------------\n\nTITLE: Reviews Service Event Emission Implementation\nDESCRIPTION: Implementation of a ReviewsService class that emits 'reviewed' events when a subject's average rating changes after CRUD operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass ReviewsService extends cds.ApplicationService { async init() {\n\n  // Emit a `reviewed` event whenever a subject's avg rating changes\n  this.after (['CREATE','UPDATE','DELETE'], 'Reviews', (req) => {\n    let { subject } = req.data, count, rating //= ...\n    return this.emit ('reviewed', { subject, count, rating })\n  })\n\n}}\n```\n\n----------------------------------------\n\nTITLE: Using Localized Messages with Parameters in Java\nDESCRIPTION: Shows how to reference message keys from property files instead of hardcoded texts when using the Messages API and ServiceException, with support for parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// localized message with placeholders\nmessages.warn(\"my.message.key\", paramNumber);\n// localized message with placeholders and additional exception\nthrow new ServiceException(ErrorStatuses.BAD_REQUEST, \"my.message.key\", paramNumber, originalException);\n```\n\n----------------------------------------\n\nTITLE: Implementing Change Tracking Event Handler in Java\nDESCRIPTION: Java implementation of an event handler that processes change tracking events. Uses @After annotation to handle change creation events and provides access to change log entries.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nimport cds.gen.sap.changelog.Changes;\n\n@Component\n@ServiceName(ChangeTrackingService.DEFAULT_NAME)\npublic class ChangeTrackingHandler implements EventHandler {\n\n  @After(event = ChangeTrackingService.CREATE_CHANGES)\n  void afterCreate(CreateChangesEventContext context) {\n    context.getResult().listOf(Changes.class).forEach(c -> {\n      // Do something with the change log entry\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Handler for Media Pre-Processing\nDESCRIPTION: Event handler that wraps uploaded media content in a custom processor before persistence operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_54\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = CdsService.EVENT_UPDATE)\npublic void preProcessCoverImage(CdsUpdateEventContext context, List<Books> books) {\n\tbooks.forEach(book -> {\n\t\tbook.setCoverImage(new CoverImagePreProcessor(book.getCoverImage()));\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection in CAP.js\nDESCRIPTION: Code snippet demonstrating manual implementation of CSRF token protection in a CAP.js application. It sets up middleware to handle HEAD requests that issue tokens, protects POST requests, and includes error handling for invalid CSRF tokens.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst csrfProtection = csrf({ cookie: true })\nconst parseForm = express.urlencoded({ extended: false })\n\ncds.on('bootstrap', app => {\n  app.use(cookieParser())\n\n  // Must: Provide actual <service endpoint>s of served services.\n  // Optional: Adapt for non-Fiori Elements UIs.\n  .head('/<service endpoint>', csrfProtection, (req, res) => {\n    res.set({\n      'X-CSRF-Token': req.csrfToken(),\n      'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate'\n    }).send()\n  })\n\n  // Must: Provide actual <service endpoint>s of served services.\n  // Optional: Adapt for non-Fiori Elements UIs.\n  .post('/<service endpoint>/$batch', parseForm, csrfProtection, (req, res, next) => next())\n\n  .use((err, req, res, next) => {\n    if (err.code !== 'EBADCSRFTOKEN') return next(err)\n    res.status(403).set('X-CSRF-Token', 'required').send()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Facade Entity\nDESCRIPTION: CDS entity definition that maps to an existing HANA table using @cds.persistence.exists annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nnamespace data.model;\n\ncontext Bookshop {\n  @cds.persistence.exists\n  entity Books {\n    key id        : Integer;\n        the_title : String(100);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Action Handler in Java Service\nDESCRIPTION: Demonstrates how to register and implement a handler for a custom action bound to an entity. The example uses the generated ReviewEventContext for type-safe access to parameters and return values.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\npublic class CatalogServiceHandler implements EventHandler {\n\n    @On(event = \"review\", entity = Books_.CDS_NAME)\n    public void reviewAction(ReviewEventContext context) {\n        CqnSelect selectBook = context.getCqn();\n        Integer stars = context.getStars();\n        Reviews review = ...; // create the review\n        context.setResult(review);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering After Handlers in CAP Service\nDESCRIPTION: Method to register handlers that run after the .on handlers, used for enriching outbound data. Handlers receive the results from previous handlers and the request object.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction srv.after (event, entity?, handler: (\n  results : object[] | any,\n  req     : cds.Request\n))\n```\n\n----------------------------------------\n\nTITLE: Creating CQN Query as Plain Object\nDESCRIPTION: This JavaScript code creates a Core Query Notation (CQN) query by directly constructing a plain JavaScript object. It selects the name and expands all properties of the books association from the `Authors` entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet q = {\n    SELECT: {\n      from: { ref: [ 'Authors' ] },\n      columns: [\n        { ref: [ 'name' ] },\n        { ref: [ 'books' ], expand: [ '*' ] }\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Low-Level Messaging Implementation\nDESCRIPTION: Examples of connecting to and using the messaging service at a low level, including emitting and receiving events.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst messaging = await cds.connect.to('messaging')\n\nawait messaging.emit ('ReviewsService.reviewed', { ... })\n\nmessaging.on ('ReviewsService.reviewed', msg => console.log(msg))\n```\n\n----------------------------------------\n\nTITLE: Error Message Testing Best Practices\nDESCRIPTION: Examples of proper error message testing using regular expressions instead of exact matches.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(POST(`/catalog/Books`,...)).to.be.rejectedWith(\n  /readonly/i\n)\n```\n\n----------------------------------------\n\nTITLE: Emitting Asynchronous Events\nDESCRIPTION: Method to emit asynchronous event messages to a service. Allows passing an event name and data payload.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nasync function srv.emit (\n  event    : string | { event, data?, headers? },\n  data?    : object | any,\n  headers? : object\n)\nreturn : nothing\n```\n\n----------------------------------------\n\nTITLE: Using cds.outboxed to Create an Outboxed Service in JavaScript\nDESCRIPTION: Code demonstrating how to outbox a service programmatically using cds.outboxed(), allowing for asynchronous event dispatching. The outboxed service defers remote operations until the current transaction succeeds.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst srv = await cds.connect.to('yourService')\nconst outboxed = cds.outboxed(srv)\n\nawait outboxed.emit('someEvent', { some: 'message' }) // asynchronous\nawait outboxed.send('someEvent', { some: 'message' }) // synchronous\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in CDS\nDESCRIPTION: Demonstrates how to declare custom-defined types in CDS to increase semantic expressiveness and share details and annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\ntype User : String; //> merely for increasing expressiveness\ntype Genre : String enum { Mystery; Fiction; ... }\ntype DayOfWeek : Number @assert.range:[1,7];\n```\n\n----------------------------------------\n\nTITLE: Accessing Services via ServiceCatalog\nDESCRIPTION: Demonstrates how to access services through the ServiceCatalog interface, including retrieving all services and filtering by service type.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/services.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nServiceCatalog catalog = context.getServiceCatalog();\nStream<Service> allServices = catalog.getServices();\nStream<ApplicationService> appServices = catalog.getServices(ApplicationService.class);\n```\n\n----------------------------------------\n\nTITLE: Defining Model Projections in CDS\nDESCRIPTION: This CDS code defines a projection on an external service entity. It demonstrates how to create an interface to an external service, selecting and renaming specific fields.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_24\n\nLANGUAGE: cds\nCODE:\n```\nusing {  API_BUSINESS_PARTNER as bupa } from '../srv/external/API_BUSINESS_PARTNER';\n\nentity Suppliers as projection on bupa.A_BusinessPartner {\n  key BusinessPartner as ID,\n  BusinessPartnerFullName as fullName,\n  BusinessPartnerIsBlocked as isBlocked,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic CDI Services with Association Handling in CAP CDS\nDESCRIPTION: Demonstrates setting up CDI-compatible services for Airport, Airline, Flight, and FlightConnection entities. Shows how to handle managed associations by replacing them with foreign keys and excluding unmanaged associations.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/analytics.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\n@path:'/cdi-airport'  // provide this path as ServiceURL in Providers\nservice com.sap.cloudDataIntegrationData.Airport {\n  @DataIntegration.Extractable\n  entity Airport as projection on my.Airport {\n    *,\n    CountryCode.code as CountryCode_code  // foreign key for managed association CountryCode\n  } excluding { CountryCode };            // remove managed association itself\n}\n\n@path:'/cdi-airline'\nservice com.sap.cloudDataIntegrationData.Airline {\n  @DataIntegration.Extractable\n  entity Airline as projection on my.Airline {\n    *,\n    CurrencyCode.code as CurrencyCode_code\n  } excluding { CurrencyCode };\n}\n\n@path:'/cdi-flight'\nservice com.sap.cloudDataIntegrationData.Flight {\n  @DataIntegration.Extractable\n  entity Flight as projection on my.Flight {\n    *,\n    CurrencyCode.code as CurrencyCode_code  // foreign key\n  } excluding { CurrencyCode,\n                to_Airline, to_Connection };  // remove unmanaged associations\n}\n\n@path:'/cdi-flight-connection'\nservice com.sap.cloudDataIntegrationData.FlightConnection {\n  @DataIntegration.Extractable\n  entity FlightConnection as projection on my.FlightConnection {\n    *,\n    DepartureAirport.AirportID as DepartureAirport_AirportID,\n    DestinationAirport.AirportID as DestinationAirport_AirportID\n  } excluding { DepartureAirport, DestinationAirport,\n                to_Airline};\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Service Facade with Projections\nDESCRIPTION: Shows how to create a service facade that exposes a flattened view of underlying domain models using projections in CDS.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\nusing { sap.capire.bookshop as underlying } from '../db/schema';\nservice CatalogService {\n  @readonly entity ListOfBooks as projection on underlying.Books {\n    ID, title, author.name as author // flattened\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resilience with SAP Cloud SDK in Java CAP Applications\nDESCRIPTION: Example of using ResilienceDecorator from the SAP Cloud SDK to add resilience capabilities to remote service calls in a CAP Java application. It configures a time limiter and implements a fallback strategy when the primary S/4 system call fails.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_63\n\nLANGUAGE: java\nCODE:\n```\nResilienceConfiguration config = ResilienceConfiguration.of(AdminServiceAddressHandler.class)\n  .timeLimiterConfiguration(TimeLimiterConfiguration.of(Duration.ofSeconds(10)));\n\ncontext.setResult(ResilienceDecorator.executeSupplier(() ->  {\n  // ..to access the S/4 system in a resilient way..\n  logger.info(\"Delegating GET Addresses to S/4 service\");\n  return bupa.run(select);\n}, config, (t) -> {\n  // ..falling back to the already replicated addresses in our own database\n  logger.warn(\"Falling back to already replicated Addresses\");\n  return db.run(select);\n}));\n```\n\n----------------------------------------\n\nTITLE: Registering Asynchronous Event Handlers\nDESCRIPTION: Method to register handlers for asynchronous events that are emitted by srv.emit(). These handlers receive a single argument and are executed concurrently.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction srv.on (event, handler: (\n  msg : cds.Event\n))\n```\n\n----------------------------------------\n\nTITLE: Complete Java Event Handler Class with Imports\nDESCRIPTION: Full implementation of a Java CAP event handler class including all necessary imports, component annotation, and service name specification for the CatalogService.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npackage com.sap.capire.bookshop.handlers;\n\nimport java.util.List;\nimport org.springframework.stereotype.Component;\nimport com.sap.cds.services.cds.CqnService;\nimport com.sap.cds.services.handler.EventHandler;\nimport com.sap.cds.services.handler.annotations.After;\nimport com.sap.cds.services.handler.annotations.ServiceName;\nimport cds.gen.catalogservice.Books;\nimport cds.gen.catalogservice.Books_;\nimport cds.gen.catalogservice.CatalogService_;\n\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\npublic class CatalogServiceHandler implements EventHandler {\n  @After(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\n  public void addDiscountIfApplicable(List<Books> books) {\n    for (Books book : books) {\n      if (book.getStock() != null && book.getStock() > 111) {\n        book.setTitle(book.getTitle() + \" -- 11% discount!\");\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom Functions in Java CQL\nDESCRIPTION: Demonstrates how to use CQL.func to create a custom function call that returns the length of the title field.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_94\n\nLANGUAGE: java\nCODE:\n```\n// CQL: SELECT from Books { LENGTH(title) as titleLength }\n\nCqnElementRef title = CQL.get(\"title\");\nSelect.from(\"bookshop.Books\").columns(func(\"LENGTH\", title).as(\"titleLength\"));\n```\n\n----------------------------------------\n\nTITLE: Suppressing GET Requests on Entity Sets\nDESCRIPTION: Demonstrates various ways to restrict read access for entity sets using ReadRestrictions annotations\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/openapi.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"@Capabilities.ReadRestrictions\": {\n    \"Readable\": false\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"@Capabilities.ReadRestrictions\": {\n    \"Readable\": false,\n    \"ReadByKeyRestrictions\": {\n        \"Readable\": true\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"@Capabilities.ReadRestrictions\": {\n    \"ReadByKeyRestrictions\": {\n        \"Readable\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Cascading Delete Operation in Java\nDESCRIPTION: Shows how to perform a delete operation that cascades along an entity's compositions. The example deletes an order by its ID, which also deletes all related order items through composition relationships.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nCqnDelete delete = Delete.from(\"bookshop.Orders\").matching(singletonMap(\"OrderNo\", 1000));\nlong deleteCount = service.run(delete).rowCount();\n```\n\n----------------------------------------\n\nTITLE: Using Chai Assert Style in Tests\nDESCRIPTION: Example demonstrating how to use the chai.assert style assertions in test files.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { assert } = cds.test(), foobar = {foo:'bar'}\nit('should use chai.assert style', ()=>{\n  assert.property(foobar,'foo')\n  assert.equal(foobar.foo,'bar')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Defined Destinations in Java\nDESCRIPTION: Spring Boot application.yaml configuration for defining custom destinations in Java with properties like URL, authentication type, and HTTP headers/queries.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    REVIEWS:\n      type: \"odata-v4\"\n      destination:\n        properties:\n          url: https://reviews.ondemand.com/reviews\n          authentication: TokenForwarding\n      http:\n        headers:\n          my-header: \"header value\"\n        queries:\n          my-url-param: \"url param value\"\n```\n\n----------------------------------------\n\nTITLE: Setting Shared (Read) Lock in CAP Java Query API\nDESCRIPTION: Shows how to set a shared (read) lock using the SHARED lock mode enum. This allows multiple transactions to read the same resource concurrently while preventing updates.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.cqn.CqnLock.Mode.SHARED;\n\nSelect.from(\"bookshop.Books\").byId(1).lock(SHARED);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the CDS Façade Object in JavaScript\nDESCRIPTION: Basic example showing how to require the CDS module and use it to compile a simple entity definition.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst cds = require('@sap/cds')\nlet csn = cds.compile(`entity Foo {}`)\n\n```\n\n----------------------------------------\n\nTITLE: Efficient Sorting with Association (Good Practice)\nDESCRIPTION: This example demonstrates an efficient way to sort OrdersItems and then join back to OrdersHeaders using an association. This approach is more performant than sorting after a JOIN.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nview SortedOrdersAssoc as select {*, Header.OrderNo, Header.buyer, Header.currency } as Flatten \nfrom (\n  select from OrdersItems {*} order by OrdersItems.title\n);\n```\n\n----------------------------------------\n\nTITLE: Starting CAP Development Server for Node.js\nDESCRIPTION: Command to start the CAP development server in watch mode for Node.js projects.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncds watch\n```\n\n----------------------------------------\n\nTITLE: CUID Aspect Implementation\nDESCRIPTION: Shows the implementation of the cuid aspect that adds a UUID primary key.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo : cuid {...}\n```\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo {\n  key ID : UUID;\n  [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Event Handler in CAP Java\nDESCRIPTION: This Java code adds a custom event handler for a CAP service, integrating with Spring Boot. Dependencies include CAP Java libraries and Spring Boot. The code needs to be placed in the indicated package path and annotated with @Component and @ServiceName to function correctly.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\npublic class CatalogServiceHandler implements EventHandler {\n  // your custom code will go here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Chained UserInfoProvider in Java for CAP SDK\nDESCRIPTION: This snippet shows how to create a chained UserInfoProvider that modifies the result of a previous provider. It demonstrates user name normalization and the use of the setPrevious method for provider chaining.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/request-contexts.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class CustomUserInfoProvider implements UserInfoProvider {\n\n    private UserInfoProvider previousProvider;\n\n    @Override\n    public UserInfo get() {\n        ModifiableUserInfo userInfo = UserInfo.create();\n        if (previousProvider != null) {\n            UserInfo previous = previousProvider.get();\n            if (previous != null) {\n                userInfo = previous.copy();\n            }\n        }\n        if (userInfo != null) {\n            // Normalize user name\n            userInfo.setName(userInfo.getName().toLowerCase(Locale.ENGLISH));\n        }\n\n        return userInfo;\n    }\n\n    @Override\n    public void setPrevious(UserInfoProvider previous) {\n        this.previousProvider = previous;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Localization Query\nDESCRIPTION: SQL query demonstrating how to handle nested localized data with independent fallback logic\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from localized.Books {\n  ID, title, descr,\n  currency.name as currency\n} where title like '%pen%' or currency.name like '%land%'\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements by Annotation in Java\nDESCRIPTION: Demonstrates how to filter a stream of elements to find those with a specific annotation using the Model Reflection API.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.reflect.CdsAnnotatable.byAnnotation;\n...\n\nCdsEntity order = model.getEntity(\"my.bookshop.Orders\");\nStream<CdsElement> elements = order.elements()\n    .filter(byAnnotation(\"title\"));\n```\n\n----------------------------------------\n\nTITLE: Quantity Validator Implementation\nDESCRIPTION: Example of a validator that checks for negative quantity values and logs warnings.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nprocessor.addValidator(\n   (path, element, type) -> element.getName().equals(\"quantity\"), // filter\n   (path, element, value) -> {                               // validator\n      if ((int) value < 0) {\n         log.warn(\"Negative quantity: \" + path.toRef());\n      }\n   });\n```\n\n----------------------------------------\n\nTITLE: Node.js Multitenancy Configuration\nDESCRIPTION: JSON configuration added to package.json to enable multitenancy with sidecar in a Node.js project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"cds\": {\n    \"profile\": \"with-mtx-sidecar\",\n     \"requires\": {\n       \"[production]\": {\n         \"multitenancy\": true\n       }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using After Handlers with Books Entity\nDESCRIPTION: Example of implementing after handlers for READ operations on Books entities. Shows both a regular after handler and an 'each' handler that processes individual results.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nthis.after ('READ', Books, books => {\n  for (let b of books) if (b.stock > 111) b.discount = '11%'\n})\nthis.after ('each', Books, book => {\n  if (book.stock > 111) book.discount = '11%'\n})\n```\n\n----------------------------------------\n\nTITLE: Processing CDS Data\nDESCRIPTION: Shows how to process data using CdsDataProcessor with data list and row type parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nList<Map<String, Object>> data;  // data to be processed\nCdsStructuredType rowType;       // row type of the data\n\nprocessor.process(data, rowType);\n```\n\n----------------------------------------\n\nTITLE: Source Type Definition\nDESCRIPTION: TypeScript type definition for the source property used in SELECT queries, supporting table references, subqueries and joins.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cqn.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype source = ref &as | SELECT | {\n  join : 'inner' | 'left' | 'right'\n  args : [ source, source ]\n  on?  : expr\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Result in Event Handler to Complete Processing in CAP Java SDK\nDESCRIPTION: Event handler using @On annotation that returns a Result object, which automatically completes the event processing. This example delegates execution to the database service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n@On(entity = Books_.CDS_NAME)\npublic Result readBooks(CdsReadEventContext context) {\n    return db.run(context.getCqn());\n}\n```\n\n----------------------------------------\n\nTITLE: Using Event-Specific Context in Event Handlers in CAP Java SDK\nDESCRIPTION: Event handler that uses the event-specific CdsReadEventContext instead of the general EventContext. This provides direct access to event-specific methods and properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\npublic void readBooks(CdsReadEventContext context) { }\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request for Navigation in CAP\nDESCRIPTION: An HTTP GET request example that demonstrates how to address items via an association from a different entity using a navigation path.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_36\n\nLANGUAGE: http\nCODE:\n```\nGET /service/risks/Risks(20466922-7d57-4e76-b14c-e53fd97dcb11)/supplier\n```\n\n----------------------------------------\n\nTITLE: Sample CDS Model Definition\nDESCRIPTION: Defines a CDS model with Orders and OrderItems entities, demonstrating key definitions, compositions, and associations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nentity Orders {\n  key OrderNo : String;\n  Items       : Composition of many OrderItems on Items.parent = $self;\n  ...\n}\nentity OrderItems {\n  key ID : Integer;\n  book   : Association to Books;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Service APIs Programmatically\nDESCRIPTION: Example demonstrating how to test CAP service APIs programmatically by connecting to a service and executing queries using CDS query language.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('Allows testing programmatic APIs', async () => {\n  const AdminService = await cds.connect.to('AdminService')\n  const { Authors } = AdminService.entities\n  expect (await SELECT.from(Authors))\n  .to.eql(await AdminService.read(Authors))\n  .to.eql(await AdminService.run(SELECT.from(Authors)))\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic CAP Java Spring Boot Application Dependencies\nDESCRIPTION: Demonstrates the essential Maven dependencies needed for a CAP Java Spring Boot application with OData V4 endpoints, including framework, protocol adapter, and core runtime modules.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/building.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n\t<!-- Application framework -->\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-framework-spring-boot</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n\n\t<!-- Protocol adapter -->\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-adapter-odata-v4</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n\n\t<!-- CAP Java SDK -->\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-services-api</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-services-impl</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with OData ETag for Optimistic Concurrency Control\nDESCRIPTION: Example of defining an entity with @odata.etag annotation for optimistic concurrency control, using @cds.on.update and @cds.on.insert to automatically update the timestamp.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_12\n\nLANGUAGE: cds\nCODE:\n```\nentity Order : cuid {\n    @odata.etag\n    @cds.on.update : $now\n    @cds.on.insert : $now\n    modifiedAt : Timestamp;\n    product : Association to Product;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Handler in JavaScript\nDESCRIPTION: JavaScript implementation of the acceptTravel action handler that updates the travel status.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nthis.on('acceptTravel', req => UPDATE(req._target).with({TravelStatus_code:'A'}))\n```\n\n----------------------------------------\n\nTITLE: Defining CAP Service Model for SAP Personal Data Manager\nDESCRIPTION: Creates a dedicated CDS service for integration with SAP Personal Data Manager. It includes projections on existing entities, a flattened view of Incidents and Conversations, and necessary annotations for personal data and search fields.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/pdm.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nusing {sap.capire.incidents as db} from '../db/schema';\n\n@requires: 'PersonalDataManagerUser' // security check\nservice PDMService @(path: '/pdm') {\n\n  // Data Privacy annotations on 'Customers' and 'Addresses' are derived from original entity definitions\n  entity Customers                as projection on db.Customers;\n  entity Addresses                as projection on db.Addresses;\n  entity Incidents                as projection on db.Incidents\n\n  // create view on Incidents and Conversations as flat projection\n  entity IncidentConversationView as\n      select from Incidents {\n              ID,\n              title,\n              urgency,\n              status,\n          key conversation.ID        as conversation_ID,\n              conversation.timestamp as conversation_timestamp,\n              conversation.author    as conversation_author,\n              conversation.message   as conversation_message,\n              customer.ID            as customer_ID,\n              customer.email         as customer_email\n      };\n\n  // annotate new view\n  annotate PDMService.IncidentConversationView with @(PersonalData.EntitySemantics: 'Other') {\n      customer_ID @PersonalData.FieldSemantics: 'DataSubjectID';\n  };\n\n  // annotations for Personal Data Manager - Search Fields\n  annotate Customers with @(Communication.Contact: {\n        n    : {\n            surname: lastName,\n            given  : firstName\n        },\n        bday : dateOfBirth,\n        email: [{\n          type   : #preferred,\n          address: email}]\n    });\n\n  };\n```\n\n----------------------------------------\n\nTITLE: Correctly Using Dynamic Imports in JavaScript Services\nDESCRIPTION: Demonstrates the correct pattern for importing model types in JavaScript CAP services, showing that imports must be dynamic within service methods rather than at the top level to avoid runtime errors.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n// ❌ works during design time, but will cause runtime errors\nconst { Book } = require('#cds-models/sap/capire/bookshop')\n\nclass CatalogService extends cds.ApplicationService { init(){\n  // ✅ works both at design time and at runtime\n  const { Book } = require('#cds-models/sap/capire/bookshop')\n}}\n```\n\n----------------------------------------\n\nTITLE: Implementing SLF4J Logging in CAP Java Service\nDESCRIPTION: Demonstrates how to implement logging in a CAP Java service using SLF4J API. Shows logger initialization and usage with different log levels in an order consolidation handler.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nLogger logger = LoggerFactory.getLogger(\"my.loggers.order.consolidation\");\n\n@After(event = CqnService.EVENT_READ)\npublic void readAuthors(List<Orders> orders) {\n\torders.forEach(order -> {\n\t\tlogger.debug(\"Consolidating order {}\", order);\n\t\tconsolidate(order);\n\t});\n\tlogger.info(\"Consolidated {} orders\", orders.size());\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing CDS Data to JSON in CAP Java\nDESCRIPTION: Shows how to create CDS Data structures and serialize them to JSON format for debugging purposes. The example demonstrates both direct property setting and nested path access.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nCdsData person = Struct.create(CdsData.class);\nperson.put(\"salutation\", \"Mr.\");\nperson.putPath(\"name.first\", \"Frank\"); // path access\n\nperson.toJson(); // { \"salutation\" : \"Mr.\", name : { \"first\" : \"Frank\" } }\n```\n\n----------------------------------------\n\nTITLE: Implementing Pessimistic Locking with Exclusive (Write) Lock in CAP Java\nDESCRIPTION: Demonstrates how to use the lock() method to implement exclusive (write) pessimistic locking with a timeout parameter of 5 seconds, followed by an update operation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Books\").byId(1).lock(5);\n...\nUpdate.entity(\"bookshop.Books\").data(\"price\", 18).byId(1);\n```\n\n----------------------------------------\n\nTITLE: Event Handler Implementation in Bookstore Service\nDESCRIPTION: Shows how to implement an event handler that listens for 'reviewed' events from the ReviewsService to update book ratings.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  // Update Books' average ratings when reviews are updated\n  ReviewsService.on ('reviewed', (msg) => {\n    const { subject, count, rating } = msg.data\n    // ...\n  })\n```\n\n----------------------------------------\n\nTITLE: Registering Done Handlers for Requests\nDESCRIPTION: Demonstrates how to register handlers for different stages of request completion, including before commit, on success, on failure, and after completion.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreq.before('commit', () => {...}) // immediately before calling commit\nreq.on('succeeded', () => {...}) // request succeeded, after commit\nreq.on('failed', () => {...}) // request failed, after rollback\nreq.on('done', () => {...}) // request succeeded/failed, after all\n```\n\n----------------------------------------\n\nTITLE: Managed Aspect Implementation\nDESCRIPTION: Demonstrates the managed aspect that adds creation and modification tracking fields.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo : managed {...}\n```\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo {\n  createdAt  : Timestamp @cds.on.insert : $now;\n  createdBy  : User      @cds.on.insert : $user;\n  modifiedAt : Timestamp @cds.on.insert : $now  @cds.on.update : $now;\n  modifiedBy : User      @cds.on.insert : $user @cds.on.update : $user;\n  [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors Immediately with cds.error() in JavaScript\nDESCRIPTION: Example of using cds.error() without 'new' to throw errors immediately, which allows for concise conditional error throwing.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlet e = foo || cds.error (`Expected 'foo' to be truthy, but got: ${foo}`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Destinations in Java with application.yaml\nDESCRIPTION: Configuration for remote services in Spring Boot's application.yaml file. This example shows how to configure an OData v2 API_BUSINESS_PARTNER service with a destination named 'cpapp-bupa'.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    API_BUSINESS_PARTNER:\n      type: \"odata-v2\"\n      destination:\n        name: \"cpapp-bupa\"\n      http:\n        suffix: \"/sap/opu/odata/sap\"\n```\n\n----------------------------------------\n\nTITLE: Verticalization in CDS\nDESCRIPTION: This snippet shows how CDS allows for verticalization by extending existing definitions, even those not owned by the developer.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\n// Everyone can extend any definitions, also ones they don't own:\nusing { sap.common.Countries } from '@sap/cds/common';\nextend Countries with { county: String } // for UK, ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom CAP Service Handler in Node.js\nDESCRIPTION: Demonstrates how to implement a custom event handler for a CAP service in Node.js, including the option to call the base implementation.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst base_impl = require ('@capire/bookshop/srv/cat-service')\nmodule.exports = cds.service.impl (async function(){\n  this.on (...) // add your event handlers\n  await base_impl.call (this,this)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Timestamps in Request Handlers in CAP Node.js\nDESCRIPTION: Example showing how to use the request's timestamp property for managed dates. The timestamp is a JavaScript Date object that is automatically converted to the correct format when sent to the database.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsrv.before(\"UPDATE\", \"EntityName\", (req) => {\n  const now = req.timestamp;\n  req.data.createdAt = now;\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Predicate Construction with CQL Interface in CAP Java\nDESCRIPTION: Shows how to dynamically construct predicates using the CQL Interface based on runtime conditions, demonstrating the flexibility of this approach.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_90\n\nLANGUAGE: java\nCODE:\n```\nList<Integer> years = ...;\nList<Value<Integer>> yearValues = years.stream().map(y -> val(y)).collect(toList());\nCqnElementRef year = CQL.get(\"year\");\n\nCqnPredicate filter;\nif (years.isEmpty()) {\n   filter = and(comparison(year, Operator.GE, val(2000)), comparison(year, Operator.LE, val(2010)));\n} else {\n   filter = CQL.in(year, yearValues);\n}\n\nSelect.from(\"bookshop.Books\").where(filter);\n```\n\n----------------------------------------\n\nTITLE: Creating Entity References for Query Building in Java\nDESCRIPTION: Demonstrates how to create both typed and untyped entity references for use in queries, including filtering entities based on conditions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_47\n\nLANGUAGE: java\nCODE:\n```\nimport com.sap.cds.ql.CQL;\n\n// bookshop.Books[year = 2020].author\nAuthors_ authors = CQL.entity(Books_.class).filter(b -> b.year().eq(2020)).author();\n\n// or as untyped entity ref\nStructuredType<?> authors =\n   CQL.entity(\"bookshop.Books\").filter(b -> b.get(\"year\").eq(2020)).to(\"author\");\n\n// SELECT from bookshop.Books[year = 2020]:author { name }\nSelect.from(authors).columns(\"name\");\n```\n\n----------------------------------------\n\nTITLE: Using IN Predicate with Literal Values in CDS Query Builder\nDESCRIPTION: Example of using the 'in' predicate to filter books written by authors with specific names provided as literal values.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_66\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(BOOKS)\n  .where(b -> b.author().name().in(\"Poe\", \"Hemingway\"));\n```\n\n----------------------------------------\n\nTITLE: Customizing CAP Service Definitions in CDS\nDESCRIPTION: Illustrates how to modify CAP service definitions by using annotations to serve a service at a custom endpoint, particularly for ModelProviderService.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_12\n\nLANGUAGE: cds\nCODE:\n```\nusing { cds.xt.ModelProviderService } from '@sap/cds-mtxs';\nannotate ModelProviderService with @path: '/mtx/mps';\n```\n\n----------------------------------------\n\nTITLE: Declaring CDS View with SQL-like syntax\nDESCRIPTION: This SQL code snippet declares a new entity named `MyFavoriteBooks` as a view on the `Books` entity. It selects the ID and title from `Books` and the author's name, filtering the results based on the `MyFavorites` entity. This view uses native SQL feature sets.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nentity MyFavoriteBooks as select from Books {\n   ID, title, author.name as author\n} where ID in (SELECT book from MyFavorites)\n```\n\n----------------------------------------\n\nTITLE: Annotating Event Handler Classes in Java\nDESCRIPTION: Demonstrates how to annotate event handler classes with @Component and @ServiceName annotations, and implement the EventHandler interface.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.stereotype.Component;\nimport com.sap.cds.services.handler.EventHandler;\nimport com.sap.cds.services.handler.annotations.ServiceName;\n\n@Component\n@ServiceName(\"AdminService\")\npublic class AdminServiceHandler implements EventHandler {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tenant Unsubscription Events\nDESCRIPTION: Event handlers for tenant unsubscription lifecycle events. Demonstrates how to add custom logic before and after tenant offboarding.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/multitenancy.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Before\npublic void beforeUnsubscribe(UnsubscribeEventContext context) {\n    // Activities before offboarding\n}\n\n@After\npublic void afterUnsubscribe(UnsubscribeEventContext context) {\n    // Notify offboarding finished\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Correlation in CAP.js\nDESCRIPTION: Algorithm used by CAP.js to extract or generate correlation IDs for request tracing. This code checks various common correlation ID headers and ensures consistent availability of the ID throughout the request lifecycle.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst { headers: h } = req\nconst id = h['x-correlation-id'] || h['x-correlationid']\n  || h['x-request-id'] || h['x-vcap-request-id']\n  || uuid()\nif (!cds.context) cds.context = { id }\nreq.headers['x-correlation-id'] = cds.context.id\n```\n\n----------------------------------------\n\nTITLE: Importing API Definition with cds import\nDESCRIPTION: Command to import an external API (EDMX, OpenAPI, or AsyncAPI) into a CAP project as a CDS file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncds import <input_file> --as cds\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example of Using CDS Import API in JavaScript\nDESCRIPTION: Provides a complete example demonstrating the usage of various cds.import functions to convert different types of API specifications to CSN. It includes importing OData, OpenAPI, and AsyncAPI specifications using both the general cds.import() function and the specialized functions for each specification type.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-import.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds-dk')\nmodule.exports = async (srv) => {\n  const csns = await Promise.all([\n    // for odata\n    cds.import('./odata_sample.edmx', { includeNamespaces: 'sap,c4c', keepNamespace: true }),\n    // for openapi\n    cds.import('./openapi_sample.json'),\n    // for asyncapi\n    cds.import('./asyncapi_sample.json'),\n    // for odata\n    cds.import.from.edmx('./odata_sample.xml', { includeNamespaces: '*', keepNamespace: false }),\n    // for openapi\n    cds.import.from.openapi('./openapi_sample.json')\n    // for asyncapi\n    cds.import.from.asyncapi('./asyncapi_sample.json')\n  ]);\n\n  for (let i = 0; i < csns.length; i++) {\n    let json = cds.compile.to.json (csns[i])\n    console.log (json)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Embeddings in CDS Model\nDESCRIPTION: Demonstrates how to define entities with vector embedding fields in CDS models. Vector embeddings support machine learning operations like similarity search.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\nentity Books : cuid { // \n  title         : String(111);\n  description   : LargeString;  // \n  embedding     : Vector(1536); // vector space w/ 1536 dimensions // \n} // \n```\n\n----------------------------------------\n\nTITLE: Adding SAP HANA Support\nDESCRIPTION: Command to add SAP HANA database configuration to the CAP project\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncds add hana\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Parameters in CAP JavaScript\nDESCRIPTION: Demonstrates how to access URL path parameters from an HTTP request. The example shows accessing both simple and compound parameters from the request object.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /catalog/Authors(101)/books(title='Eleonora',edition=2) HTTP/1.1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst [ author, book ] = req.params\n// > author === 101\n// > book === { title: 'Eleonora', edition: 2 }\n```\n\n----------------------------------------\n\nTITLE: Entity Annotations with Aspects\nDESCRIPTION: Demonstrates how to add field and entity level annotations using the annotate directive.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_17\n\nLANGUAGE: cds\nCODE:\n```\nannotate Books with @some.entity.level.annotations {\n  title @some.field.level.annotations;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Tagged Template Strings with CQN Operations\nDESCRIPTION: Shows examples of using tagged template strings provided by cds.ql for constructing CQN queries.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nawait srv.read `Books` .where `ID=${201}`\nawait srv.create `Books` .entries ({title:'Wuthering Heights'})\nawait srv.update `Books` .where `ID=${201}` .with `title=${'Sturmhöhe'}`\nawait srv.delete `Books` .where `ID=${201}`\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment Properties for CAP Service\nDESCRIPTION: Defines deployment properties for the CAP service, including bindings, resources, environment variables, health checks, and container image settings.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsrv:\n  # [Service bindings](#configuration-options-for-service-bindings)\n  bindings:\n\n  # [Kubernetes container resources](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)\n  resources:\n\n  # Map of additional env variables\n  env:\n    MY_ENV_VAR: 1\n\n  # [Kubernetes Liveness, Readiness and Startup Probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)\n  health:\n    liveness:\n      path: <endpoint>\n    readiness:\n      path: <endpoint>\n    startupTimeout: <seconds>\n\n  # [Container image](#configuration-options-for-container-images)\n  image:\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic IDs with Text Arrangement in CDS\nDESCRIPTION: Shows how to exchange a display ID (GUID) with a human-readable text by annotating an entity with semantic ID configuration. This example uses the unique email property instead of the default ID for better user experience.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_23\n\nLANGUAGE: cds\nCODE:\n```\n// new field in existing service -- exchange ID with text\nannotate OrdersService.Orders:x_Customer with @(\n  Common: {\n    //show email, not id for Customer in the context of Orders\n    Text: x_Customer.email  , TextArrangement: #TextOnly,\n    ValueList: {\n      Label: 'Customers',\n      CollectionPath: 'x_Customers',\n      Parameters: [\n        { $Type: 'Common.ValueListParameterInOut',\n          LocalDataProperty: x_Customer_ID,\n          ValueListProperty: 'ID'\n        },\n        { $Type: 'Common.ValueListParameterDisplayOnly',\n          ValueListProperty: 'email'\n        }\n      ]\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Container with Key using Generated Static Method in Java\nDESCRIPTION: Shows how to use an additional static create method generated for entities with a single key to create and set the key value.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nBook book = Books.create(\"9780141439846\");\n\nString id = book.getId(); // id: \"9780141439846\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Test Instances\nDESCRIPTION: Example showing how to manually create Test class instances for more flexible test setup configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Test } = cds.test\nlet test = new Test\ntest.run().in(_dirname)\n```\n\n----------------------------------------\n\nTITLE: Delegating Calls to Remote CAP Services in Node.js\nDESCRIPTION: Demonstrates how to delegate calls from a local CAP service to a remote service in Node.js, including request handling and data transformation.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst CatalogService = await cds.connect.to ('CatalogService')\nconst ReviewsService = await cds.connect.to ('ReviewsService')\nCatalogService.prepend (srv => srv.on ('READ', 'Books/reviews', (req) => {\n  console.debug ('> delegating request to ReviewsService')\n  const [id] = req.params, { columns, limit } = req.query.SELECT\n  return ReviewsService.tx(req).read ('Reviews',columns).limit(limit).where({subject:String(id)})\n}))\n```\n\n----------------------------------------\n\nTITLE: Specifying Association Keys in CAP JS\nDESCRIPTION: Demonstrates how to explicitly specify alternative target properties for associations using the 'keys' property.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'Books': {kind:\"entity\", elements:{\n    'genre': {type:\"cds.Association\", target:\"Genres\", keys:[\n      {ref:[\"category\"], as:\"cat\"},\n      {ref:[\"name\"]},\n    ]},\n  }},\n}})\n```\n\n----------------------------------------\n\nTITLE: Checking Scoped User Roles in CAP.js\nDESCRIPTION: JavaScript code showing how to check for fully qualified role names when needed outside the service's own scope. This method allows for precise role checking across service boundaries.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nreq.user.is (\"my.app.admin\")\n```\n\n----------------------------------------\n\nTITLE: Connecting Streams of Predicates in CAP Java CQL\nDESCRIPTION: Demonstrates how to use Java Stream API with CQL collectors to connect multiple predicates, creating complex filtering conditions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_91\n\nLANGUAGE: java\nCODE:\n```\nList<Name> names = ...\nCqnPredicate filter =\n  names.stream()\n       .map(n -> CQL.and(\n           CQL.get(\"firstName\").eq(n.first()),\n           CQL.get(\"lastName\").eq(n.last())))\n       .collect(CQL.withOr());\n```\n\n----------------------------------------\n\nTITLE: Defining Localized Service in CDS\nDESCRIPTION: Example service definition showing different projections of Books entity with localized fields\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\nusing { Books } from './books';\nservice CatalogService {\n  entity BooksList as projection on Books { ID, title, price };\n  entity BooksDetails as projection on Books;\n  entity BooksShort as projection on Books { \n    ID, price,\n    substr(title, 0, 10) as title : localized String(10), \n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Entity Model for Books, Authors, and Reviews\nDESCRIPTION: CDS schema definition for Books, Authors, and Reviews entities, including a CatalogService with a Books projection and an addReview action.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nentity Books : cuid, managed {\n    title  : localized String(111);\n    descr  : localized String(1111);\n    author : Association to Authors;\n}\n\nentity Authors : cuid, managed {\n    name         : String(111);\n    dateOfBirth  : Date;\n    placeOfBirth : String;\n    books        : Association to many Books\n                       on books.author = $self;\n}\n\nentity Reviews : cuid, managed {\n    book   : Association to Books;\n    rating : Rating;\n    title  : String(111);\n    text   : String(1111);\n}\n\nservice CatalogService {\n    type Reviewer {\n        firstName : String;\n        lastName  : String;\n    }\n    entity Books as projection on my.Books excluding {\n        createdBy,\n        modifiedBy\n    } actions {\n        action addReview(reviewer : Reviewer, rating : Integer,\n          title : String, text : String) returns Reviews;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Services with Destination in CAP Java\nDESCRIPTION: YAML configuration for connecting to an OData V2 service using the SAP BTP Destination Service. This snippet shows how to reference a destination named 's4-business-partner-api' for the API_BUSINESS_PARTNER remote service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    API_BUSINESS_PARTNER:\n      type: \"odata-v2\"\n      destination:\n        name: s4-business-partner-api\n```\n\n----------------------------------------\n\nTITLE: Cancelling a ChangeSet without Exception in Java\nDESCRIPTION: This code snippet shows how to cancel a ChangeSet without throwing an exception in CAP Java SDK. It processes all events but rolls back the transaction at the end.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/changeset-contexts.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChangeSetContext changeSet = context.getChangeSetContext();\n// cancel changeset without throwing an exception\nchangeSet.markForCancel();\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values in Query Results\nDESCRIPTION: Shows best practices for handling null values in query results. The example demonstrates checking for null values directly and when iterating through row elements.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nif (row.get(\"name\") == null) {\n   // handle mising value for name\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nrow.forEach((k, v) -> {\n  if (v == null) {\n   // handle mising value for element v\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Programmatic Destinations with Technical User Authentication\nDESCRIPTION: Creates an OAuth2 destination that uses client credentials (technical user) to authenticate with the external API. This is useful for system-to-system integration scenarios.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nClientCredentials clientCredentials =\n        new ClientCredentials(\"clientid\", \"clientsecret\");\n\nOAuth2DestinationBuilder\n        .forTargetUrl(\"https://example.org\")\n        .withTokenEndpoint(\"https://xsuaa.url\")\n        .withClient(clientCredentials, OnBehalfOf.TECHNICAL_USER_CURRENT_TENANT)\n        .property(\"name\", \"my-destination\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Compiling CDS Files Asynchronously\nDESCRIPTION: Examples of using cds.compile to process CDS files asynchronously. The function takes filenames or patterns and resolves them to absolute paths using cds.resolve.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet csn = await cds.compile (['db','srv','app'])\nlet csn = await cds.compile ('*')\nlet csn = await cds.compile ('file:db')\n```\n\n----------------------------------------\n\nTITLE: Creating Audit Logs from Service Events\nDESCRIPTION: Example of subscribing to service events to create audit logs by connecting to an audit-log service.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst audit = await cds.connect.to('audit-log')\nBooksService.on ('BooksOrdered', msg => audit.log ({\n  timestamp: msg.timestamp,\n  user: msg.data.buyer,\n  event: msg.event,\n  details: msg.data\n}))\n```\n\n----------------------------------------\n\nTITLE: Using Manual Transaction in Done Handler\nDESCRIPTION: Shows how to use a manual transaction within a 'done' handler to perform database operations after the main transaction has completed.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreq.on('done', async () => {\n  await cds.tx(async () => {\n    await UPDATE `Stats` .set `views = views + 1` .where `book_ID = ${book.ID}`\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: CDS Extension Model Definition\nDESCRIPTION: CDS model extending the Orders service with new fields and annotations for UI rendering\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\nnamespace x_orders.ext;\nusing { OrdersService, sap, sap.capire.orders.Orders } from '@capire/orders';\n\nextend Orders with {\n  x_priority    : String enum {high; medium; low} default 'medium';\n  x_salesRegion : Association to x_SalesRegion;\n}\n\nentity x_SalesRegion : sap.common.CodeList {\n  key code : String(11);\n}\n\nannotate Orders:x_priority with @title: 'Priority';\nannotate x_SalesRegion:name with @title: 'Sales Region';\n\nannotate OrdersService.Orders with @UI.LineItem: [\n  ... up to { Value: OrderNo },\n  { Value: x_priority },\n  { Value: x_salesRegion.name },\n  ...\n];\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Events with Context Type Casting in CAP Java SDK\nDESCRIPTION: Event handler registered for multiple events (CREATE and UPDATE) using event context casting to access event-specific parameters. Demonstrates using if-else logic to handle different event types.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = { CqnService.EVENT_CREATE, CqnService.EVENT_UPDATE }, entity = Books_.CDS_NAME)\npublic void changeBooks(EventContext context) {\n    if(context.getEvent().equals(CqnService.EVENT_CREATE)) {\n        CdsCreateEventContext ctx = context.as(CdsCreateEventContext.class);\n        // ...\n    } else {\n        CdsUpdateEventContext ctx = context.as(CdsUpdateEventContext.class);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Result Processing Using Interfaces\nDESCRIPTION: Demonstrates how to use Java interfaces for type-safe access to query results. The example shows defining an interface that matches entity structure and using it to access data with compile-time safety.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_26\n\nLANGUAGE: java\nCODE:\n```\ninterface Book {\n  String getTitle();\n  Integer getStock();\n}\n\nRow row = ...\nBook book = row.as(Book.class);\n\nString title = book.getTitle();\nInteger stock = book.getStock();\n```\n\n----------------------------------------\n\nTITLE: Using Indexed Parameters in Query Conditions\nDESCRIPTION: Demonstrates how to use indexed parameters in query conditions, allowing execution with different parameter values.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_52\n\nLANGUAGE: java\nCODE:\n```\n// indexed\nimport static com.sap.cds.ql.CQL.param;\n\nSelect.from(\"bookshop.Authors\")\n      .where(a -> a.firstName().eq(param(0)).and(\n                  a.lastName().eq(param(1))));\ndataStore.execute(query, \"Paul\", \"Mueller\");\n```\n\n----------------------------------------\n\nTITLE: Using srv.run to Execute CQN Queries in JavaScript\nDESCRIPTION: Shows example usages of the srv.run method with INSERT, SELECT operations and query batching.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nawait srv.run( INSERT.into(Books,{ title: 'Catweazle' }) )\nawait srv.run( SELECT.from(Books,201) )\nawait srv.run([\n  SELECT.from(Authors),\n  SELECT.from(Books)\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Microservice to Use Shared Database\nDESCRIPTION: YAML configuration showing how to configure a microservice (reviews) to use an existing shared database service. This enables multiple services to share a single database instance.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n...\nmodules:\n  ...\n\n  - name: reviews-db-deployer # [!code --]\n    type: hdb # [!code --]\n    path: gen/db # [!code --]\n    parameters: # [!code --]\n      buildpack: nodejs_buildpack # [!code --]\n    requires: # [!code --]\n      - name: reviews-db # [!code --]\n\nresources:\n  ...\n  - name: reviews-db\n    type: com.sap.xs.hdi-container # [!code --]\n    type: org.cloudfoundry.existing-service # [!code ++]\n    parameters:\n      service: hana # [!code --]\n      service-plan: hdi-shared # [!code --]\n      service-name: shared-db-db # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Books Entity with CQL and Path Expressions\nDESCRIPTION: This SQL code selects the ID, title, and author's name from the `Books` entity using CQL path expressions. It simplifies the query by navigating along the association between `Books` and `Authors`, eliminating the need for a JOIN clause.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ID, title, author.name as author from Books\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Inheritance in CDS and Java\nDESCRIPTION: Demonstrates how to use @cds.java.extends annotation to establish Java inheritance between CDS aspects and extending definitions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_25\n\nLANGUAGE: cds\nCODE:\n```\nusing { temporal } from '@sap/cds/common';\n\n@cds.java.extends: ['temporal']\nentity AuthorManager : temporal {\n  key ID : Integer;\n  name   : String(30);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ServletAdapterFactory for Custom Protocol Adapters in CAP Java\nDESCRIPTION: This Java class implements the ServletAdapterFactory interface to create and configure a custom protocol adapter for CAP Java applications. It defines mappings, paths, and enables integration with the CdsRuntime.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/building-plugins.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class SampleAdapterFactory implements ServletAdapterFactory, CdsRuntimeAware {\n  /*\n   * a short key identifying the protocol that's being served\n   * by the new protocol adapter, for example, odata-v4, hcql, ..\n   */\n  static final String PROTOCOL_KEY = \"protocol-key\";\n\n  private CdsRuntime runtime;\n\n  @Override\n  public void setCdsRuntime(CdsRuntime runtime) {\n    /*\n     * In case the protocol adapter needs the CdsRuntime\n     * the factory can implement CdsRuntimeAware and will\n     * be provided with a CdsRuntime via this method.\n     * The create() method below can then use the provided\n     * runtime for the protocol adapter.\n     */\n    this.runtime = runtime;\n  }\n\n  @Override\n  public Object create() {\n    // Create and return the protocol adapter\n    return new SampleAdapter(runtime);\n  }\n\n  @Override\n  public boolean isEnabled() {\n    // Determines if the protocol adapter is enabled\n  }\n\n  @Override\n  public String getBasePath() {\n    // Return the base path\n  }\n\n  @Override\n  public String[] getMappings() {\n    /*\n     * Return all paths to which the protocol adapter is\n     * going to be mapped. Usually, this will be each CDS\n     * service with either it's canonical or annotated\n     * path prefixed with the base path of the protocol\n     * adapter (see above).\n     */\n  }\n\n  @Override\n  public UrlResourcePath getServletPath() {\n    /*\n     * Use the UrlResourcePathBuilder to build and return\n     * a UrlResourcePath containing the basePath (see above)\n     * and all paths being registered for the protocol key\n     * of the new protocol adapter.\n     */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Association to Temporal Entity Time Slice in CDS\nDESCRIPTION: This CDS snippet demonstrates how to define an association to a specific time slice of a temporal entity by including both ID and validFrom in the association.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\nentity SomeSnapshotEntity {\n  //...\n  workAssignment : Association to WorkAssignments { ID, validFrom }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters in Query Conditions\nDESCRIPTION: Shows how to use named parameters in query conditions, allowing execution with different parameter values provided as a map.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_53\n\nLANGUAGE: java\nCODE:\n```\n// named\nimport static com.sap.cds.ql.CQL.param;\n\nSelect.from(\"bookshop.Authors\")\n      .where(a -> a.firstName().eq(param(\"first\")).and(\n                  a.lastName().eq(param(\"last\"))));\n\nMap<String, Object> paramValues = new HashMap<>();\nparamValues.put(\"first\", \"Paul\");\nparamValues.put(\"last\", \"Mueller\");\n\ndataStore.execute(query, paramValues);\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Handler in CDS Service Definition\nDESCRIPTION: Demonstrates how to specify a custom handler for a service in a reuse package using the @impl annotation with a fully qualified module path.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_30\n\nLANGUAGE: cds\nCODE:\n```\nservice CatalogService @(impl: '@sap/bookshop/srv/cat-service.js') {...}\n```\n\n----------------------------------------\n\nTITLE: SAP HANA Data Type Mappings\nDESCRIPTION: Mapping table showing SAP HANA-specific data types and their corresponding SQL and OData V4 representations. These types are primarily used when porting existing SAP HANA CDS models where preserving original database types is necessary.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nhana.SMALLINT -> SMALLINT -> Edm.Int16\nhana.TINYINT -> TINYINT -> Edm.Byte\nhana.SMALLDECIMAL -> SMALLDECIMAL -> Edm.Decimal\nhana.REAL -> REAL -> Edm.Single\nhana.CHAR(length) -> CHAR -> Edm.String\nhana.NCHAR(length) -> NCHAR -> Edm.String\nhana.VARCHAR(length) -> VARCHAR -> Edm.String\nhana.CLOB -> CLOB -> Edm.String\nhana.BINARY(length) -> BINARY -> Edm.Binary\nhana.ST_POINT(srid) -> ST_POINT -> Edm.GeometryPoint\nhana.ST_GEOMETRY(srid) -> ST_GEOMETRY -> Edm.Geometry\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UserInfoProvider in Java for CAP SDK\nDESCRIPTION: This code snippet demonstrates how to create a custom UserInfoProvider that retrieves user information from HTTP headers. It uses Spring's @Component and @Order annotations for integration and priority setting.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/request-contexts.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@Order(1)\npublic class HeaderBasedUserInfoProvider implements UserInfoProvider {\n\n    @Autowired\n    HttpServletRequest req; // accesses current HTTP request\n\n    @Override\n    public UserInfo get() {\n        if (RequestContextHolder.getRequestAttributes() != null) {\n            // only within request thread req is available\n            return UserInfo.create()\n                .setTenant(req.getHeader(\"custom-tenant-header\"))\n                .setName(req.getHeader(\"custom-username-header\"));\n        }\n        return UserInfo.create();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Technical User in CAP Java SDK\nDESCRIPTION: Creates a new Request Context with a technical user, removing the named user from the context. This is useful when calling external services without propagating the original user.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/request-contexts.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@After(entity = Books_.CDS_NAME)\npublic void afterHandler(EventContext context){\n    runtime.requestContext().systemUser().run(reqContext -> {\n        // call technical service\n        ...\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving UserInfo from EventContext in Java\nDESCRIPTION: Demonstrates how to retrieve UserInfo from the EventContext object in a CAP Java SDK application. This is useful for accessing user authentication information in custom handlers.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/security.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nEventContext context;\nUserInfo user = context.getUserInfo();\n```\n\n----------------------------------------\n\nTITLE: Custom Draft Creation Implementation in Java\nDESCRIPTION: Implements the custom draft creation action handler in Java. Creates a new draft order with a specified order number.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/fiori-drafts.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@On(entity = Orders_.CDS_NAME)\npublic void createDraft(CreateDraftContext context) {\n    Orders order = Orders.create();\n    order.setOrderNo(context.getOrderNo());\n    context.setResult(adminService.newDraft(Insert.into(Orders_.class).entry(order)).single(Orders.class));\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Management with srv.run Function in TypeScript\nDESCRIPTION: Defines the srv.run method variant that accepts a function to execute operations in a transaction context.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nfunction srv.run ( fn? : tx<srv> => {...} ) => Promise\n```\n\n----------------------------------------\n\nTITLE: Creating Entity References from Insert and Update Results\nDESCRIPTION: Demonstrates how to obtain entity references from the results of insert and update operations. This allows for chaining operations on the same entity instance.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nCqnUpdate update = Update.entity(AUTHOR).data(\"name\", \"James Joyce\").byId(101);\nAuthor_ joyce = service.run(update).single(Author.class).ref();\n```\n\n----------------------------------------\n\nTITLE: Compact CDS Query Using Infix Filters\nDESCRIPTION: This snippet demonstrates a more compact way to write the same query for English books using infix filters and navigation in CDS.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nentity EnglishBooks as select from Authors[country.code='GB']:books;\n```\n\n----------------------------------------\n\nTITLE: Generic Handlers Implementation in ApplicationService\nDESCRIPTION: The internal implementation of init() in ApplicationService that registers all generic handlers. This shows how the class automatically collects and invokes all methods with the handle_ prefix.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/app-services.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nclass cds.ApplicationService extends cds.Service {\n  init() {\n    const generics = //... all static method with prefix 'handle_'\n    for (let each of generics) this[each].call(this)\n    return super.init()\n  }\n  static handle_authorization() {...}\n  static handle_etags() {...}\n  static handle_validations() {...}\n  static handle_temporal_data() {...}\n  static handle_localized_data() {...}\n  static handle_managed_data() {...}\n  static handle_paging() {...}\n  static handle_fiori() {...}\n  static handle_crud() {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Delete Operations with Dynamic Entity References in Java\nDESCRIPTION: Demonstrates how to construct a DELETE statement using a dynamic entity reference with a WHERE clause filter.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_43\n\nLANGUAGE: java\nCODE:\n```\n// dynamic\nCqnDelete delete = Delete.from(\"my.bookshop.Orders\")\n    .where(b -> b.get(\"OrderNo\").eq(1000));\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Objects in Request Handler\nDESCRIPTION: Demonstrates how to access Express.js req and res objects through the http property of a request in a handler function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.on ('*', req => {\n  let { res } = req.http\n  res.set('Content-Type', 'text/plain')\n  res.send('Hello!')\n})\n```\n\n----------------------------------------\n\nTITLE: Generated SQL View for Localized Books Data\nDESCRIPTION: The CDS compiler generates SQL views to easily read localized texts with fallback. This example shows the generated view for the Books entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nentity localized.Books as select from Books {*,\n  coalesce (localized.title, title) as title,\n  coalesce (localized.descr, descr) as descr\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Context Parameters in CAP Java SDK\nDESCRIPTION: Demonstrates how to modify specific attributes within a new Request Context scope. This example removes the locale setting to retrieve unlocalized data from the Persistence Service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/request-contexts.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nList<Books> readBooksNotLocalized(EventContext context) {\n  return context.getCdsRuntime().requestContext()\n    .modifyParameters(param -> param.setLocale(null))\n    .run(newContext -> {\n      return persistenceService.run(Select.from(Books_.class))\n        .listOf(Books.class);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction with Custom Tenant and User Context in CAP JS\nDESCRIPTION: Shows how to create a transaction with a specific tenant and user context by passing context properties to the tx() method.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = db.tx ({ tenant:'t1' user:'u2' })\n```\n\n----------------------------------------\n\nTITLE: Complex allMatch Predicate with Multiple Path Segments\nDESCRIPTION: Illustrates a more complex use of allMatch predicate with multiple path segments to select authors based on their books' publishers.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_84\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(AUTHORS).where(a -> a.books().publisher().allMatch(p -> p.name().eq(\"CAP Publications\")));\n```\n\n----------------------------------------\n\nTITLE: Setting SAP HANA-specific Datasource Properties in YAML\nDESCRIPTION: This YAML configuration snippet shows how to set SAP HANA-specific properties for a datasource in a CAP Java application. It configures the packet size for the database connection.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  dataSource:\n    my-service-instance:\n      hikari:\n        data-source-properties:\n          packetSize: 300000\n```\n\n----------------------------------------\n\nTITLE: Defining Service Protocols and Paths in CDS\nDESCRIPTION: CDS service definition showing how to configure service paths and protocols using annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\n@path : 'browse'\n@protocols: [ 'odata-v4', 'odata-v2' ]\nservice CatalogService {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Service Model in CAP\nDESCRIPTION: CDS code snippet showing how to extend an existing service with new entity projections in a CAP application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_20\n\nLANGUAGE: cds\nCODE:\n```\nusing { OrdersService } from '@capire/fiori';\n\nextend service OrdersService with {\n  entity x_Customers   as projection on extension.x_Customers;\n  entity x_SalesRegion as projection on extension.x_SalesRegion;\n}\n```\n\n----------------------------------------\n\nTITLE: CQL Query with Where Condition\nDESCRIPTION: Demonstrates a CQL SELECT query with path expression and additional WHERE condition to filter results.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n--CQL query\nSELECT from Orders[OrderNo = '42'].items where ID = 3 and status = 'open'\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Outbox Processing\nDESCRIPTION: Demonstrates error handling pattern for outbox message processing with retry logic control.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@On(service = \"<OutboxServiceName>\", event = \"myEvent\")\nvoid processMyEvent(OutboxMessageEventContext context) {\n  try {\n    // Perform processing logic for myEvent\n  } catch (Exception e) {\n    if (isUnrecoverableSemanticError(e)) {\n      // Perform application-specific counter-measures\n      context.setCompleted(); // indicate message deletion to outbox\n    } else {\n      throw e; // indicate error to outbox\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity with Journal Persistence for HDI Migration Table\nDESCRIPTION: Example of annotating a CDS entity with @cds.persistence.journal to enable hdbmigrationtable generation. This annotation marks the entity for migration-based schema updates rather than standard table updates.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\nnamespace data.model;\n\n  @cds.persistence.journal\n  entity LargeBook {\n    key id : Integer;\n    title : String(100);\n    content : LargeString;\n  }\n```\n\n----------------------------------------\n\nTITLE: Building Custom Requests in Node.js\nDESCRIPTION: This JavaScript code shows how to build custom HTTP requests using the 'send' method when the querying API cannot be used. It demonstrates a PATCH request to update a business partner.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nbupa.send({\n  method: 'PATCH',\n  path: A_BusinessPartner,\n  data: {\n    BusinessPartner: 1004155,\n    BusinessPartnerIsBlocked: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Static Model in Query Builder with Java\nDESCRIPTION: Demonstrates how to use the static model interfaces in the Query Builder to create type-safe queries. It also shows how to execute the query and convert the result to a typed representation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_31\n\nLANGUAGE: java\nCODE:\n```\n// Note the usage of model interface `Books_` here\nSelect<Books_> query = Select.from(Books_.class)\n  .columns(book -> book.title())\n  .where  (book -> book.author().name().eq(\"Edgar Allan Poe\"));\n\n// After executing the query the result can be converted to\n// a typed representation List of Books.\nList<Books> books = dataStore.execute(query).listOf(Books.class);\n```\n\n----------------------------------------\n\nTITLE: Inferring Event Type from Context Parameter in CAP Java SDK\nDESCRIPTION: Event handler that omits the event attribute in the annotation and lets CAP infer it from the CdsReadEventContext parameter. This reduces redundancy and potential inconsistencies.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Before(entity = Books_.CDS_NAME)\npublic void readBooks(CdsReadEventContext context) { }\n```\n\n----------------------------------------\n\nTITLE: Extending Database Service\nDESCRIPTION: Example of extending the core database service by adding event handlers for all operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ncds.db .before ('*', req => {\n  console.log (req.event, req.target.name)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Service Projection in Java\nDESCRIPTION: This Java code implements an event handler for the RiskService to handle READ operations on the BusinessPartners entity. It uses the ApiBusinessPartner service to run the query on the remote service.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_29\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(RiskService_.CDS_NAME)\npublic class RiskServiceHandler implements EventHandler {\n  @Autowired\n  @Qualifier(ApiBusinessPartner_.CDS_NAME)\n  CqnService bupa;\n\n  @On(entity = BusinessPartners.CDS_NAME)\n  Result readSuppliers(CdsReadEventContext context) {\n    return bupa.run(context.getCqn());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expression Types Overview in JavaScript\nDESCRIPTION: Shows the basic structure of different expression types supported in CXN.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cxn.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexpr = // one of...\n  val    |   // [literal values]: #literal-values\n  ref    |   // references or functions\n  xpr    |   // operator expressions\n  func   |   // function calls\n  list   |   // lists/tupels\n  param  |   // binding parameters\n  sym    |   // enum symbol\n  SELECT     // subqueries\n```\n\n----------------------------------------\n\nTITLE: Extending Array-Valued UI Annotations in CDS\nDESCRIPTION: Demonstrates how to extend existing UI annotations of an Orders entity with new extension fields and facets using the special syntax for array-valued annotations. This approach allows adding only the delta rather than replicating the complete array content.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_22\n\nLANGUAGE: cds\nCODE:\n```\n// extend existing entity Orders with new extension fields and new composition\nannotate OrdersService.Orders with @(\n  UI: {\n    LineItem: [\n      ... up to { Value: OrderNo },                             // head\n      {Value: x_Customer_ID,            Label:'Customer'},     //> extension field\n      {Value: x_SalesRegion.regionCode, Label:'Sales Region'}, //> extension field\n      {Value: x_priority,               Label:'Priority'},     //> extension field\n      ...,                                                     // rest\n    ],\n    Facets: [...,\n      {$Type: 'UI.ReferenceFacet', Label: 'Remarks', Target: 'x_Remarks/@UI.LineItem'} // new composition\n    ],\n    FieldGroup#Details: {\n      Data: [...,\n        {Value: x_Customer_ID,            Label:'Customer'},      // extension field\n        {Value: x_SalesRegion.regionCode, Label:'Sales Region'},  // extension field\n        {Value: x_priority,               Label:'Priority'}       // extension field\n      ]\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding CAP Java Spring Boot OData Starter Bundle in Maven\nDESCRIPTION: This XML snippet demonstrates how to add the CAP Java Spring Boot OData starter bundle to a Maven project's pom.xml file. This bundle includes necessary Spring dependencies and configures the OData V4 protocol adapter.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/spring-boot-integration.md#2025-04-18_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-starter-spring-boot-odata</artifactId>\n\t<version>${cds.services.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Context Data via Spring Dependency Injection in CAP Java\nDESCRIPTION: This snippet shows how to access Request Context information through Spring dependency injection in a CAP Java application. It demonstrates injecting UserInfo, ParameterInfo, AuthenticationInfo, and FeatureTogglesInfo beans.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/request-contexts.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nUserInfo userInfo;\n\n@Autowired\nParameterInfo parameterInfo;\n\n@Autowired\nAuthenticationInfo authInfo;\n\n@Autowired\nFeatureTogglesInfo ftsInfo;\n\n\n@Before(event = CqnService.EVENT_READ)\npublic void beforeRead() {\n    boolean isAuthenticated = userInfo.isAuthenticated();\n    Locale locale = parameterInfo.getLocale();\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Queries on Projections in Node.js\nDESCRIPTION: This JavaScript code demonstrates how to execute queries on projections to a remote service in Node.js. It shows connecting to the service and running a SELECT query with a where condition.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst bupa = await cds.connect.to('API_BUSINESS_PARTNER');\n\nconst suppliers = await bupa.run(SELECT(Suppliers).where({ID}));\n```\n\n----------------------------------------\n\nTITLE: Configuring CAP Java BOM Dependencies in Maven\nDESCRIPTION: Shows how to configure the CAP Java Bill of Materials (BOM) in the Maven dependency management section to ensure version synchronization across modules.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/building.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n\t<cds.services.version>2.6.0</cds.services.version>\n</properties>\n\n<dependencyManagement>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t<artifactId>cds-services-bom</artifactId>\n\t\t\t<version>${cds.services.version}</version>\n\t\t\t<type>pom</type>\n\t\t\t<scope>import</scope>\n\t\t</dependency>\n\t</dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Using ETag Predicate for Optimistic Concurrency in CDS Query Builder\nDESCRIPTION: Example of using the 'eTag' predicate in an Update statement for optimistic concurrency control, checking that the record hasn't changed since a specific timestamp.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_71\n\nLANGUAGE: java\nCODE:\n```\nInstant expectedLastModification = ...;\nUpdate.entity(ORDER)\n      .entry(newData)\n      .where(o -> o.id().eq(85).and(o.eTag(expectedLastModification)));\n```\n\n----------------------------------------\n\nTITLE: Single Insert with Direct Map Entry in CAP Java\nDESCRIPTION: Shows another way to create a single insert statement using a Map to provide data for a new book record. This approach directly puts values into a map without creating a variable first.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> book;\nbook.put(\"ID\", 101);\nbook.put(\"title\", \"Capire 2\");\n\nCqnInsert insert = Insert.into(\"bookshop.Books\").entry(book);\n```\n\n----------------------------------------\n\nTITLE: Externalizing Texts in CDS Model\nDESCRIPTION: Demonstrates how to externalize literal texts to text bundles and reference them in a CDS model using annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/i18n.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nservice Bookshop {\n  entity Books @(\n    UI.HeaderInfo: {\n      Title.Label: '{i18n>Book}',\n      TypeName: '{i18n>Book}',\n      TypeNamePlural: '{i18n>Books}',\n    },\n  ){/*...*/}\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Tenant Database via CLI in CAP\nDESCRIPTION: Command to upgrade a specific tenant's database using the CAP CLI. This is used when deploying new versions of the app to update tenant data.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncds upgrade t1 --at http://localhost:4005 -u yves:\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events from Another Service\nDESCRIPTION: Example of subscribing to events emitted by another service to create integrated workflows between services.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst BooksService = await cds.connect.to('BooksService')\nconst OrdersService = await cds.connect.to('OrdersService')\nBooksService.on ('BooksOrdered', async msg => {\n  const { buyer, books } = msg.data\n  await OrdersService.create ('Orders', {\n    customer: buyer,\n    items: books\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: CAP Node.js PostgreSQL Profile Configuration\nDESCRIPTION: JSON configuration for setting up a PostgreSQL profile in a CAP Node.js project's ~/.cdsrc.json file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"db\": {\n      \"[pg]\": {\n        \"kind\": \"postgres\",\n        \"credentials\": {\n          \"host\": \"localhost\", \"port\": 5432,\n          \"user\": \"postgres\",\n          \"password\": \"postgres\",\n          \"database\": \"postgres\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers in Node.js\nDESCRIPTION: Demonstrates how to implement event handlers for a CAP service in Node.js, including before, after, and custom event handlers.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass BookshopService extends cds.ApplicationService { init() {\n  const { Books } = this.entities\n  this.before ('UPDATE', Books, req => validate (req.data))\n  this.after ('READ', Books, books => ... )\n  this.on ('SubmitOrder', req => this.emit ('BookOrdered',req.data))\n}}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Generated Types in JavaScript\nDESCRIPTION: Demonstrates how to import and use generated types from cds-typer in a JavaScript service implementation, showing the difference between typed and untyped approaches.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nconst service = new cds.ApplicationService\n\n//  without cds-typer\nconst { Books } = cds.entities('bookshop')\nservice.before('CREATE', Books, ({ data }) => { /* data is of type any */})\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nconst service = new cds.ApplicationService\n\n// ✨ with cds-typer\nconst { Books } = require('#cds-models/sap/capire/bookshop')\nservice.before('CREATE', Books, ({ data }) => { /* data is of type Books */})\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Clean Core Service Definition (Preferred)\nDESCRIPTION: A better approach to structuring a CAP model by keeping the core service definition clean and free from UI annotations. This supports better separation of concerns.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nservice CatalogService {\n  entity Books { ... }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Limit and Offset\nDESCRIPTION: Shows how to implement pagination by specifying the number of rows to return and the number of rows to skip using the limit method.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Books\").limit(10, 20);\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Transaction in CAP JS\nDESCRIPTION: Demonstrates how to create a nested transaction from an existing transaction context, preserving the parent transaction's context.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = cds.context = cds.tx ({ tenant:'t1', user:'u2' })\nconst tx1 = cds.tx (cds.context)\n//> tx1 is a new nested transaction to tx\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Information in CAP\nDESCRIPTION: Examples of accessing user and HTTP context information in CAP applications\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Accessing current user\nconst { user } = cds.context\nif (user.is('admin')) ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Accessing HTTP req, res objects\nconst { req, res } = cds.context.http\nif (!req.is('application/json')) res.send(415)\n```\n\n----------------------------------------\n\nTITLE: Adding Initial Data to Database with CSV\nDESCRIPTION: The purpose of this CSV file is to add initial data into the database for entities such as books and authors. Dependencies include having a CAP project with a database setup. The files are placed under db/data directory with proper headers for records such as ID, title, and author_ID. Inputs are CSV file rows detailing information like book titles and authors which will be loaded into the database.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_7\n\nLANGUAGE: csv\nCODE:\n```\nID,title,author_ID,stock\n201,Wuthering Heights,101,12\n207,Jane Eyre,107,11\n251,The Raven,150,333\n252,Eleonora,150,555\n271,Catweazle,170,22\n```\n\nLANGUAGE: csv\nCODE:\n```\nID,name\n101,Emily Brontë\n107,Charlotte Brontë\n150,Edgar Allen Poe\n170,Richard Carpenter\n```\n\n----------------------------------------\n\nTITLE: Integration Testing CAP OData Endpoints\nDESCRIPTION: Shows how to perform integration testing of OData endpoints using MockMvc. Tests include verifying discount application through HTTP GET requests and response validation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/testing.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class CatalogServiceITest {\n\n    private static final String booksURI = \"/api/browse/Books\";\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public void discountApplied() throws Exception {\n        mockMvc.perform(get(booksURI + \"?$filter=stock gt 200&top=1\"))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath(\"$.value[0].title\").value(containsString(\"11% discount\")));\n    }\n\n    @Test\n    public void discountNotApplied() throws Exception {\n        mockMvc.perform(get(booksURI + \"?$filter=stock lt 100&top=1\"))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath(\"$.value[0].title\").value(not(containsString(\"11% discount\"))));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers for CQN Operations\nDESCRIPTION: Illustrates how to register event handlers for the CREATE and READ operations that will process queries executed via srv.run.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nsrv.on('CREATE',Books, req => {...})\nsrv.on('READ',Books, req => {...})\n```\n\n----------------------------------------\n\nTITLE: Upgrading All Tenants\nDESCRIPTION: POST endpoint to asynchronously upgrade all tenant base models using a wildcard selector.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nPOST /-/cds/saas-provisioning/upgrade HTTP/1.1\nContent-Type: application/json\nPrefer: respond-async\n\n{\n  \"tenants\": [\"*\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": \"<jobID>\",\n  \"createdAt\": \"<timestamp>\",\n  \"op\": \"upgrade\",\n  \"tenants\": {\n    \"t1\": {\n      \"ID\": \"<taskID>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CRUD-style API Mapping to CQN Operations\nDESCRIPTION: Shows how CRUD-style convenience methods map to equivalent CQN query construction methods.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nsrv.read('Books',...)...         --> SELECT.from ('Books',...)...\nsrv.create('Books',...)...       --> INSERT.into ('Books',...)...\nsrv.insert(...).into('Books')... --> INSERT.into ('Books',...)...\nsrv.upsert(...).into('Books')... --> UPSERT.into ('Books',...)...\nsrv.update('Books',...)...       --> UPDATE.entity ('Books',...)...\nsrv.delete('Books',...)...       --> DELETE.from ('Books',...)...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UserInfo Provider\nDESCRIPTION: Shows how to implement a custom UserInfoProvider to modify user information during authentication, specifically adapting XSUAA user details.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/security.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class CustomUserInfoProvider implements UserInfoProvider {\n\n    private UserInfoProvider defaultProvider;\n\n    @Override\n    public UserInfo get() {\n        ModifiableUserInfo userInfo = UserInfo.create();\n        if (defaultProvider != null) {\n            UserInfo prevUserInfo = defaultProvider.get();\n            if (prevUserInfo != null) {\n                userInfo = prevUserInfo.copy();\n            }\n        }\n        if (userInfo != null) {\n           XsuaaUserInfo xsuaaUserInfo = userInfo.as(XsuaaUserInfo.class);\n           userInfo.setName(xsuaaUserInfo.getEmail() + \"/\" +\n                            xsuaaUserInfo.getOrigin()); // adapt name\n        }\n\n        return userInfo;\n    }\n\n    @Override\n    public void setPrevious(UserInfoProvider prev) {\n        this.defaultProvider = prev;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Dependency for CAP Java\nDESCRIPTION: XML snippet showing how to add the PostgreSQL feature dependency to the Maven pom.xml file for a CAP Java project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-postgresql</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from a Service Method\nDESCRIPTION: Example of emitting an event after handling a request, allowing other services to subscribe to these events.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nthis.on ('submitOrder', async req => {\n  // ... handle the request, and inform whoever might be interested:\n  await this.emit('BooksOrdered', req.data)\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Definitions with Named Aspects in CAP JS\nDESCRIPTION: Demonstrates how to extend a named definition with another named aspect using the 'extensions' property.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ncsn = { extensions:[\n  { extend:\"TargetDefinition\", includes:[\"NamedAspect\"]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Declaring Localized Fields in CDS\nDESCRIPTION: Use the 'localized' modifier to mark entity elements that require translated texts. This example shows how to declare localized fields in a Books entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nentity Books {\n  key ID       : UUID;\n      title    : localized String;\n      descr    : localized String;\n      price    : Decimal;\n      currency : Currency;\n}\n```\n\n----------------------------------------\n\nTITLE: Null Validation Example\nDESCRIPTION: Shows how to validate null values using different processing modes.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nprocessor.addValidator(\n   (p, e, t) -> e.isNotNull(), // filter\n   (p, e, v) -> { // validator\n      throw new RuntimeException(e.getName() + \" must not be null or absent\");\n   }, Mode.NULL);\n```\n\n----------------------------------------\n\nTITLE: Converting CDS Model to JSON\nDESCRIPTION: Function that renders a model to a formatted JSON string with configurable indentation.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cds.compile.to.json ( options: {\n  indents : integer\n})\n```\n\n----------------------------------------\n\nTITLE: Building Container Images with ctz Tool\nDESCRIPTION: Uses the ctz build tool to containerize modules based on the configuration in containerize.yaml.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nctz containerize.yaml\n```\n\n----------------------------------------\n\nTITLE: Using Plain SQL for Joins\nDESCRIPTION: Mitigation approach for the lack of JOIN support by using plain SQL queries with template literals to reference CDS entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nawait db.run(`SELECT from ${Books} join ${Authors} ...`)\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities by Namespace in Java\nDESCRIPTION: Shows how to filter a stream of entities by namespace using a predicate from the Model Reflection API.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.reflect.CdsDefinition.byNamespace;\n...\n\nStream<CdsEntity> entities = model.entities()\n    .filter(byNamespace(\"my.bookshop\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Query Hints for SAP HANA in Java\nDESCRIPTION: Shows how to add SAP HANA-specific query hints to a CQL statement. The example adds two hints (USE_HEX_PLAN and ESTIMATION_SAMPLES) to a select query by prefixing them with 'hdb.'.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nCqnSelect query = Select.from(BOOKS).hints(\"hdb.USE_HEX_PLAN\", \"hdb.ESTIMATION_SAMPLES(0)\");\n```\n\n----------------------------------------\n\nTITLE: Registering On Handlers for Requests in CAP Service\nDESCRIPTION: Method to register handlers that fulfill requests by reading/writing data. Handlers receive the request object and a next function to pass control down the interceptor stack.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction srv.on (event, entity?, handler: (\n  req  : cds.Request,\n  next : function\n))\n```\n\n----------------------------------------\n\nTITLE: Processing Data Differences\nDESCRIPTION: Demonstrates how to compare new and old data images using CdsDiffProcessor.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nList<Map<String, Object>> newImage;\nList<Map<String, Object>> oldImage;\nCdsStructuredType type;\n\ndiff.process(newImage, oldImage, type);\n```\n\n----------------------------------------\n\nTITLE: Parsing CQN String to Construct CQL Query in CAP Java\nDESCRIPTION: Illustrates how to parse a CQN string to construct a CQL query, which can then be modified using the query builder API.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_88\n\nLANGUAGE: java\nCODE:\n```\nString cqnQuery = \"\"\"\n    {'SELECT': {'from': {'ref': ['my.bookshop.Books']},\n    'where': [{'ref': ['title']}, '=', {'val': 'Capire'}]}}\n    \"\"\";\nCqnSelect query = Select.cqn(cqnQuery);\n\n// Modifying the constructed query\nString cqnQuery = ...\nCqnSelect query = Select.cqn(cqnQuery).columns(\"price\");\n```\n\n----------------------------------------\n\nTITLE: Establishing SSH Tunnel for Remote JMX Access\nDESCRIPTION: This command shows how to use the Cloud Foundry CLI to create an SSH tunnel for remote JMX access to a deployed application. It maps a local port to the JMX port on the remote container.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/optimizing.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncf ssh -N -T -L <local-port>:localhost:<port> <app-name>\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Projection in Node.js\nDESCRIPTION: This Node.js code implements a handler for the custom Suppliers projection. It delegates READ operations to the remote API_BUSINESS_PARTNER service.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = cds.service.impl(async function() {\n  const bupa = await cds.connect.to('API_BUSINESS_PARTNER');\n\n  this.on('READ', 'Suppliers', req => {\n      return bupa.run(req.query);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Model Resolution Examples\nDESCRIPTION: Demonstrates different ways to resolve CDS model source files using cds.resolve()\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n[dev] cds repl\n> cds.env.folders           // = folders db, srv, app by default\n> cds.env.roots             // + schema and services in cwd\n> cds.resolve('*',false)    // + models in cds.env.requires\n> cds.resolve('*')          // > the resolved existing files\n> cds.resolve(['db'])       // > the resolved existing files\n> cds.resolve(['db','srv']) // > the resolved existing files\n> cds.resolve('none')       // > undefined\n```\n\n----------------------------------------\n\nTITLE: Upgrading Tenant Database via JavaScript in CAP\nDESCRIPTION: JavaScript code to upgrade a specific tenant's database using the CAP Deployment Service. This method can be used within a Node.js application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst ds = await cds.connect.to('cds.xt.DeploymentService')\nawait ds.upgrade('t1')\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying with MBT\nDESCRIPTION: Commands for building MTA archive and deploying to Cloud Foundry. Uses mbt build to generate tar file and cf deploy to deploy it.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nmbt build -t gen --mtar mta.tar\ncf deploy gen/mta.tar -f\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only View of Data in Java\nDESCRIPTION: Illustrates how to create a typed read-only view of data using the access method, which throws an exception when attempting to modify data.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.Struct.access;\n...\n\nBook book = access(data).asReadOnly(Book.class);\n\nString title = book.getTitle();\nbook.setTitle(\"CDS4j\");           // throws Exception\n```\n\n----------------------------------------\n\nTITLE: Using Spring's @Transactional with JDBC in CAP Java\nDESCRIPTION: This example demonstrates how to use Spring's @Transactional annotation with JDBC operations in a CAP Java event handler. It shows accessing both JdbcTemplate and a plain JDBC Connection.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/changeset-contexts.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nprivate JdbcTemplate jdbc;\n\n@Autowired\nprivate DataSource ds;\n\n@Before(event = CqnService.EVENT_CREATE, entity = Books_.CDS_NAME)\n@Transactional // ensure transaction is initialized\npublic void beforeCreateBooks(List<Books> books) {\n    // JDBC template\n    jdbc.queryForList(\"SELECT 1 FROM DUMMY\");\n\n    // Connection object\n    Connection conn = DataSourceUtils.getConnection(ds);\n    conn.prepareCall(\"SELECT 1 FROM DUMMY\").executeQuery();\n}\n```\n\n----------------------------------------\n\nTITLE: CDS Combining Filter Conditions for Auditors and Users\nDESCRIPTION: This CDS snippet demonstrates combining filter conditions using logical OR. `Auditor` users can read orders from their `country`, while any user can read and write the orders they created.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nentity Orders @(restrict: [\n    { grant: 'READ', to: 'Auditor', where: 'country = $user.country' },\n    { grant: ['READ','WRITE'], where: 'CreatedBy = $user' },\n  ]) {/*...*/}\n\n```\n\n----------------------------------------\n\nTITLE: Data Privacy Model Definition in CDS\nDESCRIPTION: Defines personal data annotations for a customer incident management system, including data subject roles, entity semantics, and field-level personal data markers.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/annotations.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nusing { sap.capire.incidents as my } from '../db/schema';\n\nextend my.Customers with {\n    dateOfBirth : Date;\n};\n\nannotate my.Customers with @PersonalData : {\n  DataSubjectRole : 'Customer',\n  EntitySemantics : 'DataSubject'\n} {\n  ID           @PersonalData.FieldSemantics: 'DataSubjectID';\n  firstName    @PersonalData.IsPotentiallyPersonal;\n  lastName     @PersonalData.IsPotentiallyPersonal;\n  email        @PersonalData.IsPotentiallyPersonal;\n  phone        @PersonalData.IsPotentiallyPersonal;\n  dateOfBirth  @PersonalData.IsPotentiallyPersonal;\n  creditCardNo @PersonalData.IsPotentiallySensitive;\n};\n\nannotate my.Addresses with @PersonalData: {\n  EntitySemantics : 'DataSubjectDetails'\n} {\n  customer      @PersonalData.FieldSemantics: 'DataSubjectID';\n  city          @PersonalData.IsPotentiallyPersonal;\n  postCode      @PersonalData.IsPotentiallyPersonal;\n  streetAddress @PersonalData.IsPotentiallyPersonal;\n};\n\nannotate my.Incidents with @PersonalData : {\n  EntitySemantics : 'Other'\n} {\n  customer @PersonalData.FieldSemantics: 'DataSubjectID';\n};\n```\n\n----------------------------------------\n\nTITLE: Generated XSUAA Configuration in .cdsrc-private.json\nDESCRIPTION: JSON configuration generated in .cdsrc-private.json after binding to XSUAA service, containing the binding information and authentication kind.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"[hybrid]\": {\n      \"auth\": {\n        \"kind\": \"xsuaa\",\n        \"binding\": { ... }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CAP Helm Charts to Project\nDESCRIPTION: Adds configurable Helm charts for Node.js and Java applications to the CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncds add helm\n```\n\n----------------------------------------\n\nTITLE: Performing Deep Inserts with Compositions in CQL\nDESCRIPTION: Shows how to perform deep inserts that create new target entities along compositions and cascading associations. The example creates an order with a header in a single operation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nOrderHeaders header = OrderHeaders.create();\nheader.setId(11);\nheader.setStatus(\"open\");\n\nOrders order = Orders.create();\norder.setId(1);\norder.setHeader(header);\n\nInsert insert = Insert.into(ORDERS).entry(order);\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types with CQL in JavaScript\nDESCRIPTION: Shows how to use generated types with various CQL operations like SELECT, INSERT, UPSERT, and DELETE, demonstrating improved type safety and autocomplete functionality.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\n\n// previous approach (still valid, but prefer using reflected entities over string names)\nSELECT('Books')  // etc...\n\n// how you can do it using generated types\nconst { Book, Books } = require('#cds-models/sap/capire/bookshop')\n\n// SELECT\nSELECT(Books)\nSELECT.one(Book)\nSELECT(Books, b => { b.ID })  // projection\nSELECT(Books, b => { b.author(a => a.ID.as('author_id')) })  // nested projection\n\n// INSERT / UPSERT\nINSERT.into(Books)\nINSERT.into(Books).columns(['title', 'ID'])  // column names derived from Books' properties\n\n// DELETE\nDELETE.from(Books, 42)\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Entity Properties using JavaBeans-style Accessors in Java\nDESCRIPTION: Demonstrates how to create and set properties for Author and Book entities using JavaBeans-style accessor methods generated from CDS models.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n    Authors author = Authors.create();\n    author.setName(\"Emily Brontë\");\n\n    Books book = Books.create();\n    book.setAuthor(author);\n    book.setTitle(\"Wuthering Heights\");\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Error Messages for Specific Entities in CAP Java\nDESCRIPTION: This example shows how to override validation messages triggered by the @assert.range annotation for a specific entity. It demonstrates filtering by entity, error code, and target field to customize error messages for price and stock validation failures.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(ApplicationLifecycleService.DEFAULT_NAME)\npublic class ExceptionServiceErrorMessagesHandler implements EventHandler {\n\n  @After\n  public void overrideValidationMessages(ErrorResponseEventContext context) {\n    context.getException().getEventContexts().stream().findFirst().ifPresent(originalContext -> {\n      if (Books_.CDS_NAME.equals(originalContext.getTarget().getQualifiedName())) { // filter by entity\n        List<Message> messages = context.getResult().getMessages();\n        for(int i=0; i<messages.size(); ++i) {\n          Message message = messages.get(i);\n          if (CdsErrorStatuses.VALUE_OUT_OF_RANGE.getCodeString().equals(message.getCode())) { // filter by error code\n            if (Books.PRICE.equals(message.getTarget().getRef().targetSegment().id())) { // filter by target\n              messages.set(i, Message.create(Message.Severity.ERROR, \"The exceptional price is not in defined range!\", message));\n            } else if (Books.STOCK.equals(message.getTarget().getRef().targetSegment().id())) {\n              messages.set(i, Message.create(Message.Severity.ERROR, \"The exceptional stock of specified items is not available!\", message));\n            }\n          }\n        }\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'byParams' for Batch Delete Operations in Java\nDESCRIPTION: Shows how to use the 'byParams' method as an alternative to parameters in 'matching' or 'where' clauses for batch deletion of multiple records.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.BOOKS;\n\n// using where\nDelete.from(BOOKS)\n    .where(b -> b.title().eq(param(\"title\"))\n           .and(b.author().name().eq(param(\"author.name\"))));\n\n// using byParams\nDelete.from(BOOKS).byParams(\"title\", \"author.name\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Actuator Security\nDESCRIPTION: Example of configuring basic authentication for Spring Actuator endpoints using a custom SecurityFilterChain configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/security.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableWebSecurity\n@Order(1)\npublic class ActuatorSecurityConfig {\n\n  @Bean\n  public SecurityFilterChain actuatorFilterChain(HttpSecurity http) throws Exception {\n    return http\n      .securityMatcher(AntPathRequestMatcher.antMatcher(\"/actuator/**\"))\n      .httpBasic(Customizer.withDefaults())\n      .authenticationProvider(/* configure basic authentication users here with PasswordEncoder etc. */)\n      .authorizeHttpRequests(r -> r.anyRequest().authenticated())\n      .build();\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Remote Service Proxy\nDESCRIPTION: Demonstrates how to extend remote service proxies with custom handlers for different operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst proxy = await cds.connect.to ('SomeRemoteService')\nproxy.on ('READ', 'Something', req => {\n  // handle that remote call yourself\n})\nproxy.before ('READ', '*', req => {\n  // modify requests before they go out\n})\nproxy.after ('READ', '*', result => {\n  // post-process recieved responses\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript with TypeScript Types via JSDoc\nDESCRIPTION: Example showing how to use TypeScript types in JavaScript through JSDoc comments.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/typescript.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param { import('@sap/cds').Request } req\n */\nfunction myHandler(req) { }\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types with Actions in JavaScript\nDESCRIPTION: Demonstrates how to use generated types with custom actions in a service implementation, providing type-safe access to action parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nconst service = new cds.ApplicationService\n\nconst { submitOrder } = require('#cds-models/CatalogService')\nservice.on(submitOrder, ({ data }) => {\n  // action implementation\n})\n\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handler to Reviews Service\nDESCRIPTION: Demonstrates how to extend a reuse service by adding an event handler for CREATE operations on Reviews entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst ReviewsService = await cds.connect.to('ReviewsService')\nReviewsService.after ('CREATE', 'Reviews', req => {\n   // do something in addition...\n})\n```\n\n----------------------------------------\n\nTITLE: CAP Java PostgreSQL Connection Configuration\nDESCRIPTION: YAML configuration for setting up PostgreSQL connection in a CAP Java application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  config.activate.on-profile: postgres-docker\n  datasource:\n    url: jdbc:postgresql://localhost:5432/postgres\n    username: postgres\n    password: postgres\n    driver-class-name: org.postgresql.Driver\n```\n\n----------------------------------------\n\nTITLE: Declaring Temporal Entities with Annotations in CDS\nDESCRIPTION: This snippet demonstrates how to declare temporal entities using @cds.valid.from/to annotations. It adds date elements to track changes over time in the WorkAssignments entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nentity WorkAssignments { //...\n  start : Date @cds.valid.from;\n  end   : Date @cds.valid.to;\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Specific Technical Tenant in CAP Java SDK\nDESCRIPTION: Creates a new Request Context for a specific subscriber tenant with a technical user. This is useful for background executions that need to perform tasks on behalf of a certain tenant.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/request-contexts.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nruntime.requestContext().systemUser(tenant).run(reqContext -> {\n    return persistenceService.run(Select.from(Books_.class))\n        .listOf(Books.class);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating CQN Query using cds.Service Querying APIs\nDESCRIPTION: This JavaScript code creates a Core Query Notation (CQN) query using `cds.Service` Querying APIs. It reads the ID, name, and all properties of the books association from the `Authors` entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet q = db.read (Authors, a=>{\n    a.ID, a.name, a.books('*')\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Destinations in values.yaml\nDESCRIPTION: Demonstrates how to configure backend destinations, including external destinations, in the values.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n...\nsrv: # Key is the target service, e.g. 'srv'\n  backendDestinations:\n    srv-api:\n      service: srv\n    ui5:\n      external: true\n      name: ui5\n      Type: HTTP\n      proxyType: Internet\n      url: https://ui5.sap.com\n      Authentication: NoAuthentication\n```\n\n----------------------------------------\n\nTITLE: Service with Authorization Requirements\nDESCRIPTION: CDS service definition with @requires and @restrict annotations to specify authorization requirements at the service and entity levels.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\nservice CustomerService @(requires: 'authenticated-user'){\n  entity Orders @(restrict: [\n    { grant: ['READ','WRITE'], to: 'admin' },\n  ]){/*...*/}\n  entity Approval @(restrict: [\n    { grant: 'WRITE', where: '$user.level > 2' }\n  ]){/*...*/}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Definition for Shared Database in CAP\nDESCRIPTION: Defines a CDS schema file that imports models from multiple CAP microservices to create a unified database schema. This allows sharing the same database schema across multiple services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\nusing from '@capire/bookstore';\nusing from '@capire/reviews';\nusing from '@capire/orders';\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Data in Before Handler\nDESCRIPTION: Shows how to modify the request data in a 'before' handler for an UPDATE operation on a Books entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.before ('UPDATE',Books, req => {\n  req.data.author = 'Schmidt'  // [!code ++]\n  req.query.UPDATE.data.author = 'Schmidt'  // [!code --]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Extensions (CDS)\nDESCRIPTION: CDS code defining extensions to the base application, including new fields and UI annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nnamespace x_orders.ext; // only applies to new entities defined below\nusing { OrdersService, sap.capire.orders.Orders } from '@capire/orders';\n\nextend Orders with {\n  x_new_field : String;\n}\n\n// -------------------------------------------\n// Fiori Annotations\n\nannotate Orders:x_new_field with @title: 'New Field';\nannotate OrdersService.Orders with @UI.LineItem: [\n  ... up to { Value: OrderNo },\n  { Value : x_new_field },\n  ...\n];\n```\n\n----------------------------------------\n\nTITLE: Using Feature Toggles in Java Custom Code\nDESCRIPTION: This Java snippet shows how to evaluate the FeatureTogglesInfo in custom code to check if a specific feature is enabled in a CAP Java application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n@Autowired FeatureTogglesInfo features;\n\n...\n\nif (features.isEnabled(\"discount\")) {\n  // specific coding when feature 'discount' is enabled...\n}\n```\n\n----------------------------------------\n\nTITLE: Configure SQLite File-Based Storage in Spring\nDESCRIPTION: Defines a file-based storage for SQLite in the Spring application. Configuration is done via YAML, with database initialization mode set to `never`.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n---\nspring:\n  config.activate.on-profile: sqlite\n  sql:\n    init:\n      mode: never\n  datasource:\n    url: \"jdbc:sqlite:sqlite.db\"\n    driver-class-name: org.sqlite.JDBC\n    hikari:\n      maximum-pool-size: 1\n```\n\n----------------------------------------\n\nTITLE: Custom EventContext Interface Definition in Java\nDESCRIPTION: Example of defining a custom event-specific EventContext interface with type-safe getters and setters.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@EventName(\"myEvent\")\npublic interface MyEventContext extends EventContext {\n\n    static MyEventContext create() {\n        return EventContext.create(MyEventContext.class, null);\n    }\n\n    @CdsName(\"Param\")\n    String getParam();\n    void setParam(String param);\n\n    void setResult(Integer result);\n    Integer getResult();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Common Aspect 'temporal' in CDS\nDESCRIPTION: This snippet shows an alternative way to declare temporal entities using the predefined 'temporal' aspect from @sap/cds/common. It applies the temporal aspect to the WorkAssignments entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nusing { temporal } from '@sap/cds/common';\nentity WorkAssignments : temporal {/*...*/}\n```\n\n----------------------------------------\n\nTITLE: Using ETag Predicate for Concurrency Control in Java\nDESCRIPTION: Example of using CqnEtagPredicate to specify expected ETag values in an update operation, ensuring that the update only succeeds if the data has not been modified since it was last read.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nPersistenceService db = ...\nInstant expectedLastModification = ...;\nCqnUpdate update = Update.entity(ORDER).entry(newData)\n                         .where(o -> o.id().eq(85).and(\n                                     o.eTag(expectedLastModification)));\n\nResult rs = db.execute(update);\n\nif (rs.rowCount() == 0) {\n    // order 85 does not exist or was modified concurrently\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Toggles Middleware in Node.js\nDESCRIPTION: This JavaScript snippet demonstrates how to add support for feature toggles management using Express.js middleware in a CAP Node.js application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst cds = require ('@sap/cds')\ncds.on('bootstrap', app => app.use ((req,res,next) => {\n  req.features = req.headers.features || 'isbn'\n  next()\n}))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Metrics with OpenTelemetry in CAP Java\nDESCRIPTION: Example of recording custom metrics using the OpenTelemetry API in a CAP Java service event handler, including counter creation with dimensions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\nclass CatalogServiceHandler implements EventHandler {\n   Meter meter = GlobalOpenTelemetry.getMeterProvider().meterBuilder(\"RatingCalculator\").build();\n\n   @After(entity = Books_.CDS_NAME)\n   public void afterAddReview(AddReviewContext context) {\n      ratingCalculator.setBookRating(context.getResult().getBookId());\n\n      LongCounter counter = meter.counterBuilder(\"reviewCounter\")\n        .setDescription(\"Counts the number of reviews created per book\")\n        .build();\n      counter.add(1, Attributes.of(AttributeKey.stringKey(\"bookId\"),\n        context.getResult().getBookId()));\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Receiver Service Implementation\nDESCRIPTION: Demonstrates how to implement an event receiver service that connects to and listens for events from an emitter service.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Receiver extends cds.Service { async init() {\n  // connect to and register for events from Emitter\n  const Emitter = await cds.connect.to('Emitter')\n  Emitter.on ('some event', msg => {...})\n}}\n```\n\n----------------------------------------\n\nTITLE: Custom Outbox Message Submission\nDESCRIPTION: Shows how to submit a custom message to an outbox service with parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nOutboxService outboxService = runtime.getServiceCatalog().getService(OutboxService.class, \"<OutboxServiceName>\");\n\nOutboxMessage message = OutboxMessage.create();\nmessage.setParams(Map.of(\"name\", \"John\", \"lastname\", \"Doe\"));\n\noutboxService.submit(\"myEvent\", message);\n```\n\n----------------------------------------\n\nTITLE: Accessing App-Specific Settings in JavaScript\nDESCRIPTION: Demonstrates how to access custom app-specific configuration options in JavaScript code using the cds.env.for() method.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nconst { myoption } = cds.env.for('my-app')\n```\n\n----------------------------------------\n\nTITLE: Nested anyMatch and allMatch Predicates in CAP Java CQL Query\nDESCRIPTION: Demonstrates the use of nested anyMatch and allMatch predicates to select authors based on complex conditions applied to their books and book pages.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_85\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(AUTHORS).where(a -> a.books().anyMatch(\n    b -> b.pages().allMatch(p ->\n        p.text().contains(\"unicorn\"))));\n```\n\n----------------------------------------\n\nTITLE: Declaring cds.serve() Method in TypeScript\nDESCRIPTION: TypeScript declaration of the cds.serve() method, showing its parameters and chaining methods.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function cds.serve (\n  service        : 'all' | string | cds.Service | typeof cds.Service,\n  options        : { service = 'all', ... }\n) .from ( model  : string | CSN )         // default: cds.model\n  .to ( protocol : string | 'rest' | 'odata' | 'odata-v2' | 'odata-v4' | ... )\n  .at ( path     : string )\n  .in ( app      : express.Application )  // default: cds.app\n.with ( impl     : string | function | cds.Service | typeof cds.Service )\n```\n\n----------------------------------------\n\nTITLE: Nested Transaction Implementation in Banking Service\nDESCRIPTION: Shows how nested transactions are handled in a bank transfer operation with database updates and logging\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst log = cds.connect.to('log')\nconst db = cds.connect.to('db')\n\nBankingService.on ('transfer', req => {\n  let { from, to, amount } = req.data\n  await db.update('BankAccount',from).set('balance -=', amount),\n  await db.update('BankAccount',to).set('balance +=', amount),\n  await log.insert ({ kind:'Transfer', from, to, amount })\n})\n```\n\n----------------------------------------\n\nTITLE: Parameterized CQL Queries\nDESCRIPTION: Examples of using parameters in CQL queries for dynamic execution\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.param;\n\nCqnSelect q = Select.from(BOOKS).where(b -> b.author().name().eq(param(0)));\ndataStore.execute(q, \"Jules Verne\");\n\n// Alternative using byParams\nCqnSelect q = Select.from(BOOKS).byParams(\"author.name\");\ndataStore.execute(q, singletonMap(\"author.name\", \"Jules Verne\"));\n\n// With filterByParams\nCqnSelect q = Select.from(AUTHORS, o -> o.filterByParams(\"ID\").books());\ndataStore.execute(q, singletonMap(\"ID\", 101));\n```\n\n----------------------------------------\n\nTITLE: Background Task Execution with cds.spawn() in CAP JS\nDESCRIPTION: Example of running a recurring background task with tenant context to process outbox emails. The task runs in isolation from request handling threads with automatic transaction management.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncds.spawn ({ tenant:'t0', every: 1000 /* ms */ }, async (tx) => {\n  const mails = await SELECT.from('Outbox')\n  await MailServer.send(mails)\n  await DELETE.from('Outbox').where (`ID in ${mails.map(m => m.ID)}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Batch Updates in CAP Java 2.x\nDESCRIPTION: Demonstrates how to work with batch updates and check results for individual batches using rowCount with batch index.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// books: [{ID: 251, stock: 11}, {ID: 252, stock: 7}, {ID: 0, stock: 3}]\nCqnUpdate update = Update.entity(BOOKS).entries(books);\nResult result = service.run(update);\n\nresult.batchCount(); // number of batches (3)\nresult.rowCount(2);  // 0 matches with ID 0\n```\n\n----------------------------------------\n\nTITLE: Adding Git Submodules for CAP Microservices Projects\nDESCRIPTION: Initializes a git repository and adds multiple CAP projects as git submodules. This allows independent versioning of each microservice while managing them within a monorepo structure.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit init\ngit submodule add https://github.com/capire/bookstore \ngit submodule add https://github.com/capire/reviews\ngit submodule add https://github.com/capire/orders\ngit submodule add https://github.com/capire/common\ngit submodule add https://github.com/capire/bookshop\ngit submodule add https://github.com/capire/data-viewer\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Using Generated Service Interfaces\nDESCRIPTION: Demonstrates usage of generated service interfaces for type-safe service access, available from CAP Java SDK version 2.4.0.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/services.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nAdminService adminService = catalog.getService(AdminService.class, \"AdminService\");\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Associations in Node.js\nDESCRIPTION: This Node.js code implements handlers for both Suppliers and SupplierAddresses entities to support navigation and independent requests on the association target.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nthis.on('READ', ['Suppliers', 'SupplierAddresses'], req => {\n    return bupa.run(req.query);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a CQL Select Statement from an Entity Set (Java)\nDESCRIPTION: Demonstrates how to create a CQL select statement from an entity set using the Query Builder API in dynamic usage style.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nCqnSelect query = Select.from(\"bookshop.Books\")\n    .columns(\"title\", \"author.name\");\n```\n\n----------------------------------------\n\nTITLE: Spring MVC Test Configuration with Mock Users\nDESCRIPTION: Example of implementing Spring MVC tests using mock users for testing authenticated and unauthorized access to endpoints.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/security.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@RunWith(SpringRunner.class)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class BookServiceOrdersTest {\n\tString ORDERS_URL = \"/odata/v4/BooksService/Orders\";\n\n\t@Autowired\n\tprivate MockMvc mockMvc;\n\n\t@Test\n\t@WithMockUser(username = \"Viewer-User\")\n\tpublic void testViewer() throws Exception {\n\t\tmockMvc.perform(get(ORDERS_URL)).andExpect(status().isOk());\n\t}\n\t@Test\n\tpublic void testUnauthorized() throws Exception {\n\t\tmockMvc.perform(get(ORDERS_URL)).andExpect(status().isUnauthorized());\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Programmatic Destinations with User Token Exchange\nDESCRIPTION: Creates an OAuth2 destination that exchanges the current user's token for accessing the external API. This preserves the user context when calling the external service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nClientCredentials clientCredentials =\n        new ClientCredentials(\"clientid\", \"clientsecret\");\n\nOAuth2DestinationBuilder\n        .forTargetUrl(\"https://example.org\")\n        .withTokenEndpoint(\"https://xsuaa.url\")\n        .withClient(clientCredentials, OnBehalfOf.NAMED_USER_CURRENT_TENANT)\n        .property(\"name\", \"my-destination\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Service with Destination\nDESCRIPTION: YAML configuration example showing how to set up a Remote Service using a destination in Spring Boot's application.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    API_BUSINESS_PARTNER:\n      type: \"odata-v2\"\n      destination:\n        name: \"s4-business-partner-api\"\n```\n\n----------------------------------------\n\nTITLE: Custom Handlers for MTX Events in Java\nDESCRIPTION: Java code demonstrating how to add custom handlers for subscription, upgrade, and unsubscribe events in a CAP Java application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_45\n\nLANGUAGE: java\nCODE:\n```\n@After\nprivate void subscribeToService(SubscribeEventContext context) {\n   String tenant = context.getTenant();\n   Map<String, Object> options = context.getOptions();\n}\n\n@On\nprivate void upgradeService(UpgradeEventContext context) {\n   List<String> tenants = context.getTenants();\n   Map<String, Object> options = context.getOptions();\n}\n\n@Before\nprivate void unsubscribeFromService(UnsubscribeEventContext context) {\n   String tenant = context.getTenant();\n   Map<String, Object> options = context.getOptions();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies in package.json for CAP Projects\nDESCRIPTION: Example of how to properly specify dependencies in package.json using caret notation for latest minor releases. This ensures projects receive the latest features and important fixes during development.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@sap/cds\": \"^5.5.0\",\n  \"@sap/some-reuse-package\": \"^1.1.0\",\n  \"express\": \"^4.17.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Destination Registration in Java with Spring Boot\nDESCRIPTION: Creates and registers a custom HTTP destination during application startup using a Spring component and event handler. This example shows how to configure a destination with an API key for S/4HANA Cloud API.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(ApplicationLifecycleService.DEFAULT_NAME)\npublic class DestinationConfiguration implements EventHandler {\n\n    @Value(\"${api-hub.api-key:}\")\n    private String apiKey;\n\n    @Before(event = ApplicationLifecycleService.EVENT_APPLICATION_PREPARED)\n    public void initializeDestinations() {\n        if(apiKey != null && !apiKey.isEmpty()) {\n            DefaultHttpDestination httpDestination = DefaultHttpDestination\n                .builder(\"https://sandbox.api.sap.com/s4hanacloud\")\n                .header(\"APIKey\", apiKey)\n                .name(\"s4-business-partner-api\").build();\n\n            DestinationAccessor.prependDestinationLoader(\n                new DefaultDestinationLoader().registerDestination(httpDestination));\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding UI Action Buttons with LineItem Annotation\nDESCRIPTION: CDS annotations defining action buttons in the travel overview list using UI.LineItem annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\nannotate TravelService.Travel with @UI : {\nLineItem : [\n    { $Type  : 'UI.DataFieldForAction',\n      Action : 'TravelService.acceptTravel',\n      Label  : '{i18n>AcceptTravel}'   }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Tenant Subscription Events in Java CAP\nDESCRIPTION: Event handlers for tenant subscription lifecycle events. Shows how to add custom logic before and after tenant database container creation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/multitenancy.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Before\npublic void beforeSubscription(SubscribeEventContext context) {\n    // Activities before tenant database container is created\n}\n\n@After\npublic void afterSubscribe(SubscribeEventContext context) {\n    // For example, send notification, ...\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing CAP Java Event Handler\nDESCRIPTION: Unit test implementation for the CatalogServiceHandler's discountBooks method using Mockito for mocking dependencies. Tests the discount logic for books based on stock quantity.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/testing.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(MockitoExtension.class)\npublic class CatalogServiceHandlerTest {\n\n    @Mock\n    private PersistenceService db;\n\n    @Test\n    public void discountBooks() {\n        Books book1 = Books.create();\n        book1.setTitle(\"Book 1\");\n        book1.setStock(10);\n\n        Books book2 = Books.create();\n        book2.setTitle(\"Book 2\");\n        book2.setStock(200);\n\n        CatalogServiceHandler handler = new CatalogServiceHandler(db);\n        handler.discountBooks(Stream.of(book1, book2));\n\n        assertEquals(\"Book 1\", book1.getTitle(), \"Book 1 was discounted\");\n        assertEquals(\"Book 2 -- 11% discount\", book2.getTitle(), \"Book 2 was not discounted\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Aggregates in CDS\nDESCRIPTION: Demonstrates how to define custom aggregates in a CDS model using @Aggregation annotations to expose aggregated properties to clients. Includes stock tracking example.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_36\n\nLANGUAGE: cds\nCODE:\n```\n@Aggregation.CustomAggregate#stock : 'Edm.Decimal'\nentity Books as projection on bookshop.Books {\n  ID,\n  title,\n\n  @Aggregation.default: #SUM\n  stock\n};\n```\n\n----------------------------------------\n\nTITLE: Importing BOM POMs for Consistent Dependency Versions in Java\nDESCRIPTION: This XML snippet demonstrates how to import Bill of Material (BOM) POMs for CAP Java, SAP Cloud SDK, and SAP Security in a project's parent pom.xml file. This ensures consistent versioning across related artifacts and helps prevent compatibility issues.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/versions.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n\t<dependencies>\n\t\t<!-- CDS SERVICES -->\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t<artifactId>cds-services-bom</artifactId>\n\t\t\t<version>${cds.services.version}</version>\n\t\t\t<type>pom</type>\n\t\t\t<scope>import</scope>\n\t\t</dependency>\n\n\t\t<!-- CLOUD SDK -->\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cloud.sdk</groupId>\n\t\t\t<artifactId>sdk-modules-bom</artifactId>\n\t\t\t<version>${cloud.sdk.version}</version>\n\t\t\t<type>pom</type>\n\t\t\t<scope>import</scope>\n\t\t</dependency>\n\n\t\t<!-- SAP SECURITY -->\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cloud.security</groupId>\n\t\t\t<artifactId>java-bom</artifactId>\n\t\t\t<version>${xsuaa.version}</version>\n\t\t\t<type>pom</type>\n\t\t\t<scope>import</scope>\n\t\t</dependency>\n\t</dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Constructed Service Providers\nDESCRIPTION: Examples of retrieving constructed service providers from the Promise returned by cds.serve().\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CatalogService, AdminService } = await cds.serve('all')\nconst ReviewsService = await cds.serve('ReviewsService')\n```\n\n----------------------------------------\n\nTITLE: Efficient View Building with Normalized Entity (Good Practice)\nDESCRIPTION: This snippet demonstrates how to efficiently build a view using the normalized or de-normalized Fruit entity. This approach avoids UNIONs and complex associations, leading to better performance.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nview FruitsByVendor as\nselect from Fruit\n{ID, description, vendor}\nwhere vendor.description = 'TopFruitCompany';\n```\n\n----------------------------------------\n\nTITLE: Setting Request Body Size Limit for Specific Service\nDESCRIPTION: CDS code example demonstrating how to restrict the maximum request body size for an individual service using the @cds.server.body_parser.limit annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-server.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nannotate AdminService with @cds.server.body_parser.limit: '1mb';\n```\n\n----------------------------------------\n\nTITLE: Validating Deeply Structured Documents in Java\nDESCRIPTION: Example showing validation implementation for deeply structured documents with parent Orders and child OrderItems entities. Includes quantity validation logic.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = CqnService.EVENT_CREATE, entity = Orders_.CDS_NAME)\npublic void validateOrders(List<Orders> orders) {\n    for(Orders order : orders) {\n        if (order.getItems() != null) {\n            validateItems(order.getItems());\n        }\n    }\n}\n\n@Before(event = CqnService.EVENT_CREATE, entity = OrderItems_.CDS_NAME)\npublic void validateItems(List<OrderItems> items) {\n    for(OrderItems item : items) {\n        if (item.getQuantity() <= 0) {\n            throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid quantity\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Model CQL Query\nDESCRIPTION: Demonstrates using generated static model constants for type-safe CQL queries\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.BOOKS;\n\nSelect.from(BOOKS).columns(b -> b.title()).byId(101);\n```\n\n----------------------------------------\n\nTITLE: Vector Embeddings Entity Definition\nDESCRIPTION: CDS entity definition showing vector embedding storage using cds.Vector type.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nentity Books : cuid {\n  title         : String(111);\n  description   : LargeString;\n  embedding     : Vector(1536);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of srv.handle Method in JavaScript\nDESCRIPTION: Shows the internal implementation of srv.handle that executes before, on, and after event handlers with proper error handling.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// before phase\nawait Promise.all (matching .before handlers)\nif (req.errors) throw req.reject()\n\n// on phase\nawait (event.reply //> synchronous?\n    ? Promise.seq (matching .on handlers) // for synchronous requests\n    : Promise.all (matching .on handlers) // for asynchronous events\n)\nif (req.errors) throw req.reject()\n\n// after phase\nawait Promise.all (matching .after handlers)\nif (req.errors) throw req.reject()\n\nreturn req.results\n```\n\n----------------------------------------\n\nTITLE: Configuration in .env File\nDESCRIPTION: Examples of different ways to specify configuration in a .env file, including underscore notation, dot notation, and JSON.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\ncds_requires_db_kind = sql\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Modifier for CQL Statement Modification in Java\nDESCRIPTION: This snippet demonstrates how to implement a custom Modifier to modify CQL statements, overriding methods to handle structured type references and element references. It shows how to create modifiable copies of references and add new filters or segments.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nModifier modifier = new Modifier() {\n\t@Override\n\tpublic CqnStructuredTypeRef ref(CqnStructuredTypeRef ref) {\n\t\tRefBuilder<StructuredTypeRef> copy = CQL.copy(ref); // try to avoid copy\n\t\tcopy.targetSegment().filter(newFilter);\n\t\treturn copy.build();\n\t}\n\n\t@Override\n\tpublic CqnValue ref(CqnElementRef ref) {\n\t\tList<Segment> segments = new ArrayList<>(ref.segments());\n\t\tsegments.add(0, CQL.refSegment(segments.get(0).id(), filter));\n\t\treturn CQL.get(segments).as(alias);\n\t}\n};\nCqnStatement copy = CQL.copy(statement, modifier);\n```\n\n----------------------------------------\n\nTITLE: Implementing Bound Actions for Outbox Message Management\nDESCRIPTION: Implements handlers for reviving and deleting dead outbox messages. Uses PersistenceService to perform database operations on the Messages entity, with actions to reset attempt counters or remove entries completely.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\n@Qualifier(PersistenceService.DEFAULT_NAME)\nprivate PersistenceService db;\n\n@On\npublic void reviveOutboxMessage(DeadOutboxMessagesReviveContext context) {\n  CqnAnalyzer analyzer = CqnAnalyzer.create(context.getModel());\n  AnalysisResult analysisResult = analyzer.analyze(context.getCqn());\n  Map<String, Object> key = analysisResult.rootKeys();\n  Messages deadOutboxMessage = Messages.create((String) key.get(Messages.ID));\n\n  deadOutboxMessage.setAttempts(0);\n\n  this.db.run(Update.entity(Messages_.class).entry(key).data(deadOutboxMessage));\n  context.setCompleted();\n}\n\n@On\npublic void deleteOutboxEntry(DeadOutboxMessagesDeleteContext context) {\n  CqnAnalyzer analyzer = CqnAnalyzer.create(context.getModel());\n  AnalysisResult analysisResult = analyzer.analyze(context.getCqn());\n  Map<String, Object> key = analysisResult.rootKeys();\n\n  this.db.run(Delete.from(Messages_.class).byId(key.get(Messages.ID)));\n  context.setCompleted();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Schema Update Hook for CAP Application\nDESCRIPTION: YAML configuration for setting up a database schema update hook in a CAP application. This hook runs during deployment to update the database schema for all tenants.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  - name: upgrade-all\n    type: task\n    phases:\n    # - blue-green.application.before-start.idle\n      - deploy.application.before-start\n    parameters:\n      name: upgrade\n      memory: 512M\n      disk-quota: 768M\n      command: cds-mtx upgrade '*'\n```\n\n----------------------------------------\n\nTITLE: Selecting with Path Matching in CQL\nDESCRIPTION: Shows how to use path expressions in the matching clause of CQL queries. The example selects orders with a specific status in the header.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> order = new HashMap<>();\norder.put(\"header.status\", \"canceled\");\n\nCqnSelect select = Select.from(\"bookshop.Orders\").matching(order);\nResult canceledOrders = persistence.run(select);\n```\n\n----------------------------------------\n\nTITLE: Generating SQL DDL Statements\nDESCRIPTION: Examples of generating SQL DDL statements from a CDS model with different dialect and output format options.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet ddls1 = cds.compile(csn).to.sql()\nlet ddls2 = cds.compile(csn).to.sql({dialect:'plain'})\nlet script = cds.compile(csn).to.sql({as:'str'})\n```\n\n----------------------------------------\n\nTITLE: Updating Individual Entities in CAP Java\nDESCRIPTION: This snippet demonstrates how to update an individual entity using the Update.entity method. It shows how to set the update target, provide update data, and specify filter conditions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_35\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.BOOKS;\nimport bookshop.Books;\n\nBooks book = Books.create();\nbook.setId(100); // key value filter in data\nbook.setTitle(\"CAP Matters\");\n\nCqnUpdate update = Update.entity(BOOKS).data(book);\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Handlers in Java CAP Projects\nDESCRIPTION: Implementation of CdsRuntimeConfiguration interface to register custom event handlers in a non-Spring Boot Java CAP project. This configuration class allows event handlers to be discoverable by the CAP runtime.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_31\n\nLANGUAGE: java\nCODE:\n```\npackage com.sap.capire.bookshop;\n\npublic class BookshopConfiguration implements CdsRuntimeConfiguration {\n\n\t@Override\n\tpublic void eventHandlers(CdsRuntimeConfigurer configurer) {\n\t\tconfigurer.eventHandler(new CatalogServiceHandler());\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Query Results with Multiple Criteria\nDESCRIPTION: Demonstrates how to specify the sort order of query results using multiple columns with different sorting directions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Books\")\n    .columns(c -> c.get(\"ID\"), c -> c.get(\"title\"))\n    .orderBy(c -> c.get(\"ID\").desc(), c -> c.get(\"title\").asc());\n```\n\n----------------------------------------\n\nTITLE: HTTP Authentication in Test Files\nDESCRIPTION: Example of setting up basic authentication in an HTTP test file to access authenticated endpoints.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:4004/admin/Books\nAuthorization: Basic alice:\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using Generated Service Interface\nDESCRIPTION: Shows how to inject a generated service interface and use it to invoke a custom action in a type-safe manner.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n  ...\n  @Autowired\n  private CatalogService catService;\n  ...\n```\n\n----------------------------------------\n\nTITLE: Displaying CDS formatter help information\nDESCRIPTION: Command to display detailed usage information for the CDS formatter tool.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nformat-cds -h\n```\n\n----------------------------------------\n\nTITLE: INSERT Examples\nDESCRIPTION: JavaScript examples showing different ways to specify INSERT data using entries and values.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cqn.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet q = {INSERT:{ into: { ref: ['Books'] }, entries: [\n  { ID:201, title:'Wuthering Heights' },\n  { ID:271, title:'Catweazle' }\n]}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet q = {INSERT:{ into: { ref: ['Authors'] }, entries: [\n  { ID:150, name:'Edgar Allen Poe', books: [\n    { ID:251, title:'The Raven' },\n    { ID:252, title:'Eleonora' }\n  ]}\n]}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet q = {INSERT:{ into: { ref: ['Books'] },\n  columns: [ 'ID', 'title', 'author_id', 'stock' ],\n  values: [ 201, 'Wuthering Heights', 101, 12 ]\n}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet q = {INSERT:{ into: { ref: ['Books'] },\n  columns: [\n    'ID', 'title', 'author_id', 'stock'\n  ],\n  rows: [\n    [ 201, 'Wuthering Heights', 101, 12 ],\n    [ 252, 'Eleonora', 150, 234 ]\n  ]\n}}\n```\n\n----------------------------------------\n\nTITLE: Accessing ChangeSet Context from Event Context in Java\nDESCRIPTION: This snippet demonstrates how to access the currently active ChangeSet Context from the Event Context in CAP Java SDK.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/changeset-contexts.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncontext.getChangeSetContext();\n```\n\n----------------------------------------\n\nTITLE: Using Generic Scalar Function in CDS Query Builder\nDESCRIPTION: Example of using the generic 'func' function to execute a native database function (COUNT) on a field. This counts the number of employees with name 'Monika'.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_54\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.func;\nSelect.from(EMPLOYEE)\n  .columns(e -> e.name(), e -> func(\"COUNT\", e.name()).as(\"count\"))\n  .where(e -> e.name().eq(\"Monika\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Options in values.yaml\nDESCRIPTION: Provides a template for configuring various options for services in the values.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n### Required ###\nserviceOfferingName: my-service\nservicePlanName: my-plan\n\n### Optional ###\n\n# Use instead of generated nname\nfullNameOverride: <use instead of the generated name>\n\n# Name for service instance in SAP BTP\nexternalName: <name for service instance in SAP BTP>\n\n# List of tags describing service,\n# copied to ServiceBinding secret in a 'tags' key\ncustomTags:\n  - foo\n  - bar\n\n# Some services support additional configuration,\n# as found in the respective service offering\nparameters:\n  key: val\njsonParameters: {}\n\n# List of secrets from which parameters are populated\nparametersFrom:\n  - secretKeyRef:\n      name: my-secret\n      key: secret-parameter\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Levels in package.json for CAP.js\nDESCRIPTION: Shows how to configure logging levels for different components in the package.json file using cds.env.log. This example sets the SQL module to debug level and the CDS module to info level.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"log\": {\n      \"levels\": {\n        \"sql\": \"debug\",\n        \"cds\": \"info\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Error Handlers in CAP Service\nDESCRIPTION: Method to register custom error handlers that receive the error object and the request object. Used to augment or modify error messages.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nfunction srv.on ('error', handler: (\n   err : Error,\n   req : cds.Event | cds.Request\n))\n```\n\n----------------------------------------\n\nTITLE: Imperative Data Reading from REST-like Data Source\nDESCRIPTION: This JavaScript code exemplifies imperative coding to read data from a REST-like data source without querying support. It fetches all author and book data, iterates through them to filter rows and select attributes, and performs an expensive single fetch for each book's genre. This approach contrasts with querying due to its inefficiency.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet db = //... be some REST-like data source\nlet authors = [] //... to be filled in below\nlet allAuthors = db.get('Authors')   //> all data of all authors!\nlet allBooks = db.get('Books')       //> all data of all books!\nfor (let a of allAuthors) {\n  if (a.born >= 1900) continue       //> ignoring unwanted rows\n  let a2 = {                         //> ignoring unwanted data\n      ID    : a.ID,\n      name  : a.name,\n      books : []\n  }\n  for (let b of allBooks) {\n    if (b.author !== a.ID) continue  //> ignoring unwanted rows\n    let b2 = {                       //> ignoring unwanted data\n      ID    : b.ID,\n      title : b.title,\n      stock : b.stock\n    }\n    let gid = b.genre.ID\n    let g = db.get('Genre/'+b.genre) //> expensive single fetch\n    b2.genre = g.name                //> ignoring unwanted data\n    a2.books.push (b2)\n  }\n  authors.push (a2)\n}\nreturn authors\n```\n\n----------------------------------------\n\nTITLE: Complex Entity Reference Query\nDESCRIPTION: Demonstrates querying with infix filters and complex path expressions\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from Orders[3].items { quantity, book.title as book }\n```\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(ORDERS, o -> o.filter(o.id().eq(3)).items())\n    .columns(i -> i.quantity(),\n             i -> i.book().title().as(\"book\"));\n```\n\n----------------------------------------\n\nTITLE: Testing CAP Service Layer Exception Handling\nDESCRIPTION: Demonstrates testing error handling in the service layer by verifying ServiceException is thrown when order quantity exceeds available stock.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/testing.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootTest\npublic class CatalogServiceTest {\n\n    @Autowired\n    @Qualifier(CatalogService_.CDS_NAME)\n    private CqnService catalogService;\n\n    @Test\n    public void submitOrderExceedingStock() {\n        SubmitOrderContext context = SubmitOrderContext.create();\n\n        // ID of a book known to have a stock quantity of 22\n        context.setBook(\"4a519e61-3c3a-4bd9-ab12-d7e0c5329933\");\n        context.setQuantity(30);\n        catalogService.emit(context);\n\n        assertThrows(ServiceException.class, () -> catalogService.emit(context), context.getQuantity() + \" exceeds stock for book\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Entity Data with Generic CdsData in CAP Java SDK\nDESCRIPTION: Event handler using generic CdsData list parameter to access entity data for CREATE and UPDATE events. CdsData extends Map<String, Object> and provides generic data access capabilities.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = { CqnService.EVENT_CREATE, CqnService.EVENT_UPDATE },\n        entity = Books_.CDS_NAME)\npublic void changeBooks(List<CdsData> data) { }\n```\n\n----------------------------------------\n\nTITLE: Annotating a Service Entity for Recursive Hierarchy in CDS\nDESCRIPTION: This code adds the necessary OData v4 annotations to a service entity to enable recursive hierarchy support. It defines the NodeProperty and ParentNavigationProperty to establish the hierarchical relationship.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_34\n\nLANGUAGE: cds\nCODE:\n```\nannotate HRService.HREmployee with @Aggregation.RecursiveHierarchy #EmployeeHierarchy: {\n    $Type: 'Aggregation.RecursiveHierarchyType',\n    NodeProperty: ID,\n    ParentNavigationProperty: parent\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Data Model in CAP\nDESCRIPTION: CDS code snippet demonstrating how to extend existing entities, create new entities, and define associations and compositions in a CAP application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_19\n\nLANGUAGE: cds\nCODE:\n```\nusing {sap.capire.bookshop, sap.capire.orders} from '@capire/fiori';\nusing {\n  cuid, managed, Country, sap.common.CodeList\n} from '@sap/cds/common';\n\nnamespace x_bookshop.extension;\n\n// extend existing entity\nextend orders.Orders with {\n  x_Customer    : Association to one x_Customers;\n  x_SalesRegion : Association to one x_SalesRegion;\n  x_priority    : String @assert.range enum {high; medium; low} default 'medium';\n  x_Remarks     : Composition of many x_Remarks on x_Remarks.parent = $self;\n}\n// new entity - as association target\nentity x_Customers : cuid, managed {\n  email        : String;\n  firstName    : String;\n  lastName     : String;\n  creditCardNo : String;\n  dateOfBirth  : Date;\n  status       : String   @assert.range enum {platinum; gold; silver; bronze} default 'bronze';\n  creditScore  : Decimal  @assert.range: [ 1.0, 100.0 ] default 50.0;\n  PostalAddresses : Composition of many x_CustomerPostalAddresses on PostalAddresses.Customer = $self;\n}\n\n// new unique constraint (secondary index)\nannotate x_Customers with @assert.unique: { email: [ email ] } {\n  email @mandatory;  // mandatory check\n}\n\n// new entity - as composition target\nentity x_CustomerPostalAddresses : cuid, managed {\n  Customer     : Association to one x_Customers;\n  description  : String;\n  street       : String;\n  town         : String;\n  country      : Country;\n}\n\n// new entity - as code list\nentity x_SalesRegion: CodeList {\n  key regionCode : String(11);\n}\n\n// new entity - as composition target\nentity x_Remarks : cuid, managed {\n  parent      : Association to one orders.Orders;\n  number      : Integer;\n  remarksLine : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Using matchesPattern Predicate in CAP Java CQL Query\nDESCRIPTION: Demonstrates how to use the matchesPattern predicate to filter books based on a regular expression pattern in the title.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_79\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Books\").where(t -> t.get(\"title\").matchesPattern(\"CAP\"));\n```\n\n----------------------------------------\n\nTITLE: Constructing a Simple CQL Query with Filtering in Java\nDESCRIPTION: Creates a simple CQL Select query with filter conditions using equals operator and AND conjunction.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Book\").where(b -> b.get(\"ID\").eq(42));\n```\n\n----------------------------------------\n\nTITLE: Using Separate Reuse Aspects (Preferred)\nDESCRIPTION: A better approach to defining reusable components using CDS aspects. This allows for separation of concerns, flexibility in combining aspects, and distributed ownership.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\naspect cuid { key ID : UUID; }\n\naspect managed {\n  createdAt  : DateTime;\n  createdBy  : User;\n  modifiedAt : DateTime;\n  modifiedBy : User;\n}\n\naspect tracked {\n  changes : Composition of many Changes;\n}\n\naspect extensible {\n  s1 : String;\n  s2 : String;\n  s3 : String;\n  i1 : Integer;\n  i2 : Integer;\n  dt1 : DateTime;\n  ...\n}\n\naspect temporal {\n  validFrom : Date @cds.valid.from;\n  validTo   : Date @cds.valid.to;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MTA Configuration for CAP Microservices Deployment\nDESCRIPTION: Adds multitarget application (MTA) configuration to enable deployment of CAP microservices to SAP BTP Cloud Foundry. The command creates the required mta.yaml file for deployment orchestration.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncds add mta\n```\n\n----------------------------------------\n\nTITLE: Properly Importing CDS Classes Through the Façade\nDESCRIPTION: Shows the correct way to import classes from the CDS module using the façade object, without directly accessing internal paths.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst { Request } = require('@sap/cds')\n```\n\n----------------------------------------\n\nTITLE: Basic Service Outboxing in Java\nDESCRIPTION: Demonstrates how to wrap a service with outbox handling using OutboxService.outboxed(). The outboxed service will store events in the outbox for asynchronous execution.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nOutboxService myCustomOutbox = ...;\nCqnService remoteS4 = ...;\nCqnService outboxedS4 = myCustomOutbox.outboxed(remoteS4);\n```\n\n----------------------------------------\n\nTITLE: Using Inline for Flattened Results in CQL Select Statements (Java)\nDESCRIPTION: Demonstrates how to use the inline method to flatten deeply structured documents in CQL select statements. This approach produces a flat result structure.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.AUTHORS;\n\n// using multiple path expressions\nSelect.from(AUTHORS)\n    .columns(a -> a.name(),\n             a -> a.books().title().as(\"book\"),\n             a -> a.books().year());\n\n// using inline\nSelect.from(AUTHORS)\n    .columns(a -> a.name(),\n             a -> a.books().inline(\n                      b -> b.title().as(\"book\"),\n                      b -> b.year()));\n```\n\n----------------------------------------\n\nTITLE: Creating a CQL Query with Path Expression and Filtering in Java\nDESCRIPTION: Shows how to construct a CQL query with path expressions and filtering at multiple levels of the path.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Book\",\n\tb -> b.filter(b.get(\"ID\").eq(41))\n\t\t.to(\"author\").filter(a -> a.get(\"Id\").eq(1)));\n```\n\n----------------------------------------\n\nTITLE: Annotating Service Entities in CDS\nDESCRIPTION: Example of adding UI annotations to a service entity in CDS, including SelectionFields and LineItem annotations. This demonstrates a complete workflow from basic annotation to adding complex UI properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nannotate Foo.Bar with @UI : { SelectionFields : [\n    description, assignedIndividual.lastName|\n  ],\n};\n```\n\nLANGUAGE: cds\nCODE:\n```\nannotate Foo.Bar with @UI : {\n   SelectionFields : [\n     description, assignedIndividual.lastName\n   ],\n   LineItem : [{\n     $Type:'UI.DataField',\n     Value : |,\n  },\n};\n```\n\nLANGUAGE: cds\nCODE:\n```\nannotate Foo.Bar with @UI : {\n  SelectionFields : [\n    description, assignedIndividual.lastName\n  ],\n  LineItem : [\n    {\n        $Type:'UI.DataField',\n        Value : description,\n    },\n    {\n        $Type:'UI.DataFieldForAnnotation',\n        Target :  'assignedIndividual/@Communication.Contact',\n    },|\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Event Handler Implementation\nDESCRIPTION: Java implementation of a custom event handler for CAP Java applications that can be packaged as a plugin.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/building-plugins.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@ServiceName(value = \"*\", type = ApplicationService.class)\npublic class SampleHandler implements EventHandler {\n\n    @After\n    public void handleSample(CdsReadEventContext context) {\n      // any custom Java code using the event context and CQL APIs\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Common Usage of cds.serve() in JavaScript\nDESCRIPTION: Examples of common usage patterns for cds.serve(), including serving a single service and serving all services.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CatalogService } = await cds.serve ('my-services')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = require('express')()\ncds.serve('all') .in (app)\n```\n\n----------------------------------------\n\nTITLE: Event Handler Class Implementation in Java\nDESCRIPTION: Shows how to implement an event handler class with Spring Boot integration and service name specifications.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.stereotype.Component;\nimport com.sap.cds.services.handler.EventHandler;\nimport com.sap.cds.services.handler.annotations.ServiceName;\n\n@Component\n@ServiceName(\"AdminService\")\npublic class AdminServiceHandler implements EventHandler {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Privileged Service Calls in CAP Java SDK\nDESCRIPTION: Illustrates how to execute service calls in privileged mode, bypassing authorization checks. This is useful for internal operations that require elevated permissions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/security.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\ncdsRuntime.requestContext().privilegedUser().run(privilegedContext -> {\n\tassert privilegedContext.getUserInfo().isPrivileged();\n\t// ... Service calls in this scope pass generic authorization handler\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Transaction with Global Context in CAP JS\nDESCRIPTION: Shows how to create a root transaction using the global context with specific tenant and user settings.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncds.context = { tenant:'t1', user:'u2' }\nconst tx = cds.tx (cds.context)\n//> tx is a new root transaction\n```\n\n----------------------------------------\n\nTITLE: Converting OData EDMX to CSN Using cds.import.from.edmx() in JavaScript\nDESCRIPTION: Shows how to use the specialized cds.import.from.edmx() function to convert an OData EDMX file to CSN. This function is specific to OData specifications and accepts options for customizing the import process.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-import.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst csn = await cds.import.from.edmx(ODATA_EDMX_file, options)\n```\n\n----------------------------------------\n\nTITLE: Using plus Arithmetic Function in CDS Query Builder\nDESCRIPTION: Example of using the 'plus' function to add a value to a field and create a derived column named 'x'.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_62\n\nLANGUAGE: java\nCODE:\n```\n// SELECT from Author {id + 2 as x : Integer}\nSelect.from(AUTHOR)\n  .columns(a -> a.id().plus(2).as(\"x\"));\n```\n\n----------------------------------------\n\nTITLE: Vendor-Specific Instance Authorization\nDESCRIPTION: Example of instance-based authorization for vendors, restricting updates to articles with positive stock.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\nannotate Articles with @(restrict: [\n  { grant: ['UPDATE'], to: 'Vendor',  where: 'stock > 0' } ]);\n```\n\n----------------------------------------\n\nTITLE: Server Log for Review Update\nDESCRIPTION: This log output shows the server's reaction to a review update, including the PATCH request and the emitted and received 'reviewed' message. It demonstrates the event-driven communication between services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_8\n\nLANGUAGE: log\nCODE:\n```\n[cds] - PATCH /reviews/Reviews/148ddf2b-c16a-4d52-b8aa-7d581460b431\n< emitting: reviewed { subject: '201', count: 2, rating: 4.5 }\n> received: reviewed { subject: '201', count: 2, rating: 4.5 }\n```\n\n----------------------------------------\n\nTITLE: Using IN Subquery Predicate in Fluent Style in CDS Query Builder\nDESCRIPTION: Example of using the 'in' predicate with a subquery in fluent style to check if an author's name exists in the journalists table.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_69\n\nLANGUAGE: java\nCODE:\n```\n// fluent style\nSelect.from(AUTHORS).where(author -> author.name().in(\n    Select.from(JOURNALISTS).columns(journalist -> journalist.name())\n));\n```\n\n----------------------------------------\n\nTITLE: Consuming Partial Reuse Package in CDS\nDESCRIPTION: Shows how to consume specific parts of a reuse package in a CDS file, such as the domain model or services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_29\n\nLANGUAGE: cds\nCODE:\n```\nusing { my.domain.entity } from 'my-reuse-package/schema';\nusing { my.service } from 'my-reuse-package/services';\n```\n\n----------------------------------------\n\nTITLE: Configuring CAP to Avoid Transactions for Select Queries\nDESCRIPTION: Setting the 'cds.persistence.changeSet.enforceTransactional' property to false allows most select queries to execute without starting a transaction, improving connection pool efficiency.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/changeset-contexts.md#2025-04-18_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ncds.persistence.changeSet.enforceTransactional = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Properties in values.yaml\nDESCRIPTION: Sets up global properties for the Helm chart, including image pull secret, domain, and container registry.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Secret name to access container registry, only for private registries\nimagePullSecret:\n  name: <docker-secret>\n\n# Kubernetes cluster ingress domain (used for application URLs)\ndomain: <cluster-domain>\n\n# Container image registry\nimage:\n  registry: <registry-url>\n```\n\n----------------------------------------\n\nTITLE: Executing Update Operation in Java\nDESCRIPTION: Demonstrates how to perform an update operation on an entity. The example creates a map with the data to update, constructs an update statement targeting a specific book by ID, and executes it to obtain the result and row count.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> book = Map.of(\"title\", \"CAP\");\n\nCqnUpdate update = Update.entity(\"bookshop.Books\").data(book).byId(101);\nResult updateResult = service.run(update);\n```\n\n----------------------------------------\n\nTITLE: Registering CDS Add Plugin - JavaScript\nDESCRIPTION: Shows how to register a new cds add plugin with the CAP framework. Two options are shown - importing from a separate file or defining inline.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncds.add?.register?.('postgres', require('lib/add')) // ...or inline:\ncds.add?.register?.('postgres', class extends cds.add.Plugin {})\n```\n\n----------------------------------------\n\nTITLE: Using CdsData for Nested Structures\nDESCRIPTION: This Java code demonstrates how to use the putPath method of CdsData to construct nested structures.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nCdsData book = Struct.create(CdsData.class);\nbook.put(\"ID\", 97);\nbook.putPath(\"author.ID\", 23);\nbook.putPath(\"author.name\", \"Bram Stoker\");\n```\n\n----------------------------------------\n\nTITLE: Async Service Outboxing with Type Parameter\nDESCRIPTION: Shows how to outbox a service while specifying an async API interface, allowing for better handling of asynchronous operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nOutboxService myCustomOutbox = ...;\nCqnService remoteS4 = ...;\nAsyncCqnService outboxedS4 = myCustomOutbox.outboxed(remoteS4, AsyncCqnService.class);\n```\n\n----------------------------------------\n\nTITLE: Using Reverse Iterator for Multi-Segment References in Java\nDESCRIPTION: Traverses a multi-segment reference in reverse order using the reverse iterator method, starting from the target entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nIterator<ResolvedSegment> iterator = result.reverse();\nCdsEntity book  = iterator.next().entity();\nCdsEntity item  = iterator.next().entity();\nCdsEntity order = iterator.next().entity();\n```\n\n----------------------------------------\n\nTITLE: Outputting VCAP_SERVICES Environment Variable\nDESCRIPTION: Examples of using cds bind to output the content of the VCAP_SERVICES environment variable for different operating systems.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncds bind --exec -- node -e 'console.log(process.env.VCAP_SERVICES)'\n```\n\nLANGUAGE: cmd\nCODE:\n```\ncds bind --exec -- node -e 'console.log(process.env.VCAP_SERVICES)'\n```\n\nLANGUAGE: powershell\nCODE:\n```\ncds bind --exec '--' node -e 'console.log(process.env.VCAP_SERVICES)'\n```\n\n----------------------------------------\n\nTITLE: ExtensibilityService Configuration\nDESCRIPTION: Comprehensive configuration example for ExtensibilityService showing prefix rules, namespace blocklist and extension allowlist settings.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"cds.xt.ExtensibilityService\": {\n  \"element-prefix\": [\"x_\", \"xx_\"],\n  \"namespace-blocklist\": [\"com.sap.\", \"sap.\"],\n  \"extension-allowlist\": [\n    {\n      \"for\": [\"my.bookshop\"],\n      \"kind\": \"entity\",\n      \"new-fields\": 2,\n      \"fields\": [\"description\"]\n    },\n    {\n      \"for\": [\"CatalogService\"],\n      \"new-entities\": 2,\n      \"annotations\": [\"@readonly\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HANA Configuration for CAP Microservices\nDESCRIPTION: Adds SAP HANA database configuration for CAP microservices and prepares the project for deployment to SAP HANA. The command creates necessary configuration files for HANA deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncds add hana\n```\n\n----------------------------------------\n\nTITLE: Creating Loggers with Multiple Debug Identifiers in CAP.js\nDESCRIPTION: Demonstrates how to obtain a logger with multiple IDs for DEBUG environment variable matching. The logger will be enabled when either 'db' or 'sql' is specified in the DEBUG environment variable.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst LOG = cds.log('db|sql')\n```\n\n----------------------------------------\n\nTITLE: Custom Draft Creation Service Definition in CDS\nDESCRIPTION: Defines a draft-enabled entity with custom draft creation action in CAP CDS. Includes OData draft enablement and Common annotation for custom draft creation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/fiori-drafts.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nservice AdminService {\n  @odata.draft.enabled\n  @Common.DraftRoot.NewAction: 'AdminService.createDraft'\n  entity Orders as projection on my.Orders actions {\n    action createDraft(in: many $self, orderNo: String) returns Orders;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Managed Associations with Java Query Builder\nDESCRIPTION: Demonstrates how to select key elements of a managed to-one association's target entity using both dynamic and static approaches in Java.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// dynamic\nSelect.from(\"bookshop.Books\")\n      .columns(b -> b.get(\"author\"));\n\n// static\nimport static bookshop.Bookshop_.BOOKS;\n\nCqnSelect q = Select.from(BOOKS)\n    .columns(b -> b.author());\n\nRow book = dataStore.execute(q).single();\nObject authorId = book.get(\"author.Id\"); // path access\n```\n\n----------------------------------------\n\nTITLE: Named Aspects Definition and Usage\nDESCRIPTION: Shows how to define and apply named aspects using both extend and inheritance-style syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_18\n\nLANGUAGE: cds\nCODE:\n```\naspect NamedAspect { someAdditionalField : String }\nextend Books with NamedAspect;\n\nentity Books : NamedAspect { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating CDS Diff Processor\nDESCRIPTION: Shows how to create a CdsDiffProcessor instance for comparing entity data changes.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nCdsDiffProcessor diff = CdsDiffProcessor.create();\n```\n\n----------------------------------------\n\nTITLE: Liquibase Changelog Configuration\nDESCRIPTION: YAML configuration for Liquibase changelog defining database schema changes\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_13\n\nLANGUAGE: yml\nCODE:\n```\ndatabaseChangeLog:\n   - changeSet:\n       id: 1\n       author: me\n       changes:\n       - sqlFile:\n           dbms: postgresql\n           path: db/changelog/v1/model.sql\n```\n\n----------------------------------------\n\nTITLE: Defining Travel Actions in CDS\nDESCRIPTION: CDS entity definition showing how to declare actions for a Travel entity including template creation, approval/rejection and discount calculation.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_13\n\nLANGUAGE: cds\nCODE:\n```\nentity Travel as projection on my.Travel actions {\n    action createTravelByTemplate() returns Travel;\n    action rejectTravel();\n    action acceptTravel();\n    action deductDiscount( percent: Percentage not null ) returns Travel;\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining HR Service in CDS\nDESCRIPTION: This snippet shows how to expose entities from a temporal model in a service. It creates projections on Employees, WorkAssignments, and Departments entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nusing { com.acme.hr } from './temporal-model';\nservice HRService {\n  entity Employees as projection on hr.Employees;\n  entity WorkAssignments as projection on hr.WorkAssignments;\n  entity Departments as projection on hr.Departments;\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Security Event\nDESCRIPTION: Demonstrates how to use the AuditLogService to emit a security event.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/auditlog.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nString action = \"login\";\nString data = \"user-name\";\nauditLogService.logSecurityEvent(action, data);\n```\n\n----------------------------------------\n\nTITLE: Serving Reused UIs in CAP Node.js Application\nDESCRIPTION: Demonstrates how to serve UIs from imported packages in a CAP Node.js application using Express.js middleware.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express')\nconst cds = require('@sap/cds')\n\n// Add routes to UIs from imported packages\ncds.once('bootstrap',(app)=>{\n  app.serve ('/bookshop') .from ('@capire/bookshop','app/vue')\n  app.serve ('/reviews') .from ('@capire/reviews','app/vue')\n  app.serve ('/orders') .from('@capire/orders','app/orders')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Toggles in Development (Node.js)\nDESCRIPTION: JSON configuration for toggling features per tenant and user in the development environment for Node.js.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"cds\":{\n  \"requires\": {\n    \"auth\": {\n      \"users\": {\n        \"carol\": { \"tenant\": \"t1\" },\n        \"erin\":  { \"tenant\": \"t2\" },\n        \"fred\":  { \"tenant\": \"t2\", \"features\":[] }\n      },\n      \"tenants\": {\n        \"t1\": { \"features\": [\"isbn\"] },\n        \"t2\": { \"features\": \"*\" }\n      }\n    }\n  }\n}}\n```\n\n----------------------------------------\n\nTITLE: Using Runtime-Managed Versions in Bulk Updates\nDESCRIPTION: Example of performing bulk updates with runtime-managed versions for concurrency control, checking individual update counts to detect concurrent modifications.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nCqnSelect select = Select.from(ORDER).where(o -> amount().gt(1000));\nList<Order> orders = db.run(select).listOf(Order.class);\n\norders.forEach(o -> o.setStatus(\"cancelled\"));\n\nResult rs = db.execute(Update.entity(ORDER).entries(orders));\n\nfor(int i = 0; i < orders.size(); i++) if (rs.rowCount(i) == 0) {\n    // order does not exist or was modified concurrently\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Element References and Literals in CQN Visitor for Java\nDESCRIPTION: This code snippet shows how the CheckDataVisitor handles element references and literals. It pushes the corresponding values onto the stack for later evaluation in the filter expression.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void visit(CqnElementRef ref) {\n    Object dataValue = data.get(ref.displayName());\n    stack.push(dataValue);\n}\n\n@Override\npublic void visit(CqnLiteral<?> literal) {\n    stack.push(literal.value());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Model for Bookshop\nDESCRIPTION: Example CDS model definition for a bookshop application, including entities for Books, Authors, and Orders.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nnamespace my.bookshop;\n\nentity Books {\n  title  : localized String(111);\n  author : Association to Authors;\n  ...\n}\n\nentity Authors {\n  key ID : Integer;\n  ...\n}\n\nentity Orders {\n  OrderNo  : String @title:'Order Number';\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Complex Filter Predicate in Java\nDESCRIPTION: Creates a complex filter predicate combining IN and GT operators with AND, demonstrating how to build predicates for CqnVisitor analysis.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nPredicate titles = CQL.get(\"title\").in(\"Catweazle\", \"The Raven\");\nPredicate stock = CQL.get(\"stock\").gt(10);\n\n// title IN ('Catweazle', 'The Raven') AND stock > 10\nPredicate filter = CQL.and(titles, stock);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Spans with OpenTelemetry API in CAP Java\nDESCRIPTION: Example of manually creating and configuring custom spans using the OpenTelemetry API in a CAP Java service event handler, including span attributes and proper exception handling.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\nclass CatalogServiceHandler implements EventHandler {\n  Tracer tracer = GlobalOpenTelemetry.getTracerProvider()\n    .tracerBuilder(\"RatingCalculator\").build();\n\n  @After(entity = Books_.CDS_NAME)\n  public void afterAddReview(AddReviewContext context) {\n      Span childSpan = tracer.spanBuilder(\"setBookRating\").startSpan();\n      childSpan.setAttribute(\"book.title\", context.getResult().getTitle());\n      childSpan.setAttribute(\"book.id\", context.getResult().getBookId());\n      childSpan.setAttribute(\"book.rating\", context.getResult().getRating());\n\n      try(Scope scope = childSpan.makeCurrent()) {\n          ratingCalculator.setBookRating(context.getResult().getBookId());\n      } catch (Throwable t) {\n          childSpan.recordException(t);\n          throw t;\n      } finally {\n          childSpan.end();\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Configuration Merge from Multiple Sources\nDESCRIPTION: Shows how configuration from different sources (cdsrc.json, package.json, and env.properties) gets merged into the final effective configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_13\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"requires\": {\n    \"db\": {\n      \"kind\": \"sql\",\n      \"model\": \"./db\",\n      \"credentials\": { \"url\": \":memory:\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CAP Project with Sample Features\nDESCRIPTION: Command to initialize a new CAP project that includes a sample bookshop model and SAP HANA database configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncds init --add sample,hana\n```\n\n----------------------------------------\n\nTITLE: Accessing cds.context in JavaScript\nDESCRIPTION: Demonstrates how to access the current event context using the cds.context property, which provides seemingly static access to the current cds.EventContext.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet { tenant, user } = cds.context\n```\n\n----------------------------------------\n\nTITLE: CDS Deploy with Profile\nDESCRIPTION: Deploy command with profile specification for resolving binding information.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncds deploy --to hana --profile hybrid\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for CAP Development\nDESCRIPTION: Dockerfile configuration for setting up a container with Node.js and the CAP Development Kit. This provides a consistent development environment for CAP projects.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_6\n\nLANGUAGE: docker\nCODE:\n```\nFROM node:lts\n# or use `FROM node:<NODEVERSION>` to match a specific Node version\n# you have installed locally\n\nUSER node\nENV NPM_CONFIG_PREFIX=/home/node/.npm\nENV PATH=$NPM_CONFIG_PREFIX/bin:$PATH\n\nRUN npm i -g @sap/cds-dk\n```\n\n----------------------------------------\n\nTITLE: Service Path Configuration in CAP.js using @path Annotation\nDESCRIPTION: Shows how to configure the path at which a service is served using the @path annotation, with both relative and absolute path examples.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\n@path: 'browse'\nservice CatalogService {}\n//> serves CatalogService at: /odata/v4/browse\n\n@path: '/browse'\nservice CatalogService {}\n//> serves CatalogService at: /browse\n```\n\n----------------------------------------\n\nTITLE: Implementing OData concat Transformation Example in HTTP\nDESCRIPTION: This example demonstrates how to use the concat transformation in an OData query to apply multiple transformations to a filtered dataset. It filters books by author and then concatenates the aggregate count with a groupby count per year.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nGET /Books?$apply=\n    filter(author/name eq 'Bram Stroker')/\n    concat(\n        aggregate($count as totalCount),\n        groupby((year), aggregate($count as countPerYear)))\n```\n\n----------------------------------------\n\nTITLE: Sending Various Request Types to a Service\nDESCRIPTION: Examples of sending different types of requests to a service, including POST, GET, and custom actions.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nawait srv.send('POST','/Books', { title: 'Catweazle' })\nawait srv.send('GET','/Books')\nawait srv.send('GET','/Books/201')\nawait srv.send('submitOrder',{...})\n```\n\n----------------------------------------\n\nTITLE: Defining a New ChangeSet Context using CdsRuntime in Java\nDESCRIPTION: This code shows how to explicitly define a new ChangeSet Context using the CdsRuntime API in CAP Java SDK. The code inside the run() method executes within a dedicated ChangeSet Context.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/changeset-contexts.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nruntime.changeSetContext().run(context -> {\n    // executes inside a dedicated ChangeSet Context\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic CSRF Token Handling in Remote Service\nDESCRIPTION: Basic configuration example showing how to enable CSRF token handling for both regular and batch requests in a remote service.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/remote-services.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"cds\": {\n        \"requires\": {\n            \"API_BUSINESS_PARTNER\": {\n                \"kind\": \"odata\",\n                \"model\": \"srv/external/API_BUSINESS_PARTNER\",\n                \"csrf\": true,\n                \"csrfInBatch\": true\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing CDS Version for Version-Specific Code\nDESCRIPTION: Shows how to check the CDS version to implement version-specific code paths in your application.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst [major, minor] = cds.version.split('.').map(Number)\nif (major < 6) // code for pre cds6 usage\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CAP Service Authorization in CDS\nDESCRIPTION: Example of how to define a CAP service named 'Foo' and configure its authorization using @restrict and @requires annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/aspects.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nservice Foo {}\n```\n\n----------------------------------------\n\nTITLE: Implementing After Handler for Download Pre-Processing\nDESCRIPTION: Event handler that processes media content after retrieval but before sending to client.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_56\n\nLANGUAGE: java\nCODE:\n```\n@After(event = CdsService.EVENT_READ)\npublic void preProcessCoverImage(CdsReadEventContext context, List<Books> books) {\n\tbooks.forEach(book -> {\n\t\tbook.setCoverImage(new CoverImagePreProcessor(book.getCoverImage()));\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XSUAA Service in MTA YAML\nDESCRIPTION: Example of an mta.yaml file configuration that includes XSUAA service setup. It shows how to configure authentication for a bookshop application with tenant mode and security settings.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: bookshop-srv\n    requires:\n      - bookshop-auth # \nresources:\n  name: bookshop-auth # \n  type: org.cloudfoundry.managed-service # \n  parameters: # \n    service: xsuaa # \n    service-plan: application # \n    path: ./xs-security.json # include cds managed scopes and role templates  \n    config: # \n      xsappname: bookshop-${org}-${space} # \n      tenant-mode: dedicated # 'shared' for multitenant deployments  \n```\n\n----------------------------------------\n\nTITLE: Throwing ServiceException from Collected Error Messages\nDESCRIPTION: Shows how to use throwIfError() to conditionally throw a ServiceException when error messages have been collected, which is useful for validation scenarios.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// throw a ServiceException, if any error messages have been added to the current request\nmessages.throwIfError();\n```\n\n----------------------------------------\n\nTITLE: Using skip, top, and orderby Transformations in OData HTTP Request\nDESCRIPTION: This example shows how to combine orderby, top, and groupby transformations to sort and paginate results before grouping. It retrieves the 500 most expensive books, groups them by author name, and calculates the maximum price per author.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nGET /Order(10)/books?\n    $apply=orderby(price desc)/\n           top(500)/\n           groupby((author/name),aggregate(price with max as maxPrice))\n```\n\n----------------------------------------\n\nTITLE: Modeling Polymorphism with a Normalized Entity (Good Practice)\nDESCRIPTION: This example demonstrates a better approach to modeling polymorphism by using a single normalized entity. This improves performance by avoiding UNIONs and simplifies the data model.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nentity Fruit : cuid, managed {\n    type          : String enum { apple; banana; cherry; mango };\n    description   : String;\n    vendor        : Association to one Vendor;\n    appleDetails  : Composition of AppleDetails;\n    bananaDetails : Composition of BananaDetails;\n    cherryDetails : Composition of CherryDetails;\n    mangoDetails  : Composition of MangoDetails;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Imported Models with Type Hinting in JavaScript\nDESCRIPTION: Shows how imported models provide code completion and type hinting during design time while behaving like cds.entities() at runtime, enhancing developer productivity in service implementation.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nclass CatalogService extends cds.ApplicationService { init(){\n  const { Book } = require('#cds-models/sap/capire/bookshop')\n\n  this.on ('UPDATE', Book, req => {\n    // in here, req is known to hold a payload of type Book.\n    // Code completion therefore offers all the properties that are defined in the model.\n    req.data.t\n//            ^|\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Imported CAP Entities in CDS\nDESCRIPTION: Shows how to extend imported CAP entities by adding new elements and relationships in CDS.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\nusing { sap.capire.bookshop.Books } from '@capire/bookshop';\nusing { ReviewsService.Reviews } from '@capire/reviews';\n\n// Extend Books with access to Reviews and average ratings\nextend Books with {\n  reviews : Composition of many Reviews on reviews.subject = $self.ID;\n  rating  : Decimal;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CONTAINS Predicate Function in CAP Java CQL Query\nDESCRIPTION: Demonstrates how to use the CONTAINS predicate function to filter employees based on a substring in their name.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_76\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(EMPLOYEE)\n  .where(e -> e.name()\n  .contains(\"oni\"));\n```\n\n----------------------------------------\n\nTITLE: Working with Vector Embeddings in CAP Java\nDESCRIPTION: Shows how to create and manipulate vector embeddings using the CdsVector type. Demonstrates converting from different representations (float array and string format) to CdsVector objects.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Vector embedding of text, for example, from SAP GenAI Hub or via LangChain4j\nfloat[] embedding = embeddingModel.embed(bookDescription).content().vector();\n\nCdsVector v1 = CdsVector.of(embedding); // float[] format\nCdsVector v2 = CdsVector.of(\"[0.42, 0.73, 0.28, ...]\"); // String format\n```\n\n----------------------------------------\n\nTITLE: Basic CQL Select Statement Comparison\nDESCRIPTION: Shows equivalent CQL query written in SQL and Java, demonstrating basic Select builder usage to query books by ID.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from bookshop.Books { title } where ID = 101\n```\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Books\").columns(\"title\").byId(101);\n```\n\n----------------------------------------\n\nTITLE: REST-style API Mapping to srv.send Method\nDESCRIPTION: Shows how the REST-style convenience methods map to the underlying srv.send method with HTTP methods.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nsrv.get('/Books',...)     -->  srv.send('GET','/Books',...)\nsrv.put('/Books',...)     -->  srv.send('PUT','/Books',...)\nsrv.post('/Books',...)    -->  srv.send('POST','/Books',...)\nsrv.patch('/Books',...)   -->  srv.send('PATCH','/Books',...)\nsrv.delete('/Books',...)  -->  srv.send('DELETE','/Books',...)\n```\n\n----------------------------------------\n\nTITLE: Extending Books Entity with Localization Associations in CDS\nDESCRIPTION: The CDS compiler extends the source entity with associations to the generated texts entity. This example shows the automatic extension of the Books entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nextend entity Books with {\n  texts : Composition of many Books.texts on texts.ID=ID;\n  localized : Association to Books.texts on localized.ID=ID\n    and localized.locale = $user.locale;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating XSUAA Service Instance in Cloud Foundry\nDESCRIPTION: Command to create an XSUAA service instance in Cloud Foundry using the xs-security.json configuration file.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncf create-service xsuaa application bookshop-uaa -c xs-security.json\n```\n\n----------------------------------------\n\nTITLE: Basic Data Query in CAP.js\nDESCRIPTION: Demonstrates how to query specific fields from Books entity including nested author information using template literals.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet books = await GET `Books { ID, title, author.name as author }`\n```\n\n----------------------------------------\n\nTITLE: Setting Open Telemetry Environment Variables\nDESCRIPTION: Defines environment variables in the mta.yaml file to configure the Open Telemetry agent extension for use with Cloud Logging Service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: <srv-module>\n  # ...\n  properties:\n    # ...\n    OTEL_METRICS_EXPORTER: cloud-logging\n    OTEL_TRACES_EXPORTER: cloud-logging\n    OTEL_LOGS_EXPORTER: none\n```\n\n----------------------------------------\n\nTITLE: Configuration Entity for UI Visibility\nDESCRIPTION: Definition of a singleton configuration entity for controlling UI element visibility based on roles.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\n@odata.singleton @cds.persistency.skip\nentity Configuration {\n    key ID: String;\n    isAdmin : Boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Files with write()\nDESCRIPTION: Shows different ways to write data to files using the fluent API of the write() utility function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { write } = cds.utils\nawait write ({foo:'bar'}) .to ('some','file.json')\nawait write ({foo:'bar'}) .to ('some/file.json')\nawait write ('some/file.json', {foo:'bar'})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Feature Toggles Provider in Java\nDESCRIPTION: Custom implementation of FeatureTogglesInfoProvider that enables the 'isbn' feature when the user has the 'expert' role. The provider is registered as a Spring component and evaluates user roles on each request to determine active features.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class DemoFTProvider implements FeatureTogglesInfoProvider {\n    @Override\n    public FeatureTogglesInfo get(UserInfo userInfo, ParameterInfo paramInfo) {\n        Map<String, Boolean> featureToggles = new HashMap<>();\n        if (userInfo.hasRole(\"expert\")) {\n            featureToggles.put(\"isbn\", true);\n        }\n        return FeatureTogglesInfo.create(featureToggles);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with CAP Test Client\nDESCRIPTION: Examples of using the test client to make HTTP requests to a CAP server with authentication and data payload support.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst test = cds.test() //> served at localhost with an arbitrary port\nconst { data } = await test.get('/browse/Books')\nawait test.post('/browse/submitOrder',\n  { book:201, quantity:1 },\n  { auth: { username: 'alice' }}\n)\n```\n\n----------------------------------------\n\nTITLE: Delegating Active Entity Reads to Remote S/4 System in CAP Java\nDESCRIPTION: This snippet demonstrates how to delegate reading of active entities to a remote S/4 system when working with draft-enabled entities using the ActiveReadEventContext. This is useful when active entity data is stored in a different system than drafts.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/fiori-drafts.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@On(entity = MyRemoteDraftEnabledEntity_.CDS_NAME)\npublic Result delegateToS4(ActiveReadEventContext context) {\n    return remoteS4.run(context.getCqn());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SaaS Dependencies in Node.js\nDESCRIPTION: JSON configuration in sidecar package.json to activate service dependencies for various SAP BTP services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"audit-log\": true,\n    \"connectivity\": true,\n    \"destinations\": true,\n    \"html5-repo\": true,\n    \"portal\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Personal Data Modified Event Logging in JavaScript\nDESCRIPTION: Example of logging a personal data modification event with before/after values.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait audit.log ('PersonalDataModified', {\n  data_subject: {\n    type: 'sap.capire.bookshop.Customers',\n    id: { ID: '1923bd11-b1d6-47b6-a91b-732e755fa976' },\n    role: 'Customer',\n  },\n  object: {\n    type: 'sap.capire.bookshop.Customers',\n    id: { ID: '1923bd11-b1d6-47b6-a91b-732e755fa976' }\n  },\n  attributes: [\n    { name: 'emailAddress', old: 'foo@example.com', new: 'bar@example.com' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Runtime Query Creation Methods\nDESCRIPTION: Shows two approaches for creating queries programmatically using TTL and Fluent API.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlet books = await SELECT `from Books {\n  ID, title, author { name }\n}`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet books = await SELECT.from (Books, b => {\n  b.ID, b.title, b.author (a => a.name)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring XSUAA Redirect URIs for CAP Application\nDESCRIPTION: JSON configuration snippet to add XSUAA redirect URIs for trial or extension landscapes. This needs to be added to the xs-security.json file and adapted to the specific deployment landscape.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"oauth2-configuration\": {\n  \"redirect-uris\": [\"https://*.cfapps.us10-001.hana.ondemand.com/**\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Destinations from SAP BTP Destination Service with Cloud SDK\nDESCRIPTION: Retrieves a destination from the SAP BTP Destination Service and creates an HttpClient instance to consume external APIs. Shows examples for both Cloud SDK v4 and v5.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nHttpDestination destination = DestinationAccessor.getDestination(\"<destinationName>\").asHttp();\nHttpClient httpClient = HttpClientAccessor.getHttpClient(destination);\n...\n```\n\nLANGUAGE: java\nCODE:\n```\nDestination destination = DestinationAccessor.getDestination(\"<destinationName>\");\nHttpClient httpClient = HttpClientAccessor.getHttpClient(destination);\n...\n```\n\n----------------------------------------\n\nTITLE: Registering MTX Lifecycle Event Handlers in JavaScript\nDESCRIPTION: Shows how to register custom handlers for MTX lifecycle events like upgrade, subscribe and getCsn in a server.js file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.on('served', ()=>{\n  const { 'cds.xt.ModelProviderService': mps } = cds.services\n  const { 'cds.xt.DeploymentService': ds } = cds.services\n  ds.before ('upgrade', (req) => { ... })\n  ds.after ('subscribe', (_,req) => { ... })\n  mps.after ('getCsn', (csn) => { ... })\n})\n```\n\n----------------------------------------\n\nTITLE: Localized Query Examples in CAP.js\nDESCRIPTION: Demonstrates different ways to execute localized queries using the new database service implementation with SELECT operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet books = await SELECT.from(Books)       //> non-localized data\nlet lbooks = await SELECT.localized(Books) //> localized data\n```\n\n----------------------------------------\n\nTITLE: Using Model Processors with Fluent and Direct API Styles\nDESCRIPTION: Examples of the two API styles for using model processors that take a CSN input and compile it to a target output format.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet sql = cds.compile(csn).to.sql ({dialect:'sqlite'}) //> fluent\nlet sql = cds.compile.to.sql (csn,{dialect:'sqlite'}) //> direct\n```\n\n----------------------------------------\n\nTITLE: Creating a CQL Select Statement with a Subquery (Java)\nDESCRIPTION: Illustrates how to create a CQL select statement with a subquery using the Query Builder API. This example selects the youngest authors and then sorts them by name.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nCqnSelect youngestAuthors = Select.from(AUTHORS).orderBy(a -> age()).limit(10);\nSelect.from(youngestAuthors).orderBy(\"name\");\n```\n\n----------------------------------------\n\nTITLE: Defining Fiori Annotations for CatalogService.Books\nDESCRIPTION: CDS code snippet showing how to add Fiori annotations to the Books entity in CatalogService. It defines UI elements like SelectionFields and LineItem for rendering in Fiori applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nannotate CatalogService.Books with @(\n  UI: {\n    SelectionFields: [ ID, price, currency_code ],\n    LineItem: [\n      {Value: title},\n      {Value: author, Label:'{i18n>Author}'},\n      {Value: genre.name},\n      {Value: price},\n      {Value: currency.symbol, Label:' '},\n    ]\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Audit Log Service Implementation in JavaScript\nDESCRIPTION: Example of implementing a custom audit log service with console logging.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AuditLogService } = require('@cap-js/audit-logging')\nclass MyAuditLogService extends AuditLogService {\n  async init() {\n    this.on('*', function (req) {\n      const { event, data } = req\n      console.log(`[my-audit-log] - ${event}:`, data)\n    })\n    return super.init()\n  }\n}\nmodule.exports = MyAuditLogService\n```\n\n----------------------------------------\n\nTITLE: Adding a Sample CDS Model to a CAP Java Project\nDESCRIPTION: Command to add a tiny sample CDS model to an existing CAP Java project using the CDS Maven plugin, providing a starting point for data modeling.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/getting-started.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmvn com.sap.cds:cds-maven-plugin:add -Dfeature=TINY_SAMPLE\n```\n\n----------------------------------------\n\nTITLE: Using Single Entity Parameter in Event Handlers in CAP Java SDK\nDESCRIPTION: Event handler using a single Books parameter instead of a collection. This throws an exception if multiple data rows are available, suitable only for single-entity operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = { CqnService.EVENT_CREATE, CqnService.EVENT_UPDATE })\npublic void changeBook(Books book) { }\n```\n\n----------------------------------------\n\nTITLE: Entity Streaming Method Definition in TypeScript\nDESCRIPTION: Defines the srv.foreach method for streaming-like processing of query results row by row without materializing the full result set.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foreach(\n  query: CQN, callback: (row: object) => void\n)\n```\n\n----------------------------------------\n\nTITLE: Annotating Entity Elements for Change Tracking\nDESCRIPTION: Annotate specific elements of the entity to be tracked for changes using @changelog annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\nannotate Bookshop.Books {\n  title @changelog;\n  stock @changelog;\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing Nested Structures in Java\nDESCRIPTION: This Java code shows how to construct nested structures representing a book with an author using plain maps.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> author = new HashMap<>();\nauthor.put(\"ID\", 23);\nauthor.put(\"name\", \"Bram Stoker\");\n\nMap<String, Object> book = new HashMap<>();\nbook.put(\"ID\", 97);\nbook.put(\"author\", author);\n```\n\n----------------------------------------\n\nTITLE: Using Where Clause with Combined Conditions\nDESCRIPTION: Shows how to use the where clause with combined conditions using logical operators for more complex filtering.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Books\")\n\t.where(b -> b.get(\"ID\").eq(251).or(\n              b.get(\"title\").startsWith(\"Wuth\")));\n```\n\n----------------------------------------\n\nTITLE: Creating HANA Mapping View\nDESCRIPTION: SQL view definition that maps quoted column names to plain names for CDS compatibility.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nVIEW DATA_MODEL_BOOKSHOP_BOOKS AS SELECT\n  \"id\"        AS ID,\n  \"the.title\" AS THE_TITLE\nFROM \"data.model::Bookshop.Books\"\n```\n\n----------------------------------------\n\nTITLE: Creating a View that Preserves Localized Association in CDS\nDESCRIPTION: Example of creating a view that preserves the 'localized' association, allowing for optimized query execution and broader language support.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\nentity OpenBookView as select from Books {*}\n  excluding { price, currency };\n```\n\nLANGUAGE: cds\nCODE:\n```\nentity ClosedBookView as select from Books { ID, title, descr, localized };\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Combine Method\nDESCRIPTION: Example of combine method implementation for handling dependencies between plugins\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nasync combine() {\n  const { hasMta, hasXsuaa, hasHelm } = readProject()\n  if (hasMta)   { /* adjust mta.yaml */ }\n  if (hasHelm)  { /* adjust values.yaml */ }\n  if (hasXsuaa) { /* adjust xs-security.json */  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing CDS Services as Dictionary and Iterable\nDESCRIPTION: Shows different ways to access and iterate through the CDS services dictionary, which contains service instances created through cds.serve() or cds.connect().\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nlet { CatalogService, db } = cds.services\nlet all_services = [ ... cds.services ]\nfor (let k in cds.services) //... k is a services's name\nfor (let s of cds.services) //... s is an instance of cds.Service\n```\n\n----------------------------------------\n\nTITLE: Configuring XSUAA Security in JSON\nDESCRIPTION: This code snippet shows how to configure XSUAA security settings in the xs-security.json file. It defines scopes and role templates for the application, including an admin role.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scopes\": [\n    {\n      \"name\": \"$XSAPPNAME.admin\",\n      \"description\": \"admin\"\n    }\n  ],\n  \"role-templates\": [\n    {\n      \"name\": \"admin\",\n      \"scope-references\": [\n        \"$XSAPPNAME.admin\"\n      ],\n      \"description\": \"cap samples multi-service shared-db\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SAP S/4HANA Event Integration\nDESCRIPTION: Example of extending SAP S/4HANA BusinessPartner API with event definitions and handling.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_17\n\nLANGUAGE: cds\nCODE:\n```\nusing { API_BUSINESS_PARTNER as S4 } from './API_BUSINESS_PARTNER';\nextend service S4 with {\n  event BusinessPartner.Created @(topic:'sap.s4.beh.businesspartner.v1.BusinessPartner.Created.v1') {\n    BusinessPartner : String\n  }\n  event BusinessPartner.Changed @(topic:'sap.s4.beh.businesspartner.v1.BusinessPartner.Changed.v1') {\n    BusinessPartner : String\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst S4Bupa = await cds.connect.to ('API_BUSINESS_PARTNER')\nS4Bupa.on ('BusinessPartner.Changed', msg => {...})\n```\n\n----------------------------------------\n\nTITLE: CDS Build Output Log for SAP HANA Artifacts\nDESCRIPTION: Log output showing the generated HDI artifacts when running cds build command, including tables, views, constraints, and other deployment files required by SAP HANA Deployment Infrastructure.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_3\n\nLANGUAGE: log\nCODE:\n```\n[cds] - done > wrote output to:\n   gen/db/init.js\n   gen/db/package.json\n   gen/db/src/gen/.hdiconfig\n   gen/db/src/gen/.hdinamespace\n   gen/db/src/gen/AdminService.Authors.hdbview\n   gen/db/src/gen/AdminService.Books.hdbview\n   gen/db/src/gen/AdminService.Books_texts.hdbview\n   gen/db/src/gen/AdminService.Currencies.hdbview\n   gen/db/src/gen/AdminService.Currencies_texts.hdbview\n   gen/db/src/gen/AdminService.Genres.hdbview\n   gen/db/src/gen/AdminService.Genres_texts.hdbview\n   gen/db/src/gen/CatalogService.Books.hdbview\n   gen/db/src/gen/CatalogService.Books_texts.hdbview\n   gen/db/src/gen/CatalogService.Currencies.hdbview\n   gen/db/src/gen/CatalogService.Currencies_texts.hdbview\n   gen/db/src/gen/CatalogService.Genres.hdbview\n   gen/db/src/gen/CatalogService.Genres_texts.hdbview\n   gen/db/src/gen/CatalogService.ListOfBooks.hdbview\n   gen/db/src/gen/data/sap.capire.bookshop-Authors.csv\n   gen/db/src/gen/data/sap.capire.bookshop-Authors.hdbtabledata\n   gen/db/src/gen/data/sap.capire.bookshop-Books.csv\n   gen/db/src/gen/data/sap.capire.bookshop-Books.hdbtabledata\n   gen/db/src/gen/data/sap.capire.bookshop-Books.texts.csv\n   gen/db/src/gen/data/sap.capire.bookshop-Books.texts.hdbtabledata\n   gen/db/src/gen/data/sap.capire.bookshop-Genres.csv\n   gen/db/src/gen/data/sap.capire.bookshop-Genres.hdbtabledata\n   gen/db/src/gen/localized.AdminService.Authors.hdbview\n   gen/db/src/gen/localized.AdminService.Books.hdbview\n   gen/db/src/gen/localized.AdminService.Currencies.hdbview\n   gen/db/src/gen/localized.AdminService.Genres.hdbview\n   gen/db/src/gen/localized.CatalogService.Books.hdbview\n   gen/db/src/gen/localized.CatalogService.Currencies.hdbview\n   gen/db/src/gen/localized.CatalogService.Genres.hdbview\n   gen/db/src/gen/localized.CatalogService.ListOfBooks.hdbview\n   gen/db/src/gen/localized.sap.capire.bookshop.Authors.hdbview\n   gen/db/src/gen/localized.sap.capire.bookshop.Books.hdbview\n   gen/db/src/gen/localized.sap.capire.bookshop.Genres.hdbview\n   gen/db/src/gen/localized.sap.common.Currencies.hdbview\n   gen/db/src/gen/sap.capire.bookshop.Authors.hdbtable\n   gen/db/src/gen/sap.capire.bookshop.Books.hdbtable\n   gen/db/src/gen/sap.capire.bookshop.Books_author.hdbconstraint\n   gen/db/src/gen/sap.capire.bookshop.Books_currency.hdbconstraint\n   gen/db/src/gen/sap.capire.bookshop.Books_foo.hdbconstraint\n   gen/db/src/gen/sap.capire.bookshop.Books_genre.hdbconstraint\n   gen/db/src/gen/sap.capire.bookshop.Books_texts.hdbtable\n   gen/db/src/gen/sap.capire.bookshop.Genres.hdbtable\n   gen/db/src/gen/sap.capire.bookshop.Genres_parent.hdbconstraint\n   gen/db/src/gen/sap.capire.bookshop.Genres_texts.hdbtable\n   gen/db/src/gen/sap.common.Currencies.hdbtable\n   gen/db/src/gen/sap.common.Currencies_texts.hdbtable\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Profiles in package.json\nDESCRIPTION: Demonstrates how to set up different configurations for development and production environments using profile names in the package.json file.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n        \"[development]\": { \"kind\": \"sqlite\" },\n        \"[production]\": { \"kind\": \"hana\" }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Event Mesh in package.json\nDESCRIPTION: JSON configuration in package.json to use SAP Event Mesh with CAP. It specifies the messaging kind as 'enterprise-messaging' for the production profile.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-mesh.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"[production]\": { \"kind\": \"enterprise-messaging\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Audit Logging in JavaScript\nDESCRIPTION: Demonstrates usage of logSync method for immediate audit logging without using the transactional outbox.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait audit.logSync('SomeOtherEvent', {\n  some_other_details: 'whatever else'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing cds.test Library for CAP Testing\nDESCRIPTION: Command to install the cds.test library as a development dependency for testing CAP Node.js applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm add -D @cap-js/cds-test\n```\n\n----------------------------------------\n\nTITLE: Common Code List Definitions\nDESCRIPTION: Defines the base CodeList aspect and entities for Countries, Currencies, Languages and Timezones.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\naspect sap.common.CodeList {\n  name  : localized String(111);\n  descr : localized String(1111);\n}\n```\n\nLANGUAGE: cds\nCODE:\n```\nentity sap.common.Countries : CodeList {\n  key code : String(3); //> ISO 3166-1 alpha-2 codes (or alpha-3)\n}\n```\n\nLANGUAGE: cds\nCODE:\n```\nentity sap.common.Currencies : CodeList {\n  key code  : String(3); //> ISO 4217 alpha-3 codes\n  symbol    : String(5); //> for example, $, €, £, ₪, ...\n  minorUnit : Int16;     //> for example, 0 or 2\n}\n```\n\nLANGUAGE: cds\nCODE:\n```\nentity sap.common.Languages : CodeList {\n  key code : sap.common.Locale; //> for example, en_GB\n}\n```\n\nLANGUAGE: cds\nCODE:\n```\nentity sap.common.Timezones : CodeList {\n  key code : String(100); //> for example, Europe/Berlin\n}\n```\n\n----------------------------------------\n\nTITLE: Separating Temporal Details in CDS\nDESCRIPTION: This snippet demonstrates how to separate temporal elements from non-temporal ones in an entity. It creates a non-temporal head entity WorkAssignments and a temporal details entity WorkDetails.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nentity WorkAssignments {          // non-temporal head entity\n  key ID  : UUID;\n  empl    : Association to Employees;\n  details : Composition of WorkDetails on details.ID = $self.ID;\n}\nentity WorkDetails : temporal {   // temporal details entity\n  key ID  : UUID;                 // logical record ID\n  role    : String(111);\n  dept    : Association to Departments;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Outboxing in package.json\nDESCRIPTION: JSON configuration to make a service outboxed by default. This approach allows for declarative configuration without code changes, enabling the outbox pattern for the specified service.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"yourService\": {\n      \"kind\": \"odata\",\n      \"outbox\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring custom queue names\nDESCRIPTION: Optional JSON configuration to specify custom queue names when using SAP Event Mesh with CAP.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-mesh.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"queue\": { \"name\": \"$namespace/my/own/queue\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing cds-typer via CLI in JavaScript\nDESCRIPTION: Demonstrates how to use cds-typer on the command line to generate types for a CAP project, specifying the input CDS file and output directory.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpx @cap-js/cds-typer /home/mybookshop/db/schema.cds --outputDirectory /home/mybookshop\n```\n\n----------------------------------------\n\nTITLE: Analyzing a CQN Statement Reference in Java\nDESCRIPTION: Analyzes a CQN statement reference using the CqnAnalyzer to extract information about the entities and filter values.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCqnStatement cqn = context.getCqn();\n\nAnalysisResult result = cqnAnalyzer.analyze(cqn.ref());\n```\n\n----------------------------------------\n\nTITLE: Creating a Service with Transformation Support in CDS\nDESCRIPTION: This code defines a service that exposes a projection of the Employee entity with transformation support. The @odata.apply.transformations annotation instructs the Java Runtime to push down the transformation pipeline to the persistence layer.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_33\n\nLANGUAGE: cds\nCODE:\n```\n@odata.apply.transformations\nservice HRService {\n    entity HREmployee as projection on Employee;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Extensibility in CAP Project (Shell)\nDESCRIPTION: Command to add extensibility support to a CAP project using the cds CLI.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncds add extensibility\n```\n\n----------------------------------------\n\nTITLE: Creating User Instances with cds.User Constructor\nDESCRIPTION: Examples of different ways to create user instances using the cds.User constructor with various input types including user ID string, existing user instance, or user-like object.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\n// with user ID as string\nconst user = new cds.User('userId')\n// a user instance\nconst anotherUser = new cds.User(user)\n// a user instance like object\nconst yetAnotherUser = new cds.User({id: user.id, roles: user.roles, attr: user.attr})\n```\n\n----------------------------------------\n\nTITLE: Overriding Authorization Error Messages in CAP Java\nDESCRIPTION: This snippet demonstrates how to create a custom error handler that overrides the standard message text for authorization errors. It replaces the first message in the response with a custom text for exceptions with the error code CdsErrorStatuses.EVENT_FORBIDDEN.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(ApplicationLifecycleService.DEFAULT_NAME)\npublic class SimpleExceptionHandler implements EventHandler {\n\n  @After\n  public void overrideMissingAuthMessage(ErrorResponseEventContext context) {\n    if (context.getException().getErrorStatus().equals(CdsErrorStatuses.EVENT_FORBIDDEN)) {\n        context.getResult().getMessages().set(0,\n            Message.create(Message.Severity.ERROR,\n            \"You cannot execute this action\"));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Insert Operation with HashMap in CAP Java\nDESCRIPTION: Creates a single insert statement using a HashMap to provide the data. The example inserts a new book with ID and title into the bookshop.Books entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> book = new HashMap<>();\nbook.put(\"ID\", 101);\nbook.put(\"title\", \"Capire\");\n\nCqnInsert insert = Insert.into(\"bookshop.Books\").entry(book);\n```\n\n----------------------------------------\n\nTITLE: Maven-based Reuse Package Structure\nDESCRIPTION: Illustrates the recommended folder structure for a Maven-based CAP reuse package, ensuring proper inclusion of CDS, CSV, and i18n files in the JAR.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_26\n\nLANGUAGE: txt\nCODE:\n```\nsrc/main/resources/cds/\n  com.sap.capire/bookshop/\n    index.cds\n    CatalogService.cds\n    data/\n      com.sap.capire.bookshop-Books.csv\n    i18n/\n      i18n.properties\n```\n\n----------------------------------------\n\nTITLE: Creating Parameterized HANA View\nDESCRIPTION: Example of creating a HANA view with input parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nVIEW DATA_MODEL_BOOKSHOP_BOOKINFO (in AUTHOR nvarchar(100)) AS SELECT\n  ID,\n  'The book: ' || THE_TITLE || ' and the author ' || :AUTHOR AS BOOK_AUTHOR_INFO\nFROM DATA_MODEL_BOOKSHOP_BOOKS;\n```\n\n----------------------------------------\n\nTITLE: Configuring MTX with Profiles\nDESCRIPTION: Advanced configuration showing how to enable MTX features conditionally using profiles for local development and production\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"[local-multitenancy]\": {\n         \"multitenancy\": true,\n         \"extensibility\": true,\n         \"toggles\": true\n      },\n      \"[production]\": {\n         \"multitenancy\": true,\n         \"extensibility\": true,\n         \"toggles\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting AuditLogService in Spring Boot\nDESCRIPTION: Shows how to inject the AuditLogService instance in a Spring Boot application using dependency injection.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/auditlog.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport com.sap.cds.services.auditlog.AuditLogService;\n\n@Autowired\nprivate AuditLogService auditLogService;\n```\n\n----------------------------------------\n\nTITLE: Extending UI Annotations in CAP\nDESCRIPTION: CDS code snippet demonstrating how to add UI annotations for new entities in a CAP application, including header info, line items, and facets.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_21\n\nLANGUAGE: cds\nCODE:\n```\nusing { OrdersService } from '@capire/fiori';\n\n// new entity -- draft enabled\nannotate OrdersService.x_Customers with @odata.draft.enabled;\n\n// new entity -- titles\nannotate OrdersService.x_Customers with {\n  ID           @(\n    UI.Hidden,\n    Common : {Text : email}\n  );\n  firstName    @title : 'First Name';\n  lastName     @title : 'Last Name';\n  email        @title : 'Email';\n  creditCardNo @title : 'Credit Card No';\n  dateOfBirth  @title : 'Date of Birth';\n  status       @title : 'Status';\n  creditScore  @title : 'Credit Score';\n}\n\n// new entity -- titles\nannotate OrdersService.x_CustomerPostalAddresses with {\n  ID          @(\n    UI.Hidden,\n    Common : {Text : description}\n  );\n  description @title : 'Description';\n  street      @title : 'Street';\n  town        @title : 'Town';\n  country     @title : 'Country';\n}\n\n// new entity -- titles\nannotate x_SalesRegion : regionCode with @(\n  title : 'Region Code',\n  Common: { Text: name, TextArrangement: #TextOnly }\n);\n\n\n// new entity in service -- UI\nannotate OrdersService.x_Customers with @(UI : {\n  HeaderInfo       : {\n    TypeName       : 'Customer',\n    TypeNamePlural : 'Customers',\n    Title          : { Value : email}\n  },\n  LineItem         : [\n    {Value : firstName},\n    {Value : lastName},\n    {Value : email},\n    {Value : status},\n    {Value : creditScore}\n  ],\n  Facets           : [\n  {$Type: 'UI.ReferenceFacet', Label: 'Main', Target : '@UI.FieldGroup#Main'},\n  {$Type: 'UI.ReferenceFacet', Label: 'Customer Postal Addresses', Target: 'PostalAddresses/@UI.LineItem'}\n],\n  FieldGroup #Main : {Data : [\n    {Value : firstName},\n    {Value : lastName},\n    {Value : email},\n    {Value : status},\n    {Value : creditScore}\n  ]}\n});\n\n// new entity -- UI\nannotate OrdersService.x_CustomerPostalAddresses with @(UI : {\n  HeaderInfo       : {\n    TypeName       : 'CustomerPostalAddress',\n    TypeNamePlural : 'CustomerPostalAddresses',\n    Title          : { Value : description }\n  },\n  LineItem         : [\n    {Value : description},\n    {Value : street},\n    {Value : town},\n    {Value : country_code}\n  ],\n  Facets           : [\n    {$Type: 'UI.ReferenceFacet', Label: 'Main', Target : '@UI.FieldGroup#Main'}\n  ],\n  FieldGroup #Main : {Data : [\n    {Value : description},\n    {Value : street},\n    {Value : town},\n    {Value : country_code}\n  ]}\n}) {};\n\n// new entity -- UI\nannotate OrdersService.x_SalesRegion with @(\n  UI: {\n    HeaderInfo: {\n      TypeName       : 'Sales Region',\n      TypeNamePlural : 'Sales Regions',\n      Title          : { Value : regionCode }\n    },\n    LineItem: [\n      {Value: regionCode},\n      {Value: name},\n      {Value: descr}\n    ],\n    Facets: [\n      {$Type: 'UI.ReferenceFacet', Label: 'Main', Target: '@UI.FieldGroup#Main'}\n    ],\n    FieldGroup#Main: {\n      Data: [\n        {Value: regionCode},\n        {Value: name},\n        {Value: descr}\n      ]\n    }\n  }\n) {};\n\n// new entity -- UI\nannotate OrdersService.x_Remarks with @(\n  UI: {\n    HeaderInfo: {\n      TypeName       : 'Remark',\n      TypeNamePlural : 'Remarks',\n      Title          : { Value : number }\n    },\n    LineItem: [\n      {Value: number},\n      {Value: remarksLine}\n    ],\n    Facets: [\n      {$Type: 'UI.ReferenceFacet', Label: 'Main', Target: '@UI.FieldGroup#Main'}\n    ],\n    FieldGroup#Main: {\n      Data: [\n          {Value: number},\n          {Value: remarksLine}\n      ]\n    }\n  }\n) {};\n```\n\n----------------------------------------\n\nTITLE: Executing Delete with Indexed Parameters in Java\nDESCRIPTION: Demonstrates how to execute a parameterized CQL delete statement using indexed parameters. The example creates a delete statement with two indexed parameters and provides their values as method arguments.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.param;\n\nCqnDelete delete = Delete.from(\"bookshop.Books\")\n    .where(b -> b.get(\"ID\").in(param(0), param(1)));\n\nResult result = service.run(delete, 101, 102);\n```\n\n----------------------------------------\n\nTITLE: Specifying Association Cardinality in CAP JS\nDESCRIPTION: Shows how to explicitly specify cardinality for associations using the 'cardinality' property.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'Authors': { kind:\"entity\", elements:{\n    'books': { type:\"cds.Association\", target:\"Books\", cardinality:{max:\"*\"} },\n  }},\n}})\n```\n\n----------------------------------------\n\nTITLE: Configuring CAP Java Cloud Foundry Application with Starter Bundles\nDESCRIPTION: Example of configuring a CAP Java application for Cloud Foundry using starter bundles, including Spring Boot and OData V4 support.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/building.md#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t<artifactId>cds-starter-spring-boot</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t<artifactId>cds-adapter-odata-v4</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t<artifactId>cds-starter-cloudfoundry</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Inserting Items into a Nested Structure Using Path Expression\nDESCRIPTION: Demonstrates how to use a path expression to add an item to an existing order. The example inserts a book item into the items collection of an order matching the ID 1001.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.ORDERS;\n\nInsert.into(ORDERS, o -> o.matching(Map.of(\"ID\", 1001))).items())\n\t.entry(Map.of(\"book\", Map.of(\"ID\", 251), \"amount\", 1));\n```\n\n----------------------------------------\n\nTITLE: Parsing CDL Source Strings\nDESCRIPTION: Examples of parsing CDL source strings using both function call and tagged template string syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet csn = cds.parse.cdl (`entity Foo{}`)\nlet csn = cds.parse.cdl `entity Foo{}`\nlet csn = cds.parse `entity Foo{}`  //> shortcut to the above\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Middleware in Bootstrap Event Handler\nDESCRIPTION: Example of using the bootstrap event to add custom middleware to the Express app before any CAP middleware is added, specifically serving static resources from a custom directory.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-server.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nconst express = require('express')\ncds.on('bootstrap', app => {\n  // add your own middleware before any by cds are added\n  // for example, serve static resources incl. index.html\n  app.use(express.static(__dirname+'/srv/public'))\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot Maven Plugin for Native Build\nDESCRIPTION: Maven profile configuration for native build settings, including Spring Boot plugin configuration with cloud profile and environment path settings for the native build process.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/optimizing.md#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<profile>\n    <id>native</id>\n    <build>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-maven-plugin</artifactId>\n                    <executions>\n                        <execution>\n                            <id>process-aot</id>\n                            <configuration>\n                                <profiles>cloud</profiles>\n                                <jvmArguments>-Dcds.environment.local.defaultEnvPath=../native-build-env.json</jvmArguments>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n</profile>\n```\n\n----------------------------------------\n\nTITLE: Creating a CQL Select Statement from a Reference (Java)\nDESCRIPTION: Shows how to create a CQL select statement from a reference using the Query Builder API in static usage style. This example selects from the items of order 23.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.ORDERS;\n\nSelect.from(ORDERS, o -> o.filter(o.ID().eq(23)).items());\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Views with @cds.persistence.skip Annotation\nDESCRIPTION: Shows how to create a runtime view in the CDS model by using the @cds.persistence.skip annotation, which prevents the generation of static database views during deployment. The example creates a projection of books with low stock.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_18\n\nLANGUAGE: cds\nCODE:\n```\nentity Books {\n  key id     : UUID;\n      title  : String;\n      stock  : Integer;\n      author : Association to one Authors;\n}\n@cds.persistence.skip // [!code focus]\nentity BooksWithLowStock as projection on Books { // [!code focus]\n    id, title, author.name as author // [!code focus]\n} where stock < 10; // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Basic Result Iteration in CAP Java\nDESCRIPTION: Shows how to iterate through query results using the Result interface, which is an iterable of Row objects. The example demonstrates a simple for-loop iteration pattern.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nResult result = ...\n\nfor (Row row : result) {\n  System.out.println(row.get(\"title\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Constant Literal Values in CQL Select Statement (Java)\nDESCRIPTION: Shows how to use CQL.constant() to create constant literal values in a select statement. This method is used for values that don't change at runtime and don't depend on external input.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.constant;\n\nSelect.from(BOOKS).columns(b -> b.title())\n\t.where(b -> b.cover().eq(constant(\"paperback\")));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Indicator\nDESCRIPTION: Java implementation of a custom health indicator for monitoring a crypto service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n@Component(\"crypto\")\n@ConditionalOnEnabledHealthIndicator(\"crypto\")\npublic class CryptoHealthIndicator implements HealthIndicator {\n\n    @Autowired\n    CryptoService cryptoService;\n\n    @Override\n    public Health health() {\n        Health.Builder status = cryptoService.isAvailalbe() ?\n              Health.up() : Health.down();\n        return status.build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ChangeSetListener for Transaction Events in Java\nDESCRIPTION: This snippet demonstrates how to register a ChangeSetListener to react to events before and after a ChangeSet is closed in CAP Java SDK. It allows executing code before transaction commit and after commit or rollback.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/changeset-contexts.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nChangeSetContext changeSet = context.getChangeSetContext();\nchangeSet.register(new ChangeSetListener() {\n\n    @Override\n    public void beforeClose() {\n        // do something before changeset is closed\n    }\n\n    @Override\n    public void afterClose(boolean completed) {\n        // do something after changeset is closed\n    }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using CDS Linked Classes in JavaScript\nDESCRIPTION: Demonstrates how to use CDS linked classes to work with entities and associations.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nlet m = cds.linked`\n   entity Books { author: Association to Authors; }\n   entity Authors { key ID: UUID; }\n`)\nlet { Books, Authors } = m.entities\nlet isEntity = Books instanceof cds.entity\nlet keys = Books.keys\nlet { author } = Books.elements\nif (author.is2many) ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Outboxed Service with Options in JavaScript\nDESCRIPTION: Example showing how to create an outboxed service with configuration options, specifically setting the kind to persistent-outbox. This is useful when you need to customize the outbox behavior.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst outboxed = cds.outboxed(srv, { kind: 'persistent-outbox' })\n```\n\n----------------------------------------\n\nTITLE: Generated Service Interface with Action Methods\nDESCRIPTION: Example of a Java service interface automatically generated by the CAP Java SDK Maven Plugin providing type-safe methods for invoking custom actions and functions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@CdsName(CatalogService_.CDS_NAME)\npublic interface CatalogService extends CqnService {\n\n  @CdsName(ReviewContext.CDS_NAME)\n  Reviews review(Books_ ref, @CdsName(ReviewContext.STARS) Integer stars);\n\n  interface Application extends ApplicationService, CatalogService {\n  }\n\n  interface Remote extends RemoteService, CatalogService {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Forwarding in YAML Application Configuration\nDESCRIPTION: Example of setting up token forwarding authentication for a destination in the application.yaml configuration file. This allows declarative configuration rather than programmatic setup.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    order-service:\n      type: \"odata-v4\"\n      destination:\n        properties:\n          url: \"<set via env var in deployment>\"\n          authentication: TokenForwarding\n```\n\n----------------------------------------\n\nTITLE: Generating SAP HANA Artifacts\nDESCRIPTION: Example of generating HANA artifacts (hdbtable/hdbview) from a CDS model using a generator function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst all = cds.compile.to.hana(csn);\nfor (const [content, { file }] of all) {\n  console.log(file, content);\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic MTX Service Consumption\nDESCRIPTION: Demonstrates how to consume MTX services programmatically using CDS Service APIs in a REPL environment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait cds.test()\nvar { 'cds.xt.ModelProviderService': mps } = cds.services\nvar { 'cds.xt.DeploymentService': ds } = cds.services\nvar db = await ds.subscribe ('t1')\nvar csn = await mps.getCsn('t1')\ncds.context = { tenant:'t1' }\nawait db.run('SELECT type, name from sqlite_master')\n```\n\n----------------------------------------\n\nTITLE: Equivalent Manual Transaction Management in CAP JS\nDESCRIPTION: Shows the explicit try/catch transaction management equivalent to the function-based approach, with manual commit and rollback handling.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = db.tx()\ntry {\n  await tx.run (SELECT.from(Foo))\n  await tx.create (Foo, {...})\n  await tx.read (Foo)\n  await tx.commit()\n} catch(e) {\n  await tx.rollback(e)\n}\n```\n\n----------------------------------------\n\nTITLE: Log Output for Separate Bookstore Service\nDESCRIPTION: This log output shows the startup of the separate bookstore service, including the connection to file-based messaging and the remote ReviewsService. It demonstrates how services can be connected across separate processes.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_12\n\nLANGUAGE: log\nCODE:\n```\n[cds] - connect to messaging > file-based-messaging { file: '~/.cds-msg-box' }\n[cds] - mocking OrdersService { path: '/orders', impl: '../orders/srv/orders-service.js' }\n[cds] - serving CatalogService { path: '/browse', impl: '../reviews/srv/cat-service.js' }\n[cds] - serving AdminService { path: '/admin', impl: '../reviews/srv/admin-service.js' }\n[cds] - connect to ReviewsService > odata { url: 'http://localhost:4005/reviews' }\n\n[cds] - server listening on { url: 'http://localhost:4004' }\n[cds] - launched at 5/25/2023, 4:55:46 PM, version: 7.0.0, in: 1.053s\n```\n\n----------------------------------------\n\nTITLE: Constructing Query Results with ResultBuilder in Java\nDESCRIPTION: Demonstrates how to create a Result object for READ operations using the ResultBuilder's selectedRows method. The example shows creating a simple row map with data and setting it as the result in a CdsReadEventContext.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport static java.util.Arrays.asList;\nimport static com.sap.cds.ResultBuilder.selectedRows;\n\nMap<String, Object> row = new HashMap<>();\nrow.put(\"title\", \"Capire\");\nResult res = selectedRows(asList(row)).result();\ncontext.setResult(res);   // CdsReadEventContext\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Bindings in JavaScript\nDESCRIPTION: Shows how to access service bindings from cds.env.requires in JavaScript code.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nconst { ReviewsService } = cds.env.requires\n//> ReviewsService.credentials = {\n//>  url: \"http://localhost:4005/reviews\"\n//> }\n```\n\n----------------------------------------\n\nTITLE: Looking Up Named Services\nDESCRIPTION: Shows how to look up specific services by name using the ServiceCatalog, including accessing application services and default services.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/services.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nApplicationService adminService = catalog.getService(ApplicationService.class, \"AdminService\");\n```\n\n----------------------------------------\n\nTITLE: Adding AMQP dependency for SAP Event Mesh (Shared)\nDESCRIPTION: Shell command to add the AMQP dependency required for using SAP Event Mesh (Shared) in the reviews and bookstore samples.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-mesh.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @sap/xb-msg-amqp-v100\n```\n\n----------------------------------------\n\nTITLE: Overriding Annotations in CDS\nDESCRIPTION: Overrides the `@title` annotation for the `Customers` entity from a SaaS application, changing the UI label to 'Patients'. This allows customization of existing annotations to tailor the application to specific needs.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_12\n\nLANGUAGE: cds\nCODE:\n```\n```cds\nusing { Customers } from 'some-saas-application';\nannotate Customers with @title:'Patients'; // e.g. for health care\n```\n```\n\n----------------------------------------\n\nTITLE: Using Entity References from Query Results\nDESCRIPTION: Demonstrates how to obtain and use entity references from query result rows. The example shows getting a typed reference to an entity and accessing its data and relationships.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_28\n\nLANGUAGE: java\nCODE:\n```\n// SELECT from Author[101]\nCqnSelect query = Select.from(AUTHOR).byId(101);\nAuthor authorData = service.run(query).single(Author.class);\n\nString authorName = authorData.getName();    // data access\nAuthor_ author    = authorData.ref();        // typed reference to Author[101]\n```\n\n----------------------------------------\n\nTITLE: Querying Temporal Data with Expansion in CDS\nDESCRIPTION: This CDS query demonstrates how to retrieve employee data with job history since 2016, including expanded information on departments.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nGET Employees?sap-valid-from=date'2016-01-01'\n$expand=jobs(\n  $select=validFrom,role&$expand=dept(\n    $select=validFrom,name\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Cloud Application Event Hub in package.json\nDESCRIPTION: JSON configuration in package.json to use SAP Cloud Application Event Hub for messaging in production environments.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-broker.md#2025-04-18_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      // kind \"event-broker\" is derived from the service's technical name\n      \"[production]\": { \"kind\": \"event-broker\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CDS Entity Annotation for Delta Updates\nDESCRIPTION: Shows the required CDS annotation to enable delta updates for an entity in the OData service.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\n@Capabilities.UpdateRestrictions.DeltaUpdateSupported\n```\n\n----------------------------------------\n\nTITLE: Basic cds bind Usage with Cloud Service\nDESCRIPTION: Examples of using cds bind with cloud service instances, including specifying a different key and using a different profile.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncds bind -2 bookshop-db\ncds bind -2 bookshop-db:my-db-key\ncds bind --to bookshop-db --for test\ncds watch --profile test\n```\n\n----------------------------------------\n\nTITLE: Defining a Flat Entity Structure for Contacts\nDESCRIPTION: Shows a recommended approach for defining a flat entity structure for Contacts, which is easier to understand and consume.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nentity Contacts {\n  isCompany : Boolean;\n  company   : String;\n  title     : String;\n  firstname : String;\n  lastname  : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Request Templates for Remote Applications\nDESCRIPTION: Command for generating HTTP request templates configured for a specific CF application with JWT token authentication.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncds add http --for-app bookshop\n```\n\n----------------------------------------\n\nTITLE: Remote Service Configuration in application.yaml for Java\nDESCRIPTION: Configuration of remote services in Spring Boot's application.yaml file for Java implementations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  config.activate.on-profile: cloud\ncds:\n  remote.services:\n    API_BUSINESS_PARTNER:\n      type: \"odata-v2\"\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for Reuse Package\nDESCRIPTION: XML snippet showing how to add a dependency for a reuse package in a Maven pom.xml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.sap.capire</groupId>\n  <artifactId>bookshop</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using cds.unboxed to Get Original Service in JavaScript\nDESCRIPTION: Code showing how to retrieve the original service from an outboxed service using cds.unboxed(). This is particularly useful when working with services that are outboxed by default configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst unboxed = cds.unboxed(srv)\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Boot Devtools Dependency to Maven POM\nDESCRIPTION: This XML snippet shows how to add the Spring Boot Devtools dependency to the pom.xml file of your CAP Java service module. This dependency enables automatic application context reload without manual restarts when changes are detected.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/running.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-devtools</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running cds-typer in CI Pipeline for JavaScript\nDESCRIPTION: Demonstrates how to integrate cds-typer into a CI pipeline to generate types for all CDS models in a project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnpx @cap-js/cds-typer \"*\" --outputDirectory @cds-models\n```\n\n----------------------------------------\n\nTITLE: Adding Remote OData Services Maven Dependency\nDESCRIPTION: Maven dependency configuration required to enable Remote Services for OData V2/V4 APIs in a CAP Java application.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-remote-odata</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Price Converter Implementation\nDESCRIPTION: Example of a converter that formats price element values.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nprocessor.addConverter(\n   (path, element, type)  -> element.getName().equals(\"price\"), // filter\n   (path, element, value) -> formatter.format(value));       // converter\n```\n\n----------------------------------------\n\nTITLE: Configuring MTX Features in package.json\nDESCRIPTION: JSON configuration to enable multitenancy, extensibility and feature toggles in a CAP project\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"multitenancy\": true,\n      \"extensibility\": true,\n      \"toggles\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Select List Items in CQL Statements\nDESCRIPTION: Demonstrates how to add or modify columns in the select list of a query using the Modifier.items method.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_102\n\nLANGUAGE: java\nCODE:\n```\n// query: SELECT from Books where title = 'Capire'\n// copy:  SELECT from Books {title, author {name}} where title = 'Capire'\n\nCqnSelect copy = CQL.copy(query, new Modifier() {\n   @Override\n   public List<CqnSelectListItem> items(List<CqnSelectListItem> items) {\n      items.add(CQL.get(\"title\"));                // add title\n      items.add(CQL.to(\"author\").expand(\"name\")); // expand author name\n      return items;\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Using IN Predicate with List in CDS Query Builder\nDESCRIPTION: Example of using the 'in' predicate to filter books written by authors with names provided as a List collection.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_67\n\nLANGUAGE: java\nCODE:\n```\nList<String> authorNames = List.of(\"Poe\", \"Hemingway\");\n\nSelect.from(BOOKS)\n  .where(b -> b.author().name().in(authorNames));\n```\n\n----------------------------------------\n\nTITLE: Alternative Update Methods in CAP Java\nDESCRIPTION: This snippet shows alternative ways to update entities, including using byId for single key elements and matching for compound keys. It also demonstrates using path expressions for specifying the update target.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nUpdate.entity(BOOKS)\n   .data(\"title\", \"CAP Matters\").byId(100);\n```\n\nLANGUAGE: java\nCODE:\n```\nUpdate.entity(BOOKS, b -> b.matching(Books.create(100)))\n   .data(\"title\", \"CAP Matters\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Logback for Cloud and Local Profiles\nDESCRIPTION: XML configuration for Logback that uses different logging formats based on the active Spring profile. The 'cloud' profile uses cf-java-logging-support, while other profiles use the standard Logback output format.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE xml>\n<configuration debug=\"false\" scan=\"false\">\n\t<springProfile name=\"cloud\">\n\t\t<!-- logback configuration of ConsoleAppender according\n\t\t     to cf-java-logging-support documentation -->\n\t\t...\n\t</springProfile>\n\t<springProfile name=\"!cloud\">\n\t\t<include resource=\"org/springframework/boot/logging/logback/base.xml\"/>\n\t</springProfile>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Toggles for Internal Service Calls with Java\nDESCRIPTION: Example of setting feature toggles for requests in a new thread without an active request context. The code defines a feature toggle 'isbn' and executes a database query with this feature enabled in a separate thread.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nCdsRuntime runtime;\n\n@Autowired\nPersistenceService db;\n\nFeatureTogglesInfo isbn = FeatureTogglesInfo.create(Collections.singletonMap(\"isbn\", true));\n\n...\n\nFuture<Result> result = Executors.newSingleThreadExecutor().submit(() -> {\n  return runtime.requestContext().featureToggles(isbn).run(rc -> {\n    return db.run(Select.from(Books_.CDS_NAME));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Search with Single Term in Java Query Builder\nDESCRIPTION: Shows how to search for entities containing a specific term using the search method of the Select builder.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n// Book record - (ID, title, name) VALUES (1, \"The greatest works of James Allen\", \"Unwin\")\n\nSelect.from(\"bookshop.Books\")\n        .columns(\"id\", \"name\")\n        .search(\"Allen\");\n```\n\n----------------------------------------\n\nTITLE: Creating Programmatic Destinations with Token Forwarding\nDESCRIPTION: Creates a destination that forwards the security token from the current context to the external API. This allows calling the API with the current user's permissions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nDefaultHttpDestination\n  .builder(\"https://example.org\")\n\t.authenticationType(AuthenticationType.TOKEN_FORWARDING)\n\t.name(\"my-destination\").build();\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction Management with cds.tx()\nDESCRIPTION: Example of manually managing transactions to ensure multiple queries run in a single transaction\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncds.tx (async ()=>{\n  const [ Emily ] = await db.insert (Authors, {name:'Emily Brontë'})\n  await db.insert (Books, { title: 'Wuthering Heights', author: Emily })\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Model-Only Changes\nDESCRIPTION: This snippet shows how to run `cds deploy` with the `--model-only` flag to prepare the database schema for evolution without affecting existing data. It creates or updates the `cds_model` table based on the current model.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncds deploy --model-only\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Event Context Interface for Custom Action\nDESCRIPTION: Example of a Java interface automatically generated by the cds-maven-plugin for a custom action, providing type-safe access to parameters and return values.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@EventName(\"review\")\npublic interface ReviewEventContext extends EventContext {\n\n    // CqnSelect that points to the entity the action was called on\n    CqnSelect getCqn();\n    void setCqn(CqnSelect select);\n\n    // The 'stars' input parameter\n    Integer getStars();\n    void setStars(Integer stars);\n\n    // The return value\n    void setResult(Reviews review);\n    Reviews getResult();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Middlewares\nDESCRIPTION: Example of how to configure custom middlewares by extending or overriding the default middleware list.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncds.middlewares = {\n  auth,\n  context,\n  ctx_model,\n  errors,\n  trace,\n  before = [\n    context(),\n    trace(),\n    auth(),\n    ctx_model()\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Dual DataSource Configuration\nDESCRIPTION: Java configuration class for setting up both tenant-dependent and tenant-independent datasources with transaction management.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DataSourceConfig {\n\n    @Bean\n    @Primary\n    @ConfigurationProperties(\"app.datasource.tenant-dependent\")\n    public DataSourceProperties tenantDependentDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    @Bean\n    @Primary\n    public DataSource tenantDependentDataSource() {\n        return tenantDependentDataSourceProperties()\n            .initializeDataSourceBuilder()\n            .build();\n    }\n\n    @Bean\n    @Primary\n    public DataSourceTransactionManager tenantDependentTransactionManager() {\n        return new DataSourceTransactionManager(tenantDependentDataSource());\n    }\n\n    @Bean\n    @ConfigurationProperties(\"app.datasource.tenant-independent\")\n    public DataSourceProperties tenantIndependentDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    @Bean\n    public DataSource tenantIndependentDataSource() {\n        return tenantIndependentDataSourceProperties()\n            .initializeDataSourceBuilder()\n            .build();\n    }\n\n    @Bean\n    public DataSourceInitializer tenantIndependentInitializer() {\n        ResourceDatabasePopulator resourceDatabasePopulator = new ResourceDatabasePopulator();\n        resourceDatabasePopulator.addScript(new ClassPathResource(\"schema.sql\"));\n\n        DataSourceInitializer dataSourceInitializer = new DataSourceInitializer();\n        dataSourceInitializer.setDataSource(tenantIndependentDataSource());\n        dataSourceInitializer.setDatabasePopulator(resourceDatabasePopulator);\n        return dataSourceInitializer;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Node.js CAP Server with Multitenancy\nDESCRIPTION: Command to start a CAP application server with local multitenancy profile enabled. Uses persistent SQLite database instead of in-memory storage.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncds watch --profile local-multitenancy\n```\n\n----------------------------------------\n\nTITLE: Creating Git Ignore File for CAP Monorepo\nDESCRIPTION: Creates a .gitignore file to exclude node_modules and generated files from version control in the CAP monorepo.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nnode_modules\ngen\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with Java in CAP\nDESCRIPTION: This Java code shows how to inject a remote service and execute queries using CAP's querying API in Java. It demonstrates a simple query with a limit.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\n@Qualifier(ApiBusinessPartner_.CDS_NAME)\nCqnService bupa;\n\nCqnSelect select = Select.from(ABusinessPartner_.class).limit(100);\nList<ABusinessPartner> businessPartner = bupa.run(select).listOf(ABusinessPartner.class);\n```\n\n----------------------------------------\n\nTITLE: Persistent Outbox Message Entity Definition in CDS\nDESCRIPTION: CDS model definition for the cds.outbox.Messages entity that stores outboxed messages. This entity serves as the database representation of the outbox, including fields for tracking message states and retry attempts.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\nnamespace cds.outbox;\n\nentity Messages {\n  key ID                   : UUID;\n      timestamp            : Timestamp;\n      target               : String;\n      msg                  : LargeString;\n      attempts             : Integer default 0;\n      partition            : Integer default 0;\n      lastError            : LargeString;\n      lastAttemptTimestamp : Timestamp @cds.on.update: $now;\n}\n```\n\n----------------------------------------\n\nTITLE: Time-Travel Query Result in JSON\nDESCRIPTION: This snippet demonstrates the JSON result of a time-travel query on the Employees entity, showing data as it was on January 1, 2017. It includes expanded WorkAssignments and Departments.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n    { \"ID\": \"E1\", \"name\": \"Alice\", \"jobs\": [\n      { \"role\": \"Developer\", \"dept\": {\"name\": \"Core Development\"}},\n      { \"role\": \"Consultant\", \"dept\": {\"name\": \"App Development\"}}\n    ]}, ...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Currency and Units in CDS\nDESCRIPTION: Shows how to define properties for monetary amounts and units of measure using semantic annotations in CDS.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_37\n\nLANGUAGE: cds\nCODE:\n```\n@Aggregation.CustomAggregate#amount   : 'Edm.Decimal'\n@Aggregation.CustomAggregate#currency : 'Edm.String'\nentity Sales {\n  key id        : GUID;\n      productId : GUID;\n      @Semantics.amount.currencyCode: 'currency'\n      @Aggregation.default: #SUM\n      amount    : Decimal(10,2);\n      @Semantics.currencyCode\n      currency  : String(3);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Middleware Implementation\nDESCRIPTION: Shows how to implement a simple custom authentication middleware with context setting\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.use ((req, res, next) => {\n  const { 'x-tenant':tenant, 'x-user-id':user } = req.headers\n  cds.context = { tenant, user } // Setting cds.context\n  next()\n})\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive matchesPattern Predicate in CAP Java CQL Query\nDESCRIPTION: Illustrates how to use matchesPattern predicate with options to perform case-insensitive matching on book titles.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_81\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Books\").where(t -> t.get(\"title\").matchesPattern(CQL.val(\"^CAP.+$\"), CQL.val(\"i\")));\n```\n\n----------------------------------------\n\nTITLE: Extension API Response Format\nDESCRIPTION: JSON response from the Extensions API showing the created extension with its ID, compiled CSN, i18n data, and timestamp of activation.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ID\": \"isbn-extension\",\n    \"csn\": \"{\\\"extensions\\\":[{\\\"extend\\\":\\\"my.bookshop.Books\\\",\\\"elements\\\":{\\\"Z_ISBN\\\":{\\\"type\\\":\\\"cds.String\\\"}}}],\\\"definitions\\\":{}}\",\n    \"i18n\": \"{\\\"\\\":{\\\"Books_stock\\\":\\\"Stock\\\"},\\\"de\\\":{\\\"Books_stock\\\":\\\"Bestand\\\"}}\",\n    \"timestamp\": \"2023-09-07T22:31:28.246Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CAP Features via JSON Configuration\nDESCRIPTION: Configuration snippet enabling specific CAP features like multitenancy, extensibility, function toggles, crucial for the runtime environment. It shows how to activate various service features using JSON.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"multitenancy\": true,\n      \"extensibility\": true,\n      \"toggles\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Binding in .env File\nDESCRIPTION: Shows how to configure a service binding in a local .env file for repeated local tests.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_25\n\nLANGUAGE: properties\nCODE:\n```\ncds.requires.ReviewsService.credentials = { \"url\": \"http://localhost:4005/reviews\" }\n```\n\n----------------------------------------\n\nTITLE: Registering OAuth2 Property Supplier\nDESCRIPTION: Java code example showing how to register a custom OAuth2PropertySupplier for handling service binding structures not understood by SAP Cloud SDK.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nstatic {\n    OAuth2ServiceBindingDestinationLoader.registerPropertySupplier(\n        options -> options.getServiceBinding().getTags().contains(\"<bindingTag>\"),\n            SomeReuseServiceOAuth2PropertySupplier::new);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Action Availability\nDESCRIPTION: CDS annotations to control action button availability dynamically based on travel status with side effects configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_17\n\nLANGUAGE: cds\nCODE:\n```\nannotate TravelService.Travel with actions {\n acceptTravel @(\n   Core.OperationAvailable : {\n     $edmJson: { $Ne: [{ $Path: 'in/TravelStatus_code'}, 'A']}\n   },\n   Common.SideEffects.TargetProperties : ['in/TravelStatus_code'], ) };\n```\n\n----------------------------------------\n\nTITLE: Constructing a Dynamic Query with Query Builder API in Java\nDESCRIPTION: Demonstrates how to create a dynamic CQL query using the Query Builder API with entity and element names as strings. This approach lacks compile-time checks and code completion.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"my.bookshop.Books\")\n  .columns(\"title\")\n  .where(book -> book.to(\"author\").get(\"name\").eq(\"Edgar Allan Poe\"));\n```\n\n----------------------------------------\n\nTITLE: Using JDBC Trace Options\nDESCRIPTION: Commands to use JDBC trace options in the Hana JDBC driver, including setting the trace filename and turning on tracing.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$JAVA_HOME/java -jar $JDBC_DRIVER_PATH/ngdbc-<VERSION>.jar TRACE FILENAME ~/tmp/traces/jdbctrace\n```\n\nLANGUAGE: sh\nCODE:\n```\n$JAVA_HOME/java -jar $JDBC_DRIVER_PATH/ngdbc-<VERSION>.jar <option>\n```\n\n----------------------------------------\n\nTITLE: JDBC Template Usage Example\nDESCRIPTION: Java code demonstrating the usage of JdbcTemplate for executing native SQL and stored procedures.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nJdbcTemplate jdbcTemplate;\n...\n\npublic void setStockForBook(int id, int stock) {\n   jdbcTemplate.update(\"call setStockForBook(?,?)\", id, stock);\n}\n\npublic int countStock(int id) {\n   SqlParameterSource namedParameters = new MapSqlParameterSource().addValue(\"id\", id);\n   return jdbcTemplate.queryForObject(\n      \"SELECT stock FROM Books WHERE id = :id\", namedParameters, Integer.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Programmatic Destinations with Basic Authentication\nDESCRIPTION: Creates a destination with basic authentication credentials for consuming external APIs. This destination can be registered with the DestinationAccessor for use with Remote Services.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nDefaultHttpDestination\n  .builder(\"https://example.org\")\n\t.basicCredentials(\"user\", \"password\")\n\t.name(\"my-destination\").build();\n```\n\n----------------------------------------\n\nTITLE: Using cds bind with CDS Service and Kind\nDESCRIPTION: Example of using cds bind when the kind or CDS service cannot be determined automatically.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncds bind credstore -2 my-credstore --kind credstore\n```\n\n----------------------------------------\n\nTITLE: Cloning CAP Sample Project (Shell)\nDESCRIPTION: Commands to clone the CAP sample project repository, navigate to the orders sample, and add multitenancy support.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/SAP-samples/cloud-cap-samples\ncd cloud-cap-samples/orders\ncds add multitenancy\n```\n\n----------------------------------------\n\nTITLE: Using cds.parse in REPL for CDS Model Definition\nDESCRIPTION: Example of using the cds.parse template literal in the REPL to define CDS entities with associations and view the parsed model structure.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ncds.parse`\n  entity Foo { bar : Association to Bar }\n  entity Bar { key ID : UUID }\n`\n```\n\n----------------------------------------\n\nTITLE: Externalizing Localizable Texts in Properties File\nDESCRIPTION: Shows how to externalize translatable texts using a properties file for localization. The file contains key-value pairs that can be referenced in the application using {i18n>...} syntax. Properties files must be placed in the i18n folder.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_24\n\nLANGUAGE: properties\nCODE:\n```\nSalesRegion_name_col = Sales Region\nOrders_priority_col = Priority\n...\n```\n\n----------------------------------------\n\nTITLE: Using TopLevels Hierarchical Transformation in OData HTTP Request\nDESCRIPTION: This example demonstrates how to use the TopLevels hierarchical transformation to generate a hierarchy based on a recursive parent-child relationship. It retrieves the top 2 levels of the Sales Organizations hierarchy.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nGET /SalesOrganizations?$apply=\n     com.sap.vocabularies.Hierarchy.v1.TopLevels(..., NodeProperty='ID', Levels=2)\n```\n\n----------------------------------------\n\nTITLE: Generated XSUAA Security Configuration in JSON\nDESCRIPTION: Example of a generated xs-security.json file containing scopes, attributes, and role templates derived from CDS model roles.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scopes\": [\n    { \"name\": \"$XSAPPNAME.admin\", \"description\": \"admin\" }\n  ],\n  \"attributes\": [\n    { \"name\": \"level\", \"description\": \"level\", \"valueType\": \"s\" }\n  ],\n  \"role-templates\": [\n    { \"name\": \"admin\", \"scope-references\": [ \"$XSAPPNAME.admin\" ], \"description\": \"generated\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Query Results\nDESCRIPTION: Demonstrates processing CDS.ql query results with row type information.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nCqnSelect query; // some query\nResult result = service.run(query);\n\nprocessor.process(result);\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Endpoints with Bound Methods\nDESCRIPTION: Examples of testing HTTP endpoints using the bound HTTP methods and template literals syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { GET, POST } = cds.test()\nconst { data } = await GET('/browse/Books')\nawait POST('/browse/submitOrder',\n  { book:201, quantity:1 },\n  { auth: { username: 'alice' }}\n)\n```\n\n----------------------------------------\n\nTITLE: CDS Model Definition for Delete Operation Examples\nDESCRIPTION: Sample CDS model defining Orders and OrderItems entities with a composition relationship between them.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_42\n\nLANGUAGE: cds\nCODE:\n```\n// CDS model\nentity Orders {\n  key OrderNo : String;\n  Items       : Composition of many OrderItems on Items.parent = $self;\n  ...\n}\nentity OrderItems {\n  book   : Association to Books;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CqnAnalyzer Instance in Java\nDESCRIPTION: Creates a CqnAnalyzer instance from a CDS model to analyze CQL statements. The analyzer allows for extraction of filter values and entity information from queries.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport com.sap.cds.ql.cqn.CqnAnalyzer;\n\nCdsModel cdsModel = context.getModel();\nCqnAnalyzer cqnAnalyzer = CqnAnalyzer.create(cdsModel);\n```\n\n----------------------------------------\n\nTITLE: Checking and Using Directories with isdir()\nDESCRIPTION: Demonstrates how to check if a path is a directory and then use the returned absolute path to work with it.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isdir, fs } = cds.utils\nlet dir = isdir ('app')\nif (dir) {\n   let entries = fs.readdirSync(dir)\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Associations in CDS Select List\nDESCRIPTION: Demonstrates how to define unmanaged associations directly in the select list of a query to add the association to the view's signature. Shows usage in both entity definitions and extend statements.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cql.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nentity BookReviews as select from Reviews {\n  ...,\n  subject as bookID,\n  book : Association to Books on book.ID = bookID\n};\n```\n\nLANGUAGE: cds\nCODE:\n```\nextend BookReviews with columns {\n  subject as bookID,\n  book : Association to Books on book.ID = bookID\n};\n```\n\n----------------------------------------\n\nTITLE: Writing Build Output in JavaScript\nDESCRIPTION: This code demonstrates how to write build output using the copy and write methods provided by the cds.build.Plugin class. It copies a package.json file and writes new content to it.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/custom-builds.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait this.copy(path.join(this.task.src, 'package.json')).to('package.json');\nawait this.write({\n  dependencies: { '@sap/cds': '^7', '@cap-js/postgres': '^1' },\n  scripts: { start: 'cds-deploy' }\n}).to('package.json');\n```\n\n----------------------------------------\n\nTITLE: Configure PostgreSQL Connection in Spring\nDESCRIPTION: Explicitly configures PostgreSQL connection data in Spring Boot through an application.yaml file. Requires setting database URL, username, password, and driver class name.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\nspring:\n  config.activate.on-profile: postgres\n  datasource:\n    url: <url>\n    username: <user>\n    password: <password>\n    driver-class-name: org.postgresql.Driver\n```\n\n----------------------------------------\n\nTITLE: Setting Managed Associations to Existing Entities in CQL\nDESCRIPTION: Demonstrates how to set associations to existing target entities when using non-cascading associations. Only the target values required for the association are considered.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nAuthors author = Authors.create();\nauthor.setId(100);\n\nBooks book = Books.create();\nbook.setId(101);\nbook.setAuthor(author);\n\nInsert insert = Insert.into(BOOKS).entry(book);\n```\n\n----------------------------------------\n\nTITLE: Defining Timeless Model in CDS\nDESCRIPTION: This snippet shows a base model for managing employees and work assignments without temporal data management. It defines entities for Employees, WorkAssignments, and Departments.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nnamespace com.acme.hr;\nusing { com.acme.common.Persons } from './common';\n\nentity Employees : Persons {\n  jobs : Composition of many WorkAssignments on jobs.empl=$self;\n  job1 : Association to one /*of*/ WorkAssignments;\n}\n\nentity WorkAssignments {\n  key ID  : UUID;\n  role    : String(111);\n  empl    : Association to Employees;\n  dept    : Association to Departments;\n}\n\nentity Departments {\n  key ID  : UUID;\n  name    : String(111);\n  head    : Association to Employees;\n  members : Association to many Employees on members.jobs.dept = $self;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Collation for String Element in CDS Entity\nDESCRIPTION: This CDS code snippet shows how to disable locale-specific collation for a specific String element in a CDS entity using the @cds.collate annotation. This can improve performance when locale-specific ordering is not required.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nentity Books : cuid {\n    title        : localized String(111);\n    descr        : localized String(1111);\n    @cds.collate : false\n    isbn         : String(40);  // does not require locale-specific handling\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Service Injection with Specific Interfaces\nDESCRIPTION: Shows how to inject specific service interfaces in Spring components without requiring @Qualifier annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/services.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class EventHandlerClass implements EventHandler {\n\n    @Autowired\n    private PersistenceService db;\n\n    @Autowired\n    private AdminService adminService;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Access to Components Entity in CDS\nDESCRIPTION: Demonstrates how to annotate a service entity with access restrictions, granting full access to Supporters and read-only access to authenticated users.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_12\n\nLANGUAGE: cds\nCODE:\n```\nannotate IssuesService.Components with @(restrict: [\n  { grant: '*', to: 'Supporter' },\n  { grant: 'READ', to: 'authenticated-user' } ]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Context in Request Handler\nDESCRIPTION: Shows how to access event context properties like tenant and user within a request handler function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.on ('*', req => {\n  let { tenant, user } = req\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring XSUAA Authentication in package.json\nDESCRIPTION: JSON configuration in package.json to enable XSUAA authentication strategy in a CAP.js project.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"auth\": \"xsuaa\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Event Handler Registration\nDESCRIPTION: Shows how to register generic event handlers that act on multiple events or entities in Node.js.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nthis.before ('READ','*', ...)   // for READ requests to all entities\nthis.before ('*','Books', ...)  // for all requests to Books\nthis.before ('*', ...)          // for all requests served by this srv\n```\n\n----------------------------------------\n\nTITLE: Individual Service Configuration in JSON\nDESCRIPTION: This JSON configuration example illustrates how to explicitly activate or deactivate CAP services, also specifying values for the ModelProviderService.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_10\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"cds.xt.DeploymentService\": true\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"multitenancy\": true,\n      \"cds.xt.SaasProvisioningService\": false,\n      \"cds.xt.DeploymentService\": false,\n      \"cds.xt.ModelProviderService\": { \"kind\": \"rest\" }\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"cds.xt.DeploymentService\": true,\n      \"cds.xt.ModelProviderService\": { \"root\": \"../..\" }\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"cds.xt.ModelProviderService\": \"in-sidecar\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the CAP Development Kit globally using npm\nDESCRIPTION: Command to globally install the CAP development toolkit (@sap/cds-dk) using npm, which provides the cds command line interface for CAP development.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/index.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm add -g @sap/cds-dk\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Actuator\nDESCRIPTION: Java implementation of a custom actuator that exposes application-specific information.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ConditionalOnClass(Endpoint.class)\n@Endpoint(id = \"app\", enableByDefault = true)\npublic class AppActuator {\n\t@ReadOperation\n\tpublic Map<String, Object> info() {\n\t\tMap<String, Object> info = new LinkedHashMap<>();\n\t\tinfo.put(\"Version\", \"1.0.0\");\n\t\treturn info;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Delete Handler in Node.js\nDESCRIPTION: Node.js code for a custom handler to protect certain entries in a 'PaymentMethods' entity from deletion.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nsrv.on ('DELETE', 'PaymentMethods', req=>{\n  const entry = req.query.DELETE.where[2].val\n  if (['Main','Travel'].includes(entry))\n    return req.reject(403, 'these entries must not be deleted')\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Service Bindings in Values.yaml\nDESCRIPTION: YAML configuration showing how to update the bindings section in values.yaml to use secrets instead of service instance names.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nsrv:\n  bindings:\n    db:\n        serviceInstanceName:\n        fromSecret: <your secret>\nhana-deployer:\n  bindings:\n    hana:\n      serviceInstanceName:\n      fromSecret: <your secret>\n```\n\n----------------------------------------\n\nTITLE: Injecting Outbox Services in Spring Component\nDESCRIPTION: Java code showing how to inject custom outbox services into a Spring component using dependency injection.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class MySpringComponent {\n  private final OutboxService myCustomOutbox;\n\n  public MySpringComponent(@Qualifier(\"MyCustomOutbox\") OutboxService myCustomOutbox) {\n    this.myCustomOutbox = myCustomOutbox;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Technical Provider Tenant in CAP Java SDK\nDESCRIPTION: Creates a new Request Context for the provider tenant with a technical user. This is used when communicating with a remote CAP service using an internal technical user from the provider account.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/request-contexts.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@On(entity = Books_.CDS_NAME)\npublic void onAction(AddToOrderContext context){\n    runtime.requestContext().systemUserProvider().run(reqContext -> {\n        // call remote CAP service\n        ...\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SAP S/4HANA BusinessPartner API with Event Declarations\nDESCRIPTION: CDS code to extend the imported BusinessPartner API with event declarations for Created and Changed events\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/s4.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nusing { API_BUSINESS_PARTNER as S4 } from './API_BUSINESS_PARTNER';\nextend service S4 with {\n  event BusinessPartner.Created @(topic:'sap.s4.beh.businesspartner.v1.BusinessPartner.Created.v1') {\n    BusinessPartner : String\n  }\n  event BusinessPartner.Changed @(topic:'sap.s4.beh.businesspartner.v1.BusinessPartner.Changed.v1') {\n    BusinessPartner : String\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Draft-Enabled Entities with HTTP/OData in CAP Java\nDESCRIPTION: These HTTP/OData examples show how to read active entities and drafts by using the IsActiveEntity key or filter. They demonstrate different ways to access draft-enabled entities through REST endpoints.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/fiori-drafts.md#2025-04-18_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /v4/myservice/myentity(IsActiveEntity=true,ID=<key>);\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /v4/myservice/myentity(IsActiveEntity=false,ID=<key>);\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /v4/myservice/myentity?$filter=IsActiveEntity eq true\n```\n\n----------------------------------------\n\nTITLE: Extending Countries Entity in CDS\nDESCRIPTION: CDS entity extension for 'Countries' to add detailed fields as per ISO 3166-1 standard.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_13\n\nLANGUAGE: cds\nCODE:\n```\nusing { sap.common.Countries } from '@sap/cds/common';\nextend Countries {\n  numcode : Integer; //> ISO 3166-1 three-digit numeric codes\n  alpha3 : String(3); //> ISO 3166-1 three-letter alpha codes\n  alpha4 : String(4); //> ISO 3166-3 four-letter alpha codes\n  independent : Boolean;\n  status : String(111);\n  statusRemark : String(1111);\n  remarkPart3 : String(1111);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Services in package.json\nDESCRIPTION: Demonstrates how to configure required services in the package.json file of a CAP application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"ReviewsService\": {...},\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Dead Letter Queue Entries in JavaScript\nDESCRIPTION: JavaScript implementation for filtering the dead letter queue to show only messages that have reached the maximum number of retry attempts. This ensures that only truly 'dead' messages are displayed in the management interface.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = class OutboxDeadLetterQueueService extends cds.ApplicationService {\n  async init() {\n    const { DeadOutboxMessages } = this.entities\n\n    // Only show messages that reached the maximum attempts\n    this.before('READ', DeadOutboxMessages, req => {\n      const maxAttempts = cds.env.requires?.outbox?.maxAttempts ?? 20\n      req.query.where(`attempts >= ${maxAttempts}`)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to the Primary Database During Bootstrapping\nDESCRIPTION: Shows how the primary database connection is established during bootstrapping and stored in cds.db for convenient access.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_15\n\nLANGUAGE: js\nCODE:\n```\ncds.db = await cds.connect.to('db')\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Deployments with Profiles\nDESCRIPTION: Example of using dedicated profiles for different deployment landscapes in CAP applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\ncds bind -2 bookshop-db --profile dev\ncds watch --profile dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Forwarding Authentication in Java\nDESCRIPTION: Code example showing how to implement token forwarding authentication type for a destination using Java. This allows forwarding the current user's authorization token to the target service.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_58\n\nLANGUAGE: java\nCODE:\n```\nurlFromConfig = ...; // read from config\nDefaultHttpDestination mockDestination = DefaultHttpDestination\n    .builder(urlFromConfig)\n    .name(\"order-service\")\n    .authenticationType(AuthenticationType.TOKEN_FORWARDING)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Enumerate Subscriber Tenants\nDESCRIPTION: Java code example for retrieving a list of available tenants using TenantProviderService in CAP Java SDK.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/multitenancy.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nTenantProviderService tenantProvider;\n...\nList<TenantInfo> tenantInfo = tenantProvider.readTenants();\n```\n\n----------------------------------------\n\nTITLE: Using Case-When-Then Expressions in CDS Query Builder\nDESCRIPTION: Example of using case expressions to compute a textual representation of stock levels based on numeric values, creating a derived column with a specific type.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_61\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(BOOKS).columns(\n  b -> b.title(),\n  b -> b.when(b.stock().lt(10)).then(\"low\")\n        .when(b.stock().gt(100)).then(\"high\")\n        .orElse(\"medium\").as(\"stockLevel\").type(CdsBaseType.STRING));\n```\n\n----------------------------------------\n\nTITLE: Consuming Reuse Package in CDS\nDESCRIPTION: Demonstrates how to consume a reuse package in a CDS file using the 'using' directive.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_28\n\nLANGUAGE: cds\nCODE:\n```\nusing { my.thing } from 'my-reuse-package';\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Field Data in JavaScript Logging Calls\nDESCRIPTION: Examples of how to include custom field data when calling logging methods. Shows two equivalent ways to provide key-value pairs that will be formatted as custom fields.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nLOG.info({ message: 'foo', reason: 'bar' })\nLOG.info('foo', { reason: 'bar' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Prototype Chaining in package.json\nDESCRIPTION: Demonstrates how to use the 'kind' property to reference other services for prototype chaining in the package.json file. This allows for inheritance and overriding of service properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"serviceA\": {\n        \"kind\": \"serviceB\",\n        \"myProperty\": \"my overwritten property\"\n      },\n      \"serviceB\": {\n        \"kind\": \"hana\",\n        \"myProperty\": \"my property\",\n        \"myOtherProperty\": \"my other property\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Empty CdsData Map\nDESCRIPTION: This Java code demonstrates how to create an empty CdsData map using Struct.create.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nCdsData data = Struct.create(CdsData.class);\n```\n\n----------------------------------------\n\nTITLE: Exporting CAP Service to EDMX - Windows CMD\nDESCRIPTION: Command to compile and export a CAP service definition to EDMX format using Windows Command Prompt.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\ncds compile srv -s OrdersService -2 edmx > OrdersService.edmx\n```\n\n----------------------------------------\n\nTITLE: Using toUpper Method on Field in CDS Query Builder\nDESCRIPTION: Example of using the 'toUpper' method directly on a field to convert the employee name to uppercase before comparing with an uppercase string.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_58\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(EMPLOYEE).columns(e -> e.name())\n  .where(e -> e.name().toUpper().eq(\"MONIKA\"));\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction Control Example\nDESCRIPTION: Demonstrates detailed manual transaction control with error handling\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = srv.tx()\ntry {\n  let exists = await tx.run ( SELECT(1).from(Books,201).forUpdate() )\n  if (exists) await tx.update (Books,201).with(data)\n  else await tx.create (Books,{ ID:201,...data })\n  await tx.commit()\n} catch(e) {\n  await tx.rollback(e) // will rethrow e\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Temporal Associations in CDS\nDESCRIPTION: This CDS snippet shows how to optimize temporal associations by adding an alternative association that considers validity periods, reducing redundant information.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\nusing { temporal } from '@sap/cds/common';\nentity WorkAssignments : temporal {/*...*/\n  dept : Association to Departments;\n  dept1 : Association to Departments on dept1.id = dept.id\n    and dept1.validFrom <= validFrom and validFrom < dept1.validTo;\n}\nentity Departments : temporal {/*...*/}\n```\n\n----------------------------------------\n\nTITLE: Adding Change Tracking Dependency in Maven POM\nDESCRIPTION: Add the cds-feature-change-tracking dependency to the srv/pom.xml file to enable change tracking in your CAP Java service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-change-tracking</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Common Usage of cds.serve() with Express\nDESCRIPTION: Example of using cds.serve() to add all services to an Express app with default options.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = require('express')()\ncds.serve('all').in(app)\napp.listen()\n```\n\n----------------------------------------\n\nTITLE: Setting Credentials Programmatically in Node.js\nDESCRIPTION: JavaScript code showing how to set authentication credentials programmatically during application bootstrap instead of hardcoding them in configuration files.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_43\n\nLANGUAGE: js\nCODE:\n```\nconst cds = require(\"@sap/cds\");\n\nif (cds.env.requires?.credentials?.authentication === \"BasicAuthentication\") {\n  const credentials = /* read your credentials */\n  cds.env.requires.credentials.username = credentials.username;\n  cds.env.requires.credentials.password = credentials.password;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Request Body Size Globally\nDESCRIPTION: JSON configuration example showing how to limit the maximum request body size globally for all services and protocols using the cds.server.body_parser.limit configuration option.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-server.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"server\": {\n      \"body_parser\": {\n        \"limit\": \"1mb\" // also accepts b, kb, etc...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Native HANA Associations in package.json\nDESCRIPTION: This configuration in package.json disables the generation of native HANA associations, which can improve deployment performance by reducing validation overhead and unnecessary dependencies.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"sql\": {\n      \"native_hana_associations\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers Manually for Stream Responses in CAP Node.js\nDESCRIPTION: Example showing how to manually set HTTP headers for content type and disposition when returning a stream from a handler using the response object's setHeader method.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsrv.on('unboundAction', (req, res) => {\n  const readable = new Readable()\n\n  res.setHeader('content-type', 'image/jpeg')\n  res.setHeader('content-disposition', 'inline; filename=\"cover.jpg\"')\n\n  return readable\n})\n```\n\n----------------------------------------\n\nTITLE: Event Emitter Service Implementation\nDESCRIPTION: Shows how to implement an event emitter service by extending cds.Service. Demonstrates emitting events to inform unknown receivers about state changes.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Emitter extends cds.Service { async someMethod() {\n  // inform unknown receivers about something happened\n  await this.emit ('some event', { some:'payload' })\n}}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying CAP Application to Cloud Foundry\nDESCRIPTION: Commands to build and deploy a CAP application to Cloud Foundry. This process creates a deployable archive and deploys it to the Cloud Foundry environment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nmbt build -t gen --mtar mta.tar\ncf deploy gen/mta.tar\n```\n\n----------------------------------------\n\nTITLE: Using 'matching' Method for Delete Operations with Composite Keys\nDESCRIPTION: Demonstrates how to use the 'matching' method to define delete filters based on a map, especially useful for entities with composite keys.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.param;\n\nMap<String, Object> params = new HashMap<>();\nparams.put(\"ID\", param(\"ID\"));\nparams.put(\"journalID\", 101);\n\n// using matching\nCqnDelete delete = Delete.from(\"bookshop.Article\").matching(params);\n\n// using where\nCqnDelete delete = Delete.from(\"bookshop.Article\")\n\t.where(t -> t.get(\"ID\").eq(param(\"ID\"))\n\t.and(t.get(\"journalID\").eq(101)));\n\n// execution\nMap<String, Object> row1 = singletonMap(\"ID\", 1);\nMap<String, Object> row2 = singletonMap(\"ID\", 2);\ndataStore.execute(delete, asList(row1, row2));\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Defined Destinations in Node.js\nDESCRIPTION: Example of configuring an application-defined destination in Node.js using basic authentication. The configuration is specified in the cds.requires section of a JSON configuration file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_42\n\nLANGUAGE: jsonc\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"REVIEWS\": {\n      \"kind\": \"odata\",\n      \"model\": \"srv/external/REVIEWS\",\n      \"[production]\": {\n        \"credentials\": {\n          \"url\": \"https://reviews.ondemand.com/reviews\",\n          \"authentication\": \"BasicAuthentication\",\n          \"username\": \"<set from code or env>\",\n          \"password\": \"<set from code or env>\",\n          \"headers\": {\n            \"my-header\": \"header value\"\n          },\n          \"queries\": {\n            \"my-url-param\": \"url param value\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Open Types in CDS\nDESCRIPTION: Example of declaring open entity types that allow clients to add properties dynamically using the @open annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_38\n\nLANGUAGE: cds\nCODE:\n```\nservice CatalogService {\n  @open\n  entity Book {\n    key id : Integer;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Java Interface with Javadoc Comments\nDESCRIPTION: Shows how Javadoc comments from the CDS model are reflected in the generated Java interface, providing documentation for the interface and its methods.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_30\n\nLANGUAGE: java\nCODE:\n```\n/**\n * The creator/writer of a book, article, or document.\n */\n@CdsName(\"my.bookshop.Authors\")\npublic interface Authors extends CdsData {\n\n  String ID = \"ID\";\n  String NAME = \"name\";\n\n  Integer getId();\n  void setId(Integer id);\n  /**\n   * The name of the author.\n   */\n  String getName();\n  /**\n   * The name of the author.\n   */\n  void setName(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Persistence Service\nDESCRIPTION: YAML configuration to create a named persistence service and connect it to a specific database service binding.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  persistence.services:\n    my-ps:\n      binding: \"my-hana-hdi\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Entity Element in Java\nDESCRIPTION: Demonstrates how to retrieve and analyze details of an entity element using the Model Reflection API.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCdsEntity books = model.getEntity(\"my.bookshop.Books\");\nCdsElement title = books.getElement(\"title\");\n\nboolean key = title.isKey();      // false\nboolean localized = title.isLocalized(); // true\nCdsType type = title.getType();   // CdsSimpleType\n\nif (type.isSimple()) {   // true\n  CdsSimpleType simple = type.as(CdsSimpleType.class);\n\n  String typeName = simple.getQualifiedName();  // \"cds.String\"\n  CdsBaseType baseType = simple.getType();      // CdsBaseType.STRING\n  Class<?> javaType = simple.getJavaType();     // String.class\n  Integer length = simple.get(\"length\");        // 111\n}\n```\n\n----------------------------------------\n\nTITLE: Composition with Inline Aspects in CDS\nDESCRIPTION: Shows how to use anonymous inline aspects to create a more concise composition definition. This generates an entity named Orders.Items with a backlink association.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\nentity Orders { ...\n  Items : Composition of many {\n    key pos  : Integer;\n    quantity : Integer;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting and Expanding List Items in Java CQL\nDESCRIPTION: Demonstrates how to select all elements of Books entity and expand associated Author elements using CQL.to(...).expand method.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_92\n\nLANGUAGE: java\nCODE:\n```\n// SELECT from Books {*, author {*}}\n\nExpand<?> authorItems = CQL.to(\"author\").expand();\nSelect.from(\"bookshop.Books\").columns(CQL.star(), authorItems);\n```\n\n----------------------------------------\n\nTITLE: Registering a Postgres Build Plugin in JavaScript\nDESCRIPTION: This snippet shows how to register a custom Postgres build plugin in a cds-plugin.js file. It extends the cds.build.Plugin class and implements methods for initialization, task detection, and build execution.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/custom-builds.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nconst { fs, path } = cds.utils;\n\ncds.build?.register?.('postgres', class PostgresBuildPlugin extends cds.build.Plugin {\n  static taskDefaults = { src: cds.env.folders.db }\n  static hasTask() {\n    return cds.requires.db?.kind === 'postgres';\n  }\n  init() {\n    this.task.dest = path.join(this.task.dest, 'pg');\n  }\n  async build() {\n    const model = await this.model();\n    if (!model) return;\n\n    await this.write(cds.compile.to.json(model)).to(path.join('db', 'csn.json'))\n\n    if (fs.existsSync(path.join(this.task.src, 'data'))) {\n      await this.copy(data).to(path.join('db', 'data'))\n    }\n    . . .\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Non-Localized Service Definition\nDESCRIPTION: Service definition example showing how to disable localization using @cds.localized annotation\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\nusing { Books } from './books';\nservice CatalogService {\n  @cds.localized: false //> direct access to base entity; all fields are non-localized defaults\n  entity BooksDetails as projection on Books;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Parameters for Remote JMX Access\nDESCRIPTION: This code block demonstrates the JVM parameters required to enable remote JMX access on a specific port within the local container. It includes settings for RMI, authentication, and SSL.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/optimizing.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-Djava.rmi.server.hostname=localhost\n-Dcom.sun.management.jmxremote\n-Dcom.sun.management.jmxremote.port=<port>\n-Dcom.sun.management.jmxremote.rmi.port=<port>\n-Dcom.sun.management.jmxremote.authenticate=false\n-Dcom.sun.management.jmxremote.ssl=false\n```\n\n----------------------------------------\n\nTITLE: Adding Validator to Data Processor\nDESCRIPTION: Demonstrates adding a validator to the CdsDataProcessor using filter and action arguments.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nprocessor.addValidator(filter, action);\n```\n\n----------------------------------------\n\nTITLE: Emitting Personal Data Access Event\nDESCRIPTION: Shows how to use the AuditLogService to emit a personal data access event.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/auditlog.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nList<Access> accesses = new ArrayList<>();\nAccess access = Access.create();\n// fill access object with data\naccesses.add(access);\nauditLogService.logDataAccess(accesses);\n```\n\n----------------------------------------\n\nTITLE: Extending Countries and Defining Custom Country Type in CDS\nDESCRIPTION: CDS definitions for extending the 'Countries' entity with numeric codes and defining a custom 'Country' type using numeric codes for foreign keys.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\nnamespace your.common;\nusing { sap.common.Countries } from '@sap/cds/common';\n\n// Extend Countries code list with fields for numeric codes\nextend Countries {\n  numcode : Integer; //> ISO 3166-1 three-digit numeric codes\n}\n\n// Define an own Country type using numcodes for foreign keys\ntype Country : Association to Countries { numcode };\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication in TypeScript\nDESCRIPTION: TypeScript implementation of a custom authentication middleware that sets user context and tenant information for CAP.js applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport cds from \"@sap/cds\";\nimport {Request, Response, NextFunction} from \"express\";\ntype Req = Request & { user: cds.User, tenant: string };\n\nexport default function custom_auth(req: Req, res: Response, next: NextFunction) {\n  // do your custom authentication ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datasource Connection Pool in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to configure the connection pool for a datasource in a CAP Java application. It sets the maximum pool size for a Hikari connection pool.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  dataSource:\n    my-service-instance:\n      hikari:\n        maximum-pool-size: 20\n```\n\n----------------------------------------\n\nTITLE: Switch to Subscriber Tenant Context\nDESCRIPTION: Java code showing how to switch to a specific subscriber tenant context in CAP Java applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/multitenancy.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nruntime.requestContext().systemUser(tenant).run(context -> {\n   // call technical service\n   ...\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Books Entity for Compiler v2 with Texts Entity\nDESCRIPTION: This snippet demonstrates how the Books entity is extended for compiler v2, using the '.texts' suffix for the texts association, which reflects a change in the output structure.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\n// CDS compiler v2\nextend entity Books with {\n  texts : Composition of many Books.texts on texts.ID=ID;\n  localized : Association to Books.texts on localized.ID=ID\n    and localized.locale = $user.locale;\n}\n\nentity Books.texts {\n  key locale : String(5);\n  key ID     : UUID;\n      title  : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Low-Level Messaging Implementation\nDESCRIPTION: JavaScript code showing direct messaging service usage for consuming SAP S/4HANA events\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/s4.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst messaging = await cds.connect.to ('messaging')\nmessaging.on ('sap.s4.beh.businesspartner.v1.BusinessPartner.Changed.v1', (msg) => {\n  const { BusinessPartner } = msg.data\n  console.log('--> Event received: BusinessPartner changed (ID=\"'+BusinessPartner+'\")')\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Tenant Metadata\nDESCRIPTION: GET endpoint to retrieve metadata for all provisioned tenants. Returns an array of tenant objects containing details like tenant ID, subdomain, subscription info and timestamps.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nGET /-/cds/saas-provisioning/tenant HTTP/1.1\nContent-Type: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"subscribedTenantId\": \"tenant-1\",\n    \"eventType\": \"CREATE\",\n    \"subscribedSubdomain\": \"subdomain-1\",\n    \"subscriptionAppName\": \"app-1\",\n    \"subscribedSubaccountId\": \"subaccount-1\",\n    \"createdAt\": \"2023-11-10T14:36:22.639Z\",\n    \"modifiedAt\": \"2023-13-10T15:16:22.802Z\"\n  },\n  {\n    \"subscribedTenantId\": \"tenant-2\",\n    \"eventType\": \"CREATE\",\n    \"subscribedSubdomain\": \"subdomain-2\",\n    \"subscriptionAppName\": \"app-2\",\n    \"subscribedSubaccountId\": \"subaccount-2\",\n    \"createdAt\": \"2023-11-11T14:36:22.639Z\",\n    \"modifiedAt\": \"2023-11-12T12:14:45.452Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding App Router to CAP Project\nDESCRIPTION: Command to add App Router to the app folder of your CAP project using the CDS CLI.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ncds add approuter\n```\n\n----------------------------------------\n\nTITLE: Basic CDS Entity with Country Type Example\nDESCRIPTION: Demonstrates how to use the Country type from @sap/cds/common in an entity definition.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nusing { Country } from '@sap/cds/common';\nentity Addresses {\n  street  : String;\n  town    : String;\n  country : Country; //> using reuse type\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific View from Normalized Entity\nDESCRIPTION: This snippet shows how to create a specific view (in this case for bananas) from the normalized Fruit entity. This approach allows for efficient querying of specific fruit types.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nview Banana as select from Fruit\n{\n    type,\n    description,\n    vendor,\n    bananaDetails,\n}\n    where type = 'banana';\n```\n\n----------------------------------------\n\nTITLE: Using times Arithmetic Function with Parameter in CDS Query Builder\nDESCRIPTION: Example of using the 'times' function to multiply a parameter value by a constant in a BETWEEN condition.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_64\n\nLANGUAGE: java\nCODE:\n```\nParameter<Integer> p = param(\"p\");\nSelect.from(AUTHOR)\n  .where(a -> a.id().between(10, p.times(30)));\n```\n\n----------------------------------------\n\nTITLE: Configuring External API Service with Destination in package.json\nDESCRIPTION: Basic configuration in package.json for connecting to an external OData service by specifying the service model.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"API_BUSINESS_PARTNER\": {\n      \"kind\": \"odata\",\n      \"model\": \"srv/external/API_BUSINESS_PARTNER\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Toggles in Node.js Service Implementation\nDESCRIPTION: This JavaScript snippet demonstrates how to react to feature toggles within service implementations by inspecting cds.context.features in a CAP Node.js application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst { features } = cds.context\nif ('isbn' in features) {\n  // specific coding when feature 'isbn' is enabled...\n}\nif ('reviews' in features) {\n  // specific coding when feature 'reviews' is enabled...\n}\n// common coding...\n```\n\n----------------------------------------\n\nTITLE: Adding Filtered Diff Visitor\nDESCRIPTION: Shows how to add a DiffVisitor with an element filter.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_45\n\nLANGUAGE: java\nCODE:\n```\ndiff.add(\n  new Filter() {\n    @Override\n    public boolean test(Path path, CdsElement element, CdsType type) {\n        return true;\n    }\n  },\n  new DiffVisitor() {\n    ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using toUpper Function with Parameter in CDS Query Builder\nDESCRIPTION: Example of using the 'toUpper' function to convert a string parameter to uppercase before applying an endsWith filter on employee names.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_57\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.toUpper;\nSelect.from(EMPLOYEE).columns(e -> e.name())\n  .where(e -> e.name().endsWith(toUpper(\"ika\")));\n```\n\n----------------------------------------\n\nTITLE: Local Development Persistence Configuration\nDESCRIPTION: YAML configuration for local development with tenant-independent persistence service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  config.activate.on-profile: local\ncds:\n  persistence.services:\n    tenant-independent:\n      dataSource: \"tenantIndependentDataSource\"\n```\n\n----------------------------------------\n\nTITLE: Defining Singletons in CDS\nDESCRIPTION: Examples of defining singleton entities in CDS using @odata.singleton annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_40\n\nLANGUAGE: cds\nCODE:\n```\nservice Sue {\n  @odata.singleton entity MySingleton {\n    key id : String;\n    prop : String;\n    assoc : Association to myEntity;\n  }\n}\n```\n\nLANGUAGE: cds\nCODE:\n```\nservice Sue {\n  @odata.singleton entity OldestEmployee as\n    select from Employees order by birthyear;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding cds-feature-event-hub Dependency in pom.xml for Java\nDESCRIPTION: XML configuration to add the cds-feature-event-hub dependency in the pom.xml file for Java applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-broker.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-event-hub</artifactId>\n    <version>${latest-version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: INSERT/UPSERT Type Definitions\nDESCRIPTION: TypeScript class declarations for INSERT and UPSERT operations including data interface definition.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cqn.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass INSERT { INSERT: UPSERT['UPSERT'] }\nclass UPSERT { UPSERT: {\n  into      : ref\n  entries?  : data[]\n  columns?  : string[]\n  values?   : scalar[]\n  rows?     : scalar[][]\n  from?     : SELECT\n}}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface data  { [elm:string]: scalar | data | data[] }\n```\n\n----------------------------------------\n\nTITLE: Registering Lifecycle Event Handlers for CAP Server\nDESCRIPTION: Example showing how to register event handlers for various lifecycle events in a CAP server using the cds.on() method to hook into bootstrap, served, and listening events.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-server.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.on('bootstrap', ...)\ncds.on('served', ...)\ncds.on('listening', ...)\n```\n\n----------------------------------------\n\nTITLE: Applying Type Casting in Java CQL\nDESCRIPTION: Shows how to ensure custom functions return values with a specific CDS type using the type method, ensuring consistent Java type representation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_97\n\nLANGUAGE: java\nCODE:\n```\n// CQL: SELECT from Books { ADD_SECONDS(modifiedAt, 30) as addedSeconds : Timestamp }\n\nCqnElementRef modified = CQL.get(\"modifiedAt\");\nSelect.from(\"bookshop.Books\").columns(\n   CQL.func(\"ADD_SECONDS\", modified, CQL.constant(30))\n      .type(CdsBaseType.TIMESTAMP).as(\"addedSeconds\"));\n```\n\n----------------------------------------\n\nTITLE: Resolved Credentials Output in CAP\nDESCRIPTION: Shows an example of the resolved credentials output for a bound service, including URL, host, port, and other connection details.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n{\n  url: 'jdbc:sap://BDB9AC0F20CB46B494E6742047C4F99A.hana.eu10.hanacloud.ondemand.com:443?encrypt=true&validateCertificate=true&currentschema=BDB9AC0F20CB46B494E6742047C4F99A',\n  host: 'bdb9ac0f20cb46b494e6742047c4f99a.hana.eu10.hanacloud.ondemand.com',\n  port: '443',\n  driver: 'com.sap.db.jdbc.Driver',\n  schema: 'BDB9AC0F20CB46B494E6742047C4F99A',\n  hdi_user: 'BDB9AC0F20CB46B494E6742047C4F99A_DT',\n  hdi_password: 'abc...xyz',\n  user: 'BDB9AC0F20CB46B494E6742047C4F99A_RT',\n  password: 'abc....xyz',\n  certificate: '-----BEGIN CERTIFICATE-----\\n' +\n    '...' +\n    '-----END CERTIFICATE-----'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI External Documentation and Extensions\nDESCRIPTION: Shows how to annotate a CDS service with external documentation links and specification extensions\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/openapi.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nannotate SampleService with @(\n    OpenAPI:{\n        externalDocs: {\n            description: 'API Guide',\n            url        : 'https://help.sap.com/docs/product/sample.html'\n        },\n        Extensions: {\n        ![compliance-level]: 'sap:base:v1'\n      }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Injecting UserInfo in a Handler Bean in Java\nDESCRIPTION: Shows how to inject UserInfo into a handler bean using dependency injection in a CAP Java SDK application. This allows easy access to user information within handler implementations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/security.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nUserInfo user;\n```\n\n----------------------------------------\n\nTITLE: Parsing CQL Expressions\nDESCRIPTION: Examples of parsing CQL expression strings using both function call and tagged template string syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n[dev] cds repl\n> let cxn = cds.parse.expr (`foo.bar > 9`)\n> let cxn = cds.parse.expr `foo.bar > 9` //> both return:\n{xpr:[ {ref:['foo', 'bar']}, '>', {val:9} ] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Restrictions (JSONC)\nDESCRIPTION: JSONC configuration to set restrictions on extension points, including element prefixes and allowlists for entities and services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"cds.xt.ExtensibilityService\": {\n        \"element-prefix\": [\"x_\"],\n        \"extension-allowlist\": [\n          {\n            \"for\": [\"sap.capire.orders\"],\n            \"kind\": \"entity\",\n            \"new-fields\": 2\n          },\n          {\n            \"for\": [\"OrdersService\"],\n            \"new-entities\": 2\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Service Injection with Qualifier\nDESCRIPTION: Demonstrates dependency injection of services in Spring components using @Autowired and @Qualifier annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/services.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class EventHandlerClass implements EventHandler {\n\n    @Autowired\n    private PersistenceService db;\n\n    @Autowired\n    @Qualifier(\"AdminService\")\n    private ApplicationService adminService;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Error Handling with Context.proceed()\nDESCRIPTION: Shows how to wrap existing outbox processing logic with additional error handling.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@On(service = OutboxService.PERSISTENT_ORDERED_NAME, event = AuditLogService.DEFAULT_NAME)\nvoid handleAuditLogProcessingErrors(OutboxMessageEventContext context) {\n  try {\n    context.proceed(); // wrap default logic\n  } catch (Exception e) {\n    if (isUnrecoverableSemanticError(e)) {\n      // Perform application-specific counter-measures\n      context.setCompleted(); // indicate message deletion to outbox\n    } else {\n      throw e; // indicate error to outbox\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Typed Data in Java\nDESCRIPTION: Demonstrates how to stream data given as Iterable<Map<String, Object>> using the stream method and convert it to a typed Stream.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.Struct.stream;\n...\n\nStream<Book> books = stream(data).as(Book.class);\n\nList<Book> bookList = books.collect(Collectors.toList());\n```\n\n----------------------------------------\n\nTITLE: Multi-Protocol Query Examples\nDESCRIPTION: Demonstrates equivalent queries across different protocols including CQL, GraphQL, OData, and the resulting CQN object.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from Books { ID, title, author { name }}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nGET Books { ID, title, author { name }}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nPOST query {\n  Books {\n    ID, title, author {\n      name\n    }\n  }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nGET Books?$select=ID,title&$expand=author($select=name)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ SELECT: { from: {ref:['Books']},\n    columns: [ 'ID', 'title', {ref:['author']},\n      expand:[ 'name' ]\n    }]\n}}\n```\n\n----------------------------------------\n\nTITLE: Emitting Configuration Change Event\nDESCRIPTION: Shows how to use the AuditLogService to emit a configuration change event.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/auditlog.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nList<ConfigChange> configChanges = new ArrayList<>();\nConfigChange configChange = ConfigChange.create();\n// fill config change object with data\nconfigChanges.add(configChange);\nauditLogService.logConfigChange(Action.UPDATE, configChanges);\n```\n\n----------------------------------------\n\nTITLE: Ordering by Alias or Function Result\nDESCRIPTION: Shows how to order query results by an alias of a column or by the result of a function call.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Person\")\n    .columns(p -> p.get(\"name\").toUpper().as(\"aliasForName\"))\n    .orderBy(p -> p.get(\"aliasForName\").asc());\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Toggle State in Custom Event Handler with Java\nDESCRIPTION: Example of an event handler that checks if a specific feature toggle is enabled. The code demonstrates how to access the feature toggles information from the event context and conditionally execute code based on the 'discount' feature state.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@After\nprotected void subtractDiscount(CdsReadEventContext context) {\n    if (context.getFeatureTogglesInfo().isEnabled(\"discount\")) {\n        // Custom coding executed when feature \"discount\" is active\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with Different Parameter Styles\nDESCRIPTION: Examples of emitting events using different parameter styles - as an object or as separate parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nawait srv.emit ({ event: 'SomeEvent', data: { foo: 'bar' }})\nawait srv.emit ('SomeEvent', { foo:'bar' })\n```\n\n----------------------------------------\n\nTITLE: UPDATE Type Definitions\nDESCRIPTION: TypeScript class and interface definitions for UPDATE operations including data and changes interfaces.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cqn.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass UPDATE { UPDATE: {\n  entity  : ref\n  where?  : expr\n  data    : data\n  with    : changes\n}}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface data  { [element:name]: scalar | data | data[] }\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface changes { [element:name]: scalar | expr | changes | changes[] }\n```\n\n----------------------------------------\n\nTITLE: Performing Operations in before Handlers\nDESCRIPTION: Shows how to run additional operations like database updates in before handlers.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nthis.before ('submitOrder', async req => {\n  await UPDATE(Books).set ('stock -=', req.data.quantity)\n})\n```\n\n----------------------------------------\n\nTITLE: Returning Stream Objects Directly with Content Metadata in CAP Node.js\nDESCRIPTION: Alternative approach for streaming media data by directly returning a Readable stream with assigned properties for mimetype and filename to configure content disposition information.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsrv.on('READ', 'Books', (req, next) => {\n  if (coverImageIsRequested) {\n    const readable = new Readable()\n    return Object.assign(readable, {\n      mimetype: 'image/jpeg', // > optional\n      filename: 'cover.jpg', // > optional\n    })\n  }\n  return next()\n})\n```\n\n----------------------------------------\n\nTITLE: Adding namespace prefixing rules for SAP Event Mesh\nDESCRIPTION: Optional JSON configuration to add namespace prefixing rules for event names when using SAP Event Mesh. This ensures CAP's messaging service implementations enforce these rules automatically.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-mesh.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"publishPrefix\": \"$namespace/\",\n      \"subscribePrefix\": \"$namespace/\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Audit Log Service in JavaScript\nDESCRIPTION: JavaScript code to connect to the audit log service in a CAP application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst audit = await cds.connect.to('audit-log')\n```\n\n----------------------------------------\n\nTITLE: Using Template Literals with HTTP Methods\nDESCRIPTION: Example showing how to use template literals syntax with HTTP bound methods for cleaner test code.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet { data } = await GET('/browse/Books')\nlet { data } = await GET `/browse/Books`\n```\n\n----------------------------------------\n\nTITLE: UI Annotations for Orders Items\nDESCRIPTION: Example of adding UI annotations to inline composition Orders.Items to define how items should be displayed in a line item list.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/domain-modeling.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\nannotate Orders.Items with @(\n   UI.LineItem : [\n      {Value: pos},\n      {Value: quantity},\n   ],\n);\n```\n\n----------------------------------------\n\nTITLE: Processing Media Upload in CAP Java Event Handler\nDESCRIPTION: Custom event handler implementation for processing media uploads, demonstrating how to handle the input stream for cover images.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_52\n\nLANGUAGE: java\nCODE:\n```\n@On(event = CdsService.EVENT_UPDATE)\npublic void processCoverImage(CdsUpdateEventContext context, List<Books> books) {\n\tbooks.forEach(book -> {\n\t\tInputStream is = book.getCoverImage();\n\t\t// ... your custom code fully consuming the input stream\n\t});\n\tcontext.setResult(books);\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Filtering with Association (Good Practice)\nDESCRIPTION: This example shows an efficient way to filter OrdersItems and then join back to OrdersHeaders using an association. This approach is more performant than filtering after a JOIN.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\nview FilteredOrdersAssoc as select {*, Header.OrderNo, Header.buyer, Header.currency } as Flatten\nfrom (\n  select from OrdersItems {*}\n  where OrdersItems.price > 100\n);\n```\n\n----------------------------------------\n\nTITLE: Adding XSUAA Configuration to CAP Project\nDESCRIPTION: Command to derive scopes, attributes, and role templates from the CDS model and generate XSUAA configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\ncds add xsuaa\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Collections from Query Results\nDESCRIPTION: Shows how to convert query results into typed collections using interfaces. The example demonstrates creating a list of typed objects and a map from query results.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nResult result = ...\n\nList<Book> books = result.listOf(Book.class);\n\nMap<String, String> titleToDescription =\n  result.streamOf(Book.class).collect(Collectors.toMap(Book::getTitle, Book::getDescription));\n```\n\n----------------------------------------\n\nTITLE: Extending sap.common.TextsAspect in CDS\nDESCRIPTION: Example of extending the sap.common.TextsAspect to add an association to the Languages code list entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nextend sap.common.TextsAspect with {\n  language : Association to sap.common.Languages on language.code = locale;\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Projections in CSN JSON\nDESCRIPTION: Example of how projections are represented in the new CSN format using the 'projection' property.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"kind\": \"entity\",\n  \"projection\": {\n    \"from\": {\n      \"ref\": [\"E\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Entities and Services in LinkedCSN\nDESCRIPTION: Example of accessing entities and services in a linked model using object and array-like syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet m = cds.linked`\n  namespace my.bookshop;\n  entity Books {...}\n  entity Authors {...}\n  service CatalogService {\n    entity ListOfBooks as projection on Books {...}\n  }\n`\n\n// Object nature\nlet { CatalogService, AdminService } = m.services\nlet { Books, Authors } = m.entities\n\n// Array nature\nfor (let each of m.entities) console.log(each.name)\n\n// Function nature\nlet { ListOfBooks } = m.entities ('my.bookshop.CatalogService')\n```\n\n----------------------------------------\n\nTITLE: Running MTX Sidecar with Hybrid Profile\nDESCRIPTION: Command to run the MTX sidecar with cloud bindings using the hybrid profile.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\ncds watch mtx/sidecar --profile hybrid\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Configuration in CAP.js\nDESCRIPTION: Command to check the current authentication configuration in a CAP.js project, displaying the full auth configuration including credentials.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ncds env list requires.auth --resolve-bindings --profile hybrid\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Configuration in CAP.js\nDESCRIPTION: Command to add PostgreSQL dependency and setup deployment descriptors in a CAP.js project\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncds add postgres\n```\n\n----------------------------------------\n\nTITLE: Configuring Change Tracking Dependency in Maven\nDESCRIPTION: Maven dependency configuration for enabling change tracking feature in the service's pom.xml file. Sets the dependency scope to compile for the change tracking feature.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-change-tracking</artifactId>\n    <scope>compile</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Cast Function Alternatives in CDS and OData\nDESCRIPTION: Compares the two available cast methods: OData-style Cast function and SQL-style cast operator, highlighting syntax and type handling differences.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_17\n\nLANGUAGE: cds\nCODE:\n```\n@Some.ODataStyleCast:  ( Cast(aValue, Decimal(38, 'variable') ) )  // => Edm.Decimal\n@Some.ODataStyleCast2: ( Cast(aValue, PrimitiveType()) )           // => Edm.PrimitiveType\n@Some.SQLStyleCast:    ( cast(aValue as Decimal(38, variable)) )   // => cds.Decimal\n@Some.SQLStyleCast2:   ( cast(aValue as String) )                  // => cds.String without type facets\n```\n\n----------------------------------------\n\nTITLE: Advanced Destination Configuration with Options\nDESCRIPTION: Configuration in package.json with additional destination options including selection strategy and cache settings using the SAP Cloud SDK connectivity features.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_40\n\nLANGUAGE: jsonc\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"API_BUSINESS_PARTNER\": {\n      /* ... */\n      \"[production]\": {\n        \"credentials\": {\n          /* ... */\n        },\n        \"destinationOptions\": {\n          \"selectionStrategy\": \"alwaysSubscriber\",\n          \"useCache\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Service Consumption using Service Bindings\nDESCRIPTION: Creates an HttpClient from a service binding to consume external APIs natively using SAP Cloud SDK. This code resolves a service binding into a destination and obtains an HttpClient instance.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nServiceBinding binding = ...;\nHttpDestination destination = ServiceBindingDestinationLoader.defaultLoaderChain().getDestination(\n        ServiceBindingDestinationOptions\n          .forService(binding)\n          .onBehalfOf(OnBehalfOf.TECHNICAL_USER_CURRENT_TENANT)\n          .build());\n\nHttpClient httpClient = HttpClientAccessor.getHttpClient(destination);\n...\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Import Example\nDESCRIPTION: Example showing how to import and use TypeScript types from @sap/cds.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/typescript.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Request } from '@sap/cds'\n\nfunction myHandler(req: Request) { }\n```\n\n----------------------------------------\n\nTITLE: Loading the CDS Model During Bootstrapping\nDESCRIPTION: Shows how the effective CDS model is loaded during application bootstrapping, containing all service and entity definitions.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_13\n\nLANGUAGE: js\nCODE:\n```\ncds.model = await cds.load('*')\n```\n\n----------------------------------------\n\nTITLE: Using Logical NOT Operator in CAP Java CQL Query\nDESCRIPTION: Illustrates the use of the logical NOT operator in a CQL query to exclude authors with a specific ID.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_75\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Authors\")\n.where(a ->\n  not(a.get(\"Id\").eq(3)));\n```\n\n----------------------------------------\n\nTITLE: Example Mermaid Diagram Output from CDS Compilation\nDESCRIPTION: Sample output of a CDS model compiled to Mermaid class diagram format showing entity relationships.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_23\n\nLANGUAGE: log\nCODE:\n```\nclassDiagram\n  namespace sap_fe_cap_travel {\n    class `sap.fe.cap.travel.Travel`[\"Travel\"]\n    class `sap.fe.cap.travel.Booking`[\"Booking\"]\n    class `sap.fe.cap.travel.Airline`[\"Airline\"]\n    class `sap.fe.cap.travel.Airport`[\"Airport\"]\n    class `sap.fe.cap.travel.Flight`[\"Flight\"]\n  }\n```\n\n----------------------------------------\n\nTITLE: Event Handler with Proceed Pattern in Java\nDESCRIPTION: Shows how to implement an event handler that can pre-process and post-process events using the proceed() method.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@On(event = \"myEvent\")\nvoid wrapMyEvent(EventContext context) {\n    context.put(\"param\", \"Adjusted\"); // pre-process\n    context.proceed(); // delegate to underlying handler\n    context.put(\"result\", 42); // post-process\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Books Entity with Media Type in CDS\nDESCRIPTION: CDS model definition for a Books entity that includes a media type property for storing cover images with PNG format.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_51\n\nLANGUAGE: cds\nCODE:\n```\nentity Books : cuid, managed {\n  title         : String(111);\n  descr         : String(1111);\n  coverImage    : LargeBinary @Core.MediaType: 'image/png';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom AuditLog Handler in Java\nDESCRIPTION: Example of a custom AuditLog handler class that implements the EventHandler interface and provides methods for all four AuditLog event types. The handler is registered with Spring Boot using @Component annotation and specifies its service type using @ServiceName.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/auditlog.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport com.sap.cds.services.auditlog.*;\nimport com.sap.cds.services.handler.*;\nimport com.sap.cds.services.handler.annotations.*;\nimport org.springframework.stereotype.*;\n\n@Component\n@ServiceName(value = \"*\", type = AuditLogService.class)\nclass CustomAuditLogHandler implements EventHandler {\n\n\t@On\n\tpublic void handleDataAccessEvent(DataAccessLogContext context) {\n\t\t// custom handler code\n\t}\n\n\t@On\n\tpublic void handleDataModificationEvent(DataModificationLogContext context) {\n\t\t// custom handler code\n\t}\n\n\t@On\n\tpublic void handleConfigChangeEvent(ConfigChangeLogContext context) {\n\t\t// custom handler code\n\t}\n\n\t@On\n\tpublic void handleSecurityEvent(SecurityLogContext context) {\n\t\t// custom handler code\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Directories with rmdir()\nDESCRIPTION: Demonstrates how to recursively delete directories using the rmdir() utility function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rmdir } = cds.utils\nawait rmdir('dist','db','data')\nawait rmdir('dist/db/data')\n```\n\n----------------------------------------\n\nTITLE: Instance-Based Authorization with User Context\nDESCRIPTION: Shows how to implement instance-based authorization using where conditions that reference user context and entity data.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\nannotate Orders with @(restrict: [\n  { grant: ['READ', 'UPDATE', 'DELETE'], where: 'CreatedBy = $user' } ]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Security in xs-security.json for PDM Integration\nDESCRIPTION: Defines the security configuration in xs-security.json to enable access checks for the PDM service. It specifies the scope and authority for the Personal Data Manager to access the CAP application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/pdm.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"xsappname\": \"incidents-mgmt\",\n  \"tenant-mode\": \"shared\",\n  \"scopes\": [\n    {\n      \"name\": \"$XSAPPNAME.PersonalDataManagerUser\",\n      \"description\": \"Authority for Personal Data Manager\",\n      \"grant-as-authority-to-apps\": [\n        \"$XSSERVICENAME(pdm)\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Protocol Adapters in CAP.js\nDESCRIPTION: Demonstrates how to configure a custom protocol adapter by defining its path, implementation, and additional options in the cds.env.protocols configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_12\n\nLANGUAGE: js\nCODE:\n```\ncds.env.protocols = {\n  'custom-protocol': { path: '/custom', impl: '<custom-impl.js>', ...options }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized CDS Entity\nDESCRIPTION: CDS entity definition with parameters that maps to a parameterized HANA view.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\nnamespace data.model;\ncontext Bookshop {\n  @cds.persistence.exists\n  entity Bookinfo (AUTHOR : String(100)) {\n    key id : Integer;\n    book_author_info : String(100);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Specific Services with cds.serve()\nDESCRIPTION: Examples of serving a single service or all services using cds.serve(), including shorthand notation for serving from a specific model file.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncds.serve('CatalogService')  //> serve a single service\ncds.serve('all')             //> serve all services found\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncds.serve('./reviews-service')  //> is not an identifier through './'\ncds.serve('reviews-service')    //> same as '-', hence both act as:\ncds.serve('all').from('./reviews-service')\n```\n\n----------------------------------------\n\nTITLE: Reviews Service Definition\nDESCRIPTION: CDS service definition for a Reviews service that includes both synchronous API (entities and actions) and asynchronous API (events).\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nservice ReviewsService {\n\n  // Sync API\n  entity Reviews as projection on my.Reviews excluding { likes }\n  action like (review: Reviews:ID);\n  action unlike (review: Reviews:ID);\n\n  // Async API\n  event reviewed : {\n    subject : Reviews:subject;\n    count   : Integer;\n    rating  : Decimal; // new avg rating\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: CDI Database Layer Entity Definitions\nDESCRIPTION: Defines the core database entities required for CDI protocol implementation including Namespaces, Providers, and Subscriptions with their relationships and properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/analytics.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nnamespace com.sap.dps;\n\nentity Namespaces {\n  key NamespaceID : String;\n  Description : String;\n  Providers : Association to many Providers on Providers.Namespace = $self;\n}\n\nentity Providers {\n  key ProviderID : String;\n  key NamespaceID : String;\n  Description : String;\n  ServiceURL : String;\n  Namespace : Association to one Namespaces on Namespace.NamespaceID = NamespaceID;\n  Subscriptions : Association to many Subscriptions on Subscriptions.NamespaceID = NamespaceID\n                                                    and Subscriptions.ProviderID = ProviderID;\n}\n\nentity Subscriptions {\n  key SubscriptionID : String;\n  key NamespaceID : String;\n  key ProviderID : String;\n  Filter : String;\n  Selection : String;\n  Description : String;\n  CurrentDeltaLink : String;\n  PreviousDeltaLink : String;\n  ExternalID : String;\n  EntitySetName : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logical OR Operator in CAP Java CQL Query\nDESCRIPTION: Shows how to use the logical OR operator in a CQL query to filter authors based on name or ID.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_74\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Authors\")\n.where(a ->\n  a.get(\"name\").eq(\"Peter)\n   .or(a.get(\"Id\").eq(1)));\n```\n\n----------------------------------------\n\nTITLE: CDS Event Declaration with Topic Names\nDESCRIPTION: Examples of declaring events in CDS models with namespace and optional topic annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\nnamespace my.namespace;\nservice SomeEventEmitter {\n  event SomeEvent { ... }\n}\n\n//...\n@topic: 'some.very.different.topic-name'\nevent SomeEvent { ... }\n```\n\n----------------------------------------\n\nTITLE: Disabling Outbox for a Specific Service in package.json\nDESCRIPTION: JSON configuration to disable the outbox for a specific service, causing immediate event emission. This is useful when you want certain services to bypass the outbox mechanism.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"messaging\": {\n      \"kind\": \"enterprise-messaging\",\n      \"outbox\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CDS Model with Bound Action and Global Array Type\nDESCRIPTION: Example CDS model defining an entity with a bound action and a global arrayed type. This model is used to demonstrate the POJO generation changes in CAP Java 3.0.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nservice MyService {\n  entity MyEntity {\n\tkey ID: UUID\n  } actions {\n\t// bound action\n\taction doSomething(values: MyArray);\n  }\n}\n\n// global arrayed type\ntype MyArray: many {\n\tvalue: String;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SAP HANA Cloud Package for Node.js CAP Applications\nDESCRIPTION: Command to install the @cap-js/hana package for Node.js CAP applications to use SAP HANA Cloud in production.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @cap-js/hana\n```\n\n----------------------------------------\n\nTITLE: Defining Index CDS for Reuse Package\nDESCRIPTION: CDS code snippet showing how to define an index.cds file as a public entry point for a reuse package.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\n// exposing everything...\nusing from './db/schema';\nusing from './srv/cat-service';\nusing from './srv/admin-service';\n```\n\n----------------------------------------\n\nTITLE: Optimized Expands in CAP.js Database Queries\nDESCRIPTION: Example of deep read SELECT queries with expands that utilize json_object for improved performance with single database query execution.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT.from(Authors, a => {\n  a.ID, a.name, a.books (b => {\n    b.title, b.genre (g => {\n       g.name\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with Runtime-Managed Version for Concurrency Control\nDESCRIPTION: Example of defining an entity with @cds.java.version annotation for runtime-managed versioning, where the version value is exclusively managed by the runtime for optimistic concurrency control.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\nentity Order : cuid {\n    @odata.etag\n    @cds.java.version\n    version : Int32;\n    product : Association to Product;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Toggles in Mock User Settings with YAML\nDESCRIPTION: Configuration example that enables specific features for different mock users. The 'wobble' feature is enabled for user 'Bob' in tenant 'CrazyCars', while 'cruise' and 'parking' features are enabled for 'Alice' in tenant 'SmartCars'.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  security:\n    mock:\n      users:\n        - name: Bob\n          tenant: CrazyCars\n          features:\n            - wobble\n        - name: Alice\n          tenant: SmartCars\n          features:\n            - cruise\n            - parking\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Schemes in CDS Service\nDESCRIPTION: Demonstrates how to annotate a CDS service with multiple authorization methods including HTTP Basic, JWT, and OAuth2 client credentials\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/openapi.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nannotate MyService with @(\n  Authorization: {\n    Authorizations: [\n      { $Type : 'Authorization.Http', Name : 'Basic', Scheme : 'basic' },\n      { $Type : 'Authorization.Http', Name : 'JWT',   Scheme : 'bearer', BearerFormat : 'JWT' },\n      { $Type : 'Authorization.OAuth2ClientCredentials', Name : 'OAuth2',\n        Scopes     : [{\n          Scope      : 'some_scope',\n          Description: 'Scope description'\n        }],\n        RefreshUrl : 'https://some.host/oauth/token/refresh',\n        TokenUrl   : 'https://some.host/oauth/token'\n      },\n    ],\n    SecuritySchemes: [\n      { Authorization : 'Basic' },\n      { Authorization : 'JWT', RequiredScopes : [] },\n      { Authorization : 'OAuth2' },\n    ]\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Services in CAP Node.js Application\nDESCRIPTION: Shows how to configure remote services in a CAP Node.js application using the cds.requires configuration in package.json.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"ReviewsService\": {\n      \"kind\": \"odata\", \"model\": \"@capire/reviews\"\n    },\n    \"OrdersService\": {\n      \"kind\": \"odata\", \"model\": \"@capire/orders\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Results with Group By and Aggregate Functions\nDESCRIPTION: Demonstrates how to group query results by a specific column and use aggregate functions like count to summarize data.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nimport com.sap.cds.ql.CQL;\n\nSelect.from(\"bookshop.Authors\")\n\t.columns(c -> c.get(\"name\"), c -> CQL.count(c.get(\"name\")).as(\"count\"))\n\t.groupBy(g -> g.get(\"name\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring XSUAA Services with vcap.name\nDESCRIPTION: Example of adding vcap.name for services of kind xsuaa in the CDS service configuration to resolve ambiguities when multiple service bindings of the same kind exist.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"requires\": {\n  \"auth\": {\n    \"kind\": \"xsuaa\",\n    \"vcap\": {\n      \"name\": \"bookshop-auth1\"\n    }\n  },\n  \"auth2\": {\n    \"kind\": \"xsuaa\",\n    \"vcap\": {\n      \"name\": \"bookshop-auth2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Admin Service in CDS\nDESCRIPTION: CDS service definition for an AdminService, providing access to Books and Authors entities for authenticated users.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\nusing { sap.capire.bookshop as my } from '../db/schema';\nservice AdminService @(requires:'authenticated-user') {\n  entity Books as projection on my.Books;\n  entity Authors as projection on my.Authors;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated String Syntax in CDS\nDESCRIPTION: Demonstrates how to replace deprecated double-quoted identifiers with correct syntax in CDS models, including string literals and quoted identifiers.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\n@UI.Facets: [{ ..., \"@UI.Hidden\": \"cancelled\" }]\n@Common.Label: \"A Label String\"\nentity Foo { /* ...; */ cancelled: Boolean; }\nentity \"Strange Name, isn't it?\" { /*...*/ }\n```\n\nLANGUAGE: cds\nCODE:\n```\n@UI.Facets: [{ ..., @UI.Hidden: cancelled }]\n@Common.Label: 'A Label String'\nentity Foo { /* ...; */ cancelled: Boolean; }\nentity ![Strange Name, isn't it?] { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Mapping CDS Enumeration Values to OData EDMX XML\nDESCRIPTION: Illustrates how CDS enumeration values are converted to EnumMember properties in OData EDMX XML format.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\n@Common.TextFormat: #html\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Annotation Term=\"Common.TextFormat\" EnumMember=\"Common.TextFormatType/html\"/>\n```\n\nLANGUAGE: cds\nCODE:\n```\n@Communication.Contact: {\n  gender: #F\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Annotation Term=\"Communication.Contact\">\n  <Record Type=\"Communication.ContactType\">\n    <PropertyValue Property=\"gender\" EnumMember=\"Communication.GenderType/F\"/>\n  </Record>\n</Annotation>\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Service URLs in MTA Deployment\nDESCRIPTION: MTA YAML configuration that automatically connects microservices by exposing and consuming service URLs between application modules.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\n - name: reviews\n   provides:\n    - name: reviews-api\n      properties:\n        reviews-url: ${default-url}\n - name: bookshop\n   requires:\n    ...\n    - name: reviews-api\n   properties:\n     cds_requires_REVIEWS_credentials_url: ~{reviews-api/reviews-url}\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Request Templates in CAP CLI\nDESCRIPTION: Command for generating HTTP request template files for all services and entities in a CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncds add http\n```\n\n----------------------------------------\n\nTITLE: Constructing Structured Data in Java\nDESCRIPTION: This Java code demonstrates how to construct structured data representing a book entity using a Map.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> book = new HashMap<>();\nbook.put(\"ID\", 97);\nbook.put(\"title\", \"Dracula\");\n```\n\n----------------------------------------\n\nTITLE: Importing VitePress Data in Vue Component\nDESCRIPTION: A Vue.js script setup block that imports the useData composable from VitePress and extracts theme and version information for use in the component.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/index.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\nconst { theme } = useData()\nconst { versions } = theme.value.capire\n\nimport { data as pages } from './index.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Project Configuration in .cdsrc.json\nDESCRIPTION: Example of static project configuration in .cdsrc.json file, showing how to define required services.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"requires\": {\n  \"db\": \"sql\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Enum Types in JavaScript\nDESCRIPTION: Shows how to use generated enum types in a service implementation, providing type-safe assignment of enum values to entity properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nconst service = new cds.ApplicationService\n\nconst { Ticket, Priority } = require('#cds-models/incidents')\n\nservice.before('CREATE', Ticket, (req) => {\n  req.data.priority = Priority.L  \n\n\n  req.data.status = Ticket.status.UNASSIGNED  \n\n\n\n\n\n})\n\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n for SQLite in package.json\nDESCRIPTION: Configuration for generating additional views for different languages in SQLite. This JSON snippet should be placed in the 'cds' block of package.json.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"i18n\": { \"for_sqlite\": [\"en\", ...] }\n```\n\n----------------------------------------\n\nTITLE: Adding UI Action Buttons with Identification Annotation\nDESCRIPTION: CDS annotations defining action buttons in the travel detail screen using UI.Identification annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\nannotate TravelService.Travel with @UI : {\n  Identification : [\n    { $Type  : 'UI.DataFieldForAction',\n      Action : 'TravelService.acceptTravel',\n      Label  : '{i18n>AcceptTravel}'   }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: CDS Entity Definitions with Excluding Clause\nDESCRIPTION: Demonstrates CDS entity definitions using the excluding clause for selective field inclusion.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cql.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo { foo : String; bar : String; car : String; }\nentity Bar as select from Foo excluding { bar };\nentity Boo as select from Foo { foo, car };\n```\n\n----------------------------------------\n\nTITLE: Adding CAP Java Spring Boot Framework Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the CAP Java Spring Boot framework dependency to a Maven project's pom.xml file. It includes the groupId, artifactId, version, and scope for the cds-framework-spring-boot dependency.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/spring-boot-integration.md#2025-04-18_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-framework-spring-boot</artifactId>\n\t<version>${cds.services.version}</version>\n\t<scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using Simplified Comparison Syntax in Query Conditions\nDESCRIPTION: Demonstrates the simplified syntax for comparing entity properties with literal values in query conditions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_50\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(EMPLOYEE)\n      .columns(e -> e.name())\n      .where(e -> e.age().le(50));\n```\n\n----------------------------------------\n\nTITLE: Country Type SQL Implementation\nDESCRIPTION: Shows the SQL table creation for an entity using the Country type.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE Addresses (\n  street NVARCHAR(5000),\n  town NVARCHAR(5000),\n  country_code NVARCHAR(3) -- foreign key\n);\n```\n\n----------------------------------------\n\nTITLE: Using minus Arithmetic Function in CDS Query Builder\nDESCRIPTION: Example of using the 'minus' function to subtract a value from a literal and use the result as a LIMIT clause.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_63\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Authors\")\n  .columns(\"name\")\n  .limit(a -> literal(3).minus(1));\n```\n\n----------------------------------------\n\nTITLE: Building the New CAP Java Project with Maven\nDESCRIPTION: Maven command to perform the first build of the new CAP Java project after migrating the CDS files and configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Label Configuration\nDESCRIPTION: Example of setting custom labels for log output formatting.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst LOG = cds.log('foo',{label:'bar'})\nLOG.info(\"it's a foo\")\n//> [bar] - it's a foo\n```\n\n----------------------------------------\n\nTITLE: Custom Handlers for MTX Events in Node.js Sidecar\nDESCRIPTION: JavaScript code showing how to add custom handlers for deployment service events in the Node.js sidecar project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\ncds.on('served', () => {\n  const { 'cds.xt.DeploymentService': ds } = cds.services\n  ds.before('subscribe', async (req) => {\n    // HDI container credentials are not yet available here\n    const { tenant } = req.data\n  })\n  ds.before('upgrade', async (req) => {\n    // HDI container credentials are not yet available here\n    const { tenant } = req.data\n  })\n  ds.after('deploy', async (result, req) => {\n    const { container } = req.data.options\n    const { tenant } = req.data\n    ...\n  })\n  ds.after('unsubscribe', async (result, req) => {\n    const { container } = req.data.options\n    const { tenant } = req.data\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Integration Test Module to CAP Java Project\nDESCRIPTION: Command to enhance a CAP Java project with an integration test module using the CDS Maven plugin, creating a separate Maven module for testing.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/getting-started.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmvn com.sap.cds:cds-maven-plugin:add -Dfeature=INTEGRATION_TEST\n```\n\n----------------------------------------\n\nTITLE: Regenerating XSUAA Configuration from CDS Model\nDESCRIPTION: Command to regenerate the xs-security.json file after changes to the CDS model, ensuring authorization configuration stays in sync.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\ncds compile srv --to xsuaa > xs-security.json\n```\n\n----------------------------------------\n\nTITLE: AsyncAPI Configuration in .cdsrc.json\nDESCRIPTION: JSON configuration showing how to set presets for AsyncAPI export in the project configuration file.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/asyncapi.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"export\": {\n    \"asyncapi\": {\n      \"application_namespace\": \"sap.example\"\n      [...]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Destination for Mock Service in Java\nDESCRIPTION: This Java code sets up a destination configuration for the mock service. It creates a DefaultHttpDestination and registers it with a DefaultDestinationLoader.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n@EventListener\nvoid applicationReady(ApplicationReadyEvent ready) {\n  int port = Integer.valueOf(environment.getProperty(\"local.server.port\"));\n  DefaultHttpDestination mockDestination = DefaultHttpDestination\n      .builder(\"http://localhost:\" + port)\n      .name(\"s4-business-partner-api-mocked\").build();\n\n  DefaultDestinationLoader loader = new DefaultDestinationLoader();\n  loader.registerDestination(mockDestination);\n  DestinationAccessor.prependDestinationLoader(loader);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Entity Elements in Java\nDESCRIPTION: Shows how to get a stream of all elements for a given entity using the Model Reflection API.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nCdsEntity books = model.getEntity(\"my.bookshop.Books\");\nStream<CdsElement> elements = books.elements();\n```\n\n----------------------------------------\n\nTITLE: Nested Expands with Structured Results\nDESCRIPTION: Shows how to query deeply structured data using nested postfix projections along associations.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cql.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from Authors {\n   name, address { street, town { name, country }}\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nresults = [\n  {\n    name: 'Victor Hugo',\n    address: {\n      street: '6 Place des Vosges', town: {\n        name: 'Paris',\n        country: 'France'\n      }\n    }\n  }, {\n    name: 'Emily Brontë', …\n  }, …\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Toggle: ISBN (CDS)\nDESCRIPTION: CDS code snippet for defining the 'isbn' feature toggle, extending the Books entity and UI annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nusing { CatalogService, sap.capire.bookshop.Books }\nfrom '../../app/browse/fiori-service';\n\n// Add new field `isbn` to Books\nextend Books with {\n  isbn : String @title:'ISBN';\n}\n\n// Display that new field in list on Fiori UI\nannotate CatalogService.Books with @(\n  UI.LineItem: [... up to {Value:author}, {Value:isbn}, ...]\n);\n```\n\n----------------------------------------\n\nTITLE: Switch to Provider Tenant Context\nDESCRIPTION: Java code demonstrating how to switch to a provider tenant context using RequestContextRunner API in CAP Java SDK.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/multitenancy.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nruntime.requestContext().systemUserProvider().run(context -> {\n   // call technical service\n   ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing @readonly Annotation\nDESCRIPTION: Demonstration of @readonly annotation usage at both entity and element level, showing concise syntax compared to equivalent OData annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\n@readonly entity Foo {   // entity-level\n  @readonly foo : String // element-level\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Domain Entity with Change Tracking Aspect\nDESCRIPTION: Extend the domain entity with the changeTracked aspect to enable change tracking.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nextend model.Books with changelog.changeTracked;\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Outbox Services in Java\nDESCRIPTION: Java code demonstrating how to access custom outbox services from the service catalog.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nOutboxService myCustomOutbox = cdsRuntime.getServiceCatalog().getService(OutboxService.class, \"MyCustomOutbox\");\nOutboxService myOtherCustomOutbox = cdsRuntime.getServiceCatalog().getService(OutboxService.class, \"MyOtherCustomOutbox\");\n```\n\n----------------------------------------\n\nTITLE: Using ETag Predicate with CQL Helper in Tree Style in CDS Query Builder\nDESCRIPTION: Example of using the 'eTag' method from the CQL interface to construct an ETag predicate in tree style for optimistic concurrency control.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_72\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.*;\n\nInstant expectedLastModification = ...;\nUpdate.entity(ORDER)\n      .entry(newData)\n      .where(and(get(\"id\").eq(85), eTag(expectedLastModification)));\n```\n\n----------------------------------------\n\nTITLE: Creating an MTA Extension File for Reducing Archive Size\nDESCRIPTION: Creates a YAML extension file to exclude node_modules from MTA archives during development builds, which reduces deployment time. This approach should only be used for development and when dependencies are available in public registries.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n_schema-version: '3.1'\nID: bookshop-small\nextends: capire.bookshop\nmodules:\n - name: bookshop-srv\n   build-parameters:\n     ignore: [\"node_modules/\"]\n```\n\n----------------------------------------\n\nTITLE: Parsing CDS Model at Runtime\nDESCRIPTION: Shows how to parse a CDS model from a string definition at runtime using the CDS parse function.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/models.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\n\n// define the model\nvar model = cds.parse (`\n    entity Products {\n        key ID: Integer;\n        title: localized String(11);\n        description: localized String;\n    }\n    entity Orders {\n        product: Association to Products;\n        quantity: Integer;\n    }\n`)\n\n// do something with it\nconsole.log (cds.compile.to.yaml (model))\n```\n\n----------------------------------------\n\nTITLE: Using Valid @restrict.to Annotation in CDS\nDESCRIPTION: Example of correct usage of the @restrict.to annotation in a CAP CDS service definition, where the to property is set to the valid 'Viewer' role.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/auth-valid-restrict-to.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nservice CatalogService @(requires: 'authenticated-user') {\n  @readonly\n  @restrict: [\n    { to: 'Viewer' }\n  ]\n  entity Books as projection on my.Books;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Delete with Named Parameters in Java\nDESCRIPTION: Shows how to execute a parameterized CQL delete statement using named parameters. The example creates a delete statement with two parameters (id1 and id2) and provides their values through a map.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.param;\n\nCqnDelete delete = Delete.from(\"bookshop.Books\")\n    .where(b -> b.get(\"ID\").eq(param(\"id1\"))\n            .or(b.get(\"ID\").eq(param(\"id2\"))));\n\nMap<String, Object> paramValues = new HashMap<>();\nparamValues.put(\"id1\", 101);\nparamValues.put(\"id2\", 102);\n\nResult result = service.run(delete, paramValues);\n```\n\n----------------------------------------\n\nTITLE: Converting AsyncAPI JSON to CSN Using cds.import.from.asyncapi() in JavaScript\nDESCRIPTION: Shows how to use the cds.import.from.asyncapi() function to convert an AsyncAPI JSON specification file to CSN. This function is tailored for AsyncAPI specifications.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-import.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst csn = await cds.import.from.asyncapi(AsyncAPI_JSON_file)\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Services\nDESCRIPTION: Shows how to access technical services using their default names defined in service interfaces.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/services.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPersistenceService db = catalog.getService(PersistenceService.class, PersistenceService.DEFAULT_NAME);\n```\n\n----------------------------------------\n\nTITLE: Emitting Personal Data Modification Event\nDESCRIPTION: Demonstrates how to use the AuditLogService to emit a personal data modification event.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/auditlog.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nList<DataModification> dataModifications = new ArrayList<>();\nDataModification modification = DataModification.create();\n// fill data modification object with data\ndataModifications.add(modification);\nauditLogService.logDataModification(dataModifications);\n```\n\n----------------------------------------\n\nTITLE: Enabling Fiori Preview in Node.js CAP Projects\nDESCRIPTION: Configuration to enable Fiori preview in cloud deployments for Node.js CAP projects. This is done by setting the 'fiori_preview' feature flag to true in the package.json or .cdsrc.json file.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"features\": {\n      \"fiori_preview\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling OData Count Queries in Java\nDESCRIPTION: Example of handling OData $count requests in a custom @On event handler by returning a Map with count value.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@On(entity = MyEntity_.CDS_NAME)\nList<Map<String, Object>> readMyEntity(CdsReadEventContext context) {\n\tif (CqnAnalyzer.isCountQuery(context.getCqn())) {\n\t\tint count = 100; // determine correct count value\n\t\treturn List.of(Collections.singletonMap(\"count\", count));\n\t}\n\t// handle non /$count requests\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Bindings for Native Build\nDESCRIPTION: JSON configuration file defining service bindings for HANA and XSUAA that are required during the native image build process. This configuration provides metadata about expected service bindings at build time.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/optimizing.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hana\": [ { \"name\": \"<hana-binding-name>\" } ],\n    \"xsuaa\": [ { \"name\": \"<xsuaa-binding-name>\" } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Identifiers Without Reserved SQL Keywords in CDS\nDESCRIPTION: Example of a CDS schema that avoids using any reserved SQL keywords as identifiers, which passes the no-db-keywords rule with no warnings.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/no-db-keywords.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nnamespace db;\n\nentity Books {\n  key ID : Integer;\n  title  : String;\n  author : Association to Authors;\n}\n\nentity Authors {\n  key ID : Integer;\n  name   : String;\n  books  : Association to many Books on books.author = $self;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Localized Entities for CDI in CAP CDS\nDESCRIPTION: Shows how to expose localized entities and their corresponding .texts entities for CDI. Demonstrates handling of localized elements by excluding them from the base entity and explicitly exposing the texts entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/analytics.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\n@path:'/cdi-countries'\nservice com.sap.cloudDataIntegrationData.Countries {\n  @DataIntegration.Extractable\n  entity Countries as projection on common.Countries {\n    *\n  } excluding {name, description,  // exclude localized elements\n               texts, localized    // exclude unmanaged associations to the text entity\n  };\n\n  entity Countries_texts as projection on common.Countries.texts;  // explicitly expose texts entity\n}\n\n@path:'/cdi-currencies'\nservice com.sap.cloudDataIntegrationData.Currencies {\n  @DataIntegration.Extractable\n  entity Currencies as projection on common.Currencies {\n    *\n  } excluding {name, description, texts, localized};\n\n  entity Currencies_texts as projection on common.Currencies.texts;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stream API for Query Results in CAP Java\nDESCRIPTION: Demonstrates processing query results using Java's Stream API for more functional-style operations. The example shows both direct forEach usage and mapping operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nResult result = ...\n\nresult.forEach(r -> System.out.println(r.get(\"title\")));\n\nresult.stream().map(r -> r.get(\"title\")).forEach(System.out::println);\n```\n\n----------------------------------------\n\nTITLE: Using substring Method to Extract Part of String in CDS Query Builder\nDESCRIPTION: Example of using the 'substring' method to extract the first two characters of author names and creating a derived column named 'shortname'.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_59\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Authors\")\n  .columns(a -> a.get(\"name\").substring(0,2).as(\"shortname\"))\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Entity and Element Names in CDS Schema\nDESCRIPTION: This example demonstrates proper naming conventions in CDS where none of the entity or element names start with a dollar sign ($), which complies with the no-dollar-prefixed-names rule.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/no-dollar-prefixed-names.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nnamespace sap.capire.bookshop;\n\nentity Books {\n  key ID : Integer;\n  title  : String;\n  stock  : Integer;\n  price  : Decimal;\n  pages  : Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Tenant Provisioning\nDESCRIPTION: JavaScript handler for the internal createTenant endpoint that is called for both synchronous and asynchronous tenant provisioning, allowing custom code execution.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = (service) => {\n  service.on('createTenant', async (req, next) => {\n    await next() // default implementation creating HDI container\n    const { subscriptionData } = req.data // original request payload\n    // custom code\n    return '<bookshop-srv-url>/admin'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of srv.run for Query Execution\nDESCRIPTION: Shows the internal implementation of srv.run that creates a CDS Request object and dispatches it to handlers.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nlet req = new cds.Request({query})\nreturn this.dispatch(req)\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Configuration\nDESCRIPTION: Command to add basic TypeScript configuration to a CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/typescript.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncds add typescript\n```\n\n----------------------------------------\n\nTITLE: Merged Configuration Result Example\nDESCRIPTION: Shows the final effective configuration after merging settings from multiple sources including defaults, project settings, and environment variables.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_16\n\nLANGUAGE: js\nCODE:\n```\ncds.env = { ...,\n  requires: {\n    db: {\n      kind: \"sqlite\",\n      model: \"./db\",\n      credentials: { database:\"my.sqlite\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating XSUAA and Destination Service Instances\nDESCRIPTION: Shell commands for creating the necessary service instances and service keys in Cloud Foundry to enable local access to remote destinations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_50\n\nLANGUAGE: sh\nCODE:\n```\ncf create-service xsuaa application cpapp-xsuaa\ncf create-service-key cpapp-xsuaa cpapp-xsuaa-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Plugin Groups for CDS\nDESCRIPTION: XML configuration that adds the com.sap.cds plugin group to Maven settings.xml, enabling the use of the shortened 'cds' prefix for the cds-maven-plugin from any directory.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/running.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<pluginGroups>\n    <pluginGroup>com.sap.cds</pluginGroup>\n</pluginGroups>\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceLoader for CdsRuntimeConfiguration in CAP Java\nDESCRIPTION: This snippet shows the content required in the ServiceLoader configuration file to register a custom handler for CAP Java. The file must be placed in the META-INF/services directory and named after the fully qualified interface name.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/building-plugins.md#2025-04-18_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\ncom.sap.example.cds.SampleHandlerRuntimeConfiguration\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies for CAP Service Consumption\nDESCRIPTION: Commands to install required SAP Cloud SDK packages for HTTP client, connectivity, and resilience features in Node.js CAP applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @sap-cloud-sdk/http-client@3.x @sap-cloud-sdk/connectivity@3.x @sap-cloud-sdk/resilience@3.x\n```\n\n----------------------------------------\n\nTITLE: Log Levels Configuration\nDESCRIPTION: JSON configuration for setting log levels in package.json.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"log\": {\n      \"levels\": {\n        \"sql\": \"debug\",\n        \"cds\": \"info\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting UserInfo in Spring Handler Bean\nDESCRIPTION: Demonstrates how to inject UserInfo in a Spring handler bean using dependency injection.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_28\n\nLANGUAGE: java\nCODE:\n```\n@Autowire\nUserInfo user;\n```\n\n----------------------------------------\n\nTITLE: Binding Service Instances in mta.yaml\nDESCRIPTION: YAML configuration in mta.yaml to bind the Identity Authentication Service and SAP Cloud Application Event Hub instances to the application with necessary authentication parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-broker.md#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: incidents-srv\n    provides:\n      - name: incidents-srv-api\n        properties:\n          url: ${default-url} \n    requires:\n      - name: incidents-ias\n        parameters:\n          config:\n            credential-type: X509_GENERATED\n            app-identifier: cap.incidents #> any value, e.g., reuse MTA ID\n      - name: incidents-event-broker\n        parameters:\n          config:\n            authentication-type: X509_IAS\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Toggle: Reviews (CDS)\nDESCRIPTION: CDS code snippet for defining the 'reviews' feature toggle, extending UI annotations to display the rating field.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nusing { CatalogService } from '../../app/browse/fiori-service';\n\n// Display existing field `rating` in list on Fiori UI\nannotate CatalogService.Books with @(\n  UI.LineItem: [... up to {Value:author}, {Value:rating}, ...]\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Draft Deletion Timeout in YAML\nDESCRIPTION: Configures the timeout duration for automatic deletion of stale drafts. Default is 30 days.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/fiori-drafts.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncds.drafts.deletionTimeout: 8w\n```\n\n----------------------------------------\n\nTITLE: Health Check Response Example\nDESCRIPTION: Example JSON response from the health check endpoint showing component status.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"UP\",\n  \"components\": {\n    \"db\": {\n      \"status\": \"UP\"\n    },\n    \"ping\": {\n      \"status\": \"UP\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Identifiers for Change Tracking\nDESCRIPTION: Annotate an entity to define identifiers for change tracking, which are stored with the changes in the log.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nannotate Bookshop.Book with @changelog: [\n  title\n];\n```\n\n----------------------------------------\n\nTITLE: Practical Example of Custom Fields in Log Output\nDESCRIPTION: A practical example of how SQL error logs appear with custom fields. This demonstrates how the 'query' custom field provides the actual SQL statement that caused the error, making debugging easier.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_13\n\nLANGUAGE: log\nCODE:\n```\nmsg: SQL Error: Unknown column \"IDONTEXIST\" in table \"DUMMY\"\n...\ncustom.string.key0: query\ncustom.string.value0: SELECT IDONTEXIST FROM DUMMY\n```\n\n----------------------------------------\n\nTITLE: Deprecated JOIN Syntax in CQN Queries\nDESCRIPTION: Example of a deprecated JOIN syntax in CQN queries that is no longer supported in the new database services implementation.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nSELECT.from(Books).join(Authors,...)\n```\n\n----------------------------------------\n\nTITLE: Generated HANA Migration Table SQL with Annotations\nDESCRIPTION: This shows the SQL content generated in an hdbmigrationtable file from the CDS model with @sql.append annotations. It includes both the table definition and ALTER statements for migrations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n== version=2\nCOLUMN TABLE E (\n  ...,\n  text NVARCHAR(100) FUZZY SEARCH INDEX ON\n) PERSISTENT MEMORY ON\n\n== migration=2\nALTER TABLE E PERSISTENT MEMORY ON;\nALTER TABLE E ALTER (text NVARCHAR(100) FUZZY SEARCH INDEX ON);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Remote OData Service in Spring Boot (YAML)\nDESCRIPTION: This YAML configuration sets up a mock remote OData service in a Spring Boot application using a custom profile. It defines the service name, model, path, and destination.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  config.activate.on-profile: mocked\ncds:\n  application.services:\n  - name: API_BUSINESS_PARTNER-mocked\n    model: API_BUSINESS_PARTNER\n    serve.path: API_BUSINESS_PARTNER\n  remote.services:\n    API_BUSINESS_PARTNER:\n      destination:\n        name: \"s4-business-partner-api-mocked\"\n```\n\n----------------------------------------\n\nTITLE: Adding Initial Data Files to CAP Project\nDESCRIPTION: Command to add CSV files with header lines for all entities to the db/data/ folder in a CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncds add data\n```\n\n----------------------------------------\n\nTITLE: Returning Entity List as Event Result in CAP Java SDK\nDESCRIPTION: Event handler that returns a custom list of Books entities as the result. This approach allows complete control over the response data without using the Result object directly.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n@On(entity = Books_.CDS_NAME)\npublic List<Books> readBooks(CdsReadEventContext context) {\n    Books book = Struct.create(Books.class);\n    // ...\n    return Arrays.asList(book);\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration in .env File\nDESCRIPTION: Example of using JSON format in .env files to specify more complex configuration options.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\ncds.requires.db = { \"kind\": \"sql\" }\n```\n\n----------------------------------------\n\nTITLE: Inferring Entity Type from Parameter in CAP Java SDK\nDESCRIPTION: Event handler that omits the entity attribute in the annotation and lets CAP infer it from the Books parameter. This reduces redundancy and ensures consistency between parameter and handler registration.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = { CqnService.EVENT_CREATE, CqnService.EVENT_UPDATE })\npublic void changeBooks(List<Books> books) { }\n```\n\n----------------------------------------\n\nTITLE: Setting Inline Count in Query Results with ResultBuilder in Java\nDESCRIPTION: Shows how to include an inline count with query results using the ResultBuilder's inlineCount method alongside selectedRows.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nResult r = selectedRows(asList(row)).inlineCount(inlineCount).result();\n```\n\n----------------------------------------\n\nTITLE: Entity with Functions Without Arguments\nDESCRIPTION: Example of using SAP HANA functions without arguments in CDS models.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_12\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo { key ID : UUID; }\nentity Bar as select from Foo {\n  ID, current_timestamp,\n  sysuuid() as sysid\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TextsAspect in CDS\nDESCRIPTION: CDS aspect definition for 'TextsAspect' used in generating .texts entities for localized elements.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\naspect sap.common.TextsAspect {\n  key locale: sap.common.Locale;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event in Reviews Service\nDESCRIPTION: Shows how to define a business-level extension point in a service definition using custom events.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_23\n\nLANGUAGE: cds\nCODE:\n```\nservice ReviewsService { ...\n   event ReviewAdded {\n      subject  : ReviewedSubject;\n      title    : String;\n      message  : String;\n      reviewer : User;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom On Handler for Media Processing and Persistence\nDESCRIPTION: Event handler implementation that processes media content and controls its persistence using CQN-based service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_55\n\nLANGUAGE: java\nCODE:\n```\n@On(event = CdsService.EVENT_UPDATE)\npublic Result processCoverImage(CdsUpdateEventContext context, List<Books> books) {\n\tbooks.forEach(book -> {\n\t\tbook.setCoverImage(new CoverImagePreProcessor(book.getCoverImage()));\n\t});\n\n\t// example for invoking some CQN-based service\n\treturn service.run(Update.entity(Books_.CDS_NAME).entries(books));\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering a Tenant Upgrade with HDI Parameters\nDESCRIPTION: HTTP POST request example showing how to upgrade specific tenants with additional HDI deployment parameters like trace and version.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nPOST /-/cds/saas-provisioning/upgrade HTTP/1.1\nContent-Type: application/json\n\n{\n    \"tenants\": [\"t1\"],\n    \"options\": {\n        \"_\": {\n            \"hdi\": {\n                \"deploy\": {\n                    \"trace\": \"true\",\n                    \"version\": \"true\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Stream Processor for Media Content\nDESCRIPTION: Custom FilterInputStream implementation for pre-processing media content streams, allowing byte-level manipulation of uploaded or downloaded data.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_53\n\nLANGUAGE: java\nCODE:\n```\npublic class CoverImagePreProcessor extends FilterInputStream {\n\n\tpublic CoverImagePreProcessor(InputStream wrapped) {\n\t\tsuper(wrapped);\n\t}\n\n\t@Override\n\tpublic int read() throws IOException {\n\t\tint nextByte = super.read();\n\n\t\t// ... your custom processing code on nextByte\n\n\t\treturn nextByte;\n\t}\n\n\t@Override\n\tpublic int read(byte[] bts, int off, int len) throws IOException {\n\t\tint bytesRead = super.read(bts, off, len);\n\n\t\t// ... your custom processing code on bts array\n\n\t\treturn bytesRead;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Public Entry Points in index.cds\nDESCRIPTION: Shows how to define public entry points for a reuse package using an index.cds file in the root folder.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_27\n\nLANGUAGE: cds\nCODE:\n```\nnamespace my.reuse.package;\nusing from './db/schema';\nusing from './srv/cat-service';\nusing from './srv/admin-service';\n```\n\n----------------------------------------\n\nTITLE: Using .from() Method with cds.serve()\nDESCRIPTION: Example of using the .from() method to specify a custom model source for cds.serve().\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst csn = await cds.load('my-services.cds')\ncds.serve('all').from(csn)...\n```\n\n----------------------------------------\n\nTITLE: Running CDS Watch in TypeScript Mode\nDESCRIPTION: Example showing CDS watch command output when detecting TypeScript configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/typescript.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncap/sflight $ cds watch\n\nDetected tsconfig.json. Running with tsx.\n...\n[cds] serving TravelService { impl: 'srv/travel-service.ts', path: '/processor' }\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger with Different Options\nDESCRIPTION: Demonstrates various ways to initialize a logger with different levels and options.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// all following are equivalent...\nconst LOG = cds.log('foo', 'warn')  //> shorthand for:\nconst LOG = cds.log('foo', { level: 'warn' })\n// including case-insensitivity...\nconst LOG = cds.log('foo', 'WARN')  //> shorthand for:\nconst LOG = cds.log('foo', { level: 'WARN' })\n```\n\n----------------------------------------\n\nTITLE: Tenant Subscription Methods\nDESCRIPTION: Multiple methods for subscribing tenants to the application, including CLI commands, HTTP requests, and JavaScript API calls.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncds subscribe t1 --to http://localhost:4005 -u yves:\ncds subscribe t2 --to http://localhost:4005 -u yves:\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:4005/-/cds/deployment/subscribe HTTP/1.1\nContent-Type: application/json\nAuthorization: Basic yves:\n\n{ \"tenant\": \"t1\" }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst ds = await cds.connect.to('cds.xt.DeploymentService')\nawait ds.subscribe('t1')\n```\n\n----------------------------------------\n\nTITLE: Generated Java Interface for Renamed CDS Entity Type\nDESCRIPTION: Displays the resulting Java interface generated for a CDS entity type that has been renamed using @cds.java.this.name annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n@CdsName(\"Books\")\npublic interface Book extends CdsData {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Projections in CAP CDS\nDESCRIPTION: This snippet defines projections on existing entities to map to SAP S/4HANA or ABAP table signatures. Requires '@sap/cds/common' library and includes entity names specific to SAP integration.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_17\n\nLANGUAGE: cds\nCODE:\n```\nusing { sap.common.Countries } from '@sap/cds/common';\nentity Countries4GFN as projection on Countries {\n  code as CountryCodeAlpha2,\n  name as CountryShortName,\n  // ...\n}\nentity Countries4ABAP as projection on Countries {\n  code as LAND,\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Service Provider and Observer Implementation\nDESCRIPTION: Illustrates the difference between implementing a service provider and an observer in Node.js.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass SomeServiceProvider { async init() {\n  this.on ('SomeEvent', req => { ... })\n}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass Observer { async init() {\n  const that = await cds.connect.to ('SomeService')\n  that.on ('SomeEvent', req => { ... })\n}}\n```\n\n----------------------------------------\n\nTITLE: Using Static Top-Level Imports with useEntitiesProxy Option\nDESCRIPTION: Demonstrates the useEntitiesProxy option introduced in version 0.26.0 of @cap-js/cds-typer, which allows for static top-level imports but requires use only in contexts where the CDS runtime is fully booted.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\n// ✅ top level import now works both during design time and runtime\nimport { Book } from '#cds-models/sap/capire/bookshop'\n\n// ❌ works during design time, but will cause runtime errors\nBook.actions\n\nexport class MyService extends cds.ApplicationService {\n  async init () {\n    // ✅ cds runtime is fully booted at this point\n    Book.actions  // works\n    this.on('READ', Book, req => { req.data.author  /* works as well */  })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Minimal CAP Application Sample\nDESCRIPTION: Command to add a minimal CAP application structure without UI to an existing project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncds add tiny-sample\n```\n\n----------------------------------------\n\nTITLE: Defining Order and OrderItem Entities\nDESCRIPTION: This snippet defines the basic structure for OrdersHeaders and OrdersItems entities, which are used in subsequent examples to demonstrate efficient and inefficient querying practices.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\nentity OrdersHeaders : managed {\n  key ID   : UUID;\n  OrderNo  : String;\n  buyer    : User;\n  currency : Currency;\n  Items    : Composition of many OrdersItems on Items.Header = $self;\n}\nentity OrdersItems   {\n    key ID    : UUID;\n    product   : Association to Products;\n    quantity  : Integer;\n    title     : String;\n    price     : Double;\n    Header    : Association to OrdersHeaders;\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Native HANA Associations in CDS Configuration\nDESCRIPTION: Configure .cdsrc.json to disable generation of native SAP HANA associations in the database.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/hdbcds-to-hdbtable.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sql\": {\n    \"native_hana_associations\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Completion Handling in Java\nDESCRIPTION: Demonstrates how to properly complete event processing using setCompleted() and setResult() methods.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ncontext.setCompleted();\n```\n\nLANGUAGE: java\nCODE:\n```\ncontext.setResult(myResult);\n```\n\n----------------------------------------\n\nTITLE: Running CDS Lint CLI\nDESCRIPTION: Command to execute CDS linting in the project root folder\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/index.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds lint\n```\n\n----------------------------------------\n\nTITLE: Custom OData 404 Response Handler\nDESCRIPTION: JavaScript code to customize the 404 response for unhandled OData requests to return JSON instead of HTML.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet app\ncds.on('bootstrap', a => {\n  app = a\n})\ncds.on('served', () => {\n  app.use((req, res, next) => {\n    // > unhandled request\n    res.status(404).json({ message: 'Not Found' })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Installing CDS Add Package from NPM\nDESCRIPTION: Example of using cds add command with package option to install from npm registry\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncds add my-facet -p @cap-js-community/example\n```\n\n----------------------------------------\n\nTITLE: Event Handling for Background Jobs in CAP JS\nDESCRIPTION: Shows how to register event handlers for background job execution states like succeeded, failed, and done events.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet job = cds.spawn(...)\njob.on('succeeded', ()=>console.log('succeeded'))\n```\n\n----------------------------------------\n\nTITLE: Parsing CQL Queries\nDESCRIPTION: Examples of parsing CQL query strings using both function call and tagged template string syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet cqn = cds.parse.cql (`SELECT * from Foo`)\nlet cqn = cds.parse.cql `SELECT * from Foo`\n```\n\n----------------------------------------\n\nTITLE: Enabling Persistent Outbox Globally in package.json\nDESCRIPTION: JSON configuration to enable the persistent outbox feature globally for all outboxed services. This configuration ensures transactional consistency for all outboxed operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"outbox\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CAP project default directory structure visualization\nDESCRIPTION: A tree view representation of the default directory structure for a CAP project, showing the main folders and files that are created by the cds init command.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/index.md#2025-04-18_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nbookshop/        # Your project's root folder\n├─ app/          # UI-related content\n├─ srv/          # Service-related content\n├─ db/           # Domain models and database-related content\n├─ package.json  # Configuration for cds + cds-dk\n└─ readme.md     # A readme placeholder\n```\n\n----------------------------------------\n\nTITLE: Polling Asynchronous Extension Task Status\nDESCRIPTION: HTTP GET request to poll the status of an asynchronous extension activation task, and example response showing the operation status.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET /-/cds/jobs/pollTask(ID='<taskID>') HTTP/1.1\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"status\": \"FINISHED\",\n  \"op\": \"activateExtension\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sensitive Data Read Event Logging in JavaScript\nDESCRIPTION: Example of logging a sensitive data read event with subject and object details.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait audit.log ('SensitiveDataRead', {\n  data_subject: {\n    type: 'sap.capire.bookshop.Customers',\n    id: { ID: '1923bd11-b1d6-47b6-a91b-732e755fa976' },\n    role: 'Customer',\n  },\n  object: {\n    type: 'sap.capire.bookshop.BillingData',\n    id: { ID: '399a2704-3d2d-4fa1-9e7d-a4e45c67749b' }\n  },\n  attributes: [\n    { name: 'creditCardNo' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring cds-typer Output Directory in JavaScript\nDESCRIPTION: Shows how to set a custom output directory for cds-typer using the cds.env configuration in a CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncds.typer.output_directory: myCustomDirectory\n```\n\n----------------------------------------\n\nTITLE: Binding to Shared Service Instance in Cloud Foundry\nDESCRIPTION: Demonstrates binding the 'messaging' service of a CAP application to a shared 'bookshop-redis' service instance in Cloud Foundry. This requires Space Developer role in both spaces.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncds bind messaging --to bookshop-redis\n```\n\n----------------------------------------\n\nTITLE: Constructing Error Objects with cds.error() in JavaScript\nDESCRIPTION: Examples of different ways to construct error objects using the cds.error() helper function, including creating instances with new or throwing errors directly.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlet e = new cds.error ('message')\nlet e = new cds.error ('message', { code, ... })\nlet e = new cds.error ({ message, code, ... })\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tenant-Specific Extension\nDESCRIPTION: HTTP DELETE request example showing how to delete a previously created extension by its ID.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nDELETE /-/cds/extensibility/Extensions/isbn-extension HTTP/1.1\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Java Keywords in CDS with @cds.java.name Annotation\nDESCRIPTION: This example shows how to correctly handle Java reserved keywords in CDS by using the @cds.java.name annotation to provide alternative names for Java code generation.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/no-java-keywords.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nnamespace my.bookshop;\n\nentity Books {\n  key ID : Integer;\n  // We use @cds.java.name to handle Java reserved keywords\n  @cds.java.name : 'newRelease'\n  new : Boolean;\n  @cds.java.name : 'packageName'\n  package : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking SSH Permissions for CF Debugging\nDESCRIPTION: Commands to log into Cloud Foundry and verify SSH access for a deployed application before debugging.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\ncf login                   # select the correct org and space here\ncf ssh-enabled <app-name>  # to check if SSH is enabled\n```\n\n----------------------------------------\n\nTITLE: Multitenant DataSource Configuration\nDESCRIPTION: Java configuration for creating and initializing an in-memory tenant-independent datasource.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DataSourceConfig {\n\n    @Bean\n    @ConfigurationProperties(\"app.datasource.tenant-independent\")\n    public DataSourceProperties tenantIndependentDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    @Bean\n    public DataSource tenantIndependentDataSource() {\n        return tenantIndependentDataSourceProperties()\n            .initializeDataSourceBuilder()\n            .build();\n    }\n\n    @Bean\n    public DataSourceInitializer tenantIndependentInitializer() {\n        ResourceDatabasePopulator resourceDatabasePopulator = new ResourceDatabasePopulator();\n        resourceDatabasePopulator.addScript(new ClassPathResource(\"schema.sql\"));\n\n        DataSourceInitializer dataSourceInitializer = new DataSourceInitializer();\n        dataSourceInitializer.setDataSource(tenantIndependentDataSource());\n        dataSourceInitializer.setDatabasePopulator(resourceDatabasePopulator);\n        return dataSourceInitializer;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Audit Log Service Interface\nDESCRIPTION: CDS service definition for audit logging interface following the Calesi pattern.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_29\n\nLANGUAGE: cds\nCODE:\n```\nservice AuditLogService {\n\n  event PersonalDataModified : LogEntry {\n    subject   : DataSubject;\n    changes   : many {\n      field : String;\n      old   : String;\n      new   : String;\n    };\n    tenant    : Tenant;\n    user      : User;\n    timestamp : DateTime:\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: CSN Type Definitions Example\nDESCRIPTION: Demonstrates various type definitions in CSN, including scalar, structured, and enumeration types.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n({\ndefinitions:{\n  'Name':     {type:\"cds.String\"},\n  'Currency': {type:\"cds.String\", length:3},\n  'USD':      {type:\"Currency\"},\n  'Amount':   {elements:{\n    'value':    {type:\"cds.Decimal\", precision:11, scale:3},\n    'currency': {type:\"Currency\"},\n  }},\n  'SortOrder':{enum:{ 'asc':{}, 'desc':{} }}\n}})\n```\n\n----------------------------------------\n\nTITLE: SQL DDL for Temporal Entity with Composite Primary Key\nDESCRIPTION: This SQL DDL statement demonstrates how a temporal entity is translated to a database table, with a composite primary key including the validFrom timestamp.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE com_acme_hr_WorkAssignments (\n    ID : nvarchar(36),\n    validFrom : timestamp,\n    validTo : timestamp,\n    -- ...\n    PRIMARY KEY ( ID, validFrom )\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Time Slice in SQL\nDESCRIPTION: This SQL query shows how to retrieve a specific time slice from a temporal entity by specifying both the ID and validFrom values.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from WorkAssignments WHERE ID='WA1' and validFrom='2017-01-01'\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Data Structures for Books and Authors\nDESCRIPTION: Example of setting up mock data structures for Authors and Books entities for testing or demonstration purposes.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nAuthors.data = {\n  111: { ID:111, name:'Emily Brontë' },\n  112: { ID:112, name:'Edgar Allan Poe' },\n  114: { ID:114, name:'Richard Carpenter' },\n}\nBooks.data = {\n  211: { ID:211, title:'Wuthering Heights', author: Authors.data[111], stock:11 },\n  212: { ID:212, title:'Eleonora', author: Authors.data[112], stock:14 },\n  214: { ID:214, title:'Catweazle', author: Authors.data[114], stock:114 },\n}\n```\n\n----------------------------------------\n\nTITLE: MTX Service REST API Examples\nDESCRIPTION: Collection of HTTP requests showing how to interact with MTX services via REST APIs for operations like tenant subscription and CSN retrieval.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncds watch\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /-/cds/deployment/subscribe HTTP/1.1\nContent-Type: application/json\n\n{\n  \"tenant\": \"t1\"\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /-/cds/model-provider/getCsn HTTP/1.1\nContent-Type: application/json\n\n{\n  \"tenant\": \"t1\",\n  \"toggles\": [\"*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: UI Integration with Validity-Based Code Lists\nDESCRIPTION: Configures UI fields to use value help from a filtered pick list entity. Uses 'CountriesPickList' to manage available options in dropdowns.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_23\n\nLANGUAGE: cds\nCODE:\n```\nannotate YourService.EntityName with {\n\n  countries @(\n    Common: {\n      Text: country.name , // TextArrangement: #TextOnly,\n      ValueList: {\n        Label: 'Country Value Help',\n        CollectionPath: 'CountriesPickList',\n        Parameters: [\n          { $Type: 'Common.ValueListParameterInOut',\n            LocalDataProperty: country_code,\n            ValueListProperty: 'code'\n          },\n          { $Type: 'Common.ValueListParameterDisplayOnly',\n            ValueListProperty: 'name'\n          }\n      ]\n      }\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Server.js with Options Override in CAP\nDESCRIPTION: Example of a custom server.js implementation that overrides certain options before delegating to the built-in server.js implementation, allowing for customized server bootstrapping.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-server.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\n// react on bootstrapping events...\ncds.on('bootstrap', ...)\ncds.on('served', ...)\n// handle and override options\nmodule.exports = (o)=>{\n  o.from = 'srv/precompiled-csn.json'\n  o.app = require('express')()\n  return cds.server(o) //> delegate to default server.js\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Undeploy Configuration Including Table Data\nDESCRIPTION: This JSON configuration extends the standard undeploy configuration by adding hdbtabledata files, allowing for the removal of deployed CSV data during updates.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n[\n  [...],\n  \"src/gen/**/*.hdbtabledata\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Localized Entity in CDS\nDESCRIPTION: CDS entity definition for 'Foo' with localized string fields for name and description.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo {\n  key ID : UUID;\n  name   : localized String;\n  descr  : localized String;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Messaging for Development\nDESCRIPTION: This JSON configuration snippet sets up file-based messaging for the development profile in a CAP application. It's typically added to the package.json file of the project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_9\n\nLANGUAGE: jsonc\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"[development]\": { \"kind\": \"file-based-messaging\" }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fields for SAP Application Logging Service in jsonc\nDESCRIPTION: Default JSON formatter configuration for custom fields in SAP Application Logging Service. This defines how additional information like SQL queries, validation details, and error reasons are indexed and displayed in logs.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_10\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"log\": {\n    \"als_custom_fields\": {\n      // <key>: <index>\n      \"query\": 0,                //> sql\n      \"target\": 1, \"details\": 2, //> generic validations\n      \"reason\": 3                //> errors\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CheckDataVisitor to Evaluate Data Against Filter in Java\nDESCRIPTION: This snippet demonstrates how to use the CheckDataVisitor to evaluate whether given data matches a filter expression. It creates an instance of the visitor for each data item, applies the filter, and prints the result.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nfor (Map<String, Object> book : books) {\n    CheckDataVisitor v = new CheckDataVisitor(book);\n    filter.accept(v);\n    System.out.println(book.get(\"title\") + \" \" +\n            (v.matches() ? \"match\" : \"no match\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Providing i18n Data in JSON Format\nDESCRIPTION: Example showing how to provide internationalization data in JSON format as an alternative to properties files when creating extensions.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"i18n\": [{\n  \"name\": \"i18n.json\",\n  \"content\": \"{\\\"\\\":{\\\"Books_stock\\\":\\\"Stock\\\"},\\\"de\\\":{\\\"Books_stock\\\":\\\"Bestand\\\"}}\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest Environment for TypeScript\nDESCRIPTION: Setup file configuration for enabling TypeScript support in Jest tests.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/typescript.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async () => {\n  process.env.CDS_TYPESCRIPT = \"true\";\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations in CAP JS\nDESCRIPTION: Shows how to add annotations to entities and elements using the '@' prefix.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'Employees': {kind:\"entity\",\n    '@title':\"Mitarbeiter\",\n    '@readonly':true,\n    elements:{\n      'firstname': {type:\"cds.String\", '@title':\"Vorname\"},\n      'surname':   {type:\"cds.String\", '@title':\"Nachname\"},\n    }\n  },\n}})\n```\n\n----------------------------------------\n\nTITLE: MTX Sidecar Package Configuration\nDESCRIPTION: Package.json configuration for setting up an MTX sidecar as a separate Node.js service\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"bookshop-mtx\", \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"@sap/cds\": \"^7\",\n    \"@sap/cds-hana\": \"^2\",\n    \"@sap/cds-mtxs\": \"^1\",\n    \"@sap/xssec\": \"^4\",\n    \"express\": \"^4\"\n  },\n  \"devDependencies\": {\n    \"@cap-js/sqlite\": \"^1\"\n  },\n  \"scripts\": {\n    \"start\": \"cds-serve\"\n  },\n  \"cds\": {\n    \"profile\": \"mtx-sidecar\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing XSSEC Package for XSUAA Authentication\nDESCRIPTION: Command to add the @sap/xssec package as a dependency for XSUAA-based authentication in a CAP.js project.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @sap/xssec\n```\n\n----------------------------------------\n\nTITLE: Activating Extensions\nDESCRIPTION: Command to activate extensions into a tenant, with optional directory specification.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/assets/customization-old.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncds activate [<extension-project-directory>]\n```\n\n----------------------------------------\n\nTITLE: Localization Property Files for Message Translation\nDESCRIPTION: Example of default and German localization property files used for translating error messages with parameterized content using MessageFormat syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nmy.message.key = This is a localized message with {0} parameters\n```\n\nLANGUAGE: properties\nCODE:\n```\nmy.message.key = Das ist ein übersetzter Text mit {0} Parametern\n```\n\n----------------------------------------\n\nTITLE: Shared Database Project Structure for CAP Microservices\nDESCRIPTION: Illustrates the project structure with a dedicated shared-db module that references the schemas from other microservices. Shows how dependencies are managed through NPM to collect models in a centralized way.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\n<PROJECT-ROOT>/\n├─ bookstore/\n├─ reviews/\n├─ orders/\n└─ shared-db/\n   └─ db/\n     └─ schema.cds # references schemas of bookstore, reviews, orders\n   └─ package.json # npm dependencies to bookstore, reviews, orders\n├─ ...\n└─ package.json\n```\n\n----------------------------------------\n\nTITLE: Creating CDS Model in JavaScript Runtime\nDESCRIPTION: Demonstrates how to create a CDS model programmatically using plain JavaScript objects with product and order entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/models.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\n\n// define the model\nvar model = {definitions:{\n    Products: {kind:'entity', elements:{\n        ID: {type:'Integer', key:true},\n        title: {type:'String', length:11, localized:true},\n        description: {type:'String', localized:true},\n    }},\n    Orders: {kind:'entity', elements:{\n        product: {type:'Association', target:'Products'},\n        quantity: {type:'Integer'},\n    }},\n}}\n\n// do something with it\nconsole.log (cds.compile.to.yaml (model))\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Optimization Mode for SAP HANA\nDESCRIPTION: Modifies the SQL optimization mode for SAP HANA in CAP Java applications by setting the property `cds.sql.hana.optimizationMode` to `legacy`. Requires a configuration change in the YAML file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncds.sql.hana.optimizationMode: legacy\n```\n\n----------------------------------------\n\nTITLE: Preparing a CAP Project for HANA in Hybrid Mode\nDESCRIPTION: Command to add HANA configuration to a CAP project for hybrid mode, which allows running services locally while connecting to a HANA database in the cloud.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncds add hana --for hybrid\n```\n\n----------------------------------------\n\nTITLE: Generated Accessor Interface for Books in Java\nDESCRIPTION: Illustrates the generated Java accessor interface for the Books entity, providing getters and setters for data access. It also includes constants for element names.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_28\n\nLANGUAGE: java\nCODE:\n```\n@CdsName(\"my.bookshop.Books\")\npublic interface Books extends CdsData {\n\n  String ID = \"ID\";\n  String TITLE = \"title\";\n  String AUTHOR = \"author\";\n\n  Integer getID();\n  void setID(Integer id);\n\n  String getTitle();\n  void setTitle(String title);\n\n  Authors getAuthor();\n  void setAuthor(Map<String, ?> author);\n}\n```\n\n----------------------------------------\n\nTITLE: Running CDS Services in VS Code Terminal\nDESCRIPTION: Command to run CDS services using the integrated terminal in Visual Studio Code, with automatic reloading on changes.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncds watch\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Properties in TypeScript\nDESCRIPTION: Demonstrates various techniques for handling optional properties in generated types, including optional chaining, type guards, and type assertions in TypeScript.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport cds from '@sap/cds'\n\nimport { Author, Book } from '#cds-models/sap/capire/bookshop'\nconst myBook = new Book()\n\n// (i) optional chaining\nmyBook.author?.name\n\n// (ii) explicitly ruling out the undefined and null types\nif (myBook.author) myBook.author.name\n\n// (iii) non-null assertion operator\nmyBook.author!.name\n\n// (iv) explicitly casting your object to a type where all properties are attached\nconst myAttachedBook = myBook as Required<Book>\nmyAttachedBook.author?.name\n\n// (v) explicitly casting your object to a type where the required property is attached\nconst myPartiallyAttachedBook = myBook as Book & { author: Author }\nmyPartiallyAttachedBook.author?.name\n\n```\n\n----------------------------------------\n\nTITLE: Java POM Dependency for Multitenancy\nDESCRIPTION: Maven dependency added to pom.xml for multitenancy support in a Java project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-mt</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Executing Cloud Foundry Service Creation and Application Push\nDESCRIPTION: Command to create service instances, push applications, and bind services in a single operation. This reads from services-manifest.yml and manifest.yml files.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncf create-service-push\n```\n\n----------------------------------------\n\nTITLE: Using allMatch Predicate in CAP Java CQL Delete Statement\nDESCRIPTION: Shows how to use allMatch predicate in a Delete statement to remove authors based on conditions applied to all their books.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_83\n\nLANGUAGE: java\nCODE:\n```\nDelete.from(AUTHORS).where(a -> a.books().allMatch(b -> b.publisher().name().eq(\"A\")));\n```\n\n----------------------------------------\n\nTITLE: Loading CDS Models from Multiple Sources\nDESCRIPTION: Example of loading a CDS model from several source files.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// load a a model from several sources\nconst csn = await cds.load(['db','srv'])\n```\n\n----------------------------------------\n\nTITLE: Using the Expression Parser Shortcut\nDESCRIPTION: Example of using cds.parse.xpr as a shortcut to access the expression array directly.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n[dev] cds repl\n> let xpr = cds.parse.xpr (`foo.bar > 9`) // [!code focus]\n[ {ref:['foo', 'bar']}, '>', {val:9} ]\n```\n\n----------------------------------------\n\nTITLE: Import Configuration in .cdsrc.json\nDESCRIPTION: Configuration options for the cds import command in .cdsrc.json, allowing for settings like format, force overwrite, and namespace inclusion.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"import\": {\n        \"as\": \"cds\",\n        \"force\": true,\n        \"include_namespaces\": \"sap,c4c\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Mocked Remote Services in CAP\nDESCRIPTION: Shows the log output when starting a CAP application with mocked remote services. The log indicates which services are being served locally and which are mocked.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_16\n\nLANGUAGE: log\nCODE:\n```\n[cds] - serving AdminService { at: '/admin', impl: 'bookshop/srv/admin-service.js' }\n[cds] - serving CatalogService { at: '/browse', impl: 'bookshop/srv/cat-service.js' }\n[cds] - mocking OrdersService { at: '/orders', impl: 'orders/srv/orders-service.js' }\n[cds] - mocking ReviewsService { at: '/reviews', impl: 'reviews/srv/reviews-service.js' }\n```\n\n----------------------------------------\n\nTITLE: Alternative Async Service Creation\nDESCRIPTION: Demonstrates an alternative approach to create an async outboxed service using AsyncCqnService.of() method.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nOutboxService myCustomOutbox = ...;\nCqnService remoteS4 = ...;\nAsyncCqnService outboxedS4 = AsyncCqnService.of(remoteS4, myCustomOutbox);\n```\n\n----------------------------------------\n\nTITLE: Comparing SQL and CDL Casts in CDS\nDESCRIPTION: Illustrates the difference between SQL casts and CDL casts in CDS queries. SQL casts produce actual SQL casts when rendered, while CDL casts are used for type specification without generating SQL casts.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cql.md#2025-04-18_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT cast (foo+1 as Decimal) as bar from Foo;  -- standard SQL\nSELECT from Foo { foo+1 as bar : Decimal };      -- CDL-style\n```\n\n----------------------------------------\n\nTITLE: Binding to Kubernetes Secret in CAP\nDESCRIPTION: Illustrates how to bind a CAP application to a Kubernetes secret named 'bookshop-db', specifying the service kind as 'hana'.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncds bind -2 bookshop-db --on k8s --kind hana\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags Middleware in CAP.js\nDESCRIPTION: Shows how to register middleware to customize request features before the model context is set. This example adds specific feature flags to the request object.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-serve.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ncds.middlewares.before = [\n  cds.middlewares.context(),\n  cds.middlewares.trace(),\n  cds.middlewares.auth(),\n  function req_features (req,_,next) {\n    req.features = ['<feature-1>', '<feature-2>']\n    next()\n  },\n  cds.middlewares.ctx_model()\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Lifecycle Event Handlers in JavaScript\nDESCRIPTION: Example of registering event handlers for CDS lifecycle events such as bootstrap, served, and listening using the cds.on() method.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.on('bootstrap', ...)\ncds.on('served', ...)\ncds.on('listening', ...)\n```\n\n----------------------------------------\n\nTITLE: Configuring OData Protocol Base Paths in YAML\nDESCRIPTION: Configuration for customizing the base paths of OData V4 and V2 protocol adapters using application.yaml.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  odataV4.endpoint.path: '/api'\n  odataV2.endpoint.path: '/api-v2'\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Service Binding Configuration in CAP\nDESCRIPTION: Shows the structure of .cdsrc-private.json after binding to a Kubernetes service binding, including cluster, namespace, and service details.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"[hybrid]\": {\n      \"auth\": {\n        \"binding\": {\n          \"type\": \"k8s\",\n          \"name\": \"bookshop-auth-binding\",\n          \"cluster\": \"https://apiserver.d9a6204.kyma-stage.shoot.live.k8s-hana.ondemand.com\",\n          \"instance\": \"bookshop-auth\",\n          \"namespace\": \"dev\",\n          \"secret\": \"bookshop-auth-secret\",\n          \"resolved\": false,\n          \"vcap\": {\n            \"label\": \"xsuaa\",\n            \"plan\": \"application\"\n          }\n        },\n        \"kind\": \"xsuaa\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping CDS Collections to OData EDMX XML\nDESCRIPTION: Demonstrates how CDS array annotations are converted to OData EDMX XML format, including primitive types and complex records.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\n@Some.Collection: [\n  null, true, 1, 3.14, 'foo',\n  { $Type:'UI.DataField', Label:'Whatever', Hidden }\n]\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Annotation Term=\"Some.Collection\">\n  <Collection>\n    <Null/>\n    <Bool>true</Bool>\n    <Int>1</Int>\n    <Decimal>3.14</Decimal>\n    <String>foo</String>\n    <Record Type=\"UI.DataField\">\n      <PropertyValue Property=\"Label\" String=\"Whatever\"/>\n      <PropertyValue Property=\"Hidden\" Bool=\"True\"/>\n    </Record>\n  </Collection>\n</Annotation>\n```\n\n----------------------------------------\n\nTITLE: Swagger vs CAP Service Definition Comparison\nDESCRIPTION: YAML example demonstrating the verbose nature of Swagger/OpenAPI service definitions compared to CAP's concise approach. Shows how Swagger requires significantly more lines of code (~555) compared to CAP (~11) for equivalent service definitions.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/bad-practices.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n| Feature                              |       Swagger        |          CAP          |\n|--------------------------------------|:--------------------:|:---------------------:|\n| Lines of code for service definition | **~555**{.h3}{.red}  | **~11**{.h3} {.green} |\n| Lines of code for implementation     | **~500**{.h3} {.red} |  **0**{.h3} {.green}  |\n| Size of framework library            |     16 MB {.red}     |    10 MB {.green}     |\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Messaging Channels\nDESCRIPTION: Configuration for setting up multiple messaging channels with different routes using composite-messaging in package.json.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_13\n\nLANGUAGE: jsonc\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"kind\": \"composite-messaging\",\n      \"routes\": {\n        \"ChannelA\": [\"**/ReviewsService/*\"],\n        \"ChannelB\": [\"**/sap/s4/**\"]\n        \"ChannelC\": [\"**/bookshop/**\"]\n      }\n    },\n    \"ChannelA\": {\n      \"kind\": \"enterprise-messaging\", ...\n    },\n    \"ChannelB\": {\n      \"kind\": \"enterprise-messaging\", ...\n    },\n    \"ChannelC\": {\n      \"kind\": \"enterprise-messaging\", ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding XSUAA Configuration for Hybrid Deployment\nDESCRIPTION: Command to add XSUAA configuration to a CAP.js project for a hybrid deployment scenario, creating necessary files and dependencies.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncds add xsuaa --for hybrid\n```\n\n----------------------------------------\n\nTITLE: CSN Scalar Type Examples\nDESCRIPTION: Demonstrates the definition of scalar types in CSN, including the use of fully qualified names for CDS built-in types.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions: {\n  'Foo': { type:\"cds.Integer\" },\n  'Bar': { type:\"cds.Decimal\", precision:11, scale:3 },\n}})\n```\n\n----------------------------------------\n\nTITLE: Operator Expression Structure in JavaScript\nDESCRIPTION: Defines how operators and operands are represented in complex expressions.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cxn.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nxpr = {xpr:_xpr}\n_xpr = [...( _operand | _operator )]\n_operand = expr\n_operator = string\n```\n\n----------------------------------------\n\nTITLE: Lambda Expression CQL Query\nDESCRIPTION: Example of using lambda expressions for complex CQL queries with column aliases and conditions\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from bookshop.Books { title } where year < 2000\n```\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(BOOKS)\n    .columns(b -> b.title().as(\"Book\"))\n    .where(b -> b.year().lt(2000));\n```\n\n----------------------------------------\n\nTITLE: Creating Views in CAP JS\nDESCRIPTION: Demonstrates how to define a view entity using a CQN query expression.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'Foo': { kind:\"entity\", query: {\n    SELECT:{\n      from: {ref:['Bar']},\n      columns: [ {ref:['title']}, {ref:['price']} ]\n    }\n  }}\n}})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Logger Instance Caching\nDESCRIPTION: Shows how logger instances are cached and shared between different parts of code.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst LOG1 = cds.log('foo')\nconst LOG2 = cds.log('foo')\nconsole.log (LOG1 === LOG2) //> true\n```\n\n----------------------------------------\n\nTITLE: Building CAP Project for SAP HANA Deployment\nDESCRIPTION: Command to build a CAP project and generate all the necessary SAP HANA Deployment Infrastructure (HDI) artifacts for deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncds build --for hana\n```\n\n----------------------------------------\n\nTITLE: Downloading Migrated Extension Projects with CDS CLI\nDESCRIPTION: Command to download migrated extension projects using the CDS client. The user running the command needs to have the 'cds.ExtensionDeveloper' scope assigned. This downloads an archive containing existing extensions ready for use with @sap/cds-mtxs.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-migration.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncds extend <url> --download-migrated-projects\n```\n\n----------------------------------------\n\nTITLE: Using Chisel as TCP Proxy for Service Connection\nDESCRIPTION: Command to use Chisel as a TCP proxy tool to connect to remote services through HTTP proxies, enabling access to services that would otherwise be unreachable from local development machines.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nbin/chisel_... client --auth secrets https://<url_to_chisel_server_app> localhost:30010:10.10.10.10:30010\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying CAP Application to Kyma\nDESCRIPTION: Commands to build, containerize, and deploy a CAP application to Kyma. This process builds container images and deploys them using Helm charts.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nctz containerize.yaml --push\nhelm upgrade --install bookshop ./chart\n```\n\n----------------------------------------\n\nTITLE: Configuring Destination Strategies for Remote Services in CAP Java\nDESCRIPTION: YAML configuration for setting destination retrieval and token exchange strategies when using SAP BTP Destination Service. This example configures a remote service to always use the provider account for destination lookup.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    API_BUSINESS_PARTNER:\n      destination:\n        name: \"s4-business-partner-api\"\n        retrievalStrategy: \"AlwaysProvider\"\n        tokenExchangeStrategy: \"ExchangeOnly\"\n```\n\n----------------------------------------\n\nTITLE: Installing XSSEC Package for IAS Authentication\nDESCRIPTION: Command to add the @sap/xssec package as a dependency for IAS-based authentication in a CAP.js project.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @sap/xssec\n```\n\n----------------------------------------\n\nTITLE: Overwriting Cloud Service Credentials\nDESCRIPTION: Example of using cds bind to overwrite specific service credential values for hybrid test scenarios.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ncds bind -2 my-service --credentials '{ \"onpremise_proxy_host\": \"localhost\" }'\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of @restrict.grant in CDS Service Definition\nDESCRIPTION: This example demonstrates the correct usage of @restrict.grant in a CDS service definition. The function getViewsCount() is restricted to the Admin role, granting all CDS events.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/auth-restrict-grant-service.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nservice CatalogService @(requires: 'authenticated-user') {\n  entity Books as projection on my.Books;\n  @restrict: [\n    { grant: '*', to: 'Admin' }\n  ]\n  function getViewsCount() returns Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Event Handlers with @HandlerOrder in CAP Java\nDESCRIPTION: This code demonstrates how to control the execution order of event handlers in CAP Java using the @HandlerOrder annotation. Three methods are bound to the same phase of the READ event for the Books entity, but they will execute in a specific sequence based on their annotations: EARLY handlers first, default handlers second, and LATE handlers last.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n@After(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\n@HandlerOrder(HandlerOrder.EARLY)\npublic void firstHandler(EventContext context) {\n    // This handler is executed first\n}\n\n@After(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\npublic void defaultHandler(EventContext context) {\n    // This one is the second\n}\n\n@After(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\n@HandlerOrder(HandlerOrder.LATE)\npublic void lastHandler(EventContext context) {\n    // This one is the last\n}\n```\n\n----------------------------------------\n\nTITLE: Service Implementation Structure in Node.js\nDESCRIPTION: This Node.js code snippet shows the project structure for adding custom service logic in a CAP Node.js application. Dependencies include Node.js and CAP libraries. It involves adding a JavaScript file next to the CDS file for the service. The structure output shows where to place the custom service logic as it will be executed alongside the service.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nbookshop/\n├─ srv/\n│ ├─ ...\n│ ├─ cat-service.cds \n│ └─ cat-service.js \n└─ ...\n```\n\n----------------------------------------\n\nTITLE: Viewing Database Requirements in CAP.js CLI\nDESCRIPTION: Command line output showing the SQLite database configuration for a CAP.js application. Displays the database URL (set to in-memory), implementation package (@cap-js/sqlite), and database kind (sqlite).\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-env-ls-requires-db.out.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> cds env ls requires.db\n\nrequires.db.credentials.url = ':memory:'\nrequires.db.impl = '@cap-js/sqlite'\nrequires.db.kind = 'sqlite'\n```\n\n----------------------------------------\n\nTITLE: Localized Helper Views in CDS\nDESCRIPTION: Generated localized helper views for entities containing localized properties\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\nusing { localized.Books } from './books_localized';\n\nentity localized.CatalogService.BooksList as\n  SELECT from localized.Books { ID, title, price };\n\nentity localized.CatalogService.BooksDetails as\n  SELECT from localized.Books;\n  \nentity localized.CatalogService.BooksShort as\n    SELECT from localized.Books { ID, price,\n        substr(title, 0, 10) as title : localized String(10),\n    };\n```\n\n----------------------------------------\n\nTITLE: Enabling Fiori Preview in Java CAP Projects\nDESCRIPTION: Configuration to enable Fiori preview in cloud deployments for Java CAP projects. This is done by setting the 'cds.index-page.enabled' property to true in the application.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  index-page:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Complete CDS Service Definition with Change Tracking\nDESCRIPTION: Full CDS service definition including change tracking extensions and annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\nnamespace srv;\n\nusing {sap.changelog as changelog} from 'com.sap.cds/change-tracking';\nusing {model} from '../db/schema';\n\n// The domain entity extended with change tracking aspect.\nextend model.Books with changelog.changeTracked;\n\nservice Bookshop {\n    entity Books as projection on model.Books;\n}\n\n// Projection is annotated to indicate which elements are change tracked.\nannotate Bookshop.Books {\n  title @changelog;\n  stock @changelog;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic CDS Entity for Books\nDESCRIPTION: Define a basic CDS entity representing books in the domain model.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nnamespace model;\n\nentity Books {\n    key ID: UUID;\n    title: String;\n    stock: Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Map with CdsData Interface\nDESCRIPTION: This Java code shows how to extend a Map with the CdsData interface using the Struct helper class.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> map = new HashMap<>();\nCdsData data = Struct.access(map).as(CdsData.class);\n```\n\n----------------------------------------\n\nTITLE: Using IN Predicate with Multiple List Values in CDS Query Builder\nDESCRIPTION: Example of using the 'in' predicate to filter by multiple key value sets, efficiently checking for matches against combinations of airline and connection IDs.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_68\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.*;\n\nCqnListValue elements = list(get(\"AirlineID\"), get(\"ConnectionID\"));\nCqnListValue lh454  = list(val(\"LH\"), val(454));\nCqnListValue ba119  = list(val(\"BA\"), val(119));\n\nSelect.from(FLIGHT_CONNECTION).where(in(elements, List.of(lh454, ba119)));\n```\n\n----------------------------------------\n\nTITLE: Persistence Service DataSource Reference\nDESCRIPTION: YAML configuration to reference a custom datasource bean in a persistence service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  persistence.services:\n    my-ps:\n      dataSource: \"customDataSource\"\n```\n\n----------------------------------------\n\nTITLE: Processing CDS File with JavaScript\nDESCRIPTION: Demonstrates how to read and process a .cds file using JavaScript and the CDS library.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/models.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.get('./some.cds') .then (cds.compile.to.yaml) .then (console.log)\n```\n\n----------------------------------------\n\nTITLE: Testing Audit Logging with HTTP Request\nDESCRIPTION: Sample HTTP PATCH request to update personal data and trigger audit logging.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPATCH http://localhost:4004/admin/Customers(2b87f6ca-28a2-41d6-8c69-ccf16aa6389d) HTTP/1.1\nAuthorization: Basic alice:in-wonderland\nContent-Type: application/json\n\n{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Doe\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request to Add Reviews\nDESCRIPTION: Demonstrates an HTTP POST request to add a new review to the reviews service running on port 4005.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:4005/Reviews\nContent-Type: application/json;IEEE754Compatible=true\nAuthorization: Basic itsme:secret\n{\"subject\":\"201\", \"title\":\"boo\", \"rating\":3 }\n```\n\n----------------------------------------\n\nTITLE: Adding Logging Support Dependency for Logback in Maven\nDESCRIPTION: XML snippet for adding the cf-java-logging-support-logback dependency to the Maven POM file. This is used to match the log output format expected by the SAP BTP logging service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t<groupId>com.sap.hcp.cf.logging</groupId>\n\t<artifactId>cf-java-logging-support-logback</artifactId>\n\t<version>${logging.support.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Removing Old SQLite Driver and Adding New Plugin\nDESCRIPTION: Terminal commands for finalizing the migration by removing the old sqlite3 driver and adding the new @cap-js/sqlite plugin.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nnpm rm sqlite3\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @cap-js/sqlite --save\n```\n\n----------------------------------------\n\nTITLE: Running Build Plugin via Command Line\nDESCRIPTION: These shell commands demonstrate how to run the build plugin using the cds build command. It shows both the default build and a build specifically for the postgres plugin.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/custom-builds.md#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncds build\ncds build --for postgres\n```\n\n----------------------------------------\n\nTITLE: Running CAP Application with Node.js\nDESCRIPTION: Command to start a CAP application with Node.js, which automatically mocks imported external services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncds watch\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry Dependency for CAP Java\nDESCRIPTION: XML dependency snippet to be added to pom.xml for enabling Cloud Foundry support in a CAP Java project. This is added automatically when using the CDS Maven plugin.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/getting-started.md#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-starter-cloudfoundry</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Consuming Reuse Aspects (Preferred)\nDESCRIPTION: Example of how to flexibly combine multiple aspects to create entities with exactly the features needed. This demonstrates the advantage of multiple inheritance-like behavior in CDS aspects.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\nusing { cuid, managed, tracked, extensible, temporal } from 'your-reuse-aspects';\nentity Foo : cuid, managed, tracked, extensible {...}\nentity Bar : cuid, managed, temporal {...}\n```\n\n----------------------------------------\n\nTITLE: Creating HANA Table with Quoted Names\nDESCRIPTION: Example of creating a HANA table using quoted identifiers for table and column names.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCOLUMN TABLE \"data.model::Bookshop.Books\" (\n  \"id\" integer,\n  \"the.title\" nvarchar(100),\n  primary key ( \"id\" )\n)\n```\n\n----------------------------------------\n\nTITLE: Spatial Grid Generator Definition\nDESCRIPTION: CDS facade entity definition for SAP HANA spatial grid generator function.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\n@cds.persistence.exists\nentity ST_SquareGrid(size: Double, geometry: hana.ST_GEOMETRY) {\n  geom: hana.ST_GEOMETRY;\n  i: Integer;\n  j: Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry Binding Configuration in CAP\nDESCRIPTION: Shows the structure of the .cdsrc-private.json file after binding a service to Cloud Foundry. It includes details such as the API endpoint, org, space, and service instance information.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"[hybrid]\": {\n      \"db\": {\n        \"kind\": \"hana\",\n        \"binding\": {\n          \"type\": \"cf\",\n          \"apiEndpoint\": \"https://api.sap.hana.ondemand.com\",\n          \"org\": \"your-cf-org\",\n          \"space\": \"your-cf-space\",\n          \"instance\": \"bookshop-db\",\n          \"key\": \"bookshop-db-key\",\n          \"vcap\": {\n            \"label\": \"hana\",\n            \"plan\": \"hdi-shared\"\n          },\n          \"resolved\": false\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensibility in package.json (JSON)\nDESCRIPTION: JSON configuration in package.json to enable extensibility and add necessary dependencies for a CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@capire/orders\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"@capire/common\": \"*\",\n    \"@sap/cds\": \">=5\",\n    \"@sap/cds-mtxs\": \"^1\"\n  },\n  \"cds\": {\n    \"requires\": {\n      \"extensibility\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Generated Entity Types in TypeScript\nDESCRIPTION: Illustrates the structure of generated type exports for entities in a namespace, including singular and plural forms.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @cds-models/sap/capire/bookshop/index.ts\nexport class Author { … }\nexport class Authors { … }\nexport class Book { … }\nexport class Books { … }\n```\n\n----------------------------------------\n\nTITLE: Separation of Concerns in CDS\nDESCRIPTION: This snippet demonstrates how to separate concerns in CDS by keeping authorization rules separate from domain models.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\n// All authorization rules go in here, the domain models are kept clean\nusing { Books } from './my/clean/schema.cds';\nannotate Books with @restrict: [{ grant:'WRITE', to:'admin' }];\n```\n\n----------------------------------------\n\nTITLE: Programmatically Clearing the Outbox Table in JavaScript\nDESCRIPTION: Code example demonstrating how to delete all entries from the outbox table programmatically. This can be used as part of administrative functions or troubleshooting procedures.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await cds.connect.to('db')\nconst { Messages } = db.entities('cds.outbox')\nawait DELETE.from(Messages)\n```\n\n----------------------------------------\n\nTITLE: EDMX Generation with Feature Toggles\nDESCRIPTION: Extended Maven build command that includes feature toggle support by adding the features root folder to the compilation path.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<command>compile ${project.basedir} ${session.executionRootDirectory}/fts/* -s all -l all -2 edmx-v2 -o ${project.basedir}/src/main/resources/edmx/v2</command>\n```\n\n----------------------------------------\n\nTITLE: Reading Localized Texts for End Users in SQL\nDESCRIPTION: SQL query to read localized texts in the user's preferred language from the Books entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ID, localized.title, localized.descr from Books\n```\n\n----------------------------------------\n\nTITLE: CSN Model as Plain JavaScript Object\nDESCRIPTION: Illustrates the CSN model structure as a plain JavaScript object, showing how it can be represented in a JavaScript environment.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n({\n  requires:[ '@sap/cds/common', './db/schema' ],\n  definitions: {\n    'some.type': { type:\"cds.String\", length:11 },\n    'another.type': { type:\"some.type\" },\n    'structured.type': { elements: {\n      'foo': { type:\"cds.Integer\" },\n      'bar': { type:\"cds.String\" }\n    }}\n  },\n  extensions: [\n    { extend:'Foo', elements:{\n      'bar': { type:\"cds.String\" }\n    }\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Unsupported Projections in CDS\nDESCRIPTION: Examples of unsupported projection definitions in CDS that cannot be resolved to their underlying entities due to use of join, union, or where clauses.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\n// Unsupported\nentity DeliveredOrders as select from bookshop.Order where status = 'delivered';\nentity Orders as select from bookshop.Order inner join bookshop.OrderHeader on Order.header.ID = OrderHeader.ID { Order.ID, Order.items, OrderHeader.status };\n```\n\n----------------------------------------\n\nTITLE: Initializing Deep Traversal in CdsDiffProcessor\nDESCRIPTION: Creates a CdsDiffProcessor instance configured for deep traversal, enabling tracking of additions and removals at each entity level.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_50\n\nLANGUAGE: java\nCODE:\n```\nCdsDiffProcessor diff = CdsDiffProcessor.create().forDeepTraversal();\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Pull Secret for Private Repositories\nDESCRIPTION: Script to create a Kubernetes secret for pulling images from a private Docker repository.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\necho -n \"Your repository: \"; read YOUR_REPOSITORY\necho -n \"Your user: \"; read YOUR_USER\necho -n \"Your email: \"; read YOUR_EMAIL\necho -n \"Your API key: \"; read -s YOUR_API_KEY\nkubectl create secret docker-registry \\\n  \"$YOUR_REPOSITORY\" \\\n  \"--docker-server=$YOUR_REGISTRY\" \\\n  \"--docker-username=$YOUR_USER\" \\\n  \"--docker-password=$YOUR_API_KEY\" \\\n  \"--docker-email=$YOUR_EMAIL\"\n```\n\n----------------------------------------\n\nTITLE: Node.js Example HTTP Request Template with Authentication\nDESCRIPTION: HTTP request template for Node.js CAP applications with basic authentication header for a local mock user.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_15\n\nLANGUAGE: http\nCODE:\n```\n@server = http://localhost:4004\n@auth = Authorization: Basic alice:\n\n### CatalogService.Books\nGET {{server}}/odata/v4/admin/Books\n{{auth}}\n...\n```\n\n----------------------------------------\n\nTITLE: Using EXISTS Subquery in CAP Java CQL Query\nDESCRIPTION: Shows how to use an EXISTS subquery to select authors based on a correlated subquery condition.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_86\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.AUTHORS;\nimport static socialmedia.Journalists_.JOURNALISTS;\n\n// fluent style\nSelect.from(AUTHORS)\n  .where(author -> author.exists($outer ->\n      Select.from(JOURNALISTS).where(journalist -> journalist.name().eq($outer.name()))\n    )\n  );\n```\n\n----------------------------------------\n\nTITLE: Using Path Notation for Accessing Nested Properties in Results\nDESCRIPTION: Demonstrates how to access nested properties in query results using the getPath method, which simplifies extracting values from complex structures like expanded associations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nCqnSelect select = Select.from(BOOKS).columns(\n     b -> b.title(), b -> b.author().expand()).byId(101);\nRow book = dataStore.execute(select).single();\n\nString author = book.getPath(\"author.name\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant Metadata\nDESCRIPTION: HTTP GET request to retrieve metadata for a specific tenant and the corresponding JSON response with subscription details.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nGET /-/cds/saas-provisioning/tenant/t1 HTTP/1.1\nContent-Type: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"subscribedTenantId\": \"tenant-1\",\n    \"eventType\": \"CREATE\",\n    \"subscribedSubdomain\": \"subdomain-1\",\n    \"subscriptionAppName\": \"app-1\",\n    \"subscribedSubaccountId\": \"subaccount-1\",\n    \"createdAt\": \"2023-11-10T14:36:22.639Z\",\n    \"modifiedAt\": \"2023-13-10T15:16:22.802Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Runtime-Managed Versions for Concurrency Control in Java\nDESCRIPTION: Example of reading an entity, modifying it, and updating it while leveraging runtime-managed versions for optimistic concurrency control without needing explicit ETag predicates.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nPersistenceService db = ...\nCqnSelect select = Select.from(ORDER).byId(85);\nOrder order = db.run(select).single(Order.class);\n\norder.setAmount(5000);\n\nCqnUpdate update = Update.entity(ORDER).entry(order);\nResult rs = db.execute(update);\n\nif (rs.rowCount() == 0) {\n    // order 85 does not exist or was modified concurrently\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Services in CAP JS\nDESCRIPTION: Shows how to define a service with the 'kind' property set to 'service'.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'MyOrders': {kind:\"service\"}\n}})\n```\n\n----------------------------------------\n\nTITLE: Reading File Content with read()\nDESCRIPTION: Demonstrates how to read and parse file content using the read() utility, which automatically handles JSON parsing.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { read } = cds.utils\nlet pkg = await read ('package.json')\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Entities with Compositions for Change Tracking\nDESCRIPTION: Example of CDS entities with compositions that can be used for change tracking in deep updates.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nentity OrderItems {\n  key ID: UUID;\n  [...]\n  quantity: Integer @changelog;\n}\n\nentity Orders {\n  key ID: UUID;\n  customerName: String @changelog;\n  [...]\n  items: Composition of many OrderItems;\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Functions Example\nDESCRIPTION: Example of using SAP HANA regex functions and aggregate functions with order by clause.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nlocate_regexpr(pattern in name from 5)\nfirst_value(name order by price desc)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of @restrict.grant in CDS Service Definition\nDESCRIPTION: This example shows an incorrect usage of @restrict.grant in a CDS service definition. The function getViewsCount() uses grant: ['WRITE'], which is not allowed and will trigger the rule.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/auth-restrict-grant-service.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nservice CatalogService @(requires: 'authenticated-user') {\n  entity Books as projection on my.Books;\n  @restrict: [\n    { grant: ['WRITE'], to: 'Admin' }\n  ]\n  function getViewsCount() returns Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Bindings in values.yaml\nDESCRIPTION: Shows the configuration options for service bindings in the values.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n<service name>:\n  # Exactly one of these must be specified\n  serviceInstanceName: my-service # within Helm chart\n  serviceInstanceFullName: my-service-full-name # using absolute name\n  # Additional parameters\n  parameters:\n    key: val\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Entity for Calculation View\nDESCRIPTION: Creates a CDS entity definition that acts as a facade for the calculation view.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_12\n\nLANGUAGE: cds\nCODE:\n```\nnamespace data.model;\ncontext Bookshop {\n  @cds.persistence.exists\n  entity CalcBooks (PARAM : String(10)) {\n    key id : Integer;\n    the_title : String(100);\n    calculated : Integer;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Generated DB Folder in CAP Microservices Project\nDESCRIPTION: Removes the automatically generated database folder since we're using a shared database approach instead of individual database modules for each microservice.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nrm -r db\n```\n\n----------------------------------------\n\nTITLE: Implementing Tenant Upgrade Handler\nDESCRIPTION: JavaScript handler for tenant upgrades that executes custom code after the standard upgrade process, with access to instance data and deployment options.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = (service) => {\n  service.on('upgradeTenant', async (req, next) => {\n    await next() // call the upgrade\n    const {\n      instanceData, // HDI container metadata\n      deploymentOptions // additional deployment options, for example, `autoUndeploy`\n    } = cds.context.req.body\n    // custom code\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Generating XSUAA Descriptor File in CAP Project\nDESCRIPTION: Command to generate the xs-security.json descriptor file for XSUAA configuration based on the CAP authorization model.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/aspects.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncds add xsuaa\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Entity Extensions in CDS with Proper Restrictions\nDESCRIPTION: This code snippet demonstrates the correct way to extend entities in a CAP application while respecting the extension restrictions set by the base application. The extension properly follows the allowable extension points defined in the SaaS base app.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/extension-restrictions.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nusing { base } from 'base-app';\n\nextend entity base.Books with {\n  someExtensionField : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information from RequestContext\nDESCRIPTION: Shows how to access user information from the current RequestContext in the new CAP Java SDK.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nEventContext context;\nUserInfo user = context.getUserInfo();\n```\n\n----------------------------------------\n\nTITLE: Using toLower Method on Field in CDS Query Builder\nDESCRIPTION: Example of using the 'toLower' method directly on a field to convert the employee name to lowercase before comparing with a lowercase string.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_56\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(EMPLOYEE).columns(e -> e.name())\n  .where(e -> e.name().toLower().eq(\"monika\"));\n```\n\n----------------------------------------\n\nTITLE: Generated Books.texts Entity with TextsAspect in CDS\nDESCRIPTION: Example of how the Books.texts entity is generated with the inclusion of sap.common.TextsAspect.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nentity Books.texts : sap.common.TextsAspect {\n  key ID : UUID;\n  title : String;\n  descr : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CAP Developer Dashboard Maven Dependency\nDESCRIPTION: Maven dependency configuration to include the CAP Developer Dashboard feature in the project.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/dashboard.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-dev-dashboard</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: OData Dependencies Configuration\nDESCRIPTION: Maven dependency configuration for including both OData V2 and V4 adapters along with the Spring Boot starter in a CAP Java project.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-starter-spring-boot</artifactId>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-adapter-odata-v2</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-adapter-odata-v4</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n```\n\n----------------------------------------\n\nTITLE: Querying with Exists Predicate in CDS SQL\nDESCRIPTION: Demonstrates the use of filtered path expressions with EXISTS to test if elements in an associated collection match a given filter. Shows how exists predicates can be nested and how paths with multiple associations are rewritten.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cql.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT FROM Authors {name} WHERE EXISTS books[year = 2000]\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name FROM Authors\nWHERE EXISTS (\n        SELECT 1 FROM Books\n        WHERE Books.author_id = Authors.id\n            AND Books.year = 2000\n    )\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT FROM Authors { name }\n    WHERE EXISTS books[year = 2000 and EXISTS pages[wordcount > 1000]]\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT FROM Authors { name }\n    WHERE EXISTS books[year = 2000].pages[wordcount > 1000]\n```\n\n----------------------------------------\n\nTITLE: Adding Handler Stubs for Java\nDESCRIPTION: Commands for compiling the model and generating handler stub files for actions and functions in a Java CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nmvn compile  # let Java know what your model looks like\ncds add handler\n```\n\n----------------------------------------\n\nTITLE: Flattening Structured Types in CDS for OData EDMX XML\nDESCRIPTION: Shows how structured types in CDS are flattened and their references are adjusted in the resulting OData EDMX XML.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\ntype Price {\n  @Measures.ISOCurrency: (currency)\n  amount : Decimal;\n  currency : String(3);\n}\n\nservice S {\n  entity Product {\n    key id : Integer;\n    name : String;\n    price : Price;\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Schema Namespace=\"S\">\n  <!-- ... -->\n  <EntityType Name=\"Product\">\n    <!-- ... -->\n    <Property Name=\"price_amount\" Type=\"Edm.Decimal\" Scale=\"variable\"/>\n    <Property Name=\"price_currency\" Type=\"Edm.String\" MaxLength=\"3\"/>\n  </EntityType>\n  <Annotations Target=\"S.Product/price_amount\">\n    <Annotation Term=\"Measures.ISOCurrency\" Path=\"price_currency\"/>\n  </Annotations>\n</Schema>\n```\n\n----------------------------------------\n\nTITLE: Configuring Approuter in YAML\nDESCRIPTION: This snippet shows how to configure the approuter in the mta.yaml file. It includes setting the path for the approuter module and moving it to a .deploy folder.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: samples\n    type: approuter.nodejs\n    path: .deploy/app-router\n```\n\n----------------------------------------\n\nTITLE: CDI Administration Service Definition\nDESCRIPTION: Defines the OData V4 service exposure for CDI entities with required capabilities and filter restrictions. Implements read-only projections of the database entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/analytics.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nusing { com.sap.dps } from '...';\n\nservice com.sap.cloudDataIntegration {\n  @Capabilities.UpdateRestrictions.Updatable: false\n  @Capabilities.InsertRestrictions.Insertable: false\n  @Capabilities.DeleteRestrictions.Deletable: false\n  entity Namespaces as projection on dps.Namespaces;\n\n  @Capabilities.UpdateRestrictions.Updatable: false\n  @Capabilities.InsertRestrictions.Insertable: false\n  @Capabilities.DeleteRestrictions.Deletable: false\n  entity Providers as projection on dps.Providers;\n\n  @Capabilities.UpdateRestrictions.Updatable: false\n  @Capabilities.FilterRestrictions: {\n    Filterable: true,\n    FilterExpressionRestrictions: [\n      { Property: NamespaceID,    AllowedExpressions: #MultiValueOrSearchExpression },\n      { Property: ProviderID,     AllowedExpressions: #MultiValueOrSearchExpression },\n      { Property: SubscriptionID, AllowedExpressions: #MultiValueOrSearchExpression },\n      { Property: ExternalID,     AllowedExpressions: #MultiValueOrSearchExpression }\n    ]\n  }\n  entity Subscriptions as projection on dps.Subscriptions;\n}\n```\n\n----------------------------------------\n\nTITLE: File Structure for Directory-based Configuration\nDESCRIPTION: Example showing the file structure when using a directory for CDS_CONFIG and the resulting JSON configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n/etc/secrets/cds/requires/auth/kind: xsuaa\n/etc/secrets/cds/requires/auth/credentials/clientid: capapp\n/etc/secrets/cds/requires/auth/credentials/clientsecret: dlfed4XYZ\n/etc/secrets/cds/requires/db:\n  { kind: \"hana\", \"credentials\": { \"user\": \"hana-user\" } }\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Root Types in JavaScript\nDESCRIPTION: Shows the in-memory CSN definition of root types for the CDS type system.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst { any, context, service ,\n  type, scalar, string, number, boolean, date,\n  array, struct, entity, event, aspect\n  Association, Composition\n} = cds.linked.classes\n\nconst roots = module.exports = {definitions:{\n  any: new any,\n  context: new context ({type:'any'}),\n  type: new type ({type:'any'}),\n    scalar: new scalar ({type:'type'}),\n      string: new string ({type:'scalar'}),\n      number: new number ({type:'scalar'}),\n      boolean: new boolean ({type:'scalar'}),\n      date: new date ({type:'scalar'}),\n    array: new array ({type:'type'}),\n    struct: new struct ({type:'type'}),\n      entity: new entity ({type:'struct'}),\n      event: new event ({type:'struct'}),\n      aspect: new aspect ({type:'struct'}),\n    Association: new Association ({type:'type'}),\n      Composition: new Composition ({type:'Association'}),\n  service: new service ({type:'context'}),\n}}\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs with cds.utils\nDESCRIPTION: Shows how to generate unique identifiers using the uuid() function from cds.utils.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { uuid } = cds.utils\nlet id = uuid() // generates a new UUID\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Cloud Application Event Hub in application.yaml for Java\nDESCRIPTION: YAML configuration in application.yaml to use SAP Cloud Application Event Hub for messaging in Java applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-broker.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  messaging.services:\n  - name: \"messaging-name\"\n    kind: \"event-hub\"\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Annotation Dependency in Maven\nDESCRIPTION: Maven dependency configuration for including OpenTelemetry instrumentation annotations in a CAP Java service module.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.opentelemetry.instrumentation</groupId>\n   <artifactId>opentelemetry-instrumentation-annotations</artifactId>\n   <version>2.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Outbox Services in YAML\nDESCRIPTION: YAML configuration for overriding default settings of DefaultOutboxOrdered and DefaultOutboxUnordered services.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  outbox:\n    services:\n      DefaultOutboxOrdered:\n        maxAttempts: 10\n        storeLastError: true\n      DefaultOutboxUnordered:\n        maxAttempts: 10\n        storeLastError: true\n```\n\n----------------------------------------\n\nTITLE: UUID Type Override Example in CDS\nDESCRIPTION: Shows how to override UUID type mapping to Edm.String to avoid restrictive Edm.Guid validation rules.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nentity Books {\n  key ID : UUID @odata.Type:'Edm.String';\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Table Per Leaf Class Strategy in CDS\nDESCRIPTION: Illustrates the table-per-leaf-class strategy for inheritance hierarchies, where each leaf entity (`Users` and `Groups`) has its own table. A UNION ALL statement is used to query a heterogeneous list of `Users` and `Groups`.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_13\n\nLANGUAGE: cds\nCODE:\n```\n```cds\nentity UsersAndGroups as (\n  SELECT from Users\n) UNION ALL (\n  SELECT from Groups\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Using STARTS WITH Predicate Function in CAP Java CQL Query\nDESCRIPTION: Shows how to use the STARTS WITH predicate function to filter books based on the title's prefix.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_77\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Books\")\n  .where(b -> b.get(\"title\")\n  .startsWith(\"The\"));\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Query Behavior for Localized Data\nDESCRIPTION: Examples showing the difference between the old implicit localization and the new explicit approach using SELECT.localized for fetching localized data.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nSELECT.from(Books)       // always read from localized.Books instead\n```\n\nLANGUAGE: js\nCODE:\n```\nSELECT.localized(Books)  // reads localized data\nSELECT.from(Books)       // reads plain data\n```\n\n----------------------------------------\n\nTITLE: Persistent SQLite Database Configuration\nDESCRIPTION: JSON configuration for setting up a persistent SQLite database file\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"cds\": { \"requires\": {\n   \"db\": {\n      \"kind\": \"sqlite\",\n      \"credentials\": { \"url\": \"db.sqlite\" }\n   }\n}}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Absolute Context URL in Node.js\nDESCRIPTION: This JavaScript snippet shows how to set an absolute context URL for OData responses using the cds.odata.contextAbsoluteUrl configuration. It demonstrates setting a custom domain and service path.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_42\n\nLANGUAGE: js\nCODE:\n```\ncds.odata.contextAbsoluteUrl = \"https://your.domain.com/yourService\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Servers in OpenAPI Output\nDESCRIPTION: This command shows how to specify multiple server configurations when converting CDS to OpenAPI. It uses the '--openapi:servers' option with a JSON string to define test and production URLs.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/openapi.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds compile srv service.cds --to openapi --openapi:servers \"\\\"'[{\\\\\\\"url\\\\\\\":\\\\\\\"api.sandbox.com\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Test URL\\\\\\\"},{\\\\\\\"url\\\\\\\":\\\\\\\"api.prod.com\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Production URL\\\\\\\"}]'\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Logical AND Operator in CAP Java CQL Query\nDESCRIPTION: Demonstrates how to use the logical AND operator in a CQL query to filter authors based on name and ID.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_73\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Authors\")\n.where(a ->\n  a.get(\"name\").eq(\"Peter)\n   .and(a.get(\"Id\").eq(1)));\n```\n\n----------------------------------------\n\nTITLE: Fixing Ambiguous Redirects in CDS\nDESCRIPTION: Demonstrates how to resolve ambiguous redirection targets for associations in CDS models. Options include using @cds.redirection.target annotations or explicit redirection.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\ncontext my {\n  entity E { ..., f: Association to F; }\n  entity F { ... }\n}\nservice S {\n  entity F1 as projection on my.F; //> redirection target for E.f?\n  entity F2 as projection on my.F; //> redirection target for E.f?\n  entity E as projection on my.E;  //> which target to use for E.f?\n}\n```\n\nLANGUAGE: cds\nCODE:\n```\nservice S {\n  entity F1 @(cds.redirection.target:false) as projection on my.F;\n  entity F2 @(cds.redirection.target:false) as projection on my.F;\n  entity E as projection on my.E;  //> E.f will be skipped as before\n}\n```\n\nLANGUAGE: cds\nCODE:\n```\nservice S {\n  entity F1 @(cds.redirection.target:true) as projection on my.F;\n  entity F2 as projection on my.F;\n  entity E as projection on my.E;  //> E.f will refer to S.F1\n}\n```\n\nLANGUAGE: cds\nCODE:\n```\nservice S {\n  entity F1 as projection on my.F;\n  entity F2 as projection on my.F;\n  entity E as projection on my.E {\n    *, f : redirected to F1        //> E.f will refer to S.F1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Data Isolation in Node.js CAP Service\nDESCRIPTION: This code snippet demonstrates an incorrect implementation of a CAP service in Node.js that breaks tenant data isolation by using a shared variable across requests.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/aspects.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = srv => {\n  let books  // <- leaks data across tenants and concurrent requests\n  srv.on('READ', 'Books', async function(req, next) {\n    if (books) return books\n    return books = await next()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Add SQLite Support in CAP Java\nDESCRIPTION: Uses `@sap/cds-dk` command to add SQLite support to a CAP Java project. No prerequisites required other than having `@sap/cds-dk` installed.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncds add sqlite\n```\n\n----------------------------------------\n\nTITLE: Binding Local App to XSUAA Service in CAP.js\nDESCRIPTION: Command to bind a local CAP.js application to the XSUAA service instance using the service key, updating the .cdsrc-private.json file.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncds bind -2 bookshop-uaa\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reuse Types in Entities\nDESCRIPTION: Demonstrates using predefined and custom reuse types in entity definitions. Requires 'Country' and 'Region' types. It defines an 'Addresses' entity with custom associations.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_20\n\nLANGUAGE: cds\nCODE:\n```\nusing { Country, Region } from './your-common.4.2';\nentity Addresses {\n  street  : String;\n  town    : String;\n  country : Country; //> pre-defined reuse type\n  region  : Region; //> your custom reuse type\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced CSRF Token Handling in Remote Service\nDESCRIPTION: Advanced configuration example demonstrating customized CSRF token handling with specific method and URL parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/remote-services.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"cds\": {\n        \"requires\": {\n            \"API_BUSINESS_PARTNER\": {\n                \"csrf\": {\n                    \"method\": \"get\",\n                    \"url\": \"...\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Views with Declared Signatures in CAP JS\nDESCRIPTION: Shows how to create a view with an explicitly declared signature using the 'elements' property.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'with.declared.signature': {kind:\"entity\",\n    elements: {\n      'title': {type:\"cds.String\"},\n      'price': {type:\"Amount\"}\n    },\n    query: { SELECT:{...} },\n  }\n}})\n```\n\n----------------------------------------\n\nTITLE: Upgrading Specific Tenants\nDESCRIPTION: POST endpoint to asynchronously upgrade base models for specified tenants. Includes optional HDI deployment configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nPOST /-/cds/saas-provisioning/upgrade HTTP/1.1\nContent-Type: application/json\nPrefer: respond-async\n\n{\n  \"tenants\": [\"t1\", \"t2\"],\n  \"options\": {\n      \"_\": {\n          \"hdi\": {\n              \"deploy\": {\n                  \"trace\": \"true\",\n                  \"version\": \"true\"\n              }\n          }\n      }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": \"<jobID>\",\n  \"createdAt\": \"<timestamp>\",\n  \"op\": \"upgrade\",\n  \"tenants\": {\n    \"t1\": {\n      \"ID\": \"<taskID>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Log Capture Interface Definition\nDESCRIPTION: TypeScript interface definition for the log capture functionality showing available methods and properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cds.test.log() => {\n  output : string\n  clear()\n  release()\n}\n```\n\n----------------------------------------\n\nTITLE: Message Formatting with Placeholders in Java\nDESCRIPTION: Examples of using SLF4J-style message formatting with placeholders in both Messages API and ServiceException to create dynamic error messages.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// message with placeholders\nmessages.warn(\"Can't order {} books: Not enough on stock\", orderQuantity);\n// on ServiceException last argument can always be the causing exception\nthrow new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid number: '{}'\", wrongNumber, originalException);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Lowercase Element Names in CDS Schema\nDESCRIPTION: This snippet demonstrates the correct implementation of the 'start-elements-lowercase' rule. The element name 'title' starts with a lowercase letter, adhering to the recommended naming convention for easy distinction between entity and element names.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/start-elements-lowercase.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nentity Book {\n  key ID : Integer;\n  title : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Handler Registration for Multitenancy Services\nDESCRIPTION: Updated handler registration pattern for multitenancy services in server.js\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-migration.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncds.on('served', async () => {\n  const { 'cds.xt.SaasProvisioningService': provisioning } = cds.services\n  const { 'cds.xt.DeploymentService': deployment } = cds.services\n\n  await provisioning.prepend(() => {\n    provisioning.on('UPDATE', 'tenant', async (req, next) => { ... })\n    provisioning.on('dependencies', async (req, next) => { ... })\n  })\n  await deployment.prepend(() => {\n    deployment.on('upgrade', async (req) => { ... })\n    deployment.on('deploy', async (req) => { ... })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Securing Sensitive Data by Excluding Associations in CDS\nDESCRIPTION: Shows how to properly secure sensitive data by excluding compositions in CAP service projections, preventing unauthorized access through navigation paths.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_25\n\nLANGUAGE: cds\nCODE:\n```\nservice BrowseEmployeesService @(requires:'Employee') {\n  @readonly entity Employees\n  as projection on db.Employees excluding { contracts }; // hide contracts!\n\n  @readonly entity Teams as projection on db.Teams;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding MTX Sidecar to Remote Service Instances\nDESCRIPTION: Commands to navigate to the MTX sidecar directory and bind it to remote service instances.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\ncd mtx/sidecar\ncds bind --to-app-services bookshop-srv\n```\n\n----------------------------------------\n\nTITLE: Running CAP Java Project with Global CDS-DK\nDESCRIPTION: Command to build and run a CAP Java application using Maven with a globally installed CDS Development Kit. This approach speeds up build times by using a globally installed CDS-DK instead of installing it for each project.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/building.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmvn spring-boot:run -P cdsdk-global\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structures with mkdirp()\nDESCRIPTION: Shows how to create nested directory structures using the mkdirp() utility function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { mkdirp } = cds.utils\nawait mkdirp('dist','db','data')\nawait mkdirp('dist/db/data')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Association to Many in CDS View\nDESCRIPTION: This snippet shows an incorrect implementation where a view AuthorView is created with a non-unique key and an element bookIDs without an ON condition, violating the rule.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/assoc2many-ambiguous-key.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nentity Authors {\n  key ID : Integer;\n  name : String;\n  books : Association to many Books on books.author = $self;\n}\n\nentity Books {\n  key ID : Integer;\n  title : String;\n  author : Association to one Authors;\n}\n\nview AuthorView as select from Authors {\n  key ID,\n  name,\n  bookIDs : books.ID\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Reuse Type for Regions in CAP CDS\nDESCRIPTION: This snippet defines a managed association reuse type for regions. Requires the 'Regions' entity from a previous definition file.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_19\n\nLANGUAGE: cds\nCODE:\n```\nusing { Regions } from './your-common.4.1'; /*>skip<*/\n// Define an own reuse type referring to Regions\ntype Region : Association to Regions;\n```\n\n----------------------------------------\n\nTITLE: Adding Portal Service\nDESCRIPTION: Command to configure HTML5 Application Repository with SAP Cloud Portal service\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncds add portal\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Security for Dashboard Access\nDESCRIPTION: Java configuration class to set up security filter chain for dashboard endpoints without authentication.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/dashboard.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport static org.springframework.security.web.util.matcher.AntPathRequestMatcher.antMatcher;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\n@Order(1)\npublic class WebSecurity {\n\n\t@Bean\n\tpublic SecurityFilterChain appFilterChain(HttpSecurity http) throws Exception {\n\n\t\treturn http\n\t\t\t\t.securityMatchers(m -> m.requestMatchers(antMatcher(\"/dashboard/**\"), antMatcher(\"/dashboard_api/**\")))\n\t\t\t\t.authorizeHttpRequests(auth -> auth.anyRequest().permitAll())\n\t\t\t\t.csrf(c-> c.disable())\n\t\t\t\t.build();\n\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Agent in MTA Deployment Descriptor\nDESCRIPTION: Adds the necessary Java options to enable the Open Telemetry Java Agent in the mta.yaml file for a CAP Java application module.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: <srv-module>\n  # ...\n  properties:\n    # ...\n    JBP_CONFIG_JAVA_OPTS:\n      from_environment: false\n      java_opts: >\n        -javaagent:META-INF/.sap_java_buildpack/otel_agent/opentelemetry-javaagent.jar\n        -Dotel.javaagent.extensions=META-INF/.sap_java_buildpack/otel_agent_extension/otel-agent-ext-java.jar\n```\n\n----------------------------------------\n\nTITLE: ORM Data Fetching Example\nDESCRIPTION: This TypeScript code demonstrates data fetching using an Object-Relational Mapper (ORM). It fetches selected authors based on their birth year and then iterates through their books, performing deferred fetching for each book. The code illustrates the ORM's projection limitations, resulting in the retrieval of all attributes.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/querying.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet authors = [] //... to be filled in below\nlet _authors = Authors.where({       //> all data of selected authors\n  born: { gt: 1900 }\n})\nfor (let a of _authors) {\n  let a2 = {                         //> ignoring unwanted data\n      ID    : a.ID,\n      name  : a.name,\n      books : []\n  }\n  for (let b of a.books) {           //> ORM-typical deferred fetch\n    let b2 = {                       //> ignoring unwanted data\n      ID    : b.ID,\n      title : b.title,\n      stock : b.stock\n    }\n    b2.genre = b.genre.name          //> ignoring unwanted data\n    a2.books.push (b2)\n  }\n  authors.push (a2)\n}\nreturn authors\n```\n\n----------------------------------------\n\nTITLE: Importing Change Log Model in CDS\nDESCRIPTION: Import the change log model provided by the change tracking feature.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nusing {sap.changelog as changelog} from 'com.sap.cds/change-tracking';\n```\n\n----------------------------------------\n\nTITLE: OData PATCH Collection Example for Mass Data Updates\nDESCRIPTION: Demonstrates how to update multiple entities in a single PATCH request using OData v4 delta payload format. Shows the structure for creating, updating, and deleting entities in bulk.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPATCH /CatalogService/Books\nContent-Type: application/json\n\n{\n  \"@context\": \"#$delta\",\n  \"value\": [\n    {\n      \"ID\": 17,\n      \"title\": \"CAP - what's new in 2023\",\n      \"price\": 29.99,\n      \"author_ID\": 999\n    },\n    {\n      \"ID\": 85,\n      \"price\": 9.99\n    },\n    {\n      \"ID\": 42,\n      \"@removed\": { \"reason\": \"deleted\" }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sample Bookshop Application\nDESCRIPTION: Command to add a bookshop sample application to an existing CAP project, including custom code and SAP Fiori Elements UI.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncds add sample\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Remote Services for Same API\nDESCRIPTION: YAML configuration demonstrating how to create multiple Remote Services for the same API with different destinations using the model property.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    bupa-abc:\n      model: \"API_BUSINESS_PARTNER\"\n      destination:\n        name: \"s4-business-partner-api-abc\"\n    bupa-def:\n      model: \"API_BUSINESS_PARTNER\"\n      destination:\n        name: \"s4-business-partner-api-def\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Uppercase Element Names in CDS Schema\nDESCRIPTION: This snippet shows an incorrect implementation that violates the 'start-elements-lowercase' rule. The element name 'Title' starts with an uppercase letter, which goes against the recommended naming convention and will trigger a warning from the linter.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/start-elements-lowercase.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nentity Book {\n  key ID : Integer;\n  Title : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Data for CqnVisitor Example in Java\nDESCRIPTION: Creates a sample data list of maps representing books with title and stock information for demonstrating CqnVisitor usage.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nList<Map<String, Object>> books = new ArrayList<>();\nbooks.add(ImmutableMap.of(\"title\", \"Catweazle\", \"stock\", 3));\nbooks.add(ImmutableMap.of(\"title\", \"The Raven\", \"stock\", 42));\nbooks.add(ImmutableMap.of(\"title\", \"Dracula\", \"stock\", 66));\n```\n\n----------------------------------------\n\nTITLE: Implementing CdsRuntimeConfiguration for Framework-Independent Handler Registration\nDESCRIPTION: This Java class implements the CdsRuntimeConfiguration interface to register a custom event handler at runtime using the ServiceLoader mechanism. It configures a generic event handler for all read events across all services.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/building-plugins.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.sap.example.cds;\n\nimport com.sap.cds.services.runtime.CdsRuntimeConfiguration;\nimport com.sap.cds.services.runtime.CdsRuntimeConfigurer;\n\npublic class SampleHandlerRuntimeConfiguration implements CdsRuntimeConfiguration {\n\n  @Override\n  public void eventHandlers(CdsRuntimeConfigurer configurer) {\n    configurer.eventHandler(new SampleHandler());\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Modules in pom.xml\nDESCRIPTION: XML snippet showing how to configure the Maven modules in the root pom.xml file. This allows customization of the service module folder name.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n...\n<modules>\n\t<module>srv</module> <!-- replace srv with your folder name -->\n</modules>\n...\n```\n\n----------------------------------------\n\nTITLE: Handling Managed Associations in CDS for OData EDMX XML\nDESCRIPTION: Illustrates how managed associations in CDS are translated to unmanaged associations with explicit foreign key elements in OData EDMX XML.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_12\n\nLANGUAGE: cds\nCODE:\n```\nservice S {\n  entity Authors { key ID : Integer; name : String; }\n  entity Books   { key ID : Integer; author : Association to Authors; }\n\n  annotate Books:author with @Common.Text: (author.name);\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Schema Namespace=\"S\">\n  <!-- ... -->\n  <EntityType Name=\"Authors\">\n    <!-- ... -->\n    <Property Name=\"name\" Type=\"Edm.String\"/>\n  </EntityType>\n  <EntityType Name=\"Books\">\n    <!-- ... -->\n    <NavigationProperty Name=\"author\" Type=\"S.Authors\"/>\n    <Property Name=\"author_ID\" Type=\"Edm.Int32\"/>\n  </EntityType>\n  <Annotations Target=\"S.Books/author_ID\">\n    <Annotation Term=\"Common.Text\" Path=\"author/name\"/>\n  </Annotations>\n</Schema>\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Service URL via Command Line\nDESCRIPTION: Shell command demonstrating how to set a parameterized URL value during Cloud Foundry deployment using the cf push command with variables.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\ncf push --var reviews_url=https://reviews.ondemand.com/reviews\n```\n\n----------------------------------------\n\nTITLE: Element Filter Implementation\nDESCRIPTION: Example of implementing an element filter that matches String key elements.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_35\n\nLANGUAGE: java\nCODE:\n```\n(path, element, type) -> element.isKey()\n   && type.isSimpleType(CdsBaseType.STRING);\n```\n\n----------------------------------------\n\nTITLE: Converting OpenAPI JSON to CSN Using cds.import.from.openapi() in JavaScript\nDESCRIPTION: Demonstrates the usage of cds.import.from.openapi() function to convert an OpenAPI JSON specification file to CSN. This function is specifically designed for OpenAPI specifications.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-import.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst csn = await cds.import.from.openapi(OpenAPI_JSON_file)\n```\n\n----------------------------------------\n\nTITLE: Finding and Retrieving Annotation Value in Java\nDESCRIPTION: Illustrates how to check for the presence of an annotation and retrieve its value using the Model Reflection API.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nCdsEntity order = model.getEntity(\"my.bookshop.Orders\");\nCdsElement orderNo = order.getElement(\"OrderNo\");\n\nOptional<CdsAnnotation<String>> annotation = orderNo\n        .findAnnotation(\"title\");\nString displayName = annotation.map(CdsAnnotation::getValue)\n        .orElse(orderNo.getName());   // \"Order Number\"\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in Fiori UI Annotations\nDESCRIPTION: Example showing how to use expressions within Fiori UI annotations, including conditional criticality based on status values.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\nservice S {\n  @UI.LineItem: [ // ...\n  {\n    Value: (status), // \n    Criticality: ( status = 'O' ? 2 : ( status = 'A' ? 3 : 0 ) ) // \n  }]\n  entity Order {\n    key id : Integer;\n    // ...\n    status : String;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spring Boot Annotation for Transactional Contexts\nDESCRIPTION: Applying the '@Transactional' annotation in Spring Boot to eagerly start a transaction for a method or class.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/changeset-contexts.md#2025-04-18_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n@Transactional\n```\n\n----------------------------------------\n\nTITLE: Traditional Error Handling for URI Decoding\nDESCRIPTION: Demonstrates the conventional approach to handling potential errors when decoding URIs.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet uri\ntry {\n  uri = decodeURI(input)\n} catch {\n  uri = input\n}\n```\n\n----------------------------------------\n\nTITLE: Using Configuration File for OpenAPI Conversion\nDESCRIPTION: This command demonstrates how to use a JSON configuration file for OpenAPI conversion settings. It also shows that inline options can override file-based configurations.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/openapi.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncds compile srv service.cds --to openapi --openapi:config-file configFile.json --odata-version 4.0 --openapi:diagram false\n```\n\n----------------------------------------\n\nTITLE: Simplified URI Decoding with cds.utils\nDESCRIPTION: Shows how to use the safe decodeURI variant from cds.utils to handle potentially invalid encoded URIs.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { decodeURI } = cds.utils\nlet uri = decodeURI(input)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic CDS Logger\nDESCRIPTION: Creates and uses a basic logger instance with a custom ID.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst LOG = cds.log('sql')\nLOG.info ('whatever', you, 'like...')\n```\n\n----------------------------------------\n\nTITLE: CDS Model with Javadoc Comments\nDESCRIPTION: Demonstrates how to add Javadoc comments to a CDS model. These comments are then reflected in the generated Java interfaces.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_29\n\nLANGUAGE: cds\nCODE:\n```\nnamespace my.bookshop;\n/**\n * The creator/writer of a book, article, or document.\n */\nentity Authors {\n  key ID : Integer;\n  /**\n   * The name of the author.\n   */\n  name : String(30);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Sidecar in Development and Production Mode\nDESCRIPTION: Demonstration of starting the sidecar and main app in a development environment to simulate production settings for testing.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncds watch gen/mtx/sidecar --profile development,prod\ncds watch\n```\n\n----------------------------------------\n\nTITLE: Accessing Messages API from Event Context in Java\nDESCRIPTION: Shows how to access the Messages API from an Event Context to add success messages to the current request without affecting event processing or transactions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ncontext.getMessages().success(\"The order was successfully placed\");\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request to Fetch Reviews via CatalogService\nDESCRIPTION: Shows an HTTP GET request to retrieve reviews for a specific book through the CatalogService running on port 4004.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:4004/browse/Books/201/reviews?\n&$select=rating,date,title\n&$top=3\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Messaging Rules in JSON\nDESCRIPTION: This snippet demonstrates how to configure enterprise messaging rules in the event-mesh.json file. It includes settings for topic and queue rules, adjusting publish and subscribe filters.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"topicRules\": {\n      \"publishFilter\": [\n        \"*\"\n      ],\n      \"subscribeFilter\": [\n        \"*\"\n      ]\n    },\n    \"queueRules\": {\n      \"publishFilter\": [\n        \"${namespace}/*\"\n      ],\n      \"subscribeFilter\": [\n        \"${namespace}/*\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Change Sets in Liquibase YAML\nDESCRIPTION: This YAML snippet defines change sets for Liquibase. Each change set contains an ID, author information, and paths to the SQL files that apply the changes, specified for PostgreSQL database management.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_15\n\nLANGUAGE: yml\nCODE:\n```\ndatabaseChangeLog:\\n   - changeSet:\\n       id: 1\\n       author: me\\n       changes:\\n       - sqlFile:\\n           dbms: postgresql\\n           path: db/changelog/v1/model.sql\\n   - changeSet:\\n       id: 2\\n       author: me\\n       changes:\\n       - sqlFile:\\n           dbms: postgresql\\n           path: db/changelog/v2/model.sql\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Class Structure - JavaScript\nDESCRIPTION: Defines the basic structure of a CDS add plugin class by extending the base Plugin class.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\n\nmodule.exports = class extends cds.add.Plugin {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Views with Parameters in CAP JS\nDESCRIPTION: Illustrates how to define a view with parameters using the 'params' property.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'with.params': {kind:\"entity\",\n    params: { 'ID': { type: 'cds.Integer' } },\n    query: { SELECT:{...} },\n  }\n}})\n```\n\n----------------------------------------\n\nTITLE: Custom Message Event Handler\nDESCRIPTION: Implements a handler for processing custom outbox messages with parameter extraction.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@On(service = \"<OutboxServiceName>\", event = \"myEvent\")\nvoid processMyEvent(OutboxMessageEventContext context) {\n  OutboxMessage message = context.getMessage();\n  Map<String, Object> params = message.getParams();\n  String name = (String) param.get(\"name\");\n  String lastname = (String) param.get(\"lastname\");\n\n  // Perform processing logic for myEvent\n\n  context.setCompleted();\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Plugin Registration\nDESCRIPTION: Example of registering a CDS Add plugin using Node.js require mechanism\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncds.add?.register?.('postgres', require('./lib/add') )\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Tracing for SAP HANA in application.yaml\nDESCRIPTION: YAML configuration for activating JDBC tracing in the SAP HANA JDBC driver using datasource properties. This includes setting the trace file path and trace options.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  dataSource:\n    service-manager: # name of service binding\n      hikari:\n        data-source-properties:\n          traceFile: \"/home/user/jdbctraces/trace_.log\" # use a path that is write accessible\n          traceOptions: \"CONNECTIONS,API,PACKET\"\n```\n\n----------------------------------------\n\nTITLE: Subscribe Tenant with Database Parameters\nDESCRIPTION: Extended subscription request body including SAP service manager parameters for HDI container creation with database ID specification.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subscribedSubdomain\": \"<subdomain>\",\n  \"eventType\": \"CREATE\",\n  \"_application_\": {\n    \"sap\": {\n      \"service-manager\": {\n        \"provisioning_parameters\": { \"database_id\": \"<HANA DB GUID>\" }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining cds.struct Class in TypeScript\nDESCRIPTION: Defines the base class for struct elements, types, aspects, and entities in CDS.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nclass cds.struct extends cds.type {...}\n```\n\n----------------------------------------\n\nTITLE: Creating a Backup of the Original CDS File\nDESCRIPTION: Command to create a backup of the original imported CDS file before making modifications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncp srv/external/API_BUSINESS_PARTNER.cds srv/external/API_BUSINESS_PARTNER-orig.cds\ngit add srv/external/API_BUSINESS_PARTNER-orig.cds\n...\n```\n\n----------------------------------------\n\nTITLE: Using req.subject with CDS Query Language\nDESCRIPTION: Demonstrates how to use the req.subject property with CDS Query Language (cds.ql) methods to perform various database operations on the targeted entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nSELECT.one.from(req.subject)   //> returns single object\nSELECT.from(req.subject)      //> returns one or many in array\nUPDATE(req.subject)          //> updates one or many\nDELETE(req.subject)         //> deletes one or many\n```\n\n----------------------------------------\n\nTITLE: Binding to User-Provided Service in Cloud Foundry\nDESCRIPTION: Shows how to bind a local CAP application's 'my' service to a user-provided service instance named 'bookshop-ups' in Cloud Foundry.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncds bind my --to bookshop-ups\n```\n\n----------------------------------------\n\nTITLE: Overriding OData Type Mapping in CDS\nDESCRIPTION: Example showing how to override default type mappings using @odata.Type annotation for geometric data types.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo {\n  // ...\n  @odata: { Type: 'Edm.GeometryPolygon', SRID: 0 }\n  geoCollection : LargeBinary;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring DB Model to Include Outbox in package.json\nDESCRIPTION: JSON configuration showing how to include the outbox model path when customizing the database model configuration. This ensures the outbox tables are properly created in the database.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"requires\": {\n  \"db\": { ...\n    \"model\": [..., \"@sap/cds/srv/outbox\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Draft Lock Timeout in Properties File\nDESCRIPTION: Example of how to configure the draft lock timeout using an application configuration property.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/fiori.md#2025-04-18_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ncds.fiori.draft_lock_timeout=30min\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry API Dependency in Maven\nDESCRIPTION: Maven dependency configuration for including the OpenTelemetry API in a CAP Java service module for creating custom spans.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.opentelemetry</groupId>\n   <artifactId>opentelemetry-api</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Importing Reuse Models in CAP CDS\nDESCRIPTION: CDS code snippet showing how to import models from reuse packages using 'using from' directives.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nusing from '@capire/bookshop';\nusing from '@capire/common';\n```\n\n----------------------------------------\n\nTITLE: Adding Explicit Casts in CDS Views\nDESCRIPTION: Demonstrates how to add explicit SQL cast expressions in CDS view definitions to avoid runtime errors with certain databases.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo as select from Bar {\n  (foo || bar) as foobar : String\n};\n```\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo as select from Bar {\n  cast (foo || bar as String) as foobar\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AsyncAPI with CDS Annotations\nDESCRIPTION: CDS code example showing how to apply AsyncAPI annotations to a service and event to customize the generated documentation.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/asyncapi.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\n@AsyncAPI.Title        : 'CatalogService Events'\n@AsyncAPI.SchemaVersion: '1.0.0'\n@AsyncAPI.Description  : 'Events emitted by the CatalogService.'\n\nservice CatalogService {\n  @AsyncAPI.EventSpecVersion    : '2.0'\n  @AsyncAPI.EventCharacteristics: {\n    ![state-transfer]: 'full-after-image'\n  }\n  @AsyncAPI.EventSchemaVersion       : '1.0.0'\n\n  event SampleEntity.Changed.v1 : projection on CatalogService.SampleEntity;\n}\n```\n\n----------------------------------------\n\nTITLE: Running CAP Java Apps with Service Bindings\nDESCRIPTION: Example of using cds bind to start a CAP Java application with remote service bindings.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncds bind --exec mvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Adding Deployment Descriptor for Cloud Foundry in CAP\nDESCRIPTION: Command to add a deployment descriptor for Cloud Foundry in a CAP project. This is necessary for deploying the application to Cloud Foundry.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ncds add mta\n```\n\n----------------------------------------\n\nTITLE: Creating PDM Service Instance Configuration\nDESCRIPTION: JSON configuration file for creating a service instance of SAP Personal Data Manager, specifying security settings and application name.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/pdm.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"xs-security\": {\n    \"xsappname\": \"incidents-mgmt\",\n    \"authorities\": [\"$ACCEPT_GRANTED_AUTHORITIES\"]\n  },\n  \"fullyQualifiedApplicationName\": \"incidents-mgmt\",\n  \"appConsentServiceEnabled\": true\n}\n```\n\n----------------------------------------\n\nTITLE: As-of-now Query Result in JSON\nDESCRIPTION: This snippet shows the JSON result of an as-of-now query on the Employees entity, including expanded WorkAssignments and Departments. It represents the current state of the data.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"ID\": \"E1\", \"name\": \"Alice\", \"jobs\": [\n    { \"role\": \"Architect\", \"dept\": {\"name\": \"Core Development\"}},\n    { \"role\": \"Consultant\", \"dept\": {\"name\": \"App Development\"}}\n  ]},\n  { \"ID\": \"E2\", \"name\": \"Bob\", \"jobs\": [\n    { \"role\": \"Builder\", \"dept\": {\"name\": \"Construction\"}}\n  ]}\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Java Keywords in CDS Without Annotation\nDESCRIPTION: This example demonstrates incorrect usage where a Java reserved keyword 'new' is used as a CDS element name without the @cds.java.name annotation, which would cause the rule to raise a warning.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/no-java-keywords.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nnamespace my.bookshop;\n\nentity Books {\n  key ID : Integer;\n  // This will raise a warning because 'new' is a Java keyword\n  new : Boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Requests in OData Batch for Node.js CAP Applications\nDESCRIPTION: Configuration setting to limit the number of requests in OData batches for Node.js CAP applications, helping to prevent denial-of-service attacks.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/aspects.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncds.odata.batch_limit = <max_requests>\n```\n\n----------------------------------------\n\nTITLE: Add H2 Support in CAP Java\nDESCRIPTION: Uses `@sap/cds-dk` command to add H2 support to a CAP Java project. No prerequisites required other than having `@sap/cds-dk` installed.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncds add h2\n```\n\n----------------------------------------\n\nTITLE: Injecting CqnService in Custom Handler\nDESCRIPTION: Shows how to inject a CqnService instance in a custom handler class for data access.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_29\n\nLANGUAGE: java\nCODE:\n```\n@Resource(name = \"CatalogService\")\nprivate CqnService catalogService;\n```\n\n----------------------------------------\n\nTITLE: Translating CDS Paths to OData Paths in EDMX XML\nDESCRIPTION: Demonstrates how CDS paths are translated to OData paths, distinguishing between association path steps and structure access.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\nservice S {\n  entity E {\n    key id : Integer;\n    f : Association to F;\n    @Some.Term: (f.struc.y)\n    val : Integer;\n  }\n  entity F {\n    key id : Integer;\n    struc {\n      y : Integer;\n    }\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Schema Namespace=\"S\">\n  <!-- ... -->\n  <EntityType Name=\"E\">\n    <!-- ... -->\n    <NavigationProperty Name=\"f\" Type=\"S.F\"/>\n    <Property Name=\"val\" Type=\"Edm.Int32\"/>\n  </EntityType>\n  <EntityType Name=\"F\">\n    <!-- ... -->\n    <Property Name=\"struc_y\" Type=\"Edm.Int32\"/>\n  </EntityType>\n  <Annotations Target=\"S.E/val\">\n    <Annotation Term=\"Some.Term\" Path=\"f/struc_y\"/>\n  </Annotations>\n</Schema>\n```\n\n----------------------------------------\n\nTITLE: Geospatial Functions in CDS\nDESCRIPTION: Example of using SAP HANA geospatial functions in CDS queries.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\nentity Geo as select from Foo {\n  geoColumn.ST_Area() as area : Decimal,\n  new ST_Point(2.25, 3.41).ST_X() as x : Decimal\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying Active Instances Directly in HTTP PATCH Request\nDESCRIPTION: Example of an HTTP PATCH request to modify active instances directly when bypass_draft is enabled.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/fiori.md#2025-04-18_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPATCH /Books(ID=123,IsActiveEntity=true)\n\n{\n  \"title\": \"How to be more active\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building SAP HANA HDI Files for Deployment\nDESCRIPTION: Command to generate SAP HANA HDI files for deployment from the project root.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\ncds build --production\n```\n\n----------------------------------------\n\nTITLE: Configuring SAAS Registry in CAP Application\nDESCRIPTION: YAML configuration for setting up the SAAS registry in a CAP application. This configuration is typically part of the mta.yaml file for Cloud Foundry deployments.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n- name: bookshop-registry\n  type: org.cloudfoundry.managed-service\n  parameters:\n    service: saas-registry\n    service-plan: application\n    config:\n      appName: bookshop-${org}-${space}\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n Structure in CSN Model for CAP.js\nDESCRIPTION: This example shows the structure for implementing internationalization in a CSN model. It demonstrates how to organize translations by language key and text key, though this requires custom handling as there's no out-of-the-box support from CAP.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_25\n\nLANGUAGE: js\nCODE:\n```\n({\n  i18n: {\n    'language-key': {\n      'text-key': \"some string\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Database Deployer Logs in Cloud Foundry\nDESCRIPTION: Command to view recent logs of the database deployer application to verify successful SAP HANA deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncf logs <app-name>-db-deployer --recent\n```\n\n----------------------------------------\n\nTITLE: Alternative .env Configuration with Dot Notation\nDESCRIPTION: Example showing how to use dot notation in .env files to specify configuration options.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\ncds.requires.db.kind = sql\n```\n\n----------------------------------------\n\nTITLE: Mapping SQL View with Plain Names\nDESCRIPTION: Creates a mapping view that converts quoted names to plain ones while preserving parameter functionality.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nVIEW DATA_MODEL_BOOKSHOP_BOOKINFO (in AUTHOR nvarchar(10)) AS SELECT\n  \"id\"        AS ID,\n  \"book.author.info\" AS BOOK_AUTHOR_INFO\nFROM \"data.model.Bookshop.Bookinfo\"(AUTHOR => :AUTHOR)\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Model Provider in Node.js CAP Application\nDESCRIPTION: This JSON snippet configures the CAP runtime to use the remote model provider from the sidecar by setting the 'cds.xt.ModelProviderService' to 'from-sidecar'.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"cds\":{\n  \"requires\": {\n    \"toggles\": true,\n    \"cds.xt.ModelProviderService\": \"from-sidecar\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Extension to Production Tenant in CAP\nDESCRIPTION: Command to push a CAP extension to the production tenant using the cds push command with authentication.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncds push --to http://localhost:4005 -u carol:\n```\n\n----------------------------------------\n\nTITLE: Generated Interface for Actions with Unique Event Contexts\nDESCRIPTION: Example of Java interface generated with the new POJO generation defaults. This showcases how with 'uniqueEventContexts' set to true, the interface name is prefixed with the entity name, and with 'sharedInterfaces' set to true, global types are properly used.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// uniqueEventContexts: true =>\n// interface is prefixed with entity name \"MyEntity\"\npublic interface MyEntityDoSomethingContext extends EventContext {\n\n  // sharedInterfaces: true => global MyArray type is used\n  Collection<MyArray.Item> getValues();\n  void setValues(Collection<MyArray.Item> values);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Drafts Programmatically\nDESCRIPTION: Example showing how to query draft entities using the .drafts reflection in Node.js.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nSELECT.from(Books.drafts) //returns all drafts of the Books entity\n```\n\n----------------------------------------\n\nTITLE: Creating Delete Results with ResultBuilder in Java\nDESCRIPTION: Shows how to construct a Result object for DELETE operations using the deletedRows method with the count of deleted records.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ResultBuilder.deletedRows;\n\nint deleteCount = 7;\nResult r = deletedRows(deleteCount).result();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Handlers for cds-mtx APIs\nDESCRIPTION: JavaScript code that demonstrates how to register custom event handlers for cds-mtx APIs using the mtx event in a custom server.js file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst cds = require('@sap/cds')\n\ncds.on('mtx', async () => {\n  const provisioning = await cds.connect.to('ProvisioningService')\n  provisioning.prepend(() => {\n    provisioning.on('UPDATE', 'tenant', async (req, next) => {\n      await next() // default implementation creating HDI container\n      return '<bookshop-srv-url>/admin'\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Cloud Foundry Routes and Health Checks Using CF CLI\nDESCRIPTION: Commands to diagnose route issues and health check failures in Cloud Foundry. These commands help identify whether an app exists, is correctly routed, and if the readiness checks are passing for all instances.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncf apps # -> list all apps\ncf app <your app name> # -> get details on your app, incl. state and routes\ncf app <your app name> --guid # -> get your app's guid\ncf curl \"/v3/processes/<your app guid>/stats\"\n  # -> list of processes (one per app instance) with property \"routable\"\n  #    indicating whether the most recent readiness check was successful\n```\n\n----------------------------------------\n\nTITLE: Custom Vocabulary CDS Example\nDESCRIPTION: Shows how to use custom vocabulary annotations in CDS after configuring additional vocabularies. The example demonstrates applying a custom annotation to an entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_25\n\nLANGUAGE: cds\nCODE:\n```\nservice S {\n  @MyVocabulary.MyAnno: 'My new Annotation'\n  entity E { /*...*/ };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining cds.error() Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the cds.error() helper, which constructs new error objects with optional details and caller parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cds.error (\n  message  : string | object,\n  details? : object\n  caller?  : function\n)\n```\n\n----------------------------------------\n\nTITLE: Checking for Count Queries in Java\nDESCRIPTION: Uses the static method isCountQuery to determine if a CQL query only returns a single count result.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// cqn: Select.from(\"Books\").columns(CQL.count().as(\"bookCount\"));\nboolean isCount = CqnAnalyzer.isCountQuery(cqn);  // true\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Logging Configuration in YAML\nDESCRIPTION: Configuration settings for Spring Boot logging levels in application.yaml, showing how to set default logging levels and configure specific loggers.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Set new default level\nlogging.level.root: WARN\n\n# Adjust custom logger\nlogging.level.my.loggers.order.Consolidation: INFO\n\n# Turn off all loggers matching org.springframework.*:\nlogging.level.org.springframework: OFF\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Custom Events\nDESCRIPTION: Shows how clients can subscribe to custom events defined in a service.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst ReviewsService = await cds.connect.to('ReviewsService')\nReviewsService.on ('ReviewAdded', msg => {\n   // do something in addition...\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Immutable Values in CAP Java 2.x\nDESCRIPTION: Demonstrates how to work with immutable values when changing value types. The example shows that modifying a value's type returns a new instance while leaving the original unchanged.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nLiteral<Number> number = CQL.val(100);\nValue<String>   string = number.type(CdsBaseType.STRING); // number is unchanged\n```\n\n----------------------------------------\n\nTITLE: Navigating to Home Directory in Container\nDESCRIPTION: Changes the current directory to the home directory within the Docker container.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncd\n```\n\n----------------------------------------\n\nTITLE: Single Table Strategy in CDS\nDESCRIPTION: Illustrates the single-table strategy for inheritance hierarchies, where all entities are stored in a single table with a discriminator (`kind`) to distinguish between different types. This simplifies querying and avoids UNIONs or excessive JOINs.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\n```cds\nentity Users {\n  key name : String;\n  kind : String enum { user; group }; // discriminator\n  group : Association to Users;\n  members : Composition of many Users on members.group = $self;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Preventing Tenant Data Deletion on Unsubscription\nDESCRIPTION: Handler to skip deletion of tenant resources during unsubscription. Useful when a tenant has multiple subscriptions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/multitenancy.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Before\npublic void beforeUnsubscribe(UnsubscribeEventContext context) {\n    if (keepResources(context.getTenant())) {\n      context.setCompleted(); // avoid @On handler phase\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Cloud Application Event Hub Instance in mta.yaml for Node.js\nDESCRIPTION: YAML configuration in mta.yaml to set up the SAP Cloud Application Event Hub instance for Node.js applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-broker.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - name: incidents-event-broker\n    type: org.cloudfoundry.managed-service\n    parameters:\n      service: event-broker\n      service-plan: event-connectivity\n      config:\n        # unique identifier for this event broker instance\n        # should start with own namespace (i.e., \"foo.bar\") and may not be longer than 15 characters\n        systemNamespace: cap.incidents\n        webhookUrl: ~{incidents-srv-api/url}/-/cds/event-broker/webhook\n      requires:\n        - name: incidents-srv-api\n```\n\n----------------------------------------\n\nTITLE: DiffVisitor Filter Implementation\nDESCRIPTION: Java example showing how to implement a filter for DiffVisitor to observe only specific changes related to authors.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_49\n\nLANGUAGE: java\nCODE:\n```\ndiff.add(new Filter() {\n  @Override\n  public boolean test(Path path, CdsElement element, CdsType type) {\n    return element.getType().isAssociation()\n            && element.getType().as(CdsAssociationType.class).getTarget().getQualifiedName().equals(Authors_.CDS_NAME)\n            || path.target().type().equals(Authors_.CDS_NAME);\n  }\n}, ...);\n```\n\n----------------------------------------\n\nTITLE: Using Valid Types in CDS Definitions\nDESCRIPTION: Illustrates the correct usage of types in CDS definitions, avoiding the use of aspects or entities where only types are allowed.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_6\n\nLANGUAGE: cds\nCODE:\n```\naspect SomeAspect {...}\nentity SomeEntity {...}\nentity E { x: SomeAspect; y: SomeEntity; }\n```\n\n----------------------------------------\n\nTITLE: Processing All Services in a CDS Model\nDESCRIPTION: Example of compiling all services in a CDS model to EDM/EDMX format using a generator function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// for all services\nlet all = cds.compile.to.edm (csn, {service:'all'})\nfor (let [edm,{file,suffix}] of all)\n  console.log (file,suffix,edm)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing CAP Samples\nDESCRIPTION: Commands to clone the CAP samples repository and install dependencies.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/sap-samples/cloud-cap-samples samples\ncd samples\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Health Check Endpoint for CAP.js\nDESCRIPTION: Code snippet that demonstrates how to override the default health check endpoint provided by CAP.js. This custom implementation creates a lightweight anonymous ping endpoint at '/health' for availability monitoring.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncds.on('bootstrap', app => app.get('/health', (_, res) => {\n  res.status(200).send(`I'm fine, thanks.`)\n}))\n```\n\n----------------------------------------\n\nTITLE: Running App Router with Service Bindings on PowerShell\nDESCRIPTION: Command to start the App Router with bound XSUAA service credentials using cds bind on PowerShell with proper argument escaping.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_28\n\nLANGUAGE: powershell\nCODE:\n```\ncds bind --exec '--' npm start --prefix app/router\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies for CAP Application\nDESCRIPTION: Commands to install and freeze dependencies for UI applications in a CAP project. This is necessary for deploying UI components of the multitenant application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --prefix app/browse\nnpm i --prefix app/admin-books\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add a dependency to the custom plugin package in the application's package.json file. It adds @cap-js/postgres as a dependency.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/custom-builds.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@cap-js/postgres\": \"^1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Service Entity, Events, and Operations Properties\nDESCRIPTION: Shows how to access and use the entities, events, and operations properties which provide access to CSN definitions exposed by the service.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Assumed `this` is an instance of cds.Service\nlet { Books, Authors } = this.entities\nlet all_entities = [ ... this.entities ]\nfor (let k in this.entities) //... k is a CSN definition's name\nfor (let d of this.entities) //... d is a CSN definition\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Reserved SQL Keyword in CDS Entity Name\nDESCRIPTION: Example of a CDS schema that incorrectly uses a reserved SQL keyword 'Order' as an entity name, which triggers a warning from the no-db-keywords rule.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/no-db-keywords.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nnamespace db;\n\nentity Order {\n  key ID : Integer;\n  item   : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Data Files with Precise Entity Filtering\nDESCRIPTION: Command to add data files only for entities that exactly match 'books' using a regular expression to avoid partial matches.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncds add data --filter \"books$\"\n```\n\n----------------------------------------\n\nTITLE: Adding Static Content Routes to xs-app.json\nDESCRIPTION: JSON configuration to add routes for static content in the xs-app.json file. This enables serving static resources from a local directory with appropriate cache control headers.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routes\": [\n    ...\n    { // [!code ++]\n      \"source\": \"^/app/(.*)$\", // [!code ++]\n      \"target\": \"$1\", // [!code ++]\n      \"localDir\": \"resources\", // [!code ++]\n      \"cacheControl\": \"no-cache, no-store, must-revalidate\" // [!code ++]\n    } // [!code ++]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using cds.linked with Loaded CSN in JavaScript\nDESCRIPTION: Example of using cds.linked with a loaded CSN object to create a linked model.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet csn = cds.load('some-model.cds')\nlet linked = cds.linked(csn) // linked === csn\n```\n\n----------------------------------------\n\nTITLE: Annotating Annotations in CDS for OData\nDESCRIPTION: Shows how to annotate annotations in CDS, using approaches like adding elements to record structures and using appended annotation names.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_18\n\nLANGUAGE: cds\nCODE:\n```\n@UI.LineItem: [\n  {Value: ApplicationName, @UI.Importance: #High}, // \n  {Value: Description},\n  {Value: SourceName},\n  {Value: ChangedBy},\n  {Value: ChangedAt}\n]\n@UI.LineItem.@UI.Criticality: #Positive // \n\n\n@Common.Text: Text\n@Common.Text.@UI.TextArrangement: #TextOnly // \n```\n\n----------------------------------------\n\nTITLE: Configuring Garbage Collection of Stale Drafts in JSON\nDESCRIPTION: JSON configuration to set the timeout for automatic deletion of inactive drafts.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/fiori.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"fiori\": {\n      \"draft_deletion_timeout\": \"28d\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CDS Maven Plugin for Resolving Reuse Packages\nDESCRIPTION: XML snippet showing how to configure the CDS Maven Plugin to resolve reuse packages in a pom.xml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-maven-plugin</artifactId>\n  <version>${cds.services.version}</version>\n  <executions>\n    ...\n    <execution>\n      <id>cds.resolve</id>\n      <goals>\n        <goal>resolve</goal>\n      </goals>\n    </execution>\n    ...\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Cloud Application Event Hub Instance in mta.yaml for Java\nDESCRIPTION: YAML configuration in mta.yaml to set up the SAP Cloud Application Event Hub instance for Java applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-broker.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - name: incidents-event-broker\n    type: org.cloudfoundry.managed-service\n    parameters:\n      service: event-broker\n      service-plan: event-connectivity\n      config:\n        # unique identifier for this event broker instance\n        # should start with own namespace (i.e., \"foo.bar\") and may not be longer than 15 characters\n        systemNamespace: cap.incidents\n        webhookUrl: ~{incidents-srv-api/url}/messaging/v1.0/eb\n      requires:\n        - name: incidents-srv-api\n```\n\n----------------------------------------\n\nTITLE: Defining Data Types for Aggregate Functions in CDS\nDESCRIPTION: CDS code example showing how to explicitly define data types when using aggregate functions in CDS views to ensure successful builds.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\nview AddressView as select from Employee.Address {\n    street, apartment, postal_code, MAX(createdAt) AS createdAt: timestamp\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Separate CAP Services for Local Testing\nDESCRIPTION: Shows shell commands to start three separate CAP services (orders, reviews, bookstore) on different ports for local testing of remote integration.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncds watch orders --port 4006\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds watch reviews --port 4005\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds watch bookstore --port 4004\n```\n\n----------------------------------------\n\nTITLE: Adding SAP HANA Cloud and XSUAA Services in CAP\nDESCRIPTION: Command to add SAP HANA Cloud and XSUAA service configurations to a CAP project. This is a prerequisite for deploying a multitenant application to cloud platforms.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncds add hana,xsuaa\n```\n\n----------------------------------------\n\nTITLE: Binding to Cloud Foundry Service in CAP\nDESCRIPTION: Demonstrates how to bind a local CAP application's 'db' service to a Cloud Foundry service instance named 'bookshop-db'. This command creates a service key and stores binding information in .cdsrc-private.json.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds bind db --to bookshop-db\n```\n\n----------------------------------------\n\nTITLE: Using cds.linked with CDL Source in JavaScript\nDESCRIPTION: Example of using cds.linked with a string containing CDL source code to create a linked model.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet linked = cds.linked`\n  entity Books {\n  \tkey ID: UUID;\n  \ttitle: String;\n  \tauthor: Association to Authors;\n  }\n  entity Authors {\n  \tkey ID: UUID;\n  \tname: String;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Reading Texts in Specific Language for Translation UIs in SQL\nDESCRIPTION: SQL query to read texts in a specific language (French in this example) from the Books entity for translation purposes.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ID, texts[locale='fr'].title, texts[locale='fr'].descr from Books\n```\n\n----------------------------------------\n\nTITLE: Adding Reuse Aspects in CDS\nDESCRIPTION: Extends the `SomeEntity` definition from a reuse package with the `managed` aspect from `@sap/cds/common`. This allows applying common features or behaviors to entities defined in external packages.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\n```cds\nusing { SomeEntity } from 'some-reuse-package';\nusing { managed } from '@sap/cds/common';\nextend SomeEntity with managed;\n```\n```\n\n----------------------------------------\n\nTITLE: Compatibility Option for Media Content Streaming in CAP Node.js\nDESCRIPTION: Compatibility approach for streaming media content by returning an object with a Readable stream as value and properties for content type, filename, and disposition type that set the respective headers.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsrv.on('getCoverImageFunction', 'Books', (req) => {\n  const readable = new Readable()\n  return {\n    value: readable,\n    $mediaContentType: 'image/jpeg',\n    $mediaContentDispositionFilename: 'cover.jpg', // > optional\n    $mediaContentDispositionType: 'inline' // > optional\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatic Invocation of Draft Actions in JavaScript\nDESCRIPTION: Examples of how to programmatically invoke draft actions using the provided APIs.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/fiori.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait srv.new(MyEntity.drafts, data)     // create new draft\nawait srv.discard(MyEntity.drafts, keys) // discard draft\nawait srv.edit(MyEntity, keys)           // create draft from active instance\nawait srv.new(MyEntity.drafts).for(keys) // same as above\nawait srv.save(MyEntity.drafts, keys)    // activate draft\n```\n\n----------------------------------------\n\nTITLE: Binding to Kubernetes Service in CAP\nDESCRIPTION: Shows the general syntax for binding to a Kubernetes service binding or secret in a CAP application, using the current Kubernetes context.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncds bind -2 ‹service binding or secret› --on k8s\n```\n\n----------------------------------------\n\nTITLE: Service Manager Primary Binding Configuration\nDESCRIPTION: YAML configuration for cloud deployment marking Service Manager binding as primary.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  config.activate.on-profile: cloud\ncds:\n  dataSource:\n    binding: \"my-service-manager-binding\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Protocol Adapter for CAP Java\nDESCRIPTION: This Java class extends HttpServlet to create a custom protocol adapter for CAP Java. It serves as the foundation for handling HTTP requests and mapping them to CQL statements for execution on ApplicationServices.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/building-plugins.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class SampleAdapter extends HttpServlet {\n  private final CdsRuntime runtime;\n\n  public SampleAdapter(CdsRuntime runtime) {\n    this.runtime = runtime;\n    // see below for further details\n  }\n\n  @Override\n  public void service(HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    // see below for further details\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Service Configuration after Prototype Chaining\nDESCRIPTION: Shows the resulting configuration for 'serviceA' after prototype chaining is applied. It inherits properties from 'serviceB' and the 'hana' service.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"serviceB\",\n  \"myProperty\": \"my overwritten property\",\n  \"myOtherProperty\": \"my other property\",\n  \"impl\": \"[...]/hana/Service.js\",\n  \"use\": \"hana\"\n}\n```\n\n----------------------------------------\n\nTITLE: Service Configuration in JSON Format\nDESCRIPTION: Shows the JSON configuration for a service with an alternative lookup name, allowing access through both the lookup name and the service definition name.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{ \"cds\": {\n  \"requires\": {\n    \"db\": \"sqlite\",\n    \"reviews\" : {                  // lookup name\n      \"service\": \"ReviewsService\"  // service definition's name\n    }\n  }\n}}\n```\n\n----------------------------------------\n\nTITLE: SAP Event Mesh Configuration\nDESCRIPTION: JSON configuration for Enterprise Messaging with CloudEvents format and topic prefixes\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/s4.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"messaging\": {\n        \"kind\": \"enterprise-messaging-shared\",\n        \"format\": \"cloudevents\",\n        \"publishPrefix\": \"$namespace/ce/\",\n        \"subscribePrefix\": \"+/+/+/ce/\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Outboxes in YAML\nDESCRIPTION: YAML configuration for setting up custom outbox services with specific parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  outbox:\n    services:\n      MyCustomOutbox:\n        maxAttempts: 5\n        storeLastError: false\n      MyOtherCustomOutbox:\n        maxAttempts: 10\n        storeLastError: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Bypass of SAP Fiori Draft Flow in JSON Configuration\nDESCRIPTION: JSON configuration to enable bypassing the SAP Fiori Draft flow for direct creation and modification of active instances.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/fiori.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"fiori\": {\n      \"bypass_draft\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Separate CAP Servers for Reviews and Bookstore\nDESCRIPTION: These commands start separate CAP servers for the reviews service and the bookstore application. They demonstrate how to run services in separate processes for distributed scenarios.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncds watch reviews\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds watch bookstore\n```\n\n----------------------------------------\n\nTITLE: CDS Schema Modification Example\nDESCRIPTION: Sample CDS model changes including field length increase, new relationships, and entity additions\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\nentity Books { ...\n   title : localized String(222); //> increase length from 111 to 222\n   foo : Association to Foo;      //> add a new relationship\n   bar : String;                  //> add a new element\n}\nentity Foo { key ID: UUID }       //> add a new entity\n```\n\n----------------------------------------\n\nTITLE: Configuring Draft Cancellation Timeout in YAML\nDESCRIPTION: Sets the timeout duration for draft cancellation. By default, drafts are locked from editing by other users for 15 minutes.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/fiori-drafts.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncds.drafts.cancellationTimeout: 1h\n```\n\n----------------------------------------\n\nTITLE: Updating Database Deployer Path in MTA Configuration for CAP\nDESCRIPTION: Updates the MTA configuration to use the shared database deployer instead of the default one. This change points to the shared-db project that contains the consolidated database model.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: samples-db-deployer\n    path: gen/db # [!code --]\n    path: shared-db/gen/db # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Compiling CAP Java Project with Maven\nDESCRIPTION: Execute Maven compile command to perform a full build of the project, including CDS build and code generation. This resolves missing class errors in the IDE.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/getting-started.md#2025-04-18_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile\n```\n\n----------------------------------------\n\nTITLE: Registering OAuth2PropertySupplier for Service Bindings\nDESCRIPTION: Registers a custom OAuth2PropertySupplier with the Cloud SDK to handle OAuth2 properties for specific service bindings. This is needed to properly resolve service bindings into Cloud SDK destinations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nstatic {\n    OAuth2ServiceBindingDestinationLoader.registerPropertySupplier(\n        options -> options.getServiceBinding().getTags().contains(\"<bindingTag>\"),\n            BizPartnerOAuth2PropertySupplier::new);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Deployment Scripts in package.json\nDESCRIPTION: JSON configuration for adding npm scripts to package.json for building, deploying, and undeploying the application. These scripts simplify the deployment process using Cloud Foundry commands.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"build\": \"mbt build -t gen --mtar mta.tar\", // [!code ++]\n    \"deploy\": \"cf deploy gen/mta.tar\", // [!code ++]\n    \"undeploy\": \"cf undeploy capire.samples --delete-services --delete-service-keys\" // [!code ++]\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Tagged Template Strings with cds.error() in JavaScript\nDESCRIPTION: Example of using tagged template strings with cds.error(), which formats objects using Node's util.format() instead of toString().\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlet e = foo || cds.error `Expected 'foo' to be truthy, but got: ${foo}`\n```\n\n----------------------------------------\n\nTITLE: Compiling Multiple Named In-Memory Sources\nDESCRIPTION: Example of compiling multiple named CDL or CSN sources, which allows 'using from' clauses to be resolved between the sources.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet csn = cds.compile ({\n  'db/schema.cds': `\n    using {cuid} from '@sap/cds/common';\n    entity Foo : cuid { foo:String }\n  `,\n  'srv/services.cds': `\n    using {Foo} from '../db/schema';\n    entity Bar as projection on Foo;\n    extend Foo with { bar:String }\n  `,\n  '@sap/cds/common.csn': `\n    {\"definitions\":{\n      \"cuid\": { \"kind\": \"aspect\", \"elements\": {\n        \"ID\": { \"key\":true, \"type\": \"cds.UUID\" }\n      }}\n    }}\n  `,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing CAP Project with Sample and Adding Dependencies\nDESCRIPTION: Creates a new CAP project with a sample bookshop application and adds HANA and XSUAA dependencies.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds init bookshop --add sample && cd bookshop\ncds add hana,xsuaa\n```\n\n----------------------------------------\n\nTITLE: Using Function-based Transaction Management in CAP JS\nDESCRIPTION: Example of the implicit transaction management approach where commit and rollback are handled automatically when passing a function to tx(). The transaction is automatically committed on successful execution.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.tx (async tx => {\n  await tx.run (SELECT.from(Foo))\n  await tx.create (Foo, {...})\n  await tx.read (Foo)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding @sap/cds-mtxs Package Dependency (Node.js)\nDESCRIPTION: Command to add the @sap/cds-mtxs package dependency for enabling feature toggles in Node.js.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @sap/cds-mtxs\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Endpoint\nDESCRIPTION: YAML configuration for Spring Boot health endpoint exposure and indicators.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nmanagement:\n  endpoint:\n    health:\n      show-components: always # shows individual indicators\n  endpoints:\n    web:\n      exposure:\n        include: health # only expose /health as web endpoint\n  health:\n     defaults.enabled: false # turn off all indicators by default\n     ping.enabled: true\n     db.enabled: true\n```\n\n----------------------------------------\n\nTITLE: Java Service Configuration in mta.yaml for Cloud Foundry\nDESCRIPTION: YAML configuration for setting up the Java service module in mta.yaml for Cloud Foundry deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: bookshop-srv\n    type: java\n    path: srv\n    parameters:\n      ...\n    provides:\n      - name: srv-api # required by consumers of CAP services (e.g. approuter)\n        properties:\n          srv-url: ${default-url}\n    requires:\n      - name: app-api\n        properties:\n          CDS_MULTITENANCY_APPUI_URL: ~{url}\n          CDS_MULTITENANCY_APPUI_TENANTSEPARATOR: \"-\"\n      - name: bookshop-auth\n      - name: bookshop-db\n      - name: mtx-api\n        properties:\n          CDS_MULTITENANCY_SIDECAR_URL: ~{mtx-url}\n      - name: bookshop-registry\n```\n\n----------------------------------------\n\nTITLE: CSN Type Definitions Examples\nDESCRIPTION: Shows examples of scalar, structured, arrayed, and enumeration type definitions in CSN format.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions: {\n  'scalar.type':  {type:\"cds.String\", length:3 },\n  'struct.type':  {elements:{'foo': {type:\"cds.Integer\"}}},\n  'arrayed.type': {items:{type:\"cds.Integer\"}},\n  'enum.type':    {enum:{ 'asc':{}, 'desc':{} }}\n}})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Entity Naming in CDS Schema\nDESCRIPTION: Example of an entity definition that incorrectly uses 'books' as the entity name, which starts with a lowercase letter and violates the naming convention.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/start-entities-uppercase.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nnamespace my.bookshop;\n\nentity books {\n  key ID : Integer;\n  title  : String;\n  stock  : Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: UUID Generator Implementation\nDESCRIPTION: Example of a generator that creates UUID values for missing elements.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nprocessor.addGenerator(\n   (path, element, type)   -> type.isSimpleType(UUID),       // filter\n   (path, element, isNull) -> isNull ? null : randomUUID()); // generator\n```\n\n----------------------------------------\n\nTITLE: Extending CDS Linked Classes with Mixin in JavaScript\nDESCRIPTION: Shows how to use the mixin() method to enhance built-in classes with additional methods for CSN to CDL conversion.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst cds = require ('@sap/cds')\n\n// simplistic csn2cdl enablement\ncds.linked.classes .mixin (\n  class type {\n    toCDL(){ return `${this.kind} ${this.name} : ${this.typeAsCDL()};\n` }\n    typeAsCDL(){ return `${this.type.replace(/^cds\\./,'')}` }\n  },\n  class struct {\n    typeAsCDL() { return `{\\n${ Object.values(this.elements).map (\n      e => `  ${e.toCDL()}`\n    ).join('')}}`}\n  },\n  class entity extends cds.struct {\n    typeAsCDL() { return (\n      this.includes ? this.includes+' ' : ''\n    ) + super.typeAsCDL() }\n  },\n  class Association {\n    typeAsCDL(){ return `Association to ${this.target}` }\n  },\n)\n\n// test drive\nlet m = cds.linked`\n  entity Books : cuid { title:String; author: Association to Authors }\n  entity Authors : cuid { name:String; }\n  aspect cuid : { key ID:UUID; }\n`\nm.foreach (d => console.log(d.toCDL()))\n```\n\n----------------------------------------\n\nTITLE: Using cds.requires with Service Definition Names\nDESCRIPTION: Shows how cds.requires provides access to service configurations through both lookup names and service definition names, unlike cds.env.requires.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n[dev] cds repl\n> cds.requires.db                  //> the effective config for db\n> cds.requires.reviews             //> the effective config for reviews\n> cds.requires.ReviewsService      //> same as cds.requires.reviews\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Expressions for Custom Path Mapping in CDS\nDESCRIPTION: Demonstrates how to use dynamic expressions in CDS to create custom Path elements in OData EDMX XML.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\n@Some.Term: {$edmJson: {$Path: '/com.sap.foo.EntityContainer/EntityName/FieldName'}}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Annotation Term=\"Some.Term\">\n  <Path>/com.sap.foo.EntityContainer/EntityName/FieldName</Path>\n</Annotation>\n```\n\n----------------------------------------\n\nTITLE: CDS Entity Schema Changes Example\nDESCRIPTION: Example of allowed schema changes in CDS, showing type modifications for integers and strings\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo {\n   anInteger : Int64;     // from former: Int32\n   aString : String(22);  // from former: String(11)\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying CAP Application for PDM Integration\nDESCRIPTION: Commands for building a production version of the CAP application and deploying it to Cloud Foundry for integration with SAP Personal Data Manager.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/pdm.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncds build --production\ncf create-service-push\n```\n\n----------------------------------------\n\nTITLE: Using Generated Accessor Interfaces\nDESCRIPTION: This Java code shows how to use generated accessor interfaces to construct nested structures.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nAuthors author = Authors.create();\nauthor.setId(23);\nauthor.setName(\"Bram Stoker\");\nBooks book = Books.create();\nbook.setId(97);\nbook.setAuthor(author);\n```\n\n----------------------------------------\n\nTITLE: Time-Period Query Result in JSON\nDESCRIPTION: This snippet shows the JSON result of a time-period query on the Employees entity, displaying all historical data since 2016. It includes expanded WorkAssignments and Departments, showing the evolution of roles over time.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"ID\": \"E1\", \"name\": \"Alice\", \"jobs\": [\n    { \"role\": \"Developer\", \"dept\": {\"name\": \"App Development\"}},\n    { \"role\": \"Developer\", \"dept\": {\"name\": \"Core Development\"}},\n    { \"role\": \"Senior Developer\", \"dept\": {\"name\": \"Core Development\"}},\n    { \"role\": \"Consultant\", \"dept\": {\"name\": \"App Development\"}}\n  ]}, ...\n]\n```\n\n----------------------------------------\n\nTITLE: Using Literal Values in Query Conditions\nDESCRIPTION: Demonstrates how to use literal values in query conditions with the 'val' method from CQL.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_49\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.val;\n\nSelect.from(EMPLOYEE)\n      .columns(e -> e.name())\n      .where(e -> val(50).gt(e.age()));\n```\n\n----------------------------------------\n\nTITLE: Configuring Destination Retrieval Strategy in Java\nDESCRIPTION: YAML configuration for setting destination retrieval strategy in Java applications. This controls how destinations are resolved in multi-tenant scenarios.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    service-for-provider:\n      type: \"odata-v4\"\n      destination:\n        retrievalStrategy: \"AlwaysProvider\"\n\n```\n\n----------------------------------------\n\nTITLE: Using Project Root for File Access\nDESCRIPTION: Demonstrates how to use the cds.root property to access files in the project root directory, ensuring absolute path resolution.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Print current project's package name\nlet package_json = path.join (cds.root,'package.json')\nlet { name, description } = require(package_json)\nconsole.log ({ name, description })\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Where Predicates in CQL Statements\nDESCRIPTION: Shows how to modify a query by replacing or extending its where clause with a new predicate using a custom Modifier implementation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_99\n\nLANGUAGE: java\nCODE:\n```\nimport com.sap.cds.ql.CQL;\n\n// query: SELECT from Books where title = 'Capire'\n// copy:  SELECT from Books where title = 'Capire' or title = 'CAP Java'\n\nCqnSelect copy = CQL.copy(query, new Modifier() {\n   @Override\n   public Predicate where(Predicate where) {\n      return CQL.or(where, CQL.get(\"title\").eq(\"CAP Java\"));\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration via CDS Environment\nDESCRIPTION: Shows how to access authentication configuration through the cds.env property, which provides access to the effective configuration from various sources.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n[dev] cds repl\n> cds.env.requires.auth\n{\n  kind: 'basic-auth',\n  strategy: 'mock',\n  users: {\n    alice: { tenant: 't1', roles: [ 'admin' ] },\n    bob: { tenant: 't1', roles: [ 'cds.ExtensionDeveloper' ] },\n    # ...,\n    '*': true\n  },\n  tenants: {\n    t1: { features: [ 'isbn' ] },\n    t2: { features: '*' }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using List Values in Query Conditions\nDESCRIPTION: Shows how to combine multiple values into a list (row value) for use in comparisons, enabling complex filtering conditions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_51\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.*;\n\nCqnListValue props = list(get(\"year\"), get(\"quarter\"));\nCqnListValue vals  = list(val(2012), val(2));\nCqnSelect q = Select.from(SALES).where(comparison(props, GT, vals));\n```\n\n----------------------------------------\n\nTITLE: Configure Maven for H2 Schema Generation\nDESCRIPTION: Sets up the cds-maven-plugin to generate a `schema.sql` for H2 using a specific execution goal. Requires modification of the srv/pom.xml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<execution>\n\t<id>schema.sql</id>\n\t<goals>\n\t\t<goal>cds</goal>\n\t</goals>\n\t<configuration>\n\t\t<commands>\n\t\t\t<command>deploy --to h2 --dry --out \"${project.basedir}/src/main/resources/schema.sql\"</command>\n\t\t</commands>\n\t</configuration>\n</execution>\n```\n\n----------------------------------------\n\nTITLE: Renaming CDS Entity Types for Java Interface Generation\nDESCRIPTION: Illustrates the use of @cds.java.this.name annotation to rename CDS entity types for Java interface generation without propagation effects.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_23\n\nLANGUAGE: cds\nCODE:\n```\n@cds.java.this.name: 'Book'\nentity Books {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: CSV-Based Text Bundle Format\nDESCRIPTION: Illustrates the format of a CSV-based text bundle for internationalization, which can be edited in spreadsheet applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/i18n.md#2025-04-18_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\nkey;en;de;zh_CN;...\nBook;Book;Buch;...\nBooks;Books;Bücher;...\n...\n```\n\n----------------------------------------\n\nTITLE: CAP Node.js PostgreSQL Service Binding Configuration\nDESCRIPTION: JSON configuration for setting up PostgreSQL service binding in a CAP Node.js project's .cdsrc-private.json file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"db\": {\n      \"kind\": \"postgres\",\n      \"credentials\": {\n        \"host\": \"localhost\",\n        \"port\": 5432,\n        \"user\": \"postgres\",\n        \"password\": \"postgres\",\n        \"database\": \"postgres\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for Default AuditLog Handler\nDESCRIPTION: YAML configuration to enable debug logging for the default AuditLog handler in the application.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/auditlog.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  level:\n    com.sap.cds.auditlog: DEBUG\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Toggles in Development (Java)\nDESCRIPTION: YAML configuration for toggling features per user in the development environment for Java.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  security.mock.users:\n    - name: carol\n      features:\n      - isbn\n    - name: erin\n      features:\n      - isbn\n      - reviews\n    - name: fred\n      features:\n```\n\n----------------------------------------\n\nTITLE: Java Multitenancy Configuration\nDESCRIPTION: Configuration added to .cdsrc.json to enable multitenancy with sidecar in a Java project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"profiles\": [\n    \"with-mtx-sidecar\",\n    \"java\"\n  ],\n  \"requires\": {\n    \"[production]\": {\n      \"multitenancy\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CloudEvents Configuration\nDESCRIPTION: Configuration for enabling CloudEvents format in messaging service.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_16\n\nLANGUAGE: jsonc\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"format\": \"cloudevents\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Generated Types in TypeScript Build Process\nDESCRIPTION: Illustrates a command to compile TypeScript and copy generated types to the output directory as part of the build process.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ntsc && cp -r @cds-models dist\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SAP HANA Index for Entity in CAP\nDESCRIPTION: SQL code for creating a custom index on the 'title' field of the Books entity. This file should be placed in db/src directory to be included in the HANA deployment artifacts.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINDEX sap_capire_bookshop_Books_title_index\nON sap_capire_bookshop_Books (title)\n```\n\n----------------------------------------\n\nTITLE: Overwriting Credentials for Multiple Services\nDESCRIPTION: Examples of using cds bind to overwrite credential values for multiple services in a single command.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncds bind --to my-service,redis-cache:my-key,bookshop-xsuaa --credentials \\\n  '{ \"my-service\": { \"onpremise_proxy_host\": \"localhost\" }, \"redis-cache:my-key\":{ \"hostname\": \"localhost\", \"port\": 1234 }}'\n\ncds bind --to-app-services bookshop-srv --credentials \\\n  '{ \"my-service\": { \"onpremise_proxy_host\": \"localhost\" }, \"redis-cache\":{ \"hostname\": \"localhost\", \"port\": 1234 }}'\n```\n\n----------------------------------------\n\nTITLE: Setting Server Keep-Alive Timeout in CAP Node.js\nDESCRIPTION: Configures the server's keepAliveTimeout to prevent 502 errors caused by long-running requests in a CAP Node.js application.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.once('listening', ({ server }) => {\n  server.keepAliveTimeout = 3 * 60 * 1000 // > 3 mins\n})\nmodule.exports = cds.server\n```\n\n----------------------------------------\n\nTITLE: Providing Initial Data for Countries in CSV\nDESCRIPTION: CSV content for initializing the 'Countries' code list with country codes, names, and descriptions.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_11\n\nLANGUAGE: csv\nCODE:\n```\ncode;name;descr\nAU;Australia;Commonwealth of Australia\nCA;Canada;Canada\nCN;China;People's Republic of China (PRC)\nFR;France;French Republic\nDE;Germany;Federal Republic of Germany\nIN;India;Republic of India\nIL;Israel;State of Israel\nMM;Myanmar;Republic of the Union of Myanmar\nGB;United Kingdom;United Kingdom of Great Britain and Northern Ireland\nUS;United States;United States of America (USA)\nEU;European Union;European Union\n```\n\n----------------------------------------\n\nTITLE: CDS Entity Definition with Virtual Element\nDESCRIPTION: CDS model definition example showing an entity with both a regular and a virtual element, used to demonstrate changes in virtual elements handling.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo {\n  foo : Integer;\n  virtual bar : Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Endpoints Configuration in YAML\nDESCRIPTION: YAML configuration for multiple service endpoints with different paths and protocols.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ncds.application.services.CatalogService.serve.endpoints:\n  - path: 'browse'\n    protocol: 'odata-v4'\n  - path: 'list'\n    protocol: 'odata-v2'\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Access with Accessor Interfaces\nDESCRIPTION: Demonstrates how to create and use accessor interfaces for type-safe data access. The example defines a Books interface and shows how to use it with the Struct.access method.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_18\n\nLANGUAGE: java\nCODE:\n```\ninterface Books extends Map<String, Object> {\n  @CdsName(\"ID\")   // name of the CDS element\n  Integer getID();\n\n  String getTitle();\n  void setTitle(String title);\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.Struct.access;\n...\n\nBooks book = access(data).as(Books.class);\n\nString title = book.getTitle();   // read the value of the element 'title' from the underlying map\nbook.setTitle(\"Miss Betty\");      // update the element 'title' in the underlying map\n\ntitle = data.get(\"title\");        // direct access to the underlying map\n\ntitle = book.get(\"title\");        // hybrid access to the underlying map through the accessor interface\n```\n\n----------------------------------------\n\nTITLE: Auto-creating SAP Event Mesh instances in MTA YAML\nDESCRIPTION: Additional YAML configuration for MTA deployment to automatically create SAP Event Mesh service instances using a service descriptor file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-mesh.md#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  # SAP Event Mesh as above...\n    parameters:\n      path: ./<Event Mesh Service Descriptor JSON file>\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Application with Hybrid Profile\nDESCRIPTION: Shell command to run a CAP Node.js application with the hybrid profile, enabling access to remote services through the Destination service.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_54\n\nLANGUAGE: sh\nCODE:\n```\ncds watch --profile hybrid\n```\n\n----------------------------------------\n\nTITLE: Java Example HTTP Request Template with Authentication\nDESCRIPTION: HTTP request template for Java CAP applications with authentication header for a local mock user.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_16\n\nLANGUAGE: http\nCODE:\n```\n@server = http://localhost:8080\n\n### CatalogService.Books\nGET {{server}}/odata/v4/admin/Books\n{{auth}}\n...\n```\n\n----------------------------------------\n\nTITLE: Executing Path Expressions and Filters in CAP.js\nDESCRIPTION: Examples of using path expressions, infix filters and exists predicates with the CAP.js database service. Demonstrates various SELECT queries with complex paths and filtering conditions.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// $ cds repl --profile better-sqlite\nvar { server } = await cds.test('bookshop'), { Books, Authors } = cds.entities\nawait INSERT.into (Books) .entries ({ title: 'Unwritten Book' })\nawait INSERT.into (Authors) .entries ({ name: 'Upcoming Author' })\nawait SELECT `from ${Books} { title as book, author.name as author, genre.name as genre }`\nawait SELECT `from ${Authors} { books.title as book, name as author, books.genre.name as genre }`\nawait SELECT `from ${Books} { title as book, author[ID<170].name as author, genre.name as genre }`\nawait SELECT `from ${Books} { title as book, author.name as author, genre.name as genre }` .where ({'author.name':{like:'Ed%'},or:{'author.ID':170}})\nawait SELECT `from ${Books} { title as book, author.name as author, genre.name as genre } where author.name like 'Ed%' or author.ID=170`\nawait SELECT `from ${Books}:author[name like 'Ed%' or ID=170] { books.title as book, name as author, books.genre.name as genre }`\nawait SELECT `from ${Books}:author[150] { books.title as book, name as author, books.genre.name as genre }`\nawait SELECT `from ${Authors} { ID, name, books { ID, title }}`\nawait SELECT `from ${Authors} { ID, name, books { ID, title, genre { ID, name }}}`\nawait SELECT `from ${Authors} { ID, name, books.genre { ID, name }}`\nawait SELECT `from ${Authors} { ID, name, books as some_books { ID, title, genre.name as genre }}`\nawait SELECT `from ${Authors} { ID, name, books[genre.ID=11] as dramatic_books { ID, title, genre.name as genre }}`\nawait SELECT `from ${Authors} { ID, name, books.genre[name!='Drama'] as no_drama_books_count { count(*) as sum }}`\nawait SELECT `from ${Authors} { books.genre.ID }`\nawait SELECT `from ${Authors} { books.genre }`\nawait SELECT `from ${Authors} { books.genre.name }`\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Facade Entity with Parameters\nDESCRIPTION: Creates a CDS entity definition that serves as a facade for the SQL view with parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nnamespace data.model;\ncontext Bookshop {\n  @cds.persistence.exists\n  entity Bookinfo (AUTHOR : String(100)) {\n    key id : Integer;\n    book_author_info : String(100);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Launch Configuration for Remote Java Debugging\nDESCRIPTION: VS Code launch.json configuration for attaching a debugger to a remote Java application running in Cloud Foundry.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"java\",\n  \"name\": \"Attach to Remote Java App\",\n  \"request\": \"attach\",\n  \"hostName\": \"localhost\",\n  \"port\": \"8000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying CDS Typer CLI Help Information\nDESCRIPTION: This snippet shows the complete help output for the cds-typer command-line tool. It includes the command synopsis, usage instructions, and detailed descriptions of all available options with their default values.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-typer.out.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n> cds-typer --help\n\nSYNOPSIS\n\n  cds-typer [cds file | \"*\"]\n\n  Generates type information based on a CDS model.\n  Call with at least one positional parameter pointing\n  to the (root) CDS file you want to compile.\n\nOPTIONS\n\n  --buildTask\n  --build_task: <true | false>\n    (default: true)\n\n    If set to true, the typescript build task will not be registered/ executed.\n    This value must be set in your project configuration.\n    Passing it as parameter to the cds-typer CLI has no effect.\n\n  --cache: <none | blake2s256>\n    (default: none)\n\n    How to cache typer runs.\n    none: fully run cds-typer whenever it is called\n    blake2s256: only run if the blake2s256-hash of the model has changed. Hash is stored in a file between runs.\n\n  --help\n\n    This text.\n\n  --inlineDeclarations\n  --inline_declarations: <flat | structured>\n    (default: flat)\n\n    Whether to resolve inline type declarations\n    flat: (x_a, x_b, ...)\n    or structured: (x: {a, b}).\n\n  --IEEE754Compatible\n  --ieee754compatible: <true | false>\n    (default: false)\n\n    If set to true, floating point properties are generated\n    as IEEE754 compatible '(number | string)' instead of 'number'.\n\n  --jsConfigPath\n  --js_config_path: <string>\n\n    Path to where the jsconfig.json should be written.\n    If specified, cds-typer will create a jsconfig.json file and\n    set it up to restrict property usage in types entities to\n    existing properties only.\n\n  --logLevel\n  --log_level SILENT | ERROR | WARN | INFO | DEBUG | TRACE | SILLY | VERBOSE\n    (default: ERROR)\n\n    Minimum log level that is printed.\n    The default is only used if no explicit value is passed\n    and there is no configuration passed via cds.env either.\n\n  --legacyBinaryTypes\n  --legacy_binary_types: <true | false>\n    (default: false)\n\n    If set to true, Binary and LargeBinary are generated\n    as strings.\n\n  --outputDirectory\n  --output_directory: <string>\n    (default: ./)\n\n    Root directory to write the generated files to.\n\n  --propertiesOptional\n  --properties_optional: <true | false>\n    (default: true)\n\n    If set to true, properties in entities are\n    always generated as optional (a?: T).\n    Setting it to false makes properties non-optional instead (a: T).\n\n  --targetModuleType\n  --target_module_type: <esm | cjs | auto>\n    (default: auto)\n\n    Output format for generated .js files.\n    Setting it to auto tries to derive the module type from\n    the package.json and falls back to CJS.\n\n  --useEntitiesProxy\n  --use_entities_proxy: <true | false>\n    (default: true)\n\n    If set to true the 'cds.entities' exports in the generated 'index.js'\n    files will be wrapped in 'Proxy' objects\n    so static import/require calls can be used everywhere.\n    \n    WARNING: entity properties can still only be accessed after\n    'cds.entities' has been loaded\n\n  --version\n\n    Prints the version of this tool.\n```\n\n----------------------------------------\n\nTITLE: Mock User Configuration for Testing\nDESCRIPTION: YAML configuration example for defining mock users and tenants with specific roles, attributes, and features for testing purposes.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/security.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  config.activate.on-profile: test\ncds:\n  security:\n    mock:\n      users:\n        - name: Viewer-User\n          password: viewer-pass\n          tenant: CrazyCars\n          roles:\n            - Viewer\n          attributes:\n            Country: [GER, FR]\n          additional:\n            email: myviewer@crazycars.com\n          features:\n            - cruise\n            - park\n\n        - name: Privileged-User\n          password: privileged-pass\n          privileged: true\n          features:\n            - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Defining Correct Association to Many in CDS\nDESCRIPTION: This snippet demonstrates a correct implementation of an association to many from Authors to Books with a well-defined ON condition and backlink.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/assoc2many-ambiguous-key.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nentity Authors {\n  key ID : Integer;\n  name : String;\n  books : Association to many Books on books.author = $self;\n}\n\nentity Books {\n  key ID : Integer;\n  title : String;\n  author : Association to one Authors;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Comparison Values in CQL Statements\nDESCRIPTION: Demonstrates how to modify comparison predicates by intercepting and replacing specific values in the query.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_100\n\nLANGUAGE: java\nCODE:\n```\n// query: SELECT from Books where title = 'Capire'\n// copy:  SELECT from Books where title = 'CAP'\n\nCqnSelect copy = CQL.copy(query, new Modifier() {\n   @Override\n   public Predicate comparison(Value<?> lhs, Operator op, Value<?> rhs) {\n      if (lhs.isRef() && lhs.asRef().lastSegment().equals(\"title\")) {\n         rhs = CQL.val(\"CAP\");\n      }\n      return CQL.comparison(lhs, op, rhs);\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: OData EDMX SAP Annotation\nDESCRIPTION: Shows the resulting EDMX XML output after translating the CDS SAP annotation. The annotation is applied as a function import attribute.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n  <FunctionImport Name=\"EditEvent\" ...\n    sap:applicable-path=\"to_eventStatus/EditEnabled\">\n    ...\n  </FunctionImport>\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Views for Calc View and UDF\nDESCRIPTION: Shows the generated SQL views for calculation view and user-defined function access.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nVIEW WeUseAddressCalcView AS SELECT\n  AddressCalcView_0.id\nFROM AddressCalcView(PLACEHOLDER.\"$$USERID$$\" => 4711) AS AddressCalcView_0;\n\nVIEW WeUseAddressUDF AS SELECT\n  AddressUDF_0.id\nFROM AddressUDF() AS AddressUDF_0;\n```\n\n----------------------------------------\n\nTITLE: Configuring CDS Maven Plugin\nDESCRIPTION: XML configuration for CDS Maven Plugin to extract models into target/cds/ folder.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/building-plugins.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-maven-plugin</artifactId>\n  <version>${cds.services.version}</version>\n  <executions>\n    ...\n    <execution>\n      <id>cds.resolve</id>\n      <goals>\n        <goal>resolve</goal>\n      </goals>\n    </execution>\n    ...\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configure Maven for PostgreSQL Schema Generation\nDESCRIPTION: Sets up the cds-maven-plugin to generate a `schema.sql` for PostgreSQL using a specific execution goal. Requires modification of the srv/pom.xml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<execution>\n\t<id>schema.sql</id>\n\t<goals>\n\t\t<goal>cds</goal>\n\t</goals>\n\t<configuration>\n\t\t<commands>\n\t\t\t<command>deploy --to postgres --dry --out \"${project.basedir}/src/main/resources/schema.sql\"</command>\n\t\t</commands>\n\t</configuration>\n</execution>\n```\n\n----------------------------------------\n\nTITLE: Local Development Environment Configuration\nDESCRIPTION: Environment variable configuration in a .env file for local development, setting the URL for a remote service endpoint.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_47\n\nLANGUAGE: properties\nCODE:\n```\ncds_requires_REVIEWS_credentials_url=http://localhost:4008/reviews\n```\n\n----------------------------------------\n\nTITLE: Binding to SAP Event Mesh service key\nDESCRIPTION: Shell command to bind the CAP application to the SAP Event Mesh instance's service key for hybrid testing.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-mesh.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncds bind -2 <instance>:<service-key>\n```\n\n----------------------------------------\n\nTITLE: Running App Router with Service Bindings on Mac/Linux\nDESCRIPTION: Command to start the App Router with bound XSUAA service credentials using cds bind on Mac/Linux systems.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\ncds bind --exec -- npm start --prefix app/router\n```\n\n----------------------------------------\n\nTITLE: Using Programmatically Created Destinations in Java\nDESCRIPTION: Spring Boot application.yaml configuration to use a programmatically created destination by name, created through SAP Cloud SDK APIs.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    REVIEWS:\n      type: \"odata-v2\"\n      destination:\n        name: \"reviews-destination\"\n```\n\n----------------------------------------\n\nTITLE: Using srv.foreach Method in JavaScript\nDESCRIPTION: Shows examples of using the foreach method with both CQN queries and simplified entity name syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\ncds.foreach (SELECT.from('Foo'), each => console.log(each))\ncds.foreach ('Foo', each => console.log(each))\n```\n\n----------------------------------------\n\nTITLE: Working with Immutable References in CAP Java 2.x\nDESCRIPTION: Shows how to handle immutable references when setting aliases or types. The methods return new instances instead of modifying the original reference.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nElementRef<?> authorName = CQL.get(\"name\").as(\"Author\");\nElementRef<?> nombre = authorName.as(\"nombre\");         // authorName is unchanged\nElementRef<?> string = authorName.type(\"cds.String\");   // authorName is unchanged\n```\n\n----------------------------------------\n\nTITLE: Adding H2 JDBC Driver Dependency in Maven for CAP Java\nDESCRIPTION: This XML snippet shows how to add the H2 JDBC driver as a Maven dependency for a CAP Java project. The dependency is set with runtime scope.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-h2.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.h2database</groupId>\n  <artifactId>h2</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using CDS_CONFIG with JSON String\nDESCRIPTION: Example of using the CDS_CONFIG environment variable with a JSON string to configure a CAP application.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nCDS_CONFIG='{\"requires\":{\"db\":{\"kind\":\"sqlite\"}}}' cds serve\n```\n\n----------------------------------------\n\nTITLE: Executing CDS Query in REPL\nDESCRIPTION: Example of running a SELECT query in the CDS REPL to retrieve data from an entity and see the resulting query object.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nSELECT.from(Foo)\n```\n\n----------------------------------------\n\nTITLE: Building and Running CAP Java Project with Maven\nDESCRIPTION: Command to build and run a CAP Java application using the Spring Boot Maven plugin. This single command handles the build process and starts the application in development mode.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/building.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Creating Service Key for XSUAA Service in Cloud Foundry\nDESCRIPTION: Command to create a service key for the XSUAA service instance to access credentials from a local application.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ncf create-service-key bookshop-uaa bookshop-uaa-key\n```\n\n----------------------------------------\n\nTITLE: Listing CAP environment default settings\nDESCRIPTION: Command to display the default configuration settings for CAP in your project environment, which helps understand what can be customized.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/index.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncds env ls defaults\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Tasks in JSON\nDESCRIPTION: This JSON snippet shows how to configure build tasks in a configuration file. It defines tasks for nodejs and postgres build plugins.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/custom-builds.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"tasks\": [\n  { \"for\": \"nodejs\" },\n  { \"for\": \"postgres\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring MTA Modules for CAP Services in YAML\nDESCRIPTION: This snippet shows how to configure multiple CAP service modules in the mta.yaml file. It includes settings for the bookstore, orders, and reviews services, specifying their paths, build parameters, and dependencies.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: bookstore-srv\n    type: nodejs\n    path: bookstore/gen/srv\n    parameters:\n      instances: 1\n      buildpack: nodejs_buildpack\n    build-parameters:\n      builder: npm\n    provides:\n      - name: bookstore-api\n        properties:\n          srv-url: ${default-url}\n    requires:\n      - name: samples-db\n      - name: samples-auth\n      - name: samples-messaging\n      - name: samples-destination\n\n  - name: orders-srv\n    type: nodejs\n    path: orders/gen/srv\n    parameters:\n      instances: 1\n      buildpack: nodejs_buildpack\n    build-parameters:\n      builder: npm\n    provides:\n      - name: orders-api\n        properties:\n          srv-url: ${default-url}\n    requires:\n      - name: samples-db\n      - name: samples-auth\n      - name: samples-messaging\n      - name: samples-destination\n\n  - name: reviews-srv\n    type: nodejs\n    path: reviews/gen/srv\n    parameters:\n      instances: 1\n      buildpack: nodejs_buildpack\n    build-parameters:\n      builder: npm\n    provides:\n      - name: reviews-api\n        properties:\n          srv-url: ${default-url}\n    requires:\n      - name: samples-db\n      - name: samples-auth\n      - name: samples-messaging\n      - name: samples-destination\n```\n\n----------------------------------------\n\nTITLE: Extending Database Entity in CDS\nDESCRIPTION: Example of extending a Books entity in a Bookshop application by adding GTIN and rating fields using CDS syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/assets/customization-old.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nusing sap.bookshop from '_base/db/datamodel';\n\nextend entity bookshop.Books with {\n  GTIN: String(14);\n  rating: Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Audit Log Service in mta.yml\nDESCRIPTION: YAML configuration to add SAP Audit Log Service as an existing resource in mta.yml for deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n- name: my-auditlog-service\n  type: org.cloudfoundry.existing-service\n```\n\n----------------------------------------\n\nTITLE: Dynamic Pool Configuration Properties - HikariCP\nDESCRIPTION: Configuration properties for HikariCP datasource to control connection pool behavior including minimum idle connections, maximum pool size, and idle timeout settings.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/multitenancy.md#2025-04-18_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\ncds.dataSource.<service-instance>.hikari.minimum-idle\ncds.dataSource.<service-instance>.hikari.maximum-pool-size\ncds.dataSource.<service-instance>.hikari.idle-timeout\n```\n\n----------------------------------------\n\nTITLE: Generating CAP Java Project with Maven Archetype (Mac/Linux)\nDESCRIPTION: Command to create a new CAP Java project from scratch using the CDS Maven archetype on Mac/Linux systems. The command specifies the archetype artifact ID, group ID, and uses the latest released version.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/building.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmvn archetype:generate -DarchetypeArtifactId=cds-services-archetype -DarchetypeGroupId=com.sap.cds -DarchetypeVersion=RELEASE\n```\n\n----------------------------------------\n\nTITLE: Using srv.run with Equivalent CQN Operations\nDESCRIPTION: Shows equivalent srv.run operations that correspond to the CRUD-style convenience methods.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nawait srv.run( SELECT.from(Books,201) )\nawait srv.run( SELECT.from(Books).where({author_ID:106}) )\nawait srv.run( INSERT.into(Books).entries({title:'Wuthering Heights'}) )\nawait srv.run( INSERT.into(Books).entries({title:'Catweazle'}) )\nawait srv.run( UPDATE(Books).set({discount:'10%'}).where({stock:{'>':111}}) )\nawait srv.run( UPDATE(Books,201).with({stock:111}) )\nawait srv.run( DELETE.from(Books,201) )\n```\n\n----------------------------------------\n\nTITLE: Extending Entities with Validity in CAP CDS\nDESCRIPTION: Adds a 'validTo' date field to existing entities to handle historical code entries. This sets up validity boundaries for codes in entities such as 'Countries'.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_21\n\nLANGUAGE: cds\nCODE:\n```\nusing { sap.common.Countries } from '@sap/cds/common';\nextend Countries with { validTo: Date default '9999-12-31'; }\n```\n\n----------------------------------------\n\nTITLE: Initializing Shared Database Module for CAP Microservices\nDESCRIPTION: Creates a shared database project for CAP microservices and adds dependencies to the individual service projects. This enables deploying a common data model to a single database that's shared across services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncds init shared-db --add hana\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm add --workspace shared-db @capire/bookstore\nnpm add --workspace shared-db @capire/reviews\nnpm add --workspace shared-db @capire/orders\n```\n\n----------------------------------------\n\nTITLE: Configuring EDMX Generation for OData V2\nDESCRIPTION: Maven build command configuration to generate EDMX files for OData V2 services. This command compiles all service definitions and generates localized EDMX files in the specified output directory.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<command>compile ${project.basedir} -s all -l all -2 edmx-v2 -o ${project.basedir}/src/main/resources/edmx/v2</command>\n```\n\n----------------------------------------\n\nTITLE: Configuring Imports in CSN Model for CAP.js\nDESCRIPTION: This snippet demonstrates how to import other models using the 'requires' property in a CSN model. It shows how to reference both absolute module names and relative filenames, similar to Node.js import patterns.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_24\n\nLANGUAGE: js\nCODE:\n```\n({\n  requires: [ '@sap/cds/common', './db/schema' ],\n  // [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Exporters for Dynatrace in YAML\nDESCRIPTION: YAML configuration for a CAP Java service module to export metrics to Dynatrace while disabling traces and logs exports, as Dynatrace OneAgent handles the traces.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- name: <srv-module>\n  # ...\n  properties:\n    # ...\n    OTEL_METRICS_EXPORTER: dynatrace\n    OTEL_TRACES_EXPORTER: none\n    OTEL_LOGS_EXPORTER: none\n```\n\n----------------------------------------\n\nTITLE: Compiling CDS Services to AsyncAPI Documents\nDESCRIPTION: Command to convert all services in the srv/ directory to AsyncAPI documents and store them in the docs/ folder.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/asyncapi.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds compile srv --service all -o docs --to asyncapi\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Tunnel to Cloud Foundry Service Container\nDESCRIPTION: Command to establish an SSH tunnel to a Cloud Foundry application that allows local access to remote backing services like SAP HANA. This method requires no HTTP proxy and enabled SSH access.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncf ssh <app> -L localhost:<LocalPort>:<RemoteIP>:<RemotePort>\n```\n\n----------------------------------------\n\nTITLE: Reading All Translations for Translation UIs in SQL\nDESCRIPTION: SQL query to read texts in all available translations from the Books entity for translation purposes.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ID, texts.locale, texts.title, texts.descr from Books\n```\n\n----------------------------------------\n\nTITLE: Adding UI Facet for Displaying Change History\nDESCRIPTION: Add a UI facet to display the change history on the object page of an entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\nannotate Bookshop.Books with @(\n  UI : { ...\n    Facets : [ ...\n       {\n          $Type               : 'UI.ReferenceFacet',\n          ID                  : 'ChangeHistoryFacet',\n          Label               : '{i18n>ChangeHistory}',\n          Target              : 'changes/@UI.PresentationVariant',\n          ![@UI.PartOfPreview]: false\n        } ...\n   ] ...\n  } ...);\n```\n\n----------------------------------------\n\nTITLE: Starting CDS Server in REPL\nDESCRIPTION: Using the .run dot command in CDS REPL to start a Node.js CDS server for a specific CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\n.run cap/samples/bookshop\n```\n\n----------------------------------------\n\nTITLE: CSN Structured Type Example\nDESCRIPTION: Shows the definition of a structured type in CSN, with multiple elements of different types.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'structured.type': {elements:{\n    'foo': {type:\"cds.Integer\"},\n    'bar': {type:\"cds.String\"}\n  }}\n}})\n```\n\n----------------------------------------\n\nTITLE: Initializing a new CAP project called 'bookshop'\nDESCRIPTION: Command to create a new CAP project named 'bookshop' using the cds init command, which sets up the default project structure and configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/index.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncds init bookshop\n```\n\n----------------------------------------\n\nTITLE: Configuring App-Specific Settings in package.json\nDESCRIPTION: Shows how to add custom app-specific configuration options in the package.json file.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": { ... },\n\"my-app\": { \"myoption\": \"value\" }\n```\n\n----------------------------------------\n\nTITLE: Defining a Temporal Business Object (Anti-pattern)\nDESCRIPTION: An example of extending a base class to add temporal features. This demonstrates the limitations of single inheritance in class-based approaches.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nabstract entity TemporalBO : BusinessObject {\n  validFrom  : Date @cds.valid.from;\n  validTo    : Date @cds.valid.to;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Container using Generated Static Method in Java\nDESCRIPTION: Demonstrates the use of a static create method generated in accessor interfaces to create a data container and set properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nBook book = Books.create();\n\nbook.setTitle(\"Dracula\");\nString title = book.getTitle();   // title: \"Dracula\"\n```\n\n----------------------------------------\n\nTITLE: Using 'as' for Aliases in CDS Views\nDESCRIPTION: Shows the correct usage of 'as' keyword for table and column aliases in CDS view definitions to avoid potential errors.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo as select from Bar b // table alias w/o 'as'\n{\n  column1 c1,  // column alias w/o 'as'\n  column2,\n  column3      // missing comma !!\n  column4      // -> column alias w/o 'as' !!!\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Built-in Types in JavaScript\nDESCRIPTION: Illustrates how CDS built-in types are defined using CSN object structures and cds.linked techniques.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ncds.builtin.types = cds.linked`\n  using from './roots';\n  context cds {\n    type UUID         : String(36);\n    type Boolean      : boolean;\n    type Integer      : number;\n    type UInt8        : Integer;\n    type Int16        : Integer;\n    type Int32        : Integer;\n    type Int64        : Integer;\n    type Integer64    : Integer;\n    type Decimal      : number;\n    type Double       : number;\n    type Date         : date;\n    type Time         : date;\n    type DateTime     : date;\n    type Timestamp    : date;\n    type String       : string;\n    type Binary       : string;\n    type LargeString  : string;\n    type LargeBinary  : string;\n    type Map          : struct;\n  }\n`.definitions\n```\n\n----------------------------------------\n\nTITLE: Open Type XML Representation\nDESCRIPTION: Shows the EDMX representation of an open entity type with the OpenType attribute.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<EntityType Name=\"Book\" OpenType=\"true\">\n  <Key>\n    <PropertyRef Name=\"id\"/>\n  </Key>\n  <Property Name=\"id\" Type=\"Edm.Integer\" Nullable=\"false\"/>\n</EntityType>\n```\n\n----------------------------------------\n\nTITLE: CDS Entity with Default Parameter Values\nDESCRIPTION: Demonstrates how to set default values for parameters in CDS entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_13\n\nLANGUAGE: cds\nCODE:\n```\nnamespace data.model;\ncontext Bookshop {\n  @cds.persistence.exists\n  entity Bookinfo (AUTHOR : String(100) default 'Unknown') {\n    key id : Integer;\n    book_author_info : String(100);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Test Data with CSV/JSON Format in CAP CLI\nDESCRIPTION: Command for adding test data to a CAP project with the option to specify JSON as the content type instead of the default CSV format.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncds add data --content-type json\n```\n\n----------------------------------------\n\nTITLE: Configuring App Router in mta.yaml for Token Forwarding\nDESCRIPTION: YAML configuration for App Router in mta.yaml that enables token forwarding to the mtx-sidecar, necessary for authentication with the MTX APIs.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: approuter\n    requires:\n      - name: mtx-sidecar\n        group: destinations\n        properties:\n          name: mtx-sidecar\n          url: ~{url}\n          forwardAuthToken: true\n```\n\n----------------------------------------\n\nTITLE: Best Practices for Status Code Testing\nDESCRIPTION: Recommended approach for testing HTTP response status codes in CAP applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, status } = await GET `/catalog/Books`\nexpect(data).to.equal(...)     //> do this to see what's wrong\nexpect(status).to.equal(200)   //> Do it at the end, if at all\n```\n\n----------------------------------------\n\nTITLE: Running CAP Java Application\nDESCRIPTION: Start the CAP Java application by running the main method in the Application.java file. After starting, the application can be accessed via a web browser.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/getting-started.md#2025-04-18_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:8080/\n```\n\n----------------------------------------\n\nTITLE: Annotating Entity Elements in CDS\nDESCRIPTION: Example of adding UI annotations to an entity element in CDS, demonstrating how to select an element and apply UI-specific properties like Hidden.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nannotate Foo.Bar with {\n    code|\n};\n```\n\nLANGUAGE: cds\nCODE:\n```\nannotate Foo.Bar with {\n    code @UI : { | }\n};\n```\n\nLANGUAGE: cds\nCODE:\n```\nannotate Foo.Bar with {\n    code @UI : {Hidden : |}\n};\n```\n\nLANGUAGE: cds\nCODE:\n```\nannotate Foo.Bar with {\n    code @UI : {Hidden : false }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Database ID for Tenant Subscription\nDESCRIPTION: Handler to specify target database ID when multiple SAP HANA instances are registered. Sets provisioning parameters before tenant subscription.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/multitenancy.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Before\npublic void beforeSubscription(SubscribeEventContext context) {\n    context.getOptions().put(\"provisioningParameters\",\n        Collections.singletonMap(\"database_id\", \"<database ID>\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Specific CAP Service in CDS\nDESCRIPTION: Demonstrates how to import a specific service from a CAP package using the 'using' directive in CDS.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nusing { CatalogService } from '@capire/bookshop/srv/cat-service';\n```\n\n----------------------------------------\n\nTITLE: Test Environment Configuration Example\nDESCRIPTION: Example showing proper test environment setup order and potential issues with environment loading.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ncds.test(__dirname) //> always should go first\n// anything else goes after that:\ncds.env.fiori.lean_draft = true\nclass MyService extends cds.Service {}\n```\n\n----------------------------------------\n\nTITLE: Plugin CLI Options Implementation - JavaScript\nDESCRIPTION: Shows how to add command-line options to the plugin for customizing output paths.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds-dk')\nconst { copy, path } = cds.utils, { join } = path\n\nmodule.exports = class extends cds.add.Plugin {\n  options() {\n    return {\n      'out': {\n        type: 'string',\n        short: 'o',\n        help: 'The output directory for the pg.yaml file.',\n      }\n    }\n  }\n\n  async run() {\n    const pg = join(__dirname, 'pg.yaml')\n    await copy(pg).to(cds.cli.options.out, 'pg.yaml')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OData Service URL Pattern\nDESCRIPTION: Shows the URL pattern used to expose Application Services via OData, including application URL, base path and service name parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nhttp(s)://<application_url>/<base_path>/<service_name>\n```\n\n----------------------------------------\n\nTITLE: Checking Files with isfile()\nDESCRIPTION: Shows how to verify if a path points to a file and retrieve its absolute path for further operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isfile, fs } = cds.utils\nlet file = isdir ('package.json')\nlet json = fs.readFileSync (file,'utf8')\n```\n\n----------------------------------------\n\nTITLE: Renaming CDS Entity Elements for Java Accessor Interface Generation\nDESCRIPTION: Demonstrates how to use the @cds.java.name annotation to rename CDS entity elements that conflict with Java keywords for accessor interface generation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_21\n\nLANGUAGE: cds\nCODE:\n```\nentity Equity {\n  @cds.java.name : 'clazz'\n  class : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CDS formatter settings file\nDESCRIPTION: Command to create an initial version of the .cdsprettier.json configuration file with custom formatting options for your project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nformat-cds --init\n```\n\n----------------------------------------\n\nTITLE: Obtaining CdsModel from EventContext in Java\nDESCRIPTION: Demonstrates how to retrieve the CdsModel object from the EventContext in a CAP Java event handler.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport com.sap.cds.services.handler.annotations.On;\nimport com.sap.cds.services.EventContext;\nimport com.sap.cds.reflect.CdsModel;\n\n@On(event = \"READ\", entity = \"CatalogService.Books\")\npublic void readBooksVerify(EventContext context) {\n    CdsModel model = context.getModel();\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: MTX Local Development Configuration\nDESCRIPTION: YAML configuration for local MTX development setup with tenant-independent datasource.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  config.activate.on-profile: local-mtxs\ncds:\n  persistence.services:\n    tenant-independent:\n      dataSource: \"tenantIndependentDataSource\"\n  dataSource:\n    binding: \"mtx-sqlite\"\n```\n\n----------------------------------------\n\nTITLE: Sending a Request with Headers\nDESCRIPTION: Example of sending a request with additional headers using the query parameter object syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nawait srv.send({ query: SELECT.from('Books'), headers: { some: 'header' } })\n```\n\n----------------------------------------\n\nTITLE: Difference in Object Keys Between cds.env.requires and cds.requires\nDESCRIPTION: Demonstrates how Object.keys() behaves differently for cds.env.requires and cds.requires due to the prototype chain inheritance.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n[dev] cds repl\n> Object.keys(cds.env.requires) //> [ 'db', 'reviews' ]\n> Object.keys(cds.requires)     //> [ 'ReviewsService' ]\n```\n\n----------------------------------------\n\nTITLE: Adding Kyma Modules for SAP Connectivity Service\nDESCRIPTION: Shows how to add required Kyma modules for the SAP Connectivity service using kubectl.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  modules:\n    - name: connectivity-proxy\n    - name: transparent-proxy\n    - name: istio\n```\n\n----------------------------------------\n\nTITLE: Configuring IAS Authentication in package.json\nDESCRIPTION: JSON configuration in package.json to enable IAS authentication strategy in a CAP.js project.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"auth\": \"ias\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using IS NULL Instead of = null in CDS Views\nDESCRIPTION: This example demonstrates the correct way to compare values with null in CDS files using IS NULL syntax, which is the proper SQL approach for null value comparison.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/sql-null-comparison.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nentity Books as select from my.Books\nwhere author IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Configure SQLite In-Memory Storage in Spring\nDESCRIPTION: Defines an in-memory SQLite database configuration in Spring. The initialization mode is set to `always`, requiring adjustment of Hikari pool settings to keep the database active.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n---\nspring:\n  config.activate.on-profile: default\n  sql:\n    init:\n      mode: always\n  datasource:\n    url: \"jdbc:sqlite:file::memory:?cache=shared\"\n    driver-class-name: org.sqlite.JDBC\n    hikari:\n      maximum-pool-size: 1\n      max-lifetime: 0\n```\n\n----------------------------------------\n\nTITLE: SaasProvisioningService Configuration\nDESCRIPTION: JSON configuration for SaasProvisioningService, defining job orchestration settings including queue size and worker configurations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_24\n\nLANGUAGE: jsonc\nCODE:\n```\n\"cds.xt.SaasProvisioningService\": {\n  \"jobs\": {\n    \"queueSize\": 5, // default: 100\n    \"workerSize\": 5, // default: 1\n    \"clusterSize\": 5, // default: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Privileged User for Bypassing Authorization Checks\nDESCRIPTION: Example of creating a transaction with a privileged user to bypass authorization checks when consuming a local service, useful for system operations like logging.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.before('*', function (req) {\n  const user = new cds.User.Privileged\n  return this.tx({ user }, tx => tx.run(\n    INSERT.into('RequestLog').entries({\n      url: req._.req.url,\n      user: req.user.id\n    })\n  ))\n})\n```\n\n----------------------------------------\n\nTITLE: Default Service Instantiation\nDESCRIPTION: Example showing how cds.serve would create and instantiate a default ApplicationService if no custom implementation is provided. This creates a service based on the CDS model definition.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/app-services.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// srv/admin-service.cds\nlet name = 'AdminService', options = {...}\nlet srv = new cds.ApplicationService (name, cds.model, options)\nawait srv.init()\n```\n\n----------------------------------------\n\nTITLE: Loading CDS Models from Files\nDESCRIPTION: Examples of using cds.load to load and parse a model from one or more files into a single effective model.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// load a model from a single source\nconst csn = await cds.load('my-model')\n```\n\n----------------------------------------\n\nTITLE: Disabling Draft Protection in YAML\nDESCRIPTION: Configuration to completely disable the draft protection feature.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/fiori-drafts.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncds.security.draftProtection.enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Destination Selection Strategy in Node.js\nDESCRIPTION: JSON configuration for adjusting destination lookup behavior in Node.js applications. This allows controlling whether destinations are resolved from the provider or subscriber subaccount.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_61\n\nLANGUAGE: jsonc\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"SERVICE_FOR_PROVIDER\": {\n      /* ... */\n      \"credentials\": {\n        /* ... */\n      },\n      \"destinationOptions\": {\n        \"selectionStrategy\": \"alwaysProvider\",\n        \"jwt\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Service Dependencies for Tenant\nDESCRIPTION: Implementation of dependency resolution for SaaS applications. Handles the DEPENDENCIES event to return required service dependencies.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/multitenancy.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@Profile(\"cloud\")\n@ServiceName(DeploymentService.DEFAULT_NAME)\npublic class SubscriptionHandler implements EventHandler {\n\tprivate static final String SERVICE_NAME = \"my-service\";\n\n\t@Autowired\n\tprivate CdsRuntime cdsRuntime;\n\n\t@On\n\tpublic void onDependencies(DependenciesEventContext context) {\n\t\tList<Map<String, Object>> dependencies = new ArrayList<>();\n\t\tOptional<ServiceBinding> service = cdsRuntime.getEnvironment().\n                getServiceBindings().filter(binding -> binding.getServiceName().\n                        get().equals(SERVICE_NAME)).findFirst();\n\t\t\n\t\tif (service.isPresent()) {\n\t\t\tString xsappname = extractXsappname(service.get().getCredentials());\n\t\t\tdependencies.add(SaasRegistryDependency.create(xsappname));\n\t\t}\n\t\tcontext.setResult(dependencies);\n\t}\n\n\tprivate String extractXsappname(Map<String, Object> credentials) {\n\t\t// location of the `xsappname` in the credentials is service specific\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via Command Line\nDESCRIPTION: Example of setting configuration through environment variables when starting a CAP application on Unix-based systems.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nCDS_REQUIRES_DB_KIND=sql cds run\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Binding Based Remote Service\nDESCRIPTION: YAML configuration for setting up a Remote Service using a BTP service binding.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    SomeReuseService:\n      binding:\n        name: some-service-binding\n```\n\n----------------------------------------\n\nTITLE: Server Log Showing Mocked External Service\nDESCRIPTION: Log output showing that the external API_BUSINESS_PARTNER service is being mocked when running the application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_11\n\nLANGUAGE: log\nCODE:\n```\n...\n\n[cds] - model loaded from 8 file(s):\n\n  ...\n  ./srv/external/API_BUSINESS_PARTNER.cds\n  ...\n\n[cds] - connect using bindings from: { registry: '~/.cds-services.json' }\n[cds] - connect to db > sqlite { database: ':memory:' }\n > filling sap.ui.riskmanagement.Mitigations from ./db/data/sap.ui.riskmanagement-Mitigations.csv\n > filling sap.ui.riskmanagement.Risks from ./db/data/sap.ui.riskmanagement-Risks.csv\n > filling API_BUSINESS_PARTNER.A_BusinessPartner from ./srv/external/data/API_BUSINESS_PARTNER-A_BusinessPartner.csv\n/> successfully deployed to sqlite in-memory db\n\n[cds] - serving RiskService { at: '/service/risk', impl: './srv/risk-service.js' }\n[cds] - mocking API_BUSINESS_PARTNER { at: '/api-business-partner' }  \n\n[cds] - launched in: 1.104s\n[cds] - server listening on { url: 'http://localhost:4004' }\n[ terminate with ^C ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Outbox with Options in package.json\nDESCRIPTION: Detailed JSON configuration for the persistent outbox, including parameters like maxAttempts, chunkSize, storeLastError, and parallel processing. These options control the behavior of the outbox processing.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"outbox\": {\n      \"kind\": \"persistent-outbox\",\n      \"maxAttempts\": 20,\n      \"chunkSize\": 100,\n      \"storeLastError\": true,\n      \"parallel\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Log Capture Usage Examples\nDESCRIPTION: Examples demonstrating how to capture, clear and release console logs during test execution.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('cds.test.log()', ()=>{\n  let log = cds.test.log()\n\n  it ('should capture log output', ()=>{\n    expect (log.output.length).to.equal(0)\n    console.log('foo',{bar:2})\n    expect (log.output.length).to.be.greaterThan(0)\n    expect (log.output).to.contain('foo')\n  })\n\n  it('should support log.clear()', ()=> {\n    log.clear()\n    expect (log.output).to.equal('')\n  })\n\n  it('should support log.release()', ()=> {\n    log.release() // releases captured log\n    console.log('foobar') // not captured\n    expect (log.output).to.equal('')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Country Type in CDS Entity\nDESCRIPTION: CDS entity definition demonstrating the use of a custom 'Country' type in an 'Addresses' entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\nusing { your.common.Country } from './your-common.2';\n\nentity Addresses {\n  //...\n  country : Country;\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing Multi-Segment References with Iterator in Java\nDESCRIPTION: Uses an iterator to traverse and analyze all segments of a multi-segment CQN reference, allowing access to intermediate entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nIterator<ResolvedSegment> iterator = result.iterator();\nCdsEntity order = iterator.next().entity();\nCdsEntity item  = iterator.next().entity();\nCdsEntity book  = iterator.next().entity();\n```\n\n----------------------------------------\n\nTITLE: Removing Files with rm()\nDESCRIPTION: Demonstrates how to delete files using the rm() utility function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rm } = cds.utils\nawait rm('dist','db','data')\nawait rm('dist/db/data')\n```\n\n----------------------------------------\n\nTITLE: Approuter Configuration for Cloud\nDESCRIPTION: JSON configuration for approuter setup including websocket and route definitions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/dashboard.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t...\n\t\"authenticationMethod\": \"route\",\n\t\"websockets\": {\n\t\t\"enabled\": true\n\t},\n\t\"routes\": [\n\t\t{\n\t\t\t\"source\": \"^/dashboard\",\n\t\t\t\"authenticationType\": \"xsuaa\",\n\t\t\t\"destination\": \"backend\"\n\t\t},\n\t\t{\n\t\t\t\"source\": \"^/dashboard/(.*)\",\n\t\t\t\"authenticationType\": \"xsuaa\",\n\t\t\t\"destination\": \"backend\"\n\t\t},\n\t\t{\n\t\t\t\"source\": \"^/dashboard_api/(.*)\",\n\t\t\t\"authenticationType\": \"xsuaa\",\n\t\t\t\"destination\": \"backend\"\n\t\t}, \n    [...]\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plain HANA Table Definition\nDESCRIPTION: Example of creating a simple HANA table with plain column names using .hdbtable format.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCOLUMN TABLE DATA_MODEL_BOOKSHOP_BOOKS (\n  ID integer,\n  THE_TITLE nvarchar(100),\n  primary key ( ID )\n)\n```\n\n----------------------------------------\n\nTITLE: SAP Cloud Application Event Hub Configuration\nDESCRIPTION: JSON configuration for Event Broker setup\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/s4.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"messaging\": {\n        \"kind\": \"event-broker\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enums in CDS Queries\nDESCRIPTION: Demonstrates how to use enum symbols instead of literals in CDS queries where the corresponding type can be deduced. Shows usage in CASE statements and conditional expressions.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cql.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\ntype Status : String enum { open; closed; in_progress; };\n\nentity OpenOrder as projection on Order {\n  \n  case status when #open        then 0\n              when #in_progress then 1 end\n    as status_int : Integer,\n\n  (status = #in_progress ? 'is in progress' : 'is open')\n    as status_txt : String,  \n    \n} where status = #open or status = #in_progress;\n```\n\n----------------------------------------\n\nTITLE: Using IN Subquery Predicate with Tuples in CDS Query Builder\nDESCRIPTION: Example of using the 'in' predicate with a subquery in generic tree style to check if a tuple of firstName and lastName exists in the journalists table.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_70\n\nLANGUAGE: java\nCODE:\n```\n// generic tree style via CQL api\nCqnListValue fullName = CQL.list(CQL.get(\"firstName\"), CQL.get(\"lastName\"));\nCqnSelect subquery = Select.from(\"socialmedia.Journalists\").columns(\"firstName\", \"lastName\");\nSelect.from(\"bookshop.Authors\").where(CQL.in(fullName, subquery));\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Schema for Books Entity\nDESCRIPTION: This CDS code defines the schema for a Books entity with ID, title, and author fields.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/valid-csv-header.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nnamespace sap.capire.bookshop;\nentity Books {\n  key ID : Integer;\n  title  : String;\n  author : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Welcome File in xs-app.json\nDESCRIPTION: JSON configuration to set the welcome file in the xs-app.json file. This defines the initial page to be displayed when visiting the application, which is also important for CSRF token handling in deployed Vue UIs.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"welcomeFile\": \"app/bookshop/index.html\", // [!code ++]\n  \"routes\": {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CAP Server Startup Log Output\nDESCRIPTION: This log output shows the services being started by the CAP server, including mocked services and the server's listening URL. It demonstrates how multiple services are served in a single process.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_7\n\nLANGUAGE: log\nCODE:\n```\n[cds] - mocking ReviewsService { path: '/reviews', impl: '../reviews/srv/reviews-service.js' }\n[cds] - mocking OrdersService { path: '/orders', impl: '../orders/srv/orders-service.js' }\n[cds] - serving CatalogService { path: '/browse', impl: '../bookshop/srv/cat-service.js' }\n[cds] - serving AdminService { path: '/admin', impl: '../bookshop/srv/admin-service.js' }\n\n[cds] - server listening on { url: 'http://localhost:4004' }\n[cds] - launched at 5/25/2023, 4:53:46 PM, version: 7.0.0, in: 991.573ms\n```\n\n----------------------------------------\n\nTITLE: Timestamp Handling in CAP.js Database Operations\nDESCRIPTION: Examples of writing and reading DateTime and Timestamp values with proper timezone and precision handling.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait INSERT.into(Books).entries([\n  { createdAt: new Date },                       //> stored .toISOString()\n  { createdAt: '2022-11-11T11:11:11Z' },         //> padded with .000Z\n  { createdAt: '2022-11-11T11:11:11.123Z' },     //> stored as is\n  { createdAt: '2022-11-11T11:11:11.1234563Z' }, //> truncated to .123Z\n  { createdAt: '2022-11-11T11:11:11+02:00' },    //> converted to zulu time\n])\n```\n\n----------------------------------------\n\nTITLE: Migrating CDS Configuration in package.json\nDESCRIPTION: JSON snippet illustrating how to migrate the CDS configuration section from the classic project's package.json to the new project.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n...\n\"dependencies\": {\n\t\"@sap/cds\": \"^3.0.0\",\n},\n\"cds\": { // copy this CDS configuration from your classic project\n\t...\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application Logs from Cloud Foundry\nDESCRIPTION: Command to fetch recent logs from a Cloud Foundry application using the CF CLI, which is more efficient than using the SAP BTP cockpit for analyzing large volumes of logs.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncf logs <appname> --recent\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Temporal Data Query\nDESCRIPTION: This JSON snippet shows the structure of a response to a temporal data query, including nested job and department information with validity periods.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/temporal-data.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"ID\": \"E1\", \"name\": \"Alice\", \"jobs\": [\n    { \"validFrom\":\"2014-01-01\", \"role\": \"Developer\", \"dept\": [\n      {\"validFrom\":\"2013-04-01\", \"name\": \"App Development\"}\n    ]},\n    { \"validFrom\":\"2017-01-01\", \"role\": \"Consultant\", \"dept\": [\n      {\"validFrom\":\"2013-04-01\", \"name\": \"App Development\"}\n    ]},\n    { \"validFrom\":\"2017-01-01\", \"role\": \"Developer\", \"dept\": [\n      {\"validFrom\":\"2014-01-01\", \"name\": \"Tech Platform Dev\"},\n      {\"validFrom\":\"2017-07-01\", \"name\": \"Core Development\"}\n    ]},\n    { \"validFrom\":\"2017-04-01\", \"role\": \"Senior Developer\", \"dept\": [\n      {\"validFrom\":\"2014-01-01\", \"name\": \"Tech Platform Dev\"},\n      {\"validFrom\":\"2017-07-01\", \"name\": \"Core Development\"}\n    ]},\n    { \"validFrom\":\"2018-09-15\", \"role\": \"Architect\", \"dept\": [\n      {\"validFrom\":\"2014-01-01\", \"name\": \"Tech Platform Dev\"},\n      {\"validFrom\":\"2017-07-01\", \"name\": \"Core Development\"}\n    ]}\n  ]}, ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Command with Include/Exclude Paths\nDESCRIPTION: Command for running the development server with file watching, specifying additional paths to include or exclude from watching.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\ncds watch --include ../other-app --exclude .idea/\n```\n\n----------------------------------------\n\nTITLE: Adding Data Files with Entity Filter\nDESCRIPTION: Command to add data files only for entities containing the word 'books' in their name.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncds add data --filter books\n```\n\n----------------------------------------\n\nTITLE: Reading Project Configuration\nDESCRIPTION: Example of using readProject method to check project configuration\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isJava, hasMta, hasPostgres } = cds.add.readProject()\n```\n\n----------------------------------------\n\nTITLE: Invalid Empty @restrict.to Annotation in CDS\nDESCRIPTION: Example of incorrect usage where the @restrict.to annotation is left empty, triggering a warning from the auth-valid-restrict-to rule.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/auth-valid-restrict-to.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nservice CatalogService @(requires: 'authenticated-user') {\n  @readonly\n  @restrict: [\n    { to: [] }\n  ]\n  entity Books as projection on my.Books;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tools Index with Vue Component\nDESCRIPTION: A Vue component usage that displays a list of tool pages using the IndexList component with pages data passed as a prop.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/index.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<IndexList :pages='pages' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Arbitrary BTP Service in values.yaml\nDESCRIPTION: Demonstrates how to configure an arbitrary BTP service and its binding in the values.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nfeature-flags:\n  serviceOfferingName: feature-flags\n  servicePlanName: lite\n...\nsrv:\n   bindings:\n     feature-flags:\n        serviceInstanceName: feature-flags\n```\n\n----------------------------------------\n\nTITLE: Defining SAP Annotations in CDS\nDESCRIPTION: Demonstrates how to add SAP-specific attribute-style annotations in CDS that get translated to OData EDMX format. The example shows applying a path annotation to an action.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_23\n\nLANGUAGE: cds\nCODE:\n```\n  @sap.applicable.path: 'to_eventStatus/EditEnabled'\n  action EditEvent(...) returns SomeType;\n```\n\n----------------------------------------\n\nTITLE: Tree-style EXISTS Subquery in CAP Java CQL Query\nDESCRIPTION: Demonstrates how to construct an EXISTS subquery using the tree-style API in CAP Java.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_87\n\nLANGUAGE: java\nCODE:\n```\n// tree style\nCqnSelect subquery =\n  Select.from(\"Journalists\")\n        .where(a -> a.get(\"name\").eq(CQL.get(\"$outer.name\")));\nSelect.from(\"Authors\").where(CQL.exists(subquery));\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for TypeScript\nDESCRIPTION: Jest configuration setup for TypeScript testing using ts-jest preset.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/typescript.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  preset: \"ts-jest\",\n  globalSetup: \"./test/setup.ts\"\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML5 Applications in values.yaml\nDESCRIPTION: Shows the configuration options for HTML5 applications in the values.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nhtml5-apps-deployer:\n  image:\n  bindings:\n  resources:\n  env:\n    # Name of your business service (unique per subaccount)\n    SAP_CLOUD_SERVICE: <service-name>\n```\n\n----------------------------------------\n\nTITLE: Safely Removing Directories with rimraf()\nDESCRIPTION: Shows how to safely remove directories regardless of existence using the rimraf() utility function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rimraf } = cds.utils\nawait rimraf('dist','db','data')\nawait rimraf('dist/db/data')\n```\n\n----------------------------------------\n\nTITLE: Parse Reference Example\nDESCRIPTION: Demonstrates using cds.parse.ref() to parse a CDS reference expression into parts\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlet ref = cds.parse.ref(`foo.bar`)\n```\n\n----------------------------------------\n\nTITLE: Promise.seq Implementation for Sequential Execution\nDESCRIPTION: Defines the Promise.seq utility function used by srv.handle to execute synchronous handlers sequentially with next() chaining.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nPromise.seq = handlers => async function next(){\n  req.results = await handlers.shift()?.(req, next)\n}()\n```\n\n----------------------------------------\n\nTITLE: Security Role Configuration for Cloud\nDESCRIPTION: JSON security configuration defining developer roles and scopes for cloud deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/dashboard.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"xsappname\": \"dashboard-test\",\n\t[...]\n\t\"scopes\": [\n\t\t{\n\t\t\t\"name\": \"$XSAPPNAME.cds.Developer\",\n\t\t\t\"description\": \"CAP Developer\"\n\t\t},\n    [...]\n\t],\n \"attributes\": [\n\t\t{\n\t\t\t[...]\n\t\t}\n\t],\n\t\"role-templates\": [\n\t\t{\n\t\t\t\"name\": \"capDeveloper\",\n\t\t\t\"description\": \"generated\",\n\t\t\t\"scope-references\": [\n\t\t\t\t\"$XSAPPNAME.cds.Developer\"\n\t\t\t]\n\t\t},\n    [...]\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Copying and Modifying CQL Statements\nDESCRIPTION: Demonstrates the basic pattern for copying and modifying CDS QL statements using CQL.copy and a Modifier implementation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_98\n\nLANGUAGE: java\nCODE:\n```\nimport com.sap.cds.ql.CQL;\n\n// CQL: SELECT from Books where title = 'Capire'\nCqnSelect query = Select.from(BOOKS).where(b -> b.title().eq(\"Capire\"));\nCqnSelect copy  = CQL.copy(query, modifier);  // implement Modifier\n```\n\n----------------------------------------\n\nTITLE: Updating XSUAA Service with New Configuration\nDESCRIPTION: Command to update the XSUAA service with the modified xs-security.json configuration using the Cloud Foundry CLI.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\ncf update-service bookshop-uaa -c xs-security.json\n```\n\n----------------------------------------\n\nTITLE: Custom Null Handling in Order By Clause\nDESCRIPTION: Demonstrates how to customize null value handling when ordering query results, placing null values last in ascending order.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Person\")\n    .orderBy(p -> p.get(\"name\").asc(), p -> c.get(\"nickname\").ascNullsLast());\n```\n\n----------------------------------------\n\nTITLE: Replacing References in CQL Statements\nDESCRIPTION: Shows how to replace entity and element references in a query by implementing custom handling for structured type references and element references.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_101\n\nLANGUAGE: java\nCODE:\n```\n// query: SELECT from Books { title }\n// copy:  SELECT from Books[year > 2000] { title as book }\n\nCqnSelect copy = CQL.copy(query, new Modifier() {\n   @Override // (1)\n   public CqnStructuredTypeRef ref(CqnStructuredTypeRef ref) {\n      return CQL.to(ref.firstSegment())\n            .filter(CQL.get(\"year\").gt(2000))\n            .asRef();\n   }\n\n   @Override // (2)\n   public CqnValue ref(CqnElementRef ref) {\n      return CQL.get(ref.segments()).as(\"book\");\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Logging into Cloud Foundry CLI for XSUAA Setup\nDESCRIPTION: Command to log into Cloud Foundry using the CLI with a specific API endpoint for setting up XSUAA authentication.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncf l -a <api-endpoint>\n```\n\n----------------------------------------\n\nTITLE: Custom Build Target Configuration\nDESCRIPTION: Configuration example showing how to specify a custom build target folder instead of using the default.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/custom-builds.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": { \"target\" : \"myfolder\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Generic Handlers to ApplicationService\nDESCRIPTION: Demonstrates how to extend all ApplicationService instances with new generic handlers by adding static methods to the class. This pattern allows adding functionality to all services at once.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/app-services.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.ApplicationService.handle_log_events = cds.service.impl (function(){\n  this.on('*', req => console.log(req.event))\n})\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying the Application\nDESCRIPTION: Shell commands for building and deploying the application to Cloud Foundry. These commands utilize the npm scripts defined in package.json to streamline the deployment process.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Profile-based Configuration Presets\nDESCRIPTION: JavaScript object defining configuration presets for multitenancy profiles.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"[with-mtx-sidecar]\": {\n    requires: {\n      db: {\n        '[development]': {\n           kind: 'sqlite',\n           credentials: { url: 'db.sqlite' },\n           schema_evolution: 'auto',\n         },\n        '[production]': {\n           kind: 'hana',\n           'deploy-format': 'hdbtable',\n           'vcap': {\n             'label': 'service-manager'\n           }\n         },\n      },\n      \"[java]\": {\n        \"cds.xt.ModelProviderService\": { kind: 'rest', model:[] },\n        \"cds.xt.DeploymentService\": { kind: 'rest', model:[] },\n      },\n      \"cds.xt.SaasProvisioningService\": false,\n      \"cds.xt.DeploymentService\": false,\n      \"cds.xt.ExtensibilityService\": false,\n    }\n  },\n  \"[mtx-sidecar]\": {\n    requires: {\n      db: {\n        \"[development]\": {\n           kind: 'sqlite',\n           credentials: { url: \"../../db.sqlite\" },\n           schema_evolution: 'auto',\n         },\n        \"[production]\": {\n           kind: 'hana',\n           'deploy-format': 'hdbtable',\n           'vcap': {\n             'label': 'service-manager'\n           }\n         },\n      },\n      \"cds.xt.ModelProviderService\": {\n        \"[development]\": { root: \"../..\" },\n        \"[production]\": { root: \"_main\" },\n        \"[prod]\": { root: \"_main\" }\n      },\n      \"cds.xt.SaasProvisioningService\": true,\n      \"cds.xt.DeploymentService\": true,\n      \"cds.xt.ExtensibilityService\": true,\n    },\n    \"[development]\": {\n      server: { port: 4005 }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Extended User Information with XsuaaUserInfo in CAP Java\nDESCRIPTION: This code shows how to access extended XSUAA user properties in CAP Java applications. It demonstrates how to retrieve email, given name, and family name from XSUAA user information using Spring dependency injection.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/request-contexts.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nXsuaaUserInfo xsuaaUserInfo;\n\n@Before(event = CqnService.EVENT_READ)\npublic void beforeRead() {\n\tboolean isAuthenticated = xsuaaUserInfo.isAuthenticated();\n\tString email = xsuaaUserInfo.getEmail();\n\tString givenName = xsuaaUserInfo.getGivenName();\n\tString familyName = xsuaaUserInfo.getFamilyName();\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in SAP BTP Services\nDESCRIPTION: Demonstrates how to configure commonly used SAP BTP services in the Helm chart's values.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nxsuaa:\n  parameters:\n    xsappname: <name>\n    HTML5Runtime_enabled: true # for SAP Launchpad service\nevent-mesh: …\nconnectivity: …\ndestination: …\nhtml5-apps-repo-host: …\nhana: …\nservice-manager: …\nsaas-registry: …\n```\n\n----------------------------------------\n\nTITLE: Evaluating Predicates in CQN Visitor for Java\nDESCRIPTION: This snippet demonstrates how the CheckDataVisitor evaluates predicates. It pops values from the stack, performs the comparison based on the predicate type and operator, and pushes the Boolean result back onto the stack.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void visit(CqnInPredicate in) {\n    List<Object> values = in.values().stream()\n            .map(v -> stack.pop()).collect(toList());\n    Object value = stack.pop();\n    stack.push(values.stream().anyMatch(value::equals));\n}\n\n@Override\npublic void visit(CqnComparisonPredicate comparison) {\n    Comparable rhs = (Comparable) stack.pop();\n    Comparable lhs = (Comparable) stack.pop();\n    int cmp = lhs.compareTo(rhs);\n    switch (comparison.operator()) {\n    case EQ:\n        stack.push(cmp == 0);\n        break;\n    case GT:\n        stack.push(cmp > 0);\n        break;\n    // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving CDS Entities from AnalysisResult in Java\nDESCRIPTION: Extracts information about the CDS entities from the AnalysisResult using the Reflection API.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nCdsEntity order = result.rootEntity();   // Orders\nCdsEntity item  = result.targetEntity(); // OrderItems\n```\n\n----------------------------------------\n\nTITLE: Configuring MTX Sidecar for Provisioning Only in .cdsrc.json\nDESCRIPTION: This JSON configuration disables extensibility and toggles in the MTX Sidecar, optimizing it for tenant provisioning only. This setup is beneficial when the application doesn't offer tenant-specific model extensions and feature toggles.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requires\": {\n        \"multitenancy\": true,\n        \"extensibility\": false,\n        \"toggles\": false\n    },\n    \"build\": {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Bash Session in Kyma Pod\nDESCRIPTION: Commands to identify the pod name and access a bash session in the container running the CAP Java application on Kyma.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pods\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl exec -it pod/<POD_NAME> -- bash\n```\n\n----------------------------------------\n\nTITLE: Build Task Content Copy Configuration\nDESCRIPTION: Configuration example demonstrating how to control file copy behavior during build tasks for Node.js and HANA deployments.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/custom-builds.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"tasks\": [\n      { \"for\": \"nodejs\", \"options\": { \"contentCdsrcJson\": false, \"contentNpmrc\": false } },\n      { \"for\": \"hana\", \"options\": { \"contentNpmrc\": false } }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Local App to Remote Service Instances\nDESCRIPTION: Command to bind a local CAP application to remote service instances created by a Cloud Foundry deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\ncds bind --to-app-services bookshop-srv\n```\n\n----------------------------------------\n\nTITLE: Expanded Books.texts Entity with TextsAspect in CDS\nDESCRIPTION: Example of how the Books.texts entity looks when the TextsAspect include is expanded.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nentity Books.texts {\n  // from sap.common.TextsAspect\n  key locale: sap.common.Locale;\n  language : Association to sap.common.Languages on language.code = locale;\n  // from Books\n  key ID : UUID;\n  title : String;\n  descr : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling CDS Model to Mermaid Diagram Format\nDESCRIPTION: Command for compiling a CDS model to Mermaid class diagram format for visualization.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncds compile db/schema.cds --to mermaid\n```\n\n----------------------------------------\n\nTITLE: CDS Entity Definition with Standard Searchable Elements\nDESCRIPTION: Defines a Book entity with ID, name, and title fields where both string fields are searchable by default.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\nentity Book {\n  key ID : Integer;\n  name   : String;\n  title  : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Reduced-Size MTA Archive with Extension File\nDESCRIPTION: Command to build an MTA archive using an extension file that excludes node_modules, resulting in smaller archive size for faster deployment during development.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nmbt build -t gen --mtar mta.tar -e less.mtaext\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Project (JSON)\nDESCRIPTION: JSON configuration in package.json for the extension project, specifying the base project it extends and workspace settings.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@capire/orders-ext\",\n  \"extends\": \"@capire/orders\",\n  \"workspaces\": [ \".base\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Service Level Projections with Inherited Restrictions\nDESCRIPTION: Demonstrates how services can inherit or override restrictions from database entities through projections.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\nservice BuyerService @(requires: 'authenticated-user'){\n  entity Books as projection on db.Books; /* inherits */\n}\n\nservice AdminService @(requires: 'authenticated-user'){\n  entity Books @(restrict: [\n    { grant: '*', to: 'Admin'} /* overrides */\n  ]) as projection on db.Books;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dependency Specification for Reusable Packages\nDESCRIPTION: Example of an incorrect way to specify dependencies in package.json for a reusable package. This approach leads to duplicate versions and prevents consumers from receiving important fixes.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/best-practices.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"name\": \"@sap/your-reuse-package\",\n\"version\": \"1.1.2\",\n\"dependencies\": {\n  \"@sap/cds\": \"3.0.3\",\n  \"@sap/foundation\": \"2.0.1\",\n  \"express\": \"4.16.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CDS Add Package from GitHub\nDESCRIPTION: Example of installing a CDS plugin directly from a GitHub branch\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncds add my-facet -p @cap-js-community/example@git+https://github.com/cap-js-community/example#cds-add\n```\n\n----------------------------------------\n\nTITLE: Custom Vocabulary EDMX Output\nDESCRIPTION: Demonstrates the EDMX output generated for custom vocabulary annotations, including the vocabulary reference and annotation application.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<edmx:Reference Uri=\"link to vocabulary document\">\n  <edmx:Include Alias=\"MyVocabulary\" Namespace=\"com.MyCompany.vocabularies.MyVocabulary.v1\"/>\n</edmx:Reference>\n...\n<Annotations Target=\"S.E\">\n  <Annotation Term=\"MyVocabulary.MyAnno\" String=\"My new Annotation\"/>\n</Annotations>\n```\n\n----------------------------------------\n\nTITLE: Building a Docker image for CAP development\nDESCRIPTION: Command to build a Docker image for CAP development based on the defined Dockerfile, tagging it as 'cds'.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t cds .\n```\n\n----------------------------------------\n\nTITLE: Model Export Commands\nDESCRIPTION: Commands for exporting current model state and generating delta SQL statements\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncds deploy --dry --model-only --out cds-model.csn\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds deploy --dry --delta-from cds-model.csn --out delta.sql\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds deploy --script --delta-from cds-model.csn --out delta_script.sql\n```\n\n----------------------------------------\n\nTITLE: Initializing Java CAP Bookshop Sample\nDESCRIPTION: Command to create a new CAP project with bookshop sample for Java\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds init bookshop --java --add sample\ncd bookshop\n```\n\n----------------------------------------\n\nTITLE: Inefficient Filtering with JOIN (Bad Practice)\nDESCRIPTION: This snippet demonstrates an inefficient way of filtering by performing a JOIN first and then filtering. This approach can lead to performance issues as it may not leverage database optimizations effectively.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_12\n\nLANGUAGE: cds\nCODE:\n```\nview FilteredOrdersJoin as select\n    OrdersHeaders.ID        as Header_ID,\n    OrdersHeaders.OrderNo   as OrderNo,\n    OrdersHeaders.buyer     as buyer,\n    OrdersHeaders.currency  as currency,\n    OrdersItems.ID          as Item_ID,\n    OrdersItems.product     as product,\n    OrdersItems.quantity    as quantity,\n    OrdersItems.title       as title,\n    OrdersItems.price       as price\nfrom OrdersHeaders JOIN OrdersItems on OrdersHeaders.ID = OrdersItems.Header.ID\nwhere price > 100;\n```\n\n----------------------------------------\n\nTITLE: Running CAP Node.js App with Service Bindings\nDESCRIPTION: Shows how to run a CAP Node.js application using cloud service bindings with the 'hybrid' profile.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncds watch --profile hybrid\n```\n\n----------------------------------------\n\nTITLE: Using CDS_CONFIG with Directory\nDESCRIPTION: Example of using the CDS_CONFIG environment variable with a directory to load configuration from multiple files.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nCDS_CONFIG=/etc/secrets/cds cds serve\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Entity Usage in CDS Service\nDESCRIPTION: Example of using an external entity in a service action, which is not allowed in CDS Compiler v2. This produces errors or warnings depending on the compiler version.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_7\n\nLANGUAGE: CDS\nCODE:\n```\nentity ExternalEntity {...}\nservice S { action foo() returns ExternalEntity; }\n```\n\n----------------------------------------\n\nTITLE: Adding MTA Configuration\nDESCRIPTION: Command to generate MTA deployment descriptor file\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncds add mta\n```\n\n----------------------------------------\n\nTITLE: CQL Query with Multiple Segments\nDESCRIPTION: Shows a CQL SELECT query with multiple path segments that navigates from Orders to items to book.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n--CQL query\nSELECT from Orders[OrderNo = '42']:items[ID = 1].book\n```\n\n----------------------------------------\n\nTITLE: Binding Local Application to Cloud Services\nDESCRIPTION: Shell command using the CDS tooling to bind a local application to XSUAA and Destination service instances for hybrid testing scenarios.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_52\n\nLANGUAGE: sh\nCODE:\n```\ncds bind -2 cpapp-xsuaa,cpapp-destination\n```\n\n----------------------------------------\n\nTITLE: CAP Java Project Folder Structure\nDESCRIPTION: Overview of the standard folder structure for a CAP Java project, showing the organization of database models, service definitions, Java source code, and generated files.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/getting-started.md#2025-04-18_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\n<PROJECT-ROOT>/\n├─ db/\n└─ srv/\n   ├─ src/main/java/\n   ├─ src/gen/java/\n   └─ node_modules/\n```\n\n----------------------------------------\n\nTITLE: Adding XSUAA Spring Boot Starter Dependency in Maven\nDESCRIPTION: Adds the XSUAA Spring Boot Starter dependency to activate Spring security with XSUAA authentication.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t<groupId>com.sap.cloud.security.xsuaa</groupId>\n\t<artifactId>xsuaa-spring-boot-starter</artifactId>\n\t<version>${xsuaa.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using Chai Assertion Library in Tests\nDESCRIPTION: Example demonstrating how to use the chai.expect style assertions in tests for better compatibility between test runners.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = cds.test(), foobar = {foo:'bar'}\nit('should support chai.except style', ()=>{\n  expect(foobar).to.have.property('foo')\n  expect(foobar.foo).to.equal('bar')\n})\n```\n\n----------------------------------------\n\nTITLE: OData Annotation Examples\nDESCRIPTION: Demonstrates usage of OData annotations with terms and properties in CDS.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\n@Common.Label: 'Customer'\n@UI.HeaderInfo: {\n  TypeName       : 'Customer',\n  TypeNamePlural : 'Customers',\n  Title          : { Value : name }\n}\nentity Customers { /* ... */ }\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\"definitions\":{\n  \"Customers\":{\n    \"kind\": \"entity\",\n    \"@Common.Label\": \"Customer\",\n    \"@UI.HeaderInfo.TypeName\": \"Customer\",\n    \"@UI.HeaderInfo.TypeNamePlural\": \"Customers\",\n    \"@UI.HeaderInfo.Title.Value\": {\"=\": \"name\"},\n    /* ... */\n  }\n}}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Annotations Target=\"MyService.Customers\">\n  <Annotation Term=\"Common.Label\" String=\"Customer\"/>\n  <Annotation Term=\"UI.HeaderInfo\">\n    <Record Type=\"UI.HeaderInfoType\">\n      <PropertyValue Property=\"TypeName\" String=\"Customer\"/>\n      <PropertyValue Property=\"TypeNamePlural\" String=\"Customers\"/>\n      <PropertyValue Property=\"Title\">\n        <Record Type=\"UI.DataField\">\n          <PropertyValue Property=\"Value\" Path=\"name\"/>\n        </Record>\n      </PropertyValue>\n    </Record>\n  </Annotation>\n</Annotations>\n```\n\n----------------------------------------\n\nTITLE: Using dividedBy Arithmetic Function in CDS Query Builder\nDESCRIPTION: Example of using the 'dividedBy' function to divide a literal value by a constant in a BETWEEN condition.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_65\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(AUTHOR)\n  .where(a -> a.id().between(10, literal(30).dividedBy(2)));\n```\n\n----------------------------------------\n\nTITLE: Filtering Grouped Results with Having Clause\nDESCRIPTION: Shows how to filter grouped results using the having clause to apply conditions to aggregated values.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Authors\")\n    .columns(c -> c.get(\"name\"), c -> func(\"count\", c.get(\"name\")).as(\"count\"))\n    .groupBy(c -> c.get(\"name\"))\n    .having(c -> func(\"count\", c.get(\"name\")).gt(2));\n```\n\n----------------------------------------\n\nTITLE: Using REPL with Feature Module\nDESCRIPTION: Command to start CDS REPL with specific feature modules pre-loaded for convenience.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\ncds repl --use ql # as a shortcut of that within the repl:\n```\n\n----------------------------------------\n\nTITLE: Adding Multitenancy Feature to CAP Java Application\nDESCRIPTION: Shows how to add the multitenancy feature to a CAP Java application through Maven dependency configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/building.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n\t<!-- Features -->\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-feature-mt</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Inspecting CAP Database Configuration\nDESCRIPTION: Shell command to view the effective database configuration for production in a CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncds env requires.db --for production\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Parameters for XSUAA Service\nDESCRIPTION: Demonstrates how to set JSON parameters for the XSUAA service using the Helm CLI.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nhelm install bookshop ./chart \\\n  --set-file xsuaa.jsonParameters=xs-security.json\n```\n\n----------------------------------------\n\nTITLE: Disabling Service Protocol in CDS\nDESCRIPTION: Example showing how to disable protocol serving for a service using CDS annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_18\n\nLANGUAGE: cds\nCODE:\n```\n@path : 'browse'\n@protocol: 'none'\nservice InternalService {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: External Service Configuration in package.json for Node.js\nDESCRIPTION: Configuration in package.json that declares an imported API as an external service for Node.js implementations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n    \"requires\": {\n        \"API_BUSINESS_PARTNER\": {\n            \"kind\": \"odata-v2\",\n            \"model\": \"srv/external/API_BUSINESS_PARTNER\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CDS Service Definition with Entity Projection\nDESCRIPTION: Create a CDS service definition that includes a projection of the Books entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nnamespace srv;\n\nusing {model} from '../db/schema'; // Our domain model\n\nservice Bookshop {\n    entity Books as projection on model.Books;\n}\n```\n\n----------------------------------------\n\nTITLE: Using REST-style API with CQN Objects\nDESCRIPTION: Shows examples of using REST-style convenience methods with bound CQN query objects for various operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nawait srv.get(Books,201)\nawait srv.get(Books).where({author_ID:106})\nawait srv.post(Books).entries({title:'Wuthering Heights'})\nawait srv.post(Books).entries({title:'Catweazle'})\nawait srv.patch(Books).set({discount:'10%'}).where({stock:{'>':111}})\nawait srv.patch(Books,201).with({stock:111})\nawait srv.delete(Books,201)\n```\n\n----------------------------------------\n\nTITLE: Association Removal Converter\nDESCRIPTION: Shows how to remove association values using a converter.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_39\n\nLANGUAGE: java\nCODE:\n```\nprocessor.addConverter(\n   (path, element, type)  -> element.getType().isAssociation(), // filter\n   (path, element, value) -> Converter.REMOVE);                // remover\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant Resources\nDESCRIPTION: PUT endpoint to create tenant resources during onboarding. Requires tenant ID, subdomain and event type parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nPUT /-/cds/saas-provisioning/tenant/t1 HTTP/1.1\nContent-Type: application/json\n\n{\n  \"subscribedTenantId\": \"t1\",\n  \"subscribedSubdomain\": \"subdomain1\",\n  \"eventType\": \"CREATE\"\n}\n```\n\nLANGUAGE: txt\nCODE:\n```\nhttps://my.app.url\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc for Type Annotations in JavaScript\nDESCRIPTION: Shows how to use JSDoc annotations to specify types for function parameters when not using arrow functions, maintaining type inference for request data.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\nconst service = new cds.ApplicationService\n\nconst { Books } = require('#cds-models/sap/capire/bookshop')\nservice.on('READ', Books, readBooksHandler)\n\n/** @param { cds.TypedRequest<Books> } req */\nfunction readBooksHandler (req) {\n  req.data // req.data is now properly known to be of type Books again\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling JMX in Spring Boot Configuration\nDESCRIPTION: This snippet shows how to enable JMX in a Spring Boot application by adding a property to the application configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/optimizing.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nspring.jmx.enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Destination for Hybrid Testing\nDESCRIPTION: JSON configuration for .cdsrc-private.json that defines a remote service connection using an SAP BTP destination in the hybrid profile.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_53\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"requires\": {\n    \"[hybrid]\": {\n      \"auth\": {\n        /* ... */\n      },\n      \"destinations\": {\n        /* ... */\n      },\n      \"API_BUSINESS_PARTNER\": {\n        \"credentials\": {\n          \"path\": \"/sap/opu/odata/sap/API_BUSINESS_PARTNER\",\n          \"destination\": \"cpapp-bupa\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Diff Visitor\nDESCRIPTION: Example of implementing a DiffVisitor to handle data changes.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_44\n\nLANGUAGE: java\nCODE:\n```\ndiff.add(new DiffVisitor() {\n  @Override\n  public void changed(Path newPath, Path oldPath, CdsElement element, Object newValue, Object oldValue) {\n      // changes\n  }\n\n  @Override\n  public void added(Path newPath, Path oldPath, CdsElement association, Map<String, Object> newValue) {\n      // additions\n  }\n\n  @Override\n  public void removed(Path newPath, Path oldPath, CdsElement association, Map<String, Object> oldValue) {\n      // removals\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Database Pool Configuration Example in JSON\nDESCRIPTION: Example of how to customize the database connection pool configuration in a CAP.js application. This shows how to override specific pool parameters while using defaults for others.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/databases.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n        \"kind\": \"hana\",\n        \"pool\": {\n          \"acquireTimeoutMillis\": 5000,\n          \"min\": 0,\n          \"max\": 100,\n          \"fifo\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting cds.context in JavaScript REPL\nDESCRIPTION: Shows how to set and access cds.context properties in a JavaScript REPL environment, demonstrating type coercion and property access.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[dev] cds repl\n> cds.context = { tenant:'t1', user:'u2' }\n> let ctx = cds.context\n> ctx instanceof cds.EventContext  //> true\n> ctx.user instanceof cds.User     //> true\n> ctx.tenant === 't1'              //> true\n> ctx.user.id === 'u2'             //> true\n```\n\n----------------------------------------\n\nTITLE: Displaying Rule Reference Table (Vue)\nDESCRIPTION: This code renders the RulesRefTable component twice, once for Model Validation rules and once for Environment rules. The component likely takes a 'category' prop to filter and display the appropriate rules.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/index.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<RulesRefTable category=\"Model Validation\"/>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<RulesRefTable category=\"Environment\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Authentication Service Instance in mta.yaml\nDESCRIPTION: YAML configuration in mta.yaml to set up the Identity Authentication Service instance with necessary dependencies and configurations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-broker.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - name: incidents-ias\n    type: org.cloudfoundry.managed-service\n    requires:\n      - name: incidents-srv-api\n    processed-after:\n      # for consumed-services (cf. below), incidents-event-broker must already exist\n      # -> ensure incidents-ias is created after incidents-event-broker\n      - incidents-event-broker\n    parameters:\n      service: identity\n      service-plan: application\n      config:\n        consumed-services:\n          - service-instance-name: incidents-event-broker\n       \txsuaa-cross-consumption: true #> if token exchange from IAS token to XSUAA token is needed\n        display-name: cap.incidents #> any value, e.g., reuse MTA ID\n        home-url: ~{incidents-srv-api/url}\n```\n\n----------------------------------------\n\nTITLE: Auto-Configuration for SQLite Service in package.json\nDESCRIPTION: Example of auto-configuration in package.json for the @cap-js/sqlite package, configuring database services automatically.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-plugins.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": \"sql\",\n      \"kinds\": {\n        \"sql\": {\n          \"[development]\": {\n            \"kind\": \"sqlite\"\n          }\n        },\n        \"sqlite\": {\n          \"impl\": \"@cap-js/sqlite\"\n        }\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Interfaces for Inline Defined Types in Compiler v1\nDESCRIPTION: This CAP Java snippet shows how compiler v1 generates top-level interfaces for inline defined types, accommodating anonymous types generated in the OData model.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n// CDS compiler v1\npackage hr;\n\ninterface Person {\n    Collection<PersonEmails> getEmails();\n    void setEmails(Collection<PersonEmails> emails);\n}\n\ninterface PersonEmails {\n    String getKind();\n    void setKind(String kind);\n    String getAddress();\n    void setAddress(String address);\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Java Interface for Renamed CDS Entity Element\nDESCRIPTION: Shows the resulting Java interface generated for a CDS entity with a renamed element, including the @CdsName annotation for mapping.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_22\n\nLANGUAGE: java\nCODE:\n```\ninterface Equity {\n\n  @CdsName(\"class\")\n  String getClazz();\n\n  @CdsName(\"class\")\n  void setClazz(String clazz);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient View Building with Separate Entities (Bad Practice)\nDESCRIPTION: This example shows an inefficient way of building a view using separate entities for different fruit types. This approach requires UNIONs, which can lead to performance issues.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\nview FruitsByVendor as\nselect from Apples   UNION\nselect from Bananas  UNION\nselect from Cherries UNION\nselect from Mangos\n{ID, description, vendor}\nwhere vendor.description = 'TopFruitCompany';\n```\n\n----------------------------------------\n\nTITLE: Node.js Package Configuration for Multitenancy\nDESCRIPTION: Adding multitenancy and extensibility configuration to project's package.json\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-migration.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n    \"requires\": {\n        \"multitenancy\": true,\n        \"extensibility\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CQN Structure for Entity Navigation\nDESCRIPTION: The JSON representation of a CQN query for navigation between entities, showing the structure with from.ref containing the source entity with filter condition and the association name.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"from\": {\n    \"ref\": [ {\n      \"id\": \"RiskService.Risks\",\n      \"where\": [\n        { \"ref\": [ \"ID\" ] },\n        \"=\",\n        { \"val\": \"20466922-7d57-4e76-b14c-e53fd97dcb11\" }\n      ]},\n      \"supplier\"\n    ]\n  },\n  \"columns\": [\n    { \"ref\": [ \"ID\" ] },\n    { \"ref\": [ \"fullName\" ] },\n    { \"ref\": [ \"isBlocked\" ] }\n  ],\n  \"one\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot SQLite In-Memory Configuration\nDESCRIPTION: YAML configuration for setting up SQLite in-memory database in Spring Boot\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  config.activate.on-profile: default\n  sql:\n    init:\n      mode: always\n  datasource:\n    url: \"jdbc:sqlite:file::memory:?cache=shared\"\n    driver-class-name: org.sqlite.JDBC\n    hikari:\n      maximum-pool-size: 1\n      max-lifetime: 0\n```\n\n----------------------------------------\n\nTITLE: Adding AuditLog v2 Handler Dependency\nDESCRIPTION: XML configuration to add the AuditLog v2 handler dependency to the project's pom.xml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/auditlog.md#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-feature-auditlog-v2</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure with CDS Models Directory in Bookshop Sample\nDESCRIPTION: Shows the directory structure of the bookshop sample project, highlighting the location of the generated type definitions in the @cds-models directory alongside the service and database files.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_15\n\nLANGUAGE: zsh\nCODE:\n```\nbookshop/\n├── package.json\n├── @cds-models/\n│   └── ‹described in the previous section›\n├── db/\n│   ├── schema.cds\n│   └── ...\n├── srv/\n│   ├── cat-service.cds\n│   ├── cat-service.js\n│   └── ...\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Default SaaS Dependency Configuration in @sap/cds-mtxs\nDESCRIPTION: Default JSON configuration provided by @sap/cds-mtxs for subscription dependencies to SAP BTP services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"connectivity\": {\n      // Uses credentials.xsappname\n      \"vcap\": { \"label\": \"connectivity\" },\n      \"subscriptionDependency\": \"xsappname\"\n    },\n    \"portal\": {\n      \"vcap\": { \"label\": \"portal\" },\n      // Uses credentials.uaa.xsappname\n      \"subscriptionDependency\": {\n        \"uaa\": \"xsappname\"\n      }\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding PDM Service Instance using Cloud Foundry CLI\nDESCRIPTION: Cloud Foundry CLI command to bind the PDM service instance to the application using the configuration file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/pdm.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncf bind-service incidents-mgmt-srv incidents-mgmt-pdm -c ./pdm-binding-config.json\n```\n\n----------------------------------------\n\nTITLE: Sidecar Package Configuration for Node.js\nDESCRIPTION: Package.json configuration for the MTX sidecar subproject in a Node.js application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"bookshop-mtx\",\n  \"dependencies\": {\n    \"@cap-js/hana\": \"^2\",\n    \"@sap/cds\": \"^8\",\n    \"@sap/cds-mtxs\": \"^2\",\n    \"@sap/xssec\": \"^4\",\n    \"express\": \"^4\"\n  },\n  \"devDependencies\": {\n    \"@cap-js/sqlite\": \"^1\"\n  },\n  \"scripts\": {\n    \"start\": \"cds-serve\"\n  },\n  \"cds\": {\n    \"profile\": \"mtx-sidecar\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies\nDESCRIPTION: Command to install dependencies after adding multitenancy to a Node.js project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: SQLite Maven Dependency Configuration\nDESCRIPTION: XML configuration to add SQLite JDBC driver dependency in Maven\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.xerial</groupId>\n  <artifactId>sqlite-jdbc</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Aliased Nested Expands\nDESCRIPTION: Demonstrates using aliases in nested postfix projections to rename result structure elements.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cql.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from Authors {\n   name, address as residence { street, town as city { name, country }}\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nresults = [\n  {\n    name: 'Victor Hugo',\n    residence: {\n      street: '6 Place des Vosges', city: {\n        name: 'Paris',\n        country: 'France'\n      }\n    }\n  }, …\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Java Buildpack for Java 21 in mta.yaml\nDESCRIPTION: This YAML snippet shows how to configure the SAP Java Buildpack for Java 21 with SapMachine JRE in the mta.yaml file. It specifies the buildpack, JRE component, and Java version to use.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/configuring.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  buildpack: sap_java_buildpack_jakarta\nproperties:\n  JBP_CONFIG_COMPONENTS: \"jres: ['com.sap.xs.java.buildpack.jre.SAPMachineJRE']\"\n  JBP_CONFIG_SAP_MACHINE_JRE: '{ version: 21.+ }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Destinations in YAML\nDESCRIPTION: This snippet demonstrates how to configure destinations in the mta.yaml file. It includes setting up a destination-content module and defining destinations for the orders and reviews applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: destination-content\n    type: com.sap.application.content\n    requires:\n      - name: orders-api\n      - name: reviews-api\n      - name: bookstore-api\n      - name: samples-auth\n        parameters:\n          service-key:\n            name: xsuaa_service-key\n      - name: samples-destination\n        parameters:\n          content-target: true\n    build-parameters:\n      no-source: true\n    parameters:\n      content:\n        instance:\n          existing_destinations_policy: update\n          destinations:\n            - Name: orders-dest\n              URL: ~{orders-api/srv-url}\n              Authentication: OAuth2ClientCredentials\n              TokenServiceInstanceName: samples-auth\n              TokenServiceKeyName: xsuaa_service-key\n            - Name: reviews-dest\n              URL: ~{reviews-api/srv-url}\n              Authentication: OAuth2ClientCredentials\n              TokenServiceInstanceName: samples-auth\n              TokenServiceKeyName: xsuaa_service-key\n```\n\n----------------------------------------\n\nTITLE: Value Help Configuration in CDS\nDESCRIPTION: Example of configuring value help using @cds.odata.valuelist annotation with currency entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\n@cds.odata.valuelist\nentity Currencies {}\n\nservice BookshopService {\n   entity Books { //...\n      currency : Association to Currencies;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Batch Update in CAP Java\nDESCRIPTION: This snippet demonstrates how to create and execute a parameterized batch update. It shows two methods: using the where clause and using byParams, along with executing the update with multiple parameter sets.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_41\n\nLANGUAGE: java\nCODE:\n```\n// using where\nCqnUpdate update = Update.entity(BOOKS).data(\"stock\", 0)\n    .where(b -> b.title().eq(CQL.param(\"title\"))\n           .and(b.author().name().eq(CQL.param(\"author.name\"))));\n\n// using byParams\nCqnUpdate update = Update.entity(BOOKS).data(\"stock\", 0)\n    .byParams(\"title\", \"author.name\");\n\nMap<String, Object> paramSet1 = new HashMap<>();\nparamSet1.put(\"author.name\", \"Victor Hugo\");\nparamSet1.put(\"title\", \"Les Misérables\");\nMap<String, Object> paramSet2 = new HashMap<>();\nparamSet2.put(\"author.name\", \"Emily Brontë\");\nparamSet2.put(\"title\", \"Wuthering Heights\");\n\nResult result = service.run(update, asList(paramSet1, paramSet2));\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Outbox in package.json\nDESCRIPTION: JSON configuration to enable persistent outbox functionality by adding the outbox service to cds.requires section.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"outbox\": {\n        \"kind\": \"persistent-outbox\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Configurations Through Different Properties\nDESCRIPTION: Compares accessing service configurations through cds.env.requires and cds.requires, showing how the latter provides additional entries for service definition names.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n[dev] cds repl\n> cds.env.requires.db              //> the effective config for db\n> cds.env.requires.reviews         //> the effective config for reviews\n> cds.env.requires.ReviewsService  //> undefined\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Build for cds-typer in tsconfig.cdsbuild.json\nDESCRIPTION: Provides a sample configuration for a custom TypeScript build setup to work with cds-typer generated types.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./gen/srv\",\n  },\n  \"exclude\": [\"app\", \"gen\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant Container Information with HTTP GET\nDESCRIPTION: HTTP request to retrieve information about a tenant's HDI container by making a GET request to the mtx diagnose endpoint.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /mtx/v1/diagnose/container/<tenantId> HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Installing @sap/xssec Library for Authentication\nDESCRIPTION: Installs the @sap/xssec package to enable the security strategy for authentication in the CAP application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/pdm.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @sap/xssec\n```\n\n----------------------------------------\n\nTITLE: CDS Compile Command Examples in Bash\nDESCRIPTION: Demonstrates various examples of using the 'cds compile' command with different options and outputs.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-compile.out.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncds compile model.cds\ncds c model.json --to sql\ncds srv -s all -l all -2 edmx -o out\ncds compile srv -s sap.sample.TestService -2 asyncapi -o out\n```\n\n----------------------------------------\n\nTITLE: Using Create-Service-Push Plugin with Subprocess Option\nDESCRIPTION: Command to use the create-service-push plugin with the subprocess option, which helps resolve issues when working with newer Cloud Foundry API features like the buildpacks property.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncf create-service-push --push-as-subprocess\n```\n\n----------------------------------------\n\nTITLE: Processing Query Result Differences\nDESCRIPTION: Shows how to compare query results using CdsDiffProcessor.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_43\n\nLANGUAGE: java\nCODE:\n```\nResult newImage = service.run(Select.from(...));\nResult oldImage = service.run(Select.from(...));\n\ndiff.process(newImage, oldImage, newImage.rowType());\n```\n\n----------------------------------------\n\nTITLE: Installing @cap-js/event-broker Plugin for Node.js\nDESCRIPTION: Command to install the @cap-js/event-broker plugin for Node.js applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-broker.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @cap-js/event-broker\n```\n\n----------------------------------------\n\nTITLE: Using toLower Function with Parameter in CDS Query Builder\nDESCRIPTION: Example of using the 'toLower' function to convert a string parameter to lowercase before applying an endsWith filter on employee names.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_55\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.toLower;\nSelect.from(EMPLOYEE).columns(e -> e.name())\n  .where(e -> e.name().endsWith(toLower(\"IKA\")));\n```\n\n----------------------------------------\n\nTITLE: Example JSON Test Data Format for Books Entity\nDESCRIPTION: Sample JSON structure generated for a Books entity in a Bookshop application, showing the format with structured objects and relationships.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_12\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n  {\n    \"ID\": 29894036,\n    \"title\": \"title-29894036\",\n    \"author\": {\n      \"ID\": 1343293\n    },\n    \"stock\": 94,\n    \"texts\": [\n      { ... }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Modeling Polymorphism with Separate Entities (Bad Practice)\nDESCRIPTION: This example shows a poor approach to modeling polymorphism by creating separate entities for semantically related items. This can lead to performance issues due to the need for UNIONs and complex JOINs.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nentity Apples : cuid, managed {\n  description  : String;\n  vendor       : Association to one Vendor;\n  appleDetails : appleDetailsType;\n}\n\nentity Bananas : cuid, managed {\n  description   : String;\n  vendor        : Association to one Vendor;\n  bananaDetails : bananaDetailsType;\n}\n\nentity Cherries : cuid, managed {\n  description   : String;\n  vendor        : Association to one Vendor;\n  cherryDetails : cherryDetailsType;\n}\n\nentity Mangos : cuid, managed {\n  description  : String;\n  vendor       : Association to one Vendor;\n  mangoDetails : mangoDetailsType;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Production Profile Configuration\nDESCRIPTION: MTA YAML configuration to deactivate production profile for cloud deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/dashboard.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: my-cap-app-srv\n    [...]\n    properties:\n      CDS_ENVIRONMENT_PRODUCTION_ENABLED: false\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for HANA Migration Table Generation\nDESCRIPTION: This JavaScript configuration snippet shows advanced options for managing hdbmigrationtable generation, including options to enable dropping of tables and selecting the change mode for data type alterations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"hana\" : {\n    \"journal\": {\n      \"enable-drop\": false,\n      \"change-mode\": \"alter\" // \"drop\"\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Books Texts Using Books Entity in CAP Java\nDESCRIPTION: This snippet explains how to construct a query for the Books entity in CAP Java by avoiding the use of the fully qualified 'texts' entity name and instead using the 'texts' association for better compatibility.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> id = singletonMap(ID, 17);\nSelect.from(\"bookshop.Books\", b -> b.matching(id).to(\"texts\"));\n```\n\n----------------------------------------\n\nTITLE: Using Chai Should Style in Tests\nDESCRIPTION: Example showing how to use the chai.should style assertions in test files for a more fluent syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { should } = cds.test(), foobar = {foo:'bar'}\nit('should support chai.should style', ()=>{\n  foobar.should.have.property('foo')\n  foobar.foo.should.equal('bar')\n  should.equal(foobar.foo,'bar')\n})\n```\n\n----------------------------------------\n\nTITLE: Runtime Logging Configuration via HTTP\nDESCRIPTION: Shell commands showing how to interact with Spring actuators to view and modify logging configuration at runtime without application restart.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# retrieve state of all loggers:\ncurl https://<app-url>/actuator/loggers\n\n# retrieve state of single logger:\ncurl https://<app-url>/actuator/loggers/my.loggers.oder.consolidation\n#> {\"configuredLevel\":null,\"effectiveLevel\":\"INFO\"}\n\n# Change logging level:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"configuredLevel\": \"DEBUG\"}' \\\n  https://<app-url>/actuator/loggers/my.loggers.oder.consolidation\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Metadata in Kubernetes Secret\nDESCRIPTION: YAML configuration for creating a Kubernetes secret with service credentials and metadata for an HDI-shared instance from Cloud Foundry.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nstringData:\n  # <…>\n  .metadata: |\n    {\n      \"credentialProperties\":\n        [\n          { \"name\": \"certificate\", \"format\": \"text\"},\n          { \"name\": \"database_id\", \"format\": \"text\"},\n          { \"name\": \"driver\", \"format\": \"text\"},\n          { \"name\": \"hdi_password\", \"format\": \"text\"},\n          { \"name\": \"hdi_user\", \"format\": \"text\"},\n          { \"name\": \"host\", \"format\": \"text\"},\n          { \"name\": \"password\", \"format\": \"text\"},\n          { \"name\": \"port\", \"format\": \"text\"},\n          { \"name\": \"schema\", \"format\": \"text\"},\n          { \"name\": \"url\", \"format\": \"text\"},\n          { \"name\": \"user\", \"format\": \"text\"}\n        ],\n      \"metaDataProperties\":\n        [\n          { \"name\": \"plan\", \"format\": \"text\" },\n          { \"name\": \"label\", \"format\": \"text\" },\n          { \"name\": \"type\", \"format\": \"text\" },\n          { \"name\": \"tags\", \"format\": \"json\" }\n        ]\n    }\n  type: hana\n  label: hana\n  plan: hdi-shared\n  tags: '[ \"hana\", \"database\", \"relational\" ]'\n```\n\n----------------------------------------\n\nTITLE: Starting CAP Sidecar for Local Development\nDESCRIPTION: This shell command starts the CAP sidecar for local development using the 'cds watch' command.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncds watch mtx/sidecar\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Redirect URIs in xs-security.json\nDESCRIPTION: JSON configuration to add OAuth redirect URIs in xs-security.json for XSUAA authentication in a local development environment.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"oauth2-configuration\": {\n  \"redirect-uris\": [\n    \"http://localhost:5000/\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deployment Service Configuration\nDESCRIPTION: JSON configuration example for the DeploymentService showing HDI-specific settings for deploying, creating, and binding to SAP HANA Cloud instances.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_23\n\nLANGUAGE: jsonc\nCODE:\n```\n\"cds.xt.DeploymentService\": {\n  \"hdi\": {\n    \"deploy\": {\n      ...\n    },\n    \"create\": {\n      \"database_id\": \"<SAP HANA Cloud instance ID>\",\n      ...\n    },\n    \"bind\": {\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Arrayed Types in CAP JS\nDESCRIPTION: Demonstrates how to define an arrayed type using the 'items' property to specify the type of array elements.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'arrayed.type': {items:{type:\"cds.Integer\"}}\n}})\n```\n\n----------------------------------------\n\nTITLE: Creating CDS Data Processor Instance\nDESCRIPTION: Initializes a new CdsDataProcessor instance that can process deeply nested maps of CDS data through registered actions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nCdsDataProcessor processor = CdsDataProcessor.create();\n```\n\n----------------------------------------\n\nTITLE: Creating PDM Service Instance via Cloud Foundry CLI\nDESCRIPTION: Command to create a service instance of SAP Personal Data Manager using the Cloud Foundry CLI, specifying the service plan and configuration file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/pdm.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncf create-service personal-data-manager-service standard incidents-mgmt-pdm -c ./pdm-instance-config.json\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Projections in CDS\nDESCRIPTION: Examples of supported projection definitions in CDS that can be resolved to their underlying entities for operations like Update, Insert, Delete and Upsert.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\n// Supported\nentity Order as projection on bookshop.Order;\nentity Order as projection on bookshop.Order { ID, status as state };\nentity Order as projection on bookshop.Order excluding { status };\nentity Header as projection on bookshop.OrderHeader { key ID, address.country as country };\n```\n\n----------------------------------------\n\nTITLE: Installing Required Chai Dependencies\nDESCRIPTION: Command to install the required dependencies for using Chai assertions in tests.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnpm add -D chai@4 chai-as-promised@7 chai-subset jest\n```\n\n----------------------------------------\n\nTITLE: Correct Entity Naming in CDS Schema\nDESCRIPTION: Example of an entity definition that correctly follows the naming convention by using 'Books' as the entity name, which starts with a capital letter as recommended.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/start-entities-uppercase.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nnamespace my.bookshop;\n\nentity Books {\n  key ID : Integer;\n  title  : String;\n  stock  : Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Arbitrary BTP Service Dependency in Chart.yaml\nDESCRIPTION: Shows how to add a dependency for an arbitrary BTP service in the Chart.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  - name: service-instance\n    alias: feature-flags\n    version: 0.1.0\n```\n\n----------------------------------------\n\nTITLE: Using CDS REPL to Compile Entity Definitions\nDESCRIPTION: Example demonstrating how to use the CDS REPL interactive environment to compile an entity with a UUID key field.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n[dev] cds repl\nWelcome to cds repl v 7.3.0\n> cds.compile(`entity Foo { key ID : UUID }`)\n{ definitions: {\n  Foo: { kind: 'entity', elements: { ID: { key: true, type: 'cds.UUID' } } }\n}}\n\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Package for CAP Node.js\nDESCRIPTION: Shell command to install the @cap-js/postgres package for CAP Node.js projects.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @cap-js/postgres\n```\n\n----------------------------------------\n\nTITLE: Merging Modified CDS Files\nDESCRIPTION: Commands to perform a 3-way merge of the original, modified, and newly imported CDS files.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ngit merge-file API_BUSINESS_PARTNER.cds \\\n               API_BUSINESS_PARTNER-orig.cds \\\n               API_BUSINESS_PARTNER-new.cds\nmv API_BUSINESS_PARTNER-new.cds API_BUSINESS_PARTNER-orig.cds\n```\n\n----------------------------------------\n\nTITLE: Extracting Key Values from AnalysisResult in Java\nDESCRIPTION: Retrieves key values from the root and target entities of a query using the rootKeys and targetKeys methods of the AnalysisResult.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> rootKeys = result.rootKeys();\nString orderNo = (String) rootKeys.get(\"OrderNo\"); // 42\n\nMap<String, Object> targetKeys  = result.targetKeys();\nInteger itemId = (Integer) targetKeys.get(\"ID\");   // 1\n```\n\n----------------------------------------\n\nTITLE: SQL Alter Statement for Appending Constraints\nDESCRIPTION: This SQL snippet demonstrates how appending text to an existing annotation generates a valid ALTER statement without requiring manual resolution, such as adding NOT NULL to a field with fuzzy search.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE E ALTER (text NVARCHAR(100) FUZZY SEARCH INDEX ON NOT NULL);\n```\n\n----------------------------------------\n\nTITLE: Cloud Deployment Log Output\nDESCRIPTION: Example log output showing successful application deployment with the generated URL endpoint.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_14\n\nLANGUAGE: log\nCODE:\n```\n[…]\nApplication \"bookshop\" started and available at\n\"[org]-[space]-bookshop.<landscape-domain>.com\"\n[…]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Profile via Command Line\nDESCRIPTION: Shows how to set a custom profile using the command line interface with the --profile flag.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ncds run --profile my-custom-profile\n```\n\n----------------------------------------\n\nTITLE: Implementing OData V2 Analytics in CDS\nDESCRIPTION: Demonstrates how to enable aggregation capabilities in an OData V2 service by defining aggregate entities and measures. Shows configuration of aggregation functions like SUM on specific properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/analytics.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nservice bookshop { entity Books {}; } /*just for name resolution*/ /*>skip<*/\nservice CatalogService {\n  @Aggregation.ApplySupported.PropertyRestrictions: true\n  entity Books @readonly as projection on bookshop.Books{\n  \tID,\n  \ttitle,\n  \tauthor,\n\n  \t@Analytics.Measure: true\n  \t@Aggregation.default: #SUM\n  \tstock\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Draft Garbage Collection in YAML\nDESCRIPTION: Configuration to completely disable the draft garbage collection feature.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/fiori-drafts.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncds.drafts.gc.enabled: false\n```\n\n----------------------------------------\n\nTITLE: CDS Debug Command Usage Examples\nDESCRIPTION: Shows the complete help documentation for the CDS debug command, including synopsis, options, and usage examples. The command supports debugging both local and Cloud Foundry applications with configurable host and port settings.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-debug.out.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n> cds debug --help\n\nSYNOPSIS\n    cds debug [<app>]\n\n    Debug applications running locally or remotely on Cloud Foundry.\n    Local applications will be started in debug mode, while remote applications\n    are put into debug mode.\n\n    If <app> is given, it's assumed to be running on the currently logged-in\n    Cloud Foundry space (check with 'cf target').\n    SSH access to the app is required (check with 'cf ssh-enabled').\n\n    If no <app> is given, the app in the current working is started\n    (with 'cds watch --debug' for Node.js and 'mvn spring-boot:run' for Java).\n\nOPTIONS\n    -h | --host\n\n      the debug host (default: '127.0.0.1')\n\n    -p | --port\n\n      the debug port (default: '9229' for Node.js, '8000' for Java)\n\nEXAMPLES\n    cds debug\n    cds debug bookshop-srv --port 8001\n```\n\n----------------------------------------\n\nTITLE: Building a CQL Query with Conjunction in Java\nDESCRIPTION: Demonstrates how to build a CQL Select query with multiple filter conditions connected by AND operator.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Book\")\n\t.where(b -> b.get(\"ID\").eq(42).and(b.get(\"title\").is(\"Capire\")));\n```\n\n----------------------------------------\n\nTITLE: CDS Model in JSON Format\nDESCRIPTION: Shows the JSON representation of a CDS model with product and order entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/models.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"definitions\": {\n    \"Products\": {\n        \"kind\": \"entity\",\n        \"elements\": {\n            \"ID\": { \"type\": \"Integer\", \"key\": true },\n            \"title\": { \"type\": \"String\", \"length\": 11, \"localized\": true },\n            \"description\": { \"type\": \"String\", \"localized\": true }\n        }\n    },\n    \"Orders\": {\n        \"kind\": \"entity\",\n        \"elements\": {\n            \"product\": { \"type\": \"Association\", \"target\": \"Products\" },\n            \"quantity\": { \"type\": \"Integer\" }\n        }\n    }\n}}\n```\n\n----------------------------------------\n\nTITLE: Checking Update Results in CAP Java 2.x\nDESCRIPTION: Shows how to verify if entities were updated using the rowCount method on update results.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nCqnUpdate update = Update.entity(BOOKS).entry(book); // w/ book: {ID: 0, stock: 3}\nResult result = service.run(update);\n\nlong updateCount = result.rowCount(); // 0 matches with ID 0\n```\n\n----------------------------------------\n\nTITLE: Adding OData V2 Adapter Dependency in Maven\nDESCRIPTION: Adds the OData V2 Adapter dependency to enable OData V2 support in the CAP Java application.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-adapter-odata-v2</artifactId>\n\t<scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Dependencies in package.json\nDESCRIPTION: JSON snippet showing how dependencies are added to package.json when installing reuse packages.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"sample\", \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"@capire/bookshop\": \"^1.0.0\",\n    \"@capire/common\": \"^1.0.0\",\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Polling Task Status\nDESCRIPTION: Example response when polling individual task status during tenant upgrades. Shows possible status values.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_31\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"status\": \"FINISHED\",\n  \"op\": \"upgrade\"\n}\n```\n\n----------------------------------------\n\nTITLE: Event Dispatch Method Definition in TypeScript\nDESCRIPTION: Defines the srv.dispatch method that handles requests or events sent to a service, ensuring they run in proper transaction context.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nasync function srv.dispatch (\n  this  : srv | Transactional <srv>,\n  event : cds.Event | cds.Request | cds.Event[] | cds.Request[]\n)\nreturn : result of this.handle(event)\n```\n\n----------------------------------------\n\nTITLE: Copying Files and Directories with copy()\nDESCRIPTION: Demonstrates how to copy files or folders using the fluent API of the copy() utility function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { copy } = cds.utils\nawait copy('db/data').to('dist','db','data')\nawait copy('db/data').to('dist/db/data')\nawait copy('db/data','dist/db/data')\n```\n\n----------------------------------------\n\nTITLE: Background Job Implementation with cds.spawn()\nDESCRIPTION: Demonstrates how to execute tasks outside the current transaction using background jobs\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncds.spawn ({ user: cds.User.privileged, every: 1000 /* ms */ }, async ()=>{\n  const mails = await SELECT.from('Outbox')\n  await MailServer.send(mails)\n  await DELETE.from('Outbox').where (`ID in ${mails.map(m => m.ID)}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementation of exists() Function\nDESCRIPTION: Shows the basic implementation of the exists() function that checks for file existence relative to cds.root.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nif (file) return fs.existsSync (path.resolve (cds.root,file))\n```\n\n----------------------------------------\n\nTITLE: Inefficient View Building with JOIN (Bad Practice)\nDESCRIPTION: This example demonstrates an inefficient way of building a view using a JOIN between OrdersHeaders and OrdersItems. This approach can lead to performance issues, especially with large datasets.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nview OrdersItemsViewJoin as select\n    OrdersHeaders.ID        as Header_ID,\n    OrdersHeaders.OrderNo   as OrderNo,\n    OrdersHeaders.buyer     as buyer,\n    OrdersHeaders.currency  as currency,\n    OrdersItems.ID          as Item_ID,\n    OrdersItems.product     as product,\n    OrdersItems.quantity    as quantity,\n    OrdersItems.title       as title,\n    OrdersItems.price       as price\nfrom OrdersHeaders JOIN OrdersItems on OrdersHeaders.ID = OrdersItems.Header.ID;\n```\n\n----------------------------------------\n\nTITLE: Retrieving AuditLogService from ServiceCatalog\nDESCRIPTION: Demonstrates how to retrieve the AuditLogService instance from the ServiceCatalog.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/auditlog.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nServiceCatalog catalog = context.getServiceCatalog();\nauditLogService = (AuditLogService) catalog.getService(AuditLogService.DEFAULT_NAME);\n```\n\n----------------------------------------\n\nTITLE: CDS-DK Package Configuration in package.json\nDESCRIPTION: JSON configuration snippet for specifying the CDS Development Kit (@sap/cds-dk) as a development dependency in a CAP Java project. This configuration is used by npm to install and manage the CDS-DK dependency.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/building.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\" : {\n    \"@sap/cds-dk\" : \"^8.5.1\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fields for SAP Cloud Logging in jsonc\nDESCRIPTION: Default JSON formatter configuration for custom fields in SAP Cloud Logging. This defines the field names to be included in logs for SQL queries, validation details, and error reasons.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_14\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"log\": {\n    \"cls_custom_fields\": [\n      \"query\",             //> sql\n      \"target\", \"details\", //> generic validations\n      \"reason\"             //> errors\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Service with an External Type in CDS\nDESCRIPTION: This snippet illustrates how to define a service in CDS that utilizes an external type and how the compiler exposes that type in the OData service definition.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_19\n\nLANGUAGE: cds\nCODE:\n```\ntype Status {\n    code : Boolean;\n}\n\nservice orders {\n  function cancel(orderId : Integer) returns Status;\n}\n```\n\n----------------------------------------\n\nTITLE: CDS Entity Projection Definition\nDESCRIPTION: Defines a projection on Books entity using CDS query language to specify selected fields.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\nentity ListOfBooks as projection on underlying.Books {\n  ID, title, author.name as author\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Developer Role Configuration\nDESCRIPTION: JSON configuration to assign extension developer role to user bob for tenant t1-ext\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"auth\": {\n        \"users\": {\n          \"bob\": {\n            \"tenant\": \"t1-ext\",\n            \"roles\": [\"cds.ExtensionDeveloper\"]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Book Collection with New Book\nDESCRIPTION: JSON example demonstrating the collection state after adding a new book.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Wuthering Heights\",\n    \"editions\": []\n  },\n  {\n    \"title\": \"Catweazle\",\n    \"editions\": []\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating SQL View with Quoted Names\nDESCRIPTION: Defines an SQL view with quoted column names and a parameter AUTHOR. The view combines book ID and title with author parameter.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nVIEW \"data.model.Bookshop.Bookinfo\" (in AUTHOR nvarchar(10)) AS SELECT\n  ID AS \"id\",\n  'The book: ' || THE_TITLE || ' and the author ' || :AUTHOR AS \"book.author.info\"\nFROM DATA_MODEL_BOOKSHOP_BOOKS;\n```\n\n----------------------------------------\n\nTITLE: Draft Support for Localized Data\nDESCRIPTION: Configuration for enabling draft support with localized data using @fiori.draft.enabled annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nannotate sap.capire.bookshop.Books with @fiori.draft.enabled;\n```\n\n----------------------------------------\n\nTITLE: Creating README for Extension Project (Markdown)\nDESCRIPTION: Markdown content for a README file providing guidance and information for extension developers.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_11\n\nLANGUAGE: md\nCODE:\n```\n# Getting Started\n\nWelcome to your extension project to  `@capire/orders`.\n\nIt contains these folders and files, following our recommended project layout:\n\n| File or Folder | Purpose                        |\n|----------------|--------------------------------|\n| `app/`         | all extensions content is here |\n| `test/`        | all test content is here       |\n| `package.json` | project configuration          |\n| `readme.md`    | this getting started guide     |\n\n\n## Next Steps\n\n- `cds pull` the latest models from the SaaS application\n- edit [`./app/extensions.cds`](./app/extensions.cds) to add your extensions\n- `cds watch` your extension in local test-drives\n- `cds push` your extension to **test** tenant\n- `cds push` your extension to **prod** tenant\n\n\n## Learn More\n\nLearn more at https://cap.cloud.sap/docs/guides/extensibility/customization.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authentication Implementation\nDESCRIPTION: JSON configuration to specify a custom authentication implementation in a CAP.js project by providing a path to the implementation file.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"requires\": {\n  \"auth\": {\n    \"impl\": \"srv/custom-auth.js\" // > relative path from project root\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Build Task Configuration in CAP\nDESCRIPTION: Default build configuration for a minimal Node.js project showing task definitions for HANA and Node.js targets with model configurations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/custom-builds.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"target\": \"gen\",\n    \"tasks\": [\n      { \"for\": \"hana\", \"src\": \"db\", \"options\": {\"model\": [\"db\",\"srv\"] } },\n      { \"for\": \"nodejs\", \"src\": \"srv\", \"options\": {\"model\": [\"db\",\"srv\"] } }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Maven Project for CDS Model\nDESCRIPTION: Maven command to generate a new plain Maven Java project for hosting CDS models using maven-archetype-quickstart.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/building-plugins.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn archetype:generate -DgroupId=com.sap.capire -DartifactId=bookshop -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Provider Service in Java CAP Application\nDESCRIPTION: This YAML snippet configures the CAP Java application to request the CDS model from the Model Provider Service by specifying the provider URL and disabling extensibility.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  model:\n    provider:\n      url: http://localhost:4005\n      # remove, in case you need tenant extensibility\n      extensibility: false\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugin Requirements\nDESCRIPTION: Example of specifying plugin prerequisites using requires method\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrequires() {\n  return ['xsuaa'] //> runs 'cds add xsuaa' before plugin is run\n}\n```\n\n----------------------------------------\n\nTITLE: Adding XSUAA Authentication\nDESCRIPTION: Command to add XSUAA-based authentication configuration\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncds add xsuaa\n```\n\n----------------------------------------\n\nTITLE: Using substring Method in Predicate in CDS Query Builder\nDESCRIPTION: Example of using the 'substring' method in a WHERE clause to test if a substring starting from position 2 equals a specific value.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_60\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Authors\")\n  .where(e -> e.get(\"name\").substring(2).eq(\"ter\"));\n```\n\n----------------------------------------\n\nTITLE: Installing @cap-js/audit-logging Plugin\nDESCRIPTION: Command to add the @cap-js/audit-logging plugin package to a CAP project using npm.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @cap-js/audit-logging\n```\n\n----------------------------------------\n\nTITLE: Defining App Module in mta.yaml for Deployment\nDESCRIPTION: YAML configuration in mta.yaml to define the application module for deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-broker.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: incidents-srv\n    provides:\n      - name: incidents-srv-api\n        properties:\n          url: ${default-url} #> needed in references below\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent Using EXISTS\nDESCRIPTION: This snippet shows another SQL equivalent of the CDS query for English books using EXISTS clauses, which can be faster with some databases.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW EnglishBooks AS SELECT * FROM Books\n-- for Association Books:author:\nWHERE EXISTS (SELECT 1 from Authors as author WHERE author.ID = Books.author_ID\n  -- for Association Authors:country:\n  AND EXISTS (SELECT 1 from Countries as country WHERE country.code = author.country_code\n    -- the actual filter condition:\n    AND country.code = 'GB';\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent of CDS Association Query\nDESCRIPTION: This snippet shows the SQL equivalent of the CDS query for English books, demonstrating how associations are translated into SQL joins.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW EnglishBooks AS SELECT * FROM Books\n-- for Association Books:author:\nINNER JOIN Authors as author ON author.ID = Books.author_ID\n-- for Association Authors:country:\nINNER JOIN Countries as country ON country.code = author.country_code\n-- the actual filter condition:\nWHERE country.code = 'GB';\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Emission in Service\nDESCRIPTION: Implementation showing how to emit custom events after CREATE operations in a service class.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nclass ReviewsService { init() {\n   this.after ('CREATE','Reviews', req => this.emit('ReviewAdded', req.data))\n}}\n```\n\n----------------------------------------\n\nTITLE: Temporal Aspect Example\nDESCRIPTION: Shows how to use the temporal aspect for handling date-effective records.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nentity Contract : temporal {...}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest CAP Development Kit\nDESCRIPTION: Command to update the @sap/cds-dk package to the latest version globally.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm update -g @sap/cds-dk\n```\n\n----------------------------------------\n\nTITLE: Starting CAP Server for Bookstore Application\nDESCRIPTION: This command starts a CAP server for a reviews-enhanced bookshop application as an all-in-one process. It watches the 'bookstore' directory for changes and serves multiple services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncds watch bookstore\n```\n\n----------------------------------------\n\nTITLE: Updating Localized Data References in CDS\nDESCRIPTION: Illustrates the change in referencing localized data entities, using .texts suffix instead of _texts in CDS models.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo : cuid { /* ...; */ title : localized String; }\nentity FooTexts as projection on Foo_texts; //> error\n```\n\nLANGUAGE: cds\nCODE:\n```\nentity FooTexts as projection on Foo.texts;\n```\n\n----------------------------------------\n\nTITLE: Running services with hybrid profile\nDESCRIPTION: Shell commands to run the reviews and bookstore services separately with the hybrid profile for testing.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-mesh.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncds watch reviews --profile hybrid\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds watch bookstore --profile hybrid\n```\n\n----------------------------------------\n\nTITLE: Defining HANA Synonym\nDESCRIPTION: JSON configuration for creating a HANA synonym to map quoted table names to plain names.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DATA_MODEL_BOOKSHOP_BOOKS\" : {\n    \"target\": {\n      \"object\" : \"data.model::Bookshop.Books\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entities in CAP JS\nDESCRIPTION: Illustrates how to define an entity with various element types, including key and virtual properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'Products': {kind:\"entity\", elements:{\n    'ID':     {type:\"cds.Integer\", key:true},\n    'title':  {type:\"cds.String\", notNull:true},\n    'price':  {type:\"Amount\", virtual:true},\n  }}\n}})\n```\n\n----------------------------------------\n\nTITLE: Executing Query in Classic Java Runtime\nDESCRIPTION: Demonstrates how to execute a query using CDSDataSourceHandler in the Classic Java Runtime.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nCDSDataSourceHandler cdsHandler = DataSourceHandlerFactory\n    .getInstance()\n    .getCDSHandler(getConnection(), queryRequest.getEntityMetadata().getNamespace());\n\nCDSQuery cdsQuery = new CDSSelectQueryBuilder(\"CatalogService.Books\")\n\t.selectColumns(\"id\", \"title\")\n\t.where(new ConditionBuilder().columnName(\"title\").IN(\"Spring\", \"Java\"))\n\t.orderBy(\"title\", true)\n\t.build();\n\ncdsHandler.executeQuery(cdsQuery);\n```\n\n----------------------------------------\n\nTITLE: Updated CSV Column Naming Convention\nDESCRIPTION: Example showing the change in CSV column naming, where physical column names must be used instead of path expressions.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_17\n\nLANGUAGE: csvc\nCODE:\n```\nID;title;author_ID;currency_code // [!code ++]\nID;title;author.ID;currency.code // [!code --]\n```\n\n----------------------------------------\n\nTITLE: Changed Behavior for Virtual Elements in Queries\nDESCRIPTION: Example illustrating how the behavior of virtual elements has changed in database queries, where they are now excluded from results.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n[dev] cds repl\n> SELECT.from('Foo')         //> [{ foo:1, bar:null }, ...] // [!code --]\n> SELECT.from('Foo')         //> [{ foo:1 }, ...]\n> SELECT('bar').from('Foo')  //> ERROR: no columns to read\n```\n\n----------------------------------------\n\nTITLE: MTA Integration Implementation - Mixed\nDESCRIPTION: Shows how to integrate with cds add mta command by implementing the combine method and providing MTA template.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds-dk')\nconst { write, path } = cds.utils, { join } = path\nconst { readProject, merge, registries } = cds.add\nconst { srv4 } = registries.mta\n\nmodule.exports = class extends cds.add.Plugin {\n  async combine() {\n    const project = readProject()\n    const { hasMta, srvPath } = project\n    if (hasMta) {\n      const srv = srv4(srvPath)\n      const postgres = { in: 'resources',\n        where: { 'parameters.service': 'postgresql-db' }\n      }\n      const postgresDeployer = { in: 'modules',\n        where: { type: 'nodejs', path: 'gen/pg' }\n      }\n      await merge(__dirname, 'add/mta.yml.hbs').into('mta.yaml', {\n        project,\n        additions: [srv, postgres, postgresDeployer],\n        relationships: [{\n            insert: [postgres, 'name'],\n            into: [srv, 'requires', 'name']\n        }, {\n          insert: [postgres, 'name'],\n          into: [postgresDeployer, 'requires', 'name']\n        }]\n      })\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: {{appName}}-srv\n    type: {{language}}\n    path: {{& srvPath}}\n    requires:\n      - name: {{appName}}-postgres\n  - name: {{appName}}-postgres-deployer\n    type: nodejs\n    path: gen/pg\n    parameters:\n      buildpack: nodejs_buildpack\n      no-route: true\n      no-start: true\n      tasks:\n        - name: deploy-to-postgresql\n          command: npm start\n    requires:\n      - name: {{appName}}-postgres\nresources:\n  - name: {{appName}}-postgres\n    type: org.cloudfoundry.managed-service\n    parameters:\n      service: postgresql-db\n      service-plan: development\n```\n\n----------------------------------------\n\nTITLE: Creating a Tenant Extension with HTTP Request\nDESCRIPTION: HTTP PUT request example showing how to create an extension for adding an ISBN field to a book entity. The request includes CSN (CDS Schema Notation) and i18n translation data.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPUT /-/cds/extensibility/Extensions/isbn-extension HTTP/1.1\nContent-Type: application/json\n\n{\n  \"csn\": [\"using my.bookshop.Books from '_base/db/data-model';\n           extend my.bookshop.Books with { Z_ISBN: String };\"],\n  \"i18n\": [{ \"name\": \"i18n.properties\", \"content\": \"Books_stock=Stock\" },\n           { \"name\": \"i18n_de.properties\", \"content\": \"Books_stock=Bestand\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CAP-JS Documentation Project Locally\nDESCRIPTION: Clone the CAP-JS documentation repository, navigate into the project directory, and run the setup script. Requires Node.js version 18 or higher.\nSOURCE: https://github.com/cap-js/docs/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/cap-js/docs capire\ncd capire\nnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Starting MTX Sidecar\nDESCRIPTION: Command to start the MTX sidecar for local testing.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncds watch mtx/sidecar\n```\n\n----------------------------------------\n\nTITLE: Debug Environment Variable Usage\nDESCRIPTION: Shell commands showing how to enable debug output using environment variables.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=app,sql cds watch\nDEBUG=all cds watch\n```\n\n----------------------------------------\n\nTITLE: Security Event Schema in CDS\nDESCRIPTION: CDS schema definition for logging security-related events.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_13\n\nLANGUAGE: cds\nCODE:\n```\nevent SecurityEvent : LogEntry {\n  data : {};\n  ip   : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Maven for SQLite Schema Generation\nDESCRIPTION: Sets up the cds-maven-plugin to generate a `schema.sql` for SQLite using a specific execution goal. Requires modification of the srv/pom.xml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<execution>\n\t<id>schema.sql</id>\n\t<goals>\n\t\t<goal>cds</goal>\n\t</goals>\n\t<configuration>\n\t\t<commands>\n\t\t\t<command>deploy --to sqlite --dry --out \"${project.basedir}/src/main/resources/schema.sql\"</command>\n\t\t</commands>\n\t</configuration>\n</execution>\n```\n\n----------------------------------------\n\nTITLE: Configuring Messaging Service in YAML\nDESCRIPTION: This snippet shows how to configure the messaging service in the mta.yaml file. It includes parameterization of emname and namespace properties, and adds a processed-after property for the XSUAA instance.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - name: samples-messaging\n    type: org.cloudfoundry.managed-service\n    parameters:\n      service: enterprise-messaging\n      service-plan: default\n      path: ./event-mesh.json\n      config:\n        emname: bookstore-${org}-${space}\n        namespace: cap/samples/${space}\n\n  - name: samples-auth\n    processed-after:\n      - samples-messaging\n```\n\n----------------------------------------\n\nTITLE: Automatically Generated Books.texts Entity in CDS\nDESCRIPTION: The CDS compiler automatically generates a separate entity to hold translated texts. This example shows the structure of the generated Books.texts entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nentity Books.texts {\n  key locale : sap.common.Locale;\n  key ID : UUID; //= source's primary key\n  title : String;\n  descr : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic To-One Associations in CAP JS\nDESCRIPTION: Demonstrates how to create basic to-one associations using the 'cds.Association' type.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'Books': { kind:\"entity\", elements:{\n    'author': { type:\"cds.Association\", target:\"Authors\" },\n  }},\n  //> an association type-def\n  'Currency': { type:\"cds.Association\", target:\"Currencies\" },\n}})\n```\n\n----------------------------------------\n\nTITLE: Adding Hierarchy Virtual Element Annotations in CDS\nDESCRIPTION: This annotation links virtual elements to the recursive hierarchy properties. It maps the calculated hierarchy properties like LimitedDescendantCount and DistanceFromRoot to the entity, enabling the UI to correctly render the hierarchy.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_35\n\nLANGUAGE: cds\nCODE:\n```\nannotate HRService.HREmployee with @Hierarchy.RecursiveHierarchy #EmployeeHierarchy: {\n  $Type: 'Hierarchy.RecursiveHierarchyType',\n  LimitedDescendantCount: LimitedDescendantCount,\n  DistanceFromRoot: DistanceFromRoot,\n  DrillState: DrillState,\n  LimitedRank: LimitedRank\n};\n```\n\n----------------------------------------\n\nTITLE: MTA YAML Multitenancy Configuration\nDESCRIPTION: Configuration for enabling MTXS flag in Java module\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-migration.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrequires:\n  - name: mtx-sidecar\n    properties:\n      CDS_MULTITENANCY_MTXS_ENABLED: true\n      CDS_MULTITENANCY_SIDECAR_URL: ~{url}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Users for Local Development\nDESCRIPTION: YAML configuration for setting up mock users with developer role access to the dashboard in local environment.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/dashboard.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  security:\n    mock:\n      users:\n        - name: myUser\n          password: myPass\n          roles:\n            - cds.Developer\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for CDS Model\nDESCRIPTION: XML configuration to add a Maven dependency for importing CDS models in srv/pom.xml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/building-plugins.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.sap.capire</groupId>\n  <artifactId>bookshop</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication for Unknown Endpoints in YAML\nDESCRIPTION: Sets the configuration parameter to turn off auto-configuration of custom endpoints for authentication.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ncds.security.authentication.authenticate-unknown-endpoints: false\n```\n\n----------------------------------------\n\nTITLE: Running Java Application with Hybrid Profile\nDESCRIPTION: Shell command to run a CAP Java application with the hybrid profile, binding it to cloud services for accessing remote destinations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_56\n\nLANGUAGE: sh\nCODE:\n```\ncds bind --exec -- mvn spring-boot:run \\\n  -Dspring-boot.run.profiles=default,hybrid\n```\n\n----------------------------------------\n\nTITLE: Upgrading Tenant Database via HTTP in CAP\nDESCRIPTION: HTTP POST request to upgrade a specific tenant's database. This method can be used as an alternative to the CLI command for upgrading tenant data.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:4005/-/cds/deployment/upgrade HTTP/1.1\nContent-Type: application/json\nAuthorization: Basic yves:\n\n{ \"tenant\": \"t1\" }\n```\n\n----------------------------------------\n\nTITLE: Executing Query in New CAP Java SDK\nDESCRIPTION: Shows how to execute a query using CqnService in the new CAP Java SDK.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nSelect query =  Select.from(\"CatalogService.Books\")\n\t.columns(\"id\", \"title\")\n\t.where(p -> p.get(\"title\")\n\t.in(\"Spring\", \"Java\"))\n\t.orderBy(\"title\");\n\ncatalogService.run(query);\n```\n\n----------------------------------------\n\nTITLE: Adding Java Dependencies in srv/pom.xml\nDESCRIPTION: XML snippet showing how to add additional Java dependencies required by event handlers in the service module's pom.xml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n...\n<dependencies>\n\t<!-- add your additional dependencies here -->\n\t...\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-starter-spring-boot-odata</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.xerial</groupId>\n\t\t<artifactId>sqlite-jdbc</artifactId>\n\t</dependency>\n\t...\n</dependencies>\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring HDI Deployment Options in CDS\nDESCRIPTION: JSON configuration for CDS Deployment Service showing how to handle undeployment of table data and skip data deletion.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds.xt.DeploymentService\": {\n    \"hdi\": {\n      \"deploy\": {\n        \"undeploy\": [\n          \"src/gen/data/my.bookshop-Books.hdbtabledata\"\n        ],\n        \"path_parameter\": {\n          \"src/gen/data/my.bookshop-Books.hdbtabledata:skip_data_deletion\": \"true\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Project Directory Structure\nDESCRIPTION: Example file and folder structure generated after initializing a CDS extension project, showing the main directories and configuration files.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/assets/customization-old.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmyextproject/\n  package.json    # extension project descriptor\n  srv/\n            # will contain service and ui-related extension cds files\n  db/\n            # will contain db-related extension cds files\n  node_modules/\n    _base/\n       ...   # contains the base model provided by the SaaS application\n```\n\n----------------------------------------\n\nTITLE: Starting CAP Main Application in Java\nDESCRIPTION: This shell command starts the main CAP application in Java environment using Maven's spring-boot:run command.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: CDS Deploy Command for HANA\nDESCRIPTION: Command to deploy database components to SAP HANA instance while keeping server application running locally.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncds deploy --to hana\n```\n\n----------------------------------------\n\nTITLE: Adding SAP Cloud Portal Service in CAP\nDESCRIPTION: Command to add SAP Cloud Portal service configuration to a CAP project. This is useful for serving UIs in a multitenant application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ncds add portal\n```\n\n----------------------------------------\n\nTITLE: OData Data Aggregation Query Example\nDESCRIPTION: Demonstrates an OData V4 query using $apply for data aggregation, including filtering, grouping, and ordering operations on a books collection.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nGET /Orders(10)/books?\n    $apply=filter(year eq 2000)/\n           groupby((author/name),aggregate(price with average as avg))/\n    orderby(title)/\n    top(3)\n```\n\n----------------------------------------\n\nTITLE: Configuring custom project folder layout in package.json\nDESCRIPTION: JSON configuration example showing how to override the default folder structure in a CAP project by specifying custom folder paths in the package.json file.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/index.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ ...\n  \"cds\": {\n    \"folders\": {\n       \"db\": \"database/\",\n       \"srv\": \"services/\",\n       \"app\": \"uis/\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex matchesPattern Predicate in CAP Java CQL Query\nDESCRIPTION: Shows a more complex use of matchesPattern predicate to filter books with titles starting with 'C', ending with 'e', and containing any number of letters in between.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_80\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Books\").where(t -> t.get(\"title\").matchesPattern(\"^C\\\\w*e$\"));\n```\n\n----------------------------------------\n\nTITLE: Java Service Configuration in values.yaml for Kyma\nDESCRIPTION: YAML configuration for setting up the Java service in values.yaml for Kyma deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\n...\nsrv:\n  bindings:\n    ...\n  image:\n    repository: bookshop-srv\n  env:\n    SPRING_PROFILES_ACTIVE: cloud\n    CDS_MULTITENANCY_APPUI_TENANTSEPARATOR: \"-\"\n    CDS_MULTITENANCY_APPUI_URL: https://{{ .Release.Name }}-srv-{{ .Release.Namespace }}.{{ .Values.global.domain }}\n    CDS_MULTITENANCY_SIDECAR_URL: https://{{ .Release.Name }}-sidecar-{{ .Release.Namespace }}.{{ .Values.global.domain }}\n  ...\n```\n\n----------------------------------------\n\nTITLE: Traditional DAO Query Approach\nDESCRIPTION: Shows the traditional approach of querying all fields without specific selection.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet books = await GET `Books`\n```\n\n----------------------------------------\n\nTITLE: Validating CDS Configuration with cds env\nDESCRIPTION: Command to validate the final CDS configuration by printing the effective configuration to the console.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncds env\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Formatter\nDESCRIPTION: Examples of setting custom log formatting functions.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// the current default:\ncds.log.format = (id, level, ...args) => [ `[${id}]`, '-', ...args ]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// a verbose format:\nconst _levels = [ 'SILENT', 'ERROR', 'WARN', 'INFO', 'DEBUG', 'TRACE' ]\ncds.log.format = (id, level, ...args) => [\n  '[', (new Date).toISOString(),\n  '|', _levels[level].padEnd(5),\n  '|', cds.context?.tenant || '-',\n  '|', cds.context?.id || '-',\n  '|', id, '] -', ...args\n]\n```\n\n----------------------------------------\n\nTITLE: Java Application YAML Configuration\nDESCRIPTION: YAML configuration added to application.yaml for multitenancy in a Java project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\nspring:\n  config.activate.on-profile: cloud\ncds:\n  multi-tenancy:\n    mtxs.enabled: true\n```\n\n----------------------------------------\n\nTITLE: Executing Query with CdsDataStore\nDESCRIPTION: Shows how to execute a query using CdsDataStore obtained from PersistenceService.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nSelect query =  ...; // construct the query\n\nCdsDataStore cdsDataStore = persistence.getCdsDataStore();\ncdsDataStore.execute(query);\n```\n\n----------------------------------------\n\nTITLE: Using Additional Compilation Options\nDESCRIPTION: Example of passing additional options to the cds.compile function for controlling output format and contents.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet csn = await cds.compile('*',{ min:true, docs:true })\n```\n\n----------------------------------------\n\nTITLE: Initializing CDS Extension Project Command\nDESCRIPTION: Command to initialize a new CDS extension project for a SaaS application. Requires app URL, optional project directory, tenant subdomain, and authentication passcode parameters.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/assets/customization-old.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds extend <app-url> [-d <project-extension-directory>] [-s <tenant-subdomain>] [-p <passcode>]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Entity Names in CDS\nDESCRIPTION: Examples of entity names starting with '$', which should be avoided as they are reserved for internal purposes. This results in warnings.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_8\n\nLANGUAGE: CDS\nCODE:\n```\nentity $Funny { ... };   // this name should not be used\nentity ![$Too] { ... };  // this name should not be used\n```\n\n----------------------------------------\n\nTITLE: Dead Letter Queue Service Definition\nDESCRIPTION: CDS service definition for managing dead letter queue entries with revive and delete actions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_13\n\nLANGUAGE: cds\nCODE:\n```\nusing from '@sap/cds/srv/outbox';\n\n@requires: 'internal-user'\nservice OutboxDeadLetterQueueService {\n\n  @readonly\n  entity DeadOutboxMessages as projection on cds.outbox.Messages\n    actions {\n      action revive();\n      action delete();\n    };\n\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with Bindings\nDESCRIPTION: Examples of using cds bind to execute arbitrary command line programs with service bindings.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ncds bind --exec [--] <command> <args ...>\n```\n\nLANGUAGE: powershell\nCODE:\n```\ncds bind --exec '--' somecmd --someflag --some-double-dash-parameter 42\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds bind --exec --profile <profile> [--] <command> <args ...>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SaaS Dependencies in Node.js\nDESCRIPTION: JSON configuration to provide a custom dependency configuration for a service not supported out of the box.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"my-service\": {\n      \"subscriptionDependency\": \"xsappname\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Implementing @requires Annotation in CDS Service\nDESCRIPTION: Example of a properly secured AdminService that requires the 'admin' role for access. This implementation ensures the service is protected with appropriate authorization restrictions.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/auth-no-empty-restrictions.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nservice AdminService @(requires: 'admin') {\n  entity Books as projection on db.Books;\n}\n```\n\n----------------------------------------\n\nTITLE: Async Upgrade Response\nDESCRIPTION: Example of asynchronous model upgrade response showing job status and results format.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": null,\n  \"status\": \"FINISHED\",\n  \"result\": {\n      \"tenants\": {\n          \"<tenantId1>\": {\n              \"status\": \"SUCCESS\",\n              \"message\": \"\",\n              \"buildLogs\": \"<build logs>\"\n          },\n          \"<tenantId2>\": {\n              \"status\": \"FAILURE\",\n              \"message\": \"<some error log output>\",\n              \"buildLogs\": \"<build logs>\"\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Dollar-Prefixed Element Name in CDS Schema\nDESCRIPTION: This example shows a violation of the no-dollar-prefixed-names rule where the element '$pages' starts with a dollar sign, which could potentially shadow reserved variables and lead to unexpected behavior.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/no-dollar-prefixed-names.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nnamespace sap.capire.bookshop;\n\nentity Books {\n  key ID : Integer;\n  title  : String;\n  stock  : Integer;\n  price  : Decimal;\n  $pages : Integer;\n}\n```\n\n----------------------------------------\n\nTITLE: Expressions in Nested Expands\nDESCRIPTION: Shows how to include expressions and create new structures in nested expands.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cql.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT from Books {\n   title,\n   author { name, dateOfDeath - dateOfBirth as age },\n   { stock as number, stock * price as value } as stock\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nresults = [\n  {\n    title: 'Wuthering Heights',\n    author: {\n      name: 'Emily Brontë',\n      age: 30\n    },\n    stock: {\n      number: 12,\n      value: 133.32\n    }\n  }, …\n]\n```\n\n----------------------------------------\n\nTITLE: Running Node.js CAP Application with Hybrid Profile\nDESCRIPTION: Command to run a Node.js CAP application with the hybrid profile for cloud bindings.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\ncds watch --profile hybrid\n```\n\n----------------------------------------\n\nTITLE: Omitting Elements from CDS API\nDESCRIPTION: This snippet demonstrates how to use the @cds.api.ignore annotation to suppress unwanted entity fields in APIs exposed from the CDS model. It specifically shows how to ignore an association field.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_41\n\nLANGUAGE: cds\nCODE:\n```\nentity Books { ...\n  @cds.api.ignore\n  author : Association to Authors;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HANA Dependencies to Individual CAP Microservices\nDESCRIPTION: Adds SAP HANA database dependencies to each microservice module to ensure they can connect to the shared HANA database when deployed to the cloud.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @cap-js/hana --workspace bookstore\nnpm i @cap-js/hana --workspace orders\nnpm i @cap-js/hana --workspace reviews\n```\n\n----------------------------------------\n\nTITLE: Extracting Default Messages from CAP Java JAR File\nDESCRIPTION: Command to extract the cds-messages-template.properties file from the cds-services-utils JAR file. This file contains all available error codes and default messages for customization.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/indicating-errors.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\njar -f cds-services-utils-<VERSION>.jar -x cds-messages-template.properties\n```\n\n----------------------------------------\n\nTITLE: Running Database Schema Update as Cloud Foundry Task for CAP Application\nDESCRIPTION: Command to manually run a database schema update as a Cloud Foundry task for a CAP application. This can be used to update the schema for all tenants outside the regular deployment process.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\ncf run-task <app> --name \"upgrade-all\" --command \"cds-mtx upgrade '*'\"\n```\n\n----------------------------------------\n\nTITLE: Running CAP Application with Java\nDESCRIPTION: Command to start a CAP application with Java using Maven and Spring Boot.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: VS Code Launch Configuration for MTX Tenant Updates\nDESCRIPTION: JSON configuration for setting up a VS Code launch configuration to update MTX tenants. Specifies the main class, project settings and VM arguments.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/multitenancy.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"type\": \"java\",\n   \"name\": \"MTX Update tenants\",\n   \"request\": \"launch\",\n   \"mainClass\": \"com.sap.cds.framework.spring.utils.Deploy\",\n   \"args\": \"\",\n   \"projectName\": \"<your project>\",\n   \"vmArgs\": \"-Dspring.profiles.active=local-mtxs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Obsolete Files in CAP Java Projects\nDESCRIPTION: Provides a list of files that should not be copied when migrating from a classic CAP Java project to a new project using the CAP Java SDK.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_22\n\nLANGUAGE: txt\nCODE:\n```\n<PROJECT-ROOT>/\n├─ db/\n│  ├─ .build.js\n│  └─ package.json\n└─ srv/src/main/\n           ├─ resources/\n           │  ├─ application.properties\n           │  └─ connection.properties\n           └─ webapp/\n              ├─ META-INF/\n              │  ├─ sap_java_buildpack/config/resources_configuration.xml\n              │  └─ context.xml\n              └─ WEB-INF/\n                 ├─ resources.xml\n                 ├─ spring-security.xml\n                 └─ web.xml\n```\n\n----------------------------------------\n\nTITLE: Plugin Dependencies Configuration\nDESCRIPTION: Maven configuration for setting up dependencies required for CAP Java plugin development.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/building-plugins.md#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <cds.services.version>2.4.0</cds.services.version>\n</properties>\n\n<dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>com.sap.cds</groupId>\n        <artifactId>cds-services-bom</artifactId>\n        <version>${cds.services.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n    <dependency>\n        <groupId>com.sap.cds</groupId>\n        <artifactId>cds-services-api</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Defining Projections in CAP JS\nDESCRIPTION: Shows how to create a projection view using the 'projection' property instead of a full SQL query.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n({ definitions: {\n  'Foo': { kind: \"entity\",\n    projection: {\n      from: { ref: ['Bar'] },\n      columns: [ '*' ]\n    }\n  }\n}})\n```\n\n----------------------------------------\n\nTITLE: Defining CDS Linked Classes Hierarchy in JavaScript\nDESCRIPTION: Illustrates the class hierarchy for CDS linked classes, including types, entities, and associations.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nclass any {...}\nclass context extends any {...}\ncds.service = class service extends context {...}\ncds.type = class type extends any {...}\n              class scalar extends type {...}\n                class boolean extends scalar {...}\n                class number extends scalar {...}\n                class date extends scalar {...}\n                class string extends scalar {...}\ncds.array  = class array extends type {...}\ncds.struct = class struct extends type {...}\ncds.entity = class entity extends struct {...}\ncds.event = class event extends struct {...}\ncds.Association = class Association extends type {...}\ncds.Composition = class Composition extends Association {...}\n```\n\n----------------------------------------\n\nTITLE: Remote Application HTTP Request Template Format\nDESCRIPTION: HTTP request template format for remote Cloud Foundry applications with bearer token authentication.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_18\n\nLANGUAGE: http\nCODE:\n```\n@server = https://...\n@auth = x-approuter-authorization: bearer ...\n```\n\n----------------------------------------\n\nTITLE: Representing Aspects in CSN JSON\nDESCRIPTION: Example of how aspects are represented in the new CSN format using the 'kind' property set to 'aspect'.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"definitions\": {\n    \"A\": {\n      \"kind\": \"aspect\",\n      \"elements\": { ... }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Version in Maven\nDESCRIPTION: XML configuration to specify Node.js version for cds-maven-plugin to prevent version mismatch errors.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n\t\t<!-- ... -->\n\t\t<cds.install-node.nodeVersion>v20.11.0</cds.install-node.nodeVersion>\n\t\t<!-- ... -->\n\t</properties>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Expressions Using EDM JSON in CDS Annotations\nDESCRIPTION: Demonstrates using the edm-json inline mechanism to create dynamic expressions in OData annotations that cannot be expressed using standard CDS syntax.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_22\n\nLANGUAGE: cds\nCODE:\n```\n@UI.Hidden: {$edmJson: {$Ne: [{$Path: 'status'}, 'visible']}}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Annotation Term=\"UI.Hidden\">\n  <Ne>\n    <Path>status</Path>\n    <String>visible</String>\n  </Ne>\n</Annotation>\n```\n\n----------------------------------------\n\nTITLE: Configuring MTX-Sidecar Module in mta.yaml\nDESCRIPTION: YAML configuration for the sidecar module in mta.yaml that provides the mtx-sidecar with the module's URL.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: sidecar\n    provides:\n      - name: mtx-sidecar\n        properties:\n          url: ${default-url}\n```\n\n----------------------------------------\n\nTITLE: CAP Node.js PostgreSQL Environment Configuration\nDESCRIPTION: Properties file configuration for setting up PostgreSQL connection in a CAP Node.js project's .env file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\ncds.requires.db.[pg].kind = postgres\ncds.requires.db.[pg].credentials.host = localhost\ncds.requires.db.[pg].credentials.port = 5432\ncds.requires.db.[pg].credentials.user = postgres\ncds.requires.db.[pg].credentials.password = postgres\ncds.requires.db.[pg].credentials.database = postgres\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Container for a Java Interface\nDESCRIPTION: Shows how to create an empty data container for a Java interface generated from a CDS model using Struct.create method.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.Struct.create;\n...\n\nBook book = create(Book.class);\n\nbook.setTitle(\"Dracula\");\nString title = book.getTitle();   // title: \"Dracula\"\n```\n\n----------------------------------------\n\nTITLE: Environment Properties for Merge Example\nDESCRIPTION: Example environment properties file that will be merged with other configuration sources.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_15\n\nLANGUAGE: properties\nCODE:\n```\ncds.requires.db.credentials.database = my.sqlite\n```\n\n----------------------------------------\n\nTITLE: Building the Sidecar for Production in Node.js\nDESCRIPTION: Command to execute a build process for the sidecar before deploying to production. This involves running a Node.js build using 'cds build' at the project's root.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncds build\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with Port Mapping for CAP.js\nDESCRIPTION: Command to run a Docker container based on the 'cds' image with port 4004 mapped from container to host, enabling interactive terminal access.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --publish 4004:4004 -it cds sh\n```\n\n----------------------------------------\n\nTITLE: Displaying npm outdated command output for @sap/cds dependency\nDESCRIPTION: Example output from the 'npm outdated @sap/cds' command showing that version 7.0.0 is installed while version 7.8.0 is available. This demonstrates how the rule identifies outdated dependencies.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/latest-cds-version.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPackage   Current  Wanted  Latest  Location               Depended by\n@sap/cds    7.0.0   7.8.0   7.8.0  node_modules/@sap/cds  latest-cds-version\n```\n\n----------------------------------------\n\nTITLE: Automatic Personal Data Tracking\nDESCRIPTION: Implementation of automatic audit logging for entities marked with @PersonalData annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ncds.on('served', async services => {\n  const auditlog = await cds.connect.to('AuditLog')\n  for (let each of services) {\n    for (let e of each.entities) if (e['@PersonalData']) {\n      each.on('UPDATE',e, auditlog.emit('PersonalDataModified', {...}))\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatically Modifying Configuration\nDESCRIPTION: Example showing how to modify configuration settings programmatically in a running Node.js application using cds.env.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.env.requires.sql.kind = 'sqlite'\ncds.env.requires.sql.credentials = { database:'my.sqlite' }\n```\n\n----------------------------------------\n\nTITLE: Using Inspect Command in REPL\nDESCRIPTION: Examples of using the .inspect command in CDS REPL to view objects with a configurable depth level.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\n.inspect cds .depth=1\n.inspect CatalogService.handlers .depth=1\n```\n\n----------------------------------------\n\nTITLE: Example of SSH Tunnel to SAP HANA Service\nDESCRIPTION: Specific example of creating an SSH tunnel to a SAP HANA service running on a remote host, enabling local connections to the database through port forwarding.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncf ssh <app> -L localhost:30010:10.10.10.10:30010\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields in CDS\nDESCRIPTION: Extends the `ShipmentOrders` entity from a SaaS application with new fields: `carrier` (an association to `Carriers`) and `delayedBy` (a `Time` field). This demonstrates how SaaS customers can add extension fields to existing entities to customize the application.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\n```cds\nusing { ShipmentOrders } from 'some-saas-application';\nextend ShipmentOrders with {\n  carrier : Association to Carriers; // new association\n  delayedBy : Time; // new field\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing OData V4 Starter with Spring Boot Starter\nDESCRIPTION: Replaces the OData V4 starter dependency with the Spring Boot starter to disable OData V4 support.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-starter-spring-boot</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Expression Type Definitions\nDESCRIPTION: TypeScript type definitions for various expression types used in queries including references, values, functions and operators.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cqn.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype expr  = ref | val | xpr | list | func | param | SELECT\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype ref   = { ref: ( name | { id:name &infix })[] }\ntype val   = { val: scalar }\ntype xpr   = { xpr: xo[] }\ntype list  = { list: expr[] }\ntype func  = { func: string, args: expr[] }\ntype param = { ref: [ '?' | number | string ], param: true }\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype xo       = expr | keyword | operator\ntype operator = '=' | '==' | '!=' | '<' | '<=' | '>' | '>='\ntype keyword  = 'in' | 'like' | 'and' | 'or' | 'not'\ntype scalar   = number | string | boolean | null\ntype name     = string\n```\n\n----------------------------------------\n\nTITLE: Command Output for Sidecar Build Task\nDESCRIPTION: The build log showcases executed tasks for the mtx-sidecar, detailing the created output files that include precompiled models and resources for deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_5\n\nLANGUAGE: log\nCODE:\n```\n[cds] - the following build tasks will be executed\n  {\"for\":\"mtx-sidecar\", \"src\":\"mtx/sidecar\", \"options\":... }\n[cds] - done > wrote output to:\n   gen/mtx/sidecar/_main/fts/isbn/csn.json\n   gen/mtx/sidecar/_main/fts/reviews/csn.json\n   gen/mtx/sidecar/_main/resources.tgz\n   gen/mtx/sidecar/_main/srv/_i18n/i18n.json\n   gen/mtx/sidecar/_main/srv/csn.json\n   gen/mtx/sidecar/package.json\n   gen/mtx/sidecar/srv/_i18n/i18n.json\n   gen/mtx/sidecar/srv/csn.json\n[cds] - build completed in 687 ms\n```\n\n----------------------------------------\n\nTITLE: Installing Axios for HTTP Testing\nDESCRIPTION: Command to install the Axios HTTP client as a dependency for testing HTTP endpoints.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm add -D axios\n```\n\n----------------------------------------\n\nTITLE: Assigning Transaction Object to cds.context\nDESCRIPTION: Demonstrates how assigning a transaction object to cds.context acts as a shortcut for setting the transaction's context.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/events.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet tx = cds.context = cds.tx({ ... })\ncds.context === tx.context  //> true\n```\n\n----------------------------------------\n\nTITLE: Subscribing to SaaS Application\nDESCRIPTION: Command to subscribe a tenant t1 to the local SaaS application using mock user yves\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncds subscribe t1 --to http://localhost:4005 -u yves:\n```\n\n----------------------------------------\n\nTITLE: Using CDS REPL with Specific CDS Feature\nDESCRIPTION: Launches the CDS REPL with the cds.ql query language module loaded into the global context.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-repl.out.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncds repl --use cds.ql\n```\n\n----------------------------------------\n\nTITLE: Generated Model Interface for Authors in Java\nDESCRIPTION: Shows the generated Java interface for the Authors entity, representing the structure of the CDS model. It includes methods for accessing properties and associations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_27\n\nLANGUAGE: java\nCODE:\n```\n@CdsName(\"my.bookshop.Authors\")\npublic interface Authors_ extends StructuredType<Authors_> {\n  ElementRef<Integer> ID();\n  ElementRef<String> name();\n  Books_ books();\n  Books_ books(Function<Books_, Predicate> filter);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing VitePress Data with Vue.js in CAP Java Documentation\nDESCRIPTION: This code imports data from VitePress and accesses theme configuration to retrieve version information for CAP Java components. It's used within the documentation page to dynamically display version numbers in badges and links.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useData } from 'vitepress'\nconst { theme } = useData()\nconst { versions } = theme.value.capire\n\nimport { data as pages } from './index.data.ts'\n```\n\n----------------------------------------\n\nTITLE: Manually Resolved SQL Migration Statements\nDESCRIPTION: This shows the manually resolved SQL migration statements after @sql.append annotations were removed. It undoes the previous persistent memory and fuzzy search settings.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\n== migration=3\nALTER TABLE E PERSISTENT MEMORY DEFAULT;\nALTER TABLE E ALTER (text NVARCHAR(100) FUZZY SEARCH INDEX OFF);\n```\n\n----------------------------------------\n\nTITLE: Using LinkedCSN.each() Method in JavaScript\nDESCRIPTION: Example of using the each() method to iterate over entity definitions in a linked model.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet m = cds.reflect (csn)\nfor (let d of m.each('entity')) {\n  console.log (d.kind, d.name)\n}\n```\n\n----------------------------------------\n\nTITLE: MTA Extension for Landscape-Specific Configuration\nDESCRIPTION: YAML configuration for an MTA extension descriptor to define environment variables specific to different landscapes.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\n_schema-version: \"3.1\"\nextends: my-app\nID: my-app.id\nmodules:\n  - name: srv\n    properties:\n      CDS_MULTITENANCY_APPUI_TENANTSEPARATOR: \"-\"\n  - name: app\n    properties:\n      TENANT_HOST_PATTERN: ^(.*)-${default-uri}\n```\n\n----------------------------------------\n\nTITLE: Generating CAP Java Project with Maven Archetype (Windows CMD)\nDESCRIPTION: Command to create a new CAP Java project from scratch using the CDS Maven archetype on Windows Command Prompt. The command specifies the archetype artifact ID, group ID, and uses the latest released version.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/building.md#2025-04-18_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nmvn archetype:generate -DarchetypeArtifactId=cds-services-archetype -DarchetypeGroupId=com.sap.cds -DarchetypeVersion=RELEASE\n```\n\n----------------------------------------\n\nTITLE: Opening the CAP project in Visual Studio Code\nDESCRIPTION: Command to open the newly created bookshop project in VS Code editor. This assumes the 'code' command is available in your terminal.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/index.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncode bookshop\n```\n\n----------------------------------------\n\nTITLE: Exporting CAP Service to EDMX - Mac/Linux\nDESCRIPTION: Command to compile and export a CAP service definition to EDMX format on Mac/Linux systems, specifying the OrdersService and OData V2 format.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds compile srv -s OrdersService -2 edmx > OrdersService.edmx\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n for H2 in package.json\nDESCRIPTION: Configuration for generating additional views for different languages in H2. This JSON snippet should be placed in the 'cds' block of package.json.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"i18n\": { \"for_sql\": [\"en\", ...] }\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared Database MTA Project\nDESCRIPTION: Shell command for adding MTA configuration to a shared database project. This is used as part of the separate microservices deployment approach.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\ncds add mta\n```\n\n----------------------------------------\n\nTITLE: Adding Cloud SDK Connectivity Dependency for Apache HttpClient 4\nDESCRIPTION: Maven dependency to add when upgrading a CAP Java application to use Cloud SDK 5 with the Apache HttpClient 4 connectivity module.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n\t<groupId>com.sap.cloud.sdk.cloudplatform</groupId>\n\t<artifactId>connectivity-apache-httpclient4</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Sidecar Directory Structure Post-Build\nDESCRIPTION: Representation of the directory structure after building the sidecar, displaying key directories and generated files that facilitate further deployments.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\nbookshop/\n├─ _i18n/\n├─ app/\n├─ db/\n├─ fts/\n├─ gen/mtx/sidecar/\n│   ├─ _main/\n│   │   ├── fts/\n│   │   │   ├── isbn/\n│   │   │   │   └── csn.json\n│   │   │   └── reviews/\n│   │   │       └── csn.json\n│   │   ├── srv/\n│   │   │   ├── _i18n\n│   │   │   └── csn.json\n│   │   └── resources.tgz\n│   └─ package.json\n├─ mtx/sidecar/\n├─ ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Service with Shared Identity\nDESCRIPTION: YAML configuration for setting up a Remote Service using shared XSUAA or IAS service instance.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    OtherCapService:\n      binding:\n        name: shared-xsuaa\n        options:\n          url: https://url-of-the-second-cap-application\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Table for Countries Code List\nDESCRIPTION: SQL statement to create a table for the 'Countries' code list with columns for name, description, and code.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE sap_common_Countries (\n  name NVARCHAR(255),\n  descr NVARCHAR(1000),\n  code NVARCHAR(3),\n  PRIMARY KEY(code)\n);\n```\n\n----------------------------------------\n\nTITLE: Sample CQL Query with Path Expression\nDESCRIPTION: Shows a CQL SELECT query with path expressions and filtering on entity keys.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n--CQL query\nSELECT from Orders[OrderNo = '42']:items[ID = 1]\n```\n\n----------------------------------------\n\nTITLE: Example Migration Table Manual Resolution Comments\nDESCRIPTION: Sample output showing manual resolution requirements for incompatible schema changes, specifically for field modifications that could cause data loss. Shows commented ALTER TABLE statements that require manual review.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_15\n\nLANGUAGE: txt\nCODE:\n```\n>>>> Manual resolution required - DROP statements causing data loss are disabled\n>>>> by default.\n>>>> You may either:\n>>>>   uncomment statements to allow incompatible changes, or\n>>>>   refactor statements, e.g. replace DROP/ADD by single RENAME statement\n>>>> After manual resolution delete all lines starting with >>>>>\n-- ALTER TABLE my_bookshop_Books DROP (title);\n-- ALTER TABLE my_bookshop_Books ADD (title NVARCHAR(50));\n```\n\n----------------------------------------\n\nTITLE: Importing Data in Vue.js Component\nDESCRIPTION: This code imports data from an index file and sets it up for use in a Vue.js component. This import and setup is a fundamental step for using data within the component, enabling dynamic content rendering. The 'pages' variable is populated using data from 'index.data.ts', which serves as the data source.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/index.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { data as pages } from './index.data.ts'\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dev Dependencies\nDESCRIPTION: Shows two ways to install TypeScript type definitions for @sap/cds - using the typescript facet or manual npm installation.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncds add typescript\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @cap-js/cds-types\n```\n\n----------------------------------------\n\nTITLE: Generating Merged AsyncAPI Document\nDESCRIPTION: Command to generate a single AsyncAPI document for all services in the srv/ directory using the merged flag.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/asyncapi.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds compile srv --service all -o docs --to asyncapi --asyncapi:merged\n```\n\n----------------------------------------\n\nTITLE: Mapping Calculation View with Plain Names\nDESCRIPTION: Creates a mapping view for the calculation view that converts quoted names to plain ones.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nVIEW DATA_MODEL_BOOKSHOP_CALCBOOKS (in PARAM nvarchar(10)) AS SELECT\n  \"id\"                AS ID,\n  \"the.title\"         AS THE_TITLE,\n  \"calculated\"        AS CALCULATED\nFROM \"data.model.bookshop.CalcBooks\"(placeholder.\"$$Param$$\" => :PARAM)\n```\n\n----------------------------------------\n\nTITLE: Disabling Dashboard Authorization\nDESCRIPTION: YAML configuration to disable dashboard authorization for direct access.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/dashboard.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  dashboard:\n    authorization:\n      enabled: false\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: my-cap-app-srv\n    [...]\n    properties:\n      CDS_DASHBOARD_AUTHORIZATION_ENABLED: false\n```\n\n----------------------------------------\n\nTITLE: Sample Books Translations CSV\nDESCRIPTION: Example of localized translations data for Books entity\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_19\n\nLANGUAGE: csv\nCODE:\n```\nID;locale;title;descr\n201;de;Sturmhöhe;Sturmhöhe (Originaltitel: Wuthering Heights) ist der einzige Roman...\n201;fr;Les Hauts de Hurlevent;Les Hauts de Hurlevent (titre original : Wuthering Heights)...\n207;de;Jane Eyre;Jane Eyre. Eine Autobiographie (Originaltitel: Jane Eyre. An Autobiography)...\n252;de;Eleonora;Eleonora ist eine Erzählung von Edgar Allan Poe. Sie wurde 1841...\n...\n```\n\n----------------------------------------\n\nTITLE: Using CDS_CONFIG with JSON File\nDESCRIPTION: Example of using the CDS_CONFIG environment variable with a JSON file to configure a CAP application.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nCDS_CONFIG=./my-cdsrc.json cds serve\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved Credentials in CAP\nDESCRIPTION: Demonstrates how to resolve and display credentials for a bound service using the 'cds env' command with the 'hybrid' profile.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncds env get requires.db.credentials --profile hybrid --resolve-bindings\n```\n\n----------------------------------------\n\nTITLE: Basic Database Read Transaction Example\nDESCRIPTION: Demonstrates how a simple database read operation is automatically wrapped in a transaction by the CAP framework\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.read('Books')\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- ACQUIRE connection from pool\nCONNECT; -- if no pooled one\nBEGIN;\nSELECT * from Books;\nCOMMIT;\n-- RELEASE connection to pool\n```\n\n----------------------------------------\n\nTITLE: Displaying SQLite Database Configuration in CAP.js\nDESCRIPTION: Shows the database configuration output including the SQLite implementation, in-memory database URL, and database kind specification. This represents the environment configuration for a CAP.js application using SQLite as the database.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-env-requires-db.out.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  impl: '@cap-js/sqlite',\n  credentials: { url: ':memory:' },\n  kind: 'sqlite'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Attachments to Entity\nDESCRIPTION: Shows how to add attachment capabilities to an entity using the Attachments plugin.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_28\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo { //...\n   attachments : Composition of many Attachments;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CDS Model Dependencies in package.json\nDESCRIPTION: JSON snippet demonstrating how to add dependencies for reusable CDS models in the package.json file of the new CAP Java project.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n...\n\"dependencies\": {\n\t\"@sap/cds\": \"^3.0.0\",\n\t...  // add your CDS model reuse dependencies here\n},\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Components for Feature Status Icons\nDESCRIPTION: Defines Vue components to render status icons for different feature availability states. Each component is a function that returns a span or i element with specific classes and titles.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/features.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst X =  () => h('span', { class: 'ga',      title: 'Available' },              [ '✓'        ])\nconst Na = () => h('i',    { class: 'na',      title: 'not applicable' },         [ 'n/a'      ])\nconst D =  () => h('i',    { class: 'prog',    title: 'in progress'  },           [ 'in prog.' ])\nconst O =  () => h('i',    { class: 'plan',    title: 'planned'  },               [ 'planned'  ])\nconst C =  () => h('i',    { class: 'contrib', title: 'contributions welcome'  }, [ 'contrib?' ])\nconst Ac = () => h('i',    { class: 'contrib', title: 'active contributions'  },  [ 'contrib'  ])\n```\n\n----------------------------------------\n\nTITLE: Enabling Draft Support in CDS\nDESCRIPTION: Example showing how to enable draft support for an entity using @odata.draft.enabled annotation.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nannotate AdminService.Books with @odata.draft.enabled;\n```\n\n----------------------------------------\n\nTITLE: Adding Work Zone Support\nDESCRIPTION: Command to add SAP Build Work Zone configuration for single-tenant applications\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncds add workzone\n```\n\n----------------------------------------\n\nTITLE: Initializing the Express Application in CDS\nDESCRIPTION: Demonstrates how the Express.js application object is initialized during bootstrapping and stored in cds.app.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_14\n\nLANGUAGE: js\nCODE:\n```\ncds.app = require('express')()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Profile via Environment Variable (Windows CMD)\nDESCRIPTION: Shows how to set a custom profile using an environment variable in Windows Command Prompt.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_22\n\nLANGUAGE: cmd\nCODE:\n```\nset CDS_ENV=my-custom-profile\ncds run\n```\n\n----------------------------------------\n\nTITLE: Creating Destination Service Instance and Key\nDESCRIPTION: Shell commands to create a Destination service instance and service key in Cloud Foundry for local access to remote services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_51\n\nLANGUAGE: sh\nCODE:\n```\ncf create-service destination lite cpapp-destination\ncf create-service-key cpapp-destination cpapp-destination-key\n```\n\n----------------------------------------\n\nTITLE: Filtering Handler Stub Generation\nDESCRIPTION: Commands for generating handler stubs filtered to specific actions/functions or entities.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncds add handler --filter submitOrder\ncds add handler --filter Books\n```\n\n----------------------------------------\n\nTITLE: Vue Index List Component Usage\nDESCRIPTION: Vue component that renders a list of pages using the imported page data.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/index.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<IndexList :pages='pages' />\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Package for Node.js\nDESCRIPTION: Command to install the @cap-js/sqlite package as a development dependency\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @cap-js/sqlite -D\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Books with Expanded Reviews\nDESCRIPTION: Demonstrates an HTTP GET request to retrieve book information with expanded reviews, showcasing the ability to join data across mocked services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:4004/browse/Books/201?\n&$expand=reviews\n&$select=ID,title,rating\n```\n\n----------------------------------------\n\nTITLE: Importing Page Data in Vue Component\nDESCRIPTION: This Vue.js script setup imports data from an index file, likely containing information about API publishing pages.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/index.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { data as pages } from './index.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing CDS Lint Features\nDESCRIPTION: Command to install ESLint, CDS ESLint plugin, and add ESLint configuration to the project\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/index.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds add lint\n```\n\n----------------------------------------\n\nTITLE: Service Constructor Definition\nDESCRIPTION: The constructor signature for cds.Service, showing required parameters for name, model, and options.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction constructor (\n  name    : string,\n  model   : CSN,\n  options : { kind: string, ... }\n)\n```\n\n----------------------------------------\n\nTITLE: Function Call Syntax in JavaScript\nDESCRIPTION: Specifies the structure for function calls including named and positional arguments.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cxn.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunc = { func:string, args: _positional | _named, xpr:_xpr }\n_positional = [ ...expr ]\n_named = { ... <name>:expr }\n```\n\n----------------------------------------\n\nTITLE: Configuring App Router for MTX Sidecar in CAP\nDESCRIPTION: JSON configuration for App Router to allow unauthenticated access to the MTX Sidecar API in a CAP application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routes\": [\n    {\n      \"source\": \"^/-/cds/.*\",\n      \"destination\": \"mtx-api\",\n      \"authenticationType\": \"none\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Function Examples in CDS Annotations\nDESCRIPTION: Demonstrates various function calls within CDS annotations, including string concatenation, math functions, type casting, and geo functions.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\n@Some.Func1: ( concat(a, b, c) )\n@Some.Func2: ( round(aNumber) )\n@Some.Func3: ( $Cast(aValue, $Type('Edm.Decimal', $Precision(38), $Scale(19)) ) )\n@Some.Func4: ( $IsOf(aValue, $Type('Edm.Decimal', $Precision(38), $Scale(19)) ) )\n@Some.Func5: ( ![geo.distance](a, b) )\n@Some.Func6: ( fillUriTemplate(a, b) )\n```\n\n----------------------------------------\n\nTITLE: Server Initialization Methods\nDESCRIPTION: Different ways to initialize and run a CAP test server with various configuration options.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ncds.test(...)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n(new cds.test.Test).run(...)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncds.test('serve','srv/cat-service.cds')\ncds.test('serve','CatalogService')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncds.test('serve','srv/cat-service.cds').in('/cap/samples/bookshop')\n```\n\n----------------------------------------\n\nTITLE: Creating a New CAP Java Project with Maven\nDESCRIPTION: Command to generate a new CAP Java project using the Maven archetype. This creates the initial project structure for migrating to the new CAP Java SDK.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nmvn archetype:generate -DarchetypeArtifactId=cds-services-archetype -DarchetypeGroupId=com.sap.cds -DarchetypeVersion=RELEASE\n```\n\n----------------------------------------\n\nTITLE: Defining ValueList Annotation in EDMX\nDESCRIPTION: Example showing how ValueList annotations are represented in OData EDMX format for currency code mapping with display values.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<Annotations Target=\"AdminService.Books/currency_code\">\n  <Annotation Term=\"Common.ValueList\">\n    <Record Type=\"Common.ValueListType\">\n      <PropertyValue Property=\"CollectionPath\" String=\"Currencies\"/>\n      <PropertyValue Property=\"Label\" String=\"Currency\"/>\n      <PropertyValue Property=\"Parameters\">\n        <Collection>\n          <Record Type=\"Common.ValueListParameterInOut\">\n            <PropertyValue Property=\"ValueListProperty\" String=\"code\"/>\n            <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"currency_code\"/>\n          </Record>\n          <Record Type=\"Common.ValueListParameterDisplayOnly\">\n            <PropertyValue Property=\"ValueListProperty\" String=\"name\"/>\n          </Record>\n        </Collection>\n      </PropertyValue>\n    </Record>\n  </Annotation>\n</Annotation>\n```\n\n----------------------------------------\n\nTITLE: Custom DataSource Configuration\nDESCRIPTION: Java configuration class to create a custom datasource bean using SQLite.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DataSourceConfig {\n\n    @Bean\n    public DataSource customDataSource() {\n        return DataSourceBuilder.create()\n            .url(\"jdbc:sqlite:sqlite.db\")\n            .build();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Deployed Application Routes\nDESCRIPTION: Shell command and output showing how to check the deployed applications and their routes in Cloud Foundry. This helps identify the URLs for accessing the deployed applications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ncf apps # [!code focus]\n\nname                         requested state   processes   routes\nbookstore-srv                started           web:1/1     my-capire-bookstore-srv.cfapps.us10-001.hana.ondemand.com\norders-srv                   started           web:1/1     my-capire-orders-srv.cfapps.us10-001.hana.ondemand.com\nreviews-srv                  started           web:1/1     my-capire-reviews-srv.cfapps.us10-001.hana.ondemand.com\nsamples                      started           web:1/1     my-capire-samples.cfapps.us10-001.hana.ondemand.com # [!code focus]\nsamples-db-deployer          stopped           web:0/1\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Project (Shell)\nDESCRIPTION: Shell commands to create a new CAP project for extensions and open it in Visual Studio Code.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\ncds init orders-ext\ncode orders-ext # open in VS Code\n```\n\n----------------------------------------\n\nTITLE: Adding Data Files with Sample Records\nDESCRIPTION: Command to create data files with actual sample data, generating 2 records for each entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncds add data --records 2\n```\n\n----------------------------------------\n\nTITLE: Adding Local Multitenancy Profile\nDESCRIPTION: Command to add a local multitenancy profile for testing purposes.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncds add multitenancy --for local-multitenancy\n```\n\n----------------------------------------\n\nTITLE: UUID to SQL Mapping\nDESCRIPTION: Default mapping configuration for UUID fields in SQL databases using nvarchar(36) to support various UUID representations including those with hyphens.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nUUID -> nvarchar(36)\n```\n\n----------------------------------------\n\nTITLE: Running CDS Watch for Local Development\nDESCRIPTION: Shell command to execute the 'watch' goal of the cds-maven-plugin, which builds and starts the application while monitoring for changes in the CDS model to automate the development workflow.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/running.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn cds:watch\n```\n\n----------------------------------------\n\nTITLE: Reading Original Texts in SQL\nDESCRIPTION: SQL query to read original texts from the Books entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ID, title, descr from Books\n```\n\n----------------------------------------\n\nTITLE: Filtering HTTP Request Templates by Service Name\nDESCRIPTION: Command for generating HTTP request templates filtered to a specific service.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncds add http --filter CatalogService\n```\n\n----------------------------------------\n\nTITLE: CAP Project Rule Definitions\nDESCRIPTION: List of rule definitions for CAP JavaScript projects encompassing authentication, naming conventions, SQL best practices, and data modeling guidelines.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/_menu.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [assoc2many-ambiguous-key](assoc2many-ambiguous-key)\n# [auth-no-empty-restrictions](auth-no-empty-restrictions)\n# [auth-restrict-grant-service](auth-restrict-grant-service)\n# [auth-use-requires](auth-use-requires)\n# [auth-valid-restrict-grant](auth-valid-restrict-grant)\n# [auth-valid-restrict-keys](auth-valid-restrict-keys)\n# [auth-valid-restrict-to](auth-valid-restrict-to)\n# [auth-valid-restrict-where](auth-valid-restrict-where)\n# [extension-restrictions](extension-restrictions)\n# [latest-cds-version](latest-cds-version)\n# [no-db-keywords](no-db-keywords)\n# [no-dollar-prefixed-names](no-dollar-prefixed-names)\n# [no-java-keywords](no-java-keywords)\n# [no-join-on-draft](no-join-on-draft)\n# [sql-cast-suggestion](sql-cast-suggestion)\n# [sql-null-comparison](sql-null-comparison)\n# [start-elements-lowercase](start-elements-lowercase)\n# [start-entities-uppercase](start-entities-uppercase)\n# [valid-csv-header](valid-csv-header)\n```\n\n----------------------------------------\n\nTITLE: Using @title Annotation in CDS\nDESCRIPTION: Example showing the recommended usage of @title annotation for Books entity in a protocol-agnostic data model.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/fiori.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\nannotate my.Books with { //...\n   title @title: 'Book Title';\n   author @title: 'Author ID';\n}\n```\n\n----------------------------------------\n\nTITLE: Decimal Type Casting Example\nDESCRIPTION: Demonstrates type casting from String to Edm.Decimal, showing potential compatibility issues.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo {\n  // ...\n  @odata: {Type: 'Edm.Decimal', Scale: 'floating' }\n  str: String(17) default '17.4';\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Property Name=\"str\" Type=\"Edm.Decimal\" Scale=\"floating\" DefaultValue=\"17.4\"/>\n```\n\n----------------------------------------\n\nTITLE: Orders Test Data CSV\nDESCRIPTION: Sample CSV data for testing extended Orders entity with new priority and sales region fields\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_15\n\nLANGUAGE: csv\nCODE:\n```\nID;createdAt;buyer;OrderNo;currency_code;x_priority;x_salesRegion_code\n7e2f2640-6866-4dcf-8f4d-3027aa831cad;2019-01-31;john.doe@test.com;1;EUR;high;EMEA\n64e718c9-ff99-47f1-8ca3-950c850777d4;2019-01-30;jane.doe@test.com;2;EUR;low;APJ\n```\n\n----------------------------------------\n\nTITLE: Configuring Actuator Endpoint\nDESCRIPTION: YAML configuration to disable specific actuator endpoints.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nmanagement.endpoint.flyway.enabled: false\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Event Handlers\nDESCRIPTION: Shows how to register handlers for CDS lifecycle events during server bootstrapping\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.on('compile.for.runtime', ...)\ncds.on('compile.to.dbx', ...)\ncds.on('compile.to.edmx', ...)\n```\n\n----------------------------------------\n\nTITLE: Custom Field Formatting Required by SAP Application Logging Service in JavaScript\nDESCRIPTION: The required JSON structure for custom field content when logging to SAP Application Logging Service. This shows how key-value pairs must be formatted with indexes for proper display in the logging service.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n{\n  ...,\n  '#cf': {\n    strings: [\n      { k: '<key>', v: '<value>', i: <index> },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Handler Stubs for Node.js\nDESCRIPTION: Command for generating handler stub files for actions, functions, and service entities in a Node.js CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncds add handler\n```\n\n----------------------------------------\n\nTITLE: Running a CAP.js Service\nDESCRIPTION: Executes the CAP.js service defined in the services.cds file, which starts a server that listens on port 4004.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncds run\n```\n\n----------------------------------------\n\nTITLE: ModelProviderService Configuration\nDESCRIPTION: JSON configuration example for ModelProviderService showing root path configuration option.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"cds.xt.ModelProviderService\": {\n  \"root\": \"../../custom/path\"\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Service Instance Binding Configuration\nDESCRIPTION: Illustrates the structure of .cdsrc-private.json after binding to a shared service instance in Cloud Foundry, including the org and space where the service is shared from.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"[hybrid]\": {\n      \"redis\": {\n        \"binding\": {\n          \"type\": \"cf\",\n          \"apiEndpoint\": \"https://api.sap.hana.ondemand.com\",\n          \"org\": \"shared-from-cf-org\",\n          \"space\": \"shared-from-cf-space\",\n          \"instance\": \"redis-cache\",\n          \"key\": \"redis-cache-key\",\n          \"resolved\": false\n        },\n        \"kind\": \"redis-messaging\",\n        \"vcap\": {\n          \"name\": \"messaging\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Columns to Orders CSV Data\nDESCRIPTION: Example of adding new extension columns (x_priority and x_salesRegion_code) to existing Orders data file. Shows how to include extension fields alongside the primary key ID when using SQLite database.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_25\n\nLANGUAGE: csv\nCODE:\n```\nID;x_priority;x_salesRegion_code\n7e2f2640-6866-4dcf-8f4d-3027aa831cad;high;EMEA\n64e718c9-ff99-47f1-8ca3-950c850777d4;low;APJ\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Shell\nDESCRIPTION: Command to check the installed version of Node.js. This is important to ensure compatibility with CAP requirements.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckDataVisitor Class for CQN Data Filtering in Java\nDESCRIPTION: This snippet defines the CheckDataVisitor class that implements CqnVisitor. It stores the data to be checked and uses a stack to manage intermediate results during the depth-first traversal of the filter expression.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nclass CheckDataVisitor implements CqnVisitor {\n    private final Map<String, Object> data;\n    private final Deque<Object> stack = new ArrayDeque<>();\n\n    CheckDataVisitor(Map<String, Object> data) {\n        this.data = data;\n    }\n\n    boolean matches() {\n        return (Boolean) stack.pop();\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Local Path Output When Running from Within Project Directory\nDESCRIPTION: Shows how the local() function avoids unnecessary prefixes when running commands from within the project directory.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_6\n\nLANGUAGE: log\nCODE:\n```\n[bookshop] cds run\n[cds] - loaded model from 5 file(s):\n\n  srv/user-service.cds\n  srv/cat-service.cds\n  srv/admin-service.cds\n  db/schema.cds\n...\n```\n\n----------------------------------------\n\nTITLE: Deployment Build Steps\nDESCRIPTION: Sample commands showing the dependency installation process during deployment\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n# Installing app dependencies, e.g.\nnpm i app/browse\nnpm i app/admin-books\n\n# If project is monorepo\nln -sf ../package-lock.json\n\n# If project is multitenant\nnpm i --package-lock-only mtx/sidecar\n\n# If package-lock.json doesn't exist\nnpm i --package-lock-only\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (Shell)\nDESCRIPTION: npm command to install project dependencies after adding new packages.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: SaaS Provisioning Service Upgrade Configuration\nDESCRIPTION: JSON payload for configuring tenant upgrades with specific HDI deployment options.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tenants\": [\"*\"],\n  \"_\": {\n      \"hdi\": {\n        \"deploy\": {\n          \"undeploy\": [\n            \"src/gen/data/my.bookshop-Books.hdbtabledata\"\n          ],\n          \"path_parameter\": {\n            \"src/gen/data/my.bookshop-Books.hdbtabledata:skip_data_deletion\": \"true\"\n          }\n        }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Activation Request\nDESCRIPTION: Example of model activation request body showing extension file structure and content format.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"tenant\": \"tenant-extended\",\n\"extension\": [\n  [\n  \"db/ext-entities.cds\",\n  \"using my.bookshop from '_base/db/data-model'; \\n extend entity bookshop.Books with { \\n ISBN: String; \\n rating: Integer \\n  }\"\n  ],\n  [\n  \"db/new-entities.cds\",\n  \"namespace com.acme.ext; \\n entity Categories { \\n key ID: String; \\n description: String; \\n }\"\n  ],\n  [\n  \"srv/ext-service.cds\",\n  \"using CatalogService from '_base/srv/cat-service'; \\n using com.acme.ext from '../db/new-entities'; \\n extend service CatalogService with { \\n  @insertonly entity Categories as projection on ext.Categories; \\n }\"\n  ]\n  ],\n\"undeployExtension\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Combined Pool Configuration - Properties\nDESCRIPTION: Configuration property to enable the combined pool approach for tenant database connections. This setting allows sharing a single connection pool across all tenants.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/multitenancy.md#2025-04-18_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ncds.multiTenancy.datasource.combinePools.enabled = true\n```\n\n----------------------------------------\n\nTITLE: Configuring BAS Run Configuration for Hybrid Profile\nDESCRIPTION: JSON configuration for Business Application Studio run configuration to use the hybrid profile with cds watch.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n\"args\": [\n   \"cds\",\n   \"watch\",\n   \"--profile\",\n   \"hybrid\"\n],\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Functions in Where Clauses\nDESCRIPTION: Shows how to use CQL.booleanFunc to construct a function that returns a predicate for use in a where clause, specifically for fuzzy search.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_95\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(\"bookshop.Books\")\n   .where(e -> booleanFunc(\"CONTAINS\",\n            Arrays.asList(CQL.get(Books.TITLE).asRef(), val(\"Wuthering\"), plain(\"FUZZY(0.5)\"))));\n```\n\n----------------------------------------\n\nTITLE: Customizing Build Tasks for TypeScript in package.json\nDESCRIPTION: Shows how to include the typescript build task in a custom build configuration for a CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-typer.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"tasks\": [\n  { \"for\": \"nodejs\" },\n  { \"for\": \"typescript\" },\n  …\n]\n```\n\n----------------------------------------\n\nTITLE: Destructuring CDS Query Functions\nDESCRIPTION: JavaScript code to destructure and access various query-related functions from the CDS QL module.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar { expr, ref, columns, /* ...and all other */ } = cds.ql\n```\n\n----------------------------------------\n\nTITLE: Running Mocked External Service in a Separate Process\nDESCRIPTION: Command to run only the mocked external service in a separate process for more realistic testing.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncds mock API_BUSINESS_PARTNER\n```\n\n----------------------------------------\n\nTITLE: Adding XSUAA Dependency for Authentication in XML\nDESCRIPTION: Shows how to add the XSUAA dependency to the pom.xml file for enabling authentication and authorization with JWT tokens issued by XSUAA on SAP BTP.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-feature-xsuaa</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Data with cds add\nDESCRIPTION: This shell script command helps generate CSV files used for initial data population in CAP databases. It requires the CAP CLI installed and a CAP project structure. By running 'cds add data', empty CSV files with header lines can be created, and sample data can be added with the --records option.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/in-a-nutshell.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncds add data\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds add data --records 10\n```\n\n----------------------------------------\n\nTITLE: Executing CDS Compile Command in Bash\nDESCRIPTION: Shows the basic syntax for running the 'cds compile' command with models and options.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-compile.out.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncds compile <models> [<options>]\n```\n\n----------------------------------------\n\nTITLE: Configuration Modified Event Logging in JavaScript\nDESCRIPTION: Example of logging a configuration modification event.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait audit.log ('ConfigurationModified', {\n  object: {\n    type: 'sap.common.Currencies',\n    id: { ID: 'f79ba248-c348-4962-9fef-680c3b88807c' }\n  },\n  attributes: [\n    { name: 'symbol', old: 'EUR', new: '€' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Running the CDS formatter command\nDESCRIPTION: Example of running the CDS formatter command after installation. This can be used in pre-commit hooks or CI/CD pipelines.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nformat-cds\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Endpoints in CDS\nDESCRIPTION: CDS configuration for serving a service on different paths for different protocols using endpoint annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_19\n\nLANGUAGE: cds\nCODE:\n```\n@endpoints: [\n  {path : 'browse', protocol: 'odata-v4'},\n  {path : 'list', protocol: 'odata-v2'}\n]\nservice CatalogService {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Text Arrangement Shortcut in Common Annotations\nDESCRIPTION: Shows the shorthand notation for specifying TextArrangement alongside Text annotation within a Common annotation structure.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_20\n\nLANGUAGE: cds\nCODE:\n```\n...\n@Common: {\n  Text: Text, TextArrangement: #TextOnly\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Boot Actuator Dependency\nDESCRIPTION: Maven dependency configuration to add Spring Boot Actuator support to the application.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Sales Region Test Data CSV\nDESCRIPTION: Sample CSV data for the new SalesRegion entity with region codes and descriptions\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_16\n\nLANGUAGE: csv\nCODE:\n```\ncode;name;descr\nAMER;Americas;North, Central and South America\nEMEA;Europe, the Middle East and Africa;Europe, the Middle East and Africa\nAPJ;Asia Pacific and Japan;Asia Pacific and Japan\n```\n\n----------------------------------------\n\nTITLE: Initializing Bookshop Sample Application\nDESCRIPTION: Commands to create a new bookshop sample application using CAP for both Node.js and Java.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds init bookshop --add sample\ncd bookshop\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds init bookshop --java --add tiny-sample\ncd bookshop\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Profile via Environment Variable (Windows PowerShell)\nDESCRIPTION: Illustrates setting a custom profile using an environment variable in Windows PowerShell.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_23\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:CDS_ENV=my-custom-profile\ncds run\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies Globally\nDESCRIPTION: Command to install required TypeScript packages globally including typescript, ts-node and tsx.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/typescript.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g typescript ts-node tsx\n```\n\n----------------------------------------\n\nTITLE: CSN Model Example in JSON\nDESCRIPTION: Demonstrates the structure of a CSN model represented in JSON format, including requires, definitions, and extensions.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": [ \"@sap/cds/common\", \"./db/schema\" ],\n  \"definitions\": {\n    \"some.type\": { \"type\": \"cds.String\", \"length\": 11 },\n    \"another.type\": { \"type\": \"some.type\" },\n    \"structured.type\": { \"elements\": {\n      \"foo\": { \"type\": \"cds.Integer\" },\n      \"bar\": { \"type\": \"cds.String\" }\n    }}\n  },\n  \"extensions\": [\n    { \"extend\":\"Foo\", \"elements\":{\n      \"bar\": { \"type\": \"cds.String\" }\n    }}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Database Pool Configuration in JSON\nDESCRIPTION: Default configuration for database connection pooling in CAP.js, controlling connection management parameters like timeout values, pool sizes, and connection testing. This configuration doesn't apply to @cap-js database implementations.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/databases.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"acquireTimeoutMillis\": <if (NODE_ENV='production') 1000 else 10000>,\n  \"evictionRunIntervalMillis\": <2 * (idleTimeoutMillis || softIdleTimeoutMillis || 30000)>,\n  \"min\": 0,\n  \"max\": 100,\n  \"numTestsPerEvictionRun\": <(max - min) / 3>,\n  \"softIdleTimeoutMillis\": 30000,\n  \"idleTimeoutMillis\": 30000,\n  \"testOnBorrow\": true,\n  \"fifo\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Using ancestors and descendants Transformations in OData HTTP Request\nDESCRIPTION: This example shows how to combine the descendants and ancestors transformations to find nodes in a hierarchical structure. It first finds all descendants of 'US' and then filters for ancestors that contain 'New York' in their name.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_31\n\nLANGUAGE: http\nCODE:\n```\nGET SalesOrganizations?$apply=\n    descendants(..., ID, filter(ID eq 'US'), keep start)\n   /ancestors(..., ID, filter(contains(Name, 'New York')), keep start)\n```\n\n----------------------------------------\n\nTITLE: Database Configuration in YAML\nDESCRIPTION: YAML configuration for setting default database ID in deployment extension file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n - name: bookshop-srv\n   type: nodejs\n   path: gen/srv\n   properties:\n     CDS_MTX_PROVISIONING_CONTAINER: { \"provisioning_parameters\": { \"database_id\": \"<DB ID>\" } }\n\n```\n\n----------------------------------------\n\nTITLE: Injecting CdsModel in Spring\nDESCRIPTION: Shows how to inject the CdsModel object in a Spring-based CAP Java application.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nCdsModel model;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using IndexList component in Vue\nDESCRIPTION: This snippet imports the `IndexList` component and its data within a Vue setup block. It then uses the component, passing the imported `pages` data as a prop.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/index.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n\"<script setup>\\nimport { data as pages } from './index.data.ts'\\n</script>\\n\\n<br>\\n<IndexList :pages='pages' />\"\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Build Plugin\nDESCRIPTION: This snippet shows how to handle errors and push messages in a build plugin using the pushMessage method. It demonstrates pushing info and warning messages.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/custom-builds.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Plugin } = cds.build\nconst { INFO, WARNING } = Plugin\n\nthis.pushMessage('Info message', INFO);\nthis.pushMessage('Warning message', WARNING);\n```\n\n----------------------------------------\n\nTITLE: Extracting All Filter Values in Java\nDESCRIPTION: Retrieves all filter values (including non-key values) from the target entity using the targetValues method.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> filterValues = result.targetValues();\n```\n\n----------------------------------------\n\nTITLE: Installing CDS language server globally\nDESCRIPTION: Command to install the CDS language server globally via npm, which enables the use of the formatter command line interface.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g @sap/cds-lsp\n```\n\n----------------------------------------\n\nTITLE: Generated Type Definition for Inline Defined Type\nDESCRIPTION: This XML snippet illustrates the auto-generated type definition for an inline defined type in an OData service, ensuring that the types are properly represented in the service schema.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<edmx:Edmx Version=\"4.0\">\n  <edmx:DataServices>\n    <Schema Namespace=\"hr\">\n      <EntityContainer Name=\"EntityContainer\">\n        <EntitySet Name=\"Person\" EntityType=\"hr.Person\"/>\n      </EntityContainer>\n      <EntityType Name=\"Person\">\n        <Property Name=\"emails\" Type=\"Collection(hr.Person_emails)\" Nullable=\"false\"/>\n      </EntityType>\n      <ComplexType Name=\"Person_emails\">    <!-- generated -->\n        <Property Name=\"kind\" Type=\"Edm.String\" Nullable=\"false\"/>\n        <Property Name=\"address\" Type=\"Edm.String\"/>\n      </ComplexType>\n    </Schema>\n  </edmx:DataServices>\n</edmx:Edmx>\n```\n\n----------------------------------------\n\nTITLE: Configuration Modified Event Schema in CDS\nDESCRIPTION: CDS schema definition for logging configuration changes.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\nevent ConfigurationModified : LogEntry {\n  object     :      DataObject;\n  attributes : many Modification;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing cloud-cap-samples-java (Java)\nDESCRIPTION: Commands to clone the cloud-cap-samples-java repository and install dependencies for Java implementation.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/SAP-samples/cloud-cap-samples-java\ncd cloud-cap-samples-java\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Configuring Destinations for CAP Applications in mta.yaml\nDESCRIPTION: YAML configuration for setting up multiple destinations in the mta.yaml file. This snippet shows how to configure destinations for various API endpoints including orders-api, reviews-api, and bookstore-api.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  ...\n  - name: samples\n    type: approuter.nodejs\n    ....\n    requires:\n      - name: service-api # [!code --]\n        group: destinations  # [!code --]\n        properties:  # [!code --]\n          name: service-api  # [!code --]\n          url: ~{srv-url}  # [!code --]\n          forwardAuthToken: true  # [!code --]\n      - name: orders-api # [!code ++]\n        group: destinations  # [!code ++]\n        properties:  # [!code ++]\n          name: orders-api  # [!code ++]\n          url: ~{srv-url}  # [!code ++]\n          forwardAuthToken: true  # [!code ++]\n      - name: reviews-api  # [!code ++]\n        group: destinations  # [!code ++]\n        properties:  # [!code ++]\n          name: reviews-api  # [!code ++]\n          url: ~{srv-url}  # [!code ++]\n          forwardAuthToken: true  # [!code ++]\n      - name: bookstore-api  # [!code ++]\n        group: destinations  # [!code ++]\n        properties:  # [!code ++]\n          name: bookstore-api  # [!code ++]\n          url: ~{srv-url}  # [!code ++]\n          forwardAuthToken: true  # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Excluding SQL Dependencies in Maven\nDESCRIPTION: Maven configuration to exclude JDBC-related dependencies when building CAP Java application without SQL database.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-starter-spring-boot</artifactId>\n  <exclusions>\n    <exclusion>\n      <groupId>com.sap.cds</groupId>\n      <artifactId>cds-feature-jdbc</artifactId>\n    </exclusion>\n    <exclusion>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-jdbc</artifactId>\n    </exclusion>\n  </exclusions>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Inefficient Sorting with JOIN (Bad Practice)\nDESCRIPTION: This snippet shows an inefficient way of sorting by performing a JOIN first and then sorting. This approach can lead to performance issues, especially with large datasets.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_10\n\nLANGUAGE: cds\nCODE:\n```\nview SortedOrdersJoin as select\n    OrdersHeaders.ID        as Header_ID,\n    OrdersHeaders.OrderNo   as OrderNo,\n    OrdersHeaders.buyer     as buyer,\n    OrdersHeaders.currency  as currency,\n    OrdersItems.ID          as Item_ID,\n    OrdersItems.product     as product,\n    OrdersItems.quantity    as quantity,\n    OrdersItems.title       as title,\n    OrdersItems.price       as price\nfrom OrdersHeaders JOIN OrdersItems on OrdersHeaders.ID = OrdersItems.Header.ID\norder by title;\n```\n\n----------------------------------------\n\nTITLE: Displaying SQLite Database Configuration in CAP JS\nDESCRIPTION: Output from running the CAP JS command 'cds -e .env.requires.db' showing SQLite database configuration. The configuration includes the SQLite implementation, credentials with an in-memory database URL, and the database kind specification.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-eval-env-requires-db.out.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  impl: '@cap-js/sqlite',\n  credentials: { url: ':memory:' },\n  kind: 'sqlite'\n}\n```\n\n----------------------------------------\n\nTITLE: Using CDS REPL with Current Directory\nDESCRIPTION: Launches the CDS REPL using the current directory as the CAP project.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-repl.out.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncds repl --run .\n```\n\n----------------------------------------\n\nTITLE: Setting Windows Environment Variable for Cloud Foundry CLI\nDESCRIPTION: Command to set the HOMEDRIVE environment variable to resolve common Cloud Foundry CLI installation and execution issues on Windows systems.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nSET HOMEDRIVE=C:\n```\n\n----------------------------------------\n\nTITLE: Enabling Multitenancy in CAP Application\nDESCRIPTION: Command to add multitenancy support to a CAP application.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncds add multitenancy\n```\n\n----------------------------------------\n\nTITLE: Installing Reuse Packages with npm\nDESCRIPTION: Command to add reuse packages @capire/bookshop and @capire/common to the project using npm.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @capire/bookshop @capire/common\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent of CDS Infix Filter Query\nDESCRIPTION: This snippet demonstrates the SQL equivalent of the CDS infix filter query for English books using subqueries with IN operator.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW EnglishBooks AS SELECT * FROM Books\n-- for Association Books:author:\nWHERE Books.author_ID IN (SELECT ID from Authors as author\n  -- for Association Authors:country:\n  WHERE author.country_code IN (SELECT code from Countries as country\n    -- the actual filter condition:\n    WHERE country.code = 'GB';\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Request-based Transaction Creation in CAP JS\nDESCRIPTION: Shows the legacy approach (pre-CAP 5) for creating transactions from request objects, which is still supported but no longer recommended.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nthis.on('READ','Books', req => {\n  const tx = cds.tx(req)\n  return tx.read ('Books')\n})\n```\n\n----------------------------------------\n\nTITLE: Starting CAP Application with Hybrid Profile\nDESCRIPTION: Command to run the CAP application in watch mode with the hybrid profile for local authentication testing.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\ncds watch --profile hybrid\n```\n\n----------------------------------------\n\nTITLE: Representing Nested Expressions in CSN JSON\nDESCRIPTION: Example of how nested expressions are represented in the new CSN format, eliminating unnecessary parentheses.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n\"xpr\": [{\"ref\": [\"a\"]}, \"*\", {\"xpr\": [{\"ref\": [\"b\"]}, \"+\", {\"ref\": [\"c\"]} ]}]\n```\n\n----------------------------------------\n\nTITLE: Installing MTX Package Dependencies\nDESCRIPTION: Command to add the @sap/cds-mtxs package as a dependency to the project\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @sap/cds-mtxs\n```\n\n----------------------------------------\n\nTITLE: Filtering Current Validity in CAP CDS\nDESCRIPTION: Models a projection entity for use in pick lists that excludes outdated code entries. This snippet defines 'CountriesPickList' to filter entities by current date.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_22\n\nLANGUAGE: cds\nCODE:\n```\nentity CountriesPickList as projection on sap.common.Countries where validTo >= $now;\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Implementing Empty @requires Annotation in CDS Service\nDESCRIPTION: Example showing incorrect usage of @requires annotation with empty values, which creates a security risk by allowing unrestricted access to the service. The rule detects these empty restrictions.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/auth-no-empty-restrictions.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nservice AdminService @(requires: '') {\n  entity Books as projection on db.Books;\n}\n\nservice AdminService2 @(requires: []) {\n  entity Books as projection on db.Books;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CDS Query Language with Shortcut to Primary Database\nDESCRIPTION: Demonstrates how the global CDS query language statements implicitly use cds.db to execute queries against the primary database.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nlet books = await SELECT.from(Books) // is a shortcut for:\nlet books = await cds.db.run ( SELECT.from(Books) )\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Options\nDESCRIPTION: Example of defining custom options for a CDS Add plugin\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\noptions() {\n  return {\n    'out': {\n      type: 'string',\n      short: 'o',\n      help: 'The output directory. By default the application root.',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Shared Database Configuration in CAP\nDESCRIPTION: Commands to test, compile, and deploy the shared database configuration for CAP microservices to different targets including SQL, HANA, and SQLite.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncds db -2 sql\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds db -2 hana\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds deploy -2 sqlite\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds build --for hana\n```\n\n----------------------------------------\n\nTITLE: Java Spring Boot Profile Configuration\nDESCRIPTION: YAML configuration for adding mock users to the Spring Boot profile for local multitenancy testing.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n---\nspring:\n  config.activate.on-profile: local-multitenancy\n#...\ncds:\n  multi-tenancy:\n    mtxs.enabled: true\n  security.mock.users:\n    - name: alice\n      tenant: t1\n      roles: [ admin ]\n    - name: bob\n      tenant: t1\n      roles: [ cds.ExtensionDeveloper ]\n    - name:  erin\n      tenant: t2\n      roles: [ admin, cds.ExtensionDeveloper ]\n```\n\n----------------------------------------\n\nTITLE: Re-importing API with a Different Output File\nDESCRIPTION: Command to re-import the API definition to a new file for making modifications.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncds import ~/Downloads/API_BUSINESS_PARTNER.edmx --keep-namespace \\\n    --as cds --out srv/external/API_BUSINESS_PARTNER-new.cds\n```\n\n----------------------------------------\n\nTITLE: Processing JSON CDS Model\nDESCRIPTION: Shows how to read and process a JSON CDS model file using JavaScript.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/models.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds')\ncds.get('./some.json') .then (cds.compile.to.yaml) .then (console.log)\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Page Layout for SAP Cloud Application Programming Model\nDESCRIPTION: This YAML configuration sets up the home page layout for the SAP Cloud Application Programming Model documentation. It defines the page layout, status, title, hero section with actions, and feature sections highlighting key aspects of the model.\nSOURCE: https://github.com/cap-js/docs/blob/main/index.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\nstatus: released\ntitle: Home\n\nhero:\n  name: \"SAP Cloud Application Programming Model\"\n  image: /cap-logo.svg\n\n  tagline:\n    Build cloud-native applications\n    with maximized productivity\n    at minimized costs,\n    and proven best practices\n    served out of the box.\n\n  actions:\n\n    - theme: alt\n      text: Get Started\n      link: /get-started/\n\n    - theme: alt\n      text: Learn More\n      link: /about/\n\n    - theme: brand\n      text: What's New?\n      link: /releases\n\nfeatures:\n\n- title: Focus on Domain\n  icon: ⭕️\n  details:\n    •&nbsp; Capture intent ⇒ What, not how! <br/>\n    •&nbsp; Minimized boilerplate coding <br/>\n    •&nbsp; Developers + domain experts <br/>\n  link: about/\n  linkText: Read the Primer\n\n- title: Rapid Development\n  icon: 🌀\n  details:\n    •&nbsp; Jumpstart with minimal setup <br/>\n    •&nbsp; Rapid dev at minimized costs <br/>\n    •&nbsp; Grow as you go... <br/>\n  link: get-started/in-a-nutshell\n  linkText: Get Started in a Nutshell\n\n- title: Proven Best Practices\n  icon: 🧩\n  details:\n    •&nbsp; Enterprise-grade solutions <br/>\n    •&nbsp; Proven in SAP products <br/>\n    •&nbsp; Served out of the box <br/>\n  link: about/best-practices\n  linkText: Key Concepts & Rationales\n\n- title: Cloud Native\n  icon: 💯\n  details:\n    •&nbsp; Multitenancy, Extensibility, ... <br/>\n    •&nbsp; Resilience, Scalability, ... <br/>\n    •&nbsp; Intrinsically taken care of <br/>\n  link: about/#cloud-native-by-design\n  linkText: Intrinsic & by Design\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth Redirect URIs in xs-security.json\nDESCRIPTION: JSON configuration example for updating redirect URIs in xs-security.json for SAP Business Application Studio.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n\"oauth2-configuration\": {\n    \"redirect-uris\": [\n      \"<url from error message>\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Application Routes in Cloud Foundry Deployment Log\nDESCRIPTION: Example deployment log output showing the application name, state, and routes. The routes line indicates the URL where the application can be accessed.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_16\n\nLANGUAGE: log\nCODE:\n```\nname:              bookshop-srv\nrequested state:   started\nroutes:            bookshop-srv.cfapps.sap.hana.ondemand.com\n```\n\n----------------------------------------\n\nTITLE: Adding App Router\nDESCRIPTION: Command to add custom App Router configuration for gateway routing\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncds add approuter\n```\n\n----------------------------------------\n\nTITLE: Consuming BusinessPartner Events Agnostically\nDESCRIPTION: JavaScript code demonstrating how to connect to and handle BusinessPartner change events\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/s4.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst S4Bupa = await cds.connect.to ('API_BUSINESS_PARTNER')\nS4bupa.on ('BusinessPartner.Changed', msg => {...})\n```\n\n----------------------------------------\n\nTITLE: Incorrect CSV Header for Books Entity\nDESCRIPTION: This CSV snippet shows an incorrect header with a typo in the 'title' column, which would trigger a warning from the valid-csv-header rule.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/valid-csv-header.md#2025-04-18_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\nID;tile;author\n201;Wuthering Heights;Emily Brontë\n207;Jane Eyre;Charlotte Brontë\n251;The Raven;Edgar Allen Poe\n252;Eleonora;Edgar Allen Poe\n271;Catweazle;Richard Carpenter\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Recursive Hierarchy Model in CDS\nDESCRIPTION: This code snippet defines a domain model for a recursive hierarchy of employees. It uses a self-referencing association to establish the parent-child relationship and includes a Hierarchy aspect with virtual elements calculated at runtime.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_32\n\nLANGUAGE: cds\nCODE:\n```\nentity Employee : Hierarchy {\n  key ID       : UUID;\n      parent   : Association to Employee;\n      fullName : String;\n}\n\naspect Hierarchy {\n  virtual LimitedDescendantCount : Integer64;\n  virtual DistanceFromRoot       : Integer64;\n  virtual DrillState             : String;\n  virtual LimitedRank            : Integer64;\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for Merge Example\nDESCRIPTION: Example package.json configuration that will be merged with other configuration sources.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_14\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n        \"kind\": \"sqlite\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Configuration Files\nDESCRIPTION: Examples of using merge utility for configuration file modifications\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = { cds: { requires: { db: 'postgres' } } }\ncds.add.merge(config).into('package.json')\n```\n\n----------------------------------------\n\nTITLE: Testing with CDS Build\nDESCRIPTION: Command to run standalone CDS build for production inspection. This is typically part of mbt build but can be run separately.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncds build --production\n```\n\n----------------------------------------\n\nTITLE: Using Stream for Entity Data Access in CAP Java SDK\nDESCRIPTION: Event handler using Stream<Books> instead of List<Books> for processing entity data. This enables functional-style operations on the entity data and can be more efficient for large datasets.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/index.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n@Before(event = { CqnService.EVENT_CREATE, CqnService.EVENT_UPDATE })\npublic void changeBooks(Stream<Books> books) { }\n```\n\n----------------------------------------\n\nTITLE: CDS Entity with Custom Search Configuration\nDESCRIPTION: Defines a Book entity with the @cds.search annotation specifying that only the title field should be searchable.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\n@cds.search: {title}\nentity Book {\n  key ID : Integer;\n  name   : String;\n  title  : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing tsx Globally\nDESCRIPTION: Command to install tsx globally for TypeScript execution.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/typescript.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g tsx\n```\n\n----------------------------------------\n\nTITLE: Displaying CDS Version Information\nDESCRIPTION: This snippet shows the output of the 'cds version' command, listing versions of various CAP-related packages, CDS core components, and Node.js. It provides a comprehensive overview of the development environment's configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-version.out.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n> cds version\n\n@cap-js/asyncapi: 1.0.3\n@cap-js/cds-types: 0.10.0\n@cap-js/db-service: 1.19.1\n@cap-js/openapi: 1.2.1\n@cap-js/sqlite: 1.10.0\n@sap/cds: 8.9.2\n@sap/cds-compiler: 5.9.2\n@sap/cds-dk (global): 8.9.1\n@sap/cds-fiori: 1.4.1\n@sap/cds-foss: 5.0.1\n@sap/cds-mtxs: 2.7.0\n@sap/eslint-plugin-cds: 3.2.0\nNode.js: v20.19.0\nyour-project: 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Entity Extensions in CDS Violating Restrictions\nDESCRIPTION: This code snippet shows an incorrect implementation that violates the extension restrictions set by the base application. The extension attempts to modify or extend elements that are not designated as allowable extension points in the SaaS base app.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/extension-restrictions.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nusing { base } from 'base-app';\n\nextend entity base.Authors with {\n  someExtensionField : String;\n}\n```\n\n----------------------------------------\n\nTITLE: CAP.js Migration Setup Commands\nDESCRIPTION: Shell commands for setting up parallel usage of old and new database services during migration.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm add @cap-js/sqlite --no-save\ncds watch bookshop --profile better-sqlite\nCDS_ENV=better-sqlite cds watch bookshop\nCDS_ENV=better-sqlite jest --silent\ncds watch bookshop\njest --silent\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Decodable URI Input\nDESCRIPTION: Example of a problematic URI input that would normally throw errors when decoded with standard functions.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet input = \"%E0%A4%A\"\n```\n\n----------------------------------------\n\nTITLE: Installing @sap/cds-dk Package\nDESCRIPTION: Command to install the @sap/cds-dk package locally in your project using npm. This package provides CDS design-time APIs.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/index.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @sap/cds-dk\n```\n\n----------------------------------------\n\nTITLE: Installing CAP Documentation Dependencies\nDESCRIPTION: Command to install all required dependencies for the documentation project.\nSOURCE: https://github.com/cap-js/docs/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Using Jest's Native Expect Functions\nDESCRIPTION: Example showing how to use Jest's native expect functions if preferred over Chai assertions.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-test.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncds.test()\nit('should use jest.expect', ()=>{\n  expect({foo:'bar'}).toHaveProperty('foo')\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Books Data CSV\nDESCRIPTION: Example of initial data in default language for Books entity\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/localized-data.md#2025-04-18_snippet_18\n\nLANGUAGE: csv\nCODE:\n```\nID;title;descr;author_ID;stock;price;currency_code;genre_ID\n201;Wuthering Heights;Wuthering Heights, Emily Brontë's only novel ...;101;12;11.11;GBP;11\n207;Jane Eyre;Jane Eyre is a novel by English writer ...;107;11;12.34;GBP;11\n251;The Raven;The Raven is a narrative poem by ...;150;333;13.13;USD;16\n252;Eleonora;Eleonora is a short story by ...;150;555;14;USD;16\n271;Catweazle;Catweazle is a British fantasy ...;170;22;150;JPY;13\n...\n```\n\n----------------------------------------\n\nTITLE: Verifying CAP CLI installation with the cds command\nDESCRIPTION: Command to check that the CAP command line interface was installed successfully, which displays usage information and available commands.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/index.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds\n```\n\n----------------------------------------\n\nTITLE: Binding Cloud Logging Service in MTA Descriptor\nDESCRIPTION: Configures the binding of a Cloud Logging Service instance with Open Telemetry capabilities enabled in the mta.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: <srv-module>\n    # ...\n    requires:\n      - name: cloud-logging-instance\n# ...\nresources:\n  - name: cloud-logging-instance\n    type: org.cloudfoundry.managed-service\n    parameters:\n      service: cloud-logging\n      service-plan: standard\n      config:\n        ingest_otlp:\n          enabled: true\n# ...\n```\n\n----------------------------------------\n\nTITLE: Deploying CDS Model to SAP HANA\nDESCRIPTION: CDS command to optionally deploy the migrated CDS model to an SAP HANA database for verification.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncds deploy --to hana\n```\n\n----------------------------------------\n\nTITLE: Annotated Annotations in XML Output Example\nDESCRIPTION: Shows the resulting XML representation of annotations that have been annotated with terms like Importance, Criticality, and TextArrangement.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<Annotation Term=\"UI.LineItem\">\n  <Collection>\n    <Record Type=\"UI.DataField\">\n      <PropertyValue Property=\"Value\" Path=\"ApplicationName\"/>\n      <Annotation Term=\"UI.Importance\" EnumMember=\"UI.ImportanceType/High\"/> <!-- -->\n    </Record>\n    ...\n  </Collection>\n  <Annotation Term=\"UI.Criticality\" EnumMember=\"UI.CriticalityType/Positive\"/> <!-- -->\n</Annotation>\n<Annotation Term=\"Common.Text\" Path=\"Text\">\n  <Annotation Term=\"UI.TextArrangement\" EnumMember=\"UI.TextArrangementType/TextOnly\"/> <!-- -->\n</Annotation>\n```\n\n----------------------------------------\n\nTITLE: Sample Mock Data CSV for Business Partners\nDESCRIPTION: Example CSV file containing mock data for business partners that can be used for local testing of the remote service.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_9\n\nLANGUAGE: csv\nCODE:\n```\nBusinessPartner;BusinessPartnerFullName;BusinessPartnerIsBlocked\n1004155;Williams Electric Drives;false\n1004161;Smith Batteries Ltd;false\n1004100;Johnson Automotive Supplies;true\n```\n\n----------------------------------------\n\nTITLE: Plugin File Generation Implementation - Mixed\nDESCRIPTION: Implementation of run method to generate PostgreSQL Docker configuration file. Includes both JavaScript implementation and YAML template.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst cds = require('@sap/cds-dk')\nconst { write, path } = cds.utils, { join } = path\n\nmodule.exports = class extends cds.add.Plugin {\n  async run() {\n    const pg = join(__dirname, 'add/pg.yaml')\n    await copy(pg).to('pg.yaml')\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    image: postgres:alpine\n    environment: { POSTGRES_PASSWORD: postgres }\n    ports: [ '5432:5432' ]\n    restart: always\n```\n\n----------------------------------------\n\nTITLE: Vue Template for Rendering CAP Java Properties Table\nDESCRIPTION: Defines the HTML table structure that displays the CAP Java configuration properties. The template iterates through the properties array and renders each property with its name, type, default value, and description. It also includes anchors for direct linking to properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/properties.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th class=\"anchor\"></th>\n      <th class=\"prop\">Property</th>\n      <th class=\"java-type\">Type</th>\n      <th class=\"default\">Default Value</th>\n      <th class=\"descr\">Description</th>\n    </tr>\n  </thead>\n  <tr v-for=\"p in properties\" :key=\"p.name\" :id=\"p.anchor\">\n    <td class=\"anchor\"><a :href=\"'#'+p.anchor\" class=\"header-anchor\"></a></td>\n    <td class=\"prop\"      v-html=\"p.name\" :class=\"{ group: p.header }\"></td>\n    <td class=\"java-type\" v-html=\"p.type\"></td>\n    <td class=\"default\" v-html=\"p.defaultValue\"></td>\n    <td class=\"descr\"   v-html=\"p.description\"></td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Dead Letter Queue Service Definition in CDS\nDESCRIPTION: CDS service definition for managing the outbox dead letter queue, exposing a read-only projection on the Messages entity with revive and delete actions. This service provides an interface for handling failed outbox messages.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_11\n\nLANGUAGE: cds\nCODE:\n```\nusing from '@sap/cds/srv/outbox';\n\n@requires: 'internal-user'\nservice OutboxDeadLetterQueueService {\n\n  @readonly\n  entity DeadOutboxMessages as projection on cds.outbox.Messages\n    actions {\n      action revive();\n      action delete();\n    };\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Repository in containerize.yaml\nDESCRIPTION: Specifies the container registry for pushing images in the containerize.yaml configuration file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n...\nrepository: <your-container-registry>\n```\n\n----------------------------------------\n\nTITLE: Removing HANA Service Configuration\nDESCRIPTION: YAML configuration showing the removal of HANA service offering configuration from values.yaml.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nhana:\n  serviceOfferingName: hana\n  servicePlanName: hdi-shared\n```\n\n----------------------------------------\n\nTITLE: Add PostgreSQL Support in CAP Java\nDESCRIPTION: Uses `@sap/cds-dk` command to add PostgreSQL support to a CAP Java project. No prerequisites required other than having `@sap/cds-dk` installed.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncds add postgres\n```\n\n----------------------------------------\n\nTITLE: Configuring enterprise-messaging-shared for hybrid setup\nDESCRIPTION: JSON configuration to use the 'enterprise-messaging-shared' implementation for hybrid testing setup in the reviews and bookstore samples.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-mesh.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"[hybrid]\": { \"kind\": \"enterprise-messaging-shared\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Route for Subscribed CAP Application in Cloud Foundry\nDESCRIPTION: Command to create and map a route for a subscribed CAP application in Cloud Foundry. This is necessary to make the application accessible after subscription.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\ncf map-route bookshop cfapps.us10.hana.ondemand.com --hostname subscriber1-myOrg-mySpace-bookshop\n```\n\n----------------------------------------\n\nTITLE: Maven Schema Generation Configuration\nDESCRIPTION: XML configuration for generating initial SQLite schema file during build\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<execution>\n\t<id>schema.sql</id>\n\t<goals>\n\t\t<goal>cds</goal>\n\t</goals>\n\t<configuration>\n\t\t<commands>\n\t\t\t<command>deploy --to sqlite --dry --out srv/src/main/resources/schema.sql</command>\n\t\t</commands>\n\t</configuration>\n</execution>\n```\n\n----------------------------------------\n\nTITLE: Model Minification Example\nDESCRIPTION: Shows how to minify a CSN model by removing unused types, aspects and skipped entities\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlet csn = await cds.load('*').then(cds.minify)\n```\n\n----------------------------------------\n\nTITLE: MTX Sidecar Startup Log\nDESCRIPTION: Sample log output when starting the MTX sidecar, showing service initialization and tenant deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_15\n\nLANGUAGE: log\nCODE:\n```\n[cds] - connect using bindings from: { registry: '~/.cds-services.json' }\n[cds] - connect to db > sqlite { url: '../../db.sqlite' }\n[cds] - serving cds.xt.ModelProviderService { path: '/-/cds/model-provider' }\n[cds] - serving cds.xt.DeploymentService { path: '/-/cds/deployment' }\n[cds] - serving cds.xt.SaasProvisioningService { path: '/-/cds/saas-provisioning' }\n[cds] - serving cds.xt.ExtensibilityService { path: '/-/cds/extensibility' }\n[cds] - serving cds.xt.JobsService { path: '/-/cds/jobs' }\n[cds|t0] - loaded model from 1 file(s):\n\n  ../../db/t0.cds\n\n[mtx|t0] - (re-)deploying SQLite database for tenant: t0\n/> successfully deployed to db-t0.sqlite\n[cds] - server listening on { url: 'http://localhost:4005' }\n[cds] - launched at 3/5/2023, 1:49:33 PM, version: 7.0.0, in: 1.320s\n[cds] - [ terminate with ^C ]\n```\n\n----------------------------------------\n\nTITLE: Installing npm Packages for App Router\nDESCRIPTION: Command to install npm dependencies for the App Router component in the specified directory.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --prefix app/router\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Audit Log Service\nDESCRIPTION: Mock implementation of the audit log service for development purposes.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/best-practices.md#2025-04-18_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nclass AuditLogService {init(){\n  this.on('PersonalDataModified', msg => {\n    console.log('Received audit log message', red.data)\n  })\n}}\n```\n\n----------------------------------------\n\nTITLE: Adding Cloud Foundry Support to CAP Java Project\nDESCRIPTION: Command to enhance a CAP Java project with Cloud Foundry support using the CDS Maven plugin, enabling deployment to Cloud Foundry environments.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/getting-started.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmvn com.sap.cds:cds-maven-plugin:add -Dfeature=CF\n```\n\n----------------------------------------\n\nTITLE: Defining Audit Log Service in CDS\nDESCRIPTION: CDS service definition for the Audit Log Service, including actions, events, and types.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_5\n\nLANGUAGE: cds\nCODE:\n```\nnamespace sap.auditlog;\n\nservice AuditLogService {\n\n  action log(event : String, data : LogEntry);\n\n  event SensitiveDataRead : LogEntry {\n    data_subject : DataSubject;\n    object       : DataObject;\n    attributes   : many {\n      name       : String;\n    };\n    attachments  : many {\n      id         : String;\n      name       : String;\n    };\n    channel      : String;\n  };\n\n  event PersonalDataModified : LogEntry {\n    data_subject :      DataSubject;\n    object       :      DataObject;\n    attributes   : many Modification;\n    success      :      Boolean default true;\n  };\n\n  event ConfigurationModified : LogEntry {\n    object     :      DataObject;\n    attributes : many Modification;\n  };\n\n  event SecurityEvent : LogEntry {\n    data : {};\n    ip   : String;\n  };\n\n}\n\n/** Common fields, filled in automatically */\ntype LogEntry {\n  uuid   : UUID;\n  tenant : String;\n  user   : String;\n  time   : Timestamp;\n}\n\ntype DataObject {\n  type : String;\n  id   : {};\n}\n\ntype DataSubject : DataObject {\n  role : String;\n}\n\ntype Modification {\n  name : String;\n  old  : String;\n  new  : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CDS REPL Command with Project\nDESCRIPTION: Launches the CDS REPL with a specified CAP project, enabling access to entities and services of the running server.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-repl.out.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncds repl --run bookshop\n```\n\n----------------------------------------\n\nTITLE: Exposing External Type in OData Definition\nDESCRIPTION: This XML snippet shows how the 'Status' type is automatically exposed in the EDMX structure, ensuring that external types are accessible in the OData service.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<edmx:Edmx Version=\"4.0\">\n  <edmx:DataServices>\n    <Schema Namespace=\"orders\">\n      <EntityContainer Name=\"EntityContainer\">\n        <FunctionImport Name=\"cancel\" Function=\"orders.cancel\"/>\n      </EntityContainer>\n      <ComplexType Name=\"Status\">          <!-- auto exposed -->\n        <Property Name=\"code\" Type=\"Edm.Boolean\"/>\n      </ComplexType>\n      <Function Name=\"cancel\" IsBound=\"false\" IsComposable=\"false\">\n        <Parameter Name=\"orderId\" Type=\"Edm.Int32\"/>\n        <ReturnType Type=\"orders.Status\"/>\n      </Function>\n    </Schema>\n  </edmx:DataServices>\n</edmx:Edmx>\n```\n\n----------------------------------------\n\nTITLE: Mapping CDS References to OData EDMX XML\nDESCRIPTION: Shows how CDS references in annotations are converted to Path properties or elements in OData EDMX XML format.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\n@Some.Term: My.Reference\n@Some.Record: {\n  Value: My.Reference\n}\n@Some.Collection: [\n  My.Reference\n]\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Annotation Term=\"Some.Term\" Path=\"My/Reference\"/>\n<Annotation Term=\"Some.Record\">\n  <Record>\n    <PropertyValue Property=\"Value\" Path=\"My/Reference\"/>\n  </Record>\n</Annotation>\n<Annotation Term=\"Some.Collection\">\n  <Collection>\n    <Path>My/Reference</Path>\n  </Collection>\n</Annotation>\n```\n\n----------------------------------------\n\nTITLE: Mock Tenant Configuration\nDESCRIPTION: YAML configuration for defining mock tenants with specific features enabled for testing purposes.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/security.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  config.activate.on-profile: test\ncds:\n  security:\n    mock:\n      users:\n        - name: Alice\n          tenant: CrazyCars\n      tenants:\n        - name: CrazyCars\n          features:\n            - cruise\n            - park\n```\n\n----------------------------------------\n\nTITLE: Optimizing Case Statement in CAP CDS (Bad Example)\nDESCRIPTION: This snippet demonstrates a suboptimal approach using an explicit case statement in a CDS view projection. This method is expensive as it can't leverage indices and requires explicit materialization.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_13\n\nLANGUAGE: cds\nCODE:\n```\nentity OrdersItemsView as projection on OrdersItems {\n    *,\n    case\n       when quantity > 500 then 'Large'\n       when quantity > 100 then 'Medium'\n       else 'Small'\n    end as category : String\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Authentication for UI Testing\nDESCRIPTION: JSON property to add to xs-app.json to disable authentication for testing UIs without a running UAA service.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n\"authenticationMethod\": \"none\"\n```\n\n----------------------------------------\n\nTITLE: Creating an All-in-one Model with UI Annotations (Anti-pattern)\nDESCRIPTION: An example showing how NOT to structure a CAP model by overloading the core service definition with UI annotations. This approach pollutes the domain model with secondary concerns.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_0\n\nLANGUAGE: cds\nCODE:\n```\nservice CatalogService {\n  @UI.SelectionFields: [\n    ID, price, currency_code\n  ]\n  @UI.LineItem: [\n    { Value: ID, Label: '{i18n>Title}' },\n    { Value: author, Label : '{i18n>Author}' },\n    { Value: genre.name},\n    { Value: price},\n    { Value: currency.symbol},\n  ]\n  @UI.HeaderInfo: {\n    TypeName       : '{i18n>Book}',\n    TypeNamePlural : '{i18n>Books}',\n    Description    : { Value: author }\n  }\n  @UI.HeaderFacets: [{\n    $Type  : 'UI.ReferenceFacet',\n    Label  : '{i18n>Description}',\n    Target : '@UI.FieldGroup#Descr'\n  }]\n  @UI.Facets: [{\n    $Type  : 'UI.ReferenceFacet',\n    Label  : '{i18n>Details}',\n    Target : '@UI.FieldGroup#Price'\n  }]\n  @UI.FieldGroup #Descr : { Data: [{Value : descr}, ]}\n  @UI:FieldGroup #Price : { Data: [\n    { Value: price},\n    { Value: currency.symbol, Label: '{i18n>Currency}' },\n  ]}\n  entity Books { ... }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Index List Component Usage\nDESCRIPTION: Vue template code showing the usage of an IndexList component with pages data passed as a prop.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/index.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<IndexList :pages='pages' />\n```\n\n----------------------------------------\n\nTITLE: Freezing npm Dependencies for CAP Application\nDESCRIPTION: Commands to freeze npm dependencies for the server and MTX sidecar in a CAP project. This ensures consistent dependencies across deployments.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nnpm update --package-lock-only\nnpm update --package-lock-only --prefix mtx/sidecar\n```\n\n----------------------------------------\n\nTITLE: Defining a Max Base Class (Anti-pattern)\nDESCRIPTION: An example of using the class-based inheritance approach with abstract entities to define common aspects. This approach is deprecated in CDS due to its limitations with single inheritance.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nabstract entity BusinessObject {\n  key ID     : UUID;\n  createdAt  : DateTime;\n  createdBy  : User;\n  modifiedAt : DateTime;\n  modifiedBy : User;\n  changes    : Composition of many Changes;\n  extensions : PredefinedExtensionFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Associated Entities for Change Tracking\nDESCRIPTION: Define identifiers for associated entities in change tracking to log changes in their relationships.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/change-tracking.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nentity Orders {\n  key ID: UUID;\n  customer: Association to Customer;\n  [...]\n}\n\nannotate Orders {\n  customer @changelog: [ customer.name ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Tables and Views for Localization\nDESCRIPTION: SQL statements to create tables and views for handling localized data with automatic fallback.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE Foo_texts (\n  ID NVARCHAR(36),\n  locale NVARCHAR(14),\n  name NVARCHAR(255),\n  descr NVARCHAR(1000),\n  PRIMARY KEY(ID, locale)\n);\n\nCREATE VIEW localized_Foo AS SELECT\n  code,\n  COALESCE (localized.name, name) AS name,\n  COALESCE (localized.descr, descr) AS descr\nFROM Foo (\n  LEFT JOIN Foo_texts AS localized\n    ON localized.code= code\n    AND localized.locale = SESSION_CONTEXT('locale')\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Servlet Import for Jakarta EE 10\nDESCRIPTION: Example of updating an import statement to use the Jakarta EE 10 package name instead of the javax package name for servlet-related classes.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nimport jakarta.servlet.http.HttpServletResponse;\n```\n\n----------------------------------------\n\nTITLE: Custom Field Rendering Format in Text Output\nDESCRIPTION: How custom fields are rendered in plain text format by the SAP Application Logging Service. Each custom field is displayed with its key and value in separate lines with standardized prefixes.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_12\n\nLANGUAGE: txt\nCODE:\n```\ncustom.string.key0: <key>\ncustom.string.value0: <value>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL View Generation Changes\nDESCRIPTION: Example of how virtual elements are no longer reflected in generated database views in CDS Compiler v2.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE VIEW P AS SELECT id FROM E\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram Markdown Integration\nDESCRIPTION: Example of how to embed a Mermaid diagram in Markdown using code fences for rendering on platforms like GitHub.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_24\n\nLANGUAGE: md\nCODE:\n```\n```mermaid\nclassDiagram\n  namespace sap_fe_cap_travel {\n    class `sap.fe.cap.travel.Travel`[\"Travel\"]\n    ...\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Renaming CSV File for Localization Support in CAP Java\nDESCRIPTION: This shell command snippet renames a CSV file to match the required format for localization, adhering to the naming convention expected by CAP Java.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nmv bookshop-Books_texts.csv bookshop-Books.texts.csv\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Component in Markdown (Vue)\nDESCRIPTION: This snippet imports a Vue component named RulesRefTable to be used within the markdown document for displaying rule reference tables.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/index.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import RulesRefTable from '../components/RulesRefTable.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Text Bundle in Properties Format\nDESCRIPTION: Shows the format of a text bundle file using the .properties format for internationalization.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/i18n.md#2025-04-18_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nBook = Book\nBooks = Books\nfoo = Foo\n```\n\n----------------------------------------\n\nTITLE: Adding SAP Build Work Zone Support to CAP Project\nDESCRIPTION: Adds SAP Build Work Zone support to the CAP project for UI integration.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds add workzone\n```\n\n----------------------------------------\n\nTITLE: Log Output for Separate Reviews Service\nDESCRIPTION: This log output shows the startup of the separate reviews service, including the use of file-based messaging and the service's listening port. It confirms the service is running independently.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/index.md#2025-04-18_snippet_11\n\nLANGUAGE: log\nCODE:\n```\n[cds] - connect to messaging > file-based-messaging { file: '~/.cds-msg-box' }\n[cds] - serving ReviewsService { path: '/reviews', impl: '../reviews/srv/reviews-service.js' }\n\n[cds] - server listening on { url: 'http://localhost:4005' }\n[cds] - launched at 5/25/2023, 4:53:46 PM, version: 7.0.0, in: 593.274ms\n```\n\n----------------------------------------\n\nTITLE: Using the local() Utility for Path Representation\nDESCRIPTION: Demonstrates how the local() function provides relative file representations for better user experience in terminal output.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_5\n\nLANGUAGE: log\nCODE:\n```\n[samples] cds run bookshop\n[cds] - loaded model from 5 file(s):\n\n  bookshop/srv/user-service.cds\n  bookshop/srv/cat-service.cds\n  bookshop/srv/admin-service.cds\n  bookshop/db/schema.cds\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Resource Filtering\nDESCRIPTION: XML configuration in pom.xml to enable Maven resource filtering for version placeholders.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n  ...\n\t<resources>\n\t\t<resource>\n\t\t\t<directory>src/main/resources</directory>\n\t\t\t<filtering>true</filtering>\n\t\t</resource>\n\t</resources>\n  ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Entity Elements in Bound Action Annotations\nDESCRIPTION: Shows how to reference an entity's element in an annotation for a bound action by using explicit binding parameter navigation.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\nservice S {\n  entity Order {\n    key id : Integer;\n    // ...\n    status : String;\n  } actions {\n    @Core.OperationAvailable: ( :in.status <> 'A' ) // \n    action accept (in: $self)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Dependencies Installation\nDESCRIPTION: Commands to remove old MTX package and install new MTXS package\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-migration.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm remove @sap/cds-mtx\nnpm add @sap/cds-mtxs\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Persistent SQLite Configuration\nDESCRIPTION: YAML configuration for setting up persistent SQLite database in Spring Boot\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  config.activate.on-profile: sqlite\n  datasource:\n    url: \"jdbc:sqlite:db.sqlite\"\n    driver-class-name: org.sqlite.JDBC\n    hikari:\n      maximum-pool-size: 1\n```\n\n----------------------------------------\n\nTITLE: Java Maven Build\nDESCRIPTION: Maven command to build and generate model-related artifacts for a Java project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Handling Connective Predicates in CQN Visitor for Java\nDESCRIPTION: This code shows how the CheckDataVisitor handles connective predicates (AND, OR). It pops Boolean results from the stack, applies the logical operator, and pushes the result back onto the stack.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-introspection.md#2025-04-18_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void visit(CqnConnectivePredicate connect) {\n    Boolean rhs = (Boolean) stack.pop();\n    Boolean lhs = (Boolean) stack.pop();\n    switch (connect.operator()) {\n    case AND:\n        stack.push(lhs && rhs);\n        break;\n    case OR:\n        stack.push(lhs || rhs);\n        break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Null Comparison in CDS Views\nDESCRIPTION: This example shows an incorrect way of comparing values with null in CDS files using the equals operator, which doesn't work properly in SQL as null represents an unknown value.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/sql-null-comparison.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nentity Books as select from my.Books\nwhere author = null;\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for Production\nDESCRIPTION: Run the build command to create a production-ready version of the documentation in the .vitepress/dist/ directory.\nSOURCE: https://github.com/cap-js/docs/blob/main/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run docs:build\n```\n\n----------------------------------------\n\nTITLE: Using Star Expansion in Select Statements (No Longer Permitted)\nDESCRIPTION: Example of a previously allowed but now rejected star expansion query on application service level. This type of query without explicit paths is no longer permitted for any entities when submitted to an ApplicationService.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSelect.from(BOOKS).columns(b -> b.expand());\n```\n\n----------------------------------------\n\nTITLE: Disabling Persistence Service Creation\nDESCRIPTION: YAML configuration to disable the automatic creation of a persistence service for a specific database binding.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  persistence.services:\n    my-hana-hdi:\n      enabled: false\n```\n\n----------------------------------------\n\nTITLE: Running CAP Application with External Service\nDESCRIPTION: Command to run the main CAP application that will connect to the separately running mocked service.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncds watch\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence with exists()\nDESCRIPTION: Shows how to check if a file or folder exists using the exists() utility function.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { exists } = cds.utils\nif (exists('server.js')) // ...\n```\n\n----------------------------------------\n\nTITLE: Removing CDS Shell Completion\nDESCRIPTION: Command to remove the shell completion support for the 'cds' command.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncds completion --remove\n```\n\n----------------------------------------\n\nTITLE: Updating Chart Dependencies\nDESCRIPTION: YAML configuration showing the removal of service-instance dependency from Chart.yaml.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: service-instance\n    alias: hana\n    version: \">0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Using Vector Embeddings in CQL Queries\nDESCRIPTION: Demonstrates how to use vector embeddings in CQL queries to perform similarity searches. Shows direct embedding use and parameterized queries with vector functions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nCqnVector v = CQL.vector(embedding);\n\nResult similarBooks = service.run(Select.from(BOOKS).where(b ->\n  CQL.cosineSimilarity(b.embedding(), v).gt(0.9))\n);\n```\n\nLANGUAGE: java\nCODE:\n```\nvar similarity = CQL.cosineSimilarity(CQL.get(Books.EMBEDDING), CQL.param(0).type(VECTOR));\n\nCqnSelect query = Select.from(BOOKS)\n  .columns(b -> b.title(), b -> similarity.as(\"similarity\"))\n  .where(b -> b.ID().ne(bookId).and(similarity.gt(0.9)))\n  .orderBy(b -> b.get(\"similarity\").desc());\n\nResult similarBooks = db.run(select, CdsVector.of(embedding));\n```\n\nLANGUAGE: java\nCODE:\n```\nCdsVector embedding = service.run(Select.from(BOOKS).byId(101)\n  .columns(b -> b.embedding())).single(Books.class).getEmbedding();\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure Table in Markdown\nDESCRIPTION: A markdown table showing the organization of CAP documentation sections and their descriptions, including task-oriented guides, reference docs, plugins list and releases information.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/learning-sources.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Section                                                                                  | Description                                                                                                        |\n|------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|\\n| [Getting&nbsp;Started](./) <br/> [Cookbook](../guides/) <br/> [Advanced](../advanced/)   | **Task-oriented guides** that walk you through the most common tasks and advanced topics in CAP-based development. |\n| [CDS](../cds/) <br/> [Java](../java/) <br/> [Node](../node.js/) <br/> [Tools](../tools/) | **Reference docs** for respective areas.                                                                           |\n| [Plugins](../plugins/)                                                                   | **Curated list of plugins** that extend the capabilities of the CAP framework.                                     |\n| [Releases](../releases/)                                                                 | The place where you can stay up to date with the most recent information about new features and changes in CAP.        |\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Services with One Command\nDESCRIPTION: Example of using cds bind to bind multiple services with a single command.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncds bind -2 bookshop-db,bookshop-auth\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Types\nDESCRIPTION: TypeScript configuration to explicitly point to CAP type definitions when symlink is missing.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"@cap-js/cds-types\"],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Effective Service Configuration\nDESCRIPTION: Command for fetching the effective configuration of the service requirements in the sidecar environment, with optional profiling.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncds env get requires\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds env get requires --profile development\ncds env get requires --profile production\n```\n\n----------------------------------------\n\nTITLE: Configuring MTX Sidecar for Model Provider (Node.js)\nDESCRIPTION: JSON configuration for setting up an MTX sidecar to run the ModelProviderService for feature toggles in Node.js.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mtx-sidecar\", \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"@sap/cds\": \"^7\",\n    \"@sap/cds-mtxs\": \"^1\",\n    \"express\": \"^4\"\n  },\n  \"cds\": {\n    \"requires\": {\n      \"cds.xt.ModelProviderService\": \"in-sidecar\"\n    },\n    \"[development]\": {\n      \"requires\": { \"auth\": \"dummy\" },\n      \"server\": { \"port\": 4005 }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Database Deployment\nDESCRIPTION: JavaScript handler that intercepts the database deployment process to add additional SAP HANA services to the environment, enabling access to objects in another HDI container.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = (service) => {\n  service.before('deployToDb', async (context) => {\n    const {\n      sourceDir, // directory with generated SAP HANA sources\n      instanceData, // HDI container metadata\n      deploymentOptions // additional deployment options, for example, `autoUndeploy`\n    } = cds.context.req.body;\n    // ...\n    const hana = [{\n     \"label\": \"hana\",\n     \"provider\": null,\n     \"plan\": \"hdi-shared\",\n     \"name\": \"common-db-sample\",\n     \"<custom-key>\": \"value\"\n    }];\n    context.data.additionalServices.hana = hana;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Testing CAP Microservices Locally with CDS Watch\nDESCRIPTION: Commands to install dependencies and run individual CAP microservices locally using 'cds watch'. The services connect automatically when running simultaneously in different terminals.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds w bookshop\n```\n\nLANGUAGE: sh\nCODE:\n```\ncds w bookstore\n```\n\n----------------------------------------\n\nTITLE: Defining Entity with Multiline Doc Comments in CDS\nDESCRIPTION: Example of an entity definition in CDS with multiline doc comments that may cause migration issues.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/hdbcds-to-hdbtable.md#2025-04-18_snippet_2\n\nLANGUAGE: cds\nCODE:\n```\nentity Employees {\n  key ID : Integer;\n  /**\n    * I am the description for \"name\".\n    * I span across multiple lines.\n    */\n  name : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Expression Translation from CDS to XML in OData Annotation\nDESCRIPTION: Demonstrates how a simple mathematical expression in CDS annotation is translated into the equivalent XML representation in OData.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_13\n\nLANGUAGE: cds\nCODE:\n```\n@Some.Xpr: ( -(a + b) )\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Annotation Term=\"Some.Xpr\">\n  <Neg>\n    <Add>\n      <Path>a</Path>\n      <Path>b</Path>\n    </Add>\n  </Neg>\n</Annotation>\n```\n\n----------------------------------------\n\nTITLE: Winston Logger Integration\nDESCRIPTION: Example of integrating Winston logging framework with CDS logging.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-log.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require(\"winston\")\nconst util = require('util')\nconst cds = require('@sap/cds')\ncds.log.Logger = (label, level) => {\n  // construct winston logger\n  const logger = winston.createLogger({\n    levels: cds.log.levels, // use cds.log's levels\n    level: Object.keys(cds.log.levels)[level],\n    transports: [new winston.transports.Console()],\n  })\n  // winston's log methods expect single message strings\n  const _fmt = (args) => util.formatWithOptions(\n    {colors:false}, `[${label}] -`, ...args\n  )\n  // map to cds.log's API\n  return Object.assign (logger, {\n    trace: (...args) => logger.TRACE (_fmt(args)),\n    debug: (...args) => logger.DEBUG (_fmt(args)),\n    log:   (...args) => logger.INFO  (_fmt(args)),\n    info:  (...args) => logger.INFO  (_fmt(args)),\n    warn:  (...args) => logger.WARN  (_fmt(args)),\n    error: (...args) => logger.ERROR (_fmt(args)),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling AuditLog v2 Handler\nDESCRIPTION: YAML configuration to disable the AuditLog v2 handler in the application.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/auditlog.md#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  auditlog.v2.enabled: false\n```\n\n----------------------------------------\n\nTITLE: Adding On Condition to Association for Mocking\nDESCRIPTION: Modified CDS entity showing how to add an on condition to an association for proper mocking.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_16\n\nLANGUAGE: cds\nCODE:\n```\nentity API_BUSINESS_PARTNER.A_BusinessPartner {\n  // ...\n  to_BusinessPartnerAddress :\n      Association to many API_BUSINESS_PARTNER.A_BusinessPartnerAddress\n      on to_BusinessPartnerAddress.BusinessPartner = BusinessPartner;\n};\n```\n\n----------------------------------------\n\nTITLE: SQLite Schema Evolution Configuration\nDESCRIPTION: JSON configuration to enable automatic schema evolution for SQLite database\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-sqlite.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{ \"cds\": { \"requires\": {\n   \"db\": {\n      \"kind\": \"sqlite\",\n      \"credentials\": { \"url\": \"db.sqlite\" },\n      \"schema_evolution\": \"auto\"\n   }\n}}}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup Script\nDESCRIPTION: Script setup block for a Vue component that imports page data from an index data file and makes it available to the template.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/index.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { data as pages } from './index.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Reuse Package with Common Definitions\nDESCRIPTION: An example of a reuse package containing common types and entities that can be extended or adapted using CDS aspects.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nentity Currencies : CodeList { key code : String(3); }\nentity Countries : CodeList { key code : String(5); }\nentity Languages : CodeList { key locale : String(5); }\ntype CodeList : {\n  name : localized String;\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying CAP Application to Kyma\nDESCRIPTION: Automates the process of building and deploying the CAP application to Kyma.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncds up -2 k8s\n```\n\n----------------------------------------\n\nTITLE: Registering CDS Add Plugin\nDESCRIPTION: Example of registering a new plugin for CDS Add with implementation class\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncds.add?.register?.('postgres',\n  class extends cds.add.Plugin {\n    async run() { /* ... */ }\n    async combine() { /* ... */ }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying CAP.js Version Information in HTML Pre-formatted Text\nDESCRIPTION: HTML pre-formatted text block showing a markdown-style table of CAP.js component versions, including core modules, services, and Node.js runtime version.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-version-md.out.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- this file is automatically generated and updated by a github action -->\n<pre class=\"log\">\n> cds version --markdown\n\n| your-project           | &lt;Add your repository here&gt;              |\n| ---------------------- | --------------------------------------- |\n| @cap-js/asyncapi       | 1.0.3                                   |\n| @cap-js/cds-types      | 0.10.0                                  |\n| @cap-js/db-service     | 1.19.1                                  |\n| @cap-js/openapi        | 1.2.1                                   |\n| @cap-js/sqlite         | 1.10.0                                  |\n| @sap/cds               | 8.9.2                                   |\n| @sap/cds-compiler      | 5.9.2                                   |\n| @sap/cds-dk (global)   | 8.9.1                                   |\n| @sap/cds-fiori         | 1.4.1                                   |\n| @sap/cds-foss          | 5.0.1                                   |\n| @sap/cds-mtxs          | 2.7.0                                   |\n| @sap/eslint-plugin-cds | 3.2.0                                   |\n| Node.js                | v20.19.0                                |\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Coloring Terminal Output with colors Utility\nDESCRIPTION: Shows how to use the colors utility to add formatting and colors to terminal output.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-utils.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BRIGHT, RED, RESET, bg } = cds.utils.colors\nconsole.log(BRIGHT, RED, 'this is bright red text', RESET)\nconsole.log(bg.BLUE, 'this is text with a blue background', RESET)\n```\n\n----------------------------------------\n\nTITLE: Adding Shell Completion for CDS CLI\nDESCRIPTION: Command to add shell completion support for the 'cds' command, enabling tab completion in supported shells.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncds add completion\n```\n\n----------------------------------------\n\nTITLE: Setting Up Integration Tests with cds bind\nDESCRIPTION: Example of using cds bind to configure service bindings for integration tests in a CI/CD pipeline.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ncds bind -2 integration-test-hana -o package.json -4 integration-test\n\n# Login\ncf auth $USER $PASSWORD\n# Optional if your bindings have org and space removed to be agnostic\ncf target -o $ORG -s $SPACE\n\n# Set profile\nexport CDS_ENV=integration-test\n\n# Set resolved bindings\nexport cds_requires=\"$(cds env get requires --resolve-bindings)\"\n\n# Run tests\nnpm run integration-test\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Type in CDS\nDESCRIPTION: CDS type definition for 'Locale' used in generating .texts entities for localized elements.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\ntype sap.common.Locale : String(14) @title: '{i18n>LanguageCode}';\n```\n\n----------------------------------------\n\nTITLE: Defining Calculation View with Parameters\nDESCRIPTION: XML definition of a calculation view with quoted element names and a parameter.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Calculation:scenario xmlns:Calculation=\"https://www.sap.com/ndb/BiModelCalculation.ecore\" schemaVersion=\"3.0\" id=\"data.model.bookshop.CalcBooks\" applyPrivilegeType=\"NONE\" defaultClient=\"$$client$$\" visibility=\"reportingEnabled\" calculationScenarioType=\"TREE_BASED\" dataCategory=\"CUBE\" enforceSqlExecution=\"false\" outputViewType=\"Aggregation\" cacheInvalidationPeriod=\"NONE\">\n<descriptions defaultDescription=\"Calculation View w/ parameters and quoted names\"/>\n<localVariables>\n  <variable id=\"Param\" parameter=\"true\">\n    <variableProperties datatype=\"INTEGER\" mandatory=\"true\">\n      <valueDomain type=\"empty\"/>\n      <selection multiLine=\"false\" type=\"Single\"/>\n      <defaultRange/>\n    </variableProperties>\n  </variable>\n</localVariables>\n<variableMappings/>\n<dataSources>\n  <DataSource id=\"DATA_MODEL_BOOKSHOP_BOOKS\">\n    <resourceUri>DATA_MODEL_BOOKSHOP_BOOKS</resourceUri>\n  </DataSource>\n</dataSources>\n<calculationViews/>\n<logicalModel id=\"DATA_MODEL_BOOKSHOP_BOOKS\">\n  <attributes>\n    <attribute id=\"the.title\" order=\"2\" attributeHierarchyActive=\"false\" displayAttribute=\"false\">\n      <keyMapping columnObjectName=\"DATA_MODEL_BOOKSHOP_BOOKS\" columnName=\"THE_TITLE\"/>\n    </attribute>\n  </attributes>\n  <calculatedAttributes>\n    <calculatedAttribute id=\"calculated\" order=\"3\" semanticType=\"empty\" displayAttribute=\"false\" attributeHierarchyActive=\"false\">\n      <keyCalculation datatype=\"INTEGER\" expressionLanguage=\"COLUMN_ENGINE\">\n        <formula>&quot;id&quot;+$$Param$$</formula>\n      </keyCalculation>\n    </calculatedAttribute>\n  </calculatedAttributes>\n  <baseMeasures>\n    <measure id=\"id\" order=\"1\" aggregationType=\"sum\" measureType=\"simple\">\n      <measureMapping columnObjectName=\"DATA_MODEL_BOOKSHOP_BOOKS\" columnName=\"ID\"/>\n    </measure>\n  </baseMeasures>\n</logicalModel>\n</Calculation:scenario>\n```\n\n----------------------------------------\n\nTITLE: Correcting Element References in CDS\nDESCRIPTION: Shows how to fix references to elements using the correct syntax of Foo:element instead of Foo.element in CDS models.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nentity Foo { a: Integer; }\nentity Bar { b: Foo.a; }\n```\n\n----------------------------------------\n\nTITLE: Running Java CAP Application with Hybrid Profile\nDESCRIPTION: Maven command to run a Java CAP application with the hybrid profile for cloud bindings.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\ncd srv\nmvn cds:watch -Dspring-boot.run.profiles=hybrid\n```\n\n----------------------------------------\n\nTITLE: Injecting PersistenceService in Custom Handler\nDESCRIPTION: Demonstrates how to inject a PersistenceService instance in a custom handler class for data access.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_32\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nprivate PersistenceService persistence;\n```\n\n----------------------------------------\n\nTITLE: Sidecar Authentication Configuration\nDESCRIPTION: JSON configuration to use dummy authentication for the sidecar in development mode.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"profile\": \"mtx-sidecar\",\n    \"[development]\": {\n      \"requires\": {\n        \"auth\": \"dummy\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Insert with Nested Collections in CAP Java\nDESCRIPTION: Shows how to create a deep insert operation with nested collections. The example inserts an order with associated order items in a single operation, demonstrating how to work with compositions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nimport static bookshop.Bookshop_.ORDERS;\n\nvar items = List.of(Map.of(\"ID\", 1, \"book_ID\", 101, \"quantity\", 1));\nvar order = Map.of(\"OrderNo\", \"1000\", \"Items\", items);\n\nCqnInsert insert = Insert.into(ORDERS).entry(order);\n```\n\n----------------------------------------\n\nTITLE: Using cds.error.expected Helper in JavaScript\nDESCRIPTION: Example of the cds.error.expected convenience method for constructing error messages with better object formatting.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nlet e = foo || cds.error.expected `${{foo}} to be truthy`\n```\n\n----------------------------------------\n\nTITLE: Implementation of srv.dispatch Method in JavaScript\nDESCRIPTION: Shows the internal implementation of srv.dispatch that ensures transaction context, handles batches, and calls this.handle for actual processing.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// Ensure we are running in a proper tx, nested or root\nif (!this.context) return this.run (tx => tx.dispatch(req))\n// Handle batches of queries\nif (req.query is array) return Promise.all (req.query.map(this.dispatch))\n// Ensure req.target is properly determined\nif (!req.target) req.target = _infer_target (req)\n// Actually handle the request\nreturn this.handle(req)\n```\n\n----------------------------------------\n\nTITLE: CDS Entities with Calculation View and UDF\nDESCRIPTION: Defines CDS entities for calculation views and user-defined functions with their respective annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hana.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\n@cds.persistence.exists\n@cds.persistence.calcview\nentity AddressCalcView (USERID: Integer) {\n    key id: Integer;\n};\n\nview WeUseAddressCalcView  as select from AddressCalcView(USERID: 4711);\n\n@cds.persistence.exists\n@cds.persistence.udf\nentity AddressUDF {\n    key id: Integer;\n};\n\nview WeUseAddressUDF as select from AddressUDF;\n```\n\n----------------------------------------\n\nTITLE: Styling VPFeature Details List for SAP Cloud Application Programming Model\nDESCRIPTION: This CSS snippet styles the details list within the VPFeature component, setting the white-space property to nowrap to prevent line breaks in list items.\nSOURCE: https://github.com/cap-js/docs/blob/main/index.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.VPFeature .details li {\n  white-space: nowrap;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering CAP Runtime Configuration in Java Services\nDESCRIPTION: Service registration file needed to make the custom CdsRuntimeConfiguration implementation discoverable by CAP Java. This file should be placed in the META-INF/services directory to enable service discovery.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_32\n\nLANGUAGE: txt\nCODE:\n```\ncom.sap.capire.bookshop.BookshopConfiguration\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Secret in Kubernetes Deployment\nDESCRIPTION: YAML configuration to use the created image pull secret in a Kubernetes deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  imagePullSecrets:\n  - name: $YOUR_REPOSITORY\n  containers:\n  - name: cap-srv\n    image: $YOUR_REPOSITORY.docker.io/$YOUR_IMAGE:$YOUR_VERSION\n```\n\n----------------------------------------\n\nTITLE: Updating Service Credentials in .cdsrc-private.json\nDESCRIPTION: Example of how the overwritten service credentials appear in the .cdsrc-private.json file.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"[hybrid]\": {\n      \"my-service\": {\n        \"binding\": {\n          \"type\": \"cf\",\n          \"apiEndpoint\": \"https://api.sap.hana.ondemand.com\",\n          \"org\": \"your-cf-org\",\n          \"space\": \"your-cf-space\",\n          \"instance\": \"my-service\",\n          \"key\": \"my-service-key\",\n          \"credentials\": {\n            \"onpremise_proxy_host\": \"localhost\"\n          },\n          \"resolved\": false\n         }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Native HANA Associations in cdsrc.json\nDESCRIPTION: This configuration in cdsrc.json disables the generation of native HANA associations, offering an alternative location for the same configuration as in package.json.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sql\": {\n    \"native_hana_associations\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Book Collection with Added Editions\nDESCRIPTION: JSON example showing the collection after adding editions to both books.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Wuthering Heights\",\n    \"editions\": [\n      {\n        \"title\": \"Wuthering Heights: 100th Anniversary Edition\"\n      }\n    ]\n  },\n  {\n    \"title\": \"Catweazle\",\n    \"editions\": [\n      {\n        \"title\": \"Catweazle: Director's Cut\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Service URL with HTTP Suffix in CAP Java\nDESCRIPTION: YAML configuration that demonstrates how to set up a remote service with a URL suffix. This builds the final service URL by combining the destination URL with the suffix and the service name.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/remote-services.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  remote.services:\n    API_BUSINESS_PARTNER:\n      http:\n        suffix: \"/sap/opu/odata/sap\"\n      destination:\n        name: s4-business-partner-api\n```\n\n----------------------------------------\n\nTITLE: Initial Book Collection State Example\nDESCRIPTION: JSON example showing the initial state of a book collection with empty editions array.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Wuthering Heights\",\n    \"editions\": []\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Literal Value Syntax in JavaScript\nDESCRIPTION: Defines the structure for literal values in CXN with examples of string, number, boolean, and date/time values.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cxn.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nval = {val:literal}\nliteral = string | number | true | false | null\n```\n\n----------------------------------------\n\nTITLE: BusinessPartner Entity with Empty Association\nDESCRIPTION: CDS entity definition showing an association with empty key definition that needs to be modified for proper mocking.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_13\n\nLANGUAGE: cds\nCODE:\n```\nentity API_BUSINESS_PARTNER.A_BusinessPartner {\n  key BusinessPartner : LargeString;\n  BusinessPartnerFullName : LargeString;\n  BusinessPartnerType : LargeString;\n\n  ...\n\n  to_BusinessPartnerAddress :\n    Association to many API_BUSINESS_PARTNER.A_BusinessPartnerAddress {  };\n};\n\nentity API_BUSINESS_PARTNER.A_BusinessPartnerAddress {\n  key BusinessPartner : String(10);\n  key AddressID : String(10);\n\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Legacy Generated Interface for Actions\nDESCRIPTION: Example of how the same interface was previously generated with the old POJO generation defaults. This shows how without unique event contexts, the interface isn't prefixed with the entity name, and without shared interfaces, global types are regenerated inline.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// uniqueEventContexts: false =>\n// interface is not prefixed with entity name\npublic interface DoSomethingContext extends EventContext {\n\n  // sharedInterfaces: false => global MyArray type is not used,\n  // instead an additional interface Values is generated inline\n  Collection<Values> getValues();\n  void setValues(Collection<Values> values);\n\n  interface Values extends CdsData {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CDI Sample Data - Providers\nDESCRIPTION: Sample CSV data for the Providers entity defining various data providers in the SFlight application with their service URLs.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/analytics.md#2025-04-18_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\nProviderID;NamespaceID;Description;ServiceURL\nAirport;cap.sflight;List of Airports;/cdi-airport\nAirline;cap.sflight;List of Airlines;/cdi-airline\nFlight;cap.sflight;List of Flights;/cdi-flight\nFlightConnection;cap.sflight;List of FlightConnections;/cdi-flight-connection\nCountries;cap.sflight;List of Countries;/cdi-countries\nCurrencies;cap.sflight;List of Currencies;/cdi-currencies\n```\n\n----------------------------------------\n\nTITLE: Updating CAP Development Kit (Shell)\nDESCRIPTION: Command to update the @sap/cds-dk package globally to ensure the latest version is installed.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm update -g @sap/cds-dk\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Native Associations in CDS\nDESCRIPTION: Configures the CDS Compiler to generate tables without associations, as SAP HANA associations are not used by CAP Java. It requires a .cdsrc.json file with specific settings.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"sql\": { \"native_hana_associations\" : false } }\n```\n\n----------------------------------------\n\nTITLE: Adding Build Command for Database in MTA Configuration for CAP\nDESCRIPTION: Adds a custom build command to the MTA configuration that generates database artifacts for the shared database before deployment. This ensures the consolidated database model is built correctly.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/microservices.md#2025-04-18_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nbuild-parameters:\n  before-all:\n    - builder: custom\n      commands:\n        - npm ci\n        - npx cds build --production # [!code --]\n        - npx cds build ./shared-db --for hana --production # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Running a Preview Server for Built Documentation\nDESCRIPTION: Start a server to preview the built documentation. Unlike the development server, this doesn't update with source code changes.\nSOURCE: https://github.com/cap-js/docs/blob/main/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run docs:preview\n```\n\n----------------------------------------\n\nTITLE: Annotating Definitions with Anonymous Aspects in CAP JS\nDESCRIPTION: Illustrates how to annotate existing definitions and their elements using anonymous aspects.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ncsn = {extensions:[\n\n  // annotate Foo with @foo;\n  { annotate:\"Foo\", '@foo':true },\n\n  // annotate Foo with @foo { boo @boo }\n  { annotate:\"Foo\", '@foo':true, elements: {\n    // annotates existing element 'boo'\n    boo: {'@boo':true },\n  }},\n\n]}\n```\n\n----------------------------------------\n\nTITLE: Service Bindings in ~/.cds-services.json\nDESCRIPTION: Displays the content of the ~/.cds-services.json file, which contains automatic bindings created by cds watch for local services.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cds\": {\n    \"provides\": {\n      \"OrdersService\": {\n        \"kind\": \"odata\",\n        \"credentials\": {\n          \"url\": \"http://localhost:4006/orders\"\n        }\n      },\n      \"ReviewsService\": {\n        \"kind\": \"odata\",\n        \"credentials\": {\n          \"url\": \"http://localhost:4005/reviews\"\n        }\n      },\n      \"AdminService\": {\n        \"kind\": \"odata\",\n        \"credentials\": {\n          \"url\": \"http://localhost:4004/admin\"\n        }\n      },\n      \"CatalogService\": {\n        \"kind\": \"odata\",\n        \"credentials\": {\n          \"url\": \"http://localhost:4004/browse\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Immutable Reference Segments with Filters\nDESCRIPTION: Demonstrates the creation of immutable reference segments with filters in CQL queries.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nSegment seg = CQL.refSegment(\"title\", predicate);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Setting Up a CAP Sample Project\nDESCRIPTION: Commands to initialize a new CAP sample project and install dependencies.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncds init sample\ncd sample\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating Active Instances Directly in HTTP POST Request\nDESCRIPTION: Example of an HTTP POST request to create active instances directly when bypass_draft is enabled.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/fiori.md#2025-04-18_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /Books\n\n{\n  \"ID\": 123,\n  \"IsActiveEntity\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Marking ChangeSet Context as Transactional in CAP\nDESCRIPTION: Using the 'markTransactional' method on ChangeSetContext or ChangeSetContextRunner to explicitly require a transaction for subsequent database interactions.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/event-handlers/changeset-contexts.md#2025-04-18_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nmarkTransactional\n```\n\n----------------------------------------\n\nTITLE: Installing Reuse Packages from Local Sources\nDESCRIPTION: Commands to install reuse packages from local tarballs or directories.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm add ~/Downloads/@capire-bookshop-1.0.0.tgz\nnpm add ../bookshop\n```\n\n----------------------------------------\n\nTITLE: Using Element References in Query Projections\nDESCRIPTION: Shows how to use lambda expressions to reference entity elements in a query's select list, including navigation properties.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-api.md#2025-04-18_snippet_48\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.literal;\n\nSelect.from(BOOKS)\n      .columns(b -> b.title(),\n               b -> b.author().name());\n```\n\n----------------------------------------\n\nTITLE: Checking LinkedDefinition Type with instanceof in JavaScript\nDESCRIPTION: Example of using the instanceof operator to check the type of a linked definition.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet { Foo } = cds.linked(csn).entities\nif (Foo instanceof cds.entity) console.log (\"it's an entity\")\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing cap/samples (Node.js)\nDESCRIPTION: Commands to clone the cap/samples repository and install dependencies for Node.js implementation.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/sap-samples/cloud-cap-samples samples\ncd samples\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying MTA Application with Required Services\nDESCRIPTION: Shell commands for building and deploying a CAP application as an MTA (Multi-Target Application) with the necessary service bindings for destination connectivity.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_60\n\nLANGUAGE: sh\nCODE:\n```\ncds add xsuaa,destination,connectivity\n```\n\nLANGUAGE: sh\nCODE:\n```\nmbt build -t gen --mtar mta.tar\n```\n\nLANGUAGE: sh\nCODE:\n```\ncf deploy gen/mta.tar\n```\n\n----------------------------------------\n\nTITLE: Adding Deployment Descriptor for Kyma in CAP\nDESCRIPTION: Command to add deployment descriptors for Kyma in a CAP project. This adds Helm charts and containerization configuration for Kyma deployment.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\ncds add helm,containerize\n```\n\n----------------------------------------\n\nTITLE: Defining a New Code List in CAP CDS\nDESCRIPTION: Defines a new code list entity for regions and extends existing entities to include bidirectional associations. Requires '@sap/cds/common'. The 'Regions' entity is defined with ISO 3166-2 codes and a composition relationship with 'Countries'.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_18\n\nLANGUAGE: cds\nCODE:\n```\nusing sap from '@sap/cds/common';\n\n// new code list for regions\nentity Regions : sap.common.CodeList {\n  key code : String(5); // ISO 3166-2 alpha5 codes, like DE-BW\n  country  : Association to sap.common.Countries;\n}\n\n// bi-directionally associate Regions with Countries\nextend sap.common.Countries {\n  regions : Composition of many Regions on regions.country = $self;\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Disk Quota in MTA Configuration\nDESCRIPTION: YAML configuration snippet to adjust disk quota for a Cloud Foundry module to prevent \"No space left on device\" errors during deployment. This parameter controls the storage space allocated to the application.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n    parameters:\n      disk-quota: 512M\n      memory: 256M\n```\n\n----------------------------------------\n\nTITLE: Using CDS Watch Command in CAP\nDESCRIPTION: The 'cds watch' command is used to monitor a project for changes and automatically recompile and restart the server. It's equivalent to 'cds serve all --with-mocks --in-memory?'. Various options allow customization of port, file extensions to watch, paths to include or exclude, and debugging settings.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-watch.out.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n> cds watch [<project>]\n\nTells cds to watch for relevant things to come or change in the specified\nproject or the current work directory. Compiles and (re-)runs the server\non every change detected.\n\nActually, cds watch is just a convenient shortcut for:\ncds serve all --with-mocks --in-memory?\n```\n\n----------------------------------------\n\nTITLE: Binding to Cloud Application Services\nDESCRIPTION: Examples of using cds bind to bind to all supported service bindings of an application running on the SAP BTP Cloud Foundry environment.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncds bind -a bookshop-srv # ...or the spelled out way:\ncds bind --to-app-services bookshop-srv\n```\n\n----------------------------------------\n\nTITLE: Adding Undeploy Entry for .hdbcds Files in JSON\nDESCRIPTION: Add an entry to db/undeploy.json to undeploy CAP-generated .hdbcds files during migration.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/hdbcds-to-hdbtable.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  ...,\n  \"src/gen/**/*.hdbcds\"\n]\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Documentation navigation hierarchy showing the main sections and subsections of the CAP.js documentation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/_menu.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [Getting Started](getting-started)\n# [Versions & Dependencies](versions)\n# [Working with CDS Models](reflection-api)\n# [Working with CDS Data](cds-data)\n# [Working with CDS CQL](working-with-cql/)\n  ## [Build CQL Statements](working-with-cql/query-api)\n  ## [Execute CQL Statements](working-with-cql/query-execution)\n  ## [Introspect CQL Statements](working-with-cql/query-introspection)\n# [Services](services)\n# [CQN Services](cqn-services/)\n  ## [Persistence Services](cqn-services/persistence-services)\n  ## [Application Services](cqn-services/application-services)\n  ## [Remote Services](cqn-services/remote-services)\n# [Event Handlers](event-handlers/)\n  ## [Indicating Errors](event-handlers/indicating-errors)\n  ## [Request Contexts](event-handlers/request-contexts)\n  ## [ChangeSet Contexts](event-handlers/changeset-contexts)\n# [Fiori Drafts](../../java/fiori-drafts)\n# [Messaging](messaging)\n# [Audit Logging](auditlog)\n# [Change Tracking](../../java/change-tracking)\n# [Transactional Outbox](outbox)\n# [Multitenancy](../../java/multitenancy)\n  ## [Multitenancy (Classic)](../../java/multitenancy-classic)\n# [Security](security)\n  ## [IAS and AMS](../../java/ams)\n# [Spring Boot Integration](spring-boot-integration)\n# [Developing Applications](developing-applications/)\n  ## [Building](developing-applications/building)\n  ## [Running](developing-applications/running)\n  ## [Testing](developing-applications/testing)\n  ## [Configuring](developing-applications/configuring)\n  ## [CDS Properties](developing-applications/properties)\n# [Operating Applications](operating-applications/)\n  ## [Optimizing](operating-applications/optimizing)\n  ## [Observability](operating-applications/observability)\n  ## [Developer Dashboard](../../java/operating-applications/dashboard)\n# [Building Plugins](../../java/building-plugins)\n# [Migration Guides](migration)\n```\n\n----------------------------------------\n\nTITLE: Starting REPL with Server Option\nDESCRIPTION: Command to start CDS REPL with the --run option to immediately bootstrap a CAP application server.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\ncds repl --run cap/samples/bookshop\n```\n\n----------------------------------------\n\nTITLE: Generating CAP Java Project with Maven Archetype (PowerShell)\nDESCRIPTION: Command to create a new CAP Java project from scratch using the CDS Maven archetype in PowerShell. The command specifies the archetype artifact ID, group ID, and uses the latest released version with PowerShell backtick escaping.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/building.md#2025-04-18_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nmvn archetype:generate `-DarchetypeArtifactId=cds-services-archetype `-DarchetypeGroupId=com.sap.cds `-DarchetypeVersion=RELEASE\n```\n\n----------------------------------------\n\nTITLE: Adding Remote OData Dependency in Maven for Java\nDESCRIPTION: Maven dependency configuration required to work with remote services in Java implementations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-feature-remote-odata</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Importing Page Data in Vue.js\nDESCRIPTION: This snippet imports page data from an external file named 'index.data.ts' using Vue.js composition API. It's likely used to populate the index list of cookbook pages.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { data as pages } from './index.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Starting CAP Main Application in Node.js\nDESCRIPTION: This shell command starts the main CAP application in Node.js environment using the 'cds watch' command.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncds watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Project package.json\nDESCRIPTION: Example of package.json configuration for an extension project defining name and extension target\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-migration.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@capire/orders-ext\",\n  \"extends\": \"@capire/orders\",\n  \"...\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Mermaid Diagram Customization\nDESCRIPTION: Environment variables that can be used to customize the Mermaid diagram layout when compiling CDS models.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-cli.md#2025-04-18_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nCDS_MERMAID_ASSOCNAMES=false|true    # show association/composition names\nCDS_MERMAID_ELEMENTS=false|all|keys  # no, all, or only key elements\nCDS_MERMAID_MIN=false|true           # remove unused entities\nCDS_MERMAID_NAMESPACES=false|true    # group entities by namespace\nCDS_MERMAID_QUERIES=false|true       # show queries/projections\nCDS_MERMAID_DIRECTION=TB|BT|LR|RL    # layout direction of the diagram\n```\n\n----------------------------------------\n\nTITLE: Configuring PDM Service Binding in JSON\nDESCRIPTION: JSON configuration file for binding SAP Personal Data Manager service to a CAP application. Specifies application details, endpoints, and service configurations required for PDM integration.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/pdm.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fullyQualifiedApplicationName\": \"incidents-mgmt\",\n  \"fullyQualifiedModuleName\": \"incidents-mgmt-srv\",\n  \"applicationTitle\": \"PDM Incidents\",\n  \"applicationTitleKey\": \"PDM Incidents\",\n  \"applicationURL\": \"https://incidents-mgmt-srv.cfapps.eu10.hana.ondemand.com/\",\n  \"endPoints\": [\n    {\n      \"type\": \"odatav4\",\n      \"serviceName\": \"pdm-service\",\n      \"serviceTitle\": \"Incidents Management\",\n      \"serviceTitleKey\": \"IncidentsManagement\",\n      \"serviceURI\": \"pdm\",\n      \"hasGdprV4Annotations\": true,\n      \"cacheControl\": \"no-cache\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Debug CDS Lint Configuration\nDESCRIPTION: Command to show debug output for CDS lint configuration and options\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/index.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nDEBUG=lint cds lint\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom CAP Service Handler in Java\nDESCRIPTION: Shows how to create a custom event handler for a CAP service in Java using annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(\"CatalogService\")\npublic class CatalogServiceHandler implements EventHandler {\n\n  @On(/* ... */)\n  void myHandler(EventContext context) {\n    // ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding cds-mtxs Package (Shell)\nDESCRIPTION: npm command to add the @sap/cds-mtxs package as a dependency to the project.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @sap/cds-mtxs\n```\n\n----------------------------------------\n\nTITLE: Generated Interfaces for Inline Defined Types in Compiler v2\nDESCRIPTION: This CAP Java snippet demonstrates how compiler v2 generates inner interfaces for inline defined types used in services, requiring adaptation in custom code.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n// CDS compiler v2\npackage hr;\n\ninterface Person {\n    Collection<Emails> getEmails();\n    void setEmails(Collection<Emails> emails);\n\n    interface Emails {\n        String getKind();\n        void setKind(String kind);\n        String getAddress();\n        void setAddress(String address);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running App Router with Service Bindings on Windows CMD\nDESCRIPTION: Command to start the App Router with bound XSUAA service credentials using cds bind on Windows CMD.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/authentication.md#2025-04-18_snippet_27\n\nLANGUAGE: cmd\nCODE:\n```\ncds bind --exec -- npm start --prefix app/router\n```\n\n----------------------------------------\n\nTITLE: Table Per Class Strategy in CDS\nDESCRIPTION: Illustrates the table-per-class strategy for inheritance hierarchies, where each entity, including the base entity (`Grantees`), has its own table. The model is rewritten to use composition instead of inheritance.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\n```cds\nentity Grantees {\n  key name : String;\n}\nentity Users {\n  header : Association to Grantees;\n  group : Association to Groups;\n}\nentity Groups {\n  header : Association to Grantees;\n  members : Composition of many Users on members.group = $self;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customer Data Sample in CSV\nDESCRIPTION: Sample CSV data file containing customer information with personal data fields like name, email, phone, and date of birth.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/annotations.md#2025-04-18_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nID,firstName,lastName,email,phone,dateOfBirth\n1004155,Daniel,Watts,daniel.watts@demo.com,+44-555-123,1996-01-01\n1004161,Stormy,Weathers,stormy.weathers@demo.com,,1981-01-01\n1004100,Sunny,Sunshine,sunny.sunshine@demo.com,+01-555-789,1965-01-01\n```\n\n----------------------------------------\n\nTITLE: Adding Test Data (CSV)\nDESCRIPTION: CSV file content for test data to be used in the extension project for quick-turnaround tests.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/customization.md#2025-04-18_snippet_10\n\nLANGUAGE: csv\nCODE:\n```\nID;createdAt;buyer;OrderNo;currency_code;\n7e2f2640-6866-4dcf-8f4d-3027aa831cad;2019-01-31;john.doe@test.com;1;EUR\n64e718c9-ff99-47f1-8ca3-950c850777d4;2019-01-30;jane.doe@test.com;2;EUR\n```\n\n----------------------------------------\n\nTITLE: Providing Translated Texts for Countries in CSV\nDESCRIPTION: CSV content for providing German translations for the 'Countries' code list.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/common.md#2025-04-18_snippet_12\n\nLANGUAGE: csv\nCODE:\n```\ncode;locale;name;descr\nAU;de;Australien;Commonwealth Australien\nCA;de;Kanada;Canada\nCN;de;China;Volksrepublik China\nFR;de;Frankreich;Republik Frankreich\nDE;de;Deutschland;Bundesrepublik Deutschland\nIN;de;Indien;Republik Indien\nIL;de;Israel;Staat Israel\nMM;de;Myanmar;Republik der Union Myanmar\nGB;de;Vereinigtes Königreich;Vereinigtes Königreich Großbritannien und Nordirland\nUS;de;Vereinigte Staaten;Vereinigte Staaten von Amerika\nEU;de;Europäische Union;Europäische Union\n```\n\n----------------------------------------\n\nTITLE: Inserting Through Compositions via Paths in CQL\nDESCRIPTION: Shows how to insert into child entities through path expressions. The example adds an order item to the items collection of a specific order.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cds-data.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nOrderItems orderItem = OrderItems.create();\norderItem.setId(1);\norderItem.putPath(\"book.ID\", 201); // set association to book 201\n\nInsert.into(ORDERS, o -> o.filter(o.Id().eq(100)).items())\n      .entry(orderItem);\n```\n\n----------------------------------------\n\nTITLE: Logout Command\nDESCRIPTION: Command to remove locally saved authentication data and optional project settings.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/assets/customization-old.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncds logout\n```\n\n----------------------------------------\n\nTITLE: VitePress Server Output\nDESCRIPTION: Example output showing the local server information and available commands.\nSOURCE: https://github.com/cap-js/docs/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n  vitepress v1...\n\n  ➜  Local:   http://localhost:5173/docs/\n  ➜  Network: use --host to expose\n  ➜  press h to show help\n```\n\n----------------------------------------\n\nTITLE: Cloning CAP Documentation Repository\nDESCRIPTION: Command to clone the CAP documentation repository from GitHub to local machine.\nSOURCE: https://github.com/cap-js/docs/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/cap-js/docs\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Index List in Vue Template\nDESCRIPTION: This snippet renders a dynamic index list using a custom Vue component called IndexList. It passes the imported 'pages' data as a prop to the component.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/index.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<br>\n<IndexList :pages='pages' />\n```\n\n----------------------------------------\n\nTITLE: Importing Page Data in Vue Component\nDESCRIPTION: This snippet imports page data from an external TypeScript file and sets it up for use in a Vue component. It's likely used to dynamically generate a list of advanced topics.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { data as pages } from './index.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading Precompiled Models from Sidecar\nDESCRIPTION: Example log output indicating that the sidecar successfully reads and returns precompiled models from the specified '_main' directory files.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/mtxs.md#2025-04-18_snippet_8\n\nLANGUAGE: log\nCODE:\n```\n[cds] – POST /-/cds/model-provider/getCsn\n[cds] – model loaded from 3 file(s):\n\n  gen/mtx/sidecar/_main/srv/csn.json\n  gen/mtx/sidecar/_main/fts/isbn/csn.json\n  gen/mtx/sidecar/_main/fts/reviews/csn.json\n```\n\n----------------------------------------\n\nTITLE: Reference Structure Definition in JavaScript\nDESCRIPTION: Details the structure for references including support for infix filters and arguments.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cxn.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nref = {ref:[..._segment]}\n_segment = string | { id: string, args: _named, where: _xpr,\n                      groupBy: [ ...expr ], having: _xpr,\n                      orderBy: [ ...ordering_term ], limit: { rows: expr, offset: expr } }\n_named = { ... <name>:expr }\n```\n\n----------------------------------------\n\nTITLE: Example Output from Starting Development Server\nDESCRIPTION: Shows the typical output when starting the VitePress development server, including the local URL to access the documentation.\nSOURCE: https://github.com/cap-js/docs/blob/main/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n  vitepress v1.0.0...\n\n  ➜  Local:   http://localhost:5173/\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Java and JDBC Driver\nDESCRIPTION: Commands to set environment variables for the Java executable and JDBC driver paths in a Kyma pod bash session.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nexport JAVA_HOME=/layers/paketo-buildpacks_sap-machine/jre/bin/\n```\n\nLANGUAGE: sh\nCODE:\n```\nexport JDBC_DRIVER_PATH=/workspace/BOOT-INF/lib\n```\n\n----------------------------------------\n\nTITLE: Service Configuration in YAML\nDESCRIPTION: YAML configuration for service paths and protocols using the application.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncds.application.services.CatalogService.serve:\n  path: 'browse'\n  protocols:\n    - 'odata-v4'\n    - 'odata-v2'\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Checking Feature Toggles in Node.js\nDESCRIPTION: This JavaScript snippet shows an alternative way to check feature toggles in a CAP Node.js application by destructuring cds.context.features.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/feature-toggles.md#2025-04-18_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst { isbn, reviews } = cds.context.features\nif (isbn) {\n  // specific coding when feature 'isbn' is enabled...\n}\nif (reviews) {\n  // specific coding when feature 'reviews' is enabled...\n}\n// common coding...\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code ESLint Rules\nDESCRIPTION: JSON configuration to enable specific CDS lint rules in VS Code editor\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/index.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@sap/cds/valid-csv-header\": [\"warn\", \"show\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for CAP Java Properties Documentation\nDESCRIPTION: Defines the styling for the properties table and other page elements. Includes styles for the header, anchors, property groups, and responsive behavior for wider screens.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/properties.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n  .nowrap { white-space: nowrap; }\n  h1:before {\n    content: \"Java\"; display: block; font-size: 60%; margin: 0 0 .2em;\n  }\n\n  tr:hover .header-anchor, tr .header-anchor:focus { opacity: 1; margin-top: -11px; }\n  td.group { font-weight:600; }\n  th.anchor, td.anchor { border-right:none; }\n  th.prop,   td.prop { border-left:none; padding-left:0px;}\n\n  /* expand this extra wide table on big screens */\n  @media screen and (min-width: 1600px) {\n    table {\n      min-width: fit-content;\n    }\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite In-Memory Database\nDESCRIPTION: Command line example showing how to connect to SQLite's in-memory database using the sqlite3 executable.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nC:\\sqlite>sqlite3\nSQLite version ...\nEnter \".help\" for instructions\nConnected to a transient in-memory database.\nUse \".open FILENAME\" to reopen on a persistent database.\nsqlite>\n```\n\n----------------------------------------\n\nTITLE: Disabling Doc Comments in CDS Configuration\nDESCRIPTION: Configure .cdsrc.json to disable translation of doc comments to COMMENT features in the database.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/hdbcds-to-hdbtable.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hana\": {\n    \"comments\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Login with Passcode and App URL\nDESCRIPTION: Command to login to SaaS app using both passcode and specific application URL.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/assets/customization-old.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncds login -p <passcode> <app-url>\n```\n\n----------------------------------------\n\nTITLE: Subscribe Tenant API Request\nDESCRIPTION: HTTP PUT endpoint for tenant subscription with minimal request body for creating new tenant subscriptions.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /mtx/v1/provisioning/tenant/<tenantId> HTTP/1.1\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subscribedSubdomain\": \"<subdomain>\",\n  \"eventType\": \"CREATE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Liquibase Maven Dependency Configuration\nDESCRIPTION: XML configuration for adding Liquibase dependency to Maven project\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.liquibase</groupId>\n    <artifactId>liquibase-core</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Displaying CDS lint command output for outdated @sap/cds version\nDESCRIPTION: Example output from running 'cds lint' in a project directory where an outdated version of @sap/cds is used. The output shows the error message produced by the latest-cds-version rule.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/latest-cds-version.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/YOUR_PROJECT_PATH\n  1:1  error  A newer CDS version is available!  @sap/cds/latest-cds-version\n\n✖ 1 problem (1 error, 0 warnings)\n```\n\n----------------------------------------\n\nTITLE: Starting Local Documentation Server\nDESCRIPTION: Command to start the local development server for the documentation.\nSOURCE: https://github.com/cap-js/docs/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Setting Service Binding via Environment Variable\nDESCRIPTION: Demonstrates how to set a service binding using a process environment variable for ad-hoc testing.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/composition.md#2025-04-18_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nexport cds_requires_ReviewsService_credentials_url=http://localhost:4005/reviews\ncds watch bookstore\n```\n\n----------------------------------------\n\nTITLE: Column Type Definitions\nDESCRIPTION: TypeScript type definitions for column specifications including expansion, infix operations and aliases.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cqn.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype column = '*' | expr &as &cast | ref &as &(\n  { expand?: column[] } |\n  { inline?: column[] }\n) &infix\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface as { as?: name }\ninterface cast { cast?: {type:name} }\ninterface infix {\n  orderBy?  : order[]\n  where?    : expr\n  limit?    : { rows: val, offset: val }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Model Interface for Books in Java\nDESCRIPTION: Demonstrates the generated Java interface for the Books entity, representing the structure of the CDS model. It includes methods for accessing properties and associations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/persistence-services.md#2025-04-18_snippet_26\n\nLANGUAGE: java\nCODE:\n```\n@CdsName(\"my.bookshop.Books\")\npublic interface Books_ extends StructuredType<Books_> {\n  ElementRef<Integer> ID();\n  ElementRef<String> title();\n  Authors_ author();\n  Authors_ author(Function<Authors_, Predicate> filter);\n}\n```\n\n----------------------------------------\n\nTITLE: CQL to SQL Translation Example for Runtime Views\nDESCRIPTION: Shows how a CQL (CDS Query Language) statement against a runtime view is translated to SQL at execution time. The example demonstrates filtering books with low stock by author name.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSelect BooksWithLowStock where author = 'Kafka'\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT B.ID, B.TITLE, A.NAME as \"author\" FROM BOOKS AS B\n  LEFT OUTER JOIN AUTHORS AS A ON B.AUTHOR_ID = A.ID\nWHERE B.STOCK < 10 AND A.NAME = ?\n```\n\n----------------------------------------\n\nTITLE: Order Type Definition\nDESCRIPTION: TypeScript type definition for ordering specifications in queries.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cqn.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype order = expr & {\n  sort  : 'asc' | 'desc'\n  nulls : 'first' | 'last'\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Development Server\nDESCRIPTION: Run the development server to see changes to documentation in real-time as you edit files.\nSOURCE: https://github.com/cap-js/docs/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Vector Similarity Query Examples\nDESCRIPTION: Examples of querying vector similarities in Node.js and Java.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nlet embedding;\n\nlet similarBooks = await SELECT.from('Books')\n  .where`cosine_similarity(embedding, to_real_vector(${embedding})) > 0.9`\n```\n\nLANGUAGE: java\nCODE:\n```\nfloat[] embedding = embeddingModel.embed(bookDescription).content().vector();\n\nResult similarBooks = service.run(Select.from(BOOKS).where(b ->\n  CQL.cosineSimilarity(b.embedding(), CQL.vector(embedding)).gt(0.9)));\n```\n\n----------------------------------------\n\nTITLE: Login with Passcode Only\nDESCRIPTION: Command to login to SaaS app using only a passcode, which automatically determines the app from Cloud Foundry context.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/assets/customization-old.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncds login -p <passcode>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for IndexList Page Navigation\nDESCRIPTION: A Vue.js script setup that imports page data from an index data file to be used by the IndexList component for navigation.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { data as pages } from './index.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: CDI Sample Data - Namespaces\nDESCRIPTION: Sample CSV data for the Namespaces entity defining the CAP SFlight namespace.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/analytics.md#2025-04-18_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\nNamespaceID;Description\ncap.sflight;CAP SFlight\n```\n\n----------------------------------------\n\nTITLE: Representing Tuples in CSN JSON\nDESCRIPTION: Example of how tuples are represented as lists in the new CSN format.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n\"list\": [ {\"val\": 1}, {\"val\": 2}, {\"val\": 3 } ]\n```\n\n----------------------------------------\n\nTITLE: Using the CDS env Command\nDESCRIPTION: Documentation for the 'cds env' command used to display effective configuration for a given key or the entire environment. The command accepts various flags to format and filter the output.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/assets/help/cds-env.out.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> cds env --help\n```\n\n----------------------------------------\n\nTITLE: Alternative (Deprecated) Method for Annotating Annotations\nDESCRIPTION: Shows the deprecated approach of turning single values or collections into structures with artificial $value property for annotation nesting.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_19\n\nLANGUAGE: cds\nCODE:\n```\n@UI.LineItem: {\n  $value:[ /* ... */ ], @UI.Criticality: #Positive\n}\n\n@Common.Text: {\n  $value: Text, @UI.TextArrangement: #TextOnly\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for Feature Status Icons\nDESCRIPTION: Sets up scoped CSS styles for the feature status icons. Each class corresponds to a different status and applies specific colors and font styles.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/features.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.ga   { color: var(--vp-c-green-2);}\n.na   { color: gray; font-size:90%; }\n.prog { color: var(--vp-c-green-3); font-size:90%; font-weight:500; }\n.plan { color: gray; font-size:90% }\n.contrib { color: gray; font-size:90% }\n```\n\n----------------------------------------\n\nTITLE: Using LinkedCSN.foreach() Method in JavaScript\nDESCRIPTION: Examples of using the foreach() method to iterate over services and associations in a linked model.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// print the names of all services\nlet m = cds.reflect(csn)\nm.foreach ('service', s => console.log(s.name))\n\n// print the names of all Associations in Books element\nlet { Books } = m.entities()\nm.foreach ('Association', a => console.log(a.name), Books.elements)\n```\n\n----------------------------------------\n\nTITLE: Manual Resolution Comments for SQL Annotations\nDESCRIPTION: This shows the generated migration comments that require manual resolution when @sql.append annotations are removed. The comments guide developers on necessary SQL ALTER statements.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_18\n\nLANGUAGE: txt\nCODE:\n```\n== migration=3\n>>>>> Manual resolution required - insert ALTER statement(s) as described below.\n>>>>> After manual resolution delete all lines starting with >>>>>\n>>>>> Insert ALTER statement for: annotation @sql.append of artifact E has been removed (previous value: \"PERSISTENT MEMORY ON\")\n>>>>> Insert ALTER statement for: annotation @sql.append of element E:text has been removed (previous value: \"FUZZY SEARCH INDEX ON\")\n```\n\n----------------------------------------\n\nTITLE: Extended Entity Definition Example in CDS\nDESCRIPTION: Additional example of entity and type definition showing the same structure, used to reinforce the concept of type usage in CDS models.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/types.md#2025-04-18_snippet_1\n\nLANGUAGE: cds\nCODE:\n```\nentity Books {\n  key ID : UUID;\n  title  : String(111);\n  stock  : Integer;\n  price  : Price;\n}\ntype Price : Decimal;\n```\n\n----------------------------------------\n\nTITLE: Binding to Kubernetes Service Binding in CAP\nDESCRIPTION: Demonstrates how to bind a CAP application to a Kubernetes service binding named 'bookshop-auth-binding'.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncds bind -2 bookshop-auth-binding --on k8s\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud MTA Build Tool\nDESCRIPTION: Command to install the Multi-Target Application Build Tool globally via npm\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g mbt\n```\n\n----------------------------------------\n\nTITLE: Incorrect Way to Import CDS Classes\nDESCRIPTION: Demonstrates the incorrect approach of importing CDS classes by accessing internal paths, which should be avoided.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst Request = require('@sap/cds/lib/.../Request')\n```\n\n----------------------------------------\n\nTITLE: Converting CDS Model to AsyncAPI\nDESCRIPTION: Example of converting a CSN model to an AsyncAPI document.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-compile.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = cds.compile.to.asyncapi(csn_file)\n```\n\n----------------------------------------\n\nTITLE: Using CDS Model in Service Definition\nDESCRIPTION: CDS syntax for importing and using a reusable CDS model in a service definition.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/building-plugins.md#2025-04-18_snippet_3\n\nLANGUAGE: cds\nCODE:\n```\nusing { CatalogService } from 'com.sap.capire/bookshop';\n```\n\n----------------------------------------\n\nTITLE: Defining Books Entity for Localization in CDS\nDESCRIPTION: This snippet defines the Books entity in CDS to hold localized titles, which will be used for generating associated texts entities based on the CDS compiler version.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\nentity Books {\n  key ID    : UUID; //= source's primary key\n      title : localized String;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Hybrid Profile for Remote Services\nDESCRIPTION: Spring Boot application.yaml configuration for a hybrid profile that connects to a remote service through the Destination service instance.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  config.activate.on-profile: hybrid\n  sql.init.schema-locations:\n  - \"classpath:schema-nomocks.sql\"\ncds:\n  remote.services:\n  - name: API_BUSINESS_PARTNER\n    type: \"odata-v2\"\n    destination:\n      name: \"cpapp-bupa\"\n    http:\n      suffix: \"/sap/opu/odata/sap\"\n```\n\n----------------------------------------\n\nTITLE: Installing Keytar Module for Secure Authentication\nDESCRIPTION: Command to install the keytar Node.js module globally for secure token storage using system keyring.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/assets/customization-old.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g keytar\n```\n\n----------------------------------------\n\nTITLE: Personal Data Modified Event Schema in CDS\nDESCRIPTION: CDS schema definition for logging personal data modification events.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/data-privacy/audit-logging.md#2025-04-18_snippet_9\n\nLANGUAGE: cds\nCODE:\n```\nevent PersonalDataModified : LogEntry {\n  data_subject :      DataSubject;\n  object       :      DataObject;\n  attributes   : many Modification;\n  success      :      Boolean default true;\n}\n\ntype Modification {\n  name : String;\n  old  : String;\n  new  : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Status Badges Table in Markdown\nDESCRIPTION: A markdown table describing different feature status badges used in the documentation, including version indicators and feature maturity levels like Alpha, Beta, and Concept.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/learning-sources.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Badge                                   | Description                                                                                                                                                        |\n|-----------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|\\n| <Since version=\"1.2.3\" of=\"@sap/...\" /> | The marked feature is available with the given version or higher                                                                                                   |\n| <Alpha />                               | Alpha features are experimental. They may never be generally available. If released subsequently, the APIs and behavior might change                               |\n| <Beta />                                | Beta features are planned to be generally available in subsequent releases, however, APIs and their behavior are not final and may change in the general release   |\n| <Concept />                             | Concept features are ideas for potential future enhancements and an opportunity for you to give feedback. This is not a commitment to implement the feature though |\n| <Internal />                            | SAP specific features, processes, or infrastructure. Examples are _Deploy with Confidence_, _SAP product standards_, or _xMake_                                    |\n```\n\n----------------------------------------\n\nTITLE: HDI Undeploy Configuration for HANA\nDESCRIPTION: This JSON configuration specifies which artifacts should be allowed to be undeployed (removed) during an HDI deployment. By default, it includes views, indexes, constraints, draft tables, and calculation views.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-hana.md#2025-04-18_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"src/gen/**/*.hdbview\",\n  \"src/gen/**/*.hdbindex\",\n  \"src/gen/**/*.hdbconstraint\",\n  \"src/gen/**/*_drafts.hdbtable\",\n  \"src/gen/**/*.hdbcalculationview\"\n]\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code 'code' Command on macOS\nDESCRIPTION: Instructions for installing the 'code' shell command on macOS using the VS Code command palette.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-editors.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Press F1, type 'shell', and select 'Shell Command: install 'code' command in PATH'](assets/vscode/setup.png \"Press F1, type 'shell', and select 'Shell Command: install 'code' command in PATH'\"){ style=\"box-shadow: 1px 1px 5px #888888; width:450px;\" .ignore-dark}\n```\n\n----------------------------------------\n\nTITLE: Schema Definition in Plugin package.json\nDESCRIPTION: Example of schema definitions in a plugin's package.json to enable code completion for plugin configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-plugins.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"cds\": {\n  \"schema\": {\n    \"buildTaskType\": {\n      \"name\": \"new-buildTaskType\",\n      \"description\": \"A text describing the new build task type.\"\n    },\n    \"databaseType\": {\n      \"name\": \"new-databaseType\",\n      \"description\": \"A text describing the new database type.\"\n    },\n    \"cds\": {\n      \"swagger\": {    // example from cds-swagger-ui-express\n        \"description\": \"Swagger setup\",\n        \"oneOf\": [\n          ...\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring cds.linked Function in TypeScript\nDESCRIPTION: TypeScript declaration for the cds.linked function, which turns a parsed model into a LinkedCSN instance.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-reflect.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* cds.linked (csn: CSN | string) => LinkedCSN\n```\n\n----------------------------------------\n\nTITLE: CDS Model with Custom Action Definition\nDESCRIPTION: A CDS model example defining a Books entity with a bound 'review' action that takes a stars parameter and returns a Review entity.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/cqn-services/application-services.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nservice CatalogService {\n    entity Books {\n        key ID: UUID;\n        title: String;\n    } actions {\n      action review(stars: Integer) returns Reviews;\n    };\n\n    entity Reviews {\n        book : Association to Books;\n        stars: Integer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Index List Component in Vue Template\nDESCRIPTION: This Vue.js template code renders an IndexList component, passing the imported pages data as a prop.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/publishing-apis/index.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<IndexList :pages='pages' />\n```\n\n----------------------------------------\n\nTITLE: DELETE Type Definition\nDESCRIPTION: TypeScript class declaration for DELETE operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/cqn.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass DELETE { DELETE: {\n  from    : ref\n  where?  : expr\n}}\n```\n\n----------------------------------------\n\nTITLE: Extending Definitions with Anonymous Aspects in CAP JS\nDESCRIPTION: Shows how to extend a definition with an anonymous aspect, adding elements and annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ncsn = { extensions:[\n\n  // extend Foo with @foo { ..., bar: String; }\n  {\n    extend: \"Foo\",\n    '@foo': true,\n    elements: {\n      // adds a new element 'bar'\n      bar: { type: \"cds.String\", '@bar': true },\n    }\n  },\n\n]}\n```\n\n----------------------------------------\n\nTITLE: Testing CAP Service Layer with CQN Select\nDESCRIPTION: Demonstrates how to test a CatalogService by executing a CQN Select statement to verify discount application on books. Uses Spring Boot test framework with autowired CqnService.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/testing.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(SpringExtension.class)\n@SpringBootTest\npublic class CatalogServiceTest {\n\n    @Autowired\n    @Qualifier(CatalogService_.CDS_NAME)\n    private CqnService catalogService;\n\n    @Test\n    public void discountApplied() {\n        Result result = catalogService.run(Select.from(Books_.class).byId(\"51061ce3-ddde-4d70-a2dc-6314afbcc73e\"));\n\n        // book with title \"The Raven\" and a stock quantity of > 111\n        Books book = result.single(Books.class);\n\n        assertEquals(\"The Raven -- 11% discount\", book.getTitle(), \"Book was not discounted\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CDS Documentation Pages in Vue.js\nDESCRIPTION: This code snippet imports data from a file named 'index.data.ts' using Vue.js composition API. It's likely used to dynamically populate a list of documentation pages.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/index.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { data as pages } from './index.data.ts'\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Sharing Multiple Roles in a Single Service in CAP\nDESCRIPTION: Example showing a non-recommended approach where multiple roles share the same service with different access rights. This creates confusion about how users can interact with the resources.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/security/authorization.md#2025-04-18_snippet_21\n\nLANGUAGE: cds\nCODE:\n```\nservice CatalogService @(requires: 'authenticated-user') {\n   entity Books @(restrict: [\n    { grant: 'READ' },\n    { grant: 'WRITE', to: 'Vendor', where: '$user.publishers = publisher' },\n    { grant: 'WRITE', to: 'Admin' } ])\n  as projection on db.Books;\n  action doAccounting @(requires: ['Accountant', 'Admin']) ();\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CdsModel from CSN Input Stream in Java\nDESCRIPTION: Illustrates how to create a CdsModel object from a CSN JSON input stream.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/reflection-api.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nInputStream csnJson = ...;\nCdsModel model = CdsModel.read(csnJson);\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Delete Operation in Java\nDESCRIPTION: Shows how to perform a batch delete operation with multiple parameter sets. The example creates a delete statement that accepts an ID parameter and then executes it with two different parameter sets in a single batch operation.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/query-execution.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport static com.sap.cds.ql.CQL.param;\n\nCqnDelete delete = Delete.from(\"bookshop.Books\").byParams(\"ID\");\n\nMap<String, Object> paramSet1 = singletonMap(\"ID\", 101);\nMap<String, Object> paramSet1 = singletonMap(\"ID\", 102);\n\nResult result = service.run(query, asList(paramSet1, paramSet2));\nlong deletedRows = result.rowCount();\n```\n\n----------------------------------------\n\nTITLE: Example OData Response with Absolute Context URL\nDESCRIPTION: This JSON snippet illustrates the structure of an OData response with a customized absolute context URL. It shows how the @odata.context property is affected by the contextAbsoluteUrl configuration.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/odata.md#2025-04-18_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@odata.context\":\"https://your.domain.com/yourService/$metadata#Books(title,author,ID)\",\n  \"value\":[\n    {\"ID\": 201,\"title\": \"Wuthering Heights\",\"author\": \"Emily Brontë\"},\n    {\"ID\": 207,\"title\": \"Jane Eyre\",\"author\": \"Charlotte Brontë\"},\n    {\"ID\": 251,\"title\": \"The Raven\",\"author\": \"Edgar Allen Poe\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running App Router with Service Bindings\nDESCRIPTION: Examples of using cds bind to run the App Router from an approuter child directory with service bindings for different operating systems.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/hybrid-testing.md#2025-04-18_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncds bind --exec -- npm start --prefix approuter\n```\n\nLANGUAGE: cmd\nCODE:\n```\ncds bind --exec -- npm start --prefix approuter\n```\n\nLANGUAGE: powershell\nCODE:\n```\ncds bind --exec '--' npm start --prefix approuter\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Run Method\nDESCRIPTION: Example implementation of the run method for CDS Add plugin with file copying and Java detection\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/apis/cds-add.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\n  const { copy, path } = cds.utils, { mvn, readProject } = cds.add\n  await copy (path.join(__dirname, 'files/pg.yaml')).to('pg.yaml')\n  const { isJava } = readProject()\n  if (isJava) await mvn.add('postgres')\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for CAP Java Properties Page\nDESCRIPTION: Imports property data from an external file and makes it available to the template. The script defines version and properties variables that are used to display CAP Java configuration properties in the page.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/properties.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { data } from './properties.data.ts'\nconst { properties, version } = data\n</script>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Case Statement in CAP CDS (Good Example)\nDESCRIPTION: This snippet shows an improved approach by using a redundant attribute filled at write time. This method pre-calculates the category, improving read performance.\nSOURCE: https://github.com/cap-js/docs/blob/main/advanced/performance-modeling.md#2025-04-18_snippet_14\n\nLANGUAGE: cds\nCODE:\n```\nextend my.OrdersItems with {\n    category: String = case\n       when quantity > 500 then 'Large'\n       when quantity > 100 then 'Medium'\n       else 'Small'\n     end stored;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Temporal Data with Time Slice IDs in CDS\nDESCRIPTION: Example of defining an entity with temporal data and time slice IDs in CDS, which may require full table migration.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/hdbcds-to-hdbtable.md#2025-04-18_snippet_4\n\nLANGUAGE: cds\nCODE:\n```\naspect temporal {\n  validFrom : Timestamp @cds.valid.from;\n  validTo   : Timestamp @cds.valid.to;\n}\n\nentity TimeDependentData : temporal {\n  key ID  : UUID;\n  sliceId : UUID @cds.valid.key;\n  someData : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tenant Provisioning Handler\nDESCRIPTION: JavaScript module that implements a custom handler for tenant provisioning, extending the default behavior by redirecting to an admin endpoint after container creation.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/old-mtx-apis.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = (service) => {\n  service.on('UPDATE', 'tenant', async (req, next) => {\n    await next() // default implementation creating HDI container\n    return '<bookshop-srv-url>/admin'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enumeration Types in CAP JS\nDESCRIPTION: Shows how to define enumeration types with different value types and optional annotations.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n({definitions:{\n  'Gender': {enum:{\n    'male':{},\n    'female':{},\n    'non_binary': {\n          val: 'non-binary'\n        }\n  }},\n  'Status': {enum:{\n    'submitted': {val:1},\n    'fulfilled': {val:2}\n  }},\n  'Rating': {type:\"cds.Decimal\", enum:{\n    'low':    {val:0},\n    'medium': {val:50},\n    'high':   {val:100}\n  }}\n}})\n```\n\n----------------------------------------\n\nTITLE: Extending Books Entity for Compiler v1 with Texts Entity\nDESCRIPTION: This snippet shows how the Books entity is extended to include the texts entity under compiler v1, utilizing '_texts' suffix for the texts association.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_15\n\nLANGUAGE: cds\nCODE:\n```\n// CDS compiler v1\nextend entity Books with {\n  texts : Composition of many Books_texts on texts.ID=ID;\n  localized : Association to Books_texts on localized.ID=ID\n    and localized.locale = $user.locale;\n}\n\nentity Books_texts {\n  key locale : String(5);\n  key ID     : UUID;\n      title  : String;\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting Reused Definitions with Aspects\nDESCRIPTION: Example of adapting reused definitions by extending types and entities with additional fields or modifying existing ones. This demonstrates the flexibility of CDS aspects for customization.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/aspects.md#2025-04-18_snippet_8\n\nLANGUAGE: cds\nCODE:\n```\nusing { CodeList, Currencies, Languages } from 'some-reuse-package';\nextend CodeList with { descr: localized String }\nextend Currencies with { symbol: String(2) }\nextend Languages:locale with (length:15);\n```\n\n----------------------------------------\n\nTITLE: CSN Model Example in YAML\nDESCRIPTION: Shows the same CSN model structure represented in YAML format, demonstrating an alternative syntax for CSN models.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/csn.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrequires:\n  - @sap/cds/common\n  - ./db/schema\ndefinitions:\n  some.type: {type: cds.String, length: 11}\n  another.type: {type: some.type }\n  structured.type:\n    elements:\n      foo: {type: cds.Integer}\n      bar: {type: cds.String}\nextensions: [\n  - extend: Foo\n    elements:\n      bar: {type: cds.String}\n]\n```\n\n----------------------------------------\n\nTITLE: Forcing CDS-DK Installation with Maven\nDESCRIPTION: Command to force the installation of a specific version of the CDS Development Kit when building a CAP Java project. This is useful for updating the CDS-DK version in older project configurations.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/developing-applications/building.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nmvn spring-boot:run -Dcds.install-cdsdk.force=true\n```\n\n----------------------------------------\n\nTITLE: Using prepend() Method for Handler Registration\nDESCRIPTION: Demonstrates how to register handlers that need to run before existing ones using the prepend() method.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/core-services.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ncds.on('served',()=>{\n  const { SomeService } = cds.services\n  SomeService.prepend (()=>{\n    SomeService.on('READ','Foo', (req,next) => {...})\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying SAP Event Mesh binding in MTA YAML\nDESCRIPTION: YAML configuration for MTA deployment, specifying the binding to the SAP Event Mesh service instance.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/event-mesh.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: bookstore-srv\n    requires:\n      - name: <Event Mesh Service Instance - Name>\n\nresources:\n  # SAP Event Mesh\n  - name: <Event Mesh Service Instance - Name>\n    type: org.cloudfoundry.managed-service\n    parameters:\n      service: enterprise-messaging\n      service-plan: <Event Mesh Service Instance - Plan>\n```\n\n----------------------------------------\n\nTITLE: Parameterizing Destination URLs in Cloud Foundry Manifest\nDESCRIPTION: YAML configuration for Cloud Foundry manifest.yml that parameterizes the URL of a remote service using environment variables for deployment flexibility.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\napplications:\n- name: reviews\n  ...\n  env:\n    cds_requires_REVIEWS_credentials_url: ((reviews_url))\n```\n\n----------------------------------------\n\nTITLE: Correct CSV Header for Books Entity\nDESCRIPTION: This CSV snippet shows a correct header that matches the column names of the Books entity definition.\nSOURCE: https://github.com/cap-js/docs/blob/main/tools/cds-lint/rules/valid-csv-header.md#2025-04-18_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nID;title;author\n201;Wuthering Heights;Emily Brontë\n207;Jane Eyre;Charlotte Brontë\n251;The Raven;Edgar Allen Poe\n252;Eleonora;Edgar Allen Poe\n271;Catweazle;Richard Carpenter\n```\n\n----------------------------------------\n\nTITLE: Filtering Dead Outbox Entries in Java CAP Service\nDESCRIPTION: Implements an event handler that filters outbox entries based on maximum attempts configuration. Uses @After-READ handler to process DeadOutboxMessages and filters entries where attempts exceed the configured maximum.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/outbox.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(OutboxDeadLetterQueueService_.CDS_NAME)\npublic class DeadOutboxMessagesHandler implements EventHandler {\n\n\t@After(entity = DeadOutboxMessages_.CDS_NAME)\n\tpublic void filterDeadEntries(CdsReadEventContext context) {\n\t\tCdsProperties.Outbox outboxConfigs = context.getCdsRuntime().getEnvironment().getCdsProperties().getOutbox();\n\t\tList<DeadOutboxMessages> deadEntries = context\n\t\t\t\t.getResult()\n\t\t\t\t.listOf(DeadOutboxMessages.class)\n\t\t\t\t.stream()\n\t\t\t\t.filter(entry -> entry.getAttempts() >= outboxConfigs.getService(entry.getTarget()).getMaxAttempts())\n\t\t\t\t.toList();\n\n\t\tcontext.setResult(deadEntries);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers in CAP Node.js (Incorrect Approach)\nDESCRIPTION: Shows an incorrect way of registering event handlers that could lead to race conditions due to asynchronous operations.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ncds.on('served', async ()=>{\n  const db = await cds.connect.to('db') // DANGER: will cause race condition !!!\n  db.on('before',(req)=> console.log(req.event, req.path))\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Global Installation Directory on macOS/Linux\nDESCRIPTION: Shell commands to set up a custom directory for global npm installations, avoiding permission issues on macOS or Linux systems.\nSOURCE: https://github.com/cap-js/docs/blob/main/get-started/troubleshooting.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir ~/.npm-global ; npm set prefix '~/.npm-global'\nexport PATH=~/.npm-global/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup Script\nDESCRIPTION: Script setup block that imports page data from an index.data.ts file to be used in a Vue component for displaying page listings.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/working-with-cql/index.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { data as pages } from './index.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Outbox in package.json\nDESCRIPTION: JSON configuration to enable the in-memory outbox for all outboxed services. This lightweight outbox implementation keeps messages in memory and emits them only when the transaction succeeds.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requires\": {\n    \"outbox\": {\n      \"kind\": \"in-memory-outbox\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping a Recurring Background Job in CAP JS\nDESCRIPTION: Demonstrates how to stop a recurring background job by clearing the interval timer after a certain period.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-tx.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlet job = cds.spawn({ every:111 }, ...)\nawait sleep (11111)\nclearInterval (job.timer) // stops the background job loop\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Images in values.yaml\nDESCRIPTION: Demonstrates how to configure container image settings in the values.yaml file.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-kyma.md#2025-04-18_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nrepository: my-repo.docker.io # container repo name\ntag: latest # optional container image version tag\n```\n\n----------------------------------------\n\nTITLE: Importing SAP S/4HANA API Specification\nDESCRIPTION: Command to import downloaded EDMX specification file into CDS model\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/messaging/s4.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncds import <downloaded edmx file>\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Foundry CLI Plugins\nDESCRIPTION: Commands to add and install required CF CLI plugins for MTA deployment\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/deployment/to-cf.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncf add-plugin-repo CF-Community https://plugins.cloudfoundry.org\ncf install-plugin multiapps\ncf install-plugin html5-plugin\n```\n\n----------------------------------------\n\nTITLE: Exporting CAP Service to EDMX - PowerShell\nDESCRIPTION: Command to compile and export a CAP service definition to EDMX format using PowerShell, outputting to a destination folder.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/using-services.md#2025-04-18_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ncds compile srv -s OrdersService -2 edmx -o dest/\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Profile via Environment Variable (Mac/Linux)\nDESCRIPTION: Demonstrates setting a custom profile using an environment variable on Mac/Linux systems.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-env.md#2025-04-18_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nCDS_ENV=my-custom-profile cds run\n```\n\n----------------------------------------\n\nTITLE: Injecting AuthorizationService in Spring\nDESCRIPTION: Demonstrates how to inject the AuthorizationService in a Spring application using dependency injection.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/migration.md#2025-04-18_snippet_26\n\nLANGUAGE: java\nCODE:\n```\n@Autowire\nAuthorizationService authService;\n```\n\n----------------------------------------\n\nTITLE: Deploying Database Changes with CDS CLI\nDESCRIPTION: This snippet demonstrates how to use the `cds deploy` command to generate a delta DDL script from previous model versions to the current model. The command outputs the resultant SQL script to a specified file location.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/databases-postgres.md#2025-04-18_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncds deploy --profile pg --dry --delta-from srv/src/main/resources/db/changelog/v1/model.csn --out \\\nsrv/src/main/resources/db/changelog/v2/model.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Application for Provisioning Only in application.yaml\nDESCRIPTION: This YAML configuration disables extensibility and toggles in the Java application, making it aware of the provisioning-only setup. This results in improved performance as CSN and EDMX metadata are loaded from the JAR instead of the MTX Sidecar.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/multitenancy/index.md#2025-04-18_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\ncds:\n  model:\n    provider:\n      extensibility: false\n      toggles: false\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Status Definition\nDESCRIPTION: YAML frontmatter block defining the status of the documentation as released.\nSOURCE: https://github.com/cap-js/docs/blob/main/about/assets/too-busy.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nstatus: released\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Dead Letter Queue Actions in JavaScript\nDESCRIPTION: JavaScript implementation of the revive and delete actions for the outbox dead letter queue. These actions allow administrators to either retry failed messages by resetting the attempt counter or permanently remove them from the queue.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/outbox.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = class OutboxDeadLetterQueueService extends cds.ApplicationService {\n  async init() {\n    const { DeadOutboxMessages } = this.entities\n\n    // Only show messages that reached the maximum attempts\n    this.before('READ', DeadOutboxMessages, req => {\n      const maxAttempts = cds.env.requires?.outbox?.maxAttempts ?? 20\n      req.query.where(`attempts >= ${maxAttempts}`)\n    })\n\n    // Revive a message (reset attempts to 0)\n    this.on('revive', DeadOutboxMessages, async req => {\n      return UPDATE(DeadOutboxMessages, req.params[0]).with({ attempts: 0 })\n    })\n\n    // Delete a message\n    this.on('delete', DeadOutboxMessages, async req => {\n      return DELETE(DeadOutboxMessages, req.params[0])\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Configuration with Alternative Names in CDS\nDESCRIPTION: Demonstrates how to configure a service with a lookup name different from the service definition's name, and how to access it through cds.requires.\nSOURCE: https://github.com/cap-js/docs/blob/main/node.js/cds-facade.md#2025-04-18_snippet_7\n\nLANGUAGE: cds\nCODE:\n```\nservice ReviewsService {}\n```\n\n----------------------------------------\n\nTITLE: Development Workflow Commands\nDESCRIPTION: Typical development cycle commands for extending and activating changes after initial login.\nSOURCE: https://github.com/cap-js/docs/blob/main/guides/extensibility/assets/customization-old.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncds extend\n# develop your extension\ncds activate\n# develop your extension\ncds activate\n# ...\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Type in CDS Service\nDESCRIPTION: This CDS snippet demonstrates how an inline defined type is used within a service. The compiler will generate a corresponding EntityType for any anonymous types to maintain OData compliance.\nSOURCE: https://github.com/cap-js/docs/blob/main/cds/compiler/v2.md#2025-04-18_snippet_21\n\nLANGUAGE: cds\nCODE:\n```\nservice hr {\n  entity Person {\n    emails: many {\n        key kind    : String;\n            address : String;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @WithSpan Annotation for Custom Spans in CAP Java\nDESCRIPTION: Example of using OpenTelemetry's @WithSpan annotation to create custom spans around event handlers in a CAP Java service.\nSOURCE: https://github.com/cap-js/docs/blob/main/java/operating-applications/observability.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\nclass CatalogServiceHandler implements EventHandler {\n\n   @Before(entity = Books_.CDS_NAME)\n   @WithSpan\n   public void beforeAddReview(AddReviewContext context) {\n      // ...\n   }\n}\n```"
  }
]