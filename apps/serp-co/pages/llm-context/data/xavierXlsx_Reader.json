[
  {
    "owner": "xavier",
    "repo": "xlsx_reader",
    "content": "TITLE: Loading XLSX from file system - Elixir\nDESCRIPTION: This code snippet shows how to load an XLSX file from the file system using `XlsxReader.open` and how to retrieve sheet names and sheet data. The `XlsxReader.open` function returns a tuple with `:ok` and the package, or an error.\nSOURCE: https://github.com/xavier/xlsx_reader/blob/master/README.md#_snippet_1\n\nLANGUAGE: Elixir\nCODE:\n```\n{:ok, package} = XlsxReader.open(\"test.xlsx\")\n\nXlsxReader.sheet_names(package)\n# [\"Sheet 1\", \"Sheet 2\", \"Sheet 3\"]\n\n{:ok, rows} = XlsxReader.sheet(package, \"Sheet 1\")\n# [\n#   [\"Date\", \"Temperature\"],\n#   [~D[2019-11-01], 8.4],\n#   [~D[2019-11-02], 7.5],\n#   ...\n# ]\n```\n\n----------------------------------------\n\nTITLE: Loading all sheets at once - Elixir\nDESCRIPTION: This code shows how to load all sheets from the XLSX package at once using `XlsxReader.sheets`. The function returns a list of tuples, where each tuple contains the sheet name and the sheet data.\nSOURCE: https://github.com/xavier/xlsx_reader/blob/master/README.md#_snippet_3\n\nLANGUAGE: Elixir\nCODE:\n```\n{:ok, sheets} = XlsxReader.sheets(package)\n# [\n#   {\"Sheet 1\", [[\"Date\", \"Temperature\"], ...]},\n#   {\"Sheet 2\", [...]},\n#   ...\n# ]\n```\n\n----------------------------------------\n\nTITLE: Loading XLSX from memory - Elixir\nDESCRIPTION: This snippet demonstrates loading an XLSX file from memory. It first reads the file content into a binary string and then uses `XlsxReader.open` with the `:binary` source option to load the data. This is useful when the XLSX data is not directly available as a file.\nSOURCE: https://github.com/xavier/xlsx_reader/blob/master/README.md#_snippet_2\n\nLANGUAGE: Elixir\nCODE:\n```\nblob = File.read!(\"test.xlsx\")\n\n{:ok, package} = XlsxReader.open(blob, source: :binary)\n```\n\n----------------------------------------\n\nTITLE: Loading all sheets concurrently - Elixir\nDESCRIPTION: This code demonstrates loading all sheets concurrently using `XlsxReader.async_sheets`. This can improve performance when dealing with large XLSX files by processing sheets in parallel.\nSOURCE: https://github.com/xavier/xlsx_reader/blob/master/README.md#_snippet_5\n\nLANGUAGE: Elixir\nCODE:\n```\n{:ok, sheets} = XlsxReader.async_sheets(package)\n# [\n#   {\"Sheet 1\", [[\"Date\", \"Temperature\"], ...]},\n#   {\"Sheet 2\", [...]},\n#   ...\n# ]\n```\n\n----------------------------------------\n\nTITLE: Loading sheets selectively - Elixir\nDESCRIPTION: This snippet shows how to load sheets selectively using the `only` and `except` options with `XlsxReader.sheets`. This allows filtering the sheets to be loaded based on their names using strings or regular expressions.\nSOURCE: https://github.com/xavier/xlsx_reader/blob/master/README.md#_snippet_4\n\nLANGUAGE: Elixir\nCODE:\n```\n{:ok, sheets} = XlsxReader.sheets(package, only: [\"Parameters\", ~r/Sheet \\d+/], except: [\"Sheet 2\"])\n# [\n#   {\"Parameters\", [...]},\n#   {\"Sheet 1\", [...]},\n#   {\"Sheet 3\", [...]},\n#   {\"Sheet 4\", [...]},\n#   ...\n# ]\n```\n\n----------------------------------------\n\nTITLE: Accessing cell formulas - Elixir\nDESCRIPTION: This example demonstrates how to access cell formulas by setting the `cell_data_format` option to `:cell` when calling `XlsxReader.sheet`.  Each cell is returned as a `%Cell{}` struct, which includes the cell's value, formula (if present), and reference.\nSOURCE: https://github.com/xavier/xlsx_reader/blob/master/README.md#_snippet_7\n\nLANGUAGE: Elixir\nCODE:\n```\n{:ok, rows} = XlsxReader.sheet(package, \"Sheet 1\", cell_data_format: :cell)\n# [\n#   [%Cell{value: 1234.0, formula: \"SUM(B1, B10)\", ref: \"A1\"}, ...],\n#   ...\n# ]\n```\n\n----------------------------------------\n\nTITLE: Using arbitrary precision numbers - Elixir\nDESCRIPTION: This snippet shows how to use arbitrary precision numbers by setting the `number_type` option to `Decimal` when calling `XlsxReader.sheet`. This requires the `decimal` library to be installed. It converts numbers to `Decimal` structs.\nSOURCE: https://github.com/xavier/xlsx_reader/blob/master/README.md#_snippet_6\n\nLANGUAGE: Elixir\nCODE:\n```\n{:ok, rows} = XlsxReader.sheet(package, \"Sheet 1\", number_type: Decimal)\n# [\n#   [\"Date\", \"Temperature\"],\n#   [~D[2019-11-01], %Decimal{coef: 84, exp: -1, sign: 1}],\n#   [~D[2019-11-02], %Decimal{coef: 75, exp: -1, sign: 1}],\n#   ...\n# ]\n```\n\n----------------------------------------\n\nTITLE: Adding XlsxReader dependency - Elixir\nDESCRIPTION: This code snippet demonstrates how to add the `xlsx_reader` library as a dependency to an Elixir project using the `mix.exs` file. It specifies the dependency and version constraint.\nSOURCE: https://github.com/xavier/xlsx_reader/blob/master/README.md#_snippet_0\n\nLANGUAGE: Elixir\nCODE:\n```\ndef deps do\n  [\n    {:xlsx_reader, \"~> 0.8.0\"}\n  ]\nend\n```"
  }
]