[
  {
    "owner": "laravel",
    "repo": "docs",
    "content": "TITLE: Generating Model with Controller and Form Requests in Laravel\nDESCRIPTION: Commands to create an Eloquent model with a resource controller and form request classes for complete CRUD functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Generate a model, FlightController resource class, and form request classes...\nphp artisan make:model Flight --controller --resource --requests\nphp artisan make:model Flight -crR\n```\n\n----------------------------------------\n\nTITLE: Using config() function to access configuration in Laravel PHP\nDESCRIPTION: The config() function gets or sets configuration values using dot notation. It can retrieve values with optional defaults or set values for the current request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_79\n\nLANGUAGE: php\nCODE:\n```\n$value = config('app.timezone');\n```\n\nLANGUAGE: php\nCODE:\n```\n$value = config('app.timezone', $default);\n```\n\nLANGUAGE: php\nCODE:\n```\nconfig(['app.debug' => true]);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Route in Laravel\nDESCRIPTION: Demonstrates how to define a simple route in Laravel that responds to a GET request. The route accepts a URI and a closure, providing a simple method of defining routes and behavior.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/greeting', function () {\n    return 'Hello World';\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching and Managing Job Batches in Laravel\nDESCRIPTION: Implementation of dispatching a batch of jobs using Laravel's Bus facade, including defining various callback methods that execute at different stages of the batch's lifecycle.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\ImportCsv;\nuse Illuminate\\Bus\\Batch;\nuse Illuminate\\Support\\Facades\\Bus;\nuse Throwable;\n\n$batch = Bus::batch([\n    new ImportCsv(1, 100),\n    new ImportCsv(101, 200),\n    new ImportCsv(201, 300),\n    new ImportCsv(301, 400),\n    new ImportCsv(401, 500),\n])->before(function (Batch $batch) {\n    // The batch has been created but no jobs have been added...\n})->progress(function (Batch $batch) {\n    // A single job has completed successfully...\n})->then(function (Batch $batch) {\n    // All jobs completed successfully...\n})->catch(function (Batch $batch, Throwable $e) {\n    // First batch job failure detected...\n})->finally(function (Batch $batch) {\n    // The batch has finished executing...\n})->dispatch();\n\nreturn $batch->id;\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-Many Polymorphic Relationship in Laravel\nDESCRIPTION: This code snippet shows how to implement a one-to-many polymorphic relationship in Laravel. It demonstrates the model structure for 'Comment', 'Post', and 'Video' models, where both 'Post' and 'Video' can have multiple associated 'Comment' models.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\nclass Comment extends Model\n{\n    /**\n     * Get the parent commentable model (post or video).\n     */\n    public function commentable(): MorphTo\n    {\n        return $this->morphTo();\n    }\n}\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphMany;\n\nclass Post extends Model\n{\n    /**\n     * Get all of the post's comments.\n     */\n    public function comments(): MorphMany\n    {\n        return $this->morphMany(Comment::class, 'commentable');\n    }\n}\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphMany;\n\nclass Video extends Model\n{\n    /**\n     * Get all of the video's comments.\n     */\n    public function comments(): MorphMany\n    {\n        return $this->morphMany(Comment::class, 'commentable');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Hashing Passwords in a Laravel Controller\nDESCRIPTION: Example of a Laravel controller method that hashes a password using the Hash facade's make method before saving it to a user model. This demonstrates the proper way to hash passwords in a user update scenario.\nSOURCE: https://github.com/laravel/docs/blob/12.x/hashing.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\n\nclass PasswordController extends Controller\n{\n    /**\n     * Update the password for the user.\n     */\n    public function update(Request $request): RedirectResponse\n    {\n        // Validate the new password length...\n\n        $request->user()->fill([\n            'password' => Hash::make($request->newPassword)\n        ])->save();\n\n        return redirect('/profile');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving or Creating Models with firstOrCreate and firstOrNew in Laravel\nDESCRIPTION: Examples of using Laravel Eloquent's firstOrCreate method to retrieve a record or create it if not found, and firstOrNew method to retrieve a record or instantiate a new model instance without persisting it.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Flight;\n\n// Retrieve flight by name or create it if it doesn't exist...\n$flight = Flight::firstOrCreate([\n    'name' => 'London to Paris'\n]);\n\n// Retrieve flight by name or create it with the name, delayed, and arrival_time attributes...\n$flight = Flight::firstOrCreate(\n    ['name' => 'London to Paris'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n\n// Retrieve flight by name or instantiate a new Flight instance...\n$flight = Flight::firstOrNew([\n    'name' => 'London to Paris'\n]);\n\n// Retrieve flight by name or instantiate with the name, delayed, and arrival_time attributes...\n$flight = Flight::firstOrNew(\n    ['name' => 'Tokyo to Sydney'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n```\n\n----------------------------------------\n\nTITLE: Reset Keys with `values()` in PHP\nDESCRIPTION: The `values()` method returns a new collection with the keys reset to consecutive integers, starting from 0. This is useful for re-indexing a collection after filtering or manipulation. Requires a Laravel Collection instance with potentially non-sequential or non-integer keys.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_140\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([\n    10 => ['product' => 'Desk', 'price' => 200],\n    11 => ['product' => 'Desk', 'price' => 200],\n]);\n\n$values = $collection->values();\n\n$values->all();\n\n/*\n    [\n        0 => ['product' => 'Desk', 'price' => 200],\n        1 => ['product' => 'Desk', 'price' => 200],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Testing Event Dispatching in Laravel\nDESCRIPTION: Shows how to use Laravel's testing helpers to assert that events were dispatched correctly. Includes examples for Pest and PHPUnit testing styles.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Events\\OrderFailedToShip;\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Support\\Facades\\Event;\n\ntest('orders can be shipped', function () {\n    Event::fake();\n\n    // Perform order shipping...\n\n    // Assert that an event was dispatched...\n    Event::assertDispatched(OrderShipped::class);\n\n    // Assert an event was dispatched twice...\n    Event::assertDispatched(OrderShipped::class, 2);\n\n    // Assert an event was not dispatched...\n    Event::assertNotDispatched(OrderFailedToShip::class);\n\n    // Assert that no events were dispatched...\n    Event::assertNothingDispatched();\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse App\\Events\\OrderFailedToShip;\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Support\\Facades\\Event;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * Test order shipping.\n     */\n    public function test_orders_can_be_shipped(): void\n    {\n        Event::fake();\n\n        // Perform order shipping...\n\n        // Assert that an event was dispatched...\n        Event::assertDispatched(OrderShipped::class);\n\n        // Assert an event was dispatched twice...\n        Event::assertDispatched(OrderShipped::class, 2);\n\n        // Assert an event was not dispatched...\n        Event::assertNotDispatched(OrderFailedToShip::class);\n\n        // Assert that no events were dispatched...\n        Event::assertNothingDispatched();\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nEvent::assertDispatched(function (OrderShipped $event) use ($order) {\n    return $event->order->id === $order->id;\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nEvent::assertListening(\n    OrderShipped::class,\n    SendShipmentNotification::class\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Named Routes in Laravel\nDESCRIPTION: Demonstrates how to assign names to routes in Laravel using the 'name' method, allowing for convenient URL generation and redirects.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/user/profile', function () {\n    // ...\n})->name('profile');\n\nRoute::get(\n    '/user/profile',\n    [UserProfileController::class, 'show']\n)->name('profile');\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Authentication Middleware\nDESCRIPTION: Demonstrates how to use Laravel's auth middleware to restrict route access to only authenticated users. This is the recommended way to protect routes that require authentication.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/flights', function () {\n    // Only authenticated users may access this route...\n})->middleware('auth');\n```\n\n----------------------------------------\n\nTITLE: Array of Where Conditions\nDESCRIPTION: Shows how to pass multiple where conditions as an array to filter users based on status and subscription criteria.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')->where([\n    ['status', '=', '1'],\n    ['subscribed', '<>', '1'],\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Extending a Blade Layout in Laravel\nDESCRIPTION: Demonstrates how to extend a parent Blade layout and inject content into its sections using @extends, @section, and @yield directives.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_92\n\nLANGUAGE: blade\nCODE:\n```\n@extends('layouts.app')\n\n@section('title', 'Page Title')\n\n@section('sidebar')\n    @@parent\n\n    <p>This is appended to the master sidebar.</p>\n@endsection\n\n@section('content')\n    <p>This is my body content.</p>\n@endsection\n```\n\n----------------------------------------\n\nTITLE: Retrieving Models in Laravel Eloquent\nDESCRIPTION: Demonstrates basic model retrieval operations using Eloquent's query builder interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Flight;\n\nforeach (Flight::all() as $flight) {\n    echo $flight->name;\n}\n\n$flights = Flight::where('active', 1)\n    ->orderBy('name')\n    ->take(10)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Paginating Eloquent Results in Laravel\nDESCRIPTION: These PHP snippets demonstrate various ways to paginate Eloquent query results, including basic pagination, pagination with constraints, and cursor pagination.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = User::paginate(15);\n\n$users = User::where('votes', '>', 100)->paginate(15);\n\n$users = User::where('votes', '>', 100)->simplePaginate(15);\n\n$users = User::where('votes', '>', 100)->cursorPaginate(15);\n```\n\n----------------------------------------\n\nTITLE: Defining an Accessor in Laravel Eloquent\nDESCRIPTION: Example of defining an accessor method for the first_name attribute that capitalizes the first letter of the name when accessed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Casts\\Attribute;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Get the user's first name.\n     */\n    protected function firstName(): Attribute\n    {\n        return Attribute::make(\n            get: fn (string $value) => ucfirst($value),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Soft Deleted Records from Unique Validation\nDESCRIPTION: Example showing how to exclude soft deleted records from uniqueness checks using the 'withoutTrashed' method. This ensures that soft deleted records don't interfere with uniqueness validation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_66\n\nLANGUAGE: php\nCODE:\n```\nRule::unique('users')->withoutTrashed();\n```\n\n----------------------------------------\n\nTITLE: Defining Gates in Laravel's AppServiceProvider\nDESCRIPTION: Example of defining a gate in the boot method of the AppServiceProvider to determine if a user can update a Post model by comparing user IDs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Gate;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Gate::define('update-post', function (User $user, Post $post) {\n        return $user->id === $post->user_id;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship in Laravel Eloquent\nDESCRIPTION: Implementation of a one-to-one relationship between User and Phone models. The User model defines a phone method that returns a HasOne relationship, allowing retrieval of the associated phone record.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasOne;\n\nclass User extends Model\n{\n    /**\n     * Get the phone associated with the user.\n     */\n    public function phone(): HasOne\n    {\n        return $this->hasOne(Phone::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serialize Method for Custom Cast\nDESCRIPTION: This shows the definition of a `serialize` method that can be implemented to define how custom cast attributes are serialzed when the model is cast to array or JSON.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the serialized representation of the value.\n *\n * @param  array<string, mixed>  $attributes\n */\npublic function serialize(\n    Model $model,\n    string $key,\n    mixed $value,\n    array $attributes,\n): string {\n    return (string) $value;\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Metadata to Stripe Checkout for Order Tracking\nDESCRIPTION: Example of creating a pending order and providing its ID as metadata to Stripe Checkout. This allows for associating the completed purchase with the corresponding order after checkout.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Cart;\nuse App\\Models\\Order;\nuse Illuminate\\Http\\Request;\n\nRoute::get('/cart/{cart}/checkout', function (Request $request, Cart $cart) {\n    $order = Order::create([\n        'cart_id' => $cart->id,\n        'price_ids' => $cart->price_ids,\n        'status' => 'incomplete',\n    ]);\n\n    return $request->user()->checkout($order->price_ids, [\n        'success_url' => route('checkout-success').'?session_id={CHECKOUT_SESSION_ID}',\n        'cancel_url' => route('checkout-cancel'),\n        'metadata' => ['order_id' => $order->id],\n    ]);\n})->name('checkout');\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Request Authorization in Laravel\nDESCRIPTION: Demonstrates how to implement authorization logic in form requests using the authorize method to check user permissions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Comment;\n\n/**\n * Determine if the user is authorized to make this request.\n */\npublic function authorize(): bool\n{\n    $comment = Comment::find($this->route('comment'));\n\n    return $comment && $this->user()->can('update', $comment);\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Conditional Exclusion in Laravel Validation\nDESCRIPTION: Demonstrates how to use Rule::excludeIf for complex conditional exclusion logic in Laravel validation. The example shows both boolean and closure-based exclusion rules.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\n\nValidator::make($request->all(), [\n    'role_id' => Rule::excludeIf($request->user()->is_admin),\n]);\n\nValidator::make($request->all(), [\n    'role_id' => Rule::excludeIf(fn () => $request->user()->is_admin),\n]);\n```\n\n----------------------------------------\n\nTITLE: Syncing Associations in Laravel Eloquent\nDESCRIPTION: Explains how to use the sync() method to update many-to-many relationships. It covers syncing with and without additional pivot table data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_102\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->sync([1, 2, 3]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->sync([1 => ['expires' => true], 2, 3]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->syncWithPivotValues([1, 2, 3], ['active' => true]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->syncWithoutDetaching([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Returning a Blade View with Data from a Route\nDESCRIPTION: Example of how to return a Blade view from a Laravel route with data passed to the view using the global 'view' helper.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function () {\n    return view('greeting', ['name' => 'Finn']);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Str::contains for String Content Checking in PHP\nDESCRIPTION: The Str::contains method determines if the given string contains the specified value. It supports case-sensitive searching by default and can check for multiple values using an array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$contains = Str::contains('This is my name', 'my');\n\n// true\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$contains = Str::contains('This is my name', ['my', 'foo']);\n\n// true\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$contains = Str::contains('This is my name', 'MY', ignoreCase: true);\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Testing Laravel Lottery Outcomes with AlwaysWin, AlwaysLose, and Fixed Sequences in PHP\nDESCRIPTION: Provides methods to override Lottery behavior during testing. These static methods allow forcing the Lottery to always win, always lose, or follow a fixed sequence of results, improving test determinism. The determineResultsNormally method resets Lottery to default probabilistic behavior. These approaches eliminate randomness during tests, removing flakiness. Dependencies include the Lottery class. Use cases involve simulating all possible Lottery outcomes for assertions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_134\n\nLANGUAGE: php\nCODE:\n```\n// Lottery will always win...\\nLottery::alwaysWin();\\n\\n// Lottery will always lose...\\nLottery::alwaysLose();\\n\\n// Lottery will win then lose, and finally return to normal behavior...\\nLottery::fix([true, false]);\\n\\n// Lottery will return to normal behavior...\\nLottery::determineResultsNormally();\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Resource Controllers\nDESCRIPTION: Example of registering multiple resource controllers at once in Laravel using the resources method, which allows defining several resource routes in a single call.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nRoute::resources([\n    'photos' => PhotoController::class,\n    'posts' => PostController::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Database Reset Test Example - PHPUnit\nDESCRIPTION: Example showing how to use RefreshDatabase trait in PHPUnit tests to reset database state between tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    use RefreshDatabase;\n\n    /**\n     * A basic functional test example.\n     */\n    public function test_basic_example(): void\n    {\n        $response = $this->get('/');\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Migration in Laravel\nDESCRIPTION: Use the Artisan command to generate a new database migration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:migration create_flights_table\n```\n\n----------------------------------------\n\nTITLE: Performing Joins in Laravel Query Builder\nDESCRIPTION: Explains various types of joins in Laravel's query builder, including inner join, left join, right join, cross join, and advanced join clauses. It also covers subquery joins and lateral joins.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\n$users = DB::table('users')\n    ->join('contacts', 'users.id', '=', 'contacts.user_id')\n    ->join('orders', 'users.id', '=', 'orders.user_id')\n    ->select('users.*', 'contacts.phone', 'orders.price')\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n\n$users = DB::table('users')\n    ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$sizes = DB::table('sizes')\n    ->crossJoin('colors')\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\nDB::table('users')\n    ->join('contacts', function (JoinClause $join) {\n        $join->on('users.id', '=', 'contacts.user_id')->orOn(/* ... */);\n    })\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\nDB::table('users')\n    ->join('contacts', function (JoinClause $join) {\n        $join->on('users.id', '=', 'contacts.user_id')\n            ->where('contacts.user_id', '>', 5);\n    })\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$latestPosts = DB::table('posts')\n    ->select('user_id', DB::raw('MAX(created_at) as last_post_created_at'))\n    ->where('is_published', true)\n    ->groupBy('user_id');\n\n$users = DB::table('users')\n    ->joinSub($latestPosts, 'latest_posts', function (JoinClause $join) {\n        $join->on('users.id', '=', 'latest_posts.user_id');\n    })->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$latestPosts = DB::table('posts')\n    ->select('id as post_id', 'title as post_title', 'created_at as post_created_at')\n    ->whereColumn('user_id', 'users.id')\n    ->orderBy('created_at', 'desc')\n    ->limit(3);\n\n$users = DB::table('users')\n    ->joinLateral($latestPosts, 'latest_posts')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relationship in Laravel Eloquent\nDESCRIPTION: Implementation of a one-to-many relationship between Post and Comment models. The Post model defines a comments method that returns a HasMany relationship, allowing retrieval of associated comments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\nclass Post extends Model\n{\n    /**\n     * Get the comments for the blog post.\n     */\n    public function comments(): HasMany\n    {\n        return $this->hasMany(Comment::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Groups with Middleware in Laravel\nDESCRIPTION: Shows how to define route groups in Laravel and assign middleware to all routes within the group using the 'middleware' method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nRoute::middleware(['first', 'second'])->group(function () {\n    Route::get('/', function () {\n        // Uses first & second middleware...\n    });\n\n    Route::get('/user/profile', function () {\n        // Uses first & second middleware...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Related Models\nDESCRIPTION: Examples of using withCount to count related models without loading them, including multiple relations and custom constraints.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_69\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\n$posts = Post::withCount('comments')->get();\n\nforeach ($posts as $post) {\n    echo $post->comments_count;\n}\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Form Implementation in Blade\nDESCRIPTION: Example showing how to include CSRF token in HTML forms using Blade's @csrf directive or manual hidden input field.\nSOURCE: https://github.com/laravel/docs/blob/12.x/csrf.md#2025-04-21_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<form method=\"POST\" action=\"/profile\">\n    @csrf\n\n    <!-- Equivalent to... -->\n    <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Sending Multi-Part Requests with File Attachments\nDESCRIPTION: Shows how to send multi-part requests with file attachments using Laravel's HTTP Client.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::attach(\n    'attachment', file_get_contents('photo.jpg'), 'photo.jpg', ['Content-Type' => 'image/jpeg']\n)->post('http://example.com/attachments');\n\n$photo = fopen('photo.jpg', 'r');\n\n$response = Http::attach(\n    'attachment', $photo, 'photo.jpg'\n)->post('http://example.com/attachments');\n```\n\n----------------------------------------\n\nTITLE: Where Clauses with Different Operators\nDESCRIPTION: Examples of where clauses using various comparison operators including greater than or equal, not equal, and LIKE operator.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->where('votes', '>=', 100)\n    ->get();\n\n$users = DB::table('users')\n    ->where('votes', '<>', 100)\n    ->get();\n\n$users = DB::table('users')\n    ->where('name', 'like', 'T%')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Executing SELECT Query in Laravel Controller\nDESCRIPTION: Shows how to execute a raw SQL SELECT query in a Laravel controller using the DB facade. It demonstrates parameter binding and returning the results to a view.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\View\\View;\n\nclass UserController extends Controller\n{\n    /**\n     * Show a list of all of the application's users.\n     */\n    public function index(): View\n    {\n        $users = DB::select('select * from users where active = ?', [1]);\n\n        return view('user.index', ['users' => $users]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-Many Relationship in Laravel\nDESCRIPTION: Example of adding constraints to a one-to-many relationship query. This code finds a post with ID 1, then retrieves the first comment with the title 'foo' by chaining a where condition.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$comment = Post::find(1)->comments()\n    ->where('title', 'foo')\n    ->first();\n```\n\n----------------------------------------\n\nTITLE: Casting Arrays of Enums in Eloquent\nDESCRIPTION: This code snippet shows how to cast an attribute to an array of enums using `AsEnumCollection`. It utilizes the `AsEnumCollection` cast provided by Laravel to store an array of `ServerStatus` enums.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Enums\\ServerStatus;\nuse Illuminate\\Database\\Eloquent\\Casts\\AsEnumCollection;\n\n/**\n * Get the attributes that should be cast.\n *\n * @return array<string, string>\n */\nprotected function casts(): array\n{\n    return [\n        'statuses' => AsEnumCollection::of(ServerStatus::class),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Observer with Database Transaction Support\nDESCRIPTION: Shows how to implement an observer that handles events after database transaction commitment by implementing the ShouldHandleEventsAfterCommit interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_81\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Observers;\n\nuse App\\Models\\User;\nuse Illuminate\\Contracts\\Events\\ShouldHandleEventsAfterCommit;\n\nclass UserObserver implements ShouldHandleEventsAfterCommit\n{\n    /**\n     * Handle the User \"created\" event.\n     */\n    public function created(User $user): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Route Binding with Route::bind Method in PHP\nDESCRIPTION: This snippet demonstrates how to define custom model binding resolution logic using the Route::bind method in Laravel's AppServiceProvider. It allows you to specify how to retrieve a User model by name instead of the default ID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Route;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Route::bind('user', function (string $value) {\n        return User::where('name', $value)->firstOrFail();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to GET Requests\nDESCRIPTION: Demonstrates different ways to add query parameters to GET requests using Laravel's HTTP Client.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::get('http://example.com/users', [\n    'name' => 'Taylor',\n    'page' => 1,\n]);\n\nHttp::retry(3, 100)->withQueryParameters([\n    'name' => 'Taylor',\n    'page' => 1,\n])->get('http://example.com/users')\n```\n\n----------------------------------------\n\nTITLE: Implementing Arrayable and JsonSerializable for Value Objects (PHP)\nDESCRIPTION: Defines a value object class (`App\\ValueObjects\\Option`) intended for use with the `AsCollection::of()` cast. It implements `Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` to control how instances are converted to arrays and serialized back into JSON for database storage. This is necessary for objects used in collection item mapping.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\ValueObjects;\n\nuse Illuminate\\Contracts\\Support\\Arrayable;\nuse JsonSerilizable;\n\nclass Option implements Arrayable, JsonSerializable\n{\n    /**\n     * Create a new Option instance.\n     */\n    public function __construct(\n        public string $name,\n        public mixed $value,\n        public bool $isLocked = false\n    ) {\n        //\n    }\n\n    /**\n     * Get the instance as an array.\n     *\n     * @return array{name: string, data: string, is_locked: bool}\n     */\n    public function toArray(): array\n    {\n        return [\n            'name' => $this->name,\n            'value' => $this->value,\n            'is_locked' => $this->isLocked,\n        ];\n    }\n\n    /**\n     * Specify the data which should be serialized to JSON.\n     *\n     * @return array{name: string, data: string, is_locked: bool}\n     */\n    public function jsonSerialize(): array\n    {\n        return $this->toArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Attribute Presence in Laravel Tests\nDESCRIPTION: Shows how to test for presence or absence of JSON attributes using has(), missing(), hasAll(), missingAll() and hasAny() methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJson(fn (AssertableJson $json) =>\n    $json->has('data')\n        ->missing('message')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mass Prunable Models in Laravel\nDESCRIPTION: Implementation of MassPrunable trait for efficient bulk model deletion in Laravel\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\MassPrunable;\n\nclass Flight extends Model\n{\n    use MassPrunable;\n\n    /**\n     * Get the prunable model query.\n     */\n    public function prunable(): Builder\n    {\n        return static::where('created_at', '<=', now()->subMonth());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Relationship Existence\nDESCRIPTION: Examples of querying for the existence of relationships using has(), whereHas(), and related methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_64\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\n// Retrieve all posts that have at least one comment...\n$posts = Post::has('comments')->get();\n\n// Retrieve all posts that have three or more comments...\n$posts = Post::has('comments', '>=', 3)->get();\n\n// Retrieve posts that have at least one comment with images...\n$posts = Post::has('comments.images')->get();\n\nuse Illuminate\\Database\\Eloquent\\Builder;\n\n// Retrieve posts with at least one comment containing words like code%...\n$posts = Post::whereHas('comments', function (Builder $query) {\n    $query->where('content', 'like', 'code%');\n})->get();\n\n// Retrieve posts with at least ten comments containing words like code%...\n$posts = Post::whereHas('comments', function (Builder $query) {\n    $query->where('content', 'like', 'code%');\n}, '>=', 10)->get();\n```\n\n----------------------------------------\n\nTITLE: Swapping Products with Specific Options in Laravel Cashier\nDESCRIPTION: Method for swapping products in a subscription while specifying additional options like quantities for the new products.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->subscription('default')->swap([\n    'price_pro' => ['quantity' => 5],\n    'price_chat'\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Laravel Configuration Values using Config Facade\nDESCRIPTION: Demonstrates different methods to access configuration values using the Config facade and config helper function, including default value specification and type-safe retrieval methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Config;\n\n$value = Config::get('app.timezone');\n\n$value = config('app.timezone');\n\n// Retrieve a default value if the configuration value does not exist...\n$value = config('app.timezone', 'Asia/Seoul');\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Attempt in Laravel Controller\nDESCRIPTION: This snippet demonstrates how to handle a user authentication attempt in a Laravel controller using the Auth facade. It validates credentials, attempts authentication, regenerates the session on success, and redirects appropriately.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass LoginController extends Controller\n{\n    /**\n     * Handle an authentication attempt.\n     */\n    public function authenticate(Request $request): RedirectResponse\n    {\n        $credentials = $request->validate([\n            'email' => ['required', 'email'],\n            'password' => ['required'],\n        ]);\n\n        if (Auth::attempt($credentials)) {\n            $request->session()->regenerate();\n\n            return redirect()->intended('dashboard');\n        }\n\n        return back()->withErrors([\n            'email' => 'The provided credentials do not match our records.',\n        ])->onlyInput('email');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent JSON Testing in Laravel\nDESCRIPTION: Shows how to use Laravel's fluent JSON testing features to make assertions against JSON responses, including checking for presence, absence, and specific values of attributes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Testing\\Fluent\\AssertableJson;\n\ntest('fluent json', function () {\n    $response = $this->getJson('/users/1');\n\n    $response\n        ->assertJson(fn (AssertableJson $json) =>\n            $json->where('id', 1)\n                ->where('name', 'Victoria Faith')\n                ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n                ->whereNot('status', 'pending')\n                ->missing('password')\n                ->etc()\n        );\n});\n```\n\n----------------------------------------\n\nTITLE: Summing Values in Laravel Collections with sum() - PHP\nDESCRIPTION: Demonstrates the sum method that calculates the total of all items in a collection. It can sum simple numeric values, values under a specified key in nested arrays/objects, or use a custom closure to define summation criteria. Inputs include the collection and optional key or closure. Output is a numeric total.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_125\n\nLANGUAGE: php\nCODE:\n```\ncollect([1, 2, 3, 4, 5])->sum();\n\n// 15\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['name' => 'JavaScript: The Good Parts', 'pages' => 176],\n    ['name' => 'JavaScript: The Definitive Guide', 'pages' => 1096],\n]);\n\n$collection->sum('pages');\n\n// 1272\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['name' => 'Chair', 'colors' => ['Black']],\n    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n]);\n\n$collection->sum(function (array $product) {\n    return count($product['colors']);\n});\n\n// 6\n```\n\n----------------------------------------\n\nTITLE: Running Tests with PHPUnit in Laravel\nDESCRIPTION: Executes test cases using the PHPUnit testing framework through the vendor binary in a Laravel application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Using Cache Facade in Laravel Controller\nDESCRIPTION: Example of using the Cache facade within a Laravel controller to retrieve a cached value when processing a request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Cache;\n\nclass UserController extends Controller\n{\n    /**\n     * Show a list of all users of the application.\n     */\n    public function index(): array\n    {\n        $value = Cache::get('key');\n\n        return [\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereBetween for Range Queries in Laravel\nDESCRIPTION: The whereBetween method verifies that a column's value is between two values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->whereBetween('votes', [1, 100])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relationships\nDESCRIPTION: The `load` method eagerly loads relationships for all models in the collection. Relationships can be loaded directly or filtered with a closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users->load(['comments', 'posts']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$users->load('comments.author');\n```\n\nLANGUAGE: php\nCODE:\n```\n$users->load(['comments', 'posts' => fn ($query) => $query->where('active', 1)]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Components\nDESCRIPTION: Shows how to render components using Blade component tags in templates.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_30\n\nLANGUAGE: blade\nCODE:\n```\n<x-alert/>\n\n<x-user-profile/>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-inputs.button/>\n```\n\n----------------------------------------\n\nTITLE: Accessing One-to-Many Relationship Collection in Laravel\nDESCRIPTION: Example of retrieving related models in a one-to-many relationship. This code finds a post with ID 1 and accesses its related comments using a dynamic property, then iterates through the collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\n$comments = Post::find(1)->comments;\n\nforeach ($comments as $comment) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Conditional Statements with @if Directives\nDESCRIPTION: Example of Blade's conditional directives including @if, @elseif, and @else for controlling what content gets rendered based on conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n@if (count($records) === 1)\n    I have one record!\n@elseif (count($records) > 1)\n    I have multiple records!\n@else\n    I don't have any records!\n@endif\n```\n\n----------------------------------------\n\nTITLE: Variable Check Directives in Blade Templates\nDESCRIPTION: Demonstrates Blade's @isset and @empty directives which provide convenient shortcuts for checking if variables are defined or empty.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n@isset($records)\n    // $records is defined and is not null...\n@endisset\n\n@empty($records)\n    // $records is \"empty\"...\n@endempty\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI for Laravel Dusk\nDESCRIPTION: YAML configuration for running Laravel Dusk tests on Travis CI. It includes setup for headless Chrome browser, environment configuration, and test execution commands.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_82\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: php\n\nphp:\n  - 8.2\n\naddons:\n  chrome: stable\n\ninstall:\n  - cp .env.testing .env\n  - travis_retry composer install --no-interaction --prefer-dist\n  - php artisan key:generate\n  - php artisan dusk:chrome-driver\n\nbefore_script:\n  - google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 http://localhost &\n  - php artisan serve --no-reload &\n\nscript:\n  - php artisan dusk\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Additional Conditions in Laravel\nDESCRIPTION: This snippet shows how to add extra query conditions to the authentication process in Laravel. It demonstrates checking for an 'active' status and using a closure for more complex conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nif (Auth::attempt(['email' => $email, 'password' => $password, 'active' => 1])) {\n    // Authentication was successful...\n}\n\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nif (Auth::attempt([\n    'email' => $email,\n    'password' => $password,\n    fn (Builder $query) => $query->has('activeSubscription'),\n])) {\n    // Authentication was successful...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Resource Route\nDESCRIPTION: How to register a resource route in Laravel that maps to a resource controller, creating multiple routes for CRUD operations with a single line of code.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\PhotoController;\n\nRoute::resource('photos', PhotoController::class);\n```\n\n----------------------------------------\n\nTITLE: Generating a Laravel Controller with Artisan\nDESCRIPTION: Command to generate a new controller class in Laravel using the Artisan CLI tool. Generated controllers are stored in the app/Http/Controllers directory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:controller UserController\n```\n\n----------------------------------------\n\nTITLE: AnyOf Rule Validation\nDESCRIPTION: Example demonstrating how to validate that a field must satisfy any of multiple validation rulesets.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rule;\n\n'username' => [\n    'required',\n    Rule::anyOf([\n        ['string', 'email'],\n        ['string', 'alpha_dash', 'min:6'],\n    ]),\n],\n```\n\n----------------------------------------\n\nTITLE: Automatic Dependency Injection in Controllers\nDESCRIPTION: Shows how to use automatic dependency injection in a Laravel controller constructor and methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Services\\AppleMusic;\n\nclass PodcastController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     */\n    public function __construct(\n        protected AppleMusic $apple,\n    ) {}\n\n    /**\n     * Show information about the given podcast.\n     */\n    public function show(string $id): Podcast\n    {\n        return $this->apple->findPodcast($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Request Validation in Laravel\nDESCRIPTION: Shows how to validate incoming request data using Laravel's validate method with simple validation rules.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function store(Request $request): RedirectResponse\n{\n    $validated = $request->validate([\n        'title' => 'required|unique:posts|max:255',\n        'body' => 'required',\n    ]);\n\n    // The blog post is valid...\n    return redirect('/posts');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Redirect Location in Laravel Form Requests\nDESCRIPTION: Demonstrates how to set a custom redirect URI when form validation fails by defining a $redirect property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The URI that users should be redirected to if validation fails.\n *\n * @var string\n */\nprotected $redirect = '/dashboard';\n```\n\n----------------------------------------\n\nTITLE: Implementing Prunable Models in Laravel\nDESCRIPTION: Implementation of Prunable trait for automatic model cleanup in Laravel with prunable query definition\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Prunable;\n\nclass Flight extends Model\n{\n    use Prunable;\n\n    /**\n     * Get the prunable model query.\n     */\n    public function prunable(): Builder\n    {\n        return static::where('created_at', '<=', now()->subMonth());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pessimistic Locking in Laravel Query Builder\nDESCRIPTION: Demonstrates how to use shared locks and for update locks in database queries, including an example of using locks within a transaction for data consistency.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nDB::table('users')\n    ->where('votes', '>', 100)\n    ->sharedLock()\n    ->get();\n\nDB::table('users')\n    ->where('votes', '>', 100)\n    ->lockForUpdate()\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\nDB::transaction(function () {\n    $sender = DB::table('users')\n        ->lockForUpdate()\n        ->find(1);\n\n    $receiver = DB::table('users')\n        ->lockForUpdate()\n        ->find(2);\n\n    if ($sender->balance < 100) {\n        throw new RuntimeException('Balance too low.');\n    }\n\n    DB::table('users')\n        ->where('id', $sender->id)\n        ->update([\n            'balance' => $sender->balance - 100\n        ]);\n\n    DB::table('users')\n        ->where('id', $receiver->id)\n        ->update([\n            'balance' => $receiver->balance + 100\n        ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Polymorphic Many-to-Many Relationships in Laravel Factories\nDESCRIPTION: This snippet demonstrates how to create polymorphic many-to-many relationships using Laravel's factory system. It shows both the standard approach and the magic 'has' method for attaching related models.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Tag;\nuse App\\Models\\Video;\n\n$videos = Video::factory()\n    ->hasAttached(\n        Tag::factory()->count(3),\n        ['public' => true]\n    )\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$videos = Video::factory()\n    ->hasTags(3, ['public' => true])\n    ->create();\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Request in Laravel Route Closure\nDESCRIPTION: Shows how to type-hint the Request class in a route closure to access the current HTTP request. The service container automatically injects the request object.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/', function (Request $request) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Unique Validation Rules in Laravel\nDESCRIPTION: Examples of using the 'unique' validation rule to ensure database field uniqueness, with various configurations including custom table/column names, database connections, and ignoring specific records.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:App\\Models\\User,email_address'\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Attribute Names in Laravel\nDESCRIPTION: Demonstrates how to customize attribute names used in validation error messages.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get custom attributes for validator errors.\n *\n * @return array<string, string>\n */\npublic function attributes(): array\n{\n    return [\n        'email' => 'email address',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Cron Configuration for Laravel Scheduler\nDESCRIPTION: Shows the required cron entry for running Laravel's scheduler.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n* * * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Multiple Relationships in Laravel\nDESCRIPTION: This code demonstrates how to eager load multiple relationships simultaneously by passing an array to the with() method, allowing efficient loading of both author and publisher for each book.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_77\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with(['author', 'publisher'])->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Matching Item or Failing with firstOrFail Method in PHP\nDESCRIPTION: The firstOrFail method behaves like first but throws an Illuminate\\Support\\ItemNotFoundException if no element matches the truth test or the collection is empty. Input is a collection and optionally a closure. Output is the first matching element if found; otherwise, an exception is thrown. This is useful for enforcing presence in collections.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\ncollect([1, 2, 3, 4])->firstOrFail(function (int $value, int $key) {\n    return $value > 5;\n});\n\n// Throws ItemNotFoundException...\n```\n\nLANGUAGE: php\nCODE:\n```\ncollect([])->firstOrFail();\n\n// Throws ItemNotFoundException...\n```\n\n----------------------------------------\n\nTITLE: Working with Validated Input in Laravel\nDESCRIPTION: Shows various methods to retrieve and work with validated data using validated(), safe(), and collection methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$validated = $request->validated();\n\n$validated = $validator->validated();\n```\n\nLANGUAGE: php\nCODE:\n```\n$validated = $request->safe()->only(['name', 'email']);\n\n$validated = $request->safe()->except(['name', 'email']);\n\n$validated = $request->safe()->all();\n```\n\nLANGUAGE: php\nCODE:\n```\nforeach ($request->safe() as $key => $value) {\n    // ...\n}\n\n$validated = $request->safe();\n\n$email = $validated['email'];\n```\n\nLANGUAGE: php\nCODE:\n```\n$validated = $request->safe()->merge(['name' => 'Taylor Otwell']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = $request->safe()->collect();\n```\n\n----------------------------------------\n\nTITLE: Task Output Handling in Laravel Scheduler\nDESCRIPTION: Shows various methods for handling task output including file output and email notifications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('emails:send')\n    ->daily()\n    ->sendOutputTo($filePath);\n```\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')\n    ->daily()\n    ->appendOutputTo($filePath);\n```\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('report:generate')\n    ->daily()\n    ->sendOutputTo($filePath)\n    ->emailOutputTo('taylor@example.com');\n```\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('report:generate')\n    ->daily()\n    ->emailOutputOnFailure('taylor@example.com');\n```\n\n----------------------------------------\n\nTITLE: Blade @error Directive Usage\nDESCRIPTION: Example of using Laravel's @error Blade directive to display validation error messages and add conditional CSS classes\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<!-- /resources/views/post/create.blade.php -->\n\n<label for=\"title\">Post Title</label>\n\n<input\n    id=\"title\"\n    type=\"text\"\n    name=\"title\"\n    class=\"@error('title') is-invalid @enderror\"\n/>\n\n@error('title')\n    <div class=\"alert alert-danger\">{{ $message }}</div>\n@enderror\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationship in Laravel User Model\nDESCRIPTION: Implementation of a 'roles' method on the User model that establishes a many-to-many relationship with the Role model using the belongsToMany method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\n\nclass User extends Model\n{\n    /**\n     * The roles that belong to the user.\n     */\n    public function roles(): BelongsToMany\n    {\n        return $this->belongsToMany(Role::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Collections with sort in Laravel Collections - PHP\nDESCRIPTION: Presents the sort method which sorts the collection while preserving original array keys. To reset keys, use the values method after sorting. A callback implementing a custom comparison can be supplied for advanced sorts. The method internally uses PHP's uasort function for sorting logic.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_115\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([5, 3, 1, 2, 4]);\n\n$sorted = $collection->sort();\n\n$sorted->values()->all();\n\n// [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Laravel Blade\nDESCRIPTION: Demonstrates the use of @error directive to check and display validation error messages for form fields.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_96\n\nLANGUAGE: blade\nCODE:\n```\n<label for=\"title\">Post Title</label>\n\n<input\n    id=\"title\"\n    type=\"text\"\n    class=\"@error('title') is-invalid @enderror\"\n/>\n\n@error('title')\n    <div class=\"alert alert-danger\">{{ $message }}</div>\n@enderror\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Laravel Migrations\nDESCRIPTION: Various Artisan commands for rolling back migrations, including rolling back the last batch, specific steps, or all migrations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate:rollback\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate:rollback --step=5\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate:rollback --batch=3\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate:rollback --pretend\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate:reset\n```\n\n----------------------------------------\n\nTITLE: Handling Password Reset Form Submission in Laravel\nDESCRIPTION: Implements a route to handle password reset form submission. Validates the request, updates the user's password using Laravel's password broker, and handles the response based on the reset status.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passwords.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Events\\PasswordReset;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Password;\nuse Illuminate\\Support\\Str;\n\nRoute::post('/reset-password', function (Request $request) {\n    $request->validate([\n        'token' => 'required',\n        'email' => 'required|email',\n        'password' => 'required|min:8|confirmed',\n    ]);\n\n    $status = Password::reset(\n        $request->only('email', 'password', 'password_confirmation', 'token'),\n        function (User $user, string $password) {\n            $user->forceFill([\n                'password' => Hash::make($password)\n            ])->setRememberToken(Str::random(60));\n\n            $user->save();\n\n            event(new PasswordReset($user));\n        }\n    );\n\n    return $status === Password::PasswordReset\n        ? redirect()->route('login')->with('status', __($status))\n        : back()->withErrors(['email' => [__($status)]]);\n})->middleware('guest')->name('password.update');\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Controller with Form Requests in Laravel\nDESCRIPTION: Creates a resource controller with associated form request classes for storage and update methods. This helps in separating validation logic from the controller.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:controller PhotoController --model=Photo --resource --requests\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions in Laravel Query Builder\nDESCRIPTION: Shows how to use the raw method to insert arbitrary strings into queries. It also covers various raw methods like selectRaw, whereRaw, havingRaw, orderByRaw, and groupByRaw for different parts of the query.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->select(DB::raw('count(*) as user_count, status'))\n    ->where('status', '<>', 1)\n    ->groupBy('status')\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = DB::table('orders')\n    ->selectRaw('price * ? as price_with_tax', [1.0825])\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = DB::table('orders')\n    ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = DB::table('orders')\n    ->select('department', DB::raw('SUM(price) as total_sales'))\n    ->groupBy('department')\n    ->havingRaw('SUM(price) > ?', [2500])\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = DB::table('orders')\n    ->orderByRaw('updated_at - created_at DESC')\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = DB::table('orders')\n    ->select('city', 'state')\n    ->groupByRaw('city, state')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items from Laravel Cache\nDESCRIPTION: Different methods for retrieving cached items, including providing default values and using closures for lazy-loading default values when cache misses occur.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::get('key');\n\n$value = Cache::get('key', 'default');\n```\n\n----------------------------------------\n\nTITLE: Validating Field Sizes in Laravel\nDESCRIPTION: Examples of using the 'size' validation rule for different data types including strings, integers, arrays, and files. Each example demonstrates how to validate that a field has a specific size according to its type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n// Validate that a string is exactly 12 characters long...\n'title' => 'size:12';\n\n// Validate that a provided integer equals 10...\n'seats' => 'integer|size:10';\n\n// Validate that an array has exactly 5 elements...\n'tags' => 'array|size:5';\n\n// Validate that an uploaded file is exactly 512 kilobytes...\n'image' => 'file|size:512';\n```\n\n----------------------------------------\n\nTITLE: Deferring Concurrent Tasks in Laravel\nDESCRIPTION: Example of using the defer method of Laravel's Concurrency facade to execute closures concurrently after the HTTP response has been sent.\nSOURCE: https://github.com/laravel/docs/blob/12.x/concurrency.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Metrics;\nuse Illuminate\\Support\\Facades\\Concurrency;\n\nConcurrency::defer([\n    fn () => Metrics::report('users'),\n    fn () => Metrics::report('orders'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection in Laravel Controller\nDESCRIPTION: Demonstrates dependency injection in a Laravel controller's constructor using the service container.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Repositories\\UserRepository;\n\nclass UserController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     */\n    public function __construct(\n        protected UserRepository $users,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Carbon Instance with now - PHP\nDESCRIPTION: The `now` function provides a simple way to create a new `Carbon` instance, representing the current date and time.  This makes it convenient to work with date and time values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_129\n\nLANGUAGE: php\nCODE:\n```\n$now = now();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Carbon;\n\n$now = Carbon::now();\n```\n\n----------------------------------------\n\nTITLE: Single Model Retrieval Methods\nDESCRIPTION: Shows different methods for retrieving single models including find(), first(), and firstWhere().\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Flight;\n\n// Retrieve a model by its primary key...\n$flight = Flight::find(1);\n\n// Retrieve the first model matching the query constraints...\n$flight = Flight::where('active', 1)->first();\n\n// Alternative to retrieving the first model matching the query constraints...\n$flight = Flight::firstWhere('active', 1);\n```\n\n----------------------------------------\n\nTITLE: Controller Form Request Validation\nDESCRIPTION: Example of using form request validation in a controller method with validated data retrieval\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Store a new blog post.\n */\npublic function store(StorePostRequest $request): RedirectResponse\n{\n    // The incoming request is valid...\n\n    // Retrieve the validated input data...\n    $validated = $request->validated();\n\n    // Retrieve a portion of the validated input data...\n    $validated = $request->safe()->only(['name', 'email']);\n    $validated = $request->safe()->except(['name', 'email']);\n\n    // Store the blog post...\n\n    return redirect('/posts');\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Subscription Billing Cycle Anchor in Laravel Cashier\nDESCRIPTION: This code shows how to modify the billing cycle anchor date when creating a new subscription in Laravel Cashier. It uses the anchorBillingCycleOn method to set a custom anchor date.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_84\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/user/subscribe', function (Request $request) {\n    $anchor = Carbon::parse('first day of next month');\n\n    $request->user()->newSubscription('default', 'price_monthly')\n        ->anchorBillingCycleOn($anchor->startOfDay())\n        ->create($request->paymentMethodId);\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Sequences in Laravel Factories\nDESCRIPTION: Shows how to use sequences to alternate model attribute values when creating multiple models, including array-based and closure-based sequences.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Database\\Eloquent\\Factories\\Sequence;\n\n$users = User::factory()\n    ->count(10)\n    ->state(new Sequence(\n        ['admin' => 'Y'],\n        ['admin' => 'N'],\n    ))\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Factories\\Sequence;\n\n$users = User::factory()\n    ->count(10)\n    ->state(new Sequence(\n        fn (Sequence $sequence) => ['role' => UserRoles::all()->random()],\n    ))\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = User::factory()\n    ->count(10)\n    ->sequence(fn (Sequence $sequence) => ['name' => 'Name '.$sequence->index])\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = User::factory()\n    ->count(2)\n    ->sequence(\n        ['name' => 'First User'],\n        ['name' => 'Second User'],\n    )\n    ->create();\n```\n\n----------------------------------------\n\nTITLE: Using collect() function to create collections in Laravel PHP\nDESCRIPTION: The collect() function creates a Laravel collection instance from the given value, enabling use of the powerful collection methods for data manipulation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['taylor', 'abigail']);\n```\n\n----------------------------------------\n\nTITLE: Laravel Maintenance Mode Commands\nDESCRIPTION: Various Artisan commands for managing maintenance mode, including enabling with refresh intervals, retry times, and secret tokens.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan down\nphp artisan down --refresh=15\nphp artisan down --retry=60\nphp artisan down --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"\nphp artisan down --with-secret\nphp artisan down --render=\"errors::503\"\nphp artisan down --redirect=/\nphp artisan up\n```\n\n----------------------------------------\n\nTITLE: Returning Basic String Response in Laravel Route\nDESCRIPTION: Demonstrates how to return a simple string response from a Laravel route. The framework automatically converts the string into a full HTTP response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function () {\n    return 'Hello World';\n});\n```\n\n----------------------------------------\n\nTITLE: Using Short Attribute Syntax in Blade Components\nDESCRIPTION: Demonstrates the short attribute syntax for passing variables to components when variable names match attribute names, providing a more concise way to pass data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_35\n\nLANGUAGE: blade\nCODE:\n```\n{{-- Short attribute syntax... --}}\n<x-profile :$userId :$name />\n\n{{-- Is equivalent to... --}}\n<x-profile :user-id=\"$userId\" :name=\"$name\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Regular Expression Constraints to Route Parameters in Laravel\nDESCRIPTION: Demonstrates how to apply regular expression constraints to route parameters in Laravel using the 'where' method, allowing for fine-grained control over parameter formats.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/user/{name}', function (string $name) {\n    // ...\n})->where('name', '[A-Za-z]+');\n\nRoute::get('/user/{id}', function (string $id) {\n    // ...\n})->where('id', '[0-9]+');\n\nRoute::get('/user/{id}/{name}', function (string $id, string $name) {\n    // ...\n})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n```\n\n----------------------------------------\n\nTITLE: Binding Object Instances in Laravel Container\nDESCRIPTION: Example of binding an existing object instance into the container using the instance method. The exact instance provided will be returned for all subsequent resolutions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Transistor;\nuse App\\Services\\PodcastParser;\n\n$service = new Transistor(new PodcastParser);\n\n$this->app->instance(Transistor::class, $service);\n```\n\n----------------------------------------\n\nTITLE: Storing Data in Laravel Session\nDESCRIPTION: Methods to store data in the session using either the request instance or global session helper.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Via a request instance...\n$request->session()->put('key', 'value');\n\n// Via the global \"session\" helper...\nsession(['key' => 'value']);\n```\n\n----------------------------------------\n\nTITLE: Defining Mass Assignable Attributes with $fillable Property in Laravel Eloquent\nDESCRIPTION: Shows how to configure a model's $fillable property to specify which attributes can be mass assigned. This is a security measure to prevent mass assignment vulnerabilities.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array<int, string>\n     */\n    protected $fillable = ['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Foreign Key in HasOne Relationship in Laravel\nDESCRIPTION: Example of overriding the conventional foreign key in a hasOne relationship. This allows specifying a custom foreign key instead of using the automatically determined default key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->hasOne(Phone::class, 'foreign_key');\n```\n\n----------------------------------------\n\nTITLE: Fresh Laravel Migrations\nDESCRIPTION: Commands for dropping all tables and re-running migrations from scratch, with options for seeding and database selection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate:fresh\n\nphp artisan migrate:fresh --seed\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate:fresh --database=admin\n```\n\n----------------------------------------\n\nTITLE: Disabling Prorations for Quantity Changes in Laravel Paddle\nDESCRIPTION: Method to update a subscription's quantity without prorating the charges, which prevents partial charges or credits for the remaining time on the billing cycle.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription()->noProrate()->updateQuantity(10);\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Retries for HTTP Requests in Laravel\nDESCRIPTION: Demonstrates how to use the retry method to automatically retry failed HTTP requests with customizable attempts, delays, and conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::retry(3, 100)->post(/* ... */);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Exception;\n\n$response = Http::retry(3, function (int $attempt, Exception $exception) {\n    return $attempt * 100;\n})->post(/* ... */);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::retry([100, 200])->post(/* ... */);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Exception;\nuse Illuminate\\Http\\Client\\PendingRequest;\n\n$response = Http::retry(3, 100, function (Exception $exception, PendingRequest $request) {\n    return $exception instanceof ConnectionException;\n})->post(/* ... */);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Exception;\nuse Illuminate\\Http\\Client\\PendingRequest;\nuse Illuminate\\Http\\Client\\RequestException;\n\n$response = Http::withToken($this->getToken())->retry(2, 0, function (Exception $exception, PendingRequest $request) {\n    if (! $exception instanceof RequestException || $exception->response->status() !== 401) {\n        return false;\n    }\n\n    $request->withToken($this->getNewToken());\n\n    return true;\n})->post(/* ... */);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::retry(3, 100, throw: false)->post(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Merging Collections with union() Preferring Original Keys - PHP\nDESCRIPTION: Explains the union method which adds the given array to the collection but preserves the original collection's values for duplicate keys. Inputs are the original collection and an array to merge, output is a merged collection respecting original keys.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_135\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1 => ['a'], 2 => ['b']]);\n\n$union = $collection->union([3 => ['c'], 1 => ['d']]);\n\n$union->all();\n\n// [1 => ['a'], 2 => ['b'], 3 => ['c']]\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading with Dot Syntax in Laravel\nDESCRIPTION: This snippet shows how to use dot notation to eager load nested relationships, specifically loading both the author and the author's contacts for each book in a single query chain.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author.contacts')->get();\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Queue Worker with Priority Queues\nDESCRIPTION: Shows how to run a Laravel queue worker that processes jobs from multiple queues in order of priority.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan queue:work --queue=high,default\n```\n\n----------------------------------------\n\nTITLE: Processing Single Job with Laravel Queue Worker\nDESCRIPTION: Artisan command to run a queue worker that processes only one job and then exits. Useful for one-off job processing or testing queue functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_71\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work --once\n```\n\n----------------------------------------\n\nTITLE: Adding Where Clauses to Unique Validation\nDESCRIPTION: Example demonstrating how to add additional query conditions to unique validation using the 'where' method. This allows for more complex unique validation scopes beyond a single column.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n'email' => Rule::unique('users')->where(fn (Builder $query) => $query->where('account_id', 1))\n```\n\n----------------------------------------\n\nTITLE: Calling Multiple Seeders in Laravel DatabaseSeeder\nDESCRIPTION: Example of organizing database seeding by calling multiple seeder classes from the main DatabaseSeeder. This approach helps maintain clean code by breaking seeders into logical components.\nSOURCE: https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Run the database seeders.\n */\npublic function run(): void\n{\n    $this->call([\n        UserSeeder::class,\n        PostSeeder::class,\n        CommentSeeder::class,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailable Content with Markdown\nDESCRIPTION: PHP method to define mailable content using Markdown template with additional data parameters\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Mail\\Mailables\\Content;\n\n/**\n * Get the message content definition.\n */\npublic function content(): Content\n{\n    return new Content(\n        markdown: 'mail.orders.shipped',\n        with: [\n            'url' => $this->orderUrl,\n        ],\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Detailed Policy Responses in PHP\nDESCRIPTION: Demonstrates how to return a more detailed response from a policy method, including an error message, using the Illuminate\\Auth\\Access\\Response class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\Response;\n\n/**\n * Determine if the given post can be updated by the user.\n */\npublic function update(User $user, Post $post): Response\n{\n    return $user->id === $post->user_id\n        ? Response::allow()\n        : Response::deny('You do not own this post.');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Scopes in Laravel\nDESCRIPTION: Creation and implementation of global query scopes in Laravel Eloquent models\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models\\Scopes;\n\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Scope;\n\nclass AncientScope implements Scope\n{\n    /**\n     * Apply the scope to a given Eloquent query builder.\n     */\n    public function apply(Builder $builder, Model $model): void\n    {\n        $builder->where('created_at', '<', now()->subYears(2000));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrying Operation with Exponential Backoff - Laravel PHP\nDESCRIPTION: Demonstrates using the `retry()` helper function to retry an operation a specified number of times.  The first example uses a fixed delay, the second a closure for custom delay, and the third an array for specific delays. The fourth example only retries when a RetryException occurs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_115\n\nLANGUAGE: php\nCODE:\n```\nuse Exception;\n\nreturn retry(5, function () {\n    // Attempt 5 times while resting 100ms between attempts...\n}, 100);\n\nreturn retry(5, function () {\n    // ...\n}, function (int $attempt, Exception $exception) {\n    return $attempt * 100;\n});\n\nreturn retry([100, 200], function () {\n    // Sleep for 100ms on first retry, 200ms on second retry...\n});\n\nreturn retry(5, function () {\n    // ...\n}, 100, function (Exception $exception) {\n    return $exception instanceof RetryException;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailable Content in Laravel\nDESCRIPTION: This snippet demonstrates how to configure the content method in a Laravel mailable class, specifying the view template for the email.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the message content definition.\n */\npublic function content(): Content\n{\n    return new Content(\n        view: 'mail.orders.shipped',\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controller with Dependency Injection in Laravel\nDESCRIPTION: This example demonstrates how to use dependency injection in a Laravel controller class. The PodcastController receives an AppleMusic service via constructor injection, allowing for easy testing through mocking.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Services\\AppleMusic;\nuse Illuminate\\View\\View;\n\nclass PodcastController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     */\n    public function __construct(\n        protected AppleMusic $apple,\n    ) {}\n\n    /**\n     * Show information about the given podcast.\n     */\n    public function show(string $id): View\n    {\n        return view('podcasts.show', [\n            'podcast' => $this->apple->findPodcast($id)\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Fields Validation Rules\nDESCRIPTION: Example of validation rules including nullable fields to handle optional form inputs\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$request->validate([\n    'title' => 'required|unique:posts|max:255',\n    'body' => 'required',\n    'publish_at' => 'nullable|date',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Rate Limits for a Single Route\nDESCRIPTION: This snippet shows how to define multiple rate limits for a single rate limiter. It applies both a global limit of 500 requests per minute and a limit of 3 requests per minute per email address for login attempts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nRateLimiter::for('login', function (Request $request) {\n    return [\n        Limit::perMinute(500),\n        Limit::perMinute(3)->by($request->input('email')),\n    ];\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Database Transaction Management in Laravel PHP\nDESCRIPTION: Shows how to manually manage database transactions using beginTransaction, rollBack, and commit methods of the DB facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\nDB::beginTransaction();\n\n// DB::rollBack();\n\n// DB::commit();\n```\n\n----------------------------------------\n\nTITLE: Referencing Assets in Blade Templates\nDESCRIPTION: Example of referencing Vite-processed assets in Laravel Blade templates using the Vite::asset helper.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<img src=\"{{ Vite::asset('resources/images/logo.png') }}\">\n```\n\n----------------------------------------\n\nTITLE: Basic Password Validation in Laravel\nDESCRIPTION: This example shows how to use Laravel's Password rule object to validate password complexity, including minimum length and confirmation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_83\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rules\\Password;\n\n$validator = Validator::make($request->all(), [\n    'password' => ['required', 'confirmed', Password::min(8)],\n]);\n```\n\n----------------------------------------\n\nTITLE: Checking Item Existence in Laravel Session\nDESCRIPTION: Methods to determine if an item exists in the session using has(), exists(), and missing() methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif ($request->session()->has('users')) {\n    // ...\n}\n\nif ($request->session()->exists('users')) {\n    // ...\n}\n\nif ($request->session()->missing('users')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Actions Without Models in Laravel Routes\nDESCRIPTION: This example demonstrates how to use the 'can' middleware to authorize actions that don't require a specific model instance, such as 'create'. It shows both the full class name syntax and the shorter 'can' method syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('/post', function () {\n    // The current user may create posts...\n})->middleware('can:create,App\\Models\\Post');\n\nuse App\\Models\\Post;\n\nRoute::post('/post', function () {\n    // The current user may create posts...\n})->can('create', Post::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing Failed Job Handling in Laravel Queue Jobs\nDESCRIPTION: This snippet demonstrates how to create a job class with a failed method to handle job failures. The job processes a podcast and includes a failed method that receives the exception that caused the failure, allowing for user notifications or cleanup operations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_88\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Jobs;\n\nuse App\\Models\\Podcast;\nuse App\\Services\\AudioProcessor;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Queue\\Queueable;\nuse Throwable;\n\nclass ProcessPodcast implements ShouldQueue\n{\n    use Queueable;\n\n    /**\n     * Create a new job instance.\n     */\n    public function __construct(\n        public Podcast $podcast,\n    ) {}\n\n    /**\n     * Execute the job.\n     */\n    public function handle(AudioProcessor $processor): void\n    {\n        // Process uploaded podcast...\n    }\n\n    /**\n     * Handle a job failure.\n     */\n    public function failed(?Throwable $exception): void\n    {\n        // Send user notification of failure, etc...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data with Default Values in Laravel\nDESCRIPTION: Examples of retrieving session data with fallback default values, including using a closure as the default value generator.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$value = $request->session()->get('key', 'default');\n\n$value = $request->session()->get('key', function () {\n    return 'default';\n});\n```\n\n----------------------------------------\n\nTITLE: Finding a Model by Primary Key\nDESCRIPTION: The `find` method retrieves a model from the collection that matches the given primary key. If `$key` is a model instance, `find` attempts to return a model matching the primary key. If `$key` is an array of keys, `find` will return all models which have a primary key in the given array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$users = User::all();\n\n$user = $users->find(1);\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Components in Laravel Blade\nDESCRIPTION: Demonstrates how to render a component dynamically based on a runtime value using the built-in dynamic-component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_69\n\nLANGUAGE: blade\nCODE:\n```\n// $componentName = \"secondary-button\";\n\n<x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values Using `pluck` in PHP\nDESCRIPTION: The `pluck` method extracts the values associated with a given key from each element in the collection. It can also be used to key the resulting collection. The examples show both uses:  extracting just the names and extracting the names using the product_id as the key. It also supports dot notation for nested values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_90\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([\n    ['product_id' => 'prod-100', 'name' => 'Desk'],\n    ['product_id' => 'prod-200', 'name' => 'Chair'],\n]);\n\n$plucked = $collection->pluck('name');\n\n$plucked->all();\n\n// ['Desk', 'Chair']\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$plucked = $collection->pluck('name', 'product_id');\n\n$plucked->all();\n\n// ['prod-100' => 'Desk', 'prod-200' => 'Chair']\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([\n    [\n        'name' => 'Laracon',\n        'speakers' => [\n            'first_day' => ['Rosa', 'Judith'],\n        ],\n    ],\n    [\n        'name' => 'VueConf',\n        'speakers' => [\n            'first_day' => ['Abigail', 'Joey'],\n        ],\n    ],\n]);\n\n$plucked = $collection->pluck('speakers.first_day');\n\n$plucked->all();\n\n// [['Rosa', 'Judith'], ['Abigail', 'Joey']]\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([\n    ['brand' => 'Tesla',  'color' => 'red'],\n    ['brand' => 'Pagani', 'color' => 'white'],\n    ['brand' => 'Tesla',  'color' => 'black'],\n    ['brand' => 'Pagani', 'color' => 'orange'],\n]);\n\n$plucked = $collection->pluck('color', 'brand');\n\n$plucked->all();\n\n// ['Tesla' => 'black', 'Pagani' => 'orange']\n```\n\n----------------------------------------\n\nTITLE: Generating View Responses in Laravel\nDESCRIPTION: Demonstrates how to return a view as the response's content while controlling the response's status and headers using the view method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nreturn response()\n    ->view('hello', $data, 200)\n    ->header('Content-Type', $type);\n```\n\n----------------------------------------\n\nTITLE: Using back() function for HTTP redirects in Laravel PHP\nDESCRIPTION: The back() function generates a redirect HTTP response to the user's previous location with optional status code, headers, and fallback path.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_72\n\nLANGUAGE: php\nCODE:\n```\nreturn back($status = 302, $headers = [], $fallback = '/');\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn back();\n```\n\n----------------------------------------\n\nTITLE: Screenshot Capture in Dusk Tests\nDESCRIPTION: Methods for capturing screenshots during tests, including full page, responsive breakpoints, and specific elements.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$browser->screenshot('filename');\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->responsiveScreenshots('filename');\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->screenshotElement('#selector', 'filename');\n```\n\n----------------------------------------\n\nTITLE: Lazy Collection Processing\nDESCRIPTION: Demonstrates using lazy() method for memory-efficient iteration over large datasets.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Flight;\n\nforeach (Flight::lazy() as $flight) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Quantities for Multi-Product Subscriptions in Laravel Cashier\nDESCRIPTION: Method for updating quantities of specific products within a multi-product subscription by specifying the price ID as the second parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->incrementQuantity(1, 'price_chat');\n```\n\n----------------------------------------\n\nTITLE: Converting Laravel Collections to Arrays with toArray() - PHP\nDESCRIPTION: Illustrates the toArray method which converts a collection into a plain PHP array. If collection values are Eloquent models, they are also converted to arrays. It deeply converts nested Arrayable instances, with all returned as an array. To avoid deep conversion, use the all() method instead.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_131\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['name' => 'Desk', 'price' => 200]);\n\n$collection->toArray();\n\n/*\n    [\n        ['name' => 'Desk', 'price' => 200],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Time-Based Rate Limits with Unique Keys\nDESCRIPTION: This example demonstrates how to create multiple rate limits with different time windows (minute and day) for the same user, using prefixed keys to ensure uniqueness in the rate limiter storage.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nRateLimiter::for('uploads', function (Request $request) {\n    return [\n        Limit::perMinute(10)->by('minute:'.$request->user()->id),\n        Limit::perDay(1000)->by('day:'.$request->user()->id),\n    ];\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Database Notifications with toArray Method\nDESCRIPTION: This code demonstrates how to implement the toArray method for database notifications. It returns a PHP array with notification data that will be stored as JSON in the database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the array representation of the notification.\n *\n * @return array<string, mixed>\n */\npublic function toArray(object $notifiable): array\n{\n    return [\n        'invoice_id' => $this->invoice->id,\n        'amount' => $this->invoice->amount,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsing Arrays of Arrays with Laravel Arr (PHP)\nDESCRIPTION: This snippet demonstrates collapsing multiple arrays into a single flat array using Laravel's Arr::collapse. The function is helpful when combining several related datasets into one. Requires importing Illuminate\\Support\\Arr. The input is an array of arrays; the output is a one-dimensional array containing all elements.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = Arr::collapse([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n----------------------------------------\n\nTITLE: Generating Public URL for Storage Files in Laravel\nDESCRIPTION: Example of using the asset helper to create a URL for a file stored in the public disk after the symbolic link has been created.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\necho asset('storage/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Validating Nested Array Input in Laravel\nDESCRIPTION: This code shows how to validate nested array input fields using dot notation and wildcard characters in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_78\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\n\n$validator = Validator::make($request->all(), [\n    'photos.profile' => 'required|image',\n]);\n\n$validator = Validator::make($request->all(), [\n    'person.*.email' => 'email|unique:users',\n    'person.*.first_name' => 'required_with:person.*.last_name',\n]);\n```\n\n----------------------------------------\n\nTITLE: Faking HTTP Responses for Testing in Laravel\nDESCRIPTION: Covers various methods of faking HTTP responses for testing, including faking all responses, specific URLs, and creating response sequences. Also shows how to fake exceptions and prevent stray requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\nHttp::fake();\n\n$response = Http::post(/* ... */);\n```\n\nLANGUAGE: php\nCODE:\n```\nHttp::fake([\n    // Stub a JSON response for GitHub endpoints...\n    'github.com/*' => Http::response(['foo' => 'bar'], 200, $headers),\n\n    // Stub a string response for Google endpoints...\n    'google.com/*' => Http::response('Hello World', 200, $headers),\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nHttp::fake([\n    'github.com/*' => Http::failedConnection(),\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nHttp::fake([\n    // Stub a series of responses for GitHub endpoints...\n    'github.com/*' => Http::sequence()\n        ->push('Hello World', 200)\n        ->push(['foo' => 'bar'], 200)\n        ->pushStatus(404),\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\Request;\n\nHttp::fake(function (Request $request) {\n    return Http::response('Hello World', 200);\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\nHttp::preventStrayRequests();\n\nHttp::fake([\n    'github.com/*' => Http::response('ok'),\n]);\n\n// An \"ok\" response is returned...\nHttp::get('https://github.com/laravel/framework');\n\n// An exception is thrown...\nHttp::get('https://laravel.com');\n```\n\n----------------------------------------\n\nTITLE: Inline Authorization Using Gate::allowIf and Gate::denyIf in PHP\nDESCRIPTION: Demonstrates how to perform inline authorization checks using Gate::allowIf and Gate::denyIf methods. These checks do not execute defined 'before' or 'after' authorization hooks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::allowIf(fn (User $user) => $user->isAdministrator());\n\nGate::denyIf(fn (User $user) => $user->banned());\n```\n\n----------------------------------------\n\nTITLE: Authentication in HTTP Requests\nDESCRIPTION: Shows how to add basic, digest, and bearer token authentication to HTTP requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Basic authentication...\n$response = Http::withBasicAuth('taylor@laravel.com', 'secret')->post(/* ... */);\n\n// Digest authentication...\n$response = Http::withDigestAuth('taylor@laravel.com', 'secret')->post(/* ... */);\n\n// Bearer token...\n$response = Http::withToken('token')->post(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Creating an Invoice with Price in Laravel Cashier\nDESCRIPTION: This snippet demonstrates how to create an invoice for a specific price and quantity using the invoicePrice method. It also shows how to apply discounts and tax rates to the invoice.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_104\n\nLANGUAGE: php\nCODE:\n```\n$user->invoicePrice('price_tshirt', 5, [\n    'discounts' => [\n        ['coupon' => 'SUMMER21SALE']\n    ],\n], [\n    'default_tax_rates' => ['txr_id'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating CSRF Token Field in Laravel Blade Form\nDESCRIPTION: Demonstrates how to include a hidden CSRF token field in an HTML form using the @csrf Blade directive for CSRF protection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_94\n\nLANGUAGE: blade\nCODE:\n```\n<form method=\"POST\" action=\"/profile\">\n    @csrf\n\n    ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Basic Eloquent Model Structure in Laravel\nDESCRIPTION: Example of a basic Eloquent model class structure, showing the namespace, Model extension, and class declaration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Exists Rule in Laravel Validation\nDESCRIPTION: Shows the basic usage of the 'exists' validation rule in Laravel, which checks if a field value exists in a specified database table.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n'state' => 'exists:states'\n```\n\n----------------------------------------\n\nTITLE: Adding Mailgun Configuration to Laravel Mailers\nDESCRIPTION: PHP configuration array to add Mailgun-specific settings to the mailers array in Laravel's mail.php config file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'mailgun' => [\n    'transport' => 'mailgun',\n    // 'client' => [\n    //     'timeout' => 5,\n    // ],\n],\n```\n\n----------------------------------------\n\nTITLE: Retrieving Duplicate Values with duplicates Method in PHP\nDESCRIPTION: The duplicates method returns duplicate values from the collection. It outputs a collection consisting of key/value pairs where values are duplicates. When handling arrays or objects, a key can be provided to check duplicates on specific attributes. It requires a Laravel Collection and optionally a key name string to check nested attribute values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['a', 'b', 'a', 'c', 'b']);\n\n$collection->duplicates();\n\n// [2 => 'a', 4 => 'b']\n```\n\nLANGUAGE: php\nCODE:\n```\n$employees = collect([\n    ['email' => 'abigail@example.com', 'position' => 'Developer'],\n    ['email' => 'james@example.com', 'position' => 'Designer'],\n    ['email' => 'victoria@example.com', 'position' => 'Developer'],\n]);\n\n$employees->duplicates('position');\n\n// [2 => 'Developer']\n```\n\n----------------------------------------\n\nTITLE: Creating Related Models Using create Method in Laravel\nDESCRIPTION: Demonstrates using the create method on a relationship to create and save a new related model, accepting an array of attributes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_98\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\n$post = Post::find(1);\n\n$comment = $post->comments()->create([\n    'message' => 'A new comment.',\n]);\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in Laravel Route Callbacks\nDESCRIPTION: Demonstrates how to use dependency injection in Laravel route callbacks. This example injects the Request object into the route callback.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/users', function (Request $request) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Using Closures in Laravel\nDESCRIPTION: This snippet shows how to use a closure for custom validation logic when a full rule object is not necessary.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_91\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\nuse Closure;\n\n$validator = Validator::make($request->all(), [\n    'title' => [\n        'required',\n        'max:255',\n        function (string $attribute, mixed $value, Closure $fail) {\n            if ($value === 'foo') {\n                $fail(\"The {$attribute} is invalid.\");\n            }\n        },\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Laravel Resource Route Response\nDESCRIPTION: Shows how to return a resource directly from a route by finding a user by ID and converting it to a resource response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nRoute::get('/user/{id}', function (string $id) {\n    return User::findOrFail($id)->toResource();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Old Input in Laravel Views\nDESCRIPTION: Shows how to retrieve previously flashed input data using both the Request object and Blade helper method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$username = $request->old('username');\n```\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"text\" name=\"username\" value=\"{{ old('username') }}\">\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Filename for Uploaded Files in Laravel\nDESCRIPTION: Demonstrates how to use storeAs and putFileAs methods to specify a custom filename when storing uploaded files.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$path = $request->file('avatar')->storeAs(\n    'avatars', $request->user()->id\n);\n\n$path = Storage::putFileAs(\n    'avatars', $request->file('avatar'), $request->user()->id\n);\n```\n\n----------------------------------------\n\nTITLE: Preventing Job Overlaps in Laravel\nDESCRIPTION: Example of using the WithoutOverlapping middleware to prevent job overlaps based on a specific key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Queue\\Middleware\\WithoutOverlapping;\n\n/**\n * Get the middleware the job should pass through.\n *\n * @return array<int, object>\n */\npublic function middleware(): array\n{\n    return [new WithoutOverlapping($this->user->id)];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values for Given Key with `Arr::pluck()` - PHP\nDESCRIPTION: This snippet shows how to extract all the values for a given key from an array of associative arrays using `Arr::pluck()`. It returns an array containing only the values associated with the specified key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [\n    ['developer' => ['id' => 1, 'name' => 'Taylor']],\n    ['developer' => ['id' => 2, 'name' => 'Abigail']],\n];\n\n$names = Arr::pluck($array, 'developer.name');\n\n// ['Taylor', 'Abigail']\n```\n\n----------------------------------------\n\nTITLE: Defining Redirect Routes in Laravel\nDESCRIPTION: Demonstrates how to define redirect routes in Laravel using the Route::redirect method. This provides a convenient shortcut for simple redirects without defining a full route or controller.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRoute::redirect('/here', '/there');\n\nRoute::redirect('/here', '/there', 301);\n\nRoute::permanentRedirect('/here', '/there');\n```\n\n----------------------------------------\n\nTITLE: Using Named Bindings in Laravel Database Queries\nDESCRIPTION: Shows how to use named bindings instead of positional bindings in a database query using the DB facade's select method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$results = DB::select('select * from users where id = :id', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Authenticated User in Laravel\nDESCRIPTION: Shows how to access the currently authenticated user using the Auth facade. Demonstrates retrieving the user object and user ID from the authentication system.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Auth;\n\n// Retrieve the currently authenticated user...\n$user = Auth::user();\n\n// Retrieve the currently authenticated user's ID...\n$id = Auth::id();\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Configuration with Laravel Plugin\nDESCRIPTION: Basic Vite configuration setup showing entry points for CSS and JavaScript files.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n    plugins: [\n        laravel([\n            'resources/css/app.css',\n            'resources/js/app.js',\n        ]),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection using whereNull - PHP\nDESCRIPTION: Demonstrates how to filter a Laravel Collection to retain only items where the value for a specified key is null. It includes an example collection and shows the resulting collection containing only items with a null value for the key using the `whereNull` method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_151\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['name' => 'Desk'],\n    ['name' => null],\n    ['name' => 'Bookcase'],\n]);\n\n$filtered = $collection->whereNull('name');\n\n$filtered->all();\n\n/*\n    [\n        ['name' => null],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Redirecting Back with Input in Laravel PHP\nDESCRIPTION: Shows how to redirect the user back to their previous location with input data, typically used when form validation fails. This requires the 'web' middleware group or session middleware.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redirects.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('/user/profile', function () {\n    // Validate the request...\n\n    return back()->withInput();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing File Uploads with Laravel Storage - PHPUnit Example\nDESCRIPTION: Shows how to test file uploads using Laravel's Storage facade with PHPUnit. Includes the same assertions as the Pest example but in PHPUnit's testing structure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    public function test_albums_can_be_uploaded(): void\n    {\n        Storage::fake('photos');\n\n        $response = $this->json('POST', '/photos', [\n            UploadedFile::fake()->image('photo1.jpg'),\n            UploadedFile::fake()->image('photo2.jpg')\n        ]);\n\n        // Assert one or more files were stored...\n        Storage::disk('photos')->assertExists('photo1.jpg');\n        Storage::disk('photos')->assertExists(['photo1.jpg', 'photo2.jpg']);\n\n        // Assert one or more files were not stored...\n        Storage::disk('photos')->assertMissing('missing.jpg');\n        Storage::disk('photos')->assertMissing(['missing.jpg', 'non-existing.jpg']);\n\n        // Assert that the number of files in a given directory matches the expected count...\n        Storage::disk('photos')->assertCount('/wallpapers', 2);\n\n        // Assert that a given directory is empty...\n        Storage::disk('photos')->assertDirectoryEmpty('/wallpapers');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Resource Routes in Laravel\nDESCRIPTION: Shows how to create API-specific resource routes that exclude routes for HTML templates. It also demonstrates registering multiple API resources at once.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\PhotoController;\n\nRoute::apiResource('photos', PhotoController::class);\n\nuse App\\Http\\Controllers\\PostController;\n\nRoute::apiResources([\n    'photos' => PhotoController::class,\n    'posts' => PostController::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating UNSIGNED BIGINT Foreign Key Column in Laravel Migration\nDESCRIPTION: The foreignId method creates an UNSIGNED BIGINT equivalent column for use as a foreign key in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n$table->foreignId('user_id');\n```\n\n----------------------------------------\n\nTITLE: SQL Queries Generated by Eager Loading in Laravel\nDESCRIPTION: This snippet shows the actual SQL queries generated when using eager loading with the with() method. It demonstrates how Laravel optimizes the database calls.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_76\n\nLANGUAGE: sql\nCODE:\n```\nselect * from books\n\nselect * from authors where id in (1, 2, 3, 4, 5, ...)\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Column in Laravel Migration\nDESCRIPTION: Examples of modifying existing columns using the change method, including retaining column modifiers and changing column attributes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function (Blueprint $table) {\n    $table->string('name', 50)->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Group By and Having Clause Examples\nDESCRIPTION: Shows how to group query results and filter grouped results using having clauses with various conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->groupBy('account_id')\n    ->having('account_id', '>', 100)\n    ->get();\n\n$report = DB::table('orders')\n    ->selectRaw('count(id) as number_of_orders, customer_id')\n    ->groupBy('customer_id')\n    ->havingBetween('number_of_orders', [5, 15])\n    ->get();\n\n$users = DB::table('users')\n    ->groupBy('first_name', 'status')\n    ->having('account_id', '>', 100)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs to Default and Custom Queues in Laravel\nDESCRIPTION: Demonstrates how to dispatch jobs to the default queue and a custom 'emails' queue using Laravel's queue system.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Jobs\\ProcessPodcast;\n\n// This job is sent to the default connection's default queue...\nProcessPodcast::dispatch();\n\n// This job is sent to the default connection's \"emails\" queue...\nProcessPodcast::dispatch()->onQueue('emails');\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Input Data in Laravel\nDESCRIPTION: Shows how to use the withInput method to flash the current request's input data to the session before redirecting the user to a new location.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nreturn back()->withInput();\n```\n\n----------------------------------------\n\nTITLE: File Retrieval and Existence Check\nDESCRIPTION: Examples of retrieving file contents and checking file existence using Laravel Storage\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$contents = Storage::get('file.jpg');\n\n$orders = Storage::json('orders.json');\n\nif (Storage::disk('s3')->exists('file.jpg')) {\n    // ...\n}\n\nif (Storage::disk('s3')->missing('file.jpg')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Database Insert Operations\nDESCRIPTION: Demonstrates various ways to insert records including single inserts, batch inserts, insert or ignore, and retrieving auto-incrementing IDs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nDB::table('users')->insert([\n    'email' => 'kayla@example.com',\n    'votes' => 0\n]);\n\nDB::table('users')->insert([\n    ['email' => 'picard@example.com', 'votes' => 0],\n    ['email' => 'janeway@example.com', 'votes' => 0],\n]);\n\nDB::table('users')->insertOrIgnore([\n    ['id' => 1, 'email' => 'sisko@example.com'],\n    ['id' => 2, 'email' => 'archer@example.com'],\n]);\n\nDB::table('pruned_users')->insertUsing([\n    'id', 'name', 'email', 'email_verified_at'\n], DB::table('users')->select(\n    'id', 'name', 'email', 'email_verified_at'\n)->where('updated_at', '<=', now()->subMonth()));\n\n$id = DB::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Validation Rules in Laravel\nDESCRIPTION: This code shows how to add conditional validation rules using the 'sometimes' method on the Validator instance. It adds a requirement for a 'reason' field when the number of games is 100 or more.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_74\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Fluent;\n\n$validator->sometimes('reason', 'required|max:500', function (Fluent $input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Related Models Using save Method in Laravel\nDESCRIPTION: Shows how to use the save method on a relationship to add a new related model, automatically setting the foreign key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_97\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Comment;\nuse App\\Models\\Post;\n\n$comment = new Comment(['message' => 'A new comment.']);\n\n$post = Post::find(1);\n\n$post->comments()->save($comment);\n```\n\n----------------------------------------\n\nTITLE: Performing Mouse Interactions in Laravel Dusk\nDESCRIPTION: Demonstrates various mouse interactions such as clicking, double-clicking, right-clicking, and drag-and-drop operations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$browser->click('.selector');\n\n$browser->clickAtXPath('//div[@class = \"selector\"]');\n\n$browser->clickAtPoint($x = 0, $y = 0);\n\n$browser->doubleClick('.selector');\n\n$browser->rightClick('.selector');\n\n$browser->clickAndHold('.selector');\n\n$browser->controlClick('.selector');\n\n$browser->mouseover('.selector');\n\n$browser->drag('.from-selector', '.to-selector');\n\n$browser->dragLeft('.selector', $pixels = 10);\n$browser->dragRight('.selector', $pixels = 10);\n$browser->dragUp('.selector', $pixels = 10);\n$browser->dragDown('.selector', $pixels = 10);\n\n$browser->dragOffset('.selector', $x = 10, $y = 10);\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Storing OAuth Users in Laravel\nDESCRIPTION: Example showing how to retrieve a user from GitHub, create or update a record in the database, log them in, and redirect to the dashboard.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Laravel\\Socialite\\Facades\\Socialite;\n\nRoute::get('/auth/callback', function () {\n    $githubUser = Socialite::driver('github')->user();\n\n    $user = User::updateOrCreate([\n        'github_id' => $githubUser->id,\n    ], [\n        'name' => $githubUser->name,\n        'email' => $githubUser->email,\n        'github_token' => $githubUser->token,\n        'github_refresh_token' => $githubUser->refreshToken,\n    ]);\n\n    Auth::login($user);\n\n    return redirect('/dashboard');\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling Queued Jobs in Laravel\nDESCRIPTION: Demonstrates how to schedule queued jobs with optional queue name and connection specifications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\Heartbeat;\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::job(new Heartbeat)->everyFiveMinutes();\n\n// Dispatch the job to the \"heartbeats\" queue on the \"sqs\" connection...\nSchedule::job(new Heartbeat, 'heartbeats', 'sqs')->everyFiveMinutes();\n```\n\n----------------------------------------\n\nTITLE: Executing Update Statement in Laravel PHP\nDESCRIPTION: Shows how to perform an update operation using the DB facade's update method, returning the number of affected rows.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\n$affected = DB::update(\n    'update users set votes = 100 where name = ?',\n    ['Anita']\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Middleware with Closures\nDESCRIPTION: Example of how to define controller middleware as closures in Laravel, providing a convenient way to implement inline middleware without creating separate middleware classes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse Illuminate\\Http\\Request;\n\n/**\n * Get the middleware that should be assigned to the controller.\n */\npublic static function middleware(): array\n{\n    return [\n        function (Request $request, Closure $next) {\n            return $next($request);\n        },\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Terminable Middleware in Laravel\nDESCRIPTION: This code demonstrates how to create a terminable middleware in Laravel, which can perform tasks after the HTTP response has been sent to the browser.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Illuminate\\Session\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass TerminatingMiddleware\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        return $next($request);\n    }\n\n    /**\n     * Handle tasks after the response has been sent to the browser.\n     */\n    public function terminate(Request $request, Response $response): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cursor-based Record Processing\nDESCRIPTION: Shows using cursor() method for memory-efficient iteration with filtered results.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = User::cursor()->filter(function (User $user) {\n    return $user->id > 500;\n});\n\nforeach ($users as $user) {\n    echo $user->id;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Executing Code Based on Filled Input in Laravel\nDESCRIPTION: Using the whenFilled method to execute a closure only if a specific input is present and not an empty string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$request->whenFilled('name', function (string $input) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Chunking Database Results\nDESCRIPTION: Demonstrates processing large datasets by chunking results into smaller batches to manage memory usage efficiently.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Collection;\nuse Illuminate\\Support\\Facades\\DB;\n\nDB::table('users')->orderBy('id')->chunk(100, function (Collection $users) {\n    foreach ($users as $user) {\n        // ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs with Transaction Control\nDESCRIPTION: Examples of dispatching jobs with afterCommit and beforeCommit controls.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nProcessPodcast::dispatch($podcast)->afterCommit();\n\nProcessPodcast::dispatch($podcast)->beforeCommit();\n```\n\n----------------------------------------\n\nTITLE: Defining Named Component Slots in Laravel Blade\nDESCRIPTION: Extends an alert component to support a named 'title' slot in addition to the default slot.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_61\n\nLANGUAGE: blade\nCODE:\n```\n<!-- /resources/views/components/alert.blade.php -->\n\n<span class=\"alert-title\">{{ $title }}</span>\n\n<div class=\"alert alert-danger\">\n    {{ $slot }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking if Array is List with `Arr::isList()` - PHP\nDESCRIPTION: This snippet shows how to use `Arr::isList()` to determine if an array's keys are sequential integers starting from zero. It returns `true` if it is a list and `false` otherwise.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$isList = Arr::isList(['foo', 'bar', 'baz']);\n\n// true\n\n$isList = Arr::isList(['product' => ['name' => 'Desk', 'price' => 100]]);\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Handling Context Hydration in Laravel\nDESCRIPTION: Demonstrates how to register a callback for the context hydration process, which occurs when a queued job begins executing. This example restores the locale from hidden context.\nSOURCE: https://github.com/laravel/docs/blob/12.x/context.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Log\\Context\\Repository;\nuse Illuminate\\Support\\Facades\\Config;\nuse Illuminate\\Support\\Facades\\Context;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Context::hydrated(function (Repository $context) {\n        if ($context->hasHidden('locale')) {\n            Config::set('app.locale', $context->getHidden('locale'));\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Supplementary Routes to Resource Controllers in Laravel\nDESCRIPTION: Demonstrates how to add additional custom routes to a resource controller, ensuring they take precedence over default resource routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controller\\PhotoController;\n\nRoute::get('/photos/popular', [PhotoController::class, 'popular']);\nRoute::resource('photos', PhotoController::class);\n```\n\n----------------------------------------\n\nTITLE: Dispatching to Specific Queue\nDESCRIPTION: Example of dispatching jobs to particular queues for categorization and prioritization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nProcessPodcast::dispatch($podcast)->onQueue('processing');\n```\n\n----------------------------------------\n\nTITLE: Iterating through Eloquent Collection\nDESCRIPTION: This snippet demonstrates how to iterate through an Eloquent collection using a `foreach` loop. It fetches active users and then echoes each user's name.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = User::where('active', 1)->get();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Middleware in Laravel\nDESCRIPTION: Creates a middleware class to check if a user is subscribed before allowing access to routes. Redirects non-subscribed users to a billing page.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass Subscribed\n{\n    /**\n     * Handle an incoming request.\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        if (! $request->user()?->subscribed()) {\n            // Redirect user to billing page and ask them to subscribe...\n            return redirect('/billing');\n        }\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting File Visibility in Laravel Storage\nDESCRIPTION: Shows how to set file visibility when storing files, which is useful for cloud storage like Amazon S3.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nStorage::putFile('photos', new File('/path/to/photo'), 'public');\n```\n\n----------------------------------------\n\nTITLE: Defining Browser Macros in Laravel Dusk\nDESCRIPTION: Shows how to define custom browser macros that can be reused across multiple Dusk tests by extending the Browser class functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse Laravel\\Dusk\\Browser;\n\nclass DuskServiceProvider extends ServiceProvider\n{\n    /**\n     * Register Dusk's browser macros.\n     */\n    public function boot(): void\n    {\n        Browser::macro('scrollToElement', function (string $element = null) {\n            $this->script(\"$('html, body').animate({ scrollTop: $('$element').offset().top }, 0);\");\n\n            return $this;\n        });\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->browse(function (Browser $browser) use ($user) {\n    $browser->visit('/pay')\n        ->scrollToElement('#credit-card-details')\n        ->assertSee('Enter Credit Card Details');\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Exists Rule Query in Laravel Validation\nDESCRIPTION: Shows how to use the Rule class to fluently define and customize the query for the 'exists' validation rule in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Query\\Builder;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\n\nValidator::make($data, [\n    'email' => [\n        'required',\n        Rule::exists('staff')->where(function (Builder $query) {\n            $query->where('account_id', 1);\n        }),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Unique Job Settings with uniqueId and uniqueFor\nDESCRIPTION: Example showing how to define a specific uniqueness key and timeout for a Laravel unique job by implementing the uniqueId method and setting the uniqueFor property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\Product;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldBeUnique;\n\nclass UpdateSearchIndex implements ShouldQueue, ShouldBeUnique\n{\n    /**\n     * The product instance.\n     *\n     * @var \\App\\Product\n     */\n    public $product;\n\n    /**\n     * The number of seconds after which the job's unique lock will be released.\n     *\n     * @var int\n     */\n    public $uniqueFor = 3600;\n\n    /**\n     * Get the unique ID for the job.\n     */\n    public function uniqueId(): string\n    {\n        return $this->product->id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Webhook Event Handler in Laravel Cashier\nDESCRIPTION: Demonstrates how to create a custom event listener that handles specific Stripe webhook events, in this case an invoice.payment_succeeded event.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_99\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse Laravel\\Cashier\\Events\\WebhookReceived;\n\nclass StripeEventListener\n{\n    /**\n     * Handle received Stripe webhooks.\n     */\n    public function handle(WebhookReceived $event): void\n    {\n        if ($event->payload['type'] === 'invoice.payment_succeeded') {\n            // Handle the incoming event...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Response Errors in Laravel\nDESCRIPTION: Shows how to check for different types of HTTP errors and throw exceptions based on response status codes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// Determine if the status code is >= 200 and < 300...\n$response->successful();\n\n// Determine if the status code is >= 400...\n$response->failed();\n\n// Determine if the response has a 400 level status code...\n$response->clientError();\n\n// Determine if the response has a 500 level status code...\n$response->serverError();\n\n// Immediately execute the given callback if there was a client or server error...\n$response->onError(callable $callback);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\Response;\n\n$response = Http::post(/* ... */);\n\n// Throw an exception if a client or server error occurred...\n$response->throw();\n\n// Throw an exception if an error occurred and the given condition is true...\n$response->throwIf($condition);\n\n// Throw an exception if an error occurred and the given closure resolves to true...\n$response->throwIf(fn (Response $response) => true);\n\n// Throw an exception if an error occurred and the given condition is false...\n$response->throwUnless($condition);\n\n// Throw an exception if an error occurred and the given closure resolves to false...\n$response->throwUnless(fn (Response $response) => false);\n\n// Throw an exception if the response has a specific status code...\n$response->throwIfStatus(403);\n\n// Throw an exception unless the response has a specific status code...\n$response->throwUnlessStatus(200);\n\nreturn $response['user']['id'];\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn Http::post(/* ... */)->throw()->json();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\Response;\nuse Illuminate\\Http\\Client\\RequestException;\n\nreturn Http::post(/* ... */)->throw(function (Response $response, RequestException $e) {\n    // ...\n})->json();\n```\n\nLANGUAGE: php\nCODE:\n```\n->withExceptions(function (Exceptions $exceptions) {\n    // Truncate request exception messages to 240 characters...\n    $exceptions->truncateRequestExceptionsAt(240);\n\n    // Disable request exception message truncation...\n    $exceptions->dontTruncateRequestExceptions();\n})\n```\n\n----------------------------------------\n\nTITLE: Post-Validation Data Normalization in Laravel\nDESCRIPTION: Demonstrates how to normalize request data after validation has passed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Handle a passed validation attempt.\n */\nprotected function passedValidation(): void\n{\n    $this->replace(['name' => 'Taylor']);\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Items by Criteria with countBy() in PHP\nDESCRIPTION: The `countBy` method groups collection items based on a given criteria and counts the number of items in each group. It can count occurrences of each distinct value directly, or group items based on the return value of a provided callback.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 2, 2, 3]);\n\n$counted = $collection->countBy();\n\n$counted->all();\n\n// [1 => 1, 2 => 3, 3 => 1]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['alice@gmail.com', 'bob@yahoo.com', 'carlos@gmail.com']);\n\n$counted = $collection->countBy(function (string $email) {\n    return substr(strrchr($email, '@'), 1);\n});\n\n$counted->all();\n\n// ['gmail.com' => 2, 'yahoo.com' => 1]\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware Groups in Laravel\nDESCRIPTION: Example of organizing multiple middleware under a single named group for easier assignment to routes. This is configured in the bootstrap/app.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\First;\nuse App\\Http\\Middleware\\Second;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->appendToGroup('group-name', [\n        First::class,\n        Second::class,\n    ]);\n\n    $middleware->prependToGroup('group-name', [\n        First::class,\n        Second::class,\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Throttling Middleware in Laravel Jobs\nDESCRIPTION: Example showing how to implement ThrottlesExceptions middleware in a Laravel queue job to handle rate limiting based on exceptions. Includes retry timing configuration and timeout settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\nuse Illuminate\\Queue\\Middleware\\ThrottlesExceptions;\n\npublic function middleware(): array\n{\n    return [new ThrottlesExceptions(10, 5 * 60)];\n}\n\npublic function retryUntil(): DateTime\n{\n    return now()->addMinutes(30);\n}\n```\n\n----------------------------------------\n\nTITLE: CSRF Protection in Laravel Forms\nDESCRIPTION: Shows how to include CSRF protection in HTML forms that point to POST, PUT, PATCH, or DELETE routes in Laravel. This is required for routes defined in the web routes file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<form method=\"POST\" action=\"/profile\">\n    @csrf\n    ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Getting Value from Nested Array with Default with `Arr::get()` - PHP\nDESCRIPTION: This example demonstrates how to retrieve a value from a nested array using `Arr::get()` and provide a default value if the key doesn't exist. If the key is not found, the specified default value will be returned.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$discount = Arr::get($array, 'products.desk.discount', 0);\n\n// 0\n```\n\n----------------------------------------\n\nTITLE: Defining Default Eager Loading with $with Property\nDESCRIPTION: This example shows how to define relationships that should always be eager loaded automatically with a model by setting the $with property, eliminating the need to explicitly call with() for common relationships.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_83\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass Book extends Model\n{\n    /**\n     * The relationships that should always be loaded.\n     *\n     * @var array\n     */\n    protected $with = ['author'];\n\n    /**\n     * Get the author that wrote the book.\n     */\n    public function author(): BelongsTo\n    {\n        return $this->belongsTo(Author::class);\n    }\n\n    /**\n     * Get the genre of the book.\n     */\n    public function genre(): BelongsTo\n    {\n        return $this->belongsTo(Genre::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Cache Driver in Laravel Service Provider\nDESCRIPTION: Shows how to register a custom cache driver in Laravel's service provider using the Cache facade's extend method within a booting callback.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\Extensions\\MongoStore;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Support\\Facades\\Cache;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        $this->app->booting(function () {\n             Cache::extend('mongo', function (Application $app) {\n                 return Cache::repository(new MongoStore);\n             });\n         });\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Credentials in Laravel Services\nDESCRIPTION: Configuration setup for Slack bot credentials including OAuth token and default channel in Laravel's services.php config file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n'slack' => [\n    'notifications' => [\n        'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),\n        'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Backoff for Laravel Jobs\nDESCRIPTION: Shows how to implement an exponential backoff strategy for retrying failed Laravel jobs. This can be useful for gradually increasing the delay between retry attempts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_87\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Calculate the number of seconds to wait before retrying the job.\n *\n * @return array<int, int>\n */\npublic function backoff(): array\n{\n    return [1, 5, 10];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Subscribers in Laravel\nDESCRIPTION: Shows how to create event subscribers that can handle multiple events within a single class. Includes examples of subscriber methods and registration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse Illuminate\\Auth\\Events\\Login;\nuse Illuminate\\Auth\\Events\\Logout;\nuse Illuminate\\Events\\Dispatcher;\n\nclass UserEventSubscriber\n{\n    /**\n     * Handle user login events.\n     */\n    public function handleUserLogin(Login $event): void {}\n\n    /**\n     * Handle user logout events.\n     */\n    public function handleUserLogout(Logout $event): void {}\n\n    /**\n     * Register the listeners for the subscriber.\n     */\n    public function subscribe(Dispatcher $events): void\n    {\n        $events->listen(\n            Login::class,\n            [UserEventSubscriber::class, 'handleUserLogin']\n        );\n\n        $events->listen(\n            Logout::class,\n            [UserEventSubscriber::class, 'handleUserLogout']\n        );\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse Illuminate\\Auth\\Events\\Login;\nuse Illuminate\\Auth\\Events\\Logout;\nuse Illuminate\\Events\\Dispatcher;\n\nclass UserEventSubscriber\n{\n    /**\n     * Handle user login events.\n     */\n    public function handleUserLogin(Login $event): void {}\n\n    /**\n     * Handle user logout events.\n     */\n    public function handleUserLogout(Logout $event): void {}\n\n    /**\n     * Register the listeners for the subscriber.\n     *\n     * @return array<string, string>\n     */\n    public function subscribe(Dispatcher $events): array\n    {\n        return [\n            Login::class => 'handleUserLogin',\n            Logout::class => 'handleUserLogout',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching function result once per request - Laravel PHP\nDESCRIPTION: This code shows the usage of the `once()` helper function. The provided closure is executed only once per request, and its result is cached. Subsequent calls return the cached result. This is useful for expensive operations that only need to be computed once.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_101\n\nLANGUAGE: php\nCODE:\n```\nfunction random(): int\n{\n    return once(function () {\n        return random_int(1, 1000);\n    });\n}\n\nrandom(); // 123\nrandom(); // 123 (cached result)\nrandom(); // 123 (cached result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Format Validation in Laravel\nDESCRIPTION: Shows how to validate that a date field matches a specific format using Laravel's fluent date rule builder. The example enforces a Y-m-d format for the start_date field.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rule;\n\n'start_date' => [\n    'required',\n    Rule::date()->format('Y-m-d'),\n],\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Cast in Eloquent Model\nDESCRIPTION: This code snippet shows how to attach a custom cast to a model attribute using the `casts` method. The `options` attribute is cast to the `AsJson` custom cast class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse App\\Casts\\AsJson;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Get the attributes that should be cast.\n     *\n     * @return array<string, string>\n     */\n    protected function casts(): array\n    {\n        return [\n            'options' => AsJson::class,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Job Chains within a Batch\nDESCRIPTION: Illustrates how to execute multiple job chains in parallel within a single batch, with a callback function that runs when all chains are completed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\ReleasePodcast;\nuse App\\Jobs\\SendPodcastReleaseNotification;\nuse Illuminate\\Bus\\Batch;\nuse Illuminate\\Support\\Facades\\Bus;\n\nBus::batch([\n    [\n        new ReleasePodcast(1),\n        new SendPodcastReleaseNotification(1),\n    ],\n    [\n        new ReleasePodcast(2),\n        new SendPodcastReleaseNotification(2),\n    ],\n])->then(function (Batch $batch) {\n    // ...\n})->dispatch();\n```\n\n----------------------------------------\n\nTITLE: Implicit Route Model Binding in Laravel\nDESCRIPTION: Demonstrates Laravel's automatic model resolution based on route parameters and type hints.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nRoute::get('/users/{user}', function (User $user) {\n    return $user->email;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Pennant Blade Directives for Feature Flags\nDESCRIPTION: Demonstrates the use of @feature and @featureany Blade directives to conditionally render content based on feature flags.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n@feature('site-redesign')\n    <!-- 'site-redesign' is active -->\n@else\n    <!-- 'site-redesign' is inactive -->\n@endfeature\n\n@featureany(['site-redesign', 'beta'])\n    <!-- 'site-redesign' or `beta` is active -->\n@endfeatureany\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Key Column for Model in Laravel Migration\nDESCRIPTION: The foreignIdFor method adds a {column}_id equivalent column for a given model class. The column type will be UNSIGNED BIGINT, CHAR(36), or CHAR(26) depending on the model key type in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\n$table->foreignIdFor(User::class);\n```\n\n----------------------------------------\n\nTITLE: Singleton Binding in Laravel Container\nDESCRIPTION: Example of registering a singleton binding, which ensures that only one instance of the class is created and reused throughout the application lifecycle.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Transistor;\nuse App\\Services\\PodcastParser;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->singleton(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Laravel Controller Implementation\nDESCRIPTION: Example of a basic Laravel controller with a show method that displays a user profile. The controller retrieves a user by ID and returns a view with the user data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse Illuminate\\View\\View;\n\nclass UserController extends Controller\n{\n    /**\n     * Show the profile for a given user.\n     */\n    public function show(string $id): View\n    {\n        return view('user.profile', [\n            'user' => User::findOrFail($id)\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Actions Without Models in Laravel Controller\nDESCRIPTION: This example demonstrates how to authorize an action that doesn't require a specific model instance, such as 'create'. It uses the 'cannot' method on the User model with a class name instead of a model instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Post;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PostController extends Controller\n{\n    /**\n     * Create a post.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        if ($request->user()->cannot('create', Post::class)) {\n            abort(403);\n        }\n\n        // Create the post...\n\n        return redirect('/posts');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Token Scopes in Request Handler\nDESCRIPTION: Shows how to verify token scopes within a route handler using the tokenCan method on the authenticated user instance\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/orders', function (Request $request) {\n    if ($request->user()->tokenCan('place-orders')) {\n        // ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Morph To Relationship Counting\nDESCRIPTION: Demonstrates counting related models on morph-to relationships with eager loading and deferred loading.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_72\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\n$activities = ActivityFeed::with([\n    'parentable' => function (MorphTo $morphTo) {\n        $morphTo->morphWithCount([\n            Photo::class => ['tags'],\n            Post::class => ['comments'],\n        ]);\n    }])->get();\n```\n\n----------------------------------------\n\nTITLE: Loading Passport Keys from Environment\nDESCRIPTION: Example of storing Passport encryption keys in environment variables.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nPASSPORT_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n<private key here>\n-----END RSA PRIVATE KEY-----\"\n\nPASSPORT_PUBLIC_KEY=\"-----BEGIN PUBLIC KEY-----\n<public key here>\n-----END PUBLIC KEY-----\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Models by Primary Key with destroy() Method in Laravel\nDESCRIPTION: Demonstrates various ways to use the destroy() method to delete models by their primary keys without explicitly retrieving them first.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nFlight::destroy(1);\n\nFlight::destroy(1, 2, 3);\n\nFlight::destroy([1, 2, 3]);\n\nFlight::destroy(collect([1, 2, 3]));\n```\n\n----------------------------------------\n\nTITLE: Guard-Specific Authentication Directives in Blade\nDESCRIPTION: Example of using Blade's authentication directives with specific guards to check authentication status against different authentication systems.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n@auth('admin')\n    // The user is authenticated...\n@endauth\n\n@guest('admin')\n    // The user is not authenticated...\n@endguest\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Read/Write Connections in Laravel\nDESCRIPTION: Demonstrates how to set up separate read and write database connections for MySQL in Laravel's database configuration file. It includes host configuration for read and write operations and various other MySQL-specific settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'mysql' => [\n    'read' => [\n        'host' => [\n            '192.168.1.1',\n            '196.168.1.2',\n        ],\n    ],\n    'write' => [\n        'host' => [\n            '196.168.1.3',\n        ],\n    ],\n    'sticky' => true,\n\n    'database' => env('DB_DATABASE', 'laravel'),\n    'username' => env('DB_USERNAME', 'root'),\n    'password' => env('DB_PASSWORD', ''),\n    'unix_socket' => env('DB_SOCKET', ''),\n    'charset' => env('DB_CHARSET', 'utf8mb4'),\n    'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),\n    'prefix' => '',\n    'prefix_indexes' => true,\n    'strict' => true,\n    'engine' => null,\n    'options' => extension_loaded('pdo_mysql') ? array_filter([\n        PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),\n    ]) : [],\n],\n```\n\n----------------------------------------\n\nTITLE: Processing Input Through Invokable Classes Using Laravel Pipeline in PHP\nDESCRIPTION: Illustrates usage of Laravel's Pipeline facade with an array of invokable class names. Each class is resolved via the service container, allowing dependency injection into the class’s __invoke method. The input (e.g. a User object) is then passed through these classes before the final callable is executed. Requires the Pipeline facade and that classes implement __invoke() accepting the input. Supports extensible and modular processing of inputs with DI support.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_136\n\nLANGUAGE: php\nCODE:\n```\n$user = Pipeline::send($user)\\n    ->through([\\n        GenerateProfilePhoto::class,\\n        ActivateSubscription::class,\\n        SendWelcomeEmail::class,\\n    ])\\n    ->then(fn (User $user) => $user);\n```\n\n----------------------------------------\n\nTITLE: Using Custom UserCollection in Laravel Route\nDESCRIPTION: Demonstrates how to use the custom UserCollection resource in a Laravel route to return a collection of users with additional meta data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Resources\\UserCollection;\nuse App\\Models\\User;\n\nRoute::get('/users', function () {\n    return new UserCollection(User::all());\n});\n```\n\n----------------------------------------\n\nTITLE: Using Guzzle Middleware with Laravel's HTTP Client\nDESCRIPTION: Explains how to use Guzzle middleware to manipulate outgoing requests and inspect incoming responses in Laravel's HTTP client.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\nuse Psr\\Http\\Message\\RequestInterface;\n\n$response = Http::withRequestMiddleware(\n    function (RequestInterface $request) {\n        return $request->withHeader('X-Example', 'Value');\n    }\n)->get('http://example.com');\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n$response = Http::withResponseMiddleware(\n    function (ResponseInterface $response) {\n        $header = $response->getHeader('X-Example');\n\n        // ...\n\n        return $response;\n    }\n)->get('http://example.com');\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\nHttp::globalRequestMiddleware(fn ($request) => $request->withHeader(\n    'User-Agent', 'Example Application/1.0'\n));\n\nHttp::globalResponseMiddleware(fn ($response) => $response->withHeader(\n    'X-Finished-At', now()->toDateTimeString()\n));\n```\n\n----------------------------------------\n\nTITLE: Custom MongoDB Session Handler Implementation\nDESCRIPTION: Example implementation of a custom session handler for MongoDB, implementing PHP's SessionHandlerInterface with required methods for session management.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Extensions;\n\nclass MongoSessionHandler implements \\SessionHandlerInterface\n{\n    public function open($savePath, $sessionName) {}\n    public function close() {}\n    public function read($sessionId) {}\n    public function write($sessionId, $data) {}\n    public function destroy($sessionId) {}\n    public function gc($lifetime) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Component Arguments in Blade Using kebab-case\nDESCRIPTION: Shows how to pass component constructor arguments using kebab-case syntax in Blade templates, which will be converted to camelCase internally.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_34\n\nLANGUAGE: blade\nCODE:\n```\n<x-alert alert-type=\"danger\" />\n```\n\n----------------------------------------\n\nTITLE: Writing Policy Methods in PHP\nDESCRIPTION: Shows how to define a policy method for authorizing actions. This example demonstrates an 'update' method that determines if a user can update a given Post instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\Post;\nuse App\\Models\\User;\n\nclass PostPolicy\n{\n    /**\n     * Determine if the given post can be updated by the user.\n     */\n    public function update(User $user, Post $post): bool\n    {\n        return $user->id === $post->user_id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting File Visibility in Laravel Storage\nDESCRIPTION: Shows how to set and retrieve file visibility using put, getVisibility, and setVisibility methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Storage;\n\nStorage::put('file.jpg', $contents, 'public');\n\n$visibility = Storage::getVisibility('file.jpg');\n\nStorage::setVisibility('file.jpg', 'public');\n```\n\n----------------------------------------\n\nTITLE: Registering Failed Job Event Listeners in Laravel\nDESCRIPTION: Code to register a listener for job failure events in the AppServiceProvider, allowing custom actions when jobs fail such as logging or sending notifications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_102\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Queue;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Queue\\Events\\JobFailed;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        // ...\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Queue::failing(function (JobFailed $event) {\n            // $event->connectionName\n            // $event->job\n            // $event->exception\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Validator Creation in Laravel Controllers\nDESCRIPTION: Shows how to manually create and use a validator instance in a controller method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass PostController extends Controller\n{\n    /**\n     * Store a new blog post.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $validator = Validator::make($request->all(), [\n            'title' => 'required|unique:posts|max:255',\n            'body' => 'required',\n        ]);\n\n        if ($validator->fails()) {\n            return redirect('/post/create')\n                ->withErrors($validator)\n                ->withInput();\n        }\n\n        // Retrieve the validated input...\n        $validated = $validator->validated();\n\n        // Retrieve a portion of the validated input...\n        $validated = $validator->safe()->only(['name', 'email']);\n        $validated = $validator->safe()->except(['name', 'email']);\n\n        // Store the blog post...\n\n        return redirect('/posts');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Collection Keys in UserResource\nDESCRIPTION: Shows how to preserve collection keys when returning a resource collection by setting the preserveKeys property in the UserResource class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass UserResource extends JsonResource\n{\n    /**\n     * Indicates if the resource's collection keys should be preserved.\n     *\n     * @var bool\n     */\n    public $preserveKeys = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Models Without Events\nDESCRIPTION: Demonstrates various methods for performing model operations without triggering events using the Quiet methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_83\n\nLANGUAGE: php\nCODE:\n```\n$user = User::findOrFail(1);\n\n$user->name = 'Victoria Faith';\n\n$user->saveQuietly();\n```\n\n----------------------------------------\n\nTITLE: Form Input Repopulation\nDESCRIPTION: Shows how to retrieve old input data in PHP and Blade templates for form repopulation after validation failures\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$title = $request->old('title');\n```\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"text\" name=\"title\" value=\"{{ old('title') }}\">\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications via Facade (PHP)\nDESCRIPTION: Shows how to send notifications to multiple users using the Notification facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Notification;\n\nNotification::send($users, new InvoicePaid($invoice));\n```\n\n----------------------------------------\n\nTITLE: Using Str::pluralStudly for Pluralization in Laravel PHP\nDESCRIPTION: Demonstrates how to use the Str::pluralStudly method to convert singular studly case words to their plural form. Supports multiple languages and accepts an optional count parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$plural = Str::pluralStudly('VerifiedHuman');\n// VerifiedHumans\n\n$plural = Str::pluralStudly('UserFeedback');\n// UserFeedback\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$plural = Str::pluralStudly('VerifiedHuman', 2);\n// VerifiedHumans\n\n$singular = Str::pluralStudly('VerifiedHuman', 1);\n// VerifiedHuman\n```\n\n----------------------------------------\n\nTITLE: Password Confirmation Routes in Laravel\nDESCRIPTION: Route definitions for password confirmation functionality including form display and validation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/confirm-password', function () {\n    return view('auth.confirm-password');\n})->middleware('auth')->name('password.confirm');\n```\n\n----------------------------------------\n\nTITLE: Custom MongoDB Cache Driver Implementation in Laravel\nDESCRIPTION: Example implementation of a custom MongoDB cache driver by implementing the Illuminate\\Contracts\\Cache\\Store contract with required methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Extensions;\n\nuse Illuminate\\Contracts\\Cache\\Store;\n\nclass MongoStore implements Store\n{\n    public function get($key) {}\n    public function many(array $keys) {}\n    public function put($key, $value, $seconds) {}\n    public function putMany(array $values, $seconds) {}\n    public function increment($key, $value = 1) {}\n    public function decrement($key, $value = 1) {}\n    public function forever($key, $value) {}\n    public function forget($key) {}\n    public function flush() {}\n    public function getPrefix() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Details After OAuth Authentication\nDESCRIPTION: Example showing how to retrieve various user details after OAuth authentication, including different properties available for OAuth 1.0 and 2.0 providers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Socialite\\Facades\\Socialite;\n\nRoute::get('/auth/callback', function () {\n    $user = Socialite::driver('github')->user();\n\n    // OAuth 2.0 providers...\n    $token = $user->token;\n    $refreshToken = $user->refreshToken;\n    $expiresIn = $user->expiresIn;\n\n    // OAuth 1.0 providers...\n    $token = $user->token;\n    $tokenSecret = $user->tokenSecret;\n\n    // All providers...\n    $user->getId();\n    $user->getNickname();\n    $user->getName();\n    $user->getEmail();\n    $user->getAvatar();\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a Seeder Class with Artisan in Laravel\nDESCRIPTION: Command to generate a new seeder class called UserSeeder using Laravel's Artisan command-line tool. The generated file will be placed in the database/seeders directory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:seeder UserSeeder\n```\n\n----------------------------------------\n\nTITLE: Accessing properties safely with optional() - Laravel PHP\nDESCRIPTION: This snippet demonstrates the usage of the `optional()` helper function. It allows you to access properties or call methods on an object without causing an error if the object is null. If the object is null, it will return null instead.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_103\n\nLANGUAGE: php\nCODE:\n```\nreturn optional($user->address)->street;\n```\n\n----------------------------------------\n\nTITLE: Layout Component Definition\nDESCRIPTION: Shows how to create a reusable layout component that defines the common structure for application pages including title slot support.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_87\n\nLANGUAGE: blade\nCODE:\n```\n<!-- resources/views/components/layout.blade.php -->\n\n<html>\n    <head>\n        <title>{{ $title ?? 'Todo Manager' }}</title>\n    </head>\n    <body>\n        <h1>Todos</h1>\n        <hr/>\n        {{ $slot }}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Changing Subscription Prices in Laravel Cashier\nDESCRIPTION: Shows how to change a user's subscription to a new price, including options to skip trials, invoice immediately, and handle prorations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = App\\Models\\User::find(1);\n\n$user->subscription('default')->swap('price_yearly');\n```\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')\n    ->skipTrial()\n    ->swap('price_yearly');\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->subscription('default')->swapAndInvoice('price_yearly');\n```\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->noProrate()->swap('price_yearly');\n```\n\n----------------------------------------\n\nTITLE: Intercepting Gate Checks with Before Method in PHP\nDESCRIPTION: Demonstrates how to use the Gate::before method to grant all abilities to a specific user, such as an administrator. The closure runs before all other authorization checks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::before(function (User $user, string $ability) {\n    if ($user->isAdministrator()) {\n        return true;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom If Statement in Blade Template\nDESCRIPTION: This snippet demonstrates how to use the custom 'disk' conditional statement in a Blade template. It includes examples of @disk, @elsedisk, and @unlessdisk directives.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_104\n\nLANGUAGE: blade\nCODE:\n```\n@disk('local')\n    <!-- The application is using the local disk... -->\n@elsedisk('s3')\n    <!-- The application is using the s3 disk... -->\n@else\n    <!-- The application is using some other disk... -->\n@enddisk\n\n@unlessdisk('local')\n    <!-- The application is not using the local disk... -->\n@enddisk\n```\n\n----------------------------------------\n\nTITLE: Session and Authentication Testing with Pest\nDESCRIPTION: Shows how to interact with session data and authenticate users in HTTP tests using Pest framework.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\User;\n\ntest('an action that requires authentication', function () {\n    $user = User::factory()->create();\n\n    $response = $this->actingAs($user)\n        ->withSession(['banned' => false])\n        ->get('/');\n\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Objects with Mockery in Laravel Tests\nDESCRIPTION: Demonstrates how to mock an object that will be injected into the application via Laravel's service container using Mockery.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service;\nuse Mockery;\nuse Mockery\\MockInterface;\n\ntest('something can be mocked', function () {\n    $this->instance(\n        Service::class,\n        Mockery::mock(Service::class, function (MockInterface $mock) {\n            $mock->expects('process');\n        })\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Returning Batch Information from Routes\nDESCRIPTION: Demonstrates how to return batch information as JSON from a route, useful for displaying batch progress in a UI.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Bus;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/batch/{batchId}', function (string $batchId) {\n    return Bus::findBatch($batchId);\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation with Rule::prohibitedIf in Laravel\nDESCRIPTION: Shows how to use Rule::prohibitedIf for complex conditional prohibition logic. The example demonstrates both boolean and closure-based conditions for prohibiting field validation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\n\nValidator::make($request->all(), [\n    'role_id' => Rule::prohibitedIf($request->user()->is_admin),\n]);\n\nValidator::make($request->all(), [\n    'role_id' => Rule::prohibitedIf(fn () => $request->user()->is_admin),\n]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Column Names in Laravel Model\nDESCRIPTION: Demonstrates how to customize the column names used for timestamps by defining constants.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Flight extends Model\n{\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'updated_date';\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Batch Properties and Methods\nDESCRIPTION: Lists various properties and methods available on the Illuminate\\Bus\\Batch instance for inspecting and interacting with a batch of jobs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n// The UUID of the batch...\n$batch->id;\n\n// The name of the batch (if applicable)...\n$batch->name;\n\n// The number of jobs assigned to the batch...\n$batch->totalJobs;\n\n// The number of jobs that have not been processed by the queue...\n$batch->pendingJobs;\n\n// The number of jobs that have failed...\n$batch->failedJobs;\n\n// The number of jobs that have been processed thus far...\n$batch->processedJobs();\n\n// The completion percentage of the batch (0-100)...\n$batch->progress();\n\n// Indicates if the batch has finished executing...\n$batch->finished();\n\n// Cancel the execution of the batch...\n$batch->cancel();\n\n// Indicates if the batch has been cancelled...\n$batch->cancelled();\n```\n\n----------------------------------------\n\nTITLE: Password Protected Routes in Laravel\nDESCRIPTION: Example of protecting routes with password confirmation middleware.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/settings', function () {\n    // ...\n})->middleware(['password.confirm']);\n\nRoute::post('/settings', function () {\n    // ...\n})->middleware(['password.confirm']);\n```\n\n----------------------------------------\n\nTITLE: Installing Read-Only Filesystem Package in Laravel\nDESCRIPTION: Composer command to install the required Flysystem read-only package for creating read-only filesystem disks in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require league/flysystem-read-only \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Queue Listener for Development\nDESCRIPTION: Alternative Artisan command for processing queue jobs that automatically reloads updated code without manual restarts. Less efficient than queue:work but useful during development.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_68\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:listen\n```\n\n----------------------------------------\n\nTITLE: Creating API Tokens Route Handler\nDESCRIPTION: Route handler implementation for creating new API tokens with the user's token name.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/tokens/create', function (Request $request) {\n    $token = $request->user()->createToken($request->token_name);\n\n    return ['token' => $token->plainTextToken];\n});\n```\n\n----------------------------------------\n\nTITLE: Kebab Case Conversion with Str::kebab in PHP\nDESCRIPTION: Shows how to use Str::kebab to convert a string to kebab-case.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$converted = Str::kebab('fooBar');\n\n// foo-bar\n```\n\n----------------------------------------\n\nTITLE: Transforming and Filtering Laravel Collection PHP\nDESCRIPTION: Demonstrates creating a collection using the `collect` helper, mapping over elements to change their case using `map` with a closure, and subsequently filtering out empty values using `reject`. This highlights the fluent, chainable nature of Collection methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['taylor', 'abigail', null])->map(function (?string $name) {\n    return strtoupper($name);\n})->reject(function (string $name) {\n    return empty($name);\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Foreign Key Actions in Laravel Migrations\nDESCRIPTION: Shows how to specify ON UPDATE and ON DELETE actions for foreign key constraints in Laravel migrations using method chaining with onUpdate() and onDelete().\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$table->foreignId('user_id')\n    ->constrained()\n    ->onUpdate('cascade')\n    ->onDelete('cascade');\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Redirect in Laravel PHP\nDESCRIPTION: Demonstrates how to create a simple redirect response using the global 'redirect' helper function in a Laravel route definition.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redirects.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/dashboard', function () {\n    return redirect('/home/dashboard');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing JSON API Responses with PHPUnit in Laravel\nDESCRIPTION: Demonstrates how to test JSON API responses using PHPUnit in Laravel. It shows making a POST request and asserting the JSON response status and content.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * A basic functional test example.\n     */\n    public function test_making_an_api_request(): void\n    {\n        $response = $this->postJson('/api/user', ['name' => 'Sally']);\n\n        $response\n            ->assertStatus(201)\n            ->assertJson([\n                'created' => true,\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Properties with @props Directive\nDESCRIPTION: Shows how to define component data properties and provide default values using the @props directive in anonymous components.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_78\n\nLANGUAGE: blade\nCODE:\n```\n<!-- /resources/views/components/alert.blade.php -->\n\n@props(['type' => 'info', 'message'])\n\n<div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n    {{ $message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Pulse Card Blade Template\nDESCRIPTION: Example Blade template for a custom Pulse card that uses Pulse's built-in components for consistent styling and includes automatic polling.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_25\n\nLANGUAGE: blade\nCODE:\n```\n<x-pulse::card :cols=\"$cols\" :rows=\"$rows\" :class=\"$class\" wire:poll.5s=\"\">\n    <x-pulse::card-header name=\"Top Sellers\">\n        <x-slot:icon>\n            ...\n        </x-slot:icon>\n    </x-pulse::card-header>\n\n    <x-pulse::scroll :expand=\"$expand\">\n        ...\n    </x-pulse::scroll>\n</x-pulse::card>\n```\n\n----------------------------------------\n\nTITLE: Removing and Returning Items from Laravel Collection by Key in PHP\nDESCRIPTION: Shows how to use the `pull` method to remove and return an item by its key from a Laravel Collection. The snippet requires a collection with key-based items. The method mutates the original collection by removing the specified key and returns the corresponding value.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_93\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['product_id' => 'prod-100', 'name' => 'Desk']);\n\n$collection->pull('name');\n\n// 'Desk'\n\n$collection->all();\n\n// ['product_id' => 'prod-100']\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Queue Worker with Retry Attempts\nDESCRIPTION: Demonstrates how to start a Laravel queue worker with a specified number of retry attempts for failed jobs. This helps in handling transient failures.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_83\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work redis --tries=3\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Flashed Session Data in Laravel PHP\nDESCRIPTION: Illustrates how to redirect to a new URL while flashing data to the session in a single, fluent method chain. This is commonly used after successful actions to display success messages.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redirects.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('/user/profile', function () {\n    // Update the user's profile...\n\n    return redirect('/dashboard')->with('status', 'Profile updated!');\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn back()->withInput();\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Validation Errors in Laravel Tests\nDESCRIPTION: The assertJsonValidationErrors method asserts that the response has the given JSON validation errors for the specified keys. It takes an array of data and an optional response key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonValidationErrors(array $data, $responseKey = 'errors');\n```\n\n----------------------------------------\n\nTITLE: Using loadMissing() for Conditional Lazy Loading\nDESCRIPTION: This code shows how to use the loadMissing() method to load a relationship only if it hasn't been loaded already, which helps prevent redundant database queries.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_92\n\nLANGUAGE: php\nCODE:\n```\n$book->loadMissing('author');\n```\n\n----------------------------------------\n\nTITLE: Basic Where Clause Usage in Laravel\nDESCRIPTION: Demonstrates basic usage of where clauses with multiple conditions using different operators. Shows how to query users based on votes and age criteria.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->where('votes', '=', 100)\n    ->where('age', '>', 35)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Deferred Count Loading\nDESCRIPTION: Examples of loading relationship counts after the parent model has been retrieved using loadCount method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n$book = Book::first();\n\n$book->loadCount('genres');\n```\n\n----------------------------------------\n\nTITLE: Defining Route for Password Reset Link Request Form in Laravel\nDESCRIPTION: This snippet defines a route that returns a view with the password reset link request form. It uses the 'guest' middleware to ensure only non-authenticated users can access it.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passwords.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/forgot-password', function () {\n    return view('auth.forgot-password');\n})->middleware('guest')->name('password.request');\n```\n\n----------------------------------------\n\nTITLE: Mapping Laravel Collection Items (PHP)\nDESCRIPTION: Iterates over the collection, applying a callback function to each item. The callback's return value replaces the original item in a *new* collection. The original collection remains unchanged.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$multiplied = $collection->map(function (int $item, int $key) {\n    return $item * 2;\n});\n\n$multiplied->all();\n\n// [2, 4, 6, 8, 10]\n```\n\n----------------------------------------\n\nTITLE: Preventing Relationship Serialization in Laravel Queue Jobs\nDESCRIPTION: Example showing how to prevent Eloquent model relationships from being serialized when a job is queued by using the withoutRelations method in the constructor.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Create a new job instance.\n */\npublic function __construct(\n    Podcast $podcast,\n) {\n    $this->podcast = $podcast->withoutRelations();\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Array with Keys using `Arr::mapWithKeys()` - PHP\nDESCRIPTION: This snippet shows how to use `Arr::mapWithKeys()` to iterate through an array and apply a callback function that returns a key-value pair for each element.  The result is a new array with transformed keys and values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [\n    [\n        'name' => 'John',\n        'department' => 'Sales',\n        'email' => 'john@example.com',\n    ],\n    [\n        'name' => 'Jane',\n        'department' => 'Marketing',\n        'email' => 'jane@example.com',\n    ]\n];\n\n$mapped = Arr::mapWithKeys($array, function (array $item, int $key) {\n    return [$item['email'] => $item['name']];\n});\n\n/*\n    [\n        'john@example.com' => 'John',\n        'jane@example.com' => 'Jane',\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Response Handler in Laravel\nDESCRIPTION: Shows how to customize the entire HTTP response rendered by Laravel's exception handler using the respond method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->respond(function (Response $response) {\n        if ($response->getStatusCode() === 419) {\n            return back()->with([\n                'message' => 'The page expired, please try again.',\n            ]);\n        }\n\n        return $response;\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Scopes with Parameters\nDESCRIPTION: Shows how to create dynamic scopes that accept parameters to create flexible query constraints.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Attributes\\Scope;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Scope a query to only include users of a given type.\n     */\n    #[Scope]\n    protected function ofType(Builder $query, string $type): void\n    {\n        $query->where('type', $type);\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = User::ofType('admin')->get();\n```\n\n----------------------------------------\n\nTITLE: Querying N+1 Problem Example in Laravel PHP\nDESCRIPTION: Demonstrates an N+1 query problem when accessing parent models while looping through child models, even with eager loading\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$posts = Post::with('comments')->get();\n\nforeach ($posts as $post) {\n    foreach ($post->comments as $comment) {\n        echo $comment->post->title;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Stripe Billing Portal in Laravel\nDESCRIPTION: Demonstrates how to redirect a user to the Stripe billing portal using Laravel Cashier. It shows both the default redirect and a custom return URL option.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/billing-portal', function (Request $request) {\n    return $request->user()->redirectToBillingPortal();\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/billing-portal', function (Request $request) {\n    return $request->user()->redirectToBillingPortal(route('billing'));\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$url = $request->user()->billingPortalUrl(route('billing'));\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relationship with Additional Constraints\nDESCRIPTION: Example of using the relationship method as a query builder to apply additional constraints like ordering when retrieving related roles.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$roles = User::find(1)->roles()->orderBy('name')->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Token Scopes in Laravel Passport\nDESCRIPTION: This PHP snippet shows how to define token scopes in the AppServiceProvider's boot method using Laravel Passport.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Passport::tokensCan([\n        'place-orders' => 'Place orders',\n        'check-status' => 'Check order status',\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Higher Order Message each - PHP\nDESCRIPTION: Demonstrates using a 'higher order message' as a shorthand to call a method on each item in a collection. By accessing `each` as a dynamic property followed by the method name (`markAsVip`), you can concisely apply the method to every element. This requires the collection items to be objects with the specified method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_154\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = User::where('votes', '>', 500)->get();\n\n$users->each->markAsVip();\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs with Str::uuid in Laravel\nDESCRIPTION: The Str::uuid method generates a UUID (version 4), providing a universally unique identifier for use in database records or other contexts requiring unique values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_64\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nreturn (string) Str::uuid();\n```\n\n----------------------------------------\n\nTITLE: Cursor Pagination in Laravel Query Builder\nDESCRIPTION: This PHP snippet demonstrates how to use cursor pagination with Laravel's query builder for efficient pagination of large datasets.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')->orderBy('id')->cursorPaginate(15);\n```\n\n----------------------------------------\n\nTITLE: Appending Attributes to Collection Models\nDESCRIPTION: The `append` method adds an attribute to each model in the collection for serialization. It accepts either a single attribute or an array of attributes.  The example adds 'team' or 'team' and 'is_admin' attributes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users->append('team');\n```\n\nLANGUAGE: php\nCODE:\n```\n$users->append(['team', 'is_admin']);\n```\n\n----------------------------------------\n\nTITLE: Fluent Date Rule Builder Example\nDESCRIPTION: Example using Laravel's fluent date rule builder to validate dates relative to current date.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rule;\n\n'start_date' => [\n    'required',\n    Rule::date()->after(today()->addDays(7)),\n],\n```\n\n----------------------------------------\n\nTITLE: Using env() function to access environment variables in Laravel PHP\nDESCRIPTION: The env() function retrieves environment variable values with optional defaults. Note that it should only be used in configuration files before caching.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_90\n\nLANGUAGE: php\nCODE:\n```\n$env = env('APP_ENV');\n```\n\nLANGUAGE: php\nCODE:\n```\n$env = env('APP_ENV', 'production');\n```\n\n----------------------------------------\n\nTITLE: Displaying PHP Function Results in Blade\nDESCRIPTION: Example of how to execute and display the results of a PHP function within a Blade template using the echo syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\nThe current UNIX timestamp is {{ time() }}.\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in Boot Method of Laravel Service Provider\nDESCRIPTION: Demonstrates how to use dependency injection in the boot method of a Laravel service provider. The service container automatically injects the required dependencies.\nSOURCE: https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Routing\\ResponseFactory;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(ResponseFactory $response): void\n{\n    $response->macro('serialized', function (mixed $value) {\n        // ...\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Database Table Structure for Has One Through Relationship\nDESCRIPTION: Table structure showing the mechanics, cars, and owners tables needed for a Has One Through relationship in a vehicle repair shop context.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nmechanics\n    id - integer\n    name - string\n\ncars\n    id - integer\n    model - string\n    mechanic_id - integer\n\nowners\n    id - integer\n    name - string\n    car_id - integer\n```\n\n----------------------------------------\n\nTITLE: Retrieving PHP Enum Input Values in Laravel\nDESCRIPTION: Converting input values to PHP enum instances by specifying the enum class as the second parameter to the enum method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Enums\\Status;\n\n$status = $request->enum('status', Status::class);\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data in Laravel\nDESCRIPTION: Methods to remove specific items or all data from the session using forget() and flush().\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// Forget a single key...\n$request->session()->forget('name');\n\n// Forget multiple keys...\n$request->session()->forget(['name', 'status']);\n\n$request->session()->flush();\n```\n\n----------------------------------------\n\nTITLE: Defining Channel-Specific Queue Connections in Laravel\nDESCRIPTION: Implementation of viaConnections method to specify different queue connections for each notification channel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Determine which connections should be used for each notification channel.\n *\n * @return array<string, string>\n */\npublic function viaConnections(): array\n{\n    return [\n        'mail' => 'redis',\n        'database' => 'sync',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Route Grouping in Laravel\nDESCRIPTION: Demonstrates how to group routes that share a common controller using the controller() method. This allows for simplified route definitions where only the controller method needs to be specified.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\OrderController;\n\nRoute::controller(OrderController::class)->group(function () {\n    Route::get('/orders/{id}', 'show');\n    Route::post('/orders', 'store');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with Parameters in Laravel\nDESCRIPTION: This code example demonstrates how to create a middleware that accepts additional parameters, using the EnsureUserHasRole middleware as an example.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass EnsureUserHasRole\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next, string $role): Response\n    {\n        if (! $request->user()->hasRole($role)) {\n            // Redirect...\n        }\n\n        return $next($request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attributes with Prefix in Laravel Blade\nDESCRIPTION: Uses the whereStartsWith method to retrieve all attributes whose keys begin with a specified string from a component's attribute bag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_50\n\nLANGUAGE: blade\nCODE:\n```\n{{ $attributes->whereStartsWith('wire:model') }}\n```\n\n----------------------------------------\n\nTITLE: Viewing Failed Jobs in Laravel Queue\nDESCRIPTION: Command to view all failed jobs stored in the failed_jobs database table, displaying job ID, connection, queue, failure time, and other information.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_89\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:failed\n```\n\n----------------------------------------\n\nTITLE: Creating Table Migration in Laravel\nDESCRIPTION: Example of a migration class that creates a 'flights' table with id, name, airline, and timestamp columns.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('flights', function (Blueprint $table) {\n            $table->id();\n            $table->string('name');\n            $table->string('airline');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::drop('flights');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware in Laravel\nDESCRIPTION: Code for registering middleware to run on every HTTP request to the application. This is configured in the bootstrap/app.php file using the withMiddleware method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\EnsureTokenIsValid;\n\n->withMiddleware(function (Middleware $middleware) {\n     $middleware->append(EnsureTokenIsValid::class);\n})\n```\n\n----------------------------------------\n\nTITLE: Using Str::chopStart for String Prefix Removal in PHP\nDESCRIPTION: The Str::chopStart method removes the first occurrence of the given value only if it appears at the start of the string. It can also accept an array of values to check.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$url = Str::chopStart('https://laravel.com', 'https://');\n\n// 'laravel.com'\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$url = Str::chopStart('http://laravel.com', ['https://', 'http://']);\n\n// 'laravel.com'\n```\n\n----------------------------------------\n\nTITLE: Modifying Records Before Importing in Laravel Scout\nDESCRIPTION: Demonstrates how to prepare models before they are made searchable in Laravel Scout by defining a makeSearchableUsing method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Collection;\n\n/**\n * Modify the collection of models being made searchable.\n */\npublic function makeSearchableUsing(Collection $models): Collection\n{\n    return $models->load('author');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Value with Default Fallback in Laravel\nDESCRIPTION: Getting an input value with a fallback default value that will be returned if the input is not present in the request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$name = $request->input('name', 'Sally');\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Request Properties in Laravel Tests\nDESCRIPTION: Demonstrates how to use Http::fake() and Http::assertSent() to verify that a request was sent with specific headers, URL, and payload data during testing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\Request;\nuse Illuminate\\Support\\Facades\\Http;\n\nHttp::fake();\n\nHttp::withHeaders([\n    'X-First' => 'foo',\n])->post('http://example.com/users', [\n    'name' => 'Taylor',\n    'role' => 'Developer',\n]);\n\nHttp::assertSent(function (Request $request) {\n    return $request->hasHeader('X-First', 'foo') &&\n           $request->url() == 'http://example.com/users' &&\n           $request['name'] == 'Taylor' &&\n           $request['role'] == 'Developer';\n});\n```\n\n----------------------------------------\n\nTITLE: User Logout Implementation in Laravel\nDESCRIPTION: Complete logout implementation including session invalidation and CSRF token regeneration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Support\\Facades\\Auth;\n\n/**\n * Log the user out of the application.\n */\npublic function logout(Request $request): RedirectResponse\n{\n    Auth::logout();\n\n    $request->session()->invalidate();\n\n    $request->session()->regenerateToken();\n\n    return redirect('/');\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Array Cast Attributes in Laravel Eloquent (PHP)\nDESCRIPTION: Illustrates how to interact with an Eloquent attribute (`options`) that has been cast to `array`. It shows retrieving the attribute (which is automatically deserialized from JSON), modifying the resulting PHP array, assigning it back to the model, and saving the changes (which automatically serializes the array back to JSON). Requires the `User` model with the `options` attribute cast to `array`.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$options = $user->options;\n\n$options['key'] = 'value';\n\n$user->options = $options;\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Route Name Prefixing in Laravel\nDESCRIPTION: Shows how to prefix route names within a group using the name() method, useful for organizing and namespacing route names.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nRoute::name('admin.')->group(function () {\n    Route::get('/users', function () {\n        // Route assigned name \"admin.users\"...\n    })->name('users');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Delays in Class (PHP)\nDESCRIPTION: Demonstrates how to define a withDelay method in the notification class to specify channel-specific delays.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Determine the notification's delivery delay.\n *\n * @return array<string, \\Illuminate\\Support\\Carbon>\n */\npublic function withDelay(object $notifiable): array\n{\n    return [\n        'mail' => now()->addMinutes(5),\n        'sms' => now()->addMinutes(10),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting New Records with Eloquent Models in Laravel Controller\nDESCRIPTION: Example of a Laravel controller method that creates and saves a new Flight model instance. The method validates a request, sets model attributes, and redirects after saving.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Flight;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass FlightController extends Controller\n{\n    /**\n     * Store a new flight in the database.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        // Validate the request...\n\n        $flight = new Flight;\n\n        $flight->name = $request->name;\n\n        $flight->save();\n\n        return redirect('/flights');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Model with Controller in Laravel\nDESCRIPTION: Commands to create an Eloquent model with a corresponding controller class for handling HTTP requests related to the model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Generate a model and a FlightController class...\nphp artisan make:model Flight --controller\nphp artisan make:model Flight -c\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies in Laravel\nDESCRIPTION: Configuration examples for setting up trusted proxies and headers in Laravel applications behind load balancers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->trustProxies(at: [\n        '192.168.1.1',\n        '10.0.0.0/8',\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Dispatching Closures to Laravel Queue\nDESCRIPTION: Example of queueing a simple closure in Laravel that executes the publish method on a Podcast model instance. This demonstrates the basic syntax for adding closures to the queue.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$podcast = App\\Podcast::find(1);\n\ndispatch(function () use ($podcast) {\n    $podcast->publish();\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating N+1 Query Problem in Laravel\nDESCRIPTION: This code snippet demonstrates the N+1 query problem in Laravel, where retrieving all books and accessing their authors results in one query for books and a separate query for each book's author.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_74\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Book;\n\n$books = Book::all();\n\nforeach ($books as $book) {\n    echo $book->author->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Inbound Hashing Cast (PHP)\nDESCRIPTION: Defines a custom cast class `AsHash` implementing `CastsInboundAttributes` for inbound-only casting. The `set` method hashes the incoming value using `bcrypt` by default or a specified algorithm passed via the constructor before storage. It does not perform any operations when retrieving the attribute.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass AsHash implements CastsInboundAttributes\n{\n    /**\n     * Create a new cast class instance.\n     */\n    public function __construct(\n        protected string|null $algorithm = null,\n    ) {}\n\n    /**\n     * Prepare the given value for storage.\n     *\n     * @param  array<string, mixed>  $attributes\n     */\n    public function set(\n        Model $model,\n        string $key,\n        mixed $value,\n        array $attributes,\n    ): string {\n        return is_null($this->algorithm)\n            ? bcrypt($value)\n            : hash($this->algorithm, $value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Attributes in Laravel Blade\nDESCRIPTION: Uses the except method to retrieve all attributes except those with specified keys from a component's attribute bag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_58\n\nLANGUAGE: blade\nCODE:\n```\n{{ $attributes->except(['class']) }}\n```\n\n----------------------------------------\n\nTITLE: Creating Remember Token Column\nDESCRIPTION: Creates a nullable VARCHAR(100) column for storing authentication remember-me tokens.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$table->rememberToken();\n```\n\n----------------------------------------\n\nTITLE: Delaying Manually Released Jobs in Laravel Queue\nDESCRIPTION: Examples of releasing a Laravel queue job with a delay specified in seconds or using a date instance to determine when the job should become available for processing again.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$this->release(10);\n\n$this->release(now()->addSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Validating Image Dimensions with Rule Builder in Laravel\nDESCRIPTION: Demonstrates how to fluently define image dimension validation constraints using Laravel's Rule::dimensions method. The example sets maximum width, height, and aspect ratio requirements for an avatar image.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\n\nValidator::make($data, [\n    'avatar' => [\n        'required',\n        Rule::dimensions()\n            ->maxWidth(1000)\n            ->maxHeight(500)\n            ->ratio(3 / 2),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Jobs in Laravel by ID\nDESCRIPTION: Command to retry a specific failed job by its ID. This allows you to attempt to reprocess a job that previously failed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_90\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:retry ce7bb17c-cdd8-41f0-a8ec-7b4fef4e5ece\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Specific Columns in Laravel\nDESCRIPTION: This snippet demonstrates how to optimize queries by specifying exactly which columns to retrieve when eager loading relationships, reducing the amount of data transferred from the database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_82\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author:id,name,book_id')->get();\n```\n\n----------------------------------------\n\nTITLE: Debugging Raw SQL in Laravel Query Builder\nDESCRIPTION: Demonstrates the dumpRawSql and ddRawSql methods in Laravel's query builder. These methods display the raw SQL with all parameter bindings properly substituted, with ddRawSql stopping execution after displaying.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nDB::table('users')->where('votes', '>', 100)->dumpRawSql();\n\nDB::table('users')->where('votes', '>', 100)->ddRawSql();\n```\n\n----------------------------------------\n\nTITLE: Implementing Remember Me Functionality in Laravel Authentication\nDESCRIPTION: This snippet demonstrates how to implement 'remember me' functionality in Laravel authentication. It shows how to pass a boolean value to the attempt method to keep the user authenticated indefinitely.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Auth;\n\nif (Auth::attempt(['email' => $email, 'password' => $password], $remember)) {\n    // The user is being remembered...\n}\n\nif (Auth::viaRemember()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Models with Laravel Factory\nDESCRIPTION: Demonstrates how to create single and multiple model instances using Laravel's factory create() method with optional attribute overrides.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n// Create a single App\\Models\\User instance...\n$user = User::factory()->create();\n\n// Create three App\\Models\\User instances...\n$users = User::factory()->count(3)->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = User::factory()->create([\n    'name' => 'Abigail',\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Search with Dynamic Results\nDESCRIPTION: Implementation of search function with dynamic database querying based on user input.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\search;\n\n$id = search(\n    label: 'Search for the user that should receive the mail',\n    options: fn (string $value) => strlen($value) > 0\n        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n        : [],\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Broadcast Notification Type in Laravel\nDESCRIPTION: Demonstrates how to customize the notification type that appears in broadcast data by defining a broadcastType method on the notification class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the type of the notification being broadcast.\n */\npublic function broadcastType(): string\n{\n    return 'broadcast.message';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Injection with Route Parameters in Laravel\nDESCRIPTION: Demonstrates how to combine route parameters with dependency injection in Laravel route callbacks, allowing for automatic injection of dependencies alongside route parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/user/{id}', function (Request $request, string $id) {\n    return 'User '.$id;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining BelongsTo Relationship in Laravel\nDESCRIPTION: Demonstrates how to define an inverse hasMany relationship using belongsTo method on the child model\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass Comment extends Model\n{\n    /**\n     * Get the post that owns the comment.\n     */\n    public function post(): BelongsTo\n    {\n        return $this->belongsTo(Post::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Laravel Session ID\nDESCRIPTION: Methods to regenerate session ID to prevent session fixation attacks. Shows how to regenerate the session while keeping or clearing session data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$request->session()->regenerate();\n```\n\nLANGUAGE: php\nCODE:\n```\n$request->session()->invalidate();\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration for Laravel Queue Workers\nDESCRIPTION: Provides a sample Supervisor configuration file for managing Laravel queue workers. This ensures workers are automatically restarted if they fail or stop running.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_81\n\nLANGUAGE: ini\nCODE:\n```\n[program:laravel-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php /home/forge/app.com/artisan queue:work sqs --sleep=3 --tries=3 --max-time=3600\nautostart=true\nautorestart=true\nstopasgroup=true\nkillasgroup=true\nuser=forge\nnumprocs=8\nredirect_stderr=true\nstdout_logfile=/home/forge/app.com/worker.log\nstopwaitsecs=3600\n```\n\n----------------------------------------\n\nTITLE: Listening for Broadcast Notifications with Laravel Echo in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use Laravel Echo to listen for broadcast notifications on a private channel. It sets up a listener for notifications sent to a specific user, identified by their user ID. The callback function logs the notification type to the console when a new notification is received.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nEcho.private(`App.Models.User.${userId}`)\n    .notification((notification) => {\n        console.log(notification.type);\n    });\n```\n\n----------------------------------------\n\nTITLE: Custom Cast to Value Object\nDESCRIPTION: This code snippet defines a custom cast class that casts multiple model values into a single `Address` value object. It implements the `CastsAttributes` interface, defining the `get` and `set` methods to handle conversion to and from the value object.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse App\\ValueObjects\\Address;\nuse Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse InvalidArgumentException;\n\nclass AsAddress implements CastsAttributes\n{\n    /**\n     * Cast the given value.\n     *\n     * @param  array<string, mixed>  $attributes\n     */\n    public function get(\n        Model $model,\n        string $key,\n        mixed $value,\n        array $attributes,\n    ): Address {\n        return new Address(\n            $attributes['address_line_one'],\n            $attributes['address_line_two']\n        );\n    }\n\n    /**\n     * Prepare the given value for storage.\n     *\n     * @param  array<string, mixed>  $attributes\n     * @return array<string, string>\n     */\n    public function set(\n        Model $model,\n        string $key,\n        mixed $value,\n        array $attributes,\n    ): array {\n        if (! $value instanceof Address) {\n            throw new InvalidArgumentException('The given value is not an Address instance.');\n        }\n\n        return [\n            'address_line_one' => $value->lineOne,\n            'address_line_two' => $value->lineTwo,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Cookie Presence in Laravel Tests\nDESCRIPTION: This snippet demonstrates how to assert that a response contains a specific cookie, optionally checking its value, using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$response->assertCookie($cookieName, $value = null);\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Error Messages in Laravel\nDESCRIPTION: Shows how to customize validation error messages by overriding the messages method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the error messages for the defined validation rules.\n *\n * @return array<string, string>\n */\npublic function messages(): array\n{\n    return [\n        'title.required' => 'A title is required',\n        'body.required' => 'A message is required',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Roles with Laravel Eloquent\nDESCRIPTION: Example of accessing roles associated with a user through the roles relationship property, demonstrating how to iterate through the collection of related models.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\nforeach ($user->roles as $role) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Changed Attributes with wasChanged Method in Laravel\nDESCRIPTION: Examples of using wasChanged method to determine if attributes were changed when the model was last saved in the current request cycle.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n\n$user->save();\n\n$user->wasChanged(); // true\n$user->wasChanged('title'); // true\n$user->wasChanged(['title', 'slug']); // true\n$user->wasChanged('first_name'); // false\n$user->wasChanged(['first_name', 'title']); // true\n```\n\n----------------------------------------\n\nTITLE: Building Value Objects From Multiple Attributes\nDESCRIPTION: Example of creating a value object from multiple model attributes using an accessor in Laravel Eloquent.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Support\\Address;\nuse Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n/**\n * Interact with the user's address.\n */\nprotected function address(): Attribute\n{\n    return Attribute::make(\n        get: fn (mixed $value, array $attributes) => new Address(\n            $attributes['address_line_one'],\n            $attributes['address_line_two'],\n        ),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Symbolic Link in Laravel\nDESCRIPTION: Command to create a symbolic link from storage/app/public to public/storage, making files in the public disk accessible via the web.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan storage:link\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Attributes with $attributes Variable\nDESCRIPTION: Shows how to render all component attributes that are not part of the constructor using the $attributes variable, automatically passing HTML attributes to elements.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_44\n\nLANGUAGE: blade\nCODE:\n```\n<div {{ $attributes }}>\n    <!-- Component content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Advanced Password Validation in Laravel\nDESCRIPTION: This snippet demonstrates various methods to customize password complexity requirements, such as requiring letters, mixed case, numbers, and symbols.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_84\n\nLANGUAGE: php\nCODE:\n```\n// Require at least 8 characters...\nPassword::min(8)\n\n// Require at least one letter...\nPassword::min(8)->letters()\n\n// Require at least one uppercase and one lowercase letter...\nPassword::min(8)->mixedCase()\n\n// Require at least one number...\nPassword::min(8)->numbers()\n\n// Require at least one symbol...\nPassword::min(8)->symbols()\n```\n\n----------------------------------------\n\nTITLE: Limit and Offset Query Examples\nDESCRIPTION: Demonstrates how to limit the number of results and skip records using various methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')->skip(10)->take(5)->get();\n\n$users = DB::table('users')\n    ->offset(10)\n    ->limit(5)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Queue Worker with Backoff\nDESCRIPTION: Shows how to start a Laravel queue worker with a specified backoff time between retry attempts for failed jobs. This can help in scenarios where immediate retries might not be beneficial.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_84\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work redis --tries=3 --backoff=3\n```\n\n----------------------------------------\n\nTITLE: Finding a Model or Failing\nDESCRIPTION: The `findOrFail` method retrieves a model by its primary key, or throws an exception if the model isn't found. It demonstrates a similar function to `find`, but with error handling.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = User::all();\n\n$user = $users->findOrFail(1);\n```\n\n----------------------------------------\n\nTITLE: Adding Records to Search Index in Laravel Scout\nDESCRIPTION: Demonstrates various ways to add records to the search index in Laravel Scout, including saving individual models and using the searchable method on queries and collections.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\n\n$order = new Order;\n\n// ...\n\n$order->save();\n\nOrder::where('price', '>', 100)->searchable();\n\n$user->orders()->searchable();\n\n$orders->searchable();\n```\n\n----------------------------------------\n\nTITLE: Accessing Input via Dynamic Properties in Laravel Request\nDESCRIPTION: Using dynamic properties on the Request instance to directly access input values without calling methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$name = $request->name;\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Sanctum Authentication\nDESCRIPTION: Example of protecting API routes using Sanctum authentication middleware.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/user', function (Request $request) {\n    return $request->user();\n})->middleware('auth:sanctum');\n```\n\n----------------------------------------\n\nTITLE: Using Basic Component Slots in Laravel Blade\nDESCRIPTION: Shows how to inject content into a component's default slot by placing content between the component's opening and closing tags.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_60\n\nLANGUAGE: blade\nCODE:\n```\n<x-alert>\n    <strong>Whoops!</strong> Something went wrong!\n</x-alert>\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: Artisan command to run migrations and create the required database tables for Cashier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Accessing Process Output in PHP\nDESCRIPTION: Demonstrates different ways to access and handle process output, including real-time output handling.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Process;\n\n$result = Process::run('ls -la');\n\necho $result->output();\necho $result->errorOutput();\n\n$result = Process::run('ls -la', function (string $type, string $output) {\n    echo $output;\n});\n\nif (Process::run('ls -la')->seeInOutput('laravel')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Values in Laravel Collection in PHP\nDESCRIPTION: Explains using `search` to find an item by value within a collection, returning the key if found or false otherwise. Supports loose comparison by default, and strict comparison by passing a `true` flag. Allows searching with a closure predicate for custom logic. Inputs include collection, search value or closure; returns the matching key or false.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_104\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([2, 4, 6, 8]);\n\n$collection->search(4);\n\n// 1\n```\n\nLANGUAGE: php\nCODE:\n```\ncollect([2, 4, 6, 8])->search('4', strict: true);\n\n// false\n```\n\nLANGUAGE: php\nCODE:\n```\ncollect([2, 4, 6, 8])->search(function (int $item, int $key) {\n    return $item > 5;\n});\n\n// 2\n```\n\n----------------------------------------\n\nTITLE: Defining Default Password Rules in Laravel\nDESCRIPTION: This snippet shows how to define default password validation rules in a service provider's boot method, allowing for different rules in production and non-production environments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_87\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rules\\Password;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Password::defaults(function () {\n        $rule = Password::min(8);\n\n        return $this->app->isProduction()\n            ? $rule->mixedCase()->uncompromised()\n            : $rule;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements with `Arr::join()` - PHP\nDESCRIPTION: This snippet shows how to join array elements using the `Arr::join()` method. It accepts the array, a separator, and an optional final separator. The elements are concatenated into a string, using the specified separators.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['Tailwind', 'Alpine', 'Laravel', 'Livewire'];\n\n$joined = Arr::join($array, ', ');\n\n// Tailwind, Alpine, Laravel, Livewire\n\n$joined = Arr::join($array, ', ', ' and ');\n\n// Tailwind, Alpine, Laravel and Livewire\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES with Temporary Credentials in Laravel\nDESCRIPTION: PHP configuration array to set up Amazon SES services with temporary credentials in Laravel's services.php config file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n'ses' => [\n    'key' => env('AWS_ACCESS_KEY_ID'),\n    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n    'token' => env('AWS_SESSION_TOKEN'),\n],\n```\n\n----------------------------------------\n\nTITLE: Cache Item Removal\nDESCRIPTION: Shows various methods to remove items from cache including forget(), expiration, and flush().\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nCache::forget('key');\n\nCache::put('key', 'value', 0);\n\nCache::put('key', 'value', -5);\n\nCache::flush();\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive String Contains Check in Laravel PHP\nDESCRIPTION: The contains method supports case-insensitive checks by setting the ignoreCase parameter to true.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_97\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$contains = Str::of('This is my name')->contains('MY', ignoreCase: true);\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel CLI Tool via Composer\nDESCRIPTION: Command to globally install the Laravel installer CLI tool using Composer. This tool is needed to create new Laravel applications with starter kits.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer global require laravel/installer\n```\n\n----------------------------------------\n\nTITLE: Creating Testable Delays with Laravel Sleep Class for Different Time Units in PHP\nDESCRIPTION: Demonstrates Laravel's Sleep class as a wrapper around PHP's sleep/usleep functions, allowing pausing execution with various units like seconds, milliseconds, microseconds, minutes, or until a specific time. It supports chaining to combine time units and has methods for returning values after waiting or sleeping conditionally while a function returns true. Requires Illuminate\\Support\\Sleep and PHP native time functions. This API improves testability and code clarity over direct PHP functions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_137\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Sleep;\\n\\n$waiting = true;\\n\\nwhile ($waiting) {\\n    Sleep::for(1)->second();\\n\\n    $waiting = /* ... */;\\n}\\n\\n// Return a value after sleeping...\\n$result = Sleep::for(1)->second()->then(fn () => 1 + 1);\\n\\n// Sleep while a given value is true...\\nSleep::for(1)->second()->while(fn () => shouldKeepSleeping());\\n\\n// Pause execution for 90 seconds...\\nSleep::for(1.5)->minutes();\\n\\n// Pause execution for 2 seconds...\\nSleep::for(2)->seconds();\\n\\n// Pause execution for 500 milliseconds...\\nSleep::for(500)->milliseconds();\\n\\n// Pause execution for 5,000 microseconds...\\nSleep::for(5000)->microseconds();\\n\\n// Pause execution until a given time...\\nSleep::until(now()->addMinute());\\n\\n// Alias of PHP's native \"sleep\" function...\\nSleep::sleep(2);\\n\\n// Alias of PHP's native \"usleep\" function...\\nSleep::usleep(5000);\n```\n\n----------------------------------------\n\nTITLE: Asserting Redirects in Laravel Test Responses\nDESCRIPTION: Methods to assert various types of redirects in the response, including general redirects, redirects to specific routes, and signed routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$response->assertRedirect($uri = null);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertRedirectContains($string);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertRedirectToRoute($name, $parameters = []);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertRedirectToSignedRoute($name = null, $parameters = []);\n```\n\n----------------------------------------\n\nTITLE: Authorizing Broadcast Channels in PHP\nDESCRIPTION: Example of defining channel authorization rules in the routes/channels.php file to control access to private channels.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\nuse App\\Models\\User;\n\nBroadcast::channel('orders.{orderId}', function (User $user, int $orderId) {\n    return $user->id === Order::findOrNew($orderId)->user_id;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Blade Directives for Method Spoofing and CSRF Protection\nDESCRIPTION: This snippet demonstrates how to use Blade's @method and @csrf directives to simplify HTTP method spoofing and CSRF protection in forms. These directives generate the necessary hidden input fields.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_43\n\nLANGUAGE: blade\nCODE:\n```\n<form action=\"/example\" method=\"POST\">\n    @method('PUT')\n    @csrf\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using View Facade\nDESCRIPTION: Example of using Laravel's View facade to return a view with data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/views.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\View;\n\nreturn View::make('greeting', ['name' => 'James']);\n```\n\n----------------------------------------\n\nTITLE: Using Extensions Rule for File Validation in Laravel\nDESCRIPTION: Shows how to use the 'extensions' rule to validate file extensions in Laravel. This should be used in combination with 'mimes' or 'mimetypes' rules for security.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n'photo' => ['required', 'extensions:jpg,png'],\n```\n\n----------------------------------------\n\nTITLE: Creating Database Indexes in Laravel\nDESCRIPTION: Examples of creating different types of indexes including unique indexes and composite indexes using Laravel's Schema Builder.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('users', function (Blueprint $table) {\n    $table->string('email')->unique();\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Push with `when()` in PHP\nDESCRIPTION: The `when()` method conditionally executes a callback based on a boolean condition. If the first argument is true, the first callback is executed; otherwise it's skipped. Optionally, a second callback can be provided and is executed when the first argument is false. Requires a Laravel Collection instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_141\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([1, 2, 3]);\n\n$collection->when(true, function (Collection $collection, int $value) {\n    return $collection->push(4);\n});\n\n$collection->when(false, function (Collection $collection, int $value) {\n    return $collection->push(5);\n});\n\n$collection->all();\n\n// [1, 2, 3, 4]\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([1, 2, 3]);\n\n$collection->when(false, function (Collection $collection, int $value) {\n    return $collection->push(4);\n}, function (Collection $collection) {\n    return $collection->push(5);\n});\n\n$collection->all();\n\n// [1, 2, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Using Published shadcn Components in React\nDESCRIPTION: Example of importing and using a published shadcn Switch component in a React page component after it has been added to the project.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch } from \"@/components/ui/switch\"\n\nconst MyPage = () => {\n  return (\n    <div>\n      <Switch />\n    </div>\n  );\n};\n\nexport default MyPage;\n```\n\n----------------------------------------\n\nTITLE: Loading Eloquent Models with Lazy Collection Cursor - PHP\nDESCRIPTION: Demonstrates creating a `LazyCollection` from Eloquent models using the query builder's `cursor()` method. This approach utilizes PHP generators to fetch and process models one by one as they are iterated, significantly reducing memory usage compared to `all()` for large datasets. Filtering and other collection operations are applied as the data is streamed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_158\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = User::cursor()->filter(function (User $user) {\n    return $user->id > 500;\n});\n\nforeach ($users as $user) {\n    echo $user->id;\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Policies in PHP\nDESCRIPTION: Demonstrates how to manually register policies and their corresponding models using the Gate facade within the boot method of the AppServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\nuse App\\Policies\\OrderPolicy;\nuse Illuminate\\Support\\Facades\\Gate;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Gate::policy(Order::class, OrderPolicy::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Messages in Language Files\nDESCRIPTION: Shows how to customize validation messages for specific attributes and rules in language files.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n'custom' => [\n    'email' => [\n        'required' => 'We need to know your email address!',\n        'max' => 'Your email address is too long!'\n    ],\n],\n```\n\nLANGUAGE: php\nCODE:\n```\n'attributes' => [\n    'email' => 'email address',\n],\n```\n\nLANGUAGE: php\nCODE:\n```\n'values' => [\n    'payment_type' => [\n        'cc' => 'credit card'\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Basic Text Input with Laravel Prompts\nDESCRIPTION: Examples of using the text() function to collect user input with optional configuration for placeholder, default value, and hints.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\text;\n\n$name = text('What is your name?');\n```\n\nLANGUAGE: php\nCODE:\n```\n$name = text(\n    label: 'What is your name?',\n    placeholder: 'E.g. Taylor Otwell',\n    default: $user?->name,\n    hint: 'This will be displayed on your profile.'\n);\n```\n\n----------------------------------------\n\nTITLE: Joining Collection Items - PHP\nDESCRIPTION: The `implode` method joins the items of a collection into a string.  If the collection contains arrays or objects, specify the key to implode.  If the collection contains simple values, provide the glue string as the only argument.  It can use a closure for formatting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([\n    ['account_id' => 1, 'product' => 'Desk'],\n    ['account_id' => 2, 'product' => 'Chair'],\n]);\n\n$collection->implode('product', ', ');\n\n// 'Desk, Chair'\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ncollect([1, 2, 3, 4, 5])->implode('-');\n\n// '1-2-3-4-5'\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection->implode(function (array $item, int $key) {\n    return strtoupper($item['product']);\n}, ', ');\n\n// 'DESK, CHAIR'\n\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Eloquent Models in Laravel PHP\nDESCRIPTION: Demonstrates how to redirect to a route with parameters populated from an Eloquent model. It also shows how to customize the route key value using the getRouteKey method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redirects.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// For a route with the following URI: profile/{id}\n\nreturn redirect()->route('profile', [$user]);\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the value of the model's route key.\n */\npublic function getRouteKey(): mixed\n{\n    return $this->slug;\n}\n```\n\n----------------------------------------\n\nTITLE: Laravel Cache Facade Implementation\nDESCRIPTION: Shows the implementation of the Cache facade class, demonstrating how it extends the base Facade class and defines the getFacadeAccessor method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Cache extends Facade\n{\n    /**\n     * Get the registered name of the component.\n     */\n    protected static function getFacadeAccessor(): string\n    {\n        return 'cache';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Related Soft Deleted Models in Laravel Eloquent\nDESCRIPTION: Demonstrates how to restore soft deleted models in a relationship by calling the restore() method on the relationship.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n$flight->history()->restore();\n```\n\n----------------------------------------\n\nTITLE: Authorizing Actions Without Models Using Gate Facade in Laravel\nDESCRIPTION: This code demonstrates how to use the Gate facade to authorize an action that doesn't require a specific model instance, such as 'create'. It uses the 'authorize' method with a class name instead of a model instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Gate;\n\n/**\n * Create a new blog post.\n *\n * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n */\npublic function create(Request $request): RedirectResponse\n{\n    Gate::authorize('create', Post::class);\n\n    // The current user can create blog posts...\n\n    return redirect('/posts');\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Multiple Soft Deleted Models with a Query in Laravel\nDESCRIPTION: Shows how to restore multiple soft deleted models by building a query with conditions and calling the restore() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_64\n\nLANGUAGE: php\nCODE:\n```\nFlight::withTrashed()\n    ->where('airline_id', 1)\n    ->restore();\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Status Codes in Laravel Test Responses\nDESCRIPTION: Various methods to assert specific HTTP status codes in the response, including method not allowed, moved permanently, not found, ok, payment required, and more.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$response->assertMethodNotAllowed();\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertMovedPermanently();\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertNotFound();\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertOk();\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertPaymentRequired();\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertRequestTimeout();\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertServerError();\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertServiceUnavailable();\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Attribute Transform in Laravel Resource\nDESCRIPTION: Demonstrates how to conditionally include attributes in a resource response based on user authorization using the when() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function toArray(Request $request): array\n{\n    return [\n        'id' => $this->id,\n        'name' => $this->name,\n        'email' => $this->email,\n        'secret' => $this->when($request->user()->isAdmin(), 'secret-value'),\n        'created_at' => $this->created_at,\n        'updated_at' => $this->updated_at,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GEOMETRY Column in Laravel Migration\nDESCRIPTION: The geometry method creates a GEOMETRY equivalent column with the given spatial type and SRID (Spatial Reference System Identifier) in a Laravel database migration. Note that support for spatial types depends on the database driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n$table->geometry('positions', subtype: 'point', srid: 0);\n```\n\n----------------------------------------\n\nTITLE: Using with() Method for Eager Loading in Laravel\nDESCRIPTION: This snippet shows how to use the with() method to eager load the author relationship when retrieving books, reducing the number of database queries from N+1 to just 2.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author')->get();\n\nforeach ($books as $book) {\n    echo $book->author->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Date Fields Validation\nDESCRIPTION: Example showing how to validate that a finish date must be after a start date field.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n'finish_date' => 'required|date|after:start_date'\n```\n\n----------------------------------------\n\nTITLE: Testing File Uploads in Laravel\nDESCRIPTION: Demonstrates how to test file uploads using fake storage and uploaded files.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nStorage::fake('avatars');\n\n$file = UploadedFile::fake()->image('avatar.jpg');\n\n$response = $this->post('/avatar', [\n    'avatar' => $file,\n]);\n\nStorage::disk('avatars')->assertExists($file->hashName());\n```\n\n----------------------------------------\n\nTITLE: Keying Array by Given Key with `Arr::keyBy()` - PHP\nDESCRIPTION: This snippet demonstrates how to use the `Arr::keyBy()` method to key an array of associative arrays by a specific key. If multiple items have the same key, the last one will be used as the value for that key in the resulting array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [\n    ['product_id' => 'prod-100', 'name' => 'Desk'],\n    ['product_id' => 'prod-200', 'name' => 'Chair'],\n];\n\n$keyed = Arr::keyBy($array, 'product_id');\n\n/*\n    [\n        'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n        'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing the Castable Interface in Value Object (PHP)\nDESCRIPTION: Defines a value object `Address` that implements the `Castable` interface. It requires a static `castUsing` method that returns the class name of the custom caster (e.g., `App\\Casts\\AsAddress`) responsible for handling the serialization and deserialization of this value object.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\ValueObjects;\n\nuse Illuminate\\Contracts\\Database\\Eloquent\\Castable;\nuse App\\Casts\\AsAddress;\n\nclass Address implements Castable\n{\n    /**\n     * Get the name of the caster class to use when casting from / to this cast target.\n     *\n     * @param  array<string, mixed>  $arguments\n     */\n    public static function castUsing(array $arguments): string\n    {\n        return AsAddress::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Two Factor Authentication Recovery Codes in PHP\nDESCRIPTION: This snippet demonstrates how to access the user's two factor authentication recovery codes using the authenticated user instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n(array) $request->user()->recoveryCodes()\n```\n\n----------------------------------------\n\nTITLE: Pausing Subscriptions in Laravel Cashier\nDESCRIPTION: Methods for pausing user subscriptions with various timing options. Includes immediate pause, scheduled pause, and pause until specific date functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription()->pause();\n\n$user->subscription()->pauseNow();\n\n$user->subscription()->pauseUntil(now()->addMonth());\n\n$user->subscription()->pauseNowUntil(now()->addMonth());\n\nif ($user->subscription()->onPausedGracePeriod()) {\n    // ...\n}\n\n$user->subscription()->resume();\n```\n\n----------------------------------------\n\nTITLE: Modifying Uri Components Fluently in Laravel\nDESCRIPTION: Illustrates how to fluently modify different parts of a `Uri` instance using chained `with*` methods. Shows how to change the scheme, host, port, path, query parameters, and fragment of a URI.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_146\n\nLANGUAGE: php\nCODE:\n```\n$uri = Uri::of('https://example.com')\n    ->withScheme('http')\n    ->withHost('test.com')\n    ->withPort(8000)\n    ->withPath('/users')\n    ->withQuery(['page' => 2])\n    ->withFragment('section-1');\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Notification Channel in Laravel\nDESCRIPTION: Demonstrates how to create a custom notification channel in Laravel by defining a class with a send method that processes notifications for delivery through a new channel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Notifications;\n\nuse Illuminate\\Notifications\\Notification;\n\nclass VoiceChannel\n{\n    /**\n     * Send the given notification.\n     */\n    public function send(object $notifiable, Notification $notification): void\n    {\n        $message = $notification->toVoice($notifiable);\n\n        // Send notification to the $notifiable instance...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Naming a Batch in Laravel Queue\nDESCRIPTION: Demonstrates how to assign a name to a batch of queued jobs using the name method. This can improve debugging information in tools like Laravel Horizon and Telescope.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$batch = Bus::batch([\n    // ...\n])->then(function (Batch $batch) {\n    // All jobs completed successfully...\n})->name('Import CSV')->dispatch();\n```\n\n----------------------------------------\n\nTITLE: File Upload Handling in Laravel\nDESCRIPTION: Examples of handling file uploads including validation and storage operations using Laravel's UploadedFile class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$file = $request->file('photo');\n\n$file = $request->photo;\n\nif ($request->hasFile('photo')) {\n    // ...\n}\n\nif ($request->file('photo')->isValid()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent Has One Through Relationship Definition\nDESCRIPTION: Alternative syntax for defining Has One Through relationships using the through method when relationships are already defined.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// String based syntax...\nreturn $this->through('cars')->has('owner');\n\n// Dynamic syntax...\nreturn $this->throughCars()->hasOwner();\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Controller with Model in Laravel\nDESCRIPTION: Uses Artisan command to create a resource controller with a specified model. This generates a controller with CRUD methods pre-configured for the given model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:controller PhotoController --model=Photo --resource\n```\n\n----------------------------------------\n\nTITLE: Using Preserved Keys in UserResource Collection\nDESCRIPTION: Demonstrates how to use a UserResource with preserved keys when returning a collection from a Laravel route.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Resources\\UserResource;\nuse App\\Models\\User;\n\nRoute::get('/users', function () {\n    return UserResource::collection(User::all()->keyBy->id);\n});\n```\n\n----------------------------------------\n\nTITLE: Casting Attribute to Laravel Collection in Laravel Eloquent (PHP)\nDESCRIPTION: Demonstrates using the `Illuminate\\Database\\Eloquent\\Casts\\AsCollection` class within the `casts()` method to cast a JSON attribute (`options`) to an `Illuminate\\Support\\Collection` instance. This provides access to Laravel's collection methods for the attribute's data. Requires importing the `AsCollection` class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n\n/**\n * Get the attributes that should be cast.\n *\n * @return array<string, string>\n */\nprotected function casts(): array\n{\n    return [\n        'options' => AsCollection::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Scheduled Tasks in Laravel\nDESCRIPTION: Shows the command to view all scheduled tasks and their next run times.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan schedule:list\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Input Values as Associative Array in Laravel\nDESCRIPTION: Calling the input method without arguments to get all input values as an associative array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$input = $request->input();\n```\n\n----------------------------------------\n\nTITLE: Chaining Map and Reject Operations\nDESCRIPTION: This snippet illustrates how to use `reject` and `map` methods on an Eloquent collection to manipulate the data. It filters out inactive users and extracts the names of the remaining users.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$names = User::all()->reject(function (User $user) {\n    return $user->active === false;\n})->map(function (User $user) {\n    return $user->name;\n});\n```\n\n----------------------------------------\n\nTITLE: File Download Response Generation\nDESCRIPTION: Creating download responses for files with optional custom filename and headers\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nreturn Storage::download('file.jpg');\n\nreturn Storage::download('file.jpg', $name, $headers);\n```\n\n----------------------------------------\n\nTITLE: Grouped Or Where Conditions\nDESCRIPTION: Shows how to group OR conditions within parentheses using a closure for complex conditional logic.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->where('votes', '>', 100)\n    ->orWhere(function (Builder $query) {\n        $query->where('name', 'Abigail')\n            ->where('votes', '>', 50);\n        })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Performing Upsert Operations with Laravel Eloquent\nDESCRIPTION: Demonstrates using the upsert() method to insert new records or update existing ones in a single atomic operation based on unique constraints.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nFlight::upsert([\n    ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n    ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n], uniqueBy: ['departure', 'destination'], update: ['price']);\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Dusk Base Files\nDESCRIPTION: Artisan command to install Laravel Dusk's initial files including browser test directory and Chrome Driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan dusk:install\n```\n\n----------------------------------------\n\nTITLE: Defining Rate Limiters for Laravel Jobs\nDESCRIPTION: Example of defining rate limiters for jobs using the RateLimiter facade in the AppServiceProvider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Cache\\RateLimiting\\Limit;\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    RateLimiter::for('backups', function (object $job) {\n        return $job->user->vipCustomer()\n            ? Limit::none()\n            : Limit::perHour(1)->by($job->user->id);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data via Request Instance in Laravel Controller\nDESCRIPTION: Example of accessing session data in a Laravel controller by type-hinting a Request instance and using the session() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\View\\View;\n\nclass UserController extends Controller\n{\n    /**\n     * Show the profile for the given user.\n     */\n    public function show(Request $request, string $id): View\n    {\n        $value = $request->session()->get('key');\n\n        // ...\n\n        $user = $this->users->find($id);\n\n        return view('user.profile', ['user' => $user]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Browser Test Example in Laravel Dusk using PHPUnit\nDESCRIPTION: Shows a basic browser test using Laravel Dusk with PHPUnit syntax, including database migrations, user creation, and browser interactions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Browser;\n\nuse App\\Models\\User;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nuse Laravel\\Dusk\\Browser;\nuse Tests\\DuskTestCase;\n\nclass ExampleTest extends DuskTestCase\n{\n    use DatabaseMigrations;\n\n    /**\n     * A basic browser test example.\n     */\n    public function test_basic_example(): void\n    {\n        $user = User::factory()->create([\n            'email' => 'taylor@laravel.com',\n        ]);\n\n        $this->browse(function (Browser $browser) use ($user) {\n            $browser->visit('/login')\n                ->type('email', $user->email)\n                ->type('password', 'password')\n                ->press('Login')\n                ->assertPathIs('/home');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing before Date Validation Rule with Fluent API in Laravel\nDESCRIPTION: Demonstrates how to use Laravel's fluent date rule builder to create a validation rule that ensures a date is before a specific reference date. The example shows validation requiring a start date to be before 7 days ago.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rule;\n\n'start_date' => [\n    'required',\n    Rule::date()->before(today()->subDays(7)),\n],\n```\n\n----------------------------------------\n\nTITLE: Generating Model with All Components in Laravel\nDESCRIPTION: Commands to create an Eloquent model with all related components (migration, factory, seeder, policy, controller, and form requests).\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Shortcut to generate a model, migration, factory, seeder, policy, controller, and form requests...\nphp artisan make:model Flight --all\nphp artisan make:model Flight -a\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Table Name in Laravel Eloquent Model\nDESCRIPTION: Example showing how to specify a custom database table name for an Eloquent model by defining the $table property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'my_flights';\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Exception Reporter in Laravel\nDESCRIPTION: Demonstrates how to register a custom exception reporting callback for specific exception types using the report method in bootstrap/app.php.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Exceptions\\InvalidOrderException;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->report(function (InvalidOrderException $e) {\n        // ...\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Laravel Queue Job Class\nDESCRIPTION: Example of a Laravel job class that processes podcast files. It demonstrates the basic structure including the constructor and handle method, as well as the ShouldQueue interface and Queueable trait for proper serialization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Jobs;\n\nuse App\\Models\\Podcast;\nuse App\\Services\\AudioProcessor;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Queue\\Queueable;\n\nclass ProcessPodcast implements ShouldQueue\n{\n    use Queueable;\n\n    /**\n     * Create a new job instance.\n     */\n    public function __construct(\n        public Podcast $podcast,\n    ) {}\n\n    /**\n     * Execute the job.\n     */\n    public function handle(AudioProcessor $processor): void\n    {\n        // Process uploaded podcast...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: View Using Layout Component with Named Slot\nDESCRIPTION: Shows a view using the layout component with both content for the default slot and a custom title using a named slot.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_89\n\nLANGUAGE: blade\nCODE:\n```\n<!-- resources/views/tasks.blade.php -->\n\n<x-layout>\n    <x-slot:title>\n        Custom Title\n    </x-slot>\n\n    @foreach ($tasks as $task)\n        <div>{{ $task }}</div>\n    @endforeach\n</x-layout>\n```\n\n----------------------------------------\n\nTITLE: Testing Notifications in Laravel PHP using PHPUnit\nDESCRIPTION: Shows how to test notification sending using the Notification facade's fake method in a PHPUnit test.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse App\\Notifications\\OrderShipped;\nuse Illuminate\\Support\\Facades\\Notification;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    public function test_orders_can_be_shipped(): void\n    {\n        Notification::fake();\n\n        // Perform order shipping...\n\n        // Assert that no notifications were sent...\n        Notification::assertNothingSent();\n\n        // Assert a notification was sent to the given users...\n        Notification::assertSentTo(\n            [$user], OrderShipped::class\n        );\n\n        // Assert a notification was not sent...\n        Notification::assertNotSentTo(\n            [$user], AnotherNotification::class\n        );\n\n        // Assert that a given number of notifications were sent...\n        Notification::assertCount(3);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Model Searchable with Scout\nDESCRIPTION: Example of making an Eloquent model searchable by adding the Laravel\\Scout\\Searchable trait. This trait registers a model observer that automatically syncs the model with your search driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Laravel\\Scout\\Searchable;\n\nclass Post extends Model\n{\n    use Searchable;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Macros in Laravel\nDESCRIPTION: Shows how to define custom response macros that can be reused in routes and controllers. It demonstrates creating a macro in a service provider and using it in a route.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Response;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Response::macro('caps', function (string $value) {\n            return Response::make(strtoupper($value));\n        });\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn response()->caps('foo');\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Columns with Laravel Query Builder\nDESCRIPTION: Shows how to update a specific key in a JSON column using the -> syntax. This operation is supported on MariaDB 10.3+, MySQL 5.7+, and PostgreSQL 9.5+.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$affected = DB::table('users')\n    ->where('id', 1)\n    ->update(['options->enabled' => true]);\n```\n\n----------------------------------------\n\nTITLE: Grouping Where Clauses with Logical Operators in Laravel\nDESCRIPTION: You can group several where clauses within parentheses for complex logical groupings using a closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->where('name', '=', 'John')\n    ->where(function (Builder $query) {\n        $query->where('votes', '>', 100)\n            ->orWhere('title', '=', 'Admin');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving old input with Eloquent default - Laravel Blade\nDESCRIPTION: This snippet shows how to use an Eloquent model's attribute as the default value for the `old()` function. Instead of passing `$user->name` directly, the entire `$user` object is passed, letting Laravel infer the attribute from the first argument ('name').\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_100\n\nLANGUAGE: blade\nCODE:\n```\n{{ old('name', $user->name) }}\n\n// Is equivalent to...\n\n{{ old('name', $user) }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Rows Using Laravel Query Builder\nDESCRIPTION: Example showing how to retrieve all records from a users table using Laravel's DB facade and query builder within a controller context.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\View\\View;\n\nclass UserController extends Controller\n{\n    /**\n     * Show a list of all of the application's users.\n     */\n    public function index(): View\n    {\n        $users = DB::table('users')->get();\n\n        return view('user.index', ['users' => $users]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Middleware to Controller Routes\nDESCRIPTION: Example of how to apply middleware to a controller route in Laravel, which adds authentication protection to the profile route.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/profile', [UserController::class, 'show'])->middleware('auth');\n```\n\n----------------------------------------\n\nTITLE: Testing JSON API Responses with Pest in Laravel\nDESCRIPTION: Shows how to test JSON API responses using Pest in Laravel. It demonstrates making a POST request and asserting the JSON response status and content.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntest('making an api request', function () {\n    $response = $this->postJson('/api/user', ['name' => 'Sally']);\n\n    $response\n        ->assertStatus(201)\n        ->assertJson([\n            'created' => true,\n        ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Request Input to a Collection in Laravel\nDESCRIPTION: Using the collect method to retrieve all input data as a Laravel collection object, which provides additional manipulation methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$input = $request->collect();\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Route Parameters in Laravel\nDESCRIPTION: Shows how to customize the route parameters for resource routes, allowing for more descriptive or application-specific parameter names.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\AdminUserController;\n\nRoute::resource('users', AdminUserController::class)->parameters([\n    'users' => 'admin_user'\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Database Truncation Trait in Pest Test\nDESCRIPTION: Demonstrates how to use the DatabaseTruncation trait in a Pest test file to truncate database tables between tests for improved performance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Foundation\\Testing\\DatabaseTruncation;\nuse Laravel\\Dusk\\Browser;\n\nuses(DatabaseTruncation::class);\n\n//\n```\n\n----------------------------------------\n\nTITLE: Laravel Route Definition for Comment Update\nDESCRIPTION: Shows the route definition that corresponds to the form request authorization example.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('/comment/{comment}');\n```\n\n----------------------------------------\n\nTITLE: Adjusting Argon2 Work Factor in Laravel\nDESCRIPTION: Example of customizing the Argon2 work factor using memory, time, and threads options when hashing a password. These parameters control the resource intensity of the Argon2 hashing algorithm.\nSOURCE: https://github.com/laravel/docs/blob/12.x/hashing.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$hashed = Hash::make('password', [\n    'memory' => 1024,\n    'time' => 2,\n    'threads' => 2,\n]);\n```\n\n----------------------------------------\n\nTITLE: Decrypting Values with Exception Handling in Laravel\nDESCRIPTION: Example of safely decrypting values in Laravel using the Crypt facade with proper exception handling. This demonstrates how to catch DecryptException when a value cannot be properly decrypted due to tampering or incorrect keys.\nSOURCE: https://github.com/laravel/docs/blob/12.x/encryption.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Encryption\\DecryptException;\nuse Illuminate\\Support\\Facades\\Crypt;\n\ntry {\n    $decrypted = Crypt::decryptString($encryptedValue);\n} catch (DecryptException $e) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Image Dimensions in Laravel\nDESCRIPTION: This snippet demonstrates how to use the 'dimensions' rule to validate the dimensions of an uploaded image, ensuring it meets specific width and height requirements.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_82\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Validation\\Rules\\File;\n\nFile::image()->dimensions(\n    Rule::dimensions()\n        ->maxWidth(1000)\n        ->maxHeight(500)\n)\n```\n\n----------------------------------------\n\nTITLE: Manipulating Uri Query Strings in Laravel\nDESCRIPTION: Provides examples of methods for manipulating the query string of a `Uri` instance. Covers adding/merging parameters (`withQuery`, `withQueryIfMissing`), replacing the entire query string (`replaceQuery`), adding values to array parameters (`pushOntoQuery`), and removing parameters (`withoutQuery`). Assumes `$uri` is a previously created `Uri` instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_148\n\nLANGUAGE: php\nCODE:\n```\n// The `withQuery` method may be used to merge additional query string parameters...\n$uri = $uri->withQuery(['sort' => 'name']);\n\n// The `withQueryIfMissing` method may be used to merge if keys do not already exist...\n$uri = $uri->withQueryIfMissing(['page' => 1]);\n\n// The `replaceQuery` method may be used to completely replace the existing query string...\n$uri = $uri->replaceQuery(['page' => 1]);\n\n// The `pushOntoQuery` method may be used to push additional parameters onto an array value...\n$uri = $uri->pushOntoQuery('filter', ['active', 'pending']);\n\n// The `withoutQuery` method may be used to remove parameters from the query string...\n$uri = $uri->withoutQuery(['page']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Middleware in Laravel\nDESCRIPTION: Shows how to create a middleware class to ensure a user is subscribed before accessing certain routes. It checks the subscription status and redirects non-subscribers to a billing page.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass EnsureUserIsSubscribed\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        if ($request->user() && ! $request->user()->subscribed('default')) {\n            // This user is not a paying customer...\n            return redirect('/billing');\n        }\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Password Rehashing\nDESCRIPTION: Configuration setting to disable automatic password rehashing when users log in to the application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n'rehash_on_login' => false,\n```\n\n----------------------------------------\n\nTITLE: Setting Day Constraints for Laravel Scheduled Tasks\nDESCRIPTION: This code shows how to limit task execution to specific days of the week using both numeric day representations and Schedule class constants.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('emails:send')\n    ->hourly()\n    ->days([0, 3]);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades;\nuse Illuminate\\Console\\Scheduling\\Schedule;\n\nFacades\\Schedule::command('emails:send')\n    ->hourly()\n    ->days([Schedule::SUNDAY, Schedule::WEDNESDAY]);\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection using whereNotNull - PHP\nDESCRIPTION: Illustrates how to filter a Laravel Collection to keep only items where the value for a specified key is not null. It provides an example with an initial collection containing null values and shows the result after filtering using the `whereNotNull` method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_150\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['name' => 'Desk'],\n    ['name' => null],\n    ['name' => 'Bookcase'],\n]);\n\n$filtered = $collection->whereNotNull('name');\n\n$filtered->all();\n\n/*\n    [\n        ['name' => 'Desk'],\n        ['name' => 'Bookcase'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Exception Responses in Laravel\nDESCRIPTION: Demonstrates how to register a custom exception rendering closure for specific exception types using the render method in bootstrap/app.php.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Exceptions\\InvalidOrderException;\nuse Illuminate\\Http\\Request;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->render(function (InvalidOrderException $e, Request $request) {\n        return response()->view('errors.invalid-order', status: 500);\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to HTTP Requests\nDESCRIPTION: Demonstrates how to add custom headers to HTTP requests using Laravel's HTTP Client.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::withHeaders([\n    'X-First' => 'foo',\n    'X-Second' => 'bar'\n])->post('http://example.com/users', [\n    'name' => 'Taylor',\n]);\n\n$response = Http::accept('application/json')->get('http://example.com/users');\n\n$response = Http::acceptJson()->get('http://example.com/users');\n\n$response = Http::withHeaders([\n    'X-Original' => 'foo',\n])->replaceHeaders([\n    'X-Replacement' => 'bar',\n])->post('http://example.com/users', [\n    'name' => 'Taylor',\n]);\n```\n\n----------------------------------------\n\nTITLE: Query Time Casting\nDESCRIPTION: This code snippet demonstrates how to apply casts during a query using the `withCasts` method.  It applies a `datetime` cast to the `last_posted_at` attribute during the query execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse App\\Models\\User;\n\n$users = User::select([\n    'users.*',\n    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n        ->whereColumn('user_id', 'users.id')\n])->withCasts([\n    'last_posted_at' => 'datetime'\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Generating Redirect Responses from Uris in Laravel\nDESCRIPTION: Demonstrates two ways to generate HTTP redirect responses using `Uri` instances. The first uses the explicit `redirect()` method to create a `RedirectResponse`. The second shows how returning a `Uri` instance directly from a route or controller automatically generates a redirect.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_149\n\nLANGUAGE: php\nCODE:\n```\n// Using the redirect() method\n$uri = Uri::of('https://example.com');\n\nreturn $uri->redirect();\n\n\n// Returning the Uri instance directly\nuse Illuminate\\Support\\Facades\\Route;\nuse Illuminate\\Support\\Uri;\n\nRoute::get('/redirect', function () {\n    return Uri::to('/index')\n        ->withQuery(['sort' => 'name']);\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Scoped Binding in Laravel\nDESCRIPTION: Example of using scopedIf to register a scoped binding only if one doesn't already exist. This prevents overriding existing scoped bindings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->app->scopedIf(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});\n```\n\n----------------------------------------\n\nTITLE: Piping Collection Into Class with `pipeInto` in PHP\nDESCRIPTION: The `pipeInto` method creates a new instance of the given class and passes the collection into the constructor. This facilitates the use of a collection within another class or object, allowing for the collection to be the input for the constructor. The example shows a `ResourceCollection` class constructed with a collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_88\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass ResourceCollection\n{\n    /**\n     * Create a new ResourceCollection instance.\n     */\n    public function __construct(\n        public Collection $collection,\n    ) {}\n}\n\n$collection = collect([1, 2, 3]);\n\n$resource = $collection->pipeInto(ResourceCollection::class);\n\n$resource->collection->all();\n\n// [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Available Subscription Query Scopes in Laravel Paddle\nDESCRIPTION: Complete list of all available subscription query scopes that can be used to filter subscriptions by their status, including trial status, activity, payment status, and cancellation status.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nSubscription::query()->valid();\nSubscription::query()->onTrial();\nSubscription::query()->expiredTrial();\nSubscription::query()->notOnTrial();\nSubscription::query()->active();\nSubscription::query()->recurring();\nSubscription::query()->pastDue();\nSubscription::query()->paused();\nSubscription::query()->notPaused();\nSubscription::query()->onPausedGracePeriod();\nSubscription::query()->notOnPausedGracePeriod();\nSubscription::query()->canceled();\nSubscription::query()->notCanceled();\nSubscription::query()->onGracePeriod();\nSubscription::query()->notOnGracePeriod();\n```\n\n----------------------------------------\n\nTITLE: Validating by UUID Version\nDESCRIPTION: Example showing how to validate that a UUID matches a specific version specification using the 'uuid' validation rule with a version parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n'uuid' => 'uuid:4'\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Class Definition in Laravel\nDESCRIPTION: Demonstrates how to create a custom exception class with report and render methods for specialized handling.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Exceptions;\n\nuse Exception;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\n\nclass InvalidOrderException extends Exception\n{\n    /**\n     * Report the exception.\n     */\n    public function report(): void\n    {\n        // ...\n    }\n\n    /**\n     * Render the exception as an HTTP response.\n     */\n    public function render(Request $request): Response\n    {\n        return response(/* ... */);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Routing Slack Notifications in Laravel PHP\nDESCRIPTION: Demonstrates how to implement the routeNotificationForSlack method in a User model to direct Slack notifications to a specific channel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Notifications\\Notification;\n\nclass User extends Authenticatable\n{\n    use Notifiable;\n\n    /**\n     * Route notifications for the Slack channel.\n     */\n    public function routeNotificationForSlack(Notification $notification): mixed\n    {\n        return '#support-channel';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing File Uploads with Laravel Storage - Pest Example\nDESCRIPTION: Demonstrates how to test file uploads using Laravel's Storage facade with the Pest testing framework. Shows various assertions for verifying file storage operations including existence, missing files, and directory states.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Storage;\n\ntest('albums can be uploaded', function () {\n    Storage::fake('photos');\n\n    $response = $this->json('POST', '/photos', [\n        UploadedFile::fake()->image('photo1.jpg'),\n        UploadedFile::fake()->image('photo2.jpg')\n    ]);\n\n    // Assert one or more files were stored...\n    Storage::disk('photos')->assertExists('photo1.jpg');\n    Storage::disk('photos')->assertExists(['photo1.jpg', 'photo2.jpg']);\n\n    // Assert one or more files were not stored...\n    Storage::disk('photos')->assertMissing('missing.jpg');\n    Storage::disk('photos')->assertMissing(['missing.jpg', 'non-existing.jpg']);\n\n    // Assert that the number of files in a given directory matches the expected count...\n    Storage::disk('photos')->assertCount('/wallpapers', 2);\n\n    // Assert that a given directory is empty...\n    Storage::disk('photos')->assertDirectoryEmpty('/wallpapers');\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Specific Routes for Soft Deleted Models\nDESCRIPTION: Example of how to specify which resource routes should include soft deleted models in Laravel, limiting soft delete inclusion to specific actions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nRoute::resource('photos', PhotoController::class)->withTrashed(['show']);\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Visibility in PHP with Laravel Dusk\nDESCRIPTION: Assert the visibility or presence of elements in the DOM using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertVisible($selector);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertPresent($selector);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertNotPresent($selector);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertMissing($selector);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Anonymous Blade Component\nDESCRIPTION: Shows how to render a basic anonymous component defined in the resources/views/components directory without a class implementation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_73\n\nLANGUAGE: blade\nCODE:\n```\n<x-alert/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Echo for Reverb\nDESCRIPTION: JavaScript code to configure a Laravel Echo instance for use with the Reverb broadcasting driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Echo from 'laravel-echo';\n\nimport Pusher from 'pusher-js';\nwindow.Pusher = Pusher;\n\nwindow.Echo = new Echo({\n    broadcaster: 'reverb',\n    key: import.meta.env.VITE_REVERB_APP_KEY,\n    wsHost: import.meta.env.VITE_REVERB_HOST,\n    wsPort: import.meta.env.VITE_REVERB_PORT ?? 80,\n    wssPort: import.meta.env.VITE_REVERB_PORT ?? 443,\n    forceTLS: (import.meta.env.VITE_REVERB_SCHEME ?? 'https') === 'https',\n    enabledTransports: ['ws', 'wss'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain Connection and Queue\nDESCRIPTION: Setting specific connection and queue for chained jobs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nBus::chain([\n    new ProcessPodcast,\n    new OptimizePodcast,\n    new ReleasePodcast,\n])->onConnection('redis')->onQueue('podcasts')->dispatch();\n```\n\n----------------------------------------\n\nTITLE: Replicating Models in Laravel\nDESCRIPTION: Examples of replicating Eloquent models with attribute modifications\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_71\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Address;\n\n$shipping = Address::create([\n    'type' => 'shipping',\n    'line_1' => '123 Example Street',\n    'city' => 'Victorville',\n    'state' => 'CA',\n    'postcode' => '90001',\n]);\n\n$billing = $shipping->replicate()->fill([\n    'type' => 'billing'\n]);\n\n$billing->save();\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading in Laravel with load() Method\nDESCRIPTION: This example shows how to perform lazy eager loading, which allows loading relationships after the parent model has already been retrieved, useful for conditional relationship loading.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_90\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Book;\n\n$books = Book::all();\n\nif ($someCondition) {\n    $books->load('author', 'publisher');\n}\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with JSON Data\nDESCRIPTION: Shows how to send a POST request with JSON data using Laravel's HTTP Client.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\n$response = Http::post('http://example.com/users', [\n    'name' => 'Steve',\n    'role' => 'Network Administrator',\n]);\n```\n\n----------------------------------------\n\nTITLE: Filter Collection by Value List with `whereIn()` in PHP\nDESCRIPTION: The `whereIn()` method removes elements from the collection that do not have a specified item value that is contained within the given array. Uses loose comparisons. Requires a Laravel Collection instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_146\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 100],\n    ['product' => 'Bookcase', 'price' => 150],\n    ['product' => 'Door', 'price' => 100],\n]);\n\n$filtered = $collection->whereIn('price', [150, 200]);\n\n$filtered->all();\n\n/*\n    [\n        ['product' => 'Desk', 'price' => 200],\n        ['product' => 'Bookcase', 'price' => 150],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Items from Laravel Collection in PHP\nDESCRIPTION: Explains the `random` method that returns one random item or multiple random items from a Laravel Collection. Accepts an optional integer to specify count or a closure to determine the number of items. Throws an `InvalidArgumentException` if asked to retrieve more items than exist. Requires an initialized collection and outputs either a single item or a smaller collection of items randomly selected.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_96\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$collection->random();\n\n// 4 - (retrieved randomly)\n```\n\nLANGUAGE: php\nCODE:\n```\n$random = $collection->random(3);\n\n$random->all();\n\n// [2, 4, 5] - (retrieved randomly)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Collection;\n\n$random = $collection->random(fn (Collection $items) => min(10, count($items)));\n\n$random->all();\n\n// [1, 2, 3, 4, 5] - (retrieved randomly)\n```\n\n----------------------------------------\n\nTITLE: Constraining Eager Loads with Additional Query Conditions\nDESCRIPTION: This example shows how to add constraints to eager loaded relationships by passing a closure to the with() method, which allows filtering related models based on specific conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_86\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\n\n$users = User::with(['posts' => function (Builder $query) {\n    $query->where('title', 'like', '%code%');\n}])->get();\n```\n\n----------------------------------------\n\nTITLE: Conditionally Executing Code Based on Input Presence in Laravel\nDESCRIPTION: Using the whenHas method to execute a closure only if a specific input value is present in the request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$request->whenHas('name', function (string $input) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Full Transaction Refund with Laravel Cashier\nDESCRIPTION: Shows how to refund an entire Paddle transaction by only providing a reason. This is a simpler alternative to specifying individual line items when you need to refund the complete transaction.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_77\n\nLANGUAGE: php\nCODE:\n```\n$response = $transaction->refund('Accidental charge');\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Sending Event in Laravel PHP\nDESCRIPTION: Demonstrates how to create an event listener for the NotificationSending event to check notification status before sending.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Notifications\\Events\\NotificationSending;\n\nclass CheckNotificationStatus\n{\n    /**\n     * Handle the given event.\n     */\n    public function handle(NotificationSending $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Named Routes in Laravel PHP\nDESCRIPTION: Illustrates how to redirect to named routes using the 'route' method on the Redirector instance. It also shows how to pass parameters to the route.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redirects.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn redirect()->route('login');\n```\n\nLANGUAGE: php\nCODE:\n```\n// For a route with the following URI: profile/{id}\n\nreturn redirect()->route('profile', ['id' => 1]);\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn to_route('profile', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Creating Mobile API Token Route in Laravel\nDESCRIPTION: Route handler for issuing Sanctum API tokens for mobile applications. Validates user credentials and returns a plain-text token.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('/sanctum/token', function (Request $request) {\n    $request->validate([\n        'email' => 'required|email',\n        'password' => 'required',\n        'device_name' => 'required',\n    ]);\n\n    $user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        throw ValidationException::withMessages([\n            'email' => ['The provided credentials are incorrect.'],\n        ]);\n    }\n\n    return $user->createToken($request->device_name)->plainTextToken;\n});\n```\n\n----------------------------------------\n\nTITLE: Using make Method in Laravel Container\nDESCRIPTION: Demonstrates how to resolve class instances from the Laravel container using the make and makeWith methods. Shows basic resolution and passing constructor arguments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Transistor;\n\n$transistor = $this->app->make(Transistor::class);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Transistor;\n\n$transistor = $this->app->makeWith(Transistor::class, ['id' => 1]);\n```\n\nLANGUAGE: php\nCODE:\n```\nif ($this->app->bound(Transistor::class)) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Changed Attributes with getChanges Method in Laravel\nDESCRIPTION: Example of using getChanges method to retrieve an array of attributes that were changed when the model was last saved.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->name; // John\n$user->email; // john@example.com\n\n$user->update([\n    'name' => 'Jack',\n    'email' => 'jack@example.com',\n]);\n\n$user->getChanges();\n\n/*\n    [\n        'name' => 'Jack',\n        'email' => 'jack@example.com',\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Components\nDESCRIPTION: Commands for creating class-based and anonymous Blade components using Artisan CLI.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:component Alert\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:component Forms/Input\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:component forms.input --view\n```\n\n----------------------------------------\n\nTITLE: Validating Only When Field is Present\nDESCRIPTION: Example showing how to validate a field only when it's present in the data being validated using the 'sometimes' rule. This allows for optional fields that must meet validation requirements only when provided.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make($data, [\n    'email' => 'sometimes|required|email',\n]);\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Payments with Laravel Cashier\nDESCRIPTION: This snippet demonstrates how to handle failed payments by catching the IncompletePayment exception and redirecting the user to a payment confirmation page. It includes error handling for subscription creation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_118\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Cashier\\Exceptions\\IncompletePayment;\n\ntry {\n    $subscription = $user->newSubscription('default', 'price_monthly')\n        ->create($paymentMethod);\n} catch (IncompletePayment $exception) {\n    return redirect()->route(\n        'cashier.payment',\n        [$exception->payment->id, 'redirect' => route('home')]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tokens with Specific Expiration Times in Laravel Sanctum\nDESCRIPTION: Creating a Sanctum token with a custom expiration time by providing the expiration timestamp as the third argument to the createToken method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn $user->createToken(\n    'token-name', ['*'], now()->addWeek()\n)->plainTextToken;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arrays of PHP Enum Input Values in Laravel\nDESCRIPTION: Converting arrays of input values to arrays of PHP enum instances using the enums method with the enum class as a parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Enums\\Product;\n\n$products = $request->enums('products', Product::class);\n```\n\n----------------------------------------\n\nTITLE: Verifying Password Matches Hash in Laravel\nDESCRIPTION: Using the Hash facade's check method to verify that a plain-text password matches a hashed password. This is commonly used in authentication systems to validate user credentials.\nSOURCE: https://github.com/laravel/docs/blob/12.x/hashing.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif (Hash::check('plain-text', $hashedPassword)) {\n    // The passwords match...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Pagination Results to JSON\nDESCRIPTION: Example route that returns paginated results as JSON, showing the structure of the pagination metadata.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nRoute::get('/users', function () {\n    return User::paginate();\n});\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"total\": 50,\n   \"per_page\": 15,\n   \"current_page\": 1,\n   \"last_page\": 4,\n   \"first_page_url\": \"http://laravel.app?page=1\",\n   \"last_page_url\": \"http://laravel.app?page=4\",\n   \"next_page_url\": \"http://laravel.app?page=2\",\n   \"prev_page_url\": null,\n   \"path\": \"http://laravel.app\",\n   \"from\": 1,\n   \"to\": 15,\n   \"data\":[\n        {\n            // Record...\n        },\n        {\n            // Record...\n        }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Flashed Session Data in Laravel Blade\nDESCRIPTION: Shows how to display flashed session data in a Blade template after redirecting the user. This example checks for a 'status' message in the session and displays it in an alert div.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redirects.md#2025-04-21_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n@if (session('status'))\n    <div class=\"alert alert-success\">\n        {{ session('status') }}\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Filter Collection by Instance Type with `whereInstanceOf()` in PHP\nDESCRIPTION: The `whereInstanceOf()` method filters the collection by a given class type, keeping only elements that are instances of the specified class. Requires a Laravel Collection instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_147\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse App\\Models\\Post;\n\n$collection = collect([\n    new User,\n    new User,\n    new Post,\n]);\n\n$filtered = $collection->whereInstanceOf(User::class);\n\n$filtered->all();\n\n// [App\\Models\\User, App\\Models\\User]\n```\n\n----------------------------------------\n\nTITLE: Performing Upsert Operation with Laravel Query Builder\nDESCRIPTION: Demonstrates how to use the upsert method to insert or update records based on unique constraints. It includes a warning about database requirements for the upsert operation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nDB::table('flights')->upsert(\n    [\n        ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n        ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n    ],\n    ['departure', 'destination'],\n    ['price']\n);\n```\n\n----------------------------------------\n\nTITLE: Array Validation Example\nDESCRIPTION: Example showing how to validate array keys against a specific set of allowed values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\n\n$input = [\n    'user' => [\n        'name' => 'Taylor Otwell',\n        'username' => 'taylorotwell',\n        'admin' => true,\n    ],\n];\n\nValidator::make($input, [\n    'user' => 'array:name,username',\n]);\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading with Array Syntax in Laravel\nDESCRIPTION: This example demonstrates the alternative array syntax for eager loading nested relationships, providing a more structured way to load the author along with their contacts and publisher.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_79\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with([\n    'author' => [\n        'contacts',\n        'publisher',\n    ],\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Queue Database Table\nDESCRIPTION: Commands to create and run a migration for the jobs table required by the database queue driver in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan make:queue-table\n\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Sorting Middleware in Laravel\nDESCRIPTION: This snippet shows how to specify middleware priority using the priority method in Laravel's bootstrap/app.php file, allowing control over the execution order of middleware.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->priority([\n        \\Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests::class,\n        \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n        \\Illuminate\\Session\\Middleware\\StartSession::class,\n        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\ValidateCsrfToken::class,\n        \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n        \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n        \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n        \\Illuminate\\Auth\\Middleware\\Authorize::class,\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Model Factory Test Example - PHPUnit\nDESCRIPTION: Demonstrates using model factories to create test data in PHPUnit tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\npublic function test_models_can_be_instantiated(): void\n{\n    $user = User::factory()->create();\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Force Destroying Soft Deleted Models in Laravel\nDESCRIPTION: Shows how to permanently delete soft deleted models using the forceDestroy() method, bypassing the soft deletion mechanism.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nFlight::forceDestroy(1);\n```\n\n----------------------------------------\n\nTITLE: Generating Model with Multiple Components in Laravel\nDESCRIPTION: Commands to create an Eloquent model with multiple related components like migration, factory, seeder, and controller.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# Generate a model and a migration, factory, seeder, and controller...\nphp artisan make:model Flight -mfsc\n```\n\n----------------------------------------\n\nTITLE: Attaching Roles to User in Laravel Eloquent\nDESCRIPTION: Demonstrates how to attach a role to a user using the attach() method in Laravel Eloquent. It shows basic attachment and attachment with additional data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_99\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$user->roles()->attach($roleId);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->attach($roleId, ['expires' => $expires]);\n```\n\n----------------------------------------\n\nTITLE: Handling Context Dehydration in Laravel\nDESCRIPTION: Shows how to register a callback for the context dehydration process, which occurs when a job is dispatched to the queue. This example stores the current locale in hidden context.\nSOURCE: https://github.com/laravel/docs/blob/12.x/context.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Log\\Context\\Repository;\nuse Illuminate\\Support\\Facades\\Config;\nuse Illuminate\\Support\\Facades\\Context;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Context::dehydrating(function (Repository $context) {\n        $context->addHidden('locale', Config::get('app.locale'));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Assert Session Errors in Error Bag\nDESCRIPTION: Validates presence of errors within a specific error bag in the session.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionHasErrorsIn($errorBag, $keys = [], $format = null);\n```\n\n----------------------------------------\n\nTITLE: Merging Default Classes with Component Attributes\nDESCRIPTION: Demonstrates how to merge default CSS classes with classes passed to the component using the merge method, allowing for both default and custom styling.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_45\n\nLANGUAGE: blade\nCODE:\n```\n<div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n    {{ $message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Broadcast Connection in Laravel\nDESCRIPTION: Demonstrates how to specify a custom broadcast connection for events using the via method or broadcastVia constructor approach.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Events\\OrderShipmentStatusUpdated;\n\nbroadcast(new OrderShipmentStatusUpdated($update))->via('pusher');\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Events;\n\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithBroadcasting;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass OrderShipmentStatusUpdated implements ShouldBroadcast\n{\n    use InteractsWithBroadcasting;\n\n    /**\n     * Create a new event instance.\n     */\n    public function __construct()\n    {\n        $this->broadcastVia('pusher');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Rate Limiting in Laravel Job Handle Method\nDESCRIPTION: Example of using Redis rate limiting directly in a job's handle method. This approach allows only one job to process every five seconds.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Redis;\n\n/**\n * Execute the job.\n */\npublic function handle(): void\n{\n    Redis::throttle('key')->block(0)->allow(1)->every(5)->then(function () {\n        info('Lock obtained...');\n\n        // Handle job...\n    }, function () {\n        // Could not obtain lock...\n\n        return $this->release(5);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Input to Session in Laravel\nDESCRIPTION: Examples of flashing request input data to the session for persistence across requests. Shows methods for flashing all input, specific fields, or excluding sensitive data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$request->flash();\n\n$request->flashOnly(['username', 'email']);\n\n$request->flashExcept('password');\n```\n\n----------------------------------------\n\nTITLE: Using pipe() Method in Laravel String Manipulation\nDESCRIPTION: Demonstrates how to transform strings by passing current value through a callable using the pipe() method. Can accept both functions and closures.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_137\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$hash = Str::of('Laravel')->pipe('md5')->prepend('Checksum: ');\n\n// 'Checksum: a5c95b86291ea299fcbe64458ed12702'\n\n$closure = Str::of('foo')->pipe(function (Stringable $str) {\n    return 'bar';\n});\n\n// 'bar'\n```\n\n----------------------------------------\n\nTITLE: Managing Has-Many Relationships in Factories\nDESCRIPTION: Examples of creating models with has-many relationships using both explicit and magic methods, including state manipulations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse App\\Models\\User;\n\n$user = User::factory()\n    ->has(Post::factory()->count(3))\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = User::factory()\n    ->has(Post::factory()->count(3), 'posts')\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = User::factory()\n    ->has(\n        Post::factory()\n            ->count(3)\n            ->state(function (array $attributes, User $user) {\n                return ['user_type' => $user->type];\n            })\n        )\n    ->create();\n```\n\n----------------------------------------\n\nTITLE: Number: Trimming Trailing Zeros in PHP\nDESCRIPTION: This snippet removes unnecessary trailing zeros after the decimal point, making number display cleaner without sacrificing precision when unnecessary.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_68\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::trim(12.0);\n// 12\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::trim(12.30);\n// 12.3\n```\n\n----------------------------------------\n\nTITLE: Using Str::swap to Replace Multiple Values in Laravel\nDESCRIPTION: The Str::swap method replaces multiple values in a given string using PHP's strtr function, allowing for convenient batch replacement operations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::swap([\n    'Tacos' => 'Burritos',\n    'great' => 'fantastic',\n], 'Tacos are great!');\n\n// Burritos are fantastic!\n```\n\n----------------------------------------\n\nTITLE: Managing Belongs-To Relationships in Factories\nDESCRIPTION: Demonstrates creating models with belongs-to relationships using both the for method and magic methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse App\\Models\\User;\n\n$posts = Post::factory()\n    ->count(3)\n    ->for(User::factory()->state([\n        'name' => 'Jessica Archer',\n    ]))\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = User::factory()->create();\n\n$posts = Post::factory()\n    ->count(3)\n    ->for($user)\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$posts = Post::factory()\n    ->count(3)\n    ->forUser([\n        'name' => 'Jessica Archer',\n    ])\n    ->create();\n```\n\n----------------------------------------\n\nTITLE: Implementing PromptsForMissingInput Interface in Laravel Command\nDESCRIPTION: Shows how to create a console command that prompts for missing required arguments by implementing the PromptsForMissingInput interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\nuse Illuminate\\Contracts\\Console\\PromptsForMissingInput;\n\nclass SendEmails extends Command implements PromptsForMissingInput\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'mail:send {user}';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Using Mass Assignment in Laravel Eloquent\nDESCRIPTION: Demonstrates how to use the create() method to insert a new model instance in the database with a single statement. This method returns the newly created model instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Flight;\n\n$flight = Flight::create([\n    'name' => 'London to Paris',\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing a Model Attribute with an Accessor\nDESCRIPTION: Shows how to retrieve a value that will be transformed by the previously defined accessor in a Laravel application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$firstName = $user->first_name;\n```\n\n----------------------------------------\n\nTITLE: Isolated Migration Execution in Laravel\nDESCRIPTION: Run migrations with isolation to prevent concurrent migrations during deployment.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate --isolated\n```\n\n----------------------------------------\n\nTITLE: Registering Creatable API Singleton Resource in Laravel\nDESCRIPTION: Illustrates how to register a creatable API singleton resource with store and destroy routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nRoute::apiSingleton('photos.thumbnail', ProfileController::class)->creatable();\n```\n\n----------------------------------------\n\nTITLE: Implementing Deferred Provider in Laravel\nDESCRIPTION: Demonstrates how to create a deferred service provider in Laravel by implementing the DeferrableProvider interface and defining a provides method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\Services\\Riak\\Connection;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Contracts\\Support\\DeferrableProvider;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass RiakServiceProvider extends ServiceProvider implements DeferrableProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        $this->app->singleton(Connection::class, function (Application $app) {\n            return new Connection($app['config']['riak']);\n        });\n    }\n\n    /**\n     * Get the services provided by the provider.\n     *\n     * @return array<int, string>\n     */\n    public function provides(): array\n    {\n        return [Connection::class];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Recursively Replacing Items in Laravel Collection in PHP\nDESCRIPTION: Illustrates `replaceRecursive`, a method like `replace` but which recursively applies replacement to nested arrays within the collection. Useful for deeply nested data structures. Requires a collection containing arrays and a corresponding replacement array. Outputs a collection with values replaced at all nested levels.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_102\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'Taylor',\n    'Abigail',\n    [\n        'James',\n        'Victoria',\n        'Finn'\n    ]\n]);\n\n$replaced = $collection->replaceRecursive([\n    'Charlie',\n    2 => [1 => 'King']\n]);\n\n$replaced->all();\n\n// ['Charlie', 'Abigail', ['James', 'King', 'Finn']]\n```\n\n----------------------------------------\n\nTITLE: Listening for Notifications with Laravel Echo\nDESCRIPTION: Shows how to listen for notifications on the client-side using Laravel Echo. This JavaScript code subscribes to the private channel for a specific user.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nEcho.private('App.Models.User.' + userId)\n    .notification((notification) => {\n        console.log(notification.type);\n    });\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Sanctum via Artisan\nDESCRIPTION: Command to install Laravel Sanctum package using Laravel's Artisan CLI tool.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan install:api\n```\n\n----------------------------------------\n\nTITLE: Handling Failures with Catch Callbacks in Laravel Queue Closures\nDESCRIPTION: Example showing how to add error handling to queued closures using the catch method, which provides a callback to execute if the job fails after all retry attempts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_65\n\nLANGUAGE: php\nCODE:\n```\nuse Throwable;\n\ndispatch(function () use ($podcast) {\n    $podcast->publish();\n})->catch(function (Throwable $e) {\n    // This job has failed...\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Input Fields with Except Method in Laravel\nDESCRIPTION: Retrieving all input data except for specific fields by using the except method with an array or parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$input = $request->except(['credit_card']);\n\n$input = $request->except('credit_card');\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON is Array in Laravel Tests\nDESCRIPTION: This snippet shows how to assert that the response JSON is an array using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonIsArray();\n```\n\n----------------------------------------\n\nTITLE: Checking if String Ends With Value in Laravel PHP\nDESCRIPTION: The endsWith method determines if a string ends with a given value, useful for validating file extensions or string formats.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_104\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('This is my name')->endsWith('name');\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Deleting Notifications in Laravel\nDESCRIPTION: Demonstrates how to delete all notifications for a user, completely removing them from the database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$user->notifications()->delete();\n```\n\n----------------------------------------\n\nTITLE: Checking for Attribute Presence in Laravel Blade\nDESCRIPTION: Uses the has method to check if a specific attribute is present in a component's attribute bag and conditionally renders content based on the result.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_53\n\nLANGUAGE: blade\nCODE:\n```\n@if ($attributes->has('class'))\n    <div>Class attribute is present</div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Session Data in Laravel\nDESCRIPTION: Method to retrieve all data currently stored in the session as an array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$data = $request->session()->all();\n```\n\n----------------------------------------\n\nTITLE: Customizing Password Confirmation View in PHP\nDESCRIPTION: This PHP code demonstrates how to customize the password confirmation view in Laravel Fortify. It uses the Fortify::confirmPasswordView method to return a custom view for the password confirmation screen.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Fortify\\Fortify;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Fortify::confirmPasswordView(function () {\n        return view('auth.confirm-password');\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Service Injection in Laravel Blade Templates\nDESCRIPTION: Demonstrates how to use the @inject directive to retrieve a service from the Laravel service container and use it in the template.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_98\n\nLANGUAGE: blade\nCODE:\n```\n@inject('metrics', 'App\\Services\\MetricsService')\n\n<div>\n    Monthly Revenue: {{ $metrics->monthlyRevenue() }}.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Removing Context Items in Laravel\nDESCRIPTION: Explains how to use the 'forget' method to remove a single key or multiple keys from the current context.\nSOURCE: https://github.com/laravel/docs/blob/12.x/context.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Context;\n\nContext::add(['first_key' => 1, 'second_key' => 2]);\n\nContext::forget('first_key');\n\nContext::all();\n\n// ['second_key' => 2]\n```\n\nLANGUAGE: php\nCODE:\n```\nContext::forget(['first_key', 'second_key']);\n```\n\n----------------------------------------\n\nTITLE: Working with Error Messages in Laravel Validation\nDESCRIPTION: Demonstrates various methods for retrieving and handling validation error messages using the MessageBag instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$errors = $validator->errors();\n\necho $errors->first('email');\n```\n\nLANGUAGE: php\nCODE:\n```\nforeach ($errors->get('email') as $message) {\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nforeach ($errors->get('attachments.*') as $message) {\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nforeach ($errors->all() as $message) {\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif ($errors->has('email')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Validation Rule in Laravel\nDESCRIPTION: This example demonstrates how to use a custom validation rule object in a validation scenario.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_90\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Rules\\Uppercase;\n\n$request->validate([\n    'name' => ['required', 'string', new Uppercase],\n]);\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users by ID in Laravel\nDESCRIPTION: This snippet demonstrates how to authenticate a user using their database record's primary key in Laravel. It shows the use of the loginUsingId method with optional 'remember me' functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nAuth::loginUsingId(1);\n\nAuth::loginUsingId(1, remember: true);\n```\n\n----------------------------------------\n\nTITLE: Processing Specific Queue with Laravel Worker\nDESCRIPTION: Artisan command to start a worker that only processes jobs from a specific queue (emails) on a given connection (redis). Useful for dedicated workers handling specific job types.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_70\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work redis --queue=emails\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Individual Artisan Commands\nDESCRIPTION: Demonstrates manual registration of specific command classes using the withCommands method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Domain\\Orders\\Commands\\SendEmails;\n\n->withCommands([\n    SendEmails::class,\n])\n```\n\n----------------------------------------\n\nTITLE: Revoking an Access Token with Axios in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Axios to make a DELETE request to revoke a specific access token using its token ID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_15\n\nLANGUAGE: js\nCODE:\n```\naxios.delete('/oauth/tokens/' + tokenId);\n```\n\n----------------------------------------\n\nTITLE: Customizing User Authentication in Laravel Fortify\nDESCRIPTION: This snippet demonstrates how to customize user authentication in Laravel Fortify. It uses the Fortify::authenticateUsing method to define custom logic for validating credentials and retrieving the user.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Laravel\\Fortify\\Fortify;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Fortify::authenticateUsing(function (Request $request) {\n        $user = User::where('email', $request->email)->first();\n\n        if ($user &&\n            Hash::check($request->password, $user->password)) {\n            return $user;\n        }\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Supervisor for Laravel Queue Workers\nDESCRIPTION: Shows the sequence of commands to update Supervisor configuration and start the Laravel queue worker processes. This is typically done after setting up or modifying the Supervisor configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_82\n\nLANGUAGE: shell\nCODE:\n```\nsudo supervisorctl reread\n\nsudo supervisorctl update\n\nsudo supervisorctl start \"laravel-worker:*\"\n```\n\n----------------------------------------\n\nTITLE: Defining Required Route Parameters in Laravel\nDESCRIPTION: Shows how to define required route parameters in Laravel, capturing segments of the URI within routes and injecting them into route callbacks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/user/{id}', function (string $id) {\n    return 'User '.$id;\n});\n\nRoute::get('/posts/{post}/comments/{comment}', function (string $postId, string $commentId) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Product Checkouts with Laravel Cashier\nDESCRIPTION: Example of implementing a product purchase flow using Laravel Cashier. This route demonstrates how to generate a checkout session for single or multiple products with specified quantities.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_73\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/buy', function (Request $request) {\n    $checkout = $request->user()->checkout(['pri_tshirt', 'pri_socks' => 5]);\n\n    return view('buy', ['checkout' => $checkout]);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML with PHP Echo Statements in Templates\nDESCRIPTION: A traditional PHP approach to rendering HTML where PHP echo statements are used within HTML templates to display data retrieved from a database during a request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/frontend.md#2025-04-21_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <?php foreach ($users as $user): ?>\n        Hello, <?php echo $user->name; ?> <br />\n    <?php endforeach; ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Operation with Laravel Query Builder\nDESCRIPTION: Demonstrates the updateOrInsert method, which updates an existing record or creates a new one if it doesn't exist. It includes an example with a closure for customizing attributes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nDB::table('users')\n    ->updateOrInsert(\n        ['email' => 'john@example.com', 'name' => 'John'],\n        ['votes' => '2']\n    );\n```\n\nLANGUAGE: php\nCODE:\n```\nDB::table('users')->updateOrInsert(\n    ['user_id' => $user_id],\n    fn ($exists) => $exists ? [\n        'name' => $data['name'],\n        'email' => $data['email'],\n    ] : [\n        'name' => $data['name'],\n        'email' => $data['email'],\n        'marketable' => true,\n    ],\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Callbacks with Laravel Lottery for Probabilistic Logic in PHP\nDESCRIPTION: Demonstrates how to use Laravel's Lottery class to conditionally execute callbacks with specific odds. This snippet invokes winner or loser callbacks based on a 1-in-20 chance. It requires the Illuminate\\Support\\Lottery namespace and supports chaining of odds, winner, loser, and choose methods to determine outcomes. Inputs include probabilities, while outputs depend on which callback executes, enabling control flow based on probability. Limitations include assuming the user object has won() and lost() methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_132\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Lottery;\\n\\nLottery::odds(1, 20)\\n    ->winner(fn () => $user->won())\\n    ->loser(fn () => $user->lost())\\n    ->choose();\n```\n\n----------------------------------------\n\nTITLE: Customizing Foreign Keys in Many-to-Many Relationships\nDESCRIPTION: Example of customizing the foreign key column names on the intermediate table using the third and fourth parameters of the belongsToMany method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->belongsToMany(Role::class, 'role_user', 'user_id', 'role_id');\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Queue Worker with Priority Queues\nDESCRIPTION: Shows how to start a Laravel queue worker that processes jobs from high priority queues before low priority ones. This command specifies the order of queue processing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_78\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work --queue=high,low\n```\n\n----------------------------------------\n\nTITLE: Form Request Validation Rules\nDESCRIPTION: Example of defining validation rules in a form request class with type hinting\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the validation rules that apply to the request.\n *\n * @return array<string, \\Illuminate\\Contracts\\Validation\\ValidationRule|array<mixed>|string>\n */\npublic function rules(): array\n{\n    return [\n        'title' => 'required|unique:posts|max:255',\n        'body' => 'required',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Directories in Laravel Storage\nDESCRIPTION: Demonstrates various operations on directories including listing files and subdirectories, creating, and deleting directories.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Storage;\n\n$files = Storage::files($directory);\n\n$files = Storage::allFiles($directory);\n\n$directories = Storage::directories($directory);\n\n$directories = Storage::allDirectories($directory);\n\nStorage::makeDirectory($directory);\n\nStorage::deleteDirectory($directory);\n```\n\n----------------------------------------\n\nTITLE: Conditional Access with optional() and Closure - Laravel PHP\nDESCRIPTION: Demonstrates usage of `optional()` with a Closure.  If the first argument (e.g., User::find($id)) is not null, the closure executes and returns the user's name; otherwise, it returns null.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_104\n\nLANGUAGE: php\nCODE:\n```\nreturn optional(User::find($id), function (User $user) {\n    return $user->name;\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML with Laravel's Blade Templating Syntax\nDESCRIPTION: Using Laravel's Blade templating language to render HTML with a cleaner, more concise syntax for displaying data and iterating over collections.\nSOURCE: https://github.com/laravel/docs/blob/12.x/frontend.md#2025-04-21_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach ($users as $user)\n        Hello, {{ $user->name }} <br />\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing After Middleware in Laravel\nDESCRIPTION: Example of a middleware that performs actions after the request has been handled. This pattern is useful for modifying responses, adding headers, or logging response data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AfterMiddleware\n{\n    public function handle(Request $request, Closure $next): Response\n    {\n        $response = $next($request);\n\n        // Perform action\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Database Column for Unique Validation\nDESCRIPTION: Example showing how to specify a custom database column name when using the 'unique' validation rule in Laravel. This is useful when the field name doesn't match the database column name.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Laravel Controller Authorization with Additional Context\nDESCRIPTION: Example of authorizing actions in a Laravel controller using Gate::authorize with additional context parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Update the given blog post.\n *\n * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n */\npublic function update(Request $request, Post $post): RedirectResponse\n{\n    Gate::authorize('update', [$post, $request->category]);\n\n    // The current user can update the blog post...\n\n    return redirect('/posts');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Queue Looping Method for Database Transaction Rollback in Laravel\nDESCRIPTION: This snippet shows how to use the 'looping' method on the Queue facade to specify a callback that executes before the worker attempts to fetch a job from the queue. In this example, it's used to rollback any open database transactions left by previously failed jobs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_117\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Queue;\n\nQueue::looping(function () {\n    while (DB::transactionLevel() > 0) {\n        DB::rollBack();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Required Command Arguments in Laravel\nDESCRIPTION: Shows how to define required and optional command arguments using the signature property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The name and signature of the console command.\n *\n * @var string\n */\nprotected $signature = 'mail:send {user}';\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Environments in Laravel\nDESCRIPTION: Use the App facade's environment method with arguments to check if the environment matches specific values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif (App::environment('local')) {\n    // The environment is local\n}\n\nif (App::environment(['local', 'staging'])) {\n    // The environment is either local OR staging...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Remaining Attempts and Incrementing in Laravel Rate Limiter\nDESCRIPTION: This snippet shows how to check the remaining attempts for a rate-limited action and increment the attempt count if attempts are still available.\nSOURCE: https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\nif (RateLimiter::remaining('send-message:'.$user->id, $perMinute = 5)) {\n    RateLimiter::increment('send-message:'.$user->id);\n\n    // Send message...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Response Testing with PHPUnit\nDESCRIPTION: Basic test example showing how to make a GET request and assert response status using PHPUnit framework.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * A basic test example.\n     */\n    public function test_the_application_returns_a_successful_response(): void\n    {\n        $response = $this->get('/');\n\n        $response->assertStatus(200);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Notification Templates in Laravel\nDESCRIPTION: Shows the command to publish notification package resources for template customization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --tag=laravel-notifications\n```\n\n----------------------------------------\n\nTITLE: Creating Query Builder from Collection\nDESCRIPTION: The `toQuery` method generates an Eloquent query builder instance with a `whereIn` constraint using the primary keys from the collection. This allows for further database operations like updating records.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = User::where('status', 'VIP')->get();\n\n$users->toQuery()->update([\n    'status' => 'Administrator',\n]);\n```\n\n----------------------------------------\n\nTITLE: Querying Related Models in Laravel Eloquent\nDESCRIPTION: Example of chaining query constraints on an Eloquent relationship. This snippet demonstrates how to retrieve active posts belonging to a user by adding a where condition to the posts relationship.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user->posts()->where('active', 1)->get();\n```\n\n----------------------------------------\n\nTITLE: Creating LazyCollection from Laravel Collection (PHP)\nDESCRIPTION: Converts a standard `Illuminate\\Support\\Collection` into an `Illuminate\\Support\\LazyCollection`. This allows for deferred, streamed processing of items, which is beneficial for large collections to manage memory usage.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n$lazyCollection = collect([1, 2, 3, 4])->lazy();\n\n$lazyCollection::class;\n\n// Illuminate\\Support\\LazyCollection\n\n$lazyCollection->all();\n\n// [1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over SQL Query Results in Laravel\nDESCRIPTION: Demonstrates how to iterate over the results of a SQL query executed using the DB facade in Laravel. Each result is a PHP stdClass object representing a database record.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\n$users = DB::select('select * from users');\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Algolia PHP SDK\nDESCRIPTION: Command to install the Algolia PHP SDK via Composer. This is required when using Scout with the Algolia driver for search functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require algolia/algoliasearch-client-php\n```\n\n----------------------------------------\n\nTITLE: Converting Eloquent Model to Array with Relationships\nDESCRIPTION: Demonstrates how to convert an Eloquent model and its relationships to an array using the toArray() method\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::with('roles')->first();\n\nreturn $user->toArray();\n```\n\n----------------------------------------\n\nTITLE: Basic PHPUnit Test Example in Laravel\nDESCRIPTION: A simple PHPUnit test example demonstrating the basic assertion syntax. PHPUnit is the traditional testing framework for PHP applications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Unit;\n\nuse PHPUnit\\Framework\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * A basic test example.\n     */\n    public function test_basic_test(): void\n    {\n        $this->assertTrue(true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collection from JSON - PHP\nDESCRIPTION: The static `fromJson` method creates a new collection instance from a JSON string using `json_decode`.  It's a convenient way to build collections from JSON data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Illuminate\\Support\\Collection;\n\n$json = json_encode([\n    'name' => 'Taylor Otwell',\n    'role' => 'Developer',\n    'status' => 'Active',\n]);\n\n$collection = Collection::fromJson($json);\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Laravel Collection Items Into New Class Instances (PHP)\nDESCRIPTION: Iterates over the collection, creating a new instance of a specified class for each item. The item's value is passed as the first argument to the class constructor.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_71\n\nLANGUAGE: php\nCODE:\n```\nclass Currency\n{\n    /**\n     * Create a new currency instance.\n     */\n    function __construct(\n        public string $code,\n    ) {}\n}\n\n$collection = collect(['USD', 'EUR', 'GBP']);\n\n$currencies = $collection->mapInto(Currency::class);\n\n$currencies->all();\n\n// [Currency('USD'), Currency('EUR'), Currency('GBP')]\n```\n\n----------------------------------------\n\nTITLE: Laravel Resource Collection Example\nDESCRIPTION: Shows how to define a custom resource collection with additional metadata.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array<string, mixed>\n     */\n    public function toArray(Request $request): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Freezing Time in Laravel Tests\nDESCRIPTION: Demonstrates how to freeze time at the current moment or at the start of the current second in Laravel tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Carbon;\n\n// Freeze time and resume normal time after executing closure...\n$this->freezeTime(function (Carbon $time) {\n    // ...\n});\n\n// Freeze time at the current second and resume normal time after executing closure...\n$this->freezeSecond(function (Carbon $time) {\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering JSON in Blade Templates with JS Facade\nDESCRIPTION: Demonstrates how to safely convert a PHP array to JSON in a Blade template using the Js facade for JavaScript initialization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<script>\n    var app = {{ Js::from($array) }};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Chaining\nDESCRIPTION: Examples of chaining multiple jobs in sequence using the Bus facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nBus::chain([\n    new ProcessPodcast,\n    new OptimizePodcast,\n    new ReleasePodcast,\n])->dispatch();\n\nBus::chain([\n    new ProcessPodcast,\n    new OptimizePodcast,\n    function () {\n        Podcast::update(/* ... */);\n    },\n])->dispatch();\n```\n\n----------------------------------------\n\nTITLE: Modifying Import Query in Laravel Scout\nDESCRIPTION: Illustrates how to customize the query used for batch importing models in Laravel Scout by defining a makeAllSearchableUsing method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\n\n/**\n * Modify the query used to retrieve models when making all of the models searchable.\n */\nprotected function makeAllSearchableUsing(Builder $query): Builder\n{\n    return $query->with('author');\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Laravel Collection with Reject Method in PHP\nDESCRIPTION: Explains the `reject` method that filters items from the collection by excluding those where the given closure returns true. Useful for removing elements based on custom conditions. The closure receives item value and key, and the output is a new collection excluding matched items. Relies on a valid callback for filtering logic.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_100\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4]);\n\n$filtered = $collection->reject(function (int $value, int $key) {\n    return $value > 2;\n});\n\n$filtered->all();\n\n// [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Channel Queues in Laravel\nDESCRIPTION: Implementation of viaQueues method to specify different queues for each notification channel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Determine which queues should be used for each notification channel.\n *\n * @return array<string, string>\n */\npublic function viaQueues(): array\n{\n    return [\n        'mail' => 'mail-queue',\n        'slack' => 'slack-queue',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Subscriptions in Laravel Cashier\nDESCRIPTION: Methods for canceling subscriptions including immediate and scheduled cancellations, with grace period handling.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription()->cancel();\n\nif ($user->subscription()->onGracePeriod()) {\n    // ...\n}\n\n$user->subscription()->cancelNow();\n\n$user->subscription()->stopCancelation();\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Arrays with Laravel Arr (PHP)\nDESCRIPTION: This PHP snippet illustrates the use of Arr::add to insert a key/value pair into an array if the key does not exist or its value is null. It ensures no duplicate keys are added and is especially useful for safely augmenting configuration arrays. Dependency: Illuminate\\Support\\Arr namespace. Inputs are the original array, a key, and a value; the output is the modified array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = Arr::add(['name' => 'Desk'], 'price', 100);\n// ['name' => 'Desk', 'price' => 100]\n\n$array = Arr::add(['name' => 'Desk', 'price' => null], 'price', 100);\n// ['name' => 'Desk', 'price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Defining Event Classes in Laravel\nDESCRIPTION: Example of creating an event class that acts as a data container. This event includes an Eloquent model and uses traits for dispatching, broadcasting, and serialization of models when the event is queued.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Events;\n\nuse App\\Models\\Order;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass OrderShipped\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    /**\n     * Create a new event instance.\n     */\n    public function __construct(\n        public Order $order,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Assert No Session Errors\nDESCRIPTION: Checks that the session has no validation errors.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionHasNoErrors();\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Array Count in Laravel Tests\nDESCRIPTION: This snippet illustrates how to assert that a response JSON has an array with the expected number of items at a given key using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonCount($count, $key = null);\n```\n\n----------------------------------------\n\nTITLE: Merging Runtime Casts in Laravel Eloquent\nDESCRIPTION: Example of adding temporary casts at runtime to a Laravel Eloquent model using the mergeCasts method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$user->mergeCasts([\n    'is_admin' => 'integer',\n    'options' => 'object',\n]);\n```\n\n----------------------------------------\n\nTITLE: Octane-friendly Service Binding in Laravel\nDESCRIPTION: Examples of Octane-friendly service bindings that avoid potential issues with stale container instances.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service;\nuse Illuminate\\Container\\Container;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->bind(Service::class, function (Application $app) {\n    return new Service($app);\n});\n\n$this->app->singleton(Service::class, function () {\n    return new Service(fn () => Container::getInstance());\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Laravel Mailable Content with Pest\nDESCRIPTION: Demonstrates various assertions for testing mailable content, including HTML and text content, attachments, and metadata using Pest testing framework.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Mail\\InvoicePaid;\nuse App\\Models\\User;\n\ntest('mailable content', function () {\n    $user = User::factory()->create();\n\n    $mailable = new InvoicePaid($user);\n\n    $mailable->assertFrom('jeffrey@example.com');\n    $mailable->assertTo('taylor@example.com');\n    $mailable->assertHasCc('abigail@example.com');\n    $mailable->assertHasBcc('victoria@example.com');\n    $mailable->assertHasReplyTo('tyler@example.com');\n    $mailable->assertHasSubject('Invoice Paid');\n    $mailable->assertHasTag('example-tag');\n    $mailable->assertHasMetadata('key', 'value');\n\n    $mailable->assertSeeInHtml($user->email);\n    $mailable->assertSeeInHtml('Invoice Paid');\n    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n\n    $mailable->assertSeeInText($user->email);\n    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n\n    $mailable->assertHasAttachment('/path/to/file');\n    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));\n    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);\n    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating N+1 Query Problem with Eager Loading in PHP\nDESCRIPTION: This snippet shows how N+1 query problems can occur even with eager loading if accessing parent models from child models in a loop.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$posts = Post::with('comments')->get();\n\nforeach ($posts as $post) {\n    foreach ($post->comments as $comment) {\n        echo $comment->commentable->title;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing First Items from Laravel Collection in PHP\nDESCRIPTION: Shows how `shift` removes and returns the first item or the first N items from a collection. If an integer is passed, it returns a collection of items removed. It mutates the original collection by removing those items from the start.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_106\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$collection->shift();\n\n// 1\n\n$collection->all();\n\n// [2, 3, 4, 5]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$collection->shift(3);\n\n// collect([1, 2, 3])\n\n$collection->all();\n\n// [4, 5]\n```\n\n----------------------------------------\n\nTITLE: Using class_basename Function in Laravel\nDESCRIPTION: The class_basename function extracts the class name from a fully qualified namespace, removing the namespace portion.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$class = class_basename('Foo\\Bar\\Baz');\n\n// Baz\n```\n\n----------------------------------------\n\nTITLE: Sorting Collections in Descending Order with sortDesc in Laravel Collections - PHP\nDESCRIPTION: Explains the sortDesc method which sorts the collection's values in descending order. Unlike sort, it does not accept a custom callback. Use sort with a reversed comparator for complex sorting instead. The collection keys are preserved until explicitly reindexed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_118\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([5, 3, 1, 2, 4]);\n\n$sorted = $collection->sortDesc();\n\n$sorted->values()->all();\n\n// [5, 4, 3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Converting Authorization Codes to Access Tokens in Laravel\nDESCRIPTION: This snippet demonstrates how to convert an authorization code to an access token using Laravel's HTTP client. It includes state validation and a POST request to the OAuth token endpoint.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Http;\n\nRoute::get('/callback', function (Request $request) {\n    $state = $request->session()->pull('state');\n\n    throw_unless(\n        strlen($state) > 0 && $state === $request->state,\n        InvalidArgumentException::class,\n        'Invalid state value.'\n    );\n\n    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n        'grant_type' => 'authorization_code',\n        'client_id' => 'client-id',\n        'client_secret' => 'client-secret',\n        'redirect_uri' => 'http://third-party-app.com/callback',\n        'code' => $request->code,\n    ]);\n\n    return $response->json();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring docker-compose.yml for FrankenPHP with Laravel Sail\nDESCRIPTION: YAML configuration to add environment variables for running Octane with FrankenPHP in Laravel Sail.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  laravel.test:\n    environment:\n      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=frankenphp --host=0.0.0.0 --admin-port=2019 --port='${APP_PORT:-80}'\"\n      XDG_CONFIG_HOME:  /var/www/html/config\n      XDG_DATA_HOME:  /var/www/html/data\n```\n\n----------------------------------------\n\nTITLE: Defining Mailable Class with Public Properties in Laravel\nDESCRIPTION: This snippet shows how to define a mailable class in Laravel with public properties that are automatically available to the email view.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Mail;\n\nuse App\\Models\\Order;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Mail\\Mailable;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass OrderShipped extends Mailable\n{\n    use Queueable, SerializesModels;\n\n    /**\n     * Create a new message instance.\n     */\n    public function __construct(\n        public Order $order,\n    ) {}\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'mail.orders.shipped',\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Email Validation Rules in Laravel\nDESCRIPTION: Shows how to use Laravel's fluent rule builder to create comprehensive email validation rules. The example demonstrates configuring RFC compliance, MX record validation, and spoofing prevention for an email field.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rule;\n\n$request->validate([\n    'email' => [\n        'required',\n        Rule::email()\n            ->rfcCompliant(strict: false)\n            ->validateMxRecord()\n            ->preventSpoofing()\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Uri Instances in PHP\nDESCRIPTION: Demonstrates various ways to create instances of Laravel's `Illuminate\\Support\\Uri` class using static methods like `of`, `to`, `route`, `signedRoute`, `temporarySignedRoute`, `action`, and from the current request object. Requires importing necessary controller and Uri classes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/urls.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\UserController;\nuse App\\Http\\Controllers\\InvokableController;\nuse Illuminate\\Support\\Uri;\n\n// Generate a URI instance from the given string...\n$uri = Uri::of('https://example.com/path');\n\n// Generate URI instances to paths, named routes, or controller actions...\n$uri = Uri::to('/dashboard');\n$uri = Uri::route('users.show', ['user' => 1]);\n$uri = Uri::signedRoute('users.show', ['user' => 1]);\n$uri = Uri::temporarySignedRoute('user.index', now()->addMinutes(5));\n$uri = Uri::action([UserController::class, 'index']);\n$uri = Uri::action(InvokableController::class);\n\n// Generate a URI instance from the current request URL...\n$uri = $request->uri();\n```\n\n----------------------------------------\n\nTITLE: Switch Statements in Blade Templates\nDESCRIPTION: Implementation of switch-case statements using Blade directives\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n@switch($i)\n    @case(1)\n        First case...\n        @break\n\n    @case(2)\n        Second case...\n        @break\n\n    @default\n        Default case...\n@endswitch\n```\n\n----------------------------------------\n\nTITLE: Cache Memoization Implementation\nDESCRIPTION: Shows usage of memo() driver for in-memory caching during single request/job execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Cache;\n\n$value = Cache::memo()->get('key');\n```\n\n----------------------------------------\n\nTITLE: Mapping and Flattening Collection - PHP\nDESCRIPTION: The `flatMap` method iterates through a collection, applies a closure to each item, and then flattens the resulting array by one level. It's useful for transforming and restructuring data within the collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([\n    ['name' => 'Sally'],\n    ['school' => 'Arkansas'],\n    ['age' => 28]\n]);\n\n$flattened = $collection->flatMap(function (array $values) {\n    return array_map('strtoupper', $values);\n});\n\n$flattened->all();\n\n// ['name' => 'SALLY', 'school' => 'ARKANSAS', 'age' => '28'];\n\n```\n\n----------------------------------------\n\nTITLE: Checking Context Item Existence in Laravel\nDESCRIPTION: Demonstrates how to use the 'has' and 'missing' methods of the Context facade to determine if a key exists in the context. Also shows that 'has' returns true even for null values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/context.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Context;\n\nif (Context::has('key')) {\n    // ...\n}\n\nif (Context::missing('key')) {\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nContext::add('key', null);\n\nContext::has('key');\n// true\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Spoofing with Hidden Form Fields\nDESCRIPTION: This example shows how to use the _method hidden input field in an HTML form to spoof PUT, PATCH, or DELETE HTTP methods, since HTML forms only support GET and POST. It includes the CSRF token for security.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_42\n\nLANGUAGE: blade\nCODE:\n```\n<form action=\"/example\" method=\"POST\">\n    <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n    <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Prepending Keys With Prefix with `Arr::prependKeysWith()` - PHP\nDESCRIPTION: This snippet shows how to use `Arr::prependKeysWith()` to prepend a prefix to all keys in an associative array. This can be useful for namespacing keys.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [\n    'name' => 'Desk',\n    'price' => 100,\n];\n\n$keyed = Arr::prependKeysWith($array, 'product.');\n\n/*\n    [\n        'product.name' => 'Desk',\n        'product.price' => 100,\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Assigning Multiple Middleware to Routes in Laravel\nDESCRIPTION: Example of applying multiple middleware to a single route by passing an array of middleware classes. This allows for layered processing of requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function () {\n    // ...\n})->middleware([First::class, Second::class]);\n```\n\n----------------------------------------\n\nTITLE: Preparing Input Data Before Validation in Laravel\nDESCRIPTION: Shows how to prepare or sanitize input data before validation rules are applied.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n/**\n * Prepare the data for validation.\n */\nprotected function prepareForValidation(): void\n{\n    $this->merge([\n        'slug' => Str::slug($this->slug),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Text Removal\nDESCRIPTION: Examples of waiting until text is removed from the page.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n// Wait a maximum of five seconds for the text to be removed...\n$browser->waitUntilMissingText('Hello World');\n\n// Wait a maximum of one second for the text to be removed...\n$browser->waitUntilMissingText('Hello World', 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Echo for Pusher Channels\nDESCRIPTION: JavaScript code to configure a Laravel Echo instance for use with Pusher Channels broadcasting driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Echo from 'laravel-echo';\n\nimport Pusher from 'pusher-js';\nwindow.Pusher = Pusher;\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: import.meta.env.VITE_PUSHER_APP_KEY,\n    cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,\n    forceTLS: true\n});\n```\n\n----------------------------------------\n\nTITLE: Stop On First Failure Validation\nDESCRIPTION: Example showing how to stop validation after the first failure occurs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nif ($validator->stopOnFirstFailure()->fails()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Foreign Key in BelongsTo Relationship in Laravel\nDESCRIPTION: Example of specifying a custom foreign key in a belongsTo relationship. This is useful when the foreign key doesn't follow Laravel's naming convention.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the user that owns the phone.\n */\npublic function user(): BelongsTo\n{\n    return $this->belongsTo(User::class, 'foreign_key');\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Has One of Many Relationships in Laravel\nDESCRIPTION: Shows how to create complex has-one-of-many relationships with multiple sorting criteria and constraints\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the current pricing for the product.\n */\npublic function currentPricing(): HasOne\n{\n    return $this->hasOne(Price::class)->ofMany([\n        'published_at' => 'max',\n        'id' => 'max',\n    ], function (Builder $query) {\n        $query->where('published_at', '<', now());\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic DatabaseSeeder Class in Laravel\nDESCRIPTION: Example of a DatabaseSeeder class that inserts a single user record with random data into the users table. It uses Laravel's DB facade for direct database insertion and Hash facade for password security.\nSOURCE: https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Str;\n\nclass DatabaseSeeder extends Seeder\n{\n    /**\n     * Run the database seeders.\n     */\n    public function run(): void\n    {\n        DB::table('users')->insert([\n            'name' => Str::random(10),\n            'email' => Str::random(10).'@example.com',\n            'password' => Hash::make('password'),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Paginate Query Object in Laravel\nDESCRIPTION: Creates a Paginate query object class that handles pagination logic for Laravel queries. This class accepts sorting and pagination parameters and returns a LengthAwarePaginator instance when invoked with a query builder.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Scopes;\n\nuse Illuminate\\Contracts\\Pagination\\LengthAwarePaginator;\nuse Illuminate\\Database\\Query\\Builder;\n\nclass Paginate\n{\n    public function __construct(\n        private string $sortBy = 'timestamp',\n        private string $sortDirection = 'desc',\n        private string $perPage = 25,\n    ) {\n        //\n    }\n\n    public function __invoke(Builder $query): LengthAwarePaginator\n    {\n        return $query->orderBy($this->sortBy, $this->sortDirection)\n            ->paginate($this->perPage, pageName: 'p');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding newCollection Method to Return Custom Collection in Laravel Eloquent Model Using PHP\nDESCRIPTION: This snippet defines a newCollection method within a Laravel Eloquent model to customize the Collection instance returned by Eloquent. The method takes an optional array of models, and returns an instance of a custom Collection class (UserCollection) instead of the default Collection. This approach allows backward compatibility with PHP versions earlier than 8.0 and can be used when attribute support is not available. It depends on the model extending Illuminate\\Database\\Eloquent\\Model and importing the custom collection. The method is annotated with PHPDoc to specify input and output types.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse App\\Support\\UserCollection;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Create a new Eloquent Collection instance.\n     *\n     * @param  array<int, \\Illuminate\\Database\\Eloquent\\Model>  $models\n     * @return \\Illuminate\\Database\\Eloquent\\Collection<int, \\Illuminate\\Database\\Eloquent\\Model>\n     */\n    public function newCollection(array $models = []): Collection\n    {\n        return new UserCollection($models);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Two Factor Challenge View in Laravel Fortify\nDESCRIPTION: This snippet shows how to customize the two factor authentication challenge view rendering in Laravel Fortify, typically done in the boot method of the FortifyServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Fortify\\Fortify;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Fortify::twoFactorChallengeView(function () {\n        return view('auth.two-factor-challenge');\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Code Verifier and Challenge for PKCE in PHP\nDESCRIPTION: This snippet shows how to generate a code challenge from a code verifier for use in the Authorization Code Grant with PKCE flow.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$encoded = base64_encode(hash('sha256', $code_verifier, true));\n\n$codeChallenge = strtr(rtrim($encoded, '='), '+/', '-_');\n```\n\n----------------------------------------\n\nTITLE: Registering Observer in Service Provider\nDESCRIPTION: Demonstrates how to manually register a model observer in the application's service provider boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_80\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse App\\Observers\\UserObserver;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    User::observe(UserObserver::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Additional Laravel Validation\nDESCRIPTION: Shows how to add custom validation logic after initial validation using the after method, which accepts a closure or array of callables.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\n\n$validator = Validator::make(/* ... */);\n\n$validator->after(function ($validator) {\n    if ($this->somethingElseIsInvalid()) {\n        $validator->errors()->add(\n            'field', 'Something is wrong with this field!'\n        );\n    }\n});\n\nif ($validator->fails()) {\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Validation\\ValidateShippingTime;\nuse App\\Validation\\ValidateUserStatus;\n\n$validator->after([\n    new ValidateUserStatus,\n    new ValidateShippingTime,\n    function ($validator) {\n        // ...\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Using @yield Directive with Default Content in Laravel Blade\nDESCRIPTION: Shows how to use the @yield directive with a default value as its second parameter, which will be rendered if the section is undefined.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_93\n\nLANGUAGE: blade\nCODE:\n```\n@yield('content', 'Default content')\n```\n\n----------------------------------------\n\nTITLE: Flattening Collections with collapseWithKeys() in PHP\nDESCRIPTION: The `collapseWithKeys` method flattens a collection of arrays or collections into a single collection, preserving the keys from the original nested structures. This is useful when the keys of the nested items are significant.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['first'  => collect([1, 2, 3])],\n    ['second' => [4, 5, 6]],\n    ['third'  => collect([7, 8, 9])]\n]);\n\n$collapsed = $collection->collapseWithKeys();\n\n$collapsed->all();\n\n// [\n//     'first'  => [1, 2, 3],\n//     'second' => [4, 5, 6],\n//     'third'  => [7, 8, 9],\n// ]\n```\n\n----------------------------------------\n\nTITLE: Merging Collections using zip - PHP\nDESCRIPTION: Illustrates the `zip` method, which merges the values of the original collection with the values of a given array based on their corresponding index. This method pairs elements from the two sequences into sub-arrays within the resulting collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_153\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['Chair', 'Desk']);\n\n$zipped = $collection->zip([100, 200]);\n\n$zipped->all();\n\n// [['Chair', 100], ['Desk', 200]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Broadcast Queue in Laravel Notifications\nDESCRIPTION: Shows how to configure the queue connection and queue name for broadcast notifications by chaining methods on the BroadcastMessage instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nreturn (new BroadcastMessage($data))\n    ->onConnection('sqs')\n    ->onQueue('broadcasts');\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies into Component Constructor\nDESCRIPTION: Shows how to inject service container dependencies into a component constructor along with component data attributes, demonstrating dependency injection in components.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\AlertCreator;\n\n/**\n * Create the component instance.\n */\npublic function __construct(\n    public AlertCreator $creator,\n    public string $type,\n    public string $message,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Authentication Route Protection in Laravel\nDESCRIPTION: Demonstrates how to protect a route using Laravel's built-in auth.basic middleware for basic HTTP authentication.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/profile', function () {\n    // Only authenticated users may access this route...\n})->middleware('auth.basic');\n```\n\n----------------------------------------\n\nTITLE: Attaching Rate Limiters to Route Groups\nDESCRIPTION: This code shows how to apply a rate limiter to a group of routes using middleware. The 'uploads' rate limiter is applied to multiple POST routes handling audio and video uploads.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nRoute::middleware(['throttle:uploads'])->group(function () {\n    Route::post('/audio', function () {\n        // ...\n    });\n\n    Route::post('/video', function () {\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Lazy Eager Loading in Laravel\nDESCRIPTION: This snippet demonstrates how to add additional query constraints when lazy eager loading relationships by passing a closure to the load() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_91\n\nLANGUAGE: php\nCODE:\n```\n$author->load(['books' => function (Builder $query) {\n    $query->orderBy('published_date', 'asc');\n}]);\n```\n\n----------------------------------------\n\nTITLE: jQuery CSRF Token Setup\nDESCRIPTION: JavaScript code showing how to configure jQuery to automatically include CSRF token in all AJAX request headers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/csrf.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$.ajaxSetup({\n    headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Pulse Recorder Implementation\nDESCRIPTION: Shows how to implement a custom recorder class that listens to events and records data to Pulse, including configuration and event handling setup.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Acme\\Recorders;\n\nuse Acme\\Events\\Deployment;\nuse Illuminate\\Support\\Facades\\Config;\nuse Laravel\\Pulse\\Facades\\Pulse;\n\nclass Deployments\n{\n    /**\n     * The events to listen for.\n     *\n     * @var array<int, class-string>\n     */\n    public array $listen = [\n        Deployment::class,\n    ];\n\n    /**\n     * Record the deployment.\n     */\n    public function record(Deployment $event): void\n    {\n        $config = Config::get('pulse.recorders.'.static::class);\n\n        Pulse::record(\n            // ...\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-search Functionality in Laravel\nDESCRIPTION: Demonstrates how to use the multisearch function to allow users to search and select multiple items from a list. It includes examples of filtering options based on user input and customizing the display of results.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\multisearch;\n\n$ids = multisearch(\n    'Search for the users that should receive the mail',\n    fn (string $value) => strlen($value) > 0\n        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n        : []\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$names = collect(['Taylor', 'Abigail']);\n\n$selected = multisearch(\n    label: 'Search for the users that should receive the mail',\n    options: fn (string $value) => $names\n        ->filter(fn ($name) => Str::contains($name, $value, ignoreCase: true))\n        ->values()\n        ->all(),\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$ids = multisearch(\n    label: 'Search for the users that should receive the mail',\n    placeholder: 'E.g. Taylor Otwell',\n    options: fn (string $value) => strlen($value) > 0\n        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n        : [],\n    hint: 'The user will receive an email immediately.'\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$ids = multisearch(\n    label: 'Search for the users that should receive the mail',\n    options: fn (string $value) => strlen($value) > 0\n        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n        : [],\n    scroll: 10\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Date Serialization Format in Laravel Eloquent (PHP)\nDESCRIPTION: Demonstrates defining a `serializeDate` method within an Eloquent model to customize the default serialization format (e.g., `Y-m-d`) for all date attributes when the model is converted to an array or JSON. This method accepts a `DateTimeInterface` object and returns the formatted string. It does not affect database storage format.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Prepare a date for array / JSON serialization.\n */\nprotected function serializeDate(DateTimeInterface $date): string\n{\n    return $date->format('Y-m-d');\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Laravel Resource Response Headers\nDESCRIPTION: Demonstrates how to customize the HTTP response headers when returning a resource by chaining the response() method and using header().\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Resources\\UserResource;\nuse App\\Models\\User;\n\nRoute::get('/user', function () {\n    return User::find(1)\n        ->toResource()\n        ->response()\n        ->header('X-Value', 'True');\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Pivot Model in Laravel\nDESCRIPTION: Commands to create a pivot model specifically designed for many-to-many relationships in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# Generate a pivot model...\nphp artisan make:model Member --pivot\nphp artisan make:model Member -p\n```\n\n----------------------------------------\n\nTITLE: Using Middleware Aliases in Laravel Routes\nDESCRIPTION: This code demonstrates how to use a middleware alias when assigning middleware to routes in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/profile', function () {\n    // ...\n})->middleware('subscribed');\n```\n\n----------------------------------------\n\nTITLE: Sending Form URL Encoded Requests\nDESCRIPTION: Shows how to send data using the application/x-www-form-urlencoded content type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::asForm()->post('http://example.com/users', [\n    'name' => 'Sara',\n    'role' => 'Privacy Consultant',\n]);\n```\n\n----------------------------------------\n\nTITLE: Random String Generation with Str::random in Laravel\nDESCRIPTION: Demonstrates generating random strings using Str::random method and how to mock random string generation during testing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$random = Str::random(40);\n```\n\nLANGUAGE: php\nCODE:\n```\nStr::createRandomStringsUsing(function () {\n    return 'fake-random-string';\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nStr::createRandomStringsNormally();\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Request Was Not Sent in Laravel Tests\nDESCRIPTION: Shows how to use Http::assertNotSent() to verify that a specific request was not sent during testing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\Request;\nuse Illuminate\\Support\\Facades\\Http;\n\nHttp::fake();\n\nHttp::post('http://example.com/users', [\n    'name' => 'Taylor',\n    'role' => 'Developer',\n]);\n\nHttp::assertNotSent(function (Request $request) {\n    return $request->url() === 'http://example.com/posts';\n});\n```\n\n----------------------------------------\n\nTITLE: Job Dispatching in Laravel Controllers\nDESCRIPTION: Example of dispatching a job from a Laravel controller with basic implementation and redirect handling.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Controllers;\n\nuse App\\Jobs\\ProcessPodcast;\nuse App\\Models\\Podcast;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PodcastController extends Controller\n{\n    public function store(Request $request): RedirectResponse\n    {\n        $podcast = Podcast::create(/* ... */);\n\n        ProcessPodcast::dispatch($podcast);\n\n        return redirect('/podcasts');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing NotificationSent Event Properties in Laravel\nDESCRIPTION: Shows how to access the properties available in the NotificationSent event, including channel, notifiable, notification, and response data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Handle the given event.\n */\npublic function handle(NotificationSent $event): void\n{\n    // $event->channel\n    // $event->notifiable\n    // $event->notification\n    // $event->response\n}\n```\n\n----------------------------------------\n\nTITLE: Component Registration in Laravel\nDESCRIPTION: Examples of manually registering components and component namespaces in a service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_29\n\nLANGUAGE: php\nCODE:\n```\npublic function boot(): void\n{\n    Blade::component('package-alert', Alert::class);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function boot(): void\n{\n    Blade::componentNamespace('Nightshade\\\\Views\\\\Components', 'nightshade');\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Job Batches\nDESCRIPTION: Shows how to test job batches using Bus facade's assertBatched method and related assertions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_115\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Bus\\PendingBatch;\nuse Illuminate\\Support\\Facades\\Bus;\n\nBus::fake();\n\n// ...\n\nBus::assertBatched(function (PendingBatch $batch) {\n    return $batch->name == 'import-csv' &&\n           $batch->jobs->count() === 10;\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Object Caching for Eloquent Attributes\nDESCRIPTION: Example showing how to disable the default object caching behavior for a specific accessor in Laravel Eloquent.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Interact with the user's address.\n */\nprotected function address(): Attribute\n{\n    return Attribute::make(\n        get: fn (mixed $value, array $attributes) => new Address(\n            $attributes['address_line_one'],\n            $attributes['address_line_two'],\n        ),\n    )->withoutObjectCaching();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a View Creator in Laravel\nDESCRIPTION: Demonstrates how to register a view creator using Laravel's View facade. View creators are executed immediately after view instantiation, unlike view composers which run just before rendering.\nSOURCE: https://github.com/laravel/docs/blob/12.x/views.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\View\\Creators\\ProfileCreator;\nuse Illuminate\\Support\\Facades\\View;\n\nView::creator('profile', ProfileCreator::class);\n```\n\n----------------------------------------\n\nTITLE: Storing Uploaded Files in Laravel\nDESCRIPTION: Demonstrates storing uploaded files using Laravel's filesystem with both automatic and custom filenames.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$path = $request->photo->store('images');\n\n$path = $request->photo->store('images', 's3');\n\n$path = $request->photo->storeAs('images', 'filename.jpg');\n\n$path = $request->photo->storeAs('images', 'filename.jpg', 's3');\n```\n\n----------------------------------------\n\nTITLE: Basic File Attachment in Laravel Mail\nDESCRIPTION: Demonstrates how to attach a file to an email using Laravel's Attachment class with a basic file path.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Mail\\Mailables\\Attachment;\n\npublic function attachments(): array\n{\n    return [\n        Attachment::fromPath('/path/to/file'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Incrementing Primary Key in Laravel Eloquent\nDESCRIPTION: Example showing how to configure a model for a non-incrementing primary key by setting the $incrementing property to false.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Flight extends Model\n{\n    /**\n     * Indicates if the model's ID is auto-incrementing.\n     *\n     * @var bool\n     */\n    public $incrementing = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Real-Time Facades with Pest in Laravel\nDESCRIPTION: This snippet demonstrates how to test the real-time facade implementation using Pest, Laravel's testing framework. It shows how to mock the Publisher facade and assert its behavior.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\Podcast;\nuse Facades\\App\\Contracts\\Publisher;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nuses(RefreshDatabase::class);\n\ntest('podcast can be published', function () {\n    $podcast = Podcast::factory()->create();\n\n    Publisher::shouldReceive('publish')->once()->with($podcast);\n\n    $podcast->publish();\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Active Recurring Subscription in PHP\nDESCRIPTION: Method to determine if a user has an active subscription that is currently recurring (not in trial or grace period).\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription()->recurring()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Actions for Specific Users\nDESCRIPTION: Demonstrates how to check if a specific user (not the currently authenticated one) is authorized to perform an action using the forUser method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif (Gate::forUser($user)->allows('update-post', $post)) {\n    // The user can update the post...\n}\n\nif (Gate::forUser($user)->denies('update-post', $post)) {\n    // The user can't update the post...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Laravel Pagination\nDESCRIPTION: This CSS snippet shows how to configure the app.css file to use Laravel's default Tailwind pagination views with Tailwind 4.x.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n\n@source '../../vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php';\n```\n\n----------------------------------------\n\nTITLE: Accessing PSR-7 Request in Laravel Route\nDESCRIPTION: Demonstrates how to obtain a PSR-7 compliant request object in a Laravel route closure by type-hinting the ServerRequestInterface. Requires additional libraries to be installed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nRoute::get('/', function (ServerRequestInterface $request) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Attributes in PHP with Laravel Dusk\nDESCRIPTION: Assert the presence, absence, or content of element attributes using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertAttribute($selector, $attribute, $value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertAttributeMissing($selector, $attribute);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertAttributeContains($selector, $attribute, $value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertAttributeDoesntContain($selector, $attribute, $value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertAriaAttribute($selector, $attribute, $value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertDataAttribute($selector, $attribute, $value);\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Handling with Pest in Laravel\nDESCRIPTION: Demonstrates how to test exception handling using the Exceptions facade in a Pest test. It shows how to assert that specific exceptions are reported or not reported during a request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Exceptions\\InvalidOrderException;\nuse Illuminate\\Support\\Facades\\Exceptions;\n\ntest('exception is thrown', function () {\n    Exceptions::fake();\n\n    $response = $this->get('/order/1');\n\n    // Assert an exception was thrown...\n    Exceptions::assertReported(InvalidOrderException::class);\n\n    // Assert against the exception...\n    Exceptions::assertReported(function (InvalidOrderException $e) {\n        return $e->getMessage() === 'The order was invalid.';\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Password Validation Rules in Laravel\nDESCRIPTION: This example demonstrates how to chain multiple password validation rules together to create a comprehensive password policy.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_86\n\nLANGUAGE: php\nCODE:\n```\nPassword::min(8)\n    ->letters()\n    ->mixedCase()\n    ->numbers()\n    ->symbols()\n    ->uncompromised()\n```\n\n----------------------------------------\n\nTITLE: Using cache() function to access Laravel's cache system in PHP\nDESCRIPTION: The cache() function retrieves values from Laravel's cache with optional default values. It can also store items in the cache with specified expiration times.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n$value = cache('key');\n```\n\nLANGUAGE: php\nCODE:\n```\n$value = cache('key', 'default');\n```\n\nLANGUAGE: php\nCODE:\n```\ncache(['key' => 'value'], 300);\n```\n\nLANGUAGE: php\nCODE:\n```\ncache(['key' => 'value'], now()->addSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Primary Key in Laravel Eloquent Model\nDESCRIPTION: Example showing how to specify a custom primary key column name for an Eloquent model using the $primaryKey property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The primary key associated with the table.\n     *\n     * @var string\n     */\n    protected $primaryKey = 'flight_id';\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Password Validation Implementation\nDESCRIPTION: Custom password validation logic for Passport password grant authentication.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\npublic function validateForPassportPasswordGrant(string $password): bool\n{\n    return Hash::check($password, $this->password);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Valet via Composer\nDESCRIPTION: Command to install Laravel Valet globally using Composer package manager.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer global require laravel/valet\n```\n\n----------------------------------------\n\nTITLE: Using Components in Laravel Dusk Tests (PHPUnit Syntax)\nDESCRIPTION: Example of using a custom component within a Dusk test using PHPUnit syntax. This demonstrates how components can be used to encapsulate complex UI interactions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_80\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Browser;\n\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nuse Laravel\\Dusk\\Browser;\nuse Tests\\Browser\\Components\\DatePicker;\nuse Tests\\DuskTestCase;\n\nclass ExampleTest extends DuskTestCase\n{\n    /**\n     * A basic component test example.\n     */\n    public function test_basic_example(): void\n    {\n        $this->browse(function (Browser $browser) {\n            $browser->visit('/')\n                ->within(new DatePicker, function (Browser $browser) {\n                    $browser->selectDate(2019, 1, 30);\n                })\n                ->assertSee('January');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using beforeToday Date Validation in Laravel\nDESCRIPTION: Shows how to validate that a date field must be before the current date using Laravel's fluent date rule builder with the beforeToday method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n'start_date' => [\n    'required',\n    Rule::date()->beforeToday(),\n],\n```\n\n----------------------------------------\n\nTITLE: Finding First Element Based on Key/Value - PHP\nDESCRIPTION: The `firstWhere` method finds the first element in a collection that matches a given key-value pair or satisfies a comparison using a comparison operator. It also accepts a single argument to check if the item key's value is truthy.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([\n    ['name' => 'Regena', 'age' => null],\n    ['name' => 'Linda', 'age' => 14],\n    ['name' => 'Diego', 'age' => 23],\n    ['name' => 'Linda', 'age' => 84],\n]);\n\n$collection->firstWhere('name', 'Linda');\n\n// ['name' => 'Linda', 'age' => 14]\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection->firstWhere('age', '>=', 18);\n\n// ['name' => 'Diego', 'age' => 23]\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection->firstWhere('age');\n\n// ['name' => 'Linda', 'age' => 14]\n\n```\n\n----------------------------------------\n\nTITLE: Waiting for Missing Elements\nDESCRIPTION: Shows how to wait until elements are removed from the page using waitUntilMissing method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n// Wait a maximum of five seconds until the selector is missing...\n$browser->waitUntilMissing('.selector');\n\n// Wait a maximum of one second until the selector is missing...\n$browser->waitUntilMissing('.selector', 1);\n```\n\n----------------------------------------\n\nTITLE: Managing OAuth2 Clients using Passport JSON API in JavaScript\nDESCRIPTION: These snippets show how to use Axios to interact with Passport's JSON API for managing OAuth2 clients, including listing, creating, updating, and deleting clients.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/oauth/clients')\n    .then(response => {\n        console.log(response.data);\n    });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n    name: 'Client Name',\n    redirect: 'http://example.com/callback'\n};\n\naxios.post('/oauth/clients', data)\n    .then(response => {\n        console.log(response.data);\n    })\n    .catch (response => {\n        // List errors on response...\n    });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n    name: 'New Client Name',\n    redirect: 'http://example.com/callback'\n};\n\naxios.put('/oauth/clients/' + clientId, data)\n    .then(response => {\n        console.log(response.data);\n    })\n    .catch (response => {\n        // List errors on response...\n    });\n```\n\nLANGUAGE: javascript\nCODE:\n```\naxios.delete('/oauth/clients/' + clientId)\n    .then(response => {\n        // ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies for Site Sharing\nDESCRIPTION: PHP code to configure trusted proxies in bootstrap/app.php when using the share command, allowing URL generation helpers to work correctly when the site is accessed through a proxy.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->trustProxies(at: '*');\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Job Backoff in Laravel PHP\nDESCRIPTION: Demonstrates how to implement a dynamic backoff method in a Laravel job class. This allows for more complex logic in determining the retry delay for failed jobs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_86\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Calculate the number of seconds to wait before retrying the job.\n */\npublic function backoff(): int\n{\n    return 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Retrieving Context in Laravel (PHP)\nDESCRIPTION: This snippet demonstrates various ways to add and retrieve context information in Laravel using the Context facade. It includes examples of adding single and multiple items, conditional adding, and retrieving context data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/context.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Context;\n\nContext::add('key', 'value');\n\nContext::add([\n    'first_key' => 'value',\n    'second_key' => 'value',\n]);\n\nContext::addIf('key', 'second');\n\nContext::increment('records_added');\nContext::increment('records_added', 5);\n\nContext::decrement('records_added');\nContext::decrement('records_added', 5);\n\n$value = Context::get('key');\n\n$data = Context::only(['first_key', 'second_key']);\n\n$value = Context::pull('key');\n\n$data = Context::all();\n```\n\n----------------------------------------\n\nTITLE: URL Validation with Str::isUrl in PHP\nDESCRIPTION: Demonstrates the use of Str::isUrl to determine if a given string is a valid URL. Shows how to specify valid protocols.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$isUrl = Str::isUrl('http://example.com');\n\n// true\n\n$isUrl = Str::isUrl('laravel');\n\n// false\n```\n\nLANGUAGE: php\nCODE:\n```\n$isUrl = Str::isUrl('http://example.com', ['http', 'https']);\n```\n\n----------------------------------------\n\nTITLE: Displaying Transaction History in Laravel Blade\nDESCRIPTION: Example of rendering a user's transaction history in a Blade template. This HTML table shows transaction details including date, total, tax, and a download link for the invoice.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_80\n\nLANGUAGE: html\nCODE:\n```\n<table>\n    @foreach ($transactions as $transaction)\n        <tr>\n            <td>{{ $transaction->billed_at->toFormattedDateString() }}</td>\n            <td>{{ $transaction->total() }}</td>\n            <td>{{ $transaction->tax() }}</td>\n            <td><a href=\"{{ route('download-invoice', $transaction->id) }}\" target=\"_blank\">Download</a></td>\n        </tr>\n    @endforeach\n</table>\n```\n\n----------------------------------------\n\nTITLE: Customizing Handle Method Dependency Injection in Laravel Jobs\nDESCRIPTION: Example showing how to take control over dependency injection in a job's handle method using the container's bindMethod. This is typically called from a service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\ProcessPodcast;\nuse App\\Services\\AudioProcessor;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->bindMethod([ProcessPodcast::class, 'handle'], function (ProcessPodcast $job, Application $app) {\n    return $job->handle($app->make(AudioProcessor::class));\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming JSON Responses in Laravel\nDESCRIPTION: Shows how to use the streamJson method to stream JSON data incrementally, which is useful for large datasets that need to be sent progressively to the browser.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nRoute::get('/users.json', function () {\n    return response()->streamJson([\n        'users' => User::cursor(),\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Castable with Arguments in Model (PHP)\nDESCRIPTION: Illustrates passing arguments when defining a `Castable` class in the model's `casts()` method. The arguments (e.g., `:argument`) are passed as an array to the `castUsing` method of the specified `Castable` class (`Address`).\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse App\\ValueObjects\\Address;\n\nprotected function casts(): array\n{\n    return [\n        'address' => Address::class.':argument',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Authenticated User from a Controller Method\nDESCRIPTION: Demonstrates how to access the authenticated user via type-hinting the Request object in a controller method. This approach uses dependency injection to get access to the current request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass FlightController extends Controller\n{\n    /**\n     * Update the flight information for an existing flight.\n     */\n    public function update(Request $request): RedirectResponse\n    {\n        $user = $request->user();\n\n        // ...\n\n        return redirect('/flights');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Eloquent Model Using Artisan Command in Laravel\nDESCRIPTION: Command to create a basic Eloquent model class using Laravel's Artisan CLI tool. This places the model in the app/Models directory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:model Flight\n```\n\n----------------------------------------\n\nTITLE: Force Deleting Related Models in Laravel Eloquent\nDESCRIPTION: Demonstrates how to permanently delete related models by calling the forceDelete() method on a relationship.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n$flight->history()->forceDelete();\n```\n\n----------------------------------------\n\nTITLE: Handling Incomplete Payments in Laravel Cashier\nDESCRIPTION: Shows how to check for incomplete payments and direct users to the payment confirmation page. Also demonstrates how to keep subscriptions active during past due or incomplete states.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nif ($user->hasIncompletePayment('default')) {\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription('default')->hasIncompletePayment()) {\n    // ...\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{ route('cashier.payment', $subscription->latestPayment()->id) }}\">\n    Please confirm your payment.\n</a>\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Cashier\\Cashier;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    Cashier::keepPastDueSubscriptionsActive();\n    Cashier::keepIncompleteSubscriptionsActive();\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Radio Button States in PHP with Laravel Dusk\nDESCRIPTION: Assert the selection state of radio buttons using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertRadioSelected($field, $value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertRadioNotSelected($field, $value);\n```\n\n----------------------------------------\n\nTITLE: Querying Subscriptions with Scopes in Laravel Paddle\nDESCRIPTION: Examples of using subscription query scopes to retrieve subscriptions in specific states. These scopes allow filtering subscriptions based on their status, such as valid, canceled, or on trial.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n// Get all valid subscriptions...\n$subscriptions = Subscription::query()->valid()->get();\n\n// Get all of the canceled subscriptions for a user...\n$subscriptions = $user->subscriptions()->canceled()->get();\n```\n\n----------------------------------------\n\nTITLE: Asserting Cookie Absence in Laravel Tests\nDESCRIPTION: This snippet demonstrates how to assert that a response does not contain a specific cookie using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$response->assertCookieMissing($cookieName);\n```\n\n----------------------------------------\n\nTITLE: Creating a Metered Subscription in Laravel Cashier\nDESCRIPTION: This snippet demonstrates how to create a new subscription with a metered price using Laravel Cashier. It uses the meteredPrice method to add the metered price ID to a customer subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_75\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/user/subscribe', function (Request $request) {\n    $request->user()->newSubscription('default')\n        ->meteredPrice('price_metered')\n        ->create($request->paymentMethodId);\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Collection Views with Blade @each\nDESCRIPTION: Demonstrates using the @each directive to render views for array/collection elements. Allows combining loops and includes in one line.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_24\n\nLANGUAGE: blade\nCODE:\n```\n@each('view.name', $jobs, 'job')\n```\n\nLANGUAGE: blade\nCODE:\n```\n@each('view.name', $jobs, 'job', 'view.empty')\n```\n\n----------------------------------------\n\nTITLE: Deleting All Payment Methods in Laravel Cashier\nDESCRIPTION: Demonstrates how to delete all payment method information for a billable model using the deletePaymentMethods method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$user->deletePaymentMethods();\n```\n\n----------------------------------------\n\nTITLE: Defining Component Constructor Arguments in PHP with camelCase\nDESCRIPTION: Demonstrates how to create a component constructor with camelCase arguments that will be referenced using kebab-case in HTML attributes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Create the component instance.\n */\npublic function __construct(\n    public string $alertType,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Conditional Exception Throttling in Laravel Jobs\nDESCRIPTION: Implementation of conditional exception throttling using the when method to only throttle specific types of exceptions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\HttpClientException;\nuse Illuminate\\Queue\\Middleware\\ThrottlesExceptions;\n\npublic function middleware(): array\n{\n    return [(new ThrottlesExceptions(10, 10 * 60))->when(\n        fn (Throwable $throwable) => $throwable instanceof HttpClientException\n    )];\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Laravel's Default Global Middleware\nDESCRIPTION: Code for manually configuring Laravel's global middleware stack. This allows you to add, remove, or reorder the default middleware that Laravel uses for all requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->use([\n        \\Illuminate\\Foundation\\Http\\Middleware\\InvokeDeferredCallbacks::class,\n        // \\Illuminate\\Http\\Middleware\\TrustHosts::class,\n        \\Illuminate\\Http\\Middleware\\TrustProxies::class,\n        \\Illuminate\\Http\\Middleware\\HandleCors::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance::class,\n        \\Illuminate\\Http\\Middleware\\ValidatePostSize::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\TrimStrings::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class,\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Raw Data Attachment\nDESCRIPTION: Demonstrates attaching raw data as a file using a closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\npublic function attachments(): array\n{\n    return [\n        Attachment::fromData(fn () => $this->pdf, 'Report.pdf')\n            ->withMime('application/pdf'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Input Fields\nDESCRIPTION: Demonstrates waiting for input fields to become visible on the page.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n// Wait a maximum of five seconds for the input...\n$browser->waitForInput($field);\n\n// Wait a maximum of one second for the input...\n$browser->waitForInput($field, 1);\n```\n\n----------------------------------------\n\nTITLE: Customizing Pivot Attribute Name in Laravel Relationships\nDESCRIPTION: Example of renaming the pivot attribute to better reflect its purpose using the as method, changing from 'pivot' to 'subscription' for a podcast subscription relationship.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->belongsToMany(Podcast::class)\n    ->as('subscription')\n    ->withTimestamps();\n```\n\n----------------------------------------\n\nTITLE: Ignoring Model Instance in Unique Validation\nDESCRIPTION: Example showing how to ignore a model instance when performing unique validation in Laravel. This approach automatically extracts the key from the model for the uniqueness check.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nRule::unique('users')->ignore($user)\n```\n\n----------------------------------------\n\nTITLE: Generating a Job Class in Laravel\nDESCRIPTION: Artisan command to generate a new job class in the app/Jobs directory, implementing the ShouldQueue interface for asynchronous processing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan make:job ProcessPodcast\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Rate Limits Based on User Status\nDESCRIPTION: This snippet demonstrates how to create dynamic rate limits based on user attributes. VIP customers receive unlimited access while regular users are limited to 100 requests per minute.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nRateLimiter::for('uploads', function (Request $request) {\n    return $request->user()->vipCustomer()\n        ? Limit::none()\n        : Limit::perMinute(100);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Laravel Routes for Post Creation\nDESCRIPTION: Sets up basic routes for displaying a post creation form and handling post submission in Laravel's web.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\PostController;\n\nRoute::get('/post/create', [PostController::class, 'create']);\nRoute::post('/post', [PostController::class, 'store']);\n```\n\n----------------------------------------\n\nTITLE: Replacing Items in Laravel Collection with Replace Method in PHP\nDESCRIPTION: Shows the `replace` method which overwrites matching items in a collection, including those with string or numeric keys. It combines existing values with new ones, replacing items when keys match, and adding new items when keys do not exist. Inputs are an existing collection and an array of replacement values; output is the merged collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_101\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['Taylor', 'Abigail', 'James']);\n\n$replaced = $collection->replace([1 => 'Victoria', 3 => 'Finn']);\n\n$replaced->all();\n\n// ['Taylor', 'Victoria', 'James', 'Finn']\n```\n\n----------------------------------------\n\nTITLE: Configuring Xdebug in php.ini\nDESCRIPTION: PHP.ini configuration for activating Xdebug in the specified modes using environment variables.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\n[xdebug]\nxdebug.mode=${XDEBUG_MODE}\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Data to Laravel Resource Collection\nDESCRIPTION: Demonstrates how to add top-level meta data when constructing resource collections using the additional() method. The example shows adding meta data to a User collection with loaded roles.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nreturn User::all()\n    ->load('roles')\n    ->toResourceCollection()\n    ->additional(['meta' => [\n        'key' => 'value',\n    ]]);\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Not Present in Laravel Tests\nDESCRIPTION: This snippet demonstrates how to assert that a given string is not contained within the response text, with options to escape the string and strip HTML tags.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$response->assertDontSeeText($value, $escape = true);\n```\n\n----------------------------------------\n\nTITLE: Generating URLs and Redirects for Named Routes in Laravel\nDESCRIPTION: Shows how to generate URLs and redirects for named routes in Laravel using the 'route' and 'redirect' helper functions, including passing parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// Generating URLs...\n$url = route('profile');\n\n// Generating Redirects...\nreturn redirect()->route('profile');\n\nreturn to_route('profile');\n\nRoute::get('/user/{id}/profile', function (string $id) {\n    // ...\n})->name('profile');\n\n$url = route('profile', ['id' => 1]);\n\n$url = route('profile', ['id' => 1, 'photos' => 'yes']);\n\n// /user/1/profile?photos=yes\n```\n\n----------------------------------------\n\nTITLE: Recycling Existing Models for Relationships in Laravel Factories\nDESCRIPTION: This snippet demonstrates how to use the 'recycle' method in Laravel factories to reuse existing models for relationships. It shows examples with a single model and a collection of models.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nTicket::factory()\n    ->recycle(Airline::factory()->create())\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\nTicket::factory()\n    ->recycle($airlines)\n    ->create();\n```\n\n----------------------------------------\n\nTITLE: Asserting Exceptions Thrown in Laravel Tests\nDESCRIPTION: Demonstrates how to use the assertThrows method to test that specific exceptions are thrown by a given piece of code, and how to make assertions against the thrown exception.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->assertThrows(\n    fn () => (new ProcessOrder)->execute(),\n    OrderInvalid::class\n);\n\n$this->assertThrows(\n    fn () => (new ProcessOrder)->execute(),\n    fn (OrderInvalid $e) => $e->orderId() === 123;\n);\n\n$this->assertDoesntThrow(fn () => (new ProcessOrder)->execute());\n```\n\n----------------------------------------\n\nTITLE: Filtering Relationships by Pivot Table Values in Laravel\nDESCRIPTION: Examples of filtering many-to-many relationship queries based on intermediate table column values using various wherePivot methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->belongsToMany(Role::class)\n    ->wherePivot('approved', 1);\n\nreturn $this->belongsToMany(Role::class)\n    ->wherePivotIn('priority', [1, 2]);\n\nreturn $this->belongsToMany(Role::class)\n    ->wherePivotNotIn('priority', [1, 2]);\n\nreturn $this->belongsToMany(Podcast::class)\n    ->as('subscriptions')\n    ->wherePivotBetween('created_at', ['2020-01-01 00:00:00', '2020-12-31 00:00:00']);\n\nreturn $this->belongsToMany(Podcast::class)\n    ->as('subscriptions')\n    ->wherePivotNotBetween('created_at', ['2020-01-01 00:00:00', '2020-12-31 00:00:00']);\n\nreturn $this->belongsToMany(Podcast::class)\n    ->as('subscriptions')\n    ->wherePivotNull('expired_at');\n\nreturn $this->belongsToMany(Podcast::class)\n    ->as('subscriptions')\n    ->wherePivotNotNull('expired_at');\n```\n\n----------------------------------------\n\nTITLE: Cache Helper Function Usage\nDESCRIPTION: Demonstrates using global cache() helper function for cache operations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$value = cache('key');\n\ncache(['key' => 'value'], $seconds);\n\ncache(['key' => 'value'], now()->addMinutes(10));\n\ncache()->remember('users', $seconds, function () {\n    return DB::table('users')->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Configuration in PHP\nDESCRIPTION: Use the env() function to retrieve environment variable values in configuration files, with an optional default value.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'debug' => env('APP_DEBUG', false),\n```\n\n----------------------------------------\n\nTITLE: Using UserResource in Laravel Route\nDESCRIPTION: Demonstrates how to use the UserResource class in a Laravel route to return a single user as a JSON response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Resources\\UserResource;\nuse App\\Models\\User;\n\nRoute::get('/user/{id}', function (string $id) {\n    return new UserResource(User::findOrFail($id));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Tests with Artisan in Laravel\nDESCRIPTION: Creates a new test case in the tests/Feature directory using Laravel's Artisan command-line tool.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:test UserTest\n```\n\n----------------------------------------\n\nTITLE: Setting Default Attribute Values in Laravel Model\nDESCRIPTION: Demonstrates how to define default values for model attributes using the attributes property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The model's default values for attributes.\n     *\n     * @var array\n     */\n    protected $attributes = [\n        'options' => '[]',\n        'delayed' => false,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Has One of Many Relationships in Laravel\nDESCRIPTION: Demonstrates how to define relationships to get the latest or oldest related model\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the user's most recent order.\n */\npublic function latestOrder(): HasOne\n{\n    return $this->hasOne(Order::class)->latestOfMany();\n}\n\n/**\n * Get the user's oldest order.\n */\npublic function oldestOrder(): HasOne\n{\n    return $this->hasOne(Order::class)->oldestOfMany();\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Query Clauses\nDESCRIPTION: Shows how to add conditional where clauses and ordering based on runtime conditions using the when method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$role = $request->input('role');\n\n$users = DB::table('users')\n    ->when($role, function (Builder $query, string $role) {\n        $query->where('role_id', $role);\n    })\n    ->get();\n\n$sortByVotes = $request->boolean('sort_by_votes');\n\n$users = DB::table('users')\n    ->when($sortByVotes, function (Builder $query, bool $sortByVotes) {\n        $query->orderBy('votes');\n    }, function (Builder $query) {\n        $query->orderBy('name');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Collection with collect() in PHP\nDESCRIPTION: The `collect` method creates a new standard `Illuminate\\Support\\Collection` instance from the items currently in the collection. It's particularly useful for converting a `LazyCollection` or any `Enumerable` instance into a standard, non-lazy collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$collectionA = collect([1, 2, 3]);\n\n$collectionB = $collectionA->collect();\n\n$collectionB->all();\n\n// [1, 2, 3]\n```\n\nLANGUAGE: php\nCODE:\n```\n$lazyCollection = LazyCollection::make(function () {\n    yield 1;\n    yield 2;\n    yield 3;\n});\n\n$collection = $lazyCollection->collect();\n\n$collection::class;\n\n// 'Illuminate\\Support\\Collection'\n\n$collection->all();\n\n// [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Passwords with Str::password in PHP\nDESCRIPTION: Demonstrates how to use Str::password to generate a secure, random password of a given length, consisting of letters, numbers, symbols, and spaces.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$password = Str::password();\n\n// 'EbJo2vE-AS:U,$%_gkrV4n,q~1xy/-_4'\n\n$password = Str::password(12);\n\n// 'qwuar>#V|i]N'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Page Methods in Laravel Dusk\nDESCRIPTION: Custom page methods can be defined to encapsulate common testing logic. This example creates a method to handle playlist creation functionality that can be reused across tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Browser\\Pages;\n\nuse Laravel\\Dusk\\Browser;\nuse Laravel\\Dusk\\Page;\n\nclass Dashboard extends Page\n{\n    // Other page methods...\n\n    /**\n     * Create a new playlist.\n     */\n    public function createPlaylist(Browser $browser, string $name): void\n    {\n        $browser->type('name', $name)\n            ->check('share')\n            ->press('Create Playlist');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Boot Method in Laravel Service Provider\nDESCRIPTION: Shows how to implement the boot method in a Laravel service provider. This example registers a view composer within the service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass ComposerServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        View::composer('view', function () {\n            // ...\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Profiling Slow Tests in Laravel\nDESCRIPTION: Runs tests with profiling to identify the slowest test cases in a Laravel application. This helps in optimizing the test suite for faster execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan test --profile\n```\n\n----------------------------------------\n\nTITLE: Enabling Timestamps on Intermediate Tables in Laravel\nDESCRIPTION: Example of enabling automatic timestamp maintenance on the intermediate table using the withTimestamps method when defining the relationship.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->belongsToMany(Role::class)->withTimestamps();\n```\n\n----------------------------------------\n\nTITLE: Testing Laravel Facades with Mocking\nDESCRIPTION: Illustrates how to test a route that uses the Cache facade by mocking the facade and asserting the expected behavior.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Cache;\n\nRoute::get('/cache', function () {\n    return Cache::get('key');\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Cache;\n\ntest('basic example', function () {\n    Cache::shouldReceive('get')\n        ->with('key')\n        ->andReturn('value');\n\n    $response = $this->get('/cache');\n\n    $response->assertSee('value');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Responses in Laravel\nDESCRIPTION: Shows how to create JSON responses using the json method, which automatically sets the Content-Type header and converts the given array to JSON. It also demonstrates how to create a JSONP response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nreturn response()->json([\n    'name' => 'Abigail',\n    'state' => 'CA',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn response()\n    ->json(['name' => 'Abigail', 'state' => 'CA'])\n    ->withCallback($request->input('callback'));\n```\n\n----------------------------------------\n\nTITLE: Using the Octane Cache in Laravel\nDESCRIPTION: Example of using the high-performance Octane cache driver with Swoole, which provides extremely fast read and write operations. This cache is available to all workers but is cleared on server restart.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nCache::store('octane')->put('framework', 'Laravel', 30);\n```\n\n----------------------------------------\n\nTITLE: Using literal() function to create object instances in Laravel PHP\nDESCRIPTION: The literal() function creates a new stdClass instance with named arguments as properties, providing a convenient way to create simple data objects.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_95\n\nLANGUAGE: php\nCODE:\n```\n$obj = literal(\n    name: 'Joe',\n    languages: ['PHP', 'Ruby'],\n);\n\n$obj->name; // 'Joe'\n$obj->languages; // ['PHP', 'Ruby']\n```\n\n----------------------------------------\n\nTITLE: Laravel Controller with Inertia Rendering for SPA\nDESCRIPTION: A Laravel controller method that renders an Inertia page instead of a Blade template, demonstrating how to pass data to a React or Vue component in an Inertia-powered single-page application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/frontend.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse Inertia\\Inertia;\nuse Inertia\\Response;\n\nclass UserController extends Controller\n{\n    /**\n     * Show the profile for a given user.\n     */\n    public function show(string $id): Response\n    {\n        return Inertia::render('users/show', [\n            'user' => User::findOrFail($id)\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Homebrew for Laravel Valet Installation\nDESCRIPTION: Command to update Homebrew package manager before installing Laravel Valet dependencies.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew update\n```\n\n----------------------------------------\n\nTITLE: Pulling Key-Value Pair with Default Value using `Arr::pull()` - PHP\nDESCRIPTION: This example demonstrates how to use `Arr::pull()` with a default value. If the specified key doesn't exist in the array, the provided default value will be returned, and the array remains unchanged.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$value = Arr::pull($array, $key, $default);\n```\n\n----------------------------------------\n\nTITLE: Checking Trial Period Status in PHP\nDESCRIPTION: Method to determine if a user's subscription is within the trial period, useful for displaying trial-related notices.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription()->onTrial()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Sail via Composer\nDESCRIPTION: Command to install Laravel Sail into an existing Laravel application using Composer package manager.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/sail --dev\n```\n\n----------------------------------------\n\nTITLE: Creating Process Pipelines in PHP\nDESCRIPTION: Demonstrates how to create and execute process pipelines, including real-time output handling and process naming.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Process\\Pipe;\nuse Illuminate\\Support\\Facades\\Process;\n\n$result = Process::pipe(function (Pipe $pipe) {\n    $pipe->command('cat example.txt');\n    $pipe->command('grep -i \"laravel\"');\n});\n\n$result = Process::pipe([\n    'cat example.txt',\n    'grep -i \"laravel\"',\n]);\n\n$result = Process::pipe(function (Pipe $pipe) {\n    $pipe->command('cat example.txt');\n    $pipe->command('grep -i \"laravel\"');\n}, function (string $type, string $output) {\n    echo $output;\n});\n\n$result = Process::pipe(function (Pipe $pipe) {\n    $pipe->as('first')->command('cat example.txt');\n    $pipe->as('second')->command('grep -i \"laravel\"');\n})->start(function (string $type, string $output, string $key) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Securing Markdown with Str::inlineMarkdown in PHP\nDESCRIPTION: Demonstrates how to use Str::inlineMarkdown to strip or escape HTML in Markdown for security purposes. It shows options for handling HTML input and unsafe links.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nStr::inlineMarkdown('Inject: <script>alert(\"Hello XSS!\");</script>', [\n    'html_input' => 'strip',\n    'allow_unsafe_links' => false,\n]);\n\n// Inject: alert(&quot;Hello XSS!&quot;);\n```\n\n----------------------------------------\n\nTITLE: Creating ULID Foreign Key Column in Laravel Migration\nDESCRIPTION: The foreignUlid method creates a ULID equivalent column for use as a foreign key in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\n$table->foreignUlid('user_id');\n```\n\n----------------------------------------\n\nTITLE: Creating Nullable Polymorphic Columns with nullableMorphs()\nDESCRIPTION: Similar to morphs() but creates nullable columns for polymorphic relationships.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$table->nullableMorphs('taggable');\n```\n\n----------------------------------------\n\nTITLE: Shared Log Context Implementation\nDESCRIPTION: Shows how to share context across all logging channels using shareContext method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Str;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AssignRequestId\n{\n    public function handle(Request $request, Closure $next): Response\n    {\n        $requestId = (string) Str::uuid();\n\n        Log::shareContext([\n            'request-id' => $requestId\n        ]);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Artisan Commands Programmatically\nDESCRIPTION: Shows how to execute Artisan commands from routes or controllers using the Artisan facade's call method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Artisan;\n\nRoute::post('/user/{user}/mail', function (string $user) {\n    $exitCode = Artisan::call('mail:send', [\n        'user' => $user, '--queue' => 'default'\n    ]);\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for HTTP Requests\nDESCRIPTION: Demonstrates how to set timeout and connection timeout for HTTP requests using Laravel's HTTP Client.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::timeout(3)->get(/* ... */);\n\n$response = Http::connectTimeout(3)->get(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Creating Carbon Instance with today - PHP\nDESCRIPTION: The `today` function is a helper function that creates a new `Illuminate\\Support\\Carbon` instance, representing the current date. It simplifies the process of obtaining a Carbon instance for today's date.  It does not accept any parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_120\n\nLANGUAGE: php\nCODE:\n```\n$today = today();\n```\n\n----------------------------------------\n\nTITLE: Extracting Basename from Paths in Laravel PHP\nDESCRIPTION: The basename method returns the trailing name component of a given string path, similar to PHP's basename function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_82\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('/foo/bar/baz')->basename();\n\n// 'baz'\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Strings in PHP\nDESCRIPTION: Shows how to use the 'isJson' method to determine if a given string is valid JSON.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_118\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('[1,2,3]')->isJson();\n\n// true\n\n$result = Str::of('{\"first\": \"John\", \"last\": \"Doe\"}')->isJson();\n\n// true\n\n$result = Str::of('{first: \"John\", last: \"Doe\"}')->isJson();\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Generating Collections with times() Static Method - PHP\nDESCRIPTION: Shows the static times method which executes a given closure a specified number of times to build a new collection. The closure receives the iteration count and should return the value to be inserted. Inputs are the number of times and a closure. Output is a generated collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_130\n\nLANGUAGE: php\nCODE:\n```\n$collection = Collection::times(10, function (int $number) {\n    return $number * 9;\n});\n\n$collection->all();\n\n// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]\n```\n\n----------------------------------------\n\nTITLE: After Or Equal Date Validation\nDESCRIPTION: Example showing how to validate that a date must be after or equal to a specific date.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rule;\n\n'start_date' => [\n    'required',\n    Rule::date()->afterOrEqual(today()->addDays(7)),\n],\n```\n\n----------------------------------------\n\nTITLE: Creating Queueable Anonymous Event Listeners in Laravel\nDESCRIPTION: Example of registering a closure as a queueable event listener. This allows processing the event asynchronously on a queue without creating a dedicated listener class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Events\\PodcastProcessed;\nuse function Illuminate\\Events\\queueable;\nuse Illuminate\\Support\\Facades\\Event;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Event::listen(queueable(function (PodcastProcessed $event) {\n        // ...\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Hinting Dependencies in Laravel Routes\nDESCRIPTION: Example of how Laravel's container automatically resolves typed dependencies in route definitions. The Request object is injected without manual container configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/', function (Request $request) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Making a Simple Charge with Laravel Cashier\nDESCRIPTION: This snippet demonstrates how to make a one-time charge against a customer using the charge method on a billable model instance. It requires a payment method identifier and handles the charge amount in the lowest currency denomination.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_100\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/purchase', function (Request $request) {\n    $stripeCharge = $request->user()->charge(\n        100, $request->paymentMethodId\n    );\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unread Notifications in Laravel\nDESCRIPTION: Demonstrates how to access only unread notifications for a user through the unreadNotifications relationship. Like regular notifications, these are sorted by creation date.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$user = App\\Models\\User::find(1);\n\nforeach ($user->unreadNotifications as $notification) {\n    echo $notification->type;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Blade @once Directive\nDESCRIPTION: Shows how to use @once directive to evaluate template portions only once per rendering cycle, useful for JavaScript includes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_25\n\nLANGUAGE: blade\nCODE:\n```\n@once\n    @push('scripts')\n        <script>\n            // Your custom JavaScript...\n        </script>\n    @endpush\n@endonce\n```\n\nLANGUAGE: blade\nCODE:\n```\n@pushOnce('scripts')\n    <script>\n        // Your custom JavaScript...\n    </script>\n@endPushOnce\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Casting in Laravel Eloquent\nDESCRIPTION: Example of defining attribute casting in a Laravel Eloquent model to automatically cast the is_admin attribute to a boolean.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Get the attributes that should be cast.\n     *\n     * @return array<string, string>\n     */\n    protected function casts(): array\n    {\n        return [\n            'is_admin' => 'boolean',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Process Non-Execution in Laravel Tests\nDESCRIPTION: This code shows how to use the assertDidntRun method to verify that a specific process was not invoked, with an option to use a closure for more detailed assertions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Process;\n\nProcess::assertDidntRun('ls -la');\n\nProcess::assertDidntRun(fn (PendingProcess $process, ProcessResult $result) =>\n    $process->command === 'ls -la'\n);\n```\n\n----------------------------------------\n\nTITLE: Prepending Items to Laravel Collection in PHP\nDESCRIPTION: Demonstrates the `prepend` method which adds an item to the beginning of a collection. It shows usage with indexed arrays and associative arrays by optionally specifying the key for the prepended item. Dependencies include the Laravel Collection class. Inputs are collections and the item to prepend, and the output is a mutated collection with the new item at the start.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_92\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$collection->prepend(0);\n\n$collection->all();\n\n// [0, 1, 2, 3, 4, 5]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['one' => 1, 'two' => 2]);\n\n$collection->prepend(0, 'zero');\n\n$collection->all();\n\n// ['zero' => 0, 'one' => 1, 'two' => 2]\n```\n\n----------------------------------------\n\nTITLE: Making Concurrent HTTP Requests with Laravel's Pool Method\nDESCRIPTION: Demonstrates how to use the pool method to make multiple HTTP requests concurrently, improving performance when interacting with slow APIs. Shows both unnamed and named request examples.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\Pool;\nuse Illuminate\\Support\\Facades\\Http;\n\n$responses = Http::pool(fn (Pool $pool) => [\n    $pool->get('http://localhost/first'),\n    $pool->get('http://localhost/second'),\n    $pool->get('http://localhost/third'),\n]);\n\nreturn $responses[0]->ok() &&\n       $responses[1]->ok() &&\n       $responses[2]->ok();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\Pool;\nuse Illuminate\\Support\\Facades\\Http;\n\n$responses = Http::pool(fn (Pool $pool) => [\n    $pool->as('first')->get('http://localhost/first'),\n    $pool->as('second')->get('http://localhost/second'),\n    $pool->as('third')->get('http://localhost/third'),\n]);\n\nreturn $responses['first']->ok();\n```\n\n----------------------------------------\n\nTITLE: Escaping Attribute Rendering with Double Colon Syntax\nDESCRIPTION: Shows how to use double colon (::) prefix to escape attributes that should not be interpreted as PHP expressions, useful when working with JavaScript frameworks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_36\n\nLANGUAGE: blade\nCODE:\n```\n<x-button ::class=\"{ danger: isDeleting }\">\n    Submit\n</x-button>\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Update Payment Method in Laravel Paddle\nDESCRIPTION: Route implementation that redirects a customer to Paddle's hosted payment method update page. After the update, Paddle will dispatch a webhook to update the subscription details in your database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/update-payment-method', function (Request $request) {\n    $user = $request->user();\n\n    return $user->subscription()->redirectToUpdatePaymentMethod();\n});\n```\n\n----------------------------------------\n\nTITLE: Listing All Meters for a User in Laravel Cashier\nDESCRIPTION: This snippet demonstrates how to list all meters associated with a user in Laravel Cashier using the meters method on a Billable instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_79\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->meters();\n```\n\n----------------------------------------\n\nTITLE: Appending Items to Laravel Collection in PHP\nDESCRIPTION: Illustrates the `push` method which appends an item to the end of the collection. Requires an existing collection and the item to append. Returns a mutated collection with the additional item at the end.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_94\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4]);\n\n$collection->push(5);\n\n$collection->all();\n\n// [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Using dispatch() function for job queuing in Laravel PHP\nDESCRIPTION: The dispatch() function pushes a job onto Laravel's job queue for background processing, allowing for asynchronous task execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_86\n\nLANGUAGE: php\nCODE:\n```\ndispatch(new App\\Jobs\\SendEmails);\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Routes with Eloquent Model Parameters in Laravel\nDESCRIPTION: Demonstrates how to redirect to a route with parameters populated from an Eloquent model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// For a route with the following URI: /profile/{id}\n\nreturn redirect()->route('profile', [$user]);\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Fortify via Composer\nDESCRIPTION: Command to install Laravel Fortify package using Composer package manager.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/fortify\n```\n\n----------------------------------------\n\nTITLE: Combining In Rule with Array Rule in Laravel Validation\nDESCRIPTION: Shows how to combine the 'in' rule with the 'array' rule in Laravel validation, ensuring each value in an input array is present in a specified list.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\n\n$input = [\n    'airports' => ['NYC', 'LAS'],\n];\n\nValidator::make($input, [\n    'airports' => [\n        'required',\n        'array',\n    ],\n    'airports.*' => Rule::in(['NYC', 'LIT']),\n]);\n```\n\n----------------------------------------\n\nTITLE: Excluding Soft Deleted Records with Custom Column Name\nDESCRIPTION: Example demonstrating how to exclude soft deleted records from uniqueness checks when using a custom column name for soft deletes instead of the default 'deleted_at'.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_67\n\nLANGUAGE: php\nCODE:\n```\nRule::unique('users')->withoutTrashed('was_deleted_at');\n```\n\n----------------------------------------\n\nTITLE: Checking if String Contains Value in Laravel PHP\nDESCRIPTION: The contains method determines if a string contains a given value, with default case-sensitive behavior.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_95\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$contains = Str::of('This is my name')->contains('my');\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nested JSON Input Values in Laravel\nDESCRIPTION: Accessing nested values in JSON data sent to the application using dot notation syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$name = $request->input('user.name');\n```\n\n----------------------------------------\n\nTITLE: Disabling Resource Data Wrapping\nDESCRIPTION: Shows how to disable the automatic data wrapping of resources using a service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        // ...\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        JsonResource::withoutWrapping();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Authenticated User Redirection\nDESCRIPTION: Demonstrates how to customize where authenticated users are redirected when they access routes intended for guests, using the redirectUsersTo method in the application bootstrap file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->redirectUsersTo('/panel');\n\n    // Using a closure...\n    $middleware->redirectUsersTo(fn (Request $request) => route('panel'));\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Channel-Specific Delays (PHP)\nDESCRIPTION: Shows how to specify different delay times for different notification channels.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$user->notify((new InvoicePaid($invoice))->delay([\n    'mail' => now()->addMinutes(5),\n    'sms' => now()->addMinutes(10),\n]));\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Response Testing with Pest\nDESCRIPTION: Simple test example demonstrating how to make a GET request and assert response status using Pest testing framework.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntest('the application returns a successful response', function () {\n    $response = $this->get('/');\n\n    $response->assertStatus(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Service Binding in Laravel Container\nDESCRIPTION: This code demonstrates how to register a service binding within a service provider. The bind method is used to tell the container how to resolve a class with its dependencies.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Transistor;\nuse App\\Services\\PodcastParser;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->bind(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});\n```\n\n----------------------------------------\n\nTITLE: Database Seeder Test Example - Pest\nDESCRIPTION: Shows how to run database seeders in Pest tests, including running specific seeders or multiple seeders.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Database\\Seeders\\OrderStatusSeeder;\nuse Database\\Seeders\\TransactionStatusSeeder;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nuses(RefreshDatabase::class);\n\ntest('orders can be created', function () {\n    // Run the DatabaseSeeder...\n    $this->seed();\n\n    // Run a specific seeder...\n    $this->seed(OrderStatusSeeder::class);\n\n    // ...\n\n    // Run an array of specific seeders...\n    $this->seed([\n        OrderStatusSeeder::class,\n        TransactionStatusSeeder::class,\n        // ...\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Keys from Array Using Laravel Arr Select Method in PHP\nDESCRIPTION: The Arr::select method extracts specified keys from each sub-array within a multidimensional array. It requires an array of associative arrays and an array of keys to select. The output is an array of arrays containing only the selected keys and their values. It depends on Illuminate\\Support\\Arr and is useful for filtering arrays of data by specified fields.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [\n    ['id' => 1, 'name' => 'Desk', 'price' => 200],\n    ['id' => 2, 'name' => 'Table', 'price' => 150],\n    ['id' => 3, 'name' => 'Chair', 'price' => 300],\n];\n\nArr::select($array, ['name', 'price']);\n\n// [['name' => 'Desk', 'price' => 200], ['name' => 'Table', 'price' => 150], ['name' => 'Chair', 'price' => 300]]\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Process Route in Laravel\nDESCRIPTION: This snippet demonstrates a Laravel route that interacts with an asynchronous process, starting a bash script and logging its output while running.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/import', function () {\n    $process = Process::start('bash import.sh');\n\n    while ($process->running()) {\n        Log::info($process->latestOutput());\n        Log::info($process->latestErrorOutput());\n    }\n\n    return 'Done';\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Logging Channel in Laravel\nDESCRIPTION: Shows how to define a custom logging channel using a factory class in Laravel's logging configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n'channels' => [\n    'example-custom-channel' => [\n        'driver' => 'custom',\n        'via' => App\\Logging\\CreateCustomLogger::class,\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Additional Form Request Validation\nDESCRIPTION: Shows how to add custom validation logic after initial validation using the after method\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Validator;\n\n/**\n * Get the \"after\" validation callables for the request.\n */\npublic function after(): array\n{\n    return [\n        function (Validator $validator) {\n            if ($this->somethingElseIsInvalid()) {\n                $validator->errors()->add(\n                    'field',\n                    'Something is wrong with this field!'\n                );\n            }\n        }\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Additional Input Data in Laravel Request\nDESCRIPTION: Adding or overwriting input values in the request using the merge method, which will replace existing values with the same key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$request->merge(['votes' => 0]);\n```\n\n----------------------------------------\n\nTITLE: Generating Model with Seeder in Laravel\nDESCRIPTION: Commands to create an Eloquent model with a corresponding seeder class for database seeding operations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Generate a model and a FlightSeeder class...\nphp artisan make:model Flight --seed\nphp artisan make:model Flight -s\n```\n\n----------------------------------------\n\nTITLE: Running Queue Worker for Scout Jobs\nDESCRIPTION: Artisan command to run a queue worker specifically for Scout jobs. This processes queued Scout operations on the specified connection and queue.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work redis --queue=scout\n```\n\n----------------------------------------\n\nTITLE: Assert Session Validation Errors in Laravel Tests\nDESCRIPTION: Method to assert that the session contains specific validation errors. Can check for presence of error keys or specific error messages.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionHasErrors(\n    array $keys = [], $format = null, $errorBag = 'default'\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionHasErrors(['name', 'email']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionHasErrors([\n    'name' => 'The given name was invalid.'\n]);\n```\n\n----------------------------------------\n\nTITLE: Managing Many-to-Many Relationships in Factories\nDESCRIPTION: Shows how to create many-to-many relationships including pivot table attributes and using magic methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Role;\nuse App\\Models\\User;\n\n$user = User::factory()\n    ->has(Role::factory()->count(3))\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Role;\nuse App\\Models\\User;\n\n$user = User::factory()\n    ->hasAttached(\n        Role::factory()->count(3),\n        ['active' => true]\n    )\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = User::factory()\n    ->hasAttached(\n        Role::factory()\n            ->count(3)\n            ->state(function (array $attributes, User $user) {\n                return ['name' => $user->name.' Role'];\n            }),\n        ['active' => true]\n    )\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$roles = Role::factory()->count(3)->create();\n\n$user = User::factory()\n    ->count(3)\n    ->hasAttached($roles, ['active' => true])\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = User::factory()\n    ->hasRoles(1, [\n        'name' => 'Editor'\n    ])\n    ->create();\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Middleware to Laravel Job\nDESCRIPTION: Example of how to attach custom middleware to a job by implementing the middleware method in the job class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\Middleware\\RateLimited;\n\n/**\n * Get the middleware the job should pass through.\n *\n * @return array<int, object>\n */\npublic function middleware(): array\n{\n    return [new RateLimited];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Published shadcn-vue Components\nDESCRIPTION: Example of importing and using a published shadcn-vue Switch component in a Vue component after it has been added to the project.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Switch } from '@/Components/ui/switch'\n</script>\n\n<template>\n    <div>\n        <Switch />\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling Prorations with Immediate Invoice in Laravel Paddle\nDESCRIPTION: Combination of methods to disable prorations and immediately invoice the customer when changing subscription plans.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->noProrate()->swapAndInvoice($premium = 'pri_456');\n```\n\n----------------------------------------\n\nTITLE: Checking if Laravel Collection is Empty (PHP)\nDESCRIPTION: Returns a boolean indicating whether the collection contains any items. Returns `true` if the collection has zero elements, `false` otherwise.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\ncollect([])->isEmpty();\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Testing for Non-Specific Exit Codes in Laravel Console Commands\nDESCRIPTION: Shows how to verify that a console command did not exit with a specific exit code using the assertNotExitCode method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->artisan('inspire')->assertNotExitCode(1);\n```\n\n----------------------------------------\n\nTITLE: Customizing Pulse Usage Card Display in Blade\nDESCRIPTION: Blade template code demonstrating how to customize the display of Pulse Usage cards for different metrics.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:pulse.usage type=\"requests\" />\n<livewire:pulse.usage type=\"slow_requests\" />\n<livewire:pulse.usage type=\"jobs\" />\n```\n\n----------------------------------------\n\nTITLE: Recursively Sorting Arrays Using Laravel Arr SortRecursive Method in PHP\nDESCRIPTION: The Arr::sortRecursive method sorts a multidimensional array recursively. For numerically indexed arrays it uses sort(), for associative arrays it uses ksort(). The method requires Illuminate\\Support\\Arr and accepts an array as input. It returns the recursively sorted array maintaining original structure and key orders accordingly. The counterpart Arr::sortRecursiveDesc offers descending order sorting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [\n    ['Roman', 'Taylor', 'Li'],\n    ['PHP', 'Ruby', 'JavaScript'],\n    ['one' => 1, 'two' => 2, 'three' => 3],\n];\n\n$sorted = Arr::sortRecursive($array);\n\n/*\n    [\n        ['JavaScript', 'PHP', 'Ruby'],\n        ['one' => 1, 'three' => 3, 'two' => 2],\n        ['Li', 'Roman', 'Taylor'],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$sorted = Arr::sortRecursiveDesc($array);\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover Mail Transport in Laravel\nDESCRIPTION: This snippet demonstrates how to set up a failover mail configuration in Laravel's mail.php config file. It defines multiple mailers to be used as backups if the primary mailer fails.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n'mailers' => [\n    'failover' => [\n        'transport' => 'failover',\n        'mailers' => [\n            'postmark',\n            'mailgun',\n            'sendmail',\n        ],\n    ],\n\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Interfaces in Laravel Homestead\nDESCRIPTION: These YAML snippets demonstrate various ways to configure network interfaces in a Homestead configuration file, including private networks, bridged interfaces, and DHCP settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n    - type: \"private_network\"\n      ip: \"192.168.10.20\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n    - type: \"public_network\"\n      ip: \"192.168.10.20\"\n      bridge: \"en1: Wi-Fi (AirPort)\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n    - type: \"public_network\"\n      bridge: \"en1: Wi-Fi (AirPort)\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n    - type: \"public_network\"\n      ip: \"192.168.10.20\"\n      bridge: \"en1: Wi-Fi (AirPort)\"\n      dev: \"enp2s0\"\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Mail Notification with Artisan Command\nDESCRIPTION: This command creates a new notification class with a corresponding Markdown template. The --markdown option specifies the path for the template file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:notification InvoicePaid --markdown=mail.invoice.paid\n```\n\n----------------------------------------\n\nTITLE: Customizing HTTP Response Status for Denied Gates\nDESCRIPTION: Shows how to customize the HTTP status code returned when an action is denied by using the denyWithStatus or denyAsNotFound methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\Response;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::define('edit-settings', function (User $user) {\n    return $user->isAdmin\n        ? Response::allow()\n        : Response::denyWithStatus(404);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Strings after() Method in Laravel\nDESCRIPTION: The after method returns everything after the given value in a string, providing an object-oriented approach to string manipulation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_77\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slice = Str::of('This is my name')->after('This is');\n\n// ' my name'\n```\n\n----------------------------------------\n\nTITLE: Testing Job Chains\nDESCRIPTION: Demonstrates how to test chains of jobs using the Bus facade's assertChained method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_113\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\RecordShipment;\nuse App\\Jobs\\ShipOrder;\nuse App\\Jobs\\UpdateInventory;\nuse Illuminate\\Support\\Facades\\Bus;\n\nBus::fake();\n\n// ...\n\nBus::assertChained([\n    ShipOrder::class,\n    RecordShipment::class,\n    UpdateInventory::class\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Named Component Slots in Laravel Blade\nDESCRIPTION: Demonstrates how to provide content for both named slots and default slots when using a component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_62\n\nLANGUAGE: xml\nCODE:\n```\n<x-alert>\n    <x-slot:title>\n        Server Error\n    </x-slot>\n\n    <strong>Whoops!</strong> Something went wrong!\n</x-alert>\n```\n\n----------------------------------------\n\nTITLE: Enabling File Validation in Precognitive Requests\nDESCRIPTION: JavaScript code to include files in validation requests, overriding the default behavior of skipping file validation during precognitive requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nform.validateFiles();\n```\n\n----------------------------------------\n\nTITLE: Custom Throttling Key Configuration in Laravel Jobs\nDESCRIPTION: Example showing how to set a custom key for exception throttling to share throttling limits across multiple jobs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Queue\\Middleware\\ThrottlesExceptions;\n\npublic function middleware(): array\n{\n    return [(new ThrottlesExceptions(10, 10 * 60))->by('key')];\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Result Sets in Laravel PHP\nDESCRIPTION: Demonstrates how to retrieve multiple result sets from a stored procedure using the selectResultSets method of the DB facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[$options, $notifications] = DB::selectResultSets(\n    \"CALL get_user_options_and_notifications(?)\", $request->user()->id\n);\n```\n\n----------------------------------------\n\nTITLE: Checking if String Contains Any of Multiple Values in Laravel PHP\nDESCRIPTION: The contains method can check if a string contains any of the values in an array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_96\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$contains = Str::of('This is my name')->contains(['my', 'foo']);\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Specifying Select Clause in Laravel Query Builder\nDESCRIPTION: Demonstrates how to use the select method to specify custom select clauses in Laravel queries. It also shows how to use the distinct method and addSelect for adding columns to existing queries.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\n$users = DB::table('users')\n    ->select('name', 'email as user_email')\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')->distinct()->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$query = DB::table('users')->select('name');\n\n$users = $query->addSelect('age')->get();\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Rate Limiter in Laravel's AppServiceProvider\nDESCRIPTION: This code demonstrates how to define a rate limiter named 'api' in the AppServiceProvider boot method. It limits requests to 60 per minute per user ID or IP address for unauthenticated users.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Cache\\RateLimiting\\Limit;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\n/**\n * Bootstrap any application services.\n */\nprotected function boot(): void\n{\n    RateLimiter::for('api', function (Request $request) {\n        return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Collection After Method PHP\nDESCRIPTION: Shows the basic usage of the `after` method, which returns the item immediately following a specified value in the collection using loose comparison. It returns `null` if the search value is not found or is the last element.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$collection->after(3);\n\n// 4\n\n$collection->after(5);\n\n// null\n```\n\n----------------------------------------\n\nTITLE: Registering Destroyable Singleton Resource in Laravel\nDESCRIPTION: Shows how to register a singleton resource with a DELETE route but without creation or storage routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nRoute::singleton(...)->destroyable();\n```\n\n----------------------------------------\n\nTITLE: Using Str::beforeLast for String Extraction in PHP\nDESCRIPTION: The Str::beforeLast method returns everything before the last occurrence of the given value in a string, useful for extracting content before specific patterns.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slice = Str::beforeLast('This is my name', 'is');\n\n// 'This '\n```\n\n----------------------------------------\n\nTITLE: Installing SFTP Driver Dependencies for Laravel\nDESCRIPTION: Composer command to install the required Flysystem SFTP package for using the SFTP storage driver in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require league/flysystem-sftp-v3 \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Mutating Multiple Attributes with a Single Mutator\nDESCRIPTION: Example of creating a mutator that sets multiple model attributes when a single value object is set.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Support\\Address;\nuse Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n/**\n * Interact with the user's address.\n */\nprotected function address(): Attribute\n{\n    return Attribute::make(\n        get: fn (mixed $value, array $attributes) => new Address(\n            $attributes['address_line_one'],\n            $attributes['address_line_two'],\n        ),\n        set: fn (Address $value) => [\n            'address_line_one' => $value->lineOne,\n            'address_line_two' => $value->lineTwo,\n        ],\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Eloquent Models with Standard Collection - PHP\nDESCRIPTION: Shows the traditional approach of loading all matching Eloquent models into a standard `Illuminate\\Support\\Collection` using `User::all()`. This method fetches all results from the database and loads them into memory simultaneously before any further collection operations like filtering are applied.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_157\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = User::all()->filter(function (User $user) {\n    return $user->id > 500;\n});\n```\n\n----------------------------------------\n\nTITLE: Uncompromised Password Validation in Laravel\nDESCRIPTION: This code shows how to use the 'uncompromised' method to check if a password has been leaked in public data breaches, with an option to set a threshold for compromised occurrences.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_85\n\nLANGUAGE: php\nCODE:\n```\nPassword::min(8)->uncompromised()\n\n// Ensure the password appears less than 3 times in the same data leak...\nPassword::min(8)->uncompromised(3);\n```\n\n----------------------------------------\n\nTITLE: Querying All Polymorphic Types\nDESCRIPTION: Demonstrates using wildcard to query all possible polymorphic types from the database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_68\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\n\n$comments = Comment::whereHasMorph('commentable', '*', function (Builder $query) {\n    $query->where('title', 'like', 'foo%');\n})->get();\n```\n\n----------------------------------------\n\nTITLE: Customizing Pulse Dashboard Layout in Blade\nDESCRIPTION: Blade template code showing how to customize the Pulse dashboard layout and card positioning.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-pulse full-width>\n    ...\n</x-pulse>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-pulse cols=\"16\">\n    ...\n</x-pulse>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:pulse.usage cols=\"4\" rows=\"2\" />\n```\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:pulse.slow-queries expand />\n```\n\n----------------------------------------\n\nTITLE: Localizing Laravel Mailable\nDESCRIPTION: Demonstrates how to send a mailable in a specific locale using the locale method on the Mail facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nMail::to($request->user())->locale('es')->send(\n    new OrderShipped($order)\n);\n```\n\n----------------------------------------\n\nTITLE: Right Padding Strings with Str::padRight in PHP\nDESCRIPTION: Shows how to use Str::padRight to pad the right side of a string with another string until the final string reaches a desired length.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$padded = Str::padRight('James', 10, '-');\n\n// 'James-----'\n\n$padded = Str::padRight('James', 10);\n\n// 'James     '\n```\n\n----------------------------------------\n\nTITLE: Disabling Failed Job Storage in Laravel\nDESCRIPTION: Environment variable setting to disable the storage of failed jobs by setting the driver to null, which causes Laravel to discard failed jobs without storing them.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_101\n\nLANGUAGE: ini\nCODE:\n```\nQUEUE_FAILED_DRIVER=null\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription in Laravel Cashier\nDESCRIPTION: Demonstrates how to create a new subscription using the newSubscription method and the create method with a payment method ID in a route handler.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/user/subscribe', function (Request $request) {\n    $request->user()->newSubscription(\n        'default', 'price_monthly'\n    )->create($request->paymentMethodId);\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Item Invoices in Laravel Cashier\nDESCRIPTION: This code shows how to create invoices for multiple items using the tabPrice method, which adds items to the customer's tab before invoicing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_105\n\nLANGUAGE: php\nCODE:\n```\n$user->tabPrice('price_tshirt', 5);\n$user->tabPrice('price_mug', 2);\n$user->invoice();\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Axios\nDESCRIPTION: Example of making API requests from JavaScript using Axios with automatic token handling\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/api/user')\n    .then(response => {\n        console.log(response.data);\n    });\n```\n\n----------------------------------------\n\nTITLE: Clearing Laravel View Cache with Artisan Command\nDESCRIPTION: Demonstrates the Artisan command to clear the Laravel view cache. This is useful during development or when views have been updated and need to be recompiled.\nSOURCE: https://github.com/laravel/docs/blob/12.x/views.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan view:clear\n```\n\n----------------------------------------\n\nTITLE: Applying Coupons or Promotion Codes in Laravel Cashier\nDESCRIPTION: Demonstrates how to apply a new coupon or promotion code to an existing customer or subscription using applyCoupon or applyPromotionCode methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$billable->applyCoupon('coupon_id');\n$billable->applyPromotionCode('promotion_code_id');\n\n$subscription->applyCoupon('coupon_id');\n$subscription->applyPromotionCode('promotion_code_id');\n```\n\n----------------------------------------\n\nTITLE: Defining Factory States in Laravel PHP\nDESCRIPTION: Example of defining a 'suspended' state for a User factory. States allow for discrete modifications to be applied to model factories.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\n/**\n * Indicate that the user is suspended.\n */\npublic function suspended(): Factory\n{\n    return $this->state(function (array $attributes) {\n        return [\n            'account_status' => 'suspended',\n        ];\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Rendering Configuration in Laravel\nDESCRIPTION: Customizes how Laravel determines whether to render HTML or JSON exception responses using shouldRenderJsonWhen.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Throwable;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->shouldRenderJsonWhen(function (Request $request, Throwable $e) {\n        if ($request->is('admin/*')) {\n            return true;\n        }\n\n        return $request->expectsJson();\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Checking if Laravel Collection is Not Empty (PHP)\nDESCRIPTION: Returns a boolean indicating whether the collection contains one or more items. This is the inverse of the `isEmpty()` method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\ncollect([])->isNotEmpty();\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value with value - PHP\nDESCRIPTION: The `value` function simply returns the value that is passed to it. However, if a closure is passed, the closure is executed, and its return value is returned. Additional arguments can be passed to the closure if the first argument is a closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_124\n\nLANGUAGE: php\nCODE:\n```\n$result = value(true);\n\n// true\n\n$result = value(function () {\n    return false;\n});\n\n// false\n```\n\nLANGUAGE: php\nCODE:\n```\n$result = value(function (string $name) {\n    return $name;\n}, 'Taylor');\n\n// 'Taylor'\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Cursor Paginator Methods\nDESCRIPTION: A comprehensive list of methods available on Laravel cursor paginator instances that allow developers to interact with paginated data, manage cursors, and handle pagination state.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$paginator->count()           // Get the number of items for the current page\n$paginator->cursor()          // Get the current cursor instance\n$paginator->getOptions()      // Get the paginator options\n$paginator->hasPages()        // Determine if there are enough items to split into multiple pages\n$paginator->hasMorePages()    // Determine if there are more items in the data store\n$paginator->getCursorName()   // Get the query string variable used to store the cursor\n$paginator->items()           // Get the items for the current page\n$paginator->nextCursor()      // Get the cursor instance for the next set of items\n$paginator->nextPageUrl()     // Get the URL for the next page\n$paginator->onFirstPage()     // Determine if the paginator is on the first page\n$paginator->onLastPage()      // Determine if the paginator is on the last page\n$paginator->perPage()         // The number of items to be shown per page\n$paginator->previousCursor()  // Get the cursor instance for the previous set of items\n$paginator->previousPageUrl() // Get the URL for the previous page\n$paginator->setCursorName()   // Set the query string variable used to store the cursor\n$paginator->url($cursor)      // Get the URL for a given cursor instance\n```\n\n----------------------------------------\n\nTITLE: Grouping Collection Items - PHP\nDESCRIPTION: The `groupBy` method groups collection items based on a given key or a callback.  You can use it to organize data by category or any other criteria. Multiple criteria can be supplied as an array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([\n    ['account_id' => 'account-x10', 'product' => 'Chair'],\n    ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n    ['account_id' => 'account-x11', 'product' => 'Desk'],\n]);\n\n$grouped = $collection->groupBy('account_id');\n\n$grouped->all();\n\n/*\n    [\n        'account-x10' => [\n            ['account_id' => 'account-x10', 'product' => 'Chair'],\n            ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n        ],\n        'account-x11' => [\n            ['account_id' => 'account-x11', 'product' => 'Desk'],\n        ],\n    ]\n*/\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$grouped = $collection->groupBy(function (array $item, int $key) {\n    return substr($item['account_id'], -3);\n});\n\n$grouped->all();\n\n/*\n    [\n        'x10' => [\n            ['account_id' => 'account-x10', 'product' => 'Chair'],\n            ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n        ],\n        'x11' => [\n            ['account_id' => 'account-x11', 'product' => 'Desk'],\n        ],\n    ]\n*/\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$data = new Collection([\n    10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n    20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n    30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n    40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n]);\n\n$result = $data->groupBy(['skill', function (array $item) {\n    return $item['roles'];\n}], preserveKeys: true);\n\n/*\n[\n    1 => [\n        'Role_1' => [\n            10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n            20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n        ],\n        'Role_2' => [\n            20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n        ],\n        'Role_3' => [\n            10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n        ],\n    ],\n    2 => [\n        'Role_1' => [\n            30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n        ],\n        'Role_2' => [\n            40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n        ],\n    ],\n];\n*/\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Guard Instances in Laravel Authentication\nDESCRIPTION: This snippet shows how to specify which guard instance to use when authenticating a user in Laravel. It allows for managing authentication for separate parts of an application using different authenticatable models or user tables.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nif (Auth::guard('admin')->attempt($credentials)) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query String Parameters in Laravel\nDESCRIPTION: Using the query method to specifically retrieve values from the URL query string rather than the entire request payload.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$name = $request->query('name');\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Clients using Laravel Artisan Command\nDESCRIPTION: This snippet demonstrates how to use the passport:client Artisan command to create OAuth2 clients in Laravel Passport.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan passport:client\n```\n\n----------------------------------------\n\nTITLE: Touching Parent Timestamps in Laravel Eloquent\nDESCRIPTION: Explains how to automatically update parent model timestamps when a child model is modified. It shows how to define the $touches property in the child model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_105\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass Comment extends Model\n{\n    /**\n     * All of the relationships to be touched.\n     *\n     * @var array\n     */\n    protected $touches = ['post'];\n\n    /**\n     * Get the post that the comment belongs to.\n     */\n    public function post(): BelongsTo\n    {\n        return $this->belongsTo(Post::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Passport Authentication\nDESCRIPTION: Demonstrates how to use Passport's testing helpers to authenticate users and clients in tests\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Laravel\\Passport\\Passport;\n\ntest('servers can be created', function () {\n    Passport::actingAs(\n        User::factory()->create(),\n        ['create-servers']\n    );\n\n    $response = $this->post('/api/create-server');\n\n    $response->assertStatus(201);\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Passport\\Client;\nuse Laravel\\Passport\\Passport;\n\ntest('orders can be retrieved', function () {\n    Passport::actingAsClient(\n        Client::factory()->create(),\n        ['check-status']\n    );\n\n    $response = $this->get('/api/orders');\n\n    $response->assertStatus(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Throttling Backoff in Laravel Jobs\nDESCRIPTION: Implementation of ThrottlesExceptions middleware with custom backoff delay configuration for failed job retries.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Queue\\Middleware\\ThrottlesExceptions;\n\npublic function middleware(): array\n{\n    return [(new ThrottlesExceptions(10, 5 * 60))->backoff(5)];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Models in Laravel Eloquent\nDESCRIPTION: Example of retrieving an existing model, modifying its attributes, and saving it back to the database. The updated_at timestamp is automatically updated.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Flight;\n\n$flight = Flight::find(1);\n\n$flight->name = 'Paris to London';\n\n$flight->save();\n```\n\n----------------------------------------\n\nTITLE: Hiding Component Properties and Methods from Templates\nDESCRIPTION: Demonstrates how to prevent specific public methods or properties from being exposed as variables to the component template using the $except property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\View\\Components;\n\nuse Illuminate\\View\\Component;\n\nclass Alert extends Component\n{\n    /**\n     * The properties / methods that should not be exposed to the component template.\n     *\n     * @var array\n     */\n    protected $except = ['type'];\n\n    /**\n     * Create the component instance.\n     */\n    public function __construct(\n        public string $type,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Cashier Migration Files\nDESCRIPTION: Artisan command to publish the Cashier migration files to your application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --tag=\"cashier-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Password Reset URL in Laravel\nDESCRIPTION: Shows how to customize the password reset link URL using the createUrlUsing method in the service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passwords.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Notifications\\ResetPassword;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    ResetPassword::createUrlUsing(function (User $user, string $token) {\n        return 'https://example.com/reset-password?token='.$token;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Subscription Status in Laravel Blade\nDESCRIPTION: Examples of how to check a user's subscription status in Laravel Blade templates using methods provided by Cashier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n@if ($user->subscribed())\n    <p>You are subscribed.</p>\n@endif\n\n@if ($user->subscribedToProduct('pro_basic'))\n    <p>You are subscribed to our Basic product.</p>\n@endif\n\n@if ($user->subscribedToPrice('price_basic_monthly'))\n    <p>You are subscribed to our monthly Basic plan.</p>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Force Releasing Cache Lock in Laravel\nDESCRIPTION: Demonstrates how to forcefully release a cache lock without respecting its current owner using the forceRelease method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nCache::lock('processing')->forceRelease();\n```\n\n----------------------------------------\n\nTITLE: Implementing User Preferred Locales in Laravel PHP\nDESCRIPTION: Shows how to implement the HasLocalePreference interface to use stored user locales for notifications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Translation\\HasLocalePreference;\n\nclass User extends Model implements HasLocalePreference\n{\n    /**\n     * Get the user's preferred locale.\n     */\n    public function preferredLocale(): string\n    {\n        return $this->locale;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Artisan Commands in Laravel\nDESCRIPTION: Demonstrates different ways to schedule Artisan commands using command names or class names with arguments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Console\\Commands\\SendEmailsCommand;\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('emails:send Taylor --force')->daily();\n\nSchedule::command(SendEmailsCommand::class, ['Taylor', '--force'])->daily();\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Blocking in Laravel Routes\nDESCRIPTION: Examples of implementing session blocking on routes to prevent concurrent requests from causing session data loss. Includes options for configuring lock timeout and wait time.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('/profile', function () {\n    // ...\n})->block($lockSeconds = 10, $waitSeconds = 10);\n\nRoute::post('/order', function () {\n    // ...\n})->block($lockSeconds = 10, $waitSeconds = 10);\n```\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('/profile', function () {\n    // ...\n})->block();\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Collection Response in Laravel\nDESCRIPTION: Shows how to test a JSON collection response with assertions about the collection size and first item properties.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$response\n    ->assertJson(fn (AssertableJson $json) =>\n        $json->has(3)\n            ->first(fn (AssertableJson $json) =>\n                $json->where('id', 1)\n                    ->where('name', 'Victoria Faith')\n                    ->where('email', fn (string $email) => str($email)->is('victoria@gmail.com'))\n                    ->missing('password')\n                    ->etc()\n            )\n    );\n```\n\n----------------------------------------\n\nTITLE: Testing Queue Job Dispatching with PHPUnit\nDESCRIPTION: Shows how to test queue job dispatching using Laravel's Queue facade with PHPUnit testing framework. Contains same assertions as Pest example but in PHPUnit syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_108\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse App\\Jobs\\AnotherJob;\nuse App\\Jobs\\FinalJob;\nuse App\\Jobs\\ShipOrder;\nuse Illuminate\\Support\\Facades\\Queue;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    public function test_orders_can_be_shipped(): void\n    {\n        Queue::fake();\n\n        // Perform order shipping...\n\n        // Assert that no jobs were pushed...\n        Queue::assertNothingPushed();\n\n        // Assert a job was pushed to a given queue...\n        Queue::assertPushedOn('queue-name', ShipOrder::class);\n\n        // Assert a job was pushed twice...\n        Queue::assertPushed(ShipOrder::class, 2);\n\n        // Assert a job was not pushed...\n        Queue::assertNotPushed(AnotherJob::class);\n\n        // Assert that a Closure was pushed to the queue...\n        Queue::assertClosurePushed();\n\n        // Assert the total number of jobs that were pushed...\n        Queue::assertCount(3);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Route in Laravel\nDESCRIPTION: Shows how to define a route that points to a controller method in Laravel. This example maps the /user URI to the index method of the UserController.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\UserController;\n\nRoute::get('/user', [UserController::class, 'index']);\n```\n\n----------------------------------------\n\nTITLE: File Attachment in Laravel Notifications\nDESCRIPTION: Demonstrates how to attach files to mail notifications with optional display name and MIME type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\npublic function toMail(object $notifiable): MailMessage\n{\n    return (new MailMessage)\n        ->greeting('Hello!')\n        ->attach('/path/to/file', [\n            'as' => 'name.pdf',\n            'mime' => 'application/pdf',\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution on Non-Empty Collection with `whenNotEmpty()` in PHP\nDESCRIPTION: The `whenNotEmpty()` method executes a callback when the collection is not empty. Optionally, a second callback can be provided, which will be executed if the collection is empty. Requires a Laravel Collection instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_143\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect(['michael', 'tom']);\n\n$collection->whenNotEmpty(function (Collection $collection) {\n    return $collection->push('adam');\n});\n\n$collection->all();\n\n// ['michael', 'tom', 'adam']\n\n$collection = collect();\n\n$collection->whenNotEmpty(function (Collection $collection) {\n    return $collection->push('adam');\n});\n\n$collection->all();\n\n// []\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect();\n\n$collection->whenNotEmpty(function (Collection $collection) {\n    return $collection->push('adam');\n}, function (Collection $collection) {\n    return $collection->push('taylor');\n});\n\n$collection->all();\n\n// ['taylor']\n```\n\n----------------------------------------\n\nTITLE: Alias for contains Using some in Laravel Collections - PHP\nDESCRIPTION: Indicates that the some method acts as an alias for the contains method on collections. It is provided for semantic clarity or convenience but functions identically to contains for checking presence of items.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_114\n\n\n\n----------------------------------------\n\nTITLE: Checking for Form Errors with Precognition\nDESCRIPTION: HTML template using hasErrors property to check if a form has any validation errors.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<template x-if=\"form.hasErrors\">\n    <div><!-- ... --></div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Deleting Models with Query Conditions in Laravel Eloquent\nDESCRIPTION: Demonstrates performing mass deletion operations by building an Eloquent query with conditions to target specific models.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$deleted = Flight::where('active', 0)->delete();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Grant\nDESCRIPTION: Code to enable implicit grant functionality in the application's service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\npublic function boot(): void\n{\n    Passport::enableImplicitGrant();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Jobs to Fail on Timeout\nDESCRIPTION: Setting the $failOnTimeout property to true in a Laravel job class to mark the job as failed when it exceeds its timeout limit rather than just releasing it back to the queue.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Indicate if the job should be marked as failed on timeout.\n *\n * @var bool\n */\npublic $failOnTimeout = true;\n```\n\n----------------------------------------\n\nTITLE: Defining a Route to a Controller Method\nDESCRIPTION: Example of how to define a Laravel route that points to a specific controller method. This connects the /user/{id} URL pattern to the show method in the UserController.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\UserController;\n\nRoute::get('/user/{id}', [UserController::class, 'show']);\n```\n\n----------------------------------------\n\nTITLE: Ensuring Element Types with ensure Method in PHP\nDESCRIPTION: The ensure method verifies that all elements in a collection are instances of a given class or primitive types like string, int, float, bool, or array. If any element fails the check, an UnexpectedValueException is thrown. It accepts a Laravel Collection and a single type or array of types. Note this check does not prevent adding elements of different types later.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nreturn $collection->ensure(User::class);\n\nreturn $collection->ensure([User::class, Customer::class]);\n\nreturn $collection->ensure('int');\n```\n\n----------------------------------------\n\nTITLE: Partitioning Array with `Arr::partition()` - PHP\nDESCRIPTION: This snippet illustrates using `Arr::partition()` to separate an array into two arrays based on a truth test. One array contains elements that pass the test and the other contains elements that fail the test. PHP array destructuring is used to assign the results.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Support\\Arr;\n\n$numbers = [1, 2, 3, 4, 5, 6];\n\n[$underThree, $equalOrAboveThree] = Arr::partition($numbers, function (int $i) {\n    return $i < 3;\n});\n\ndump($underThree);\n\n// [1, 2]\n\ndump($equalOrAboveThree);\n\n// [3, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Processing Jobs for Limited Time with Laravel Queue Worker\nDESCRIPTION: Artisan command to run a queue worker for a specific duration (3600 seconds or 1 hour) before exiting. Helps manage memory usage by ensuring workers are regularly restarted.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_74\n\nLANGUAGE: shell\nCODE:\n```\n# Process jobs for one hour and then exit...\nphp artisan queue:work --max-time=3600\n```\n\n----------------------------------------\n\nTITLE: Inspecting Detailed Gate Responses\nDESCRIPTION: Shows how to use the Gate::inspect method to get the full authorization response from a gate, including the error message.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$response = Gate::inspect('edit-settings');\n\nif ($response->allowed()) {\n    // The action is authorized...\n} else {\n    echo $response->message();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spies in Laravel Tests\nDESCRIPTION: Shows how to use spies to record interactions between the spy and the code being tested.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service;\n\n$spy = $this->spy(Service::class);\n\n// ...\n\n$spy->shouldHaveReceived('process');\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with avg() in PHP\nDESCRIPTION: The `avg` method calculates the average value of a given key within a collection of arrays, or the average of the values in a simple collection. It returns a numeric value representing the average.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$average = collect([\n    ['foo' => 10],\n    ['foo' => 10],\n    ['foo' => 20],\n    ['foo' => 40]\n])->avg('foo');\n\n// 20\n\n$average = collect([1, 1, 2, 4])->avg();\n\n// 2\n```\n\n----------------------------------------\n\nTITLE: Registering Event Subscribers in Laravel Service Providers\nDESCRIPTION: Demonstrates how to register event subscribers in a Laravel service provider's boot method using the Event facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\Listeners\\UserEventSubscriber;\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Event::subscribe(UserEventSubscriber::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating ULIDs with Str::ulid in Laravel\nDESCRIPTION: The Str::ulid method generates a ULID (Universally Unique Lexicographically Sortable Identifier), which is a compact, time-ordered unique identifier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nreturn (string) Str::ulid();\n\n// 01gd6r360bp37zj17nxb55yv40\n```\n\n----------------------------------------\n\nTITLE: Using Custom Column for Unique Validation\nDESCRIPTION: Example showing how to check uniqueness against a column with a different name than the attribute being validated. This allows validating one field against a differently named database column.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_64\n\nLANGUAGE: php\nCODE:\n```\nRule::unique('users', 'email_address')->ignore($user->id)\n```\n\n----------------------------------------\n\nTITLE: ULID Validation with Str::isUlid in PHP\nDESCRIPTION: Shows how to use Str::isUlid to determine if a given string is a valid ULID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$isUlid = Str::isUlid('01gd6r360bp37zj17nxb55yv40');\n\n// true\n\n$isUlid = Str::isUlid('laravel');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Passport Middleware in Laravel\nDESCRIPTION: This PHP snippet demonstrates how to protect routes using the auth:api middleware provided by Laravel Passport.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/user', function () {\n    // ...\n})->middleware('auth:api');\n```\n\n----------------------------------------\n\nTITLE: Session Value Checking in Blade\nDESCRIPTION: Using @session directive to check and display session values\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n@session('status')\n    <div class=\"p-4 bg-green-100\">\n        {{ $value }}\n    </div>\n@endsession\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Keys\nDESCRIPTION: The `modelKeys` method returns an array of the primary keys for all models within the collection. The output will be an array of integers, representing the primary key values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users->modelKeys();\n\n// [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Adding Context in Laravel Middleware (PHP)\nDESCRIPTION: This snippet demonstrates how to add context information like URL and trace ID in a Laravel middleware. It uses the Context facade to add data that will be automatically appended to log entries.\nSOURCE: https://github.com/laravel/docs/blob/12.x/context.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Context;\nuse Illuminate\\Support\\Str;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AddContext\n{\n    /**\n     * Handle an incoming request.\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        Context::add('url', $request->url());\n        Context::add('trace_id', Str::uuid()->toString());\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Model Observer Using Artisan Command\nDESCRIPTION: Demonstrates how to generate a new model observer class using Laravel's artisan command line tool. The command creates an observer class for the User model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_77\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:observer UserObserver --model=User\n```\n\n----------------------------------------\n\nTITLE: Overriding the resolveRouteBinding Method on Eloquent Model\nDESCRIPTION: This snippet shows how to override the resolveRouteBinding method on an Eloquent model to customize how the model is retrieved when bound to a route parameter. This method binds a route parameter to a model by name rather than ID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Retrieve the model for a bound value.\n *\n * @param  mixed  $value\n * @param  string|null  $field\n * @return \\Illuminate\\Database\\Eloquent\\Model|null\n */\npublic function resolveRouteBinding($value, $field = null)\n{\n    return $this->where('name', $value)->firstOrFail();\n}\n```\n\n----------------------------------------\n\nTITLE: User Profile Controller with Logging\nDESCRIPTION: Example of logging in a Laravel controller action showing user profile access.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\View\\View;\n\nclass UserController extends Controller\n{\n    /**\n     * Show the profile for the given user.\n     */\n    public function show(string $id): View\n    {\n        Log::info('Showing the user profile for user: {id}', ['id' => $id]);\n\n        return view('user.profile', [\n            'user' => User::findOrFail($id)\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Mass Assignment Exceptions for Development in Laravel\nDESCRIPTION: Shows how to configure Laravel to throw exceptions when attempting to fill attributes not in the $fillable array during development, helping to catch potential issues early.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Model::preventSilentlyDiscardingAttributes($this->app->isLocal());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller Middleware via HasMiddleware Interface\nDESCRIPTION: How to define middleware directly within a controller class by implementing the HasMiddleware interface. This approach allows specifying middleware with options like 'only' and 'except'.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Routing\\Controllers\\HasMiddleware;\nuse Illuminate\\Routing\\Controllers\\Middleware;\n\nclass UserController extends Controller implements HasMiddleware\n{\n    /**\n     * Get the middleware that should be assigned to the controller.\n     */\n    public static function middleware(): array\n    {\n        return [\n            'auth',\n            new Middleware('log', only: ['index']),\n            new Middleware('subscribed', except: ['store']),\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Postmark Driver Dependencies for Laravel\nDESCRIPTION: Command to install Symfony's Postmark Mailer transport via Composer for use with Laravel's mail system.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/postmark-mailer symfony/http-client\n```\n\n----------------------------------------\n\nTITLE: Advanced Folder Syncing Options in Homestead YAML\nDESCRIPTION: YAML configuration example for setting advanced synced folder options in Homestead, including rsync arguments and exclusions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfolders:\n    - map: ~/code/project1\n      to: /home/vagrant/project1\n      type: \"rsync\"\n      options:\n          rsync__args: [\"--verbose\", \"--archive\", \"--delete\", \"-zz\"]\n          rsync__exclude: [\"node_modules\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying Invoice Information in Laravel Blade\nDESCRIPTION: This snippet demonstrates how to display invoice information in a Blade template, including formatting dates and totals, and providing download links.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_108\n\nLANGUAGE: php\nCODE:\n```\n<table>\n    @foreach ($invoices as $invoice)\n        <tr>\n            <td>{{ $invoice->date()->toFormattedDateString() }}</td>\n            <td>{{ $invoice->total() }}</td>\n            <td><a href=\"/user/invoice/{{ $invoice->id }}\">Download</a></td>\n        </tr>\n    @endforeach\n</table>\n```\n\n----------------------------------------\n\nTITLE: Additional Swoole Configuration Options\nDESCRIPTION: PHP configuration array for additional Swoole options in the Octane configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'swoole' => [\n    'options' => [\n        'log_file' => storage_path('logs/swoole_http.log'),\n        'package_max_length' => 10 * 1024 * 1024,\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Status with Alpine.js and Precognition\nDESCRIPTION: HTML template for showing validation status using Precognition's validating property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<template x-if=\"form.validating\">\n    <div>Validating...</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pause Function in Laravel Prompts\nDESCRIPTION: Shows how to use the pause function to display informational text and wait for user confirmation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\pause;\n\npause('Press ENTER to continue.');\n```\n\n----------------------------------------\n\nTITLE: Converting a String to Base64 in Laravel\nDESCRIPTION: The toBase64 method converts the given string to its Base64 representation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_146\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$base64 = Str::of('Laravel')->toBase64();\n\n// TGFyYXZlbA==\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Access Scopes in Laravel Socialite\nDESCRIPTION: Example showing how to specify access scopes for the OAuth authentication request, either adding to existing scopes or setting entirely new scopes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Socialite\\Facades\\Socialite;\n\nreturn Socialite::driver('github')\n    ->scopes(['read:user', 'public_repo'])\n    ->redirect();\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse of Many-to-Many Polymorphic Relationship in PHP\nDESCRIPTION: This snippet shows how to define the inverse of a many-to-many polymorphic relationship using the morphedByMany method in the Tag model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;\n\nclass Tag extends Model\n{\n    /**\n     * Get all of the posts that are assigned this tag.\n     */\n    public function posts(): MorphToMany\n    {\n        return $this->morphedByMany(Post::class, 'taggable');\n    }\n\n    /**\n     * Get all of the videos that are assigned this tag.\n     */\n    public function videos(): MorphToMany\n    {\n        return $this->morphedByMany(Video::class, 'taggable');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Immediate Plan Change with Invoice in Laravel Paddle\nDESCRIPTION: Method to swap a user's subscription plan and immediately invoice them, rather than waiting for the next billing cycle.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->subscription()->swapAndInvoice($premium = 'pri_456');\n```\n\n----------------------------------------\n\nTITLE: Inspecting the Current Route in Laravel\nDESCRIPTION: Demonstrates how to inspect the current route in Laravel, specifically checking if the current request was routed to a given named route using the 'named' method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Handle an incoming request.\n *\n * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n */\npublic function handle(Request $request, Closure $next): Response\n{\n    if ($request->route()->named('profile')) {\n        // ...\n    }\n\n    return $next($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing afterCommit in Laravel Mailable Constructor\nDESCRIPTION: Shows how to call the afterCommit method from a mailable's constructor to ensure it's dispatched after database transactions are committed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Mail;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Mail\\Mailable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass OrderShipped extends Mailable implements ShouldQueue\n{\n    use Queueable, SerializesModels;\n\n    /**\n     * Create a new message instance.\n     */\n    public function __construct()\n    {\n        $this->afterCommit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDv7 with Str::uuid7 in Laravel\nDESCRIPTION: The Str::uuid7 method generates a time-ordered UUID (version 7), which combines uniqueness with chronological ordering.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_67\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nreturn (string) Str::uuid7();\n```\n\n----------------------------------------\n\nTITLE: Sorting Collections by Keys in Descending Order with sortKeysDesc in Laravel Collections - PHP\nDESCRIPTION: Indicates that sortKeysDesc sorts the collection keys in descending order, mirroring sortKeys but reversing the order. It preserves the association between keys and values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_120\n\n\n\n----------------------------------------\n\nTITLE: Translating Text with Pluralization using trans_choice() in Laravel\nDESCRIPTION: The trans_choice function translates text with pluralization support, selecting the appropriate translation based on a count value.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_76\n\nLANGUAGE: php\nCODE:\n```\necho trans_choice('messages.notifications', $unreadCount);\n```\n\n----------------------------------------\n\nTITLE: Resolving User Data for Aggregates\nDESCRIPTION: Shows how to resolve user records from aggregate keys and map them to a combined result set with user details and aggregate values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$aggregates = $this->aggregate('user_sale', ['sum', 'count']);\n\n$users = Pulse::resolveUsers($aggregates->pluck('key'));\n\nreturn view('livewire.pulse.top-sellers', [\n    'sellers' => $aggregates->map(fn ($aggregate) => (object) [\n        'user' => $users->find($aggregate->key),\n        'sum' => $aggregate->sum,\n        'count' => $aggregate->count,\n    ])\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB TTL-based Batch Pruning in Laravel\nDESCRIPTION: PHP configuration for enabling automatic batch record pruning in DynamoDB using its native TTL functionality. It specifies the TTL attribute name and duration after which records should be removed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n'batching' => [\n    'driver' => env('QUEUE_FAILED_DRIVER', 'dynamodb'),\n    'key' => env('AWS_ACCESS_KEY_ID'),\n    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n    'table' => 'job_batches',\n    'ttl_attribute' => 'ttl',\n    'ttl' => 60 * 60 * 24 * 7, // 7 days...\n],\n```\n\n----------------------------------------\n\nTITLE: Creating Nullable UUID Polymorphic Columns\nDESCRIPTION: Creates nullable columns for UUID-based polymorphic relationships.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$table->nullableUuidMorphs('taggable');\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookie Encryption for Specific Cookies in Laravel\nDESCRIPTION: Demonstrates how to disable encryption for a subset of cookies in the application's bootstrap file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->encryptCookies(except: [\n        'cookie_name',\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting a Payment Method in Laravel Cashier\nDESCRIPTION: Demonstrates how to delete a payment method instance using the delete method in Laravel Cashier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$paymentMethod->delete();\n```\n\n----------------------------------------\n\nTITLE: Docker Compose for FrankenPHP Development\nDESCRIPTION: Docker Compose configuration for running a Laravel Octane application with FrankenPHP during development.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# compose.yaml\nservices:\n  frankenphp:\n    build:\n      context: .\n    entrypoint: php artisan octane:frankenphp --workers=1 --max-requests=1\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - .:/app\n```\n\n----------------------------------------\n\nTITLE: Testing Queue Job Dispatching with Pest\nDESCRIPTION: Shows how to test queue job dispatching using Laravel's Queue facade with Pest testing framework. Demonstrates various assertions for verifying job pushing behavior.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_107\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Jobs\\AnotherJob;\nuse App\\Jobs\\FinalJob;\nuse App\\Jobs\\ShipOrder;\nuse Illuminate\\Support\\Facades\\Queue;\n\ntest('orders can be shipped', function () {\n    Queue::fake();\n\n    // Perform order shipping...\n\n    // Assert that no jobs were pushed...\n    Queue::assertNothingPushed();\n\n    // Assert a job was pushed to a given queue...\n    Queue::assertPushedOn('queue-name', ShipOrder::class);\n\n    // Assert a job was pushed twice...\n    Queue::assertPushed(ShipOrder::class, 2);\n\n    // Assert a job was not pushed...\n    Queue::assertNotPushed(AnotherJob::class);\n\n    // Assert that a Closure was pushed to the queue...\n    Queue::assertClosurePushed();\n\n    // Assert the total number of jobs that were pushed...\n    Queue::assertCount(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Local Scopes in Queries\nDESCRIPTION: Shows how to utilize local scopes in model queries, including chaining multiple scopes and using the orWhere operator.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_74\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = User::popular()->active()->orderBy('created_at')->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = User::popular()->orWhere(function (Builder $query) {\n    $query->active();\n})->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = User::popular()->orWhere->active()->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring MailerSend Environment Variables in Laravel\nDESCRIPTION: Example of setting MailerSend-specific environment variables in Laravel's .env file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nMAIL_MAILER=mailersend\nMAIL_FROM_ADDRESS=app@yourdomain.com\nMAIL_FROM_NAME=\"App Name\"\n\nMAILERSEND_API_KEY=your-api-key\n```\n\n----------------------------------------\n\nTITLE: Supplying Additional Context to Gates\nDESCRIPTION: Shows how to pass additional context parameters to a gate by providing an array as the second argument to the authorization methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Category;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::define('create-post', function (User $user, Category $category, bool $pinned) {\n    if (! $user->canPublishToGroup($category->group)) {\n        return false;\n    } elseif ($pinned && ! $user->canPinPosts()) {\n        return false;\n    }\n\n    return true;\n});\n\nif (Gate::check('create-post', [$category, $pinned])) {\n    // The user can create the post...\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSP Nonce with Blade Routes\nDESCRIPTION: Example of using CSP nonce with Ziggy route directive in Blade templates.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n@routes(nonce: Vite::cspNonce())\n```\n\n----------------------------------------\n\nTITLE: Setting Trial Period with DateTime Instance in Laravel Cashier\nDESCRIPTION: This snippet shows how to create a subscription with a trial period ending at a specific date and time using the trialUntil method with a Carbon datetime instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_88\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\Carbon;\n\n$user->newSubscription('default', 'price_monthly')\n    ->trialUntil(Carbon::now()->addDays(10))\n    ->create($paymentMethod);\n```\n\n----------------------------------------\n\nTITLE: Updating Eloquent Models from UUIDv4 to UUIDv7 in Laravel 12\nDESCRIPTION: This code shows how to modify a model that uses UUIDs to continue using ordered UUIDv4 strings in Laravel 12, where HasUuids trait now defaults to UUIDv7.\nSOURCE: https://github.com/laravel/docs/blob/12.x/upgrade.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Concerns\\HasUuids; // [tl! remove]\nuse Illuminate\\Database\\Eloquent\\Concerns\\HasVersion4Uuids as HasUuids; // [tl! add]\n```\n\n----------------------------------------\n\nTITLE: Syncing Tax Rates for Existing Subscriptions in Laravel Cashier\nDESCRIPTION: This code shows how to sync tax rates for existing subscriptions when the taxRates method is updated in Laravel Cashier. It uses the syncTaxRates method on the subscription instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_82\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->syncTaxRates();\n```\n\n----------------------------------------\n\nTITLE: Conditional Queue Processing in Laravel Event Listeners\nDESCRIPTION: Shows how to implement conditional queueing using the shouldQueue method based on runtime conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\OrderCreated;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\n\nclass RewardGiftCard implements ShouldQueue\n{\n    /**\n     * Reward a gift card to the customer.\n     */\n    public function handle(OrderCreated $event): void\n    {\n        // ...\n    }\n\n    /**\n     * Determine whether the listener should be queued.\n     */\n    public function shouldQueue(OrderCreated $event): bool\n    {\n        return $event->order->subtotal >= 5000;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting All Scopes Token\nDESCRIPTION: Example of requesting an access token with all available scopes using the * scope parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\n$response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n    'grant_type' => 'password',\n    'client_id' => 'client-id',\n    'client_secret' => 'client-secret',\n    'username' => 'taylor@laravel.com',\n    'password' => 'my-password',\n    'scope' => '*',\n]);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in Laravel Controllers\nDESCRIPTION: Shows how to dispatch events from a Laravel controller action. Includes examples of conditional event dispatching using dispatchIf and dispatchUnless methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Events\\OrderShipped;\nuse App\\Models\\Order;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass OrderShipmentController extends Controller\n{\n    /**\n     * Ship the given order.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $order = Order::findOrFail($request->order_id);\n\n        // Order shipment logic...\n\n        OrderShipped::dispatch($order);\n\n        return redirect('/orders');\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nOrderShipped::dispatchIf($condition, $order);\n\nOrderShipped::dispatchUnless($condition, $order);\n```\n\n----------------------------------------\n\nTITLE: Checking Table/Column Existence in Laravel\nDESCRIPTION: Methods to check for the existence of tables, columns, and indexes in the database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nif (Schema::hasTable('users')) {\n    // The \"users\" table exists...\n}\n\nif (Schema::hasColumn('users', 'email')) {\n    // The \"users\" table exists and has an \"email\" column...\n}\n\nif (Schema::hasIndex('users', ['email'], 'unique')) {\n    // The \"users\" table exists and has a unique index on the \"email\" column...\n}\n```\n\n----------------------------------------\n\nTITLE: Laravel Contract Interface Mapping Table\nDESCRIPTION: A markdown table that maps Laravel contract interfaces to their corresponding facade bindings. Shows the relationships between interface classes and their facade access points.\nSOURCE: https://github.com/laravel/docs/blob/12.x/contracts.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| [Illuminate\\Contracts\\Translation\\Translator](https://github.com/illuminate/contracts/blob/{{version}}/Translation/Translator.php) | `Lang` |\n| [Illuminate\\Contracts\\Validation\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/Validation/Factory.php) | `Validator` |\n| [Illuminate\\Contracts\\Validation\\ValidatesWhenResolved](https://github.com/illuminate/contracts/blob/{{version}}/Validation/ValidatesWhenResolved.php) | &nbsp; |\n| [Illuminate\\Contracts\\Validation\\ValidationRule](https://github.com/illuminate/contracts/blob/{{version}}/Validation/ValidationRule.php) | &nbsp; |\n| [Illuminate\\Contracts\\Validation\\Validator](https://github.com/illuminate/contracts/blob/{{version}}/Validation/Validator.php) | `Validator::make()` |\n| [Illuminate\\Contracts\\View\\Engine](https://github.com/illuminate/contracts/blob/{{version}}/View/Engine.php) | &nbsp; |\n| [Illuminate\\Contracts\\View\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/View/Factory.php) | `View` |\n| [Illuminate\\Contracts\\View\\View](https://github.com/illuminate/contracts/blob/{{version}}/View/View.php) | `View::make()` |\n```\n\n----------------------------------------\n\nTITLE: Using chunk() in Blade Views\nDESCRIPTION: Demonstrates using the `chunk` method within a Blade view to iterate over collection chunks, often useful for creating grid layouts like those in Bootstrap. This example groups products into rows of three.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n@foreach ($products->chunk(3) as $chunk)\n    <div class=\"row\">\n        @foreach ($chunk as $product)\n            <div class=\"col-xs-4\">{{ $product->name }}</div>\n        @endforeach\n    </div>\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription Middleware in Laravel\nDESCRIPTION: Example of a Laravel middleware that checks if a user is subscribed before allowing access to a route.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass Subscribed\n{\n    /**\n     * Handle an incoming request.\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        if (! $request->user()?->subscribed()) {\n            // Redirect user to billing page and ask them to subscribe...\n            return redirect('/subscribe');\n        }\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Password Grant in Laravel ServiceProvider\nDESCRIPTION: Code to enable password grant functionality in the application's AppServiceProvider boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Passport::enablePasswordGrant();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unit Tests with Artisan in Laravel\nDESCRIPTION: Creates a new test case in the tests/Unit directory using Laravel's Artisan command-line tool with the --unit flag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:test UserTest --unit\n```\n\n----------------------------------------\n\nTITLE: Refreshing Model Instances in Laravel\nDESCRIPTION: Shows how to refresh model instances with fresh data from the database using fresh and refresh methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$flight = Flight::where('number', 'FR 900')->first();\n\n$freshFlight = $flight->fresh();\n\n$flight = Flight::where('number', 'FR 900')->first();\n\n$flight->number = 'FR 456';\n\n$flight->refresh();\n\n$flight->number; // \"FR 900\"\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Nested MorphTo Relationships in PHP\nDESCRIPTION: Demonstrates how to use the loadMorph method to eager load nested relationships on a morphTo relationship for different model types.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_94\n\nLANGUAGE: php\nCODE:\n```\n$activities = ActivityFeed::with('parentable')\n    ->get()\n    ->loadMorph('parentable', [\n        Event::class => ['calendar'],\n        Photo::class => ['tags'],\n        Post::class => ['author'],\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Cached Values in Laravel\nDESCRIPTION: Methods for incrementing and decrementing numeric values stored in the cache, with optional amount parameters for adjusting by specific values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// Initialize the value if it does not exist...\nCache::add('key', 0, now()->addHours(4));\n\n// Increment or decrement the value...\nCache::increment('key');\nCache::increment('key', $amount);\nCache::decrement('key');\nCache::decrement('key', $amount);\n```\n\n----------------------------------------\n\nTITLE: Creating Flash Data for Current Request Only in Laravel\nDESCRIPTION: Method to create flash data that's available only for the current request using the now() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$request->session()->now('status', 'Task was successful!');\n```\n\n----------------------------------------\n\nTITLE: Filtering Array First Element with `Arr::first()` - PHP\nDESCRIPTION: This snippet demonstrates how to use the `Arr::first()` method in Laravel to retrieve the first element in an array that satisfies a given condition. It accepts an array and a callback function as arguments. The callback function defines the condition for filtering the array elements. An optional default value can be provided if no element satisfies the condition.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [100, 200, 300];\n\n$first = Arr::first($array, function (int $value, int $key) {\n    return $value >= 150;\n});\n\n// 200\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Post from Comment in Laravel\nDESCRIPTION: Shows how to retrieve a comment's parent post using the dynamic relationship property\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Comment;\n\n$comment = Comment::find(1);\n\nreturn $comment->post->title;\n```\n\n----------------------------------------\n\nTITLE: Converting a String to Uppercase in Laravel\nDESCRIPTION: The upper method converts the given string to uppercase.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_155\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$adjusted = Str::of('laravel')->upper();\n\n// LARAVEL\n```\n\n----------------------------------------\n\nTITLE: Managing Subscription Quantities in Laravel Paddle\nDESCRIPTION: Methods to increment, decrement, or set specific quantities for a subscription. This is useful for per-seat or per-unit pricing models.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->subscription()->incrementQuantity();\n\n// Add five to the subscription's current quantity...\n$user->subscription()->incrementQuantity(5);\n\n$user->subscription()->decrementQuantity();\n\n// Subtract five from the subscription's current quantity...\n$user->subscription()->decrementQuantity(5);\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection using whereNotBetween - PHP\nDESCRIPTION: Demonstrates how to filter a Laravel Collection to exclude items where a specified key's value falls within a given numerical range. It uses the `whereNotBetween` method, passing the key name and an array representing the lower and upper bounds (inclusive). The snippet shows the initial collection and the resulting collection after filtering.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_148\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 80],\n    ['product' => 'Bookcase', 'price' => 150],\n    ['product' => 'Pencil', 'price' => 30],\n    ['product' => 'Door', 'price' => 100],\n]);\n\n$filtered = $collection->whereNotBetween('price', [100, 200]);\n\n$filtered->all();\n\n/*\n    [\n        ['product' => 'Chair', 'price' => 80],\n        ['product' => 'Pencil', 'price' => 30],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Finding models not present in collection\nDESCRIPTION: The `diff` method returns a collection of models that are not present in the provided collection. This is done by comparing the current collection to a collection generated from a database query using `User::whereIn` method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = $users->diff(User::whereIn('id', [1, 2, 3])->get());\n```\n\n----------------------------------------\n\nTITLE: Configuring Paddle Webhook URL in Laravel\nDESCRIPTION: Shows how to override the default Cashier webhook URL by defining the CASHIER_WEBHOOK environment variable in the .env file. This is necessary when you need to customize the webhook endpoint that Paddle will send notifications to.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_72\n\nLANGUAGE: ini\nCODE:\n```\nCASHIER_WEBHOOK=https://example.com/my-paddle-webhook-url\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Collection with Artisan in Laravel\nDESCRIPTION: Demonstrates two ways to generate a resource collection using the Artisan command, either with the --collection flag or by including 'Collection' in the resource name.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:resource User --collection\n\nphp artisan make:resource UserCollection\n```\n\n----------------------------------------\n\nTITLE: Testing Notifications in Laravel PHP using Pest\nDESCRIPTION: Demonstrates how to test notification sending using the Notification facade's fake method in a Pest test.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Notifications\\OrderShipped;\nuse Illuminate\\Support\\Facades\\Notification;\n\ntest('orders can be shipped', function () {\n    Notification::fake();\n\n    // Perform order shipping...\n\n    // Assert that no notifications were sent...\n    Notification::assertNothingSent();\n\n    // Assert a notification was sent to the given users...\n    Notification::assertSentTo(\n        [$user], OrderShipped::class\n    );\n\n    // Assert a notification was not sent...\n    Notification::assertNotSentTo(\n        [$user], AnotherNotification::class\n    );\n\n    // Assert that a given number of notifications were sent...\n    Notification::assertCount(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Intersecting Collections of Models\nDESCRIPTION: The `intersect` method returns models that are present in *both* the current collection and the provided collection.  This snippet takes the intersection of two collections, created from a database query.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = $users->intersect(User::whereIn('id', [1, 2, 3])->get());\n```\n\n----------------------------------------\n\nTITLE: Customizing Route Key for Eloquent Models in Laravel\nDESCRIPTION: Shows how to customize the value used for route parameters when redirecting with Eloquent models by overriding the getRouteKey method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the value of the model's route key.\n */\npublic function getRouteKey(): mixed\n{\n    return $this->slug;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Basic Laravel Queue Worker Command\nDESCRIPTION: Artisan command to start a Laravel queue worker that processes jobs from the queue. Once started, it continues running until manually stopped or the terminal is closed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_66\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work\n```\n\n----------------------------------------\n\nTITLE: Flushing All Failed Jobs in Laravel\nDESCRIPTION: Command to delete all failed jobs from the failed_jobs table at once, essentially clearing the table of all records.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_95\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:flush\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Event Handling\nDESCRIPTION: Demonstrates how to set up event handling in Eloquent models using both event classes and closures.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse App\\Events\\UserDeleted;\nuse App\\Events\\UserSaved;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\n\nclass User extends Authenticatable\n{\n    use Notifiable;\n\n    /**\n     * The event map for the model.\n     *\n     * @var array<string, string>\n     */\n    protected $dispatchesEvents = [\n        'saved' => UserSaved::class,\n        'deleted' => UserDeleted::class,\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * The \"booted\" method of the model.\n     */\n    protected static function booted(): void\n    {\n        static::created(function (User $user) {\n            // ...\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Foreign Key Constraints in Laravel Migrations\nDESCRIPTION: Shows methods for enabling, disabling, or temporarily disabling foreign key constraints in Laravel migrations. Useful for bulk operations or when loading seed data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_66\n\nLANGUAGE: php\nCODE:\n```\nSchema::enableForeignKeyConstraints();\n\nSchema::disableForeignKeyConstraints();\n\nSchema::withoutForeignKeyConstraints(function () {\n    // Constraints disabled within this closure...\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Laravel Facades in Tests\nDESCRIPTION: Demonstrates how to mock a Laravel facade call in a controller test using the expects method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Cache;\n\ntest('get index', function () {\n    Cache::expects('get')\n        ->with('key')\n        ->andReturn('value');\n\n    $response = $this->get('/users');\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Item Existence in Laravel Cache\nDESCRIPTION: Using the has method to check if an item exists in the cache before attempting to use it, which also returns false if the value is null.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nif (Cache::has('key')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Closure Event Listeners in Laravel\nDESCRIPTION: Example of registering a closure (anonymous function) as an event listener in a service provider. This approach is useful for simple listeners that don't warrant creating a separate class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Events\\PodcastProcessed;\nuse Illuminate\\Support\\Facades\\Event;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Event::listen(function (PodcastProcessed $event) {\n        // ...\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation with exclude_if Rule\nDESCRIPTION: Example demonstrating how to skip validation for certain fields based on the value of another field using the 'exclude_if' rule. This helps create conditional validation logic based on form data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_70\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\n\n$validator = Validator::make($data, [\n    'has_appointment' => 'required|boolean',\n    'appointment_date' => 'exclude_if:has_appointment,false|required|date',\n    'doctor_name' => 'exclude_if:has_appointment,false|required|string',\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Conditional Validation Rules in Laravel\nDESCRIPTION: This snippet demonstrates how to add conditional validation rules for multiple fields at once using the 'sometimes' method in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n$validator->sometimes(['reason', 'cost'], 'required', function (Fluent $input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Mail in Laravel Controller\nDESCRIPTION: Example of sending mail from a Laravel controller with recipient specification and order details\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Mail\\OrderShipped;\nuse App\\Models\\Order;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Mail;\n\nclass OrderShipmentController extends Controller\n{\n    /**\n     * Ship the given order.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $order = Order::findOrFail($request->order_id);\n\n        // Ship the order...\n\n        Mail::to($request->user())->send(new OrderShipped($order));\n\n        return redirect('/orders');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Input Values with Dot Notation in Laravel\nDESCRIPTION: Working with form inputs that contain arrays by using dot notation to access nested values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$name = $request->input('products.0.name');\n\n$names = $request->input('products.*.name');\n```\n\n----------------------------------------\n\nTITLE: Default Model with BelongsTo Relationship in Laravel\nDESCRIPTION: Demonstrates how to define a default model that will be returned when a relationship is null\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the author of the post.\n */\npublic function user(): BelongsTo\n{\n    return $this->belongsTo(User::class)->withDefault();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uploaded File Information in Laravel\nDESCRIPTION: Demonstrates how to get original name, extension, and generate a unique name for uploaded files safely.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$file = $request->file('avatar');\n\n$name = $file->getClientOriginalName();\n$extension = $file->getClientOriginalExtension();\n\n$name = $file->hashName(); // Generate a unique, random name...\n$extension = $file->extension(); // Determine the file's extension based on the file's MIME type...\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Rate Limiting Job Middleware in Laravel\nDESCRIPTION: Implementation of a custom job middleware for rate limiting. This middleware can be reused across multiple jobs to apply consistent rate limiting logic.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Jobs\\Middleware;\n\nuse Closure;\nuse Illuminate\\Support\\Facades\\Redis;\n\nclass RateLimited\n{\n    /**\n     * Process the queued job.\n     *\n     * @param  \\Closure(object): void  $next\n     */\n    public function handle(object $job, Closure $next): void\n    {\n        Redis::throttle('key')\n            ->block(0)->allow(1)->every(5)\n            ->then(function () use ($job, $next) {\n                // Lock obtained...\n\n                $next($job);\n            }, function () use ($job) {\n                // Could not obtain lock...\n\n                $job->release(5);\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Usage for Metered Billing in Laravel Cashier\nDESCRIPTION: These snippets demonstrate how to report usage for metered billing events in Laravel Cashier. It shows reporting a single event and reporting multiple events at once.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_77\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->reportMeterEvent('emails-sent');\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->reportMeterEvent('emails-sent', quantity: 15);\n```\n\n----------------------------------------\n\nTITLE: Child Component with @aware Directive\nDESCRIPTION: Demonstrates how to access parent component data in a child component using the @aware directive to share properties.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_82\n\nLANGUAGE: blade\nCODE:\n```\n<!-- /resources/views/components/menu/item.blade.php -->\n\n@aware(['color' => 'gray'])\n\n<li {{ $attributes->merge(['class' => 'text-'.$color.'-800']) }}>\n    {{ $slot }}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Applying Discounts to Price Previews in PHP\nDESCRIPTION: Code to retrieve product prices with an applied discount using the Cashier facade and a discount ID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Paddle\\Cashier;\n\n$prices = Cashier::previewPrices(['pri_123', 'pri_456'], [\n    'discount_id' => 'dsc_123'\n]);\n```\n\n----------------------------------------\n\nTITLE: Appending Items with concat() in PHP\nDESCRIPTION: The `concat` method appends the items from a given array or collection to the end of the original collection. It numerically reindexes the keys of the appended items. For merging associative arrays while preserving keys, use the `merge` method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['John Doe']);\n\n$concatenated = $collection->concat(['Jane Doe'])->concat(['name' => 'Johnny Doe']);\n\n$concatenated->all();\n\n// ['John Doe', 'Jane Doe', 'Johnny Doe']\n```\n\n----------------------------------------\n\nTITLE: Faking Specific Events in Laravel Tests (Pest)\nDESCRIPTION: This snippet demonstrates how to fake specific events in a Laravel test using Pest. It shows how to fake the OrderCreated event while allowing other events to be dispatched normally.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\ntest('orders can be processed', function () {\n    Event::fake([\n        OrderCreated::class,\n    ]);\n\n    $order = Order::factory()->create();\n\n    Event::assertDispatched(OrderCreated::class);\n\n    // Other events are dispatched as normal...\n    $order->update([...]);\n});\n```\n\n----------------------------------------\n\nTITLE: Reporting Exceptions - Laravel PHP\nDESCRIPTION: Demonstrates reporting an exception using the `report()` helper. It accepts either an exception instance or a string message which is then converted to an exception.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_108\n\nLANGUAGE: php\nCODE:\n```\nreport($e);\n\nreport('Something went wrong.');\n```\n\n----------------------------------------\n\nTITLE: Confirming Card Setup with Stripe for Subscriptions\nDESCRIPTION: JavaScript code to confirm card setup using Stripe's confirmCardSetup method for subscription payment methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardHolderName = document.getElementById('card-holder-name');\nconst cardButton = document.getElementById('card-button');\nconst clientSecret = cardButton.dataset.secret;\n\ncardButton.addEventListener('click', async (e) => {\n    const { setupIntent, error } = await stripe.confirmCardSetup(\n        clientSecret, {\n            payment_method: {\n                card: cardElement,\n                billing_details: { name: cardHolderName.value }\n            }\n        }\n    );\n\n    if (error) {\n        // Display \"error.message\" to the user...\n    } else {\n        // The card has been verified successfully...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Cookie Handling in Laravel Requests\nDESCRIPTION: Example of retrieving encrypted and signed cookies from Laravel requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$value = $request->cookie('name');\n```\n\n----------------------------------------\n\nTITLE: Asserting Exceptions Not Reported in Laravel Tests\nDESCRIPTION: Demonstrates how to assert that certain exceptions were not reported or that no exceptions were reported at all during a request using the Exceptions facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nExceptions::assertNotReported(InvalidOrderException::class);\n\nExceptions::assertNothingReported();\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Many-to-Many Relationship in Laravel\nDESCRIPTION: Implementation of the inverse relationship on the Role model, establishing the connection back to the User model to complete the bidirectional relationship.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\n\nclass Role extends Model\n{\n    /**\n     * The users that belong to the role.\n     */\n    public function users(): BelongsToMany\n    {\n        return $this->belongsToMany(User::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Inputs Presence in Laravel\nDESCRIPTION: Verifying if all specified input fields are present in the request by passing an array to the has method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nif ($request->has(['name', 'email'])) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Any Input is Filled in Laravel\nDESCRIPTION: Verifying if any of the specified inputs are not empty strings using the anyFilled method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nif ($request->anyFilled(['name', 'email'])) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Discord Webhook Integration in Laravel Envoy\nDESCRIPTION: Demonstrates how to send notifications to Discord channels using webhook URLs after task completion in Envoy. Uses the @discord directive with a webhook URL parameter obtained from Discord server settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/envoy.md#2025-04-21_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n@finished\n    @discord('discord-webhook-url')\n@endfinished\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Availability in Laravel Pennant\nDESCRIPTION: Example of checking if a feature is active using the Feature facade in a controller method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse Laravel\\Pennant\\Feature;\n\nclass PodcastController\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index(Request $request): Response\n    {\n        return Feature::active('new-api')\n            ? $this->resolveNewApiResponse($request)\n            : $this->resolveLegacyApiResponse($request);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Route Definition for Task View\nDESCRIPTION: Shows a route definition that loads and passes data to the task view that uses the layout component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_90\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Task;\n\nRoute::get('/tasks', function () {\n    return view('tasks', ['tasks' => Task::all()]);\n});\n```\n\n----------------------------------------\n\nTITLE: Scoped Element Interactions\nDESCRIPTION: Demonstrates how to wait for and interact with elements within a specific scope using whenAvailable method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$browser->whenAvailable('.modal', function (Browser $modal) {\n    $modal->assertSee('Hello World')\n        ->press('OK');\n});\n```\n\n----------------------------------------\n\nTITLE: Generating File Downloads in Laravel\nDESCRIPTION: Demonstrates how to use the download method to generate a response that forces the user's browser to download a file. It shows basic usage and how to specify a custom filename and headers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nreturn response()->download($pathToFile);\n\nreturn response()->download($pathToFile, $name, $headers);\n```\n\n----------------------------------------\n\nTITLE: Changing React Sidebar Variant\nDESCRIPTION: Example of modifying the sidebar variant in a React starter kit from the default to an inset variant by changing the variant prop on the Sidebar component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n<Sidebar collapsible=\"icon\" variant=\"sidebar\"> [tl! remove]\n<Sidebar collapsible=\"icon\" variant=\"inset\"> [tl! add]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Intents in Laravel Cashier\nDESCRIPTION: This snippet demonstrates how to create a Stripe payment intent using the pay method on a billable model instance. It returns a client secret for frontend payment processing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_106\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/pay', function (Request $request) {\n    $payment = $request->user()->pay(\n        $request->get('amount')\n    );\n\n    return $payment->client_secret;\n});\n```\n\n----------------------------------------\n\nTITLE: Transliterating a String to ASCII in Laravel\nDESCRIPTION: The transliterate method attempts to convert a given string into its closest ASCII representation, useful for converting non-ASCII characters to their ASCII equivalents.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_148\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$email = Str::of('ⓣⓔⓢⓣ@ⓛⓐⓡⓐⓥⓔⓛ.ⓒⓞⓜ')->transliterate()\n\n// 'test@laravel.com'\n```\n\n----------------------------------------\n\nTITLE: Serializing Collections to JSON with toJson() - PHP\nDESCRIPTION: Describes the toJson method that converts a collection to a JSON serialized string, useful for data interchange formats. Input is a collection, output is a JSON string representation of the collection's data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_132\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['name' => 'Desk', 'price' => 200]);\n\n$collection->toJson();\n\n// '{\"name\":\"Desk\", \"price\":200}'\n```\n\n----------------------------------------\n\nTITLE: Conditionally Broadcasting Eloquent Model Events in Laravel\nDESCRIPTION: Customizes broadcasting behavior based on the event type using a match expression. This example prevents broadcasting of 'deleted' events while allowing all other event types to broadcast to the model and its user.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the channels that model events should broadcast on.\n *\n * @return array<string, array<int, \\Illuminate\\Broadcasting\\Channel|\\Illuminate\\Database\\Eloquent\\Model>>\n */\npublic function broadcastOn(string $event): array\n{\n    return match ($event) {\n        'deleted' => [],\n        default => [$this, $this->user],\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Input Validation Status Indicators\nDESCRIPTION: HTML templates for showing visual indicators for valid and invalid form inputs using Precognition's validation state methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<template x-if=\"form.valid('email')\">\n    <span>✅</span>\n</template>\n\n<template x-if=\"form.invalid('email')\">\n    <span>❌</span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Rate Limit Response in Laravel\nDESCRIPTION: This example shows how to define a custom response for when a rate limit is exceeded. Instead of the default 429 response, you can provide a tailored response with custom text and headers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nRateLimiter::for('global', function (Request $request) {\n    return Limit::perMinute(1000)->response(function (Request $request, array $headers) {\n        return response('Custom response...', 429, $headers);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Excerpt Omission Text in Laravel PHP\nDESCRIPTION: The excerpt method allows customizing the omission text that's prepended and appended to the truncated string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_108\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$excerpt = Str::of('This is my name')->excerpt('name', [\n    'radius' => 3,\n    'omission' => '(...) '\n]);\n\n// '(...) my name'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Passport Scopes\nDESCRIPTION: Shows how to get Scope instances for specific scope names\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nPassport::scopesFor(['place-orders', 'check-status']);\n```\n\n----------------------------------------\n\nTITLE: Installing RoadRunner with Laravel Sail\nDESCRIPTION: Commands to install Octane and RoadRunner using Laravel Sail, including setting up the RoadRunner binary.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/sail up\n\n./vendor/bin/sail composer require laravel/octane spiral/roadrunner-cli spiral/roadrunner-http\n\n./vendor/bin/sail shell\n\n# Within the Sail shell...\n./vendor/bin/rr get-binary\n```\n\n----------------------------------------\n\nTITLE: Asserting Dropdown Selection in PHP with Laravel Dusk\nDESCRIPTION: Assert the selected value in a dropdown and available options using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertSelected($field, $value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertNotSelected($field, $value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertSelectHasOptions($field, $values);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertSelectMissingOptions($field, $values);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertSelectHasOption($field, $value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertSelectMissingOption($field, $value);\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact JSON Matches in Laravel Tests\nDESCRIPTION: Shows how to use the assertExactJson method to verify that the JSON response exactly matches the expected array in both Pest and PHPUnit tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntest('asserting an exact json match', function () {\n    $response = $this->postJson('/user', ['name' => 'Sally']);\n\n    $response\n        ->assertStatus(201)\n        ->assertExactJson([\n            'created' => true,\n        ]);\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * A basic functional test example.\n     */\n    public function test_asserting_an_exact_json_match(): void\n    {\n        $response = $this->postJson('/user', ['name' => 'Sally']);\n\n        $response\n            ->assertStatus(201)\n            ->assertExactJson([\n                'created' => true,\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables in Laravel\nDESCRIPTION: Example of creating a new database table using Laravel's Schema facade with column definitions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::create('users', function (Blueprint $table) {\n    $table->id();\n    $table->string('name');\n    $table->string('email');\n    $table->timestamps();\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Last Item with `pop` in PHP\nDESCRIPTION: The `pop` method removes and returns the last item from a collection. You can pass an integer to remove multiple items from the end. The first example removes a single item. The second example removes three items from the end of the collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_91\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([1, 2, 3, 4, 5]);\n\n$collection->pop();\n\n// 5\n\n$collection->all();\n\n// [1, 2, 3, 4]\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([1, 2, 3, 4, 5]);\n\n$collection->pop(3);\n\n// collect([5, 4, 3])\n\n$collection->all();\n\n// [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Applying Subscription Middleware to Routes\nDESCRIPTION: Demonstrates how to apply the subscription middleware to protect routes that require an active subscription\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\Subscribed;\n\nRoute::get('/dashboard', function () {\n    // ...\n})->middleware([Subscribed::class]);\n```\n\n----------------------------------------\n\nTITLE: Cancelling Subscriptions in Laravel Cashier\nDESCRIPTION: These snippets demonstrate various ways to cancel subscriptions in Laravel Cashier, including immediate cancellation, cancellation at the end of the billing period, and cancellation at a specific time.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_85\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->cancel();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->cancelNow();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->cancelNowAndInvoice();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->cancelAt(\n    now()->addDays(10)\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Unique Matching Element with sole in Laravel Collections - PHP\nDESCRIPTION: Describes the sole method which returns a single element matching a truth test or key/value pair if and only if exactly one element matches; otherwise, it throws exceptions. It can also be called with no arguments to return the only element present. This method is useful when uniqueness is critical and duplicates or missing items should be handled as errors.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_113\n\nLANGUAGE: php\nCODE:\n```\ncollect([1, 2, 3, 4])->sole(function (int $value, int $key) {\n    return $value === 2;\n});\n\n// 2\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 100],\n]);\n\n$collection->sole('product', 'Chair');\n\n// ['product' => 'Chair', 'price' => 100]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n]);\n\n$collection->sole();\n\n// ['product' => 'Desk', 'price' => 200]\n```\n\n----------------------------------------\n\nTITLE: Testing Subset of Queue Jobs with Pest\nDESCRIPTION: Shows how to fake only specific jobs while allowing others to execute normally using Pest syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_110\n\nLANGUAGE: php\nCODE:\n```\ntest('orders can be shipped', function () {\n    Queue::fake([\n        ShipOrder::class,\n    ]);\n\n    // Perform order shipping...\n\n    // Assert a job was pushed twice...\n    Queue::assertPushed(ShipOrder::class, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing External Feature Definition in PHP with Laravel Pennant\nDESCRIPTION: Demonstrates how to implement a custom driver that defines features externally by implementing the DefinesFeaturesExternally interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Extensions;\n\nuse Laravel\\Pennant\\Contracts\\Driver;\nuse Laravel\\Pennant\\Contracts\\DefinesFeaturesExternally;\n\nclass FeatureFlagServiceDriver implements Driver, DefinesFeaturesExternally\n{\n    /**\n     * Get the features defined for the given scope.\n     */\n    public function definedFeaturesForScope(mixed $scope): array {}\n\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting for Authorization with PKCE in Laravel\nDESCRIPTION: This snippet demonstrates how to create a redirect request for authorization using the Authorization Code Grant with PKCE, including generating and storing the necessary state and code verifier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\n\nRoute::get('/redirect', function (Request $request) {\n    $request->session()->put('state', $state = Str::random(40));\n\n    $request->session()->put(\n        'code_verifier', $code_verifier = Str::random(128)\n    );\n\n    $codeChallenge = strtr(rtrim(\n        base64_encode(hash('sha256', $code_verifier, true))\n    , '='), '+/', '-_');\n\n    $query = http_build_query([\n        'client_id' => 'client-id',\n        'redirect_uri' => 'http://third-party-app.com/callback',\n        'response_type' => 'code',\n        'scope' => '',\n        'state' => $state,\n        'code_challenge' => $codeChallenge,\n        'code_challenge_method' => 'S256',\n        // 'prompt' => '', // \"none\", \"consent\", or \"login\"\n    ]);\n\n    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Dropbox Filesystem Driver in Laravel\nDESCRIPTION: Example of extending Laravel's filesystem with a custom Dropbox driver implementation in a service provider. Shows how to register the driver and create a new filesystem adapter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Filesystem\\FilesystemAdapter;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\ServiceProvider;\nuse League\\Flysystem\\Filesystem;\nuse Spatie\\Dropbox\\Client as DropboxClient;\nuse Spatie\\FlysystemDropbox\\DropboxAdapter;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        // ...\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Storage::extend('dropbox', function (Application $app, array $config) {\n            $adapter = new DropboxAdapter(new DropboxClient(\n                $config['authorization_token']\n            ));\n\n            return new FilesystemAdapter(\n                new Filesystem($adapter, $config),\n                $adapter,\n                $config\n            );\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Product Subscriptions with Specific Quantities in Laravel Cashier\nDESCRIPTION: Method for creating a new subscription with multiple products, specifying different quantities for each product in the subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->newSubscription('default', ['price_monthly', 'price_chat'])\n    ->quantity(5, 'price_chat')\n    ->create($paymentMethod);\n```\n\n----------------------------------------\n\nTITLE: Using Magic Methods for Factory Relationships\nDESCRIPTION: Shows how to use Laravel's magic methods for creating factory relationships with optional attribute overrides and state transformations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$user = User::factory()\n    ->hasPosts(3)\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = User::factory()\n    ->hasPosts(3, [\n        'published' => false,\n    ])\n    ->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = User::factory()\n    ->hasPosts(3, function (array $attributes, User $user) {\n        return ['user_type' => $user->type];\n    })\n    ->create();\n```\n\n----------------------------------------\n\nTITLE: Creating Soft Deletes Timestamp with Timezone\nDESCRIPTION: Adds a nullable deleted_at timestamp column with timezone support for soft deletes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$table->softDeletesTz('deleted_at', precision: 0);\n```\n\n----------------------------------------\n\nTITLE: Registering a Single Action Controller Route\nDESCRIPTION: How to define a route for a single action controller in Laravel. Instead of specifying a method, you simply pass the controller class name to the router.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\ProvisionServer;\n\nRoute::post('/server', ProvisionServer::class);\n```\n\n----------------------------------------\n\nTITLE: Including Subviews in Blade\nDESCRIPTION: Using @include directives to include subviews with conditional inclusion options\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_23\n\nLANGUAGE: blade\nCODE:\n```\n@include('view.name', ['status' => 'complete'])\n\n@includeIf('view.name', ['status' => 'complete'])\n\n@includeWhen($boolean, 'view.name', ['status' => 'complete'])\n\n@includeFirst(['custom.admin', 'admin'], ['status' => 'complete'])\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Serialization Format\nDESCRIPTION: Shows how to customize the default date serialization format for all dates in a model\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Prepare a date for array / JSON serialization.\n */\nprotected function serializeDate(DateTimeInterface $date): string\n{\n    return $date->format('Y-m-d');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chaperone Method for Automatic Parent Hydration in PHP\nDESCRIPTION: This code demonstrates how to use the chaperone method when defining a morphMany relationship to automatically hydrate parent models onto their children.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    /**\n     * Get all of the post's comments.\n     */\n    public function comments(): MorphMany\n    {\n        return $this->morphMany(Comment::class, 'commentable')->chaperone();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Attribute Value in Laravel Blade\nDESCRIPTION: Uses the get method to retrieve the value of a specific attribute from a component's attribute bag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_56\n\nLANGUAGE: blade\nCODE:\n```\n{{ $attributes->get('class') }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Relationships as Dynamic Properties\nDESCRIPTION: Shows how to access relationships as dynamic properties for lazy loading of relationship data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\nforeach ($user->posts as $post) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Found Status in Laravel Tests\nDESCRIPTION: This snippet illustrates how to assert that a response has a found (302) HTTP status code using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$response->assertFound();\n```\n\n----------------------------------------\n\nTITLE: Adding Products and Invoicing Immediately in Laravel Cashier\nDESCRIPTION: Method for adding a new price product to an existing subscription and immediately generating an invoice for the added product.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->addPriceAndInvoice('price_chat');\n```\n\n----------------------------------------\n\nTITLE: Generating Invoice PDFs in Laravel Cashier\nDESCRIPTION: This code demonstrates how to generate and download invoice PDFs using the downloadInvoice method, including customization of invoice details and filename.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_109\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/user/invoice/{invoice}', function (Request $request, string $invoiceId) {\n    return $request->user()->downloadInvoice($invoiceId, [\n        'vendor' => 'Your Company',\n        'product' => 'Your Product',\n        'street' => 'Main Str. 1',\n        'location' => '2000 Antwerp, Belgium',\n        'phone' => '+32 499 00 00 00',\n        'email' => 'info@example.com',\n        'url' => 'https://example.com',\n        'vendorVat' => 'BE123456789',\n    ], 'my-invoice');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Slot Attributes in Laravel Blade\nDESCRIPTION: Shows how to assign additional attributes like CSS classes to slots when using a component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_66\n\nLANGUAGE: xml\nCODE:\n```\n<x-card class=\"shadow-sm\">\n    <x-slot:heading class=\"font-bold\">\n        Heading\n    </x-slot>\n\n    Content\n\n    <x-slot:footer class=\"text-sm\">\n        Footer\n    </x-slot>\n</x-card>\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Caching Data with remember()\nDESCRIPTION: Demonstrates using Cache::remember() to retrieve or store data in cache with expiration time. If item doesn't exist, retrieves from database and caches it.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::remember('users', $seconds, function () {\n    return DB::table('users')->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Precognitive Requests with PHPUnit in Laravel\nDESCRIPTION: This snippet demonstrates how to test precognitive requests using PHPUnit in Laravel. It uses the `withPrecognition` helper and `assertSuccessfulPrecognition` method to validate the request and checks the user count.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\npublic function test_it_validates_registration_form_with_precognition()\n{\n    $response = $this->withPrecognition()\n        ->post('/register', [\n            'name' => 'Taylor Otwell',\n        ]);\n\n    $response->assertSuccessfulPrecognition();\n    $this->assertSame(0, User::count());\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Reporting Unless Condition - Laravel PHP\nDESCRIPTION: Demonstrates reporting an exception only when a condition is false using `report_unless()`. If `$reportingDisabled` is true, no exception is reported; otherwise, the exception is sent to the exception handler.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_110\n\nLANGUAGE: php\nCODE:\n```\nreport_unless($reportingDisabled, $e);\n\nreport_unless($reportingDisabled, 'Something went wrong.');\n```\n\n----------------------------------------\n\nTITLE: Testing for Partial Output in Laravel Console Commands\nDESCRIPTION: Shows how to test if a console command's output contains specific text using expectsOutputToContain method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ntest('console command', function () {\n    $this->artisan('example')\n        ->expectsOutputToContain('Taylor')\n        ->assertExitCode(0);\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Test a console command.\n */\npublic function test_console_command(): void\n{\n    $this->artisan('example')\n        ->expectsOutputToContain('Taylor')\n        ->assertExitCode(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Including Relationships in Laravel Resource\nDESCRIPTION: Demonstrates how to include related resources (blog posts) in the API resource response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Resources\\PostResource;\nuse Illuminate\\Http\\Request;\n\n/**\n * Transform the resource into an array.\n *\n * @return array<string, mixed>\n */\npublic function toArray(Request $request): array\n{\n    return [\n        'id' => $this->id,\n        'name' => $this->name,\n        'email' => $this->email,\n        'posts' => PostResource::collection($this->posts),\n        'created_at' => $this->created_at,\n        'updated_at' => $this->updated_at,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flash Data in Laravel Session\nDESCRIPTION: Methods to store temporary data in the session that persists only for the next request, useful for status messages.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$request->session()->flash('status', 'Task was successful!');\n```\n\n----------------------------------------\n\nTITLE: Asserting Page Title in Laravel Dusk\nDESCRIPTION: Assert that the page title matches or contains the given text using assertTitle and assertTitleContains methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertTitle($title);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertTitleContains($title);\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Dialogs in Laravel Dusk\nDESCRIPTION: Shows how to interact with JavaScript dialogs, including waiting for dialogs, asserting dialog content, and accepting or dismissing dialogs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$browser->waitForDialog($seconds = null);\n\n$browser->assertDialogOpened('Dialog message');\n\n$browser->typeInDialog('Hello World');\n\n$browser->acceptDialog();\n\n$browser->dismissDialog();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Only Specific Attributes in Laravel Blade\nDESCRIPTION: Uses the only method to retrieve only the attributes with specified keys from a component's attribute bag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_57\n\nLANGUAGE: blade\nCODE:\n```\n{{ $attributes->only(['class']) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailpit in Laravel Homestead\nDESCRIPTION: This INI configuration demonstrates how to set up the environment variables for using Mailpit, an email testing tool, in Laravel Homestead. It configures the mail driver, host, port, and other SMTP settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nMAIL_MAILER=smtp\nMAIL_HOST=localhost\nMAIL_PORT=1025\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Validation Middleware in Laravel\nDESCRIPTION: Example of a middleware class that checks if a request contains a valid token. If the token doesn't match, it redirects to /home; otherwise, it allows the request to proceed through the application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass EnsureTokenIsValid\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        if ($request->input('token') !== 'my-secret-token') {\n            return redirect('/home');\n        }\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in Laravel\nDESCRIPTION: Shows how to determine if the current user is authenticated using the Auth facade's check method. This method returns true if a user is logged in.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Auth;\n\nif (Auth::check()) {\n    // The user is logged in...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Missing Model Behavior for Resource Routes\nDESCRIPTION: How to customize the behavior when an implicitly bound resource model is not found, redirecting to an index page instead of showing a 404 error.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\PhotoController;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Redirect;\n\nRoute::resource('photos', PhotoController::class)\n    ->missing(function (Request $request) {\n        return Redirect::route('photos.index');\n    });\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation with exclude_unless Rule\nDESCRIPTION: Example showing how to only validate fields when another field has a specific value using the 'exclude_unless' rule. This provides inverse conditional validation compared to exclude_if.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make($data, [\n    'has_appointment' => 'required|boolean',\n    'appointment_date' => 'exclude_unless:has_appointment,true|required|date',\n    'doctor_name' => 'exclude_unless:has_appointment,true|required|string',\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Pulse Card Component\nDESCRIPTION: Example of creating a custom Livewire component for Laravel Pulse that extends the base Card class to display application-specific metrics.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Livewire\\Pulse;\n\nuse Laravel\\Pulse\\Livewire\\Card;\nuse Livewire\\Attributes\\Lazy;\n\n#[Lazy]\nclass TopSellers extends Card\n{\n    public function render()\n    {\n        return view('livewire.pulse.top-sellers');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Has One Through Relationship in Mechanic Model\nDESCRIPTION: PHP implementation of a Has One Through relationship in the Mechanic model to access the car's owner through the Car model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough;\n\nclass Mechanic extends Model\n{\n    /**\n     * Get the car's owner.\n     */\n    public function carOwner(): HasOneThrough\n    {\n        return $this->hasOneThrough(Owner::class, Car::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authentication Driver in Laravel\nDESCRIPTION: This snippet shows how to configure a custom authentication driver in the Laravel auth.php configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n'guards' => [\n    'api' => [\n        'driver' => 'custom-token',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Getting Last Element Passing Test from Laravel Collection (PHP)\nDESCRIPTION: Returns the last element in the collection for which a given callback function returns `true`. Iterates from the end of the collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\ncollect([1, 2, 3, 4])->last(function (int $value, int $key) {\n    return $value < 3;\n});\n\n// 2\n```\n\n----------------------------------------\n\nTITLE: Trimming Left Side with Str::ltrim in Laravel\nDESCRIPTION: The Str::ltrim method strips whitespace from the beginning of a string, with support for Unicode whitespace characters unlike PHP's native ltrim function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::ltrim('  foo bar  ');\n\n// 'foo bar  '\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutator in Laravel Eloquent\nDESCRIPTION: Example of defining a mutator method for the first_name attribute that converts the value to lowercase when set.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Casts\\Attribute;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Interact with the user's first name.\n     */\n    protected function firstName(): Attribute\n    {\n        return Attribute::make(\n            get: fn (string $value) => ucfirst($value),\n            set: fn (string $value) => strtolower($value),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Login View in Laravel Fortify\nDESCRIPTION: This snippet shows how to configure the login view in Laravel Fortify. It uses the Fortify::loginView method to specify a custom view for the login page.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Fortify\\Fortify;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Fortify::loginView(function () {\n        return view('auth.login');\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Named Error Bags Example\nDESCRIPTION: Demonstrates how to use named error bags with the @error directive in Blade templates\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<input ... class=\"@error('title', 'post') is-invalid @enderror\">\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple HTTP Verb Routes in Laravel\nDESCRIPTION: Shows how to define routes that respond to multiple HTTP verbs using the match method, and a route that responds to all HTTP verbs using the any method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRoute::match(['get', 'post'], '/', function () {\n    // ...\n});\n\nRoute::any('/', function () {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Facade and Helper Function for JSON Response in Laravel\nDESCRIPTION: Shows how to generate a JSON response using both the Response facade and the response helper function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Response;\n\nRoute::get('/users', function () {\n    return Response::json([\n        // ...\n    ]);\n});\n\nRoute::get('/users', function () {\n    return response()->json([\n        // ...\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Laravel Collection Items to Groups (PHP)\nDESCRIPTION: Iterates over the collection, applying a callback that should return a single key/value pair. This method is used to group items based on the key returned by the callback, creating a new collection where keys represent groups and values are collections of items belonging to that group.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    [\n        'name' => 'John Doe',\n        'department' => 'Sales',\n    ],\n    [\n        'name' => 'Jane Doe',\n        'department' => 'Sales',\n    ],\n    [\n        'name' => 'Johnny Doe',\n        'department' => 'Marketing',\n    ]\n]);\n\n$grouped = $collection->mapToGroups(function (array $item, int $key) {\n    return [$item['department'] => $item['name']];\n});\n\n$grouped->all();\n\n/*\n    [\n        'Sales' => ['John Doe', 'Jane Doe'],\n        'Marketing' => ['Johnny Doe'],\n    ]\n*/\n\n$grouped->get('Sales')->all();\n\n// ['John Doe', 'Jane Doe']\n```\n\n----------------------------------------\n\nTITLE: Default Authorization Allow-All Implementation\nDESCRIPTION: Demonstrates the simplest form of the authorize method that allows all requests through.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Determine if the user is authorized to make this request.\n */\npublic function authorize(): bool\n{\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Str::betweenFirst for String Extraction in PHP\nDESCRIPTION: The Str::betweenFirst method returns the smallest possible portion of a string between two values, extracting only the first matching segment.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slice = Str::betweenFirst('[a] bc [d]', '[', ']');\n\n// 'a'\n```\n\n----------------------------------------\n\nTITLE: Implementing the Assert Method in Laravel Dusk Page Objects\nDESCRIPTION: The `assert` method makes assertions to verify the browser is on the correct page. This method runs automatically when navigating to the page and typically verifies the current URL path.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Assert that the browser is on the page.\n */\npublic function assert(Browser $browser): void\n{\n    $browser->assertPathIs($this->url());\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Intermediate Table Name in Laravel Relationships\nDESCRIPTION: Example of explicitly specifying the intermediate table name for a many-to-many relationship using the second parameter of the belongsToMany method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->belongsToMany(Role::class, 'role_user');\n```\n\n----------------------------------------\n\nTITLE: Cookie Management in Laravel Dusk\nDESCRIPTION: Shows how to get, set, and delete both encrypted and unencrypted cookies using Dusk's cookie management methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$browser->cookie('name');\n\n$browser->cookie('name', 'Taylor');\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->plainCookie('name');\n\n$browser->plainCookie('name', 'Taylor');\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->deleteCookie('name');\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Possible Suffixes in Laravel PHP\nDESCRIPTION: The chopEnd method can also accept an array of values, removing the first one found at the end of the string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_94\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$url = Str::of('http://laravel.com')->chopEnd(['.com', '.io']);\n\n// 'http://laravel'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster in Laravel\nDESCRIPTION: Example configuration for setting up a Redis cluster in Laravel's config/database.php file, including multiple nodes and cluster options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'redis' => [\n\n    'client' => env('REDIS_CLIENT', 'phpredis'),\n\n    'options' => [\n        'cluster' => env('REDIS_CLUSTER', 'redis'),\n        'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),\n    ],\n\n    'clusters' => [\n        'default' => [\n            [\n                'url' => env('REDIS_URL'),\n                'host' => env('REDIS_HOST', '127.0.0.1'),\n                'username' => env('REDIS_USERNAME'),\n                'password' => env('REDIS_PASSWORD'),\n                'port' => env('REDIS_PORT', '6379'),\n                'database' => env('REDIS_DB', '0'),\n            ],\n        ],\n    ],\n\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Referencing Custom Provider in Laravel Guards Configuration\nDESCRIPTION: This snippet shows how to reference a custom user provider in the guards configuration of the Laravel auth.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n'guards' => [\n    'web' => [\n        'driver' => 'session',\n        'provider' => 'users',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Global Route Parameter Constraints in Laravel\nDESCRIPTION: Demonstrates how to define global constraints for route parameters in Laravel by using the 'pattern' method in the AppServiceProvider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Route;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Route::pattern('id', '[0-9]+');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Session Database Table in Laravel\nDESCRIPTION: Commands to generate and run a migration for creating a sessions table in the database when using the database session driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:session-table\n\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Simplified Authorization Check Using Route Model Binding\nDESCRIPTION: Shows a more concise authorization check using Laravel's route model binding feature.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->user()->can('update', $this->comment);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item by Key with Default - PHP\nDESCRIPTION: The `get` method fetches an item from the collection by its key.  If the key doesn't exist, it returns `null` by default, but you can provide a default value or a callback function as a second argument.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n\n$value = $collection->get('name');\n\n// taylor\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n\n$value = $collection->get('age', 34);\n\n// 34\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection->get('email', function () {\n    return 'taylor@example.com';\n});\n\n// taylor@example.com\n\n```\n\n----------------------------------------\n\nTITLE: Raw Search Results in Laravel Scout\nDESCRIPTION: Shows how to get raw search results before conversion to Eloquent models.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$orders = Order::search('Star Trek')->raw();\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Lowercase in PHP\nDESCRIPTION: Shows how to use the 'lower' method to convert a string to lowercase.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_126\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('LARAVEL')->lower();\n\n// 'laravel'\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Pulse via Composer\nDESCRIPTION: Commands to install Laravel Pulse using Composer, publish configuration files, and run database migrations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/pulse\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --provider=\"Laravel\\Pulse\\PulseServiceProvider\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Registering Service Providers in Laravel\nDESCRIPTION: Shows how to register service providers in Laravel by adding them to the bootstrap/providers.php configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    App\\Providers\\AppServiceProvider::class,\n    App\\Providers\\ComposerServiceProvider::class, // [tl! add]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Disk in Laravel\nDESCRIPTION: Example configuration for creating a scoped disk that prefixes all paths with a specified path when using another disk like S3.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n's3-videos' => [\n    'driver' => 'scoped',\n    'disk' => 's3',\n    'prefix' => 'path/to/videos',\n],\n```\n\n----------------------------------------\n\nTITLE: JavaScript Execution in Dusk Tests\nDESCRIPTION: Examples of executing JavaScript code within the browser during Dusk tests, including single statements and arrays of statements.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$browser->script('document.documentElement.scrollTop = 0');\n\n$browser->script([\n    'document.body.scrollTop = 0',\n    'document.documentElement.scrollTop = 0',\n]);\n\n$output = $browser->script('return window.location.pathname');\n```\n\n----------------------------------------\n\nTITLE: Setting Validation Timeout in Alpine.js with Precognition\nDESCRIPTION: JavaScript code to configure the debounce timeout for validation requests in Precognition.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nform.setValidationTimeout(3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeOrEqual Date Validation in Laravel\nDESCRIPTION: Demonstrates how to use Laravel's fluent date rule builder to validate that a date is before or equal to a reference date. The example requires a start date to be on or before 7 days ago.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rule;\n\n'start_date' => [\n    'required',\n    Rule::date()->beforeOrEqual(today()->subDays(7)),\n],\n```\n\n----------------------------------------\n\nTITLE: Excluding Models by Keys\nDESCRIPTION: This snippet uses the `except` method to remove models from a collection based on their primary keys.  It excludes models with primary keys 1, 2, and 3.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = $users->except([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Specifying Mass Assignable JSON Column Keys in Laravel Eloquent\nDESCRIPTION: Shows how to define mass assignable JSON column keys in the $fillable array to allow specific JSON attributes to be updated via mass assignment.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The attributes that are mass assignable.\n *\n * @var array<int, string>\n */\nprotected $fillable = [\n    'options->enabled',\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Setup Intent for Subscription Payment Methods\nDESCRIPTION: Shows how to create a Stripe Setup Intent for securely gathering customer payment method details for subscriptions using Laravel Cashier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nreturn view('update-payment-method', [\n    'intent' => $user->createSetupIntent()\n]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Keys in HasMany Relationship in Laravel\nDESCRIPTION: Examples of overriding the foreign and local keys in a hasMany relationship. This allows specifying custom keys instead of using Laravel's conventions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->hasMany(Comment::class, 'foreign_key');\n\nreturn $this->hasMany(Comment::class, 'foreign_key', 'local_key');\n```\n\n----------------------------------------\n\nTITLE: Subquery Comparison with Average Income\nDESCRIPTION: Shows how to create a where clause that compares a column against the results of a subquery, specifically finding income records below average.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Income;\nuse Illuminate\\Database\\Query\\Builder;\n\n$incomes = Income::where('amount', '<', function (Builder $query) {\n    $query->selectRaw('avg(i.amount)')->from('incomes as i');\n})->get();\n```\n\n----------------------------------------\n\nTITLE: Conditionally Compiling CSS Class Strings Using Laravel Arr toCssClasses Method in PHP\nDESCRIPTION: The Arr::toCssClasses method compiles an array of conditional CSS classes into a whitespace-separated string. Array keys are class names and values are boolean expressions controlling inclusion. Numeric keys are always included. Requires Illuminate\\Support\\Arr. The output string can be used in HTML class attributes to dynamically apply styles based on conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$isActive = false;\n$hasError = true;\n\n$array = ['p-4', 'font-bold' => $isActive, 'bg-red' => $hasError];\n\n$classes = Arr::toCssClasses($array);\n\n/*\n    'p-4 bg-red'\n*/\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Verification View in PHP\nDESCRIPTION: This PHP code shows how to customize the email verification view in Laravel Fortify. It uses the Fortify::verifyEmailView method to return a custom view for the email verification screen.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Fortify\\Fortify;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Fortify::verifyEmailView(function () {\n        return view('auth.verify-email');\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Broadcast Channels in PHP\nDESCRIPTION: Examples of implementing the broadcastOn method to specify the channels an event should broadcast on. Shows both single and multiple channel broadcasting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\n\n/**\n * Get the channel the event should broadcast on.\n */\npublic function broadcastOn(): Channel\n{\n    return new PrivateChannel('orders.'.$this->order->id);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Broadcasting\\PrivateChannel;\n\n/**\n * Get the channels the event should broadcast on.\n *\n * @return array<int, \\Illuminate\\Broadcasting\\Channel>\n */\npublic function broadcastOn(): array\n{\n    return [\n        new PrivateChannel('orders.'.$this->order->id),\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request with Laravel HTTP Client\nDESCRIPTION: Demonstrates how to make a basic GET request using Laravel's HTTP Client and access the response data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\n$response = Http::get('http://example.com');\n\n$response->body() : string;\n$response->json($key = null, $default = null) : mixed;\n$response->object() : object;\n$response->collect($key = null) : Illuminate\\Support\\Collection;\n$response->resource() : resource;\n$response->status() : int;\n$response->successful() : bool;\n$response->redirect(): bool;\n$response->failed() : bool;\n$response->clientError() : bool;\n$response->header($header) : string;\n$response->headers() : array;\n```\n\n----------------------------------------\n\nTITLE: Checking for Key Existence - PHP\nDESCRIPTION: The `has` method checks if a given key or an array of keys exists within the collection.  It returns `true` if all keys exist; otherwise, it returns `false`.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['account_id' => 1, 'product' => 'Desk', 'amount' => 5]);\n\n$collection->has('product');\n\n// true\n\n$collection->has(['product', 'amount']);\n\n// true\n\n$collection->has(['amount', 'price']);\n\n// false\n\n```\n\n----------------------------------------\n\nTITLE: Asserting Forbidden Status in Laravel Tests\nDESCRIPTION: This snippet shows how to assert that a response has a forbidden (403) HTTP status code using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$response->assertForbidden();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Date Storage Format in Laravel Eloquent (PHP)\nDESCRIPTION: Shows how to define the `$dateFormat` property within an Eloquent model to specify the format used when storing date attributes in the database. In this example, `U` indicates storing dates as UNIX timestamps. This property controls the storage format, distinct from the serialization format controlled by `serializeDate` or cast formats.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The storage format of the model's date columns.\n *\n * @var string\n */\nprotected $dateFormat = 'U';\n```\n\n----------------------------------------\n\nTITLE: Including Additional Pivot Fields in Laravel Relationships\nDESCRIPTION: Example of specifying additional pivot table columns to be included on the pivot model using the withPivot method when defining the relationship.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->belongsToMany(Role::class)->withPivot('active', 'created_by');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scalar Value from SQL Query in Laravel\nDESCRIPTION: Shows how to retrieve a single scalar value from a SQL query result using the scalar method of the DB facade in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$burgers = DB::scalar(\n    \"select count(case when food = 'burger' then 1 end) as burgers from menu\"\n);\n```\n\n----------------------------------------\n\nTITLE: Using app() function to access Laravel service container in PHP\nDESCRIPTION: The app() function returns the service container instance and can be used to resolve classes or interfaces from the container.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n$container = app();\n```\n\nLANGUAGE: php\nCODE:\n```\n$api = app('HelpSpot\\API');\n```\n\n----------------------------------------\n\nTITLE: Conditional Migration Execution in Laravel\nDESCRIPTION: Implement a shouldRun method to conditionally skip a migration based on a feature flag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Flights;\nuse Laravel\\Pennant\\Feature;\n\n/**\n * Determine if this migration should run.\n */\npublic function shouldRun(): bool\n{\n    return Feature::active(Flights::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Content Not Present in Laravel Tests\nDESCRIPTION: This snippet illustrates how to assert that a given string is not contained within the response returned by the application, with an option to escape the string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$response->assertDontSee($value, $escape = true);\n```\n\n----------------------------------------\n\nTITLE: Asserting Accepted Status in Laravel Tests\nDESCRIPTION: This snippet shows how to assert that a response has an accepted (202) HTTP status code using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$response->assertAccepted();\n```\n\n----------------------------------------\n\nTITLE: Preventing Lazy Loading in Laravel\nDESCRIPTION: Demonstrates how to prevent lazy loading of Eloquent relationships by calling Model::preventLazyLoading() in the AppServiceProvider boot method, with an option to only disable it in non-production environments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_96\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Model::preventLazyLoading(! $this->app->isProduction());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Provider Credentials in Laravel\nDESCRIPTION: Configuration for OAuth providers in the application's services.php file. This example shows setting up GitHub OAuth credentials with environment variables.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'github' => [\n    'client_id' => env('GITHUB_CLIENT_ID'),\n    'client_secret' => env('GITHUB_CLIENT_SECRET'),\n    'redirect' => 'http://example.com/callback-url',\n],\n```\n\n----------------------------------------\n\nTITLE: Executing Artisan Commands as Strings\nDESCRIPTION: Demonstrates passing an entire Artisan command as a string to the call method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nArtisan::call('mail:send 1 --queue=default');\n```\n\n----------------------------------------\n\nTITLE: Decrypting Laravel Environment File\nDESCRIPTION: Use the env:decrypt Artisan command to decrypt an encrypted environment file using the LARAVEL_ENV_ENCRYPTION_KEY.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan env:decrypt\n```\n\n----------------------------------------\n\nTITLE: Using Helper Methods for Common Route Parameter Constraints in Laravel\nDESCRIPTION: Shows how to use Laravel's helper methods for applying common regular expression constraints to route parameters, simplifying the process of adding pattern constraints.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/user/{id}/{name}', function (string $id, string $name) {\n    // ...\n})->whereNumber('id')->whereAlpha('name');\n\nRoute::get('/user/{name}', function (string $name) {\n    // ...\n})->whereAlphaNumeric('name');\n\nRoute::get('/user/{id}', function (string $id) {\n    // ...\n})->whereUuid('id');\n\nRoute::get('/user/{id}', function (string $id) {\n    // ...\n})->whereUlid('id');\n\nRoute::get('/category/{category}', function (string $category) {\n    // ...\n})->whereIn('category', ['movie', 'song', 'painting']);\n\nRoute::get('/category/{category}', function (string $category) {\n    // ...\n})->whereIn('category', CategoryEnum::cases());\n```\n\n----------------------------------------\n\nTITLE: Setting Named Route Redirect in Laravel Form Requests\nDESCRIPTION: Shows how to configure redirection to a named route when validation fails using the $redirectRoute property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The route that users should be redirected to if validation fails.\n *\n * @var string\n */\nprotected $redirectRoute = 'dashboard';\n```\n\n----------------------------------------\n\nTITLE: Filtering Component Attributes in Laravel Blade\nDESCRIPTION: Uses the filter method to selectively retain attributes in a Blade component's attribute bag based on a condition specified in a closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_49\n\nLANGUAGE: blade\nCODE:\n```\n{{ $attributes->filter(fn (string $value, string $key) => $key == 'foo') }}\n```\n\n----------------------------------------\n\nTITLE: Storing Uploaded Files with Public Visibility in Laravel\nDESCRIPTION: Demonstrates how to store uploaded files with public visibility using storePublicly and storePubliclyAs methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$path = $request->file('avatar')->storePublicly('avatars', 's3');\n\n$path = $request->file('avatar')->storePubliclyAs(\n    'avatars',\n    $request->user()->id,\n    's3'\n);\n```\n\n----------------------------------------\n\nTITLE: Subquery Where Clause with User Membership Example\nDESCRIPTION: Demonstrates how to construct a where clause using a subquery to find users with specific membership types. The subquery selects the most recent membership type for each user.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Database\\Query\\Builder;\n\n$users = User::where(function (Builder $query) {\n    $query->select('type')\n        ->from('membership')\n        ->whereColumn('membership.user_id', 'users.id')\n        ->orderByDesc('membership.start_date')\n        ->limit(1);\n}, 'Pro')->get();\n```\n\n----------------------------------------\n\nTITLE: Hiding Attributes from Collection\nDESCRIPTION: The `makeHidden` method hides attributes that are typically visible on each model within the collection, providing an override from the default visibility settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = $users->makeHidden(['address', 'phone_number']);\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Laravel Scout Search Index\nDESCRIPTION: Shows how to update records in the Laravel Scout search index by saving model changes or using the searchable method on queries and collections.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\n\n$order = Order::find(1);\n\n// Update the order...\n\n$order->save();\n\nOrder::where('price', '>', 100)->searchable();\n\n$user->orders()->searchable();\n\n$orders->searchable();\n```\n\n----------------------------------------\n\nTITLE: Returning Eloquent Model as JSON Response in Laravel\nDESCRIPTION: Shows how to return an Eloquent model directly from a route, which Laravel automatically converts to a JSON response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nRoute::get('/user/{user}', function (User $user) {\n    return $user;\n});\n```\n\n----------------------------------------\n\nTITLE: Real-time Output Callback with Process Start Method\nDESCRIPTION: Shows how to capture process output in real-time using a callback function that receives output type and content.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$process = Process::start('bash import.sh', function (string $type, string $output) {\n    echo $output;\n});\n\n$result = $process->wait();\n```\n\n----------------------------------------\n\nTITLE: Disabling Exception Handling in Laravel Tests\nDESCRIPTION: Shows how to disable exception handling for a specific request in a Laravel test, and how to disable deprecation handling to convert warnings to exceptions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$response = $this->withoutExceptionHandling()->get('/');\n\n$response = $this->withoutDeprecationHandling()->get('/');\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Handling with PHPUnit in Laravel\nDESCRIPTION: Shows how to test exception handling using the Exceptions facade in a PHPUnit test case. It demonstrates asserting that specific exceptions are reported during a request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse App\\Exceptions\\InvalidOrderException;\nuse Illuminate\\Support\\Facades\\Exceptions;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * A basic test example.\n     */\n    public function test_exception_is_thrown(): void\n    {\n        Exceptions::fake();\n\n        $response = $this->get('/');\n\n        // Assert an exception was thrown...\n        Exceptions::assertReported(InvalidOrderException::class);\n\n        // Assert against the exception...\n        Exceptions::assertReported(function (InvalidOrderException $e) {\n            return $e->getMessage() === 'The order was invalid.';\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stateless HTTP Basic Authentication Middleware in Laravel\nDESCRIPTION: Custom middleware implementation for stateless HTTP Basic authentication using the onceBasic method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AuthenticateOnceWithBasicAuth\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        return Auth::onceBasic() ?: $next($request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Pipeline Facade to Process Inputs Through Multiple Callables in PHP\nDESCRIPTION: Shows how to use Laravel's Pipeline facade to send an input instance (e.g. a User object) through a series of closures or invokable classes. Each callable receives the input and a $next closure to invoke the next stage, enabling modifications or side effects on the input. After all stages, a final callback passed to then() is called with the processed input. This pattern is similar to middleware chaining and requires Illuminate\\Support\\Facades\\Pipeline. The example uses closures to manipulate user input with the ability to short-circuit or alter data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_135\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\\nuse App\\Models\\User;\\nuse Illuminate\\Support\\Facades\\Pipeline;\\n\\n$user = Pipeline::send($user)\\n    ->through([\\n        function (User $user, Closure $next) {\\n            // ...\\n\\n            return $next($user);\\n        },\\n        function (User $user, Closure $next) {\\n            // ...\\n\\n            return $next($user);\\n        },\\n    ])\\n    ->then(fn (User $user) => $user);\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Anonymous Blade Component\nDESCRIPTION: Demonstrates how to render a nested anonymous component using the dot notation to reference components in subdirectories.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_74\n\nLANGUAGE: blade\nCODE:\n```\n<x-inputs.button/>\n```\n\n----------------------------------------\n\nTITLE: Ordering Eager Loaded Relationships in Laravel\nDESCRIPTION: This snippet demonstrates how to apply sorting to eager loaded relationships by adding an orderBy clause in the relationship constraint closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_87\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with(['posts' => function (Builder $query) {\n    $query->orderBy('created_at', 'desc');\n}])->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Search in Laravel Models\nDESCRIPTION: Demonstrates how to make models conditionally searchable using shouldBeSearchable method. Used to control when models should be included in search results.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\npublic function shouldBeSearchable(): bool\n{\n    return $this->isPublished();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Queue Busy Event Listeners in Laravel\nDESCRIPTION: Code to listen for QueueBusy events and send notifications when queues exceed specified thresholds, implemented in the AppServiceProvider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_106\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Notifications\\QueueHasLongWaitTime;\nuse Illuminate\\Queue\\Events\\QueueBusy;\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Support\\Facades\\Notification;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Event::listen(function (QueueBusy $event) {\n        Notification::route('mail', 'dev@example.com')\n            ->notify(new QueueHasLongWaitTime(\n                $event->connection,\n                $event->queue,\n                $event->size\n            ));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Typesense Connection Settings\nDESCRIPTION: Optional environment variable configuration for Typesense port, path, and protocol. These settings provide more granular control over the Typesense connection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nTYPESENSE_PORT=8108\nTYPESENSE_PATH=\nTYPESENSE_PROTOCOL=http\n```\n\n----------------------------------------\n\nTITLE: Advanced Laravel Pint Rules Configuration\nDESCRIPTION: Example of customizing Pint rules in pint.json, including enabling/disabling specific rules and their options\nSOURCE: https://github.com/laravel/docs/blob/12.x/pint.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"preset\": \"laravel\",\n    \"rules\": {\n        \"simplified_null_return\": true,\n        \"array_indentation\": false,\n        \"new_with_parentheses\": {\n            \"anonymous_class\": true,\n            \"named_class\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Search Pagination View in Laravel Blade\nDESCRIPTION: Example of displaying paginated search results in a Blade template with pagination links.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n    @foreach ($orders as $order)\n        {{ $order->price }}\n    @endforeach\n</div>\n\n{{ $orders->links() }}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Atlas Connection Configuration\nDESCRIPTION: Environment variables configuration for MongoDB Atlas cloud connection settings\nSOURCE: https://github.com/laravel/docs/blob/12.x/mongodb.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nMONGODB_URI=\"mongodb+srv://<username>:<password>@<cluster>.mongodb.net/<dbname>?retryWrites=true&w=majority\"\nMONGODB_DATABASE=\"laravel_app\"\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Verified Middleware in PHP\nDESCRIPTION: This PHP code snippet shows how to protect a route using the 'verified' middleware in Laravel. This ensures that only users with verified email addresses can access the specified route.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/dashboard', function () {\n    // ...\n})->middleware(['verified']);\n```\n\n----------------------------------------\n\nTITLE: Testing Laravel Mailable Content with PHPUnit\nDESCRIPTION: Shows how to test mailable content using various assertions in a PHPUnit test method, including checking recipients, subject, content, and attachments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Mail\\InvoicePaid;\nuse App\\Models\\User;\n\npublic function test_mailable_content(): void\n{\n    $user = User::factory()->create();\n\n    $mailable = new InvoicePaid($user);\n\n    $mailable->assertFrom('jeffrey@example.com');\n    $mailable->assertTo('taylor@example.com');\n    $mailable->assertHasCc('abigail@example.com');\n    $mailable->assertHasBcc('victoria@example.com');\n    $mailable->assertHasReplyTo('tyler@example.com');\n    $mailable->assertHasSubject('Invoice Paid');\n    $mailable->assertHasTag('example-tag');\n    $mailable->assertHasMetadata('key', 'value');\n\n    $mailable->assertSeeInHtml($user->email);\n    $mailable->assertSeeInHtml('Invoice Paid');\n    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n\n    $mailable->assertSeeInText($user->email);\n    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n\n    $mailable->assertHasAttachment('/path/to/file');\n    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));\n    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);\n    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Mail Sending with Pest Framework\nDESCRIPTION: Example of testing mail functionality using Laravel's Pest testing framework. Shows how to fake mail sending and assert various mailable conditions including sent count, recipients, and queued status.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Mail\\OrderShipped;\nuse Illuminate\\Support\\Facades\\Mail;\n\ntest('orders can be shipped', function () {\n    Mail::fake();\n\n    // Perform order shipping...\n\n    // Assert that no mailables were sent...\n    Mail::assertNothingSent();\n\n    // Assert that a mailable was sent...\n    Mail::assertSent(OrderShipped::class);\n\n    // Assert a mailable was sent twice...\n    Mail::assertSent(OrderShipped::class, 2);\n\n    // Assert a mailable was sent to an email address...\n    Mail::assertSent(OrderShipped::class, 'example@laravel.com');\n\n    // Assert a mailable was sent to multiple email addresses...\n    Mail::assertSent(OrderShipped::class, ['example@laravel.com', '...']);\n\n    // Assert a mailable was not sent...\n    Mail::assertNotSent(AnotherMailable::class);\n\n    // Assert 3 total mailables were sent...\n    Mail::assertSentCount(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Class-Based Feature in Laravel Pennant\nDESCRIPTION: Artisan command to generate a new class-based feature file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan pennant:feature NewApi\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to HTML in PHP\nDESCRIPTION: Demonstrates how to use the 'markdown' method to convert GitHub flavored Markdown into HTML, with options for handling HTML input.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_127\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$html = Str::of('# Laravel')->markdown();\n\n// <h1>Laravel</h1>\n\n$html = Str::of('# Taylor <b>Otwell</b>')->markdown([\n    'html_input' => 'strip',\n]);\n\n// <h1>Taylor Otwell</h1>\n```\n\n----------------------------------------\n\nTITLE: Muting Model Events During Laravel Database Seeding\nDESCRIPTION: Example of using the WithoutModelEvents trait in a seeder class to prevent model events from being dispatched during the seeding process, which can improve performance and prevent unwanted side effects.\nSOURCE: https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\n\nclass DatabaseSeeder extends Seeder\n{\n    use WithoutModelEvents;\n\n    /**\n     * Run the database seeders.\n     */\n    public function run(): void\n    {\n        $this->call([\n            UserSeeder::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Str::after for String Extraction in PHP\nDESCRIPTION: The Str::after method returns everything after the given value in a string. If the value doesn't exist in the string, the entire string is returned.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slice = Str::after('This is my name', 'This is');\n\n// ' my name'\n```\n\n----------------------------------------\n\nTITLE: Counting Words in a String with Str::wordCount in Laravel\nDESCRIPTION: The Str::wordCount method returns the number of words in a string, useful for text analysis or content length validation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_69\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nStr::wordCount('Hello, world!'); // 2\n```\n\n----------------------------------------\n\nTITLE: Using Table Component in Markdown Emails\nDESCRIPTION: This code shows how to use the table component to create HTML tables in Markdown emails. The component supports column alignment using standard Markdown syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_28\n\nLANGUAGE: blade\nCODE:\n```\n<x-mail::table>\n| Laravel       | Table         | Example       |\n| ------------- | :-----------: | ------------: |\n| Col 2 is      | Centered      | $10           |\n| Col 3 is      | Right-Aligned | $20           |\n</x-mail::table>\n```\n\n----------------------------------------\n\nTITLE: Executing Lua Scripts with Redis in Laravel\nDESCRIPTION: Shows how to use the eval method to execute Lua scripts in Redis. The example demonstrates incrementing counters and conditional logic within the script.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$value = Redis::eval(<<<'LUA'\n    local counter = redis.call(\"incr\", KEYS[1])\n\n    if counter > 5 then\n        redis.call(\"incr\", KEYS[2])\n    end\n\n    return counter\nLUA, 2, 'first-counter', 'second-counter');\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Database Connections in Laravel PHP\nDESCRIPTION: Shows how to access different database connections defined in the config/database.php file using the DB facade's connection method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\n$users = DB::connection('sqlite')->select(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Accessing Task Output in Laravel Scheduler Hooks\nDESCRIPTION: Demonstrates how to access command output in task hooks by type-hinting the Stringable parameter. This allows for processing or logging of the task's output in success or failure scenarios.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Stringable;\n\nSchedule::command('emails:send')\n    ->daily()\n    ->onSuccess(function (Stringable $output) {\n        // The task succeeded...\n    })\n    ->onFailure(function (Stringable $output) {\n        // The task failed...\n    });\n```\n\n----------------------------------------\n\nTITLE: Clearing Jobs from Specific Connection and Queue in Laravel\nDESCRIPTION: Command to delete jobs from a specific connection and queue by providing the connection name and queue option to the queue:clear command.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_104\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:clear redis --queue=emails\n```\n\n----------------------------------------\n\nTITLE: Rendering Paddle Checkout Button in Laravel Blade\nDESCRIPTION: Shows how to use the paddle-button Blade component provided by Cashier to render a checkout button in a Laravel view.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<x-paddle-button :checkout=\"$checkout\" class=\"px-8 py-4\">\n    Buy Product\n</x-paddle-button>\n```\n\n----------------------------------------\n\nTITLE: Queueing Notifications (PHP)\nDESCRIPTION: Shows how to make a notification queueable by implementing the ShouldQueue interface and using the Queueable trait.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Notifications;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Notifications\\Notification;\n\nclass InvoicePaid extends Notification implements ShouldQueue\n{\n    use Queueable;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection Using URL in Laravel\nDESCRIPTION: Example of configuring Redis connections using URLs instead of individual host, port, and database settings in Laravel's config/database.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'redis' => [\n\n    'client' => env('REDIS_CLIENT', 'phpredis'),\n\n    'options' => [\n        'cluster' => env('REDIS_CLUSTER', 'redis'),\n        'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),\n    ],\n\n    'default' => [\n        'url' => 'tcp://127.0.0.1:6379?database=0',\n    ],\n\n    'cache' => [\n        'url' => 'tls://user:password@127.0.0.1:6380?database=1',\n    ],\n\n],\n```\n\n----------------------------------------\n\nTITLE: Authorizing Actions in Laravel Controller using User Model\nDESCRIPTION: This snippet shows how to use the 'cannot' method on the User model to authorize an action within a controller method. If the user is not authorized to update the post, a 403 error is returned.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Post;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PostController extends Controller\n{\n    /**\n     * Update the given post.\n     */\n    public function update(Request $request, Post $post): RedirectResponse\n    {\n        if ($request->user()->cannot('update', $post)) {\n            abort(403);\n        }\n\n        // Update the post...\n\n        return redirect('/posts');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Missing Relationships\nDESCRIPTION: The `loadMissing` method eagerly loads relationships for all models in the collection only if the relationships are not already loaded. Relationships can be loaded directly or filtered with a closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users->loadMissing(['comments', 'posts']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$users->loadMissing('comments.author');\n```\n\nLANGUAGE: php\nCODE:\n```\n$users->loadMissing(['comments', 'posts' => fn ($query) => $query->where('active', 1)]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Weekly Task Schedule in Laravel\nDESCRIPTION: This snippet demonstrates how to schedule a task to run weekly on Mondays at 1 PM and another task to run hourly on weekdays between 8 AM and 5 PM in the America/Chicago timezone.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\n// Run once per week on Monday at 1 PM...\nSchedule::call(function () {\n    // ...\n})->weekly()->mondays()->at('13:00');\n\n// Run hourly from 8 AM to 5 PM on weekdays...\nSchedule::command('foo')\n    ->weekdays()\n    ->hourly()\n    ->timezone('America/Chicago')\n    ->between('8:00', '17:00');\n```\n\n----------------------------------------\n\nTITLE: Installing Swoole PHP Extension\nDESCRIPTION: Command to install the Swoole PHP extension using PECL.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npecl install swoole\n```\n\n----------------------------------------\n\nTITLE: Using csrf_field() function for CSRF protection in Laravel Blade\nDESCRIPTION: The csrf_field() function generates an HTML hidden input field containing the CSRF token value for form submissions to protect against cross-site request forgery.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_82\n\nLANGUAGE: php\nCODE:\n```\n{{ csrf_field() }}\n```\n\n----------------------------------------\n\nTITLE: Defining Notifiable User Model (PHP)\nDESCRIPTION: Defines a User model that uses the Notifiable trait, allowing it to receive notifications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\n\nclass User extends Authenticatable\n{\n    use Notifiable;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mailchimp Transport Class in PHP\nDESCRIPTION: Creates a custom mail transport class for Mailchimp integration by extending Symfony's AbstractTransport. Implements required doSend and __toString methods to handle email delivery through Mailchimp's API.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nuse MailchimpTransactional\\ApiClient;\nuse Symfony\\Component\\Mailer\\SentMessage;\nuse Symfony\\Component\\Mailer\\Transport\\AbstractTransport;\nuse Symfony\\Component\\Mime\\Address;\nuse Symfony\\Component\\Mime\\MessageConverter;\n\nclass MailchimpTransport extends AbstractTransport\n{\n    /**\n     * Create a new Mailchimp transport instance.\n     */\n    public function __construct(\n        protected ApiClient $client,\n    ) {\n        parent::__construct();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function doSend(SentMessage $message): void\n    {\n        $email = MessageConverter::toEmail($message->getOriginalMessage());\n\n        $this->client->messages->send(['message' => [\n            'from_email' => $email->getFrom(),\n            'to' => collect($email->getTo())->map(function (Address $email) {\n                return ['email' => $email->getAddress(), 'type' => 'to'];\n            })->all(),\n            'subject' => $email->getSubject(),\n            'text' => $email->getTextBody(),\n        ]]);\n    }\n\n    /**\n     * Get the string representation of the transport.\n     */\n    public function __toString(): string\n    {\n        return 'mailchimp';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Segmenting Rate Limits by IP Address\nDESCRIPTION: This code shows how to segment rate limits by IP address using the 'by' method. Each unique IP address is treated separately, allowing 100 requests per minute per IP regardless of which user is making the request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nRateLimiter::for('uploads', function (Request $request) {\n    return $request->user()->vipCustomer()\n        ? Limit::none()\n        : Limit::perMinute(100)->by($request->ip());\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication Pipeline in Laravel Fortify\nDESCRIPTION: This snippet shows how to customize the authentication pipeline in Laravel Fortify. It uses the Fortify::authenticateThrough method to define a custom array of classes that login requests should be piped through.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Fortify\\Actions\\AttemptToAuthenticate;\nuse Laravel\\Fortify\\Actions\\CanonicalizeUsername;\nuse Laravel\\Fortify\\Actions\\EnsureLoginIsNotThrottled;\nuse Laravel\\Fortify\\Actions\\PrepareAuthenticatedSession;\nuse Laravel\\Fortify\\Actions\\RedirectIfTwoFactorAuthenticatable;\nuse Laravel\\Fortify\\Features;\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Http\\Request;\n\nFortify::authenticateThrough(function (Request $request) {\n    return array_filter([\n            config('fortify.limiters.login') ? null : EnsureLoginIsNotThrottled::class,\n            config('fortify.lowercase_usernames') ? CanonicalizeUsername::class : null,\n            Features::enabled(Features::twoFactorAuthentication()) ? RedirectIfTwoFactorAuthenticatable::class : null,\n            AttemptToAuthenticate::class,\n            PrepareAuthenticatedSession::class,\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Resource in Route\nDESCRIPTION: Shows how to return a resource directly from a route definition.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nRoute::get('/user/{id}', function (string $id) {\n    return User::findOrFail($id)->toUserResource();\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Object Caching for Custom Casts\nDESCRIPTION: This code snippet shows how to disable object caching behavior of custom cast classes by declaring a public `withoutObjectCaching` property on the custom cast class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nclass AsAddress implements CastsAttributes\n{\n    public bool $withoutObjectCaching = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Items in Laravel Collection in PHP\nDESCRIPTION: Explains the `skip` method which returns a new collection excluding a specified number of items from the start. It does not mutate the original collection but returns a subset collection starting from the given offset.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_108\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$collection = $collection->skip(4);\n\n$collection->all();\n\n// [5, 6, 7, 8, 9, 10]\n```\n\n----------------------------------------\n\nTITLE: Creating Wildcard Event Listeners in Laravel\nDESCRIPTION: Example of registering a wildcard event listener that can capture multiple events matching a pattern. The listener receives both the event name and data array as parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('event.*', function (string $eventName, array $data) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Resource Collection in Laravel Route\nDESCRIPTION: Demonstrates how to use the collection method of UserResource to return a collection of users as a JSON response in a Laravel route.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Resources\\UserResource;\nuse App\\Models\\User;\n\nRoute::get('/users', function () {\n    return UserResource::collection(User::all());\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Package Views in Laravel Service Provider\nDESCRIPTION: Demonstrates how to register package views using the loadViewsFrom method in a service provider's boot method. This allows the package's views to be referenced using the package::view syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any package services.\n */\npublic function boot(): void\n{\n    $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Array-Based Indexes in Laravel Migrations\nDESCRIPTION: Shows how to drop an index by passing an array of columns to the dropIndex method. Laravel will generate the conventional index name based on the table name, columns, and index type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('geo', function (Blueprint $table) {\n    $table->dropIndex(['state']); // Drops index 'geo_state_index'\n});\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Sanctum Authentication Guard in Laravel\nDESCRIPTION: Example of protecting a route with the Sanctum authentication guard using middleware. This ensures incoming requests are authenticated either via session cookies or API tokens.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/user', function (Request $request) {\n    return $request->user();\n})->middleware('auth:sanctum');\n```\n\n----------------------------------------\n\nTITLE: Assert Authentication States\nDESCRIPTION: Methods to verify different authentication states in the application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n$this->assertAuthenticated($guard = null);\n\n$this->assertGuest($guard = null);\n\n$this->assertAuthenticatedAs($user, $guard = null);\n```\n\n----------------------------------------\n\nTITLE: Creating Detailed Gate Responses with Error Messages\nDESCRIPTION: Demonstrates how to return detailed authorization responses from gates, including custom error messages, using the Response class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\Response;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::define('edit-settings', function (User $user) {\n    return $user->isAdmin\n        ? Response::allow()\n        : Response::deny('You must be an administrator.');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships Within Laravel Model Factories\nDESCRIPTION: This snippet shows how to define relationships within a Laravel model factory. It includes examples of setting up a belongsTo relationship and using a closure for dependent columns.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n/**\n * Define the model's default state.\n *\n * @return array<string, mixed>\n */\npublic function definition(): array\n{\n    return [\n        'user_id' => User::factory(),\n        'title' => fake()->title(),\n        'content' => fake()->paragraph(),\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Define the model's default state.\n *\n * @return array<string, mixed>\n */\npublic function definition(): array\n{\n    return [\n        'user_id' => User::factory(),\n        'user_type' => function (array $attributes) {\n            return User::find($attributes['user_id'])->type;\n        },\n        'title' => fake()->title(),\n        'content' => fake()->paragraph(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Validation Error for Key in Laravel Tests\nDESCRIPTION: The assertJsonValidationErrorFor method asserts the response has any JSON validation errors for the given key. It takes the key and an optional response key as arguments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonValidationErrorFor(string $key, $responseKey = 'errors');\n```\n\n----------------------------------------\n\nTITLE: Mapping Spread Chunks of Laravel Collection (PHP)\nDESCRIPTION: Designed for collections of nested items (like results of `chunk()`), this method iterates over the outer collection, passing the elements of each inner item (chunk) as separate arguments to a callback. The callback's return value forms the new collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n$chunks = $collection->chunk(2);\n\n$sequence = $chunks->mapSpread(function (int $even, int int $odd) {\n    return $even + $odd;\n});\n\n$sequence->all();\n\n// [1, 5, 9, 13, 17]\n```\n\n----------------------------------------\n\nTITLE: Configuring Minio S3-Compatible Storage in Laravel Homestead\nDESCRIPTION: This INI configuration shows how to set up environment variables for using Minio, an S3-compatible object storage server, in Laravel Homestead. It includes settings for the endpoint, access keys, and region.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\nAWS_USE_PATH_STYLE_ENDPOINT=true\nAWS_ENDPOINT=http://localhost:9600\nAWS_ACCESS_KEY_ID=homestead\nAWS_SECRET_ACCESS_KEY=secretkey\nAWS_DEFAULT_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Checking Subscription Status in Laravel Cashier\nDESCRIPTION: Demonstrates how to check if a user is subscribed to a plan using the 'subscribed' method. This can be used in controllers or as a route middleware.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscribed('default')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Redirect Response - Laravel PHP\nDESCRIPTION: These snippets showcase various ways to create redirect HTTP responses using the `redirect()` helper function. It can be called with a URL, route name, or no arguments to return a redirector instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_107\n\nLANGUAGE: php\nCODE:\n```\nreturn redirect($to = null, $status = 302, $headers = [], $https = null);\n\nreturn redirect('/home');\n\nreturn redirect()->route('route.name');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unique Single Array Element Using Laravel Arr Sole Method in PHP\nDESCRIPTION: The Arr::sole method retrieves one unique value from an array matching a given closure's truth test. It throws MultipleItemsFoundException if multiple matches exist or ItemNotFoundException if none. Requires Illuminate\\Support\\Arr and a closure callback that returns a boolean. Best used when exactly one matching element is expected in the array to ensure uniqueness.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['Desk', 'Table', 'Chair'];\n\n$value = Arr::sole($array, fn (string $value) => $value === 'Desk');\n\n// 'Desk'\n```\n\n----------------------------------------\n\nTITLE: Performing Operations Without Updating Timestamps\nDESCRIPTION: Shows how to perform model operations without modifying the updated_at timestamp using withoutTimestamps.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nModel::withoutTimestamps(fn () => $post->increment('reads'));\n```\n\n----------------------------------------\n\nTITLE: Retrieve First Element Value with `value()` in PHP\nDESCRIPTION: The `value()` method retrieves a specific value from the first element of the collection. It is useful for accessing a property of the first item in a collection of arrays or objects. Requires a Laravel Collection instance containing arrays or objects with the target key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_139\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Speaker', 'price' => 400],\n]);\n\n$value = $collection->value('price');\n\n// 200\n```\n\n----------------------------------------\n\nTITLE: Using fill() Method to Populate an Existing Model in Laravel Eloquent\nDESCRIPTION: Demonstrates using the fill() method to populate an existing model instance with an array of attributes without saving to the database yet.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$flight->fill(['name' => 'Amsterdam to Frankfurt']);\n```\n\n----------------------------------------\n\nTITLE: Location and Route Waiting\nDESCRIPTION: Examples of waiting for specific page locations and routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$browser->waitForLocation('/secret');\n\n$browser->waitForLocation('https://example.com/path');\n\n$browser->waitForRoute($routeName, $parameters);\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Incrementing UNSIGNED INTEGER Column in Laravel Migration\nDESCRIPTION: The increments method creates an auto-incrementing UNSIGNED INTEGER column as a primary key in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n$table->increments('id');\n```\n\n----------------------------------------\n\nTITLE: React Component with Inertia Integration\nDESCRIPTION: A React component that corresponds to an Inertia page, showing how data passed from the Laravel controller is received as props in the component, enabling seamless data hydration in a React frontend.\nSOURCE: https://github.com/laravel/docs/blob/12.x/frontend.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '@/layouts/authenticated';\nimport { Head } from '@inertiajs/react';\n\nexport default function Show({ user }) {\n    return (\n        <Layout>\n            <Head title=\"Welcome\" />\n            <h1>Welcome</h1>\n            <p>Hello {user.name}, welcome to Inertia.</p>\n        </Layout>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-disk Storage Operation\nDESCRIPTION: Storing files using a specific disk (e.g., S3) with Laravel's Storage facade\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nStorage::disk('s3')->put('avatars/1', $content);\n```\n\n----------------------------------------\n\nTITLE: Managing Concurrent Process Pools\nDESCRIPTION: Demonstrates creating and managing a pool of concurrent processes with output handling and result collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Process\\Pool;\nuse Illuminate\\Support\\Facades\\Process;\n\n$pool = Process::pool(function (Pool $pool) {\n    $pool->path(__DIR__)->command('bash import-1.sh');\n    $pool->path(__DIR__)->command('bash import-2.sh');\n    $pool->path(__DIR__)->command('bash import-3.sh');\n})->start(function (string $type, string $output, int $key) {\n    // ...\n});\n\nwhile ($pool->running()->isNotEmpty()) {\n    // ...\n}\n\n$results = $pool->wait();\n```\n\n----------------------------------------\n\nTITLE: Generating Model with Policy in Laravel\nDESCRIPTION: Command to create an Eloquent model with a corresponding policy class for authorization rules.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Generate a model and a FlightPolicy class...\nphp artisan make:model Flight --policy\n```\n\n----------------------------------------\n\nTITLE: Importing External Envoy Tasks\nDESCRIPTION: Directive to import tasks from external Envoy files\nSOURCE: https://github.com/laravel/docs/blob/12.x/envoy.md#2025-04-21_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n@import('vendor/package/Envoy.blade.php')\n```\n\n----------------------------------------\n\nTITLE: Encrypting Values in a Laravel Controller\nDESCRIPTION: Example of encrypting a user's API token in a Laravel controller. The token is encrypted using the Crypt facade before being stored in the database, providing secure storage of sensitive data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/encryption.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Crypt;\n\nclass DigitalOceanTokenController extends Controller\n{\n    /**\n     * Store a DigitalOcean API token for the user.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $request->user()->fill([\n            'token' => Crypt::encryptString($request->token),\n        ])->save();\n\n        return redirect('/secrets');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Slicing Collections Starting From an Index with slice in Laravel Collections - PHP\nDESCRIPTION: Illustrates the slice method to extract a portion of a collection beginning at a given start index. It optionally accepts a second argument limiting the number of returned items. The method preserves the original keys unless reindexed explicitly using the values method. Key preservation is important when working with associative arrays.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_111\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$slice = $collection->slice(4);\n\n$slice->all();\n\n// [5, 6, 7, 8, 9, 10]\n```\n\nLANGUAGE: php\nCODE:\n```\n$slice = $collection->slice(4, 2);\n\n$slice->all();\n\n// [5, 6]\n```\n\n----------------------------------------\n\nTITLE: Converting a String to HtmlString in Laravel\nDESCRIPTION: The toHtmlString method converts the given string to an instance of Illuminate\\Support\\HtmlString, which will not be escaped when rendered in Blade templates.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_147\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$htmlString = Str::of('Nuno Maduro')->toHtmlString();\n```\n\n----------------------------------------\n\nTITLE: Testing Mail Headers and Recipients\nDESCRIPTION: Example of testing mail headers including to, cc, bcc, reply-to, from, and subject fields.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nMail::assertSent(OrderShipped::class, function (OrderShipped $mail) use ($user) {\n    return $mail->hasTo($user->email) &&\n           $mail->hasCc('...') &&\n           $mail->hasBcc('...') &&\n           $mail->hasReplyTo('...') &&\n           $mail->hasFrom('...') &&\n           $mail->hasSubject('...');\n});\n```\n\n----------------------------------------\n\nTITLE: Search Route Implementation in Laravel\nDESCRIPTION: Example of implementing a search endpoint in Laravel routes that returns JSON results.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\nuse Illuminate\\Http\\Request;\n\nRoute::get('/search', function (Request $request) {\n    return Order::search($request->search)->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Service Provider with Artisan CLI in Laravel\nDESCRIPTION: Use the Artisan CLI command to generate a new service provider in Laravel. This command will create a new provider class and automatically register it in the application's bootstrap/providers.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:provider RiakServiceProvider\n```\n\n----------------------------------------\n\nTITLE: Customizing Password Reset Notification in Laravel\nDESCRIPTION: Demonstrates how to customize the password reset notification by overriding the sendPasswordResetNotification method in the User model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passwords.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Notifications\\ResetPasswordNotification;\n\n/**\n * Send a password reset notification to the user.\n *\n * @param  string  $token\n */\npublic function sendPasswordResetNotification($token): void\n{\n    $url = 'https://example.com/reset-password?token='.$token;\n\n    $this->notify(new ResetPasswordNotification($url));\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereNull to Check for NULL Values in Laravel\nDESCRIPTION: The whereNull method verifies that the value of the given column is NULL.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->whereNull('updated_at')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using blank() function to check for empty values in Laravel PHP\nDESCRIPTION: The blank() function determines whether the given value is 'blank' (empty string, whitespace, null, or empty collection). Returns true for blank values, false otherwise.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_74\n\nLANGUAGE: php\nCODE:\n```\nblank('');\nblank('   ');\nblank(null);\nblank(collect());\n\n// true\n\nblank(0);\nblank(true);\nblank(false);\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Modifying Stripe Subscription Objects in PHP\nDESCRIPTION: Demonstrates how to retrieve a Stripe subscription object from a Cashier subscription model using the asStripeSubscription method, then directly modify and save changes to the Stripe object.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_122\n\nLANGUAGE: php\nCODE:\n```\n$stripeSubscription = $subscription->asStripeSubscription();\n\n$stripeSubscription->application_fee_percent = 5;\n\n$stripeSubscription->save();\n```\n\n----------------------------------------\n\nTITLE: Generating and Attaching Cookie Instances in Laravel\nDESCRIPTION: Demonstrates how to generate a Cookie instance using the cookie helper and attach it to a response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$cookie = cookie('name', 'value', $minutes);\n\nreturn response('Hello World')->cookie($cookie);\n```\n\n----------------------------------------\n\nTITLE: Creating Nullable Column in Laravel Migration\nDESCRIPTION: Example of adding a nullable email column to users table using Laravel's Schema Builder.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('users', function (Blueprint $table) {\n    $table->string('email')->nullable();\n});\n```\n\n----------------------------------------\n\nTITLE: Using remember() Method with Laravel LazyCollection in PHP\nDESCRIPTION: Describes the remember() method on Laravel's LazyCollection, which caches values enumerated during iteration so subsequent enumerations reuse cached items instead of re-querying. This optimizes performance for expensive data sources like database cursors. Requires Laravel's LazyCollection and a database-backed model supporting cursors. The example shows deferred query execution and re-using cached users data for multiple partial enumerations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_162\n\nLANGUAGE: php\nCODE:\n```\n// No query has been executed yet...\n$users = User::cursor()->remember();\n\n// The query is executed...\n// The first 5 users are hydrated from the database...\n$users->take(5)->all();\n\n// First 5 users come from the collection's cache...\n// The rest are hydrated from the database...\n$users->take(20)->all();\n```\n\n----------------------------------------\n\nTITLE: Examining a String without Modifying it in Laravel\nDESCRIPTION: The tap method passes the string to a given closure, allowing examination and interaction with the string without affecting it. The original string is returned regardless of what the closure returns.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_143\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('Laravel')\n    ->append(' Framework')\n    ->tap(function (Stringable $string) {\n        dump('String after append: '.$string);\n    })\n    ->upper();\n\n// LARAVEL FRAMEWORK\n```\n\n----------------------------------------\n\nTITLE: Registering Periodic Tasks with Ticks in Laravel Octane\nDESCRIPTION: Example of registering a tick operation in Laravel Octane with Swoole, which will execute a callback function at regular intervals. This example creates a task that runs every 10 seconds.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nOctane::tick('simple-ticker', fn () => ray('Ticking...'))\n    ->seconds(10);\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Ability Middleware\nDESCRIPTION: Middleware configuration for checking token abilities in the application bootstrap file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Sanctum\\Http\\Middleware\\CheckAbilities;\nuse Laravel\\Sanctum\\Http\\Middleware\\CheckForAnyAbility;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->alias([\n        'abilities' => CheckAbilities::class,\n        'ability' => CheckForAnyAbility::class,\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Wildcard in PHP\nDESCRIPTION: Shows how to use the 'is' method to check if a string matches a given pattern. It demonstrates using asterisks as wildcard values in the pattern.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_114\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$matches = Str::of('foobar')->is('foo*');\n\n// true\n\n$matches = Str::of('foobar')->is('baz*');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Querying Posts Relationship with Constraints\nDESCRIPTION: Example showing how to query the posts relationship with additional where constraints to filter active posts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$user->posts()->where('active', 1)->get();\n```\n\n----------------------------------------\n\nTITLE: Setting Migration Connection in Laravel\nDESCRIPTION: Specify a different database connection for a migration by setting the $connection property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The database connection that should be used by the migration.\n *\n * @var string\n */\nprotected $connection = 'pgsql';\n\n/**\n * Run the migrations.\n */\npublic function up(): void\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Maintenance Mode Task Configuration\nDESCRIPTION: Demonstrates how to configure tasks to run during maintenance mode using evenInMaintenanceMode method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')->evenInMaintenanceMode();\n```\n\n----------------------------------------\n\nTITLE: Excluding Keys from Arrays using Arr::except (PHP)\nDESCRIPTION: This snippet illustrates removing one or more key/value pairs from an array using Laravel's Arr::except utility. It is commonly used for filtering or cleaning up arrays before further processing. The function requires the Illuminate\\Support\\Arr namespace and takes the source array plus an array of keys to exclude as input.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['name' => 'Desk', 'price' => 100];\n\n$filtered = Arr::except($array, ['price']);\n// ['name' => 'Desk']\n```\n\n----------------------------------------\n\nTITLE: Setting Visible Attributes Temporarily\nDESCRIPTION: The `setVisible` method temporarily overrides which attributes are visible on each model within the collection.  It receives an array of attribute names that should be displayed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = $users->setVisible(['id', 'name']);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Modifying a String in Laravel\nDESCRIPTION: The when method invokes the given closure if a given condition is true. The closure will receive the fluent string instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_156\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('Taylor')\n    ->when(true, function (Stringable $string) {\n        return $string->append(' Otwell');\n    });\n\n// 'Taylor Otwell'\n```\n\n----------------------------------------\n\nTITLE: Testing Real-Time Facades with PHPUnit in Laravel\nDESCRIPTION: This snippet shows how to test the real-time facade implementation using PHPUnit, an alternative testing framework for Laravel. It demonstrates mocking the Publisher facade and asserting its behavior.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse App\\Models\\Podcast;\nuse Facades\\App\\Contracts\\Publisher;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Tests\\TestCase;\n\nclass PodcastTest extends TestCase\n{\n    use RefreshDatabase;\n\n    /**\n     * A test example.\n     */\n    public function test_podcast_can_be_published(): void\n    {\n        $podcast = Podcast::factory()->create();\n\n        Publisher::shouldReceive('publish')->once()->with($podcast);\n\n        $podcast->publish();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Dedicated Database Connection for Pulse\nDESCRIPTION: Environment variable configuration for using a separate database connection for Pulse to minimize impact on the main application database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_18\n\nLANGUAGE: env\nCODE:\n```\nPULSE_DB_CONNECTION=pulse\n```\n\n----------------------------------------\n\nTITLE: Redirecting to External Domains in Laravel\nDESCRIPTION: Shows how to redirect to an external domain using the away method, which creates a RedirectResponse without additional URL encoding or validation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nreturn redirect()->away('https://www.google.com');\n```\n\n----------------------------------------\n\nTITLE: Using Str::finish for String Suffix Enforcement in PHP\nDESCRIPTION: The Str::finish method adds a single instance of the given value to a string if it does not already end with that value, ensuring strings have specific endings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$adjusted = Str::finish('this/string', '/');\n\n// this/string/\n\n$adjusted = Str::finish('this/string/', '/');\n\n// this/string/\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Multi-search in Laravel\nDESCRIPTION: Shows how to make the multisearch function require at least one selection and customize the validation message.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$ids = multisearch(\n    label: 'Search for the users that should receive the mail',\n    options: fn (string $value) => strlen($value) > 0\n        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n        : [],\n    required: true\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$ids = multisearch(\n    label: 'Search for the users that should receive the mail',\n    options: fn (string $value) => strlen($value) > 0\n        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n        : [],\n    required: 'You must select at least one user.'\n);\n```\n\n----------------------------------------\n\nTITLE: Using Higher Order Message sum - PHP\nDESCRIPTION: Shows how to use the `sum` higher order message to quickly calculate the sum of a specific property (`votes`) across all items (e.g., User models) in a collection. This provides a concise way to aggregate numeric values from collection elements.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_155\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('group', 'Development')->get();\n\nreturn $users->sum->votes;\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Events and Listeners in Laravel\nDESCRIPTION: Example of manually registering event listeners using the Event facade in the boot method of a service provider. This approach gives more control over event registration compared to automatic discovery.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Domain\\Orders\\Events\\PodcastProcessed;\nuse App\\Domain\\Orders\\Listeners\\SendPodcastNotification;\nuse Illuminate\\Support\\Facades\\Event;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Event::listen(\n        PodcastProcessed::class,\n        SendPodcastNotification::class,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Service Provider in Laravel\nDESCRIPTION: Example of a basic service provider class in Laravel. This provider defines a register method to bind an implementation of a Connection class in the service container.\nSOURCE: https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\Services\\Riak\\Connection;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass RiakServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        $this->app->singleton(Connection::class, function (Application $app) {\n            return new Connection(config('riak'));\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Sail Artisan Commands\nDESCRIPTION: Running Artisan commands through Laravel Sail Docker environment\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/sail artisan list\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pennant Driver in PHP\nDESCRIPTION: Demonstrates how to implement a custom Pennant driver by creating a class that implements the Laravel\\Pennant\\Contracts\\Driver interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Extensions;\n\nuse Laravel\\Pennant\\Contracts\\Driver;\n\nclass RedisFeatureDriver implements Driver\n{\n    public function define(string $feature, callable $resolver): void {}\n    public function defined(): array {}\n    public function getAll(array $features): array {}\n    public function get(string $feature, mixed $scope): mixed {}\n    public function set(string $feature, mixed $scope, mixed $value): void {}\n    public function setForAllScopes(string $feature, mixed $value): void {}\n    public function delete(string $feature, mixed $scope): void {}\n    public function purge(array|null $features): void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Arrays with Allowed Keys in Laravel\nDESCRIPTION: This snippet demonstrates how to validate an array with a list of allowed keys using the 'array' rule in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_77\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\n\n$input = [\n    'user' => [\n        'name' => 'Taylor Otwell',\n        'username' => 'taylorotwell',\n        'admin' => true,\n    ],\n];\n\nValidator::make($input, [\n    'user' => 'array:name,username',\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Model Searching in Laravel Scout\nDESCRIPTION: Shows basic search implementation using Scout's search method to query models and retrieve results.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\n\n$orders = Order::search('Star Trek')->get();\n```\n\n----------------------------------------\n\nTITLE: ASCII Character Validation\nDESCRIPTION: Example showing how to restrict alpha validation to ASCII characters only.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n'username' => 'alpha:ascii'\n```\n\n----------------------------------------\n\nTITLE: Combining Keys and Values with combine() in PHP\nDESCRIPTION: The `combine` method creates a new associative collection by using the values from the original collection as keys and the values from a provided array or collection as the corresponding values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['name', 'age']);\n\n$combined = $collection->combine(['George', 29]);\n\n$combined->all();\n\n// ['name' => 'George', 'age' => 29]\n```\n\n----------------------------------------\n\nTITLE: Implementing HasFeatures Trait in Laravel User Model\nDESCRIPTION: Shows how to add the HasFeatures trait to a User model and use its methods to check feature flags.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Laravel\\Pennant\\Concerns\\HasFeatures;\n\nclass User extends Authenticatable\n{\n    use HasFeatures;\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif ($user->features()->active('new-api')) {\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n// Values...\n$value = $user->features()->value('purchase-button')\n$values = $user->features()->values(['new-api', 'purchase-button']);\n\n// State...\n$user->features()->active('new-api');\n$user->features()->allAreActive(['new-api', 'server-api']);\n$user->features()->someAreActive(['new-api', 'server-api']);\n\n$user->features()->inactive('new-api');\n$user->features()->allAreInactive(['new-api', 'server-api']);\n$user->features()->someAreInactive(['new-api', 'server-api']);\n\n// Conditional execution...\n$user->features()->when('new-api',\n    fn () => /* ... */,\n    fn () => /* ... */,\n);\n\n$user->features()->unless('new-api',\n    fn () => /* ... */,\n    fn () => /* ... */,\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Notification to User (PHP)\nDESCRIPTION: Demonstrates how to send a notification to a user using the notify method provided by the Notifiable trait.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Notifications\\InvoicePaid;\n\n$user->notify(new InvoicePaid($invoice));\n```\n\n----------------------------------------\n\nTITLE: Customizing Policy Response HTTP Status in PHP\nDESCRIPTION: Shows how to customize the HTTP status code returned for a failed authorization check using the denyWithStatus and denyAsNotFound methods of the Response class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\Response;\n\n/**\n * Determine if the given post can be updated by the user.\n */\npublic function update(User $user, Post $post): Response\n{\n    return $user->id === $post->user_id\n        ? Response::allow()\n        : Response::denyAsNotFound();\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Middleware from Specific Routes in Laravel\nDESCRIPTION: Example of preventing middleware from being applied to a specific route within a middleware group using the withoutMiddleware method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\EnsureTokenIsValid;\n\nRoute::middleware([EnsureTokenIsValid::class])->group(function () {\n    Route::get('/', function () {\n        // ...\n    });\n\n    Route::get('/profile', function () {\n        // ...\n    })->withoutMiddleware([EnsureTokenIsValid::class]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using auth() function for authentication in Laravel PHP\nDESCRIPTION: The auth() function returns an authenticator instance as an alternative to the Auth facade. It can access the default or a specified guard.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n$user = auth()->user();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = auth('admin')->user();\n```\n\n----------------------------------------\n\nTITLE: Setting Max Request Count for Laravel Octane Workers\nDESCRIPTION: Command to start Laravel Octane with a custom maximum request count per worker.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan octane:start --max-requests=250\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Process Timeouts\nDESCRIPTION: Shows how to monitor and handle timeouts in asynchronous processes using ensureNotTimedOut method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$process = Process::timeout(120)->start('bash import.sh');\n\nwhile ($process->running()) {\n    $process->ensureNotTimedOut();\n\n    // ...\n\n    sleep(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Past Due Subscription Status in PHP\nDESCRIPTION: Method to determine if a subscription is in a past due state due to a failed payment, requiring the customer to update payment information.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription()->pastDue()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Casting for Search Engine Filters\nDESCRIPTION: Example of properly type casting numeric values for search engine filtering operations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function toSearchableArray()\n{\n    return [\n        'id' => (int) $this->id,\n        'name' => $this->name,\n        'price' => (float) $this->price,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Package Discovery in composer.json\nDESCRIPTION: Shows how to opt-out of package discovery for specific packages or all packages in the application's composer.json file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"extra\": {\n    \"laravel\": {\n        \"dont-discover\": [\n            \"barryvdh/laravel-debugbar\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Database Connections in Laravel\nDESCRIPTION: Command to monitor database connections and trigger alerts when connection count exceeds specified threshold. Accepts database names and maximum connection limit as parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan db:monitor --databases=mysql,pgsql --max=100\n```\n\n----------------------------------------\n\nTITLE: Custom Callback Waiting\nDESCRIPTION: Demonstrates using waitUsing method for custom waiting conditions with callbacks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$browser->waitUsing(10, 1, function () use ($something) {\n    return $something->isReady();\n}, \"Something wasn't ready in time.\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination Results with Blade\nDESCRIPTION: Example of displaying paginated results and navigation links using Blade templating.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<div class=\"container\">\n    @foreach ($users as $user)\n        {{ $user->name }}\n    @endforeach\n</div>\n\n{{ $users->links() }}\n```\n\n----------------------------------------\n\nTITLE: Intersecting Laravel Collection Using Callback (PHP)\nDESCRIPTION: Removes values from the collection that are not present in a given array or collection, using a custom callback for value comparison. This method preserves the original collection's keys for the matching items.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['Desk', 'Sofa', 'Chair']);\n\n$intersect = $collection->intersectUsing(['desk', 'chair', 'bookcase'], function ($a, $b) {\n    return strcasecmp($a, $b);\n});\n\n$intersect->all();\n\n// [0 => 'Desk', 2 => 'Chair']\n```\n\n----------------------------------------\n\nTITLE: Adding Products with Immediate Billing in Laravel Paddle\nDESCRIPTION: Method to add new products to a subscription and immediately invoice the customer, rather than waiting for the next billing cycle.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription()->swapAndInvoice(['price_chat', 'price_original' => 2]);\n```\n\n----------------------------------------\n\nTITLE: Database Seeder Test Example - PHPUnit\nDESCRIPTION: Shows how to run database seeders in PHPUnit tests, including running specific seeders or multiple seeders.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse Database\\Seeders\\OrderStatusSeeder;\nuse Database\\Seeders\\TransactionStatusSeeder;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    use RefreshDatabase;\n\n    /**\n     * Test creating a new order.\n     */\n    public function test_orders_can_be_created(): void\n    {\n        // Run the DatabaseSeeder...\n        $this->seed();\n\n        // Run a specific seeder...\n        $this->seed(OrderStatusSeeder::class);\n\n        // ...\n\n        // Run an array of specific seeders...\n        $this->seed([\n            OrderStatusSeeder::class,\n            TransactionStatusSeeder::class,\n            // ...\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DECIMAL Column in Laravel Migration\nDESCRIPTION: The decimal method creates a DECIMAL equivalent column with the given precision (total digits) and scale (decimal digits) in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n$table->decimal('amount', total: 8, places: 2);\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Vite Dev Server\nDESCRIPTION: Example configuration for setting up CORS in Vite development server with multiple origins and regex patterns.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: 'resources/js/app.js',\n            refresh: true,\n        }),\n    ],\n    server: {\n        cors: {\n            origin: [\n                /^https?:\\/\\/.*\\.laravel(:\\d+)?$/,\n            ],\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Storing Files with Local Storage Driver in Laravel\nDESCRIPTION: Example of writing to a local filesystem using Laravel's Storage facade. This writes to the local disk's root directory, which by default is storage/app/private.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Storage;\n\nStorage::disk('local')->put('example.txt', 'Contents');\n```\n\n----------------------------------------\n\nTITLE: Setting Default JSON Expression in Laravel Migration\nDESCRIPTION: Migration example showing how to create a table with a JSON column that has a default expression value using raw database functions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Query\\Expression;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('flights', function (Blueprint $table) {\n            $table->id();\n            $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n            $table->timestamps();\n        });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Applying a Castable Value Object in Model (PHP)\nDESCRIPTION: Shows how to assign a value object class (`Address`) directly in the model's `casts()` method. For this to work, the `Address` class must implement the `Illuminate\\Contracts\\Database\\Eloquent\\Castable` interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse App\\ValueObjects\\Address;\n\nprotected function casts(): array\n{\n    return [\n        'address' => Address::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Key with `Arr::has()` - PHP\nDESCRIPTION: This snippet demonstrates how to use `Arr::has()` to check if a key or an array of keys exist within a nested array using dot notation. It returns `true` if all specified keys exist, and `false` otherwise.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['product' => ['name' => 'Desk', 'price' => 100]];\n\n$contains = Arr::has($array, 'product.name');\n\n// true\n\n$contains = Arr::has($array, ['product.price', 'product.discount']);\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Creating a New Laravel Collection Instance (PHP)\nDESCRIPTION: A static method on the `Collection` class used to create a new collection instance from a given array or set of items.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_69\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Collection;\n\n$collection = Collection::make([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Checkout for Single-Charge Products\nDESCRIPTION: Example of using Cashier to redirect customers to Stripe Checkout for non-recurring, single-charge products. Includes route definitions for checkout, success, and cancellation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/checkout', function (Request $request) {\n    $stripePriceId = 'price_deluxe_album';\n\n    $quantity = 1;\n\n    return $request->user()->checkout([$stripePriceId => $quantity], [\n        'success_url' => route('checkout-success'),\n        'cancel_url' => route('checkout-cancel'),\n    ]);\n})->name('checkout');\n\nRoute::view('/checkout/success', 'checkout.success')->name('checkout-success');\nRoute::view('/checkout/cancel', 'checkout.cancel')->name('checkout-cancel');\n```\n\n----------------------------------------\n\nTITLE: Custom Template Mail Notification in Laravel\nDESCRIPTION: Demonstrates how to use custom templates for rendering notification emails using the view method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function toMail(object $notifiable): MailMessage\n{\n    return (new MailMessage)->view(\n        'mail.invoice.paid', ['invoice' => $this->invoice]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Array Accessibility with Laravel Arr (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to use the Arr::accessible helper function to determine if a given value is 'array accessible', meaning it can be accessed like an array. The snippet checks different types, such as arrays and objects, and returns a boolean indicating accessibility. Requires importing Illuminate\\Support\\Arr and, in some cases, Illuminate\\Support\\Collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Support\\Collection;\n\n$isAccessible = Arr::accessible(['a' => 1, 'b' => 2]);\n// true\n\n$isAccessible = Arr::accessible(new Collection);\n// true\n\n$isAccessible = Arr::accessible('abc');\n// false\n\n$isAccessible = Arr::accessible(new stdClass);\n// false\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Cashier Models in Service Provider\nDESCRIPTION: Code to inform Cashier about custom model implementations in the application's service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Cashier\\Subscription;\nuse App\\Models\\Cashier\\Transaction;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Cashier::useSubscriptionModel(Subscription::class);\n    Cashier::useTransactionModel(Transaction::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions for Failed Processes in PHP\nDESCRIPTION: Demonstrates how to throw exceptions for failed processes using the throw and throwIf methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$result = Process::run('ls -la')->throw();\n\n$result = Process::run('ls -la')->throwIf($condition);\n```\n\n----------------------------------------\n\nTITLE: Using dump() function for variable inspection in Laravel PHP\nDESCRIPTION: The dump() function outputs the given variables for debugging without stopping script execution, allowing inspection of variable values during execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_88\n\nLANGUAGE: php\nCODE:\n```\ndump($value);\n```\n\nLANGUAGE: php\nCODE:\n```\ndump($value1, $value2, $value3, ...);\n```\n\n----------------------------------------\n\nTITLE: Server Name Configuration\nDESCRIPTION: Environment variable configuration for customizing the server name in Pulse monitoring.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nPULSE_SERVER_NAME=load-balancer\n```\n\n----------------------------------------\n\nTITLE: Conditionally Modifying a String Based on Ending Content in Laravel\nDESCRIPTION: The whenEndsWith method invokes the given closure if the string ends with the given sub-string. The closure will receive the fluent string instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_162\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('disney world')->whenEndsWith('world', function (Stringable $string) {\n    return $string->title();\n});\n\n// 'Disney World'\n```\n\n----------------------------------------\n\nTITLE: Rendering Component from Custom Path\nDESCRIPTION: Shows how to render an anonymous component from a custom registered path without a namespace prefix.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_84\n\nLANGUAGE: blade\nCODE:\n```\n<x-panel />\n```\n\n----------------------------------------\n\nTITLE: Creating Small Increments Column\nDESCRIPTION: Creates an auto-incrementing UNSIGNED SMALLINT column as primary key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$table->smallIncrements('id');\n```\n\n----------------------------------------\n\nTITLE: Adding Billable Trait to User Model\nDESCRIPTION: Code snippet showing how to add the Billable trait to your User model to enable billing functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Cashier\\Billable;\n\nclass User extends Authenticatable\n{\n    use Billable;\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Record in Unique Validation\nDESCRIPTION: Example showing how to ignore a specific record when performing unique validation, useful for update operations where you don't want to trigger uniqueness validation for the current record.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\n\nValidator::make($data, [\n    'email' => [\n        'required',\n        Rule::unique('users')->ignore($user->id),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Middleware in Laravel Groups\nDESCRIPTION: This code shows how to replace one of Laravel's default middleware group entries with a custom middleware using the withMiddleware method in the bootstrap/app.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\StartCustomSession;\nuse Illuminate\\Session\\Middleware\\StartSession;\n\n$middleware->web(replace: [\n    StartSession::class => StartCustomSession::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Getting String Length in PHP\nDESCRIPTION: Shows how to use the 'length' method to get the length of a string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_124\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$length = Str::of('Laravel')->length();\n\n// 7\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Route with Precognition Middleware (PHP)\nDESCRIPTION: Adds the HandlePrecognitiveRequests middleware to a Laravel route to enable Precognition for live validation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Requests\\StoreUserRequest;\nuse Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests;\n\nRoute::post('/users', function (StoreUserRequest $request) {\n    // ...\n})->middleware([HandlePrecognitiveRequests::class]);\n```\n\n----------------------------------------\n\nTITLE: Randomly Shuffling Array Items Using Laravel Arr Shuffle Method in PHP\nDESCRIPTION: The Arr::shuffle method randomly rearranges items in an array and returns the shuffled array. It requires Illuminate\\Support\\Arr and a single array parameter. This method is useful for randomizing item order in collections for UI or testing purposes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = Arr::shuffle([1, 2, 3, 4, 5]);\n\n// [3, 2, 5, 1, 4] - (generated randomly)\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Cast with Parameters in Model (PHP)\nDESCRIPTION: Demonstrates how to apply a custom cast (`AsHash`) to an Eloquent model attribute (`secret`) within the `casts()` method (or `$casts` property). It specifies the 'sha256' algorithm as a parameter to the cast's constructor by appending `:sha256` to the class name.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the attributes that should be cast.\n *\n * @return array<string, string>\n */\nprotected function casts(): array\n{\n    return [\n        'secret' => AsHash::class.':sha256',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Pulse Worker Command\nDESCRIPTION: Artisan command to process Pulse entries from Redis stream into the database when using the Redis ingest driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nphp artisan pulse:work\n```\n\n----------------------------------------\n\nTITLE: Previewing Laravel Mailable in Browser\nDESCRIPTION: Shows how to preview a mailable's rendered content directly in the browser by returning it from a route closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/mailable', function () {\n    $invoice = App\\Models\\Invoice::find(1);\n\n    return new App\\Mail\\InvoicePaid($invoice);\n});\n```\n\n----------------------------------------\n\nTITLE: Using the On Method with Laravel Dusk Pages\nDESCRIPTION: The `on` method loads a page's selectors and methods into the current test context without explicitly navigating to it, useful when redirected to a page after an action.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_72\n\nLANGUAGE: php\nCODE:\n```\nuse Tests\\Browser\\Pages\\CreatePlaylist;\n\n$browser->visit('/dashboard')\n    ->clickLink('Create Playlist')\n    ->on(new CreatePlaylist)\n    ->assertSee('@create');\n```\n\n----------------------------------------\n\nTITLE: Channel Class Implementation\nDESCRIPTION: Example of a channel class with authorization logic in the join method using model binding.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Broadcasting;\n\nuse App\\Models\\Order;\nuse App\\Models\\User;\n\nclass OrderChannel\n{\n    /**\n     * Create a new channel instance.\n     */\n    public function __construct() {}\n\n    /**\n     * Authenticate the user's access to the channel.\n     */\n    public function join(User $user, Order $order): array|bool\n    {\n        return $user->id === $order->user_id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including a Custom Card in the Pulse Dashboard\nDESCRIPTION: Example of how to include a custom Livewire component in the Laravel Pulse dashboard view with column width configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_26\n\nLANGUAGE: blade\nCODE:\n```\n<x-pulse>\n    ...\n\n    <livewire:pulse.top-sellers cols=\"4\" />\n</x-pulse>\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Checkout and Updating Order Status\nDESCRIPTION: Example of retrieving the Stripe Checkout session, verifying payment status, and updating the corresponding order in the application database after a successful checkout.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\nuse Illuminate\\Http\\Request;\nuse Laravel\\Cashier\\Cashier;\n\nRoute::get('/checkout/success', function (Request $request) {\n    $sessionId = $request->get('session_id');\n\n    if ($sessionId === null) {\n        return;\n    }\n\n    $session = Cashier::stripe()->checkout->sessions->retrieve($sessionId);\n\n    if ($session->payment_status !== 'paid') {\n        return;\n    }\n\n    $orderId = $session['metadata']['order_id'] ?? null;\n\n    $order = Order::findOrFail($orderId);\n\n    $order->update(['status' => 'completed']);\n\n    return view('checkout-success', ['order' => $order]);\n})->name('checkout-success');\n```\n\n----------------------------------------\n\nTITLE: Generating hidden method input - Laravel Blade\nDESCRIPTION: This snippet demonstrates how to generate an HTML hidden input field that spoofs the HTTP verb using the `method_field` helper function within a Blade template. It is used to simulate HTTP verbs like DELETE or PUT in HTML forms, which natively only support GET and POST.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_97\n\nLANGUAGE: blade\nCODE:\n```\n<form method=\"POST\">\n    {{ method_field('DELETE') }}\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Carbon with ULIDs in Laravel\nDESCRIPTION: Using Carbon's createFromId method to extract the creation date from a ULID, as ULIDs contain a timestamp component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Carbon;\nuse Illuminate\\Support\\Str;\n\n$date = Carbon::createFromId((string) Str::ulid());\n```\n\n----------------------------------------\n\nTITLE: Installing Slack Notification Channel in Laravel\nDESCRIPTION: Command to install the Laravel Slack notification channel via Composer package manager.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/slack-notification-channel\n```\n\n----------------------------------------\n\nTITLE: Using whereIn for Multiple Value Matching in Laravel\nDESCRIPTION: The whereIn method verifies that a given column's value is contained within the given array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->whereIn('id', [1, 2, 3])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Flattening Collections with collapse() in PHP\nDESCRIPTION: The `collapse` method flattens a collection of arrays into a single, one-dimensional collection. It merges the elements of the inner arrays.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]);\n\n$collapsed = $collection->collapse();\n\n$collapsed->all();\n\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n----------------------------------------\n\nTITLE: Updating Intermediate Table Record in Laravel Eloquent\nDESCRIPTION: Demonstrates how to update an existing record in the intermediate table of a many-to-many relationship using the updateExistingPivot() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_104\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->roles()->updateExistingPivot($roleId, [\n    'active' => false,\n]);\n```\n\n----------------------------------------\n\nTITLE: Taking Items Until a Condition with takeUntil() - PHP\nDESCRIPTION: Explains the takeUntil method which returns items from a collection until a given callback returns true or a specified value is found. The method returns all the items if the condition never triggers true. Inputs are a callback or value, and output is a subset collection. Uses Laravel Collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_127\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4]);\n\n$subset = $collection->takeUntil(function (int $item) {\n    return $item >= 3;\n});\n\n$subset->all();\n\n// [1, 2]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4]);\n\n$subset = $collection->takeUntil(3);\n\n$subset->all();\n\n// [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact JSON Structure in Laravel Tests\nDESCRIPTION: This snippet demonstrates how to assert that a response contains an exact match of the given JSON structure, failing if any additional keys are present.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$response->assertExactJsonStructure(array $data);\n```\n\n----------------------------------------\n\nTITLE: Implementing ShouldBeUniqueUntilProcessing for Jobs\nDESCRIPTION: Example of a job that implements ShouldBeUniqueUntilProcessing to make the job unique only until processing begins, rather than until processing completes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\Product;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldBeUniqueUntilProcessing;\n\nclass UpdateSearchIndex implements ShouldQueue, ShouldBeUniqueUntilProcessing\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Single Action Controller Implementation\nDESCRIPTION: Example of a single action controller in Laravel that uses the __invoke method to handle a specific action. This approach is useful for complex, dedicated controller actions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nclass ProvisionServer extends Controller\n{\n    /**\n     * Provision a new web server.\n     */\n    public function __invoke()\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Plans for Typed Subscriptions in Laravel Paddle\nDESCRIPTION: Method to change the plan for a specific subscription type by referencing the subscription type in the 'subscription' method before calling 'swap'.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('swimming')->swap($swimmingYearly = 'pri_456');\n```\n\n----------------------------------------\n\nTITLE: Custom Foreign Key BelongsTo Relationship in Laravel\nDESCRIPTION: Shows how to specify a custom foreign key when defining a belongsTo relationship\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the post that owns the comment.\n */\npublic function post(): BelongsTo\n{\n    return $this->belongsTo(Post::class, 'foreign_key');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Collection After Method with Closure PHP\nDESCRIPTION: Illustrates using the `after` method by providing a closure. The method finds the first item that satisfies the condition defined by the closure and returns the item immediately following it in the collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ncollect([2, 4, 6, 8])->after(function (int $item, int $key) {\n    return $item > 5;\n});\n\n// 8\n```\n\n----------------------------------------\n\nTITLE: Checking for Incomplete Payments in Laravel Cashier\nDESCRIPTION: These code snippets show how to check if a user or subscription has an incomplete payment using the hasIncompletePayment method. It can be used on both the billable model and subscription instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_119\n\nLANGUAGE: php\nCODE:\n```\nif ($user->hasIncompletePayment('default')) {\n    // ...\n}\n\nif ($user->subscription('default')->hasIncompletePayment()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Item by Key - PHP\nDESCRIPTION: The `forget` method removes an item from the collection based on its key or an array of keys.  Unlike most other collection methods, `forget` modifies the collection in place rather than returning a new one.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n\n// Forget a single key...\n$collection->forget('name');\n\n// ['framework' => 'laravel']\n\n// Forget multiple keys...\n$collection->forget(['name', 'framework']);\n\n// []\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Slack Notifications with Block Kit\nDESCRIPTION: Example of creating a rich Slack notification using Block Kit API with headers, context blocks, and section blocks for invoice payment notification.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\ContextBlock;\nuse Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\SectionBlock;\nuse Illuminate\\Notifications\\Slack\\BlockKit\\Composites\\ConfirmObject;\nuse Illuminate\\Notifications\\Slack\\SlackMessage;\n\n/**\n * Get the Slack representation of the notification.\n */\npublic function toSlack(object $notifiable): SlackMessage\n{\n    return (new SlackMessage)\n        ->text('One of your invoices has been paid!')\n        ->headerBlock('Invoice Paid')\n        ->contextBlock(function (ContextBlock $block) {\n            $block->text('Customer #1234');\n        })\n        ->sectionBlock(function (SectionBlock $block) {\n            $block->text('An invoice has been paid.');\n            $block->field(\"*Invoice No:*\\n1000\")->markdown();\n            $block->field(\"*Invoice Recipient:*\\ntaylor@laravel.com\")->markdown();\n        })\n        ->dividerBlock()\n        ->sectionBlock(function (SectionBlock $block) {\n            $block->text('Congratulations!');\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Reducing Laravel Collection to a Single Value in PHP\nDESCRIPTION: Demonstrates the `reduce` method which iteratively reduces a collection to a single value using a callback function. The callback receives a carry value and the current item, optionally with the key. An initial carry value can be provided. Inputs are a collection and a user-defined function; output is a single aggregated value.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_98\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3]);\n\n$total = $collection->reduce(function (?int $carry, int $item) {\n    return $carry + $item;\n});\n\n// 6\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection->reduce(function (int $carry, int $item) {\n    return $carry + $item;\n}, 4);\n\n// 10\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'usd' => 1400,\n    'gbp' => 1200,\n    'eur' => 1000,\n]);\n\n$ratio = [\n    'usd' => 1,\n    'gbp' => 1.37,\n    'eur' => 1.22,\n];\n\n$collection->reduce(function (int $carry, int $value, string $key) use ($ratio) {\n    return $carry + ($value * $ratio[$key]);\n}, 0);\n\n// 4264\n```\n\n----------------------------------------\n\nTITLE: Implementing MustVerifyEmail Interface in User Model (PHP)\nDESCRIPTION: This snippet shows how to implement the MustVerifyEmail interface in the User model to enable email verification functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/verification.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\n\nclass User extends Authenticatable implements MustVerifyEmail\n{\n    use Notifiable;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating API Resource Controller in Laravel\nDESCRIPTION: Uses Artisan command to create an API resource controller that excludes create and edit methods, suitable for RESTful API development.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:controller PhotoController --api\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring Before Last Occurrence in Laravel PHP\nDESCRIPTION: The beforeLast method returns everything before the last occurrence of the given value in a string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_85\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slice = Str::of('This is my name')->beforeLast('is');\n\n// 'This '\n```\n\n----------------------------------------\n\nTITLE: Autoloading Package Components in Laravel\nDESCRIPTION: Demonstrates how to use the componentNamespace method to automatically load component classes from a specified namespace using a vendor prefix.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_71\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Blade;\n\n/**\n * Bootstrap your package's services.\n */\npublic function boot(): void\n{\n    Blade::componentNamespace('Nightshade\\\\Views\\\\Components', 'nightshade');\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cache Driver for Unique Job Locks\nDESCRIPTION: Example showing how to customize which cache driver is used for obtaining the lock for a unique job by implementing the uniqueVia method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Cache\\Repository;\nuse Illuminate\\Support\\Facades\\Cache;\n\nclass UpdateSearchIndex implements ShouldQueue, ShouldBeUnique\n{\n    // ...\n\n    /**\n     * Get the cache driver for the unique job lock.\n     */\n    public function uniqueVia(): Repository\n    {\n        return Cache::driver('redis');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Single Charges to Subscriptions in Laravel Paddle\nDESCRIPTION: Methods for adding one-time charges to existing subscriptions. The 'charge' method adds the charge on the next billing cycle, while 'chargeAndInvoice' bills the customer immediately.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n// Charge a single price...\n$response = $user->subscription()->charge('pri_123');\n\n// Charge multiple prices at once...\n$response = $user->subscription()->charge(['pri_123', 'pri_456']);\n```\n\n----------------------------------------\n\nTITLE: Activating and Deactivating Features in PHP with Laravel Pennant\nDESCRIPTION: Demonstrates how to activate and deactivate features for different scopes using Laravel Pennant's Feature class. Also shows how to set rich values for features.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Pennant\\Feature;\n\n// Activate the feature for the default scope...\nFeature::activate('new-api');\n\n// Deactivate the feature for the given scope...\nFeature::for($user->team)->deactivate('billing-v2');\n\nFeature::activate('purchase-button', 'seafoam-green');\n\nFeature::forget('purchase-button');\n```\n\n----------------------------------------\n\nTITLE: Rescuing from Exceptions - Laravel PHP\nDESCRIPTION: These snippets show how to use the `rescue()` helper function.  The first catches exceptions within a closure and reports them but continues execution. The second and third also define default return values upon exception, using either a static value or a closure. A fourth snippet shows how to conditionally report exceptions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_112\n\nLANGUAGE: php\nCODE:\n```\nreturn rescue(function () {\n    return $this->method();\n});\n\nreturn rescue(function () {\n    return $this->method();\n}, false);\n\nreturn rescue(function () {\n    return $this->method();\n}, function () {\n    return $this->failure();\n});\n\nreturn rescue(function () {\n    return $this->method();\n}, report: function (Throwable $throwable) {\n    return $throwable instanceof InvalidArgumentException;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sleep Duration for Laravel Queue Worker\nDESCRIPTION: Artisan command to set the sleep duration (3 seconds) between job polling attempts when the queue is empty. Controls how frequently the worker checks for new jobs, affecting resource usage.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_75\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work --sleep=3\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Blade Directives in Laravel\nDESCRIPTION: Demonstrates how to extend Blade by creating a custom directive using the directive method, in this case, a @datetime directive for formatting dates.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_100\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Blade;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    public function boot(): void\n    {\n        Blade::directive('datetime', function (string $expression) {\n            return \"<?php echo ($expression)->format('m/d/Y H:i'); ?>\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Owner Key in BelongsTo Relationship in Laravel\nDESCRIPTION: Example of customizing both the foreign key and owner key in a belongsTo relationship. This is used when the parent model doesn't use id as its primary key or when using a different column for the association.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the user that owns the phone.\n */\npublic function user(): BelongsTo\n{\n    return $this->belongsTo(User::class, 'foreign_key', 'owner_key');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Response Instance - Laravel PHP\nDESCRIPTION: These snippets demonstrate different ways of creating response instances using the `response()` helper function. You can create a basic response with content and headers or a JSON response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_114\n\nLANGUAGE: php\nCODE:\n```\nreturn response('Hello World', 200, $headers);\n\nreturn response()->json(['foo' => 'bar'], 200, $headers);\n```\n\n----------------------------------------\n\nTITLE: Using Asset Prefetching in Laravel\nDESCRIPTION: Configuration for enabling asset prefetching in a Laravel service provider to improve performance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Vite;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        // ...\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Vite::prefetch(concurrency: 3);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Cookies to Responses in Laravel\nDESCRIPTION: Demonstrates how to attach a cookie to an outgoing response using the cookie method, including various cookie parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn response('Hello World')->cookie(\n    'name', 'value', $minutes\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn response('Hello World')->cookie(\n    'name', 'value', $minutes, $path, $domain, $secure, $httpOnly\n);\n```\n\n----------------------------------------\n\nTITLE: Counting Items with count() in PHP\nDESCRIPTION: The `count` method returns the total number of items present in the collection. It is an alias for the standard PHP `count()` function applied to the collection's underlying items.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4]);\n\n$collection->count();\n\n// 4\n```\n\n----------------------------------------\n\nTITLE: Running Laravel About Command\nDESCRIPTION: Use the 'about' Artisan command to display an overview of the application's configuration, drivers, and environment.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan about\n```\n\n----------------------------------------\n\nTITLE: Using Stateless Authentication for APIs\nDESCRIPTION: Method to disable session state verification for stateless API authentication that doesn't use cookies.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Socialite\\Facades\\Socialite;\n\nreturn Socialite::driver('google')->stateless()->user();\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Cancellation in Laravel\nDESCRIPTION: Route handler for processing subscription cancellations. Cancels the user's active subscription at the end of the current billing period.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::put('/subscription/cancel', function (Request $request, $price) {\n    $user->subscription()->cancel();\n\n    return redirect()->route('dashboard');\n})->name('subscription.cancel');\n```\n\n----------------------------------------\n\nTITLE: Custom Owner Key BelongsTo Relationship in Laravel\nDESCRIPTION: Shows how to specify both custom foreign key and owner key in a belongsTo relationship\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the post that owns the comment.\n */\npublic function post(): BelongsTo\n{\n    return $this->belongsTo(Post::class, 'foreign_key', 'owner_key');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Matching Item with first Method in PHP\nDESCRIPTION: The first method returns the first element passing an optional truth test. If called without arguments, it returns the first element or null if empty. Input is a collection and optionally a closure used as a truth test. Output is the first matching element or null.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\ncollect([1, 2, 3, 4])->first(function (int $value, int $key) {\n    return $value > 2;\n});\n\n// 3\n```\n\nLANGUAGE: php\nCODE:\n```\ncollect([1, 2, 3, 4])->first();\n\n// 1\n```\n\n----------------------------------------\n\nTITLE: Validation Error JSON Response Format\nDESCRIPTION: Example of Laravel's JSON response format for validation errors including nested error messages\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"The team name must be a string. (and 4 more errors)\",\n    \"errors\": {\n        \"team_name\": [\n            \"The team name must be a string.\",\n            \"The team name must be at least 1 characters.\"\n        ],\n        \"authorization.role\": [\n            \"The selected authorization.role is invalid.\"\n        ],\n        \"users.0.email\": [\n            \"The users.0.email field is required.\"\n        ],\n        \"users.2.email\": [\n            \"The users.2.email must be a valid email address.\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scoped Event Faking in Laravel Tests (Pest)\nDESCRIPTION: This snippet shows how to use scoped event faking in Laravel tests using Pest. It demonstrates faking events for a specific portion of the test while allowing normal event dispatching outside that scope.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Events\\OrderCreated;\nuse App\\Models\\Order;\nuse Illuminate\\Support\\Facades\\Event;\n\ntest('orders can be processed', function () {\n    $order = Event::fakeFor(function () {\n        $order = Order::factory()->create();\n\n        Event::assertDispatched(OrderCreated::class);\n\n        return $order;\n    });\n\n    // Events are dispatched as normal and observers will run ...\n    $order->update([...]);\n});\n```\n\n----------------------------------------\n\nTITLE: Masking Portions of Strings in PHP\nDESCRIPTION: Demonstrates how to use the 'mask' method to obfuscate parts of a string, useful for hiding sensitive information like email addresses or phone numbers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_129\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('taylor@example.com')->mask('*', 3);\n\n// tay***************\n\n$string = Str::of('taylor@example.com')->mask('*', -15, 3);\n\n// tay***@example.com\n\n$string = Str::of('taylor@example.com')->mask('*', 4, -4);\n\n// tayl**********.com\n```\n\n----------------------------------------\n\nTITLE: Accessing Homestead Site via Browser\nDESCRIPTION: Command to access a Homestead site through a web browser after configuring the hosts file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhttp://homestead.test\n```\n\n----------------------------------------\n\nTITLE: Cloning Homestead Repository in Shell\nDESCRIPTION: Shell commands to clone the Laravel Homestead repository into the user's home directory and checkout the release branch.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/laravel/homestead.git ~/Homestead\ncd ~/Homestead\ngit checkout release\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Discovery in composer.json\nDESCRIPTION: Demonstrates how to set up package discovery in the composer.json file, allowing Laravel to automatically register service providers and facades.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"extra\": {\n    \"laravel\": {\n        \"providers\": [\n            \"Barryvdh\\\\Debugbar\\\\ServiceProvider\"\n        ],\n        \"aliases\": {\n            \"Debugbar\": \"Barryvdh\\\\Debugbar\\\\Facade\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Email Verification Link Clicks (PHP)\nDESCRIPTION: This code defines a route to handle requests when users click the email verification link, using the EmailVerificationRequest.\nSOURCE: https://github.com/laravel/docs/blob/12.x/verification.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Foundation\\Auth\\EmailVerificationRequest;\n\nRoute::get('/email/verify/{id}/{hash}', function (EmailVerificationRequest $request) {\n    $request->fulfill();\n\n    return redirect('/home');\n})->middleware(['auth', 'signed'])->name('verification.verify');\n```\n\n----------------------------------------\n\nTITLE: Joining Laravel Collection Values into String (PHP)\nDESCRIPTION: Concatenates the collection's values into a string. An optional second argument allows specifying a separator string for the last element.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_61\n\nLANGUAGE: php\nCODE:\n```\ncollect(['a', 'b', 'c'])->join(', '); // 'a, b, c'\ncollect(['a', 'b', 'c'])->join(', ', ', and '); // 'a, b, and c'\ncollect(['a', 'b'])->join(', ', ' and '); // 'a and b'\ncollect(['a'])->join(', ', ' and '); // 'a'\ncollect([])->join(', ', ' and '); // ''\n```\n\n----------------------------------------\n\nTITLE: Starting Laravel Octane Server\nDESCRIPTION: Command to start the Laravel Octane server using the default configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan octane:start\n```\n\n----------------------------------------\n\nTITLE: Inspecting Process Result in PHP\nDESCRIPTION: Shows various methods available on the ProcessResult instance to inspect the outcome of a process execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$result = Process::run('ls -la');\n\n$result->successful();\n$result->failed();\n$result->exitCode();\n$result->output();\n$result->errorOutput();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiselect with Default Values\nDESCRIPTION: Implementation of multiselect with default selections and custom hint message.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\multiselect;\n\n$permissions = multiselect(\n    label: 'What permissions should be assigned?',\n    options: ['Read', 'Create', 'Update', 'Delete'],\n    default: ['Read', 'Create'],\n    hint: 'Permissions may be updated at any time.'\n);\n```\n\n----------------------------------------\n\nTITLE: Formatting SMS Notifications with Vonage in Laravel\nDESCRIPTION: Shows how to create an SMS notification by defining a toVonage method that returns a VonageMessage instance with the SMS content.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Notifications\\Messages\\VonageMessage;\n\n/**\n * Get the Vonage / SMS representation of the notification.\n */\npublic function toVonage(object $notifiable): VonageMessage\n{\n    return (new VonageMessage)\n        ->content('Your SMS message content');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Hidden Attributes Temporarily\nDESCRIPTION: The `setHidden` method temporarily overrides which attributes are hidden on each model within the collection. This method receives an array of attribute names to be hidden.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = $users->setHidden(['email', 'password', 'remember_token']);\n```\n\n----------------------------------------\n\nTITLE: Finding Max Value using `max` Method in PHP\nDESCRIPTION: The `max` method retrieves the maximum value within a collection, either for a specific key in a collection of arrays or for the collection's values directly. The first example shows `max` being applied on a collection of associative arrays, specifying the key to compare. The second example applies max to a collection of integers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$max = collect([\n    ['foo' => 10],\n    ['foo' => 20]\n])->max('foo');\n\n// 20\n\n$max = collect([1, 2, 3, 4, 5])->max();\n\n// 5\n```\n\n----------------------------------------\n\nTITLE: Retrieving Translation Strings (Laravel)\nDESCRIPTION: Examples of retrieving translation strings using the __ helper function in PHP and Blade templates.\nSOURCE: https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\necho __('messages.welcome');\n\necho __('I love programming.');\n\n// In Blade template\n{{ __('messages.welcome') }}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Exception Types in Laravel\nDESCRIPTION: Examples of configuring Laravel to ignore specific exception types using dontReport and ShouldntReport interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Exceptions;\n\nuse Exception;\nuse Illuminate\\Contracts\\Debug\\ShouldntReport;\n\nclass PodcastProcessingException extends Exception implements ShouldntReport\n{\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Story Definition with Multiple Tasks\nDESCRIPTION: Example of grouping multiple tasks into a story for deployment workflow\nSOURCE: https://github.com/laravel/docs/blob/12.x/envoy.md#2025-04-21_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n@servers(['web' => ['user@192.168.1.1']])\n\n@story('deploy')\n    update-code\n    install-dependencies\n@endstory\n\n@task('update-code')\n    cd /home/user/example.com\n    git pull origin master\n@endtask\n\n@task('install-dependencies')\n    cd /home/user/example.com\n    composer install\n@endtask\n```\n\n----------------------------------------\n\nTITLE: Problematic Singleton Binding in Laravel Octane\nDESCRIPTION: Example of a problematic singleton binding that injects the entire application container, which may cause issues in Octane.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    $this->app->singleton(Service::class, function (Application $app) {\n        return new Service($app);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Query Components in Laravel\nDESCRIPTION: Demonstrates how to create and use reusable query components using the tap method, extracting common query logic into a separate class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Scopes;\n\nuse Illuminate\\Database\\Query\\Builder;\n\nclass DestinationFilter\n{\n    public function __construct(\n        private ?string $destination,\n    ) {\n        //\n    }\n\n    public function __invoke(Builder $query): void\n    {\n        $query->when($this->destination, function (Builder $query) {\n            $query->where('destination', $this->destination);\n        });\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Scopes\\DestinationFilter;\nuse Illuminate\\Database\\Query\\Builder;\nuse Illuminate\\Support\\Facades\\DB;\n\nDB::table('flights')\n    ->tap(new DestinationFilter($destination))\n    ->orderByDesc('price')\n    ->get();\n\n// ...\n\nDB::table('flights')\n    ->tap(new DestinationFilter($destination))\n    ->where('user', $request->user()->id)\n    ->orderBy('destination')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using logger() function for application logging in Laravel PHP\nDESCRIPTION: The logger() function writes debug level messages to the log with optional contextual data. When called without arguments, it returns a logger instance for different log levels.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_96\n\nLANGUAGE: php\nCODE:\n```\nlogger('Debug message');\n```\n\nLANGUAGE: php\nCODE:\n```\nlogger('User has logged in.', ['id' => $user->id]);\n```\n\nLANGUAGE: php\nCODE:\n```\nlogger()->error('You are not allowed here.');\n```\n\n----------------------------------------\n\nTITLE: Using context() function to manage request context in Laravel PHP\nDESCRIPTION: The context() function gets or sets values in the current context with optional defaults. Used for storing and retrieving contextual data across the application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_80\n\nLANGUAGE: php\nCODE:\n```\n$value = context('trace_id');\n```\n\nLANGUAGE: php\nCODE:\n```\n$value = context('trace_id', $default);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\ncontext(['trace_id' => Str::uuid()->toString()]);\n```\n\n----------------------------------------\n\nTITLE: Managing ChromeDriver Installation\nDESCRIPTION: Various Artisan commands for installing and managing different versions of ChromeDriver for Dusk tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Install the latest version of ChromeDriver for your OS...\nphp artisan dusk:chrome-driver\n\n# Install a given version of ChromeDriver for your OS...\nphp artisan dusk:chrome-driver 86\n\n# Install a given version of ChromeDriver for all supported OSs...\nphp artisan dusk:chrome-driver --all\n\n# Install the version of ChromeDriver that matches the detected version of Chrome / Chromium for your OS...\nphp artisan dusk:chrome-driver --detect\n```\n\n----------------------------------------\n\nTITLE: Custom Render Hook Implementation\nDESCRIPTION: Example of using render hooks to customize view data and response handling in Folio pages\nSOURCE: https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\Post;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\View\\View;\n\nuse function Laravel\\Folio\\render;\n\nrender(function (View $view, Post $post) {\n    if (! Auth::user()->can('view', $post)) {\n        return response('Unauthorized', 403);\n    }\n\n    return $view->with('photos', $post->author->photos);\n}); ?>\n\n<div>\n    {{ $post->content }}\n</div>\n\n<div>\n    This author has also taken {{ count($photos) }} photos.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Swapping Plans for a Specific Subscription Type in Laravel Cashier\nDESCRIPTION: Method for changing the price plan of a specific subscription type, allowing users to upgrade or downgrade specific subscriptions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('swimming')->swap('price_swimming_yearly');\n```\n\n----------------------------------------\n\nTITLE: Specifying Notification Delivery Channels (PHP)\nDESCRIPTION: Defines the via method in a notification class to specify which channels the notification should be delivered on.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the notification's delivery channels.\n *\n * @return array<int, string>\n */\npublic function via(object $notifiable): array\n{\n    return $notifiable->prefers_sms ? ['vonage'] : ['mail', 'database'];\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Back with Input in Laravel\nDESCRIPTION: Demonstrates how to redirect the user back to their previous location with input data, typically used for form submissions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('/user/profile', function () {\n    // Validate the request...\n\n    return back()->withInput();\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Absence of Items using doesntContain Method in PHP\nDESCRIPTION: The doesntContain method determines whether the collection does not contain a given item. It accepts a closure for custom truth tests against collection elements, strings to check for absence of a value, or key/value pairs to check for absence of a specific pair. Comparison uses loose matching, considering string and integer equivalence. The input is a collection and a test value, and the output is a boolean indicating absence.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$collection->doesntContain(function (int $value, int $key) {\n    return $value < 5;\n});\n\n// false\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['name' => 'Desk', 'price' => 100]);\n\n$collection->doesntContain('Table');\n\n// true\n\n$collection->doesntContain('Desk');\n\n// false\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 100],\n]);\n\n$collection->doesntContain('product', 'Bookcase');\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Customizing Searchable Data in Laravel Scout\nDESCRIPTION: Demonstrates how to customize the data that gets synchronized to the search index by overriding the toSearchableArray method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Laravel\\Scout\\Searchable;\n\nclass Post extends Model\n{\n    use Searchable;\n\n    /**\n     * Get the indexable data array for the model.\n     *\n     * @return array<string, mixed>\n     */\n    public function toSearchableArray(): array\n    {\n        $array = $this->toArray();\n\n        // Customize the data array...\n\n        return $array;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Fallback Route in Laravel\nDESCRIPTION: This snippet demonstrates how to define a fallback route using Route::fallback to handle requests that don't match any other routes. This is commonly used for creating custom 404 handlers with middleware from the web group applied.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nRoute::fallback(function () {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Coupon When Creating Subscription in Laravel Cashier\nDESCRIPTION: Shows how to apply a coupon code to a subscription using the withCoupon method when creating a new subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$user->newSubscription('default', 'price_monthly')\n    ->withCoupon('code')\n    ->create($paymentMethod);\n```\n\n----------------------------------------\n\nTITLE: Handling Password Reset Link Request Submission in Laravel\nDESCRIPTION: This snippet defines a route that handles the form submission for requesting a password reset link. It validates the email, sends the reset link, and returns appropriate status messages.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passwords.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Password;\n\nRoute::post('/forgot-password', function (Request $request) {\n    $request->validate(['email' => 'required|email']);\n\n    $status = Password::sendResetLink(\n        $request->only('email')\n    );\n\n    return $status === Password::ResetLinkSent\n        ? back()->with(['status' => __($status)])\n        : back()->withErrors(['email' => __($status)]);\n})->middleware('guest')->name('password.email');\n```\n\n----------------------------------------\n\nTITLE: Dusk Selector Implementation\nDESCRIPTION: Examples of using Dusk selectors for more reliable element selection in tests, including HTML implementation and test usage.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<button>Login</button>\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->click('.login-page .container div > button');\n```\n\nLANGUAGE: html\nCODE:\n```\n<button dusk=\"login-button\">Login</button>\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->click('@login-button');\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Balancing Strategy for Horizon\nDESCRIPTION: Set up the auto-balancing strategy with min and max processes, scaling strategy, and cooldown period in the Horizon configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'environments' => [\n    'production' => [\n        'supervisor-1' => [\n            'connection' => 'redis',\n            'queue' => ['default'],\n            'balance' => 'auto',\n            'autoScalingStrategy' => 'time',\n            'minProcesses' => 1,\n            'maxProcesses' => 10,\n            'balanceMaxShift' => 1,\n            'balanceCooldown' => 3,\n            'tries' => 3,\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Checking Tax Exemption Status in Laravel Cashier\nDESCRIPTION: These snippets demonstrate how to check the tax exemption status of a customer using various methods provided by Laravel Cashier. They call the Stripe API to determine the customer's tax exemption status.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_83\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$user->isTaxExempt();\n$user->isNotTaxExempt();\n$user->reverseChargeApplies();\n```\n\n----------------------------------------\n\nTITLE: Strict Item Existence Check with containsStrict() in PHP\nDESCRIPTION: The `containsStrict` method performs the same function as `contains` but uses strict (`===`) comparison for checking item values or key/value pairs. This ensures both value and type match.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Basic Collection Filtering with reject() Method\nDESCRIPTION: Demonstrates filtering an Eloquent collection of Flight models using the reject() method to remove cancelled flights.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$flights = Flight::where('destination', 'Paris')->get();\n\n$flights = $flights->reject(function (Flight $flight) {\n    return $flight->cancelled;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailable Envelope in Laravel\nDESCRIPTION: This snippet shows how to configure the envelope method in a Laravel mailable class, including setting the 'from' address and subject.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Envelope;\n\n/**\n * Get the message envelope.\n */\npublic function envelope(): Envelope\n{\n    return new Envelope(\n        from: new Address('jeffrey@example.com', 'Jeffrey Way'),\n        subject: 'Order Shipped',\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Guard in Laravel Route Middleware\nDESCRIPTION: This snippet demonstrates how to reference a custom guard when assigning the authentication middleware to a route in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nRoute::middleware('auth:api')->group(function () {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Plan Swap in Laravel\nDESCRIPTION: Route handler for allowing customers to change their subscription plan using Paddle integration. Takes a price parameter and swaps the user's current subscription to the new plan.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::put('/subscription/{price}/swap', function (Request $request, $price) {\n    $user->subscription()->swap($price); // With \"$price\" being \"price_basic_yearly\" for this example.\n\n    return redirect()->route('dashboard');\n})->name('subscription.swap');\n```\n\n----------------------------------------\n\nTITLE: Using Registered Blade Component in Laravel Views\nDESCRIPTION: Demonstrates how to use a registered Blade component in a Laravel view using its tag alias.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<x-package-alert/>\n```\n\n----------------------------------------\n\nTITLE: Prepending Keyed Element to Array with `Arr::prepend()` - PHP\nDESCRIPTION: This snippet shows how to prepend a key-value pair to an associative array using `Arr::prepend()`. This adds the new key-value pair to the beginning of the array, shifting existing elements.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['price' => 100];\n\n$array = Arr::prepend($array, 'Desk', 'name');\n\n// ['name' => 'Desk', 'price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact JSON Match in Laravel Tests\nDESCRIPTION: This snippet illustrates how to assert that a response contains an exact match of the given JSON data using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$response->assertExactJson(array $data);\n```\n\n----------------------------------------\n\nTITLE: Merging Collections using `merge` in PHP\nDESCRIPTION: The `merge` method combines two collections into one. When a string key exists in both collections, the value from the second collection overwrites the value in the original collection. If a key is numeric, the value will be appended to the end of the collection. The provided examples illustrate these behaviours with key-value pairs and simple indexed arrays.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_77\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['product_id' => 1, 'price' => 100]);\n\n$merged = $collection->merge(['price' => 200, 'discount' => false]);\n\n$merged->all();\n\n// ['product_id' => 1, 'price' => 200, 'discount' => false]\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['Desk', 'Chair']);\n\n$merged = $collection->merge(['Bookcase', 'Door']);\n\n$merged->all();\n\n// ['Desk', 'Chair', 'Bookcase', 'Door']\n```\n\n----------------------------------------\n\nTITLE: Using Concurrency with Associative Arrays in Laravel 12\nDESCRIPTION: This code demonstrates how the Concurrency::run method now maintains associative array keys in the results, returning a keyed array of results where each key matches the original task key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/upgrade.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$result = Concurrency::run([\n    'task-1' => fn () => 1 + 1,\n    'task-2' => fn () => 2 + 2,\n]);\n\n// ['task-1' => 2, 'task-2' => 4]\n```\n\n----------------------------------------\n\nTITLE: Generating Events and Listeners with Artisan Commands in Laravel\nDESCRIPTION: Commands to generate event and listener classes using Laravel's Artisan CLI tool. The make:event command creates event classes in the app/Events directory, while make:listener creates listener classes in app/Listeners with optional event binding.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:event PodcastProcessed\n\nphp artisan make:listener SendPodcastNotification --event=PodcastProcessed\n```\n\n----------------------------------------\n\nTITLE: Cookie Handling in HTTP Tests with Pest\nDESCRIPTION: Demonstrates setting cookies for HTTP requests in tests using both single and multiple cookie methods with Pest.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntest('interacting with cookies', function () {\n    $response = $this->withCookie('color', 'blue')->get('/');\n\n    $response = $this->withCookies([\n        'color' => 'blue',\n        'name' => 'Taylor',\n    ])->get('/');\n\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting Payment Status in Laravel Cashier\nDESCRIPTION: This snippet demonstrates how to inspect the status of an incomplete payment by accessing the payment property on the IncompletePayment exception. It shows how to check for specific conditions like requiring a payment method or confirmation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_120\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Cashier\\Exceptions\\IncompletePayment;\n\ntry {\n    $user->charge(1000, 'pm_card_threeDSecure2Required');\n} catch (IncompletePayment $exception) {\n    // Get the payment intent status...\n    $exception->payment->status;\n\n    // Check specific conditions...\n    if ($exception->payment->requiresPaymentMethod()) {\n        // ...\n    } elseif ($exception->payment->requiresConfirmation()) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Queued Event Listener Implementation in Laravel\nDESCRIPTION: Demonstrates how to create a queued event listener by implementing the ShouldQueue interface for background processing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\n\nclass SendShipmentNotification implements ShouldQueue\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: No-Payment Trial Management in Laravel Cashier\nDESCRIPTION: Implementation of subscription trials without upfront payment collection, including user creation and trial status verification.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_69\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::create([\n    // ...\n]);\n\n$user->createAsCustomer([\n    'trial_ends_at' => now()->addDays(10)\n]);\n\nif ($user->onTrial()) {\n    // User is within their trial period...\n}\n\nif ($user->onGenericTrial()) {\n    // User is within their \"generic\" trial period...\n}\n\n$user->subscription()->extendTrial(now()->addDays(5));\n\n$user->subscription()->activate();\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Mail Address\nDESCRIPTION: Example of setting up a global 'to' address for all emails during local development.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Mail;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    if ($this->app->environment('local')) {\n        Mail::alwaysTo('taylor@example.com');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Cartesian Products with Arr::crossJoin in Laravel (PHP)\nDESCRIPTION: This PHP example showcases how to produce a Cartesian product of arrays using Arr::crossJoin, generating all possible permutations of the provided values. The function accepts two or more arrays as input and returns an array of all possible combinations. Illuminte\\Support\\Arr is required. Especially useful for building matrix data sets or permutations in data-driven applications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$matrix = Arr::crossJoin([1, 2], ['a', 'b']);\n/*\n    [\n        [1, 'a'],\n        [1, 'b'],\n        [2, 'a'],\n        [2, 'b'],\n    ]\n*/\n\n$matrix = Arr::crossJoin([1, 2], ['a', 'b'], ['I', 'II']);\n/*\n    [\n        [1, 'a', 'I'],\n        [1, 'a', 'II'],\n        [1, 'b', 'I'],\n        [1, 'b', 'II'],\n        [2, 'a', 'I'],\n        [2, 'a', 'II'],\n        [2, 'b', 'I'],\n        [2, 'b', 'II'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Listening for Model Broadcast Events with Laravel Echo\nDESCRIPTION: Client-side JavaScript code using Laravel Echo to listen for model broadcast events on a private channel. The listener is set up for a specific user's channel and handles PostUpdated events.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nEcho.private(`App.Models.User.${this.user.id}`)\n    .listen('.PostUpdated', (e) => {\n        console.log(e.model);\n    });\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Validation Errors in Laravel Tests\nDESCRIPTION: The assertJsonMissingValidationErrors method asserts that the response has no JSON validation errors for the given keys. It takes an array of keys to check.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonMissingValidationErrors($keys);\n```\n\n----------------------------------------\n\nTITLE: Listening for Event Broadcasts in JavaScript\nDESCRIPTION: Example of using Laravel Echo to subscribe to a private channel and listen for broadcast events on the client-side.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nEcho.private(`orders.${orderId}`)\n    .listen('OrderShipmentStatusUpdated', (e) => {\n        console.log(e.order);\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Subscription Quantities in Laravel Cashier\nDESCRIPTION: Shows how to set a specific quantity for a subscription price using the quantity method when creating a subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$user->newSubscription('default', 'price_monthly')\n    ->quantity(5)\n    ->create($paymentMethod);\n```\n\n----------------------------------------\n\nTITLE: Prepending Element to Array with `Arr::prepend()` - PHP\nDESCRIPTION: This snippet demonstrates how to use `Arr::prepend()` to add an element to the beginning of an array.  The prepended element becomes the new first element of the array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['one', 'two', 'three', 'four'];\n\n$array = Arr::prepend($array, 'zero');\n\n// ['zero', 'one', 'two', 'three', 'four']\n```\n\n----------------------------------------\n\nTITLE: Delaying Notification Delivery (PHP)\nDESCRIPTION: Demonstrates how to delay the delivery of a notification using the delay method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$delay = now()->addMinutes(10);\n\n$user->notify((new InvoicePaid($invoice))->delay($delay));\n```\n\n----------------------------------------\n\nTITLE: Setting Nested Array Values Using Laravel Arr Set Method in PHP\nDESCRIPTION: The Arr::set method assigns a value within a deeply nested PHP array using dot notation to specify keys. It modifies the original array by inserting or updating the value at the nested path. It depends on Illuminate\\Support\\Arr and requires the array, dot-notated key string, and value as parameters. Useful for manipulating complex array structures without manual traversal.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['products' => ['desk' => ['price' => 100]]];\n\nArr::set($array, 'products.desk.price', 200);\n\n// ['products' => ['desk' => ['price' => 200]]]\n```\n\n----------------------------------------\n\nTITLE: Webhook CSRF Configuration in Laravel\nDESCRIPTION: Configuration for handling Paddle webhooks by excluding them from CSRF protection in Laravel application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->validateCsrfTokens(except: [\n        'paddle/*',\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving First and Last Array Elements in PHP\nDESCRIPTION: This snippet demonstrates using head() and last() methods to retrieve the first and last elements of an array, useful for quick access to array extremities.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_55\n\nLANGUAGE: PHP\nCODE:\n```\n$array = [100, 200, 300];\n\n$first = head($array);\n// 100\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$last = last($array);\n// 300\n```\n\n----------------------------------------\n\nTITLE: Creating FLOAT Column in Laravel Migration\nDESCRIPTION: The float method creates a FLOAT equivalent column with the given precision in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n$table->float('amount', precision: 53);\n```\n\n----------------------------------------\n\nTITLE: Publishing Package Language Files in ServiceProvider\nDESCRIPTION: Demonstrates how to publish package language files to the application's lang/vendor directory using the publishes method in the service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\npublic function boot(): void\n{\n    $this->loadTranslationsFrom(__DIR__.'/../lang', 'courier');\n\n    $this->publishes([\n        __DIR__.'/../lang' => $this->app->langPath('vendor/courier'),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring String Ends With Value in Laravel PHP\nDESCRIPTION: The finish method adds a single instance of a value to a string if it doesn't already end with that value.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_110\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$adjusted = Str::of('this/string')->finish('/');\n\n// this/string/\n\n$adjusted = Str::of('this/string/')->finish('/');\n\n// this/string/\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Jobs by Queue Name\nDESCRIPTION: Command to retry all failed jobs for a specific queue, allowing you to clear the backlog of failures for a particular queue.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_92\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:retry --queue=name\n```\n\n----------------------------------------\n\nTITLE: Subscription Trial Management with Payment Method\nDESCRIPTION: Handling subscription trials with upfront payment method collection, including trial status checks and routing setup.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_68\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/user/subscribe', function (Request $request) {\n    $checkout = $request->user()\n        ->subscribe('pri_monthly')\n        ->returnTo(route('home'));\n\n    return view('billing', ['checkout' => $checkout]);\n});\n\nif ($user->onTrial()) {\n    // ...\n}\n\nif ($user->hasExpiredTrial()) {\n    // ...\n}\n\nif ($user->onTrial('default')) {\n    // ...\n}\n\nif ($user->hasExpiredTrial('default')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Watcher Settings\nDESCRIPTION: Configuration for Query Watcher with additional options like enabling/disabling via environment variables and setting slow query threshold.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n'watchers' => [\n    Watchers\\QueryWatcher::class => [\n        'enabled' => env('TELESCOPE_QUERY_WATCHER', true),\n        'slow' => 100,\n    ],\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database Connection in Laravel\nDESCRIPTION: Shows how to configure a SQLite database connection in Laravel using environment variables. It includes setting the database path and optionally disabling foreign key constraints.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nDB_CONNECTION=sqlite\nDB_DATABASE=/absolute/path/to/database.sqlite\n\nDB_FOREIGN_KEYS=false\n```\n\n----------------------------------------\n\nTITLE: Creating New Laravel Application\nDESCRIPTION: Commands to create and initialize a new Laravel application including dependency installation and development server startup.\nSOURCE: https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nlaravel new example-app\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd example-app\nnpm install && npm run build\ncomposer run dev\n```\n\n----------------------------------------\n\nTITLE: Checking for ASCII Characters in PHP\nDESCRIPTION: Demonstrates the use of the 'isAscii' method to determine if a given string contains only ASCII characters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_115\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('Taylor')->isAscii();\n\n// true\n\n$result = Str::of('ü')->isAscii();\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Manually Releasing a Job Back to Queue in Laravel\nDESCRIPTION: Implementation of manual job release within a Laravel job's handle method, allowing the job to be reattempted later by placing it back on the queue.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Execute the job.\n */\npublic function handle(): void\n{\n    // ...\n\n    $this->release();\n}\n```\n\n----------------------------------------\n\nTITLE: Component Lifecycle Control\nDESCRIPTION: Example of controlling component rendering using shouldRender method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_31\n\nLANGUAGE: php\nCODE:\n```\npublic function shouldRender(): bool\n{\n    return Str::length($this->message) > 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting String into Collection in Laravel PHP\nDESCRIPTION: The explode method splits a string by a delimiter and returns a collection containing each section of the split string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_109\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$collection = Str::of('foo bar baz')->explode(' ');\n\n// collect(['foo', 'bar', 'baz'])\n```\n\n----------------------------------------\n\nTITLE: Limiting Words in a String with Str::words in Laravel\nDESCRIPTION: The Str::words method limits the number of words in a string and can append a suffix to the truncated text, useful for creating excerpts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_71\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nreturn Str::words('Perfectly balanced, as all things should be.', 3, ' >>>');\n\n// Perfectly balanced, as >>>\n```\n\n----------------------------------------\n\nTITLE: Configuring Factory Callbacks in Laravel PHP\nDESCRIPTION: Example of registering afterMaking and afterCreating callbacks in a factory. These allow additional tasks to be performed after making or creating a model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factories;\n\nuse App\\Models\\User;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass UserFactory extends Factory\n{\n    /**\n     * Configure the model factory.\n     */\n    public function configure(): static\n    {\n        return $this->afterMaking(function (User $user) {\n            // ...\n        })->afterCreating(function (User $user) {\n            // ...\n        });\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Plain Text View Mail Notification in Laravel\nDESCRIPTION: Shows how to specify both HTML and plain-text views for mail notifications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function toMail(object $notifiable): MailMessage\n{\n    return (new MailMessage)->view(\n        ['mail.invoice.paid', 'mail.invoice.paid-text'],\n        ['invoice' => $this->invoice]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Queue Connection with Clustering in Laravel\nDESCRIPTION: Example configuration for a Redis queue connection using a Redis Cluster, including key hash tag for proper slot allocation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n'redis' => [\n    'driver' => 'redis',\n    'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),\n    'queue' => env('REDIS_QUEUE', '{default}'),\n    'retry_after' => env('REDIS_QUEUE_RETRY_AFTER', 90),\n    'block_for' => null,\n    'after_commit' => false,\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing Intermediate Table Data via Pivot Attribute\nDESCRIPTION: Example of accessing intermediate table data through the automatically assigned pivot attribute on related models, allowing access to pivot timestamps and other columns.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\nforeach ($user->roles as $role) {\n    echo $role->pivot->created_at;\n}\n```\n\n----------------------------------------\n\nTITLE: Parent Menu Component Implementation\nDESCRIPTION: Shows the implementation of a parent menu component that accepts a color property and renders child items through the $slot variable.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_81\n\nLANGUAGE: blade\nCODE:\n```\n<!-- /resources/views/components/menu/index.blade.php -->\n\n@props(['color' => 'gray'])\n\n<ul {{ $attributes->merge(['class' => 'bg-'.$color.'-200']) }}>\n    {{ $slot }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Laravel Application\nDESCRIPTION: Command to create a new Laravel application using the Laravel installer CLI. The installer will prompt for the preferred starter kit selection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nlaravel new my-app\n```\n\n----------------------------------------\n\nTITLE: Resending Verification Email Route (PHP)\nDESCRIPTION: This snippet defines a route for resending the verification email if a user loses the original email.\nSOURCE: https://github.com/laravel/docs/blob/12.x/verification.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/email/verification-notification', function (Request $request) {\n    $request->user()->sendEmailVerificationNotification();\n\n    return back()->with('message', 'Verification link sent!');\n})->middleware(['auth', 'throttle:6,1'])->name('verification.send');\n```\n\n----------------------------------------\n\nTITLE: Handling Mail Events\nDESCRIPTION: Example of creating an event listener for mail sending events in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Mail\\Events\\MessageSending;\n// use Illuminate\\Mail\\Events\\MessageSent;\n\nclass LogMessage\n{\n    /**\n     * Handle the given event.\n     */\n    public function handle(MessageSending $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Valid URL Protocols in Validation\nDESCRIPTION: Examples showing how to specify which URL protocols should be considered valid when using the 'url' validation rule. This allows restricting URLs to specific protocols only.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n'url' => 'url:http,https',\n\n'game' => 'url:minecraft,steam',\n```\n\n----------------------------------------\n\nTITLE: Advanced Related Model Counting\nDESCRIPTION: Shows advanced counting techniques including multiple relations, constraints, and aliases for the same relationship.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_70\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\n\n$posts = Post::withCount([\n    'comments',\n    'comments as pending_comments_count' => function (Builder $query) {\n        $query->where('approved', false);\n    },\n])->get();\n\necho $posts[0]->comments_count;\necho $posts[0]->pending_comments_count;\n```\n\n----------------------------------------\n\nTITLE: Installing S3 Driver Dependencies for Laravel\nDESCRIPTION: Composer command to install the required Flysystem S3 package for using the S3 storage driver in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require league/flysystem-aws-s3-v3 \"^3.0\" --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Returning View from Route\nDESCRIPTION: Example of returning a view from a Laravel route with data passed to it.\nSOURCE: https://github.com/laravel/docs/blob/12.x/views.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function () {\n    return view('greeting', ['name' => 'James']);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Laravel Prompts Search Functions in Console Commands\nDESCRIPTION: Shows how to test the search and multisearch functions from Laravel Prompts by mocking input, search results, and user selections.\nSOURCE: https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ntest('console command', function () {\n    $this->artisan('example')\n        ->expectsSearch('What is your name?', search: 'Tay', answers: [\n            'Taylor Otwell',\n            'Taylor Swift',\n            'Darian Taylor'\n        ], answer: 'Taylor Otwell')\n        ->assertExitCode(0);\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Test a console command.\n */\npublic function test_console_command(): void\n{\n    $this->artisan('example')\n        ->expectsSearch('What is your name?', search: 'Tay', answers: [\n            'Taylor Otwell',\n            'Taylor Swift',\n            'Darian Taylor'\n        ], answer: 'Taylor Otwell')\n        ->assertExitCode(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Public Assets in Laravel Package\nDESCRIPTION: Shows how to publish package assets such as JavaScript, CSS, and images to the application's public directory using the publishes method in the service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any package services.\n */\npublic function boot(): void\n{\n    $this->publishes([\n        __DIR__.'/../public' => public_path('vendor/courier'),\n    ], 'public');\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if String Matches Pattern in PHP\nDESCRIPTION: Shows how to use the 'isMatch' method to determine if a string matches a given regular expression pattern.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_132\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('foo bar')->isMatch('/foo (.*)/');\n\n// true\n\n$result = Str::of('laravel')->isMatch('/foo (.*)/');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Accessing User Notifications in Laravel\nDESCRIPTION: Retrieves all notifications for a user via the Eloquent relationship provided by the Notifiable trait. Notifications are sorted by creation date with most recent first.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$user = App\\Models\\User::find(1);\n\nforeach ($user->notifications as $notification) {\n    echo $notification->type;\n}\n```\n\n----------------------------------------\n\nTITLE: Service Proxying Commands\nDESCRIPTION: Commands for setting up and managing service proxies in Valet.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# Proxy over HTTP...\nvalet proxy elasticsearch http://127.0.0.1:9200\n\n# Proxy over TLS + HTTP/2...\nvalet proxy elasticsearch http://127.0.0.1:9200 --secure\n\nvalet unproxy elasticsearch\n\nvalet proxies\n```\n\n----------------------------------------\n\nTITLE: Rendering Laravel Mailable Content\nDESCRIPTION: Demonstrates how to capture the HTML content of a mailable without sending it by using the render method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Mail\\InvoicePaid;\nuse App\\Models\\Invoice;\n\n$invoice = Invoice::find(1);\n\nreturn (new InvoicePaid($invoice))->render();\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Request in Laravel Controller\nDESCRIPTION: Demonstrates how to access the current HTTP request via dependency injection in a Laravel controller method. The Request object is automatically injected by the service container.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass UserController extends Controller\n{\n    /**\n     * Store a new user.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $name = $request->input('name');\n\n        // Store the user...\n\n        return redirect('/users');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying PHP Versions for Sites in Laravel Homestead\nDESCRIPTION: This YAML snippet shows how to specify a particular PHP version for a site in the Homestead configuration. It maps a domain to a project directory and sets PHP 7.1 as the version to use.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nsites:\n    - map: homestead.test\n      to: /home/vagrant/project1/public\n      php: \"7.1\"\n```\n\n----------------------------------------\n\nTITLE: Using @can/@cannot Blade Directives in Laravel\nDESCRIPTION: Demonstrates how to use Laravel's @can and @cannot Blade directives for authorization checks without model instances.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_29\n\nLANGUAGE: blade\nCODE:\n```\n@can('create', App\\Models\\Post::class)\n    <!-- The current user can create posts... -->\n@endcan\n\n@cannot('create', App\\Models\\Post::class)\n    <!-- The current user can't create posts... -->\n@endcannot\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring Between Values in Laravel PHP\nDESCRIPTION: The between method returns the portion of a string between two values, useful for extracting content between delimiters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_86\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$converted = Str::of('This is my name')->between('This', 'name');\n\n// ' is my '\n```\n\n----------------------------------------\n\nTITLE: After Today Date Validation\nDESCRIPTION: Example showing how to validate that a date must be after today using the fluent date rule builder.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n'start_date' => [\n    'required',\n    Rule::date()->afterToday(),\n],\n```\n\n----------------------------------------\n\nTITLE: Specifying Queue Connection for Laravel Worker\nDESCRIPTION: Artisan command to start a queue worker using a specific connection (redis in this example). The connection name must correspond to one defined in the queue configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_69\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work redis\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from a String in Laravel\nDESCRIPTION: The trim method removes whitespace from both ends of a string. It can also remove specified characters. Unlike PHP's native trim function, Laravel's trim method also removes unicode whitespace characters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_149\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('  Laravel  ')->trim();\n\n// 'Laravel'\n\n$string = Str::of('/Laravel/')->trim('/');\n\n// 'Laravel'\n```\n\n----------------------------------------\n\nTITLE: Merging Conditional Attributes in Laravel Resource\nDESCRIPTION: Shows how to merge multiple conditional attributes based on a single condition using the mergeWhen() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic function toArray(Request $request): array\n{\n    return [\n        'id' => $this->id,\n        'name' => $this->name,\n        'email' => $this->email,\n        $this->mergeWhen($request->user()->isAdmin(), [\n            'first-secret' => 'value',\n            'second-secret' => 'value',\n        ]),\n        'created_at' => $this->created_at,\n        'updated_at' => $this->updated_at,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Array-Style Validation Rules in Laravel\nDESCRIPTION: Demonstrates how to specify validation rules as arrays instead of pipe-delimited strings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$validatedData = $request->validate([\n    'title' => ['required', 'unique:posts', 'max:255'],\n    'body' => ['required'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Options for Anonymous Event Listeners in Laravel\nDESCRIPTION: Example of customizing the queue connection, queue name, and delay for an anonymous queueable event listener. This allows fine-tuning how and when the listener is processed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen(queueable(function (PodcastProcessed $event) {\n    // ...\n})->onConnection('redis')->onQueue('podcasts')->delay(now()->addSeconds(10)));\n```\n\n----------------------------------------\n\nTITLE: Extending Sanctum PersonalAccessToken Model\nDESCRIPTION: Example of extending the default PersonalAccessToken model used by Sanctum to add custom functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Sanctum\\PersonalAccessToken as SanctumPersonalAccessToken;\n\nclass PersonalAccessToken extends SanctumPersonalAccessToken\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Column in Laravel Migration\nDESCRIPTION: The json method creates a JSON equivalent column in a Laravel database migration. When using SQLite, a TEXT column will be created.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\n$table->json('options');\n```\n\n----------------------------------------\n\nTITLE: Comparing Facade and Helper Function for View Generation in Laravel\nDESCRIPTION: Demonstrates the equivalence between using the View facade and the view helper function to generate a view.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Illuminate\\Support\\Facades\\View::make('profile');\n\nreturn view('profile');\n```\n\n----------------------------------------\n\nTITLE: Flattening Multi-dimensional Collection - PHP\nDESCRIPTION: The `flatten` method transforms a multi-dimensional collection into a single-dimensional one.  You can specify a depth argument to control how many levels to flatten.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([\n    'name' => 'taylor',\n    'languages' => [\n        'php', 'javascript'\n    ]\n]);\n\n$flattened = $collection->flatten();\n\n$flattened->all();\n\n// ['taylor', 'php', 'javascript'];\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([\n    'Apple' => [\n        [\n            'name' => 'iPhone 6S',\n            'brand' => 'Apple'\n        ],\n    ],\n    'Samsung' => [\n        [\n            'name' => 'Galaxy S7',\n            'brand' => 'Samsung'\n        ],\n    ],\n]);\n\n$products = $collection->flatten(1);\n\n$products->values()->all();\n\n/*\n    [\n        ['name' => 'iPhone 6S', 'brand' => 'Apple'],\n        ['name' => 'Galaxy S7', 'brand' => 'Samsung'],\n    ]\n*/\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution on Empty Collection with `whenEmpty()` in PHP\nDESCRIPTION: The `whenEmpty()` method executes a callback when the collection is empty. Optionally, a second callback can be provided, which will be executed if the collection is not empty. Requires a Laravel Collection instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_142\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect(['Michael', 'Tom']);\n\n$collection->whenEmpty(function (Collection $collection) {\n    return $collection->push('Adam');\n});\n\n$collection->all();\n\n// ['Michael', 'Tom']\n\n$collection = collect();\n\n$collection->whenEmpty(function (Collection $collection) {\n    return $collection->push('Adam');\n});\n\n$collection->all();\n\n// ['Adam']\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect(['Michael', 'Tom']);\n\n$collection->whenEmpty(function (Collection $collection) {\n    return $collection->push('Adam');\n}, function (Collection $collection) {\n    return $collection->push('Taylor');\n});\n\n$collection->all();\n\n// ['Michael', 'Tom', 'Taylor']\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Pivot Attribute in Laravel Relationships\nDESCRIPTION: Example of accessing intermediate table data through a custom pivot attribute name after loading the relationship with eager loading.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with('podcasts')->get();\n\nforeach ($users->flatMap->podcasts as $podcast) {\n    echo $podcast->subscription->created_at;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Morph To Relationships with whereHasMorph\nDESCRIPTION: Examples of using whereHasMorph and whereDoesntHaveMorph to query polymorphic relationships in Laravel. Shows how to query comments associated with posts or videos based on title conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_65\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Comment;\nuse App\\Models\\Post;\nuse App\\Models\\Video;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\n// Retrieve comments associated to posts or videos with a title like code%...\n$comments = Comment::whereHasMorph(\n    'commentable',\n    [Post::class, Video::class],\n    function (Builder $query) {\n        $query->where('title', 'like', 'code%');\n    }\n)->get();\n\n// Retrieve comments associated to posts with a title not like code%...\n$comments = Comment::whereDoesntHaveMorph(\n    'commentable',\n    Post::class,\n    function (Builder $query) {\n        $query->where('title', 'like', 'code%');\n    }\n)->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring S3-Compatible Storage Endpoint in Laravel\nDESCRIPTION: Example of configuring the endpoint URL for S3-compatible storage services like MinIO, DigitalOcean Spaces, or Cloudflare R2.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n'endpoint' => env('AWS_ENDPOINT', 'https://minio:9000'),\n```\n\n----------------------------------------\n\nTITLE: Filter Collection by Key/Value Pair with `where()` in PHP\nDESCRIPTION: The `where()` method filters the collection by a given key/value pair. The comparison uses \"loose\" comparisons. Optionally, a comparison operator can be specified. Requires a Laravel Collection instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_144\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 100],\n    ['product' => 'Bookcase', 'price' => 150],\n    ['product' => 'Door', 'price' => 100],\n]);\n\n$filtered = $collection->where('price', 100);\n\n$filtered->all();\n\n/*\n    [\n        ['product' => 'Chair', 'price' => 100],\n        ['product' => 'Door', 'price' => 100],\n    ]\n*/\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([\n    ['name' => 'Jim', 'deleted_at' => '2019-01-01 00:00:00'],\n    ['name' => 'Sally', 'deleted_at' => '2019-01-02 00:00:00'],\n    ['name' => 'Sue', 'deleted_at' => null],\n]);\n\n$filtered = $collection->where('deleted_at', '!=', null);\n\n$filtered->all();\n\n/*\n    [\n        ['name' => 'Jim', 'deleted_at' => '2019-01-01 00:00:00'],\n        ['name' => 'Sally', 'deleted_at' => '2019-01-02 00:00:00'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Using filled() function to check for non-empty values in Laravel PHP\nDESCRIPTION: The filled() function determines whether the given value is not 'blank', returning true for values like numbers and booleans, false for empty strings, null, or empty collections.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_93\n\nLANGUAGE: php\nCODE:\n```\nfilled(0);\nfilled(true);\nfilled(false);\n\n// true\n\nfilled('');\nfilled('   ');\nfilled(null);\nfilled(collect());\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Creating Password Grant Client via Artisan\nDESCRIPTION: Shell command to create a new password grant client using Laravel's Artisan CLI.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan passport:client --password\n```\n\n----------------------------------------\n\nTITLE: Adding Products to Existing Subscriptions in Laravel Paddle\nDESCRIPTION: Method to add new products to an existing subscription by using 'swap' and including both new and existing prices with their quantities.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->subscription()->swap(['price_chat', 'price_original' => 2]);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Singleton Request Injection in Laravel Service Provider\nDESCRIPTION: Example of problematic request instance injection in a service provider that creates a singleton. This approach causes issues because the same request instance will be reused across multiple HTTP requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    $this->app->singleton(Service::class, function (Application $app) {\n        return new Service($app['request']);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LONGTEXT Column in Laravel Migration\nDESCRIPTION: The longText method creates a LONGTEXT equivalent column in a Laravel database migration. For MySQL or MariaDB, a binary character set can be applied to create a LONGBLOB equivalent column.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\n$table->longText('description');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$table->longText('data')->charset('binary'); // LONGBLOB\n```\n\n----------------------------------------\n\nTITLE: Implementing Shallow Nesting for Resource Routes in Laravel\nDESCRIPTION: Shows how to use shallow nesting for resource routes when full nesting is not necessary, reducing the complexity of URIs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\CommentController;\n\nRoute::resource('photos.comments', CommentController::class)->shallow();\n```\n\n----------------------------------------\n\nTITLE: Updating Subscription Quantity in Laravel Cashier\nDESCRIPTION: Method for setting a specific quantity value for a subscription, bypassing the increment/decrement operations for direct quantity updates.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->updateQuantity(10);\n```\n\n----------------------------------------\n\nTITLE: Using the @verbatim Directive for JavaScript Templates\nDESCRIPTION: Shows how to use the @verbatim directive to display a large section of JavaScript template code without needing to escape each Blade expression.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n@verbatim\n    <div class=\"container\">\n        Hello, {{ name }}.\n    </div>\n@endverbatim\n```\n\n----------------------------------------\n\nTITLE: Raw Data Inline Attachment in Blade\nDESCRIPTION: Demonstrates embedding raw image data inline in an email template.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_32\n\nLANGUAGE: blade\nCODE:\n```\n<body>\n    Here is an image from raw data:\n\n    <img src=\"{{ $message->embedData($data, 'example-image.jpg') }}\">\n</body>\n```\n\n----------------------------------------\n\nTITLE: Removing Products from Subscriptions in Laravel Paddle\nDESCRIPTION: Method to remove products from a multi-product subscription by using 'swap' and omitting the price you want to remove from the array of prices.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription()->swap(['price_original' => 2]);\n```\n\n----------------------------------------\n\nTITLE: Permanent Cache Storage with rememberForever()\nDESCRIPTION: Shows how to permanently cache data using rememberForever() method. Retrieves from cache or stores forever if not found.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::rememberForever('users', function () {\n    return DB::table('users')->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Sail Services\nDESCRIPTION: Command to add additional services to an existing Sail installation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan sail:add\n```\n\n----------------------------------------\n\nTITLE: Defining a Laravel Route with a Parameter in PHP\nDESCRIPTION: Example of defining a Laravel route using `Route::get` that includes a URL parameter (`{locale}`). This route is named 'post.index' for easy generation via the `route` helper.\nSOURCE: https://github.com/laravel/docs/blob/12.x/urls.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/{locale}/posts', function () {\n    // ...\n})->name('post.index');\n```\n\n----------------------------------------\n\nTITLE: ASCII Check with Str::isAscii in PHP\nDESCRIPTION: Demonstrates the use of Str::isAscii to determine if a given string is 7 bit ASCII.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$isAscii = Str::isAscii('Taylor');\n\n// true\n\n$isAscii = Str::isAscii('ü');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom PersonalAccessToken Model\nDESCRIPTION: Code to configure Sanctum to use a custom PersonalAccessToken model implementation in the application's service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Sanctum\\PersonalAccessToken;\nuse Laravel\\Sanctum\\Sanctum;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Sanctum::usePersonalAccessTokenModel(PersonalAccessToken::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Mail Components for Customization\nDESCRIPTION: This Artisan command publishes Laravel's mail components to the application for customization. It exports all Markdown mail components to resources/views/vendor/mail directory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --tag=laravel-mail\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Query Results\nDESCRIPTION: Shows how to stream database results lazily using a LazyCollection, which processes results in chunks while providing a single stream interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\nDB::table('users')->orderBy('id')->lazy()->each(function (object $user) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Local Valet Driver\nDESCRIPTION: Example of creating a custom local Valet driver by extending the LaravelValetDriver class with custom serves and frontControllerPath implementations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Valet\\Drivers\\LaravelValetDriver;\n\nclass LocalValetDriver extends LaravelValetDriver\n{\n    /**\n     * Determine if the driver serves the request.\n     */\n    public function serves(string $sitePath, string $siteName, string $uri): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the fully resolved path to the application's front controller.\n     */\n    public function frontControllerPath(string $sitePath, string $siteName, string $uri): string\n    {\n        return $sitePath.'/public_html/index.php';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Recipient Configuration in Laravel\nDESCRIPTION: Demonstrates how to customize the recipient's email address using the routeNotificationForMail method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic function routeNotificationForMail(Notification $notification): array|string\n{\n    // Return email address only...\n    return $this->email_address;\n\n    // Return email address and name...\n    return [$this->email_address => $this->name];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Time-Based Job Retry Limits in Laravel\nDESCRIPTION: Implementation of a retryUntil method that defines a time limit for job retry attempts. This method returns a DateTime instance specifying when the job should no longer be attempted.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\n\n/**\n * Determine the time at which the job should timeout.\n */\npublic function retryUntil(): DateTime\n{\n    return now()->addMinutes(10);\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Command Help\nDESCRIPTION: Command to display help information for a specific Artisan command\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan help migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Exceptions for Laravel Queue Jobs\nDESCRIPTION: Implementation of a Laravel job class with maxExceptions property that limits the number of unhandled exceptions before the job fails, separate from the regular retry count.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Jobs;\n\nuse Illuminate\\Support\\Facades\\Redis;\n\nclass ProcessPodcast implements ShouldQueue\n{\n    /**\n     * The number of times the job may be attempted.\n     *\n     * @var int\n     */\n    public $tries = 25;\n\n    /**\n     * The maximum number of unhandled exceptions to allow before failing.\n     *\n     * @var int\n     */\n    public $maxExceptions = 3;\n\n    /**\n     * Execute the job.\n     */\n    public function handle(): void\n    {\n        Redis::throttle('key')->allow(10)->every(60)->then(function () {\n            // Lock obtained, process the podcast...\n        }, function () {\n            // Unable to obtain lock...\n            return $this->release(10);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel CORS Configuration\nDESCRIPTION: Command to publish the CORS configuration file to your application's config directory. This allows customization of CORS-related settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan config:publish cors\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Laravel API Resource\nDESCRIPTION: Demonstrates creating a basic API resource class that transforms a User model into an array with basic attributes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass UserResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array<string, mixed>\n     */\n    public function toArray(Request $request): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'created_at' => $this->created_at,\n            'updated_at' => $this->updated_at,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Response with Headers in Laravel\nDESCRIPTION: Demonstrates creating a custom response with a specific status code and additional headers using the response() helper function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/home', function () {\n    return response('Hello World', 200)\n        ->header('Content-Type', 'text/plain');\n});\n```\n\n----------------------------------------\n\nTITLE: Examining Model Attribute Changes with isDirty and isClean in Laravel\nDESCRIPTION: Examples of using isDirty and isClean methods to check if model attributes have changed since retrieval from the database, with various parameter options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n\n$user->isDirty(); // true\n$user->isDirty('title'); // true\n$user->isDirty('first_name'); // false\n$user->isDirty(['first_name', 'title']); // true\n\n$user->isClean(); // false\n$user->isClean('title'); // false\n$user->isClean('first_name'); // true\n$user->isClean(['first_name', 'title']); // false\n\n$user->save();\n\n$user->isDirty(); // false\n$user->isClean(); // true\n```\n\n----------------------------------------\n\nTITLE: Marking All Notifications as Read in Laravel\nDESCRIPTION: Demonstrates how to mark all unread notifications as read at once by calling markAsRead on the collection of unread notifications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$user->unreadNotifications->markAsRead();\n```\n\n----------------------------------------\n\nTITLE: Executing Redis Transactions in Laravel\nDESCRIPTION: Demonstrates how to use Laravel's Redis facade to execute multiple commands in a single, atomic transaction using the transaction method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Redis;\nuse Illuminate\\Support\\Facades;\n\nFacades\\Redis::transaction(function (Redis $redis) {\n    $redis->incr('user_visits', 1);\n    $redis->incr('total_visits', 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Flattening Multi-dimensional Collections with dot Method in PHP\nDESCRIPTION: The dot method flattens a multi-dimensional collection into a single-level collection using \"dot\" notation keys to indicate depth. It accepts a Laravel Collection with nested arrays and returns a collection of flattened key/value pairs with concatenated keys indicating hierarchy.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['products' => ['desk' => ['price' => 100]]]);\n\n$flattened = $collection->dot();\n\n$flattened->all();\n\n// ['products.desk.price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Email Tags and Metadata Configuration\nDESCRIPTION: Shows how to add tags and metadata to emails for third-party email providers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Mail\\Mailables\\Envelope;\n\npublic function envelope(): Envelope\n{\n    return new Envelope(\n        subject: 'Order Shipped',\n        tags: ['shipment'],\n        metadata: [\n            'order_id' => $this->order->id,\n        ],\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Actions in Controllers Using Gates\nDESCRIPTION: Shows how to use the Gate facade in a controller to check if a user is authorized to update a post before proceeding with the action.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Post;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Gate;\n\nclass PostController extends Controller\n{\n    /**\n     * Update the given post.\n     */\n    public function update(Request $request, Post $post): RedirectResponse\n    {\n        if (! Gate::allows('update-post', $post)) {\n            abort(403);\n        }\n\n        // Update the post...\n\n        return redirect('/posts');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CSRF Protection for SPA Authentication with Laravel Sanctum\nDESCRIPTION: Making a request to the CSRF cookie endpoint to initialize CSRF protection before attempting to authenticate with a Laravel backend from an SPA.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/sanctum/csrf-cookie').then(response => {\n    // Login...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Driver for Laravel Queue Batching\nDESCRIPTION: PHP configuration for setting up DynamoDB as the queue batching driver in Laravel. It defines AWS authentication credentials and the table name for storing job batches.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n'batching' => [\n    'driver' => env('QUEUE_BATCHING_DRIVER', 'dynamodb'),\n    'key' => env('AWS_ACCESS_KEY_ID'),\n    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n    'table' => 'job_batches',\n],\n```\n\n----------------------------------------\n\nTITLE: Enabling Two-Factor Authentication in Laravel Fortify\nDESCRIPTION: This snippet shows how to enable two-factor authentication in a Laravel model using Laravel Fortify. It demonstrates the use of the TwoFactorAuthenticatable trait in the User model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Fortify\\TwoFactorAuthenticatable;\n\nclass User extends Authenticatable\n{\n    use Notifiable, TwoFactorAuthenticatable;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Transforming ASCII Strings with whenIsAscii in Laravel PHP\nDESCRIPTION: The whenIsAscii method applies a transformation to a string if it consists of 7-bit ASCII characters. It uses a closure to perform the transformation on the Stringable instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_166\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('laravel')->whenIsAscii(function (Stringable $string) {\n    return $string->title();\n});\n\n// 'Laravel'\n```\n\n----------------------------------------\n\nTITLE: Checking Subscription Status in Blade Templates\nDESCRIPTION: Examples of using Cashier methods to check a user's subscription status in Blade templates, including checks for specific products and prices.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n@if ($user->subscribed())\n    <p>You are subscribed.</p>\n@endif\n\n@if ($user->subscribedToProduct('pro_basic'))\n    <p>You are subscribed to our Basic product.</p>\n@endif\n\n@if ($user->subscribedToPrice('price_basic_monthly'))\n    <p>You are subscribed to our monthly Basic plan.</p>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Implementing Encrypted Jobs in Laravel\nDESCRIPTION: Example of a job that implements the ShouldBeEncrypted interface to ensure the job data is encrypted before being pushed onto the queue, providing enhanced privacy and security.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Contracts\\Queue\\ShouldBeEncrypted;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\n\nclass UpdateSearchIndex implements ShouldQueue, ShouldBeEncrypted\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Middleware for Notifications in Laravel\nDESCRIPTION: Example of adding rate limiting middleware to notification queues based on the channel type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Queue\\Middleware\\RateLimited;\n\n/**\n * Get the middleware the notification job should pass through.\n *\n * @return array<int, object>\n */\npublic function middleware(object $notifiable, string $channel)\n{\n    return match ($channel) {\n        'mail' => [new RateLimited('postmark')],\n        'slack' => [new RateLimited('slack')],\n        default => [],\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Definition Using Template Inheritance\nDESCRIPTION: Shows how to define a layout using Blade's template inheritance approach with @section and @yield directives.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_91\n\nLANGUAGE: blade\nCODE:\n```\n<!-- resources/views/layouts/app.blade.php -->\n\n<html>\n    <head>\n        <title>App Name - @yield('title')</title>\n    </head>\n    <body>\n        @section('sidebar')\n            This is the master sidebar.\n        @show\n\n        <div class=\"container\">\n            @yield('content')\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Str::excerpt for Text Extraction with Context in PHP\nDESCRIPTION: The Str::excerpt method extracts a portion of text surrounding the first instance of a phrase within a string. It supports configurable radius and custom omission indicators.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$excerpt = Str::excerpt('This is my name', 'my', [\n    'radius' => 3\n]);\n\n// '...is my na...'\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$excerpt = Str::excerpt('This is my name', 'name', [\n    'radius' => 3,\n    'omission' => '(...) '\n]);\n\n// '(...) my name'\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table for Laravel Job Batches\nDESCRIPTION: Artisan commands to create a migration for the job batches table and run the migration, setting up the necessary database structure for Laravel's job batching feature.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:queue-batches-table\n\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection and Queue for Batched Jobs\nDESCRIPTION: Shows how to set the connection and queue for all jobs in a batch using the onConnection and onQueue methods. All jobs in the batch must use the same connection and queue.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$batch = Bus::batch([\n    // ...\n])->then(function (Batch $batch) {\n    // All jobs completed successfully...\n})->onConnection('redis')->onQueue('imports')->dispatch();\n```\n\n----------------------------------------\n\nTITLE: Conditionally Returning Value with when - PHP\nDESCRIPTION: The `when` function returns the value passed to it if a given condition evaluates to `true`; otherwise, it returns `null`. If a closure is passed as a second argument, the closure is executed and its return value is returned.  It's particularly useful for conditionally rendering HTML attributes or other elements based on a condition.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_127\n\nLANGUAGE: php\nCODE:\n```\n$value = when(true, 'Hello World');\n\n$value = when(true, fn () => 'Hello World');\n```\n\n----------------------------------------\n\nTITLE: Checking Rate Limit Availability and Retry Time in Laravel\nDESCRIPTION: This snippet demonstrates how to check if too many attempts have been made and calculate the time until more attempts will be available using the RateLimiter facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\nif (RateLimiter::tooManyAttempts('send-message:'.$user->id, $perMinute = 5)) {\n    $seconds = RateLimiter::availableIn('send-message:'.$user->id);\n\n    return 'You may try again in '.$seconds.' seconds.';\n}\n\nRateLimiter::increment('send-message:'.$user->id);\n\n// Send message...\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Mailable in Laravel\nDESCRIPTION: Artisan command to generate a new mailable class with a corresponding Markdown template\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:mail OrderShipped --markdown=mail.orders.shipped\n```\n\n----------------------------------------\n\nTITLE: Writing Markdown Email Template\nDESCRIPTION: Example of a Markdown email template using Laravel's mail components including button and formatting\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_38\n\nLANGUAGE: blade\nCODE:\n```\n<x-mail::message>\n# Order Shipped\n\nYour order has been shipped!\n\n<x-mail::button :url=\"$url\">\nView Order\n</x-mail::button>\n\nThanks,<br>\n{{ config('app.name') }}\n</x-mail::message>\n```\n\n----------------------------------------\n\nTITLE: Testing for No Output in Laravel Console Commands\nDESCRIPTION: Demonstrates how to assert that a console command does not generate any output using the doesntExpectOutput method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ntest('console command', function () {\n    $this->artisan('example')\n        ->doesntExpectOutput()\n        ->assertExitCode(0);\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Test a console command.\n */\npublic function test_console_command(): void\n{\n    $this->artisan('example')\n        ->doesntExpectOutput()\n        ->assertExitCode(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting URL Components in Laravel Dusk\nDESCRIPTION: Check various components of the current URL including scheme, host, port, and path using methods like assertUrlIs, assertSchemeIs, and assertPathIs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertUrlIs($url);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertSchemeIs($scheme);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertHostIs($host);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertPortIs($port);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertPathIs('/home');\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New Laravel Application\nDESCRIPTION: Commands to navigate to the new application directory, install frontend dependencies with NPM, build assets, and start the Laravel development server.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd my-app\nnpm install && npm run build\ncomposer run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fallback Behavior for Text Prompts\nDESCRIPTION: Implementation of custom fallback behavior for TextPrompt using Symfony Console components. This snippet shows how to handle validation, required fields, and default values when falling back to Symfony's Question Helper.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Prompts\\TextPrompt;\nuse Symfony\\Component\\Console\\Question\\Question;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\n\nTextPrompt::fallbackUsing(function (TextPrompt $prompt) use ($input, $output) {\n    $question = (new Question($prompt->label, $prompt->default ?: null))\n        ->setValidator(function ($answer) use ($prompt) {\n            if ($prompt->required && $answer === null) {\n                throw new \\RuntimeException(\n                    is_string($prompt->required) ? $prompt->required : 'Required.'\n                );\n            }\n\n            if ($prompt->validate) {\n                $error = ($prompt->validate)($answer ?? '');\n\n                if ($error) {\n                    throw new \\RuntimeException($error);\n                }\n            }\n\n            return $answer;\n        });\n\n    return (new SymfonyStyle($input, $output))\n        ->askQuestion($question);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Forced Queue Processing in Maintenance Mode\nDESCRIPTION: Set the 'force' option to true in the Horizon configuration to process queues even during maintenance mode.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'environments' => [\n    'production' => [\n        'supervisor-1' => [\n            // ...\n            'force' => true,\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Hosts File for Homestead\nDESCRIPTION: Example of adding a Homestead domain to the hosts file on the local machine to enable access via web browser.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n192.168.56.56  homestead.test\n```\n\n----------------------------------------\n\nTITLE: Creating Subscriptions in Laravel Routes\nDESCRIPTION: Route definition showing how to create a subscription checkout session for a user, specifying the price ID, subscription type, and return URL.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/user/subscribe', function (Request $request) {\n    $checkout = $request->user()->subscribe($premium = 'pri_123', 'default')\n        ->returnTo(route('home'));\n\n    return view('billing', ['checkout' => $checkout]);\n});\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Flashed Input in Laravel\nDESCRIPTION: Demonstrates how to combine input flashing with redirects using the withInput method. Shows different redirect approaches including named routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nreturn redirect('/form')->withInput();\n\nreturn redirect()->route('user.create')->withInput();\n\nreturn redirect('/form')->withInput(\n    $request->except('password')\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Unescaped Data in Blade\nDESCRIPTION: Shows how to display unescaped data in a Blade template using the {!! !!} syntax, which bypasses automatic HTML escaping.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\nHello, {!! $name !!}.\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps in Laravel Model\nDESCRIPTION: Demonstrates how to disable automatic timestamp management in Eloquent models by setting the timestamps property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * Indicates if the model should be timestamped.\n     *\n     * @var bool\n     */\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Telescope Data Recording\nDESCRIPTION: PHP code for the filter method that controls which data Telescope records based on environment and entry types.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Telescope\\IncomingEntry;\nuse Laravel\\Telescope\\Telescope;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    $this->hideSensitiveRequestDetails();\n\n    Telescope::filter(function (IncomingEntry $entry) {\n        if ($this->app->environment('local')) {\n            return true;\n        }\n\n        return $entry->isReportableException() ||\n            $entry->isFailedJob() ||\n            $entry->isScheduledTask() ||\n            $entry->isSlowQuery() ||\n            $entry->hasMonitoredTag();\n    });\n```\n\n----------------------------------------\n\nTITLE: Performing Unions in Laravel Query Builder\nDESCRIPTION: Demonstrates how to use the union and unionAll methods to combine multiple queries in Laravel's query builder.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\n$first = DB::table('users')\n    ->whereNull('first_name');\n\n$users = DB::table('users')\n    ->whereNull('last_name')\n    ->union($first)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Path in Laravel Test Responses\nDESCRIPTION: The assertJsonPath method asserts that the response contains the given data at the specified path. It takes the JSON path and expected value as arguments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonPath($path, $expectedValue);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonPath('user.name', 'Steve Schoger');\n```\n\n----------------------------------------\n\nTITLE: Creating Soft Deletes Timestamp\nDESCRIPTION: Adds a nullable deleted_at timestamp column for soft deletes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$table->softDeletes('deleted_at', precision: 0);\n```\n\n----------------------------------------\n\nTITLE: Customizing Exists Rule with Column Name in Laravel Validation\nDESCRIPTION: Demonstrates how to specify a custom column name for the 'exists' validation rule in Laravel, allowing for more precise database checks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n'state' => 'exists:states,abbreviation'\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Details When Creating Subscriptions in Laravel Cashier\nDESCRIPTION: Demonstrates passing additional customer and subscription options to the create method when creating a new subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$user->newSubscription('default', 'price_monthly')->create($paymentMethod, [\n    'email' => $email,\n], [\n    'metadata' => ['note' => 'Some extra information.'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Checking Node and NPM Installation\nDESCRIPTION: Commands to verify Node.js and NPM installation on the system or through Laravel Sail.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\nnpm -v\n```\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/sail node -v\n./vendor/bin/sail npm -v\n```\n\n----------------------------------------\n\nTITLE: Refreshing Laravel Migrations\nDESCRIPTION: Commands for refreshing migrations by rolling back and re-running them, with options for seeding and step limits.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate:refresh\n\n# Refresh the database and run all database seeds...\nphp artisan migrate:refresh --seed\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate:refresh --step=5\n```\n\n----------------------------------------\n\nTITLE: Registering Namespaced Component Paths\nDESCRIPTION: Shows how to register anonymous component paths with a namespace prefix for better organization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_85\n\nLANGUAGE: php\nCODE:\n```\nBlade::anonymousComponentPath(__DIR__.'/../components', 'dashboard');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Polymorphic Relationships in PHP\nDESCRIPTION: This code demonstrates how to retrieve polymorphic relationships, including accessing tags for a post and accessing posts or videos for a tag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\n$post = Post::find(1);\n\nforeach ($post->tags as $tag) {\n    // ...\n}\n\nuse App\\Models\\Tag;\n\n$tag = Tag::find(1);\n\nforeach ($tag->posts as $post) {\n    // ...\n}\n\nforeach ($tag->videos as $video) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Mail Notifications in Laravel\nDESCRIPTION: Example of creating a formatted email notification using MailMessage builder with greeting, text lines, and call to action.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the mail representation of the notification.\n */\npublic function toMail(object $notifiable): MailMessage\n{\n    $url = url('/invoice/'.$this->invoice->id);\n\n    return (new MailMessage)\n        ->greeting('Hello!')\n        ->line('One of your invoices has been paid!')\n        ->lineIf($this->amount > 0, \"Amount paid: {$this->amount}\")\n        ->action('View Invoice', $url)\n        ->line('Thank you for using our application!');\n}\n```\n\n----------------------------------------\n\nTITLE: Removing File Extensions with Basename in Laravel PHP\nDESCRIPTION: The basename method can also remove a specified extension from the trailing component of a path.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_83\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('/foo/bar/baz.jpg')->basename('.jpg');\n\n// 'baz'\n```\n\n----------------------------------------\n\nTITLE: Caching Laravel Views with Artisan Command\nDESCRIPTION: Shows the Artisan command to precompile all views used by a Laravel application. This improves performance by avoiding on-demand compilation during requests and is recommended for production deployments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/views.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan view:cache\n```\n\n----------------------------------------\n\nTITLE: Creating View Using Artisan Command\nDESCRIPTION: Command to generate a new view file using Laravel's Artisan CLI.\nSOURCE: https://github.com/laravel/docs/blob/12.x/views.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:view greeting\n```\n\n----------------------------------------\n\nTITLE: Registering View Composer\nDESCRIPTION: Example of registering view composers in a service provider using both class-based and closure-based approaches.\nSOURCE: https://github.com/laravel/docs/blob/12.x/views.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Providers;\n\nuse App\\View\\Composers\\ProfileComposer;\nuse Illuminate\\Support\\Facades;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\View\\View;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    public function boot(): void\n    {\n        Facades\\View::composer('profile', ProfileComposer::class);\n\n        Facades\\View::composer('welcome', function (View $view) {\n            // ...\n        });\n\n        Facades\\View::composer('dashboard', function (View $view) {\n            // ...\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Model with Mass Assignment After Defining Fillable Attributes\nDESCRIPTION: Shows how to use the create() method after defining fillable attributes on the model, safely inserting a new record in the database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$flight = Flight::create(['name' => 'London to Paris']);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Method for Single Charge with Stripe\nDESCRIPTION: JavaScript code to create a payment method using Stripe's createPaymentMethod for single charge transactions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardHolderName = document.getElementById('card-holder-name');\nconst cardButton = document.getElementById('card-button');\n\ncardButton.addEventListener('click', async (e) => {\n    const { paymentMethod, error } = await stripe.createPaymentMethod(\n        'card', cardElement, {\n            billing_details: { name: cardHolderName.value }\n        }\n    );\n\n    if (error) {\n        // Display \"error.message\" to the user...\n    } else {\n        // The card has been verified successfully...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Dumping Collection Items using dump Method in PHP\nDESCRIPTION: The dump method outputs the current items in the collection for debugging purposes. It prints the collection structure and items without halting script execution. To stop execution after dumping, the dd method should be used instead. Input is a collection, output is a debug dump to the output stream.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['John Doe', 'Jane Doe']);\n\n$collection->dump();\n\n/*\n    Collection {\n        #items: array:2 [\n            0 => \"John Doe\"\n            1 => \"Jane Doe\"\n        ]\n    }\n*/\n```\n\n----------------------------------------\n\nTITLE: Using toResource Method on User Model in Laravel\nDESCRIPTION: Shows how to use the toResource method on a User model to automatically discover and use the appropriate resource class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn User::findOrFail($id)->toResource();\n```\n\n----------------------------------------\n\nTITLE: Defining Laravel Collection Macro with Arguments PHP\nDESCRIPTION: Demonstrates creating a collection macro (`toLocale`) that accepts arguments (`$locale`). The closure captures the argument using the `use` keyword and applies a transformation (translation using `Lang::get`) to each item in the collection based on the provided locale.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Collection;\nuse Illuminate\\Support\\Facades\\Lang;\n\nCollection::macro('toLocale', function (string $locale) {\n    return $this->map(function (string $value) use ($locale) {\n        return Lang::get($value, [], $locale);\n    });\n});\n\n$collection = collect(['first', 'second']);\n\n$translated = $collection->toLocale('es');\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Laravel Dusk Tests\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to run Laravel Dusk tests. It includes steps for environment preparation, database setup, Chrome driver installation, and test execution. It also configures artifact uploading for screenshots and console logs on test failure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_83\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\non: [push]\njobs:\n\n  dusk-php:\n    runs-on: ubuntu-latest\n    env:\n      APP_URL: \"http://127.0.0.1:8000\"\n      DB_USERNAME: root\n      DB_PASSWORD: root\n      MAIL_MAILER: log\n    steps:\n      - uses: actions/checkout@v4\n      - name: Prepare The Environment\n        run: cp .env.example .env\n      - name: Create Database\n        run: |\n          sudo systemctl start mysql\n          mysql --user=\"root\" --password=\"root\" -e \"CREATE DATABASE \\`my-database\\` character set UTF8mb4 collate utf8mb4_bin;\"\n      - name: Install Composer Dependencies\n        run: composer install --no-progress --prefer-dist --optimize-autoloader\n      - name: Generate Application Key\n        run: php artisan key:generate\n      - name: Upgrade Chrome Driver\n        run: php artisan dusk:chrome-driver --detect\n      - name: Start Chrome Driver\n        run: ./vendor/laravel/dusk/bin/chromedriver-linux --port=9515 &\n      - name: Run Laravel Server\n        run: php artisan serve --no-reload &\n      - name: Run Dusk Tests\n        run: php artisan dusk\n      - name: Upload Screenshots\n        if: failure()\n        uses: actions/upload-artifact@v4\n        with:\n          name: screenshots\n          path: tests/Browser/screenshots\n      - name: Upload Console Logs\n        if: failure()\n        uses: actions/upload-artifact@v4\n        with:\n          name: console\n          path: tests/Browser/console\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Subscriptions in Laravel Paddle\nDESCRIPTION: Route implementation for creating multiple distinct subscriptions for a single customer by specifying a subscription type as the second argument to the 'subscribe' method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/swimming/subscribe', function (Request $request) {\n    $checkout = $request->user()->subscribe($swimmingMonthly = 'pri_123', 'swimming');\n\n    return view('billing', ['checkout' => $checkout]);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Route Parameters in Laravel\nDESCRIPTION: Shows how to define optional route parameters in Laravel by using a question mark after the parameter name and providing default values in the route callback.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/user/{name?}', function (?string $name = null) {\n    return $name;\n});\n\nRoute::get('/user/{name?}', function (?string $name = 'John') {\n    return $name;\n});\n```\n\n----------------------------------------\n\nTITLE: Reloading Laravel Octane Workers\nDESCRIPTION: Command to gracefully reload Laravel Octane workers, typically used after deployment.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan octane:reload\n```\n\n----------------------------------------\n\nTITLE: Testing Laravel Helper Functions\nDESCRIPTION: Shows how to test a route that uses the cache helper function by mocking the underlying Cache facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/cache', function () {\n    return cache('key');\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Cache;\n\n/**\n * A basic functional test example.\n */\npublic function test_basic_example(): void\n{\n    Cache::shouldReceive('get')\n        ->with('key')\n        ->andReturn('value');\n\n    $response = $this->get('/cache');\n\n    $response->assertSee('value');\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping HTTP Requests\nDESCRIPTION: Demonstrates how to dump the outgoing request instance before sending it and terminate script execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Http::dd()->get('http://example.com');\n```\n\n----------------------------------------\n\nTITLE: Generating a Resource Controller\nDESCRIPTION: Artisan command to create a resource controller in Laravel, which includes methods for common CRUD operations on a resource.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:controller PhotoController --resource\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Validation with Vue, Inertia, and Laravel Precognition\nDESCRIPTION: Shows how to use Precognition with Vue and Inertia, including form submission with Inertia-specific options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useForm } from 'laravel-precognition-vue-inertia';\n\nconst form = useForm('post', '/users', {\n    name: '',\n    email: '',\n});\n\nconst submit = () => form.submit({\n    preserveScroll: true,\n    onSuccess: () => form.reset(),\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Removing Wrapping Characters with Str::unwrap in Laravel\nDESCRIPTION: The Str::unwrap method removes specified strings from the beginning and end of a given string, useful for trimming delimiters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nStr::unwrap('-Laravel-', '-');\n\n// Laravel\n\nStr::unwrap('{framework: \"Laravel\"}', '{', '}');\n\n// framework: \"Laravel\"\n```\n\n----------------------------------------\n\nTITLE: Dropping Foreign Keys by Column in Laravel Migrations\nDESCRIPTION: Demonstrates dropping a foreign key constraint by passing an array containing the column name. Laravel will convert this to the conventional constraint name automatically.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n$table->dropForeign(['user_id']);\n```\n\n----------------------------------------\n\nTITLE: Specifying Column Name with Rule::exists in Laravel Validation\nDESCRIPTION: Demonstrates how to explicitly specify the database column name when using Rule::exists method in Laravel validation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n'state' => Rule::exists('states', 'abbreviation'),\n```\n\n----------------------------------------\n\nTITLE: Response Debugging in Tests with Pest\nDESCRIPTION: Examples of debugging response content, headers, and session data in HTTP tests using Pest framework.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntest('basic test', function () {\n    $response = $this->get('/');\n\n    $response->dumpHeaders();\n\n    $response->dumpSession();\n\n    $response->dump();\n});\n```\n\n----------------------------------------\n\nTITLE: Storage Disk File Attachment\nDESCRIPTION: Demonstrates attaching a file from Laravel's storage disk system.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\npublic function attachments(): array\n{\n    return [\n        Attachment::fromStorage('/path/to/file'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Missing JSON Path in Laravel Tests\nDESCRIPTION: The assertJsonMissingPath method asserts that the response does not contain the given path. It takes the JSON path as an argument.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonMissingPath($path);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonMissingPath('user.email');\n```\n\n----------------------------------------\n\nTITLE: Validating ULID Strings in PHP\nDESCRIPTION: Demonstrates how to use the 'isUlid' method to check if a given string is a valid ULID (Universally Unique Lexicographically Sortable Identifier).\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_119\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('01gd6r360bp37zj17nxb55yv40')->isUlid();\n\n// true\n\n$result = Str::of('Taylor')->isUlid();\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDv7 with Custom Time in Laravel\nDESCRIPTION: Generating a UUID version 7 with a specific timestamp using the time parameter, allowing for deterministic time-based IDs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_68\n\nLANGUAGE: php\nCODE:\n```\nreturn (string) Str::uuid7(time: now());\n```\n\n----------------------------------------\n\nTITLE: Creating ENUM Column in Laravel Migration\nDESCRIPTION: The enum method creates an ENUM equivalent column with the given valid values in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n$table->enum('difficulty', ['easy', 'hard']);\n```\n\n----------------------------------------\n\nTITLE: Creating INTEGER Column in Laravel Migration\nDESCRIPTION: The integer method creates an INTEGER equivalent column in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n$table->integer('votes');\n```\n\n----------------------------------------\n\nTITLE: Publishing Package Configuration in ServiceProvider\nDESCRIPTION: Demonstrates how to publish a package's configuration file to the application's config directory using the publishes method in the service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function boot(): void\n{\n    $this->publishes([\n        __DIR__.'/../config/courier.php' => config_path('courier.php'),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth Tokens in Laravel\nDESCRIPTION: This snippet demonstrates how to revoke access tokens and their associated refresh tokens using Laravel Passport's TokenRepository and RefreshTokenRepository.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Passport\\TokenRepository;\nuse Laravel\\Passport\\RefreshTokenRepository;\n\n$tokenRepository = app(TokenRepository::class);\n$refreshTokenRepository = app(RefreshTokenRepository::class);\n\n// Revoke an access token...\n$tokenRepository->revokeAccessToken($tokenId);\n\n// Revoke all of the token's refresh tokens...\n$refreshTokenRepository->revokeRefreshTokensByAccessTokenId($tokenId);\n```\n\n----------------------------------------\n\nTITLE: Restoring Soft Deleted Models in Laravel Eloquent\nDESCRIPTION: Demonstrates how to restore a soft deleted model by using the restore() method, which sets the deleted_at column to null.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$flight->restore();\n```\n\n----------------------------------------\n\nTITLE: Implementing Pennant Middleware for Feature-Based Route Access\nDESCRIPTION: Shows how to use the EnsureFeaturesAreActive middleware to restrict route access based on feature flags and customize the response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Route;\nuse Laravel\\Pennant\\Middleware\\EnsureFeaturesAreActive;\n\nRoute::get('/api/servers', function () {\n    // ...\n})->middleware(EnsureFeaturesAreActive::using('new-api', 'servers-api'));\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse Laravel\\Pennant\\Middleware\\EnsureFeaturesAreActive;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    EnsureFeaturesAreActive::whenInactive(\n        function (Request $request, array $features) {\n            return new Response(status: 403);\n        }\n    );\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Encoded Forward Slashes in Route Parameters in Laravel\nDESCRIPTION: Shows how to allow encoded forward slashes in route parameter values by using a custom 'where' condition with a regular expression that matches any character.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/search/{search}', function (string $search) {\n    return $search;\n})->where('search', '.*');\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Pennant via Composer\nDESCRIPTION: Command to install Laravel Pennant using Composer package manager.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/pennant\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Sail Docker Images\nDESCRIPTION: Commands to completely rebuild Sail Docker images with latest packages.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose down -v\n\nsail build --no-cache\n\nsail up\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Object Formatting for Laravel Translations (PHP)\nDESCRIPTION: This snippet shows how to register a custom formatting handler for a specific object type in Laravel translations. It uses the translator's stringable method within the boot method of the AppServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Lang;\nuse Money\\Money;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Lang::stringable(function (Money $money) {\n        return $money->formatTo('en_GB');\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Stripe Subscription with One Method Call in PHP\nDESCRIPTION: Shows how to update a Stripe subscription in one step using the updateStripeSubscription method, which accepts an array of parameters to modify on the Stripe object.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_123\n\nLANGUAGE: php\nCODE:\n```\n$subscription->updateStripeSubscription(['application_fee_percent' => 5]);\n```\n\n----------------------------------------\n\nTITLE: Checking Price-Specific Subscription in PHP\nDESCRIPTION: Method to verify if a user is subscribed to a specific Paddle price ID, useful for checking plan types like monthly or annual subscriptions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscribedToPrice($monthly = 'pri_123', 'default')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Scout Database Driver\nDESCRIPTION: Configuration for using the database driver in Scout via environment variable.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nSCOUT_DRIVER=database\n```\n\n----------------------------------------\n\nTITLE: Clearing Jobs from Default Queue in Laravel\nDESCRIPTION: Command to delete all jobs from the default queue of the default connection, removing pending jobs that haven't been processed yet.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_103\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:clear\n```\n\n----------------------------------------\n\nTITLE: Defining a Comprehensive Broadcast Event in PHP\nDESCRIPTION: A more detailed example of a broadcast event class, including constructor, broadcastOn method, and optional methods for customizing the broadcast.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Events;\n\nuse App\\Models\\User;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass ServerCreated implements ShouldBroadcast\n{\n    use SerializesModels;\n\n    /**\n     * Create a new event instance.\n     */\n    public function __construct(\n        public User $user,\n    ) {}\n\n    /**\n     * Get the channels the event should broadcast on.\n     *\n     * @return array<int, \\Illuminate\\Broadcasting\\Channel>\n     */\n    public function broadcastOn(): array\n    {\n        return [\n            new PrivateChannel('user.'.$this->user->id),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Immediate Billing for Single Charges in Laravel Paddle\nDESCRIPTION: Method to charge a customer immediately for a one-time charge on their subscription, rather than waiting for the next billing cycle.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$response = $user->subscription()->chargeAndInvoice('pri_123');\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for DynamoDB Integration in Laravel\nDESCRIPTION: Composer command to install the AWS SDK package required for Laravel to communicate with Amazon DynamoDB for queue batch storage.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_61\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require aws/aws-sdk-php\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizon Environments in PHP\nDESCRIPTION: Define worker process configurations for different environments in the Horizon configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'environments' => [\n    'production' => [\n        'supervisor-1' => [\n            'maxProcesses' => 10,\n            'balanceMaxShift' => 1,\n            'balanceCooldown' => 3,\n        ],\n    ],\n\n    'local' => [\n        'supervisor-1' => [\n            'maxProcesses' => 3,\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Publishing Pulse Configuration File\nDESCRIPTION: Command to publish the Pulse configuration file for advanced customization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --tag=pulse-config\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Structure in Laravel Test Responses\nDESCRIPTION: The assertJsonStructure method asserts that the response has a given JSON structure. It takes an array representing the expected structure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonStructure(array $structure);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonStructure([\n    'user' => [\n        'name',\n    ]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonStructure([\n    'user' => [\n        '*' => [\n             'name',\n             'age',\n             'location'\n        ]\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Skipping Items Conditionally with skipWhile in Laravel Collections - PHP\nDESCRIPTION: Demonstrates the skipWhile method which ignores items in a collection while a provided callback returns true. Once the callback returns false, the remaining items are returned as a new collection. It requires a callback function as a parameter that determines the skipping condition. If the callback never returns false, an empty collection is returned.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_110\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4]);\n\n$subset = $collection->skipWhile(function (int $item) {\n    return $item <= 3;\n});\n\n$subset->all();\n\n// [4]\n```\n\n----------------------------------------\n\nTITLE: Casting Attribute to Array in Laravel Eloquent (PHP)\nDESCRIPTION: Shows how to use the basic `array` cast type within the `casts()` method of a Laravel Eloquent model (`User`) for an attribute named `options`. This automatically deserializes a JSON database column (e.g., `JSON` or `TEXT` type) into a PHP array upon access and serializes it back to JSON on save.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Get the attributes that should be cast.\n     *\n     * @return array<string, string>\n     */\n    protected function casts(): array\n    {\n        return [\n            'options' => 'array',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Individual Notifications as Read in Laravel\nDESCRIPTION: Shows how to iterate through unread notifications and mark each one as read using the markAsRead method, which updates the read_at column in the database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$user = App\\Models\\User::find(1);\n\nforeach ($user->unreadNotifications as $notification) {\n    $notification->markAsRead();\n}\n```\n\n----------------------------------------\n\nTITLE: Using withWhereHas for Conditional Eager Loading\nDESCRIPTION: This snippet demonstrates the withWhereHas method, which both filters parent models based on relationship conditions and eager loads the matching related models in one operation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_89\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = User::withWhereHas('posts', function ($query) {\n    $query->where('featured', true);\n})->get();\n```\n\n----------------------------------------\n\nTITLE: Customizing Broadcast Notification Channel in Laravel\nDESCRIPTION: Shows how to customize the channel name used for broadcasting notifications by defining a receivesBroadcastNotificationsOn method on the notifiable entity.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\n\nclass User extends Authenticatable\n{\n    use Notifiable;\n\n    /**\n     * The channels the user receives notification broadcasts on.\n     */\n    public function receivesBroadcastNotificationsOn(): string\n    {\n        return 'users.'.$this->id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FTP Driver in Laravel\nDESCRIPTION: Example configuration for setting up an FTP filesystem in Laravel's filesystems.php config file, including required credentials and optional settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'ftp' => [\n    'driver' => 'ftp',\n    'host' => env('FTP_HOST'),\n    'username' => env('FTP_USERNAME'),\n    'password' => env('FTP_PASSWORD'),\n\n    // Optional FTP Settings...\n    // 'port' => env('FTP_PORT', 21),\n    // 'root' => env('FTP_ROOT'),\n    // 'passive' => true,\n    // 'ssl' => true,\n    // 'timeout' => 30,\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Scope Middleware in Laravel\nDESCRIPTION: Demonstrates how to use the scope middleware to verify access token scopes on routes. The route will check if the token has either 'check-status' or 'place-orders' scope.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/orders', function () {\n    // Access token has either \"check-status\" or \"place-orders\" scope...\n})->middleware(['auth:api', 'scope:check-status,place-orders']);\n```\n\n----------------------------------------\n\nTITLE: Custom Decay Rate for Rate Limiting in Laravel\nDESCRIPTION: This snippet shows how to set a custom decay rate when using the RateLimiter facade's attempt method. It allows 5 attempts every two minutes for the 'send-message' action.\nSOURCE: https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$executed = RateLimiter::attempt(\n    'send-message:'.$user->id,\n    $perTwoMinutes = 5,\n    function() {\n        // Send message...\n    },\n    $decayRate = 120,\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Unauthenticated User Redirection\nDESCRIPTION: Shows how to customize where unauthenticated users are redirected when they attempt to access a protected route, using the redirectGuestsTo method in the application bootstrap file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->redirectGuestsTo('/login');\n\n    // Using a closure...\n    $middleware->redirectGuestsTo(fn (Request $request) => route('login'));\n})\n```\n\n----------------------------------------\n\nTITLE: Using fake() function to generate fake data in Laravel PHP\nDESCRIPTION: The fake() function resolves a Faker singleton from the container for generating fake data in factories, seeding, tests, and prototyping, with optional locale support.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_92\n\nLANGUAGE: php\nCODE:\n```\n@for($i = 0; $i < 10; $i++)\n    <dl>\n        <dt>Name</dt>\n        <dd>{{ fake()->name() }}</dd>\n\n        <dt>Email</dt>\n        <dd>{{ fake()->unique()->safeEmail() }}</dd>\n    </dl>\n@endfor\n```\n\nLANGUAGE: php\nCODE:\n```\nfake('nl_NL')->name()\n```\n\n----------------------------------------\n\nTITLE: Single Request Authentication in Laravel\nDESCRIPTION: This snippet shows how to authenticate a user for a single request in Laravel without using sessions or cookies. It demonstrates the use of the once method on the Auth facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nif (Auth::once($credentials)) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Items from Collections with take() - PHP\nDESCRIPTION: Describes the take method, which returns a new collection containing a specified number of items either from the start (positive integer) or the end (negative integer) of the original collection. The input is an integer indicating the count. The output is a collection slice.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_126\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([0, 1, 2, 3, 4, 5]);\n\n$chunk = $collection->take(3);\n\n$chunk->all();\n\n// [0, 1, 2]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([0, 1, 2, 3, 4, 5]);\n\n$chunk = $collection->take(-2);\n\n$chunk->all();\n\n// [4, 5]\n```\n\n----------------------------------------\n\nTITLE: Generating Model with Migration in Laravel\nDESCRIPTION: Command to create an Eloquent model along with a corresponding database migration file, using the --migration or -m flag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:model Flight --migration\n```\n\n----------------------------------------\n\nTITLE: Canceling Typed Subscriptions in Laravel Paddle\nDESCRIPTION: Method to cancel a specific subscription type by referencing the subscription type in the 'subscription' method before calling 'cancel'.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('swimming')->cancel();\n```\n\n----------------------------------------\n\nTITLE: Comparing Collections by Keys with diffKeys Method in PHP\nDESCRIPTION: The diffKeys method compares the collection against another collection or a PHP array using only the keys. It returns key/value pairs from the original collection whose keys are not present in the given collection or array. It requires a Laravel Collection and can accept arrays or collections. The output is a filtered collection with keys unique to the original.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'one' => 10,\n    'two' => 20,\n    'three' => 30,\n    'four' => 40,\n    'five' => 50,\n]);\n\n$diff = $collection->diffKeys([\n    'two' => 2,\n    'four' => 4,\n    'six' => 6,\n    'eight' => 8,\n]);\n\n$diff->all();\n\n// ['one' => 10, 'three' => 30, 'five' => 50]\n```\n\n----------------------------------------\n\nTITLE: Dispatching High Priority Queue Job in Laravel PHP\nDESCRIPTION: Demonstrates how to dispatch a job to a high priority queue in Laravel. This is useful when certain jobs need to be processed before others.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_77\n\nLANGUAGE: php\nCODE:\n```\ndispatch((new Job)->onQueue('high'));\n```\n\n----------------------------------------\n\nTITLE: Customizing Foreign Key Names and References in Laravel Migrations\nDESCRIPTION: Demonstrates how to customize the referenced table name and index name when using the foreignId method with constrained() in Laravel migrations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('posts', function (Blueprint $table) {\n    $table->foreignId('user_id')->constrained(\n        table: 'users', indexName: 'posts_user_id'\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Running Pulse Check Daemon\nDESCRIPTION: Command to run the Pulse check daemon that polls for server information and third-party card data. Must be run on all application servers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nphp artisan pulse:check\n```\n\n----------------------------------------\n\nTITLE: Custom Key Configuration for Has One Through\nDESCRIPTION: Example showing how to customize foreign and local keys in a Has One Through relationship.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nclass Mechanic extends Model\n{\n    /**\n     * Get the car's owner.\n     */\n    public function carOwner(): HasOneThrough\n    {\n        return $this->hasOneThrough(\n            Owner::class,\n            Car::class,\n            'mechanic_id', // Foreign key on the cars table...\n            'car_id', // Foreign key on the owners table...\n            'id', // Local key on the mechanics table...\n            'id' // Local key on the cars table...\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CSRF Meta Tag Implementation in Blade\nDESCRIPTION: Example of storing CSRF token in HTML meta tag for JavaScript access.\nSOURCE: https://github.com/laravel/docs/blob/12.x/csrf.md#2025-04-21_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Reverb Package\nDESCRIPTION: Composer commands to install and configure Laravel Reverb broadcasting driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/reverb\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan reverb:install\n```\n\n----------------------------------------\n\nTITLE: Clearing Specific Queue Jobs in Laravel Horizon\nDESCRIPTION: Deletes jobs from a specific named queue using the --queue option with the horizon:clear command. This allows for targeted clearing of individual queues without affecting others.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan horizon:clear --queue=emails\n```\n\n----------------------------------------\n\nTITLE: Basic Browser Test Example in Laravel Dusk using Pest\nDESCRIPTION: Demonstrates a basic browser test using Laravel Dusk with Pest syntax, including database migrations, user creation, and browser interactions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\User;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nuse Laravel\\Dusk\\Browser;\n\nuses(DatabaseMigrations::class);\n\ntest('basic example', function () {\n    $user = User::factory()->create([\n        'email' => 'taylor@laravel.com',\n    ]);\n\n    $this->browse(function (Browser $browser) use ($user) {\n        $browser->visit('/login')\n            ->type('email', $user->email)\n            ->type('password', 'password')\n            ->press('Login')\n            ->assertPathIs('/home');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Pulse Entries with Aggregation in PHP\nDESCRIPTION: Demonstrates how to record entries in Laravel Pulse using the record method with sum and count aggregations. Shows basic usage of Pulse::record with type, key, and value parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Pulse\\Facades\\Pulse;\n\nPulse::record('user_sale', $user->id, $sale->amount)\n    ->sum()\n    ->count();\n```\n\n----------------------------------------\n\nTITLE: Limiting Words in a String with words in Laravel PHP\nDESCRIPTION: The words method limits the number of words in a string, optionally appending a suffix. It's useful for creating excerpts or summaries of longer text.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_171\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('Perfectly balanced, as all things should be.')->words(3, ' >>>');\n\n// Perfectly balanced, as >>>\n```\n\n----------------------------------------\n\nTITLE: Implementing Podcast Publishing with Dependency Injection in Laravel\nDESCRIPTION: This snippet demonstrates a traditional approach to dependency injection in Laravel, where a Publisher instance is explicitly injected into the publish method of a Podcast model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse App\\Contracts\\Publisher;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Podcast extends Model\n{\n    /**\n     * Publish the podcast.\n     */\n    public function publish(Publisher $publisher): void\n    {\n        $this->update(['publishing' => now()]);\n\n        $publisher->publish($this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Piping Collection Through Closures with `pipeThrough` in PHP\nDESCRIPTION: The `pipeThrough` method passes the collection to an array of closures sequentially, applying each closure in order, and returning the final result.  This is an example of how to chain several methods on a collection.  The example uses two closures: one merges an array into the collection and the second sums the values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_89\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Illuminate\\Support\\Collection;\n\n$collection = collect([1, 2, 3]);\n\n$result = $collection->pipeThrough([\n    function (Collection $collection) {\n        return $collection->merge([4, 5]);\n    },\n    function (Collection $collection) {\n        return $collection->sum();\n    },\n]);\n\n// 15\n```\n\n----------------------------------------\n\nTITLE: Creating DATE Column in Laravel Migration\nDESCRIPTION: The date method creates a DATE equivalent column in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n$table->date('created_at');\n```\n\n----------------------------------------\n\nTITLE: Enum Casting in Eloquent Model\nDESCRIPTION: This code snippet demonstrates how to cast an attribute to a PHP enum using the `casts` method in a Laravel Eloquent model. It defines the `status` attribute to be cast to the `ServerStatus` enum.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Enums\\ServerStatus;\n\n/**\n * Get the attributes that should be cast.\n *\n * @return array<string, string>\n */\nprotected function casts(): array\n{\n    return [\n        'status' => ServerStatus::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Task Scheduling with Closure in Laravel\nDESCRIPTION: Demonstrates how to schedule a basic database cleanup task using a closure that runs daily at midnight.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::call(function () {\n    DB::table('recent_users')->delete();\n})->daily();\n```\n\n----------------------------------------\n\nTITLE: Textarea Input with Laravel Prompts\nDESCRIPTION: Examples of using textarea() function for multi-line input with validation and configuration options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\textarea;\n\n$story = textarea('Tell me a story.');\n```\n\nLANGUAGE: php\nCODE:\n```\n$story = textarea(\n    label: 'Tell me a story.',\n    validate: fn (string $value) => match (true) {\n        strlen($value) < 250 => 'The story must be at least 250 characters.',\n        strlen($value) > 10000 => 'The story must not exceed 10,000 characters.',\n        default => null\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Hidden Context in Laravel\nDESCRIPTION: Demonstrates how to use hidden context methods to store and retrieve data that is not accessible via standard context methods and not appended to logs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/context.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Context;\n\nContext::addHidden('key', 'value');\n\nContext::getHidden('key');\n// 'value'\n\nContext::get('key');\n// null\n```\n\nLANGUAGE: php\nCODE:\n```\nContext::addHidden(/* ... */);\nContext::addHiddenIf(/* ... */);\nContext::pushHidden(/* ... */);\nContext::getHidden(/* ... */);\nContext::pullHidden(/* ... */);\nContext::popHidden(/* ... */);\nContext::onlyHidden(/* ... */);\nContext::allHidden(/* ... */);\nContext::hasHidden(/* ... */);\nContext::forgetHidden(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Checking if a Model is Soft Deleted in Laravel\nDESCRIPTION: Shows how to determine if a model instance has been soft deleted by using the trashed() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nif ($flight->trashed()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Site-Specific PHP Versions\nDESCRIPTION: Commands to isolate and manage PHP versions for specific Valet sites.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/Sites/example-site\n\nvalet isolate php@8.0\n\nvalet isolate php@8.0 --site=\"site-name\"\n\nvalet php\nvalet composer\nvalet which-php\n\nvalet isolated\n\nvalet unisolate\n```\n\n----------------------------------------\n\nTITLE: Slow Queries Configuration\nDESCRIPTION: Configuration example for setting per-query thresholds in the SlowQueries recorder.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nRecorders\\SlowQueries::class => [\n    // ...\n    'threshold' => [\n        '#^insert into `yearly_reports`#' => 5000,\n        'default' => env('PULSE_SLOW_QUERIES_THRESHOLD', 1000),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Using e Function for HTML Escaping in Laravel\nDESCRIPTION: The e function runs PHP's htmlspecialchars function with double_encode option set to true by default, which escapes HTML entities.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\necho e('<html>foo</html>');\n\n// &lt;html&gt;foo&lt;/html&gt;\n```\n\n----------------------------------------\n\nTITLE: Using putFile Method for File Storage in Laravel\nDESCRIPTION: Shows an alternative way to store uploaded files using the putFile method on the Storage facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$path = Storage::putFile('avatars', $request->file('avatar'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Unique Jobs in Laravel Queue System\nDESCRIPTION: Example of a Laravel job implementing the ShouldBeUnique interface to ensure only one instance of the job is on the queue at any time. This prevents duplicate job processing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldBeUnique;\n\nclass UpdateSearchIndex implements ShouldQueue, ShouldBeUnique\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Updating Payment Method with Stripe\nDESCRIPTION: Provides an HTML form structure for updating a customer's payment method using Stripe Elements and Setup Intents.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"card-holder-name\" type=\"text\">\n\n<!-- Stripe Elements Placeholder -->\n<div id=\"card-element\"></div>\n\n<button id=\"card-button\" data-secret=\"{{ $intent->client_secret }}\">\n    Update Payment Method\n</button>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query String Parameter with Default in Laravel\nDESCRIPTION: Getting a query string parameter with a default value if the parameter is not present in the URL.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$name = $request->query('name', 'Helen');\n```\n\n----------------------------------------\n\nTITLE: Testing Table Output in Laravel Console Commands\nDESCRIPTION: Shows how to test commands that display tables using the expectsTable method, which verifies table headers and data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->artisan('users:all')\n    ->expectsTable([\n        'ID',\n        'Email',\n    ], [\n        [1, 'taylor@example.com'],\n        [2, 'abigail@example.com'],\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Defining an Interactive Console Command in Laravel\nDESCRIPTION: Shows how to create an interactive Artisan command that asks questions and provides output based on user input. The command prompts for a name and programming language preference.\nSOURCE: https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nArtisan::command('question', function () {\n    $name = $this->ask('What is your name?');\n\n    $language = $this->choice('Which language do you prefer?', [\n        'PHP',\n        'Ruby',\n        'Python',\n    ]);\n\n    $this->line('Your name is '.$name.' and you prefer '.$language.'.');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting JavaScript Evaluation in Laravel Dusk\nDESCRIPTION: Evaluate JavaScript expressions and assert their results using the assertScript method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertScript('window.isLoaded')\n    ->assertScript('document.readyState', 'complete');\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Livewire Component in PHP\nDESCRIPTION: A simple Livewire counter component that demonstrates reactivity in PHP. The component maintains a count state and provides a method to increment it when triggered from the frontend.\nSOURCE: https://github.com/laravel/docs/blob/12.x/frontend.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Livewire;\n\nuse Livewire\\Component;\n\nclass Counter extends Component\n{\n    public $count = 0;\n\n    public function increment()\n    {\n        $this->count++;\n    }\n\n    public function render()\n    {\n        return view('livewire.counter');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation Strings as Keys in Laravel (JSON)\nDESCRIPTION: This JSON snippet shows how to use translation strings as keys in Laravel, supporting pluralization. It demonstrates the translation of an English pluralization string to Spanish.\nSOURCE: https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"There is one apple|There are many apples\": \"Hay una manzana|Hay muchas manzanas\"\n}\n```\n\n----------------------------------------\n\nTITLE: Scoping Selectors in Laravel Dusk\nDESCRIPTION: Shows how to scope operations within a given selector using the with method, and how to execute assertions outside the current scope.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$browser->with('.table', function (Browser $table) {\n    $table->assertSee('Hello World')\n        ->clickLink('Delete');\n});\n\n$browser->with('.table', function (Browser $table) {\n    // Current scope is `body .table`...\n\n    $browser->elsewhere('.page-title', function (Browser $title) {\n        // Current scope is `body .page-title`...\n        $title->assertSee('Hello World');\n    });\n\n    $browser->elsewhereWhenAvailable('.page-title', function (Browser $title) {\n        // Current scope is `body .page-title`...\n        $title->assertSee('Hello World');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Broadcasting Components\nDESCRIPTION: Artisan command to install and enable broadcasting functionality in a Laravel application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan install:broadcasting\n```\n\n----------------------------------------\n\nTITLE: Splitting Collections into Groups with split() - PHP\nDESCRIPTION: Illustrates the split method which divides a collection into a specified number of groups evenly. It requires Laravel's Collection and expects an integer number of groups as input. The output is a collection of grouped sub-collections, with leftover elements allocated to the final group if uneven.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_123\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$groups = $collection->split(3);\n\n$groups->all();\n\n// [[1, 2], [3, 4], [5]]\n```\n\n----------------------------------------\n\nTITLE: Sorting Collections by a Given Key with sortBy in Laravel Collections - PHP\nDESCRIPTION: Details the sortBy method, enabling sorting collections by a specific key, using optional sort flags similar to PHP's sort options. It preserves keys and usually requires reindexing with values. A closure can be supplied for complex sorting criteria. Multiple sort criteria and closures for multi-level sorting are also supported.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_116\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['name' => 'Desk', 'price' => 200],\n    ['name' => 'Chair', 'price' => 100],\n    ['name' => 'Bookcase', 'price' => 150],\n]);\n\n$sorted = $collection->sortBy('price');\n\n$sorted->values()->all();\n\n/*\n    [\n        ['name' => 'Chair', 'price' => 100],\n        ['name' => 'Bookcase', 'price' => 150],\n        ['name' => 'Desk', 'price' => 200],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['title' => 'Item 1'],\n    ['title' => 'Item 12'],\n    ['title' => 'Item 3'],\n]);\n\n$sorted = $collection->sortBy('title', SORT_NATURAL);\n\n$sorted->values()->all();\n\n/*\n    [\n        ['title' => 'Item 1'],\n        ['title' => 'Item 3'],\n        ['title' => 'Item 12'],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n    ['name' => 'Chair', 'colors' => ['Black']],\n    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n]);\n\n$sorted = $collection->sortBy(function (array $product, int $key) {\n    return count($product['colors']);\n});\n\n$sorted->values()->all();\n\n/*\n    [\n        ['name' => 'Chair', 'colors' => ['Black']],\n        ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n        ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['name' => 'Taylor Otwell', 'age' => 34],\n    ['name' => 'Abigail Otwell', 'age' => 30],\n    ['name' => 'Taylor Otwell', 'age' => 36],\n    ['name' => 'Abigail Otwell', 'age' => 32],\n]);\n\n$sorted = $collection->sortBy([\n    ['name', 'asc'],\n    ['age', 'desc'],\n]);\n\n$sorted->values()->all();\n\n/*\n    [\n        ['name' => 'Abigail Otwell', 'age' => 32],\n        ['name' => 'Abigail Otwell', 'age' => 30],\n        ['name' => 'Taylor Otwell', 'age' => 36],\n        ['name' => 'Taylor Otwell', 'age' => 34],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['name' => 'Taylor Otwell', 'age' => 34],\n    ['name' => 'Abigail Otwell', 'age' => 30],\n    ['name' => 'Taylor Otwell', 'age' => 36],\n    ['name' => 'Abigail Otwell', 'age' => 32],\n]);\n\n$sorted = $collection->sortBy([\n    fn (array $a, array $b) => $a['name'] <=> $b['name'],\n    fn (array $a, array $b) => $b['age'] <=> $a['age'],\n]);\n\n$sorted->values()->all();\n\n/*\n    [\n        ['name' => 'Abigail Otwell', 'age' => 32],\n        ['name' => 'Abigail Otwell', 'age' => 30],\n        ['name' => 'Taylor Otwell', 'age' => 36],\n        ['name' => 'Taylor Otwell', 'age' => 34],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Schema-Qualified Table Listing in Laravel 12\nDESCRIPTION: This example demonstrates how getTableListing now returns schema-qualified table names by default, with options to filter by schema and control the schema qualification in the returned table names.\nSOURCE: https://github.com/laravel/docs/blob/12.x/upgrade.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$tables = Schema::getTableListing();\n// ['main.migrations', 'main.users', 'blog.posts']\n\n$table = Schema::getTableListing(schema: 'main');\n// ['main.migrations', 'main.users']\n\n$table = Schema::getTableListing(schema: 'main', schemaQualified: false);\n// ['migrations', 'users']\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache for Rate Limiting in Laravel\nDESCRIPTION: This snippet shows how to configure the cache driver for rate limiting in Laravel's cache configuration file. It sets the default cache store and specifies a separate store for the rate limiter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('CACHE_STORE', 'database'),\n\n'limiter' => 'redis',\n```\n\n----------------------------------------\n\nTITLE: Tapping into Object Manipulation - Laravel PHP\nDESCRIPTION: Demonstrates the use of the `tap()` helper function for executing code on an object without affecting the return value. If a closure is given, the object is passed to the closure, and the original object is returned. Without a closure, it can be chained to any method and always returns the original object regardless of what the called method returns.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_117\n\nLANGUAGE: php\nCODE:\n```\n$user = tap(User::first(), function (User $user) {\n    $user->name = 'taylor';\n\n    $user->save();\n});\n\n$user = tap($user)->update([\n    'name' => $name,\n    'email' => $email,\n]);\n\nreturn $user->tap(function (User $user) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Differences with diff() in PHP\nDESCRIPTION: The `diff` method computes the difference between the collection and another collection or PHP array based on values. It returns a new collection containing only the items from the original collection that are not present in the given array/collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$diff = $collection->diff([2, 4, 6, 8]);\n\n$diff->all();\n\n// [1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Collection Iteration Example\nDESCRIPTION: Shows how to iterate over an Eloquent collection using a foreach loop to access model properties.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nforeach ($flights as $flight) {\n    echo $flight->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Headers Testing with Pest\nDESCRIPTION: Example showing how to set custom headers for HTTP requests in tests using Pest framework.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntest('interacting with headers', function () {\n    $response = $this->withHeaders([\n        'X-Header' => 'Value',\n    ])->post('/user', ['name' => 'Sally']);\n\n    $response->assertStatus(201);\n});\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Feature Values in PHP\nDESCRIPTION: Illustrates how to use Pennant's eager loading capabilities to improve performance when checking features for multiple users or scopes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nFeature::for($users)->load(['notifications-beta']);\n\nforeach ($users as $user) {\n    if (Feature::for($user)->active('notifications-beta')) {\n        $user->notify(new RegistrationSuccess);\n    }\n}\n\nFeature::for($users)->loadMissing([\n    'new-api',\n    'purchase-button',\n    'notifications-beta',\n]);\n\nFeature::for($users)->loadAll();\n```\n\n----------------------------------------\n\nTITLE: Contextual Binding in Laravel Container\nDESCRIPTION: Demonstrates how to bind different implementations of the same interface based on which class is requesting the dependency.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\PhotoController;\nuse App\\Http\\Controllers\\UploadController;\nuse App\\Http\\Controllers\\VideoController;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Illuminate\\Support\\Facades\\Storage;\n\n$this->app->when(PhotoController::class)\n    ->needs(Filesystem::class)\n    ->give(function () {\n        return Storage::disk('local');\n    });\n\n$this->app->when([VideoController::class, UploadController::class])\n    ->needs(Filesystem::class)\n    ->give(function () {\n        return Storage::disk('s3');\n    });\n```\n\n----------------------------------------\n\nTITLE: Rendering Parent-Child Anonymous Components\nDESCRIPTION: Demonstrates how to render nested components with parent-child relationships using proper component syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_76\n\nLANGUAGE: blade\nCODE:\n```\n<x-accordion>\n    <x-accordion.item>\n        ...\n    </x-accordion.item>\n</x-accordion>\n```\n\n----------------------------------------\n\nTITLE: Creating Sliding Window Views with sliding in Laravel Collections - PHP\nDESCRIPTION: Shows how to use the sliding method to generate a collection of overlapping chunks (sliding windows) from the original collection. It accepts a window size as the first argument and an optional step parameter to move the window forward by more than one item. This method is useful for comparing adjacent elements or windows in a dataset.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_112\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$chunks = $collection->sliding(2);\n\n$chunks->toArray();\n\n// [[1, 2], [2, 3], [3, 4], [4, 5]]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$chunks = $collection->sliding(3, step: 2);\n\n$chunks->toArray();\n\n// [[1, 2, 3], [3, 4, 5]]\n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe Elements for Payment Form\nDESCRIPTION: JavaScript code to initialize Stripe Elements and create a card input field for secure payment information collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://js.stripe.com/v3/\"></script>\n\n<script>\n    const stripe = Stripe('stripe-public-key');\n\n    const elements = stripe.elements();\n    const cardElement = elements.create('card');\n\n    cardElement.mount('#card-element');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Chaining Class and Merge Methods for Complete Attribute Control\nDESCRIPTION: Demonstrates chaining the class and merge methods to both conditionally add classes and set default attributes on a component element.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_47\n\nLANGUAGE: blade\nCODE:\n```\n<button {{ $attributes->class(['p-4'])->merge(['type' => 'button']) }}>\n    {{ $slot }}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Testing Job Chain Modifications\nDESCRIPTION: Shows how to test modifications to job chains using assertHasChain and assertDoesntHaveChain methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_114\n\nLANGUAGE: php\nCODE:\n```\n$job = new ProcessPodcast;\n\n$job->handle();\n\n$job->assertHasChain([\n    new TranscribePodcast,\n    new OptimizePodcast,\n    new ReleasePodcast,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating MEDIUMTEXT Column in Laravel Migration\nDESCRIPTION: The mediumText method creates a MEDIUMTEXT equivalent column in a Laravel database migration. For MySQL or MariaDB, a binary character set can be applied to create a MEDIUMBLOB equivalent column.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\n$table->mediumText('description');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$table->mediumText('data')->charset('binary'); // MEDIUMBLOB\n```\n\n----------------------------------------\n\nTITLE: Conditionally Executing Code Based on Missing Input in Laravel\nDESCRIPTION: Using the whenMissing method to execute different closures depending on whether an input is missing from the request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$request->whenMissing('name', function () {\n    // The \"name\" value is missing...\n}, function () {\n    // The \"name\" value is present...\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if String Contains All Values in Laravel PHP\nDESCRIPTION: The containsAll method determines if a string contains all values in a given array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_98\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$containsAll = Str::of('This is my name')->containsAll(['my', 'name']);\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Kebab Case in PHP\nDESCRIPTION: Shows how to use the 'kebab' method to convert a string to kebab-case format.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_122\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$converted = Str::of('fooBar')->kebab();\n\n// foo-bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Stateful API Middleware for Sanctum in Laravel\nDESCRIPTION: Configuring the Sanctum statefulApi middleware to allow authentication via Laravel session cookies for SPAs while still supporting API token authentication for third parties.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->statefulApi();\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Cast Class\nDESCRIPTION: This code snippet defines a custom cast class `AsJson` that implements the `CastsAttributes` interface. It provides `get` and `set` methods to transform a value from the database into a JSON object and back.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass AsJson implements CastsAttributes\n{\n    /**\n     * Cast the given value.\n     *\n     * @param  array<string, mixed>  $attributes\n     * @return array<string, mixed>\n     */\n    public function get(\n        Model $model,\n        string $key,\n        mixed $value,\n        array $attributes,\n    ): array {\n        return json_decode($value, true);\n    }\n\n    /**\n     * Prepare the given value for storage.\n     *\n     * @param  array<string, mixed>  $attributes\n     */\n    public function set(\n        Model $model,\n        string $key,\n        mixed $value,\n        array $attributes,\n    ): string {\n        return json_encode($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Broadcasting Example\nDESCRIPTION: Example of dispatching a broadcast event using the dispatch method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Events\\OrderShipmentStatusUpdated;\n\nOrderShipmentStatusUpdated::dispatch($order);\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Folio via Composer\nDESCRIPTION: Command to install Laravel Folio package using Composer package manager\nSOURCE: https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/folio\n```\n\n----------------------------------------\n\nTITLE: Using the pipe Method with Query Objects in Laravel\nDESCRIPTION: Demonstrates how to use the pipe method in Laravel's query builder to apply a custom pagination object to a query. The example chains a destination filter with the tap method and then applies pagination with the pipe method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$flights = DB::table('flights')\n    ->tap(new DestinationFilter($destination))\n    ->pipe(new Paginate);\n```\n\n----------------------------------------\n\nTITLE: Refunding Charges in Laravel Cashier\nDESCRIPTION: This code shows how to refund a Stripe charge using the refund method, which requires the Stripe payment intent ID as an argument.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_107\n\nLANGUAGE: php\nCODE:\n```\n$payment = $user->charge(100, $paymentMethodId);\n\n$user->refund($payment->id);\n```\n\n----------------------------------------\n\nTITLE: Managing Quantities for Multi-Product Subscriptions in Laravel Paddle\nDESCRIPTION: Method to increment quantities for specific products within a multi-product subscription by specifying the price ID as the second argument.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription()->incrementQuantity(1, 'price_chat');\n```\n\n----------------------------------------\n\nTITLE: Permanently Deleting Soft Deleted Models with forceDelete() in Laravel\nDESCRIPTION: Shows how to permanently remove a soft deleted model from the database using the forceDelete() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n$flight->forceDelete();\n```\n\n----------------------------------------\n\nTITLE: Pushing Values to Array Session Data in Laravel\nDESCRIPTION: Method to add a new value to an existing array in the session without overwriting the array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$request->session()->push('user.teams', 'developers');\n```\n\n----------------------------------------\n\nTITLE: Job Skipping Middleware Configuration in Laravel\nDESCRIPTION: Implementation of Skip middleware to conditionally skip job execution based on custom conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Queue\\Middleware\\Skip;\n\npublic function middleware(): array\n{\n    return [\n        Skip::when($someCondition),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Personal Access Tokens via JSON API in Laravel Passport\nDESCRIPTION: These JavaScript snippets show how to interact with the JSON API for managing personal access tokens in Laravel Passport using Axios.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_34\n\nLANGUAGE: js\nCODE:\n```\naxios.get('/oauth/scopes')\n    .then(response => {\n        console.log(response.data);\n    });\n```\n\nLANGUAGE: js\nCODE:\n```\naxios.get('/oauth/personal-access-tokens')\n    .then(response => {\n        console.log(response.data);\n    });\n```\n\nLANGUAGE: js\nCODE:\n```\nconst data = {\n    name: 'Token Name',\n    scopes: []\n};\n\naxios.post('/oauth/personal-access-tokens', data)\n    .then(response => {\n        console.log(response.data.accessToken);\n    })\n    .catch (response => {\n        // List errors on response...\n    });\n```\n\nLANGUAGE: js\nCODE:\n```\naxios.delete('/oauth/personal-access-tokens/' + tokenId);\n```\n\n----------------------------------------\n\nTITLE: Enabling TTY Mode for Process in PHP\nDESCRIPTION: Shows how to enable TTY mode for a process to allow interaction with editors like Vim.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nProcess::forever()->tty()->run('vim');\n```\n\n----------------------------------------\n\nTITLE: Changing Subscription Plans in Laravel Paddle\nDESCRIPTION: Method to change a user's subscription to a new plan by swapping the Paddle price ID. The change will take effect on the next billing cycle.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$user->subscription()->swap($premium = 'pri_456');\n```\n\n----------------------------------------\n\nTITLE: Adding Subscriptions for Existing Customers in Laravel Cashier\nDESCRIPTION: Shows how to add a subscription to a customer who already has a default payment method using the add method on the subscription builder.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$user->newSubscription('default', 'price_monthly')->add();\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for Custom Pulse Card Styling\nDESCRIPTION: Configuration for Laravel Vite integration to include a dedicated CSS entry point for a custom Pulse card.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nlaravel({\n    input: [\n        'resources/css/pulse/top-sellers.css',\n        // ...\n    ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to Inline HTML in Laravel PHP\nDESCRIPTION: The inlineMarkdown method converts GitHub flavored Markdown into inline HTML using CommonMark, without wrapping it in a block-level element.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_112\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$html = Str::of('**Laravel**')->inlineMarkdown();\n\n// <strong>Laravel</strong>\n```\n\n----------------------------------------\n\nTITLE: Stale-While-Revalidate Pattern Implementation\nDESCRIPTION: Implements stale-while-revalidate caching pattern using Cache::flexible(). Allows serving stale data while cache refreshes in background.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::flexible('users', [5, 10], function () {\n    return DB::table('users')->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Queue in Job Constructor\nDESCRIPTION: Defining queue settings within the job class constructor.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    $this->onQueue('processing');\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Fragment Presence in Laravel Tests\nDESCRIPTION: This snippet demonstrates how to assert that a response contains a specific JSON fragment anywhere in the response using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/users', function () {\n    return [\n        'users' => [\n            [\n                'name' => 'Taylor Otwell',\n            ],\n        ],\n    ];\n});\n\n$response->assertJsonFragment(['name' => 'Taylor Otwell']);\n```\n\n----------------------------------------\n\nTITLE: Faking Sleep to Improve Test Speed with Laravel Sleep in Pest and PHPUnit (PHP)\nDESCRIPTION: Shows how to fake sleep during tests using Sleep::fake() to avoid actual execution delays, keeping tests fast. It highlights usage for Pest and PHPUnit frameworks. This allows asserting sleeps without real waiting and supports assertions on sleep invocations later. Requires test integration and the Illuminate\\Support\\Sleep class. Typical use involves calling Sleep::fake(), running code invoking sleep methods, and asserting expected sleep calls.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_139\n\nLANGUAGE: php\nCODE:\n```\nit('waits until ready', function () {\\n    Sleep::fake();\\n\\n    // ...\\n});\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function test_it_waits_until_ready()\\n{\\n    Sleep::fake();\\n\\n    // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Eloquent Model for Exists Rule in Laravel Validation\nDESCRIPTION: Demonstrates how to use an Eloquent model to determine the table name for the 'exists' validation rule in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n'user_id' => 'exists:App\\Models\\User,id'\n```\n\n----------------------------------------\n\nTITLE: Using Gate Facade for Authorization in Laravel Controller\nDESCRIPTION: This snippet shows how to use the Gate facade's 'authorize' method to perform authorization checks in a controller. If the action is not authorized, it throws an AuthorizationException.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Post;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Gate;\n\nclass PostController extends Controller\n{\n    /**\n     * Update the given blog post.\n     *\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function update(Request $request, Post $post): RedirectResponse\n    {\n        Gate::authorize('update', $post);\n\n        // The current user can update the blog post...\n\n        return redirect('/posts');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Method Model Binding in Laravel\nDESCRIPTION: Shows how implicit model binding works with controller methods using type hints.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\UserController;\nuse App\\Models\\User;\n\n// Route definition...\nRoute::get('/users/{user}', [UserController::class, 'show']);\n\n// Controller method definition...\npublic function show(User $user)\n{\n    return view('user.profile', ['user' => $user]);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fresh Model Instances\nDESCRIPTION: The `fresh` method retrieves a fresh instance of each model in the collection from the database. It also allows eager loading of relationships.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$users = $users->fresh();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $users->fresh('comments');\n```\n\n----------------------------------------\n\nTITLE: Installing Typesense PHP SDK\nDESCRIPTION: Command to install the Typesense PHP SDK via Composer. This is required when using Scout with the Typesense driver for search functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require typesense/typesense-php\n```\n\n----------------------------------------\n\nTITLE: Using event() function to dispatch events in Laravel PHP\nDESCRIPTION: The event() function dispatches events to their listeners, triggering the event handling system for application-wide notifications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_91\n\nLANGUAGE: php\nCODE:\n```\nevent(new UserRegistered($user));\n```\n\n----------------------------------------\n\nTITLE: Dropping Foreign Keys by Name in Laravel Migrations\nDESCRIPTION: Shows how to drop a foreign key constraint by specifying its full name. The constraint name follows Laravel's naming convention of table_column_foreign.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$table->dropForeign('posts_user_id_foreign');\n```\n\n----------------------------------------\n\nTITLE: Enabling Tax ID Collection for Stripe Checkout in PHP\nDESCRIPTION: This code shows how to enable the collection of Tax IDs during a Stripe Checkout session using Laravel Cashier. This adds a checkbox for customers to indicate if they're purchasing as a company.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_115\n\nLANGUAGE: php\nCODE:\n```\n$checkout = $user->collectTaxIds()->checkout('price_tshirt');\n```\n\n----------------------------------------\n\nTITLE: Object Instance Caching with once() - Laravel PHP\nDESCRIPTION: Demonstrates how `once()` creates unique cached results within an object instance. Each instance caches the function result separately. Shows the usage inside a class method and how separate instances of the class maintain their own cached values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_102\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass NumberService\n{\n    public function all(): array\n    {\n        return once(fn () => [1, 2, 3]);\n    }\n}\n\n$service = new NumberService;\n\n$service->all();\n$service->all(); // (cached result)\n\n$secondService = new NumberService;\n\n$secondService->all();\n$secondService->all(); // (cached result)\n```\n\n----------------------------------------\n\nTITLE: Swapping Keys and Values - PHP\nDESCRIPTION: The `flip` method swaps the keys and values of a collection.  The original keys become the values, and the original values become the keys.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n\n$flipped = $collection->flip();\n\n$flipped->all();\n\n// ['taylor' => 'name', 'laravel' => 'framework']\n\n```\n\n----------------------------------------\n\nTITLE: Customizing UUID Generation in Laravel Model\nDESCRIPTION: Shows how to override default UUID generation and specify which columns should receive UUIDs by implementing custom methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Ramsey\\Uuid\\Uuid;\n\n/**\n * Generate a new UUID for the model.\n */\npublic function newUniqueId(): string\n{\n    return (string) Uuid::uuid4();\n}\n\n/**\n * Get the columns that should receive a unique identifier.\n *\n * @return array<int, string>\n */\npublic function uniqueIds(): array\n{\n    return ['id', 'discount_code'];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the From Number for Vonage SMS in Laravel\nDESCRIPTION: Shows how to customize the phone number that an SMS notification is sent from by calling the from method on the VonageMessage instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Notifications\\Messages\\VonageMessage;\n\n/**\n * Get the Vonage / SMS representation of the notification.\n */\npublic function toVonage(object $notifiable): VonageMessage\n{\n    return (new VonageMessage)\n        ->content('Your SMS message content')\n        ->from('15554443333');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch PHP SDK\nDESCRIPTION: Command to install the Meilisearch PHP SDK and HTTP factory dependencies via Composer. This is required when using Scout with the Meilisearch driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require meilisearch/meilisearch-php http-interop/http-factory-guzzle\n```\n\n----------------------------------------\n\nTITLE: Checking for Generic Trial Status in Laravel Cashier\nDESCRIPTION: Shows how to specifically check if a user is on a generic trial period (without an actual subscription) using the onGenericTrial method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_96\n\nLANGUAGE: php\nCODE:\n```\nif ($user->onGenericTrial()) {\n    // User is within their \"generic\" trial period...\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Plans Without Billing in Laravel Paddle\nDESCRIPTION: Method to change a subscription's plan without billing the customer for the change, using the 'doNotBill' method in combination with 'swap'.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->doNotBill()->swap($premium = 'pri_456');\n```\n\n----------------------------------------\n\nTITLE: Displaying Tables in Laravel Prompts\nDESCRIPTION: Shows how to use the table function to display multiple rows and columns of data in a formatted table.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\table;\n\ntable(\n    headers: ['Name', 'Email'],\n    rows: User::all(['name', 'email'])->toArray()\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Forms in Laravel Prompts\nDESCRIPTION: Shows how to use the form function to create a grouped set of prompts for collecting user information.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\form;\n\n$responses = form()\n    ->text('What is your name?', required: true)\n    ->password('What is your password?', validate: ['password' => 'min:8'])\n    ->confirm('Do you accept the terms?')\n    ->submit();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse function Laravel\\Prompts\\form;\n\n$responses = form()\n    ->text('What is your name?', required: true, name: 'name')\n    ->password(\n        label: 'What is your password?',\n        validate: ['password' => 'min:8'],\n        name: 'password'\n    )\n    ->confirm('Do you accept the terms?')\n    ->submit();\n\nUser::create([\n    'name' => $responses['name'],\n    'password' => $responses['password'],\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\form;\nuse function Laravel\\Prompts\\outro;\n\n$responses = form()\n    ->text('What is your name?', required: true, name: 'name')\n    ->add(function ($responses) {\n        return text(\"How old are you, {$responses['name']}?\");\n    }, name: 'age')\n    ->submit();\n\noutro(\"Your name is {$responses['name']} and you are {$responses['age']} years old.\");\n```\n\n----------------------------------------\n\nTITLE: Using class_uses_recursive() function to find all traits in Laravel PHP\nDESCRIPTION: The class_uses_recursive() function returns all traits used by a class, including traits used by all parent classes, providing complete trait inheritance analysis.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_77\n\nLANGUAGE: php\nCODE:\n```\n$traits = class_uses_recursive(App\\Models\\User::class);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element States\nDESCRIPTION: Examples of waiting for elements to become enabled or disabled using waitUntilEnabled and waitUntilDisabled methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n// Wait a maximum of five seconds until the selector is enabled...\n$browser->waitUntilEnabled('.selector');\n\n// Wait a maximum of one second until the selector is enabled...\n$browser->waitUntilEnabled('.selector', 1);\n\n// Wait a maximum of five seconds until the selector is disabled...\n$browser->waitUntilDisabled('.selector');\n\n// Wait a maximum of one second until the selector is disabled...\n$browser->waitUntilDisabled('.selector', 1);\n```\n\n----------------------------------------\n\nTITLE: Restoring and Releasing Cache Lock in Laravel Job\nDESCRIPTION: Shows how to restore and release a previously acquired cache lock within a queued job using the owner token.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nCache::restoreLock('processing', $this->owner)->release();\n```\n\n----------------------------------------\n\nTITLE: Authentication Session Middleware Route Group\nDESCRIPTION: Configuration for applying authentication session middleware to route groups.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nRoute::middleware(['auth', 'auth.session'])->group(function () {\n    Route::get('/', function () {\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive containsAll Check in Laravel PHP\nDESCRIPTION: The containsAll method supports case-insensitive checks for all values by setting the ignoreCase parameter to true.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_99\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$containsAll = Str::of('This is my name')->containsAll(['MY', 'NAME'], ignoreCase: true);\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Conditionally Modifying a String Based on Starting Content in Laravel\nDESCRIPTION: The whenStartsWith method invokes the given closure if the string starts with the given sub-string. The closure will receive the fluent string instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_161\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('disney world')->whenStartsWith('disney', function (Stringable $string) {\n    return $string->title();\n});\n\n// 'Disney World'\n```\n\n----------------------------------------\n\nTITLE: Testing Interactive Console Commands in Laravel (Pest and PHPUnit)\nDESCRIPTION: Demonstrates testing an interactive console command by mocking user input and verifying expected output using expectsQuestion and expectsOutput methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntest('console command', function () {\n    $this->artisan('question')\n        ->expectsQuestion('What is your name?', 'Taylor Otwell')\n        ->expectsQuestion('Which language do you prefer?', 'PHP')\n        ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')\n        ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')\n        ->assertExitCode(0);\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Test a console command.\n */\npublic function test_console_command(): void\n{\n    $this->artisan('question')\n        ->expectsQuestion('What is your name?', 'Taylor Otwell')\n        ->expectsQuestion('Which language do you prefer?', 'PHP')\n        ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')\n        ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')\n        ->assertExitCode(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving View Instance with view - PHP\nDESCRIPTION: The `view` function retrieves a view instance, enabling the developer to render views. This is essential for constructing the application's user interface and presenting data to the user.  It accepts one argument; the view name as a string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_125\n\nLANGUAGE: php\nCODE:\n```\nreturn view('auth.login');\n```\n\n----------------------------------------\n\nTITLE: Randomly Shuffling Laravel Collection Items in PHP\nDESCRIPTION: Demonstrates the `shuffle` method that randomly rearranges the items in a collection producing a new shuffled collection. Inputs include a collection; output is a new collection with the same items in a new random order.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_107\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$shuffled = $collection->shuffle();\n\n$shuffled->all();\n\n// [3, 2, 5, 1, 4] - (generated randomly)\n```\n\n----------------------------------------\n\nTITLE: Scheduling Daily Telescope Data Pruning\nDESCRIPTION: PHP code for the Laravel scheduler to automatically prune old Telescope entries on a daily basis.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('telescope:prune')->daily();\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Subscription Quantity in Laravel Paddle\nDESCRIPTION: Method to set a specific quantity for a subscription using the 'updateQuantity' method, optionally with 'noProrate' to avoid prorating charges.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription()->updateQuantity(10);\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Echo for Ably\nDESCRIPTION: JavaScript code to configure a Laravel Echo instance for use with the Ably broadcasting driver in Pusher compatibility mode.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Echo from 'laravel-echo';\n\nimport Pusher from 'pusher-js';\nwindow.Pusher = Pusher;\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: import.meta.env.VITE_ABLY_PUBLIC_KEY,\n    wsHost: 'realtime-pusher.ably.io',\n    wsPort: 443,\n    disableStats: true,\n    encrypted: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Storage Operations\nDESCRIPTION: Demonstrates storing items in cache using put() method with optional expiration time.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nCache::put('key', 'value', $seconds = 10);\n\nCache::put('key', 'value');\n\nCache::put('key', 'value', now()->addMinutes(10));\n```\n\n----------------------------------------\n\nTITLE: Charging with Custom Options in Laravel Cashier\nDESCRIPTION: This code shows how to use the charge method with custom options passed as an array. It allows for additional configuration of the Stripe charge creation process.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_101\n\nLANGUAGE: php\nCODE:\n```\n$user->charge(100, $paymentMethod, [\n    'custom_option' => $value,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating CHAR Column in Laravel Migration\nDESCRIPTION: The char method creates a CHAR equivalent column with a specified length in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$table->char('name', length: 100);\n```\n\n----------------------------------------\n\nTITLE: Creating DATETIME Column in Laravel Migration\nDESCRIPTION: The dateTime method creates a DATETIME equivalent column with an optional fractional seconds precision in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n$table->dateTime('created_at', precision: 0);\n```\n\n----------------------------------------\n\nTITLE: Failing Laravel Queue Jobs with Exception Information\nDESCRIPTION: Examples of manually failing a Laravel queue job while providing specific exception information or an error message that gets converted to an exception.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$this->fail($exception);\n\n$this->fail('Something went wrong.');\n```\n\n----------------------------------------\n\nTITLE: Combining Migration and Seeding in Laravel\nDESCRIPTION: Commands to reset the database, rerun all migrations, and seed the database in a single operation. This is useful for completely rebuilding a development or testing database with fresh data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate:fresh --seed\n\nphp artisan migrate:fresh --seed --seeder=UserSeeder\n```\n\n----------------------------------------\n\nTITLE: Mapping Collection Items to Objects with AsCollection Cast in Laravel Eloquent (PHP)\nDESCRIPTION: Illustrates using the `of` static method with the `AsCollection` cast to automatically map each item within the JSON array (`options`) into instances of a specified class (`App\\ValueObjects\\Option`). This utilizes the collection's `mapInto` method internally. The target class should implement `Arrayable` and `JsonSerializable`. Requires the value object class and importing `AsCollection`.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse App\\ValueObjects\\Option;\nuse Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n\n/**\n * Get the attributes that should be cast.\n *\n * @return array<string, string>\n */\nprotected function casts(): array\n{\n    return [\n        'options' => AsCollection::of(Option::class)\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Query String Parameters in Laravel\nDESCRIPTION: Getting all query string values as an associative array by calling the query method without arguments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$query = $request->query();\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Test Environment in PHPUnit\nDESCRIPTION: Shows how to configure the Stripe test environment API key in the phpunit.xml configuration file, which enables real API requests to the Stripe testing environment during test execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_125\n\nLANGUAGE: xml\nCODE:\n```\n<env name=\"STRIPE_SECRET\" value=\"sk_test_<your-key>\"/>\n```\n\n----------------------------------------\n\nTITLE: Redirecting for OAuth2 Authorization in Laravel PHP\nDESCRIPTION: This snippet shows how to create a route for redirecting users to the OAuth2 authorization endpoint in Laravel Passport.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\n\nRoute::get('/redirect', function (Request $request) {\n    $request->session()->put('state', $state = Str::random(40));\n\n    $query = http_build_query([\n        'client_id' => 'client-id',\n        'redirect_uri' => 'http://third-party-app.com/callback',\n        'response_type' => 'code',\n        'scope' => '',\n        'state' => $state,\n        // 'prompt' => '', // \"none\", \"consent\", or \"login\"\n    ]);\n\n    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking Basic Synchronous Process in PHP\nDESCRIPTION: Demonstrates how to run a basic synchronous process using Laravel's Process facade and retrieve its output.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Process;\n\n$result = Process::run('ls -la');\n\nreturn $result->output();\n```\n\n----------------------------------------\n\nTITLE: Loop Variable Usage in Blade\nDESCRIPTION: Accessing loop information using the $loop variable in nested loops\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_20\n\nLANGUAGE: blade\nCODE:\n```\n@foreach ($users as $user)\n    @foreach ($user->posts as $post)\n        @if ($loop->parent->first)\n            This is the first iteration of the parent loop.\n        @endif\n    @endforeach\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Resource Collection with Meta Data in Laravel\nDESCRIPTION: Shows how to add top-level meta data to resource collections using the with() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\npublic function with(Request $request): array\n{\n    return [\n        'meta' => [\n            'key' => 'value',\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Livewire Component Template with Wire Directives\nDESCRIPTION: A Blade template for a Livewire counter component that uses wire directives to connect frontend interactions with backend methods, enabling interactive functionality without writing JavaScript.\nSOURCE: https://github.com/laravel/docs/blob/12.x/frontend.md#2025-04-21_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <button wire:click=\"increment\">+</button>\n    <h1>{{ $count }}</h1>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Underlying Resource Class in UserCollection\nDESCRIPTION: Shows how to customize the underlying resource class used by a collection resource by setting the $collects property in the UserCollection class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * The resource that this resource collects.\n     *\n     * @var string\n     */\n    public $collects = Member::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Database Search Strategy in Laravel Scout\nDESCRIPTION: Demonstrates how to customize the database search strategy for a Laravel Scout model by using PHP attributes to specify full text search and prefix search on specific columns.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Scout\\Attributes\\SearchUsingFullText;\nuse Laravel\\Scout\\Attributes\\SearchUsingPrefix;\n\n/**\n * Get the indexable data array for the model.\n *\n * @return array<string, mixed>\n */\n#[SearchUsingPrefix(['id', 'email'])]\n#[SearchUsingFullText(['bio'])]\npublic function toSearchableArray(): array\n{\n    return [\n        'id' => $this->id,\n        'name' => $this->name,\n        'email' => $this->email,\n        'bio' => $this->bio,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Event Listener Implementation in Laravel\nDESCRIPTION: Example of a basic event listener class that handles OrderShipped events. Shows the basic structure with constructor and handle method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\OrderShipped;\n\nclass SendShipmentNotification\n{\n    /**\n     * Create the event listener.\n     */\n    public function __construct() {}\n\n    /**\n     * Handle the event.\n     */\n    public function handle(OrderShipped $event): void\n    {\n        // Access the order using $event->order...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Incrementing UNSIGNED MEDIUMINT Column in Laravel Migration\nDESCRIPTION: The mediumIncrements method creates an auto-incrementing UNSIGNED MEDIUMINT column as a primary key in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\n$table->mediumIncrements('id');\n```\n\n----------------------------------------\n\nTITLE: Wrapping Value in Collection using wrap - PHP\nDESCRIPTION: Shows the static `wrap` method of the `Illuminate\\Support\\Collection` class, which converts a given value into a Collection instance if it isn't already one. It can wrap strings, arrays, or existing Collections. The snippet demonstrates wrapping different value types.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_152\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Collection;\n\n$collection = Collection::wrap('John Doe');\n\n$collection->all();\n\n// ['John Doe']\n\n$collection = Collection::wrap(['John Doe']);\n\n$collection->all();\n\n// ['John Doe']\n\n$collection = Collection::wrap(collect('John Doe'));\n\n$collection->all();\n\n// ['John Doe']\n```\n\n----------------------------------------\n\nTITLE: Setting Laravel Configuration Values at Runtime\nDESCRIPTION: Shows how to set configuration values during runtime using both the Config facade and config helper function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nConfig::set('app.timezone', 'America/Chicago');\n\nconfig(['app.timezone' => 'America/Chicago']);\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Primary Key for Unique Validation\nDESCRIPTION: Example demonstrating how to specify a custom primary key column name when ignoring a record during unique validation. Useful when your table uses a primary key column other than 'id'.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nRule::unique('users')->ignore($user->id, 'user_id')\n```\n\n----------------------------------------\n\nTITLE: Ordering Many-to-Many Relationships by Pivot Table Columns\nDESCRIPTION: Example of ordering relationship query results based on values in the intermediate table using the orderByPivot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->belongsToMany(Badge::class)\n    ->where('rank', 'gold')\n    ->orderByPivot('created_at', 'desc');\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Session Values in Laravel\nDESCRIPTION: Methods to increase or decrease numeric values stored in the session.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$request->session()->increment('count');\n\n$request->session()->increment('count', $incrementBy = 2);\n\n$request->session()->decrement('count');\n\n$request->session()->decrement('count', $decrementBy = 2);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Date Input with Format and Timezone in Laravel\nDESCRIPTION: Getting date input with custom format and timezone specifications using additional parameters with the date method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$elapsed = $request->date('elapsed', '!H:i', 'Europe/Madrid');\n```\n\n----------------------------------------\n\nTITLE: Initiating Subscription Checkout with Stripe in PHP\nDESCRIPTION: This code example shows how to start a subscription checkout process using Stripe Checkout and Laravel Cashier. It includes options for customizing success/cancel URLs and allowing promotion codes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_113\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/subscription-checkout', function (Request $request) {\n    return $request->user()\n        ->newSubscription('default', 'price_monthly')\n        ->allowPromotionCodes()\n        ->checkout([\n            'success_url' => route('your-success-route'),\n            'cancel_url' => route('your-cancel-route'),\n        ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Job Chain Flow\nDESCRIPTION: Methods for prepending and appending jobs to an existing chain.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\npublic function handle(): void\n{\n    // ...\n\n    $this->prependToChain(new TranscribePodcast);\n\n    $this->appendToChain(new TranscribePodcast);\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereDate for Date Comparison in Laravel\nDESCRIPTION: The whereDate method compares a column's value against a specific date.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->whereDate('created_at', '2016-12-31')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Autoloaded Package Components in Laravel Blade\nDESCRIPTION: Shows how to use components that have been autoloaded from a package namespace using the vendor prefix syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_72\n\nLANGUAGE: blade\nCODE:\n```\n<x-nightshade::calendar />\n<x-nightshade::color-picker />\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database Connection\nDESCRIPTION: Environment configuration variables for setting up MySQL database connection in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel\nDB_USERNAME=root\nDB_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscription Payment Information\nDESCRIPTION: Demonstrates how to access past and upcoming payment information for a subscription. This is useful for displaying payment history and upcoming billing dates to users.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_82\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$subscription = $user->subscription();\n\n$lastPayment = $subscription->lastPayment();\n$nextPayment = $subscription->nextPayment();\n```\n\n----------------------------------------\n\nTITLE: Search with Where Clauses in Laravel Scout\nDESCRIPTION: Examples of using where clauses to filter search results including whereIn and whereNotIn methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\n\n$orders = Order::search('Star Trek')->where('user_id', 1)->get();\n\n$orders = Order::search('Star Trek')->whereIn(\n    'status', ['open', 'paid']\n)->get();\n\n$orders = Order::search('Star Trek')->whereNotIn(\n    'status', ['closed']\n)->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Polymorphic Relationship Columns with morphs()\nDESCRIPTION: Creates columns for polymorphic relationships with {column}_id and {column}_type fields. The ID column type varies based on model key type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$table->morphs('taggable');\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Strings in PHP\nDESCRIPTION: Shows how to use the 'isEmpty' method to determine if a string is empty after trimming whitespace.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_116\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('  ')->trim()->isEmpty();\n\n// true\n\n$result = Str::of('Laravel')->trim()->isEmpty();\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Generating Notification Class with Artisan (Shell)\nDESCRIPTION: Creates a new notification class using Laravel's Artisan command-line tool.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:notification InvoicePaid\n```\n\n----------------------------------------\n\nTITLE: Database Reset Test Example - Pest\nDESCRIPTION: Example showing how to use RefreshDatabase trait in Pest tests to reset database state between tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nuses(RefreshDatabase::class);\n\ntest('basic example', function () {\n    $response = $this->get('/');\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Recursive Merging with `mergeRecursive` in PHP\nDESCRIPTION: The `mergeRecursive` method performs a recursive merge of two collections.  If a string key is present in both collections, the values for that key are merged into an array. The recursive nature of this method allows for merging nested structures.  The example shows how it merges matching string keys in the collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['product_id' => 1, 'price' => 100]);\n\n$merged = $collection->mergeRecursive([\n    'product_id' => 2,\n    'price' => 200,\n    'discount' => false\n]);\n\n$merged->all();\n\n// ['product_id' => [1, 2], 'price' => [100, 200], 'discount' => false]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Portions of Session Data in Laravel\nDESCRIPTION: Methods to retrieve subsets of session data using the only() and except() methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$data = $request->session()->only(['username', 'email']);\n\n$data = $request->session()->except(['username', 'email']);\n```\n\n----------------------------------------\n\nTITLE: Creating Redirects in Laravel Routes\nDESCRIPTION: Shows how to create redirect responses in Laravel routes using the redirect helper function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/dashboard', function () {\n    return redirect('/home/dashboard');\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Next Payment Information in Blade\nDESCRIPTION: Shows how to display details about a customer's next subscription payment in a Blade template, including the payment amount and due date.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_83\n\nLANGUAGE: blade\nCODE:\n```\nNext payment: {{ $nextPayment->amount() }} due on {{ $nextPayment->date()->format('d/m/Y') }}\n```\n\n----------------------------------------\n\nTITLE: Using info() function for logging information in Laravel PHP\nDESCRIPTION: The info() function writes information to the application's log at the 'info' level with optional contextual data for detailed logging.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_94\n\nLANGUAGE: php\nCODE:\n```\ninfo('Some helpful information!');\n```\n\nLANGUAGE: php\nCODE:\n```\ninfo('User login attempt failed.', ['id' => $user->id]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Queued Listener Backoff in Laravel\nDESCRIPTION: Demonstrates how to specify backoff times for queued event listeners using a property or method. Includes examples of simple and exponential backoff configurations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The number of seconds to wait before retrying the queued listener.\n *\n * @var int\n */\npublic $backoff = 3;\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Calculate the number of seconds to wait before retrying the queued listener.\n */\npublic function backoff(): int\n{\n    return 3;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Calculate the number of seconds to wait before retrying the queued listener.\n *\n * @return array<int, int>\n */\npublic function backoff(): array\n{\n    return [1, 5, 10];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Scopes in Laravel Eloquent Model\nDESCRIPTION: Demonstrates how to define local scopes in a User model using the Scope attribute to create reusable query constraints for popular and active users.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Attributes\\Scope;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Scope a query to only include popular users.\n     */\n    #[Scope]\n    protected function popular(Builder $query): void\n    {\n        $query->where('votes', '>', 100);\n    }\n\n    /**\n     * Scope a query to only include active users.\n     */\n    #[Scope]\n    protected function active(Builder $query): void\n    {\n        $query->where('active', 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Paddle Checkout Button with Laravel Blade\nDESCRIPTION: Shows how to use the Paddle button Blade component to allow users to complete a purchase through the Paddle checkout widget after generating a checkout session.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_74\n\nLANGUAGE: blade\nCODE:\n```\n<x-paddle-button :checkout=\"$checkout\" class=\"px-8 py-4\">\n    Buy\n</x-paddle-button>\n```\n\n----------------------------------------\n\nTITLE: Securing Markdown with HTML Stripping in PHP\nDESCRIPTION: Demonstrates how to use the inlineMarkdown method to strip HTML from Markdown input for security purposes. It uses options to control HTML handling and unsafe links.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_113\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nStr::of('Inject: <script>alert(\"Hello XSS!\");</script>')->inlineMarkdown([\n    'html_input' => 'strip',\n    'allow_unsafe_links' => false,\n]);\n\n// Inject: alert(&quot;Hello XSS!&quot;);\n```\n\n----------------------------------------\n\nTITLE: Subdomain Routing in Laravel\nDESCRIPTION: Shows how to implement subdomain routing with parameter capture. The domain method is used to specify the subdomain pattern before defining the route group.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nRoute::domain('{account}.example.com')->group(function () {\n    Route::get('/user/{id}', function (string $account, string $id) {\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Mailgun Driver Dependencies for Laravel\nDESCRIPTION: Command to install Symfony's Mailgun Mailer transport via Composer for use with Laravel's mail system.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/mailgun-mailer symfony/http-client\n```\n\n----------------------------------------\n\nTITLE: Retrieving Redis Data in Laravel Controller\nDESCRIPTION: Demonstrates how to use the Redis facade to retrieve data within a Laravel controller method. The example shows fetching a user profile from Redis.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Redis;\nuse Illuminate\\View\\View;\n\nclass UserController extends Controller\n{\n    /**\n     * Show the profile for the given user.\n     */\n    public function show(string $id): View\n    {\n        return view('user.profile', [\n            'user' => Redis::get('user:profile:'.$id)\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Collection Items In-Place with transform() - PHP\nDESCRIPTION: Shows the transform method that replaces each item in the collection by iterating over the collection and applying a callback, modifying the collection itself rather than returning a new one. Inputs are a callback receiving each item and key, output is the mutated collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_133\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$collection->transform(function (int $item, int $key) {\n    return $item * 2;\n});\n\n$collection->all();\n\n// [2, 4, 6, 8, 10]\n```\n\n----------------------------------------\n\nTITLE: Creating Paddle Checkout with Custom Data in Laravel\nDESCRIPTION: Demonstrates how to create a Paddle checkout session with custom data, such as an order ID, to associate the purchase with an order in your application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Cart;\nuse App\\Models\\Order;\nuse Illuminate\\Http\\Request;\n\nRoute::get('/cart/{cart}/checkout', function (Request $request, Cart $cart) {\n    $order = Order::create([\n        'cart_id' => $cart->id,\n        'price_ids' => $cart->price_ids,\n        'status' => 'incomplete',\n    ]);\n\n    $checkout = $request->user()->checkout($order->price_ids)\n        ->customData(['order_id' => $order->id]);\n\n    return view('billing', ['checkout' => $checkout]);\n})->name('checkout');\n```\n\n----------------------------------------\n\nTITLE: Running Tinker REPL\nDESCRIPTION: Command to start Laravel Tinker REPL environment\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan tinker\n```\n\n----------------------------------------\n\nTITLE: Running Batches within a Job Chain\nDESCRIPTION: Demonstrates how to include batches of jobs within a larger job chain, allowing for complex job processing sequences.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\FlushPodcastCache;\nuse App\\Jobs\\ReleasePodcast;\nuse App\\Jobs\\SendPodcastReleaseNotification;\nuse Illuminate\\Support\\Facades\\Bus;\n\nBus::chain([\n    new FlushPodcastCache,\n    Bus::batch([\n        new ReleasePodcast(1),\n        new ReleasePodcast(2),\n    ]),\n    Bus::batch([\n        new SendPodcastReleaseNotification(1),\n        new SendPodcastReleaseNotification(2),\n    ]),\n])->dispatch();\n```\n\n----------------------------------------\n\nTITLE: Faking an Asynchronous Process in Laravel Tests\nDESCRIPTION: This code shows how to use the Process facade to fake an asynchronous process, specifying multiple outputs, error outputs, exit code, and number of iterations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nProcess::fake([\n    'bash import.sh' => Process::describe()\n        ->output('First line of standard output')\n        ->errorOutput('First line of error output')\n        ->output('Second line of standard output')\n        ->exitCode(0)\n        ->iterations(3),\n]);\n```\n\n----------------------------------------\n\nTITLE: Queueing Artisan Commands\nDESCRIPTION: Demonstrates how to queue Artisan commands for background processing using queue workers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Artisan;\n\nRoute::post('/user/{user}/mail', function (string $user) {\n    Artisan::queue('mail:send', [\n        'user' => $user, '--queue' => 'default'\n    ]);\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Processors in Laravel\nDESCRIPTION: Demonstrates how to add Monolog processors to a logging channel in Laravel. It shows both simple syntax and configuration with options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n'memory' => [\n    'driver' => 'monolog',\n    'handler' => Monolog\\Handler\\StreamHandler::class,\n    'handler_with' => [\n        'stream' => 'php://stderr',\n    ],\n    'processors' => [\n        // Simple syntax...\n        Monolog\\Processor\\MemoryUsageProcessor::class,\n\n        // With options...\n        [\n            'processor' => Monolog\\Processor\\PsrLogMessageProcessor::class,\n            'with' => ['removeUsedContextFields' => true],\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Jobs to Ignore Missing Models\nDESCRIPTION: Code snippet showing how to set the deleteWhenMissingModels property to true, which makes Laravel quietly discard jobs when their related models have been deleted instead of raising exceptions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_96\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Delete the job if its models no longer exist.\n *\n * @var bool\n */\npublic $deleteWhenMissingModels = true;\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Pail for Log Tailing\nDESCRIPTION: Shows the Composer command to install Laravel Pail, a package for tailing application logs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/pail\n```\n\n----------------------------------------\n\nTITLE: Using Components in Laravel Dusk Tests (Pest Syntax)\nDESCRIPTION: Example of using a custom component within a Dusk test using Pest syntax. The component encapsulates complex UI interaction, making the test more readable and maintainable.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_79\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nuse Laravel\\Dusk\\Browser;\nuse Tests\\Browser\\Components\\DatePicker;\n\nuses(DatabaseMigrations::class);\n\ntest('basic example', function () {\n    $this->browse(function (Browser $browser) {\n        $browser->visit('/')\n            ->within(new DatePicker, function (Browser $browser) {\n                $browser->selectDate(2019, 1, 30);\n            })\n            ->assertSee('January');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Redis Connections in Laravel\nDESCRIPTION: Explains how to use multiple Redis connections defined in the config/database.php file. Shows how to obtain specific connections using the connection method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$redis = Redis::connection('connection-name');\n\n$redis = Redis::connection();\n```\n\n----------------------------------------\n\nTITLE: Job Tagging Implementation in PHP\nDESCRIPTION: Examples of automatic and manual job tagging in Laravel Horizon, including Eloquent model tagging and custom tag definitions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Jobs;\n\nuse App\\Models\\Video;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Queue\\Queueable;\n\nclass RenderVideo implements ShouldQueue\n{\n    use Queueable;\n\n    /**\n     * Create a new job instance.\n     */\n    public function __construct(\n        public Video $video,\n    ) {}\n\n    /**\n     * Execute the job.\n     */\n    public function handle(): void\n    {\n        // ...\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass RenderVideo implements ShouldQueue\n{\n    /**\n     * Get the tags that should be assigned to the job.\n     *\n     * @return array<int, string>\n     */\n    public function tags(): array\n    {\n        return ['render', 'video:'.$this->video->id];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loop Control Directives in Blade\nDESCRIPTION: Using @continue and @break directives in loops with conditions\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_19\n\nLANGUAGE: blade\nCODE:\n```\n@foreach ($users as $user)\n    @continue($user->type == 1)\n\n    <li>{{ $user->name }}</li>\n\n    @break($user->number == 5)\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Encrypting Specific Laravel Environment File\nDESCRIPTION: Encrypt a specific environment file by providing the environment name using the --env option.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan env:encrypt --env=staging\n```\n\n----------------------------------------\n\nTITLE: Converting Authorization Codes to Access Tokens with PKCE in Laravel\nDESCRIPTION: This snippet shows how to convert an authorization code to an access token using the Authorization Code Grant with PKCE flow, including state validation and sending the code verifier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Http;\n\nRoute::get('/callback', function (Request $request) {\n    $state = $request->session()->pull('state');\n\n    $codeVerifier = $request->session()->pull('code_verifier');\n\n    throw_unless(\n        strlen($state) > 0 && $state === $request->state,\n        InvalidArgumentException::class\n    );\n\n    $response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n        'grant_type' => 'authorization_code',\n        'client_id' => 'client-id',\n        'redirect_uri' => 'http://third-party-app.com/callback',\n        'code_verifier' => $codeVerifier,\n        'code' => $request->code,\n    ]);\n\n    return $response->json();\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Created Status in Laravel Tests\nDESCRIPTION: This snippet shows how to assert that a response has a 201 (Created) HTTP status code using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$response->assertCreated();\n```\n\n----------------------------------------\n\nTITLE: Basic Debug and Emergency Logging in Laravel\nDESCRIPTION: Examples of writing debug and emergency level log messages using Laravel's Log facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nLog::debug('An informational message.');\n\nLog::emergency('The system is down!');\n```\n\n----------------------------------------\n\nTITLE: Configuring Tinker Command Allow List\nDESCRIPTION: PHP configuration for specifying allowed Artisan commands in Tinker\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'commands' => [\n    // App\\Console\\Commands\\ExampleCommand::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom User Provider in Laravel auth.php\nDESCRIPTION: This snippet demonstrates how to configure a custom user provider in the Laravel auth.php configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n'providers' => [\n    'users' => [\n        'driver' => 'mongo',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Suggest Function with Auto-completion\nDESCRIPTION: Example of using the suggest function with dynamic auto-completion based on user input.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$name = suggest(\n    label: 'What is your name?',\n    options: fn ($value) => collect(['Taylor', 'Dayle'])\n        ->filter(fn ($name) => Str::contains($name, $value, ignoreCase: true))\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying Active Recurring Subscription in Laravel Cashier\nDESCRIPTION: Shows how to check if a user has an active, recurring subscription that is no longer in the trial period using the 'recurring' method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription('default')->recurring()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Theme for Individual Notifications\nDESCRIPTION: This example shows how to apply a custom theme to an individual notification by using the theme method when building the mail message.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the mail representation of the notification.\n */\npublic function toMail(object $notifiable): MailMessage\n{\n    return (new MailMessage)\n        ->theme('invoice')\n        ->subject('Invoice Paid')\n        ->markdown('mail.invoice.paid', ['url' => $url]);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Route Parameters with Dependency Injection in Laravel\nDESCRIPTION: Illustrates how to combine dependency injection of the Request object with route parameters in a controller method. The route parameters are listed after other dependencies.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass UserController extends Controller\n{\n    /**\n     * Update the specified user.\n     */\n    public function update(Request $request, string $id): RedirectResponse\n    {\n        // Update the user...\n\n        return redirect('/users');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing Rate Limit Attempts by Custom Amount in Laravel\nDESCRIPTION: This example shows how to increment the attempt count for a rate-limited action by a custom amount using the RateLimiter facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRateLimiter::increment('send-message:'.$user->id, amount: 5);\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Polymorphic Relationship in PHP\nDESCRIPTION: This code demonstrates how to define a many-to-many polymorphic relationship using the morphToMany method in the Post model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;\n\nclass Post extends Model\n{\n    /**\n     * Get all of the tags for the post.\n     */\n    public function tags(): MorphToMany\n    {\n        return $this->morphToMany(Tag::class, 'taggable');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHP and Laravel on macOS\nDESCRIPTION: Command to install PHP, Composer, and Laravel installer on macOS systems using a remote installation script.\nSOURCE: https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://php.new/install/mac/8.4)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Disk in Laravel\nDESCRIPTION: Example configuration for creating a read-only disk that prevents write operations on the filesystem.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n's3-videos' => [\n    'driver' => 's3',\n    // ...\n    'read-only' => true,\n],\n```\n\n----------------------------------------\n\nTITLE: Setting Global Environment Variables in Laravel Homestead\nDESCRIPTION: This YAML configuration shows how to define global environment variables in the Homestead.yaml file. It sets the APP_ENV to local and defines a custom FOO variable.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n    - key: APP_ENV\n      value: local\n    - key: FOO\n      value: bar\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Subscriptions for a User in Laravel Cashier\nDESCRIPTION: Method for creating a new subscription of a specific type, allowing users to have multiple concurrent subscriptions for different services.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_72\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/swimming/subscribe', function (Request $request) {\n    $request->user()->newSubscription('swimming')\n        ->price('price_swimming_monthly')\n        ->create($request->paymentMethodId);\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specific Payment Method in Laravel Cashier\nDESCRIPTION: Shows how to delete a specific payment method from a billable model using the deletePaymentMethod method with a payment method ID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$user->deletePaymentMethod('pm_visa');\n```\n\n----------------------------------------\n\nTITLE: Specifying an Authentication Guard for Routes\nDESCRIPTION: Shows how to specify which authentication guard should be used when protecting a route, allowing for multiple authentication systems within a single application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/flights', function () {\n    // Only authenticated users may access this route...\n})->middleware('auth:admin');\n```\n\n----------------------------------------\n\nTITLE: Asserting Page Content in Laravel Dusk\nDESCRIPTION: Check for the presence or absence of text on the page or within specific selectors using methods like assertSee and assertDontSeeIn.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertSee($text);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertDontSeeIn($selector, $text);\n```\n\n----------------------------------------\n\nTITLE: Strict Comparison for Duplicates with duplicatesStrict Method in PHP\nDESCRIPTION: The duplicatesStrict method works like duplicates but uses strict comparison (===) for determining duplicate values. This means both value and type must match exactly to be considered duplicates. Input and output are similar to duplicates method but strict equality is enforced.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: Creating JSONB Column in Laravel Migration\nDESCRIPTION: The jsonb method creates a JSONB equivalent column in a Laravel database migration. When using SQLite, a TEXT column will be created.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\n$table->jsonb('options');\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection using whereNotIn - PHP\nDESCRIPTION: Shows how to filter a Laravel Collection to remove items whose specified key's value is present in a given array using loose comparison. It illustrates the initial collection and the filtered output. Note that `whereNotInStrict` should be used for strict type comparisons.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_149\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 100],\n    ['product' => 'Bookcase', 'price' => 150],\n    ['product' => 'Door', 'price' => 100],\n]);\n\n$filtered = $collection->whereNotIn('price', [150, 200]);\n\n$filtered->all();\n\n/*\n    [\n        ['product' => 'Chair', 'price' => 100],\n        ['product' => 'Door', 'price' => 100],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Password Confirmation Validation in Laravel\nDESCRIPTION: Route handler for validating password confirmation and managing session state.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Redirect;\n\nRoute::post('/confirm-password', function (Request $request) {\n    if (! Hash::check($request->password, $request->user()->password)) {\n        return back()->withErrors([\n            'password' => ['The provided password does not match our records.']\n        ]);\n    }\n\n    $request->session()->passwordConfirmed();\n\n    return redirect()->intended();\n})->middleware(['auth', 'throttle:6,1']);\n```\n\n----------------------------------------\n\nTITLE: Appending and Prepending Middleware to Default Groups in Laravel\nDESCRIPTION: This snippet demonstrates how to append or prepend middleware to Laravel's default 'web' and 'api' middleware groups using the withMiddleware method in the bootstrap/app.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\EnsureTokenIsValid;\nuse App\\Http\\Middleware\\EnsureUserIsSubscribed;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->web(append: [\n        EnsureUserIsSubscribed::class,\n    ]);\n\n    $middleware->api(prepend: [\n        EnsureTokenIsValid::class,\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Renaming Database Indexes in Laravel Migrations\nDESCRIPTION: Demonstrates how to rename an existing database index using Laravel's schema builder in migrations. Takes the current index name as the first parameter and the desired new name as the second parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$table->renameIndex('from', 'to')\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Deleting Cache Items\nDESCRIPTION: Shows usage of Cache::pull() method to retrieve and delete cache items in one operation. Returns null if item doesn't exist.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::pull('key');\n\n$value = Cache::pull('key', 'default');\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon SES Driver Dependencies for Laravel\nDESCRIPTION: Command to install the Amazon AWS SDK for PHP via Composer for use with Laravel's SES mail driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ncomposer require aws/aws-sdk-php\n```\n\n----------------------------------------\n\nTITLE: Excluding Attributes with Prefix in Laravel Blade\nDESCRIPTION: Uses the whereDoesntStartWith method to exclude all attributes whose keys begin with a specified string from a component's attribute bag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_51\n\nLANGUAGE: blade\nCODE:\n```\n{{ $attributes->whereDoesntStartWith('wire:model') }}\n```\n\n----------------------------------------\n\nTITLE: Using Database Transactions in Laravel PHP\nDESCRIPTION: Shows how to use database transactions with automatic commit and rollback using the DB facade's transaction method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\nDB::transaction(function () {\n    DB::update('update users set votes = 1');\n\n    DB::delete('delete from posts');\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Binding with bindIf in Laravel Container\nDESCRIPTION: Example of using the bindIf method to register a container binding only if no binding has been registered for the given type. This prevents overriding existing bindings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->app->bindIf(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Input Fields with Only Method in Laravel\nDESCRIPTION: Getting a subset of the input data by specifying which fields to include using the only method with an array or parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$input = $request->only(['username', 'password']);\n\n$input = $request->only('username', 'password');\n```\n\n----------------------------------------\n\nTITLE: Implementing Has Many Through Relationship\nDESCRIPTION: PHP implementation of a Has Many Through relationship in the Application model to access deployments through environments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough;\n\nclass Application extends Model\n{\n    /**\n     * Get all of the deployments for the application.\n     */\n    public function deployments(): HasManyThrough\n    {\n        return $this->hasManyThrough(Deployment::class, Environment::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: String Truncation with Str::limit in PHP\nDESCRIPTION: Demonstrates various ways to use Str::limit for truncating strings, including custom endings and word preservation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20);\n\n// The quick brown fox...\n```\n\nLANGUAGE: php\nCODE:\n```\n$truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20, ' (...)');\n\n// The quick brown fox (...)\n```\n\nLANGUAGE: php\nCODE:\n```\n$truncated = Str::limit('The quick brown fox', 12, preserveWords: true);\n\n// The quick...\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Connections for Truncation in Laravel Dusk\nDESCRIPTION: Demonstrates how to specify which database connections should have their tables truncated by defining a $connectionsToTruncate property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Indicates which connections should have their tables truncated.\n *\n * @var array\n */\nprotected $connectionsToTruncate = ['mysql'];\n```\n\n----------------------------------------\n\nTITLE: Configuring Postmark Services in Laravel\nDESCRIPTION: PHP configuration array to set up Postmark services in Laravel's services.php config file, including the API token.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'postmark' => [\n    'token' => env('POSTMARK_TOKEN'),\n],\n```\n\n----------------------------------------\n\nTITLE: Testing Sanctum Authentication in Laravel\nDESCRIPTION: Examples of testing authenticated endpoints using Sanctum's actingAs helper method in both Pest and PHPUnit testing frameworks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ntest('task list can be retrieved', function () {\n    Sanctum::actingAs(\n        User::factory()->create(),\n        ['view-tasks']\n    );\n\n    $response = $this->get('/api/task');\n\n    $response->assertOk();\n});\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function test_task_list_can_be_retrieved(): void\n{\n    Sanctum::actingAs(\n        User::factory()->create(),\n        ['view-tasks']\n    );\n\n    $response = $this->get('/api/task');\n\n    $response->assertOk();\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Custom Retention Period for Telescope Data\nDESCRIPTION: PHP code for scheduling the pruning command with a custom retention period (48 hours) for Telescope data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('telescope:prune --hours=48')->daily();\n```\n\n----------------------------------------\n\nTITLE: Creating MEDIUMINT Column in Laravel Migration\nDESCRIPTION: The mediumInteger method creates a MEDIUMINT equivalent column in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\n$table->mediumInteger('votes');\n```\n\n----------------------------------------\n\nTITLE: Index Component Directory Structure\nDESCRIPTION: Shows the improved directory structure for anonymous index components that allows for more organized file management.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_77\n\nLANGUAGE: text\nCODE:\n```\n/resources/views/components/accordion/accordion.blade.php\n/resources/views/components/accordion/item.blade.php\n```\n\n----------------------------------------\n\nTITLE: Waiting for Text in Selectors\nDESCRIPTION: Demonstrates how to wait for specific text to appear within selected elements using waitForTextIn method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n// Wait a maximum of five seconds for the selector to contain the given text...\n$browser->waitForTextIn('.selector', 'Hello World');\n\n// Wait a maximum of one second for the selector to contain the given text...\n$browser->waitForTextIn('.selector', 'Hello World', 1);\n```\n\n----------------------------------------\n\nTITLE: Custom Sender Mail Notification in Laravel\nDESCRIPTION: Shows how to customize the sender's email address and name for a notification.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function toMail(object $notifiable): MailMessage\n{\n    return (new MailMessage)\n        ->from('barrett@example.com', 'Barrett Blair')\n        ->line('...');\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Queued Mail Assertions\nDESCRIPTION: Examples of asserting queued mail functionality in Laravel tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nMail::assertQueued(OrderShipped::class);\nMail::assertNotQueued(OrderShipped::class);\nMail::assertNothingQueued();\nMail::assertQueuedCount(3);\n```\n\n----------------------------------------\n\nTITLE: Using Truth Test Constraints in Laravel Task Scheduling\nDESCRIPTION: This code illustrates how to use the when and skip methods to conditionally execute or skip scheduled tasks based on custom logic.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')->daily()->when(function () {\n    return true;\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')->daily()->skip(function () {\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Laravel Routing with Additional Routes\nDESCRIPTION: Shows how to add custom routes using the 'then' closure in the withRouting method, allowing for additional route definitions beyond the default configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Route;\n\n->withRouting(\n    web: __DIR__.'/../routes/web.php',\n    commands: __DIR__.'/../routes/console.php',\n    health: '/up',\n    then: function () {\n        Route::middleware('api')\n            ->prefix('webhooks')\n            ->name('webhooks.')\n            ->group(base_path('routes/webhooks.php'));\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Requesting Authorization with Scopes in Laravel Passport\nDESCRIPTION: This PHP snippet shows how to request authorization with specific scopes when using the authorization code grant in Laravel Passport.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/redirect', function () {\n    $query = http_build_query([\n        'client_id' => 'client-id',\n        'redirect_uri' => 'http://example.com/callback',\n        'response_type' => 'code',\n        'scope' => 'place-orders check-status',\n    ]);\n\n    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Streamed Downloads in Laravel\nDESCRIPTION: Demonstrates how to use the streamDownload method to turn a string response into a downloadable response without writing the contents to disk.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\GitHub;\n\nreturn response()->streamDownload(function () {\n    echo GitHub::api('repo')\n        ->contents()\n        ->readme('laravel', 'laravel')['contents'];\n}, 'laravel-readme.md');\n```\n\n----------------------------------------\n\nTITLE: Mapping Spread Array Values with `Arr::mapSpread()` - PHP\nDESCRIPTION: This snippet demonstrates how to use the `Arr::mapSpread()` method to iterate over an array of nested items and pass the values of each nested item to a given closure. It's suitable when you have an array of arrays and want to transform each sub-array's elements.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [\n    [0, 1],\n    [2, 3],\n    [4, 5],\n    [6, 7],\n    [8, 9],\n];\n\n$mapped = Arr::mapSpread($array, function (int $even, int $odd) {\n    return $even + $odd;\n});\n\n/*\n    [1, 5, 9, 13, 17]\n*/\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Collection Items with each Method in PHP\nDESCRIPTION: The each method iterates over items in the collection and passes each item and its key to a user-supplied closure. It allows executing custom code for each element. Returning false from the closure stops the iteration early. It accepts a Laravel Collection and a closure, returning the original collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4]);\n\n$collection->each(function (int $item, int $key) {\n    // ...\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection->each(function (int $item, int $key) {\n    if (/* condition */) {\n        return false;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Services in Laravel\nDESCRIPTION: PHP configuration array to set up Resend services in Laravel's services.php config file, including the API key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'resend' => [\n    'key' => env('RESEND_KEY'),\n],\n```\n\n----------------------------------------\n\nTITLE: Subquery Select Example\nDESCRIPTION: Demonstrates advanced subquery usage to select related data in a single query.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Destination;\nuse App\\Models\\Flight;\n\nreturn Destination::addSelect(['last_flight' => Flight::select('name')\n    ->whereColumn('destination_id', 'destinations.id')\n    ->orderByDesc('arrived_at')\n    ->limit(1)\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Scheduling Automatic Token Cleanup in Laravel\nDESCRIPTION: Demonstrates how to schedule automatic cleanup of expired password reset tokens using Laravel's scheduler.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passwords.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('auth:clear-resets')->everyFifteenMinutes();\n```\n\n----------------------------------------\n\nTITLE: Copying and Moving Files in Laravel\nDESCRIPTION: Shows how to copy an existing file to a new location or move/rename a file using Laravel's Storage facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nStorage::copy('old/file.jpg', 'new/file.jpg');\n\nStorage::move('old/file.jpg', 'new/file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Permanent Cache Storage\nDESCRIPTION: Demonstrates storing items permanently in cache using forever() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nCache::forever('key', 'value');\n```\n\n----------------------------------------\n\nTITLE: Debugging with dd() in PHP\nDESCRIPTION: The `dd` (dump and die) method outputs the collection's items to the console or browser and terminates the execution of the script. This is useful for inspecting the collection's state during development.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['John Doe', 'Jane Doe']);\n\n$collection->dd();\n\n/*\n    Collection {\n        #items: array:2 [\n            0 => \"John Doe\"\n            1 => \"Jane Doe\"\n        ]\n    }\n*/\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Strings apa() Method for APA-Style Capitalization in Laravel\nDESCRIPTION: The apa method converts a string to title case following APA guidelines, where most words are capitalized except for certain articles, conjunctions, and prepositions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_79\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$converted = Str::of('a nice title uses the correct case')->apa();\n\n// A Nice Title Uses the Correct Case\n```\n\n----------------------------------------\n\nTITLE: Laravel Optimization Commands\nDESCRIPTION: Collection of Artisan commands for optimizing Laravel application performance in production, including configuration, event, route, and view caching.\nSOURCE: https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan optimize\nphp artisan optimize:clear\nphp artisan config:cache\nphp artisan event:cache\nphp artisan route:cache\nphp artisan view:cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection in Laravel\nDESCRIPTION: Example configuration for Redis connections in Laravel's config/database.php file, including options for clustering and multiple connections.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'redis' => [\n\n    'client' => env('REDIS_CLIENT', 'phpredis'),\n\n    'options' => [\n        'cluster' => env('REDIS_CLUSTER', 'redis'),\n        'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),\n    ],\n\n    'default' => [\n        'url' => env('REDIS_URL'),\n        'host' => env('REDIS_HOST', '127.0.0.1'),\n        'username' => env('REDIS_USERNAME'),\n        'password' => env('REDIS_PASSWORD'),\n        'port' => env('REDIS_PORT', '6379'),\n        'database' => env('REDIS_DB', '0'),\n    ],\n\n    'cache' => [\n        'url' => env('REDIS_URL'),\n        'host' => env('REDIS_HOST', '127.0.0.1'),\n        'username' => env('REDIS_USERNAME'),\n        'password' => env('REDIS_PASSWORD'),\n        'port' => env('REDIS_PORT', '6379'),\n        'database' => env('REDIS_CACHE_DB', '1'),\n    ],\n\n],\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Route Names in Laravel\nDESCRIPTION: Demonstrates how to override default route names for resource controllers by specifying custom names for specific actions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\PhotoController;\n\nRoute::resource('photos', PhotoController::class)->names([\n    'create' => 'photos.build'\n]);\n```\n\n----------------------------------------\n\nTITLE: Sorting Array by Values Descending Using Laravel Arr SortDesc Method in PHP\nDESCRIPTION: The Arr::sortDesc method sorts an array in descending order by its values. Similar to Arr::sort, it accepts an optional closure to specify custom sorting logic on multidimensional arrays. The method depends on Illuminate\\Support\\Arr and returns a sorted array maintaining keys unless re-indexed separately.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['Desk', 'Table', 'Chair'];\n\n$sorted = Arr::sortDesc($array);\n\n// ['Table', 'Desk', 'Chair']\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [\n    ['name' => 'Desk'],\n    ['name' => 'Table'],\n    ['name' => 'Chair'],\n];\n\n$sorted = array_values(Arr::sortDesc($array, function (array $value) {\n    return $value['name'];\n}));\n\n/*\n    [\n        ['name' => 'Table'],\n        ['name' => 'Desk'],\n        ['name' => 'Chair'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Custom NotFoundHttpException Handling in Laravel\nDESCRIPTION: Shows how to override the rendering behavior for built-in Laravel or Symfony exceptions like NotFoundHttpException.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->render(function (NotFoundHttpException $e, Request $request) {\n        if ($request->is('api/*')) {\n            return response()->json([\n                'message' => 'Record not found.'\n            ], 404);\n        }\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Securing Markdown Conversion in PHP\nDESCRIPTION: Shows how to use the 'markdown' method with security options to prevent XSS vulnerabilities when converting Markdown to HTML.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_128\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nStr::of('Inject: <script>alert(\"Hello XSS!\");</script>')->markdown([\n    'html_input' => 'strip',\n    'allow_unsafe_links' => false,\n]);\n\n// <p>Inject: alert(&quot;Hello XSS!&quot;);</p>\n```\n\n----------------------------------------\n\nTITLE: Sorting Collections by Keys with sortKeys in Laravel Collections - PHP\nDESCRIPTION: Demonstrates the sortKeys method to sort a collection by its keys in ascending order. The keys are sorted using PHP's built-in sorting mechanisms, and the sorted collection retains the key/value mapping. This is useful for associative arrays where key order matters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_119\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'id' => 22345,\n    'first' => 'John',\n    'last' => 'Doe',\n]);\n\n$sorted = $collection->sortKeys();\n\n$sorted->all();\n\n/*\n    [\n        'first' => 'John',\n        'id' => 22345,\n        'last' => 'Doe',\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Updating Laravel Installer via Composer Global Update\nDESCRIPTION: This command updates the Laravel installer CLI tool globally to ensure compatibility with Laravel 12.x and the new Laravel starter kits.\nSOURCE: https://github.com/laravel/docs/blob/12.x/upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer global update laravel/installer\n```\n\n----------------------------------------\n\nTITLE: Passing Array Values to Artisan Commands\nDESCRIPTION: Shows how to pass array values to Artisan command options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Artisan;\n\nRoute::post('/mail', function () {\n    $exitCode = Artisan::call('mail:send', [\n        '--id' => [5, 13]\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Values with Laravel Query Builder\nDESCRIPTION: Demonstrates methods for incrementing and decrementing column values, including examples with additional updates and multiple column operations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nDB::table('users')->increment('votes');\n\nDB::table('users')->increment('votes', 5);\n\nDB::table('users')->decrement('votes');\n\nDB::table('users')->decrement('votes', 5);\n\nDB::table('users')->increment('votes', 1, ['name' => 'John']);\n\nDB::table('users')->incrementEach([\n    'votes' => 5,\n    'balance' => 100,\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Gates Using Class Callback Arrays\nDESCRIPTION: Demonstrates how to define gates using a class callback array that points to a method in a policy class instead of using a closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Policies\\PostPolicy;\nuse Illuminate\\Support\\Facades\\Gate;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Gate::define('update-post', [PostPolicy::class, 'update']);\n}\n```\n\n----------------------------------------\n\nTITLE: Using csrf_token() function to get the CSRF token in Laravel PHP\nDESCRIPTION: The csrf_token() function retrieves the value of the current CSRF token for manual inclusion in AJAX requests or custom form handling.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_83\n\nLANGUAGE: php\nCODE:\n```\n$token = csrf_token();\n```\n\n----------------------------------------\n\nTITLE: Generating Model with Factory in Laravel\nDESCRIPTION: Commands to create an Eloquent model with a corresponding model factory class, which can be used for testing and seeding.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Generate a model and a FlightFactory class...\nphp artisan make:model Flight --factory\nphp artisan make:model Flight -f\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Socialite with Composer\nDESCRIPTION: Command to install the Laravel Socialite package via Composer package manager, adding it to the project's dependencies.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/socialite\n```\n\n----------------------------------------\n\nTITLE: Configuring Brevo Mail Transport in Laravel Config\nDESCRIPTION: Configuration array for setting up the Brevo mail transport in Laravel's mail configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n'brevo' => [\n    'transport' => 'brevo',\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Setting Missing Values in Nested Arrays or Objects Using Laravel Global data_fill Function in PHP\nDESCRIPTION: The data_fill helper function sets a value within a nested array or object only if the target key is missing, using dot notation with support for wildcard asterisks. It takes the target data by reference, a dot-notated key string, and a value to fill. Supports filling multiple nested elements with wildcards. Useful for initializing default values without overwriting existing data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$data = ['products' => ['desk' => ['price' => 100]]];\n\ndata_fill($data, 'products.desk.price', 200);\n\n// ['products' => ['desk' => ['price' => 100]]]\n\ndata_fill($data, 'products.desk.discount', 10);\n\n// ['products' => ['desk' => ['price' => 100, 'discount' => 10]]]\n```\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'products' => [\n        ['name' => 'Desk 1', 'price' => 100],\n        ['name' => 'Desk 2'],\n    ],\n];\n\ndata_fill($data, 'products.*.price', 200);\n\n/*\n    [\n        'products' => [\n            ['name' => 'Desk 1', 'price' => 100],\n            ['name' => 'Desk 2', 'price' => 200],\n        ],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Lowercase Conversion with Str::lower in PHP\nDESCRIPTION: Shows how to use Str::lower to convert a string to lowercase.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$converted = Str::lower('LARAVEL');\n\n// laravel\n```\n\n----------------------------------------\n\nTITLE: Casting Date Attributes with Custom Format in Laravel Eloquent (PHP)\nDESCRIPTION: Shows how to cast a date attribute (`created_at`) using the `datetime` cast type within the `casts()` method, while also specifying a custom format (`Y-m-d`). This format will be used when the model is serialized to an array or JSON. By default, `created_at` and `updated_at` are cast automatically.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the attributes that should be cast.\n *\n * @return array<string, string>\n */\nprotected function casts(): array\n{\n    return [\n        'created_at' => 'datetime:Y-m-d',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: WhereNot Clause Example\nDESCRIPTION: Demonstrates the use of whereNot method to negate a group of conditions for filtering products.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$products = DB::table('products')\n    ->whereNot(function (Builder $query) {\n        $query->where('clearance', true)\n            ->orWhere('price', '<', 10);\n        })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Handling for Pulse\nDESCRIPTION: Example of setting up custom exception handling for Pulse to log errors rather than silently failing when issues occur.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Pulse\\Facades\\Pulse;\nuse Illuminate\\Support\\Facades\\Log;\n\nPulse::handleExceptionsUsing(function ($e) {\n    Log::debug('An exception happened in Pulse', [\n        'message' => $e->getMessage(),\n        'stack' => $e->getTraceAsString(),\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if User is on Trial Period in Laravel Cashier\nDESCRIPTION: Two equivalent methods to check if a user is currently within their trial period - either by using the onTrial method on the user instance or on the subscription instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_89\n\nLANGUAGE: php\nCODE:\n```\nif ($user->onTrial('default')) {\n    // ...\n}\n\nif ($user->subscription('default')->onTrial()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Fields for Multi-step Forms\nDESCRIPTION: Example showing how to validate multiple form fields at once before proceeding to the next step in a multi-step form.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<button\n    type=\"button\"\n    onClick={() => form.validate({\n        only: ['name', 'email', 'phone'],\n        onSuccess: (response) => nextStep(),\n        onValidationError: (response) => /* ... */,\n    })}\n>Next Step</button>\n```\n\n----------------------------------------\n\nTITLE: Registering Precognition with Alpine.js\nDESCRIPTION: JavaScript setup to register the Precognition plugin with Alpine.js in the application's main JavaScript file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport Alpine from 'alpinejs';\nimport Precognition from 'laravel-precognition-alpine';\n\nwindow.Alpine = Alpine;\n\nAlpine.plugin(Precognition);\nAlpine.start();\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth Tokens in Laravel\nDESCRIPTION: This snippet shows how to refresh an OAuth token using Laravel's HTTP client. It sends a POST request to the OAuth token endpoint with the refresh token grant type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\n$response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n    'grant_type' => 'refresh_token',\n    'refresh_token' => 'the-refresh-token',\n    'client_id' => 'client-id',\n    'client_secret' => 'client-secret',\n    'scope' => '',\n]);\n\nreturn $response->json();\n```\n\n----------------------------------------\n\nTITLE: Creating Models with Mass Assignment in Laravel Eloquent\nDESCRIPTION: Example of using the create method to insert a new model with a single statement. Requires proper mass assignment protection with fillable or guarded properties on the model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Flight;\n\n$flight = Flight::create([\n    'name' => 'London to Paris',\n]);\n```\n\n----------------------------------------\n\nTITLE: Filter Collection by Value Range with `whereBetween()` in PHP\nDESCRIPTION: The `whereBetween()` method filters the collection by determining if a specified item value is within a given range (inclusive). Requires a Laravel Collection instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_145\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 80],\n    ['product' => 'Bookcase', 'price' => 150],\n    ['product' => 'Pencil', 'price' => 30],\n    ['product' => 'Door', 'price' => 100],\n]);\n\n$filtered = $collection->whereBetween('price', [100, 200]);\n\n$filtered->all();\n\n/*\n    [\n        ['product' => 'Desk', 'price' => 200],\n        ['product' => 'Bookcase', 'price' => 150],\n        ['product' => 'Door', 'price' => 100],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Logging with Context in Laravel (PHP)\nDESCRIPTION: This snippet shows how to log information with context in Laravel. It demonstrates that the context information added earlier will be automatically included in the log entry.\nSOURCE: https://github.com/laravel/docs/blob/12.x/context.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nLog::info('User authenticated.', ['auth_id' => Auth::id()]);\n```\n\n----------------------------------------\n\nTITLE: Showing Field Validation Errors in Alpine.js\nDESCRIPTION: HTML template for displaying validation errors for a specific field using Precognition's form.errors object.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<template x-if=\"form.invalid('email')\">\n    <div x-text=\"form.errors.email\"></div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Paddle Webhooks in Laravel Event Listener\nDESCRIPTION: Example of creating a Laravel event listener to handle Paddle webhook events. This snippet shows how to listen for the WebhookReceived event and implement custom handling for specific Paddle event types like 'transaction.billed'.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse Laravel\\Paddle\\Events\\WebhookReceived;\n\nclass PaddleEventListener\n{\n    /**\n     * Handle received Paddle webhooks.\n     */\n    public function handle(WebhookReceived $event): void\n    {\n        if ($event->payload['event_type'] === 'transaction.billed') {\n            // Handle the incoming event...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Scopes in Laravel Passport\nDESCRIPTION: This PHP snippet demonstrates how to set default scopes for tokens in Laravel Passport within the AppServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Passport\\Passport;\n\nPassport::tokensCan([\n    'place-orders' => 'Place orders',\n    'check-status' => 'Check order status',\n]);\n\nPassport::setDefaultScope([\n    'check-status',\n    'place-orders',\n]);\n```\n\n----------------------------------------\n\nTITLE: Implicit Grant Authorization Request\nDESCRIPTION: Implementation of the redirect request for implicit grant authorization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/redirect', function (Request $request) {\n    $request->session()->put('state', $state = Str::random(40));\n\n    $query = http_build_query([\n        'client_id' => 'client-id',\n        'redirect_uri' => 'http://third-party-app.com/callback',\n        'response_type' => 'token',\n        'scope' => '',\n        'state' => $state,\n    ]);\n\n    return redirect('http://passport-app.test/oauth/authorize?'.$query);\n});\n```\n\n----------------------------------------\n\nTITLE: Resuming Cancelled Subscriptions in Laravel Cashier\nDESCRIPTION: This code shows how to resume a cancelled subscription in Laravel Cashier. The customer must still be within their \"grace period\" to resume the subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_86\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->resume();\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables with Spaces\nDESCRIPTION: Define environment variables containing spaces by enclosing the value in double quotes in the .env file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nAPP_NAME=\"My Application\"\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Email View Using 'with' Parameter in Laravel\nDESCRIPTION: This snippet demonstrates how to pass data to the email view using the 'with' parameter in the content method of a Laravel mailable class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Mail;\n\nuse App\\Models\\Order;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Mail\\Mailable;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass OrderShipped extends Mailable\n{\n    use Queueable, SerializesModels;\n\n    /**\n     * Create a new message instance.\n     */\n    public function __construct(\n        protected Order $order,\n    ) {}\n\n    /**\n     * Get the message content definition.\n     */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'mail.orders.shipped',\n            with: [\n                'orderName' => $this->order->name,\n                'orderPrice' => $this->order->price,\n            ],\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Lock Keys Across Laravel Job Classes\nDESCRIPTION: Demonstrates how to share lock keys across different job classes using the WithoutOverlapping middleware's shared method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Queue\\Middleware\\WithoutOverlapping;\n\nclass ProviderIsDown\n{\n    // ...\n\n    public function middleware(): array\n    {\n        return [\n            (new WithoutOverlapping(\"status:{$this->provider}\"))->shared(),\n        ];\n    }\n}\n\nclass ProviderIsUp\n{\n    // ...\n\n    public function middleware(): array\n    {\n        return [\n            (new WithoutOverlapping(\"status:{$this->provider}\"))->shared(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Carbon instance for current time - Laravel PHP\nDESCRIPTION: This snippet shows how to create an `Illuminate\\Support\\Carbon` instance representing the current time using the `now()` helper function. Carbon is a date/time manipulation library.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_98\n\nLANGUAGE: php\nCODE:\n```\n$now = now();\n```\n\n----------------------------------------\n\nTITLE: Replacing Multiple Values in a String with Laravel Str Class\nDESCRIPTION: The swap method replaces multiple values in a string using PHP's strtr function. It takes an array of key-value pairs where keys are the strings to be replaced and values are their replacements.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_141\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('Tacos are great!')\n    ->swap([\n        'Tacos' => 'Burritos',\n        'great' => 'fantastic',\n    ]);\n\n// Burritos are fantastic!\n```\n\n----------------------------------------\n\nTITLE: Configuring Minio Buckets in Laravel Homestead\nDESCRIPTION: This YAML configuration demonstrates how to provision Minio-powered S3 buckets in Laravel Homestead. It shows how to create buckets with different access policies.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nbuckets:\n    - name: your-bucket\n      policy: public\n    - name: your-private-bucket\n      policy: none\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Key-Value Pairs with `Arr::only()` - PHP\nDESCRIPTION: This snippet shows how to extract specific key-value pairs from an array using the `Arr::only()` method. It returns a new array containing only the specified keys and their corresponding values from the original array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['name' => 'Desk', 'price' => 100, 'orders' => 10];\n\n$slice = Arr::only($array, ['name', 'price']);\n\n// ['name' => 'Desk', 'price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Pivot Model for Many-to-Many Relationship in Laravel\nDESCRIPTION: This snippet demonstrates how to define a custom pivot model 'RoleUser' for a many-to-many relationship between 'Role' and 'User' models in Laravel. It shows the 'Role' model using the custom pivot model and the structure of the 'RoleUser' pivot model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\n\nclass Role extends Model\n{\n    /**\n     * The users that belong to the role.\n     */\n    public function users(): BelongsToMany\n    {\n        return $this->belongsToMany(User::class)->using(RoleUser::class);\n    }\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Relations\\Pivot;\n\nclass RoleUser extends Pivot\n{\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from the Right Side of a String in Laravel\nDESCRIPTION: The rtrim method removes whitespace from the right side of a string. It can also remove specified characters. Unlike PHP's native rtrim function, Laravel's rtrim method also removes unicode whitespace characters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_151\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('  Laravel  ')->rtrim();\n\n// '  Laravel'\n\n$string = Str::of('/Laravel/')->rtrim('/');\n\n// '/Laravel'\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Services in Laravel\nDESCRIPTION: PHP configuration array to set up Mailgun services in Laravel's services.php config file, including domain, secret, and endpoint.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'mailgun' => [\n    'domain' => env('MAILGUN_DOMAIN'),\n    'secret' => env('MAILGUN_SECRET'),\n    'endpoint' => env('MAILGUN_ENDPOINT', 'api.mailgun.net'),\n    'scheme' => 'https',\n],\n```\n\n----------------------------------------\n\nTITLE: Creating GEOGRAPHY Column in Laravel Migration\nDESCRIPTION: The geography method creates a GEOGRAPHY equivalent column with the given spatial type and SRID (Spatial Reference System Identifier) in a Laravel database migration. Note that support for spatial types depends on the database driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n$table->geography('coordinates', subtype: 'point', srid: 4326);\n```\n\n----------------------------------------\n\nTITLE: Using position() Method in Laravel String Manipulation\nDESCRIPTION: Returns the position of first occurrence of a substring in a string. Returns false if substring not found.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_139\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$position = Str::of('Hello, World!')->position('Hello');\n\n// 0\n\n$position = Str::of('Hello, World!')->position('W');\n\n// 7\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Controller Actions in Laravel\nDESCRIPTION: Demonstrates how to generate redirects to controller actions using the action method. It shows basic usage and how to pass parameters to the controller action.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\UserController;\n\nreturn redirect()->action([UserController::class, 'index']);\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn redirect()->action(\n    [UserController::class, 'profile'], ['id' => 1]\n);\n```\n\n----------------------------------------\n\nTITLE: Excluding Items by Keys with except Method in PHP\nDESCRIPTION: The except method returns all items in the collection except those whose keys match any of the specified ones. It accepts a Laravel Collection and an array of keys to exclude, returning a filtered collection without those keys. This method behaves differently in Eloquent Collections, so behavior may vary depending on usage context.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['product_id' => 1, 'price' => 100, 'discount' => false]);\n\n$filtered = $collection->except(['price', 'discount']);\n\n$filtered->all();\n\n// ['product_id' => 1]\n```\n\n----------------------------------------\n\nTITLE: Executing General SQL Statement in Laravel PHP\nDESCRIPTION: Shows how to execute a general SQL statement that doesn't return a value using the DB facade's statement method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nDB::statement('drop table users');\n```\n\n----------------------------------------\n\nTITLE: Deferring Execution with defer - PHP\nDESCRIPTION: The `defer` function defers the execution of a closure until after the HTTP response has been sent to the user. This prevents blocking the request and improves application responsiveness. You can also name deferred functions, cancel, or always execute deferred functions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_130\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Metrics;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\nuse function Illuminate\\Support\\defer;\n\nRoute::post('/orders', function (Request $request) {\n    // Create order...\n\n    defer(fn () => Metrics::reportOrder($order));\n\n    return $order;\n});\n```\n\nLANGUAGE: php\nCODE:\n```\ndefer(fn () => Metrics::reportOrder($order))->always();\n```\n\nLANGUAGE: php\nCODE:\n```\ndefer(fn () => Metrics::report(), 'reportMetrics');\n\ndefer()->forget('reportMetrics');\n```\n\n----------------------------------------\n\nTITLE: Checking Item Existence with contains() in PHP\nDESCRIPTION: The `contains` method checks if a collection includes a specific item. It can accept a value, a key/value pair, or a callback function to define the condition for existence. It uses loose comparison by default.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$collection->contains(function (int $value, int $key) {\n    return $value > 5;\n});\n\n// false\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['name' => 'Desk', 'price' => 100]);\n\n$collection->contains('Desk');\n\n// true\n\n$collection->contains('New York');\n\n// false\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 100],\n]);\n\n$collection->contains('product', 'Bookcase');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Using Default Password Rules in Laravel Validation\nDESCRIPTION: This example demonstrates how to apply the default password rules in a validation scenario.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_88\n\nLANGUAGE: php\nCODE:\n```\n'password' => ['required', Password::defaults()],\n```\n\n----------------------------------------\n\nTITLE: Asserting Session Data in Laravel Tests\nDESCRIPTION: Methods to assert the presence and values of session data, including general session data, input data, and validation errors.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionHas($key, $value = null);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionHas($key, function (User $value) {\n    return $value->name === 'Taylor Otwell';\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionHasInput($key, $value = null);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionHasInput($key, function (string $value) {\n    return Crypt::decryptString($value) === 'secret';\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionHasAll(array $data);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionHasAll([\n    'name' => 'Taylor Otwell',\n    'status' => 'active',\n]);\n```\n\n----------------------------------------\n\nTITLE: Managing Subscription Quantity in Laravel Cashier\nDESCRIPTION: Methods for incrementing, decrementing, or directly updating the quantity of a subscription. These operations affect billing based on the quantity multiplier of the subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$user->subscription('default')->incrementQuantity();\n\n// Add five to the subscription's current quantity...\n$user->subscription('default')->incrementQuantity(5);\n\n$user->subscription('default')->decrementQuantity();\n\n// Subtract five from the subscription's current quantity...\n$user->subscription('default')->decrementQuantity(5);\n```\n\n----------------------------------------\n\nTITLE: Generating Dusk Tests\nDESCRIPTION: Artisan command to generate a new Dusk test file in the tests/Browser directory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan dusk:make LoginTest\n```\n\n----------------------------------------\n\nTITLE: Testing Feature Flags in PHP with Laravel Pennant\nDESCRIPTION: Demonstrates how to test code that interacts with feature flags by redefining features in test methods using Laravel Pennant.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Pennant\\Feature;\n\ntest('it can control feature values', function () {\n    Feature::define('purchase-button', 'seafoam-green');\n\n    expect(Feature::value('purchase-button'))->toBe('seafoam-green');\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Pennant\\Feature;\n\npublic function test_it_can_control_feature_values()\n{\n    Feature::define('purchase-button', 'seafoam-green');\n\n    $this->assertSame('seafoam-green', Feature::value('purchase-button'));\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Queue Connection in Laravel\nDESCRIPTION: Example of specifying a custom queue connection for a notification by implementing the onConnection method in the notification constructor.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Notifications;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Notifications\\Notification;\n\nclass InvoicePaid extends Notification implements ShouldQueue\n{\n    use Queueable;\n\n    /**\n     * Create a new notification instance.\n     */\n    public function __construct()\n    {\n        $this->onConnection('redis');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs with Laravel Pail\nDESCRIPTION: Shows examples of using various filtering options with Laravel Pail to narrow down log output.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan pail --filter=\"QueryException\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan pail --message=\"User created\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan pail --level=error\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan pail --user=1\n```\n\n----------------------------------------\n\nTITLE: Compiling JavaScript and CSS with Laravel Mix\nDESCRIPTION: This snippet demonstrates how to use Laravel Mix to compile and minify JavaScript and CSS files. It shows a simple method chain to define the asset pipeline for both JS and CSS files.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mix.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmix.js('resources/js/app.js', 'public/js')\n    .postCss('resources/css/app.css', 'public/css');\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Rules for Precognitive Requests\nDESCRIPTION: PHP form request class that uses isPrecognitive() to provide different validation rules for precognitive vs. full form submissions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Validation\\Rules\\Password;\n\nclass StoreUserRequest extends FormRequest\n{\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    protected function rules()\n    {\n        return [\n            'password' => [\n                'required',\n                $this->isPrecognitive()\n                    ? Password::min(8)\n                    : Password::min(8)->uncompromised(),\n            ],\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Sleep Call Sequences in Laravel Sleep Tests Using Pest and PHPUnit (PHP)\nDESCRIPTION: Demonstrates how to assert the sequence of sleep calls made by application code when using Sleep::fake(). This verifies that Sleep was called for 1, 2, and then 3 seconds respectively during the test run. Requires Illuminate\\Support\\Sleep and a test framework like Pest or PHPUnit. This approach enables detailed verification of sleep behaviors without slowing tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_140\n\nLANGUAGE: php\nCODE:\n```\nit('checks if ready three times', function () {\\n    Sleep::fake();\\n\\n    // ...\\n\\n    Sleep::assertSequence([\\n        Sleep::for(1)->second(),\\n        Sleep::for(2)->seconds(),\\n        Sleep::for(3)->seconds(),\\n    ]);\\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function test_it_checks_if_ready_three_times()\\n{\\n    Sleep::fake();\\n\\n    // ...\\n\\n    Sleep::assertSequence([\\n        Sleep::for(1)->second(),\\n        Sleep::for(2)->seconds(),\\n        Sleep::for(3)->seconds(),\\n    ]);\\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Mail Notifications in Browser\nDESCRIPTION: This snippet shows how to preview a mail notification in the browser by returning it directly from a route closure. This allows developers to quickly check the notification design without sending actual emails.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Invoice;\nuse App\\Notifications\\InvoicePaid;\n\nRoute::get('/notification', function () {\n    $invoice = Invoice::find(1);\n\n    return (new InvoicePaid($invoice))\n        ->toMail($invoice->user);\n});\n```\n\n----------------------------------------\n\nTITLE: Constraining morphTo Eager Loads by Model Type\nDESCRIPTION: This code shows how to add specific constraints to different model types in a morphTo relationship using the constrain method, allowing different filtering criteria based on the polymorphic type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_88\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\n$comments = Comment::with(['commentable' => function (MorphTo $morphTo) {\n    $morphTo->constrain([\n        Post::class => function ($query) {\n            $query->whereNull('hidden_at');\n        },\n        Video::class => function ($query) {\n            $query->where('type', 'educational');\n        },\n    ]);\n}])->get();\n```\n\n----------------------------------------\n\nTITLE: Casting Attribute to ArrayObject in Laravel Eloquent (PHP)\nDESCRIPTION: Shows how to use the `Illuminate\\Database\\Eloquent\\Casts\\AsArrayObject` class within the `casts()` method to cast a JSON attribute (`options`) to a PHP `ArrayObject`. This allows direct mutation of array offsets (e.g., `$user->options['key'] = $value;`) without causing PHP errors, unlike the basic `array` cast. Requires importing the `AsArrayObject` class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Casts\\AsArrayObject;\n\n/**\n * Get the attributes that should be cast.\n *\n * @return array<string, string>\n */\nprotected function casts(): array\n{\n    return [\n        'options' => AsArrayObject::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Laravel Model Broadcasting\nDESCRIPTION: Shows the default JSON payload format for a model broadcast event, which includes the model data with its attributes and a socket ID for the connection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"model\": {\n        \"id\": 1,\n        \"title\": \"My first post\"\n        ...\n    },\n    ...\n    \"socket\": \"someSocketId\"\n}\n```\n\n----------------------------------------\n\nTITLE: SPA-Optimized Vite Configuration\nDESCRIPTION: Vite configuration optimized for Single Page Applications without CSS entry points.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n    plugins: [\n        laravel([\n            'resources/js/app.js',\n        ]),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Accessor for JSON Appending\nDESCRIPTION: Demonstrates how to create an accessor that will be included in JSON serialization\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Casts\\Attribute;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Determine if the user is an administrator.\n     */\n    protected function isAdmin(): Attribute\n    {\n        return new Attribute(\n            get: fn () => 'yes',\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Package Routes in ServiceProvider\nDESCRIPTION: Demonstrates how to load package routes using the loadRoutesFrom method in the service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function boot(): void\n{\n    $this->loadRoutesFrom(__DIR__.'/../routes/web.php');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Job Backoff in Laravel PHP\nDESCRIPTION: Illustrates how to define a backoff property on a Laravel job class to specify the delay before retrying a failed job. This allows for job-specific retry behavior.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_85\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The number of seconds to wait before retrying the job.\n *\n * @var int\n */\npublic $backoff = 3;\n```\n\n----------------------------------------\n\nTITLE: Using Precognition with React and Inertia.js\nDESCRIPTION: Example showing how to use Laravel Precognition with React and Inertia.js, demonstrating the streamlined form submission process with Inertia event callbacks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { useForm } from 'laravel-precognition-react-inertia';\n\nconst form = useForm('post', '/users', {\n    name: '',\n    email: '',\n});\n\nconst submit = (e) => {\n    e.preventDefault();\n\n    form.submit({\n        preserveScroll: true,\n        onSuccess: () => form.reset(),\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Passport Cookie Name\nDESCRIPTION: Shows how to customize the name of the cookie used for API token storage\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Passport::cookie('custom_name');\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Specific Configuration File Values\nDESCRIPTION: Use the 'config:show' Artisan command to explore a specific configuration file's values in detail.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan config:show database\n```\n\n----------------------------------------\n\nTITLE: Generating Passport Encryption Keys\nDESCRIPTION: Command to generate the necessary encryption keys for Passport token generation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan passport:keys\n```\n\n----------------------------------------\n\nTITLE: Using Report Helper in Laravel\nDESCRIPTION: Demonstrates using the report helper function to log exceptions without interrupting the request flow.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function isValid(string $value): bool\n{\n    try {\n        // Validate the value...\n    } catch (Throwable $e) {\n        report($e);\n\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Date Validation Rule Example\nDESCRIPTION: Example showing how to validate that a start date field must be after tomorrow using Laravel's validation rules.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n'start_date' => 'required|date|after:tomorrow'\n```\n\n----------------------------------------\n\nTITLE: Configuring Xdebug Mode in Environment File\nDESCRIPTION: Environment variable configuration for enabling Xdebug in Laravel Sail by setting the SAIL_XDEBUG_MODE variable in the .env file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nSAIL_XDEBUG_MODE=develop,debug,coverage\n```\n\n----------------------------------------\n\nTITLE: Defining Chaperoned HasMany Relationship in Laravel\nDESCRIPTION: Shows how to use the chaperone method when defining a hasMany relationship to automatically hydrate parent models onto children\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\nclass Post extends Model\n{\n    /**\n     * Get the comments for the blog post.\n     */\n    public function comments(): HasMany\n    {\n        return $this->hasMany(Comment::class)->chaperone();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Morph Map for Serializing Pennant Scopes in PHP\nDESCRIPTION: Demonstrates how to use Eloquent morph maps with Pennant to decouple stored features from the application structure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Relations\\Relation;\nuse Laravel\\Pennant\\Feature;\n\nRelation::enforceMorphMap([\n    'post' => 'App\\Models\\Post',\n    'video' => 'App\\Models\\Video',\n]);\n\nFeature::useMorphMap();\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Laravel Query Builder\nDESCRIPTION: Shows how to update existing records using the update method. The example updates the 'votes' column for a user with a specific ID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$affected = DB::table('users')\n    ->where('id', 1)\n    ->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Creating DOUBLE Column in Laravel Migration\nDESCRIPTION: The double method creates a DOUBLE equivalent column in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n$table->double('amount');\n```\n\n----------------------------------------\n\nTITLE: Asserting Element States in PHP with Laravel Dusk\nDESCRIPTION: Assert various states of form elements (enabled, disabled, focused) using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertEnabled($field);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertDisabled($field);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertButtonEnabled($button);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertButtonDisabled($button);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertFocused($field);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertNotFocused($field);\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdomain Routing\nDESCRIPTION: Examples of setting up subdomain-based routing in Laravel Folio including parameter capture\nSOURCE: https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Folio\\Folio;\n\nFolio::domain('admin.example.com')\n    ->path(resource_path('views/pages/admin'));\n\nFolio::domain('{account}.example.com')\n    ->path(resource_path('views/pages/admin'));\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Data to Paddle Checkouts\nDESCRIPTION: Demonstrates how to pass custom data to a Paddle transaction using the customData method when creating a checkout session. This allows for including additional context with the transaction.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n$checkout = $user->checkout('pri_tshirt')\n    ->customData([\n        'custom_option' => $value,\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Encrypting Laravel Environment File\nDESCRIPTION: Use the env:encrypt Artisan command to encrypt the .env file for secure storage in source control.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan env:encrypt\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Command Directories in Laravel\nDESCRIPTION: Shows how to register additional directories for Laravel to scan for Artisan commands using the withCommands method in bootstrap/app.php.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n->withCommands([\n    __DIR__.'/../app/Domain/Orders/Commands',\n])\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Installer via Composer\nDESCRIPTION: Global Composer command to install the Laravel installer tool.\nSOURCE: https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer global require laravel/installer\n```\n\n----------------------------------------\n\nTITLE: Creating Paddle Checkout Session in Laravel\nDESCRIPTION: Route handler for generating a Paddle checkout session. Creates a checkout instance for a specific price and sets a return URL.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/buy', function (Request $request) {\n    $checkout = $user->checkout('pri_34567')\n        ->returnTo(route('dashboard'));\n\n    return view('billing', ['checkout' => $checkout]);\n});\n```\n\n----------------------------------------\n\nTITLE: Contextual Logging Example\nDESCRIPTION: Demonstrates how to include contextual data with log messages.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Log;\n\nLog::info('User {id} failed to login.', ['id' => $user->id]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Eager Loading in Laravel\nDESCRIPTION: Shows how to enable automatic eager loading for Eloquent relationships by calling Model::automaticallyEagerLoadRelationships() in the AppServiceProvider boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_95\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Model::automaticallyEagerLoadRelationships();\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Time-Sensitive Behavior in Laravel\nDESCRIPTION: Shows an example of testing time-sensitive application behavior, such as locking inactive forum threads after a week.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Thread;\n\ntest('forum threads lock after one week of inactivity', function () {\n    $thread = Thread::factory()->create();\n\n    $this->travel(1)->week();\n\n    expect($thread->isLockedByInactivity())->toBeTrue();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing FeatureScopeable Contract for Custom Scope Identification in PHP\nDESCRIPTION: Shows how to implement the FeatureScopeable contract to customize how scope values are stored for different feature drivers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse FlagRocket\\FlagRocketUser;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Laravel\\Pennant\\Contracts\\FeatureScopeable;\n\nclass User extends Model implements FeatureScopeable\n{\n    /**\n     * Cast the object to a feature scope identifier for the given driver.\n     */\n    public function toFeatureIdentifier(string $driver): mixed\n    {\n        return match($driver) {\n            'database' => $this,\n            'flag-rocket' => FlagRocketUser::fromId($this->flag_rocket_id),\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription with Trial Period and Payment Method Up Front in Laravel Cashier\nDESCRIPTION: This code demonstrates how to create a new subscription with a specified trial period while collecting payment method information up front. It uses the trialDays method to set a 10-day trial period.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_87\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/user/subscribe', function (Request $request) {\n    $request->user()->newSubscription('default', 'price_monthly')\n        ->trialDays(10)\n        ->create($request->paymentMethodId);\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Running Vite Commands\nDESCRIPTION: Shell commands for running Vite development server and building assets for production\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Run the Vite development server...\nnpm run dev\n\n# Build and version the assets for production...\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Executing Different Code Based on Input Presence in Laravel\nDESCRIPTION: Using whenHas with two closures to execute different code blocks depending on whether an input is present or not.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$request->whenHas('name', function (string $input) {\n    // The \"name\" value is present...\n}, function () {\n    // The \"name\" value is not present...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Vue Plugin\nDESCRIPTION: Configuration for using Vue.js with Vite in Laravel, including asset URL transformation settings\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\nimport vue from '@vitejs/plugin-vue';\n\nexport default defineConfig({\n    plugins: [\n        laravel(['resources/js/app.js']),\n        vue({\n            template: {\n                transformAssetUrls: {\n                    base: null,\n                    includeAbsolute: false,\n                },\n            },\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cache Control Middleware in Laravel Routes\nDESCRIPTION: Shows how to use the cache.headers middleware to set Cache-Control headers for a group of routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::middleware('cache.headers:public;max_age=2628000;etag')->group(function () {\n    Route::get('/privacy', function () {\n        // ...\n    });\n\n    Route::get('/terms', function () {\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Mass Updates with Laravel Eloquent\nDESCRIPTION: Example of updating multiple records that match a given query. Returns the number of affected rows but doesn't trigger model events.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nFlight::where('active', 1)\n    ->where('destination', 'San Diego')\n    ->update(['delayed' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Microsoft Teams Webhook Integration in Laravel Envoy\nDESCRIPTION: Illustrates Microsoft Teams notification setup in Envoy using webhooks. Supports customizable message boxes with various attributes including theme colors and supports additional options through Teams API.\nSOURCE: https://github.com/laravel/docs/blob/12.x/envoy.md#2025-04-21_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n@finished\n    @microsoftTeams('webhook-url')\n@endfinished\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Relationships\nDESCRIPTION: Example of implementing scoped relationships with additional constraints and attributes in Laravel models.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\nclass User extends Model\n{\n    /**\n     * Get the user's posts.\n     */\n    public function posts(): HasMany\n    {\n        return $this->hasMany(Post::class)->latest();\n    }\n\n    /**\n     * Get the user's featured posts.\n     */\n    public function featuredPosts(): HasMany\n    {\n        return $this->posts()->where('featured', true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiplying Collection Elements with `multiply` in PHP\nDESCRIPTION: The `multiply` method creates multiple copies of the collection's elements, effectively concatenating the collection n times. This method is useful for duplicating the contents of a collection, for example, generating a list of users multiple times. The example demonstrates multiplying a collection of user data by 3.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_81\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$users = collect([\n    ['name' => 'User #1', 'email' => 'user1@example.com'],\n    ['name' => 'User #2', 'email' => 'user2@example.com'],\n])->multiply(3);\n\n/*\n    [\n        ['name' => 'User #1', 'email' => 'user1@example.com'],\n        ['name' => 'User #2', 'email' => 'user2@example.com'],\n        ['name' => 'User #1', 'email' => 'user1@example.com'],\n        ['name' => 'User #2', 'email' => 'user2@example.com'],\n        ['name' => 'User #1', 'email' => 'user1@example.com'],\n        ['name' => 'User #2', 'email' => 'user2@example.com'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Spoofing HTTP Methods in Laravel Blade Form\nDESCRIPTION: Shows how to use the @method Blade directive to spoof HTTP verbs like PUT, PATCH, or DELETE in HTML forms.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_95\n\nLANGUAGE: blade\nCODE:\n```\n<form action=\"/foo/bar\" method=\"POST\">\n    @method('PUT')\n\n    ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Asserting Checkbox States in PHP with Laravel Dusk\nDESCRIPTION: Assert the state of a checkbox (checked, not checked, or indeterminate) using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertChecked($field);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertNotChecked($field);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertIndeterminate($field);\n```\n\n----------------------------------------\n\nTITLE: Registering Brevo Transport in Laravel Service Provider\nDESCRIPTION: Implementation of Brevo mail transport registration using Laravel's Mail facade and Symfony's BrevoTransportFactory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Mail;\nuse Symfony\\Component\\Mailer\\Bridge\\Brevo\\Transport\\BrevoTransportFactory;\nuse Symfony\\Component\\Mailer\\Transport\\Dsn;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Mail::extend('brevo', function () {\n        return (new BrevoTransportFactory)->create(\n            new Dsn(\n                'brevo+api',\n                'default',\n                config('services.brevo.key')\n            )\n        );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Listener for Laravel HTTP Client Events\nDESCRIPTION: Demonstrates how to create an event listener for the RequestSending event to monitor HTTP requests in a Laravel application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\Events\\RequestSending;\n\nclass LogRequest\n{\n    /**\n     * Handle the given event.\n     */\n    public function handle(RequestSending $event): void\n    {\n        // $event->request ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Pulse During Deployment\nDESCRIPTION: Command to gracefully restart the Pulse check process during application deployment to pick up codebase changes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan pulse:restart\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Soft Delete Columns in Laravel Migrations\nDESCRIPTION: Shows how to add and remove the deleted_at column required for soft deletes using Laravel's schema builder in migrations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('flights', function (Blueprint $table) {\n    $table->softDeletes();\n});\n\nSchema::table('flights', function (Blueprint $table) {\n    $table->dropSoftDeletes();\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact JSON Data Absence in Laravel Tests\nDESCRIPTION: This snippet shows how to assert that a response does not contain exact JSON data using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonMissingExact(array $data);\n```\n\n----------------------------------------\n\nTITLE: Manually Authenticating User Instances in Laravel\nDESCRIPTION: This snippet shows how to manually set an existing user instance as the currently authenticated user in Laravel. It demonstrates using the login method of the Auth facade with various options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Auth;\n\nAuth::login($user);\n\nAuth::login($user, $remember = true);\n\nAuth::guard('admin')->login($user);\n```\n\n----------------------------------------\n\nTITLE: Applying Subscription Middleware to Laravel Route\nDESCRIPTION: Shows how to apply the subscription middleware to a Laravel route to restrict access to subscribed users only.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\Subscribed;\n\nRoute::get('/dashboard', function () {\n    // ...\n})->middleware([Subscribed::class]);\n```\n\n----------------------------------------\n\nTITLE: Basic Rate Limiting with RateLimiter Facade in Laravel\nDESCRIPTION: This example demonstrates how to use the RateLimiter facade's attempt method to rate limit a callback function. It limits the 'send-message' action to 5 attempts per minute for a specific user.\nSOURCE: https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\n$executed = RateLimiter::attempt(\n    'send-message:'.$user->id,\n    $perMinute = 5,\n    function() {\n        // Send message...\n    }\n);\n\nif (! $executed) {\n  return 'Too many messages sent!';\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Items for a Specific Page - PHP\nDESCRIPTION: The `forPage` method retrieves a subset of items from a collection, simulating pagination. It takes the page number and the number of items per page as arguments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n$chunk = $collection->forPage(2, 3);\n\n$chunk->all();\n\n// [4, 5, 6]\n\n```\n\n----------------------------------------\n\nTITLE: Checking Trial Period in Laravel Cashier\nDESCRIPTION: Demonstrates how to check if a user is within their trial period using the 'onTrial' method. This can be used to display warnings or special messages to trial users.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription('default')->onTrial()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using cookie() function to create cookies in Laravel PHP\nDESCRIPTION: The cookie() function creates a new cookie instance with the specified name, value, and expiration time in minutes for HTTP responses.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_81\n\nLANGUAGE: php\nCODE:\n```\n$cookie = cookie('name', 'value', $minutes);\n```\n\n----------------------------------------\n\nTITLE: Rendering Paddle Checkout Button in Blade\nDESCRIPTION: Blade component implementation for displaying the Paddle checkout button with customizable styling.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<x-paddle-button :checkout=\"$checkout\" class=\"px-8 py-4\">\n    Subscribe\n</x-paddle-button>\n```\n\n----------------------------------------\n\nTITLE: Linking Sites with Valet\nDESCRIPTION: Commands to link individual sites and directories with custom hostnames in Valet.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/Sites/laravel\n\nvalet link\n\nvalet link application\n\nvalet link api.application\n\nvalet links\n\nvalet unlink\n```\n\n----------------------------------------\n\nTITLE: Getting Traits with trait_uses_recursive - PHP\nDESCRIPTION: The `trait_uses_recursive` function retrieves all traits used by a given trait, including traits used by those traits recursively. This is useful for understanding the composition of a class or trait and its dependencies.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_121\n\nLANGUAGE: php\nCODE:\n```\n$traits = trait_uses_recursive(\\Illuminate\\Notifications\\Notifiable::class);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Laravel Application with Herd on macOS\nDESCRIPTION: This snippet demonstrates how to create a new Laravel application using the Laravel CLI bundled with Herd on macOS. It navigates to the Herd directory, creates a new application, and opens it in the default browser.\nSOURCE: https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/Herd\nlaravel new my-app\ncd my-app\nherd open\n```\n\n----------------------------------------\n\nTITLE: Registering Observer Using ObservedBy Attribute\nDESCRIPTION: Shows how to register a model observer using the ObservedBy attribute on the model class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_79\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Observers\\UserObserver;\nuse Illuminate\\Database\\Eloquent\\Attributes\\ObservedBy;\n\n#[ObservedBy([UserObserver::class])]\nclass User extends Authenticatable\n{\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Laravel Log Level Methods\nDESCRIPTION: Complete list of available logging methods corresponding to RFC 5424 specification levels.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Log;\n\nLog::emergency($message);\nLog::alert($message);\nLog::critical($message);\nLog::error($message);\nLog::warning($message);\nLog::notice($message);\nLog::info($message);\nLog::debug($message);\n```\n\n----------------------------------------\n\nTITLE: Scheduling Closure Commands in Laravel\nDESCRIPTION: Shows how to schedule Artisan commands defined as closures with arguments and purpose definitions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nArtisan::command('delete:recent-users', function () {\n    DB::table('recent_users')->delete();\n})->purpose('Delete recent users')->daily();\n\nArtisan::command('emails:send {user} {--force}', function ($user) {\n    // ...\n})->purpose('Send emails to the specified user')->schedule(['Taylor', '--force'])->daily();\n```\n\n----------------------------------------\n\nTITLE: Pruning Failed Jobs in Laravel\nDESCRIPTION: Command to prune (delete) old records from the failed_jobs table, by default removing records older than 24 hours.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_97\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:prune-failed\n```\n\n----------------------------------------\n\nTITLE: Overriding Passport Routes in Laravel PHP\nDESCRIPTION: This snippet shows how to ignore default Passport routes and define custom routes in Laravel's AppServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Passport\\Passport;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    Passport::ignoreRoutes();\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nRoute::group([\n    'as' => 'passport.',\n    'prefix' => config('passport.path', 'oauth'),\n    'namespace' => '\\Laravel\\Passport\\Http\\Controllers',\n], function () {\n    // Passport routes...\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Model Using Dynamic Properties in Laravel\nDESCRIPTION: Example of retrieving a related model using Eloquent's dynamic properties. This code finds a user with ID 1 and accesses their related phone record using the relationship method as a property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$phone = User::find(1)->phone;\n```\n\n----------------------------------------\n\nTITLE: UserProvider Contract Interface in Laravel\nDESCRIPTION: This snippet defines the UserProvider contract interface in Laravel, which is responsible for fetching user data from a persistent storage system.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Illuminate\\Contracts\\Auth;\n\ninterface UserProvider\n{\n    public function retrieveById($identifier);\n    public function retrieveByToken($identifier, $token);\n    public function updateRememberToken(Authenticatable $user, $token);\n    public function retrieveByCredentials(array $credentials);\n    public function validateCredentials(Authenticatable $user, array $credentials);\n    public function rehashPasswordIfRequired(Authenticatable $user, array $credentials, bool $force = false);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Chain Failures\nDESCRIPTION: Implementation of error handling for job chain failures.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nBus::chain([\n    new ProcessPodcast,\n    new OptimizePodcast,\n    new ReleasePodcast,\n])->catch(function (Throwable $e) {\n    // A job within the chain has failed...\n})->dispatch();\n```\n\n----------------------------------------\n\nTITLE: Filtering Array First Element with Default Value - PHP\nDESCRIPTION: This snippet shows how to use `Arr::first()` with a default value. If the array is empty or no element matches the criteria, the default value is returned.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$first = Arr::first($array, $callback, $default);\n```\n\n----------------------------------------\n\nTITLE: Disabling Prorations When Changing Plans in Laravel Paddle\nDESCRIPTION: Method to update a subscription without prorating the charges when swapping between plans. This prevents partial charges or credits for the remaining time on the billing cycle.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->noProrate()->swap($premium = 'pri_456');\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Queue with Blocking Wait in Laravel\nDESCRIPTION: Demonstrates how to configure a Redis queue connection with a blocking wait time for improved efficiency in polling for new jobs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n'redis' => [\n    'driver' => 'redis',\n    'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),\n    'queue' => env('REDIS_QUEUE', 'default'),\n    'retry_after' => env('REDIS_QUEUE_RETRY_AFTER', 90),\n    'block_for' => 5,\n    'after_commit' => false,\n],\n```\n\n----------------------------------------\n\nTITLE: Setting up Precognition Route with Form Request in PHP\nDESCRIPTION: Add the HandlePrecognitiveRequests middleware to a route that uses form request validation to enable precognitive validation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Requests\\CreateUserRequest;\nuse Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests;\n\nRoute::post('/users', function (CreateUserRequest $request) {\n    // ...\n})->middleware([HandlePrecognitiveRequests::class]);\n```\n\n----------------------------------------\n\nTITLE: Custom Storage Disk Attachment\nDESCRIPTION: Shows how to attach a file from a specific storage disk with custom name and MIME type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\npublic function attachments(): array\n{\n    return [\n        Attachment::fromStorageDisk('s3', '/path/to/file')\n            ->as('name.pdf')\n            ->withMime('application/pdf'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Component Data Passing\nDESCRIPTION: Examples of passing data to components and handling it in the component class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_32\n\nLANGUAGE: blade\nCODE:\n```\n<x-alert type=\"error\" :message=\"$message\"/>\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    public string $type,\n    public string $message,\n) {}\n```\n\nLANGUAGE: blade\nCODE:\n```\n<div class=\"alert alert-{{ $type }}\">\n    {{ $message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Loop Structures in Blade Templates\nDESCRIPTION: Examples of various loop structures including for, foreach, forelse, and while loops\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n@for ($i = 0; $i < 10; $i++)\n    The current value is {{ $i }}\n@endfor\n\n@foreach ($users as $user)\n    <p>This is user {{ $user->id }}</p>\n@endforeach\n\n@forelse ($users as $user)\n    <li>{{ $user->name }}</li>\n@empty\n    <p>No users</p>\n@endforelse\n\n@while (true)\n    <p>I'm looping forever.</p>\n@endwhile\n```\n\n----------------------------------------\n\nTITLE: Configuring Swoole Tables in Laravel Octane\nDESCRIPTION: Example configuration for Swoole tables in Laravel Octane's configuration file. Tables provide extreme performance for data that needs to be shared between workers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n'tables' => [\n    'example:1000' => [\n        'name' => 'string:1000',\n        'votes' => 'int',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Subscriptions with Redis in Laravel\nDESCRIPTION: Shows how to use the psubscribe method to subscribe to wildcard channels in Redis, allowing for more flexible message handling across multiple channels.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nRedis::psubscribe(['*'], function (string $message, string $channel) {\n    echo $message;\n});\n\nRedis::psubscribe(['users.*'], function (string $message, string $channel) {\n    echo $message;\n});\n```\n\n----------------------------------------\n\nTITLE: Testing View Rendering in Laravel\nDESCRIPTION: Shows how to test view rendering without making HTTP requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$view = $this->view('welcome', ['name' => 'Taylor']);\n\n$view->assertSee('Taylor');\n```\n\n----------------------------------------\n\nTITLE: Including Paddle JavaScript in Blade Layout\nDESCRIPTION: Blade directive to include Paddle's JavaScript library in the application layout's head section.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<head>\n    ...\n\n    @paddleJS\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating Interval-Based Caches in Laravel Octane\nDESCRIPTION: Example of creating an interval-based cache in Octane that automatically refreshes at a specified interval. This cache generates a random string every 5 seconds.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nCache::store('octane')->interval('random', function () {\n    return Str::random(10);\n}, seconds: 5);\n```\n\n----------------------------------------\n\nTITLE: Setting Key-Value Pairs in Laravel Collection in PHP\nDESCRIPTION: Demonstrates the use of `put` to set or overwrite a key-value pair in a Laravel Collection. The method accepts a key and a value, modifying the existing collection accordingly. Requires an associative collection as input and outputs a collection with updated values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_95\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['product_id' => 1, 'name' => 'Desk']);\n\n$collection->put('price', 100);\n\n$collection->all();\n\n// ['product_id' => 1, 'name' => 'Desk', 'price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Expiration in Laravel Sanctum\nDESCRIPTION: Setting the expiration time for Sanctum API tokens using the configuration file. This defines how many minutes until an issued token is considered expired.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'expiration' => 525600,\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Validation Rule in Laravel\nDESCRIPTION: This snippet shows how to create a custom validation rule object that checks if a string is uppercase, including the validate method implementation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_89\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Rules;\n\nuse Closure;\nuse Illuminate\\Contracts\\Validation\\ValidationRule;\n\nclass Uppercase implements ValidationRule\n{\n    /**\n     * Run the validation rule.\n     */\n    public function validate(string $attribute, mixed $value, Closure $fail): void\n    {\n        if (strtoupper($value) !== $value) {\n            $fail('The :attribute must be uppercase.');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Refunding Specific Line Items in Paddle Transactions\nDESCRIPTION: Example of refunding specific line items in a Paddle transaction with Laravel Cashier. This code shows how to fully refund one item and partially refund another item in the same transaction.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_76\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$transaction = $user->transactions()->first();\n\n$response = $transaction->refund('Accidental charge', [\n    'pri_123', // Fully refund this price...\n    'pri_456' => 200, // Only partially refund this price...\n]);\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Scope in Feature Definitions in PHP\nDESCRIPTION: Illustrates how to handle potentially null scopes in feature definitions, which is important for contexts like Artisan commands or unauthenticated routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Support\\Lottery;\nuse Laravel\\Pennant\\Feature;\n\nFeature::define('new-api', fn (User|null $user) => match (true) {\n    $user === null => true,\n    $user->isInternalTeamMember() => true,\n    $user->isHighTrafficCustomer() => false,\n    default => Lottery::odds(1 / 100),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Route\nDESCRIPTION: PHP code snippet showing how to configure the health check route URI in Laravel's bootstrap/app file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n->withRouting(\n    web: __DIR__.'/../routes/web.php',\n    commands: __DIR__.'/../routes/console.php',\n    health: '/status',\n)\n```\n\n----------------------------------------\n\nTITLE: Using Closures for Default Cache Values in Laravel\nDESCRIPTION: Using a closure as a default value provider when retrieving items from the cache, allowing lazy loading from a database when the item doesn't exist in cache.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::get('key', function () {\n    return DB::table(/* ... */)->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Transactions with Laravel Cashier\nDESCRIPTION: Shows how to retrieve a user's transaction history using the transactions property on a billable model. This provides access to all completed payment transactions for the user.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_79\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$transactions = $user->transactions;\n```\n\n----------------------------------------\n\nTITLE: Enabling Console Events in Laravel Tests (Pest and PHPUnit)\nDESCRIPTION: Demonstrates how to enable CommandStarting and CommandFinished events while running tests by using the WithConsoleEvents trait.\nSOURCE: https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Foundation\\Testing\\WithConsoleEvents;\n\nuses(WithConsoleEvents::class);\n\n// ...\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\WithConsoleEvents;\nuse Tests\\TestCase;\n\nclass ConsoleEventTest extends TestCase\n{\n    use WithConsoleEvents;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Specific Laravel Environment File\nDESCRIPTION: Decrypt a specific encrypted environment file by providing the environment name using the --env option.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan env:decrypt --env=staging\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Prompts via Composer\nDESCRIPTION: Command to install Laravel Prompts package using Composer package manager.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/prompts\n```\n\n----------------------------------------\n\nTITLE: Recommended Approaches for Request Handling in Laravel Service Providers\nDESCRIPTION: Various solutions to fix request injection issues, including using non-singleton bindings, injecting a request resolver closure, or passing specific request data at runtime instead of injecting the entire request object.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->bind(Service::class, function (Application $app) {\n    return new Service($app['request']);\n});\n\n$this->app->singleton(Service::class, function (Application $app) {\n    return new Service(fn () => $app['request']);\n});\n\n// Or...\n\n$service->method($request->input('name'));\n```\n\n----------------------------------------\n\nTITLE: On-Demand Channel Configuration\nDESCRIPTION: Creating and using on-demand logging channels with runtime configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Log;\n\nLog::build([\n  'driver' => 'single',\n  'path' => storage_path('logs/custom.log'),\n])->info('Something happened!');\n\n$channel = Log::build([\n  'driver' => 'single',\n  'path' => storage_path('logs/custom.log'),\n]);\n\nLog::stack(['slack', $channel])->info('Something happened!');\n```\n\n----------------------------------------\n\nTITLE: Scheduling Shell Commands in Laravel\nDESCRIPTION: Shows how to schedule system shell commands using the exec method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::exec('node /home/forge/script.js')->daily();\n```\n\n----------------------------------------\n\nTITLE: Handling Charge Exceptions in Laravel Cashier\nDESCRIPTION: This code shows how to handle exceptions when making a charge, returning a Laravel\\Cashier\\Payment instance on success.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_103\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $payment = $user->charge(100, $paymentMethod);\n} catch (Exception $e) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Collection Engine in Laravel Scout\nDESCRIPTION: Shows how to set up the collection engine for Laravel Scout by modifying the SCOUT_DRIVER environment variable.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nSCOUT_DRIVER=collection\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Eager Loading with withOnly() Method\nDESCRIPTION: This code shows how to override all default eager loading relationships and specify a different relationship to load using the withOnly() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_85\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::withOnly('genre')->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Visible Attributes in Model\nDESCRIPTION: Shows how to specify which attributes should be visible in the serialized output\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * The attributes that should be visible in arrays.\n     *\n     * @var array\n     */\n    protected $visible = ['first_name', 'last_name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Custom Attributes to JSON\nDESCRIPTION: Shows how to append custom attributes to the model's serialized output\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * The accessors to append to the model's array form.\n     *\n     * @var array\n     */\n    protected $appends = ['is_admin'];\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Variable Data in Blade Template\nDESCRIPTION: Shows how to output variable data in a Blade template using the double curly brace syntax, which automatically escapes output to prevent XSS attacks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\nHello, {{ $name }}.\n```\n\n----------------------------------------\n\nTITLE: Pruning Failed Jobs with Custom Time Window\nDESCRIPTION: Command to prune failed jobs with a custom time window, specifically keeping only failed jobs from the last N hours (48 in this example).\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_98\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:prune-failed --hours=48\n```\n\n----------------------------------------\n\nTITLE: Atomic Lock Management\nDESCRIPTION: Shows how to create and manage atomic locks for distributed lock operations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Cache;\n\n$lock = Cache::lock('foo', 10);\n\nif ($lock->get()) {\n    // Lock acquired for 10 seconds...\n\n    $lock->release();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Any Key Existence - PHP\nDESCRIPTION: The `hasAny` method checks if any of the given keys exist in the collection.  It returns `true` if at least one key is present; otherwise, it returns `false`.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['account_id' => 1, 'product' => 'Desk', 'amount' => 5]);\n\n$collection->hasAny(['product', 'price']);\n\n// true\n\n$collection->hasAny(['name', 'price']);\n\n// false\n\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Blade View in Route Definition\nDESCRIPTION: Shows how to define a route that returns a view with data passed to it, demonstrating the basic pattern for providing data to templates.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function () {\n    return view('welcome', ['name' => 'Samantha']);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Personal Access Client in Laravel .env File\nDESCRIPTION: This snippet shows how to add the personal access client ID and secret to the Laravel .env file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\nPASSPORT_PERSONAL_ACCESS_CLIENT_ID=\"client-id-value\"\nPASSPORT_PERSONAL_ACCESS_CLIENT_SECRET=\"unhashed-client-secret-value\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Before and After Task Hooks in Laravel Scheduler\nDESCRIPTION: Demonstrates how to execute code before and after a scheduled task using the before() and after() methods. These hooks allow for setup and cleanup operations around task execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('emails:send')\n    ->daily()\n    ->before(function () {\n        // The task is about to execute...\n    })\n    ->after(function () {\n        // The task has executed...\n    });\n```\n\n----------------------------------------\n\nTITLE: Basic Selector Waiting in Laravel Dusk\nDESCRIPTION: Examples of using waitFor method to pause test execution until elements are visible, with customizable timeout thresholds.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n// Wait a maximum of five seconds for the selector...\n$browser->waitFor('.selector');\n\n// Wait a maximum of one second for the selector...\n$browser->waitFor('.selector', 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Lifetimes\nDESCRIPTION: Setting custom expiration times for different types of tokens in the AppServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Passport::tokensExpireIn(now()->addDays(15));\n    Passport::refreshTokensExpireIn(now()->addDays(30));\n    Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence in Arrays with Arr::exists (PHP)\nDESCRIPTION: This PHP snippet demonstrates checking if a specific key exists in an array using the Arr::exists helper. The method returns a boolean, and is useful for validations and conditional logic. Requires Illuminate\\Support\\Arr namespace and takes two arguments: the array and the key to check. Outputs true if the key exists, false otherwise.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['name' => 'John Doe', 'age' => 17];\n\n$exists = Arr::exists($array, 'name');\n// true\n\n$exists = Arr::exists($array, 'salary');\n// false\n```\n\n----------------------------------------\n\nTITLE: Checking if Password Needs Rehashing in Laravel\nDESCRIPTION: Using the Hash facade's needsRehash method to determine if a password should be rehashed due to changes in the work factor or hashing algorithm. This helps keep password security up to date.\nSOURCE: https://github.com/laravel/docs/blob/12.x/hashing.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif (Hash::needsRehash($hashed)) {\n    $hashed = Hash::make('plain-text');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating On-Demand Storage Disk\nDESCRIPTION: Runtime creation of a storage disk with custom configuration\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Storage;\n\n$disk = Storage::build([\n    'driver' => 'local',\n    'root' => '/path/to/root',\n]);\n\n$disk->put('image.jpg', $content);\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Request Body\nDESCRIPTION: Demonstrates how to send a raw request body with a specified content type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::withBody(\n    base64_encode($photo), 'image/jpeg'\n)->post('http://example.com/photo');\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Cashier Paddle with Composer\nDESCRIPTION: Command to install the Laravel Cashier Paddle package using Composer package manager.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/cashier-paddle\n```\n\n----------------------------------------\n\nTITLE: Excluding Tables from Truncation in Laravel Dusk Tests\nDESCRIPTION: Shows how to exclude specific tables from being truncated by defining an $exceptTables property in the test class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Indicates which tables should be excluded from truncation.\n *\n * @var array\n */\nprotected $exceptTables = ['users'];\n```\n\n----------------------------------------\n\nTITLE: Preventing Task Overlap in Laravel Scheduler\nDESCRIPTION: Demonstrates how to prevent scheduled tasks from running simultaneously using withoutOverlapping method. Sets lock expiration time and utilizes cache for lock management.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('emails:send')->withoutOverlapping();\n```\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')->withoutOverlapping(10);\n```\n\n----------------------------------------\n\nTITLE: Running Concurrent Tasks with Laravel's Concurrency Facade\nDESCRIPTION: Example of using the Concurrency facade's run method to execute multiple database queries concurrently in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/concurrency.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Concurrency;\nuse Illuminate\\Support\\Facades\\DB;\n\n[$userCount, $orderCount] = Concurrency::run([\n    fn () => DB::table('users')->count(),\n    fn () => DB::table('orders')->count(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Mocking UUIDs for Testing in Laravel\nDESCRIPTION: The createUuidsUsing method allows mocking UUID generation for testing purposes, ensuring predictable identifiers during tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_65\n\nLANGUAGE: php\nCODE:\n```\nuse Ramsey\\Uuid\\Uuid;\n\nStr::createUuidsUsing(function () {\n    return Uuid::fromString('eadbfeac-5258-45c2-bab7-ccb9b5ef74f9');\n});\n```\n\n----------------------------------------\n\nTITLE: Number: Percentage Formatting in PHP\nDESCRIPTION: This snippet formats numeric values into percentage strings with control over decimal precision and locale-specific formatting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_65\n\nLANGUAGE: PHP\nCODE:\n```\n$percentage = Number::percentage(10);\n// 10%\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$percentage = Number::percentage(10, precision: 2);\n// 10.00%\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$percentage = Number::percentage(10.123, maxPrecision: 2);\n// 10.12%\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$percentage = Number::percentage(10, precision: 2, locale: 'de');\n// 10,00%\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Double Encoding in Blade\nDESCRIPTION: Code for the AppServiceProvider that disables Blade's double encoding of HTML entities, useful when you want single encoding behavior.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Blade;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Blade::withoutDoubleEncoding();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Fluent Keyboard Interactions in Laravel Dusk\nDESCRIPTION: Shows how to use the withKeyboard() method for fluent keyboard interactions using the Laravel\\Dusk\\Keyboard class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Dusk\\Keyboard;\n\n$browser->withKeyboard(function (Keyboard $keyboard) {\n    $keyboard->press('c')\n        ->pause(1000)\n        ->release('c')\n        ->type(['c', 'e', 'o']);\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring Cumulative Query Time in Laravel PHP\nDESCRIPTION: Demonstrates how to monitor and respond to excessive cumulative query time during a request using the whenQueryingForLongerThan method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Database\\Connection;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Database\\Events\\QueryExecuted;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        // ...\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        DB::whenQueryingForLongerThan(500, function (Connection $connection, QueryExecuted $event) {\n            // Notify development team...\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Context Stacks in Laravel (PHP)\nDESCRIPTION: This snippet shows how to work with context stacks in Laravel. It demonstrates pushing items onto a stack, retrieving stack contents, and checking for the existence of items in a stack.\nSOURCE: https://github.com/laravel/docs/blob/12.x/context.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Context;\n\nContext::push('breadcrumbs', 'first_value');\n\nContext::push('breadcrumbs', 'second_value', 'third_value');\n\nContext::get('breadcrumbs');\n\nif (Context::stackContains('breadcrumbs', 'first_value')) {\n    //\n}\n\nreturn Context::stackContains('breadcrumbs', function ($value) {\n    return Str::startsWith($value, 'query_');\n});\n\nContext::pop('breadcrumbs');\n```\n\n----------------------------------------\n\nTITLE: Custom Monolog Formatter\nDESCRIPTION: Implementation of a custom Monolog formatter using tap configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Logging;\n\nuse Illuminate\\Log\\Logger;\nuse Monolog\\Formatter\\LineFormatter;\n\nclass CustomizeFormatter\n{\n    /**\n     * Customize the given logger instance.\n     */\n    public function __invoke(Logger $logger): void\n    {\n        foreach ($logger->getHandlers() as $handler) {\n            $handler->setFormatter(new LineFormatter(\n                '[%datetime%] %channel%.%level_name%: %message% %context% %extra%'\n            ));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with React Plugin\nDESCRIPTION: Configuration for using React with Vite in Laravel\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n    plugins: [\n        laravel(['resources/js/app.jsx']),\n        react(),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Sail Configuration Files\nDESCRIPTION: Shell command to publish Sail's Dockerfiles and configuration files to a docker directory in the application root for customization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nsail artisan sail:publish\n```\n\n----------------------------------------\n\nTITLE: Registering Nested Singleton Resource in Laravel\nDESCRIPTION: Shows how to register a singleton resource nested within a standard resource, such as a thumbnail for photos.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nRoute::singleton('photos.thumbnail', ThumbnailController::class);\n```\n\n----------------------------------------\n\nTITLE: Asserting Link Presence in PHP with Laravel Dusk\nDESCRIPTION: Assert that a given link is present or not present on the page using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertSeeLink($linkText);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertDontSeeLink($linkText);\n```\n\n----------------------------------------\n\nTITLE: Expiring Cookies in Laravel Responses\nDESCRIPTION: Shows how to remove a cookie by expiring it using the withoutCookie method on the response or the Cookie facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn response('Hello World')->withoutCookie('name');\n```\n\nLANGUAGE: php\nCODE:\n```\nCookie::expire('name');\n```\n\n----------------------------------------\n\nTITLE: Using Value Object Cast\nDESCRIPTION: This code snippet shows how value objects, cast using a custom caster, are automatically synced back to the model before the model is saved.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$user->address->lineOne = 'Updated Address Value';\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Manually Checking and Incrementing Rate Limit Attempts in Laravel\nDESCRIPTION: This example demonstrates how to manually check if too many attempts have been made and how to increment the attempt count using the RateLimiter facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\nif (RateLimiter::tooManyAttempts('send-message:'.$user->id, $perMinute = 5)) {\n    return 'Too many attempts!';\n}\n\nRateLimiter::increment('send-message:'.$user->id);\n\n// Send message...\n```\n\n----------------------------------------\n\nTITLE: Extending Cashier Subscription Model in PHP\nDESCRIPTION: Example of extending the Cashier Subscription model to create a custom Subscription model. This allows for additional customization and functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Cashier\\Subscription as CashierSubscription;\n\nclass Subscription extends CashierSubscription\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Multiple Actions at Once\nDESCRIPTION: Shows how to check if a user is authorized to perform any or none of multiple actions using the any and none methods on the Gate facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif (Gate::any(['update-post', 'delete-post'], $post)) {\n    // The user can update or delete the post...\n}\n\nif (Gate::none(['update-post', 'delete-post'], $post)) {\n    // The user can't update or delete the post...\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Scout Configuration Files\nDESCRIPTION: Artisan command to publish the Scout configuration file to your application's config directory. This creates the scout.php configuration file which is essential for configuring Scout.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --provider=\"Laravel\\Scout\\ScoutServiceProvider\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Broadcasting Routes with Sanctum\nDESCRIPTION: Configuration setup for private/presence broadcast channels using Laravel's application bootstrap file. Specifies routing and broadcasting middleware for authentication.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nreturn Application::configure(basePath: dirname(__DIR__))\n    ->withRouting(\n        web: __DIR__.'/../routes/web.php',\n        // ...\n    )\n    ->withBroadcasting(\n        __DIR__.'/../routes/channels.php',\n        ['prefix' => 'api', 'middleware' => ['api', 'auth:sanctum']],\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Environment Variables in Laravel\nDESCRIPTION: Example of environment variables needed to configure the AWS S3 storage driver in Laravel, matching the naming convention used by the AWS CLI.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nAWS_ACCESS_KEY_ID=<your-key-id>\nAWS_SECRET_ACCESS_KEY=<your-secret-access-key>\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=<your-bucket-name>\nAWS_USE_PATH_STYLE_ENDPOINT=false\n```\n\n----------------------------------------\n\nTITLE: Setup Block with PHP Code\nDESCRIPTION: Example of using setup directive to execute PHP code before tasks\nSOURCE: https://github.com/laravel/docs/blob/12.x/envoy.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n@setup\n    $now = new DateTime;\n@endsetup\n```\n\n----------------------------------------\n\nTITLE: Conditionally Modifying an Empty String in Laravel\nDESCRIPTION: The whenEmpty method invokes the given closure if the string is empty. If the closure returns a value, that value will be returned by the whenEmpty method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_159\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('  ')->trim()->whenEmpty(function (Stringable $string) {\n    return $string->prepend('Laravel');\n});\n\n// 'Laravel'\n```\n\n----------------------------------------\n\nTITLE: Customizing Tables to Truncate in Laravel Dusk Tests\nDESCRIPTION: Demonstrates how to customize which database tables should be truncated by defining a $tablesToTruncate property in the test class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Indicates which tables should be truncated.\n *\n * @var array\n */\nprotected $tablesToTruncate = ['users'];\n```\n\n----------------------------------------\n\nTITLE: Testing a String Against a Regular Expression in Laravel\nDESCRIPTION: The test method determines if a string matches the given regular expression pattern. It returns a boolean value indicating whether the pattern matches or not.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_144\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('Laravel Framework')->test('/Laravel/');\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Running Reverb Server with Custom Host and Port\nDESCRIPTION: Artisan command to start the Reverb server with custom host and port configurations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan reverb:start --host=127.0.0.1 --port=9000\n```\n\n----------------------------------------\n\nTITLE: Registering API Singleton Resource in Laravel\nDESCRIPTION: Demonstrates how to register an API singleton resource without create and edit routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nRoute::apiSingleton('profile', ProfileController::class);\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Data with $data Parameter in Render Closure\nDESCRIPTION: Demonstrates how to access component metadata through the $data parameter in the render closure, providing information about the component name, attributes, and slot.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nreturn function (array $data) {\n    // $data['componentName'];\n    // $data['attributes'];\n    // $data['slot'];\n\n    return '<div {{ $attributes }}>Components content</div>';\n}\n```\n\n----------------------------------------\n\nTITLE: Converting a String to Title Case in Laravel\nDESCRIPTION: The title method converts the given string to Title Case, where the first character of each word is capitalized.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_145\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$converted = Str::of('a nice title uses the correct case')->title();\n\n// A Nice Title Uses The Correct Case\n```\n\n----------------------------------------\n\nTITLE: Querying BelongsTo Relationships in Laravel\nDESCRIPTION: Shows different methods for querying belongs to relationships including manual where clauses and whereBelongsTo\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\n$posts = Post::where('user_id', $user->id)->get();\n\n$posts = Post::whereBelongsTo($user)->get();\n\n$users = User::where('vip', true)->get();\n\n$posts = Post::whereBelongsTo($users)->get();\n\n$posts = Post::whereBelongsTo($user, 'author')->get();\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Passport via Artisan\nDESCRIPTION: Command to install Laravel Passport package and set up necessary database migrations and encryption keys.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan install:api --passport\n```\n\n----------------------------------------\n\nTITLE: Creating Event Listener for Notification Sent in Laravel\nDESCRIPTION: Demonstrates how to create an event listener for the NotificationSent event in Laravel. This event is dispatched when a notification is sent and provides access to the notification details.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Notifications\\Events\\NotificationSent;\n\nclass LogNotification\n{\n    /**\n     * Handle the given event.\n     */\n    public function handle(NotificationSent $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Prompts Fallback Conditions\nDESCRIPTION: Code demonstrating how to set custom fallback conditions for Laravel Prompts using the fallbackWhen static method. This allows controlling when fallback behavior is triggered based on runtime conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Prompts\\Prompt;\n\nPrompt::fallbackWhen(\n    ! $input->isInteractive() || windows_os() || app()->runningUnitTests()\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Pulse Dashboard Authorization in Laravel\nDESCRIPTION: PHP code to define the authorization gate for accessing the Pulse dashboard in a Laravel application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Gate;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Gate::define('viewPulse', function (User $user) {\n        return $user->isAdmin();\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Throttling Configuration in Laravel\nDESCRIPTION: Shows how to implement exception throttling using Lottery and Limit instances for different exception types.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Exceptions\\ApiMonitoringException;\nuse Illuminate\\Broadcasting\\BroadcastException;\nuse Illuminate\\Cache\\RateLimiting\\Limit;\nuse Illuminate\\Support\\Lottery;\nuse Throwable;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->throttle(function (Throwable $e) {\n        return match (true) {\n            $e instanceof BroadcastException => Limit::perMinute(300),\n            $e instanceof ApiMonitoringException => Lottery::odds(1, 1000),\n            default => Limit::none(),\n        };\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Invoice-Based Subscription in Laravel Cashier\nDESCRIPTION: Shows how to create a subscription that collects payments via invoice emails instead of automatic charges using the createAndSendInvoice method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$user->newSubscription('default', 'price_monthly')->createAndSendInvoice();\n```\n\n----------------------------------------\n\nTITLE: Custom Artisan Command Structure\nDESCRIPTION: Example implementation of a custom Artisan command class with dependency injection\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Console\\Commands;\n\nuse App\\Models\\User;\nuse App\\Support\\DripEmailer;\nuse Illuminate\\Console\\Command;\n\nclass SendEmails extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'mail:send {user}';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Send a marketing email to a user';\n\n    /**\n     * Execute the console command.\n     */\n    public function handle(DripEmailer $drip): void\n    {\n        $drip->send(User::find($this->argument('user')));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Faking All Events Except Specified Ones in Laravel\nDESCRIPTION: This snippet demonstrates how to fake all events except for a specified set of events in Laravel testing. It uses the except method to exclude certain events from being faked.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nEvent::fake()->except([\n    OrderCreated::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Local MongoDB Environment Configuration\nDESCRIPTION: Environment variables configuration for local MongoDB connection settings\nSOURCE: https://github.com/laravel/docs/blob/12.x/mongodb.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nMONGODB_URI=\"mongodb://localhost:27017\"\nMONGODB_DATABASE=\"laravel_app\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Hashing Configuration with Artisan\nDESCRIPTION: Command to publish Laravel's hashing configuration file using the Artisan config:publish command. This allows customization of all hashing driver options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/hashing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan config:publish hashing\n```\n\n----------------------------------------\n\nTITLE: Testing Subset of Queue Jobs with PHPUnit\nDESCRIPTION: Shows how to fake only specific jobs while allowing others to execute normally using PHPUnit syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_111\n\nLANGUAGE: php\nCODE:\n```\npublic function test_orders_can_be_shipped(): void\n{\n    Queue::fake([\n        ShipOrder::class,\n    ]);\n\n    // Perform order shipping...\n\n    // Assert a job was pushed twice...\n    Queue::assertPushed(ShipOrder::class, 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Casted Attribute in Laravel\nDESCRIPTION: Example showing how to use a model attribute that has been cast to a boolean in a conditional statement.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$user = App\\Models\\User::find(1);\n\nif ($user->is_admin) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Defining Laravel's Default Middleware Groups\nDESCRIPTION: This code example shows how to manually define and customize Laravel's default 'web' and 'api' middleware groups using the withMiddleware method in the bootstrap/app.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->group('web', [\n        \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n        \\Illuminate\\Session\\Middleware\\StartSession::class,\n        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\ValidateCsrfToken::class,\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        // \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n    ]);\n\n    $middleware->group('api', [\n        // \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n        // 'throttle:api',\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Anonymous Component Paths\nDESCRIPTION: Shows how to register additional paths for anonymous components in a service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_83\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Blade::anonymousComponentPath(__DIR__.'/../components');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSP Nonce Middleware in Laravel\nDESCRIPTION: Creates a middleware class to handle Content Security Policy headers and nonce generation for script and style tags.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Vite;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AddContentSecurityPolicyHeaders\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        Vite::useCspNonce();\n\n        return $next($request)->withHeaders([\n            'Content-Security-Policy' => \"script-src 'nonce-\".Vite::cspNonce().\"'\",\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Selenium Dependency to Laravel Service in docker-compose.yml\nDESCRIPTION: YAML configuration to ensure the Laravel service depends on Selenium, required for proper Dusk test execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndepends_on:\n    - mysql\n    - redis\n    - selenium\n```\n\n----------------------------------------\n\nTITLE: Installing PHP and Laravel on Linux\nDESCRIPTION: Command to install PHP, Composer, and Laravel installer on Linux systems using a remote installation script.\nSOURCE: https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://php.new/install/linux/8.4)\"\n```\n\n----------------------------------------\n\nTITLE: Checking for Any Attribute in Laravel Blade\nDESCRIPTION: Uses the hasAny method to check if any of the specified attributes are present in a component's attribute bag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_55\n\nLANGUAGE: blade\nCODE:\n```\n@if ($attributes->hasAny(['href', ':href', 'v-bind:href']))\n    <div>One of the attributes is present</div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Specifying Timezone Validation Rules in Laravel\nDESCRIPTION: Examples of using the 'timezone' validation rule with different parameters. These rules validate that a field contains a valid timezone identifier according to PHP's DateTimeZone::listIdentifiers method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n'timezone' => 'required|timezone:all';\n\n'timezone' => 'required|timezone:Africa';\n\n'timezone' => 'required|timezone:per_country,US';\n```\n\n----------------------------------------\n\nTITLE: Using Enum Attribute in Eloquent Model\nDESCRIPTION: This code snippet demonstrates how to use an enum attribute that has been defined using casting. It shows how to compare the enum value and assign a new enum value to the attribute.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nif ($server->status == ServerStatus::Provisioned) {\n    $server->status = ServerStatus::Ready;\n\n    $server->save();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Coupon Discount Type in Laravel Cashier\nDESCRIPTION: Shows how to determine if a coupon represents a percentage or fixed amount discount and access the discount value.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nif ($coupon->isPercentage()) {\n    return $coupon->percentOff().'%'; // 21.5%\n} else {\n    return $coupon->amountOff(); // $5.99\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Failures in Queueable Anonymous Event Listeners in Laravel\nDESCRIPTION: Example of adding error handling to queueable anonymous event listeners using the catch method. This allows custom logic to be executed when a listener fails during processing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Events\\PodcastProcessed;\nuse function Illuminate\\Events\\queueable;\nuse Illuminate\\Support\\Facades\\Event;\nuse Throwable;\n\nEvent::listen(queueable(function (PodcastProcessed $event) {\n    // ...\n})->catch(function (PodcastProcessed $event, Throwable $e) {\n    // The queued listener failed...\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating BOOLEAN Column in Laravel Migration\nDESCRIPTION: The boolean method creates a BOOLEAN equivalent column in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n$table->boolean('confirmed');\n```\n\n----------------------------------------\n\nTITLE: Assigning Middleware to Specific Routes in Laravel\nDESCRIPTION: Example of applying middleware to individual routes. This allows for route-specific filtering or processing of HTTP requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\EnsureTokenIsValid;\n\nRoute::get('/profile', function () {\n    // ...\n})->middleware(EnsureTokenIsValid::class);\n```\n\n----------------------------------------\n\nTITLE: Number: Generating Number Pairs in PHP\nDESCRIPTION: This snippet generates ranges as pairs of sub-ranges within a larger range, useful for pagination or batch processing, based on the specified range and step.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_64\n\nLANGUAGE: PHP\nCODE:\n```\n$result = Number::pairs(25, 10);\n// [[1, 10], [11, 20], [21, 25]]\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$result = Number::pairs(25, 10, offset: 0);\n// [[0, 10], [10, 20], [20, 25]]\n```\n\n----------------------------------------\n\nTITLE: Basic Multiselect Implementation in Laravel CLI\nDESCRIPTION: Basic usage of the multiselect function to allow users to select multiple permissions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\multiselect;\n\n$permissions = multiselect(\n    label: 'What permissions should be assigned?',\n    options: ['Read', 'Create', 'Update', 'Delete']\n);\n```\n\n----------------------------------------\n\nTITLE: Method Injection in Laravel Controller\nDESCRIPTION: Shows how to use method injection in a Laravel controller, injecting the Request instance and accessing route parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass UserController extends Controller\n{\n    /**\n     * Update the given user.\n     */\n    public function update(Request $request, string $id): RedirectResponse\n    {\n        // Update the user...\n\n        return redirect('/users');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Registered Event Listeners in Laravel\nDESCRIPTION: Artisan command to display all registered event listeners in the application. This is useful for debugging and understanding the event-listener relationships in your application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan event:list\n```\n\n----------------------------------------\n\nTITLE: Custom Path Configuration for Vite Refresh\nDESCRIPTION: Configuring custom file paths for Vite's auto-refresh functionality with advanced options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            // ...\n            refresh: [{\n                paths: ['path/to/watch/**'],\n                config: { delay: 300 }\n            }],\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Last Element with Default Value - PHP\nDESCRIPTION: This example demonstrates `Arr::last()` usage with a default value which will be returned if no array value passes the given callback condition.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$last = Arr::last($array, $callback, $default);\n```\n\n----------------------------------------\n\nTITLE: Multiple Paginator Instances in Laravel\nDESCRIPTION: This PHP code shows how to create multiple paginator instances on a single page by specifying a custom query string parameter name.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$users = User::where('votes', '>', 100)->paginate(\n    $perPage = 15, $columns = ['*'], $pageName = 'users'\n);\n```\n\n----------------------------------------\n\nTITLE: Including Custom Card CSS with Vite in Pulse Dashboard\nDESCRIPTION: Example of including a CSS file for a custom Pulse card using the @vite Blade directive in the dashboard view.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_28\n\nLANGUAGE: blade\nCODE:\n```\n<x-pulse>\n    @vite('resources/css/pulse/top-sellers.css')\n\n    ...\n</x-pulse>\n```\n\n----------------------------------------\n\nTITLE: Different Rate Limits for Authenticated vs Guest Users\nDESCRIPTION: This example demonstrates how to apply different rate limits based on authentication status. Authenticated users get 100 requests per minute (tracked by user ID) while guests are limited to 10 requests per minute (tracked by IP).\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nRateLimiter::for('uploads', function (Request $request) {\n    return $request->user()\n        ? Limit::perMinute(100)->by($request->user()->id)\n        : Limit::perMinute(10)->by($request->ip());\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Subscription Trial with Stripe Checkout in PHP\nDESCRIPTION: This snippet demonstrates how to set up a subscription with a trial period using Stripe Checkout and Laravel Cashier. Note that the trial period must be at least 48 hours for Stripe Checkout.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_114\n\nLANGUAGE: php\nCODE:\n```\n$checkout = Auth::user()->newSubscription('default', 'price_monthly')\n    ->trialDays(3)\n    ->checkout();\n```\n\n----------------------------------------\n\nTITLE: Conditional URL Pings with Custom Logic in Laravel Scheduler\nDESCRIPTION: Shows how to implement conditional URL pings with custom conditions using pingBeforeIf(), thenPingIf(), pingOnSuccessIf(), and pingOnFailureIf() methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')\n    ->daily()\n    ->pingBeforeIf($condition, $url)\n    ->thenPingIf($condition, $url);\n\nSchedule::command('emails:send')\n    ->daily()\n    ->pingOnSuccessIf($condition, $successUrl)\n    ->pingOnFailureIf($condition, $failureUrl);\n```\n\n----------------------------------------\n\nTITLE: Handling Paddle Webhook for Completed Transactions in Laravel\nDESCRIPTION: Example of a Laravel event listener that handles the TransactionCompleted event from Cashier to update an order status when a transaction is completed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Listeners;\n\nuse App\\Models\\Order;\nuse Laravel\\Paddle\\Cashier;\nuse Laravel\\Paddle\\Events\\TransactionCompleted;\n\nclass CompleteOrder\n{\n    /**\n     * Handle the incoming Cashier webhook event.\n     */\n    public function handle(TransactionCompleted $event): void\n    {\n        $orderId = $event->payload['data']['custom_data']['order_id'] ?? null;\n\n        $order = Order::findOrFail($orderId);\n\n        $order->update(['status' => 'completed']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Component Methods in PHP for View Logic\nDESCRIPTION: Shows how to define public methods in a component class that can be called from the component template, allowing for encapsulated logic.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Determine if the given option is the currently selected option.\n */\npublic function isSelected(string $option): bool\n{\n    return $option === $this->selected;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Local Key in HasOne Relationship in Laravel\nDESCRIPTION: Example of customizing both the foreign key and local key in a hasOne relationship. This allows the relationship to use a primary key value other than the default id column.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->hasOne(Phone::class, 'foreign_key', 'local_key');\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB PHP Extension\nDESCRIPTION: Command to install the required MongoDB PHP extension via PECL\nSOURCE: https://github.com/laravel/docs/blob/12.x/mongodb.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npecl install mongodb\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Str::is in PHP\nDESCRIPTION: Shows usage of Str::is method to determine if a string matches a given pattern. Demonstrates wildcard matching and case-insensitive option.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$matches = Str::is('foo*', 'foobar');\n\n// true\n\n$matches = Str::is('baz*', 'foobar');\n\n// false\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$matches = Str::is('*.jpg', 'photo.JPG', ignoreCase: true);\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Defining Shorthand Selectors in Laravel Dusk Pages\nDESCRIPTION: The `elements` method allows defining shortcuts for CSS selectors in a page class. This example defines a shorthand for an email input field that can be used in tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the element shortcuts for the page.\n *\n * @return array<string, string>\n */\npublic function elements(): array\n{\n    return [\n        '@email' => 'input[name=email]',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications Directory using Artisan Command\nDESCRIPTION: The Notifications directory is created when you execute the make:notification command. It contains transactional notifications that can be sent over various drivers like email, Slack, or SMS.\nSOURCE: https://github.com/laravel/docs/blob/12.x/structure.md#2025-04-21_snippet_3\n\nLANGUAGE: artisan\nCODE:\n```\nmake:notification\n```\n\n----------------------------------------\n\nTITLE: Checking if Input is Missing in Laravel\nDESCRIPTION: Determining if a specific input is absent from the request using the missing method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nif ($request->missing('name')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Task Group Configuration in Laravel\nDESCRIPTION: Shows how to group scheduled tasks with shared configuration using the group method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::daily()\n    ->onOneServer()\n    ->timezone('America/New_York')\n    ->group(function () {\n        Schedule::command('emails:send --force');\n        Schedule::command('emails:prune');\n    });\n```\n\n----------------------------------------\n\nTITLE: Compiling Assets with NPM\nDESCRIPTION: Command to compile application assets using NPM after configuring Laravel Echo.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription After Generic Trial in Laravel Cashier\nDESCRIPTION: Shows how to create an actual subscription for a user who was previously on a generic trial using the newSubscription method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_94\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->newSubscription('default', 'price_monthly')->create($paymentMethod);\n```\n\n----------------------------------------\n\nTITLE: Removing and Replacing Items with splice() in Laravel Collections - PHP\nDESCRIPTION: Demonstrates the use of the splice method to remove a slice of items from a collection starting at a given index. Optionally, you can limit the size of the slice and replace the removed items with new ones. Dependencies include Laravel's Collection class. The inputs are the starting index, optional length of items to remove, and optional replacement array. Outputs are the removed slice and the mutated original collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_122\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$chunk = $collection->splice(2);\n\n$chunk->all();\n\n// [3, 4, 5]\n\n$collection->all();\n\n// [1, 2]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$chunk = $collection->splice(2, 1);\n\n$chunk->all();\n\n// [3]\n\n$collection->all();\n\n// [1, 2, 4, 5]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$chunk = $collection->splice(2, 1, [10, 11]);\n\n$chunk->all();\n\n// [3]\n\n$collection->all();\n\n// [1, 2, 10, 11, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Creating a Metered Subscription with Stripe Checkout in Laravel Cashier\nDESCRIPTION: This code shows how to start a metered subscription using Stripe Checkout in Laravel Cashier. It creates a checkout session for the authenticated user with a metered price.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n$checkout = Auth::user()\n    ->newSubscription('default', [])\n    ->meteredPrice('price_metered')\n    ->checkout();\n\nreturn view('your-checkout-view', [\n    'checkout' => $checkout,\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Client Macros in Laravel\nDESCRIPTION: Demonstrates how to create a macro for the HTTP client to set up reusable request configurations. The example shows defining a 'github' macro in the AppServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Http::macro('github', function () {\n        return Http::withHeaders([\n            'X-Example' => 'example',\n        ])->baseUrl('https://github.com');\n    });\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::github()->get('/');\n```\n\n----------------------------------------\n\nTITLE: Extending Auth with Custom JWT Guard in Laravel\nDESCRIPTION: This snippet demonstrates how to add a custom JWT authentication guard using the Auth::extend method in a Laravel service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\Services\\Auth\\JwtGuard;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    // ...\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Auth::extend('jwt', function (Application $app, string $name, array $config) {\n            // Return an instance of Illuminate\\Contracts\\Auth\\Guard...\n\n            return new JwtGuard(Auth::createUserProvider($config['provider']));\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Records from Laravel Scout Search Index\nDESCRIPTION: Illustrates various methods to remove records from the Laravel Scout search index, including deleting models and using the unsearchable method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\n\n$order = Order::find(1);\n\n$order->delete();\n\nOrder::where('price', '>', 100)->unsearchable();\n\n$user->orders()->unsearchable();\n\n$orders->unsearchable();\n\nOrder::removeAllFromSearch();\n```\n\n----------------------------------------\n\nTITLE: Type-Inferred Binding in Laravel Container\nDESCRIPTION: Example of type-inferred binding where Laravel infers the type from the closure's return type. This simplifies the binding syntax by eliminating the need for a separate type argument.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nApp::bind(function (Application $app): Transistor {\n    return new Transistor($app->make(PodcastParser::class));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Timezones for Laravel Scheduled Tasks\nDESCRIPTION: These code examples demonstrate how to set timezones for individual tasks and globally for all scheduled tasks in the application configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('report:generate')\n    ->timezone('America/New_York')\n    ->at('2:00')\n```\n\nLANGUAGE: php\nCODE:\n```\n'timezone' => 'UTC',\n\n'schedule_timezone' => 'America/Chicago',\n```\n\n----------------------------------------\n\nTITLE: Repopulating Form with Old Data and Errors\nDESCRIPTION: Alpine.js form setup that pre-populates with old input data and server-side validation errors after a traditional form submission.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<form x-data=\"{\n    form: $form('post', '/register', {\n        name: '{{ old(\\'name\\') }}',\n        email: '{{ old(\\'email\\') }}',\n    }).setErrors({{ Js::from($errors->messages()) }}),\n}\">\n```\n\n----------------------------------------\n\nTITLE: Piping Collection to Closure with `pipe` in PHP\nDESCRIPTION: The `pipe` method passes the collection into a given closure and returns the result of that closure. This method allows you to chain operations on the collection. The example shows passing a collection to a closure that sums the collection's values and returns the sum.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_87\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([1, 2, 3]);\n\n$piped = $collection->pipe(function (Collection $collection) {\n    return $collection->sum();\n});\n\n// 6\n```\n\n----------------------------------------\n\nTITLE: Publishing Fortify Resources\nDESCRIPTION: Artisan command to publish Fortify's resources including actions, service provider, configuration file, and database migrations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan fortify:install\n```\n\n----------------------------------------\n\nTITLE: Getting Laravel Collection Keys (PHP)\nDESCRIPTION: Retrieves all the keys from the collection, returning them as a new, indexed collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n    'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n]);\n\n$keys = $collection->keys();\n\n$keys->all();\n\n// ['prod-100', 'prod-200']\n```\n\n----------------------------------------\n\nTITLE: Setting Default Scope for Pennant Features in PHP\nDESCRIPTION: Demonstrates how to customize the default scope Pennant uses to check features, typically done in a service provider. This example sets the default scope to the authenticated user's team.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\ServiceProvider;\nuse Laravel\\Pennant\\Feature;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Feature::resolveScopeUsing(fn ($driver) => Auth::user()?->team);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Model Exists in Collection\nDESCRIPTION: This snippet demonstrates the use of the `contains` method to check if a given model or primary key exists within the collection.  It checks if a model with the primary key 1 exists in the collection, and also checks for a given User model instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$users->contains(1);\n```\n\nLANGUAGE: php\nCODE:\n```\n$users->contains(User::find(1));\n```\n\n----------------------------------------\n\nTITLE: Writing Markdown Mail Notification Template\nDESCRIPTION: This Blade template demonstrates how to write a Markdown mail notification using Laravel's mail components. It includes a title, text content, and a button component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_25\n\nLANGUAGE: blade\nCODE:\n```\n<x-mail::message>\n# Invoice Paid\n\nYour invoice has been paid!\n\n<x-mail::button :url=\"$url\">\nView Invoice\n</x-mail::button>\n\nThanks,<br>\n{{ config('app.name') }}\n</x-mail::message>\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in Laravel\nDESCRIPTION: Use Artisan commands to run migrations, check migration status, or preview migration SQL.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate\n\nphp artisan migrate:status\n\nphp artisan migrate --pretend\n```\n\n----------------------------------------\n\nTITLE: Creating Personal Access Tokens in Laravel Passport\nDESCRIPTION: These PHP snippets demonstrate how to create personal access tokens with and without scopes using the User model in Laravel Passport.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n// Creating a token without scopes...\n$token = $user->createToken('Token Name')->accessToken;\n\n// Creating a token with scopes...\n$token = $user->createToken('My Token', ['place-orders'])->accessToken;\n```\n\n----------------------------------------\n\nTITLE: Using an Existing Axios Instance with Precognition\nDESCRIPTION: JavaScript setup to configure Precognition to use an existing Axios instance instead of creating its own.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport Axios from 'axios';\nimport { client } from 'laravel-precognition-vue';\n\nwindow.axios = Axios.create()\nwindow.axios.defaults.headers.common['Authorization'] = authToken;\n\nclient.use(window.axios)\n```\n\n----------------------------------------\n\nTITLE: Implementing the URL Method in Laravel Dusk Page Objects\nDESCRIPTION: The `url` method is used in Laravel Dusk page objects to define the path of the URL that represents the page. Dusk uses this URL when navigating to the page in the browser.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the URL for the page.\n */\npublic function url(): string\n{\n    return '/login';\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Laravel Queue Workers\nDESCRIPTION: Illustrates the command to gracefully restart all queue workers in Laravel. This is useful during deployment to ensure workers pick up code changes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_79\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Modifying Attribute Visibility at Runtime\nDESCRIPTION: Shows methods to temporarily modify attribute visibility during serialization\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn $user->makeVisible('attribute')->toArray();\n\nreturn $user->makeHidden('attribute')->toArray();\n\nreturn $user->setVisible(['id', 'name'])->toArray();\n\nreturn $user->setHidden(['email', 'password', 'remember_token'])->toArray();\n```\n\n----------------------------------------\n\nTITLE: Stopping Laravel Octane Server\nDESCRIPTION: Command to stop the running Laravel Octane server.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan octane:stop\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Aggregate Values\nDESCRIPTION: Demonstrates how to retrieve a total aggregate value for all records of a specific type using aggregateTotal method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$total = $this->aggregateTotal('user_sale', 'sum');\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Routing in bootstrap/app.php\nDESCRIPTION: Demonstrates the default routing configuration in Laravel's bootstrap/app.php file, including setting up web, console, and health check routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Foundation\\Application;\n\nreturn Application::configure(basePath: dirname(__DIR__))\n    ->withRouting(\n        web: __DIR__.'/../routes/web.php',\n        commands: __DIR__.'/../routes/console.php',\n        health: '/up',\n    )->create();\n```\n\n----------------------------------------\n\nTITLE: Creating Billing Portal Link in Blade\nDESCRIPTION: Adds a link in the view to redirect users to the billing management portal\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<a href=\"{{ route('billing') }}\">\n    Billing\n</a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Cache Stores in Laravel\nDESCRIPTION: Examples of accessing different cache stores through the store() method, allowing applications to use multiple cache backends simultaneously.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::store('file')->get('foo');\n\nCache::store('redis')->put('bar', 'baz', 600); // 10 Minutes\n```\n\n----------------------------------------\n\nTITLE: Publishing Cashier Configuration\nDESCRIPTION: Artisan command to publish Cashier's configuration file for customization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --tag=\"cashier-config\"\n```\n\n----------------------------------------\n\nTITLE: Checking if Multiple Inputs are Not Filled in Laravel\nDESCRIPTION: Determining if all specified inputs are missing or empty strings by passing an array to the isNotFilled method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nif ($request->isNotFilled(['name', 'email'])) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Chaperone Method with Eager Loading in PHP\nDESCRIPTION: This snippet shows how to use the chaperone method at runtime when eager loading a relationship to enable automatic parent hydration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\n$posts = Post::with([\n    'comments' => fn ($comments) => $comments->chaperone(),\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Restoring Normal ULID Generation in Laravel\nDESCRIPTION: The createUlidsNormally method restores normal ULID generation after it has been mocked, typically used in test teardown phases.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nStr::createUlidsNormally();\n```\n\n----------------------------------------\n\nTITLE: Using Str::afterLast for String Extraction in PHP\nDESCRIPTION: The Str::afterLast method returns everything after the last occurrence of the given value in a string. The entire string is returned if the value doesn't exist.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slice = Str::afterLast('App\\Http\\Controllers\\Controller', '\\\\');\n\n// 'Controller'\n```\n\n----------------------------------------\n\nTITLE: Implementing SMS Routing for Vonage in Laravel Model\nDESCRIPTION: Creates a User model class that implements SMS routing for Vonage notifications by defining the routeNotificationForVonage method to return the user's phone number.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Notifications\\Notification;\n\nclass User extends Authenticatable\n{\n    use Notifiable;\n\n    /**\n     * Route notifications for the Vonage channel.\n     */\n    public function routeNotificationForVonage(Notification $notification): string\n    {\n        return $this->phone_number;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Task Creation with Axios\nDESCRIPTION: Example of handling task creation with Axios and handling the response in JavaScript.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\naxios.post('/task', task)\n    .then((response) => {\n        this.tasks.push(response.data);\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Tax Rates for Multiple Products in Laravel Cashier\nDESCRIPTION: This snippet demonstrates how to implement the priceTaxRates method on a billable model to define different tax rates for multiple products in Laravel Cashier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_81\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The tax rates that should apply to the customer's subscriptions.\n *\n * @return array<string, array<int, string>>\n */\npublic function priceTaxRates(): array\n{\n    return [\n        'price_monthly' => ['txr_id'],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Channel Name in Laravel\nDESCRIPTION: Example configuration for customizing the stack channel name in Laravel's logging system. Demonstrates how to set a custom channel name and specify multiple channels for the stack.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'stack' => [\n    'driver' => 'stack',\n    'name' => 'channel-name',\n    'channels' => ['single', 'slack'],\n],\n```\n\n----------------------------------------\n\nTITLE: Handling File Input with Manual Error Clearing\nDESCRIPTION: This snippet shows how to manually clear validation errors when handling file inputs with Precognition.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<input\n    id=\"avatar\"\n    type=\"file\"\n    onChange={(e) => {\n        form.setData('avatar', e.target.value);\n\n        form.forgetError('avatar');\n    }}\n>\n```\n\n----------------------------------------\n\nTITLE: Getting Previous Item with before() in PHP\nDESCRIPTION: The `before` method retrieves the item immediately preceding a specified item or the first item matching a callback. It returns `null` if the target item is not found or is the first item in the collection. Strict comparison can be enabled.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$collection->before(3);\n\n// 2\n\n$collection->before(1);\n\n// null\n\ncollect([2, 4, 6, 8])->before('4', strict: true);\n\n// null\n\ncollect([2, 4, 6, 8])->before(function (int $item, int $key) {\n    return $item > 5;\n});\n\n// 4\n```\n\n----------------------------------------\n\nTITLE: Checking Input Presence in Laravel with has Method\nDESCRIPTION: Determining if a specific input value exists in the request using the has method, which returns a boolean.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nif ($request->has('name')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Subscription Type in PHP\nDESCRIPTION: Method to verify if a user is subscribed to a specific subscription type, useful for applications with multiple subscription offerings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscribed('default')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inertia Middleware Authorization Sharing\nDESCRIPTION: Implementation of sharing authorization data with Inertia.js frontend through Laravel middleware.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse App\\Models\\Post;\nuse Illuminate\\Http\\Request;\nuse Inertia\\Middleware;\n\nclass HandleInertiaRequests extends Middleware\n{\n    // ...\n\n    /**\n     * Define the props that are shared by default.\n     *\n     * @return array<string, mixed>\n     */\n    public function share(Request $request)\n    {\n        return [\n            ...parent::share($request),\n            'auth' => [\n                'user' => $request->user(),\n                'permissions' => [\n                    'post' => [\n                        'create' => $request->user()->can('create', Post::class),\n                    ],\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Class-Based Feature in Laravel Pennant\nDESCRIPTION: Example of a class-based feature implementation with a resolve method for determining feature availability.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Features;\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Lottery;\n\nclass NewApi\n{\n    /**\n     * Resolve the feature's initial value.\n     */\n    public function resolve(User $user): mixed\n    {\n        return match (true) {\n            $user->isInternalTeamMember() => true,\n            $user->isHighTrafficCustomer() => false,\n            default => Lottery::odds(1 / 100),\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Billable Trait to User Model\nDESCRIPTION: Implementation of the Billable trait in a User model to enable billing functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Paddle\\Billable;\n\nclass User extends Authenticatable\n{\n    use Billable;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Middleware with URL Patterns in Laravel Folio\nDESCRIPTION: Shows how to apply middleware to multiple pages using URL patterns with wildcards. Demonstrates configuration for admin routes with authentication and verification.\nSOURCE: https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Folio\\Folio;\n\nFolio::path(resource_path('views/pages'))->middleware([\n    'admin/*' => [\n        'auth',\n        'verified',\n\n        // ...\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Signal Handling in Artisan Commands\nDESCRIPTION: Shows how to handle operating system signals like SIGTERM in Artisan commands using the trap method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\npublic function handle(): void\n{\n    $this->trap(SIGTERM, fn () => $this->shouldKeepRunning = false);\n\n    while ($this->shouldKeepRunning) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to Specific Log Channels\nDESCRIPTION: Examples of writing log messages to specific channels and creating channel stacks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Log;\n\nLog::channel('slack')->info('Something happened!');\n\nLog::stack(['single', 'slack'])->info('Something happened!');\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Pail to Tail Logs\nDESCRIPTION: Demonstrates various commands to use Laravel Pail for tailing logs, including options for increasing verbosity.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan pail\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan pail -v\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan pail -vv\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Billable Model\nDESCRIPTION: Code for specifying a custom model to use with Cashier instead of the default User model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Cashier\\User;\nuse Laravel\\Cashier\\Cashier;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Cashier::useCustomerModel(User::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Attribute Values in Laravel Validation\nDESCRIPTION: Demonstrates how to customize field names in validation messages by passing custom attributes as the fourth argument to Validator::make method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make($input, $rules, $messages, [\n    'email' => 'email address',\n]);\n```\n\n----------------------------------------\n\nTITLE: Attaching Rate Limiter to Laravel Job\nDESCRIPTION: Demonstrates how to attach a predefined rate limiter to a job using the RateLimited middleware.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Queue\\Middleware\\RateLimited;\n\n/**\n * Get the middleware the job should pass through.\n *\n * @return array<int, object>\n */\npublic function middleware(): array\n{\n    return [new RateLimited('backups')];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UV Extension for Event Loop\nDESCRIPTION: Command to install the UV extension via PECL to handle more than 1,000 concurrent connections\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npecl install uv\n```\n\n----------------------------------------\n\nTITLE: Getting a Model's Broadcast Channel Name in Laravel\nDESCRIPTION: Demonstrates how to retrieve the broadcast channel name for a model instance using the broadcastChannel method, which returns a string based on the model's class name and ID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$user->broadcastChannel();\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage Report in Laravel\nDESCRIPTION: Executes tests while generating a code coverage report using Laravel's Artisan command-line tool. This requires Xdebug or PCOV to be installed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan test --coverage\n```\n\n----------------------------------------\n\nTITLE: Deleting Payment Methods by Type in Laravel Cashier\nDESCRIPTION: Shows how to delete payment methods of a specific type by passing the type as an argument to the deletePaymentMethods method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$user->deletePaymentMethods('sepa_debit');\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Tinker\nDESCRIPTION: Composer command to install Laravel Tinker REPL package\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/tinker\n```\n\n----------------------------------------\n\nTITLE: Manual Queue Interaction in Laravel Event Listeners\nDESCRIPTION: Demonstrates how to manually interact with queue jobs using the InteractsWithQueue trait.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Queue\\InteractsWithQueue;\n\nclass SendShipmentNotification implements ShouldQueue\n{\n    use InteractsWithQueue;\n\n    /**\n     * Handle the event.\n     */\n    public function handle(OrderShipped $event): void\n    {\n        if (true) {\n            $this->release(30);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-One Polymorphic Relationship in Laravel\nDESCRIPTION: This snippet demonstrates how to implement a one-to-one polymorphic relationship in Laravel. It shows the model structure for 'Image', 'Post', and 'User' models, where both 'Post' and 'User' can have an associated 'Image'.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\nclass Image extends Model\n{\n    /**\n     * Get the parent imageable model (user or post).\n     */\n    public function imageable(): MorphTo\n    {\n        return $this->morphTo();\n    }\n}\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphOne;\n\nclass Post extends Model\n{\n    /**\n     * Get the post's image.\n     */\n    public function image(): MorphOne\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n}\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphOne;\n\nclass User extends Model\n{\n    /**\n     * Get the user's image.\n     */\n    public function image(): MorphOne\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript Only in Blade\nDESCRIPTION: Example of loading only JavaScript assets when CSS is imported via JavaScript\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<head>\n    {{-- ... --}}\n\n    @vite('resources/js/app.js')\n</head>\n```\n\n----------------------------------------\n\nTITLE: Additional Quiet Operations on Models\nDESCRIPTION: Shows additional methods for performing model operations without triggering events.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_84\n\nLANGUAGE: php\nCODE:\n```\n$user->deleteQuietly();\n$user->forceDeleteQuietly();\n$user->restoreQuietly();\n```\n\n----------------------------------------\n\nTITLE: Creating Mail Directory using Artisan Command\nDESCRIPTION: The Mail directory is created when you execute the make:mail command. It contains classes representing emails sent by your application that can be sent using the Mail::send method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/structure.md#2025-04-21_snippet_2\n\nLANGUAGE: artisan\nCODE:\n```\nmake:mail\n```\n\n----------------------------------------\n\nTITLE: Conditionally Appending to Strings with whenIs in Laravel PHP\nDESCRIPTION: The whenIs method applies a transformation to a string if it matches a given pattern. It supports wildcard matching and uses a closure to perform the transformation on the Stringable instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_165\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('foo/bar')->whenIs('foo/*', function (Stringable $string) {\n    return $string->append('/baz');\n});\n\n// 'foo/bar/baz'\n```\n\n----------------------------------------\n\nTITLE: Disabling Submit Button During Processing\nDESCRIPTION: HTML button that uses Precognition's processing state to disable during form submission.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<button :disabled=\"form.processing\">\n    Submit\n</button>\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Content in Laravel Tests\nDESCRIPTION: This snippet shows how to assert that a response contains specific JSON data, with an option for strict matching, using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJson(array $data, $strict = false);\n```\n\n----------------------------------------\n\nTITLE: Forwarding Additional Ports in Laravel Homestead\nDESCRIPTION: This YAML configuration demonstrates how to forward additional ports from the host machine to the Vagrant box in Homestead. It includes examples for both TCP and UDP protocols.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n    - send: 50000\n      to: 5000\n    - send: 7777\n      to: 777\n      protocol: udp\n```\n\n----------------------------------------\n\nTITLE: Forcing Migrations in Production for Laravel\nDESCRIPTION: Use the --force flag to run migrations in production without confirmation prompts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate --force\n```\n\n----------------------------------------\n\nTITLE: PSR-11 Container Interface Usage\nDESCRIPTION: Shows how to use Laravel's container with PSR-11 container interface compliance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Transistor;\nuse Psr\\Container\\ContainerInterface;\n\nRoute::get('/', function (ContainerInterface $container) {\n    $service = $container->get(Transistor::class);\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Swapping Individual Products in Multi-Product Subscriptions in Laravel Cashier\nDESCRIPTION: Method for swapping a single product in a multi-product subscription while preserving all other products and their metadata.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->subscription('default')\n    ->findItemOrFail('price_basic')\n    ->swap('price_pro');\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Constraints for Laravel Scheduled Tasks\nDESCRIPTION: This snippet shows how to limit task execution to specific environments using the environments method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')\n    ->daily()\n    ->environments(['staging', 'production']);\n```\n\n----------------------------------------\n\nTITLE: Selecting Nth Element with `nth` in PHP\nDESCRIPTION: The `nth` method extracts every nth element from the collection. It takes the interval (n) and an optional offset as parameters. The first example retrieves every 4th element, and the second example retrieves every 4th element, starting from the second element.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_82\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['a', 'b', 'c', 'd', 'e', 'f']);\n\n$collection->nth(4);\n\n// ['a', 'e']\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection->nth(4, 1);\n\n// ['b', 'f']\n```\n\n----------------------------------------\n\nTITLE: Checking Subscription Price in Laravel Cashier\nDESCRIPTION: Demonstrates how to verify if a user's subscription corresponds to a specific price ID using the 'subscribedToPrice' method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscribedToPrice('price_basic_monthly', 'default')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Gone Status in Laravel Tests\nDESCRIPTION: This snippet demonstrates how to assert that a response has a gone (410) HTTP status code using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$response->assertGone();\n```\n\n----------------------------------------\n\nTITLE: Unwrap Collection Items in PHP\nDESCRIPTION: The `unwrap()` method returns the collection's underlying items from the given value. It handles Collection objects, arrays, and other primitive types correctly, extracting the data from the Collection object or returning the value directly if not a Collection. Requires a Laravel Collection instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_138\n\nLANGUAGE: PHP\nCODE:\n```\nCollection::unwrap(collect('John Doe'));\n\n// ['John Doe']\n\nCollection::unwrap(['John Doe']);\n\n// ['John Doe']\n\nCollection::unwrap('John Doe');\n\n// 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Adding Hash Fragments to Pagination URLs\nDESCRIPTION: Shows how to append hash fragments to pagination URLs using the fragment() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$users = User::paginate(15)->fragment('users');\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication Redirects in Laravel Fortify\nDESCRIPTION: This snippet demonstrates how to customize authentication redirects in Laravel Fortify. It shows how to bind a custom implementation of the LogoutResponse contract to the Laravel service container.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Fortify\\Contracts\\LogoutResponse;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    $this->app->instance(LogoutResponse::class, new class implements LogoutResponse {\n        public function toResponse($request)\n        {\n            return redirect('/');\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Payments with Additional Data in Laravel Cashier\nDESCRIPTION: This code snippet shows how to provide additional data when confirming payments, such as mandate data for SEPA payment methods. It uses the withPaymentConfirmationOptions method before swapping the subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_121\n\nLANGUAGE: php\nCODE:\n```\n$subscription->withPaymentConfirmationOptions([\n    'mandate_data' => '...',\n])->swap('price_xxx');\n```\n\n----------------------------------------\n\nTITLE: Using Bindings and Singletons Properties in Laravel Service Provider\nDESCRIPTION: Demonstrates how to use the bindings and singletons properties in a Laravel service provider to simplify registration of multiple bindings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\Contracts\\DowntimeNotifier;\nuse App\\Contracts\\ServerProvider;\nuse App\\Services\\DigitalOceanServerProvider;\nuse App\\Services\\PingdomDowntimeNotifier;\nuse App\\Services\\ServerToolsProvider;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * All of the container bindings that should be registered.\n     *\n     * @var array\n     */\n    public $bindings = [\n        ServerProvider::class => DigitalOceanServerProvider::class,\n    ];\n\n    /**\n     * All of the container singletons that should be registered.\n     *\n     * @var array\n     */\n    public $singletons = [\n        DowntimeNotifier::class => PingdomDowntimeNotifier::class,\n        ServerProvider::class => ServerToolsProvider::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling OAuth Token Purging in Laravel\nDESCRIPTION: This snippet demonstrates how to schedule the passport:purge command to run hourly using Laravel's task scheduler.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('passport:purge')->hourly();\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Cookie Domain for Subdomain Support in Laravel\nDESCRIPTION: Setting the session cookie domain configuration in Laravel to support any subdomain of the root domain, which is necessary for cross-subdomain authentication with SPAs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n'domain' => '.domain.com',\n```\n\n----------------------------------------\n\nTITLE: JSON Where Clauses in Laravel\nDESCRIPTION: Examples of querying JSON columns using various methods like whereJsonContains and whereJsonLength.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->where('preferences->dining->meal', 'salad')\n    ->get();\n\n$users = DB::table('users')\n    ->whereJsonContains('options->languages', 'en')\n    ->get();\n\n$users = DB::table('users')\n    ->whereJsonLength('options->languages', '>', 1)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Component Views in Laravel\nDESCRIPTION: Shows how to return component markup directly from the render method instead of using a separate template file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the view / contents that represent the component.\n */\npublic function render(): string\n{\n    return <<<'blade'\n        <div class=\"alert alert-danger\">\n            {{ $slot }}\n        </div>\n    blade;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Queue Job Truth Test\nDESCRIPTION: Demonstrates how to use a closure with assertPushed to test specific job properties match expected values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_109\n\nLANGUAGE: php\nCODE:\n```\nQueue::assertPushed(function (ShipOrder $job) use ($order) {\n    return $job->order->id === $order->id;\n});\n```\n\n----------------------------------------\n\nTITLE: Using attemptWhen for Complex Authentication in Laravel\nDESCRIPTION: This snippet demonstrates the use of the attemptWhen method in Laravel for more extensive user inspection before authentication. It allows for custom logic to determine if a user can be authenticated.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nif (Auth::attemptWhen([\n    'email' => $email,\n    'password' => $password,\n], function (User $user) {\n    return $user->isNotBanned();\n})) {\n    // Authentication was successful...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Dusk Tests\nDESCRIPTION: Demonstrates how to run Dusk browser tests using Artisan commands, including running all tests, re-running failed tests, and running tests for specific groups.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan dusk\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan dusk:fails\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan dusk --group=foo\n```\n\n----------------------------------------\n\nTITLE: Customizing Verification Email Content (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the content of the verification email using the toMailUsing method in the AppServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/verification.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Auth\\Notifications\\VerifyEmail;\nuse Illuminate\\Notifications\\Messages\\MailMessage;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    // ...\n\n    VerifyEmail::toMailUsing(function (object $notifiable, string $url) {\n        return (new MailMessage)\n            ->subject('Verify Email Address')\n            ->line('Click the button below to verify your email address.')\n            ->action('Verify Email Address', $url);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Columns After Existing Column in Laravel\nDESCRIPTION: Example of adding multiple address-related columns after the password column using the after method in MySQL/MariaDB.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$table->after('password', function (Blueprint $table) {\n    $table->string('address_line1');\n    $table->string('address_line2');\n    $table->string('city');\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Singleton Binding in Laravel\nDESCRIPTION: Example of using singletonIf to register a singleton binding only if no binding exists. This prevents overriding existing singleton bindings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->app->singletonIf(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating DATETIME with Timezone Column in Laravel Migration\nDESCRIPTION: The dateTimeTz method creates a DATETIME (with timezone) equivalent column with an optional fractional seconds precision in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$table->dateTimeTz('created_at', precision: 0);\n```\n\n----------------------------------------\n\nTITLE: Sorting Collections in Descending Order with sortByDesc in Laravel Collections - PHP\nDESCRIPTION: Briefly describes sortByDesc as a method with the same parameters as sortBy but sorts the collection in descending order instead. This method simplifies reverse ordering based on keys or custom criteria.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_117\n\n\n\n----------------------------------------\n\nTITLE: Vue Starter Kit Directory Structure\nDESCRIPTION: Overview of the frontend directory structure in the Vue starter kit, showing the organization of components, composables, layouts, utilities, pages, and TypeScript definitions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nresources/js/\n├── components/    # Reusable Vue components\n├── composables/   # Vue composables / hooks\n├── layouts/       # Application layouts\n├── lib/           # Utility functions and configuration\n├── pages/         # Page components\n└── types/         # TypeScript definitions\n```\n\n----------------------------------------\n\nTITLE: Socket ID Retrieval in JavaScript\nDESCRIPTION: Example of retrieving the socket ID using Laravel Echo for custom header configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar socketId = Echo.socketId();\n```\n\n----------------------------------------\n\nTITLE: Assert Session Missing Key\nDESCRIPTION: Verifies that a specific key is not present in the session.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSessionMissing($key);\n```\n\n----------------------------------------\n\nTITLE: Defining Horizon Dashboard Authorization Gate\nDESCRIPTION: Configure the authorization gate in the HorizonServiceProvider to control access to the Horizon dashboard in non-local environments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Register the Horizon gate.\n *\n * This gate determines who can access Horizon in non-local environments.\n */\nprotected function gate(): void\n{\n    Gate::define('viewHorizon', function (User $user) {\n        return in_array($user->email, [\n            'taylor@laravel.com',\n        ]);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using URI Templates with HTTP Client\nDESCRIPTION: Shows how to use URI templates to construct request URLs with dynamic parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nHttp::withUrlParameters([\n    'endpoint' => 'https://laravel.com',\n    'page' => 'docs',\n    'version' => '11.x',\n    'topic' => 'validation',\n])->get('{+endpoint}/{page}/{version}/{topic}');\n```\n\n----------------------------------------\n\nTITLE: Excluding Jobs from Queue Faking\nDESCRIPTION: Shows how to fake all jobs except specified ones using the except method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_112\n\nLANGUAGE: php\nCODE:\n```\nQueue::fake()->except([\n    ShipOrder::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Context in Laravel\nDESCRIPTION: Shows how to add custom context to specific exception types by implementing a context method on the exception class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Exceptions;\n\nuse Exception;\n\nclass InvalidOrderException extends Exception\n{\n    // ...\n\n    /**\n     * Get the exception's context information.\n     *\n     * @return array<string, mixed>\n     */\n    public function context(): array\n    {\n        return ['order_id' => $this->orderId];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Silenced Jobs in PHP\nDESCRIPTION: Configuration for silencing specific jobs in Laravel Horizon. Jobs can be silenced either through configuration or by implementing the Silenced interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'silenced' => [\n    App\\Jobs\\ProcessPodcast::class,\n],\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Horizon\\Contracts\\Silenced;\n\nclass ProcessPodcast implements ShouldQueue, Silenced\n{\n    use Queueable;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Trusted Hosts Configuration in Laravel\nDESCRIPTION: Demonstrates how to use a closure to dynamically determine trusted hosts using configuration values. This allows for flexible host configuration that can be managed through Laravel's configuration system.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->trustHosts(at: fn () => config('app.trusted_hosts'));\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Sail with Devcontainer Support\nDESCRIPTION: Command to install Sail with additional Devcontainer configuration for VS Code remote development.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan sail:install --devcontainer\n```\n\n----------------------------------------\n\nTITLE: Creating Cache Table Migration in Laravel\nDESCRIPTION: Creating a database table for cache storage with Laravel's Artisan command line tool and running the migration to apply it to the database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:cache-table\n\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Adding Column Modifiers Before Foreign Key Constraints\nDESCRIPTION: Demonstrates the proper order of operations when adding column modifiers to foreign key columns in Laravel migrations. Column modifiers must be called before the constrained method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$table->foreignId('user_id')\n    ->nullable()\n    ->constrained();\n```\n\n----------------------------------------\n\nTITLE: Setting Locale at Runtime (Laravel)\nDESCRIPTION: Example of modifying the default language for a single HTTP request using the setLocale method from the App facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\App;\n\nRoute::get('/greeting/{locale}', function (string $locale) {\n    if (! in_array($locale, ['en', 'es', 'fr'])) {\n        abort(400);\n    }\n\n    App::setLocale($locale);\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dropbox Filesystem Adapter\nDESCRIPTION: Command to install the Spatie Dropbox adapter for Flysystem integration in Laravel\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require spatie/flysystem-dropbox\n```\n\n----------------------------------------\n\nTITLE: Using Prepends Method for Joining Attribute Values\nDESCRIPTION: Shows how to use the prepends method to join default attribute values with injected values, ensuring default values appear before any additional values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_48\n\nLANGUAGE: blade\nCODE:\n```\n<div {{ $attributes->merge(['data-controller' => $attributes->prepends('profile-controller')]) }}>\n    {{ $slot }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using whereLike for Case-Insensitive String Matching in Laravel\nDESCRIPTION: The whereLike method adds a LIKE clause to the query for pattern matching. By default, it performs a case-insensitive search.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->whereLike('name', '%John%')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Slots in Laravel Blade\nDESCRIPTION: Uses the isEmpty method to check if a slot contains content and conditionally renders default content when the slot is empty.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_63\n\nLANGUAGE: blade\nCODE:\n```\n<span class=\"alert-title\">{{ $title }}</span>\n\n<div class=\"alert alert-danger\">\n    @if ($slot->isEmpty())\n        This is default content if the slot is empty.\n    @else\n        {{ $slot }}\n    @endif\n</div>\n```\n\n----------------------------------------\n\nTITLE: Filtering Arrays by Closure Using Laravel Arr Where Method in PHP\nDESCRIPTION: The Arr::where method filters an array based on a closure callback returning true for items to keep. It accepts an array and a closure with value and key parameters. Returns a filtered array preserving original keys. Depends on Illuminate\\Support\\Arr and useful for conditionally filtering array data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [100, '200', 300, '400', 500];\n\n$filtered = Arr::where($array, function (string|int $value, int $key) {\n    return is_string($value);\n});\n\n// [1 => '200', 3 => '400']\n```\n\n----------------------------------------\n\nTITLE: Removing Null Values from Arrays Using Laravel Arr WhereNotNull Method in PHP\nDESCRIPTION: The Arr::whereNotNull method filters out all null values from the input array, returning a new array without any null entries. It requires Illuminate\\Support\\Arr and a single array parameter. Useful for cleaning arrays to remove null values before processing or output.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [0, null];\n\n$filtered = Arr::whereNotNull($array);\n\n// [0 => 0]\n```\n\n----------------------------------------\n\nTITLE: Asserting Authentication States in PHP with Laravel Dusk\nDESCRIPTION: Assert various authentication states of the user using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertAuthenticated();\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertGuest();\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertAuthenticatedAs($user);\n```\n\n----------------------------------------\n\nTITLE: Defining Middleware Aliases in Laravel\nDESCRIPTION: This snippet shows how to assign aliases to middleware in Laravel's bootstrap/app.php file, allowing the use of short aliases for middleware with long class names.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\EnsureUserIsSubscribed;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->alias([\n        'subscribed' => EnsureUserIsSubscribed::class\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing resolveChildRouteBinding for Nested Route Model Binding\nDESCRIPTION: This code shows how to implement the resolveChildRouteBinding method in an Eloquent model to handle nested route model binding when using implicit binding scoping. It allows Laravel to resolve child relationships from parent models in nested routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Retrieve the child model for a bound value.\n *\n * @param  string  $childType\n * @param  mixed  $value\n * @param  string|null  $field\n * @return \\Illuminate\\Database\\Eloquent\\Model|null\n */\npublic function resolveChildRouteBinding($childType, $value, $field)\n{\n    return parent::resolveChildRouteBinding($childType, $value, $field);\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Full Control of Laravel Routing\nDESCRIPTION: Demonstrates how to take complete control over route registration using the 'using' closure in the withRouting method, bypassing the default HTTP route registration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Route;\n\n->withRouting(\n    commands: __DIR__.'/../routes/console.php',\n    using: function () {\n        Route::middleware('api')\n            ->prefix('api')\n            ->group(base_path('routes/api.php'));\n\n        Route::middleware('web')\n            ->group(base_path('routes/web.php'));\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse One-to-One Relationship in Laravel\nDESCRIPTION: Implementation of the inverse relationship for a one-to-one association using belongsTo. The Phone model defines a method to access its parent User model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass Phone extends Model\n{\n    /**\n     * Get the user that owns the phone.\n     */\n    public function user(): BelongsTo\n    {\n        return $this->belongsTo(User::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Subscription to Specific Products in Laravel Cashier\nDESCRIPTION: Shows how to check if a user is subscribed to specific Stripe products using the 'subscribedToProduct' method. This can be used to verify access to premium features.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscribedToProduct('prod_premium', 'default')) {\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscribedToProduct(['prod_basic', 'prod_premium'], 'default')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Model Factory Test Example - Pest\nDESCRIPTION: Demonstrates using model factories to create test data in Pest tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\ntest('models can be instantiated', function () {\n    $user = User::factory()->create();\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Arguments with Additional Prompts\nDESCRIPTION: Shows how to implement additional prompts after handling missing arguments in Laravel console commands.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse function Laravel\\Prompts\\confirm;\n\n// ...\n\n/**\n * Perform actions after the user was prompted for missing arguments.\n */\nprotected function afterPromptingForMissingArguments(InputInterface $input, OutputInterface $output): void\n{\n    $input->setOption('queue', confirm(\n        label: 'Would you like to queue the mail?',\n        default: $this->option('queue')\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sleep::whenFakingSleep to Perform Actions on Fake Sleep with Time Manipulation in Laravel (PHP)\nDESCRIPTION: Shows how to register a callback that fires on every fake sleep invocation, enabling actions such as advancing application time via Laravel's time travel helpers. This example uses CarbonInterval for duration and Laravel's travel() method to move time forward by the sleep duration in milliseconds. Requires Sleep, CarbonInterval, and that the test environment supports time freezing via freezeTime(). Commonly used to keep time-dependent tests consistent when faking sleep.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_142\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\CarbonInterval as Duration;\\n\\n$this->freezeTime();\\n\\nSleep::fake();\\n\\nSleep::whenFakingSleep(function (Duration $duration) {\\n    // Progress time when faking sleep...\\n    $this->travel($duration->totalMilliseconds)->milliseconds();\\n});\n```\n\n----------------------------------------\n\nTITLE: Select Menu with Laravel Prompts\nDESCRIPTION: Examples of using select() function to create single-choice selection menus with various configuration options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\select;\n\n$role = select(\n    label: 'What role should the user have?',\n    options: ['Member', 'Contributor', 'Owner']\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$role = select(\n    label: 'Which category would you like to assign?',\n    options: Category::pluck('name', 'id'),\n    scroll: 10\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Connection for Exists Rule in Laravel\nDESCRIPTION: Shows how to specify a particular database connection to be used with the 'exists' validation rule in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'exists:connection.staff,email'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Laravel Application with Herd on Windows\nDESCRIPTION: This snippet shows how to create a new Laravel application using the Laravel CLI bundled with Herd on Windows. It uses Powershell to navigate to the Herd directory, create a new application, and open it in the default browser.\nSOURCE: https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd ~\\Herd\nlaravel new my-app\ncd my-app\nherd open\n```\n\n----------------------------------------\n\nTITLE: Using plural() Method in Laravel String Manipulation\nDESCRIPTION: Shows how to convert singular words to plural form using Laravel's pluralizer. Supports multiple languages and can handle count-based pluralization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_138\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$plural = Str::of('car')->plural();\n\n// cars\n\n$plural = Str::of('child')->plural();\n\n// children\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$plural = Str::of('child')->plural(2);\n\n// children\n\n$plural = Str::of('child')->plural(1);\n\n// child\n```\n\n----------------------------------------\n\nTITLE: Running Horizon CLI Commands\nDESCRIPTION: Collection of Artisan commands for managing Horizon processes including starting, pausing, continuing and terminating Horizon.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan horizon\n\nphp artisan horizon:pause\n\nphp artisan horizon:continue\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan horizon:pause-supervisor supervisor-1\n\nphp artisan horizon:continue-supervisor supervisor-1\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan horizon:status\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan horizon:supervisor-status supervisor-1\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan horizon:terminate\n```\n\n----------------------------------------\n\nTITLE: Authentication Check Directives in Blade\nDESCRIPTION: Shows how to use Blade's @auth and @guest directives to conditionally display content based on user authentication status.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n@auth\n    // The user is authenticated...\n@endauth\n\n@guest\n    // The user is not authenticated...\n@endguest\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Database Seeders with Artisan\nDESCRIPTION: Commands to run database seeders in Laravel using Artisan. Includes examples of running the default DatabaseSeeder, specifying a particular seeder class, and combining seeding with migration commands.\nSOURCE: https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan db:seed\n\nphp artisan db:seed --class=UserSeeder\n```\n\n----------------------------------------\n\nTITLE: Registering Telescope Service Providers in App Service Provider\nDESCRIPTION: PHP code to conditionally register Telescope's service providers only in the local environment, to be placed in the AppServiceProvider class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    if ($this->app->environment('local') && class_exists(\\Laravel\\Telescope\\TelescopeServiceProvider::class)) {\n        $this->app->register(\\Laravel\\Telescope\\TelescopeServiceProvider::class);\n        $this->app->register(TelescopeServiceProvider::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Elements in Laravel Dusk\nDESCRIPTION: Demonstrates methods for pausing tests or waiting for elements to be available before proceeding with assertions or interactions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$browser->pause(1000);\n\n$browser->pauseIf(App::environment('production'), 1000);\n\n$browser->pauseUnless(App::environment('testing'), 1000);\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Browsers in Laravel Dusk Tests\nDESCRIPTION: Demonstrates how to use multiple browser instances in a single Dusk test to simulate interactions between different users or sessions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$this->browse(function (Browser $first, Browser $second) {\n    $first->loginAs(User::find(1))\n        ->visit('/home')\n        ->waitForText('Message');\n\n    $second->loginAs(User::find(2))\n        ->visit('/home')\n        ->waitForText('Message')\n        ->type('message', 'Hey Taylor')\n        ->press('Send');\n\n    $first->waitForText('Hey Taylor')\n        ->assertSee('Jeffrey Way');\n});\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Event Class with After-Commit Support\nDESCRIPTION: Defines a broadcast event class that implements ShouldBroadcast and ShouldDispatchAfterCommit interfaces to ensure the event is dispatched after database transactions are committed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Events;\n\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Contracts\\Events\\ShouldDispatchAfterCommit;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass ServerCreated implements ShouldBroadcast, ShouldDispatchAfterCommit\n{\n    use SerializesModels;\n}\n```\n\n----------------------------------------\n\nTITLE: Container Injection Example\nDESCRIPTION: Demonstrates injecting the Laravel container instance itself into a class constructor.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Container\\Container;\n\n/**\n * Create a new class instance.\n */\npublic function __construct(\n    protected Container $container,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Contextual Attributes for Dependency Injection in Laravel\nDESCRIPTION: Shows how to use Laravel's built-in contextual binding attributes to inject specific implementations and configuration values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Container\\Attributes\\Storage;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\n\nclass PhotoController extends Controller\n{\n    public function __construct(\n        #[Storage('local')] protected Filesystem $filesystem\n    )\n    {\n        // ...\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    #[Auth('web')] protected Guard $auth,\n    #[Cache('redis')] protected Repository $cache,\n    #[Config('app.timezone')] protected string $timezone,\n    #[DB('mysql')] protected Connection $connection,\n    #[Log('daily')] protected LoggerInterface $log,\n    #[RouteParameter('photo')] protected Photo $photo,\n    #[Tag('reports')] protected iterable $reports,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Auto-Refresh\nDESCRIPTION: Vite configuration for enabling automatic browser refresh when files are modified during development.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            // ...\n            refresh: true,\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Input Values in PHP with Laravel Dusk\nDESCRIPTION: Assert that an input field has or does not have a specific value using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertInputValue($field, $value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertInputValueIsNot($field, $value);\n```\n\n----------------------------------------\n\nTITLE: Setting Xdebug Client Host for Linux\nDESCRIPTION: Environment variable configuration to define the SAIL_XDEBUG_CONFIG in the .env file, setting the client_host to a static IP for Linux hosts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nSAIL_XDEBUG_CONFIG=\"client_host=172.20.0.2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulse Slow Queries Card in Blade\nDESCRIPTION: Blade template code showing how to configure the Pulse Slow Queries card to disable syntax highlighting for large SQL queries.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:pulse.slow-queries without-highlighting />\n```\n\n----------------------------------------\n\nTITLE: Installing Octane and FrankenPHP with Laravel Sail\nDESCRIPTION: Commands to install Octane and FrankenPHP using Laravel Sail, including setting up the FrankenPHP binary.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/sail up\n\n./vendor/bin/sail composer require laravel/octane\n\n./vendor/bin/sail artisan octane:install --server=frankenphp\n```\n\n----------------------------------------\n\nTITLE: Installing spatie/fork Package for Fork Driver in Laravel\nDESCRIPTION: Command to install the spatie/fork package, which is required for using the 'fork' driver in Laravel's Concurrency facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/concurrency.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require spatie/fork\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Envoy via Composer\nDESCRIPTION: Commands to install Laravel Envoy using Composer package manager and access the Envoy binary.\nSOURCE: https://github.com/laravel/docs/blob/12.x/envoy.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/envoy --dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp vendor/bin/envoy\n```\n\n----------------------------------------\n\nTITLE: Inspecting Database Table Structure in Laravel\nDESCRIPTION: Command to get an overview of a database table structure including columns, types, attributes, keys, and indexes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan db:table users\n```\n\n----------------------------------------\n\nTITLE: Waiting for Text Display\nDESCRIPTION: Shows how to wait for text to appear or be removed from the page using waitForText and waitUntilMissingText methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n// Wait a maximum of five seconds for the text...\n$browser->waitForText('Hello World');\n\n// Wait a maximum of one second for the text...\n$browser->waitForText('Hello World', 1);\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Specific Subscription Type in Laravel Cashier\nDESCRIPTION: Method for cancelling a specific subscription type without affecting other subscriptions the user might have.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('swimming')->cancel();\n```\n\n----------------------------------------\n\nTITLE: Inspecting Collections with tap() Without Mutation - PHP\nDESCRIPTION: Demonstrates the tap method that passes the collection to a callback without modifying it, useful for debugging or side effects. The collection is returned unchanged after the callback. Requires Laravel Collection and allows inspecting collection state mid-chain.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_129\n\nLANGUAGE: php\nCODE:\n```\ncollect([2, 4, 3, 1, 5])\n    ->sort()\n    ->tap(function (Collection $collection) {\n        Log::debug('Values after sorting', $collection->values()->all());\n    })\n    ->shift();\n\n// 1\n```\n\n----------------------------------------\n\nTITLE: Implementing User Preferred Locale for Laravel Mailables\nDESCRIPTION: Shows how to implement the HasLocalePreference contract on a model to use the user's preferred locale when sending mail.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Translation\\HasLocalePreference;\n\nclass User extends Model implements HasLocalePreference\n{\n    /**\n     * Get the user's preferred locale.\n     */\n    public function preferredLocale(): string\n    {\n        return $this->locale;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional URL Pings for Task Status in Laravel Scheduler\nDESCRIPTION: Demonstrates how to implement conditional URL pings based on task success or failure using pingOnSuccess() and pingOnFailure() methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')\n    ->daily()\n    ->pingOnSuccess($successUrl)\n    ->pingOnFailure($failureUrl);\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Data Within render Method Using Closure\nDESCRIPTION: Shows how to access component name, attributes, and slot content inside the component class by returning a closure from the render method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\n\n/**\n * Get the view / contents that represent the component.\n */\npublic function render(): Closure\n{\n    return function () {\n        return '<div {{ $attributes }}>Components content</div>';\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Middleware from Route Groups in Laravel\nDESCRIPTION: Example of excluding middleware from an entire group of routes using the withoutMiddleware method at the group level.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\EnsureTokenIsValid;\n\nRoute::withoutMiddleware([EnsureTokenIsValid::class])->group(function () {\n    Route::get('/profile', function () {\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Component Waiting\nDESCRIPTION: Shows how to wait for Vue component attributes to have specific values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n// Wait until the component attribute contains the given value...\n$browser->waitUntilVue('user.name', 'Taylor', '@user');\n\n// Wait until the component attribute doesn't contain the given value...\n$browser->waitUntilVueIsNot('user.name', null, '@user');\n```\n\n----------------------------------------\n\nTITLE: Configuring Xdebug Autostart in PHP-FPM for Laravel Homestead\nDESCRIPTION: This snippet shows how to configure Xdebug to start automatically in the PHP-FPM configuration file within a Homestead virtual machine. It sets the client host, debug mode, and enables debugging to start with each request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\n; If Homestead.yaml contains a different subnet for the IP address, this address may be different...\nxdebug.client_host = 192.168.10.1\nxdebug.mode = debug\nxdebug.start_with_request = yes\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced One-of-Many Relationship with Custom Sorting in PHP\nDESCRIPTION: This snippet shows how to define a more advanced 'one of many' relationship using the ofMany method with custom sorting criteria.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the user's most popular image.\n */\npublic function bestImage(): MorphOne\n{\n    return $this->morphOne(Image::class, 'imageable')->ofMany('likes', 'max');\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Client Events with Laravel Echo\nDESCRIPTION: Demonstrates how to send client-to-client events using Echo's whisper method, which broadcasts directly to other clients without going through the Laravel backend. This example sends a typing notification.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nEcho.private(`chat.${roomId}`)\n    .whisper('typing', {\n        name: this.user.name\n    });\n```\n\n----------------------------------------\n\nTITLE: Formatting Broadcast Notifications in Laravel\nDESCRIPTION: Shows how to define a toBroadcast method that formats notification data for broadcasting to JavaScript clients. Returns a BroadcastMessage with the data to be sent.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Notifications\\Messages\\BroadcastMessage;\n\n/**\n * Get the broadcastable representation of the notification.\n */\npublic function toBroadcast(object $notifiable): BroadcastMessage\n{\n    return new BroadcastMessage([\n        'invoice_id' => $this->invoice->id,\n        'amount' => $this->invoice->amount,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB for Failed Job Storage in Laravel\nDESCRIPTION: Configuration array for using Amazon DynamoDB to store failed jobs, specifying AWS credentials, region, and table name in the Laravel configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_100\n\nLANGUAGE: php\nCODE:\n```\n'failed' => [\n    'driver' => env('QUEUE_FAILED_DRIVER', 'dynamodb'),\n    'key' => env('AWS_ACCESS_KEY_ID'),\n    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n    'table' => 'failed_jobs',\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bars in Laravel Prompts\nDESCRIPTION: Shows how to use the progress function to display and advance a progress bar for long-running tasks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\progress;\n\n$users = progress(\n    label: 'Updating users',\n    steps: User::all(),\n    callback: fn ($user) => $this->performTask($user)\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = progress(\n    label: 'Updating users',\n    steps: User::all(),\n    callback: function ($user, $progress) {\n        $progress\n            ->label(\"Updating {$user->name}\")\n            ->hint(\"Created on {$user->created_at}\");\n\n        return $this->performTask($user);\n    },\n    hint: 'This may take some time.'\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$progress = progress(label: 'Updating users', steps: 10);\n\n$users = User::all();\n\n$progress->start();\n\nforeach ($users as $user) {\n    $this->performTask($user);\n\n    $progress->advance();\n}\n\n$progress->finish();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authorized Access Tokens with Axios in JavaScript\nDESCRIPTION: This snippet shows how to use Axios to make a GET request to the /oauth/tokens endpoint to retrieve all authorized access tokens for the authenticated user.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_14\n\nLANGUAGE: js\nCODE:\n```\naxios.get('/oauth/tokens')\n    .then(response => {\n        console.log(response.data);\n    });\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Attribute with Prefix in Laravel Blade\nDESCRIPTION: Combines whereStartsWith and first methods to render the first attribute whose key begins with a specified string in a component's attribute bag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_52\n\nLANGUAGE: blade\nCODE:\n```\n{{ $attributes->whereStartsWith('wire:model')->first() }}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: Artisan command to execute the database migrations needed for Fortify features.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Telescope for Local Development\nDESCRIPTION: Commands for installing Laravel Telescope as a development dependency for local use only, using the --dev flag with Composer.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/telescope --dev\n\nphp artisan telescope:install\n\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Chipper CI for Laravel Dusk Tests\nDESCRIPTION: This YAML configuration sets up a Chipper CI pipeline to run Laravel Dusk tests. It includes steps for environment setup, asset compilation, and test execution using PHP's built-in server. It also configures the Dusk environment file to use the correct APP_URL.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_84\n\nLANGUAGE: yaml\nCODE:\n```\n# file .chipperci.yml\nversion: 1\n\nenvironment:\n  php: 8.2\n  node: 16\n\n# Include Chrome in the build environment\nservices:\n  - dusk\n\n# Build all commits\non:\n   push:\n      branches: .*\n\npipeline:\n  - name: Setup\n    cmd: |\n      cp -v .env.example .env\n      composer install --no-interaction --prefer-dist --optimize-autoloader\n      php artisan key:generate\n\n      # Create a dusk env file, ensuring APP_URL uses BUILD_HOST\n      cp -v .env .env.dusk.ci\n      sed -i \"s@APP_URL=.*@APP_URL=http://$BUILD_HOST:8000@g\" .env.dusk.ci\n\n  - name: Compile Assets\n    cmd: |\n      npm ci --no-audit\n      npm run build\n\n  - name: Browser Tests\n    cmd: |\n      php -S [::0]:8000 -t public 2>server.log &\n      sleep 2\n      php artisan dusk:chrome-driver $CHROME_DRIVER\n      php artisan dusk --env=ci\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Bot User for Authentication\nDESCRIPTION: Example showing how to configure a Slack bot user for authentication by setting appropriate scopes for bot tokens.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn Socialite::driver('slack')\n    ->asBotUser()\n    ->setScopes(['chat:write', 'chat:write.public', 'chat:write.customize'])\n    ->redirect();\n```\n\n----------------------------------------\n\nTITLE: Registering Blade Components in Laravel Package\nDESCRIPTION: Shows how to manually register a Blade component class and its HTML tag alias in a package's service provider boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Blade;\nuse VendorPackage\\View\\Components\\AlertComponent;\n\n/**\n * Bootstrap your package's services.\n */\npublic function boot(): void\n{\n    Blade::component('package-alert', AlertComponent::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Model Watcher Events Configuration\nDESCRIPTION: Configuration for Model Watcher to specify which Eloquent model events to record and enable hydration tracking.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n'watchers' => [\n    Watchers\\ModelWatcher::class => [\n        'enabled' => env('TELESCOPE_MODEL_WATCHER', true),\n        'events' => ['eloquent.created*', 'eloquent.updated*'],\n        'hydrations' => true,\n    ],\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: JavaScript Expression Waiting\nDESCRIPTION: Examples of waiting for JavaScript expressions to evaluate to true.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n// Wait a maximum of five seconds for the expression to be true...\n$browser->waitUntil('App.data.servers.length > 0');\n\n// Wait a maximum of one second for the expression to be true...\n$browser->waitUntil('App.data.servers.length > 0', 1);\n```\n\n----------------------------------------\n\nTITLE: Specifying Subdomain for Shared Site\nDESCRIPTION: Shell command to specify a custom subdomain when sharing a Laravel site publicly using Sail's share command.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nsail share --subdomain=my-sail-site\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Redis Connection for Pulse\nDESCRIPTION: Environment variable configuration for specifying a dedicated Redis connection for Pulse when using the Redis ingest driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nPULSE_REDIS_CONNECTION=pulse\n```\n\n----------------------------------------\n\nTITLE: Asserting Query String and Route in Laravel Dusk\nDESCRIPTION: Check query string parameters and route matching using assertQueryStringHas and assertRouteIs methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertQueryStringHas($name, $value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertRouteIs($name, $parameters);\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Concurrency Configuration\nDESCRIPTION: Artisan command to publish the concurrency configuration file in Laravel, allowing customization of the default driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/concurrency.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan config:publish concurrency\n```\n\n----------------------------------------\n\nTITLE: Flattening Multi-dimensional Array with `Arr::flatten()` - PHP\nDESCRIPTION: This snippet illustrates the usage of `Arr::flatten()` to convert a multi-dimensional array into a single-level array. It takes an array as input and returns a flattened array containing all the elements from the original array, regardless of their nesting level.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['name' => 'Joe', 'languages' => ['PHP', 'Ruby']];\n\n$flattened = Arr::flatten($array);\n\n// ['Joe', 'PHP', 'Ruby']\n```\n\n----------------------------------------\n\nTITLE: Converting Collection to Array\nDESCRIPTION: Demonstrates converting an entire collection of models to an array\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users = User::all();\n\nreturn $users->toArray();\n```\n\n----------------------------------------\n\nTITLE: Checking if Any Input Exists with hasAny Method in Laravel\nDESCRIPTION: Determining if any of the specified input fields exist in the request using the hasAny method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nif ($request->hasAny(['name', 'email'])) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching in Strings with PHP\nDESCRIPTION: Shows how to use the 'match' method to extract portions of a string that match a given regular expression pattern.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_130\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('foo bar')->match('/bar/');\n\n// 'bar'\n\n$result = Str::of('foo bar')->match('/foo (.*)/');\n\n// 'bar'\n```\n\n----------------------------------------\n\nTITLE: Generating Artisan Command\nDESCRIPTION: Command to create a new Artisan command class\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:command SendEmails\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Symbolic Links in Laravel\nDESCRIPTION: Configuration example for defining multiple symbolic links in the filesystems.php config file, which can be created using the storage:link command.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'links' => [\n    public_path('storage') => storage_path('app/public'),\n    public_path('images') => storage_path('app/images'),\n],\n```\n\n----------------------------------------\n\nTITLE: Custom Pulse Card with Tailwind-specific Selector\nDESCRIPTION: Example of adding an ID to a custom Pulse card that matches the important selector in the Tailwind configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_32\n\nLANGUAGE: blade\nCODE:\n```\n<x-pulse::card id=\"top-sellers\" :cols=\"$cols\" :rows=\"$rows\" class=\"$class\">\n    ...\n</x-pulse::card>\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecation Logging in Laravel\nDESCRIPTION: Configuration example for handling deprecation warnings in Laravel, showing how to specify a dedicated channel for deprecation logs and enable trace information.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'deprecations' => [\n    'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),\n    'trace' => env('LOG_DEPRECATIONS_TRACE', false),\n],\n\n'channels' => [\n    // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Adding SES List Management Headers in Laravel Mailable\nDESCRIPTION: PHP method to add SES-specific list management headers to a Laravel Mailable class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function headers(): Headers\n{\n    return new Headers(\n        text: [\n            'X-Ses-List-Management-Options' => 'contactListName=MyContactList;topicName=MyTopic',\n        ],\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Process Execution Count in Laravel Tests\nDESCRIPTION: This snippet demonstrates how to use the assertRanTimes method to verify that a specific process was invoked a certain number of times, with an option to use a closure for more detailed assertions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Process;\n\nProcess::assertRanTimes('ls -la', times: 3);\n\nProcess::assertRanTimes(function (PendingProcess $process, ProcessResult $result) {\n    return $process->command === 'ls -la';\n}, times: 3);\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Telescope with Composer\nDESCRIPTION: Command to install Laravel Telescope via Composer, followed by publishing assets and running migrations to set up the necessary database tables.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/telescope\n\nphp artisan telescope:install\n\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Section Content Checking in Blade\nDESCRIPTION: Using @hasSection and @sectionMissing directives to check for section content existence\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n@hasSection('navigation')\n    <div class=\"pull-right\">\n        @yield('navigation')\n    </div>\n\n    <div class=\"clearfix\"></div>\n@endif\n\n@sectionMissing('navigation')\n    <div class=\"pull-right\">\n        @include('default-navigation')\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Creating BLOB Column in Laravel Migration\nDESCRIPTION: The binary method creates a BLOB equivalent column in a Laravel database migration. It can also create VARBINARY or BINARY columns with specified length and fixed arguments for MySQL, MariaDB, or SQL Server.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$table->binary('photo');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$table->binary('data', length: 16); // VARBINARY(16)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$table->binary('data', length: 16, fixed: true); // BINARY(16)\n```\n\n----------------------------------------\n\nTITLE: Validating Image Files with Dimensions in Laravel\nDESCRIPTION: This snippet shows how to validate image file uploads, including file type, size, and dimensions, using Laravel's File rule and the dimensions rule.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_81\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Validation\\Rules\\File;\n\nValidator::validate($input, [\n    'photo' => [\n        'required',\n        File::image()\n            ->min(1024)\n            ->max(12 * 1024)\n            ->dimensions(Rule::dimensions()->maxWidth(1000)->maxHeight(500)),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Default Image URL Output Example\nDESCRIPTION: Example showing how vite-imagetools plugin outputs image URLs during development by default.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/@imagetools/f0b2f404b13f052c604e632f2fb60381bf61a520\">\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Operations in Laravel\nDESCRIPTION: Shows how to perform basic Redis operations like SET and LRANGE using Laravel's Redis facade. Demonstrates both direct method calls and using the command method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Redis;\n\nRedis::set('name', 'Taylor');\n\n$values = Redis::lrange('names', 5, 10);\n\n$values = Redis::command('lrange', ['name', 5, 10]);\n```\n\n----------------------------------------\n\nTITLE: Using Stacks in Laravel Blade Templates\nDESCRIPTION: Shows how to use @push and @stack directives to manage and render content in named stacks, useful for specifying JavaScript libraries.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_97\n\nLANGUAGE: blade\nCODE:\n```\n@push('scripts')\n    <script src=\"/example.js\"></script>\n@endpush\n\n// Later in the layout\n<head>\n    <!-- Head Contents -->\n\n    @stack('scripts')\n</head>\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Selectors in Laravel Dusk Tests\nDESCRIPTION: Example of using a defined shorthand selector in a Dusk test. The shorthand can be used anywhere a full CSS selector would normally be required.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n$browser->type('@email', 'taylor@laravel.com');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Two Factor Authentication QR Code in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the QR code SVG for two factor authentication using the twoFactorQrCodeSvg method on the user instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$request->user()->twoFactorQrCodeSvg();\n```\n\n----------------------------------------\n\nTITLE: Console and Page Source Storage\nDESCRIPTION: Methods for storing browser console output and page source to disk during tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$browser->storeConsoleLog('filename');\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->storeSource('filename');\n```\n\n----------------------------------------\n\nTITLE: Purging Features via Artisan Command in Laravel Pennant\nDESCRIPTION: Shows how to use the pennant:purge Artisan command to purge features from storage, including options for excluding specific features.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan pennant:purge new-api\n\nphp artisan pennant:purge new-api purchase-button\n\nphp artisan pennant:purge --except=new-api --except=purchase-button\n\nphp artisan pennant:purge --except-registered\n```\n\n----------------------------------------\n\nTITLE: Removing Products from Subscriptions in Laravel Cashier\nDESCRIPTION: Method for removing a specific price product from a multi-product subscription. Note that a subscription must maintain at least one product.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->removePrice('price_chat');\n```\n\n----------------------------------------\n\nTITLE: JavaScript Event Waiting\nDESCRIPTION: Examples of waiting for JavaScript events to occur in different contexts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$browser->waitForEvent('load');\n\n$browser->with('iframe', function (Browser $iframe) {\n    // Wait for the iframe's load event...\n    $iframe->waitForEvent('load');\n});\n\n$browser->waitForEvent('load', '.selector');\n\n// Wait until the document is scrolled...\n$browser->waitForEvent('scroll', 'document');\n\n// Wait a maximum of five seconds until the window is resized...\n$browser->waitForEvent('resize', 'window', 5);\n```\n\n----------------------------------------\n\nTITLE: Installing Ably PHP SDK\nDESCRIPTION: Composer command to install the Ably PHP SDK for broadcasting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require ably/ably-php\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Import for Custom Pulse Cards\nDESCRIPTION: CSS configuration that specifies a custom Tailwind configuration file for a Pulse card to avoid conflicts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n@config \"../../tailwind.top-sellers.config.js\";\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Iterating with Spread Arguments using eachSpread Method in PHP\nDESCRIPTION: The eachSpread method iterates over collection items which are nested arrays, passing each nested item as separate arguments to the supplied callback. This allows unpacking each nested entry into individual variables inside the callback. Returning false stops iteration early. Input is a collection of nested arrays and a callable.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([['John Doe', 35], ['Jane Doe', 33]]);\n\n$collection->eachSpread(function (string $name, int $age) {\n    // ...\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection->eachSpread(function (string $name, int $age) {\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Fluently Modifying Laravel Uri Instances in PHP\nDESCRIPTION: Shows how to chain methods like `withScheme`, `withHost`, `withPort`, `withPath`, `withQuery`, and `withFragment` on a `Uri` instance to modify its components. Starts with a base URI created using `Uri::of`.\nSOURCE: https://github.com/laravel/docs/blob/12.x/urls.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$uri = Uri::of('https://example.com')\n    ->withScheme('http')\n    ->withHost('test.com')\n    ->withPort(8000)\n    ->withPath('/users')\n    ->withQuery(['page' => 2])\n    ->withFragment('section-1');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nested Values with data_get() in PHP\nDESCRIPTION: This snippet illustrates how to retrieve values from nested arrays or objects using dot notation with the data_get() function, including defaults, wildcards, and placeholders for first/last items, useful for flexible data access.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_52\n\nLANGUAGE: PHP\nCODE:\n```\n$data = ['products' => ['desk' => ['price' => 100]]];\n\n$price = data_get($data, 'products.desk.price');\n\n// 100\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$discount = data_get($data, 'products.desk.discount', 0);\n\n// 0\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$data = [\n    'product-one' => ['name' => 'Desk 1', 'price' => 100],\n    'product-two' => ['name' => 'Desk 2', 'price' => 150],\n];\n\ndata_get($data, '*.name');\n\n// ['Desk 1', 'Desk 2'];\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$flight = [\n    'segments' => [\n        ['from' => 'LHR', 'departure' => '9:00', 'to' => 'IST', 'arrival' => '15:00'],\n        ['from' => 'IST', 'departure' => '16:00', 'to' => 'PKX', 'arrival' => '20:00'],\n    ],\n];\n\ndata_get($flight, 'segments.{first}.arrival');\n\n// 15:00\n```\n\n----------------------------------------\n\nTITLE: Using WithoutRelations Attribute for Queue Job Properties\nDESCRIPTION: Example demonstrating how to use the WithoutRelations attribute with PHP constructor property promotion to prevent Eloquent model relationships from being serialized.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Queue\\Attributes\\WithoutRelations;\n\n/**\n * Create a new job instance.\n */\npublic function __construct(\n    #[WithoutRelations]\n    public Podcast $podcast,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Adding Jobs to Batches Dynamically\nDESCRIPTION: Shows how to add additional jobs to a batch from within a batched job, useful for processing large numbers of jobs that can't be dispatched in a single web request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$batch = Bus::batch([\n    new LoadImportBatch,\n    new LoadImportBatch,\n    new LoadImportBatch,\n])->then(function (Batch $batch) {\n    // All jobs completed successfully...\n})->name('Import Contacts')->dispatch();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\ImportContacts;\nuse Illuminate\\Support\\Collection;\n\n/**\n * Execute the job.\n */\npublic function handle(): void\n{\n    if ($this->batch()->cancelled()) {\n        return;\n    }\n\n    $this->batch()->add(Collection::times(1000, function () {\n        return new ImportContacts;\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Server Task Deployment\nDESCRIPTION: Example of running deployment tasks across multiple servers with parallel execution option\nSOURCE: https://github.com/laravel/docs/blob/12.x/envoy.md#2025-04-21_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n@servers(['web-1' => '192.168.1.1', 'web-2' => '192.168.1.2'])\n\n@task('deploy', ['on' => ['web-1', 'web-2'], 'parallel' => true])\n    cd /home/user/example.com\n    git pull origin {{ $branch }}\n    php artisan migrate --force\n@endtask\n```\n\n----------------------------------------\n\nTITLE: Sub-Minute Task Scheduling in Laravel\nDESCRIPTION: Demonstrates how to schedule tasks to run at sub-minute intervals using everySecond method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::call(function () {\n    DB::table('recent_users')->delete();\n})->everySecond();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\DeleteRecentUsers;\n\nSchedule::job(new DeleteRecentUsers)->everyTenSeconds();\n\nSchedule::command('users:delete')->everyTenSeconds()->runInBackground();\n```\n\n----------------------------------------\n\nTITLE: Extending Passport Client Model in Laravel PHP\nDESCRIPTION: This snippet shows how to extend the Passport Client model to customize authorization behavior, such as skipping the authorization prompt for first-party clients.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models\\Passport;\n\nuse Laravel\\Passport\\Client as BaseClient;\n\nclass Client extends BaseClient\n{\n    /**\n     * Determine if the client should skip the authorization prompt.\n     */\n    public function skipsAuthorization(): bool\n    {\n        return $this->firstParty();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Ordered UUIDs with Str::orderedUuid in PHP\nDESCRIPTION: Demonstrates how to use Str::orderedUuid to generate a 'timestamp first' UUID that can be efficiently stored in indexed database columns.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nreturn (string) Str::orderedUuid();\n```\n\n----------------------------------------\n\nTITLE: Pluralizing Words with Str::plural in PHP\nDESCRIPTION: Shows how to use Str::plural to convert a singular word to its plural form, supporting multiple languages and conditional pluralization based on count.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$plural = Str::plural('car');\n\n// cars\n\n$plural = Str::plural('child');\n\n// children\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$plural = Str::plural('child', 2);\n\n// children\n\n$singular = Str::plural('child', 1);\n\n// child\n```\n\n----------------------------------------\n\nTITLE: Checking if Array is Associative with `Arr::isAssoc()` - PHP\nDESCRIPTION: This snippet demonstrates how to check if an array is associative using `Arr::isAssoc()`. It returns `true` if the array is associative (i.e., does not have sequential numerical keys starting from zero) and `false` otherwise.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$isAssoc = Arr::isAssoc(['product' => ['name' => 'Desk', 'price' => 100]]);\n\n// true\n\n$isAssoc = Arr::isAssoc([1, 2, 3]);\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Asserting Download Response in Laravel Tests\nDESCRIPTION: This snippet shows how to assert that a response is a download, optionally checking the filename, using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$response->assertDownload();\n$response->assertDownload('image.jpg');\n```\n\n----------------------------------------\n\nTITLE: Querying Soft Deleted Models in Laravel\nDESCRIPTION: Examples of querying soft deleted models using withTrashed() and onlyTrashed() methods in Laravel Eloquent\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_68\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Flight;\n\n$flights = Flight::withTrashed()\n    ->where('account_id', 1)\n    ->get();\n\n$flight->history()->withTrashed()->get();\n\n$flights = Flight::onlyTrashed()\n    ->where('airline_id', 1)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Laravel Dusk Component\nDESCRIPTION: Example of a DatePicker component that encapsulates complex UI interaction logic for reuse across tests. It defines selectors, assertions, and a method to select dates.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Browser\\Components;\n\nuse Laravel\\Dusk\\Browser;\nuse Laravel\\Dusk\\Component as BaseComponent;\n\nclass DatePicker extends BaseComponent\n{\n    /**\n     * Get the root selector for the component.\n     */\n    public function selector(): string\n    {\n        return '.date-picker';\n    }\n\n    /**\n     * Assert that the browser page contains the component.\n     */\n    public function assert(Browser $browser): void\n    {\n        $browser->assertVisible($this->selector());\n    }\n\n    /**\n     * Get the element shortcuts for the component.\n     *\n     * @return array<string, string>\n     */\n    public function elements(): array\n    {\n        return [\n            '@date-field' => 'input.datepicker-input',\n            '@year-list' => 'div > div.datepicker-years',\n            '@month-list' => 'div > div.datepicker-months',\n            '@day-list' => 'div > div.datepicker-days',\n        ];\n    }\n\n    /**\n     * Select the given date.\n     */\n    public function selectDate(Browser $browser, int $year, int $month, int $day): void\n    {\n        $browser->click('@date-field')\n            ->within('@year-list', function (Browser $browser) use ($year) {\n                $browser->click($year);\n            })\n            ->within('@month-list', function (Browser $browser) use ($month) {\n                $browser->click($month);\n            })\n            ->within('@day-list', function (Browser $browser) use ($day) {\n                $browser->click($day);\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Notifications as Read in Laravel\nDESCRIPTION: Shows how to mark all unread notifications as read using a database query, avoiding the need to retrieve all notifications from the database first.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$user = App\\Models\\User::find(1);\n\n$user->unreadNotifications()->update(['read_at' => now()]);\n```\n\n----------------------------------------\n\nTITLE: Adding ConcurrencyServiceProvider in Laravel 11.x\nDESCRIPTION: If upgrading from Laravel 10.x to 11.x, add the ConcurrencyServiceProvider to the providers array in the config/app.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/concurrency.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'providers' => ServiceProvider::defaultProviders()->merge([\n    /*\n     * Package Service Providers...\n     */\n    Illuminate\\Concurrency\\ConcurrencyServiceProvider::class, // [tl! add]\n\n    /*\n     * Application Service Providers...\n     */\n    App\\Providers\\AppServiceProvider::class,\n    App\\Providers\\AuthServiceProvider::class,\n    // App\\Providers\\BroadcastServiceProvider::class,\n    App\\Providers\\EventServiceProvider::class,\n    App\\Providers\\RouteServiceProvider::class,\n])->toArray(),\n```\n\n----------------------------------------\n\nTITLE: Single Row and Column Retrieval\nDESCRIPTION: Shows various methods for retrieving single rows or column values from a database table using where conditions and direct value access.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = DB::table('users')->where('name', 'John')->first();\n\nreturn $user->email;\n```\n\n----------------------------------------\n\nTITLE: Implementing frontControllerPath Method in Laravel Valet Driver\nDESCRIPTION: Method to return the fully qualified path to the application's front controller (typically index.php).\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the fully resolved path to the application's front controller.\n */\npublic function frontControllerPath(string $sitePath, string $siteName, string $uri): string\n{\n    return $sitePath.'/public/index.php';\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory for Process in PHP\nDESCRIPTION: Shows how to set the working directory for a process using the path method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$result = Process::path(__DIR__)->run('ls -la');\n```\n\n----------------------------------------\n\nTITLE: Defining a Broadcastable Event in PHP\nDESCRIPTION: Example of creating an event class that implements the ShouldBroadcast interface to enable broadcasting. The class defines the channel the event should broadcast on.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Events;\n\nuse App\\Models\\Order;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass OrderShipmentStatusUpdated implements ShouldBroadcast\n{\n    /**\n     * The order instance.\n     *\n     * @var \\App\\Models\\Order\n     */\n    public $order;\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Queued Mailable After Database Commit in Laravel\nDESCRIPTION: Demonstrates how to ensure a queued mailable is dispatched after all open database transactions have been committed by using the afterCommit method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nMail::to($request->user())->send(\n    (new OrderShipped($order))->afterCommit()\n);\n```\n\n----------------------------------------\n\nTITLE: Using trans_choice Function for Pluralization in Laravel (PHP)\nDESCRIPTION: These PHP snippets demonstrate the usage of the trans_choice function in Laravel for handling pluralization. It shows how to use the function with and without placeholder attributes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\necho trans_choice('messages.apples', 10);\n\n'minutes_ago' => '{1} :value minute ago|[2,*] :value minutes ago',\n\necho trans_choice('time.minutes_ago', 5, ['value' => 5]);\n\n'apples' => '{0} There are none|{1} There is one|[2,*] There are :count',\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for Pennant\nDESCRIPTION: Artisan command to run database migrations for Pennant, creating the 'features' table.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Getting Last Element from Laravel Collection (PHP)\nDESCRIPTION: Returns the very last element in the collection without any condition. Returns `null` if the collection is empty.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_66\n\nLANGUAGE: php\nCODE:\n```\ncollect([1, 2, 3, 4])->last();\n\n// 4\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Storage URL in Laravel\nDESCRIPTION: Environment variable configuration for proper URL generation when using MinIO with Laravel's Flysystem integration\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nAWS_URL=http://localhost:9000/local\n```\n\n----------------------------------------\n\nTITLE: Retrieving Passport Scope IDs\nDESCRIPTION: Shows how to get an array of all defined scope IDs using the Passport facade\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Passport\\Passport;\n\nPassport::scopeIds();\n```\n\n----------------------------------------\n\nTITLE: Asserting Vue Component State in PHP with Laravel Dusk\nDESCRIPTION: Assert the state of Vue component data properties using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertVue('user.name', 'Taylor', '@profile-component');\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertVueIsNot($property, $value, $componentSelector = null);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertVueContains($property, $value, $componentSelector = null);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertVueDoesntContain($property, $value, $componentSelector = null);\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for DynamoDB Failed Job Storage\nDESCRIPTION: Command to install the AWS SDK via Composer, which is required for storing failed jobs in Amazon DynamoDB.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_99\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require aws/aws-sdk-php\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Maximum Attempts\nDESCRIPTION: Setting the maximum number of times a job can be attempted.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\npublic $tries = 5;\n\npublic function tries(): int\n{\n    return 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nested JSON Field Directly in Laravel Eloquent (PHP)\nDESCRIPTION: Provides a concise syntax for updating a single field within a JSON attribute (`options`) using the `->` operator within the `update` method. This requires the attribute to be mass assignable. It targets the nested `key` within the `options` JSON structure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->update(['options->key' => 'value']);\n```\n\n----------------------------------------\n\nTITLE: Using Subscription Scopes in Laravel Cashier\nDESCRIPTION: Demonstrates how to use various subscription scopes to query for subscriptions in specific states, such as active, canceled, or on trial.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n// Get all active subscriptions...\n$subscriptions = Subscription::query()->active()->get();\n\n// Get all of the canceled subscriptions for a user...\n$subscriptions = $user->subscriptions()->canceled()->get();\n```\n\nLANGUAGE: php\nCODE:\n```\nSubscription::query()->active();\nSubscription::query()->canceled();\nSubscription::query()->ended();\nSubscription::query()->incomplete();\nSubscription::query()->notCanceled();\nSubscription::query()->notOnGracePeriod();\nSubscription::query()->notOnTrial();\nSubscription::query()->onGracePeriod();\nSubscription::query()->onTrial();\nSubscription::query()->pastDue();\nSubscription::query()->recurring();\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Connection for Laravel Model\nDESCRIPTION: Shows how to specify a custom database connection for a specific Eloquent model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The database connection that should be used by the model.\n     *\n     * @var string\n     */\n    protected $connection = 'mysql';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel MongoDB Package via Composer\nDESCRIPTION: Command to install the official MongoDB Laravel integration package using Composer\nSOURCE: https://github.com/laravel/docs/blob/12.x/mongodb.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require mongodb/laravel-mongodb\n```\n\n----------------------------------------\n\nTITLE: Translating Text with trans() Helper in Laravel\nDESCRIPTION: The trans function translates text using Laravel's localization system, retrieving translated strings from language files.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_75\n\nLANGUAGE: php\nCODE:\n```\necho trans('messages.welcome');\n```\n\n----------------------------------------\n\nTITLE: Conditionally Transforming ULID Strings with whenIsUlid in Laravel PHP\nDESCRIPTION: The whenIsUlid method applies a transformation to a string if it is a valid ULID (Universally Unique Lexicographically Sortable Identifier). It uses a closure to perform the transformation on the Stringable instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_167\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('01gd6r360bp37zj17nxb55yv40')->whenIsUlid(function (Stringable $string) {\n    return $string->substr(0, 8);\n});\n\n// '01gd6r36'\n```\n\n----------------------------------------\n\nTITLE: Custom Engine Search Implementation in Laravel Scout\nDESCRIPTION: Shows how to customize search behavior using callbacks and location data with Algolia.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Algolia\\AlgoliaSearch\\SearchIndex;\nuse App\\Models\\Order;\n\nOrder::search(\n    'Star Trek',\n    function (SearchIndex $algolia, string $query, array $options) {\n        $options['body']['query']['bool']['filter']['geo_distance'] = [\n            'distance' => '1000km',\n            'location' => ['lat' => 36, 'lon' => 111],\n        ];\n\n        return $algolia->search($query, $options);\n    }\n)->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Wildcard Environment in Horizon Configuration\nDESCRIPTION: Set up a wildcard environment configuration for Horizon to use when no matching environment is found.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'environments' => [\n    // ...\n\n    '*' => [\n        'supervisor-1' => [\n            'maxProcesses' => 3,\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Managing Channel Subscriptions in Laravel Echo\nDESCRIPTION: Shows how to manage channel subscriptions including leaving channels and stopping event listeners.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nEcho.leaveChannel(`orders.${this.order.id}`);\n\nEcho.leave(`orders.${this.order.id}`);\n```\n\n----------------------------------------\n\nTITLE: Comparing Collections with diffAssoc Method in PHP\nDESCRIPTION: The diffAssoc method compares the collection against another collection or a plain PHP array based on keys and values. It returns key/value pairs in the original collection that are not present in the given collection. It requires a Laravel Collection instance and accepts arrays or other collections as parameters. The output is a collection with differing key/value pairs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'color' => 'orange',\n    'type' => 'fruit',\n    'remain' => 6,\n]);\n\n$diff = $collection->diffAssoc([\n    'color' => 'yellow',\n    'type' => 'fruit',\n    'remain' => 3,\n    'used' => 6,\n]);\n\n$diff->all();\n\n// ['color' => 'orange', 'remain' => 6]\n```\n\n----------------------------------------\n\nTITLE: Password Input with Laravel Prompts\nDESCRIPTION: Examples of using password() function for secure password input with validation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\password;\n\n$password = password('What is your password?');\n```\n\nLANGUAGE: php\nCODE:\n```\n$password = password(\n    label: 'What is your password?',\n    validate: ['password' => 'min:8']\n);\n```\n\n----------------------------------------\n\nTITLE: Safe Blade rendering with optional() - Laravel Blade\nDESCRIPTION: This snippet uses the `optional()` helper function within a Blade template to safely access the 'name' attribute of a potentially null user object.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_105\n\nLANGUAGE: blade\nCODE:\n```\n{!! old('name', optional($user)->name) !!}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eloquent Strictness in Laravel\nDESCRIPTION: Shows how to configure Eloquent's behavior regarding lazy loading and attribute filling in different environments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Model::preventLazyLoading(! $this->app->isProduction());\n}\n\nModel::preventSilentlyDiscardingAttributes(! $this->app->isProduction());\n```\n\n----------------------------------------\n\nTITLE: Transforming Values with with - PHP\nDESCRIPTION: The `with` function returns the value passed to it. If a closure is passed as a second argument, the closure is executed, and its return value is returned. This can be used for conditional transformations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_126\n\nLANGUAGE: php\nCODE:\n```\n$callback = function (mixed $value) {\n    return is_numeric($value) ? $value * 2 : 0;\n};\n\n$result = with(5, $callback);\n\n// 10\n\n$result = with(null, $callback);\n\n// 0\n\n$result = with(5, null);\n\n// 5\n```\n\n----------------------------------------\n\nTITLE: Defining Custom If Statement in Laravel AppServiceProvider\nDESCRIPTION: This code defines a custom conditional statement 'disk' using Blade::if method in the AppServiceProvider. It checks if the configured default disk matches the given value.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_103\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Blade;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Blade::if('disk', function (string $value) {\n        return config('filesystems.default') === $value;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Command Watcher Ignore Configuration\nDESCRIPTION: Configuration for Command Watcher with options to ignore specific Artisan commands from being recorded.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n'watchers' => [\n    Watchers\\CommandWatcher::class => [\n        'enabled' => env('TELESCOPE_COMMAND_WATCHER', true),\n        'ignore' => ['key:generate'],\n    ],\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Publishing Language Files via Artisan (Laravel)\nDESCRIPTION: Command to publish Laravel's language files, creating the lang directory and default set of language files.\nSOURCE: https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan lang:publish\n```\n\n----------------------------------------\n\nTITLE: Authenticatable Contract Interface in Laravel\nDESCRIPTION: This snippet defines the Authenticatable contract interface in Laravel, which should be implemented by user classes for authentication purposes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Illuminate\\Contracts\\Auth;\n\ninterface Authenticatable\n{\n    public function getAuthIdentifierName();\n    public function getAuthIdentifier();\n    public function getAuthPasswordName();\n    public function getAuthPassword();\n    public function getRememberToken();\n    public function setRememberToken($value);\n    public function getRememberTokenName();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Broadcasting with Eloquent in Laravel\nDESCRIPTION: Sets up a Post model to broadcast state changes using the BroadcastsEvents trait. The model defines which channels to broadcast on using the broadcastOn method, returning the model itself and its related user.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Database\\Eloquent\\BroadcastsEvents;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass Post extends Model\n{\n    use BroadcastsEvents, HasFactory;\n\n    /**\n     * Get the user that the post belongs to.\n     */\n    public function user(): BelongsTo\n    {\n        return $this->belongsTo(User::class);\n    }\n\n    /**\n     * Get the channels that model events should broadcast on.\n     *\n     * @return array<int, \\Illuminate\\Broadcasting\\Channel|\\Illuminate\\Database\\Eloquent\\Model>\n     */\n    public function broadcastOn(string $event): array\n    {\n        return [$this, $this->user];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Files in Laravel Storage\nDESCRIPTION: Shows how to delete single or multiple files using the delete method on the Storage facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Storage;\n\nStorage::delete('file.jpg');\n\nStorage::delete(['file.jpg', 'file2.jpg']);\n\nStorage::disk('s3')->delete('path/file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Defining Partial Resource Routes in Laravel\nDESCRIPTION: Demonstrates how to specify a subset of actions for a resource controller, either including only specific actions or excluding certain actions from the default set.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\PhotoController;\n\nRoute::resource('photos', PhotoController::class)->only([\n    'index', 'show'\n]);\n\nRoute::resource('photos', PhotoController::class)->except([\n    'create', 'store', 'update', 'destroy'\n]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Character at Specific Position in Laravel PHP\nDESCRIPTION: The charAt method returns the character at a specified index in a string, returning false if the index is out of bounds.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_89\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$character = Str::of('This is my name.')->charAt(6);\n\n// 's'\n```\n\n----------------------------------------\n\nTITLE: Customizing Concurrent HTTP Requests with Headers\nDESCRIPTION: Shows how to apply custom headers to individual requests in a concurrent request pool, as the pool method cannot be chained with other HTTP client methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\Pool;\nuse Illuminate\\Support\\Facades\\Http;\n\n$headers = [\n    'X-Example' => 'example',\n];\n\n$responses = Http::pool(fn (Pool $pool) => [\n    $pool->withHeaders($headers)->get('http://laravel.test/test'),\n    $pool->withHeaders($headers)->get('http://laravel.test/test'),\n    $pool->withHeaders($headers)->get('http://laravel.test/test'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using encrypt() function for encryption in Laravel PHP\nDESCRIPTION: The encrypt() function encrypts the given value using Laravel's encryption system as an alternative to the Crypt facade, securing sensitive data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_89\n\nLANGUAGE: php\nCODE:\n```\n$secret = encrypt('my-secret-value');\n```\n\n----------------------------------------\n\nTITLE: Left Padding Strings with Str::padLeft in PHP\nDESCRIPTION: Demonstrates how to use Str::padLeft to pad the left side of a string with another string until the final string reaches a desired length.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$padded = Str::padLeft('James', 10, '-=');\n\n// '-=-=-James'\n\n$padded = Str::padLeft('James', 10);\n\n// '     James'\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Envoy Tasks with Servers\nDESCRIPTION: Example of defining servers and a basic task for restarting queues using Blade syntax in Envoy.blade.php\nSOURCE: https://github.com/laravel/docs/blob/12.x/envoy.md#2025-04-21_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n@servers(['web' => ['user@192.168.1.1'], 'workers' => ['user@192.168.1.2']])\n\n@task('restart-queues', ['on' => 'workers'])\n    cd /home/user/example.com\n    php artisan queue:restart\n@endtask\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Octane via Composer\nDESCRIPTION: Commands to install Laravel Octane using Composer and set up its configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/octane\n\nphp artisan octane:install\n```\n\n----------------------------------------\n\nTITLE: Setting Validation Timeout for Precognition Forms\nDESCRIPTION: Example of how to configure the debounce timeout for precognitive validation requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nform.setValidationTimeout(3000);\n```\n\n----------------------------------------\n\nTITLE: Accessing Subscription Items in Multi-Product Subscriptions in Laravel Cashier\nDESCRIPTION: Methods for accessing detailed information about individual products (subscription items) within a multi-product subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_70\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$subscriptionItem = $user->subscription('default')->items->first();\n\n// Retrieve the Stripe price and quantity for a specific item...\n$stripePrice = $subscriptionItem->stripe_price;\n$quantity = $subscriptionItem->quantity;\n```\n\n----------------------------------------\n\nTITLE: Publishing shadcn Components for React\nDESCRIPTION: Command to publish additional shadcn UI components for use in a React starter kit application, using the example of a Switch component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx shadcn@latest add switch\n```\n\n----------------------------------------\n\nTITLE: Configuring Brevo API Credentials in Laravel\nDESCRIPTION: Configuration array for storing Brevo API credentials in Laravel's services configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n'brevo' => [\n    'key' => 'your-api-key',\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Cast Logic with Anonymous Class in Castable (PHP)\nDESCRIPTION: Combines a `Castable` value object (`Address`) with PHP's anonymous classes to define the casting logic directly within the value object. The `castUsing` method returns a new anonymous class instance that implements `CastsAttributes`, containing the `get` and `set` methods for casting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\ValueObjects;\n\nuse Illuminate\\Contracts\\Database\\Eloquent\\Castable;\nuse Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n\nclass Address implements Castable\n{\n    // ...\n\n    /**\n     * Get the caster class to use when casting from / to this cast target.\n     *\n     * @param  array<string, mixed>  $arguments\n     */\n    public static function castUsing(array $arguments): CastsAttributes\n    {\n        return new class implements CastsAttributes\n        {\n            public function get(\n                Model $model,\n                string $key,\n                mixed $value,\n                array $attributes,\n            ): Address {\n                return new Address(\n                    $attributes['address_line_one'],\n                    $attributes['address_line_two']\n                );\n            }\n\n            public function set(\n                Model $model,\n                string $key,\n                mixed $value,\n                array $attributes,\n            ): array {\n                return [\n                    'address_line_one' => $value->lineOne,\n                    'address_line_two' => $value->lineTwo,\n                ];\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Feature Execution in PHP using Laravel Pennant\nDESCRIPTION: Demonstrates how to use the 'when' and 'unless' methods of the Feature facade to conditionally execute code based on feature flags.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Features\\NewApi;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse Laravel\\Pennant\\Feature;\n\nclass PodcastController\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index(Request $request): Response\n    {\n        return Feature::when(NewApi::class,\n            fn () => $this->resolveNewApiResponse($request),\n            fn () => $this->resolveLegacyApiResponse($request),\n        );\n    }\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn Feature::unless(NewApi::class,\n    fn () => $this->resolveLegacyApiResponse($request),\n    fn () => $this->resolveNewApiResponse($request),\n);\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Keys in Laravel Collection in PHP\nDESCRIPTION: Demonstrates the `select` method that extracts specified keys from each item in a collection of arrays, similar to an SQL SELECT statement. Requires a collection of associative arrays and an array of keys to preserve. Outputs a collection of arrays with only the selected keys present.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_105\n\nLANGUAGE: php\nCODE:\n```\n$users = collect([\n    ['name' => 'Taylor Otwell', 'role' => 'Developer', 'status' => 'active'],\n    ['name' => 'Victoria Faith', 'role' => 'Researcher', 'status' => 'active'],\n]);\n\n$users->select(['name', 'role']);\n\n/*\n    [\n        ['name' => 'Taylor Otwell', 'role' => 'Developer'],\n        ['name' => 'Victoria Faith', 'role' => 'Researcher'],\n    ],\n*/\n```\n\n----------------------------------------\n\nTITLE: Pulling Key-Value Pair with `Arr::pull()` - PHP\nDESCRIPTION: This snippet demonstrates how to use the `Arr::pull()` method to retrieve and remove a key-value pair from an array. The method returns the value associated with the given key and removes the key-value pair from the array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['name' => 'Desk', 'price' => 100];\n\n$name = Arr::pull($array, 'name');\n\n// $name: Desk\n\n// $array: ['price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Creating Integer Ranges with Laravel Collection in PHP\nDESCRIPTION: Shows the `range` method that creates a collection of integers between two given values inclusive. Requires no initial collection items and outputs a collection with sequential integer values representing the specified range.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_97\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect()->range(3, 6);\n\n$collection->all();\n\n// [3, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Laravel Octane\nDESCRIPTION: Nginx server block configuration to serve a Laravel Octane application, including static asset handling and proxy setup.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_13\n\nLANGUAGE: nginx\nCODE:\n```\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name domain.com;\n    server_tokens off;\n    root /home/forge/domain.com/public;\n\n    index index.php;\n\n    charset utf-8;\n\n    location /index.php {\n        try_files /not_exists @octane;\n    }\n\n    location / {\n        try_files $uri $uri/ @octane;\n    }\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    access_log off;\n    error_log  /var/log/nginx/domain.com-error.log error;\n\n    error_page 404 /index.php;\n\n    location @octane {\n        set $suffix \"\";\n\n        if ($uri = /index.php) {\n            set $suffix ?$query_string;\n        }\n\n        proxy_http_version 1.1;\n        proxy_set_header Host $http_host;\n        proxy_set_header Scheme $scheme;\n        proxy_set_header SERVER_PORT $server_port;\n        proxy_set_header REMOTE_ADDR $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        proxy_pass http://127.0.0.1:8000$suffix;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deduplicating Specific Characters in Laravel PHP\nDESCRIPTION: The deduplicate method can target specific characters by providing the character as the second argument.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_101\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('The---Laravel---Framework')->deduplicate('-');\n\n// The-Laravel-Framework\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Anonymous Events in Laravel\nDESCRIPTION: Shows how to broadcast anonymous events without creating dedicated event classes, including customizing event names and data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nBroadcast::on('orders.'.$order->id)->send();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"AnonymousEvent\",\n    \"data\": \"[]\",\n    \"channel\": \"orders.1\"\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nBroadcast::on('orders.'.$order->id)\n    ->as('OrderPlaced')\n    ->with($order)\n    ->send();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"OrderPlaced\",\n    \"data\": \"{ id: 1, total: 100 }\",\n    \"channel\": \"orders.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Laravel Collection Macro PHP\nDESCRIPTION: Illustrates how to add a custom method (`toUpper`) to the `Collection` class using the static `macro` method. The macro closure is executed when the custom method is called and can access the collection instance via `$this`, allowing reuse of existing methods like `map`.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Collection;\nuse Illuminate\\Support\\Str;\n\nCollection::macro('toUpper', function () {\n    return $this->map(function (string $value) {\n        return Str::upper($value);\n    });\n});\n\n$collection = collect(['first', 'second']);\n\n$upper = $collection->toUpper();\n\n// ['FIRST', 'SECOND']\n```\n\n----------------------------------------\n\nTITLE: Transforming Input Before Validation in Laravel Prompts\nDESCRIPTION: Demonstrates how to transform user input before validation occurs using the transform argument in prompt functions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$name = text(\n    label: 'What is your name?',\n    transform: fn (string $value) => trim($value),\n    validate: fn (string $value) => match (true) {\n        strlen($value) < 3 => 'The name must be at least 3 characters.',\n        strlen($value) > 255 => 'The name must not exceed 255 characters.',\n        default => null\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Service Binding Using App Facade in Laravel\nDESCRIPTION: Example of registering a service binding outside of a service provider using the App facade. This provides access to the container anywhere in the application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Transistor;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Support\\Facades\\App;\n\nApp::bind(Transistor::class, function (Application $app) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Paddle Checkout Button in Blade\nDESCRIPTION: Blade component usage to display a Paddle checkout button with the checkout session data, which will handle the subscription process.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_33\n\nLANGUAGE: blade\nCODE:\n```\n<x-paddle-button :checkout=\"$checkout\" class=\"px-8 py-4\">\n    Subscribe\n</x-paddle-button>\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Trial Period Without Payment Method in Laravel Cashier\nDESCRIPTION: Shows how to create a new user with a trial period without collecting payment information up front by setting the trial_ends_at column during user creation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_92\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::create([\n    // ...\n    'trial_ends_at' => now()->addDays(10),\n]);\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Query Results\nDESCRIPTION: Demonstrates how to iterate through query results where each row is returned as a stdClass object with column values accessible as properties.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\n$users = DB::table('users')->get();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading CSS Files for Custom Pulse Cards\nDESCRIPTION: Example of defining a css method in a custom Pulse card component to load CSS files without publishing them to the public directory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nclass TopSellers extends Card\n{\n    // ...\n\n    protected function css()\n    {\n        return __DIR__.'/../../dist/top-sellers.css';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Model Broadcast Name and Payload in Laravel\nDESCRIPTION: Implements broadcastAs and broadcastWith methods to customize the broadcast event name and payload based on the event type, allowing different behavior for different model operations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The model event's broadcast name.\n */\npublic function broadcastAs(string $event): string|null\n{\n    return match ($event) {\n        'created' => 'post.created',\n        default => null,\n    };\n}\n\n/**\n * Get the data to broadcast for the model.\n *\n * @return array<string, mixed>\n */\npublic function broadcastWith(string $event): array\n{\n    return match ($event) {\n        'created' => ['title' => $this->title],\n        default => ['model' => $this],\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Incrementing UNSIGNED BIGINT Column in Laravel Migration\nDESCRIPTION: The bigIncrements method creates an auto-incrementing UNSIGNED BIGINT column as a primary key in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$table->bigIncrements('id');\n```\n\n----------------------------------------\n\nTITLE: Creating Blade Aliases for Vite Assets\nDESCRIPTION: Defining custom macros in a service provider to create aliases for Vite assets in Blade templates.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Vite::macro('image', fn (string $asset) => $this->asset(\"resources/images/{$asset}\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Cookies in Laravel Dusk\nDESCRIPTION: Check for the presence and value of encrypted and unencrypted cookies using methods like assertHasCookie and assertCookieValue.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertHasCookie($name);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertCookieValue($name, $value);\n```\n\n----------------------------------------\n\nTITLE: Blade Comments\nDESCRIPTION: Shows how to add comments in Blade templates that won't be included in rendered HTML.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_27\n\nLANGUAGE: blade\nCODE:\n```\n{{-- This comment will not be present in the rendered HTML --}}\n```\n\n----------------------------------------\n\nTITLE: Partitioning the Collection\nDESCRIPTION: The `partition` method divides the collection into two collections based on a condition, using a closure to determine the partition. The resulting variable contains an Illuminate\\Support\\Collection holding 2 Eloquent collection instances.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$partition = $users->partition(fn ($user) => $user->age > 18);\n\ndump($partition::class);    // Illuminate\\Support\\Collection\ndump($partition[0]::class); // Illuminate\\Database\\Eloquent\\Collection\ndump($partition[1]::class); // Illuminate\\Database\\Eloquent\\Collection\n```\n\n----------------------------------------\n\nTITLE: Creating Subscriptions with Multiple Products in Laravel Cashier\nDESCRIPTION: Method for creating a new subscription with multiple price products attached, allowing a single subscription to contain different billable items.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/user/subscribe', function (Request $request) {\n    $request->user()->newSubscription('default', [\n        'price_monthly',\n        'price_chat',\n    ])->create($request->paymentMethodId);\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Rate Limiter in Laravel\nDESCRIPTION: This snippet shows how to define a global rate limiter that allows 1000 requests per minute without user-specific segmentation. It's a simpler form of rate limiting that applies the same limit to all requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Cache\\RateLimiting\\Limit;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\n/**\n * Bootstrap any application services.\n */\nprotected function boot(): void\n{\n    RateLimiter::for('global', function (Request $request) {\n        return Limit::perMinute(1000);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using morphWith for Nested Eager Loading of morphTo Relationships\nDESCRIPTION: This example demonstrates how to eager load different nested relationships based on the polymorphic type using the morphWith method with a closure-based approach.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_81\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\n$activities = ActivityFeed::query()\n    ->with(['parentable' => function (MorphTo $morphTo) {\n        $morphTo->morphWith([\n            Event::class => ['calendar'],\n            Photo::class => ['tags'],\n            Post::class => ['author'],\n        ]);\n    }])->get();\n```\n\n----------------------------------------\n\nTITLE: Converting Model to JSON\nDESCRIPTION: Shows various methods to convert a model to JSON, including pretty printing options\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\nreturn $user->toJson();\n\nreturn $user->toJson(JSON_PRETTY_PRINT);\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware to Set Default URL Parameters in Laravel (PHP)\nDESCRIPTION: Defines a Laravel middleware (`SetDefaultLocaleForUrls`) that uses `URL::defaults` within its `handle` method to set a default value for the 'locale' URL parameter based on the authenticated user's locale. Requires importing `Closure`, `Request`, `URL`, and `Response`.\nSOURCE: https://github.com/laravel/docs/blob/12.x/urls.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\URL;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass SetDefaultLocaleForUrls\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        URL::defaults(['locale' => $request->user()->locale]);\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Pint via Composer\nDESCRIPTION: Command to install Laravel Pint as a development dependency using Composer package manager\nSOURCE: https://github.com/laravel/docs/blob/12.x/pint.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/pint --dev\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Resource Routes in Laravel\nDESCRIPTION: Demonstrates how to create nested resource routes for related resources, such as comments belonging to a photo.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\PhotoCommentController;\n\nRoute::resource('photos.comments', PhotoCommentController::class);\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration for Reverb\nDESCRIPTION: Supervisor configuration to increase the minimum file descriptors limit for handling connections\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[supervisord]\n...\nminfds=10000\n```\n\n----------------------------------------\n\nTITLE: Laravel Resource Class with Custom Response Handling\nDESCRIPTION: Shows how to define a UserResource class with a withResponse method to customize the response headers whenever the resource is returned as the outermost resource.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass UserResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array<string, mixed>\n     */\n    public function toArray(Request $request): array\n    {\n        return [\n            'id' => $this->id,\n        ];\n    }\n\n    /**\n     * Customize the outgoing response for the resource.\n     */\n    public function withResponse(Request $request, JsonResponse $response): void\n    {\n        $response->header('X-Value', 'True');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Billing Portal Redirect Route\nDESCRIPTION: Defines a route that initiates a Stripe Customer Billing Portal session and redirects the user\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/billing', function (Request $request) {\n    return $request->user()->redirectToBillingPortal(route('dashboard'));\n})->middleware(['auth'])->name('billing');\n```\n\n----------------------------------------\n\nTITLE: Casting Attribute to Stringable in Laravel Eloquent (PHP)\nDESCRIPTION: Demonstrates using the `Illuminate\\Database\\Eloquent\\Casts\\AsStringable` class within the `casts()` method of a Laravel Eloquent model (`User`) to cast the `directory` attribute to a fluent `Illuminate\\Support\\Stringable` object. This allows for easier string manipulation on the attribute. Requires importing the `AsStringable` class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Casts\\AsStringable;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Get the attributes that should be cast.\n     *\n     * @return array<string, string>\n     */\n    protected function casts(): array\n    {\n        return [\n            'directory' => AsStringable::class,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using decrypt() function for decryption in Laravel PHP\nDESCRIPTION: The decrypt() function decrypts the given value using Laravel's encryption system as an alternative to the Crypt facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_84\n\nLANGUAGE: php\nCODE:\n```\n$password = decrypt($value);\n```\n\n----------------------------------------\n\nTITLE: Cancelling Batches and Skipping Cancelled Batch Jobs\nDESCRIPTION: Shows how to cancel a batch and how to use the SkipIfBatchCancelled middleware to prevent processing of jobs in cancelled batches.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Execute the job.\n */\npublic function handle(): void\n{\n    if ($this->user->exceedsImportLimit()) {\n        return $this->batch()->cancel();\n    }\n\n    if ($this->batch()->cancelled()) {\n        return;\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Queue\\Middleware\\SkipIfBatchCancelled;\n\n/**\n * Get the middleware the job should pass through.\n */\npublic function middleware(): array\n{\n    return [new SkipIfBatchCancelled];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Blade @unless Directive for Negative Conditions\nDESCRIPTION: Shows how to use the @unless directive which renders content when a condition is false, providing a clean alternative to @if(!condition).\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n@unless (Auth::check())\n    You are not signed in.\n@endunless\n```\n\n----------------------------------------\n\nTITLE: Accessing Slot Attributes in Laravel Blade\nDESCRIPTION: Demonstrates how to access and manipulate attributes assigned to slots within a component's template.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_67\n\nLANGUAGE: blade\nCODE:\n```\n@props([\n    'heading',\n    'footer',\n])\n\n<div {{ $attributes->class(['border']) }}>\n    <h1 {{ $heading->attributes->class(['text-lg']) }}>\n        {{ $heading }}\n    </h1>\n\n    {{ $slot }}\n\n    <footer {{ $footer->attributes->class(['text-gray-700']) }}>\n        {{ $footer }}\n    </footer>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Array Validation in Laravel\nDESCRIPTION: This code shows how to perform complex conditional validation on nested arrays, where the validation rule depends on another field in the same array item.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n$input = [\n    'channels' => [\n        [\n            'type' => 'email',\n            'address' => 'abigail@example.com',\n        ],\n        [\n            'type' => 'url',\n            'address' => 'https://example.com',\n        ],\n    ],\n];\n\n$validator->sometimes('channels.*.address', 'email', function (Fluent $input, Fluent $item) {\n    return $item->type === 'email';\n});\n\n$validator->sometimes('channels.*.address', 'url', function (Fluent $input, Fluent $item) {\n    return $item->type !== 'email';\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced User Prompts with Placeholders in Laravel Command\nDESCRIPTION: Shows how to implement user prompts with placeholder text using tuples in Laravel console commands.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'user' => ['Which user ID should receive the mail?', 'E.g. 123'],\n];\n```\n\n----------------------------------------\n\nTITLE: Simplified Where Clause with Equality Operator\nDESCRIPTION: Shows the shorthand syntax for equality comparisons in where clauses where the operator can be omitted.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')->where('votes', 100)->get();\n```\n\n----------------------------------------\n\nTITLE: Using Str::endsWith for String Suffix Checking in PHP\nDESCRIPTION: The Str::endsWith method determines if the given string ends with the specified value. It can also check against multiple possible endings by passing an array of values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::endsWith('This is my name', 'name');\n\n// true\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::endsWith('This is my name', ['name', 'foo']);\n\n// true\n\n$result = Str::endsWith('This is my name', ['this', 'foo']);\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Security in Valet\nDESCRIPTION: Commands to enable and disable TLS/HTTPS for Valet sites.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nvalet secure laravel\n\nvalet unsecure laravel\n```\n\n----------------------------------------\n\nTITLE: Chunking Results with chunk() Method\nDESCRIPTION: Demonstrates processing large datasets efficiently using the chunk() method to handle records in smaller batches.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Flight;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nFlight::chunk(200, function (Collection $flights) {\n    foreach ($flights as $flight) {\n        // ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached with UNIX Socket in Laravel\nDESCRIPTION: Configuration for Memcached cache driver using UNIX socket instead of TCP/IP connection, setting host to socket path and port to 0.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'memcached' => [\n    // ...\n\n    'servers' => [\n        [\n            'host' => '/var/run/memcached/memcached.sock',\n            'port' => 0,\n            'weight' => 100\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Documenting Generic Types in PHPDoc for Laravel\nDESCRIPTION: Example showing how to document methods with generic return types in Laravel by using the @return attribute to specify the generic type information that cannot be expressed in PHP's native type system.\nSOURCE: https://github.com/laravel/docs/blob/12.x/contributions.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the attachments for the message.\n *\n * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n */\npublic function attachments(): array\n{\n    return [\n        Attachment::fromStorage('/path/to/file'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Xdebug for Artisan Commands\nDESCRIPTION: Shell commands demonstrating how to run Artisan commands with and without Xdebug debugging enabled using the sail debug command.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n# Run an Artisan command without Xdebug...\nsail artisan migrate\n\n# Run an Artisan command with Xdebug...\nsail debug migrate\n```\n\n----------------------------------------\n\nTITLE: Preventing Telescope Auto-Discovery in composer.json\nDESCRIPTION: JSON configuration to prevent Laravel from auto-discovering the Telescope package, used when implementing a local-only installation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"extra\": {\n    \"laravel\": {\n        \"dont-discover\": [\n            \"laravel/telescope\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Pulse Dashboard View\nDESCRIPTION: Command to publish the Pulse dashboard view for customization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --tag=pulse-dashboard\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Server for Laravel\nDESCRIPTION: Nginx server configuration for serving Laravel applications, including server blocks, routing rules, and security headers. This configuration directs all requests to public/index.php and includes security best practices.\nSOURCE: https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com;\n    root /srv/example.com/public;\n\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-Content-Type-Options \"nosniff\";\n\n    index index.php;\n\n    charset utf-8;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    error_page 404 /index.php;\n\n    location ~ ^/index\\.php(/|$) {\n        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;\n        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        include fastcgi_params;\n        fastcgi_hide_header X-Powered-By;\n    }\n\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Non-Empty Strings in PHP\nDESCRIPTION: Demonstrates the use of the 'isNotEmpty' method to check if a string is not empty after trimming whitespace.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_117\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('  ')->trim()->isNotEmpty();\n\n// false\n\n$result = Str::of('Laravel')->trim()->isNotEmpty();\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Setting Pusher Environment Variables\nDESCRIPTION: Environment variable configuration for Pusher in the .env file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nPUSHER_APP_ID=\"your-pusher-app-id\"\nPUSHER_APP_KEY=\"your-pusher-key\"\nPUSHER_APP_SECRET=\"your-pusher-secret\"\nPUSHER_HOST=\nPUSHER_PORT=443\nPUSHER_SCHEME=\"https\"\nPUSHER_APP_CLUSTER=\"mt1\"\n\nVITE_APP_NAME=\"${APP_NAME}\"\nVITE_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\"\nVITE_PUSHER_HOST=\"${PUSHER_HOST}\"\nVITE_PUSHER_PORT=\"${PUSHER_PORT}\"\nVITE_PUSHER_SCHEME=\"${PUSHER_SCHEME}\"\nVITE_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\"\n```\n\n----------------------------------------\n\nTITLE: View Composer Class Implementation\nDESCRIPTION: Example of a view composer class that binds data to a view when it's rendered.\nSOURCE: https://github.com/laravel/docs/blob/12.x/views.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\View\\Composers;\n\nuse App\\Repositories\\UserRepository;\nuse Illuminate\\View\\View;\n\nclass ProfileComposer\n{\n    public function __construct(\n        protected UserRepository $users,\n    ) {}\n\n    public function compose(View $view): void\n    {\n        $view->with('count', $this->users->count());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Deleting Session Data in Laravel\nDESCRIPTION: Method to retrieve a session value and delete it in a single operation using the pull() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$value = $request->session()->pull('key', 'default');\n```\n\n----------------------------------------\n\nTITLE: Using throttle() Method with Laravel LazyCollection in PHP\nDESCRIPTION: Shows the throttle() method of Laravel's LazyCollection which delays enumeration of each item by a specified number of seconds, enabling rate-limiting scenarios such as calling external APIs at a controlled pace. Requires Laravel's LazyCollection and model querying capabilities. The example throttles User model queries where VIP users are processed one per second, ideal for managing API request limits or resource usage.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_161\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nUser::where('vip', true)\n    ->cursor()\n    ->throttle(seconds: 1)\n    ->each(function (User $user) {\n        // Call external API...\n    });\n```\n\n----------------------------------------\n\nTITLE: Channel Class Generation Command\nDESCRIPTION: Artisan command to generate a new channel class for authorization logic.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:channel OrderChannel\n```\n\n----------------------------------------\n\nTITLE: Image Validation with SVG Support in Laravel 12\nDESCRIPTION: This code shows how to configure the image validation rule to allow SVG images in Laravel 12, which now excludes SVGs by default for security reasons.\nSOURCE: https://github.com/laravel/docs/blob/12.x/upgrade.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rules\\File;\n\n'photo' => 'required|image:allow_svg'\n\n// Or...\n'photo' => ['required', File::image(allowSvg: true)],\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Update Script for Telescope Assets in composer.json\nDESCRIPTION: JSON configuration to automatically publish Laravel assets after Composer updates, helping keep Telescope assets up-to-date.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"post-update-cmd\": [\n            \"@php artisan vendor:publish --tag=laravel-assets --ansi --force\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener Methods in Laravel\nDESCRIPTION: Example of a listener class method that handles an event. Laravel will automatically register methods named 'handle' or '__invoke' as event listeners for the type-hinted event in the method signature.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Events\\PodcastProcessed;\n\nclass SendPodcastNotification\n{\n    /**\n     * Handle the given event.\n     */\n    public function handle(PodcastProcessed $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Laravel Sail\nDESCRIPTION: Command to start the Sail Docker environment after installation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/sail up\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Values with `Arr::map()` - PHP\nDESCRIPTION: This snippet shows how to use `Arr::map()` to iterate through an array and apply a callback function to each value. The original array values are replaced by the values returned by the callback function, effectively transforming the array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['first' => 'james', 'last' => 'kirk'];\n\n$mapped = Arr::map($array, function (string $value, string $key) {\n    return ucfirst($value);\n});\n\n// ['first' => 'James', 'last' => 'Kirk']\n```\n\n----------------------------------------\n\nTITLE: Defining Global Shorthand Selectors in Laravel Dusk\nDESCRIPTION: The `siteElements` method in the base Page class defines global shorthand selectors that are available on every page throughout the application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the global element shortcuts for the site.\n *\n * @return array<string, string>\n */\npublic static function siteElements(): array\n{\n    return [\n        '@element' => '#selector',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mail Transport in Laravel Config\nDESCRIPTION: Configuration array for setting up the custom mail transport in Laravel's mail configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n'mailchimp' => [\n    'transport' => 'mailchimp',\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Defining a Feature in Laravel Pennant\nDESCRIPTION: Example of defining a feature using the Feature facade in a service provider. This snippet demonstrates defining a 'new-api' feature with conditional logic.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Lottery;\nuse Illuminate\\Support\\ServiceProvider;\nuse Laravel\\Pennant\\Feature;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Feature::define('new-api', fn (User $user) => match (true) {\n            $user->isInternalTeamMember() => true,\n            $user->isHighTrafficCustomer() => false,\n            default => Lottery::odds(1 / 100),\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Blade View Template\nDESCRIPTION: Example of a simple Blade view template that displays a greeting with a dynamic name variable.\nSOURCE: https://github.com/laravel/docs/blob/12.x/views.md#2025-04-21_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<html>\n    <body>\n        <h1>Hello, {{ $name }}</h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Runtime Chaperone Configuration in Laravel\nDESCRIPTION: Shows how to opt-in to automatic parent hydration at runtime when eager loading relationships\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\n$posts = Post::with([\n    'comments' => fn ($comments) => $comments->chaperone(),\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Displaying Laravel Facade Reference Table in Markdown\nDESCRIPTION: This markdown snippet creates a table that lists Laravel facades, their underlying classes, and service container bindings. It uses HTML for overflow handling and includes links to API documentation for each class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"overflow-auto\">\n\n| Facade | Class | Service Container Binding |\n| --- | --- | --- |\n| App | [Illuminate\\Foundation\\Application](https://api.laravel.com/docs/{{version}}/Illuminate/Foundation/Application.html) | `app` |\n| Artisan | [Illuminate\\Contracts\\Console\\Kernel](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Console/Kernel.html) | `artisan` |\n| Auth (Instance) | [Illuminate\\Contracts\\Auth\\Guard](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Auth/Guard.html) | `auth.driver` |\n| Auth | [Illuminate\\Auth\\AuthManager](https://api.laravel.com/docs/{{version}}/Illuminate/Auth/AuthManager.html) | `auth` |\n| Blade | [Illuminate\\View\\Compilers\\BladeCompiler](https://api.laravel.com/docs/{{version}}/Illuminate/View/Compilers/BladeCompiler.html) | `blade.compiler` |\n| Broadcast (Instance) | [Illuminate\\Contracts\\Broadcasting\\Broadcaster](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Broadcasting/Broadcaster.html) | &nbsp; |\n| Broadcast | [Illuminate\\Contracts\\Broadcasting\\Factory](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Broadcasting/Factory.html) | &nbsp; |\n| Bus | [Illuminate\\Contracts\\Bus\\Dispatcher](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Bus/Dispatcher.html) | &nbsp; |\n| Cache (Instance) | [Illuminate\\Cache\\Repository](https://api.laravel.com/docs/{{version}}/Illuminate/Cache/Repository.html) | `cache.store` |\n| Cache | [Illuminate\\Cache\\CacheManager](https://api.laravel.com/docs/{{version}}/Illuminate/Cache/CacheManager.html) | `cache` |\n| Config | [Illuminate\\Config\\Repository](https://api.laravel.com/docs/{{version}}/Illuminate/Config/Repository.html) | `config` |\n| Context | [Illuminate\\Log\\Context\\Repository](https://api.laravel.com/docs/{{version}}/Illuminate/Log/Context/Repository.html) | &nbsp; |\n| Cookie | [Illuminate\\Cookie\\CookieJar](https://api.laravel.com/docs/{{version}}/Illuminate/Cookie/CookieJar.html) | `cookie` |\n| Crypt | [Illuminate\\Encryption\\Encrypter](https://api.laravel.com/docs/{{version}}/Illuminate/Encryption/Encrypter.html) | `encrypter` |\n| Date | [Illuminate\\Support\\DateFactory](https://api.laravel.com/docs/{{version}}/Illuminate/Support/DateFactory.html) | `date` |\n| DB (Instance) | [Illuminate\\Database\\Connection](https://api.laravel.com/docs/{{version}}/Illuminate/Database/Connection.html) | `db.connection` |\n| DB | [Illuminate\\Database\\DatabaseManager](https://api.laravel.com/docs/{{version}}/Illuminate/Database/DatabaseManager.html) | `db` |\n| Event | [Illuminate\\Events\\Dispatcher](https://api.laravel.com/docs/{{version}}/Illuminate/Events/Dispatcher.html) | `events` |\n| Exceptions (Instance) | [Illuminate\\Contracts\\Debug\\ExceptionHandler](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Debug/ExceptionHandler.html) | &nbsp; |\n| Exceptions | [Illuminate\\Foundation\\Exceptions\\Handler](https://api.laravel.com/docs/{{version}}/Illuminate/Foundation/Exceptions/Handler.html) | &nbsp; |\n| File | [Illuminate\\Filesystem\\Filesystem](https://api.laravel.com/docs/{{version}}/Illuminate/Filesystem/Filesystem.html) | `files` |\n| Gate | [Illuminate\\Contracts\\Auth\\Access\\Gate](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Auth/Access/Gate.html) | &nbsp; |\n| Hash | [Illuminate\\Contracts\\Hashing\\Hasher](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Hashing/Hasher.html) | `hash` |\n| Http | [Illuminate\\Http\\Client\\Factory](https://api.laravel.com/docs/{{version}}/Illuminate/Http/Client/Factory.html) | &nbsp; |\n| Lang | [Illuminate\\Translation\\Translator](https://api.laravel.com/docs/{{version}}/Illuminate/Translation/Translator.html) | `translator` |\n| Log | [Illuminate\\Log\\LogManager](https://api.laravel.com/docs/{{version}}/Illuminate/Log/LogManager.html) | `log` |\n| Mail | [Illuminate\\Mail\\Mailer](https://api.laravel.com/docs/{{version}}/Illuminate/Mail/Mailer.html) | `mailer` |\n| Notification | [Illuminate\\Notifications\\ChannelManager](https://api.laravel.com/docs/{{version}}/Illuminate/Notifications/ChannelManager.html) | &nbsp; |\n| Password (Instance) | [Illuminate\\Auth\\Passwords\\PasswordBroker](https://api.laravel.com/docs/{{version}}/Illuminate/Auth/Passwords/PasswordBroker.html) | `auth.password.broker` |\n| Password | [Illuminate\\Auth\\Passwords\\PasswordBrokerManager](https://api.laravel.com/docs/{{version}}/Illuminate/Auth/Passwords/PasswordBrokerManager.html) | `auth.password` |\n| Pipeline (Instance) | [Illuminate\\Pipeline\\Pipeline](https://api.laravel.com/docs/{{version}}/Illuminate/Pipeline/Pipeline.html) | &nbsp; |\n| Process | [Illuminate\\Process\\Factory](https://api.laravel.com/docs/{{version}}/Illuminate/Process/Factory.html) | &nbsp; |\n| Queue (Base Class) | [Illuminate\\Queue\\Queue](https://api.laravel.com/docs/{{version}}/Illuminate/Queue/Queue.html) | &nbsp; |\n| Queue (Instance) | [Illuminate\\Contracts\\Queue\\Queue](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Queue/Queue.html) | `queue.connection` |\n| Queue | [Illuminate\\Queue\\QueueManager](https://api.laravel.com/docs/{{version}}/Illuminate/Queue/QueueManager.html) | `queue` |\n| RateLimiter | [Illuminate\\Cache\\RateLimiter](https://api.laravel.com/docs/{{version}}/Illuminate/Cache/RateLimiter.html) | &nbsp; |\n| Redirect | [Illuminate\\Routing\\Redirector](https://api.laravel.com/docs/{{version}}/Illuminate/Routing/Redirector.html) | `redirect` |\n| Redis (Instance) | [Illuminate\\Redis\\Connections\\Connection](https://api.laravel.com/docs/{{version}}/Illuminate/Redis/Connections/Connection.html) | `redis.connection` |\n| Redis | [Illuminate\\Redis\\RedisManager](https://api.laravel.com/docs/{{version}}/Illuminate/Redis/RedisManager.html) | `redis` |\n| Request | [Illuminate\\Http\\Request](https://api.laravel.com/docs/{{version}}/Illuminate/Http/Request.html) | `request` |\n| Response (Instance) | [Illuminate\\Http\\Response](https://api.laravel.com/docs/{{version}}/Illuminate/Http/Response.html) | &nbsp; |\n| Response | [Illuminate\\Contracts\\Routing\\ResponseFactory](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Routing/ResponseFactory.html) | &nbsp; |\n| Route | [Illuminate\\Routing\\Router](https://api.laravel.com/docs/{{version}}/Illuminate/Routing/Router.html) | `router` |\n| Schedule | [Illuminate\\Console\\Scheduling\\Schedule](https://api.laravel.com/docs/{{version}}/Illuminate/Console/Scheduling/Schedule.html) | &nbsp; |\n| Schema | [Illuminate\\Database\\Schema\\Builder](https://api.laravel.com/docs/{{version}}/Illuminate/Database/Schema/Builder.html) | &nbsp; |\n| Session (Instance) | [Illuminate\\Session\\Store](https://api.laravel.com/docs/{{version}}/Illuminate/Session/Store.html) | `session.store` |\n| Session | [Illuminate\\Session\\SessionManager](https://api.laravel.com/docs/{{version}}/Illuminate/Session/SessionManager.html) | `session` |\n| Storage (Instance) | [Illuminate\\Contracts\\Filesystem\\Filesystem](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Filesystem/Filesystem.html) | `filesystem.disk` |\n| Storage | [Illuminate\\Filesystem\\FilesystemManager](https://api.laravel.com/docs/{{version}}/Illuminate/Filesystem/FilesystemManager.html) | `filesystem` |\n| URL | [Illuminate\\Routing\\UrlGenerator](https://api.laravel.com/docs/{{version}}/Illuminate/Routing/UrlGenerator.html) | `url` |\n| Validator (Instance) | [Illuminate\\Validation\\Validator](https://api.laravel.com/docs/{{version}}/Illuminate/Validation/Validator.html) | &nbsp; |\n| Validator | [Illuminate\\Validation\\Factory](https://api.laravel.com/docs/{{version}}/Illuminate/Validation/Factory.html) | `validator` |\n| View (Instance) | [Illuminate\\View\\View](https://api.laravel.com/docs/{{version}}/Illuminate/View/View.html) | &nbsp; |\n| View | [Illuminate\\View\\Factory](https://api.laravel.com/docs/{{version}}/Illuminate/View/Factory.html) | `view` |\n| Vite | [Illuminate\\Foundation\\Vite](https://api.laravel.com/docs/{{version}}/Illuminate/Foundation/Vite.html) | &nbsp; |\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Autoloaded Package Components in Laravel Views\nDESCRIPTION: Demonstrates how to use autoloaded package components in Laravel views using the package-name:: syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<x-nightshade::calendar />\n<x-nightshade::color-picker />\n```\n\n----------------------------------------\n\nTITLE: Attachable Object Implementation\nDESCRIPTION: Shows how to create an attachable object by implementing the Attachable interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Contracts\\Mail\\Attachable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Mail\\Attachment;\n\nclass Photo extends Model implements Attachable\n{\n    public function toMailAttachment(): Attachment\n    {\n        return Attachment::fromPath('/path/to/file');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Cashier Migrations\nDESCRIPTION: Artisan command to publish the database migrations required for Cashier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --tag=\"cashier-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Or Where Clauses in Laravel\nDESCRIPTION: Demonstrates the use of orWhere method to join conditions with OR operator, including nested conditions using closures.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->where('votes', '>', 100)\n    ->orWhere('name', 'John')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: Artisan command to run database migrations in Laravel application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Extracting Multiple Directory Levels Up in Laravel PHP\nDESCRIPTION: The dirname method can specify how many directory levels to trim from the string path.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_103\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('/foo/bar/baz')->dirname(2);\n\n// '/foo'\n```\n\n----------------------------------------\n\nTITLE: Installing Resend Driver Dependencies for Laravel\nDESCRIPTION: Command to install Resend's PHP SDK via Composer for use with Laravel's mail system.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require resend/resend-php\n```\n\n----------------------------------------\n\nTITLE: Conditionally Modifying a String Based on Content in Laravel\nDESCRIPTION: The whenContains method invokes the given closure if the string contains the given value. The closure will receive the fluent string instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_157\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('tony stark')\n    ->whenContains('tony', function (Stringable $string) {\n        return $string->title();\n    });\n\n// 'Tony Stark'\n```\n\n----------------------------------------\n\nTITLE: Creating MAC Address Column in Laravel Migration\nDESCRIPTION: The macAddress method creates a column intended to hold a MAC address in a Laravel database migration. The actual column type depends on the database system being used.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\n$table->macAddress('device');\n```\n\n----------------------------------------\n\nTITLE: Extending Passport Models\nDESCRIPTION: Example of overriding default Passport models with custom implementations in the AppServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Passport\\AuthCode;\nuse App\\Models\\Passport\\Client;\nuse App\\Models\\Passport\\PersonalAccessClient;\nuse App\\Models\\Passport\\RefreshToken;\nuse App\\Models\\Passport\\Token;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Passport::useTokenModel(Token::class);\n    Passport::useRefreshTokenModel(RefreshToken::class);\n    Passport::useAuthCodeModel(AuthCode::class);\n    Passport::useClientModel(Client::class);\n    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Configuration Repository Injection in Laravel Service Provider\nDESCRIPTION: Example of problematic configuration repository injection in a service singleton. This approach prevents the service from accessing updated configuration values that may change between requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    $this->app->singleton(Service::class, function (Application $app) {\n        return new Service($app->make('config'));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Middleware with Parameters in Laravel Routes\nDESCRIPTION: This snippet shows how to specify middleware parameters when defining routes in Laravel, using the EnsureUserHasRole middleware as an example.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\EnsureUserHasRole;\n\nRoute::put('/post/{id}', function (string $id) {\n    // ...\n})->middleware(EnsureUserHasRole::class.':editor');\n\n// Multiple parameters\nRoute::put('/post/{id}', function (string $id) {\n    // ...\n})->middleware(EnsureUserHasRole::class.':editor,publisher');\n```\n\n----------------------------------------\n\nTITLE: Removing Data with data_forget() in PHP\nDESCRIPTION: This snippet shows how to delete nested data entries using dot notation with data_forget(), supporting wildcards to remove multiple entries at once.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_54\n\nLANGUAGE: PHP\nCODE:\n```\n$data = ['products' => ['desk' => ['price' => 100]]];\n\ndata_forget($data, 'products.desk.price');\n\n// ['products' => ['desk' => []]]\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$data = [\n    'products' => [\n        ['name' => 'Desk 1', 'price' => 100],\n        ['name' => 'Desk 2', 'price' => 150],\n    ],\n];\n\ndata_forget($data, 'products.*.price');\n\n/*\n    [\n        'products' => [\n            ['name' => 'Desk 1'],\n            ['name' => 'Desk 2'],\n        ],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing a Notification with a Custom Channel in Laravel\nDESCRIPTION: Shows how to create a notification class that uses a custom channel by implementing the via method to return the custom channel class and providing a method to generate the appropriate message format.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Notifications;\n\nuse App\\Notifications\\Messages\\VoiceMessage;\nuse App\\Notifications\\VoiceChannel;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Notifications\\Notification;\n\nclass InvoicePaid extends Notification\n{\n    use Queueable;\n\n    /**\n     * Get the notification channels.\n     */\n    public function via(object $notifiable): string\n    {\n        return VoiceChannel::class;\n    }\n\n    /**\n     * Get the voice representation of the notification.\n     */\n    public function toVoice(object $notifiable): VoiceMessage\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Laravel Lottery with Query Duration Detection in PHP\nDESCRIPTION: Integrates Laravel's Lottery class with database query monitoring to conditionally report slow queries. This snippet uses CarbonInterval to specify a duration threshold and DB facade's whenQueryingForLongerThan method, executing Lottery-based callbacks with a 1-in-100 chance to report queries exceeding two seconds. It depends on CarbonInterval, DB facade, and Lottery classes. This setup is useful for selective error reporting without performance costs impacting all slow queries.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_133\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\CarbonInterval;\\nuse Illuminate\\Support\\Facades\\DB;\\nuse Illuminate\\Support\\Lottery;\\n\\nDB::whenQueryingForLongerThan(\\n    CarbonInterval::seconds(2),\\n    Lottery::odds(1, 100)->winner(fn () => report('Querying > 2 seconds.')),\\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Boolean Input Values in Laravel\nDESCRIPTION: Converting various truthy input values to proper boolean types using the boolean method, which handles common string representations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$archived = $request->boolean('archived');\n```\n\n----------------------------------------\n\nTITLE: Loading Vite Assets in Blade Template\nDESCRIPTION: Shows how to include Vite-managed assets in a Laravel Blade template using the @vite directive\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<head>\n    {{-- ... --}}\n\n    @vite(['resources/css/app.css', 'resources/js/app.js'])\n</head>\n```\n\n----------------------------------------\n\nTITLE: Invoice Download Route with Laravel Cashier\nDESCRIPTION: Implements a route for downloading transaction invoices. This route uses Cashier's redirectToInvoicePdf method to generate and serve the PDF invoice from Paddle.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_81\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Laravel\\Paddle\\Transaction;\n\nRoute::get('/download-invoice/{transaction}', function (Request $request, Transaction $transaction) {\n    return $transaction->redirectToInvoicePdf();\n})->name('download-invoice');\n```\n\n----------------------------------------\n\nTITLE: Custom Email Headers Configuration\nDESCRIPTION: Demonstrates how to add custom headers to email messages including Message-Id and references.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Mail\\Mailables\\Headers;\n\npublic function headers(): Headers\n{\n    return new Headers(\n        messageId: 'custom-message-id@example.com',\n        references: ['previous-message@example.com'],\n        text: [\n            'X-Custom-Header' => 'Custom Value',\n        ],\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserResource Class in Laravel\nDESCRIPTION: Creates a UserResource class extending JsonResource, defining the toArray method to transform the resource into an array for JSON response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass UserResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array<string, mixed>\n     */\n    public function toArray(Request $request): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'created_at' => $this->created_at,\n            'updated_at' => $this->updated_at,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Laravel Octane with File Watching\nDESCRIPTION: Command to start Laravel Octane server with automatic restart on file changes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan octane:start --watch\n```\n\n----------------------------------------\n\nTITLE: Creating Small Integer Column\nDESCRIPTION: Creates a SMALLINT column.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$table->smallInteger('votes');\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration for Horizon\nDESCRIPTION: Configuration file for setting up Supervisor process monitor to manage Laravel Horizon processes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[program:horizon]\nprocess_name=%(program_name)s\ncommand=php /home/forge/example.com/artisan horizon\nautostart=true\nautorestart=true\nuser=forge\nredirect_stderr=true\nstdout_logfile=/home/forge/example.com/horizon.log\nstopwaitsecs=3600\n```\n\n----------------------------------------\n\nTITLE: Purging Features in PHP with Laravel Pennant\nDESCRIPTION: Demonstrates how to purge single or multiple features from storage using Laravel Pennant's Feature class methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// Purging a single feature...\nFeature::purge('new-api');\n\n// Purging multiple features...\nFeature::purge(['new-api', 'purchase-button']);\n\nFeature::purge();\n```\n\n----------------------------------------\n\nTITLE: Number: Abbreviating Large Numbers in PHP\nDESCRIPTION: This snippet shows how to format large numbers into human-readable abbreviated strings (e.g., 1K, 1.23M) using Number::abbreviate(), supporting precision control.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_56\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::abbreviate(1000);\n// 1K\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::abbreviate(489939);\n// 490K\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::abbreviate(1230000, precision: 2);\n// 1.23M\n```\n\n----------------------------------------\n\nTITLE: Using Str::containsAll for Multiple String Content Checking in PHP\nDESCRIPTION: The Str::containsAll method determines if the given string contains all of the values in a given array. It also supports case-insensitive checking with the ignoreCase parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$containsAll = Str::containsAll('This is my name', ['my', 'name']);\n\n// true\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$containsAll = Str::containsAll('This is my name', ['MY', 'NAME'], ignoreCase: true);\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Events in Laravel\nDESCRIPTION: Example of disabling cache events for improved performance by setting the events configuration option to false in the cache configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n'database' => [\n    'driver' => 'database',\n    // ...\n    'events' => false,\n],\n```\n\n----------------------------------------\n\nTITLE: Providing Input to Process in PHP\nDESCRIPTION: Demonstrates how to provide input to a process using the input method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$result = Process::input('Hello World')->run('cat');\n```\n\n----------------------------------------\n\nTITLE: Implementing toMail for Markdown Notifications\nDESCRIPTION: This code shows how to implement the toMail method for a notification that uses a Markdown template. It passes data to the template and sets the notification subject.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the mail representation of the notification.\n */\npublic function toMail(object $notifiable): MailMessage\n{\n    $url = url('/invoice/'.$this->invoice->id);\n\n    return (new MailMessage)\n        ->subject('Invoice Paid')\n        ->markdown('mail.invoice.paid', ['url' => $url]);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Events with Union Types in Laravel Listeners\nDESCRIPTION: Example of a listener method that can handle multiple event types using PHP's union type syntax. This allows a single listener to respond to different event types with the same code.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Handle the given event.\n */\npublic function handle(PodcastProcessed|PodcastPublished $event): void\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rich Feature Values in PHP\nDESCRIPTION: Shows how to define features with rich values instead of binary states, using an example of different button colors.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\nuse Laravel\\Pennant\\Feature;\n\nFeature::define('purchase-button', fn (User $user) => Arr::random([\n    'blue-sapphire',\n    'seafoam-green',\n    'tart-orange',\n]));\n```\n\n----------------------------------------\n\nTITLE: Decrypting Laravel Environment File with Custom Cipher\nDESCRIPTION: Decrypt an encrypted environment file using a custom encryption cipher with the --cipher option.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan env:decrypt --key=qUWuNRdfuImXcKxZ --cipher=AES-128-CBC\n```\n\n----------------------------------------\n\nTITLE: Customizing Password Reset View in PHP\nDESCRIPTION: This PHP code demonstrates how to customize the password reset view in Laravel Fortify. It uses the Fortify::resetPasswordView method to return a custom view for the password reset form.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Http\\Request;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Fortify::resetPasswordView(function (Request $request) {\n        return view('auth.reset-password', ['request' => $request]);\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Chunking with chunkWhile() in PHP\nDESCRIPTION: The `chunkWhile` method breaks a collection into smaller collections based on the result of a given callback function. A new chunk is started when the callback returns `false`. The callback receives the current value, key, and the chunk being built so far.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(str_split('AABBCCCD'));\n\n$chunks = $collection->chunkWhile(function (string $value, int $key, Collection $chunk) {\n    return $value === $chunk->last();\n});\n\n$chunks->all();\n\n// [['A', 'A'], ['B', 'B'], ['C', 'C', 'C'], ['D']]\n```\n\n----------------------------------------\n\nTITLE: Allowing All Attributes for Mass Assignment with Empty $guarded Array\nDESCRIPTION: Shows how to make all model attributes mass assignable by defining an empty $guarded property, though this approach requires careful handling of user input.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The attributes that aren't mass assignable.\n *\n * @var array<string>|bool\n */\nprotected $guarded = [];\n```\n\n----------------------------------------\n\nTITLE: Checking for Multiple Attributes in Laravel Blade\nDESCRIPTION: Uses the has method with an array argument to check if all specified attributes are present in a component's attribute bag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_54\n\nLANGUAGE: blade\nCODE:\n```\n@if ($attributes->has(['name', 'class']))\n    <div>All of the attributes are present</div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Displaying Two Factor Authentication Confirmation Success in HTML\nDESCRIPTION: This snippet shows how to display a success message when two factor authentication has been confirmed and enabled successfully.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n@if (session('status') == 'two-factor-authentication-confirmed')\n    <div class=\"mb-4 font-medium text-sm\">\n        Two factor authentication confirmed and enabled successfully.\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Method Invocation with Container\nDESCRIPTION: Demonstrates how to invoke methods using the container while automatically injecting dependencies.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse App\\Services\\AppleMusic;\n\nclass PodcastStats\n{\n    /**\n     * Generate a new podcast stats report.\n     */\n    public function generate(AppleMusic $apple): array\n    {\n        return [\n            // ...\n        ];\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\PodcastStats;\nuse Illuminate\\Support\\Facades\\App;\n\n$stats = App::call([new PodcastStats, 'generate']);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\AppleMusic;\nuse Illuminate\\Support\\Facades\\App;\n\n$result = App::call(function (AppleMusic $apple) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Class Name Without Namespace in Laravel PHP\nDESCRIPTION: The classBasename method returns the class name from a fully qualified class name by removing the namespace portion.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_90\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$class = Str::of('Foo\\Bar\\Baz')->classBasename();\n\n// 'Baz'\n```\n\n----------------------------------------\n\nTITLE: Capitalizing the First Character of a String in Laravel\nDESCRIPTION: The ucfirst method returns the given string with the first character capitalized.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_152\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('foo bar')->ucfirst();\n\n// Foo bar\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Any Key with `Arr::hasAny()` - PHP\nDESCRIPTION: This snippet shows how to use `Arr::hasAny()` to check if any of the provided keys exist within a nested array using dot notation. It returns `true` if at least one key exists and `false` otherwise.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['product' => ['name' => 'Desk', 'price' => 100]];\n\n$contains = Arr::hasAny($array, 'product.name');\n\n// true\n\n$contains = Arr::hasAny($array, ['product.name', 'product.discount']);\n\n// true\n\n$contains = Arr::hasAny($array, ['category', 'product.discount']);\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Setting Default Mailer to Failover in Laravel\nDESCRIPTION: This snippet shows how to set the failover mailer as the default mailer in Laravel's mail configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('MAIL_MAILER', 'failover'),\n```\n\n----------------------------------------\n\nTITLE: Creating Rules Directory using Artisan Command\nDESCRIPTION: The Rules directory is created when you execute the make:rule command. It contains custom validation rule objects that encapsulate complex validation logic.\nSOURCE: https://github.com/laravel/docs/blob/12.x/structure.md#2025-04-21_snippet_5\n\nLANGUAGE: artisan\nCODE:\n```\nmake:rule\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Managing Payment Methods in Laravel Cashier\nDESCRIPTION: Demonstrates various methods for retrieving, checking, and updating payment methods using Laravel Cashier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$paymentMethods = $user->paymentMethods();\n\n$paymentMethods = $user->paymentMethods('sepa_debit');\n\n$paymentMethod = $user->defaultPaymentMethod();\n\n$paymentMethod = $user->findPaymentMethod($paymentMethodId);\n\nif ($user->hasDefaultPaymentMethod()) {\n    // ...\n}\n\nif ($user->hasPaymentMethod()) {\n    // ...\n}\n\nif ($user->hasPaymentMethod('sepa_debit')) {\n    // ...\n}\n\n$user->updateDefaultPaymentMethod($paymentMethod);\n\n$user->updateDefaultPaymentMethodFromStripe();\n\n$user->addPaymentMethod($paymentMethod);\n```\n\n----------------------------------------\n\nTITLE: Using Global Session Helper in Laravel Routes\nDESCRIPTION: Example of using the global session() helper function to retrieve and store session data within a route definition.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/home', function () {\n    // Retrieve a piece of data from the session...\n    $value = session('key');\n\n    // Specifying a default value...\n    $value = session('key', 'default');\n\n    // Store a piece of data in the session...\n    session(['key' => 'value']);\n});\n```\n\n----------------------------------------\n\nTITLE: Container Class Dependency Resolution Example in Laravel 12\nDESCRIPTION: This example demonstrates the changes in how Laravel 12's dependency injection container now respects default values of class properties, showing the difference between Laravel 11.x and 12.x behavior.\nSOURCE: https://github.com/laravel/docs/blob/12.x/upgrade.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Example\n{\n    public function __construct(public ?Carbon $date = null) {}\n}\n\n$example = resolve(Example::class);\n\n// <= 11.x\n$example->date instanceof Carbon;\n\n// >= 12.x\n$example->date === null;\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Key Constraints in Laravel Migrations\nDESCRIPTION: Demonstrates the verbose syntax for creating a foreign key constraint in Laravel migrations. Creates a user_id column that references the id column on the users table.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('posts', function (Blueprint $table) {\n    $table->unsignedBigInteger('user_id');\n\n    $table->foreign('user_id')->references('id')->on('users');\n});\n```\n\n----------------------------------------\n\nTITLE: Initiating Product Checkout with Stripe in PHP\nDESCRIPTION: This code snippet shows how to initiate a Stripe Checkout session for a product using Laravel Cashier. It demonstrates basic usage and how to specify quantity and custom success/cancel URLs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_111\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/product-checkout', function (Request $request) {\n    return $request->user()->checkout(['price_tshirt' => 1], [\n        'success_url' => route('your-success-route'),\n        'cancel_url' => route('your-cancel-route'),\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Including Soft Deleted Models in Resource Routes\nDESCRIPTION: How to configure resource routes to include soft deleted models in Laravel, allowing access to soft deleted resources through certain routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\PhotoController;\n\nRoute::resource('photos', PhotoController::class)->withTrashed();\n```\n\n----------------------------------------\n\nTITLE: Configuring SFTP Driver in Laravel\nDESCRIPTION: Example configuration for setting up an SFTP filesystem in Laravel's filesystems.php config file, including authentication options and file permissions settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'sftp' => [\n    'driver' => 'sftp',\n    'host' => env('SFTP_HOST'),\n\n    // Settings for basic authentication...\n    'username' => env('SFTP_USERNAME'),\n    'password' => env('SFTP_PASSWORD'),\n\n    // Settings for SSH key based authentication with encryption password...\n    'privateKey' => env('SFTP_PRIVATE_KEY'),\n    'passphrase' => env('SFTP_PASSPHRASE'),\n\n    // Settings for file / directory permissions...\n    'visibility' => 'private', // `private` = 0600, `public` = 0644\n    'directory_visibility' => 'private', // `private` = 0700, `public` = 0755\n\n    // Optional SFTP Settings...\n    // 'hostFingerprint' => env('SFTP_HOST_FINGERPRINT'),\n    // 'maxTries' => 4,\n    // 'passphrase' => env('SFTP_PASSPHRASE'),\n    // 'port' => env('SFTP_PORT', 22),\n    // 'root' => env('SFTP_ROOT', ''),\n    // 'timeout' => 30,\n    // 'useAgent' => true,\n],\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Input Data in Laravel Request\nDESCRIPTION: Methods to retrieve all input data from an HTTP request as either an array or collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$input = $request->all();\n```\n\n----------------------------------------\n\nTITLE: Displaying Password Reset Status in HTML\nDESCRIPTION: This snippet shows how to display the status of a password reset link request using a Blade template. It checks for the presence of a 'status' session variable and displays it in a styled div.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n@if (session('status'))\n    <div class=\"mb-4 font-medium text-sm text-green-600\">\n        {{ session('status') }}\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Input Value in Laravel\nDESCRIPTION: Using the input method to retrieve a specific input value from the request by its name.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$name = $request->input('name');\n```\n\n----------------------------------------\n\nTITLE: Scoped Event Faking in Laravel Tests (PHPUnit)\nDESCRIPTION: This snippet demonstrates how to use scoped event faking in Laravel tests using PHPUnit. It shows how to fake events for a specific portion of the test while allowing normal event dispatching outside that scope.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse App\\Events\\OrderCreated;\nuse App\\Models\\Order;\nuse Illuminate\\Support\\Facades\\Event;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * Test order process.\n     */\n    public function test_orders_can_be_processed(): void\n    {\n        $order = Event::fakeFor(function () {\n            $order = Order::factory()->create();\n\n            Event::assertDispatched(OrderCreated::class);\n\n            return $order;\n        });\n\n        // Events are dispatched as normal and observers will run ...\n        $order->update([...]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Prefix Groups in Laravel\nDESCRIPTION: Demonstrates how to prefix a group of routes with a common URI segment using the prefix() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nRoute::prefix('admin')->group(function () {\n    Route::get('/users', function () {\n        // Matches The \"/admin/users\" URL\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Paddle Checkout Implementation\nDESCRIPTION: Custom implementation of Paddle checkout without using built-in Blade components. Includes customer data and custom attributes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<?php\n$items = $checkout->getItems();\n$customer = $checkout->getCustomer();\n$custom = $checkout->getCustomData();\n?>\n\n<a\n    href='#!'\n    class='paddle_button'\n    data-items='{!! json_encode($items) !!}'\n    @if ($customer) data-customer-id='{{ $customer->paddle_id }}' @endif\n    @if ($custom) data-custom-data='{{ json_encode($custom) }}' @endif\n    @if ($returnUrl = $checkout->getReturnUrl()) data-success-url='{{ $returnUrl }}' @endif\n>\n    Buy Product\n</a>\n```\n\n----------------------------------------\n\nTITLE: Displaying Calculated Prices in Blade\nDESCRIPTION: A Blade template snippet that iterates through price objects and displays product names with their calculated totals, useful for showing discounted prices.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_26\n\nLANGUAGE: blade\nCODE:\n```\n<ul>\n    @foreach ($prices as $price)\n        <li>{{ $price->product['name'] }} - {{ $price->total() }}</li>\n    @endforeach\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Ensuring Fixed Minimum Execution Time With Laravel Timebox for Secure Callback Execution in PHP\nDESCRIPTION: Shows usage of Laravel's Timebox class to execute a callback ensuring its execution time meets a fixed minimum duration (in microseconds). This is particularly important to defend against timing attacks in sensitive operations like cryptography or authentication by normalizing response times. The call method executes the given closure and waits to complete the specified microseconds, even re-throwing exceptions after delay completion. Requires Illuminate\\Support\\Timebox and accepts a closure plus a microseconds integer limit parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_144\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Timebox;\\n\\n(new Timebox)->call(function ($timebox) {\\n    // ...\\n}, microseconds: 10000);\n```\n\n----------------------------------------\n\nTITLE: Chunking Collections with chunk() in PHP\nDESCRIPTION: The `chunk` method divides a collection into multiple smaller collections, each containing a specified number of items. The last chunk may contain fewer items if the total count is not evenly divisible.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5, 6, 7]);\n\n$chunks = $collection->chunk(4);\n\n$chunks->all();\n\n// [[1, 2, 3, 4], [5, 6, 7]]\n```\n\n----------------------------------------\n\nTITLE: Asserting Process Execution in Laravel Tests\nDESCRIPTION: This snippet demonstrates how to use the assertRan method to verify that a specific process was invoked, with an option to use a closure for more detailed assertions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Process;\n\nProcess::assertRan('ls -la');\n\nProcess::assertRan(fn ($process, $result) =>\n    $process->command === 'ls -la' &&\n    $process->path === __DIR__ &&\n    $process->timeout === 60\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Response Status Codes\nDESCRIPTION: Demonstrates various methods to check the status code of the HTTP response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$response->ok() : bool;                  // 200 OK\n$response->created() : bool;             // 201 Created\n$response->accepted() : bool;            // 202 Accepted\n$response->noContent() : bool;           // 204 No Content\n$response->movedPermanently() : bool;    // 301 Moved Permanently\n$response->found() : bool;               // 302 Found\n$response->badRequest() : bool;          // 400 Bad Request\n$response->unauthorized() : bool;        // 401 Unauthorized\n$response->paymentRequired() : bool;     // 402 Payment Required\n$response->forbidden() : bool;           // 403 Forbidden\n$response->notFound() : bool;            // 404 Not Found\n$response->requestTimeout() : bool;      // 408 Request Timeout\n$response->conflict() : bool;            // 409 Conflict\n$response->unprocessableEntity() : bool; // 422 Unprocessable Entity\n$response->tooManyRequests() : bool;     // 429 Too Many Requests\n$response->serverError() : bool;         // 500 Internal Server Error\n```\n\n----------------------------------------\n\nTITLE: Applying Promotion Code When Creating Subscription in Laravel Cashier\nDESCRIPTION: Demonstrates how to apply a Stripe promotion code to a subscription using the withPromotionCode method when creating a new subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$user->newSubscription('default', 'price_monthly')\n    ->withPromotionCode('promo_code_id')\n    ->create($paymentMethod);\n```\n\n----------------------------------------\n\nTITLE: Checking for Generic Trial Period in Laravel Cashier\nDESCRIPTION: Shows how to check if a user is on a generic trial period (not attached to any subscription) using the onTrial method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_93\n\nLANGUAGE: php\nCODE:\n```\nif ($user->onTrial()) {\n    // User is within their trial period...\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Package Migrations in ServiceProvider\nDESCRIPTION: Shows how to publish package database migrations using the publishesMigrations method in the service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\npublic function boot(): void\n{\n    $this->publishesMigrations([\n        __DIR__.'/../database/migrations' => database_path('migrations'),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Laravel Controller Using Cache Facade\nDESCRIPTION: Demonstrates how to use the Cache facade within a Laravel controller to retrieve user data and pass it to a view.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Cache;\nuse Illuminate\\View\\View;\n\nclass UserController extends Controller\n{\n    /**\n     * Show the profile for the given user.\n     */\n    public function showProfile(string $id): View\n    {\n        $user = Cache::get('user:'.$id);\n\n        return view('profile', ['user' => $user]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pennant Store for Testing in XML\nDESCRIPTION: Shows how to configure the Pennant store for testing by setting the PENNANT_STORE environment variable in the phpunit.xml file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit colors=\"true\">\n    <!-- ... -->\n    <php>\n        <env name=\"PENNANT_STORE\" value=\"array\"/>\n        <!-- ... -->\n    </php>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Title Headlines in Laravel PHP\nDESCRIPTION: The headline method converts strings delimited by casing, hyphens, or underscores into a space-delimited string with each word's first letter capitalized.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_111\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$headline = Str::of('taylor_otwell')->headline();\n\n// Taylor Otwell\n\n$headline = Str::of('EmailNotificationSent')->headline();\n\n// Email Notification Sent\n```\n\n----------------------------------------\n\nTITLE: Site PHP Version Configuration\nDESCRIPTION: Example .valetrc file content for specifying PHP version for a specific site.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp=php@8.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailpit for Email Testing in Laravel\nDESCRIPTION: Environment variable configuration for using Mailpit as a local email testing service with Laravel Sail.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nMAIL_HOST=mailpit\nMAIL_PORT=1025\nMAIL_ENCRYPTION=null\n```\n\n----------------------------------------\n\nTITLE: Customizing Isolatable Command ID in Laravel\nDESCRIPTION: Shows how to customize the isolation lock key by implementing the isolatableId method in a command class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the isolatable ID for the command.\n */\npublic function isolatableId(): string\n{\n    return $this->argument('user');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TrustHosts Configuration in Laravel\nDESCRIPTION: Demonstrates how to enable the TrustHosts middleware with specific allowed hostnames. This configuration is set in the bootstrap/app.php file and restricts the application to only respond to requests from specified hosts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->trustHosts(at: ['laravel.test']);\n})\n```\n\n----------------------------------------\n\nTITLE: Assert HTTP Status Codes\nDESCRIPTION: Various methods to assert different HTTP status codes in the response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$response->assertStatus($code);\n\n$response->assertSuccessful();\n\n$response->assertTooManyRequests();\n\n$response->assertUnauthorized();\n\n$response->assertUnprocessable();\n\n$response->assertUnsupportedMediaType();\n```\n\n----------------------------------------\n\nTITLE: Using Model Instances for Channel Names in Laravel Broadcasting\nDESCRIPTION: Shows how to pass an Eloquent model instance to a Channel constructor, which Laravel will convert to a channel name string based on the model's class and ID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nreturn [new Channel($this->user)];\n```\n\n----------------------------------------\n\nTITLE: Type-Based Constraints in Morph To Queries\nDESCRIPTION: Demonstrates how to add query constraints based on the type of related polymorphic model using the $type parameter in the whereHasMorph closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_66\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\n\n$comments = Comment::whereHasMorph(\n    'commentable',\n    [Post::class, Video::class],\n    function (Builder $query, string $type) {\n        $column = $type === Post::class ? 'content' : 'title';\n\n        $query->where($column, 'like', 'code%');\n    }\n)->get();\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Parameters to OAuth Redirect\nDESCRIPTION: Example showing how to include additional optional parameters in the OAuth redirect request using the with method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Socialite\\Facades\\Socialite;\n\nreturn Socialite::driver('google')\n    ->with(['hd' => 'example.com'])\n    ->redirect();\n```\n\n----------------------------------------\n\nTITLE: Restarting Pulse Worker During Deployment\nDESCRIPTION: Artisan command to gracefully restart the Pulse worker process during deployment to load code changes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan pulse:restart\n```\n\n----------------------------------------\n\nTITLE: Pausing Indexing in Laravel Scout\nDESCRIPTION: Shows how to temporarily pause indexing in Laravel Scout using the withoutSyncingToSearch method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\n\nOrder::withoutSyncingToSearch(function () {\n    // Perform model actions...\n});\n```\n\n----------------------------------------\n\nTITLE: Container Events and Resolving Callbacks\nDESCRIPTION: Shows how to register callbacks for container resolution events and handle rebinding.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Transistor;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->resolving(Transistor::class, function (Transistor $transistor, Application $app) {\n    // Called when container resolves objects of type \"Transistor\"...\n});\n\n$this->app->resolving(function (mixed $object, Application $app) {\n    // Called when container resolves object of any type...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing In Rule with Rule::in Method in Laravel Validation\nDESCRIPTION: Demonstrates how to use the Rule::in method to fluently construct the 'in' validation rule in Laravel, which checks if a value is in a given list.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\n\nValidator::make($data, [\n    'zones' => [\n        'required',\n        Rule::in(['first-zone', 'second-zone']),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Appending and Prepending to Files in Laravel\nDESCRIPTION: Demonstrates how to write text to the beginning or end of a file using Laravel's Storage facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nStorage::prepend('file.log', 'Prepended Text');\n\nStorage::append('file.log', 'Appended Text');\n```\n\n----------------------------------------\n\nTITLE: PHP Version Support Table\nDESCRIPTION: A markdown table showing Laravel versions, PHP compatibility, release dates, and support windows for different Laravel versions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/releases.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | PHP (*) | Release | Bug Fixes Until | Security Fixes Until |\n| --- | --- | --- | --- | --- |\n| 9 | 8.0 - 8.2 | February 8th, 2022 | August 8th, 2023 | February 6th, 2024 |\n| 10 | 8.1 - 8.3 | February 14th, 2023 | August 6th, 2024 | February 4th, 2025 |\n| 11 | 8.2 - 8.4 | March 12th, 2024 | September 3rd, 2025 | March 12th, 2026 |\n| 12 | 8.2 - 8.4 | February 24th, 2025 | August 13th, 2026 | February 24th, 2027 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite URL Transformation\nDESCRIPTION: Configuration example showing how to modify vite.config.js to transform imagetools URLs by prepending the dev server URL using the transformOnServe option.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\nimport { imagetools } from 'vite-imagetools';\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            // ...\n            transformOnServe: (code, devServerUrl) => code.replaceAll('/@imagetools', devServerUrl+'/@imagetools'),\n        }),\n        imagetools(),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection Items with filter Method in PHP\nDESCRIPTION: The filter method filters the collection using a callback that performs a truth test on each element. It returns a collection containing only elements that pass the test. Without a callback, it removes all 'falsey' values such as null, false, empty string, 0, and empty array. Input is a collection and optionally a closure. Output is a filtered collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4]);\n\n$filtered = $collection->filter(function (int $value, int $key) {\n    return $value > 2;\n});\n\n$filtered->all();\n\n// [3, 4]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, null, false, '', 0, []]);\n\n$collection->filter()->all();\n\n// [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Extending Trial Periods in Laravel Cashier\nDESCRIPTION: Demonstrates how to extend a subscription's trial period using the extendTrial method, either by setting a new end date or by adding additional days to the current trial.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_97\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$subscription = User::find(1)->subscription('default');\n\n// End the trial 7 days from now...\n$subscription->extendTrial(\n    now()->addDays(7)\n);\n\n// Add an additional 5 days to the trial...\n$subscription->extendTrial(\n    $subscription->trial_ends_at->addDays(5)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Uri Instances in Laravel\nDESCRIPTION: Demonstrates various static methods provided by the `Illuminate\\Support\\Uri` class to create new URI instances in Laravel. Examples include creating from a string, a path, named routes (including signed and temporary signed routes), controller actions (both standard and invokable), and the current request URI.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_145\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\UserController;\nuse App\\Http\\Controllers\\InvokableController;\nuse Illuminate\\Support\\Uri;\n\n// Generate a URI instance from the given string...\n$uri = Uri::of('https://example.com/path');\n\n// Generate URI instances to paths, named routes, or controller actions...\n$uri = Uri::to('/dashboard');\n$uri = Uri::route('users.show', ['user' => 1]);\n$uri = Uri::signedRoute('users.show', ['user' => 1]);\n$uri = Uri::temporarySignedRoute('user.index', now()->addMinutes(5));\n$uri = Uri::action([UserController::class, 'index']);\n$uri = Uri::action(InvokableController::class);\n\n// Generate a URI instance from the current request URL...\n$uri = $request->uri();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trial End Date in Laravel Cashier\nDESCRIPTION: Shows how to get a user's trial ending date using the trialEndsAt method, which returns a Carbon date instance or null if the user is not on trial.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_95\n\nLANGUAGE: php\nCODE:\n```\nif ($user->onTrial()) {\n    $trialEndsAt = $user->trialEndsAt('main');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Anonymous Components from Laravel Package\nDESCRIPTION: Shows how to render anonymous components from a package by prefixing the component name with the package's view namespace.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<x-courier::alert />\n```\n\n----------------------------------------\n\nTITLE: Installing Path Prefixing Package for Scoped Filesystems in Laravel\nDESCRIPTION: Composer command to install the required Flysystem path prefixing package for using scoped filesystems in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require league/flysystem-path-prefixing \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Queue Worker with Timeout\nDESCRIPTION: Demonstrates how to start a Laravel queue worker with a specified timeout. This helps prevent jobs from running indefinitely.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_80\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work --timeout=60\n```\n\n----------------------------------------\n\nTITLE: Configuring PhpRedis Serialization and Compression in Laravel\nDESCRIPTION: Example of configuring serialization and compression options for PhpRedis in Laravel's config/database.php file, including various algorithms.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'redis' => [\n\n    'client' => env('REDIS_CLIENT', 'phpredis'),\n\n    'options' => [\n        'cluster' => env('REDIS_CLUSTER', 'redis'),\n        'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),\n        'serializer' => Redis::SERIALIZER_MSGPACK,\n        'compression' => Redis::COMPRESSION_LZ4,\n    ],\n\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Changing Vue Authentication Layout\nDESCRIPTION: Code modification to change the authentication page layout variant in a Vue starter kit from simple to split by changing the imported layout component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport AuthLayout from '@/layouts/auth/AuthSimpleLayout.vue'; // [tl! remove]\nimport AuthLayout from '@/layouts/auth/AuthSplitLayout.vue'; // [tl! add]\n```\n\n----------------------------------------\n\nTITLE: Using dispatch_sync() function for synchronous job processing in Laravel PHP\nDESCRIPTION: The dispatch_sync() function pushes a job to the sync queue for immediate processing without waiting for a queue worker, useful for tasks that must complete before continuing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_87\n\nLANGUAGE: php\nCODE:\n```\ndispatch_sync(new App\\Jobs\\SendEmails);\n```\n\n----------------------------------------\n\nTITLE: Defining One-of-Many Polymorphic Relationship in PHP\nDESCRIPTION: This code demonstrates how to define a 'one of many' polymorphic relationship using the morphOne method combined with latestOfMany or oldestOfMany methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the user's most recent image.\n */\npublic function latestImage(): MorphOne\n{\n    return $this->morphOne(Image::class, 'imageable')->latestOfMany();\n}\n\n/**\n * Get the user's oldest image.\n */\npublic function oldestImage(): MorphOne\n{\n    return $this->morphOne(Image::class, 'imageable')->oldestOfMany();\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Dialog State in PHP with Laravel Dusk\nDESCRIPTION: Assert that a JavaScript dialog with a specific message has been opened using Laravel Dusk's browser testing method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertDialogOpened($message);\n```\n\n----------------------------------------\n\nTITLE: Handling On-Demand Notifications in toMail Method\nDESCRIPTION: This code demonstrates how to implement the toMail method to handle both regular notifications and on-demand notifications. It checks if the notifiable is an instance of AnonymousNotifiable and retrieves the appropriate email address.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Mail\\InvoicePaid as InvoicePaidMailable;\nuse Illuminate\\Notifications\\AnonymousNotifiable;\nuse Illuminate\\Mail\\Mailable;\n\n/**\n * Get the mail representation of the notification.\n */\npublic function toMail(object $notifiable): Mailable\n{\n    $address = $notifiable instanceof AnonymousNotifiable\n        ? $notifiable->routeNotificationFor('mail')\n        : $notifiable->email;\n\n    return (new InvoicePaidMailable($this->invoice))\n        ->to($address);\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Failing Laravel Queue Jobs\nDESCRIPTION: Implementation of the fail method in a Laravel job's handle method, allowing a job to be explicitly marked as failed without further retry attempts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Execute the job.\n */\npublic function handle(): void\n{\n    // ...\n\n    $this->fail();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Cashier with Composer\nDESCRIPTION: Command to install the Laravel Cashier package using Composer package manager.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/cashier\n```\n\n----------------------------------------\n\nTITLE: Implementing Spin Function in Laravel Prompts\nDESCRIPTION: Demonstrates how to use the spin function to display a spinner while executing a callback, indicating ongoing processes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\spin;\n\n$response = spin(\n    message: 'Fetching response...',\n    callback: fn () => Http::get('http://example.com')\n);\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration for Reverb\nDESCRIPTION: Nginx server configuration to set up a reverse proxy for Reverb WebSocket server running on port 8080\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_9\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    ...\n\n    location / {\n        proxy_http_version 1.1;\n        proxy_set_header Host $http_host;\n        proxy_set_header Scheme $scheme;\n        proxy_set_header SERVER_PORT $server_port;\n        proxy_set_header REMOTE_ADDR $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n\n        proxy_pass http://0.0.0.0:8080;\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Stripe Checkout Success with Session ID in PHP\nDESCRIPTION: This snippet demonstrates how to handle a successful Stripe Checkout by retrieving the session details using the session ID passed in the success URL.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_112\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Stripe\\Checkout\\Session;\nuse Stripe\\Customer;\n\nRoute::get('/product-checkout', function (Request $request) {\n    return $request->user()->checkout(['price_tshirt' => 1], [\n        'success_url' => route('checkout-success').'?session_id={CHECKOUT_SESSION_ID}',\n        'cancel_url' => route('checkout-cancel'),\n    ]);\n});\n\nRoute::get('/checkout-success', function (Request $request) {\n    $checkoutSession = $request->user()->stripe()->checkout->sessions->retrieve($request->get('session_id'));\n\n    return view('checkout.success', ['checkoutSession' => $checkoutSession]);\n})->name('checkout-success');\n```\n\n----------------------------------------\n\nTITLE: Number: Currency Formatting in PHP\nDESCRIPTION: This snippet illustrates formatting numbers as currency strings with optional locale and currency code using Number::currency(), supporting internationalization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_58\n\nLANGUAGE: PHP\nCODE:\n```\n$currency = Number::currency(1000);\n// $1,000.00\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$currency = Number::currency(1000, in: 'EUR');\n// €1,000.00\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$currency = Number::currency(1000, in: 'EUR', locale: 'de');\n// 1.000,00 €\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw PDO Instance in Laravel PHP\nDESCRIPTION: Demonstrates how to access the underlying PDO instance of a database connection using the getPdo method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$pdo = DB::connection()->getPdo();\n```\n\n----------------------------------------\n\nTITLE: Configuring Homestead Services in YAML\nDESCRIPTION: Example YAML configuration for enabling and disabling specific services in Homestead.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    - enabled:\n        - \"postgresql\"\n    - disabled:\n        - \"mysql\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Log Channels with Stack Driver\nDESCRIPTION: Comprehensive example of configuring multiple log channels using the stack driver, including syslog and Slack channels with their respective settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'channels' => [\n    'stack' => [\n        'driver' => 'stack',\n        'channels' => ['syslog', 'slack'],\n        'ignore_exceptions' => false,\n    ],\n\n    'syslog' => [\n        'driver' => 'syslog',\n        'level' => env('LOG_LEVEL', 'debug'),\n        'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),\n        'replace_placeholders' => true,\n    ],\n\n    'slack' => [\n        'driver' => 'slack',\n        'url' => env('LOG_SLACK_WEBHOOK_URL'),\n        'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),\n        'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),\n        'level' => env('LOG_LEVEL', 'critical'),\n        'replace_placeholders' => true,\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Checking for Actual Content in Slots in Laravel Blade\nDESCRIPTION: Uses the hasActualContent method to determine if a slot contains any 'actual' content that is not just HTML comments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_64\n\nLANGUAGE: blade\nCODE:\n```\n@if ($slot->hasActualContent())\n    The scope has non-comment content.\n@endif\n```\n\n----------------------------------------\n\nTITLE: Accessing CSRF Token in Laravel Routes\nDESCRIPTION: PHP code demonstrating how to access the CSRF token through either the session or csrf_token helper function in a route definition.\nSOURCE: https://github.com/laravel/docs/blob/12.x/csrf.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/token', function (Request $request) {\n    $token = $request->session()->token();\n\n    $token = csrf_token();\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Laravel Pint\nDESCRIPTION: YAML configuration for automating code style fixes with Laravel Pint using GitHub Actions CI/CD pipeline\nSOURCE: https://github.com/laravel/docs/blob/12.x/pint.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Fix Code Style\n\non: [push]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: true\n      matrix:\n        php: [8.4]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          extensions: json, dom, curl, libxml, mbstring\n          coverage: none\n\n      - name: Install Pint\n        run: composer global require laravel/pint\n\n      - name: Run Pint\n        run: pint\n\n      - name: Commit linted files\n        uses: stefanzweifel/git-auto-commit-action@v5\n```\n\n----------------------------------------\n\nTITLE: Slow Requests Configuration\nDESCRIPTION: Configuration example for setting per-request thresholds in the SlowRequests recorder based on URL patterns.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nRecorders\\SlowRequests::class => [\n    // ...\n    'threshold' => [\n        '#^/admin/#' => 5000,\n        'default' => env('PULSE_SLOW_REQUESTS_THRESHOLD', 1000),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Reducing Laravel Collection with Multiple Accumulated Values in PHP\nDESCRIPTION: Highlights the `reduceSpread` method which applies a reduction similar to `reduce`, but supports multiple initial values and returns an array of results. It allows handling complex state while iterating over a collection, useful for tracking multiple accumulators. Inputs include a collection, a callback receiving multiple parameters, and multiple initial values; output is an array representing reduced results.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_99\n\nLANGUAGE: php\nCODE:\n```\n[$creditsRemaining, $batch] = Image::where('status', 'unprocessed')\n    ->get()\n    ->reduceSpread(function (int $creditsRemaining, Collection $batch, Image $image) {\n        if ($creditsRemaining >= $image->creditsRequired()) {\n            $batch->push($image);\n\n            $creditsRemaining -= $image->creditsRequired();\n        }\n\n        return [$creditsRemaining, $batch];\n    }, $creditsAvailable, collect());\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Instance - Laravel PHP\nDESCRIPTION: Illustrates how to retrieve the current request instance using the `request()` helper function. It can also be used to access specific input values from the request, providing a default value if the key is not found.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_111\n\nLANGUAGE: php\nCODE:\n```\n$request = request();\n\n$value = request('key', $default);\n```\n\n----------------------------------------\n\nTITLE: Handling Side-Effects in Middleware for Precognitive Requests in Laravel\nDESCRIPTION: This snippet demonstrates how to check if a request is precognitive before executing side-effects in middleware. It uses the `isPrecognitive` method to conditionally increment an interaction count.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse App\\Facades\\Interaction;\nuse Closure;\nuse Illuminate\\Http\\Request;\n\nclass InteractionMiddleware\n{\n    /**\n     * Handle an incoming request.\n     */\n    public function handle(Request $request, Closure $next): mixed\n    {\n        if (! $request->isPrecognitive()) {\n            Interaction::incrementFor($request->user());\n        }\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Values with transform - PHP\nDESCRIPTION: The `transform` function applies a closure to a value if the value is not blank and returns the result of the closure. If the value is blank, it returns a default value or executes another closure. This function simplifies the process of conditionally transforming data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_122\n\nLANGUAGE: php\nCODE:\n```\n$callback = function (int $value) {\n    return $value * 2;\n};\n\n$result = transform(5, $callback);\n\n// 10\n```\n\nLANGUAGE: php\nCODE:\n```\n$result = transform(null, $callback, 'The value is blank');\n\n// The value is blank\n```\n\n----------------------------------------\n\nTITLE: Disabling Subdomain Trust in Laravel TrustHosts\nDESCRIPTION: Shows how to configure TrustHosts middleware while explicitly disabling automatic trust of subdomains. This configuration ensures only the exact specified hostnames are trusted.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->trustHosts(at: ['laravel.test'], subdomains: false);\n})\n```\n\n----------------------------------------\n\nTITLE: Autoloading Package Components in Laravel\nDESCRIPTION: Shows how to use the componentNamespace method to autoload component classes by convention in a package's service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Blade;\n\n/**\n * Bootstrap your package's services.\n */\npublic function boot(): void\n{\n    Blade::componentNamespace('Nightshade\\\\Views\\\\Components', 'nightshade');\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping JavaScript Frameworks' Curly Braces in Blade\nDESCRIPTION: Example of using the @ symbol to prevent Blade from processing expressions that are meant for JavaScript frameworks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<h1>Laravel</h1>\n\nHello, @{{ name }}.\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Values from Array Using Laravel Arr Helper in PHP\nDESCRIPTION: The Arr::random method retrieves one or multiple random elements from an array. When called with only the array, it returns a single random value. When a positive integer count is provided, it returns an array of randomly selected values. It requires the Illuminate\\Support\\Arr class and inputs an array and optional count integer. This method is useful for random sampling elements from arrays with reproducible randomness considerations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [1, 2, 3, 4, 5];\n\n$random = Arr::random($array);\n\n// 4 - (retrieved randomly)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$items = Arr::random($array, 2);\n\n// [2, 5] - (retrieved randomly)\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Image Name in docker-compose.yml\nDESCRIPTION: This YAML snippet shows how to update the Docker image name in docker-compose.yml to reflect the PHP version being used by the application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nimage: sail-8.2/app\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards for Event Listener Discovery in Laravel\nDESCRIPTION: Configuration for scanning multiple similar directories for event listeners using wildcards. This pattern is useful for domain-driven design where listeners are organized by domain.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n->withEvents(discover: [\n    __DIR__.'/../app/Domain/*/Listeners',\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Guest Checkout Sessions with Laravel Cashier\nDESCRIPTION: This snippet demonstrates how to initiate a guest checkout session using the Checkout::guest method in Laravel Cashier. It creates a checkout for a t-shirt product and specifies success and cancel URLs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_116\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Laravel\\Cashier\\Checkout;\n\nRoute::get('/product-checkout', function (Request $request) {\n    return Checkout::guest()->create('price_tshirt', [\n        'success_url' => route('your-success-route'),\n        'cancel_url' => route('your-cancel-route'),\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Example in Laravel Octane Controller\nDESCRIPTION: An example demonstrating a memory leak in Laravel Octane where data is continuously added to a static array between requests, causing the application to consume increasingly more memory over time.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\n\n/**\n * Handle an incoming request.\n */\npublic function index(Request $request): array\n{\n    Service::$data[] = Str::random(10);\n\n    return [\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authorization Directives in Laravel Blade Templates\nDESCRIPTION: This snippet demonstrates how to use the @can, @cannot, and @canany Blade directives to conditionally render content based on user authorization. It shows examples for both model-specific and general authorizations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_28\n\nLANGUAGE: blade\nCODE:\n```\n@can('update', $post)\n    <!-- The current user can update the post... -->\n@elsecan('create', App\\Models\\Post::class)\n    <!-- The current user can create new posts... -->\n@else\n    <!-- ... -->\n@endcan\n\n@cannot('update', $post)\n    <!-- The current user cannot update the post... -->\n@elsecannot('create', App\\Models\\Post::class)\n    <!-- The current user cannot create new posts... -->\n@endcannot\n\n@canany(['update', 'view', 'delete'], $post)\n    <!-- The current user can update, view, or delete the post... -->\n@elsecanany(['create'], \\App\\Models\\Post::class)\n    <!-- The current user can create a post... -->\n@endcanany\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission Responses with Precognition\nDESCRIPTION: Example demonstrating how to handle form submission responses, reset the form on success, and handle errors using the Promise returned by the submit function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst submit = (e) => {\n    e.preventDefault();\n\n    form.submit()\n        .then(response => {\n            form.reset();\n\n            alert('User created.');\n        })\n        .catch(error => {\n            alert('An error occurred.');\n        });\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Input Normalization in Laravel\nDESCRIPTION: Configuration to disable Laravel's automatic string trimming and null conversion middleware globally or for specific routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull;\nuse Illuminate\\Foundation\\Http\\Middleware\\TrimStrings;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->remove([\n        ConvertEmptyStringsToNull::class,\n        TrimStrings::class,\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Channel List Command\nDESCRIPTION: Artisan command to view all broadcast authorization callbacks in the application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan channel:list\n```\n\n----------------------------------------\n\nTITLE: Slow Jobs Threshold Configuration\nDESCRIPTION: Configuration example for setting per-job thresholds in the SlowJobs recorder to handle jobs with different expected durations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nRecorders\\SlowJobs::class => [\n    // ...\n    'threshold' => [\n        '#^App\\\\Jobs\\\\GenerateYearlyReports$#' => 5000,\n        'default' => env('PULSE_SLOW_JOBS_THRESHOLD', 1000),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Displaying Aggregate Data in Blade Template\nDESCRIPTION: Shows how to iterate through and display aggregated data in a Blade template, accessing key, sum, and count properties of each record.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_35\n\nLANGUAGE: blade\nCODE:\n```\n@foreach ($topSellers as $seller)\n    {{ $seller->key }}\n    {{ $seller->sum }}\n    {{ $seller->count }}\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring Before Value in Laravel PHP\nDESCRIPTION: The before method returns everything before the given value in a string, useful for parsing and extracting specific portions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_84\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slice = Str::of('This is my name')->before('my name');\n\n// 'This is '\n```\n\n----------------------------------------\n\nTITLE: Creating Personal Access Client in Laravel Passport\nDESCRIPTION: This command creates a personal access client for issuing personal access tokens in Laravel Passport.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan passport:client --personal\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pest in Laravel\nDESCRIPTION: Executes test cases using the Pest testing framework through the vendor binary in a Laravel application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/pest\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with Artisan in Laravel\nDESCRIPTION: Command to generate a new middleware class using Laravel's Artisan CLI tool. This creates a file in the app/Http/Middleware directory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:middleware EnsureTokenIsValid\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware Groups to Routes in Laravel\nDESCRIPTION: Example of applying middleware groups to routes and route groups using the middleware method with the group name as a parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function () {\n    // ...\n})->middleware('group-name');\n\nRoute::middleware(['group-name'])->group(function () {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Paddle Sandbox in Environment File\nDESCRIPTION: Environment variable configuration for enabling Paddle's sandbox environment during development.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nPADDLE_SANDBOX=true\n```\n\n----------------------------------------\n\nTITLE: Using bcrypt() function for password hashing in Laravel PHP\nDESCRIPTION: The bcrypt() function hashes the given value using Bcrypt algorithm as an alternative to the Hash facade in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$password = bcrypt('my-secret-password');\n```\n\n----------------------------------------\n\nTITLE: Defining Route for Password Reset Form in Laravel\nDESCRIPTION: This snippet defines a route that displays the password reset form when a user clicks on the reset link from their email. It includes a token parameter for verification.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passwords.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/reset-password/{token}', function (string $token) {\n    return view('auth.reset-password', ['token' => $token]);\n})->middleware('guest')->name('password.reset');\n```\n\n----------------------------------------\n\nTITLE: Secure Development Server Configuration\nDESCRIPTION: Vite configuration for handling HTTPS in development environment with custom SSL certificates.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\nimport fs from 'fs';\n\nconst host = 'my-app.test';\n\nexport default defineConfig({\n    server: {\n        host,\n        hmr: { host },\n        https: {\n            key: fs.readFileSync(`/path/to/${host}.key`),\n            cert: fs.readFileSync(`/path/to/${host}.crt`),\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios Headers for Precognition Requests\nDESCRIPTION: JavaScript code to add custom headers to all Precognition requests when using the Vue library.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from 'laravel-precognition-vue';\n\nclient.axios().defaults.headers.common['Authorization'] = authToken;\n```\n\n----------------------------------------\n\nTITLE: Subscription Middleware in Laravel\nDESCRIPTION: A middleware implementation that ensures routes are only accessible to subscribed users, redirecting non-subscribers to a billing page.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass EnsureUserIsSubscribed\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        if ($request->user() && ! $request->user()->subscribed()) {\n            // This user is not a paying customer...\n            return redirect('/billing');\n        }\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LazyCollection for Filtering Large Collections (PHP)\nDESCRIPTION: Demonstrates how converting a large standard collection to a `LazyCollection` allows for memory-efficient filtering operations, as intermediate results are streamed rather than fully loaded into memory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n$count = $hugeCollection\n    ->lazy()\n    ->where('country', 'FR')\n    ->where('balance', '>', '100')\n    ->count();\n```\n\n----------------------------------------\n\nTITLE: Registering Singleton Resource Controller in Laravel\nDESCRIPTION: Demonstrates how to register a singleton resource controller for resources that have only one instance, such as a user profile.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\ProfileController;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::singleton('profile', ProfileController::class);\n```\n\n----------------------------------------\n\nTITLE: Cache Key Group Configuration\nDESCRIPTION: Configuration example for grouping similar cache keys using regular expressions in the CacheInteractions recorder.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nRecorders\\CacheInteractions::class => [\n    // ...\n    'groups' => [\n        // '/:\\d+/' => ':*',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Sail Container Images\nDESCRIPTION: Shell commands to rebuild Docker container images after making changes to the docker-compose.yml configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nsail build --no-cache\n\nsail up\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Session Values - Laravel PHP\nDESCRIPTION: Illustrates how to access and set session values using the `session()` helper function. It can be used to retrieve a value, set multiple values using an array, or return the session store instance for more advanced operations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_116\n\nLANGUAGE: php\nCODE:\n```\n$value = session('key');\n\nsession(['chairs' => 7, 'instruments' => 3]);\n\n$value = session()->get('key');\n\nsession()->put('key', $value);\n```\n\n----------------------------------------\n\nTITLE: Swapping Products in Multi-Product Subscriptions in Laravel Cashier\nDESCRIPTION: Method for replacing one set of products with another in a subscription, preserving some products while replacing others.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_65\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$user->subscription('default')->swap(['price_pro', 'price_chat']);\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Data Absence in Laravel Tests\nDESCRIPTION: This snippet demonstrates how to assert that a response does not contain specific JSON data using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonMissing(array $data);\n```\n\n----------------------------------------\n\nTITLE: Clearing Rate Limit Attempts in Laravel\nDESCRIPTION: This example shows how to clear the attempt count for a rate-limited action using the RateLimiter facade within a method that marks a message as read.\nSOURCE: https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Message;\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\n/**\n * Mark the message as read.\n */\npublic function read(Message $message): Message\n{\n    $message->markAsRead();\n\n    RateLimiter::clear('send-message:'.$message->user_id);\n\n    return $message;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Feature Values in PHP\nDESCRIPTION: Shows how to retrieve values for multiple features at once using the 'values' and 'all' methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nFeature::values(['billing-v2', 'purchase-button']);\n\n// [\n//     'billing-v2' => false,\n//     'purchase-button' => 'blue-sapphire',\n// ]\n\nFeature::all();\n\n// [\n//     'billing-v2' => false,\n//     'purchase-button' => 'blue-sapphire',\n//     'site-redesign' => true,\n// ]\n```\n\n----------------------------------------\n\nTITLE: Multi-Schema Database Table Querying in Laravel 12\nDESCRIPTION: This code shows how to retrieve database tables from specific schemas using the Schema facade in Laravel 12, which now returns results from all schemas by default unless filtered.\nSOURCE: https://github.com/laravel/docs/blob/12.x/upgrade.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// All tables on all schemas...\n$tables = Schema::getTables();\n\n// All tables on the 'main' schema...\n$table = Schema::getTables(schema: 'main');\n\n// All tables on the 'main' and 'blog' schemas...\n$table = Schema::getTables(schema: ['main', 'blog']);\n```\n\n----------------------------------------\n\nTITLE: Converting Input to Stringable Object in Laravel\nDESCRIPTION: Using the string method to retrieve input as a Stringable instance, allowing string manipulation methods to be chained.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$name = $request->string('name')->trim();\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value using `min` in PHP\nDESCRIPTION: The `min` method retrieves the minimum value from a collection. Similar to the `max` method, it can be applied to collections of arrays specifying the key to evaluate or directly to collections of numbers. The output is the minimum value found in the collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_79\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$min = collect([['foo' => 10], ['foo' => 20]])->min('foo');\n\n// 10\n\n$min = collect([1, 2, 3, 4, 5])->min();\n\n// 1\n```\n\n----------------------------------------\n\nTITLE: Using Str::before for String Extraction in PHP\nDESCRIPTION: The Str::before method returns everything before the given value in a string, allowing you to extract the beginning portion of a string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slice = Str::before('This is my name', 'my name');\n\n// 'This is '\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Log Levels in Laravel\nDESCRIPTION: Shows how to set specific log levels for different exception types using the level method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse PDOException;\nuse Psr\\Log\\LogLevel;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->level(PDOException::class, LogLevel::CRITICAL);\n})\n```\n\n----------------------------------------\n\nTITLE: Basic File Storage Operation\nDESCRIPTION: Example of storing a file using Laravel's Storage facade with the default disk\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Storage;\n\nStorage::put('avatars/1', $content);\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Query String Using Laravel Arr Helper in PHP\nDESCRIPTION: The Arr::query method converts a multidimensional PHP array into a URL-encoded query string. It requires the Illuminate\\Support\\Arr class and accepts an array parameter. The output is a string representing the query parameters, usable in URLs. Nested arrays are converted using square bracket syntax. It is limited to arrays suitable for query strings and does not encode the output by default.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [\n    'name' => 'Taylor',\n    'order' => [\n        'column' => 'created_at',\n        'direction' => 'desc'\n    ]\n];\n\nArr::query($array);\n\n// name=Taylor&order[column]=created_at&order[direction]=desc\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Pint Basic Settings\nDESCRIPTION: Basic Pint configuration example using pint.json file\nSOURCE: https://github.com/laravel/docs/blob/12.x/pint.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"preset\": \"laravel\"\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Compiling CSS Style Strings Using Laravel Arr toCssStyles Method in PHP\nDESCRIPTION: The Arr::toCssStyles method converts an array of conditional CSS style declarations into a single string of semicolon-separated styles. Similar to toCssClasses, keys are style declarations, values are boolean flags for inclusion, and numeric keys are always included. Depends on Illuminate\\Support\\Arr. The output is compatible with inline style attributes in HTML.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$hasColor = true;\n\n$array = ['background-color: blue', 'color: blue' => $hasColor];\n\n$classes = Arr::toCssStyles($array);\n\n/*\n    'background-color: blue; color: blue;'\n*/\n```\n\n----------------------------------------\n\nTITLE: Requesting Password Grant Access Token\nDESCRIPTION: HTTP request to obtain an access token using password grant credentials.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\n$response = Http::asForm()->post('http://passport-app.test/oauth/token', [\n    'grant_type' => 'password',\n    'client_id' => 'client-id',\n    'client_secret' => 'client-secret',\n    'username' => 'taylor@laravel.com',\n    'password' => 'my-password',\n    'scope' => '',\n]);\n\nreturn $response->json();\n```\n\n----------------------------------------\n\nTITLE: Comparing Collections with custom callback using diffAssocUsing Method in PHP\nDESCRIPTION: The diffAssocUsing method compares the collection with another collection or array based on keys and values, using a user-supplied callback function to perform index comparison. The callback performs case-insensitive or custom comparison logic, requiring a comparison function returning an integer. The method returns key/value pairs differing between collections. It depends on PHP's array_diff_uassoc function internally.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'color' => 'orange',\n    'type' => 'fruit',\n    'remain' => 6,\n]);\n\n$diff = $collection->diffAssocUsing([\n    'Color' => 'yellow',\n    'Type' => 'fruit',\n    'Remain' => 3,\n], 'strnatcasecmp');\n\n$diff->all();\n\n// ['color' => 'orange', 'remain' => 6]\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Items Using Laravel Arr Reject Method in PHP\nDESCRIPTION: The Arr::reject method removes elements from an array based on a user-supplied closure that returns true for items to be discarded. It accepts an array and a closure callback with value and key parameters. The method returns a filtered array preserving keys of remaining elements. It depends on the Illuminate\\Support\\Arr class and is suited for filtering arrays by custom rules.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [100, '200', 300, '400', 500];\n\n$filtered = Arr::reject($array, function (string|int $value, int $key) {\n    return is_string($value);\n});\n\n// [0 => 100, 2 => 300, 4 => 500]\n```\n\n----------------------------------------\n\nTITLE: Associating Custom Collection with Laravel Eloquent Model Using CollectedBy Attribute in PHP\nDESCRIPTION: This snippet shows how to attach a custom Collection class to a Laravel Eloquent model by using the CollectedBy PHP attribute. The attribute receives a custom Collection class name, which Laravel will use when returning model collections instead of the default Eloquent Collection. This requires PHP 8.0 or higher to support attributes and depends on Laravel's Eloquent ORM package. The model namespace is App\\Models and the custom Collection class is imported from App\\Support\\UserCollection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse App\\Support\\UserCollection;\nuse Illuminate\\Database\\Eloquent\\Attributes\\CollectedBy;\nuse Illuminate\\Database\\Eloquent\\Model;\n\n#[CollectedBy(UserCollection::class)]\nclass User extends Model\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Truth Test on All Elements with every Method in PHP\nDESCRIPTION: The every method checks that all elements pass a given truth test specified by a callback. It returns true if the collection is empty or all elements pass the test, otherwise false. Input is a collection and a closure returning a boolean per element. The output is a boolean indicating whether all elements satisfied the test.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\ncollect([1, 2, 3, 4])->every(function (int $value, int $key) {\n    return $value > 2;\n});\n\n// false\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([]);\n\n$collection->every(function (int $value, int $key) {\n    return $value > 2;\n});\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Adding Billable Trait to Non-User Model\nDESCRIPTION: Example of implementing the Billable trait in a model that is not a User model, such as a Team.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Laravel\\Paddle\\Billable;\n\nclass Team extends Model\n{\n    use Billable;\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Site with Sail\nDESCRIPTION: Shell command to share a Laravel site publicly using Sail's share command, which creates a random laravel-sail.site URL for accessing the application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nsail share\n```\n\n----------------------------------------\n\nTITLE: Loading Package Language Files in ServiceProvider\nDESCRIPTION: Demonstrates how to load package language files using the loadTranslationsFrom method in the service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\npublic function boot(): void\n{\n    $this->loadTranslationsFrom(__DIR__.'/../lang', 'courier');\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Mutator to Set a Model Attribute\nDESCRIPTION: Shows how to set a value that will be transformed by a previously defined mutator in Laravel Eloquent.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::find(1);\n\n$user->first_name = 'Sally';\n```\n\n----------------------------------------\n\nTITLE: Using Str::doesntContain for String Content Exclusion Checking in PHP\nDESCRIPTION: The Str::doesntContain method determines if the given string doesn't contain the specified value. It supports case-sensitive searching by default and can check for multiple excluded values using an array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$doesntContain = Str::doesntContain('This is name', 'my');\n\n// true\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$doesntContain = Str::doesntContain('This is name', ['my', 'foo']);\n\n// true\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$doesntContain = Str::doesntContain('This is name', 'MY', ignoreCase: true);\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Handling Database Connection Events in Laravel\nDESCRIPTION: PHP code showing how to listen for DatabaseBusy events and send notifications when database connections exceed threshold. Implementation goes in the application's AppServiceProvider boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Notifications\\DatabaseApproachingMaxConnections;\nuse Illuminate\\Database\\Events\\DatabaseBusy;\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Support\\Facades\\Notification;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Event::listen(function (DatabaseBusy $event) {\n        Notification::route('mail', 'dev@example.com')\n            ->notify(new DatabaseApproachingMaxConnections(\n                $event->connectionName,\n                $event->connections\n            ));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Dividing Arrays into Keys and Values using Arr::divide (PHP)\nDESCRIPTION: This snippet demonstrates the use of Arr::divide to split an associative array into two separate arrays for keys and values. The function returns an array containing two arrays: the first of keys, the second of values. Requires the Illuminate\\Support\\Arr namespace and expects a valid associative array as input.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n[$keys, $values] = Arr::divide(['name' => 'Desk']);\n// $keys: ['name']\n// $values: ['Desk']\n```\n\n----------------------------------------\n\nTITLE: Defining a User Factory in Laravel PHP\nDESCRIPTION: Example of a UserFactory class that extends Laravel's base Factory class. It defines default attributes for creating User models and includes a method for creating unverified users.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factories;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Str;\n\n/**\n * @extends \\Illuminate\\Database\\Eloquent\\Factories\\Factory<\\App\\Models\\User>\n */\nclass UserFactory extends Factory\n{\n    /**\n     * The current password being used by the factory.\n     */\n    protected static ?string $password;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array<string, mixed>\n     */\n    public function definition(): array\n    {\n        return [\n            'name' => fake()->name(),\n            'email' => fake()->unique()->safeEmail(),\n            'email_verified_at' => now(),\n            'password' => static::$password ??= Hash::make('password'),\n            'remember_token' => Str::random(10),\n        ];\n    }\n\n    /**\n     * Indicate that the model's email address should be unverified.\n     */\n    public function unverified(): static\n    {\n        return $this->state(fn (array $attributes) => [\n            'email_verified_at' => null,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Avatar URL Configuration\nDESCRIPTION: Registration of custom callback for generating user avatar URLs in Telescope dashboard.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Laravel\\Telescope\\Telescope;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    // ...\n\n    Telescope::avatar(function (?string $id, ?string $email) {\n        return ! is_null($id)\n            ? '/avatars/'.User::find($id)->avatar_path\n            : '/generic-avatar.jpg';\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Request ID Middleware with Log Context\nDESCRIPTION: Middleware implementation showing how to add request ID context to all subsequent log entries.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Str;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AssignRequestId\n{\n    public function handle(Request $request, Closure $next): Response\n    {\n        $requestId = (string) Str::uuid();\n\n        Log::withContext([\n            'request-id' => $requestId\n        ]);\n\n        $response = $next($request);\n\n        $response->headers->set('Request-Id', $requestId);\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereExists for Subquery Existence Check in Laravel\nDESCRIPTION: The whereExists method allows you to write 'where exists' SQL clauses using a closure to define the subquery.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->whereExists(function (Builder $query) {\n        $query->select(DB::raw(1))\n            ->from('orders')\n            ->whereColumn('orders.user_id', 'users.id');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Generating an Invokable Controller\nDESCRIPTION: Artisan command to generate a single action (invokable) controller in Laravel using the --invokable flag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:controller ProvisionServer --invokable\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Validation for Multi-search in Laravel\nDESCRIPTION: Demonstrates how to add custom validation logic to the multisearch function using a closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$ids = multisearch(\n    label: 'Search for the users that should receive the mail',\n    options: fn (string $value) => strlen($value) > 0\n        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n        : [],\n    validate: function (array $values) {\n        $optedOut = User::whereLike('name', '%a%')->findMany($values);\n\n        if ($optedOut->isNotEmpty()) {\n            return $optedOut->pluck('name')->join(', ', ', and ').' have opted out.';\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Components in Laravel\nDESCRIPTION: Shows how to manually register a component class and its HTML tag alias in a package service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_70\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Blade;\nuse VendorPackage\\View\\Components\\AlertComponent;\n\n/**\n * Bootstrap your package's services.\n */\npublic function boot(): void\n{\n    Blade::component('package-alert', AlertComponent::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values and Keying with `Arr::pluck()` - PHP\nDESCRIPTION: This example demonstrates how to extract values for a given key and re-key the resulting array using another key. This creates an associative array where the values from the first key become values in the new array, keyed by values from the second key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$names = Arr::pluck($array, 'developer.name', 'developer.id');\n\n// [1 => 'Taylor', 2 => 'Abigail']\n```\n\n----------------------------------------\n\nTITLE: Creating Paddle Checkout Session for Subscriptions in Laravel\nDESCRIPTION: Shows how to create a Paddle checkout session for a subscription product using Laravel Cashier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/subscribe', function (Request $request) {\n    $checkout = $request->user()->checkout('price_basic_monthly')\n        ->returnTo(route('dashboard'));\n\n    return view('subscribe', ['checkout' => $checkout]);\n})->name('subscribe');\n```\n\n----------------------------------------\n\nTITLE: Changing Default PHP CLI Version in Laravel Homestead\nDESCRIPTION: These shell commands show how to change the default PHP version used by the command line interface within the Homestead virtual machine. It includes options for PHP 5.6 through 8.3.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nphp56\nphp70\nphp71\nphp72\nphp73\nphp74\nphp80\nphp81\nphp82\nphp83\n```\n\n----------------------------------------\n\nTITLE: Recommended Approaches for Configuration Repository Injection in Laravel\nDESCRIPTION: Solutions to fix configuration repository injection issues, including using non-singleton bindings or injecting a configuration repository resolver closure to ensure the latest configuration values are accessible.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service;\nuse Illuminate\\Container\\Container;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->bind(Service::class, function (Application $app) {\n    return new Service($app->make('config'));\n});\n\n$this->app->singleton(Service::class, function () {\n    return new Service(fn () => Container::getInstance()->make('config'));\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Scopes with Middleware in Laravel Passport\nDESCRIPTION: This PHP snippet demonstrates how to use middleware to check for specific scopes on incoming requests in Laravel Passport.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/orders', function () {\n    // Access token has both \"check-status\" and \"place-orders\" scopes...\n})->middleware(['auth:api', 'scopes:check-status,place-orders']);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Notifications Table\nDESCRIPTION: These Artisan commands generate and run a migration to create a notifications table for storing database notifications. This is a prerequisite for using the database notification channel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:notifications-table\n\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Registering Creatable Singleton Resource in Laravel\nDESCRIPTION: Illustrates how to register a creatable singleton resource that includes creation and storage routes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nRoute::singleton('photos.thumbnail', ThumbnailController::class)->creatable();\n```\n\n----------------------------------------\n\nTITLE: Configuring Scout Queue Settings\nDESCRIPTION: Example of enabling queue processing for Scout operations in the scout.php configuration file. This allows Scout to queue all synchronization operations, improving application response times.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'queue' => true,\n```\n\n----------------------------------------\n\nTITLE: Scheduling Token Pruning for Expired Sanctum Tokens\nDESCRIPTION: Setting up a scheduled task to automatically prune expired Sanctum tokens from the database using the built-in Artisan command.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('sanctum:prune-expired --hours=24')->daily();\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Format in Laravel Model\nDESCRIPTION: Shows how to customize the storage format of model timestamps using the dateFormat property.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The storage format of the model's date columns.\n     *\n     * @var string\n     */\n    protected $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding Dot Notation Keys into Nested Arrays Using Laravel Arr Undot Method in PHP\nDESCRIPTION: The Arr::undot method transforms a flat single-dimensional array with dot notation keys into a multi-dimensional nested array. It requires Illuminate\\Support\\Arr and a single-level array input with dot-notated keys. The output contains nested arrays matching the key paths. Useful for reconstructing structured data from dot-notated arrays.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [\n    'user.name' => 'Kevin Malone',\n    'user.occupation' => 'Accountant',\n];\n\n$array = Arr::undot($array);\n\n// ['user' => ['name' => 'Kevin Malone', 'occupation' => 'Accountant']]\n```\n\n----------------------------------------\n\nTITLE: Flattening Multidimensional Arrays with Arr::dot Notation (PHP)\nDESCRIPTION: This example shows how Laravel's Arr::dot helper function flattens a multi-dimensional array into a single-level array, using dot notation for nesting. This is useful for configuration files and data transformation. Requires the Illuminate\\Support\\Arr namespace. The input is a nested associative array, and the output is a flat array with dot-separated keys.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['products' => ['desk' => ['price' => 100]]];\n\n$flattened = Arr::dot($array);\n// ['products.desk.price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Taking Items from Array Start or End Using Laravel Arr Take Method in PHP\nDESCRIPTION: The Arr::take method returns a portion of an array containing the specified number of elements. Providing a positive integer returns that many items from the start, while a negative integer returns items from the end. It requires the Illuminate\\Support\\Arr class and inputs an array and integer count. Useful for slicing arrays without modifying the original.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [0, 1, 2, 3, 4, 5];\n\n$chunk = Arr::take($array, 3);\n\n// [0, 1, 2]\n```\n\nLANGUAGE: php\nCODE:\n```\n$chunk = Arr::take($array, -2);\n\n// [4, 5]\n```\n\n----------------------------------------\n\nTITLE: Padding a Collection with `pad` in PHP\nDESCRIPTION: The `pad` method adds elements to a collection until it reaches a specified size, filling the empty positions with a given value. If the specified size is positive, elements are added to the right of the original collection. If the size is negative, elements are added to the left.  No padding occurs if the specified size's absolute value is less than or equal to the collection's length.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_84\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['A', 'B', 'C']);\n\n$filtered = $collection->pad(5, 0);\n\n$filtered->all();\n\n// ['A', 'B', 'C', 0, 0]\n\n$filtered = $collection->pad(-5, 0);\n\n$filtered->all();\n\n// [0, 0, 'A', 'B', 'C']\n```\n\n----------------------------------------\n\nTITLE: Validating URL Strings in PHP\nDESCRIPTION: Shows how to use the 'isUrl' method to determine if a given string is a valid URL. It also demonstrates how to specify allowed protocols.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_120\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('http://example.com')->isUrl();\n\n// true\n\n$result = Str::of('Taylor')->isUrl();\n\n// false\n\n$result = Str::of('http://example.com')->isUrl(['http', 'https']);\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace with Str::trim in Laravel\nDESCRIPTION: The Str::trim method strips whitespace from the beginning and end of a string, with support for Unicode whitespace characters unlike PHP's native trim function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::trim(' foo bar ');\n\n// 'foo bar'\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Strings in JSON (Laravel)\nDESCRIPTION: Example of defining translation strings in a JSON file within the lang directory. This approach is recommended for applications with a large number of translatable strings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"I love programming.\": \"Me encanta programar.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Open Swoole PHP Extension\nDESCRIPTION: Command to install the Open Swoole PHP extension using PECL.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npecl install openswoole\n```\n\n----------------------------------------\n\nTITLE: Running FrankenPHP Server\nDESCRIPTION: Command to serve Laravel applications using FrankenPHP, a modern PHP application server written in Go.\nSOURCE: https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfrankenphp php-server -r public/\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Laravel Sleep Fake With Carbon Time for Consistent Time Reporting in Tests (PHP)\nDESCRIPTION: Illustrates how to use the Sleep::fake() method with the syncWithCarbon option enabled, ensuring that the Carbon now() time is advanced in tandem with every fake sleep call. This allows Carbon-based time checks to reflect elapsed time logically even during fake sleeps, improving consistency in tests using Carbon for time calculations. Requires Sleep class and Carbon integration in the test environment.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_143\n\nLANGUAGE: php\nCODE:\n```\nSleep::fake(syncWithCarbon: true);\\n\\n$start = now();\\n\\nSleep::for(1)->second();\\n\\n$start->diffForHumans(); // 1 second ago\n```\n\n----------------------------------------\n\nTITLE: Wrapping Values in Arrays Using Laravel Arr Wrap Method in PHP\nDESCRIPTION: The Arr::wrap method ensures the given value is wrapped inside an array. If the value is already an array, it is returned as-is. Passing null returns an empty array. Depends on Illuminate\\Support\\Arr and is useful for safely handling single or multiple inputs uniformly in code.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$string = 'Laravel';\n\n$array = Arr::wrap($string);\n\n// ['Laravel']\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = Arr::wrap(null);\n\n// []\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage with `percentage` in PHP\nDESCRIPTION: The `percentage` method calculates the percentage of items in a collection that satisfy a given truth test. You can optionally specify the precision of the output, defaulting to two decimal places. This method is useful for calculating the proportion of items that meet a certain condition. The first example calculates the percentage where values are equal to 1.  The second example specifies a precision of 3.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_86\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([1, 1, 2, 2, 2, 3]);\n\n$percentage = $collection->percentage(fn ($value) => $value === 1);\n\n// 33.33\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$percentage = $collection->percentage(fn ($value) => $value === 1, precision: 3);\n\n// 33.333\n```\n\n----------------------------------------\n\nTITLE: Filtering Recorded HTTP Requests in Laravel Tests\nDESCRIPTION: Shows how to filter recorded HTTP requests and responses using a closure with Http::recorded() for more selective testing and inspection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\Request;\nuse Illuminate\\Http\\Client\\Response;\n\nHttp::fake([\n    'https://laravel.com' => Http::response(status: 500),\n    'https://nova.laravel.com/' => Http::response(),\n]);\n\nHttp::get('https://laravel.com');\nHttp::get('https://nova.laravel.com/');\n\n$recorded = Http::recorded(function (Request $request, Response $response) {\n    return $request->url() !== 'https://laravel.com' &&\n           $response->successful();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a React Form with Laravel Precognition\nDESCRIPTION: This snippet shows how to create a form in React using Laravel Precognition's useForm hook, handling form state, validation events, and error display.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useForm } from 'laravel-precognition-react';\n\nexport default function Form() {\n    const form = useForm('post', '/users', {\n        name: '',\n        email: '',\n    });\n\n    const submit = (e) => {\n        e.preventDefault();\n\n        form.submit();\n    };\n\n    return (\n        <form onSubmit={submit}>\n            <label htmlFor=\"name\">Name</label>\n            <input\n                id=\"name\"\n                value={form.data.name}\n                onChange={(e) => form.setData('name', e.target.value)}\n                onBlur={() => form.validate('name')}\n            />\n            {form.invalid('name') && <div>{form.errors.name}</div>}\n\n            <label htmlFor=\"email\">Email</label>\n            <input\n                id=\"email\"\n                value={form.data.email}\n                onChange={(e) => form.setData('email', e.target.value)}\n                onBlur={() => form.validate('email')}\n            />\n            {form.invalid('email') && <div>{form.errors.email}</div>}\n\n            <button disabled={form.processing}>\n                Create User\n            </button>\n        </form>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Exit Codes of Laravel Console Commands (Pest and PHPUnit)\nDESCRIPTION: Demonstrates how to test Artisan command exit codes using the assertExitCode method in both Pest and PHPUnit. The code shows how to verify that a command completed with a specific exit code.\nSOURCE: https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntest('console command', function () {\n    $this->artisan('inspire')->assertExitCode(0);\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Test a console command.\n */\npublic function test_console_command(): void\n{\n    $this->artisan('inspire')->assertExitCode(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Collections into Fully Filled Groups with splitIn() - PHP\nDESCRIPTION: Shows the splitIn method which breaks a collection into a given number of groups, completely filling non-terminal groups before allocating the remainder to the last group. Inputs include a collection and number of desired groups. Outputs a collection of evenly sized groups with the last group possibly smaller.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_124\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$groups = $collection->splitIn(3);\n\n$groups->all();\n\n// [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n```\n\n----------------------------------------\n\nTITLE: Crediting Transactions with Laravel Cashier\nDESCRIPTION: Demonstrates how to credit a specific line item in a transaction. Credits add funds to the customer's balance for future purchases and can only be applied to manually-collected transactions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n$transaction = $user->transactions()->first();\n\n// Credit a specific line item fully...\n$response = $transaction->credit('Compensation', 'pri_123');\n```\n\n----------------------------------------\n\nTITLE: Testing for Success or Failure in Laravel Console Commands\nDESCRIPTION: Demonstrates using assertSuccessful and assertFailed methods to test whether a console command exited successfully or failed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->artisan('inspire')->assertSuccessful();\n\n$this->artisan('inspire')->assertFailed();\n```\n\n----------------------------------------\n\nTITLE: Disabling Fortify Views\nDESCRIPTION: Configuration setting to disable Fortify's default view routes for JavaScript-driven single-page applications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'views' => false,\n```\n\n----------------------------------------\n\nTITLE: Intercepting Gate Checks with After Method in PHP\nDESCRIPTION: Shows how to use the Gate::after method to define a closure that executes after all other authorization checks. This can be used to override results for specific users like administrators.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nGate::after(function (User $user, string $ability, bool|null $result, mixed $arguments) {\n    if ($user->isAdministrator()) {\n        return true;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Pint Basic Commands\nDESCRIPTION: Various commands to run Pint for code style fixing, including basic usage, specific paths, and test mode\nSOURCE: https://github.com/laravel/docs/blob/12.x/pint.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/pint\n```\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/pint app/Models\n\n./vendor/bin/pint app/Models/User.php\n```\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/pint -v\n```\n\nLANGUAGE: shell\nCODE:\n```\n./vendor/bin/pint --test\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Possible Prefixes in Laravel PHP\nDESCRIPTION: The chopStart method can also accept an array of values, removing the first one found at the beginning of the string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_92\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$url = Str::of('http://laravel.com')->chopStart(['https://', 'http://']);\n\n// 'laravel.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring Homestead Provider in YAML\nDESCRIPTION: YAML configuration snippet for setting the Vagrant provider in the Homestead.yaml file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprovider: virtualbox\n```\n\n----------------------------------------\n\nTITLE: Stopping Exception Propagation in Laravel\nDESCRIPTION: Shows how to prevent an exception from being logged by the default logging stack using the stop method or returning false from the callback.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Exceptions\\InvalidOrderException;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->report(function (InvalidOrderException $e) {\n        // ...\n    })->stop();\n\n    $exceptions->report(function (InvalidOrderException $e) {\n        return false;\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Access to Telescope Dashboard\nDESCRIPTION: PHP code defining a Gate authorization rule to control access to the Telescope dashboard in non-local environments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n/**\n * Register the Telescope gate.\n *\n * This gate determines who can access Telescope in non-local environments.\n */\nprotected function gate(): void\n{\n    Gate::define('viewTelescope', function (User $user) {\n        return in_array($user->email, [\n            'taylor@laravel.com',\n        ]);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Pagination Views\nDESCRIPTION: Example of configuring Laravel to use Bootstrap styling for pagination views instead of the default Tailwind CSS.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Pagination\\Paginator;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Paginator::useBootstrapFive();\n    Paginator::useBootstrapFour();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Queue Worker with Verbose Output\nDESCRIPTION: Artisan command to start a queue worker with the verbose flag, which includes processed job IDs in the command output for better monitoring and debugging.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_67\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Queue After Commit\nDESCRIPTION: Configuration for Redis queue connection to process jobs after database transaction commits.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n'redis' => [\n    'driver' => 'redis',\n    // ...\n    'after_commit' => true,\n],\n```\n\n----------------------------------------\n\nTITLE: Component Directory Structure Example\nDESCRIPTION: Shows an example directory structure for accordion components, illustrating how component templates are organized.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_75\n\nLANGUAGE: text\nCODE:\n```\n/resources/views/components/accordion.blade.php\n/resources/views/components/accordion/item.blade.php\n```\n\n----------------------------------------\n\nTITLE: Raw PHP in Blade Templates\nDESCRIPTION: Examples of embedding raw PHP code in Blade templates using @php directive and class imports with @use.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_26\n\nLANGUAGE: blade\nCODE:\n```\n@php\n    $counter = 1;\n@endphp\n```\n\nLANGUAGE: blade\nCODE:\n```\n@use('App\\Models\\Flight')\n```\n\nLANGUAGE: blade\nCODE:\n```\n@use('App\\Models\\Flight', 'FlightModel')\n```\n\nLANGUAGE: blade\nCODE:\n```\n@use('App\\Models\\{Flight, Airport}')\n```\n\n----------------------------------------\n\nTITLE: Recreating Databases for Parallel Testing in Laravel\nDESCRIPTION: Runs tests in parallel while recreating test databases, ensuring a clean environment for each test execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan test --parallel --recreate-databases\n```\n\n----------------------------------------\n\nTITLE: Trimming Right Side with Str::rtrim in Laravel\nDESCRIPTION: The Str::rtrim method strips whitespace from the end of a string, with support for Unicode whitespace characters unlike PHP's native rtrim function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::rtrim('  foo bar  ');\n\n// '  foo bar'\n```\n\n----------------------------------------\n\nTITLE: Conditionally Modifying a Non-Empty String in Laravel\nDESCRIPTION: The whenNotEmpty method invokes the given closure if the string is not empty. If the closure returns a value, that value will be returned by the whenNotEmpty method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_160\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('Framework')->whenNotEmpty(function (Stringable $string) {\n    return $string->prepend('Laravel ');\n});\n\n// 'Laravel Framework'\n```\n\n----------------------------------------\n\nTITLE: Checking for Single Item with containsOneItem() in PHP\nDESCRIPTION: The `containsOneItem` method determines if the collection contains exactly one item. Returns `true` if the count is 1, otherwise `false`.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ncollect([])->containsOneItem();\n\n// false\n\ncollect(['1'])->containsOneItem();\n\n// true\n\ncollect(['1', '2'])->containsOneItem();\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Localizing Notifications in Laravel PHP\nDESCRIPTION: Demonstrates how to send notifications in a specific locale using the locale method on the Notification class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$user->notify((new InvoicePaid($invoice))->locale('es'));\n```\n\nLANGUAGE: php\nCODE:\n```\nNotification::locale('es')->send(\n    $users, new InvoicePaid($invoice)\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Homestead per Project with Composer\nDESCRIPTION: Command to install Homestead for a specific project using Composer package manager.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/homestead --dev\n```\n\n----------------------------------------\n\nTITLE: Partitioning a Collection with `partition` in PHP\nDESCRIPTION: The `partition` method divides a collection into two collections based on a truth test. It returns an array with two elements, the first containing the elements that pass the test and the second containing the elements that do not.  This example separates the collection into those whose value is less than three and those which are equal to or greater than three.  Note that this method behaves differently with Eloquent Collections.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_85\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([1, 2, 3, 4, 5, 6]);\n\n[$underThree, $equalOrAboveThree] = $collection->partition(function (int $i) {\n    return $i < 3;\n});\n\n$underThree->all();\n\n// [1, 2]\n\n$equalOrAboveThree->all();\n\n// [3, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Custom Error Page Template in Laravel Blade\nDESCRIPTION: Shows how to access exception information in a custom error page Blade template.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<h2>{{ $exception->getMessage() }}</h2>\n```\n\n----------------------------------------\n\nTITLE: Testing Mail Sending with PHPUnit\nDESCRIPTION: Example of testing mail functionality using Laravel's PHPUnit testing framework. Demonstrates the same assertions as the Pest example but in PHPUnit syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse App\\Mail\\OrderShipped;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    public function test_orders_can_be_shipped(): void\n    {\n        Mail::fake();\n\n        // Perform order shipping...\n\n        // Assert that no mailables were sent...\n        Mail::assertNothingSent();\n\n        // Assert that a mailable was sent...\n        Mail::assertSent(OrderShipped::class);\n\n        // Assert a mailable was sent twice...\n        Mail::assertSent(OrderShipped::class, 2);\n\n        // Assert a mailable was sent to an email address...\n        Mail::assertSent(OrderShipped::class, 'example@laravel.com');\n\n        // Assert a mailable was sent to multiple email addresses...\n        Mail::assertSent(OrderShipped::class, ['example@laravel.com', '...']);\n\n        // Assert a mailable was not sent...\n        Mail::assertNotSent(AnotherMailable::class);\n\n        // Assert 3 total mailables were sent...\n        Mail::assertSentCount(3);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Unique Items in Collections with unique() - PHP\nDESCRIPTION: Covers the unique method which returns unique items from a collection while preserving original keys. Supports specifying a key to determine uniqueness in nested arrays/objects or a closure returning uniqueness criteria. Uses loose comparison semantics, treating string and integer equivalents as equal. Outputs filtered collection with unique values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_136\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 1, 2, 2, 3, 4, 2]);\n\n$unique = $collection->unique();\n\n$unique->values()->all();\n\n// [1, 2, 3, 4]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n    ['name' => 'iPhone 5', 'brand' => 'Apple', 'type' => 'phone'],\n    ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n    ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n    ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n]);\n\n$unique = $collection->unique('brand');\n\n$unique->values()->all();\n\n/*\n    [\n        ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n        ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$unique = $collection->unique(function (array $item) {\n    return $item['brand'].$item['type'];\n});\n\n$unique->values()->all();\n\n/*\n    [\n        ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n        ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n        ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n        ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Sorting Collections by Keys Using a Callback with sortKeysUsing in Laravel Collections - PHP\nDESCRIPTION: Explains sortKeysUsing, which sorts collection keys using a user-provided callback comparison function, similar to PHP's uksort. The callback receives two keys and should return an integer determining sort order. This allows for customized key sorting like natural case-insensitive order.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_121\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'ID' => 22345,\n    'first' => 'John',\n    'last' => 'Doe',\n]);\n\n$sorted = $collection->sortKeysUsing('strnatcasecmp');\n\n$sorted->all();\n\n/*\n    [\n        'first' => 'John',\n        'ID' => 22345,\n        'last' => 'Doe',\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Base64 with Str::toBase64 in Laravel\nDESCRIPTION: The Str::toBase64 method converts a given string to its Base64 representation, useful for encoding data for storage or transmission.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$base64 = Str::toBase64('Laravel');\n\n// TGFyYXZlbA==\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Keys with `only` in PHP\nDESCRIPTION: The `only` method filters a collection to include only the items with the specified keys. The first example shows using it to get the product id and name of a collection. The output will include only these specified keys and associated values. Note that this method behaves differently in Eloquent Collections.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_83\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect([\n    'product_id' => 1,\n    'name' => 'Desk',\n    'price' => 100,\n    'discount' => false\n]);\n\n$filtered = $collection->only(['product_id', 'name']);\n\n$filtered->all();\n\n// ['product_id' => 1, 'name' => 'Desk']\n```\n\n----------------------------------------\n\nTITLE: Installing Predis Client for Laravel Redis\nDESCRIPTION: Command to install the Predis client via Composer if unable to use the PhpRedis extension.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require predis/predis:^2.0\n```\n\n----------------------------------------\n\nTITLE: Publishing Telescope Assets After Upgrading\nDESCRIPTION: Shell command to republish Telescope's assets after upgrading to a new version.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan telescope:publish\n```\n\n----------------------------------------\n\nTITLE: Publishing Artisan Command Stubs\nDESCRIPTION: Shows how to publish and customize Artisan command stub files for generating classes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan stub:publish\n```\n\n----------------------------------------\n\nTITLE: Using Interactive Artisan Commands for Events and Listeners in Laravel\nDESCRIPTION: Running the make:event and make:listener commands without arguments triggers an interactive prompt where Laravel will ask for necessary information like class names and event bindings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:event\n\nphp artisan make:listener\n```\n\n----------------------------------------\n\nTITLE: Creating Lazy Collection from File using Generator - PHP\nDESCRIPTION: Illustrates creating a `LazyCollection` using a PHP generator function, ideal for processing large datasets like files without loading everything into memory. The generator reads the file line by line using `fgets` and yields each line, allowing collection methods like `chunk`, `map`, and `each` to process data incrementally. Dependencies include `Illuminate\\Support\\LazyCollection` and potentially models for mapping (e.g., `App\\Models\\LogEntry`).\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_156\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\LogEntry;\nuse Illuminate\\Support\\LazyCollection;\n\nLazyCollection::make(function () {\n    $handle = fopen('log.txt', 'r');\n\n    while (($line = fgets($handle)) !== false) {\n        yield $line;\n    }\n\n    fclose($handle);\n})->chunk(4)->map(function (array $lines) {\n    return LogEntry::fromLines($lines);\n})->each(function (LogEntry $logEntry) {\n    // Process the log entry...\n});\n```\n\n----------------------------------------\n\nTITLE: String Length with Str::length in PHP\nDESCRIPTION: Shows how to use Str::length to get the length of a string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$length = Str::length('Laravel');\n\n// 7\n```\n\n----------------------------------------\n\nTITLE: Casting Attribute to Custom Collection in Laravel Eloquent (PHP)\nDESCRIPTION: Shows how to specify a custom collection class (`App\\Collections\\OptionCollection`) when using the `AsCollection` cast via the static `using` method. This allows casting a JSON attribute (`options`) to a specific user-defined collection type instead of the default `Illuminate\\Support\\Collection`. Requires the custom collection class and importing `AsCollection`.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Collections\\OptionCollection;\nuse Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n\n/**\n * Get the attributes that should be cast.\n *\n * @return array<string, string>\n */\nprotected function casts(): array\n{\n    return [\n        'options' => AsCollection::using(OptionCollection::class),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Laravel Model Observer Class Structure\nDESCRIPTION: Shows the basic structure of a Laravel model observer class with methods for handling various model events like created, updated, deleted, restored, and forceDeleted.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Observers;\n\nuse App\\Models\\User;\n\nclass UserObserver\n{\n    /**\n     * Handle the User \"created\" event.\n     */\n    public function created(User $user): void\n    {\n        // ...\n    }\n\n    /**\n     * Handle the User \"updated\" event.\n     */\n    public function updated(User $user): void\n    {\n        // ...\n    }\n\n    /**\n     * Handle the User \"deleted\" event.\n     */\n    public function deleted(User $user): void\n    {\n        // ...\n    }\n\n    /**\n     * Handle the User \"restored\" event.\n     */\n    public function restored(User $user): void\n    {\n        // ...\n    }\n\n    /**\n     * Handle the User \"forceDeleted\" event.\n     */\n    public function forceDeleted(User $user): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Details from an Existing OAuth Token\nDESCRIPTION: Method to retrieve user details using an existing valid access token without going through the OAuth flow.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Socialite\\Facades\\Socialite;\n\n$user = Socialite::driver('github')->userFromToken($token);\n```\n\n----------------------------------------\n\nTITLE: Purging OAuth Tokens using Artisan Commands in Laravel\nDESCRIPTION: This snippet shows various Artisan commands for purging revoked and expired OAuth tokens and authorization codes in Laravel Passport.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n# Purge revoked and expired tokens and auth codes...\nphp artisan passport:purge\n\n# Only purge tokens expired for more than 6 hours...\nphp artisan passport:purge --hours=6\n\n# Only purge revoked tokens and auth codes...\nphp artisan passport:purge --revoked\n\n# Only purge expired tokens and auth codes...\nphp artisan passport:purge --expired\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom WebDriver\nDESCRIPTION: PHP code showing how to configure a custom WebDriver instance for using alternative browsers with Dusk.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Facebook\\WebDriver\\Remote\\RemoteWebDriver;\n\n/**\n * Create the RemoteWebDriver instance.\n */\nprotected function driver(): RemoteWebDriver\n{\n    return RemoteWebDriver::create(\n        'http://localhost:4444/wd/hub', DesiredCapabilities::phantomjs()\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Typesense Environment Variables\nDESCRIPTION: Basic environment variable configuration for Typesense in the .env file. These settings specify the Scout driver and Typesense connection details.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nSCOUT_DRIVER=typesense\nTYPESENSE_API_KEY=masterKey\nTYPESENSE_HOST=localhost\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Models in Laravel Relationships\nDESCRIPTION: Shows how to populate default models with attributes using array or closure syntax\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the author of the post.\n */\npublic function user(): BelongsTo\n{\n    return $this->belongsTo(User::class)->withDefault([\n        'name' => 'Guest Author',\n    ]);\n}\n\n/**\n * Get the author of the post.\n */\npublic function user(): BelongsTo\n{\n    return $this->belongsTo(User::class)->withDefault(function (User $user, Post $post) {\n        $user->name = 'Guest Author';\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Str::camel for camelCase Conversion in PHP\nDESCRIPTION: The Str::camel method converts the given string to camelCase format, transforming underscore-separated words into a camelCase identifier.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$converted = Str::camel('foo_bar');\n\n// 'fooBar'\n```\n\n----------------------------------------\n\nTITLE: Validating UUID Strings in PHP\nDESCRIPTION: Demonstrates the use of the 'isUuid' method to check if a given string is a valid UUID (Universally Unique Identifier).\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_121\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('5ace9ab9-e9cf-4ec6-a19d-5881212a452c')->isUuid();\n\n// true\n\n$result = Str::of('Taylor')->isUuid();\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Customized File Attachment with MIME Type\nDESCRIPTION: Shows how to attach a file with a custom display name and MIME type specification.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\npublic function attachments(): array\n{\n    return [\n        Attachment::fromPath('/path/to/file')\n            ->as('name.pdf')\n            ->withMime('application/pdf'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Vue Sidebar Variant\nDESCRIPTION: Example of modifying the sidebar variant in a Vue starter kit from the default to an inset variant by changing the variant prop on the Sidebar component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n<Sidebar collapsible=\"icon\" variant=\"sidebar\"> [tl! remove]\n<Sidebar collapsible=\"icon\" variant=\"inset\"> [tl! add]\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Precognition for React with Inertia\nDESCRIPTION: Command to install the Inertia-compatible version of Laravel Precognition for React.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm install laravel-precognition-react-inertia\n```\n\n----------------------------------------\n\nTITLE: Configuring Guzzle Options in Laravel's HTTP Client\nDESCRIPTION: Shows how to set additional Guzzle request options for individual requests and globally for all outgoing requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::withOptions([\n    'debug' => true,\n])->get('http://example.com/users');\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Http::globalOptions([\n        'allow_redirects' => false,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Incrementing IDs for Custom Pivot Models in Laravel\nDESCRIPTION: This code snippet shows how to set the 'incrementing' property to true for a custom pivot model with an auto-incrementing primary key in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Indicates if the IDs are auto-incrementing.\n *\n * @var bool\n */\npublic $incrementing = true;\n\n```\n\n----------------------------------------\n\nTITLE: UUID Validation with Str::isUuid in PHP\nDESCRIPTION: Demonstrates the use of Str::isUuid to determine if a given string is a valid UUID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$isUuid = Str::isUuid('a0a2a2d2-0b87-4a18-83f2-2529882be2de');\n\n// true\n\n$isUuid = Str::isUuid('laravel');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Removing Middleware from Laravel Groups\nDESCRIPTION: This snippet demonstrates how to remove a middleware entirely from a Laravel middleware group using the withMiddleware method in the bootstrap/app.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$middleware->web(remove: [\n    StartSession::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Sorting Array by Values Using Laravel Arr Sort Method in PHP\nDESCRIPTION: The Arr::sort method sorts an array by its values in ascending order. It accepts an optional closure for custom sorting criteria, especially for arrays of arrays. The result maintains keys unless reset with array_values. Requires Illuminate\\Support\\Arr and can be applied on scalar or multidimensional arrays.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['Desk', 'Table', 'Chair'];\n\n$sorted = Arr::sort($array);\n\n// ['Chair', 'Desk', 'Table']\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [\n    ['name' => 'Desk'],\n    ['name' => 'Table'],\n    ['name' => 'Chair'],\n];\n\n$sorted = array_values(Arr::sort($array, function (array $value) {\n    return $value['name'];\n}));\n\n/*\n    [\n        ['name' => 'Chair'],\n        ['name' => 'Desk'],\n        ['name' => 'Table'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing a Policy Filter in Laravel PHP\nDESCRIPTION: This code demonstrates how to implement a 'before' method in a policy class to perform pre-authorization checks. It allows administrators to bypass normal authorization checks for all actions within the policy.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n/**\n * Perform pre-authorization checks.\n */\npublic function before(User $user, string $ability): bool|null\n{\n    if ($user->isAdministrator()) {\n        return true;\n    }\n\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Code with Benchmark - PHP\nDESCRIPTION: The `Benchmark` class helps in measuring the execution time of code blocks. You can use `Benchmark::dd` to execute callbacks and display their duration. The `value` method can also be used to execute a callback and return the result along with the duration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_128\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Benchmark;\n\nBenchmark::dd(fn () => User::find(1)); // 0.1 ms\n\nBenchmark::dd([\n    'Scenario 1' => fn () => User::count(), // 0.5 ms\n    'Scenario 2' => fn () => User::all()->count(), // 20.0 ms\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nBenchmark::dd(fn () => User::count(), iterations: 10); // 0.5 ms\n```\n\nLANGUAGE: php\nCODE:\n```\n[$count, $duration] = Benchmark::value(fn () => User::count());\n```\n\n----------------------------------------\n\nTITLE: Combining Time Units with Laravel Sleep and Chained Duration in PHP\nDESCRIPTION: Shows how to combine multiple units of time for sleep duration by chaining the and() method on Sleep::for(). This example sleeps for one second plus ten milliseconds using the Sleep class, enabling flexible and readable duration specifications. It requires Illuminate\\Support\\Sleep and uses method chaining to create composite sleep durations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_138\n\nLANGUAGE: php\nCODE:\n```\nSleep::for(1)->second()->and(10)->milliseconds();\n```\n\n----------------------------------------\n\nTITLE: Creating Validator Instance with validator - PHP\nDESCRIPTION: The `validator` function creates a new validator instance using the provided data, rules, and messages. It acts as an alternative to using the `Validator` facade and allows for convenient validation of data.  It takes three arguments: $data, $rules and $messages.  Each argument corresponds to the input data, validation rules, and custom messages, respectively.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_123\n\nLANGUAGE: php\nCODE:\n```\n$validator = validator($data, $rules, $messages);\n```\n\n----------------------------------------\n\nTITLE: Implementing Isolatable Command in Laravel\nDESCRIPTION: Shows how to implement the Isolatable interface on a Laravel console command class to ensure only one instance runs at a time.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\nuse Illuminate\\Contracts\\Console\\Isolatable;\n\nclass SendEmails extends Command implements Isolatable\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Base Test Case Configuration\nDESCRIPTION: Shows how to configure the base test case class to automatically run seeders before tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests;\n\nuse Illuminate\\Foundation\\Testing\\TestCase as BaseTestCase;\n\nabstract class TestCase extends BaseTestCase\n{\n    /**\n     * Indicates whether the default seeder should run before each test.\n     *\n     * @var bool\n     */\n    protected $seed = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Native Types in PHPDoc for Laravel Methods\nDESCRIPTION: Example of a Laravel method using native types where @param and @return attributes are omitted due to the use of explicit type declarations in the method signature.\nSOURCE: https://github.com/laravel/docs/blob/12.x/contributions.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Execute the job.\n */\npublic function handle(AudioProcessor $processor): void\n{\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Authentication in Laravel .env File\nDESCRIPTION: Environment variable configuration for connecting to MongoDB with authentication credentials via the Laravel Sail MongoDB container.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nMONGODB_USERNAME=user\nMONGODB_PASSWORD=laravel\nMONGODB_URI=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017\n```\n\n----------------------------------------\n\nTITLE: Using Str::headline for Human-Readable String Conversion in PHP\nDESCRIPTION: The Str::headline method converts strings delimited by casing, hyphens, or underscores into a space-delimited string with each word's first letter capitalized, creating readable headlines.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$headline = Str::headline('steve_jobs');\n\n// Steve Jobs\n\n$headline = Str::headline('EmailNotificationSent');\n\n// Email Notification Sent\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Pub/Sub in Laravel Artisan Command\nDESCRIPTION: Shows how to set up a Redis channel listener using the subscribe method within a Laravel Artisan command. This allows for long-running processes to handle incoming messages.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\nuse Illuminate\\Support\\Facades\\Redis;\n\nclass RedisSubscribe extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'redis:subscribe';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Subscribe to a Redis channel';\n\n    /**\n     * Execute the console command.\n     */\n    public function handle(): void\n    {\n        Redis::subscribe(['test-channel'], function (string $message) {\n            echo $message;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Singleton Middleware in Laravel Service Provider\nDESCRIPTION: This snippet shows how to register a middleware as a singleton in Laravel's service container, ensuring the same instance is used for both handle and terminate methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\TerminatingMiddleware;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    $this->app->singleton(TerminatingMiddleware::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Paddle Customers with Options in PHP\nDESCRIPTION: Method to create a Paddle customer with additional options supported by the Paddle API, allowing for customization of customer details.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$customer = $user->createAsCustomer($options);\n```\n\n----------------------------------------\n\nTITLE: Validating Files Using File Rule Builder in Laravel\nDESCRIPTION: This code demonstrates how to validate file uploads using Laravel's fluent file validation rule builder, including file types and sizes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_80\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rules\\File;\n\nValidator::validate($input, [\n    'attachment' => [\n        'required',\n        File::types(['mp3', 'wav'])\n            ->min(1024)\n            ->max(12 * 1024),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Panel Component in Markdown Emails\nDESCRIPTION: This example demonstrates the panel component in Markdown emails, which renders text in a panel with a different background color to draw attention to specific content.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_27\n\nLANGUAGE: blade\nCODE:\n```\n<x-mail::panel>\nThis is the panel content.\n</x-mail::panel>\n```\n\n----------------------------------------\n\nTITLE: Basic Blade Template in Laravel Folio\nDESCRIPTION: Simple example showing a basic Blade template file that creates a /greeting route in Laravel Folio\nSOURCE: https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<div>\n    Hello World\n</div>\n```\n\n----------------------------------------\n\nTITLE: Padding Strings on Right Side in PHP\nDESCRIPTION: Shows how to use the 'padRight' method to add padding to the right side of a string until it reaches a specified length.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_136\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$padded = Str::of('James')->padRight(10, '-');\n\n// 'James-----'\n\n$padded = Str::of('James')->padRight(10);\n\n// 'James     '\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Verification Middleware (PHP)\nDESCRIPTION: This code shows how to use the 'verified' middleware to protect routes, ensuring only verified users can access them.\nSOURCE: https://github.com/laravel/docs/blob/12.x/verification.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/profile', function () {\n    // Only verified users may access this route...\n})->middleware(['auth', 'verified']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Event Listener Directories in Laravel\nDESCRIPTION: Configuration for scanning custom directories for event listeners using the withEvents method in bootstrap/app.php. This allows organizing listeners in domain-specific folders instead of the default app/Listeners directory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n->withEvents(discover: [\n    __DIR__.'/../app/Domain/Orders/Listeners',\n])\n```\n\n----------------------------------------\n\nTITLE: Using Str::take to Extract Characters in Laravel\nDESCRIPTION: The Str::take method returns a specified number of characters from the beginning of a string, useful for creating previews or truncated content.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$taken = Str::take('Build something amazing!', 5);\n\n// Build\n```\n\n----------------------------------------\n\nTITLE: Adding Products to Existing Subscriptions in Laravel Cashier\nDESCRIPTION: Method for adding a new price product to an existing subscription, which will be billed on the next billing cycle.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->subscription('default')->addPrice('price_chat');\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Priority for URL Defaults in Laravel (PHP)\nDESCRIPTION: Shows how to configure middleware priority in `bootstrap/app.php` using `prependToPriorityList`. This ensures the custom `SetDefaultLocaleForUrls` middleware runs before Laravel's `SubstituteBindings` middleware, preventing conflicts with implicit model binding.\nSOURCE: https://github.com/laravel/docs/blob/12.x/urls.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->prependToPriorityList(\n        before: \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        prepend: \\App\\Http\\Middleware\\SetDefaultLocaleForUrls::class,\n    );\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Cartesian Product with crossJoin() in PHP\nDESCRIPTION: The `crossJoin` method generates the Cartesian product of the collection's values with the values from one or more given arrays or collections. It returns a new collection containing arrays of all possible permutations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2]);\n\n$matrix = $collection->crossJoin(['a', 'b']);\n\n$matrix->all();\n\n/*\n    [\n        [1, 'a'],\n        [1, 'b'],\n        [2, 'a'],\n        [2, 'b'],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2]);\n\n$matrix = $collection->crossJoin(['a', 'b'], ['I', 'II']);\n\n$matrix->all();\n\n/*\n    [\n        [1, 'a', 'I'],\n        [1, 'a', 'II'],\n        [1, 'b', 'I'],\n        [1, 'b', 'II'],\n        [2, 'a', 'I'],\n        [2, 'a', 'II'],\n        [2, 'b', 'I'],\n        [2, 'b', 'II'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Squashing Migrations in Laravel\nDESCRIPTION: Use the schema:dump command to squash migrations into a single SQL file. Optionally prune existing migrations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan schema:dump\n\n# Dump the current database schema and prune all existing migrations...\nphp artisan schema:dump --prune\n```\n\n----------------------------------------\n\nTITLE: Creating IP Address Column in Laravel Migration\nDESCRIPTION: The ipAddress method creates a VARCHAR equivalent column for storing IP addresses in a Laravel database migration. When using PostgreSQL, an INET column will be created.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n$table->ipAddress('visitor');\n```\n\n----------------------------------------\n\nTITLE: Configuring Previous Encryption Keys in Laravel\nDESCRIPTION: Example showing how to configure previous encryption keys in Laravel's .env file to enable graceful key rotation. This allows the application to try both current and previous keys when decrypting values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/encryption.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nAPP_KEY=\"base64:J63qRTDLub5NuZvP+kb8YIorGS6qFYHKVo6u7179stY=\"\nAPP_PREVIOUS_KEYS=\"base64:2nLsGFGzyoae2ax3EF2Lyq/hH6QghBGLIq5uL+Gp8/w=\"\n```\n\n----------------------------------------\n\nTITLE: Using Str::chopEnd for String Suffix Removal in PHP\nDESCRIPTION: The Str::chopEnd method removes the last occurrence of the given value only if it appears at the end of the string. It can also accept an array of values to check.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$url = Str::chopEnd('app/Models/Photograph.php', '.php');\n\n// 'app/Models/Photograph'\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$url = Str::chopEnd('laravel.com/index.php', ['/index.html', '/index.php']);\n\n// 'laravel.com'\n```\n\n----------------------------------------\n\nTITLE: Converting Unicode to ASCII with Str::transliterate in Laravel\nDESCRIPTION: The Str::transliterate method attempts to convert a given string into its closest ASCII representation, useful for normalizing text with special characters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$email = Str::transliterate('ⓣⓔⓢⓣ@ⓛⓐⓡⓐⓥⓔⓛ.ⓒⓞⓜ');\n\n// 'test@laravel.com'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Date Input Values in Laravel\nDESCRIPTION: Converting date/time input values to Carbon instances for easier date manipulation using the date method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$birthday = $request->date('birthday');\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Factory Contract in Laravel Event Listener\nDESCRIPTION: This snippet demonstrates how to use dependency injection to implement a Laravel contract in an event listener. It shows type-hinting the Redis Factory interface in the constructor so the service container can inject the appropriate implementation when resolving the listener.\nSOURCE: https://github.com/laravel/docs/blob/12.x/contracts.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\OrderWasPlaced;\nuse App\\Models\\User;\nuse Illuminate\\Contracts\\Redis\\Factory;\n\nclass CacheOrderInformation\n{\n    /**\n     * Create a new event handler instance.\n     */\n    public function __construct(\n        protected Factory $redis,\n    ) {}\n\n    /**\n     * Handle the event.\n     */\n    public function handle(OrderWasPlaced $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Key-Value Pair with `Arr::forget()` - PHP\nDESCRIPTION: This snippet demonstrates how to remove a specific key-value pair from a deeply nested array using the `Arr::forget()` method and dot notation. It accepts the array and the key path (using dot notation) as arguments. The method modifies the array in place, removing the specified element.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['products' => ['desk' => ['price' => 100]]];\n\nArr::forget($array, 'products.desk');\n\n// ['products' => []]\n```\n\n----------------------------------------\n\nTITLE: Creating Event Streams in Laravel\nDESCRIPTION: Demonstrates how to use the eventStream method to return server-sent events (SSE) streamed responses. It shows how to yield responses to the stream and customize event names.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/chat', function () {\n    return response()->eventStream(function () {\n        $stream = OpenAI::client()->chat()->createStreamed(...);\n\n        foreach ($stream as $response) {\n            yield $response->choices[0];\n        }\n    });\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\StreamedEvent;\n\nyield new StreamedEvent(\n    event: 'update',\n    data: $response->choices[0],\n);\n```\n\n----------------------------------------\n\nTITLE: Clearing Laravel Route Cache\nDESCRIPTION: Command to clear the existing route cache when routes are modified. This ensures new routes are properly registered.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan route:clear\n```\n\n----------------------------------------\n\nTITLE: Decrypting Laravel Environment File with Custom Key\nDESCRIPTION: Decrypt an encrypted environment file using a custom decryption key with the --key option.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan env:decrypt --key=3UVsEgGVK36XN82KKeyLFMhvosbZN1aF\n```\n\n----------------------------------------\n\nTITLE: Container Resolution Using Facades and Helpers\nDESCRIPTION: Shows how to resolve container instances using the App facade and app helper when outside service providers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Transistor;\nuse Illuminate\\Support\\Facades\\App;\n\n$transistor = App::make(Transistor::class);\n\n$transistor = app(Transistor::class);\n```\n\n----------------------------------------\n\nTITLE: Using Str::deduplicate for Character Deduplication in PHP\nDESCRIPTION: The Str::deduplicate method replaces consecutive instances of a character with a single instance. By default it deduplicates spaces, but can be used with any specified character.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::deduplicate('The   Laravel   Framework');\n\n// The Laravel Framework\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::deduplicate('The---Laravel---Framework', '-');\n\n// The-Laravel-Framework\n```\n\n----------------------------------------\n\nTITLE: Retrieving old input values - Laravel PHP\nDESCRIPTION: This snippet demonstrates how to retrieve old input values flashed into the session using the `old()` helper function. The first example retrieves a value, while the second retrieves a value with a default fallback. This function is crucial for retaining form data after validation failures.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_99\n\nLANGUAGE: php\nCODE:\n```\n$value = old('value');\n\n$value = old('value', 'default');\n```\n\n----------------------------------------\n\nTITLE: Alpine.js Form with Live Validation using Precognition\nDESCRIPTION: HTML form setup with Alpine.js directives for live validation using Precognition, including input handling and error display.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<form x-data=\"{\n    form: $form('post', '/register', {\n        name: '',\n        email: '',\n    }),\n}\">\n    @csrf\n    <label for=\"name\">Name</label>\n    <input\n        id=\"name\"\n        name=\"name\"\n        x-model=\"form.name\"\n        @change=\"form.validate('name')\"\n    />\n    <template x-if=\"form.invalid('name')\">\n        <div x-text=\"form.errors.name\"></div>\n    </template>\n\n    <label for=\"email\">Email</label>\n    <input\n        id=\"email\"\n        name=\"email\"\n        x-model=\"form.email\"\n        @change=\"form.validate('email')\"\n    />\n    <template x-if=\"form.invalid('email')\">\n        <div x-text=\"form.errors.email\"></div>\n    </template>\n\n    <button :disabled=\"form.processing\">\n        Create User\n    </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions with throw_if - PHP\nDESCRIPTION: The `throw_if` function throws a specified exception if a given boolean expression evaluates to `true`. This helps to simplify conditional exception handling within your code.  You can also supply an error message to be included in the exception.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_118\n\nLANGUAGE: php\nCODE:\n```\nthrow_if(! Auth::user()->isAdmin(), AuthorizationException::class);\n\nthrow_if(\n    ! Auth::user()->isAdmin(),\n    AuthorizationException::class,\n    'You are not allowed to access this page.'\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Laravel Policy Method for Guest Users in PHP\nDESCRIPTION: This snippet shows how to define a policy method that allows guest users by using a nullable type-hint for the User parameter. It determines if a given post can be updated by checking if the user ID matches the post's user ID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\Post;\nuse App\\Models\\User;\n\nclass PostPolicy\n{\n    /**\n     * Determine if the given post can be updated by the user.\n     */\n    public function update(?User $user, Post $post): bool\n    {\n        return $user?->id === $post->user_id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting OAuth Access Scopes in Laravel Socialite\nDESCRIPTION: Method to completely overwrite all existing scopes on the authentication request with a new set of scopes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn Socialite::driver('github')\n    ->setScopes(['read:user', 'public_repo'])\n    ->redirect();\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Uppercase with Str::upper in Laravel\nDESCRIPTION: The Str::upper method converts a given string to uppercase, providing a convenient wrapper around PHP's strtoupper function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::upper('laravel');\n\n// LARAVEL\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Strings in PHP (Laravel)\nDESCRIPTION: Example of defining translation strings in a PHP file within the lang directory. This approach is used for storing language-specific messages.\nSOURCE: https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// lang/en/messages.php\n\nreturn [\n    'welcome' => 'Welcome to our application!',\n];\n```\n\n----------------------------------------\n\nTITLE: Checking Canceled Subscription Status in Laravel Cashier\nDESCRIPTION: Demonstrates methods to check if a subscription has been canceled, is in a grace period, or has ended completely.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription('default')->canceled()) {\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription('default')->onGracePeriod()) {\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription('default')->ended()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Text-Only Mail Notification in Laravel\nDESCRIPTION: Demonstrates using only plain-text view for mail notifications.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function toMail(object $notifiable): MailMessage\n{\n    return (new MailMessage)->text(\n        'mail.invoice.paid-text', ['invoice' => $this->invoice]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response from Array in Laravel Route\nDESCRIPTION: Shows how to return an array from a Laravel route, which is automatically converted into a JSON response by the framework.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function () {\n    return [1, 2, 3];\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Tax Rates for Subscriptions in Laravel Cashier\nDESCRIPTION: This code shows how to implement the taxRates method on a billable model to specify tax rates for subscriptions in Laravel Cashier. It returns an array of Stripe tax rate IDs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_80\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The tax rates that should apply to the customer's subscriptions.\n *\n * @return array<int, string>\n */\npublic function taxRates(): array\n{\n    return ['txr_id'];\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Query Builder Results in Laravel Controller\nDESCRIPTION: This PHP code demonstrates how to use the paginate method in a Laravel controller to paginate database query results and pass them to a view.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\View\\View;\n\nclass UserController extends Controller\n{\n    /**\n     * Show all application users.\n     */\n    public function index(): View\n    {\n        return view('user.index', [\n            'users' => DB::table('users')->paginate(15)\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling natdnshostresolver in Laravel Homestead VirtualBox Configuration\nDESCRIPTION: This YAML configuration snippet shows how to disable the natdnshostresolver setting for VirtualBox in a Homestead configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nprovider: virtualbox\nnatdnshostresolver: 'off'\n```\n\n----------------------------------------\n\nTITLE: Monitoring Queue Job Count in Laravel\nDESCRIPTION: Command to monitor queue job counts and alert when they exceed a specified threshold, helping detect potential queue bottlenecks or performance issues.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_105\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:monitor redis:default,redis:deployments --max=100\n```\n\n----------------------------------------\n\nTITLE: Using Custom Page Methods in Laravel Dusk Tests\nDESCRIPTION: Example of using a custom page method in a Dusk test. The browser instance is automatically passed to the custom method, simplifying test code.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_77\n\nLANGUAGE: php\nCODE:\n```\nuse Tests\\Browser\\Pages\\Dashboard;\n\n$browser->visit(new Dashboard)\n    ->createPlaylist('My Playlist')\n    ->assertSee('My Playlist');\n```\n\n----------------------------------------\n\nTITLE: Displaying Two Factor Authentication Success Message in HTML\nDESCRIPTION: This snippet shows how to display a success message when two factor authentication has been enabled, instructing the user to complete the configuration process.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n@if (session('status') == 'two-factor-authentication-enabled')\n    <div class=\"mb-4 font-medium text-sm\">\n        Please finish configuring two factor authentication below.\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Installing ParaTest for Parallel Testing in Laravel\nDESCRIPTION: Installs the brianium/paratest package as a dev dependency and runs tests in parallel using Laravel's Artisan command-line tool.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require brianium/paratest --dev\n\nphp artisan test --parallel\n```\n\n----------------------------------------\n\nTITLE: Inspecting Uri Components in Laravel\nDESCRIPTION: Shows how to access individual components of a `Uri` instance using dedicated methods like `scheme()`, `host()`, `port()`, `path()`, `query()`, and `fragment()`. Assumes `$uri` is a previously created `Uri` instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_147\n\nLANGUAGE: php\nCODE:\n```\n$scheme = $uri->scheme();\n$host = $uri->host();\n$port = $uri->port();\n$path = $uri->path();\n$query = $uri->query();\n$fragment = $uri->fragment();\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Last Element with `Arr::last()` - PHP\nDESCRIPTION: This snippet demonstrates how to use the `Arr::last()` method to get the last element that satisfies a given condition defined in the callback function. The method accepts an array and a callback. Optionally a default value is accepted which is returned if no element satisfies the callback.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = [100, 200, 300, 110];\n\n$last = Arr::last($array, function (int $value, int $key) {\n    return $value >= 150;\n});\n\n// 300\n```\n\n----------------------------------------\n\nTITLE: Localizing Resource Route Verbs in Laravel\nDESCRIPTION: Shows how to localize the verbs used in resource route URIs, allowing for internationalization of route names.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Route::resourceVerbs([\n        'create' => 'crear',\n        'edit' => 'editar',\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Scope Existence\nDESCRIPTION: Demonstrates how to check if a specific scope has been defined\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nPassport::hasScope('place-orders');\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku CI for Laravel Dusk\nDESCRIPTION: JSON configuration for running Laravel Dusk tests on Heroku CI. It includes required buildpacks for PHP and Chrome, along with setup and test scripts.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"environments\": {\n    \"test\": {\n      \"buildpacks\": [\n        { \"url\": \"heroku/php\" },\n        { \"url\": \"https://github.com/heroku/heroku-buildpack-chrome-for-testing\" }\n      ],\n      \"scripts\": {\n        \"test-setup\": \"cp .env.testing .env\",\n        \"test\": \"nohup bash -c './vendor/laravel/dusk/bin/chromedriver-linux --port=9515 > /dev/null 2>&1 &' && nohup bash -c 'php artisan serve --no-reload > /dev/null 2>&1 &' && php artisan dusk\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context in Laravel Queued Jobs (PHP)\nDESCRIPTION: This snippet illustrates how context information is captured and shared with queued jobs in Laravel. It shows how to log within a job's handle method, which will include the context from when the job was dispatched.\nSOURCE: https://github.com/laravel/docs/blob/12.x/context.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass ProcessPodcast implements ShouldQueue\n{\n    use Queueable;\n\n    // ...\n\n    /**\n     * Execute the job.\n     */\n    public function handle(): void\n    {\n        Log::info('Processing podcast.', [\n            'podcast_id' => $this->podcast->id,\n        ]);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Header Presence in Laravel Tests\nDESCRIPTION: This snippet shows how to assert that a given header and value is present on the response using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$response->assertHeader($headerName, $value = null);\n```\n\n----------------------------------------\n\nTITLE: String Position Finding with Str::position in Laravel\nDESCRIPTION: Shows how to use Str::position to find the first occurrence of a substring within a string. Returns the numeric position or false if not found.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$position = Str::position('Hello, World!', 'Hello');\n// 0\n\n$position = Str::position('Hello, World!', 'W');\n// 7\n```\n\n----------------------------------------\n\nTITLE: Generating Inbound Cast Class with Artisan (Shell)\nDESCRIPTION: Uses the `php artisan make:cast` command with the `--inbound` option to generate a new custom cast class. This class will implement the `CastsInboundAttributes` interface, suitable for casts that only modify data being set on the model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:cast AsHash --inbound\n```\n\n----------------------------------------\n\nTITLE: Taking Items While a Condition is True with takeWhile() - PHP\nDESCRIPTION: Describes takeWhile which returns items in the collection while a given callback returns true, stopping at the first false. If the callback never returns false, all items are returned. The input is a callback, output is a subset collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_128\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4]);\n\n$subset = $collection->takeWhile(function (int $item) {\n    return $item < 3;\n});\n\n$subset->all();\n\n// [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Reversing Laravel Collection Items Order in PHP\nDESCRIPTION: Covers the `reverse` method which returns a collection with items in reversed order while preserving original keys. Input is a standard collection and output is a new collection ordered backwards but maintaining the same keys.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_103\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['a', 'b', 'c', 'd', 'e']);\n\n$reversed = $collection->reverse();\n\n$reversed->all();\n\n/*\n    [\n        4 => 'e',\n        3 => 'd',\n        2 => 'c',\n        1 => 'b',\n        0 => 'a',\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining Batchable Jobs in Laravel\nDESCRIPTION: Implementation of a batchable job class in Laravel using the Batchable trait, which provides methods to interact with the batch the job is part of, including checking if the batch has been cancelled.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Jobs;\n\nuse Illuminate\\Bus\\Batchable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Queue\\Queueable;\n\nclass ImportCsv implements ShouldQueue\n{\n    use Batchable, Queueable;\n\n    /**\n     * Execute the job.\n     */\n    public function handle(): void\n    {\n        if ($this->batch()->cancelled()) {\n            // Determine if the batch has been cancelled...\n\n            return;\n        }\n\n        // Import a portion of the CSV file...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Private Channels for Laravel Model Broadcasting\nDESCRIPTION: Demonstrates how to use PrivateChannel instances directly in the broadcastOn method, providing full control over channel naming conventions instead of relying on Laravel's automatic channel creation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Broadcasting\\PrivateChannel;\n\n/**\n * Get the channels that model events should broadcast on.\n *\n * @return array<int, \\Illuminate\\Broadcasting\\Channel>\n */\npublic function broadcastOn(string $event): array\n{\n    return [\n        new PrivateChannel('user.'.$this->id)\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Files in Browser with Laravel\nDESCRIPTION: Shows how to use the file method to display a file directly in the user's browser instead of initiating a download. It demonstrates basic usage and how to include custom headers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nreturn response()->file($pathToFile);\n\nreturn response()->file($pathToFile, $headers);\n```\n\n----------------------------------------\n\nTITLE: Creating UUID Foreign Key Column in Laravel Migration\nDESCRIPTION: The foreignUuid method creates a UUID equivalent column for use as a foreign key in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n$table->foreignUuid('user_id');\n```\n\n----------------------------------------\n\nTITLE: Adding Custom User Provider in Laravel\nDESCRIPTION: This snippet shows how to extend Laravel with a custom authentication user provider using the Auth::provider method in a service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\Extensions\\MongoUserProvider;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    // ...\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Auth::provider('mongo', function (Application $app, array $config) {\n            // Return an instance of Illuminate\\Contracts\\Auth\\UserProvider...\n\n            return new MongoUserProvider($app->make('mongo.connection'));\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Intercepting Feature Checks in Laravel Pennant\nDESCRIPTION: Demonstrates how to use the 'before' method in a class-based feature to intercept and modify feature checks based on configuration or other conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Features;\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Config;\nuse Illuminate\\Support\\Lottery;\n\nclass NewApi\n{\n    /**\n     * Run an always-in-memory check before the stored value is retrieved.\n     */\n    public function before(User $user): mixed\n    {\n        if (Config::get('features.new-api.disabled')) {\n            return $user->isInternalTeamMember();\n        }\n    }\n\n    /**\n     * Resolve the feature's initial value.\n     */\n    public function resolve(User $user): mixed\n    {\n        return match (true) {\n            $user->isInternalTeamMember() => true,\n            $user->isHighTrafficCustomer() => false,\n            default => Lottery::odds(1 / 100),\n        };\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Features;\n\nuse Illuminate\\Support\\Carbon;\nuse Illuminate\\Support\\Facades\\Config;\n\nclass NewApi\n{\n    /**\n     * Run an always-in-memory check before the stored value is retrieved.\n     */\n    public function before(User $user): mixed\n    {\n        if (Config::get('features.new-api.disabled')) {\n            return $user->isInternalTeamMember();\n        }\n\n        if (Carbon::parse(Config::get('features.new-api.rollout-date'))->isPast()) {\n            return true;\n        }\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reverb Pulse Monitoring\nDESCRIPTION: PHP configuration for setting up Reverb monitoring with Laravel Pulse.\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Reverb\\Pulse\\Recorders\\ReverbConnections;\nuse Laravel\\Reverb\\Pulse\\Recorders\\ReverbMessages;\n\n'recorders' => [\n    ReverbConnections::class => [\n        'sample_rate' => 1,\n    ],\n\n    ReverbMessages::class => [\n        'sample_rate' => 1,\n    ],\n\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Creating Paddle Customers in PHP\nDESCRIPTION: Method to create a Paddle customer record without starting a subscription, returning a Customer instance that can be used for later subscriptions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$customer = $user->createAsCustomer();\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Middleware in Laravel\nDESCRIPTION: Example of a middleware that performs actions before the request is handled by the application. This pattern is useful for request validation, authentication checks, or data preprocessing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass BeforeMiddleware\n{\n    public function handle(Request $request, Closure $next): Response\n    {\n        // Perform action\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Client Whisper Events with Laravel Echo\nDESCRIPTION: Shows how to listen for client-to-client whisper events using Laravel Echo's listenForWhisper method. This example listens for typing notifications and logs the name of the user who is typing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nEcho.private(`chat.${roomId}`)\n    .listenForWhisper('typing', (e) => {\n        console.log(e.name);\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Servers in Laravel\nDESCRIPTION: Sample configuration for Memcached cache driver in Laravel's config/cache.php file, showing how to specify server host, port, and weight.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'memcached' => [\n    // ...\n\n    'servers' => [\n        [\n            'host' => env('MEMCACHED_HOST', '127.0.0.1'),\n            'port' => env('MEMCACHED_PORT', 11211),\n            'weight' => 100,\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions with throw_unless - PHP\nDESCRIPTION: The `throw_unless` function throws a specified exception if a given boolean expression evaluates to `false`. This complements `throw_if` to allow for conditional exception throwing based on the inverse logic. Similar to `throw_if`, you can include an error message.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_119\n\nLANGUAGE: php\nCODE:\n```\nthrow_unless(Auth::user()->isAdmin(), AuthorizationException::class);\n\nthrow_unless(\n    Auth::user()->isAdmin(),\n    AuthorizationException::class,\n    'You are not allowed to access this page.'\n);\n```\n\n----------------------------------------\n\nTITLE: Keying Laravel Collection by Callback (PHP)\nDESCRIPTION: Re-indexes the collection using a value returned by a callback function applied to each item. The callback receives the item and its key and should return the value to be used as the new key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$keyed = $collection->keyBy(function (array $item, int $key) {\n    return strtoupper($item['product_id']);\n});\n\n$keyed->all();\n\n/*\n    [\n        'PROD-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n        'PROD-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Getting Value from Nested Array with `Arr::get()` - PHP\nDESCRIPTION: This snippet shows how to retrieve a value from a deeply nested array using dot notation with the `Arr::get()` method. It takes the array and the key path as arguments and returns the value associated with that key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$array = ['products' => ['desk' => ['price' => 100]]];\n\n$price = Arr::get($array, 'products.desk.price');\n\n// 100\n```\n\n----------------------------------------\n\nTITLE: Batch Filtering in Telescope\nDESCRIPTION: PHP code for the filterBatch method that determines whether to record all entries for a request or command based on specific criteria.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Collection;\nuse Laravel\\Telescope\\IncomingEntry;\nuse Laravel\\Telescope\\Telescope;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    $this->hideSensitiveRequestDetails();\n\n    Telescope::filterBatch(function (Collection $entries) {\n        if ($this->app->environment('local')) {\n            return true;\n        }\n\n        return $entries->contains(function (IncomingEntry $entry) {\n            return $entry->isReportableException() ||\n                $entry->isFailedJob() ||\n                $entry->isScheduledTask() ||\n                $entry->isSlowQuery() ||\n                $entry->hasMonitoredTag();\n            });\n    });\n```\n\n----------------------------------------\n\nTITLE: Customizing Guest Checkout Sessions in Laravel Cashier\nDESCRIPTION: This code snippet shows how to customize a guest checkout session by adding a promotion code. It uses the withPromotionCode method on the CheckoutBuilder instance before creating the checkout session.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_117\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\nuse Laravel\\Cashier\\Checkout;\n\nRoute::get('/product-checkout', function (Request $request) {\n    return Checkout::guest()\n        ->withPromotionCode('promo-code')\n        ->create('price_tshirt', [\n            'success_url' => route('your-success-route'),\n            'cancel_url' => route('your-cancel-route'),\n        ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Response Content in Laravel Tests\nDESCRIPTION: Methods to assert the content of the response, including exact content, no content, streamed content, and seeing specific text.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$response->assertContent($value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertNoContent($status = 204);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertStreamed();\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertStreamedContent($value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSee($value, $escape = true);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSeeInOrder(array $values, $escape = true);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSeeText($value, $escape = true);\n```\n\nLANGUAGE: php\nCODE:\n```\n$response->assertSeeTextInOrder(array $values, $escape = true);\n```\n\n----------------------------------------\n\nTITLE: Setting Values with data_set() in PHP\nDESCRIPTION: This snippet demonstrates setting values within nested arrays or objects using dot notation via data_set(), supporting wildcards for multiple targets and controlling overwrite behavior with an optional parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_53\n\nLANGUAGE: PHP\nCODE:\n```\n$data = ['products' => ['desk' => ['price' => 100]]];\n\ndata_set($data, 'products.desk.price', 200);\n\n// ['products' => ['desk' => ['price' => 200]]]\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$data = [\n    'products' => [\n        ['name' => 'Desk 1', 'price' => 100],\n        ['name' => 'Desk 2', 'price' => 150],\n    ],\n];\n\ndata_set($data, 'products.*.price', 200);\n\n/*\n    [\n        'products' => [\n            ['name' => 'Desk 1', 'price' => 200],\n            ['name' => 'Desk 2', 'price' => 200],\n        ],\n    ]\n*/\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$data = ['products' => ['desk' => ['price' => 100]]];\n\ndata_set($data, 'products.desk.price', 200, overwrite: false);\n\n// ['products' => ['desk' => ['price' => 100]]]\n```\n\n----------------------------------------\n\nTITLE: Testing Mail Attachments\nDESCRIPTION: Examples of testing different types of mail attachments including file paths, storage disks, and raw data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Mail\\Mailables\\Attachment;\n\nMail::assertSent(OrderShipped::class, function (OrderShipped $mail) {\n    return $mail->hasAttachment(\n        Attachment::fromPath('/path/to/file')\n            ->as('name.pdf')\n            ->withMime('application/pdf')\n    );\n});\n\nMail::assertSent(OrderShipped::class, function (OrderShipped $mail) {\n    return $mail->hasAttachment(\n        Attachment::fromStorageDisk('s3', '/path/to/file')\n    );\n});\n\nMail::assertSent(OrderShipped::class, function (OrderShipped $mail) use ($pdfData) {\n    return $mail->hasAttachment(\n        Attachment::fromData(fn () => $pdfData, 'name.pdf')\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Horizon via Composer\nDESCRIPTION: Use Composer to install Laravel Horizon package into your project.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/horizon\n```\n\n----------------------------------------\n\nTITLE: Using Str::charAt for Character Extraction in PHP\nDESCRIPTION: The Str::charAt method returns the character at the specified index position in a string. If the index is out of bounds, false is returned.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$character = Str::charAt('This is my name.', 6);\n\n// 's'\n```\n\n----------------------------------------\n\nTITLE: Initializing Laravel Echo with Pusher Authentication\nDESCRIPTION: JavaScript configuration for Laravel Echo with Pusher, including custom authorizer setup for cross-domain requests using axios for authentication.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Echo = new Echo({\n    broadcaster: \"pusher\",\n    cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,\n    encrypted: true,\n    key: import.meta.env.VITE_PUSHER_APP_KEY,\n    authorizer: (channel, options) => {\n        return {\n            authorize: (socketId, callback) => {\n                axios.post('/api/broadcasting/auth', {\n                    socket_id: socketId,\n                    channel_name: channel.name\n                })\n                .then(response => {\n                    callback(false, response.data);\n                })\n                .catch(error => {\n                    callback(true, error);\n                });\n            }\n        };\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Path Values in Laravel Tests\nDESCRIPTION: Demonstrates how to use the assertJsonPath method to verify specific values at given paths in the JSON response, including using closures for dynamic assertions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntest('asserting a json path value', function () {\n    $response = $this->postJson('/user', ['name' => 'Sally']);\n\n    $response\n        ->assertStatus(201)\n        ->assertJsonPath('team.owner.name', 'Darian');\n});\n\n$response->assertJsonPath('team.owner.name', fn (string $name) => strlen($name) >= 3);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Time in Laravel Tests\nDESCRIPTION: Demonstrates various methods to manipulate time in Laravel tests, including traveling to the future, past, and freezing time.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ntest('time can be manipulated', function () {\n    // Travel into the future...\n    $this->travel(5)->milliseconds();\n    $this->travel(5)->seconds();\n    $this->travel(5)->minutes();\n    $this->travel(5)->hours();\n    $this->travel(5)->days();\n    $this->travel(5)->weeks();\n    $this->travel(5)->years();\n\n    // Travel into the past...\n    $this->travel(-5)->hours();\n\n    // Travel to an explicit time...\n    $this->travelTo(now()->subHours(6));\n\n    // Return back to the present time...\n    $this->travelBack();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Model Factories in Laravel Seeders\nDESCRIPTION: Example of using Eloquent model factories in a seeder to generate 50 user records, each with one related post. This demonstrates Laravel's powerful factory relationships for efficient test data generation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n/**\n * Run the database seeders.\n */\npublic function run(): void\n{\n    User::factory()\n        ->count(50)\n        ->hasPosts(1)\n        ->create();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining View Routes in Laravel\nDESCRIPTION: Shows how to define view routes in Laravel using the Route::view method. This method provides a simple way to return a view without defining a full route or controller.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nRoute::view('/welcome', 'welcome');\n\nRoute::view('/welcome', 'welcome', ['name' => 'Taylor']);\n```\n\n----------------------------------------\n\nTITLE: Scoped Singleton Binding in Laravel Container\nDESCRIPTION: Example of registering a scoped singleton binding which creates one instance per request/job lifecycle. This is useful for services that should be reused within a request but recreated between requests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Services\\Transistor;\nuse App\\Services\\PodcastParser;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->scoped(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Queue Configuration for Laravel Event Listeners\nDESCRIPTION: Shows how to customize queue connection, name, and delay time for event listeners using class properties.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\n\nclass SendShipmentNotification implements ShouldQueue\n{\n    /**\n     * The name of the connection the job should be sent to.\n     *\n     * @var string|null\n     */\n    public $connection = 'sqs';\n\n    /**\n     * The name of the queue the job should be sent to.\n     *\n     * @var string|null\n     */\n    public $queue = 'listeners';\n\n    /**\n     * The time (seconds) before the job should be processed.\n     *\n     * @var int\n     */\n    public $delay = 60;\n}\n```\n\n----------------------------------------\n\nTITLE: Intersecting Laravel Collection by Association (PHP)\nDESCRIPTION: Compares the collection against another collection or array and returns the key/value pairs that exist in both. Comparison is based on both keys and values being equal.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'color' => 'red',\n    'size' => 'M',\n    'material' => 'cotton'\n]);\n\n$intersect = $collection->intersectAssoc([\n    'color' => 'blue',\n    'size' => 'M',\n    'material' => 'polyester'\n]);\n\n$intersect->all();\n\n// ['size' => 'M']\n```\n\n----------------------------------------\n\nTITLE: Displaying Email Verification Status in HTML\nDESCRIPTION: This HTML snippet demonstrates how to display the status of an email verification link resend request using a Blade template. It checks for a specific status in the session and displays a message accordingly.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n@if (session('status') == 'verification-link-sent')\n    <div class=\"mb-4 font-medium text-sm text-green-600\">\n        A new email verification link has been emailed to you!\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Creating Streamed Responses in Laravel\nDESCRIPTION: Demonstrates how to create streamed responses to reduce memory usage and improve performance for large responses. It shows how to use generators and output buffering to stream content.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction streamedContent(): Generator {\n    yield 'Hello, ';\n    yield 'World!';\n}\n\nRoute::get('/stream', function () {\n    return response()->stream(function (): void {\n        foreach (streamedContent() as $chunk) {\n            echo $chunk;\n            ob_flush();\n            flush();\n            sleep(2); // Simulate delay between chunks...\n        }\n    }, 200, ['X-Accel-Buffering' => 'no']);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Round Robin Mail Transport in Laravel\nDESCRIPTION: This snippet demonstrates how to set up a round-robin mail configuration in Laravel's mail.php config file. It defines multiple mailers to be used in a rotating fashion for load balancing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n'mailers' => [\n    'roundrobin' => [\n        'transport' => 'roundrobin',\n        'mailers' => [\n            'ses',\n            'postmark',\n        ],\n    ],\n\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Executing Insert Statement in Laravel PHP\nDESCRIPTION: Demonstrates how to perform an insert operation using the DB facade's insert method, including SQL query and parameter bindings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\nDB::insert('insert into users (id, name) values (?, ?)', [1, 'Marc']);\n```\n\n----------------------------------------\n\nTITLE: Using Authorization Middleware in Laravel Routes\nDESCRIPTION: This snippet shows how to use the 'can' middleware to authorize actions directly in route definitions. It demonstrates both the traditional middleware syntax and the shorter 'can' method syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\nRoute::put('/post/{post}', function (Post $post) {\n    // The current user may update the post...\n})->middleware('can:update,post');\n\nRoute::put('/post/{post}', function (Post $post) {\n    // The current user may update the post...\n})->can('update', 'post');\n```\n\n----------------------------------------\n\nTITLE: Changing Layout in Livewire Starter Kit (Blade)\nDESCRIPTION: Demonstrates how to switch from the default sidebar layout to a header layout in the Livewire starter kit. This involves modifying the app.blade.php file and adding the 'container' attribute to the main Flux component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<x-layouts.app.header>\n    <flux:main container>\n        {{ $slot }}\n    </flux:main>\n</x-layouts.app.header>\n```\n\n----------------------------------------\n\nTITLE: Defining MorphTo Relationship in PHP\nDESCRIPTION: Example of defining a morphTo relationship on an ActivityFeed model in Laravel. The parentable method returns a MorphTo relationship.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_93\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\nclass ActivityFeed extends Model\n{\n    /**\n     * Get the parent of the activity feed record.\n     */\n    public function parentable(): MorphTo\n    {\n        return $this->morphTo();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Bad Request Status in Laravel Tests\nDESCRIPTION: This snippet demonstrates how to assert that a response has a bad request (400) HTTP status code using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$response->assertBadRequest();\n```\n\n----------------------------------------\n\nTITLE: Checking Port Range\nDESCRIPTION: Shell command to view the current allowed port range on Unix-based systems\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncat /proc/sys/net/ipv4/ip_local_port_range\n# 32768\t60999\n```\n\n----------------------------------------\n\nTITLE: Clearing the Terminal in Laravel Prompts\nDESCRIPTION: Demonstrates how to use the clear function to clear the user's terminal.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\clear;\n\nclear();\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from the Left Side of a String in Laravel\nDESCRIPTION: The ltrim method removes whitespace from the left side of a string. It can also remove specified characters. Unlike PHP's native ltrim function, Laravel's ltrim method also removes unicode whitespace characters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_150\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('  Laravel  ')->ltrim();\n\n// 'Laravel  '\n\n$string = Str::of('/Laravel/')->ltrim('/');\n\n// 'Laravel/'\n```\n\n----------------------------------------\n\nTITLE: Switching PHP Versions in Valet\nDESCRIPTION: Commands to switch between different PHP versions using Valet's version management.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nvalet use php@8.2\n\nvalet use php\n```\n\n----------------------------------------\n\nTITLE: Defining a morphTo Relationship in Laravel\nDESCRIPTION: This snippet shows how to define a model with a morphTo relationship, which allows a model to belong to more than one possible parent model type through polymorphic relationships.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_80\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\nclass ActivityFeed extends Model\n{\n    /**\n     * Get the parent of the activity feed record.\n     */\n    public function parentable(): MorphTo\n    {\n        return $this->morphTo();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Echo Handler for Money Objects in Laravel Blade\nDESCRIPTION: This snippet demonstrates how to register a custom echo handler for Money objects in Laravel Blade. It uses the stringable method in the AppServiceProvider's boot method to define how Money objects should be rendered in Blade templates.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_101\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Blade;\nuse Money\\Money;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Blade::stringable(function (Money $money) {\n        return $money->formatTo('en_GB');\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Task Success and Failure Events in Laravel Scheduler\nDESCRIPTION: Shows how to implement success and failure handlers for scheduled tasks using onSuccess() and onFailure() methods. Failures are determined by non-zero exit codes from the commands.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')\n    ->daily()\n    ->onSuccess(function () {\n        // The task succeeded...\n    })\n    ->onFailure(function () {\n        // The task failed...\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Collection After Method Strict PHP\nDESCRIPTION: Demonstrates how to enforce strict type comparison when using the `after` method by passing `strict: true` as an argument. This ensures that the type and value of the item must match for a successful search.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ncollect([2, 4, 6, 8])->after('4', strict: true);\n\n// null\n```\n\n----------------------------------------\n\nTITLE: Implementing isStaticFile Method in Laravel Valet Driver\nDESCRIPTION: Method to determine if an incoming request is for a static file like images or stylesheets. Returns the full path to the static file if found, otherwise returns false.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Determine if the incoming request is for a static file.\n *\n * @return string|false\n */\npublic function isStaticFile(string $sitePath, string $siteName, string $uri)\n{\n    if (file_exists($staticFilePath = $sitePath.'/public/'.$uri)) {\n        return $staticFilePath;\n    }\n\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Session Driver in Laravel\nDESCRIPTION: Service provider implementation for registering a custom session driver in Laravel, showing how to extend the Session facade with a new driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\Extensions\\MongoSessionHandler;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass SessionServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        // ...\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Session::extend('mongo', function (Application $app) {\n            // Return an implementation of SessionHandlerInterface...\n            return new MongoSessionHandler;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Named Routes in Laravel\nDESCRIPTION: Shows how to generate redirect responses to named routes, with and without parameters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nreturn redirect()->route('login');\n```\n\nLANGUAGE: php\nCODE:\n```\n// For a route with the following URI: /profile/{id}\n\nreturn redirect()->route('profile', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Preventing Stray Processes in Laravel Tests\nDESCRIPTION: This code demonstrates how to use the preventStrayProcesses method to ensure all invoked processes have been faked, throwing an exception for any unfaked process executions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Process;\n\nProcess::preventStrayProcesses();\n\nProcess::fake([\n    'ls *' => 'Test output...',\n]);\n\n// Fake response is returned...\nProcess::run('ls -la');\n\n// An exception is thrown...\nProcess::run('bash import.sh');\n```\n\n----------------------------------------\n\nTITLE: Conditionally Transforming UUID Strings with whenIsUuid in Laravel PHP\nDESCRIPTION: The whenIsUuid method applies a transformation to a string if it is a valid UUID (Universally Unique Identifier). It uses a closure to perform the transformation on the Stringable instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_168\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('a0a2a2d2-0b87-4a18-83f2-2529882be2de')->whenIsUuid(function (Stringable $string) {\n    return $string->substr(0, 8);\n});\n\n// 'a0a2a2d2'\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Product Subscriptions in Laravel Paddle\nDESCRIPTION: Route implementation to create subscriptions with multiple products by passing an array of price IDs to the 'subscribe' method. This allows bundling multiple products in a single subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::post('/user/subscribe', function (Request $request) {\n    $checkout = $request->user()->subscribe([\n        'price_monthly',\n        'price_chat',\n    ]);\n\n    return view('billing', ['checkout' => $checkout]);\n});\n```\n\n----------------------------------------\n\nTITLE: Number: Spelling Ordinal Numbers in Words in PHP\nDESCRIPTION: This snippet converts ordinal numbers into their word form, like 'first', 'second', 'twenty-first', for textual ordinal expressions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_67\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::spellOrdinal(1);\n// first\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::spellOrdinal(2);\n// second\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::spellOrdinal(21);\n// twenty-first\n```\n\n----------------------------------------\n\nTITLE: Making Attributes Visible\nDESCRIPTION: The `makeVisible` method makes attributes visible on each model that are typically 'hidden'. This temporarily overrides any hidden attributes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = $users->makeVisible(['address', 'phone_number']);\n```\n\n----------------------------------------\n\nTITLE: Using updateOrCreate Method in Laravel Eloquent\nDESCRIPTION: Example of updateOrCreate method that updates an existing model if found based on first array of attributes, or creates a new one with merged attributes from both arrays.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$flight = Flight::updateOrCreate(\n    ['departure' => 'Oakland', 'destination' => 'San Diego'],\n    ['price' => 99, 'discounted' => 1]\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Pulse Entries Based on User Role\nDESCRIPTION: Example of setting up a filter in Laravel Pulse to exclude entries based on the authenticated user's role. This filter is typically defined in the boot method of your application's AppServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Auth;\nuse Laravel\\Pulse\\Entry;\nuse Laravel\\Pulse\\Facades\\Pulse;\nuse Laravel\\Pulse\\Value;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Pulse::filter(function (Entry|Value $entry) {\n        return Auth::user()->isNotAdmin();\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aggregate Data in Custom Pulse Card\nDESCRIPTION: Shows how to retrieve aggregated data within a custom Pulse Card component using the aggregate method. Example demonstrates fetching sum and count aggregates for top sellers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nclass TopSellers extends Card\n{\n    public function render()\n    {\n        return view('livewire.pulse.top-sellers', [\n            'topSellers' => $this->aggregate('user_sale', ['sum', 'count'])\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up OAuth Routes in Laravel Socialite\nDESCRIPTION: Example showing how to set up the two required routes for OAuth authentication: one for redirecting to the provider and another for handling the callback after authentication.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Socialite\\Facades\\Socialite;\n\nRoute::get('/auth/redirect', function () {\n    return Socialite::driver('github')->redirect();\n});\n\nRoute::get('/auth/callback', function () {\n    $user = Socialite::driver('github')->user();\n\n    // $user->token\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Deletes in Laravel Eloquent Models\nDESCRIPTION: Shows how to enable soft deletes for a model by adding the SoftDeletes trait, which marks records as deleted without actually removing them from the database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass Flight extends Model\n{\n    use SoftDeletes;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Discovery in Laravel Service Provider\nDESCRIPTION: Demonstrates how to enable Pennant's feature discovery capabilities in a Laravel service provider to include class-based features in the 'all' method results.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse Laravel\\Pennant\\Feature;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Feature::discover();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Job Handling in Laravel Event Listeners\nDESCRIPTION: Shows implementation of failed job handling with retry attempts and failure handling methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Throwable;\n\nclass SendShipmentNotification implements ShouldQueue\n{\n    use InteractsWithQueue;\n\n    /**\n     * The number of times the queued listener may be attempted.\n     *\n     * @var int\n     */\n    public $tries = 5;\n\n    /**\n     * Handle the event.\n     */\n    public function handle(OrderShipped $event): void\n    {\n        // ...\n    }\n\n    /**\n     * Handle a job failure.\n     */\n    public function failed(OrderShipped $event, Throwable $exception): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Database Table Structure in Laravel\nDESCRIPTION: Sample table structure for a many-to-many relationship between users and roles. The intermediate table 'role_user' connects the two entities with foreign keys to both related tables.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nusers\n    id - integer\n    name - string\n\nroles\n    id - integer\n    name - string\n\nrole_user\n    user_id - integer\n    role_id - integer\n```\n\n----------------------------------------\n\nTITLE: Debugging Laravel Query Builder with dd and dump\nDESCRIPTION: Shows how to use the dd and dump methods in Laravel's query builder for debugging. The dd method displays debug information and stops execution, while dump displays information but allows execution to continue.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nDB::table('users')->where('votes', '>', 100)->dd();\n\nDB::table('users')->where('votes', '>', 100)->dump();\n```\n\n----------------------------------------\n\nTITLE: Faking Specific Events in Laravel Tests (PHPUnit)\nDESCRIPTION: This snippet shows how to fake specific events in a Laravel test using PHPUnit. It demonstrates faking the OrderCreated event while allowing other events to be dispatched normally.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Test order process.\n */\npublic function test_orders_can_be_processed(): void\n{\n    Event::fake([\n        OrderCreated::class,\n    ]);\n\n    $order = Order::factory()->create();\n\n    Event::assertDispatched(OrderCreated::class);\n\n    // Other events are dispatched as normal...\n    $order->update([...]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom UserCollection Resource in Laravel\nDESCRIPTION: Creates a custom UserCollection resource class extending ResourceCollection, allowing for the addition of custom meta data to the collection response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array<int|string, mixed>\n     */\n    public function toArray(Request $request): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postmark Mailer with Message Stream in Laravel\nDESCRIPTION: PHP configuration array to set up Postmark mailer with a specific message stream ID in Laravel's mail.php config file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'postmark' => [\n    'transport' => 'postmark',\n    'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n    // 'client' => [\n    //     'timeout' => 5,\n    // ],\n],\n```\n\n----------------------------------------\n\nTITLE: Customizing Missing Argument Prompts in Laravel Command\nDESCRIPTION: Demonstrates how to customize the questions used when prompting for missing arguments in a Laravel console command.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Prompt for missing input arguments using the returned questions.\n *\n * @return array<string, string>\n */\nprotected function promptForMissingArgumentsUsing(): array\n{\n    return [\n        'user' => 'Which user ID should receive the mail?',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Cashier Default Models\nDESCRIPTION: Example of extending Cashier's default models to customize functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Paddle\\Subscription as CashierSubscription;\n\nclass Subscription extends CashierSubscription\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Format per Attribute\nDESCRIPTION: Demonstrates how to set specific date formats for individual model attributes\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nprotected function casts(): array\n{\n    return [\n        'birthday' => 'date:Y-m-d',\n        'joined_at' => 'datetime:Y-m-d H:00',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Wrapping Characters from a String in Laravel\nDESCRIPTION: The unwrap method removes the specified strings from the beginning and end of a given string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_154\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nStr::of('-Laravel-')->unwrap('-');\n\n// Laravel\n\nStr::of('{framework: \"Laravel\"}')->unwrap('{', '}');\n\n// framework: \"Laravel\"\n```\n\n----------------------------------------\n\nTITLE: Destroying Storage Symbolic Links in Laravel\nDESCRIPTION: Command to remove the configured symbolic links for storage.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan storage:unlink\n```\n\n----------------------------------------\n\nTITLE: Matching All Occurrences in Strings with PHP\nDESCRIPTION: Demonstrates the use of the 'matchAll' method to find all occurrences of a pattern in a string and return them as a collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_131\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('bar foo bar')->matchAll('/bar/');\n\n// collect(['bar', 'bar'])\n\n$result = Str::of('bar fun bar fly')->matchAll('/f(\\w*)/');\n\n// collect(['un', 'ly']);\n```\n\n----------------------------------------\n\nTITLE: Handling Process IDs and Signals in PHP\nDESCRIPTION: Demonstrates how to retrieve the process ID and send signals to a running process.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$process = Process::start('bash import.sh');\n\nreturn $process->id();\n\n$process->signal(SIGUSR2);\n```\n\n----------------------------------------\n\nTITLE: Soft Deleted Models Configuration\nDESCRIPTION: Example showing how to configure Folio to include soft deleted models in route model binding\nSOURCE: https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse function Laravel\\Folio\\{withTrashed};\n\nwithTrashed();\n\n?>\n\n<div>\n    User {{ $user->id }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Listening for Query Events in Laravel PHP\nDESCRIPTION: Shows how to register a listener for SQL query events in a service provider using the DB facade's listen method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Database\\Events\\QueryExecuted;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        // ...\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        DB::listen(function (QueryExecuted $query) {\n            // $query->sql;\n            // $query->bindings;\n            // $query->time;\n            // $query->toRawSql();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Pings for Task Status in Laravel Scheduler\nDESCRIPTION: Shows how to configure URL pings before and after task execution using pingBefore() and thenPing() methods. Useful for notifying external services of task execution status.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')\n    ->daily()\n    ->pingBefore($url)\n    ->thenPing($url);\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Single Charge Payment with Stripe\nDESCRIPTION: Provides an HTML form structure for processing a single charge payment using Stripe Elements.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"card-holder-name\" type=\"text\">\n\n<!-- Stripe Elements Placeholder -->\n<div id=\"card-element\"></div>\n\n<button id=\"card-button\">\n    Process Payment\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Immediate Ticks in Laravel Octane\nDESCRIPTION: Example of registering an immediate tick in Laravel Octane, which executes immediately when the server boots and then continues at the specified interval.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nOctane::tick('simple-ticker', fn () => ray('Ticking...'))\n    ->seconds(10)\n    ->immediate();\n```\n\n----------------------------------------\n\nTITLE: Custom Network Configuration for Xdebug on Linux\nDESCRIPTION: YAML configuration for defining a custom network in docker-compose.yml to set a static IP for the container, needed for Xdebug on Linux with Docker versions older than 20.10.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  custom_network:\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n\nservices:\n  laravel.test:\n    networks:\n      custom_network:\n        ipv4_address: 172.20.0.2\n```\n\n----------------------------------------\n\nTITLE: Truncating Strings in PHP\nDESCRIPTION: Demonstrates various ways to use the 'limit' method for truncating strings, including custom endings and word preservation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_125\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$truncated = Str::of('The quick brown fox jumps over the lazy dog')->limit(20);\n\n// The quick brown fox...\n\n$truncated = Str::of('The quick brown fox jumps over the lazy dog')->limit(20, ' (...)');\n\n// The quick brown fox (...)\n\n$truncated = Str::of('The quick brown fox')->limit(12, preserveWords: true);\n\n// The quick...\n```\n\n----------------------------------------\n\nTITLE: Accessing Stripe Client Directly in Laravel Cashier\nDESCRIPTION: Demonstrates how to use the static stripe method on the Cashier class to get direct access to the Stripe\\StripeClient instance, which allows performing operations like retrieving a list of prices.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_124\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Cashier\\Cashier;\n\n$prices = Cashier::stripe()->prices->all();\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Blade Templates in Laravel\nDESCRIPTION: Shows how to use the Blade facade to render raw Blade template strings into valid HTML, with optional data and cache management.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_99\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Blade;\n\nreturn Blade::render('Hello, {{ $name }}', ['name' => 'Julian Bashir']);\n\n// With cache management\nreturn Blade::render(\n    'Hello, {{ $name }}',\n    ['name' => 'Julian Bashir'],\n    deleteCachedView: true\n);\n```\n\n----------------------------------------\n\nTITLE: Using Concurrent Tasks with Swoole in Laravel Octane\nDESCRIPTION: Example of executing multiple database operations concurrently using Octane's concurrently method with Swoole. This allows for parallel processing of independent tasks to improve performance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse App\\Models\\Server;\nuse Laravel\\Octane\\Facades\\Octane;\n\n[$users, $servers] = Octane::concurrently([\n    fn () => User::all(),\n    fn () => Server::all(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Foreign Key Syntax in Laravel Migrations\nDESCRIPTION: Shows Laravel's terser syntax for creating foreign keys using the foreignId method with constrained(). This approach uses conventions to determine the referenced table and column.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('posts', function (Blueprint $table) {\n    $table->foreignId('user_id')->constrained();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Meter Event Summaries in Laravel Cashier\nDESCRIPTION: This code shows how to retrieve meter event summaries for a customer using Laravel Cashier. It uses the meterEventSummaries method to get usage information for a specific meter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$meterUsage = $user->meterEventSummaries($meterId);\n\n$meterUsage->first()->aggregated_value // 10\n```\n\n----------------------------------------\n\nTITLE: XHR Form Submission with Precognition\nDESCRIPTION: HTML form with Alpine.js setup for AJAX form submission using Precognition's submit method with promise handling for success and error cases.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<form\n    x-data=\"{\n        form: $form('post', '/register', {\n            name: '',\n            email: '',\n        }),\n        submit() {\n            this.form.submit()\n                .then(response => {\n                    this.form.reset();\n\n                    alert('User created.')\n                })\n                .catch(error => {\n                    alert('An error occurred.');\n                });\n        },\n    }\"\n    @submit.prevent=\"submit\"\n>\n```\n\n----------------------------------------\n\nTITLE: Publishing Tagged File Groups in Laravel Package\nDESCRIPTION: Demonstrates how to publish groups of package assets and resources separately using tags in the publishes method of the service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any package services.\n */\npublic function boot(): void\n{\n    $this->publishes([\n        __DIR__.'/../config/package.php' => config_path('package.php')\n    ], 'courier-config');\n\n    $this->publishesMigrations([\n        __DIR__.'/../database/migrations/' => database_path('migrations')\n    ], 'courier-migrations');\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads with Precognition\nDESCRIPTION: PHP form request code demonstrating how to customize validation rules for file fields to only be required during full form submissions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the validation rules that apply to the request.\n *\n * @return array\n */\nprotected function rules()\n{\n    return [\n        'avatar' => [\n            ...$this->isPrecognitive() ? [] : ['required'],\n            'image',\n            'mimes:jpg,png',\n            'dimensions:ratio=3/2',\n        ],\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Product Quantities in Multi-Product Subscriptions\nDESCRIPTION: Methods to specify quantities for individual products when creating a multi-product subscription, using an associative array with price IDs as keys and quantities as values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$checkout = $user->subscribe('default', ['price_monthly', 'price_chat' => 5]);\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Flashed Session Data in Laravel\nDESCRIPTION: Demonstrates how to redirect to a new URL while flashing data to the session in a single, fluent method chain. It also shows how to display the flashed message using Blade syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('/user/profile', function () {\n    // ...\n\n    return redirect('/dashboard')->with('status', 'Profile updated!');\n});\n```\n\nLANGUAGE: blade\nCODE:\n```\n@if (session('status'))\n    <div class=\"alert alert-success\">\n        {{ session('status') }}\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Middleware with Closures in Laravel Folio\nDESCRIPTION: Demonstrates how to define and use inline anonymous middleware functions within route groups. Includes request handling and next middleware execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Laravel\\Folio\\Folio;\n\nFolio::path(resource_path('views/pages'))->middleware([\n    'admin/*' => [\n        'auth',\n        'verified',\n\n        function (Request $request, Closure $next) {\n            // ...\n\n            return $next($request);\n        },\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Models by Keys\nDESCRIPTION: The `only` method retrieves models from the collection based on their primary keys.  This is essentially a filter, keeping only the models whose primary keys are in the provided array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = $users->only([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Defining Job Timeout in Laravel Queue Job Class\nDESCRIPTION: Implementation of a timeout property in a Laravel job class that specifies the maximum number of seconds a job can run before timing out. This overrides the command-line timeout setting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Jobs;\n\nclass ProcessPodcast implements ShouldQueue\n{\n    /**\n     * The number of seconds the job can run before timing out.\n     *\n     * @var int\n     */\n    public $timeout = 120;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Route with Sanctum Authentication in Laravel\nDESCRIPTION: Demonstrates how to define an API route in Laravel that uses Sanctum for authentication. This route returns the authenticated user's information.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/user', function (Request $request) {\n    return $request->user();\n})->middleware('auth:sanctum');\n```\n\n----------------------------------------\n\nTITLE: Conditionally Transforming Strings with Regular Expressions using whenTest in Laravel PHP\nDESCRIPTION: The whenTest method applies a transformation to a string if it matches a given regular expression. It uses a closure to perform the transformation on the Stringable instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_169\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('laravel framework')->whenTest('/laravel/', function (Stringable $string) {\n    return $string->title();\n});\n\n// 'Laravel Framework'\n```\n\n----------------------------------------\n\nTITLE: Wrapping Strings with Additional Text using wrap in Laravel PHP\nDESCRIPTION: The wrap method surrounds a string with additional text. It can add the same text to both sides or different text to the beginning and end of the string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_172\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nStr::of('Laravel')->wrap('\"');\n\n// \"Laravel\"\n\nStr::is('is')->wrap(before: 'This ', after: ' Laravel!');\n\n// This is Laravel!\n```\n\n----------------------------------------\n\nTITLE: React Starter Kit Directory Structure\nDESCRIPTION: Overview of the frontend directory structure in the React starter kit, showing the organization of components, hooks, layouts, utilities, pages, and TypeScript definitions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nresources/js/\n├── components/    # Reusable React components\n├── hooks/         # React hooks\n├── layouts/       # Application layouts\n├── lib/           # Utility functions and configuration\n├── pages/         # Page components\n└── types/         # TypeScript definitions\n```\n\n----------------------------------------\n\nTITLE: Defining User-Post Relationship Model in Laravel\nDESCRIPTION: Example of defining a User model with a hasMany relationship to Post models using Eloquent. Shows how to set up the posts() relationship method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\nclass User extends Model\n{\n    /**\n     * Get all of the posts for the user.\n     */\n    public function posts(): HasMany\n    {\n        return $this->hasMany(Post::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Zero Configuration Resolution Example in Laravel Routes\nDESCRIPTION: This snippet shows Laravel's ability to automatically resolve class dependencies without explicit configuration. A Service class is automatically resolved and injected into a route closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Service\n{\n    // ...\n}\n\nRoute::get('/', function (Service $service) {\n    dd($service::class);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Database Truncation Trait in PHPUnit Test\nDESCRIPTION: Shows how to use the DatabaseTruncation trait in a PHPUnit test class to truncate database tables between tests for improved performance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Browser;\n\nuse App\\Models\\User;\nuse Illuminate\\Foundation\\Testing\\DatabaseTruncation;\nuse Laravel\\Dusk\\Browser;\nuse Tests\\DuskTestCase;\n\nclass ExampleTest extends DuskTestCase\n{\n    use DatabaseTruncation;\n\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Processing All Queued Jobs and Exiting in Laravel\nDESCRIPTION: Artisan command to run a queue worker that processes all available jobs and then exits gracefully. Particularly useful in containerized environments like Docker to allow clean container shutdown.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_73\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work --stop-when-empty\n```\n\n----------------------------------------\n\nTITLE: Customizing Factory Model Discovery in Laravel PHP\nDESCRIPTION: Example of overriding the newFactory method on a model to specify a custom factory class location. This is useful when the default naming conventions for factories don't apply.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Database\\Factories\\Administration\\FlightFactory;\n\n/**\n * Create a new factory instance for the model.\n */\nprotected static function newFactory()\n{\n    return FlightFactory::new();\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Transforming Strings with whenNotExactly in Laravel PHP\nDESCRIPTION: The whenNotExactly method applies a transformation to a string if it doesn't exactly match a given value. It uses a closure to perform the transformation on the Stringable instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_164\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('framework')->whenNotExactly('laravel', function (Stringable $string) {\n    return $string->title();\n});\n\n// 'Framework'\n```\n\n----------------------------------------\n\nTITLE: Pipelining Redis Commands in Laravel\nDESCRIPTION: Demonstrates how to use the pipeline method to execute multiple Redis commands in a single network trip, improving performance for bulk operations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Redis;\nuse Illuminate\\Support\\Facades;\n\nFacades\\Redis::pipeline(function (Redis $pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Price Previews in PHP\nDESCRIPTION: Code to retrieve product prices that apply to a specific customer, which will automatically adjust based on the customer's location and currency.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$prices = User::find(1)->previewPrices(['pri_123', 'pri_456']);\n```\n\n----------------------------------------\n\nTITLE: Using the denyAsNotFound Convenience Method\nDESCRIPTION: Demonstrates the denyAsNotFound convenience method for returning a 404 status code when an action is denied, hiding resources instead of showing a forbidden error.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\Response;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::define('edit-settings', function (User $user) {\n    return $user->isAdmin\n        ? Response::allow()\n        : Response::denyAsNotFound();\n});\n```\n\n----------------------------------------\n\nTITLE: Revoking Sanctum API Tokens in Laravel\nDESCRIPTION: Examples of how to revoke Sanctum API tokens by deleting them from the database. Shows how to revoke all tokens, the current token, or a specific token.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Revoke all tokens...\n$user->tokens()->delete();\n\n// Revoke the token that was used to authenticate the current request...\n$request->user()->currentAccessToken()->delete();\n\n// Revoke a specific token...\n$user->tokens()->where('id', $tokenId)->delete();\n```\n\n----------------------------------------\n\nTITLE: Recording HTTP Requests and Responses in Laravel\nDESCRIPTION: Demonstrates how to use Http::recorded() to capture all HTTP requests and their corresponding responses for inspection during testing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nHttp::fake([\n    'https://laravel.com' => Http::response(status: 500),\n    'https://nova.laravel.com/' => Http::response(),\n]);\n\nHttp::get('https://laravel.com');\nHttp::get('https://nova.laravel.com/');\n\n$recorded = Http::recorded();\n\n[$request, $response] = $recorded[0];\n```\n\n----------------------------------------\n\nTITLE: Configuring Paddle API Keys in Environment File\nDESCRIPTION: Environment variable configuration for Paddle API keys, including client-side token, API key, Retain key, and webhook secret.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nPADDLE_CLIENT_SIDE_TOKEN=your-paddle-client-side-token\nPADDLE_API_KEY=your-paddle-api-key\nPADDLE_RETAIN_KEY=your-paddle-retain-key\nPADDLE_WEBHOOK_SECRET=\"your-paddle-webhook-secret\"\nPADDLE_SANDBOX=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Typesense Soft Delete Field Schema\nDESCRIPTION: Configuration example for defining a soft delete field in Typesense schema. This allows Scout to handle soft-deleted models correctly when using Typesense.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nUser::class => [\n    'collection-schema' => [\n        'fields' => [\n            // ...\n            [\n                'name' => '__soft_deleted',\n                'type' => 'int32',\n                'optional' => true,\n            ],\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Conditionally Modifying a String Based on Multiple Contents in Laravel\nDESCRIPTION: The whenContainsAll method invokes the given closure if the string contains all of the given sub-strings. The closure will receive the fluent string instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_158\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('tony stark')\n    ->whenContainsAll(['tony', 'stark'], function (Stringable $string) {\n        return $string->title();\n    });\n\n// 'Tony Stark'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis-Based Rate Limiting in Laravel\nDESCRIPTION: This snippet demonstrates how to configure Laravel to use Redis for rate limiting instead of the default cache driver. This is done in the bootstrap/app.php file using the throttleWithRedis method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->throttleWithRedis();\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Queueing Mail Messages in Laravel\nDESCRIPTION: Examples of queueing mail messages with various options including delayed sending and queue specifications\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nMail::to($request->user())\n    ->cc($moreUsers)\n    ->bcc($evenMoreUsers)\n    ->queue(new OrderShipped($order));\n\n// Delayed queueing\nMail::to($request->user())\n    ->later(now()->addMinutes(10), new OrderShipped($order));\n\n// Queue specification\n$message = (new OrderShipped($order))\n    ->onConnection('sqs')\n    ->onQueue('emails');\n\nMail::to($request->user())\n    ->queue($message);\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Checkout Session for Subscription\nDESCRIPTION: Example of creating a Stripe Checkout session for a subscription plan, including trial days and promotion code support.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/subscription-checkout', function (Request $request) {\n    return $request->user()\n        ->newSubscription('default', 'price_basic_monthly')\n        ->trialDays(5)\n        ->allowPromotionCodes()\n        ->checkout([\n            'success_url' => route('your-success-route'),\n            'cancel_url' => route('your-cancel-route'),\n        ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Notifying External Slack Workspaces in Laravel PHP\nDESCRIPTION: Shows how to route notifications to external Slack workspaces using SlackRoute::make with a stored Slack token and channel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Notifications\\Notification;\nuse Illuminate\\Notifications\\Slack\\SlackRoute;\n\nclass User extends Authenticatable\n{\n    use Notifiable;\n\n    /**\n     * Route notifications for the Slack channel.\n     */\n    public function routeNotificationForSlack(Notification $notification): mixed\n    {\n        return SlackRoute::make($this->slack_channel, $this->slack_token);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aggregate Values from Eloquent Models in Laravel\nDESCRIPTION: Examples of using aggregate methods like count and max with Eloquent models to retrieve scalar values from the database instead of model instances.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$count = Flight::where('active', 1)->count();\n\n$max = Flight::where('active', 1)->max('price');\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cashier Models in AppServiceProvider\nDESCRIPTION: Instructions for informing Cashier about custom models in the boot method of the AppServiceProvider. This allows Cashier to use the custom models throughout the application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Cashier\\Subscription;\nuse App\\Models\\Cashier\\SubscriptionItem;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Cashier::useSubscriptionModel(Subscription::class);\n    Cashier::useSubscriptionItemModel(SubscriptionItem::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cache Locks Across Processes in Laravel\nDESCRIPTION: Demonstrates acquiring a cache lock in one process and passing the owner token to a queued job for later release. Shows how to implement lock management across different processes using Laravel's Cache facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$podcast = Podcast::find($id);\n\n$lock = Cache::lock('processing', 120);\n\nif ($lock->get()) {\n    ProcessPodcast::dispatch($podcast, $lock->owner());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Validation with Vue and Laravel Precognition\nDESCRIPTION: Creates a form using Precognition's useForm function in Vue, enabling live validation on input changes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useForm } from 'laravel-precognition-vue';\n\nconst form = useForm('post', '/users', {\n    name: '',\n    email: '',\n});\n\nconst submit = () => form.submit();\n</script>\n\n<template>\n    <form @submit.prevent=\"submit\">\n        <label for=\"name\">Name</label>\n        <input\n            id=\"name\"\n            v-model=\"form.name\"\n            @change=\"form.validate('name')\"\n        />\n        <div v-if=\"form.invalid('name')\">\n            {{ form.errors.name }}\n        </div>\n\n        <label for=\"email\">Email</label>\n        <input\n            id=\"email\"\n            type=\"email\"\n            v-model=\"form.email\"\n            @change=\"form.validate('email')\"\n        />\n        <div v-if=\"form.invalid('email')\">\n            {{ form.errors.email }}\n        </div>\n\n        <button :disabled=\"form.processing\">\n            Create User\n        </button>\n    </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Fields on Demand with Precognition\nDESCRIPTION: HTML button implementation that validates specific fields with success and error callbacks, useful for multi-step forms.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<button\n    type=\"button\"\n    @click=\"form.validate({\n        only: ['name', 'email', 'phone'],\n        onSuccess: (response) => nextStep(),\n        onValidationError: (response) => /* ... */,\n    })\"\n>Next Step</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Formatter in Laravel\nDESCRIPTION: Demonstrates how to customize the Monolog formatter for a logging channel in Laravel's logging configuration. It shows setting a custom formatter class and options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n'browser' => [\n    'driver' => 'monolog',\n    'handler' => Monolog\\Handler\\BrowserConsoleHandler::class,\n    'formatter' => Monolog\\Formatter\\HtmlFormatter::class,\n    'formatter_with' => [\n        'dateFormat' => 'Y-m-d',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Feature Values in PHP with Laravel Pennant\nDESCRIPTION: Shows how to perform bulk updates of feature values for all users using Laravel Pennant's Feature class methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Pennant\\Feature;\n\nFeature::activateForEveryone('new-api');\n\nFeature::activateForEveryone('purchase-button', 'seafoam-green');\n\nFeature::deactivateForEveryone('new-api');\n```\n\n----------------------------------------\n\nTITLE: Request Watcher Size Limit Configuration\nDESCRIPTION: Configuration for Request Watcher to limit the size of recorded response data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n'watchers' => [\n    Watchers\\RequestWatcher::class => [\n        'enabled' => env('TELESCOPE_REQUEST_WATCHER', true),\n        'size_limit' => env('TELESCOPE_RESPONSE_SIZE_LIMIT', 64),\n    ],\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Using Cache and Route Facades in Laravel\nDESCRIPTION: Demonstrates how to use the Cache and Route facades to define a route that retrieves a value from the cache.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Cache;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/cache', function () {\n    return Cache::get('key');\n});\n```\n\n----------------------------------------\n\nTITLE: Log Watcher Level Configuration\nDESCRIPTION: Configuration for Log Watcher to specify the minimum log level to record.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n'watchers' => [\n    Watchers\\LogWatcher::class => [\n        'enabled' => env('TELESCOPE_LOG_WATCHER', true),\n        'level' => 'debug',\n    ],\n\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS for Laravel Octane\nDESCRIPTION: PHP configuration to enable HTTPS for Laravel Octane in the config/octane.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n'https' => env('OCTANE_HTTPS', false),\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Post Controller with Basic Methods\nDESCRIPTION: Implements a basic PostController with create and store methods for handling post creation functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\View\\View;\n\nclass PostController extends Controller\n{\n    public function create(): View\n    {\n        return view('post.create');\n    }\n\n    public function store(Request $request): RedirectResponse\n    {\n        // Validate and store the blog post...\n        $post = /** ... */\n        return to_route('post.show', ['post' => $post->id]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Strings afterLast() Method in Laravel\nDESCRIPTION: The afterLast method returns everything after the last occurrence of a given value in a string, useful for extracting file extensions or trailing segments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_78\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slice = Str::of('App\\Http\\Controllers\\Controller')->afterLast('\\\\');\n\n// 'Controller'\n```\n\n----------------------------------------\n\nTITLE: Intersecting Collections - PHP\nDESCRIPTION: The `intersect` method retains only the values from the original collection that are also present in the provided array or collection. The keys from the original collection are preserved.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$collection = collect(['Desk', 'Sofa', 'Chair']);\n\n$intersect = $collection->intersect(['Desk', 'Chair', 'Bookcase']);\n\n$intersect->all();\n\n// [0 => 'Desk', 2 => 'Chair']\n\n```\n\n----------------------------------------\n\nTITLE: Basic Query Ordering Examples\nDESCRIPTION: Shows various methods for ordering query results including single column, multiple columns, and date-based ordering.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->orderBy('name', 'desc')\n    ->get();\n\n$users = DB::table('users')\n    ->orderBy('name', 'desc')\n    ->orderBy('email', 'asc')\n    ->get();\n\n$user = DB::table('users')\n    ->latest()\n    ->first();\n```\n\n----------------------------------------\n\nTITLE: Publishing Package Views in Laravel Service Provider\nDESCRIPTION: Demonstrates how to make package views available for publishing to the application's resources/views/vendor directory using the publishes method in a service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap the package services.\n */\npublic function boot(): void\n{\n    $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n\n    $this->publishes([\n        __DIR__.'/../resources/views' => resource_path('views/vendor/courier'),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Default Information in PHP\nDESCRIPTION: Methods to override in the billable model to set default customer information (name and email) for Paddle checkout sessions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the customer's name to associate with Paddle.\n */\npublic function paddleName(): string|null\n{\n    return $this->name;\n}\n\n/**\n * Get the customer's email address to associate with Paddle.\n */\npublic function paddleEmail(): string|null\n{\n    return $this->email;\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Input Presence in PHP with Laravel Dusk\nDESCRIPTION: Assert the presence or absence of input elements in the DOM using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertInputPresent($name);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertInputMissing($name);\n```\n\n----------------------------------------\n\nTITLE: Markdown to HTML Conversion with Str::markdown in PHP\nDESCRIPTION: Demonstrates how to use Str::markdown to convert GitHub flavored Markdown to HTML, including options for handling HTML input.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$html = Str::markdown('# Laravel');\n\n// <h1>Laravel</h1>\n\n$html = Str::markdown('# Taylor <b>Otwell</b>', [\n    'html_input' => 'strip',\n]);\n\n// <h1>Taylor Otwell</h1>\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nStr::markdown('Inject: <script>alert(\"Hello XSS!\");</script>', [\n    'html_input' => 'strip',\n    'allow_unsafe_links' => false,\n]);\n\n// <p>Inject: alert(&quot;Hello XSS!&quot;);</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing ShouldDispatchAfterCommit Interface in Laravel Events\nDESCRIPTION: Demonstrates how to implement the ShouldDispatchAfterCommit interface to dispatch events after database transactions are committed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Events;\n\nuse App\\Models\\Order;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Contracts\\Events\\ShouldDispatchAfterCommit;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass OrderShipped implements ShouldDispatchAfterCommit\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    /**\n     * Create a new event instance.\n     */\n    public function __construct(\n        public Order $order,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Login with Laravel Dusk\nDESCRIPTION: Demonstrates how to authenticate a user in Dusk tests using the loginAs method, which accepts a user model instance or primary key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Laravel\\Dusk\\Browser;\n\n$this->browse(function (Browser $browser) {\n    $browser->loginAs(User::find(1))\n        ->visit('/home');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Validation in Laravel CLI\nDESCRIPTION: Example of using the select prompt function with custom validation to prevent duplicate owner roles.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$role = select(\n    label: 'What role should the user have?',\n    options: [\n        'member' => 'Member',\n        'contributor' => 'Contributor',\n        'owner' => 'Owner',\n    ],\n    validate: fn (string $value) =>\n        $value === 'owner' && User::where('role', 'owner')->exists()\n            ? 'An owner already exists.'\n            : null\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Package Commands in Laravel Service Provider\nDESCRIPTION: Shows how to register a package's Artisan commands with Laravel using the commands method in the service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Courier\\Console\\Commands\\InstallCommand;\nuse Courier\\Console\\Commands\\NetworkCommand;\n\n/**\n * Bootstrap any package services.\n */\npublic function boot(): void\n{\n    if ($this->app->runningInConsole()) {\n        $this->commands([\n            InstallCommand::class,\n            NetworkCommand::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Default Eager Loading with without() Method\nDESCRIPTION: This snippet demonstrates how to exclude a relationship that's defined in the $with property for a specific query using the without() method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_84\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::without('author')->get();\n```\n\n----------------------------------------\n\nTITLE: Excluding Stripe Webhooks from CSRF Protection in Laravel\nDESCRIPTION: Shows how to exclude Stripe webhook routes from CSRF protection in the application's bootstrap/app.php file to allow webhook requests to bypass Laravel's CSRF middleware.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_98\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->validateCsrfTokens(except: [\n        'stripe/*',\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Precognition for Laravel Routes with PHP\nDESCRIPTION: This snippet demonstrates how to add the HandlePrecognitiveRequests middleware to a route and create a form request for validation rules.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Requests\\StoreUserRequest;\nuse Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests;\n\nRoute::post('/users', function (StoreUserRequest $request) {\n    // ...\n})->middleware([HandlePrecognitiveRequests::class]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Email Verification in User Model (PHP)\nDESCRIPTION: Demonstrates how to enable email verification by modifying the User model. This involves importing the MustVerifyEmail interface and implementing it in the User class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n// ...\n\nclass User extends Authenticatable implements MustVerifyEmail\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Package Optimize Commands in Laravel\nDESCRIPTION: Demonstrates how to register package-specific Artisan commands that should be invoked when the optimize and optimize:clear commands are executed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Bootstrap any package services.\n */\npublic function boot(): void\n{\n    if ($this->app->runningInConsole()) {\n        $this->optimizes(\n            optimize: 'package:optimize',\n            clear: 'package:clear-optimizations',\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Queue Configuration in Laravel Event Listeners\nDESCRIPTION: Examples of methods to dynamically set queue connection, name, and delay at runtime.\nSOURCE: https://github.com/laravel/docs/blob/12.x/events.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the name of the listener's queue connection.\n */\npublic function viaConnection(): string\n{\n    return 'sqs';\n}\n\n/**\n * Get the name of the listener's queue.\n */\npublic function viaQueue(): string\n{\n    return 'listeners';\n}\n\n/**\n * Get the number of seconds before the job should be processed.\n */\npublic function withDelay(OrderShipped $event): int\n{\n    return $event->highPriority ? 0 : 60;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Closure Request Guard in Laravel\nDESCRIPTION: This snippet demonstrates how to implement a custom HTTP request-based authentication system using Auth::viaRequest method in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Auth::viaRequest('custom-token', function (Request $request) {\n        return User::where('token', (string) $request->token)->first();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Querying and Creating Relationships with Specific Pivot Values\nDESCRIPTION: Example of using withPivotValue to both query and create relationships with a particular pivot value, unlike wherePivot which only affects queries.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->belongsToMany(Role::class)\n    ->withPivotValue('approved', 1);\n```\n\n----------------------------------------\n\nTITLE: Publishing Passport Views in Laravel using Artisan\nDESCRIPTION: This snippet demonstrates how to publish Passport's views for customization using the vendor:publish Artisan command.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --tag=passport-views\n```\n\n----------------------------------------\n\nTITLE: Disabling Hash Algorithm Verification in Laravel\nDESCRIPTION: Setting the HASH_VERIFY environment variable to false to disable hash algorithm verification. This is useful when migrating between different hashing algorithms within an application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/hashing.md#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nHASH_VERIFY=false\n```\n\n----------------------------------------\n\nTITLE: Slow Outgoing Requests Configuration\nDESCRIPTION: Configuration example for URL grouping and threshold settings in the SlowOutgoingRequests recorder.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nRecorders\\SlowOutgoingRequests::class => [\n    // ...\n    'threshold' => [\n        '#backup.zip$#' => 5000,\n        'default' => env('PULSE_SLOW_OUTGOING_REQUESTS_THRESHOLD', 1000),\n    ],\n    'groups' => [\n        // '#^https://api\\.github\\.com/repos/.*$#' => 'api.github.com/repos/*',\n        // '#^https?://([^/]*).*$#' => '\\1',\n        // '#/\\d+#' => '/*',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Customer Management with Stripe\nDESCRIPTION: Collection of methods for managing Stripe customers including retrieval, creation, and updates\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Cashier\\Cashier;\n\n$user = Cashier::findBillable($stripeId);\n\n$stripeCustomer = $user->createAsStripeCustomer();\n\n$stripeCustomer = $user->createAsStripeCustomer($options);\n\n$stripeCustomer = $user->asStripeCustomer();\n\n$stripeCustomer = $user->createOrGetStripeCustomer();\n\n$stripeCustomer = $user->updateStripeCustomer($options);\n```\n\n----------------------------------------\n\nTITLE: Attaching and Detaching Multiple Roles in Laravel Eloquent\nDESCRIPTION: Demonstrates how to attach and detach multiple roles at once using arrays. It also shows how to attach roles with additional data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_101\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->roles()->detach([1, 2, 3]);\n\n$user->roles()->attach([\n    1 => ['expires' => $expires],\n    2 => ['expires' => $expires],\n]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Temporary URL Generation\nDESCRIPTION: Service provider implementation for customizing temporary URL generation for storage disks\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse DateTime;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Storage::disk('local')->buildTemporaryUrlsUsing(\n            function (string $path, DateTime $expiration, array $options) {\n                return URL::temporarySignedRoute(\n                    'files.download',\n                    $expiration,\n                    array_merge($options, ['path' => $path])\n                );\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium on Apple Silicon for Laravel Dusk\nDESCRIPTION: Special YAML configuration for Selenium service when running on Apple Silicon chips, using the standalone-chromium image.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nselenium:\n    image: 'selenium/standalone-chromium'\n    extra_hosts:\n        - 'host.docker.internal:host-gateway'\n    volumes:\n        - '/dev/shm:/dev/shm'\n    networks:\n        - sail\n```\n\n----------------------------------------\n\nTITLE: Merging Package Configuration in ServiceProvider\nDESCRIPTION: Shows how to merge the package's configuration with the application's published copy using the mergeConfigFrom method in the service provider's register method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\npublic function register(): void\n{\n    $this->mergeConfigFrom(\n        __DIR__.'/../config/courier.php', 'courier'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Authentication Page Layout in Livewire Starter Kit (Blade)\nDESCRIPTION: Shows how to change the authentication page layout variant in the Livewire starter kit. This example switches to the 'split' layout by modifying the auth.blade.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<x-layouts.auth.split>\n    {{ $slot }}\n</x-layouts.auth.split>\n```\n\n----------------------------------------\n\nTITLE: Number: Clamping Values within a Range in PHP\nDESCRIPTION: This snippet demonstrates constraining a number to a specified range using Number::clamp(), returning the min or max if the input exceeds bounds.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_57\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::clamp(105, min: 10, max: 100);\n// 100\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::clamp(5, min: 10, max: 100);\n// 10\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::clamp(10, min: 10, max: 100);\n// 10\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::clamp(20, min: 10, max: 100);\n// 20\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tags to Telescope Entries\nDESCRIPTION: PHP code for adding custom tags to Telescope entries, such as adding HTTP response status codes as tags for request entries.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Telescope\\IncomingEntry;\nuse Laravel\\Telescope\\Telescope;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    $this->hideSensitiveRequestDetails();\n\n    Telescope::tag(function (IncomingEntry $entry) {\n        return $entry->type === 'request'\n            ? ['status:'.$entry->content['response_status']]\n            : [];\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Past Due Subscriptions to Remain Active\nDESCRIPTION: Service provider configuration to keep subscriptions active even when they're in a past due state, allowing users continued access.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Paddle\\Cashier;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    Cashier::keepPastDueSubscriptionsActive();\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Associations in Laravel Eloquent\nDESCRIPTION: Shows how to use the toggle() method to switch the attachment status of related models. It includes examples with and without additional pivot data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_103\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->toggle([1, 2, 3]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->toggle([\n    1 => ['expires' => true],\n    2 => ['expires' => true],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Registration View in Laravel Fortify\nDESCRIPTION: This snippet demonstrates how to customize the registration view rendering in Laravel Fortify, typically done in the boot method of the FortifyServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Fortify\\Fortify;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Fortify::registerView(function () {\n        return view('auth.register');\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Trial has Expired in Laravel Cashier\nDESCRIPTION: Two methods to determine if a user's trial period has expired - either using the hasExpiredTrial method on the user instance or on the subscription instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_91\n\nLANGUAGE: php\nCODE:\n```\nif ($user->hasExpiredTrial('default')) {\n    // ...\n}\n\nif ($user->subscription('default')->hasExpiredTrial()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching Roles from User in Laravel Eloquent\nDESCRIPTION: Shows how to detach roles from a user using the detach() method. It includes examples of detaching a single role and detaching all roles.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_100\n\nLANGUAGE: php\nCODE:\n```\n// Detach a single role from the user...\n$user->roles()->detach($roleId);\n\n// Detach all roles from the user...\n$user->roles()->detach();\n```\n\n----------------------------------------\n\nTITLE: Asserting Internal Server Error in Laravel Tests\nDESCRIPTION: This snippet demonstrates how to assert that a response has an \"Internal Server Error\" (500) HTTP status code using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$response->assertInternalServerError();\n```\n\n----------------------------------------\n\nTITLE: Using Str::between for String Extraction in PHP\nDESCRIPTION: The Str::between method returns the portion of a string that appears between two specified values, extracting content from the middle of a string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slice = Str::between('This is my name', 'This', 'name');\n\n// ' is my '\n```\n\n----------------------------------------\n\nTITLE: Generating Policies Using Artisan Command in Shell\nDESCRIPTION: Shows how to generate a policy class using the make:policy Artisan command. It also demonstrates how to generate a policy with example methods related to CRUD operations on a resource.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:policy PostPolicy\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:policy PostPolicy --model=Post\n```\n\n----------------------------------------\n\nTITLE: Dispatching Registered Event for Manual User Registration (PHP)\nDESCRIPTION: This code demonstrates how to manually dispatch the Registered event after successful user registration when not using a starter kit.\nSOURCE: https://github.com/laravel/docs/blob/12.x/verification.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Auth\\Events\\Registered;\n\nevent(new Registered($user));\n```\n\n----------------------------------------\n\nTITLE: Extracting Characters from the Beginning of a String in Laravel\nDESCRIPTION: The take method returns a specified number of characters from the beginning of the string. It accepts an integer parameter that determines how many characters to extract.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_142\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$taken = Str::of('Build something amazing!')->take(5);\n\n// Build\n```\n\n----------------------------------------\n\nTITLE: Getting Unique Models\nDESCRIPTION: The `unique` method returns a collection with only unique models, removing any models that have duplicate primary keys. This cleans the collection of redundant entries.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = $users->unique();\n```\n\n----------------------------------------\n\nTITLE: Conditionally Merging Classes with Component Attributes\nDESCRIPTION: Shows how to conditionally merge CSS classes based on component state using the class method, providing dynamic styling based on component conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_46\n\nLANGUAGE: blade\nCODE:\n```\n<div {{ $attributes->class(['p-4', 'bg-red' => $hasError]) }}>\n    {{ $message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using preg_replace_array Function in Laravel\nDESCRIPTION: The preg_replace_array function sequentially replaces patterns in a string using values from an array, useful for replacing multiple placeholders.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$string = 'The event will take place between :start and :end';\n\n$replaced = preg_replace_array('/:[a-z_]+/', ['8:30', '9:00'], $string);\n\n// The event will take place between 8:30 and 9:00\n```\n\n----------------------------------------\n\nTITLE: Configuring Currency Locale in Environment File\nDESCRIPTION: Environment variable configuration for specifying the locale used for formatting money values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nCASHIER_CURRENCY_LOCALE=nl_BE\n```\n\n----------------------------------------\n\nTITLE: Wrapping Strings with Str::wrap in Laravel\nDESCRIPTION: The Str::wrap method wraps a given string with additional strings at the beginning and end, useful for adding delimiters or formatting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_72\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nStr::wrap('Laravel', '\"');\n\n// \"Laravel\"\n\nStr::wrap('is', before: 'This ', after: ' Laravel!');\n\n// This is Laravel!\n```\n\n----------------------------------------\n\nTITLE: Scoping Nested Resource Routes in Laravel\nDESCRIPTION: Demonstrates how to scope nested resource routes and specify custom fields for child resource retrieval, enhancing route model binding.\nSOURCE: https://github.com/laravel/docs/blob/12.x/controllers.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\PhotoCommentController;\n\nRoute::resource('photos.comments', PhotoCommentController::class)->scoped([\n    'comment' => 'slug',\n]);\n```\n\n----------------------------------------\n\nTITLE: Charging Without a Customer in Laravel Cashier\nDESCRIPTION: This snippet demonstrates how to use the charge method without an underlying customer or user by invoking it on a new instance of the application's billable model.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_102\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$stripeCharge = (new User)->charge(100, $paymentMethod);\n```\n\n----------------------------------------\n\nTITLE: Installing PHP and Laravel on Windows\nDESCRIPTION: PowerShell command to install PHP, Composer, and Laravel installer on Windows systems with necessary security protocols.\nSOURCE: https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://php.new/install/windows/8.4'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Echo Namespaces\nDESCRIPTION: Examples of configuring event namespaces in Laravel Echo and using fully qualified class names.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    // ...\n    namespace: 'App.Other.Namespace'\n});\n\nEcho.channel('orders')\n    .listen('.Namespace\\\\Event\\\\Class', (e) => {\n        // ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Handling Deadlocks in Database Transactions in Laravel PHP\nDESCRIPTION: Demonstrates how to handle deadlocks in database transactions by specifying retry attempts using the transaction method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\nDB::transaction(function () {\n    DB::update('update users set votes = 1');\n\n    DB::delete('delete from posts');\n}, 5);\n```\n\n----------------------------------------\n\nTITLE: Loading Vite Assets with Custom Build Path\nDESCRIPTION: Shows how to specify a custom build path when loading Vite assets\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<!doctype html>\n<head>\n    {{-- Given build path is relative to public path. --}}\n\n    @vite('resources/js/app.js', 'vendor/courier/build')\n</head>\n```\n\n----------------------------------------\n\nTITLE: Forcing Laravel Seeders to Run in Production\nDESCRIPTION: Command to force database seeders to run in a production environment without confirmation prompts. This should be used with caution as seeding operations may alter or delete existing data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan db:seed --force\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Pennant Driver in PHP\nDESCRIPTION: Shows how to register a custom Pennant driver by extending the Feature facade in a service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\Extensions\\RedisFeatureDriver;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Support\\ServiceProvider;\nuse Laravel\\Pennant\\Feature;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    public function boot(): void\n    {\n        Feature::extend('redis', function (Application $app) {\n            return new RedisFeatureDriver($app->make('redis'), $app->make('events'), []);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Model Data for Typesense Indexing\nDESCRIPTION: Implementation of toSearchableArray method for Typesense compatibility. This method formats the model data for Typesense by converting the ID to a string and creation date to a timestamp.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the indexable data array for the model.\n *\n * @return array<string, mixed>\n */\npublic function toSearchableArray(): array\n{\n    return array_merge($this->toArray(),[\n        'id' => (string) $this->id,\n        'created_at' => $this->created_at->timestamp,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sail Shell Alias\nDESCRIPTION: Shell alias configuration to make Sail commands easier to type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nalias sail='sh $([ -f sail ] && echo sail || echo vendor/bin/sail)'\n```\n\n----------------------------------------\n\nTITLE: Scheduling Batch Pruning in Laravel\nDESCRIPTION: Shows how to schedule the pruning of finished, unfinished, and cancelled batch records from the job_batches table to prevent excessive growth.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('queue:prune-batches')->daily();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('queue:prune-batches --hours=48')->daily();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('queue:prune-batches --hours=48 --unfinished=72')->daily();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('queue:prune-batches --hours=48 --cancelled=72')->daily();\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Characters in Laravel PHP\nDESCRIPTION: The deduplicate method replaces consecutive instances of a character with a single instance, by default deduplicating spaces.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_100\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('The   Laravel   Framework')->deduplicate();\n\n// The Laravel Framework\n```\n\n----------------------------------------\n\nTITLE: Debugging PHP CLI Applications in Laravel Homestead\nDESCRIPTION: This command demonstrates how to use the 'xphp' shell alias to debug PHP CLI applications within a Homestead virtual machine.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nxphp /path/to/script\n```\n\n----------------------------------------\n\nTITLE: Clearing Default Queue Jobs in Laravel Horizon\nDESCRIPTION: Removes all jobs from the application's default queue using the horizon:clear Artisan command. This command is useful for clearing the entire queue when you need to start fresh.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan horizon:clear\n```\n\n----------------------------------------\n\nTITLE: Configuring File Exclusions in Pint\nDESCRIPTION: Examples of excluding files and folders from Pint's inspection using different configuration options\nSOURCE: https://github.com/laravel/docs/blob/12.x/pint.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"exclude\": [\n        \"my-specific/folder\"\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"notName\": [\n        \"*-my-file.php\"\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"notPath\": [\n        \"path/to/excluded-file.php\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Storage Disk for File Operations in Laravel\nDESCRIPTION: Shows how to specify a different storage disk when storing files using store and storeAs methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$path = $request->file('avatar')->store(\n    'avatars/'.$request->user()->id, 's3'\n);\n\n$path = $request->file('avatar')->storeAs(\n    'avatars',\n    $request->user()->id,\n    's3'\n);\n```\n\n----------------------------------------\n\nTITLE: Chunking by ID with Updates\nDESCRIPTION: Shows how to use chunkById() for safe batch processing when updating records during iteration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nFlight::where('departed', true)\n    ->chunkById(200, function (Collection $flights) {\n        $flights->each->update(['departed' => false]);\n    }, column: 'id');\n```\n\n----------------------------------------\n\nTITLE: Interacting with Iframes in Laravel Dusk\nDESCRIPTION: Demonstrates how to interact with elements within an iframe using the withinFrame method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$browser->withinFrame('#credit-card-details', function ($browser) {\n    $browser->type('input[name=\"cardnumber\"]', '4242424242424242')\n        ->type('input[name=\"exp-date\"]', '1224')\n        ->type('input[name=\"cvc\"]', '123')\n        ->press('Pay');\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Pagination in Laravel Query Builder\nDESCRIPTION: This PHP snippet shows how to use the simplePaginate method for efficient pagination when only 'Next' and 'Previous' links are needed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')->simplePaginate(15);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with SRI Plugin\nDESCRIPTION: Configuration setup for enabling Subresource Integrity in Vite using the manifest-sri plugin.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\nimport manifestSRI from 'vite-plugin-manifest-sri';\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            // ...\n        }),\n        manifestSRI(),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger Factory in Laravel\nDESCRIPTION: Demonstrates the implementation of a custom logger factory class in Laravel, which creates and returns a Monolog instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Logging;\n\nuse Monolog\\Logger;\n\nclass CreateCustomLogger\n{\n    /**\n     * Create a custom Monolog instance.\n     */\n    public function __invoke(array $config): Logger\n    {\n        return new Logger(/* ... */);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Validator Instance with Static Rules in Laravel\nDESCRIPTION: This snippet demonstrates how to create a Validator instance with static rules that don't change, using the Validator facade in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_73\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\n\n$validator = Validator::make($request->all(), [\n    'email' => 'required|email',\n    'games' => 'required|integer|min:0',\n]);\n```\n\n----------------------------------------\n\nTITLE: Delayed Job Dispatching in Laravel\nDESCRIPTION: Implementation of delayed job dispatching with custom delay timing and immediate processing options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Controllers;\n\nuse App\\Jobs\\ProcessPodcast;\nuse App\\Models\\Podcast;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PodcastController extends Controller\n{\n    public function store(Request $request): RedirectResponse\n    {\n        $podcast = Podcast::create(/* ... */);\n\n        ProcessPodcast::dispatch($podcast)\n            ->delay(now()->addMinutes(10));\n\n        return redirect('/podcasts');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Pages in Laravel Dusk\nDESCRIPTION: Example of navigating to a defined page object using the `visit` method in a Laravel Dusk test. This loads the specified page and executes its assertions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_71\n\nLANGUAGE: php\nCODE:\n```\nuse Tests\\Browser\\Pages\\Login;\n\n$browser->visit(new Login);\n```\n\n----------------------------------------\n\nTITLE: Telegram Bot Integration in Laravel Envoy\nDESCRIPTION: Shows implementation of Telegram notifications in Envoy using bot and chat IDs. Requires a bot created through BotFather and a valid chat ID obtained from username_to_id_bot.\nSOURCE: https://github.com/laravel/docs/blob/12.x/envoy.md#2025-04-21_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n@finished\n    @telegram('bot-id','chat-id')\n@endfinished\n```\n\n----------------------------------------\n\nTITLE: Automatic File Streaming in Laravel\nDESCRIPTION: Demonstrates how to use putFile and putFileAs methods for automatic file streaming to storage with reduced memory usage.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\File;\nuse Illuminate\\Support\\Facades\\Storage;\n\n// Automatically generate a unique ID for filename...\n$path = Storage::putFile('photos', new File('/path/to/photo'));\n\n// Manually specify a filename...\n$path = Storage::putFileAs('photos', new File('/path/to/photo'), 'photo.jpg');\n```\n\n----------------------------------------\n\nTITLE: Managing Individual Product Quantities in Multi-Product Subscriptions in Laravel Cashier\nDESCRIPTION: Methods for incrementing, decrementing, or updating quantities of specific products within a multi-product subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->subscription('default')->incrementQuantity(5, 'price_chat');\n\n$user->subscription('default')->decrementQuantity(3, 'price_chat');\n\n$user->subscription('default')->updateQuantity(10, 'price_chat');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Database Connection for Unique Validation\nDESCRIPTION: Example demonstrating how to specify a custom database connection when using the 'unique' validation rule in Laravel. This allows validation against tables in different database connections.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:connection.users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Services in Laravel\nDESCRIPTION: PHP configuration array to set up Amazon SES services in Laravel's services.php config file, including API credentials and region.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'ses' => [\n    'key' => env('AWS_ACCESS_KEY_ID'),\n    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n],\n```\n\n----------------------------------------\n\nTITLE: Number: Human-Readable Numbers with forHumans() in PHP\nDESCRIPTION: This snippet demonstrates converting large numbers into formatted human-readable strings, such as '1 thousand', supporting precision for decimal formatting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_61\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::forHumans(1000);\n// 1 thousand\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::forHumans(489939);\n// 490 thousand\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::forHumans(1230000, precision: 2);\n// 1.23 million\n```\n\n----------------------------------------\n\nTITLE: Number: File Size Formatting in PHP\nDESCRIPTION: This snippet converts byte sizes into human-readable formats like KB, MB, with configurable precision, using Number::fileSize().\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_60\n\nLANGUAGE: PHP\nCODE:\n```\n$size = Number::fileSize(1024);\n// 1 KB\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$size = Number::fileSize(1024 * 1024);\n// 1 MB\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$size = Number::fileSize(1024, precision: 2);\n// 1.00 KB\n```\n\n----------------------------------------\n\nTITLE: Adding Information to Laravel's About Command\nDESCRIPTION: Demonstrates how to add package-specific information to Laravel's built-in about Artisan command output using the AboutCommand class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Foundation\\Console\\AboutCommand;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    AboutCommand::add('My Package', fn () => ['Version' => '1.0.0']);\n}\n```\n\n----------------------------------------\n\nTITLE: Page Reload Waiting\nDESCRIPTION: Shows how to wait for page reloads after performing actions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Dusk\\Browser;\n\n$browser->waitForReload(function (Browser $browser) {\n    $browser->press('Submit');\n})\n->assertSee('Success!');\n\n$browser->clickAndWaitForReload('.selector')\n    ->assertSee('something');\n```\n\n----------------------------------------\n\nTITLE: Checking Subscription Status in PHP\nDESCRIPTION: Method to verify if a user has an active subscription, which works for both regular subscriptions and those in trial periods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscribed()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Minimum Test Coverage in Laravel\nDESCRIPTION: Runs tests with coverage reporting and enforces a minimum coverage threshold. The test suite will fail if coverage falls below the specified percentage.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan test --coverage --min=80.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Service for Laravel Dusk in docker-compose.yml\nDESCRIPTION: YAML configuration for adding the Selenium service to enable browser testing with Laravel Dusk in a Sail environment.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nselenium:\n    image: 'selenium/standalone-chrome'\n    extra_hosts:\n      - 'host.docker.internal:host-gateway'\n    volumes:\n        - '/dev/shm:/dev/shm'\n    networks:\n        - sail\n```\n\n----------------------------------------\n\nTITLE: Applying Time Constraints to Laravel Scheduled Tasks\nDESCRIPTION: These snippets demonstrate how to limit task execution to specific time ranges using the between and unlessBetween methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')\n    ->hourly()\n    ->between('7:00', '22:00');\n```\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('emails:send')\n    ->hourly()\n    ->unlessBetween('23:00', '4:00');\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Array Data for Validation in Laravel\nDESCRIPTION: This snippet demonstrates how to access and validate nested array data using the Rule::forEach method in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_79\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Rules\\HasPermission;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\n\n$validator = Validator::make($request->all(), [\n    'companies.*.id' => Rule::forEach(function (string|null $value, string $attribute) {\n        return [\n            Rule::exists(Company::class, 'id'),\n            new HasPermission('manage-company', $value),\n        ];\n    }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Extracting Text Excerpt in Laravel PHP\nDESCRIPTION: The excerpt method extracts a portion of text around the first instance of a phrase with customizable radius and formatting options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_107\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$excerpt = Str::of('This is my name')->excerpt('my', [\n    'radius' => 3\n]);\n\n// '...is my na...'\n```\n\n----------------------------------------\n\nTITLE: Adjusting Bcrypt Work Factor in Laravel\nDESCRIPTION: Example of customizing the Bcrypt work factor using the 'rounds' option when hashing a password. This allows control over the computational intensity of the hashing process.\nSOURCE: https://github.com/laravel/docs/blob/12.x/hashing.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$hashed = Hash::make('password', [\n    'rounds' => 12,\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Command Input Arrays in Laravel\nDESCRIPTION: Shows how to define arguments and options that accept multiple input values using array notation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The name and signature of the console command.\n *\n * @var string\n */\nprotected $signature = 'mail:send\n                        {user : The ID of the user}\n                        {--queue : Whether the job should be queued}';\n```\n\n----------------------------------------\n\nTITLE: Using broadcast() function for event broadcasting in Laravel PHP\nDESCRIPTION: The broadcast() function dispatches events to listeners through Laravel's broadcasting system with optional 'toOthers()' method to exclude the current user.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_75\n\nLANGUAGE: php\nCODE:\n```\nbroadcast(new UserRegistered($user));\n```\n\nLANGUAGE: php\nCODE:\n```\nbroadcast(new UserRegistered($user))->toOthers();\n```\n\n----------------------------------------\n\nTITLE: Creating Stringable Instances with str() Helper in Laravel\nDESCRIPTION: The str function returns a new Stringable instance, enabling fluent string operations. This is equivalent to the Str::of method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$string = str('Taylor')->append(' Otwell');\n\n// 'Taylor Otwell'\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Laravel Controllers\nDESCRIPTION: Demonstrates how to store uploaded files in a Laravel controller using the store method on the uploaded file instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass UserAvatarController extends Controller\n{\n    /**\n     * Update the avatar for the user.\n     */\n    public function update(Request $request): string\n    {\n        $path = $request->file('avatar')->store('avatars');\n\n        return $path;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Random Order and Order Removal\nDESCRIPTION: Demonstrates how to randomly order query results and how to remove existing order clauses from a query.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$randomUser = DB::table('users')\n    ->inRandomOrder()\n    ->first();\n\n$query = DB::table('users')->orderBy('name');\n\n$unorderedUsers = $query->reorder()->get();\n\n$usersOrderedByEmail = $query->reorder('email', 'desc')->get();\n```\n\n----------------------------------------\n\nTITLE: Using Facade Spies in Laravel Tests\nDESCRIPTION: Shows how to use facade spies to record and assert interactions with a facade after code execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Cache;\n\ntest('values are be stored in cache', function () {\n    Cache::spy();\n\n    $response = $this->get('/');\n\n    $response->assertStatus(200);\n\n    Cache::shouldHaveReceived('put')->with('name', 'Taylor', 10);\n});\n```\n\n----------------------------------------\n\nTITLE: Padding Strings on Both Sides in PHP\nDESCRIPTION: Shows how to use the 'padBoth' method to add padding to both sides of a string until it reaches a specified length.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_134\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$padded = Str::of('James')->padBoth(10, '_');\n\n// '__James___'\n\n$padded = Str::of('James')->padBoth(10);\n\n// '  James   '\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios for CSRF Protection with Laravel Sanctum\nDESCRIPTION: JavaScript configuration for Axios to support credentials and XSRF tokens when making requests from an SPA to a Laravel backend with Sanctum authentication.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\naxios.defaults.withCredentials = true;\naxios.defaults.withXSRFToken = true;\n```\n\n----------------------------------------\n\nTITLE: Consuming Event Streams with JavaScript\nDESCRIPTION: Shows how to consume event streams using an EventSource object in JavaScript, including handling the stream completion event.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst source = new EventSource('/chat');\n\nsource.addEventListener('update', (event) => {\n    if (event.data === '</stream>') {\n        source.close();\n\n        return;\n    }\n\n    console.log(event.data);\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Folio Path and URI\nDESCRIPTION: Example showing how to configure multiple Folio paths with different base URIs and middleware\nSOURCE: https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Folio\\Folio;\n\nFolio::path(resource_path('views/pages/guest'))->uri('/');\n\nFolio::path(resource_path('views/pages/admin'))\n    ->uri('/admin')\n    ->middleware([\n        '*' => [\n            'auth',\n            'verified',\n\n            // ...\n        ],\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Running Asynchronous Processes in PHP\nDESCRIPTION: Shows how to start and manage asynchronous processes, including checking if a process is still running and waiting for completion.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$process = Process::timeout(120)->start('bash import.sh');\n\nwhile ($process->running()) {\n    // ...\n}\n\n$result = $process->wait();\n\n$process = Process::timeout(120)->start('bash import.sh');\n\n// ...\n\n$result = $process->wait();\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Blade Template\nDESCRIPTION: Shows how to display validation error messages in a Blade view template using the $errors variable.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<!-- /resources/views/post/create.blade.php -->\n\n<h1>Create Post</h1>\n\n@if ($errors->any())\n    <div class=\"alert alert-danger\">\n        <ul>\n            @foreach ($errors->all() as $error)\n                <li>{{ $error }}</li>\n            @endforeach\n        </ul>\n    </div>\n@endif\n\n<!-- Create Post Form -->\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO S3 Compatible Storage for Laravel\nDESCRIPTION: Environment variable settings for using MinIO as an S3-compatible storage service in local development with Laravel Sail.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nFILESYSTEM_DISK=s3\nAWS_ACCESS_KEY_ID=sail\nAWS_SECRET_ACCESS_KEY=password\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=local\nAWS_ENDPOINT=http://minio:9000\nAWS_USE_PATH_STYLE_ENDPOINT=true\n```\n\n----------------------------------------\n\nTITLE: Getting Underlying Array from Laravel Collection PHP\nDESCRIPTION: Shows the usage of the `all` method, which extracts and returns the raw, underlying standard PHP array that the collection instance is wrapping.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ncollect([1, 2, 3])->all();\n\n// [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Casting JSON with Unescaped Unicode in Laravel Eloquent (PHP)\nDESCRIPTION: Demonstrates using the `json:unicode` cast type within the `casts()` method to store a JSON attribute (`options`) with unescaped Unicode characters. This is useful for preserving specific characters during JSON serialization.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the attributes that should be cast.\n *\n * @return array<string, string>\n */\nprotected function casts(): array\n{\n    return [\n        'options' => 'json:unicode',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Inline Vite Assets\nDESCRIPTION: Demonstrates how to inline Vite-managed assets directly into HTML using the Vite facade\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n@use('Illuminate\\Support\\Facades\\Vite')\n\n<!doctype html>\n<head>\n    {{-- ... --}}\n\n    <style>\n        {!! Vite::content('resources/css/app.css') !!}\n    </style>\n    <script>\n        {!! Vite::content('resources/js/app.js') !!}\n    </script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Disabling Deferred Functions in Tests - PHP\nDESCRIPTION: The `withoutDefer` method can be used in tests to instruct Laravel to immediately invoke deferred functions. This allows tests to verify the behavior of deferred closures.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_131\n\nLANGUAGE: php\nCODE:\n```\ntest('without defer', function () {\n    $this->withoutDefer();\n\n    // ...\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    public function test_without_defer(): void\n    {\n        $this->withoutDefer();\n\n        // ...\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests;\n\nuse Illuminate\\Foundation\\Testing\\TestCase as BaseTestCase;\n\nabstract class TestCase extends BaseTestCase\n{\n    protected function setUp(): void// [tl! add:start]\n    {\n        parent::setUp();\n\n        $this->withoutDefer();\n    }// [tl! add:end]\n}\n```\n\n----------------------------------------\n\nTITLE: Database Table Structure for Has Many Through\nDESCRIPTION: Table structure showing applications, environments, and deployments tables needed for a Has Many Through relationship.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_28\n\nLANGUAGE: text\nCODE:\n```\napplications\n    id - integer\n    name - string\n\nenvironments\n    id - integer\n    application_id - integer\n    name - string\n\ndeployments\n    id - integer\n    environment_id - integer\n    commit_hash - string\n```\n\n----------------------------------------\n\nTITLE: Padding Strings on Left Side in PHP\nDESCRIPTION: Demonstrates the use of the 'padLeft' method to add padding to the left side of a string until it reaches a specified length.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_135\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$padded = Str::of('James')->padLeft(10, '-=');\n\n// '-=-=-James'\n\n$padded = Str::of('James')->padLeft(10);\n\n// '     James'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Deprecation Log Channel\nDESCRIPTION: Example of defining a dedicated deprecation log channel that writes to a specific log file using the single driver.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'channels' => [\n    'deprecations' => [\n        'driver' => 'single',\n        'path' => storage_path('logs/php-deprecation-warnings.log'),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Scout Model Index\nDESCRIPTION: Example of customizing the search index name for a Laravel model using Scout by overriding the searchableAs method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Laravel\\Scout\\Searchable;\n\nclass Post extends Model\n{\n    use Searchable;\n\n    /**\n     * Get the name of the index associated with the model.\n     */\n    public function searchableAs(): string\n    {\n        return 'posts_index';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Class from Container - Laravel PHP\nDESCRIPTION: This snippet demonstrates how to resolve a class instance from the service container using the `resolve()` helper function. The example resolves an instance of 'HelpSpot\\API'.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_113\n\nLANGUAGE: php\nCODE:\n```\n$api = resolve('HelpSpot\\API');\n```\n\n----------------------------------------\n\nTITLE: Basic Telescope Watchers Configuration\nDESCRIPTION: Basic configuration for enabling/disabling Telescope watchers in the config/telescope.php file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n'watchers' => [\n    Watchers\\CacheWatcher::class => true,\n    Watchers\\CommandWatcher::class => true,\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Typesense Environment Variables for Laravel\nDESCRIPTION: Environment variable setup for connecting to the Typesense search engine service in a Laravel application running with Sail.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nTYPESENSE_HOST=typesense\nTYPESENSE_PORT=8108\nTYPESENSE_PROTOCOL=http\nTYPESENSE_API_KEY=xyz\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Custom Arguments in Laravel\nDESCRIPTION: Executes tests with specific PHPUnit arguments using Laravel's Artisan command-line tool, allowing for targeted test execution.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan test --testsuite=Feature --stop-on-failure\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Expiration for Isolatable Commands\nDESCRIPTION: Demonstrates how to set custom lock expiration time for isolatable commands using the isolationLockExpiresAt method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse DateTimeInterface;\nuse DateInterval;\n\n/**\n * Determine when an isolation lock expires for the command.\n */\npublic function isolationLockExpiresAt(): DateTimeInterface|DateInterval\n{\n    return now()->addMinutes(5);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Str::ascii for Character Transliteration in PHP\nDESCRIPTION: The Str::ascii method attempts to transliterate the given string into an ASCII value, converting special characters to their ASCII equivalents.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slice = Str::ascii('û');\n\n// 'u'\n```\n\n----------------------------------------\n\nTITLE: Implementing Page-Specific Middleware in Laravel Folio\nDESCRIPTION: Demonstrates how to apply middleware to a specific page template using the middleware function. Shows basic authentication and verification middleware implementation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse function Laravel\\Folio\\{middleware};\n\nmiddleware(['auth', 'verified']);\n\n?>\n\n<div>\n    Dashboard\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Component with Properties and Attributes\nDESCRIPTION: Demonstrates how to render a component with both data properties and HTML attributes that will be merged into the attribute bag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_79\n\nLANGUAGE: blade\nCODE:\n```\n<x-alert type=\"error\" :message=\"$message\" class=\"mb-4\"/>\n```\n\n----------------------------------------\n\nTITLE: Updating Subscription Quantity Without Prorating in Laravel Cashier\nDESCRIPTION: Method for updating subscription quantity without prorating the charges, which prevents immediate partial billing adjustments when changing quantities.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->noProrate()->updateQuantity(10);\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Parallel with Custom Process Count in Laravel\nDESCRIPTION: Executes tests in parallel with a specified number of processes using Laravel's Artisan command-line tool and ParaTest.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan test --parallel --processes=4\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Worker Timeout via Command Line in Laravel\nDESCRIPTION: Command to configure the maximum execution time for Laravel queue jobs using the --timeout option with the queue:work Artisan command.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work --timeout=30\n```\n\n----------------------------------------\n\nTITLE: Asserting Header Absence in Laravel Tests\nDESCRIPTION: This snippet illustrates how to assert that a given header is not present on the response using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$response->assertHeaderMissing($headerName);\n```\n\n----------------------------------------\n\nTITLE: Using dd() function for debugging in Laravel PHP\nDESCRIPTION: The dd() (dump and die) function dumps the given variables and ends script execution, useful for debugging to inspect variable values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_85\n\nLANGUAGE: php\nCODE:\n```\ndd($value);\n```\n\nLANGUAGE: php\nCODE:\n```\ndd($value1, $value2, $value3, ...);\n```\n\n----------------------------------------\n\nTITLE: Full Text Search Query Example\nDESCRIPTION: Demonstrates using full text search capabilities with whereFullText method for MariaDB, MySQL, and PostgreSQL databases.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->whereFullText('bio', 'web developer')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Keyboard Input in Laravel Dusk\nDESCRIPTION: Demonstrates using the keys() method to send complex keyboard input sequences, including holding modifier keys while typing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$browser->keys('selector', ['{shift}', 'taylor'], 'swift');\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->keys('.app', ['{command}', 'j']);\n```\n\n----------------------------------------\n\nTITLE: Channel Authorization Callback\nDESCRIPTION: Defines a channel authorization callback using Broadcast::channel to control access to private channels based on user and order relationships.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nBroadcast::channel('orders.{orderId}', function (User $user, int $orderId) {\n    return $user->id === Order::findOrNew($orderId)->user_id;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Laravel Asset Bundling\nDESCRIPTION: Laravel uses a vite.config.js file with a Laravel Vite plugin to configure asset bundling. This file is included in new Laravel applications and starter kits.\nSOURCE: https://github.com/laravel/docs/blob/12.x/frontend.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvite.config.js\n```\n\n----------------------------------------\n\nTITLE: Adding Fresh API Token Middleware\nDESCRIPTION: Shows how to add the CreateFreshApiToken middleware to enable API consumption from JavaScript\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->web(append: [\n        CreateFreshApiToken::class,\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Additional HTML Attributes in Blade\nDESCRIPTION: Using @checked, @selected, @disabled, @readonly, and @required directives for HTML attributes\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_22\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"checkbox\" name=\"active\" value=\"active\" @checked(old('active', $user->active)) />\n\n<button type=\"submit\" @disabled($errors->isNotEmpty())>Submit</button>\n\n<input type=\"email\" name=\"email\" value=\"email@laravel.com\" @readonly($user->isNotAdmin()) />\n```\n\n----------------------------------------\n\nTITLE: Creating Listeners Directory using Artisan Commands\nDESCRIPTION: The Listeners directory is created when you execute the event:generate or make:listener commands. It contains classes that handle events in your application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/structure.md#2025-04-21_snippet_1\n\nLANGUAGE: artisan\nCODE:\n```\nevent:generate\n```\n\nLANGUAGE: artisan\nCODE:\n```\nmake:listener\n```\n\n----------------------------------------\n\nTITLE: Checking Grace Period Status in PHP\nDESCRIPTION: Method to determine if a user has canceled their subscription but is still within the grace period before expiration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription()->onGracePeriod()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Assert View Data\nDESCRIPTION: Methods to verify view data in the response including specific values and presence of keys.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$response->assertViewHas($key, $value = null);\n\n$response->assertViewHas('user', function (User $user) {\n    return $user->name === 'Taylor';\n});\n\nexpect($response['name'])->toBe('Taylor');\n\n$this->assertEquals('Taylor', $response['name']);\n```\n\n----------------------------------------\n\nTITLE: Database Migration Test Setup - PHPUnit\nDESCRIPTION: Example of using DatabaseMigrations trait in a PHPUnit-style Dusk test class for database setup.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Browser;\n\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nuse Laravel\\Dusk\\Browser;\nuse Tests\\DuskTestCase;\n\nclass ExampleTest extends DuskTestCase\n{\n    use DatabaseMigrations;\n\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Laravel Query Builder\nDESCRIPTION: Shows how to delete records using the delete method, including an example with a where clause to constrain the deletion.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$deleted = DB::table('users')->delete();\n\n$deleted = DB::table('users')->where('votes', '>', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: Changing React Authentication Layout\nDESCRIPTION: Code modification to change the authentication page layout variant in a React starter kit from simple to split by changing the imported layout component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport AuthLayoutTemplate from '@/layouts/auth/auth-simple-layout'; // [tl! remove]\nimport AuthLayoutTemplate from '@/layouts/auth/auth-split-layout'; // [tl! add]\n```\n\n----------------------------------------\n\nTITLE: Executing Delete Statement in Laravel PHP\nDESCRIPTION: Demonstrates how to perform a delete operation using the DB facade's delete method, returning the number of affected rows.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\DB;\n\n$deleted = DB::delete('delete from users');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Link Appearance\nDESCRIPTION: Shows how to wait for links with specific text to appear on the page.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n// Wait a maximum of five seconds for the link...\n$browser->waitForLink('Create');\n\n// Wait a maximum of one second for the link...\n$browser->waitForLink('Create', 1);\n```\n\n----------------------------------------\n\nTITLE: Basic Pest Test Example in Laravel\nDESCRIPTION: A simple Pest test example demonstrating the basic assertion syntax. Pest is a testing framework built on PHPUnit with a more expressive syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntest('basic', function () {\n    expect(true)->toBeTrue();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Discounts in Laravel Cashier\nDESCRIPTION: Demonstrates how to retrieve the current discounts applied to a customer or subscription using the discount method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$discount = $billable->discount();\n\n$discount = $subscription->discount();\n```\n\n----------------------------------------\n\nTITLE: Running Valet Installation\nDESCRIPTION: Command to configure and install Valet and DnsMasq services.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvalet install\n```\n\n----------------------------------------\n\nTITLE: Conditional Relationship Loading in Laravel Resource\nDESCRIPTION: Illustrates how to conditionally include relationships in resource responses using whenLoaded() to prevent N+1 query problems.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic function toArray(Request $request): array\n{\n    return [\n        'id' => $this->id,\n        'name' => $this->name,\n        'email' => $this->email,\n        'posts' => PostResource::collection($this->whenLoaded('posts')),\n        'created_at' => $this->created_at,\n        'updated_at' => $this->updated_at,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Time Travel with Closures in Laravel Tests\nDESCRIPTION: Shows how to use time travel methods with closures to execute code at a specific point in time.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$this->travel(5)->days(function () {\n    // Test something five days into the future...\n});\n\n$this->travelTo(now()->subDays(10), function () {\n    // Test something during a given moment...\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Original Model Attributes in Laravel Eloquent\nDESCRIPTION: Examples of using getOriginal method to retrieve original attribute values regardless of changes made to the model since retrieval.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->name; // John\n$user->email; // john@example.com\n\n$user->name = 'Jack';\n$user->name; // Jack\n\n$user->getOriginal('name'); // John\n$user->getOriginal(); // Array of original attributes...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Instance - Laravel PHP\nDESCRIPTION: This snippet retrieves a policy instance for a given class using the `policy()` helper function. It assumes that a policy class exists for `App\\Models\\User`.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_106\n\nLANGUAGE: php\nCODE:\n```\n$policy = policy(App\\Models\\User::class);\n```\n\n----------------------------------------\n\nTITLE: Number: Locale-Specific Number Formatting in PHP\nDESCRIPTION: This snippet formats numbers according to specified locales with support for decimal precision, using Number::format().\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_62\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::format(100000);\n// 100,000\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::format(100000, precision: 2);\n// 100,000.00\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::format(100000.123, maxPrecision: 2);\n// 100,000.12\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::format(100000, locale: 'de');\n// 100.000\n```\n\n----------------------------------------\n\nTITLE: Excluding URIs from CSRF Protection in Laravel\nDESCRIPTION: Configuration example showing how to exclude specific URIs from CSRF validation in the application bootstrap file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/csrf.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->validateCsrfTokens(except: [\n        'stripe/*',\n        'http://example.com/foo/bar',\n        'http://example.com/foo/*',\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Exception Reporting - Laravel PHP\nDESCRIPTION: This snippet showcases conditional exception reporting using `report_if()`. The exception (or string) is reported only if the provided condition is true.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_109\n\nLANGUAGE: php\nCODE:\n```\nreport_if($shouldReport, $e);\n\nreport_if($shouldReport, 'Something went wrong.');\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination URLs in Laravel Routes\nDESCRIPTION: Example showing how to customize pagination URLs using withPath() method to generate links with a specific base path.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nRoute::get('/users', function () {\n    $users = User::paginate(15);\n\n    $users->withPath('/admin/users');\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ULID Keys in Laravel Model\nDESCRIPTION: Shows how to use ULID keys instead of UUIDs using the HasUlids trait for more compact unique identifiers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Concerns\\HasUlids;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Article extends Model\n{\n    use HasUlids;\n\n    // ...\n}\n\n$article = Article::create(['title' => 'Traveling to Asia']);\n\n$article->id; // \"01gd4d3tgrrfqeda94gdbtdk5c\"\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Configuration Value Retrieval\nDESCRIPTION: Demonstrates type-safe methods for retrieving configuration values using the Config facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nConfig::string('config-key');\nConfig::integer('config-key');\nConfig::float('config-key');\nConfig::boolean('config-key');\nConfig::array('config-key');\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Slots in Laravel Blade\nDESCRIPTION: Demonstrates how to access component methods and properties within slots using the $component variable.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_65\n\nLANGUAGE: blade\nCODE:\n```\n<x-alert>\n    <x-slot:title>\n        {{ $component->formatAlert('Server Error') }}\n    </x-slot>\n\n    <strong>Whoops!</strong> Something went wrong!\n</x-alert>\n```\n\n----------------------------------------\n\nTITLE: Defining Hooks for Database Truncation in Laravel Dusk\nDESCRIPTION: Shows how to define methods that run before and after database truncation in Laravel Dusk tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Perform any work that should take place before the database has started truncating.\n */\nprotected function beforeTruncatingDatabase(): void\n{\n    //\n}\n\n/**\n * Perform any work that should take place after the database has finished truncating.\n */\nprotected function afterTruncatingDatabase(): void\n{\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Worker Count for Laravel Octane\nDESCRIPTION: Command to start Laravel Octane with a specific number of workers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan octane:start --workers=4\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Process Output in Laravel\nDESCRIPTION: Demonstrates monitoring real-time output from an asynchronous process using the Process facade with a loop and sleep timer.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$process = Process::timeout(120)->start('bash import.sh');\n\nwhile ($process->running()) {\n    echo $process->latestOutput();\n    echo $process->latestErrorOutput();\n\n    sleep(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasApiTokens Trait in User Model\nDESCRIPTION: Adding the Laravel Passport HasApiTokens trait to the User model to enable API token functionality.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Passport\\HasApiTokens;\n\nclass User extends Authenticatable\n{\n    use HasApiTokens, HasFactory, Notifiable;\n}\n```\n\n----------------------------------------\n\nTITLE: Using __ Function for Localization in Laravel\nDESCRIPTION: The __ function translates the given string or translation key using language files. If the specified translation does not exist, it returns the given value.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\necho __('Welcome to our application');\n\necho __('messages.welcome');\n```\n\n----------------------------------------\n\nTITLE: Accessing Parallel Testing Token in Laravel\nDESCRIPTION: Retrieves the current parallel process token using Laravel's ParallelTesting facade. This token helps segment resources across parallel test processes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$token = ParallelTesting::token();\n```\n\n----------------------------------------\n\nTITLE: Creating Jobs Directory using Artisan Command\nDESCRIPTION: The Jobs directory is created when you execute the make:job command. It houses queueable jobs that can be run synchronously or asynchronously.\nSOURCE: https://github.com/laravel/docs/blob/12.x/structure.md#2025-04-21_snippet_0\n\nLANGUAGE: artisan\nCODE:\n```\nmake:job\n```\n\n----------------------------------------\n\nTITLE: Removing Prefix from String in Laravel PHP\nDESCRIPTION: The chopStart method removes the first occurrence of a given value only if it appears at the start of the string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_91\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$url = Str::of('https://laravel.com')->chopStart('https://');\n\n// 'laravel.com'\n```\n\n----------------------------------------\n\nTITLE: Asserting Conflict Status in Laravel Tests\nDESCRIPTION: This snippet illustrates how to assert that a response has a conflict (409) HTTP status code using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$response->assertConflict();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model Instance in Laravel Eloquent\nDESCRIPTION: Shows how to delete a model instance by calling the delete() method on it after retrieving the model from the database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Flight;\n\n$flight = Flight::find(1);\n\n$flight->delete();\n```\n\n----------------------------------------\n\nTITLE: Appending Query String Values to Pagination Links\nDESCRIPTION: Demonstrates how to append additional query parameters to pagination links using appends() and withQueryString() methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nRoute::get('/users', function () {\n    $users = User::paginate(15);\n\n    $users->appends(['sort' => 'votes']);\n\n    // ...\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = User::paginate(15)->withQueryString();\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to camelCase in Laravel PHP\nDESCRIPTION: The camel method converts a given string to camelCase format, commonly used for variable and method names in PHP.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_88\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$converted = Str::of('foo_bar')->camel();\n\n// 'fooBar'\n```\n\n----------------------------------------\n\nTITLE: String Masking with Str::mask in PHP\nDESCRIPTION: Shows how to use Str::mask to mask a portion of a string with a repeated character, useful for obfuscating sensitive data.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::mask('taylor@example.com', '*', 3);\n\n// tay***************\n```\n\nLANGUAGE: php\nCODE:\n```\n$string = Str::mask('taylor@example.com', '*', -15, 3);\n\n// tay***@example.com\n```\n\n----------------------------------------\n\nTITLE: Testing Confirmation Prompts in Laravel Console Commands\nDESCRIPTION: Demonstrates how to test commands that ask for yes/no confirmations using the expectsConfirmation method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->artisan('module:import')\n    ->expectsConfirmation('Do you really wish to run this command?', 'no')\n    ->assertExitCode(1);\n```\n\n----------------------------------------\n\nTITLE: Hiding Attributes in Model Serialization\nDESCRIPTION: Demonstrates how to hide sensitive attributes from JSON/array output using the $hidden property\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * The attributes that should be hidden for serialization.\n     *\n     * @var array<string>\n     */\n    protected $hidden = ['password'];\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining orWhere Clauses on Relationships\nDESCRIPTION: Demonstrates the incorrect and correct ways to chain orWhere clauses on relationship queries using logical grouping.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$user->posts()\n    ->where('active', 1)\n    ->orWhere('votes', '>=', 100)\n    ->get();\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom posts\nwhere user_id = ? and active = 1 or votes >= 100\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\n\n$user->posts()\n    ->where(function (Builder $query) {\n        return $query->where('active', 1)\n            ->orWhere('votes', '>=', 100);\n    })\n    ->get();\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom posts\nwhere user_id = ? and (active = 1 or votes >= 100)\n```\n\n----------------------------------------\n\nTITLE: Force Queue Processing During Maintenance Mode in Laravel\nDESCRIPTION: Artisan command to force queue workers to process jobs even when the application is in maintenance mode. By default, queue workers won't process jobs during maintenance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_76\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work --force\n```\n\n----------------------------------------\n\nTITLE: Configuring API Authentication Guard\nDESCRIPTION: Setting up the authentication guard configuration in config/auth.php to use Passport's TokenGuard.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'guards' => [\n    'web' => [\n        'driver' => 'session',\n        'provider' => 'users',\n    ],\n\n    'api' => [\n        'driver' => 'passport',\n        'provider' => 'users',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Setting MinIO URL for Laravel Flysystem Integration\nDESCRIPTION: Required environment variable configuration for proper URL generation when using MinIO with Laravel's Flysystem integration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nAWS_URL=http://localhost:9000/local\n```\n\n----------------------------------------\n\nTITLE: Loading Package JSON Language Files in ServiceProvider\nDESCRIPTION: Shows how to load package JSON language files using the loadJsonTranslationsFrom method in the service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\npublic function boot(): void\n{\n    $this->loadJsonTranslationsFrom(__DIR__.'/../lang');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Keyboard Macros in Laravel Dusk Tests\nDESCRIPTION: Shows how to use custom keyboard macros defined with Keyboard::macro() in Dusk tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$browser->click('@textarea')\n    ->withKeyboard(fn (Keyboard $keyboard) => $keyboard->copy())\n    ->click('@another-textarea')\n    ->withKeyboard(fn (Keyboard $keyboard) => $keyboard->paste());\n```\n\n----------------------------------------\n\nTITLE: Setting Default Number Formatting Locale in PHP\nDESCRIPTION: This snippet globally sets the default locale for number formatting functions, affecting subsequent number and currency display outputs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_69\n\nLANGUAGE: PHP\nCODE:\n```\nNumber::useLocale('de');\n```\n\n----------------------------------------\n\nTITLE: Muting Model Events with Closure\nDESCRIPTION: Shows how to temporarily disable model events using the withoutEvents method with a closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_82\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\n$user = User::withoutEvents(function () {\n    User::findOrFail(1)->delete();\n\n    return User::find(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Starting ChromeDriver in Laravel Dusk\nDESCRIPTION: Shows how to configure Laravel Dusk to use a manually started ChromeDriver instance by modifying the DuskTestCase class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Prepare for Dusk test execution.\n *\n * @beforeClass\n */\npublic static function prepare(): void\n{\n    // static::startChromeDriver();\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Facebook\\WebDriver\\Remote\\RemoteWebDriver;\n\n/**\n * Create the RemoteWebDriver instance.\n */\nprotected function driver(): RemoteWebDriver\n{\n    return RemoteWebDriver::create(\n        'http://localhost:9515', DesiredCapabilities::chrome()\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Installer on macOS via php.new\nDESCRIPTION: This command installs the latest version of PHP 8.4 and the Laravel installer on macOS using the php.new installation script.\nSOURCE: https://github.com/laravel/docs/blob/12.x/upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://php.new/install/mac/8.4)\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Classes and Styles in Blade\nDESCRIPTION: Using @class and @style directives for conditional CSS classes and inline styles\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_21\n\nLANGUAGE: blade\nCODE:\n```\n<span @class([\n    'p-4',\n    'font-bold' => $isActive,\n    'text-gray-500' => ! $isActive,\n    'bg-red' => $hasError,\n])></span>\n\n<span @style([\n    'background-color: red',\n    'font-weight: bold' => $isActive,\n])></span>\n```\n\n----------------------------------------\n\nTITLE: Replacing Parameters in Translation Strings (Laravel)\nDESCRIPTION: Example of defining and using placeholders in translation strings, including capitalization handling.\nSOURCE: https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'welcome' => 'Welcome, :name',\n\necho __('messages.welcome', ['name' => 'dayle']);\n\n'welcome' => 'Welcome, :NAME', // Welcome, DAYLE\n'goodbye' => 'Goodbye, :Name', // Goodbye, Dayle\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Echo with Existing Pusher Client\nDESCRIPTION: JavaScript code to configure Laravel Echo using an existing Pusher Channels client instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Echo from 'laravel-echo';\nimport Pusher from 'pusher-js';\n\nconst options = {\n    broadcaster: 'pusher',\n    key: 'your-pusher-channels-key'\n}\n\nwindow.Echo = new Echo({\n    ...options,\n    client: new Pusher(options.key, options)\n});\n```\n\n----------------------------------------\n\nTITLE: Basic View Using Layout Component\nDESCRIPTION: Shows a basic view that uses the layout component to wrap content, passing content to the default slot.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_88\n\nLANGUAGE: blade\nCODE:\n```\n<!-- resources/views/tasks.blade.php -->\n\n<x-layout>\n    @foreach ($tasks as $task)\n        <div>{{ $task }}</div>\n    @endforeach\n</x-layout>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Mailer to Round Robin in Laravel\nDESCRIPTION: This snippet shows how to set the round-robin mailer as the default mailer in Laravel's mail configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('MAIL_MAILER', 'roundrobin'),\n```\n\n----------------------------------------\n\nTITLE: Using Laravel's mock Method in Tests\nDESCRIPTION: Shows how to use Laravel's built-in mock method to create a mock object in a more convenient way.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service;\nuse Mockery\\MockInterface;\n\n$mock = $this->mock(Service::class, function (MockInterface $mock) {\n    $mock->expects('process');\n});\n```\n\n----------------------------------------\n\nTITLE: Restoring Normal UUID Generation in Laravel\nDESCRIPTION: The createUuidsNormally method restores normal UUID generation after it has been mocked, typically used in test teardown phases.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_66\n\nLANGUAGE: php\nCODE:\n```\nStr::createUuidsNormally();\n```\n\n----------------------------------------\n\nTITLE: Inspecting Models in Laravel\nDESCRIPTION: Command to show a detailed overview of a model's attributes and relationships using the model:show Artisan command.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan model:show Flight\n```\n\n----------------------------------------\n\nTITLE: Using Specific Concurrency Driver in Laravel\nDESCRIPTION: Example of specifying a particular driver (fork) when using Laravel's Concurrency facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/concurrency.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$results = Concurrency::driver('fork')->run(...);\n```\n\n----------------------------------------\n\nTITLE: Customizing User Resolution in Laravel Pulse\nDESCRIPTION: PHP code demonstrating how to customize user information resolution for Pulse dashboard display.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Pulse\\Facades\\Pulse;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Pulse::user(fn ($user) => [\n        'name' => $user->name,\n        'extra' => $user->email,\n        'avatar' => $user->avatar_url,\n    ]);\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pluralizer Language (Laravel)\nDESCRIPTION: Example of configuring the pluralizer to use a language other than English within a service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Pluralizer;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Pluralizer::useLanguage('spanish');\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Str::apa for APA Title Case Conversion in PHP\nDESCRIPTION: The Str::apa method converts the given string to title case following the APA guidelines for capitalization in titles.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$title = Str::apa('Creating A Project');\n\n// 'Creating a Project'\n```\n\n----------------------------------------\n\nTITLE: Text Input Validation in Laravel Prompts\nDESCRIPTION: Examples of adding required validation and custom validation rules to text inputs.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$name = text(\n    label: 'What is your name?',\n    validate: fn (string $value) => match (true) {\n        strlen($value) < 3 => 'The name must be at least 3 characters.',\n        strlen($value) > 255 => 'The name must not exceed 255 characters.',\n        default => null\n    }\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$name = text(\n    label: 'What is your name?',\n    validate: ['name' => 'required|max:255|unique:users']\n);\n```\n\n----------------------------------------\n\nTITLE: Laravel Policy Method with Additional Context\nDESCRIPTION: Implementation of a Laravel policy method that includes additional context parameters for fine-grained authorization control.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Determine if the given post can be updated by the user.\n */\npublic function update(User $user, Post $post, int $category): bool\n{\n    return $user->id === $post->user_id &&\n           $user->canUpdateCategory($category);\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Failures in Batches\nDESCRIPTION: Demonstrates how to allow job failures within a batch without automatically marking the entire batch as cancelled.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$batch = Bus::batch([\n    // ...\n])->then(function (Batch $batch) {\n    // All jobs completed successfully...\n})->allowFailures()->dispatch();\n```\n\n----------------------------------------\n\nTITLE: Using toResourceCollection Method on User Collection in Laravel\nDESCRIPTION: Shows how to use the toResourceCollection method on a collection of User models to automatically discover and use the appropriate resource collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn User::all()->toResourceCollection();\n```\n\n----------------------------------------\n\nTITLE: Deleting All Models in a Table with Laravel Eloquent\nDESCRIPTION: Shows how to delete all records from a table by executing a delete query without any conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$deleted = Flight::query()->delete();\n```\n\n----------------------------------------\n\nTITLE: Listening for Broadcast Events with Laravel Echo\nDESCRIPTION: Examples of listening to broadcast events using Laravel Echo, including channel subscription and event handling.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nEcho.channel(`orders.${this.order.id}`)\n    .listen('OrderShipmentStatusUpdated', (e) => {\n        console.log(e.order.name);\n    });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nEcho.private(`orders.${this.order.id}`)\n    .listen(/* ... */)\n    .listen(/* ... */)\n    .listen(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Using Rule::notIn for Validation in Laravel\nDESCRIPTION: Demonstrates how to use the Rule::notIn method to validate that a field value is not included in a specific list of values. The example validates that 'toppings' field does not contain 'sprinkles' or 'cherries'.\nSOURCE: https://github.com/laravel/docs/blob/12.x/validation.md#2025-04-23_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rule;\n\nValidator::make($data, [\n    'toppings' => [\n        'required',\n        Rule::notIn(['sprinkles', 'cherries']),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Component Slots in Laravel Blade\nDESCRIPTION: Defines a simple alert component that renders default slot content inside a styled div element.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_59\n\nLANGUAGE: blade\nCODE:\n```\n<!-- /resources/views/components/alert.blade.php -->\n\n<div class=\"alert alert-danger\">\n    {{ $slot }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Morph To Parent Relationships\nDESCRIPTION: Shows how to query for children of a morph-to relationship's parent using whereMorphedTo method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n$comments = Comment::whereMorphedTo('commentable', $post)\n    ->orWhereMorphedTo('commentable', $video)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Nginx Worker Configuration\nDESCRIPTION: Nginx configuration to increase the number of allowed connections to 10,000 by adjusting worker limits\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_10\n\nLANGUAGE: nginx\nCODE:\n```\nuser forge;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\nworker_rlimit_nofile 10000;\n\nevents {\n  worker_connections 10000;\n  multi_accept on;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Flash Data Persistence in Laravel\nDESCRIPTION: Methods to extend the lifetime of flash data beyond a single request using reflash() and keep().\nSOURCE: https://github.com/laravel/docs/blob/12.x/session.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$request->session()->reflash();\n\n$request->session()->keep(['username', 'email']);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slack Bot User After Authentication\nDESCRIPTION: Example showing how to retrieve a bot user from Slack after authentication redirect by using the asBotUser method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/socialite.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$user = Socialite::driver('slack')->asBotUser()->user();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Laravel Collection PHP\nDESCRIPTION: Shows the simplest way to instantiate a new `Illuminate\\Support\\Collection` by passing a standard PHP array to the `collect` helper function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Failed Job in Laravel\nDESCRIPTION: Command to delete a specific failed job from the failed_jobs table using the queue:forget command and a job ID.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_94\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:forget 91401d2c-0784-4f43-824c-34f94a33c24d\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON is Object in Laravel Tests\nDESCRIPTION: This snippet illustrates how to assert that the response JSON is an object using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJsonIsObject();\n```\n\n----------------------------------------\n\nTITLE: Installing Brevo Mailer Dependencies via Composer\nDESCRIPTION: Command to install required Symfony packages for Brevo mail transport integration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_61\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/brevo-mailer symfony/http-client\n```\n\n----------------------------------------\n\nTITLE: Testing No Outgoing Mail\nDESCRIPTION: Examples of asserting that no mail was sent or queued using outgoing mail assertions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nMail::assertNothingOutgoing();\n\nMail::assertNotOutgoing(function (OrderShipped $mail) use ($order) {\n    return $mail->order->id === $order->id;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Coupon from Promotion Code in Laravel Cashier\nDESCRIPTION: Demonstrates how to retrieve the coupon related to a promotion code using the coupon method on a PromotionCode instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$coupon = $user->findPromotionCode('SUMMERSALE')->coupon();\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to ASCII in Laravel PHP\nDESCRIPTION: The ascii method attempts to transliterate a string into an ASCII value, handling special characters and diacritics.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_81\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('ü')->ascii();\n\n// 'u'\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Scheduling Configuration in Laravel\nDESCRIPTION: Demonstrates how to define scheduled tasks in the bootstrap/app.php file using the withSchedule method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Console\\Scheduling\\Schedule;\n\n->withSchedule(function (Schedule $schedule) {\n    $schedule->call(new DeleteRecentUsers)->daily();\n})\n```\n\n----------------------------------------\n\nTITLE: Checking if String Ends With Any Values in Laravel PHP\nDESCRIPTION: The endsWith method can check if a string ends with any of the values in an array.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_105\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('This is my name')->endsWith(['name', 'foo']);\n\n// true\n\n$result = Str::of('This is my name')->endsWith(['this', 'foo']);\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Controller Actions in Laravel PHP\nDESCRIPTION: Shows how to generate redirects to controller actions using the 'action' method. It also demonstrates passing parameters to the controller action.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redirects.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\HomeController;\n\nreturn redirect()->action([HomeController::class, 'index']);\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn redirect()->action(\n    [UserController::class, 'profile'], ['id' => 1]\n);\n```\n\n----------------------------------------\n\nTITLE: Partial Mocking in Laravel Tests\nDESCRIPTION: Demonstrates how to create a partial mock of an object, where only specific methods are mocked.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service;\nuse Mockery\\MockInterface;\n\n$mock = $this->partialMock(Service::class, function (MockInterface $mock) {\n    $mock->expects('process');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Request Count in Laravel Tests\nDESCRIPTION: Demonstrates how to use Http::assertSentCount() to verify the number of HTTP requests made during testing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nHttp::fake();\n\nHttp::assertSentCount(5);\n```\n\n----------------------------------------\n\nTITLE: Capitalizing First Character with Str::ucfirst in Laravel\nDESCRIPTION: The Str::ucfirst method returns a string with the first character capitalized, useful for formatting names or sentences.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::ucfirst('foo bar');\n\n// Foo bar\n```\n\n----------------------------------------\n\nTITLE: Conditionally Merging Input Data in Laravel Request\nDESCRIPTION: Adding input values only if they don't already exist in the request using the mergeIfMissing method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$request->mergeIfMissing(['votes' => 0]);\n```\n\n----------------------------------------\n\nTITLE: Publishing Tinker Configuration\nDESCRIPTION: Command to publish Laravel Tinker configuration file\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\"\n```\n\n----------------------------------------\n\nTITLE: Splitting String by Uppercase Characters with Str::ucsplit in Laravel\nDESCRIPTION: The Str::ucsplit method splits a string into an array by uppercase characters, useful for parsing camelCase or PascalCase strings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$segments = Str::ucsplit('FooBar');\n\n// [0 => 'Foo', 1 => 'Bar']\n```\n\n----------------------------------------\n\nTITLE: Using Default Formatter with Monolog Handler in Laravel\nDESCRIPTION: Shows how to use the default formatter provided by a Monolog handler in Laravel's logging configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n'newrelic' => [\n    'driver' => 'monolog',\n    'handler' => Monolog\\Handler\\NewRelicHandler::class,\n    'formatter' => 'default',\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit Testing Database in Laravel\nDESCRIPTION: XML configuration for PHPUnit to use a dedicated testing database with Laravel Sail to avoid affecting the development database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<env name=\"DB_DATABASE\" value=\"testing\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Cached Accessor in Laravel Eloquent\nDESCRIPTION: Example of creating an accessor with caching enabled for computationally intensive operations in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-mutators.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function hash(): Attribute\n{\n    return Attribute::make(\n        get: fn (string $value) => bcrypt(gzuncompress($value)),\n    )->shouldCache();\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Current Environment in Laravel\nDESCRIPTION: Use the App facade's environment method to determine the current application environment.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\App;\n\n$environment = App::environment();\n```\n\n----------------------------------------\n\nTITLE: Generating Laravel Route Cache\nDESCRIPTION: Command to generate a route cache file for improved performance in production. This significantly reduces route registration time on each request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan route:cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Reset Link Request View in Laravel Fortify\nDESCRIPTION: This snippet shows how to customize the 'forgot password' view rendering in Laravel Fortify, typically configured in the boot method of the FortifyServiceProvider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Fortify\\Fortify;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Fortify::requestPasswordResetLinkView(function () {\n        return view('auth.forgot-password');\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Invoice Renderer in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom invoice renderer that uses an API call to a third-party PDF rendering service. It implements the Laravel\\Cashier\\Contracts\\InvoiceRenderer interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_110\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\nuse Laravel\\Cashier\\Contracts\\InvoiceRenderer;\nuse Laravel\\Cashier\\Invoice;\n\nclass ApiInvoiceRenderer implements InvoiceRenderer\n{\n    /**\n     * Render the given invoice and return the raw PDF bytes.\n     */\n    public function render(Invoice $invoice, array $data = [], array $options = []): string\n    {\n        $html = $invoice->view($data)->render();\n\n        return Http::get('https://example.com/html-to-pdf', ['html' => $html])->get()->body();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Artisan in Laravel\nDESCRIPTION: Executes test cases using Laravel's Artisan command-line tool, which provides verbose test reports for easier debugging.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan test\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mail Transport in Laravel Service Provider\nDESCRIPTION: Shows how to register a custom mail transport using Laravel's Mail facade within a service provider's boot method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Mail\\MailchimpTransport;\nuse Illuminate\\Support\\Facades\\Mail;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Mail::extend('mailchimp', function (array $config = []) {\n        return new MailchimpTransport(/* ... */);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using tapEach() Method with Laravel LazyCollection in PHP\nDESCRIPTION: Illustrates the tapEach() method on Laravel's LazyCollection which registers a callback executed only as items are accessed one by one, unlike each() which immediately executes for all items. This lazy execution is useful when dealing with very large or infinite data sources where processing occurs incrementally. It depends on the LazyCollection class of Laravel and standard PHP closures. The snippet shows that no output happens until items are pulled via take and all methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_160\n\nLANGUAGE: php\nCODE:\n```\n// Nothing has been dumped so far...\n$lazyCollection = LazyCollection::times(INF)->tapEach(function (int $value) {\n    dump($value);\n});\n\n// Three items are dumped...\n$array = $lazyCollection->take(3)->all();\n\n// 1\n// 2\n// 3\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Subscription Items in Laravel Cashier\nDESCRIPTION: Method for retrieving a specific subscription item by its price ID from a multi-product subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$subscriptionItem = $user->subscription('default')->findItemOrFail('price_chat');\n```\n\n----------------------------------------\n\nTITLE: Queueing Cookies in Laravel using Cookie Facade\nDESCRIPTION: Shows how to queue cookies for attachment to the response when it is sent, using the Cookie facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Cookie;\n\nCookie::queue('name', 'value', $minutes);\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Incrementing Primary Key Column in Laravel Migration\nDESCRIPTION: The id method is an alias of the bigIncrements method. It creates an auto-incrementing UNSIGNED BIGINT column as a primary key in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\n$table->id();\n```\n\n----------------------------------------\n\nTITLE: Testing Mail Content with Closure\nDESCRIPTION: Example of using closures to test specific mailable content and properties.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nMail::assertSent(function (OrderShipped $mail) use ($order) {\n    return $mail->order->id === $order->id;\n});\n```\n\n----------------------------------------\n\nTITLE: Gate Watcher Ability Exclusions\nDESCRIPTION: Configuration for Gate Watcher to exclude specific abilities from being recorded.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n'watchers' => [\n    Watchers\\GateWatcher::class => [\n        'enabled' => env('TELESCOPE_GATE_WATCHER', true),\n        'ignore_abilities' => ['viewNova'],\n    ],\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Confirmation Prompts with Laravel Prompts\nDESCRIPTION: Examples of using confirm() function for yes/no questions with customization options.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\confirm;\n\n$confirmed = confirm(\n    label: 'Do you accept the terms?',\n    default: false,\n    yes: 'I accept',\n    no: 'I decline',\n    hint: 'The terms must be accepted to continue.'\n);\n```\n\n----------------------------------------\n\nTITLE: Conditional Process Waiting with waitUntil\nDESCRIPTION: Demonstrates using waitUntil method to stop waiting for a process based on specific output conditions.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$process = Process::start('bash import.sh');\n\n$process->waitUntil(function (string $type, string $output) {\n    return $output === 'Ready...';\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Command Options in Laravel\nDESCRIPTION: Demonstrates how to define boolean switch options and options with values in Laravel console commands.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n/**\n * The name and signature of the console command.\n *\n * @var string\n */\nprotected $signature = 'mail:send {user} {--queue}';\n```\n\n----------------------------------------\n\nTITLE: Generating Mailable Class in Laravel\nDESCRIPTION: This snippet demonstrates how to use Artisan command to generate a new mailable class in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:mail OrderShipped\n```\n\n----------------------------------------\n\nTITLE: Installing MailerSend Driver for Laravel\nDESCRIPTION: Command to install the MailerSend Laravel driver via Composer for use with Laravel's mail system.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require mailersend/laravel-driver\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for DynamoDB Cache in Laravel\nDESCRIPTION: Command to install the AWS SDK PHP package via Composer, required for using DynamoDB as a cache backend in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require aws/aws-sdk-php\n```\n\n----------------------------------------\n\nTITLE: Environment Checking in Blade Templates\nDESCRIPTION: Examples of using @production and @env directives to check application environment\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n@production\n    // Production specific content...\n@endproduction\n\n@env('staging')\n    // The application is running in \"staging\"...\n@endenv\n\n@env(['staging', 'production'])\n    // The application is running in \"staging\" or \"production\"...\n@endenv\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Process in PHP\nDESCRIPTION: Demonstrates how to set environment variables for a process and remove inherited variables.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$result = Process::forever()\n    ->env(['IMPORT_PATH' => __DIR__])\n    ->run('bash import.sh');\n\n$result = Process::forever()\n    ->env(['LOAD_PATH' => false])\n    ->run('bash import.sh');\n```\n\n----------------------------------------\n\nTITLE: Importing Static Assets with Vite in JavaScript\nDESCRIPTION: Configuration for importing static assets like images and fonts into Vite for processing and versioning.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport.meta.glob([\n  '../images/**',\n  '../fonts/**',\n]);\n```\n\n----------------------------------------\n\nTITLE: Inline Image Attachment in Blade\nDESCRIPTION: Shows how to embed inline images in email templates using Blade syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_31\n\nLANGUAGE: blade\nCODE:\n```\n<body>\n    Here is an image:\n\n    <img src=\"{{ $message->embed($pathToImage) }}\">\n</body>\n```\n\n----------------------------------------\n\nTITLE: Site-Specific Environment Variables Configuration\nDESCRIPTION: PHP configuration for setting site-specific environment variables in Valet.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // Set $_SERVER['key'] to \"value\" for the laravel.test site...\n    'laravel' => [\n        'key' => 'value',\n    ],\n\n    // Set $_SERVER['key'] to \"value\" for all sites...\n    '*' => [\n        'key' => 'value',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customers by Paddle ID in PHP\nDESCRIPTION: Code to find a billable model instance using a Paddle Customer ID via the Cashier facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Paddle\\Cashier;\n\n$user = Cashier::findBillable($customerId);\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Values in PHP with Laravel Dusk\nDESCRIPTION: Assert the value of an element matching a given selector using Laravel Dusk's browser testing methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertValue($selector, $value);\n```\n\nLANGUAGE: php\nCODE:\n```\n$browser->assertValueIsNot($selector, $value);\n```\n\n----------------------------------------\n\nTITLE: Asserting No HTTP Requests Sent in Laravel Tests\nDESCRIPTION: Shows how to use Http::assertNothingSent() to verify that no HTTP requests were made during testing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nHttp::fake();\n\nHttp::assertNothingSent();\n```\n\n----------------------------------------\n\nTITLE: Using Package Views in Laravel Routes\nDESCRIPTION: Shows how to load a view from a package using the package::view syntax in a Laravel route definition.\nSOURCE: https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/dashboard', function () {\n    return view('courier::dashboard');\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Class with Artisan in Laravel\nDESCRIPTION: Uses the make:resource Artisan command to generate a new UserResource class in the app/Http/Resources directory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:resource UserResource\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun as Default Mailer in Laravel\nDESCRIPTION: PHP configuration snippet to set Mailgun as the default mailer in Laravel's mail.php config file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('MAIL_MAILER', 'mailgun'),\n```\n\n----------------------------------------\n\nTITLE: Closure-based Artisan Command\nDESCRIPTION: Example of defining an Artisan command using a closure with dependency injection\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse App\\Support\\DripEmailer;\n\nArtisan::command('mail:send {user}', function (DripEmailer $drip, string $user) {\n    $drip->send(User::find($user));\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Tax Calculation\nDESCRIPTION: Code for enabling Stripe Tax automatic tax calculation for all invoices generated by Stripe.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Cashier\\Cashier;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Cashier::calculateTaxes();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keyboard Macros in Laravel Dusk\nDESCRIPTION: Demonstrates how to define custom keyboard macros using the Keyboard::macro() method in a service provider.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Facebook\\WebDriver\\WebDriverKeys;\nuse Illuminate\\Support\\ServiceProvider;\nuse Laravel\\Dusk\\Keyboard;\nuse Laravel\\Dusk\\OperatingSystem;\n\nclass DuskServiceProvider extends ServiceProvider\n{\n    /**\n     * Register Dusk's browser macros.\n     */\n    public function boot(): void\n    {\n        Keyboard::macro('copy', function (string $element = null) {\n            $this->type([\n                OperatingSystem::onMac() ? WebDriverKeys::META : WebDriverKeys::CONTROL, 'c',\n            ]);\n\n            return $this;\n        });\n\n        Keyboard::macro('paste', function (string $element = null) {\n            $this->type([\n                OperatingSystem::onMac() ? WebDriverKeys::META : WebDriverKeys::CONTROL, 'v',\n            ]);\n\n            return $this;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Background Task Execution in Laravel\nDESCRIPTION: Shows how to run tasks in the background for concurrent execution using runInBackground method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('analytics:report')\n    ->daily()\n    ->runInBackground();\n```\n\n----------------------------------------\n\nTITLE: Ending a Subscription Trial Immediately in Laravel Cashier\nDESCRIPTION: Shows how to immediately end a subscription trial period using the endTrial method on the subscription instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_90\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->endTrial();\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple JSON Attributes in Laravel\nDESCRIPTION: Demonstrates testing multiple JSON attributes simultaneously using hasAll() and missingAll() methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$response->assertJson(fn (AssertableJson $json) =>\n    $json->hasAll(['status', 'data'])\n        ->missingAll(['message', 'code'])\n);\n```\n\n----------------------------------------\n\nTITLE: Running Isolated Command in Laravel\nDESCRIPTION: Demonstrates how to execute an isolatable command using the --isolated flag from the command line.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan mail:send 1 --isolated\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Response Data Directly\nDESCRIPTION: Shows how to access JSON response data directly on the response object using array access syntax.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-client.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn Http::get('http://example.com/users/1')['name'];\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Installer on Windows via PowerShell\nDESCRIPTION: This command installs the latest version of PHP 8.4 and the Laravel installer on Windows using PowerShell, and needs to be run as administrator.\nSOURCE: https://github.com/laravel/docs/blob/12.x/upgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Run as administrator...\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://php.new/install/windows/8.4'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Fortify Features\nDESCRIPTION: Configuration array that defines which authentication features Fortify should enable in your application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'features' => [\n    Features::registration(),\n    Features::resetPasswords(),\n    Features::emailVerification(),\n],\n```\n\n----------------------------------------\n\nTITLE: Apache FastCGI Configuration for HTTP Authentication\nDESCRIPTION: Apache .htaccess configuration to fix HTTP Basic authentication issues when using PHP FastCGI.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_16\n\nLANGUAGE: apache\nCODE:\n```\nRewriteCond %{HTTP:Authorization} ^(.+)$\nRewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n```\n\n----------------------------------------\n\nTITLE: Splitting a String by Uppercase Characters in Laravel\nDESCRIPTION: The ucsplit method splits the given string into a collection by uppercase characters.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_153\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('Foo Bar')->ucsplit();\n\n// collect(['Foo', 'Bar'])\n```\n\n----------------------------------------\n\nTITLE: Element Scrolling\nDESCRIPTION: Shows how to scroll elements into view before interacting with them.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$browser->scrollIntoView('.selector')\n    ->click('.selector');\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for Cashier\nDESCRIPTION: Artisan command to run the database migrations that create Cashier's required tables.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Converting First Character to Lowercase in PHP\nDESCRIPTION: Demonstrates the use of the 'lcfirst' method to convert the first character of a string to lowercase.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_123\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('Foo Bar')->lcfirst();\n\n// foo Bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulse Servers Card in Blade\nDESCRIPTION: Blade template code showing how to configure the Pulse Servers card with custom inactive server removal.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:pulse.servers ignore-after=\"3 hours\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Folders in Homestead YAML\nDESCRIPTION: YAML configuration examples for setting up shared folders between the host machine and Homestead environment.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfolders:\n    - map: ~/code/project1\n      to: /home/vagrant/project1\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfolders:\n    - map: ~/code/project1\n      to: /home/vagrant/project1\n    - map: ~/code/project2\n      to: /home/vagrant/project2\n```\n\n----------------------------------------\n\nTITLE: Conditional Cache Storage\nDESCRIPTION: Shows using add() method for atomic conditional cache storage that only adds if item doesn't exist.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nCache::add('key', 'value', $seconds);\n```\n\n----------------------------------------\n\nTITLE: Encrypting Laravel Environment File with Custom Key\nDESCRIPTION: Encrypt the .env file using a custom encryption key with the --key option.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan env:encrypt --key=3UVsEgGVK36XN82KKeyLFMhvosbZN1aF\n```\n\n----------------------------------------\n\nTITLE: Retrieving Integer Input Values in Laravel\nDESCRIPTION: Converting input values to integers using the integer method, which attempts to cast the input to an integer type.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$perPage = $request->integer('per_page');\n```\n\n----------------------------------------\n\nTITLE: Configuring Reverb TLS Options\nDESCRIPTION: PHP configuration for setting up SSL/TLS options in Reverb.\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'options' => [\n    'tls' => [\n        'local_cert' => '/path/to/cert.pem'\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Sharing Sites with Ngrok/Expose\nDESCRIPTION: Commands for sharing local Valet sites via ngrok or Expose.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nvalet share-tool ngrok\n\ncd ~/Sites/laravel\n\nvalet share\n\nvalet set-ngrok-token YOUR_TOKEN_HERE\n```\n\n----------------------------------------\n\nTITLE: Checking if Input is Not Filled in Laravel\nDESCRIPTION: Verifying if an input value is missing or is an empty string using the isNotFilled method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nif ($request->isNotFilled('name')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Coupon from Discount in Laravel Cashier\nDESCRIPTION: Shows how to retrieve the coupon related to a discount by invoking the coupon method on a Discount instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$coupon = $subscription->discount()->coupon();\n```\n\n----------------------------------------\n\nTITLE: Attaching Multiple Headers to Response in Laravel\nDESCRIPTION: Demonstrates how to attach multiple headers to a response using method chaining or the withHeaders method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/responses.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn response($content)\n    ->header('Content-Type', $type)\n    ->header('X-Header-One', 'Header Value')\n    ->header('X-Header-Two', 'Header Value');\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn response($content)\n    ->withHeaders([\n        'Content-Type' => $type,\n        'X-Header-One' => 'Header Value',\n        'X-Header-Two' => 'Header Value',\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Nested Array Request Merging with Dot Notation in Laravel 12\nDESCRIPTION: This example demonstrates how the mergeIfMissing method now supports merging nested array data using dot notation, which changes the behavior compared to Laravel 11.x.\nSOURCE: https://github.com/laravel/docs/blob/12.x/upgrade.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$request->mergeIfMissing([\n    'user.last_name' => 'Otwell',\n]);\n```\n\n----------------------------------------\n\nTITLE: Extracting Parent Directory Path in Laravel PHP\nDESCRIPTION: The dirname method returns the parent directory portion of a given string path, similar to PHP's dirname function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_102\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('/foo/bar/baz')->dirname();\n\n// '/foo/bar'\n```\n\n----------------------------------------\n\nTITLE: Checking if Input is Filled in Laravel\nDESCRIPTION: Determining if an input value is present and not an empty string using the filled method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nif ($request->filled('name')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Component Parent-Child Data Example\nDESCRIPTION: Shows a parent menu component being rendered with a color property and child menu items.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_80\n\nLANGUAGE: blade\nCODE:\n```\n<x-menu color=\"purple\">\n    <x-menu.item>...</x-menu.item>\n    <x-menu.item>...</x-menu.item>\n</x-menu>\n```\n\n----------------------------------------\n\nTITLE: Keying Laravel Collection by String Key (PHP)\nDESCRIPTION: Re-indexes the collection using the value of a specified key from each item. If multiple items share the same key value, the last item encountered will overwrite previous ones with that key.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['product_id' => 'prod-100', 'name' => 'Desk'],\n    ['product_id' => 'prod-200', 'name' => 'Chair'],\n]);\n\n$keyed = $collection->keyBy('product_id');\n\n$keyed->all();\n\n/*\n    [\n        'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n        'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Using takeUntilTimeout() Method with Laravel LazyCollection in PHP\nDESCRIPTION: Demonstrates the takeUntilTimeout() method of Laravel's LazyCollection which enumerates items lazily until a specified timeout is reached, then stops further enumeration. This method is useful for time-limited processing scenarios such as scheduled tasks that process database records within a constrained duration. Dependencies include the Laravel framework, Carbon date handling, and the LazyCollection class. The example shows creating an infinite LazyCollection truncated to one minute, and processing invoices with a maximum runtime of 14 minutes, ensuring resource control.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_159\n\nLANGUAGE: php\nCODE:\n```\n$lazyCollection = LazyCollection::times(INF)\n    ->takeUntilTimeout(now()->addMinute());\n\n$lazyCollection->each(function (int $number) {\n    dump($number);\n\n    sleep(1);\n});\n\n// 1\n// 2\n// ...\n// 58\n// 59\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Invoice;\nuse Illuminate\\Support\\Carbon;\n\nInvoice::pending()->cursor()\n    ->takeUntilTimeout(\n        Carbon::createFromTimestamp(LARAVEL_START)->add(14, 'minutes')\n    )\n    ->each(fn (Invoice $invoice) => $invoice->submit());\n```\n\n----------------------------------------\n\nTITLE: Specific Seeder Configuration\nDESCRIPTION: Shows how to configure a specific seeder to run before tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Database\\Seeders\\OrderStatusSeeder;\n\n/**\n * Run a specific seeder before each test.\n *\n * @var string\n */\nprotected $seeder = OrderStatusSeeder::class;\n```\n\n----------------------------------------\n\nTITLE: Converting Model Attributes to Array\nDESCRIPTION: Shows how to convert only the model's attributes to an array without including relationships\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = User::first();\n\nreturn $user->attributesToArray();\n```\n\n----------------------------------------\n\nTITLE: Invokable Object Scheduling in Laravel\nDESCRIPTION: Shows how to schedule tasks using invokable PHP objects that contain an __invoke method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSchedule::call(new DeleteRecentUsers)->daily();\n```\n\n----------------------------------------\n\nTITLE: Rendering Namespaced Component\nDESCRIPTION: Shows how to render a component from a namespaced path using the namespace prefix in the component tag.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_86\n\nLANGUAGE: blade\nCODE:\n```\n<x-dashboard::panel />\n```\n\n----------------------------------------\n\nTITLE: Extracting First Substring Between Values in Laravel PHP\nDESCRIPTION: The betweenFirst method returns the smallest possible portion of a string between two values, targeting the first occurrence.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_87\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$converted = Str::of('[a] bc [d]')->betweenFirst('[', ']');\n\n// 'a'\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Route Information in Laravel\nDESCRIPTION: This code demonstrates how to access information about the current route using the Route facade, including getting the current Route instance, route name, and route action. This is useful for conditional logic based on the current route.\nSOURCE: https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-23_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Route;\n\n$route = Route::current(); // Illuminate\\Routing\\Route\n$name = Route::currentRouteName(); // string\n$action = Route::currentRouteAction(); // string\n```\n\n----------------------------------------\n\nTITLE: Managing In-Memory Cache for Feature Flags in Laravel Pennant\nDESCRIPTION: Shows how to flush the in-memory cache for feature flags using the Feature facade.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nFeature::flushCache();\n```\n\n----------------------------------------\n\nTITLE: Specifying Task Workers for Swoole in Laravel Octane\nDESCRIPTION: Command to start Laravel Octane with Swoole, specifying both workers and task workers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan octane:start --workers=4 --task-workers=6\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Sites in Homestead YAML\nDESCRIPTION: YAML configuration example for mapping a domain to a folder in the Homestead Nginx configuration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsites:\n    - map: homestead.test\n      to: /home/vagrant/project1/public\n```\n\n----------------------------------------\n\nTITLE: Lowercasing First Character with Str::lcfirst in PHP\nDESCRIPTION: Demonstrates the use of Str::lcfirst to lowercase the first character of a string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::lcfirst('Foo Bar');\n\n// foo Bar\n```\n\n----------------------------------------\n\nTITLE: Displaying Informational Messages in Laravel Prompts\nDESCRIPTION: Demonstrates how to use various functions to display informational messages in the command-line interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/prompts.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse function Laravel\\Prompts\\info;\n\ninfo('Package installed successfully.');\n```\n\n----------------------------------------\n\nTITLE: Filtering Laravel About Command Output\nDESCRIPTION: Filter the 'about' command output to show only specific sections using the --only option.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan about --only=environment\n```\n\n----------------------------------------\n\nTITLE: Installing Sail Configuration\nDESCRIPTION: Command to publish Sail's docker-compose.yml file and configure environment variables.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan sail:install\n```\n\n----------------------------------------\n\nTITLE: Setting Process Timeout in PHP\nDESCRIPTION: Shows how to set a custom timeout for a process or disable the timeout entirely.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$result = Process::timeout(120)->run('bash import.sh');\n\n$result = Process::forever()->run('bash import.sh');\n```\n\n----------------------------------------\n\nTITLE: Managing Polymorphic Relationships in Factories\nDESCRIPTION: Examples of creating polymorphic relationships including morph-many and morph-to relationships.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\n$post = Post::factory()->hasComments(3)->create();\n```\n\nLANGUAGE: php\nCODE:\n```\n$comments = Comment::factory()->count(3)->for(\n    Post::factory(), 'commentable'\n)->create();\n```\n\n----------------------------------------\n\nTITLE: Custom Username Field Implementation\nDESCRIPTION: Implementation of custom username field validation for password grant authentication.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\npublic function findForPassport(string $username): User\n{\n    return $this->where('username', $username)->first();\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Horizon Assets\nDESCRIPTION: Publish Horizon's assets using the Artisan command after installation.\nSOURCE: https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan horizon:install\n```\n\n----------------------------------------\n\nTITLE: Installing Chokidar for File Watching in Laravel Octane\nDESCRIPTION: NPM command to install Chokidar, required for file watching functionality in Laravel Octane.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev chokidar\n```\n\n----------------------------------------\n\nTITLE: Slack Notification Integration\nDESCRIPTION: Configuration for sending notifications to Slack after task execution\nSOURCE: https://github.com/laravel/docs/blob/12.x/envoy.md#2025-04-21_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n@finished\n    @slack('webhook-url', '#bots', 'Hello, Slack.')\n@endfinished\n```\n\n----------------------------------------\n\nTITLE: Custom Index Search in Laravel Scout\nDESCRIPTION: Demonstrates searching within a specific custom index using the within method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$orders = Order::search('Star Trek')\n    ->within('tv_shows_popularity_desc')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Disabling Telescope Data Collection in Configuration\nDESCRIPTION: PHP configuration setting to enable or disable Telescope's data collection using an environment variable.\nSOURCE: https://github.com/laravel/docs/blob/12.x/telescope.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'enabled' => env('TELESCOPE_ENABLED', true),\n```\n\n----------------------------------------\n\nTITLE: Installing Pusher Channels SDK\nDESCRIPTION: Composer command to install the Pusher Channels PHP SDK for broadcasting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require pusher/pusher-php-server\n```\n\n----------------------------------------\n\nTITLE: Enabling Reverb Horizontal Scaling\nDESCRIPTION: Environment variable configuration to enable horizontal scaling for Reverb using Redis\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_13\n\nLANGUAGE: env\nCODE:\n```\nREVERB_SCALING_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Using prepend() Method in Laravel String Manipulation\nDESCRIPTION: Prepends given values to the beginning of a string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_140\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('Framework')->prepend('Laravel ');\n\n// Laravel Framework\n```\n\n----------------------------------------\n\nTITLE: Configuring Reverb Production Environment\nDESCRIPTION: Environment variables configuration for production deployment of Reverb.\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nREVERB_SERVER_HOST=0.0.0.0\nREVERB_SERVER_PORT=8080\n\nREVERB_HOST=ws.laravel.com\nREVERB_PORT=443\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Precognition Package for React\nDESCRIPTION: Command to install the Laravel Precognition frontend helpers package for React via NPM.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install laravel-precognition-react\n```\n\n----------------------------------------\n\nTITLE: Stateless Authentication Route Protection\nDESCRIPTION: Example of protecting a route using custom stateless authentication middleware.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/api/user', function () {\n    // Only authenticated users may access this route...\n})->middleware(AuthenticateOnceWithBasicAuth::class);\n```\n\n----------------------------------------\n\nTITLE: Processing Fixed Number of Jobs with Laravel Queue Worker\nDESCRIPTION: Artisan command to run a queue worker that processes a specific number of jobs (1000) before exiting. Useful with Supervisor to automatically restart workers and release accumulated memory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_72\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:work --max-jobs=1000\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Escaped Attribute Rendering\nDESCRIPTION: Demonstrates the resulting HTML output when using double colon prefix to escape attributes, preserving the single colon for JavaScript frameworks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_37\n\nLANGUAGE: blade\nCODE:\n```\n<button :class=\"{ danger: isDeleting }\">\n    Submit\n</button>\n```\n\n----------------------------------------\n\nTITLE: Refactoring Podcast Publishing with Real-Time Facades in Laravel\nDESCRIPTION: This snippet shows how to refactor the previous example using real-time facades in Laravel. It removes the need for explicit dependency injection while maintaining testability.\nSOURCE: https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Facades\\App\\Contracts\\Publisher;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Podcast extends Model\n{\n    /**\n     * Publish the podcast.\n     */\n    public function publish(): void\n    {\n        $this->update(['publishing' => now()]);\n\n        Publisher::publish($this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Class-Based Feature Availability in Laravel Pennant\nDESCRIPTION: Example of checking if a class-based feature is active in a controller method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Features\\NewApi;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse Laravel\\Pennant\\Feature;\n\nclass PodcastController\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index(Request $request): Response\n    {\n        return Feature::active(NewApi::class)\n            ? $this->resolveNewApiResponse($request)\n            : $this->resolveLegacyApiResponse($request);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Different Code Based on Filled Input in Laravel\nDESCRIPTION: Using whenFilled with two closures to execute different code blocks depending on whether an input is filled or not.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$request->whenFilled('name', function (string $input) {\n    // The \"name\" value is filled...\n}, function () {\n    // The \"name\" value is not filled...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hosts File for Multiple Sites\nDESCRIPTION: Example of adding multiple Homestead domains to the hosts file on the local machine.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n192.168.56.56  homestead.test\n192.168.56.56  another.test\n```\n\n----------------------------------------\n\nTITLE: Runtime Attribute Appending\nDESCRIPTION: Demonstrates how to append attributes at runtime during serialization\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn $user->append('is_admin')->toArray();\n\nreturn $user->setAppends(['is_admin'])->toArray();\n```\n\n----------------------------------------\n\nTITLE: Running Folio Installation Command\nDESCRIPTION: Artisan command to install Folio's service provider into the Laravel application\nSOURCE: https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan folio:install\n```\n\n----------------------------------------\n\nTITLE: Creating BIGINT Column in Laravel Migration\nDESCRIPTION: The bigInteger method creates a BIGINT equivalent column in a Laravel database migration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$table->bigInteger('votes');\n```\n\n----------------------------------------\n\nTITLE: Disabling Process Output in PHP\nDESCRIPTION: Shows how to disable output retrieval for a process to conserve memory.\nSOURCE: https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Process;\n\n$result = Process::quietly()->run('bash import.sh');\n```\n\n----------------------------------------\n\nTITLE: Getting All Defined Passport Scopes\nDESCRIPTION: Demonstrates how to retrieve all defined scopes as Scope instances\nSOURCE: https://github.com/laravel/docs/blob/12.x/passport.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nPassport::scopes();\n```\n\n----------------------------------------\n\nTITLE: Dispatching Laravel Event\nDESCRIPTION: PHP code example showing how to dispatch a Laravel event for broadcasting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Events\\OrderShipmentStatusUpdated;\n\nOrderShipmentStatusUpdated::dispatch($order);\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Hashing Configuration\nDESCRIPTION: Command to publish Laravel's hashing configuration file to customize password hashing settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan config:publish hashing\n```\n\n----------------------------------------\n\nTITLE: Laravel Configuration Publishing Commands\nDESCRIPTION: Artisan commands for publishing configuration files that are not published by default.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan config:publish\n\nphp artisan config:publish --all\n```\n\n----------------------------------------\n\nTITLE: Creating Nullable ULID Polymorphic Columns\nDESCRIPTION: Creates nullable columns for ULID-based polymorphic relationships.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$table->nullableUlidMorphs('taggable');\n```\n\n----------------------------------------\n\nTITLE: Using Str::inlineMarkdown for Markdown to HTML Conversion in PHP\nDESCRIPTION: The Str::inlineMarkdown method converts GitHub-flavored Markdown into inline HTML using CommonMark. Unlike the markdown method, it does not wrap the generated HTML in a block-level element.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$html = Str::inlineMarkdown('**Laravel**');\n\n// <strong>Laravel</strong>\n```\n\n----------------------------------------\n\nTITLE: Configuring Ably Environment Variables\nDESCRIPTION: Environment variable configuration for Ably integration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nABLY_KEY=your-ably-key\nBROADCAST_CONNECTION=ably\n```\n\n----------------------------------------\n\nTITLE: Laravel Maintenance Mode Environment Configuration\nDESCRIPTION: Environment configuration settings for cache-based maintenance mode across multiple servers.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nAPP_MAINTENANCE_DRIVER=cache\nAPP_MAINTENANCE_STORE=database\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Redis Channels in Laravel\nDESCRIPTION: Demonstrates how to publish messages to a Redis channel using the publish method. This example shows publishing within a Laravel route closure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/redis.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Redis;\n\nRoute::get('/publish', function () {\n    // ...\n\n    Redis::publish('test-channel', json_encode([\n        'name' => 'Adam Wathan'\n    ]));\n});\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Search Parameters with Typesense\nDESCRIPTION: Example of using dynamic search parameters with Typesense through the options method. This allows for customizing search behavior on a per-query basis.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Todo;\n\nTodo::search('Groceries')->options([\n    'query_by' => 'title, description'\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Number: Accessing Default Currency and Locale in PHP\nDESCRIPTION: These snippets retrieve the default currency and locale settings used by the Number class, useful for configuration and display purposes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_59\n\nLANGUAGE: PHP\nCODE:\n```\n$currency = Number::defaultCurrency();\n// USD\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$locale = Number::defaultLocale();\n// en\n```\n\n----------------------------------------\n\nTITLE: Running Tasks on Single Server with Laravel\nDESCRIPTION: Shows how to ensure scheduled tasks run on only one server in a multi-server environment using onOneServer method. Includes cache store customization and job naming.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scheduling.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('report:generate')\n    ->fridays()\n    ->at('17:00')\n    ->onOneServer();\n```\n\nLANGUAGE: php\nCODE:\n```\nSchedule::command('recipes:sync')\n    ->everyThirtyMinutes()\n    ->onOneServer()\n    ->useCache('database');\n```\n\nLANGUAGE: php\nCODE:\n```\nSchedule::job(new CheckUptime('https://laravel.com'))\n    ->name('check_uptime:laravel.com')\n    ->everyFiveMinutes()\n    ->onOneServer();\n\nSchedule::job(new CheckUptime('https://vapor.laravel.com'))\n    ->name('check_uptime:vapor.laravel.com')\n    ->everyFiveMinutes()\n    ->onOneServer();\n```\n\nLANGUAGE: php\nCODE:\n```\nSchedule::call(fn () => User::resetApiRequestCount())\n    ->name('reset-api-request-count')\n    ->daily()\n    ->onOneServer();\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Version in docker-compose.yml\nDESCRIPTION: YAML configuration to change the Node.js version that is installed when building Sail images by updating the build.args in the docker-compose.yml file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sail.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n    args:\n        WWWGROUP: '${WWWGROUP}'\n        NODE_VERSION: '18'\n```\n\n----------------------------------------\n\nTITLE: Customizing Database Notification Type and Read Status\nDESCRIPTION: This example shows how to customize the database type and initial read status of a notification by implementing the databaseType and initialDatabaseReadAtValue methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Carbon;\n\n/**\n * Get the notification's database type.\n */\npublic function databaseType(object $notifiable): string\n{\n    return 'invoice-paid';\n}\n\n/**\n * Get the initial value for the \"read_at\" column.\n */\npublic function initialDatabaseReadAtValue(): ?Carbon\n{\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Parameters in Nginx for Laravel Homestead\nDESCRIPTION: This YAML snippet demonstrates how to add custom Nginx fastcgi_param values to a Homestead site configuration. It maps a domain to a project directory and sets a custom parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nsites:\n    - map: homestead.test\n      to: /home/vagrant/project1/public\n      params:\n          - key: FOO\n            value: BAR\n```\n\n----------------------------------------\n\nTITLE: Removing Suffix from String in Laravel PHP\nDESCRIPTION: The chopEnd method removes the last occurrence of a given value only if it appears at the end of the string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_93\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$url = Str::of('https://laravel.com')->chopEnd('.com');\n\n// 'https://laravel'\n```\n\n----------------------------------------\n\nTITLE: Wrapping Text at Word Boundaries with Str::wordWrap in Laravel\nDESCRIPTION: The Str::wordWrap method wraps a string to a given number of characters while preserving word boundaries, useful for formatting text for display.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_70\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$text = \"The quick brown fox jumped over the lazy dog.\"\n\nStr::wordWrap($text, characters: 20, break: \"<br />\\n\");\n\n/*\nThe quick brown fox<br />\njumped over the lazy<br />\ndog.\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing Packages in Laravel Homestead Without Overwriting Configurations\nDESCRIPTION: This shell command demonstrates how to install packages in Ubuntu within Homestead while preserving existing configuration files, avoiding prompts for configuration choices.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get -y \\\n    -o Dpkg::Options::=\"--force-confdef\" \\\n    -o Dpkg::Options::=\"--force-confold\" \\\n    install package-name\n```\n\n----------------------------------------\n\nTITLE: Conditional Push with `unless()` in PHP\nDESCRIPTION: The `unless()` method conditionally pushes a value to the collection based on a boolean condition. If the first argument is true, the first callback is skipped, otherwise the first callback is executed. Optionally, a second callback can be provided and is executed when the first argument is true. Requires a Laravel Collection instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_137\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([1, 2, 3]);\n\n$collection->unless(true, function (Collection $collection) {\n    return $collection->push(4);\n});\n\n$collection->unless(false, function (Collection $collection) {\n    return $collection->push(5);\n});\n\n$collection->all();\n\n// [1, 2, 3, 5]\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([1, 2, 3]);\n\n$collection->unless(true, function (Collection $collection) {\n    return $collection->push(4);\n}, function (Collection $collection) {\n    return $collection->push(5);\n});\n\n$collection->all();\n\n// [1, 2, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch Environment Variables\nDESCRIPTION: Environment variable configuration for Meilisearch in the .env file. These settings specify the Scout driver and Meilisearch connection details.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nSCOUT_DRIVER=meilisearch\nMEILISEARCH_HOST=http://127.0.0.1:7700\nMEILISEARCH_KEY=masterKey\n```\n\n----------------------------------------\n\nTITLE: Configuring Algolia Index Settings\nDESCRIPTION: Configuration example for Algolia index settings in the Scout configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse App\\Models\\Flight;\n\n'algolia' => [\n    'id' => env('ALGOLIA_APP_ID', ''),\n    'secret' => env('ALGOLIA_SECRET', ''),\n    'index-settings' => [\n        User::class => [\n            'searchableAttributes' => ['id', 'name', 'email'],\n            'attributesForFaceting'=> ['filterOnly(email)'],\n            // Other settings fields...\n        ],\n        Flight::class => [\n            'searchableAttributes'=> ['id', 'destination'],\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Using Custom Echo Handler in Blade Template\nDESCRIPTION: This snippet shows how to use a custom echo handler in a Blade template. After defining the custom handler, you can simply echo the object in your template.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_102\n\nLANGUAGE: blade\nCODE:\n```\nCost: {{ $money }}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with Vue and Laravel Precognition\nDESCRIPTION: Demonstrates how to handle form submission, including resetting the form and displaying alerts based on the response.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst submit = () => form.submit()\n    .then(response => {\n        form.reset();\n\n        alert('User created.');\n    })\n    .catch(error => {\n        alert('An error occurred.');\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Testing Hooks in Laravel\nDESCRIPTION: Sets up lifecycle hooks for parallel testing in Laravel's service provider. These hooks enable preparation and cleanup of resources for parallel test processes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/testing.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Artisan;\nuse Illuminate\\Support\\Facades\\ParallelTesting;\nuse Illuminate\\Support\\ServiceProvider;\nuse PHPUnit\\Framework\\TestCase;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        ParallelTesting::setUpProcess(function (int $token) {\n            // ...\n        });\n\n        ParallelTesting::setUpTestCase(function (int $token, TestCase $testCase) {\n            // ...\n        });\n\n        // Executed when a test database is created...\n        ParallelTesting::setUpTestDatabase(function (string $database, int $token) {\n            Artisan::call('db:seed');\n        });\n\n        ParallelTesting::tearDownTestCase(function (int $token, TestCase $testCase) {\n            // ...\n        });\n\n        ParallelTesting::tearDownProcess(function (int $token) {\n            // ...\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Subset as a Collection in Laravel\nDESCRIPTION: Getting a specific subset of the request input as a collection and processing it with a callback function.\nSOURCE: https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$request->collect('users')->each(function (string $user) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Email Verification Notice Route (PHP)\nDESCRIPTION: This snippet shows how to define a route for displaying the email verification notice to users.\nSOURCE: https://github.com/laravel/docs/blob/12.x/verification.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/email/verify', function () {\n    return view('auth.verify-email');\n})->middleware('auth')->name('verification.notice');\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Echo and Pusher JS with NPM\nDESCRIPTION: Command to install Laravel Echo and Pusher JS dependencies using NPM.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev laravel-echo pusher-js\n```\n\n----------------------------------------\n\nTITLE: Using Button Component in Markdown Emails\nDESCRIPTION: This snippet shows how to use the button component in Markdown emails with custom color. The component accepts a URL and an optional color parameter (primary, green, or red).\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_26\n\nLANGUAGE: blade\nCODE:\n```\n<x-mail::button :url=\"$url\" color=\"green\">\nView Invoice\n</x-mail::button>\n```\n\n----------------------------------------\n\nTITLE: Installing SRI Plugin for Vite\nDESCRIPTION: Command to install the vite-plugin-manifest-sri NPM package for Subresource Integrity support.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev vite-plugin-manifest-sri\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Relationships in PHP\nDESCRIPTION: This code demonstrates how to define dynamic relationships between Eloquent models at runtime using the resolveRelationUsing method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\nuse App\\Models\\Customer;\n\nOrder::resolveRelationUsing('customer', function (Order $orderModel) {\n    return $orderModel->belongsTo(Customer::class, 'customer_id');\n});\n```\n\n----------------------------------------\n\nTITLE: Laravel Database Configuration for MongoDB\nDESCRIPTION: Configuration settings in database.php to set up MongoDB connection\nSOURCE: https://github.com/laravel/docs/blob/12.x/mongodb.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'connections' => [\n    'mongodb' => [\n        'driver' => 'mongodb',\n        'dsn' => env('MONGODB_URI', 'mongodb://localhost:27017'),\n        'database' => env('MONGODB_DATABASE', 'laravel_app'),\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Collection Route in Laravel\nDESCRIPTION: Example route that returns a JSON collection of users.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/users', function () {\n    return User::all();\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Skipping Items Until Callback Returns True in Laravel Collection with PHP\nDESCRIPTION: Shows the `skipUntil` method that skips items while a callback returns false, stopping once it returns true and returning the rest of the collection. Also supports passing a direct value to skip until that value is found. If the condition is never met, an empty collection is returned. Inputs include a collection and either a callback or value, output is the subset collection after skipping.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_109\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4]);\n\n$subset = $collection->skipUntil(function (int $item) {\n    return $item >= 3;\n});\n\n$subset->all();\n\n// [3, 4]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4]);\n\n$subset = $collection->skipUntil(3);\n\n$subset->all();\n\n// [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Customizing Broadcast Event Creation for Eloquent Models in Laravel\nDESCRIPTION: Overrides the default broadcast event creation by implementing the newBroadcastableEvent method. This example creates a custom broadcastable event that won't be sent to the current user.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\BroadcastableModelEventOccurred;\n\n/**\n * Create a new broadcastable model event for the model.\n */\nprotected function newBroadcastableEvent(string $event): BroadcastableModelEventOccurred\n{\n    return (new BroadcastableModelEventOccurred(\n        $this, $event\n    ))->dontBroadcastToCurrentUser();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Products with Specific Quantities in Laravel Cashier\nDESCRIPTION: Methods for adding new price products to a subscription with specific quantities, either for the next billing cycle or with immediate invoicing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->subscription('default')->addPrice('price_chat', 5);\n```\n\n----------------------------------------\n\nTITLE: Expanding Dot Notation Collections with undot() - PHP\nDESCRIPTION: Demonstrates the undot method which converts single-dimensional collections using dot notation keys into multi-dimensional nested collections. Input is a collection with keys using dot notation, output is a nested collection or array reflecting the expanded structure.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_134\n\nLANGUAGE: php\nCODE:\n```\n$person = collect([\n    'name.first_name' => 'Marie',\n    'name.last_name' => 'Valentine',\n    'address.line_1' => '2992 Eagle Drive',\n    'address.line_2' => '',\n    'address.suburb' => 'Detroit',\n    'address.state' => 'MI',\n    'address.postcode' => '48219'\n]);\n\n$person = $person->undot();\n\n$person->toArray();\n\n/*\n    [\n        \"name\" => [\n            \"first_name\" => \"Marie\",\n            \"last_name\" => \"Valentine\",\n        ],\n        \"address\" => [\n            \"line_1\" => \"2992 Eagle Drive\",\n            \"line_2\" => \"\",\n            \"suburb\" => \"Detroit\",\n            \"state\" => \"MI\",\n            \"postcode\" => \"48219\",\n        ],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing UUID Keys in Laravel Model\nDESCRIPTION: Demonstrates how to use UUID keys instead of auto-incrementing integers in Eloquent models using the HasUuids trait.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Concerns\\HasUuids;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Article extends Model\n{\n    use HasUuids;\n\n    // ...\n}\n\n$article = Article::create(['title' => 'Traveling to Europe']);\n\n$article->id; // \"8f8e8478-9035-4d23-b9a7-62f4d2612ce5\"\n```\n\n----------------------------------------\n\nTITLE: Writing Policy Methods Without Models in PHP\nDESCRIPTION: Demonstrates how to write a policy method that only receives the authenticated user instance, which is common for 'create' actions where no specific model instance is involved.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Determine if the given user can create posts.\n */\npublic function create(User $user): bool\n{\n    return $user->role == 'writer';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Aliased Classes in Tinker\nDESCRIPTION: PHP configuration for specifying classes that should not be aliased in Tinker\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'dont_alias' => [\n    App\\Models\\User::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Creating Policies Directory using Artisan Command\nDESCRIPTION: The Policies directory is created when you execute the make:policy command. It contains authorization policy classes used to determine if a user can perform actions against resources.\nSOURCE: https://github.com/laravel/docs/blob/12.x/structure.md#2025-04-21_snippet_4\n\nLANGUAGE: artisan\nCODE:\n```\nmake:policy\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralization Rules in Laravel Translation Files (PHP)\nDESCRIPTION: This snippet demonstrates how to define pluralization rules in Laravel translation files using the pipe character. It shows simple and complex pluralization examples for different value ranges.\nSOURCE: https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'apples' => 'There is one apple|There are many apples',\n\n'apples' => '{0} There are none|[1,19] There are some|[20,*] There are many',\n```\n\n----------------------------------------\n\nTITLE: JSON Validation with Str::isJson in PHP\nDESCRIPTION: Shows how to use Str::isJson to determine if a given string is valid JSON.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::isJson('[1,2,3]');\n\n// true\n\n$result = Str::isJson('{\"first\": \"John\", \"last\": \"Doe\"}');\n\n// true\n\n$result = Str::isJson('{first: \"John\", last: \"Doe\"}');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Finding Median Value with `median` in PHP\nDESCRIPTION: The `median` method calculates the median value of a given key within a collection.  It can be used on a collection of associative arrays to find the median of a specific key or directly on a numeric collection. This method calculates the middle value of the data set. Requires a collection of numerical or numeric-like values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$median = collect([\n    ['foo' => 10],\n    ['foo' => 10],\n    ['foo' => 20],\n    ['foo' => 40]\n])->median('foo');\n\n// 15\n\n$median = collect([1, 1, 2, 4])->median();\n\n// 1.5\n```\n\n----------------------------------------\n\nTITLE: Installing FTP Driver Dependencies for Laravel\nDESCRIPTION: Composer command to install the required Flysystem FTP package for using the FTP storage driver in Laravel.\nSOURCE: https://github.com/laravel/docs/blob/12.x/filesystem.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require league/flysystem-ftp \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Using Rich Feature Values in Blade Templates\nDESCRIPTION: Demonstrates how to use Pennant's Blade directive to conditionally render content based on rich feature values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n@feature('purchase-button', 'blue-sapphire')\n    <!-- 'blue-sapphire' is active -->\n@elsefeature('purchase-button', 'seafoam-green')\n    <!-- 'seafoam-green' is active -->\n@elsefeature('purchase-button', 'tart-orange')\n    <!-- 'tart-orange' is active -->\n@endfeature\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Queue Connection for Scout\nDESCRIPTION: Configuration for specifying a custom queue connection and queue name for Scout jobs. This allows for more granular control over how Scout jobs are processed.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'queue' => [\n    'connection' => 'redis',\n    'queue' => 'scout'\n],\n```\n\n----------------------------------------\n\nTITLE: Using Default Scope for Feature Checks in PHP\nDESCRIPTION: Shows how to use the default scope when checking feature flags, which is equivalent to explicitly specifying the scope.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nFeature::active('billing-v2');\n\n// Is now equivalent to...\n\nFeature::for($user->team)->active('billing-v2');\n```\n\n----------------------------------------\n\nTITLE: Calling Component Methods in Blade Templates\nDESCRIPTION: Demonstrates how to execute component methods from within Blade templates by referencing them as variables, enabling dynamic template behavior.\nSOURCE: https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-23_snippet_39\n\nLANGUAGE: blade\nCODE:\n```\n<option {{ $isSelected($value) ? 'selected' : '' }} value=\"{{ $value }}\">\n    {{ $label }}\n</option>\n```\n\n----------------------------------------\n\nTITLE: Defining a Book Model with Author Relationship in Laravel\nDESCRIPTION: This snippet shows how to define a Book model with a belongsTo relationship to an Author model. It illustrates the basic structure of an Eloquent model and relationship definition using Laravel's ORM.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass Book extends Model\n{\n    /**\n     * Get the author that wrote the book.\n     */\n    public function author(): BelongsTo\n    {\n        return $this->belongsTo(Author::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Cookie Expiration in Laravel Tests\nDESCRIPTION: This snippet shows how to assert that a response contains a specific cookie and that it is expired, using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$response->assertCookieExpired($cookieName);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Ingest for Pulse\nDESCRIPTION: Environment variable setup for using Redis as an ingest driver for Pulse entries, which can improve performance by offloading database writes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nPULSE_INGEST_DRIVER=redis\n```\n\n----------------------------------------\n\nTITLE: Removing Products Without Proration in Laravel Cashier\nDESCRIPTION: Method for removing a product from a subscription without prorating the charges, which prevents immediate billing adjustments.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n$user->subscription('default')->noProrate()->removePrice('price_chat');\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional SES Options in Laravel\nDESCRIPTION: PHP configuration array to set additional SES options in Laravel's services.php config file, including ConfigurationSetName and EmailTags.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n'ses' => [\n    'key' => env('AWS_ACCESS_KEY_ID'),\n    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n    'options' => [\n        'ConfigurationSetName' => 'MyConfigurationSet',\n        'EmailTags' => [\n            ['Name' => 'foo', 'Value' => 'bar'],\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Performing Case-Sensitive whereLike Search in Laravel\nDESCRIPTION: You can enable case-sensitive search with the whereLike method by setting the caseSensitive argument to true.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queries.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = DB::table('users')\n    ->whereLike('name', '%John%', caseSensitive: true)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Mapping Laravel Collection Items with Keys (PHP)\nDESCRIPTION: Iterates over the collection, applying a callback that should return an associative array with a single key/value pair. These key/value pairs are then used to form a new collection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    [\n        'name' => 'John',\n        'department' => 'Sales',\n        'email' => 'john@example.com',\n    ],\n    [\n        'name' => 'Jane',\n        'department' => 'Marketing',\n        'email' => 'jane@example.com',\n    ]\n]);\n\n$keyed = $collection->mapWithKeys(function (array $item, int $key) {\n    return [$item['email'] => $item['name']];\n});\n\n$keyed->all();\n\n/*\n    [\n        'john@example.com' => 'John',\n        'jane@example.com' => 'Jane',\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Specifying Scope for Feature Checks in Laravel Pennant\nDESCRIPTION: Demonstrates how to use the 'for' method of the Feature facade to specify the scope for feature checks, including examples with users and teams.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nreturn Feature::for($user)->active('new-api')\n    ? $this->resolveNewApiResponse($request)\n    : $this->resolveLegacyApiResponse($request);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Team;\nuse Carbon\\Carbon;\nuse Illuminate\\Support\\Lottery;\nuse Laravel\\Pennant\\Feature;\n\nFeature::define('billing-v2', function (Team $team) {\n    if ($team->created_at->isAfter(new Carbon('1st Jan, 2023'))) {\n        return true;\n    }\n\n    if ($team->created_at->isAfter(new Carbon('1st Jan, 2019'))) {\n        return Lottery::odds(1 / 100);\n    }\n\n    return Lottery::odds(1 / 1000);\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nif (Feature::for($user->team)->active('billing-v2')) {\n    return redirect('/billing/v2');\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using the authorize Method for Automatic Exception Throwing\nDESCRIPTION: Demonstrates the authorize method which automatically throws an AuthorizationException if the user is not allowed to perform the action.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nGate::authorize('update-post', $post);\n\n// The action is authorized...\n```\n\n----------------------------------------\n\nTITLE: Creating Paddle Checkout Session for Products in Laravel\nDESCRIPTION: Example of creating a Paddle checkout session for a single product using Laravel Cashier. It shows how to generate a checkout object and return it to the view.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/buy', function (Request $request) {\n    $checkout = $request->user()->checkout('pri_deluxe_album')\n        ->returnTo(route('dashboard'));\n\n    return view('buy', ['checkout' => $checkout]);\n})->name('checkout');\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Polymorphic Types in PHP\nDESCRIPTION: This snippet shows how to configure custom polymorphic types using the enforceMorphMap method, allowing for decoupling of model names from database values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-relationships.md#2025-04-21_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Relations\\Relation;\n\nRelation::enforceMorphMap([\n    'post' => 'App\\Models\\Post',\n    'video' => 'App\\Models\\Video',\n]);\n```\n\n----------------------------------------\n\nTITLE: Route Model Binding Template Example\nDESCRIPTION: Blade template showing how to access bound model data in a Folio page\nSOURCE: https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    User {{ $user->id }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Executing Unprepared SQL Statement in Laravel PHP\nDESCRIPTION: Demonstrates how to execute an unprepared SQL statement without binding values using the DB facade's unprepared method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/database.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nDB::unprepared('update users set votes = 100 where name = \"Dries\"');\n```\n\n----------------------------------------\n\nTITLE: Adding Client Reference to Vonage SMS in Laravel\nDESCRIPTION: Demonstrates how to add a client reference to SMS notifications for tracking costs by calling the clientReference method on the VonageMessage instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Notifications\\Messages\\VonageMessage;\n\n/**\n * Get the Vonage / SMS representation of the notification.\n */\npublic function toVonage(object $notifiable): VonageMessage\n{\n    return (new VonageMessage)\n        ->clientReference((string) $notifiable->id)\n        ->content('Your SMS message content');\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Homestead Configuration Files\nDESCRIPTION: Commands to generate Vagrantfile and Homestead.yaml for a project on different operating systems.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# macOS / Linux...\nphp vendor/bin/homestead make\n\n# Windows...\nvendor\\bin\\homestead make\n```\n\n----------------------------------------\n\nTITLE: String Padding with Str::padBoth in PHP\nDESCRIPTION: Shows how to use Str::padBoth to pad both sides of a string with another string until the final string reaches a desired length.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$padded = Str::padBoth('James', 10, '_');\n\n// '__James___'\n\n$padded = Str::padBoth('James', 10);\n\n// '  James   '\n```\n\n----------------------------------------\n\nTITLE: Publishing Pennant Configuration and Migration Files\nDESCRIPTION: Artisan command to publish Pennant's configuration and migration files.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --provider=\"Laravel\\Pennant\\PennantServiceProvider\"\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Scout via Composer\nDESCRIPTION: Command to install the Laravel Scout package using Composer. This is the first step in setting up Scout for your Laravel application.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/scout\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Dusk via Composer\nDESCRIPTION: Command to install Laravel Dusk package as a development dependency using Composer.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/dusk --dev\n```\n\n----------------------------------------\n\nTITLE: Displaying User Cards in Blade Template\nDESCRIPTION: Demonstrates how to use the Pulse user-card component to display user information with associated statistics.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_38\n\nLANGUAGE: blade\nCODE:\n```\n<x-pulse::user-card :user=\"{{ $seller->user }}\" :stats=\"{{ $seller->sum }}\" />\n```\n\n----------------------------------------\n\nTITLE: Asserting Cookie Not Expired in Laravel Tests\nDESCRIPTION: This snippet illustrates how to assert that a response contains a specific cookie and that it is not expired, using Laravel's TestResponse class.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$response->assertCookieNotExpired($cookieName);\n```\n\n----------------------------------------\n\nTITLE: Exception Reporting Configuration in Laravel Jobs\nDESCRIPTION: Example showing how to configure exception reporting for throttled exceptions with conditional reporting logic.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Client\\HttpClientException;\nuse Illuminate\\Queue\\Middleware\\ThrottlesExceptions;\n\npublic function middleware(): array\n{\n    return [(new ThrottlesExceptions(10, 10 * 60))->report(\n        fn (Throwable $throwable) => $throwable instanceof HttpClientException\n    )];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Guard in Laravel auth.php\nDESCRIPTION: This snippet shows how to configure a custom guard in the Laravel auth.php configuration file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n'guards' => [\n    'api' => [\n        'driver' => 'jwt',\n        'provider' => 'users',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring docker-compose.yml for RoadRunner with Laravel Sail\nDESCRIPTION: YAML configuration to add environment variables for running Octane with RoadRunner in Laravel Sail.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  laravel.test:\n    environment:\n      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port='${APP_PORT:-80}'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Unicode SMS Messages with Vonage in Laravel\nDESCRIPTION: Demonstrates how to send SMS messages containing unicode characters by calling the unicode method on the VonageMessage instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/notifications.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Notifications\\Messages\\VonageMessage;\n\n/**\n * Get the Vonage / SMS representation of the notification.\n */\npublic function toVonage(object $notifiable): VonageMessage\n{\n    return (new VonageMessage)\n        ->content('Your unicode message')\n        ->unicode();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Integer Primary Key in Laravel Eloquent\nDESCRIPTION: Example showing how to configure a model for a non-integer primary key by setting the $keyType property to 'string'.\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Flight extends Model\n{\n    /**\n     * The data type of the primary key ID.\n     *\n     * @var string\n     */\n    protected $keyType = 'string';\n}\n```\n\n----------------------------------------\n\nTITLE: Assert Response Validation State\nDESCRIPTION: Methods to check for presence or absence of validation errors in JSON response or session.\nSOURCE: https://github.com/laravel/docs/blob/12.x/http-tests.md#2025-04-21_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$response->assertValid();\n\n$response->assertValid(['name', 'email']);\n\n$response->assertInvalid(['name', 'email']);\n\n$response->assertInvalid([\n    'name' => 'The name field is required.',\n    'email' => 'valid email address',\n]);\n\n$response->assertOnlyInvalid(['name', 'email']);\n```\n\n----------------------------------------\n\nTITLE: Basic Interface to Implementation Binding in Laravel\nDESCRIPTION: Shows how to bind an interface to a concrete implementation in Laravel's service container and inject it into a class constructor.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Contracts\\EventPusher;\nuse App\\Services\\RedisEventPusher;\n\n$this->app->bind(EventPusher::class, RedisEventPusher::class);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Contracts\\EventPusher;\n\n/**\n * Create a new class instance.\n */\npublic function __construct(\n    protected EventPusher $pusher,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Creating SET Column Type\nDESCRIPTION: Creates a SET column with predefined valid values.\nSOURCE: https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-23_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$table->set('flavors', ['strawberry', 'vanilla']);\n```\n\n----------------------------------------\n\nTITLE: Adding MailerSend Configuration to Laravel Mailers\nDESCRIPTION: PHP configuration array to add MailerSend-specific settings to the mailers array in Laravel's mail.php config file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/mail.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n'mailersend' => [\n    'transport' => 'mailersend',\n],\n```\n\n----------------------------------------\n\nTITLE: Adding Global Log Context in Laravel\nDESCRIPTION: Example of adding global contextual data to all exception log messages using the context method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->context(fn () => [\n        'foo' => 'bar',\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Intersecting Laravel Collection by Association Using Callback (PHP)\nDESCRIPTION: Compares the collection against another collection or array, returning key/value pairs present in both, using a custom callback for both key and value comparison. Useful for case-insensitive or custom equality checks.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'color' => 'red',\n    'Size' => 'M',\n    'material' => 'cotton',\n]);\n\n$intersect = $collection->intersectAssocUsing([\n    'color' => 'blue',\n    'size' => 'M',\n    'material' => 'polyester',\n], function ($a, $b) {\n    return strcasecmp($a, $b);\n});\n\n$intersect->all();\n\n// ['Size' => 'M']\n```\n\n----------------------------------------\n\nTITLE: Implicit Model to JSON Conversion\nDESCRIPTION: Shows how models are automatically converted to JSON when cast to string or returned from routes\nSOURCE: https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn (string) User::find(1);\n\nRoute::get('/users', function () {\n    return User::all();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Precognitive Requests with Pest in Laravel\nDESCRIPTION: This snippet shows how to test precognitive requests using Pest testing framework in Laravel. It demonstrates the use of `withPrecognition` helper and `assertSuccessfulPrecognition` method to validate the request.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nit('validates registration form with precognition', function () {\n    $response = $this->withPrecognition()\n        ->post('/register', [\n            'name' => 'Taylor Otwell',\n        ]);\n\n    $response->assertSuccessfulPrecognition();\n\n    expect(User::count())->toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrying All Failed Jobs in Laravel\nDESCRIPTION: Command to retry all failed jobs in the failed_jobs table at once, by passing 'all' as the ID parameter.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_93\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:retry all\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata to Subscriptions in PHP\nDESCRIPTION: Method to attach custom data to a subscription checkout session, allowing for additional information to be stored with the subscription.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$checkout = $request->user()->subscribe($premium = 'pri_123', 'default')\n    ->customData(['key' => 'value'])\n    ->returnTo(route('home'));\n```\n\n----------------------------------------\n\nTITLE: Finding Promotion Codes in Laravel Cashier\nDESCRIPTION: Shows how to find a Stripe promotion code ID based on a customer-facing promotion code using the findPromotionCode and findActivePromotionCode methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n// Find a promotion code ID by its customer facing code...\n$promotionCode = $user->findPromotionCode('SUMMERSALE');\n\n// Find an active promotion code ID by its customer facing code...\n$promotionCode = $user->findActivePromotionCode('SUMMERSALE');\n```\n\n----------------------------------------\n\nTITLE: Number: Ordinal Numbers in Words in PHP\nDESCRIPTION: This snippet converts numbers to their ordinal word forms, such as '1st', '2nd', '21st', useful for textual representations.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_63\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::ordinal(1);\n// 1st\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::ordinal(2);\n// 2nd\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::ordinal(21);\n// 21st\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Cache Driver in Laravel\nDESCRIPTION: Configuration for DynamoDB cache driver in Laravel's config/cache.php file, showing AWS credentials and DynamoDB-specific settings.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'dynamodb' => [\n    'driver' => 'dynamodb',\n    'key' => env('AWS_ACCESS_KEY_ID'),\n    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n    'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),\n    'endpoint' => env('DYNAMODB_ENDPOINT'),\n],\n```\n\n----------------------------------------\n\nTITLE: Intersecting Laravel Collection by Keys (PHP)\nDESCRIPTION: Removes key/value pairs from the collection where the key is not present in a given array or collection. Only keys are compared for intersection.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'serial' => 'UX301', 'type' => 'screen', 'year' => 2009,\n]);\n\n$intersect = $collection->intersectByKeys([\n    'reference' => 'UX404', 'type' => 'tab', 'year' => 2011,\n]);\n\n$intersect->all();\n\n// ['type' => 'screen', 'year' => 2009]\n```\n\n----------------------------------------\n\nTITLE: Retrying Multiple Failed Jobs in Laravel\nDESCRIPTION: Command to retry multiple failed jobs by passing multiple job IDs to the queue:retry command.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_91\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan queue:retry ce7bb17c-cdd8-41f0-a8ec-7b4fef4e5ece 91401d2c-0784-4f43-824c-34f94a33c24d\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Event Callbacks in Laravel Service Provider\nDESCRIPTION: This snippet demonstrates how to use the 'before' and 'after' methods on the Queue facade to specify callbacks for queued job processing. It shows the implementation within the boot method of a Laravel service provider, allowing for additional logging or statistics tracking before and after job processing.\nSOURCE: https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-21_snippet_116\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Queue;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Queue\\Events\\JobProcessed;\nuse Illuminate\\Queue\\Events\\JobProcessing;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        // ...\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Queue::before(function (JobProcessing $event) {\n            // $event->connectionName\n            // $event->job\n            // $event->job->payload()\n        });\n\n        Queue::after(function (JobProcessed $event) {\n            // $event->connectionName\n            // $event->job\n            // $event->job->payload()\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Canceled Subscription Status in PHP\nDESCRIPTION: Method to determine if a user has canceled their subscription, regardless of whether they're in a grace period.\nSOURCE: https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription()->canceled()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Reverb Via Artisan\nDESCRIPTION: Command to install Laravel Reverb using the Laravel Artisan CLI.\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan install:broadcasting\n```\n\n----------------------------------------\n\nTITLE: Database Migration Test Setup - Pest\nDESCRIPTION: Example of using DatabaseMigrations trait in a Pest-style Dusk test for database setup.\nSOURCE: https://github.com/laravel/docs/blob/12.x/dusk.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nuse Laravel\\Dusk\\Browser;\n\nuses(DatabaseMigrations::class);\n\n//\n```\n\n----------------------------------------\n\nTITLE: Configuring Reverb Environment Variables\nDESCRIPTION: Environment variables required for setting up Reverb application credentials.\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nREVERB_APP_ID=my-app-id\nREVERB_APP_KEY=my-app-key\nREVERB_APP_SECRET=my-app-secret\n```\n\n----------------------------------------\n\nTITLE: Customizing Invoice Payment Window in Laravel Cashier\nDESCRIPTION: Demonstrates how to set a custom days_until_due option when creating an invoice-based subscription to specify how long customers have to pay.\nSOURCE: https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$user->newSubscription('default', 'price_monthly')->createAndSendInvoice([], [\n    'days_until_due' => 30\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom WordPress Valet Driver Implementation\nDESCRIPTION: Example implementation of a custom Valet driver for WordPress.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Determine if the driver serves the request.\n */\npublic function serves(string $sitePath, string $siteName, string $uri): bool\n{\n    return is_dir($sitePath.'/wp-admin');\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Laravel Octane Server Status\nDESCRIPTION: Command to check the current status of the Laravel Octane server.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan octane:status\n```\n\n----------------------------------------\n\nTITLE: Deleting Expired Password Reset Tokens via Artisan Command\nDESCRIPTION: Shows how to use the auth:clear-resets Artisan command to remove expired password reset tokens from the database.\nSOURCE: https://github.com/laravel/docs/blob/12.x/passwords.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan auth:clear-resets\n```\n\n----------------------------------------\n\nTITLE: Additional Assertions for Verifying Sleep Usage in Laravel Tests with Sleep Class in PHP\nDESCRIPTION: Lists several assertion methods available for verifying Sleep invocations when faked: assertSleptTimes to check number of calls, assertSlept with a callback to verify duration conditions, assertNeverSlept to ensure Sleep was not called, and assertInsomniac to assert no actual delays occurred. Requires Illuminate\\Support\\Sleep and optionally Carbon\\CarbonInterval for duration types. Useful for precise control over expected delays in tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_141\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\CarbonInterval as Duration;\\nuse Illuminate\\Support\\Sleep;\\n\\n// Assert that sleep was called 3 times...\\nSleep::assertSleptTimes(3);\\n\\n// Assert against the duration of sleep...\\nSleep::assertSlept(function (Duration $duration): bool {\\n    return /* ... */;\\n}, times: 1);\\n\\n// Assert that the Sleep class was never invoked...\\nSleep::assertNeverSlept();\\n\\n// Assert that, even if Sleep was called, no execution paused occurred...\\nSleep::assertInsomniac();\n```\n\n----------------------------------------\n\nTITLE: Using Different PHP Versions via CLI in Laravel Homestead\nDESCRIPTION: These shell commands demonstrate how to use different PHP versions via the command line interface within the Homestead virtual machine. It shows examples for PHP versions 5.6 through 8.3.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nphp5.6 artisan list\nphp7.0 artisan list\nphp7.1 artisan list\nphp7.2 artisan list\nphp7.3 artisan list\nphp7.4 artisan list\nphp8.0 artisan list\nphp8.1 artisan list\nphp8.2 artisan list\nphp8.3 artisan list\n```\n\n----------------------------------------\n\nTITLE: Installing PHP via Homebrew\nDESCRIPTION: Command to install PHP using Homebrew package manager.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install php\n```\n\n----------------------------------------\n\nTITLE: Enabling Blackfire Profiling in Laravel Homestead Configuration\nDESCRIPTION: This YAML configuration snippet shows how to enable Blackfire profiling in a Homestead configuration file by specifying server and client credentials.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nfeatures:\n    - blackfire:\n        server_id: \"server_id\"\n        server_token: \"server_value\"\n        client_id: \"client_id\"\n        client_token: \"client_value\"\n```\n\n----------------------------------------\n\nTITLE: Adding Reverb Pulse Dashboard Components\nDESCRIPTION: Blade template code for adding Reverb monitoring components to the Pulse dashboard.\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-pulse>\n    <livewire:reverb.connections cols=\"full\" />\n    <livewire:reverb.messages cols=\"full\" />\n    ...\n</x-pulse>\n```\n\n----------------------------------------\n\nTITLE: Custom Search Prompt Implementation in Laravel Command\nDESCRIPTION: Demonstrates implementing a custom search prompt with dynamic user lookup functionality in Laravel console commands.\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse function Laravel\\Prompts\\search;\n\n// ...\n\nreturn [\n    'user' => fn () => search(\n        label: 'Search for a user:',\n        placeholder: 'E.g. Taylor Otwell',\n        options: fn ($value) => strlen($value) > 0\n            ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n            : []\n    ),\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring NFS for Shared Folders in Homestead YAML\nDESCRIPTION: YAML configuration example for enabling NFS on a shared folder in Homestead.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfolders:\n    - map: ~/code/project1\n      to: /home/vagrant/project1\n      type: \"nfs\"\n```\n\n----------------------------------------\n\nTITLE: Container Rebinding Implementation\nDESCRIPTION: Demonstrates how to use the rebinding method to listen for service rebinding events in the container.\nSOURCE: https://github.com/laravel/docs/blob/12.x/container.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Contracts\\PodcastPublisher;\nuse App\\Services\\SpotifyPublisher;\nuse App\\Services\\TransistorPublisher;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->bind(PodcastPublisher::class, SpotifyPublisher::class);\n\n$this->app->rebinding(\n    PodcastPublisher::class,\n    function (Application $app, PodcastPublisher $newInstance) {\n        //\n    },\n);\n\n// New binding will trigger rebinding closure...\n$this->app->bind(PodcastPublisher::class, TransistorPublisher::class);\n```\n\n----------------------------------------\n\nTITLE: Finding Mode Value with `mode` in PHP\nDESCRIPTION: The `mode` method returns the mode (most frequent value) of a given key in a collection. It works both on collections with and without specified keys. When multiple values have the same frequency, all modes are returned. The provided examples demonstrate both uses.\nSOURCE: https://github.com/laravel/docs/blob/12.x/collections.md#_snippet_80\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$mode = collect([\n    ['foo' => 10],\n    ['foo' => 10],\n    ['foo' => 20],\n    ['foo' => 40]\n])->mode('foo');\n\n// [10]\n\n$mode = collect([1, 1, 2, 4])->mode();\n\n// [1]\n\n$mode = collect([1, 1, 2, 2])->mode();\n\n// [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Features in Homestead YAML\nDESCRIPTION: Example YAML configuration for enabling and configuring optional features in Homestead.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nfeatures:\n    - blackfire:\n        server_id: \"server_id\"\n        server_token: \"server_value\"\n        client_id: \"client_id\"\n        client_token: \"client_value\"\n    - cassandra: true\n    - chronograf: true\n    - couchdb: true\n    - crystal: true\n    - dragonflydb: true\n    - elasticsearch:\n        version: 7.9.0\n    - eventstore: true\n        version: 21.2.0\n    - flyway: true\n    - gearman: true\n    - golang: true\n    - grafana: true\n    - influxdb: true\n    - logstash: true\n    - mariadb: true\n    - meilisearch: true\n    - minio: true\n    - mongodb: true\n    - neo4j: true\n    - ohmyzsh: true\n    - openresty: true\n    - pm2: true\n    - python: true\n    - r-base: true\n    - rabbitmq: true\n    - rustc: true\n    - rvm: true\n    - solr: true\n    - timescaledb: true\n    - trader: true\n    - webdriver: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Scout Environment Settings\nDESCRIPTION: Example of Scout environment configuration settings in .env file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-21_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nSCOUT_IDENTIFY=true\n```\n\n----------------------------------------\n\nTITLE: Using Swoole Tables in Laravel Octane\nDESCRIPTION: Example of storing and retrieving data from Swoole tables in Laravel Octane. Tables provide extremely fast access to shared data between all workers on the server.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Octane\\Facades\\Octane;\n\nOctane::table('example')->set('uuid', [\n    'name' => 'Nuno Maduro',\n    'votes' => 1000,\n]);\n\nreturn Octane::table('example')->get('uuid');\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration for Custom Pulse Cards\nDESCRIPTION: Dedicated Tailwind configuration for custom Pulse cards that avoids conflicts with Pulse's existing Tailwind classes.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pulse.md#2025-04-21_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n    darkMode: 'class',\n    important: '#top-sellers',\n    content: [\n        './resources/views/livewire/pulse/top-sellers.blade.php',\n    ],\n    corePlugins: {\n        preflight: false,\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Title Case with Str::title in Laravel\nDESCRIPTION: The Str::title method converts a given string to Title Case where the first letter of each word is capitalized.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$converted = Str::title('a nice title uses the correct case');\n\n// A Nice Title Uses The Correct Case\n```\n\n----------------------------------------\n\nTITLE: Changing Vue App Layout from Sidebar to Header\nDESCRIPTION: Code modification to switch from the default sidebar layout to a header layout in a Vue starter kit by changing the imported layout component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport AppLayout from '@/layouts/app/AppSidebarLayout.vue'; // [tl! remove]\nimport AppLayout from '@/layouts/app/AppHeaderLayout.vue'; // [tl! add]\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkOS Environment Variables (INI)\nDESCRIPTION: Illustrates how to set up the necessary environment variables for WorkOS integration in the .env file. This includes setting the client ID, API key, and redirect URL.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nWORKOS_CLIENT_ID=your-client-id\nWORKOS_API_KEY=your-api-key\nWORKOS_REDIRECT_URL=\"${APP_URL}/authenticate\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pusher Environment Variables\nDESCRIPTION: Environment variable configuration for Pusher Channels integration.\nSOURCE: https://github.com/laravel/docs/blob/12.x/broadcasting.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nPUSHER_APP_ID=\"your-pusher-app-id\"\nPUSHER_APP_KEY=\"your-pusher-key\"\nPUSHER_APP_SECRET=\"your-pusher-secret\"\nPUSHER_HOST=\nPUSHER_PORT=443\nPUSHER_SCHEME=\"https\"\nPUSHER_APP_CLUSTER=\"mt1\"\nBROADCAST_CONNECTION=pusher\n```\n\n----------------------------------------\n\nTITLE: Number: Spelling Numbers in Words in PHP\nDESCRIPTION: This snippet converts numbers into their word form, optionally in different locales, and supports specifying threshold values for spelling distinct ranges.\nSOURCE: https://github.com/laravel/docs/blob/12.x/helpers.md#_snippet_66\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::spell(102);\n// one hundred and two\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::spell(88, locale: 'fr');\n// quatre-vingt-huit\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::spell(10, after: 10);\n// 10\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::spell(11, after: 10);\n// eleven\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::spell(5, until: 10);\n// five\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$number = Number::spell(10, until: 10);\n// 10\n```\n\n----------------------------------------\n\nTITLE: Adding API Token Support to User Model\nDESCRIPTION: Implementation showing how to add API token support to the User model using the HasApiTokens trait.\nSOURCE: https://github.com/laravel/docs/blob/12.x/sanctum.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Laravel\\Sanctum\\HasApiTokens;\n\nclass User extends Authenticatable\n{\n    use HasApiTokens, HasFactory, Notifiable;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins in PHP\nDESCRIPTION: PHP configuration for defining allowed origins in the Reverb config file.\nSOURCE: https://github.com/laravel/docs/blob/12.x/reverb.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'apps' => [\n    [\n        'app_id' => 'my-app-id',\n        'allowed_origins' => ['laravel.com'],\n        // ...\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Homestead Configuration in Shell\nDESCRIPTION: Shell commands to initialize the Homestead configuration file, with separate commands for macOS/Linux and Windows.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# macOS / Linux...\nbash init.sh\n\n# Windows...\ninit.bat\n```\n\n----------------------------------------\n\nTITLE: Parking Directory for Valet\nDESCRIPTION: Commands to register a directory with Valet for automatic site serving.\nSOURCE: https://github.com/laravel/docs/blob/12.x/valet.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/Sites\n\nvalet park\n```\n\n----------------------------------------\n\nTITLE: Logging Unknown Feature Resolutions in Laravel\nDESCRIPTION: This code snippet demonstrates how to listen for the UnknownFeatureResolved event in a Laravel application's AppServiceProvider. It logs an error message when an unknown feature is resolved.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Support\\Facades\\Log;\nuse Laravel\\Pennant\\Events\\UnknownFeatureResolved;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Event::listen(function (UnknownFeatureResolved $event) {\n            Log::error(\"Resolving unknown feature [{$event->feature}].\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Installer on Linux via php.new\nDESCRIPTION: This command installs the latest version of PHP 8.4 and the Laravel installer on Linux using the php.new installation script.\nSOURCE: https://github.com/laravel/docs/blob/12.x/upgrade.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://php.new/install/linux/8.4)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Sites to Homestead YAML\nDESCRIPTION: Example YAML configuration for adding multiple Nginx sites to Homestead.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsites:\n    - map: homestead.test\n      to: /home/vagrant/project1/public\n    - map: another.test\n      to: /home/vagrant/project2/public\n```\n\n----------------------------------------\n\nTITLE: Conditionally Modifying a String Based on Exact Match in Laravel\nDESCRIPTION: The whenExactly method invokes the given closure if the string exactly matches the given string. The closure will receive the fluent string instance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_163\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Stringable;\n\n$string = Str::of('laravel')->whenExactly('laravel', function (Stringable $string) {\n    return $string->title();\n});\n\n// 'Laravel'\n```\n\n----------------------------------------\n\nTITLE: Mocking ULIDs for Testing in Laravel\nDESCRIPTION: The createUlidsUsing method allows mocking ULID generation for testing purposes, ensuring predictable identifiers during tests.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Uid\\Ulid;\n\nStr::createUlidsUsing(function () {\n    return new Ulid('01HRDBNHHCKNW2AK4Z29SN82T9');\n});\n```\n\n----------------------------------------\n\nTITLE: Laravel Configuration Cache Management Commands\nDESCRIPTION: Artisan commands for managing configuration cache to improve application performance.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan config:clear\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Precognition for Alpine via NPM\nDESCRIPTION: Command to install the Laravel Precognition Alpine.js package via NPM.\nSOURCE: https://github.com/laravel/docs/blob/12.x/precognition.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpm install laravel-precognition-alpine\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Laravel Site in Homestead YAML\nDESCRIPTION: Example YAML configuration for adding a non-Laravel (Statamic) site to Homestead.\nSOURCE: https://github.com/laravel/docs/blob/12.x/homestead.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nsites:\n    - map: statamic.test\n      to: /home/vagrant/my-symfony-project/web\n      type: \"statamic\"\n```\n\n----------------------------------------\n\nTITLE: Appending Values to Strings in Laravel PHP\nDESCRIPTION: The append method appends given values to a string using Laravel's fluent string interface.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_80\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$string = Str::of('Taylor')->append(' Otwell');\n\n// 'Taylor Otwell'\n```\n\n----------------------------------------\n\nTITLE: Checking String Exact Match in Laravel PHP\nDESCRIPTION: The exactly method determines if a given string is an exact match with another string, performing strict comparison.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_106\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$result = Str::of('Laravel')->exactly('Laravel');\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Laravel Version Constraint Example\nDESCRIPTION: Demonstrates the recommended version constraint format when referencing Laravel framework or its components in applications or packages.\nSOURCE: https://github.com/laravel/docs/blob/12.x/releases.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n^12.0\n```\n\n----------------------------------------\n\nTITLE: Handling Unexpected Null Scope in Laravel Pennant\nDESCRIPTION: This code snippet shows how to register a listener for the UnexpectedNullScopeEncountered event in Laravel Pennant. It demonstrates how to override the default graceful behavior by aborting the request with a 500 error.\nSOURCE: https://github.com/laravel/docs/blob/12.x/pennant.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Log;\nuse Laravel\\Pennant\\Events\\UnexpectedNullScopeEncountered;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Event::listen(UnexpectedNullScopeEncountered::class, fn () => abort(500));\n}\n```\n\n----------------------------------------\n\nTITLE: Malicious CSRF Attack Example in Blade\nDESCRIPTION: Example showing how a malicious website could attempt a CSRF attack through an auto-submitting form targeting a user email change endpoint.\nSOURCE: https://github.com/laravel/docs/blob/12.x/csrf.md#2025-04-21_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<form action=\"https://your-application.com/user/email\" method=\"POST\">\n    <input type=\"email\" value=\"malicious-email@example.com\">\n</form>\n\n<script>\n    document.forms[0].submit();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Counting Words in a String with wordCount in Laravel PHP\nDESCRIPTION: The wordCount method returns the number of words in a given string. It's a simple utility for text analysis.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_170\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\nStr::of('Hello, world!')->wordCount(); // 2\n```\n\n----------------------------------------\n\nTITLE: Implementing Proper PHPDoc Format in Laravel\nDESCRIPTION: Example of a valid Laravel documentation block for a method binding with container. Shows proper spacing and formatting for @param attributes, followed by the implementation method.\nSOURCE: https://github.com/laravel/docs/blob/12.x/contributions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Register a binding with the container.\n *\n * @param  string|array  $abstract\n * @param  \\Closure|string|null  $concrete\n * @param  bool  $shared\n * @return void\n *\n * @throws \\Exception\n */\npublic function bind($abstract, $concrete = null, $shared = false)\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Task Execution\nDESCRIPTION: Configuration for running tasks on local machine by specifying localhost IP address\nSOURCE: https://github.com/laravel/docs/blob/12.x/envoy.md#2025-04-21_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n@servers(['localhost' => '127.0.0.1'])\n```\n\n----------------------------------------\n\nTITLE: Adding New Line to Strings in PHP\nDESCRIPTION: Demonstrates how to use the 'newLine' method to append an end-of-line character to a string.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_133\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$padded = Str::of('Laravel')->newLine()->append('Framework');\n\n// 'Laravel\n//  Framework'\n```\n\n----------------------------------------\n\nTITLE: Using str() Helper without Arguments in Laravel\nDESCRIPTION: When called with no arguments, the str function returns an instance of the Str class, allowing access to static string manipulation methods.\nSOURCE: https://github.com/laravel/docs/blob/12.x/strings.md#2025-04-21_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n$snake = str()->snake('FooBar');\n\n// 'foo_bar'\n```\n\n----------------------------------------\n\nTITLE: Forcefully Decrypting Laravel Environment File\nDESCRIPTION: Use the --force option to overwrite an existing environment file when decrypting.\nSOURCE: https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan env:decrypt --force\n```\n\n----------------------------------------\n\nTITLE: Transformed URL Output Example\nDESCRIPTION: Comparison showing the before and after URLs when the transformation is applied during development.\nSOURCE: https://github.com/laravel/docs/blob/12.x/vite.md#2025-04-23_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n- <img src=\"/@imagetools/f0b2f404b13f052c604e632f2fb60381bf61a520\"><!-- [tl! remove] -->\n+ <img src=\"http://[::1]:5173/@imagetools/f0b2f404b13f052c604e632f2fb60381bf61a520\"><!-- [tl! add] -->\n```\n\n----------------------------------------\n\nTITLE: Publishing shadcn-vue Components\nDESCRIPTION: Command to publish additional shadcn-vue UI components for use in a Vue starter kit application, using the example of a Switch component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx shadcn-vue@latest add switch\n```\n\n----------------------------------------\n\nTITLE: Changing React App Layout from Sidebar to Header\nDESCRIPTION: Code modification to switch from the default sidebar layout to a header layout in a React starter kit by changing the imported layout component.\nSOURCE: https://github.com/laravel/docs/blob/12.x/starter-kits.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport AppLayoutTemplate from '@/layouts/app/app-sidebar-layout'; // [tl! remove]\nimport AppLayoutTemplate from '@/layouts/app/app-header-layout'; // [tl! add]\n```\n\n----------------------------------------\n\nTITLE: Configuring docker-compose.yml for Swoole with Laravel Sail\nDESCRIPTION: YAML configuration to add environment variables for running Octane with Swoole in Laravel Sail.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  laravel.test:\n    environment:\n      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port='${APP_PORT:-80}'\"\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for FrankenPHP with Laravel Octane\nDESCRIPTION: Dockerfile configuration to set up a container for running Laravel Octane with FrankenPHP.\nSOURCE: https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM dunglas/frankenphp\n\nRUN install-php-extensions \\\n    pcntl\n    # Add other PHP extensions here...\n\nCOPY . /app\n\nENTRYPOINT [\"php\", \"artisan\", \"octane:frankenphp\"]\n```\n\n----------------------------------------\n\nTITLE: Listing Artisan Commands\nDESCRIPTION: Basic command to display all available Artisan commands in Laravel\nSOURCE: https://github.com/laravel/docs/blob/12.x/artisan.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan list\n```"
  }
]