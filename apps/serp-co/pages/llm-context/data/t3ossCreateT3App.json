[
  {
    "owner": "t3-oss",
    "repo": "create-t3-app",
    "content": "TITLE: Configuring Environment Variables with createEnv in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up environment variable validation using @t3-oss/env-nextjs and zod in a Create T3 App project. It defines server-side and client-side environment variables with their respective schemas.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/fr/usage/env-variables.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    NODE_ENV: z.enum([\"development\", \"test\", \"production\"]),\n  },\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a tRPC Procedure in TypeScript\nDESCRIPTION: This snippet shows how to create a tRPC procedure for fetching a user by ID. It demonstrates input validation using Zod and querying a database using Prisma.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/trpc.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRouter = createTRPCRouter({\n  getById: publicProcedure.input(z.string()).query(({ ctx, input }) => {\n    return ctx.prisma.user.findFirst({\n      where: {\n        id: input,\n      },\n    });\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth Session Callback to Include User ID\nDESCRIPTION: Shows how create-t3-app configures the session callback in NextAuth.js to include the user's ID in the session object, making it available throughout the application.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-app-router.mdx#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ncallbacks: {\n    session: ({ session, user }) => ({\n      ...session,\n      user: {\n        ...session.user,\n        id: user.id,\n      },\n    }),\n  },\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment Variables with T3 Env\nDESCRIPTION: Basic configuration of environment variables using createEnv function from @t3-oss/env-nextjs with Zod validation schema for both server and client-side variables.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/env-variables.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    NODE_ENV: z.enum([\"development\", \"test\", \"production\"]),\n  },\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using tRPC Query in a React Component\nDESCRIPTION: This snippet shows how to use a tRPC query in a React component. It demonstrates fetching user data based on a route parameter and displaying the result.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/trpc.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRouter } from \"next/router\";\nimport { api } from \"../../utils/api\";\n\nconst UserPage = () => {\n  const { query } = useRouter();\n  const userQuery = api.users.getById.useQuery(query.id);\n\n  return (\n    <div>\n      <h1>{userQuery.data?.name}</h1>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC Context with Authentication Session\nDESCRIPTION: Sets up the tRPC context to include the authentication session, making it available to all tRPC procedures. This is the first step in creating protected procedures that require authentication.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-app-router.mdx#2025-04-20_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { auth } from \"~/server/auth\";\nimport { db } from \"~/server/db\";\n\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  const session = await auth();\n\n  return {\n    db,\n    session,\n    ...opts,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected tRPC Procedures with Authentication\nDESCRIPTION: Creates a tRPC middleware that verifies user authentication before allowing access to procedures. This middleware is used to create protectedProcedures that can only be accessed by authenticated users.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-app-router.mdx#2025-04-20_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport const protectedProcedure = t.procedure\n  .use(({ ctx, next }) => {\n    if (!ctx.session?.user) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n    return next({\n      ctx: {\n        session: { ...ctx.session, user: ctx.session.user },\n      },\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables Schema in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the environment variables schema using createEnv from @t3-oss/env-nextjs and zod for validation. It defines server-side and client-side variables and their validation rules.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/env-variables.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    NODE_ENV: z.enum([\"development\", \"test\", \"production\"]),\n  },\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing Single tRPC Procedure as Next.js API Endpoint\nDESCRIPTION: This snippet demonstrates how to expose a single tRPC procedure as a regular Next.js API endpoint using server-side calls. It creates a context and caller to access a specific tRPC procedure and handles both tRPC-specific and general errors.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/usage/trpc.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextApiRequest, type NextApiResponse } from \"next\";\nimport { appRouter, createCaller } from \"../../../server/api/root\";\nimport { createTRPCContext } from \"../../../server/api/trpc\";\n\nconst userByIdHandler = async (req: NextApiRequest, res: NextApiResponse) => {\n  // Create context and caller\n  const ctx = await createTRPCContext({ req, res });\n  const caller = createCaller(ctx);\n  try {\n    const { id } = req.query;\n    const user = await caller.user.getById(id);\n    res.status(200).json(user);\n  } catch (cause) {\n    if (cause instanceof TRPCError) {\n      // An error from tRPC occurred\n      const httpCode = getHTTPStatusCodeFromError(cause);\n      return res.status(httpCode).json(cause);\n    }\n    // Another error occurred\n    console.error(cause);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport default userByIdHandler;\n```\n\n----------------------------------------\n\nTITLE: Merging tRPC Routers in TypeScript\nDESCRIPTION: This code demonstrates how to merge multiple tRPC routers into a single app router. It exports the router type for use on the client side.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/trpc.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst appRouter = createTRPCRouter({\n  users: userRouter,\n  posts: postRouter,\n  messages: messageRouter,\n});\n\nexport type AppRouter = typeof appRouter;\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with tRPC and React Query\nDESCRIPTION: This snippet demonstrates how to implement optimistic updates using tRPC and React Query. It updates the UI before the API call completes, providing a better user experience while handling error cases with reversion to previous data.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/usage/trpc.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyComponent = () => {\n  const listPostQuery = trpc.post.list.useQuery();\n\n  const utils = trpc.useContext();\n  const postCreate = trpc.post.create.useMutation({\n    async onMutate(newPost) {\n      // Cancela las solicitudes de salida (para que no  sobrescriban nuestras actualizaciones optimistas)\n      await utils.post.list.cancel();\n\n      // Obtener los datos del queryCache\n      const prevData = utils.post.list.getData();\n\n      // Optimisticamente actualizamos los datos con nuestro nuevo post\n      utils.post.list.setData(undefined, (old) => [...old, newPost]);\n\n      // Retornamos los datos previos para que podamos revertirlo si algo sale mal\n      return { prevData };\n    },\n    onError(err, newPost, ctx) {\n      // Si la mutación falla, utilizar el valor del contexto de onMutate\n      utils.post.list.setData(undefined, ctx.prevData);\n    },\n    onSettled() {\n      // Sincronizamos el servidor una vez la mutación se haya completado\n      utils.post.list.invalidate();\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Type Coercion for Environment Variables in TypeScript\nDESCRIPTION: This code demonstrates how to use Zod's coerce feature to convert environment variable strings to specific types like numbers and booleans during validation.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/env-variables.mdx#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    SOME_NUMBER: z.coerce.number(),\n    SOME_BOOLEAN: z.coerce.boolean(),\n  },\n  // ...\n  runtimeEnv: {\n    SOME_NUMBER: process.env.SOME_NUMBER,\n    SOME_BOOLEAN: process.env.SOME_BOOLEAN,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Protected tRPC Procedures with User Data\nDESCRIPTION: Demonstrates how to use protected tRPC procedures to fetch user-specific data from the database. The example creates a 'me' query that retrieves the current user's information based on their ID.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-app-router.mdx#2025-04-20_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst userRouter = router({\n  me: protectedProcedure.query(async ({ ctx }) => {\n    const user = await prisma.user.findUnique({\n      where: {\n        id: ctx.session.user.id,\n      },\n    });\n    return user;\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using tRPC Queries in a Next.js Component\nDESCRIPTION: This snippet demonstrates how to use tRPC queries in a Next.js component. It shows how to access route parameters and use them to query data with full type safety and autocompletion.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/ja/usage/trpc.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouter } from \"next/router\";\nimport { api } from \"../../utils/api\";\n\nconst UserPage = () => {\n  const { query } = useRouter();\n  const userQuery = api.users.getById.useQuery(query.id);\n\n  return (\n    <div>\n      <h1>{userQuery.data?.name}</h1>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Calling tRPC Procedure from React Component in TypeScript\nDESCRIPTION: This example shows how to call a tRPC procedure from a React component using the generated API hooks. It demonstrates type safety and auto-completion benefits of tRPC.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/trpc.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouter } from \"next/router\";\nimport { api } from \"../../utils/api\";\n\nconst UserPage = () => {\n  const { query } = useRouter();\n  const userQuery = api.users.getById.useQuery(query.id);\n  return (\n    <div>\n      <h1>{userQuery.data?.name}</h1>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables with createEnv in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up environment variable validation using @t3-oss/env-nextjs and Zod in the env.js file. It defines server-side and client-side variables, and specifies runtime environment values.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/uk/usage/env-variables.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    NODE_ENV: z.enum([\"development\", \"test\", \"production\"]),\n  },\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Drizzle Kit Scripts in package.json\nDESCRIPTION: This JSON snippet shows the scripts added to package.json for using Drizzle Kit. It includes commands for generating types, migrating the database, pushing schema changes, and opening Drizzle Studio.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/drizzle.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    ...\n    \"db:generate\": \"drizzle-kit generate\",\n    \"db:migrate\": \"drizzle-kit migrate\",\n    \"db:push\": \"drizzle-kit push\",\n    \"db:studio\": \"drizzle-kit studio\",\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Data in a Next.js Component with TypeScript\nDESCRIPTION: This code demonstrates how to use the useSession hook to access session data in a Next.js component and handle authenticated/unauthenticated states.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/usage/next-auth.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSession } from \"next-auth/react\";\n\nconst User = () => {\n  const { data: session } = useSession();\n\n  if (!session) {\n    // Lida com o estado não autenticado, por exemplo renderizar um componente SignIn\n    return <SignIn />;\n  }\n\n  return <p>Bem-vindo {session.user.name}!</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Prisma Database Seed Script\nDESCRIPTION: TypeScript implementation of a Prisma database seed script. Demonstrates upsert operation and proper database connection handling with error management.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/prisma.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db } from \"../src/server/db\";\n\nasync function main() {\n  const id = \"cl9ebqhxk00003b600tymydho\";\n  await db.example.upsert({\n    where: {\n      id,\n    },\n    create: {\n      id,\n    },\n    update: {},\n  });\n}\n\nmain()\n  .then(async () => {\n    await db.$disconnect();\n  })\n  .catch(async (e) => {\n    console.error(e);\n    await db.$disconnect();\n    process.exit(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Type Coercion Configuration\nDESCRIPTION: Example of configuring environment variables with type coercion using Zod for converting strings to numbers and booleans.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/env-variables.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSOME_NUMBER=123\nSOME_BOOLEAN=true\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    SOME_NUMBER: z.coerce.number(),\n    SOME_BOOLEAN: z.coerce.boolean(),\n  },\n  // ...\n  runtimeEnv: {\n    SOME_NUMBER: process.env.SOME_NUMBER,\n    SOME_BOOLEAN: process.env.SOME_BOOLEAN,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Merging tRPC Routers in TypeScript\nDESCRIPTION: This snippet demonstrates how to merge multiple tRPC routers into a single app router. It shows the convention of creating separate routers for different entities and combining them in a root file.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/trpc.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst appRouter = createTRPCRouter({\n  users: userRouter,\n  posts: postRouter,\n  messages: messageRouter,\n});\n\nexport type AppRouter = typeof appRouter;\n```\n\n----------------------------------------\n\nTITLE: Using Protected tRPC Procedure with Prisma in TypeScript\nDESCRIPTION: This snippet shows how to use a protected tRPC procedure to fetch user data from Prisma database.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/usage/next-auth.md#2025-04-20_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst userRouter = router({\n  me: protectedProcedure.query(async ({ ctx }) => {\n    const user = await prisma.user.findUnique({\n      where: {\n        id: ctx.session.user.id,\n      },\n    });\n    return user;\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSession Hook for Client-side Auth\nDESCRIPTION: Demonstrates how to access session data on the client side using the useSession hook\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-pages.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSession } from \"next-auth/react\";\n\nconst User = () => {\n  const { data: session } = useSession();\n\n  if (!session) {\n    // Handle unauthenticated state, e.g. render a SignIn component\n    return <SignIn />;\n  }\n\n  return <p>Welcome {session.user.name}!</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Drizzle Client with tRPC Context in TypeScript\nDESCRIPTION: This code snippet shows how to include the Drizzle client in the tRPC context. It imports the db instance and adds it to the context along with the session and other options.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/drizzle.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db } from \"~/server/db\";\n\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  const session = await auth();\n\n  return {\n    db,\n    session,\n    ...opts,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a tRPC Router with Input Validation\nDESCRIPTION: This snippet demonstrates how to create a tRPC router with a procedure that validates input using Zod. The procedure queries a database using Prisma to find a user by ID.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/ja/usage/trpc.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRouter = createTRPCRouter({\n  getById: publicProcedure.input(z.string()).query(({ ctx, input }) => {\n    return ctx.prisma.user.findFirst({\n      where: {\n        id: input,\n      },\n    });\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Drizzle Client with tRPC Context in TypeScript\nDESCRIPTION: This code shows how to include the Drizzle client in the tRPC context. It imports the database client and adds it to the context along with the user session and request headers.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/drizzle.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db } from \"~/server/db\";\n\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  const session = await auth();\n\n  return {\n    db,\n    session,\n    ...opts,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Callback in Auth.js\nDESCRIPTION: Implements the authorized callback in Auth.js to handle different authentication scenarios. This function supports both token-based API authentication and session-based page access.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-app-router.mdx#2025-04-20_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nasync authorized({ request, auth }) {\n  const url = request.nextUrl\n\n  if(request.method === \"POST\") {\n    const { authToken } = (await request.json()) ?? {}\n    // If the request has a valid auth token, it is authorized\n    const valid = await validateAuthToken(authToken)\n    if(valid) return true\n    return NextResponse.json(\"Invalid auth token\", { status: 401 })\n  }\n\n  // Logged in users are authenticated, otherwise redirect to login page\n  return !!auth.user\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing External tRPC API Access in Next.js\nDESCRIPTION: Demonstrates how to expose a single tRPC procedure as a regular Next.js API endpoint for external access. Includes error handling and context creation.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/trpc.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextApiRequest, type NextApiResponse } from \"next\";\nimport { appRouter, createCaller } from \"../../../server/api/root\";\nimport { createTRPCContext } from \"../../../server/api/trpc\";\n\nconst userByIdHandler = async (req: NextApiRequest, res: NextApiResponse) => {\n  const ctx = await createTRPCContext({ req, res });\n  const caller = createCaller(ctx);\n  try {\n    const { id } = req.query;\n    const user = await caller.user.getById(id);\n    res.status(200).json(user);\n  } catch (cause) {\n    if (cause instanceof TRPCError) {\n      const httpCode = getHTTPStatusCodeFromError(cause);\n      return res.status(httpCode).json(cause);\n    }\n    console.error(cause);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport default userByIdHandler;\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Authentication Middleware\nDESCRIPTION: Sets up Next.js middleware for authentication using Auth.js. This middleware file adds route protection at the Next.js level, preventing unauthorized access to protected pages.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-app-router.mdx#2025-04-20_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport { auth as middleware } from \"@/auth\"\n```\n\n----------------------------------------\n\nTITLE: Handling tRPC Errors in React\nDESCRIPTION: This example demonstrates how to handle tRPC errors, specifically Zod validation errors, in a React component using a mutation.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/trpc.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyComponent() {\n  const { mutate, error } = api.post.create.useMutation();\n\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      const formData = new FormData(e.currentTarget);\n      mutate({ title: formData.get('title') });\n    }}>\n      <input name=\"title\" />\n      {error?.data?.zodError?.fieldErrors.title && (\n        <span className=\"mb-8 text-red-500\">\n          {error.data.zodError.fieldErrors.title}\n        </span>\n      )}\n\n      ...\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: NextAuth Type Declaration for User ID in Session\nDESCRIPTION: Extends the default NextAuth Session type using module augmentation to include the user ID, providing proper TypeScript typing when accessing session.user.id.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-app-router.mdx#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { DefaultSession } from \"next-auth\";\n\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n    } & DefaultSession[\"user\"];\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Traditional Next.js API Endpoint Implementation\nDESCRIPTION: Shows a standard Next.js API endpoint implementation for user retrieval, demonstrating the traditional approach without tRPC.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/trpc.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextApiRequest, type NextApiResponse } from \"next\";\nimport { prisma } from \"../../../server/db\";\n\nconst userByIdHandler = async (req: NextApiRequest, res: NextApiResponse) => {\n  if (req.method !== \"GET\") {\n    return res.status(405).end();\n  }\n\n  const { id } = req.query;\n\n  if (!id || typeof id !== \"string\") {\n    return res.status(400).json({ error: \"Invalid id\" });\n  }\n\n  const examples = await prisma.example.findFirst({\n    where: {\n      id,\n    },\n  });\n\n  res.status(200).json(examples);\n};\n\nexport default userByIdHandler;\n```\n\n----------------------------------------\n\nTITLE: Initializing Drizzle Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Drizzle client in a T3 Stack project. It imports the database schema, connects to the database using the environment variable, and exports the Drizzle instance.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/drizzle.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"~/env\";\nimport * as schema from \"./schema\";\nimport postgres from \"postgres\";\n\nconst conn = postgres(env.DATABASE_URL);\n\nexport const db = drizzle(conn, { schema });\n```\n\n----------------------------------------\n\nTITLE: Adding New Environment Variables in Create T3 App\nDESCRIPTION: This snippet demonstrates how to add a new environment variable (TWITTER_API_TOKEN) to a Create T3 App project. It shows the necessary additions to both the .env file and the env.js configuration.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/fr/usage/env-variables.mdx#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    TWITTER_API_TOKEN: z.string(),\n  },\n  // ...\n  runtimeEnv: {\n    // ...\n    TWITTER_API_TOKEN: process.env.TWITTER_API_TOKEN,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a tRPC Procedure in TypeScript\nDESCRIPTION: This snippet shows how to define a simple tRPC procedure that retrieves a user by ID using Prisma. It demonstrates input validation with Zod and querying data from the database.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/trpc.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRouter = createTRPCRouter({\n  getById: publicProcedure.input(z.string()).query(({ ctx, input }) => {\n    return ctx.prisma.user.findFirst({\n      where: {\n        id: input,\n      },\n    });\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Next.js Client-Side Code\nDESCRIPTION: This example illustrates the usage of environment variables in client-side Next.js code. It shows how to access public variables and the error that occurs when trying to access server-side variables.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/uk/usage/env-variables.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"../env.js\";\n\n// ❌ This will throw a runtime error\nconst dbUrl = env.DATABASE_URL;\n\n// ✅ This is fine\nconst wsKey = env.NEXT_PUBLIC_WS_KEY;\n```\n\n----------------------------------------\n\nTITLE: Initializing Drizzle Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Drizzle client in a Create T3 App project. It imports the necessary dependencies, establishes a database connection, and exports the Drizzle instance with the schema.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/drizzle.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"~/env\";\nimport * as schema from \"./schema\";\nimport postgres from \"postgres\";\n\n\nconst conn = postgres(env.DATABASE_URL)\n\nexport const db = drizzle(conn, { schema });\n```\n\n----------------------------------------\n\nTITLE: Adding New Environment Variables with Zod Validation\nDESCRIPTION: This snippet demonstrates how to add a new environment variable (TWITTER_API_TOKEN) with Zod validation in the env.js file. It includes the server-side declaration and runtime environment mapping.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/uk/usage/env-variables.mdx#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    TWITTER_API_TOKEN: z.string(),\n  },\n  // ...\n  runtimeEnv: {\n    // ...\n    TWITTER_API_TOKEN: process.env.TWITTER_API_TOKEN,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with tRPC\nDESCRIPTION: Example of implementing optimistic updates in a React component using tRPC mutations and React Query utilities.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/trpc.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyComponent = () => {\n  const listPostQuery = api.post.list.useQuery();\n\n  const utils = api.useUtils();\n  const postCreate = api.post.create.useMutation({\n    async onMutate(newPost) {\n      await utils.post.list.cancel();\n      const prevData = utils.post.list.getData();\n      utils.post.list.setData(undefined, (old) => [...old, newPost]);\n      return { prevData };\n    },\n    onError(err, newPost, ctx) {\n      utils.post.list.setData(undefined, ctx.prevData);\n    },\n    onSettled() {\n      utils.post.list.invalidate();\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields to Prisma User Model with NextAuth.js\nDESCRIPTION: This code demonstrates how to add a custom 'role' field to the Prisma User model with a default value for NextAuth.js compatibility.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/usage/next-auth.md#2025-04-20_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\n+ enum Role {\n+   USER\n+   ADMIN\n+ }\n\n  model User {\n    ...\n+   role Role @default(USER)\n  }\n```\n\n----------------------------------------\n\nTITLE: Extending Prisma User Model with Role Field\nDESCRIPTION: Shows how to add a custom field to the User model when using Prisma with NextAuth. The example adds a role field with a default value, ensuring it works with the Prisma adapter's automatic user creation.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-app-router.mdx#2025-04-20_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n+ enum Role {\n+   USER\n+   ADMIN\n+ }\n\n  model User {\n    ...\n+   role Role @default(USER)\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC Context with NextAuth.js Session in TypeScript\nDESCRIPTION: This snippet shows how to create a tRPC context that includes the NextAuth.js session.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/usage/next-auth.md#2025-04-20_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { getServerAuthSession } from \"../common/get-server-auth-session\";\n\nexport const createContext = async (opts: CreateNextContextOptions) => {\n  const { req, res } = opts;\n  const session = await getServerAuthSession({ req, res });\n  return await createContextInner({\n    session,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for tRPC API\nDESCRIPTION: Implementation of CORS support for tRPC API endpoints using nextjs-cors middleware.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/trpc.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextApiRequest, type NextApiResponse } from \"next\";\nimport { createNextApiHandler } from \"@trpc/server/adapters/next\";\nimport { appRouter } from \"~/server/api/root\";\nimport { createTRPCContext } from \"~/server/api/trpc\";\nimport cors from \"nextjs-cors\";\n\nconst handler = async (req: NextApiRequest, res: NextApiResponse) => {\n  await cors(req, res);\n\n  return createNextApiHandler({\n    router: appRouter,\n    createContext: createTRPCContext,\n  })(req, res);\n};\n\nexport default handler;\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS for tRPC API Endpoints in Next.js\nDESCRIPTION: This snippet shows how to enable CORS for tRPC API endpoints in a Next.js application using the nextjs-cors package. This is useful when consuming the API from a different domain, such as in a monorepo with React Native.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/usage/trpc.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextApiRequest, type NextApiResponse } from \"next\";\nimport { createNextApiHandler } from \"@trpc/server/adapters/next\";\nimport { appRouter } from \"~/server/trpc/router/_app\";\nimport { createContext } from \"~/server/trpc/context\";\nimport cors from \"nextjs-cors\";\n\nconst handler = async (req: NextApiRequest, res: NextApiResponse) => {\n  // Habilita cors\n  await cors(req, res);\n\n  // Crea y llama al manejador tRPC\n  return createNextApiHandler({\n    router: appRouter,\n    createContext,\n  })(req, res);\n};\n\nexport default handler;\n```\n\n----------------------------------------\n\nTITLE: Accessing Server-Side Environment Variables in Next.js API Route\nDESCRIPTION: This code snippet shows how to import and use server-side environment variables in a Next.js API route. It demonstrates type-safe access to the DATABASE_URL variable.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/fr/usage/env-variables.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"../../env.js\";\n\n// `env` is fully typesafe and provides autocompletion\nconst dbUrl = env.DATABASE_URL;\n```\n\n----------------------------------------\n\nTITLE: NextAuth.js Type Declaration for Session\nDESCRIPTION: Type augmentation for NextAuth.js session to include user ID in TypeScript types\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-pages.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultSession } from \"next-auth\";\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user?: {\n      id: string;\n    } & DefaultSession[\"user\"];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionProvider in Next.js with TypeScript\nDESCRIPTION: This snippet shows how to wrap the application with SessionProvider in the _app.tsx file to enable session data access throughout the app.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/usage/next-auth.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SessionProvider session={session}>\n  <Component {...pageProps} />\n</SessionProvider>\n```\n\n----------------------------------------\n\nTITLE: Integration Testing for tRPC Router with Vitest\nDESCRIPTION: This snippet shows how to write an integration test for a tRPC router using Vitest. It creates a context, calls a procedure with test input, and verifies the output matches the expected result, demonstrating type inference for procedure inputs.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/usage/trpc.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type inferProcedureInput } from \"@trpc/server\";\nimport { expect, test } from \"vitest\";\n\nimport { appRouter, type AppRouter } from \"~/server/router/_app\";\nimport { createContextInner } from \"~/server/router/context\";\n\ntest(\"example router\", async () => {\n  const ctx = await createContextInner({ session: null });\n  const caller = appRouter.createCaller(ctx);\n\n  type Input = inferProcedureInput<AppRouter[\"example\"][\"hello\"]>;\n  const input: Input = {\n    text: \"test\",\n  };\n\n  const example = await caller.example.hello(input);\n\n  expect(example).toMatchObject({ greeting: \"Hello test\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Client-Side Environment Variables in Next.js Page\nDESCRIPTION: This example illustrates the correct way to use client-side environment variables in a Next.js page component. It shows that accessing server-side variables on the client will throw a runtime error.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/env-variables.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"../env.js\";\n\n// ❌ This will throw a runtime error\nconst dbUrl = env.DATABASE_URL;\n\n// ✅ This is correct\nconst wsKey = env.NEXT_PUBLIC_WS_KEY;\n```\n\n----------------------------------------\n\nTITLE: Server-side Session Retrieval in Next.js\nDESCRIPTION: Shows how to fetch session data server-side using getServerAuthSession helper function\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-pages.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getServerAuthSession } from \"../server/auth\";\nimport { type GetServerSideProps } from \"next\";\n\nexport const getServerSideProps: GetServerSideProps = async (ctx) => {\n  const session = await getServerAuthSession(ctx);\n  return {\n    props: { session },\n  };\n};\n\nconst User = () => {\n  const { data: session } = useSession();\n  // NOTE: `session` wont have a loading state since it's already prefetched on the server\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding T3 App with tRPC and Tailwind in CI environment\nDESCRIPTION: Example command for CI environments that scaffolds a T3 App with tRPC and Tailwind CSS without interactive prompts. Uses the experimental CI flags.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/installation.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx create-t3-app@latest --CI --trpc --tailwind\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Auth Session Helper Function in TypeScript\nDESCRIPTION: This code creates a helper function to get the server auth session using getServerSession from NextAuth.js.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/usage/next-auth.md#2025-04-20_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport const getServerAuthSession = async (ctx: {\n  req: GetServerSidePropsContext[\"req\"];\n  res: GetServerSidePropsContext[\"res\"];\n}) => {\n  return await getServerSession(ctx.req, ctx.res, nextAuthOptions);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Protected tRPC Procedure with NextAuth.js in TypeScript\nDESCRIPTION: This code demonstrates how to create a protected tRPC procedure that requires authentication using NextAuth.js session.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/usage/next-auth.md#2025-04-20_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport const protectedProcedure = t.procedure.use(({ ctx, next }) => {\n  if (!ctx.session?.user) {\n    throw new TRPCError({ code: \"UNAUTHORIZED\" });\n  }\n  return next({\n    ctx: {\n      // inferer `session` som ikke-nullbar\n      session: { ...ctx.session, user: ctx.session.user },\n    },\n  });\n}));\n```\n\n----------------------------------------\n\nTITLE: Handling Zod Validation Errors in tRPC Mutations\nDESCRIPTION: This example shows how to handle validation errors from tRPC mutations. It demonstrates accessing the Zod error information from the error object returned by the mutation hook.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/ja/usage/trpc.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent() {\n  const { mutate, error } = api.post.create.useMutation();\n\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      const formData = new FormData(e.currentTarget);\n      mutate({ title: formData.get('title') });\n    }}>\n      <input name=\"title\" />\n      {error?.data?.zodError?.fieldErrors.title && (\n        <span className=\"mb-8 text-red-500\">\n          {error.data.zodError.fieldErrors.title}\n        </span>\n      )}\n\n      ...\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Usando Variables de Entorno Validadas en Server-Side Code\nDESCRIPTION: Demuestra cómo importar y usar variables de entorno validadas en código del lado del servidor, aprovechando el tipado y autocompletado proporcionado por TypeScript.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/usage/env-variables.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"../../env/server.mjs\";\n\n// `env` es completamente seguro en tipos y provee autocompletado\nconst dbUrl = env.DATABASE_URL;\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration\nDESCRIPTION: Next.js configuration file using ESM imports for project settings.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/folder-structure-pages.mdx#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnext.config.mjs\n```\n\n----------------------------------------\n\nTITLE: Protected User Router with Prisma\nDESCRIPTION: Example of a protected tRPC router accessing user data from Prisma database\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-pages.mdx#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRouter = router({\n  me: protectedProcedure.query(async ({ ctx }) => {\n    const user = await prisma.user.findUnique({\n      where: {\n        id: ctx.session.user.id,\n      },\n    });\n    return user;\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: tRPC Context Creation with Auth Session\nDESCRIPTION: Creates tRPC context with authenticated session data\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-pages.mdx#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getServerAuthSession } from \"../auth\";\n\nexport const createContext = async (opts: CreateNextContextOptions) => {\n  const { req, res } = opts;\n  const session = await getServerAuthSession({ req, res });\n  return await createContextInner({\n    session,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: tRPC API Route Configuration\nDESCRIPTION: tRPC API entrypoint configuration file that handles tRPC requests through Next.js dynamic routing.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/folder-structure-pages.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsrc/pages/api/trpc/[trpc].ts\n```\n\n----------------------------------------\n\nTITLE: Exposing a tRPC Procedure as a REST API Endpoint\nDESCRIPTION: This snippet shows how to create a Next.js API route that calls a tRPC procedure, effectively exposing it as a REST endpoint. It demonstrates error handling and status code mapping.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/ja/usage/trpc.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextApiRequest, type NextApiResponse } from \"next\";\nimport { appRouter, createCaller } from \"../../../server/api/root\";\nimport { createTRPCContext } from \"../../../server/api/trpc\";\n\nconst userByIdHandler = async (req: NextApiRequest, res: NextApiResponse) => {\n  // Create context and caller\n  const ctx = await createTRPCContext({ req, res });\n  const caller = createCaller(ctx);\n  try {\n    const { id } = req.query;\n    const user = await caller.user.getById(id);\n    res.status(200).json(user);\n  } catch (cause) {\n    if (cause instanceof TRPCError) {\n      // An error from tRPC occurred\n      const httpCode = getHTTPStatusCodeFromError(cause);\n      return res.status(httpCode).json(cause);\n    }\n    // Another error occurred\n    console.error(cause);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport default userByIdHandler;\n```\n\n----------------------------------------\n\nTITLE: Installing Create T3 App with npm\nDESCRIPTION: Command to scaffold a new T3 application using npm. After running this command, you'll be prompted with questions to configure your new application.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/installation.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create t3-app@latest\n```\n\n----------------------------------------\n\nTITLE: Including User ID in NextAuth.js Session with TypeScript\nDESCRIPTION: This code shows how to include the user ID in the session object using the session callback in NextAuth.js configuration.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/usage/next-auth.md#2025-04-20_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ncallbacks: {\n    session({ session, user }) {\n      if (session.user) {\n        session.user.id = user.id;\n      }\n      return session;\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for building and running the application with environment variables and port mapping\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/docker.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\nservices:\n  app:\n    platform: \"linux/amd64\"\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        NEXT_PUBLIC_CLIENTVAR: \"clientvar\"\n    working_dir: /app\n    ports:\n      - \"3000:3000\"\n    image: t3-app\n    environment:\n      - DATABASE_URL=database_url_goes_here\n```\n\n----------------------------------------\n\nTITLE: tRPC Integration Testing with Vitest\nDESCRIPTION: Sample integration test setup for tRPC router using Vitest, including type inference and protected route testing.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/trpc.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type inferProcedureInput } from \"@trpc/server\";\nimport { expect, test } from \"vitest\";\n\nimport { appRouter, type AppRouter } from \"~/server/api/root\";\nimport { createInnerTRPCContext } from \"~/server/api/trpc\";\n\ntest(\"example router\", async () => {\n  const ctx = await createInnerTRPCContext({ session: null });\n  const caller = appRouter.createCaller(ctx);\n\n  type Input = inferProcedureInput<AppRouter[\"example\"][\"hello\"]>;\n  const input: Input = {\n    text: \"test\",\n  };\n\n  const example = await caller.example.hello(input);\n\n  expect(example).toMatchObject({ greeting: \"Hello test\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Scaffolding T3 App with NextAuth, Tailwind, Drizzle and PostgreSQL in CI environment\nDESCRIPTION: Example command for CI environments that scaffolds a T3 App with NextAuth.js, Tailwind CSS, Drizzle ORM, and PostgreSQL database without interactive prompts.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/installation.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx create-t3-app@latest --CI --nextAuth --tailwind --drizzle --dbProvider postgres\n```\n\n----------------------------------------\n\nTITLE: Installing Create T3 App with yarn\nDESCRIPTION: Command to scaffold a new T3 application using yarn. This will initiate the interactive CLI for configuring your T3 application.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/installation.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create t3-app\n```\n\n----------------------------------------\n\nTITLE: Extending NextAuth.js Session Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to extend the NextAuth.js Session type to include the user ID using module augmentation.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/usage/next-auth.md#2025-04-20_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { DefaultSession } from \"next-auth\";\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user?: {\n      id: string;\n    } & DefaultSession[\"user\"];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Definiendo Esquemas de Validación para Variables de Entorno con Zod\nDESCRIPTION: Muestra cómo definir esquemas de validación Zod para variables de entorno del servidor y cliente. También ilustra la configuración del objeto clientEnv necesario para exponer variables al cliente.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/usage/env-variables.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const serverSchema = z.object({\n  // DATABASE_URL: z.string().url(),\n});\n\nexport const clientSchema = z.object({\n  // NEXT_PUBLIC_WS_KEY: z.string(),\n});\n\nexport const clientEnv = {\n  // NEXT_PUBLIC_WS_KEY: process.env.NEXT_PUBLIC_WS_KEY,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Callback in NextAuth.js\nDESCRIPTION: Configuration for including user ID in the session object using NextAuth.js callbacks\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-pages.mdx#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncallbacks: {\n    session({ session, user }) {\n      if (session.user) {\n        session.user.id = user.id;\n      }\n      return session;\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Retrieving Auth Session Server Side in Next.js\nDESCRIPTION: Demonstrates how to retrieve the authentication session on the server side using the auth helper function provided by create-t3-app. This allows access to the user's session data in server components.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-app-router.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from \"~/server/auth\";\n\nexport default async function Home() {\n  const session = await auth();\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Create T3 App with pnpm\nDESCRIPTION: Command to scaffold a new T3 application using pnpm. Running this will start the CLI prompt to configure your application.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/installation.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create t3-app@latest\n```\n\n----------------------------------------\n\nTITLE: Handling tRPC Validation Errors in React Component\nDESCRIPTION: This snippet shows how to handle and display tRPC validation errors in a React component. It demonstrates accessing Zod error messages from the mutation result.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/trpc.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent() {\n  const { mutate, error } = api.post.create.useMutation();\n\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      const formData = new FormData(e.currentTarget);\n      mutate({ title: formData.get('title') });\n    }}>\n      <input name=\"title\" />\n      {error?.data?.zodError?.fieldErrors.title && (\n        <span className=\"mb-8 text-red-500\">\n          {error.data.zodError.fieldErrors.title}\n        </span>\n      )}\n\n      ...\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js API Route Configuration (NextAuth)\nDESCRIPTION: NextAuth.js authentication configuration file that handles authentication requests via dynamic routing.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/folder-structure-pages.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsrc/pages/api/auth/[...nextauth].ts\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Utility Classes Example\nDESCRIPTION: Example demonstrating Tailwind's utility-first approach where multiple utility classes are applied directly to HTML elements to achieve the same styling as the traditional CSS example.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/tailwind.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div\n  class=\"flex flex-col items-center justify-center rounded border border-gray-200 bg-white p-4\"\n>\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for Create T3 App\nDESCRIPTION: Complete Dockerfile configuration with three stages: dependencies, builder, and runner. Handles Prisma client, package management, and production build setup.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/docker.md#2025-04-20_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n##### DEPENDENCIES\n\nFROM --platform=linux/amd64 node:20-alpine AS deps\nRUN apk add --no-cache libc6-compat openssl\nWORKDIR /app\n\n# Install Prisma Client - remove if not using Prisma\n\nCOPY prisma ./\n\n# Install dependencies based on the preferred package manager\n\nCOPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml\\* ./\n\nRUN \\\n    if [ -f yarn.lock ]; then yarn --frozen-lockfile; \\\n    elif [ -f package-lock.json ]; then npm ci; \\\n    elif [ -f pnpm-lock.yaml ]; then npm install -g pnpm && pnpm i; \\\n    else echo \"Lockfile not found.\" && exit 1; \\\n    fi\n\n##### BUILDER\n\nFROM --platform=linux/amd64 node:20-alpine AS builder\nARG DATABASE_URL\nARG NEXT_PUBLIC_CLIENTVAR\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\n\n# ENV NEXT_TELEMETRY_DISABLED 1\n\nRUN \\\n    if [ -f yarn.lock ]; then SKIP_ENV_VALIDATION=1 yarn build; \\\n    elif [ -f package-lock.json ]; then SKIP_ENV_VALIDATION=1 npm run build; \\\n    elif [ -f pnpm-lock.yaml ]; then npm install -g pnpm && SKIP_ENV_VALIDATION=1 pnpm run build; \\\n    else echo \"Lockfile not found.\" && exit 1; \\\n    fi\n\n##### RUNNER\n\nFROM --platform=linux/amd64 gcr.io/distroless/nodejs20-debian12 AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n\n# ENV NEXT_TELEMETRY_DISABLED 1\n\nCOPY --from=builder /app/next.config.js ./\nCOPY --from=builder /app/public ./public\nCOPY --from=builder /app/package.json ./package.json\n\nCOPY --from=builder /app/.next/standalone ./\nCOPY --from=builder /app/.next/static ./.next/static\n\nEXPOSE 3000\nENV PORT 3000\n\nCMD [\"server.js\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Project Settings\nDESCRIPTION: Basic Vercel configuration file (vercel.json) specifying build, development, and installation commands for project deployment.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/vercel.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"buildCommand\": \"npm run build\",\n  \"devCommand\": \"npm run dev\",\n  \"installCommand\": \"npm install\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Client-Side Environment Variables\nDESCRIPTION: Example showing correct and incorrect usage of environment variables on the client side in a Next.js page component.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/env-variables.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"../env.js\";\n\n// ❌ This will throw a runtime error\nconst dbUrl = env.DATABASE_URL;\n\n// ✅ This is fine\nconst wsKey = env.NEXT_PUBLIC_WS_KEY;\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionProvider in Next.js App\nDESCRIPTION: Shows how to wrap the application with SessionProvider to enable session data access throughout the app\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-pages.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SessionProvider session={session}>\n  <Component {...pageProps} />\n</SessionProvider>\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables to .env.example\nDESCRIPTION: This snippet shows how to add environment variables to the .env.example file, ensuring that sensitive information is not included.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/env-variables.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTWITTER_API_TOKEN=\n```\n\n----------------------------------------\n\nTITLE: Basic Vercel Deployment\nDESCRIPTION: Simple command to deploy a project using Vercel CLI.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/vercel.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvercel\n```\n\n----------------------------------------\n\nTITLE: Using Server-Side Environment Variables in Next.js API Route\nDESCRIPTION: This code snippet shows how to import and use server-side environment variables in a Next.js API route. It demonstrates type-safe access to the DATABASE_URL variable.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/env-variables.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"../../env.js\";\n\n// `env` is fully typesafe and provides autocompletion\nconst dbUrl = env.DATABASE_URL;\n```\n\n----------------------------------------\n\nTITLE: Traditional Next.js API Endpoint Implementation\nDESCRIPTION: This snippet shows a traditional Next.js API endpoint implementation for retrieving a user by ID. It includes HTTP method validation, query parameter validation, and database access using Prisma.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/usage/trpc.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextApiRequest, type NextApiResponse } from \"next\";\nimport { prisma } from \"../../../server/db/client\";\n\nconst userByIdHandler = async (req: NextApiRequest, res: NextApiResponse) => {\n  if (req.method !== \"GET\") {\n    return res.status(405).end();\n  }\n\n  const { id } = req.query;\n\n  if (!id || typeof id !== \"string\") {\n    return res.status(400).json({ error: \"Invalid id\" });\n  }\n\n  const examples = await prisma.example.findFirst({\n    where: {\n      id,\n    },\n  });\n\n  res.status(200).json(examples);\n};\n\nexport default userByIdHandler;\n```\n\n----------------------------------------\n\nTITLE: Installing create-t3-app with npm\nDESCRIPTION: Command to install and run create-t3-app using npm. This will start the interactive CLI to scaffold a new T3 Stack project.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create t3-app@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Configuration for Docker\nDESCRIPTION: Adding standalone output configuration to next.config.js to reduce Docker image size using output traces\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/docker.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nexport default defineNextConfig({\n  reactStrictMode: true,\n  swcMinify: true,\n+ output: \"standalone\",\n});\n```\n\n----------------------------------------\n\nTITLE: Vercel Production Deployment\nDESCRIPTION: Command to deploy directly to production environment on Vercel.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/vercel.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvercel --prod\n```\n\n----------------------------------------\n\nTITLE: Type Coercion for Environment Variables using Zod\nDESCRIPTION: This code example shows how to use Zod's coerce feature to convert string environment variables to other types like numbers and booleans during runtime validation.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/uk/usage/env-variables.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    SOME_NUMBER: z.coerce.number(),\n    SOME_BOOLEAN: z.coerce.boolean(),\n  },\n  // ...\n  runtimeEnv: {\n    SOME_NUMBER: process.env.SOME_NUMBER,\n    SOME_BOOLEAN: process.env.SOME_BOOLEAN,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Environment variable configuration file for storing sensitive data.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/folder-structure-pages.mdx#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n.env\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for T3 App\nDESCRIPTION: A Docker Compose YAML configuration file for running the T3 App container with appropriate platform settings, environment variables, and port mappings.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/deployment/docker.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\nservices:\n  app:\n    platform: \"linux/amd64\"\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        NEXT_PUBLIC_CLIENTVAR: \"clientvar\"\n    working_dir: /app\n    ports:\n      - \"3000:3000\"\n    image: t3-app\n    environment:\n      - DATABASE_URL=database_url_goes_here\n```\n\n----------------------------------------\n\nTITLE: Setting up .dockerignore File for T3 App\nDESCRIPTION: Content for the .dockerignore file that excludes unnecessary files from the Docker build process to keep the image clean and efficient.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/deployment/docker.md#2025-04-20_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\n.env\nDockerfile\n.dockerignore\nnode_modules\nnpm-debug.log\nREADME.md\n.next\n.git\n```\n\n----------------------------------------\n\nTITLE: Running Create-T3-App Documentation Site Locally in Bash\nDESCRIPTION: Command sequence for cloning the repository, navigating to the www directory, installing dependencies, and starting the development server.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/t3-oss/create-t3-app.git\ncd create-t3-app/www\npnpm i\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Updating env.js with New Environment Variables\nDESCRIPTION: This code demonstrates how to update the env.js file to include validation for a new environment variable. It adds the TWITTER_API_TOKEN to the server object and runtimeEnv.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/env-variables.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    TWITTER_API_TOKEN: z.string(),\n  },\n  // ...\n  runtimeEnv: {\n    // ...\n    TWITTER_API_TOKEN: process.env.TWITTER_API_TOKEN,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Client-Side Environment Variables in Next.js Page\nDESCRIPTION: This example illustrates how to use client-side environment variables in a Next.js page component. It shows the correct usage of a public variable and the error that occurs when trying to access a server-side variable on the client.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/fr/usage/env-variables.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"../env.js\";\n\n// ❌ This will throw a runtime error\nconst dbUrl = env.DATABASE_URL;\n\n// ✅ This is fine\nconst wsKey = env.NEXT_PUBLIC_WS_KEY;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Output for Docker Optimization\nDESCRIPTION: Add the 'standalone' output configuration to next.config.js to reduce image size by leveraging automatic output tracing.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/deployment/docker.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nexport default defineNextConfig({\n  reactStrictMode: true,\n  swcMinify: true,\n+ output: \"standalone\",\n});\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Commands to build and run the Docker image locally with environment variables\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/docker.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t ct3a-docker --build-arg NEXT_PUBLIC_CLIENTVAR=clientvar .\ndocker run -p 3000:3000 -e DATABASE_URL=\"database_url_goes_here\" ct3a-docker\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for Interactive Documentation\nDESCRIPTION: These code snippets show how to use the imported components within the MDX file to create an interactive documentation page. The Callout components display important information, while the Form component allows users to interact with different technology options.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/examples.mdx#2025-04-20_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type=\"info\">\n  You cannot select `prisma` and `drizzle` at the same time.\n</Callout>\n\n<Form />\n\n<Callout type=\"warning\">\n  Some features might not work unless you create an env file\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Adding New Environment Variables to .env File\nDESCRIPTION: This snippet shows how to add a new environment variable to the .env file. It uses the TWITTER_API_TOKEN as an example.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/env-variables.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTWITTER_API_TOKEN=1234567890\n```\n\n----------------------------------------\n\nTITLE: Server-Side Session Retrieval in Next.js with TypeScript\nDESCRIPTION: This snippet shows how to retrieve the session on the server-side using getServerAuthSession and pass it to the client via getServerSideProps.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/usage/next-auth.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getServerAuthSession } from \"../server/auth\";\nimport { type GetServerSideProps } from \"next\";\n\nexport const getServerSideProps: GetServerSideProps = async (ctx) => {\n  const session = await getServerAuthSession(ctx);\n  return {\n    props: { session },\n  };\n};\n\nconst User = () => {\n  const { data: session } = useSession();\n  // NOTA: `session` não terá um estado de carregamento, pois já foi pré-carregado no servidor\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Vercel Deployment with Environment Variables\nDESCRIPTION: Command to deploy a project with environment variables and automated responses using Vercel CLI.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/deployment/vercel.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvercel --env DATABASE_URL=YOUR_DATABASE_URL_HERE --yes\n```\n\n----------------------------------------\n\nTITLE: Deploying to Netlify Production\nDESCRIPTION: Command to deploy your application to Netlify's production environment, including building the project before deployment.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/netlify.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nntl deploy --prod --build\n```\n\n----------------------------------------\n\nTITLE: Rendering Open Source App List Component in Astro\nDESCRIPTION: This code snippet renders the OpenSourceAppList component, which displays a list of open source applications built using the T3 stack.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/t3-collection.mdx#2025-04-20_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<OpenSourceAppList />\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Declaration in .env File\nDESCRIPTION: This snippet shows how to declare environment variables in the .env file, including examples for a Twitter API token, a number, and a boolean value.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/uk/usage/env-variables.mdx#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nTWITTER_API_TOKEN=1234567890\nSOME_NUMBER=123\nSOME_BOOLEAN=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Prisma Database Seeding\nDESCRIPTION: Package.json configuration for setting up database seeding with Prisma. Includes script definitions for running seed commands and specifies the seed file executor.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/prisma.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"db-seed\": \"NODE_ENV=development prisma db seed\"\n  },\n  \"prisma\": {\n    \"seed\": \"tsx prisma/seed.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Netlify Configuration for Project\nDESCRIPTION: Command to initialize Netlify configuration for your project, which walks you through setup steps and creates necessary configuration files.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/netlify.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nntl init\n```\n\n----------------------------------------\n\nTITLE: Railway Deployment Commands\nDESCRIPTION: Commands to deploy the Docker container to Railway platform\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/docker.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrailway login\nrailway init\nrailway link\nrailway up\nrailway open\n```\n\n----------------------------------------\n\nTITLE: Rendering Callout Component for Project Contributions in Astro\nDESCRIPTION: This code snippet renders a Callout component encouraging users to contribute their T3 stack projects by making a pull request to add their project to the list.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/t3-collection.mdx#2025-04-20_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n<Callout type=\"tip\">\n  Have a cool project using the T3 stack? Make a [pull\n  request](https://github.com/t3-oss/create-t3-app/tree/next/www/src/components/docs/openSourceAppList.tsx)\n  and add it here!\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Next.js Environment Variable Schema\nDESCRIPTION: Configuration for validating environment variables using Zod schema\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// schema.mjs\nimport { z } from \"zod\";\n\nexport const envSchema = z.object({\n  // Add schema from .env\n});\n```\n\n----------------------------------------\n\nTITLE: Server Auth Session Helper Function\nDESCRIPTION: Helper function to retrieve server-side session data using getServerSession\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-pages.mdx#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getServerAuthSession = (ctx: {\n  req: GetServerSidePropsContext[\"req\"];\n  res: GetServerSidePropsContext[\"res\"];\n}) => {\n  return getServerSession(ctx.req, ctx.res, authOptions);\n};\n```\n\n----------------------------------------\n\nTITLE: Running Application with Docker Compose\nDESCRIPTION: Command to run the application using Docker Compose configuration.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/deployment/docker.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Vercel Production Deployment Command\nDESCRIPTION: Command to deploy directly to production using Vercel CLI.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/deployment/vercel.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvercel --prod\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for T3 App\nDESCRIPTION: Multi-stage Dockerfile for building and running a T3 App with proper dependency installation, build process, and production configuration. Includes settings for environment variables and optimization.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/deployment/docker.md#2025-04-20_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\n##### DEPENDENCIAS\n\nFROM --platform=linux/amd64 node:16-alpine AS deps\nRUN apk add --no-cache libc6-compat openssl1.1-compat\nWORKDIR /app\n\n# Instala el Prisma Client - quitar si no estás usando Prisma\n\nCOPY prisma ./\n\n# Instala dependencias basadas en tu administrador de paquetes preferido\n\nCOPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml\\* ./\n\nRUN \\\n if [ -f yarn.lock ]; then yarn --frozen-lockfile; \\\n elif [ -f package-lock.json ]; then npm ci; \\\n elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \\\n else echo \"Lockfile not found.\" && exit 1; \\\n fi\n\n##### CONSTRUCTOR\n\nFROM --platform=linux/amd64 node:16-alpine AS builder\nARG DATABASE_URL\nARG NEXT_PUBLIC_CLIENTVAR\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\n\n# ENV NEXT_TELEMETRY_DISABLED 1\n\nRUN \\\n if [ -f yarn.lock ]; then SKIP_ENV_VALIDATION=1 yarn build; \\\n elif [ -f package-lock.json ]; then SKIP_ENV_VALIDATION=1 npm run build; \\\n elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && SKIP_ENV_VALIDATION=1 pnpm run build; \\\n else echo \"Lockfile not found.\" && exit 1; \\\n fi\n\n##### LANZADOR\n\nFROM --platform=linux/amd64 node:16-alpine AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n\n# ENV NEXT_TELEMETRY_DISABLED 1\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\nCOPY --from=builder /app/next.config.js ./\nCOPY --from=builder /app/public ./public\nCOPY --from=builder /app/package.json ./package.json\n\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\n\nUSER nextjs\nEXPOSE 3000\nENV PORT 3000\n\nCMD [\"node\", \"server.js\"]\n```\n\n----------------------------------------\n\nTITLE: Protected tRPC Procedure Implementation\nDESCRIPTION: Implementation of protected tRPC procedures that require authentication\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/_next-auth-pages.mdx#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const protectedProcedure = t.procedure.use(({ ctx, next }) =>  {\n  if (!ctx.session?.user) {\n    throw new TRPCError({ code: \"UNAUTHORIZED\" });\n  }\n  return next({\n    ctx: {\n      // infers the `session` as non-nullable\n      session: { ...ctx.session, user: ctx.session.user },\n    },\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Netlify CLI Globally\nDESCRIPTION: Command to install the Netlify CLI globally on your system, which allows you to manage deployments from the command line.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/netlify.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g netlify-cli\n```\n\n----------------------------------------\n\nTITLE: React Component with Traditional API Call\nDESCRIPTION: Example of a React component using traditional fetch API to retrieve user data from a Next.js endpoint.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/trpc.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\n\nconst UserPage = () => {\n  const router = useRouter();\n  const { id } = router.query;\n\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    fetch(`/api/user/${id}`)\n      .then((res) => res.json())\n      .then((data) => setUser(data));\n  }, [id]);\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Image with Environment Variables\nDESCRIPTION: Commands to build and run the Docker image locally, including how to set environment variables during build time and runtime.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/deployment/docker.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t ct3a-docker --build-arg NEXT_PUBLIC_CLIENTVAR=clientvar .\ndocker run -p 3000:3000 -e DATABASE_URL=\"database_url_goes_here\" ct3a-docker\n```\n\n----------------------------------------\n\nTITLE: Exposing tRPC Procedure as REST API Endpoint in Next.js\nDESCRIPTION: This example demonstrates how to expose a single tRPC procedure as a traditional Next.js API endpoint. It shows error handling and response formatting for external API consumers.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/trpc.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextApiRequest, type NextApiResponse } from \"next\";\nimport { appRouter, createCaller } from \"../../../server/api/root\";\nimport { createTRPCContext } from \"../../../server/api/trpc\";\n\nconst userByIdHandler = async (req: NextApiRequest, res: NextApiResponse) => {\n  // Create context and caller\n  const ctx = await createTRPCContext({ req, res });\n  const caller = createCaller(ctx);\n  try {\n    const { id } = req.query;\n    const user = await caller.user.getById(id);\n    res.status(200).json(user);\n  } catch (cause) {\n    if (cause instanceof TRPCError) {\n      // An error from tRPC occurred\n      const httpCode = getHTTPStatusCodeFromError(cause);\n      return res.status(httpCode).json(cause);\n    }\n    // Another error occurred\n    console.error(cause);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport default userByIdHandler;\n```\n\n----------------------------------------\n\nTITLE: Deploying to Railway with CLI Commands\nDESCRIPTION: Series of commands to deploy the Docker application to Railway using their CLI tool, including login, initialization, and deployment steps.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/deployment/docker.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrailway login\nrailway init\nrailway link\nrailway up\nrailway open\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Build Settings with netlify.toml\nDESCRIPTION: A basic netlify.toml configuration file that specifies the build command and publish directory for a Next.js application on Netlify.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/netlify.mdx#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[build]\n  command = \"next build\"\n  publish = \".next\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Build Settings with vercel.json\nDESCRIPTION: JSON configuration file that specifies build, output, development, and installation commands for Vercel deployment.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/deployment/vercel.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"buildCommand\": \"npm run build\",\n  \"outputDirectory\": \"dist\",\n  \"devCommand\": \"npm run dev\",\n  \"installCommand\": \"npm install\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Server-Side Environment Variables\nDESCRIPTION: Example of importing and using environment variables on the server side in a Next.js API route.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/env-variables.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"../../env.js\";\n\n// `env` is fully typesafe and provides autocompletion\nconst dbUrl = env.DATABASE_URL;\n```\n\n----------------------------------------\n\nTITLE: Prettier Config Type Addition\nDESCRIPTION: Added type definition for Prettier configuration and resolved prettier-plugin-tailwindcss import\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from \"prettier\";\n\nconst config: Config = {\n  // config options\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Vercel CLI\nDESCRIPTION: Command to globally install the Vercel CLI tool for command-line deployments.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/vercel.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g vercel\n```\n\n----------------------------------------\n\nTITLE: Using Server-Side Environment Variables in Next.js API Route\nDESCRIPTION: This code snippet shows how to import and use server-side environment variables in a Next.js API route. It demonstrates type-safe access to the DATABASE_URL variable.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/uk/usage/env-variables.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"../../env.js\";\n\n// `env` is fully typesafe and provides autocompletion\nconst dbUrl = env.DATABASE_URL;\n```\n\n----------------------------------------\n\nTITLE: Exiting with Error Code on Installation Abort\nDESCRIPTION: Fix to exit with an error code when aborting installation and prevent logging when scaffolding in an empty current directory.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n### Patch Changes\n\n- [#1043](https://github.com/t3-oss/create-t3-app/pull/1043) [`6fe7e1e`](https://github.com/t3-oss/create-t3-app/commit/6fe7e1e1025f46ea8fe6cc82bee7a68e96864078) Thanks [@juliusmarminge](https://github.com/juliusmarminge)! - fix(cli): exit with error code when aborting installation\n  fix(cli): don't log when scaffolding in current directory and it's empty\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version in package.json\nDESCRIPTION: Fix to update the 'name' field in package.json before installing dependencies.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n### Patch Changes\n\n- [#1056](https://github.com/t3-oss/create-t3-app/pull/1056) [`c6704fb`](https://github.com/t3-oss/create-t3-app/commit/c6704fbeef1473e77ad62543770f1804645389a8) Thanks [@prashantrahul141](https://github.com/prashantrahul141)! - fix: update `package.json->name` before installing dependencies.\n```\n\n----------------------------------------\n\nTITLE: Basic Vercel Deployment Command\nDESCRIPTION: Simple command to deploy a project using Vercel CLI.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/deployment/vercel.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvercel\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data with useEffect in Next.js Client Component\nDESCRIPTION: This client-side component uses useEffect to fetch user data from a Next.js API endpoint. It demonstrates the traditional approach to data fetching using fetch API with useState for managing the response data.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/es/usage/trpc.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\n\nconst UserPage = () => {\n  const router = useRouter();\n  const { id } = router.query;\n\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    fetch(`/api/user/${id}`)\n      .then((res) => res.json())\n      .then((data) => setUser(data));\n  }, [id]);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing CSS into a Component\nDESCRIPTION: Example showing how to import a CSS file into a JSX component, which is part of the traditional CSS workflow.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/tailwind.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport \"./my-class.css\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Drizzle Kit Scripts in package.json\nDESCRIPTION: This JSON snippet shows the npm scripts added to package.json for using Drizzle Kit. It includes commands for generating types, migrating the database, pushing schema changes, and opening Drizzle Studio.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/zh-hans/usage/drizzle.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    ...\n    \"db:generate\": \"drizzle-kit generate\",\n    \"db:migrate\": \"drizzle-kit migrate\",\n    \"db:push\": \"drizzle-kit push\",\n    \"db:studio\": \"drizzle-kit studio\",\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Declaration Example\nDESCRIPTION: Example of adding a new environment variable to the .env file.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/env-variables.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTWITTER_API_TOKEN=1234567890\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Class to HTML Element\nDESCRIPTION: Example showing how a CSS class is applied to an HTML element in the traditional approach.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/tailwind.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"my-class\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Installing T3 App with NPM\nDESCRIPTION: Command to create a new T3 Stack application using NPM package manager. This will launch an interactive CLI prompt for configuration options.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create t3-app@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing New Folder Structure\nDESCRIPTION: Major change to implement a new, more minimal and logical folder structure for generated t3-apps.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n### Major Changes\n\n- [#934](https://github.com/t3-oss/create-t3-app/pull/934) [`c20ec70`](https://github.com/t3-oss/create-t3-app/commit/c20ec705a6d3d3005da24d072cc9be04370ab822) Thanks [@juliusmarminge](https://github.com/juliusmarminge)! - feat!: implement new folder structure\n\n  create-t3-app has decided to switch out the folder structure of the generated t3-app to, what is to us, a more minimal, logical and easier to understand structure.\n```\n\n----------------------------------------\n\nTITLE: Adding Sidebar Configuration for Additional Languages\nDESCRIPTION: Example of extending the SIDEBAR configuration to include entries for Spanish alongside the existing English entries.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/README.md#2025-04-20_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n// src/config.ts\n\nexport const SIDEBAR = {\n  en: [\n    { text: 'Section Header', header: true, },\n    { text: 'Introduction', link: 'en/introduction' },\n    // ...\n  ],\n+  es: [\n+    { text: 'Encabezado de sección', header: true, },\n+    { text: 'Introducción', link: 'es/introduction' },\n+    // ...\n+  ],\n};\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing T3 App with Yarn\nDESCRIPTION: Command to create a new T3 Stack application using Yarn package manager. This will launch an interactive CLI prompt for configuration options.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create t3-app\n```\n\n----------------------------------------\n\nTITLE: Docker Ignore Configuration\nDESCRIPTION: Specifies files and directories to be excluded from the Docker build context\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/docker.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.env\nDockerfile\n.dockerignore\nnode_modules\nnpm-debug.log\nREADME.md\n.next\n.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Known Languages in TypeScript\nDESCRIPTION: Example of adding Spanish as a supported language by modifying the KNOWN_LANGUAGES map in the src/config.ts file.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/README.md#2025-04-20_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n// src/config.ts\n\nexport const KNOWN_LANGUAGES = {\n  English: 'en',\n+  Spanish: 'es',\n};\n```\n\n----------------------------------------\n\nTITLE: Installing T3 App with Bun\nDESCRIPTION: Command to create a new T3 Stack application using Bun runtime and package manager. This will launch an interactive CLI prompt for configuration options.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun create t3-app@latest\n```\n\n----------------------------------------\n\nTITLE: Installing T3 App with PNPM\nDESCRIPTION: Command to create a new T3 Stack application using PNPM package manager. This will launch an interactive CLI prompt for configuration options.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create t3-app@latest\n```\n\n----------------------------------------\n\nTITLE: Page Metadata Configuration in Markdown Frontmatter\nDESCRIPTION: Example of frontmatter in Markdown pages to configure title, description, and layout for documentation pages.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/README.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Example title\ndescription: Really cool docs example that uses Astro\nlayout: ../../layouts/MainLayout.astro\n---\n\n# Page content...\n```\n\n----------------------------------------\n\nTITLE: Installing create-t3-app with yarn\nDESCRIPTION: Command to install and run create-t3-app using yarn. This will initiate the interactive setup process for a new T3 Stack project.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create t3-app\n```\n\n----------------------------------------\n\nTITLE: Installing Create T3 App with bun\nDESCRIPTION: Command to scaffold a new T3 application using bun. This will launch the interactive CLI to set up your T3 application.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/installation.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun create t3-app@latest\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components in MDX with Astro\nDESCRIPTION: This code imports various UI components to enhance the documentation page. It imports a Callout component for displaying informational and warning messages, and a Form component that likely allows users to select different technology combinations.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/examples.mdx#2025-04-20_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Callout from \"../../components/docs/callout.tsx\";\nimport Form from \"../../components/docs/exampleOptionForm.astro\";\n```\n\n----------------------------------------\n\nTITLE: Installing create-t3-app with pnpm\nDESCRIPTION: Command to install and run create-t3-app using pnpm. This launches the CLI wizard for creating a new T3 Stack application.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create t3-app@latest\n```\n\n----------------------------------------\n\nTITLE: Vercel Deployment with Environment Variables\nDESCRIPTION: Command to deploy with environment variables and automatic confirmation of deployment options.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/vercel.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvercel --env DATABASE_URL=YOUR_DATABASE_URL_HERE --yes\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in MDX\nDESCRIPTION: This code snippet imports a custom Callout component to be used within the MDX content of the FAQ page.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/faq.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Callout from \"../../components/docs/callout.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Installing create-t3-app with bun\nDESCRIPTION: Command to install and run create-t3-app using bun. This starts the interactive process to scaffold a new T3 Stack project.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun create t3-app@latest\n```\n\n----------------------------------------\n\nTITLE: Importing Environment Variables to Netlify\nDESCRIPTION: Command to import environment variables from a local .env file to your Netlify project configuration.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/netlify.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nntl env:import .env\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Navigation in TypeScript\nDESCRIPTION: Example of configuring the sidebar navigation structure in the src/config.ts file. This defines section headers and page links to be displayed in the documentation sidebar.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config.ts\n\nexport const SIDEBAR = {\n  en: [\n    { text: \"Section Header\", header: true },\n    { text: \"Introduction\", link: \"en/introduction\" },\n    { text: \"Page 2\", link: \"en/page-2\" },\n    { text: \"Page 3\", link: \"en/page-3\" },\n\n    { text: \"Another Section\", header: true },\n    { text: \"Page 4\", link: \"en/page-4\" },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running Netlify Development Server\nDESCRIPTION: Command to start a local development server through Netlify CLI, which simulates the Netlify deployment environment.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/deployment/netlify.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nntl dev\n```\n\n----------------------------------------\n\nTITLE: Forking Repository with GitHub CLI\nDESCRIPTION: Command to fork the create-t3-app repository using GitHub CLI\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh repo fork t3-oss/create-t3-app\n```\n\n----------------------------------------\n\nTITLE: Traditional CSS Class Definition Example\nDESCRIPTION: Example showing how CSS is traditionally written in a separate file, defining a class with display, flex properties, background, border and padding.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/tailwind.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.my-class {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: #fff;\n  border: 1px solid #e2e8f0;\n  border-radius: 0.25rem;\n  padding: 1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository Locally\nDESCRIPTION: Command to clone the forked repository to local machine using GitHub CLI\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone <your-github-name>/create-t3-app\n```\n\n----------------------------------------\n\nTITLE: Example Prisma Schema Update\nDESCRIPTION: Added timestamp fields createdAt and updatedAt to the Example model in the Prisma schema\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Example {\n  // Existing fields\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm Package Manager\nDESCRIPTION: Command to globally install pnpm package manager using npm\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Installing Vercel CLI Globally\nDESCRIPTION: Command to install the Vercel CLI tool globally using npm.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/pt/deployment/vercel.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g vercel\n```\n\n----------------------------------------\n\nTITLE: Adding Changeset\nDESCRIPTION: Commands to create and commit a changeset for documenting changes\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/CONTRIBUTING.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add .changeset/*.md && git commit -m \"chore: add changeset\"\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install project dependencies using pnpm\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Pull Request\nDESCRIPTION: Command to create a new pull request using GitHub CLI\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/CONTRIBUTING.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngh pr create --web\n```\n\n----------------------------------------\n\nTITLE: Git Staging and Committing Changes\nDESCRIPTION: Command to stage and commit changes following conventional commit guidelines\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add <file> && git commit -m \"feat/fix/chore/docs: commit message\"\n```\n\n----------------------------------------\n\nTITLE: Importing crypto module in CLI\nDESCRIPTION: Added an import for crypto in the cli envVars.ts to support older node versions.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Patch Changes\n\n- [#2010](https://github.com/t3-oss/create-t3-app/pull/2010) [`12fccae15d08bc11168fe6b462d978a6787b5c7c`](https://github.com/t3-oss/create-t3-app/commit/12fccae15d08bc11168fe6b462d978a6787b5c7c) Thanks [@swyckoff](https://github.com/swyckoff)! - Added an import for crypto in the cli envVars.ts to support older node versions.\n```\n\n----------------------------------------\n\nTITLE: Rendering Callout Component with Info Type\nDESCRIPTION: This code snippet demonstrates the usage of the Callout component within the MDX content, providing additional information about the /app directory features in Next.js.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/faq.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"info\">\n  For a list of supported, planned, and worked on features in the `/app` dir,\n  visit the [beta Next.js\n  docs](https://beta.nextjs.org/docs/app-directory-roadmap#supported-and-planned-features).\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js and NextAuth versions\nDESCRIPTION: Update to Next.js 15 and NextAuth v5.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Minor Changes\n\n- [#2000](https://github.com/t3-oss/create-t3-app/pull/2000) [`41de302b5a76966741d1dc270ba5da27064f82e8`](https://github.com/t3-oss/create-t3-app/commit/41de302b5a76966741d1dc270ba5da27064f82e8) Thanks [@ronanru](https://github.com/ronanru)! - update to next.js 15 and next-auth v5\n```\n\n----------------------------------------\n\nTITLE: Changing Default Language Redirect in Astro\nDESCRIPTION: Example of modifying the default redirect path in src/pages/index.astro to use Spanish instead of English as the default language.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/README.md#2025-04-20_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n<script>\n- window.location.pathname = `/en/introduction`;\n+ window.location.pathname = `/es/introduction`;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Changing Drizzle with PostgreSQL to use identity columns\nDESCRIPTION: Modified Drizzle configuration with PostgreSQL to use identity columns.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#2002](https://github.com/t3-oss/create-t3-app/pull/2002) [`54b66484692b76d325f59dc233eb27e0aee59af2`](https://github.com/t3-oss/create-t3-app/commit/54b66484692b76d325f59dc233eb27e0aee59af2) Thanks [@devotoare](https://github.com/devotoare)! - Change drizzle with PostgresQL to use identity columns\n```\n\n----------------------------------------\n\nTITLE: Adding Multi-Language Support in Project Structure\nDESCRIPTION: Example showing how to extend the directory structure to support multiple languages by adding a Spanish (es) directory alongside the English (en) one.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/README.md#2025-04-20_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n 📂 src/pages\n ┣ 📂 en\n ┃ ┣ 📜 page-1.md\n ┃ ┣ 📜 page-2.md\n ┃ ┣ 📜 page-3.astro\n+ ┣ 📂 es\n+ ┃ ┣ 📜 page-1.md\n+ ┃ ┣ 📜 page-2.md\n+ ┃ ┣ 📜 page-3.astro\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Structured changelog entries documenting version changes, including patch changes, minor changes, and links to pull requests and commits\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/cli/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [`ab5fa95`](https://github.com/t3-oss/create-t3-app/commit/ab5fa95afce2a0feb8567aed6bb02beeef1401e5) Thanks [@juliusmarminge](https://github.com/juliusmarminge)! - chore: pin zod version\n\n- [#1835](https://github.com/t3-oss/create-t3-app/pull/1835) [`f66e30a`](https://github.com/t3-oss/create-t3-app/commit/f66e30a0c84eb4f74182d79b23e3c5e900788e10) Thanks [@Inshiku-Han](https://github.com/Inshiku-Han)! - Only install @trpc/next when router style is page router\n\n## 7.30.2\n```\n\n----------------------------------------\n\nTITLE: Importing Components for T3 Stack Project Display in Astro\nDESCRIPTION: This code snippet imports necessary components for displaying lists of open source apps and companies using the T3 stack, as well as a callout component for encouraging contributions.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/t3-collection.mdx#2025-04-20_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport OpenSourceAppList from \"../../components/docs/openSourceAppList.tsx\";\nimport CompanyList from \"../../components/docs/companyList.tsx\";\nimport Callout from \"../../components/docs/callout.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with Robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access the site and specifies the sitemap location. Includes an Algolia crawler verification string.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/public/robots.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Algolia-Crawler-Verif: 013A1A14AB9EE32B\n\nUser-agent: *\nAllow: /\nSitemap: https://create.t3.gg/sitemap-index.xml\n```\n\n----------------------------------------\n\nTITLE: Rendering Company List Component in Astro\nDESCRIPTION: This code snippet renders the CompanyList component, which displays a list of companies using the T3 stack for their applications.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/t3-collection.mdx#2025-04-20_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<CompanyList />\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Accent Color in CSS\nDESCRIPTION: Example of modifying the theme accent color in the public/theme.css file by changing the --theme-accent CSS variable from blue to red.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/README.md#2025-04-20_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n/* public/theme.css */\n\n:root {\n  color-scheme: light;\n-  --theme-accent: hsla(var(--color-blue), 1);\n+  --theme-accent: hsla(var(--color-red), 1);   /* or: hsla(#FF0000, 1); */\n```\n\n----------------------------------------\n\nTITLE: Importing Introduction Tab Component in JSX\nDESCRIPTION: Import statement for the IntroductionTab component used in the documentation page.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/introduction.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IntroductionTab } from \"../../components/docs/introductionTab\";\n\n<IntroductionTab client:load />\n```\n\n----------------------------------------\n\nTITLE: Decorative Quote Block Implementation in HTML/JSX\nDESCRIPTION: A styled blockquote component implementation using JSX/HTML with Tailwind CSS classes. Contains a quote about TypeScript with author attribution and styling.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/usage/typescript.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<blockquote className=\"w-full relative border-l-4 italic bg-t3-purple-200 dark:text-t3-purple-50 text-zinc-900 dark:bg-t3-purple-300/20 p-2 rounded-md text-sm my-3 border-neutral-500 quote\">\n  <div className=\"relative w-fit flex items-center justify-center p-1\">\n    <p className=\"mb-4 text-lg\">\n      <span aria-hidden=\"true\">&quot;</span>Build safety nets, not guard rails<span aria-hidden=\"true\">&quot;</span>\n    </p>\n  </div>\n  <cite className=\"flex items-center justify-end pr-4 pb-2\">\n    <img\n      alt=\"Avatar of @t3dotgg\"\n      className=\"w-12 rounded-full bg-neutral-500 [margin-inline-end:16px]\"\n      src=\"/images/theo_300x300.webp\"\n    />\n    <div className=\"flex flex-col items-start not-italic\">\n      <span className=\" text-sm font-semibold\">Theo - creator of the T3 Stack</span>\n      <a\n        href=\"https://twitter.com/t3dotgg\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"text-sm\"\n      >\n        @t3dotgg\n      </a>\n    </div>\n  </cite>\n</blockquote>\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple tRPC Routers into a Single App Router\nDESCRIPTION: This example shows how to combine multiple tRPC routers (users, posts, messages) into a single app router, and how to export the router type for client-side type inference.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/ja/usage/trpc.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst appRouter = createTRPCRouter({\n  users: userRouter,\n  posts: postRouter,\n  messages: messageRouter,\n});\n\nexport type AppRouter = typeof appRouter;\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration\nDESCRIPTION: ESLint configuration file for code linting and style enforcement.\nSOURCE: https://github.com/t3-oss/create-t3-app/blob/main/www/src/pages/en/folder-structure-pages.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n.eslintrc.cjs\n```"
  }
]