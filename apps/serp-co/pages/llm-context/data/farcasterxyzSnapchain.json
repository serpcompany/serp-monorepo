[
  {
    "owner": "farcasterxyz",
    "repo": "snapchain",
    "content": "TITLE: Setting up and Running a Snapchain Node with Docker\nDESCRIPTION: This snippet shows how to download the Snapchain Docker Compose file and start a node. The commands create a directory, download the configuration file from GitHub, and launch the Docker containers.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/getting-started.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir snapchain\ncd snapchain\nwget https://raw.githubusercontent.com/farcasterxyz/snapchain/refs/heads/main/docker-compose.mainnet.yml -O docker-compose.yml\ndocker compose up # -d to run in background, may need to run with sudo depending on your docker setup\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Casts via GRPC API\nDESCRIPTION: Uses the GRPC API method 'GetAllCastMessagesByFid' to query casts for a specific FID. This approach requires Snapchain to be installed from source and uses grpcurl with jq for filtering results.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/reading-messages.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext -proto src/proto/rpc.proto -import-path src/proto  -d '{\"fid\" : 1}' localhost:3383 HubService/GetAllCastMessagesByFid \\\n| jq \".messages[].data.castAddBody.text \\\n| select( . != null)\"\n```\n\n----------------------------------------\n\nTITLE: Paginated Data Retrieval in JavaScript\nDESCRIPTION: Example of implementing pagination in JavaScript to retrieve all casts for a specific FID. This code uses the nextPageToken from each response to fetch subsequent pages until all data is retrieved.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/httpapi.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from \"axios\";\n\nconst fid = 2;\nconst server = \"http://127.0.0.1:3381\";\n\nlet nextPageToken = \"\";\ndo {\n    const response = await axios.get(`${server}/v1/castsByFid?fid=${fid}&pageSize=100&nextPageToken=${nextPageToken}`);\n    // Process response....\n    nextPageToken = response.nextPageToken;\n} while (nextPageToken !== \"\")\n```\n\n----------------------------------------\n\nTITLE: Submitting Messages to Farcaster Snapchain\nDESCRIPTION: Implementation for submitting messages to Farcaster's Snapchain protocol. The code demonstrates setting a username and posting a cast using a Noble Ed25519 signer. It includes error handling for message creation and submission.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/writing-messages.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst submitMessage = async (resultPromise: HubAsyncResult<Message>) => {\n  const result = await resultPromise;\n  if (result.isErr()) {\n    throw new Error(`Error creating message: ${result.error}`);\n  }\n  const messageSubmitResult = await hubClient.submitMessage(result.value, metadata);\n  if (messageSubmitResult.isErr()) {\n    throw new Error(`Error submitting message to node: ${messageSubmitResult.error}`);\n  }\n};\n\nconst signer = new NobleEd25519Signer(signerPrivateKey);\nconst dataOptions = {\nfid: fid,\nnetwork: FC_NETWORK,\n};\nconst userDataPfpBody = {\ntype: UserDataType.USERNAME,\nvalue: fname,\n};\nawait submitMessage(makeUserDataAdd(userDataPfpBody, dataOptions, signer));\n\nawait submitMessage(\nmakeCastAdd(\n    {\n    text: \"Hello World!\",\n    embeds: [],\n    embedsDeprecated: [],\n    mentions: [],\n    mentionsPositions: [],\n    type: CastType.CAST,\n    },\n    dataOptions,\n    signer,\n));\n```\n\n----------------------------------------\n\nTITLE: Querying a Snapchain Node with gRPCurl\nDESCRIPTION: Command to query a Snapchain node using gRPCurl from within a Docker container. This demonstrates how to list available gRPC services.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec node1 grpcurl -import-path proto -proto proto/rpc.proto list\n```\n\n----------------------------------------\n\nTITLE: Calling API Using Curl Command\nDESCRIPTION: Example of using curl from the command line to retrieve casts for a specific Farcaster ID. This is useful for testing the API or integrating with shell scripts.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/httpapi.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/castsByFid?fid=2\n```\n\n----------------------------------------\n\nTITLE: Defining Message Structure in Protobuf\nDESCRIPTION: Specifies the structure of a Message in the Farcaster network, including fields for data, hash, signature, and related schemes.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Message {\n  MessageData data = 1;\n  bytes hash = 2;\n  HashScheme hash_scheme = 3;\n  bytes signature = 4;\n  SignatureScheme signature_scheme = 5;\n  bytes signer = 6;\n  bytes data_bytes = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Message with Authentication in JavaScript\nDESCRIPTION: This JavaScript example shows how to submit a message using axios with HTTP Basic Authentication. It encodes the message into a Buffer of bytes and sends it to the submitMessage endpoint with the appropriate content type.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/message.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from \"axios\";\n\nconst url = `http://127.0.0.1:3381/v1/submitMessage`;\n\nconst postConfig = {\n  headers: { \"Content-Type\": \"application/octet-stream\" },\n  auth: { username: \"username\", password: \"password\" },\n};\n\n// Encode the message into a Buffer (of bytes)\nconst messageBytes = Buffer.from(Message.encode(castAdd).finish());\n\ntry {\n  const response = await axios.post(url, messageBytes, postConfig);\n} catch (e) {\n  // handle errors...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cast Message Structure Definitions\nDESCRIPTION: Defines the structure for creating and removing Cast messages, including fields for embedded content, mentions, parent references, and text content.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CastAddBody {\n  repeated string embeds_deprecated = 1;\n  repeated uint64 mentions = 2;\n  CastId parent_cast_id = 3;\n  string parent_url = 4;\n  string text = 5;\n  repeated uint32 mentions_positions = 6;\n  repeated Embed embeds = 7;\n}\n\nmessage Embed {\n  string url = 1;\n  CastId cast_id = 2;\n}\n\nmessage CastRemoveBody {\n  bytes target_hash = 1;\n}\n\nmessage CastId {\n  uint64 fid = 1;\n  bytes hash = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Paying for Storage in Farcaster with TypeScript\nDESCRIPTION: Function to register a Farcaster ID (FID) and pay for storage. It checks if the account already has an FID, and if not, it registers a new one by making an onchain transaction to the ID Gateway contract. It also handles checking for sufficient funds.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/writing-messages.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getOrRegisterFid = async (): Promise<number> => {\n  const balance = await getBalance(walletClient, { address: account.address });\n  const existingFid = (await readContract(walletClient, {\n    ...IdContract,\n    functionName: \"idOf\",\n    args: [account.address],\n  })) as bigint;\n\n  console.log(`Using address: ${account.address} with balance: ${balance}, private key: ${accountPrivateKey}`);\n\n  if (balance === 0n && existingFid === 0n) {\n    throw new Error(\"No existing Fid and no funds to register an fid\");\n  }\n\n  if (existingFid > 0n) {\n    return parseInt(existingFid.toString());\n  }\n\n  const price = await readContract(walletClient, {\n    ...IdGateway,\n    functionName: \"price\",\n  });\n\n  if (balance < price) {\n    throw new Error(`Insufficient balance to rent storage, required: ${price}, balance: ${balance}`);\n  }\n\n  const { request: registerRequest } = await simulateContract(walletClient, {\n    ...IdGateway,\n    functionName: \"register\",\n    args: [RECOVERY_ADDRESS],\n    value: price,\n  });\n  const registerTxHash = await writeContract(walletClient, registerRequest);\n  const registerTxReceipt = await waitForTransactionReceipt(walletClient, { hash: registerTxHash });\n\n  if (registerTxReceipt.logs[0]) {\n    // Now extract the FID from the logs\n    const registerLog = decodeEventLog({\n      abi: idRegistryABI,\n      data: registerTxReceipt.logs[0].data,\n      topics: registerTxReceipt.logs[0].topics,\n    });\n\n    const fid = parseInt(registerLog.args[\"id\"]);\n    return fid;\n  } else {\n    throw new Error(\"Did not receive logs for registered fid\");\n  }\n};\n\nconst fid = await getOrRegisterFid();\n```\n\n----------------------------------------\n\nTITLE: Creating and Submitting a Message in Rust\nDESCRIPTION: This Rust example demonstrates how to manually construct a MessageData object, serialize it, compute the hash and signature, and submit it to the Hub. It uses ed25519-dalek for signing and reqwest for HTTP requests.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/message.md#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse ed25519_dalek::{SecretKey, Signer, SigningKey};\nuse hex::FromHex;\nuse reqwest::Client;\n\nuse message::{CastAddBody, FarcasterNetwork, MessageData};\nuse protobuf::Message;\n\n\n#[tokio::main]\nasync fn main() {\n    let fid = 6833; // FID of the user submitting the message\n    let network = FarcasterNetwork::FARCASTER_NETWORK_MAINNET;\n\n    // Construct the cast add message\n    let mut cast_add = CastAddBody::new();\n    cast_add.set_text(\"Welcome to Rust!\".to_string());\n\n    // Construct the cast add message data object\n    let mut msg_data = MessageData::new();\n    msg_data.set_field_type(message::MessageType::MESSAGE_TYPE_CAST_ADD);\n    msg_data.set_fid(fid);\n    msg_data.set_timestamp(\n        (std::time::SystemTime::now()\n            .duration_since(FARCASTER_EPOCH)\n            .unwrap()\n            .as_secs()) as u32,\n    );\n    msg_data.set_network(network);\n    msg_data.set_cast_add_body(cast_add);\n\n    let msg_data_bytes = msg_data.write_to_bytes().unwrap();\n\n    // Calculate the blake3 hash, trucated to 20 bytes\n    let hash = blake3::hash(&msg_data_bytes).as_bytes()[0..20].to_vec();\n\n    // Construct the actual message\n    let mut msg = message::Message::new();\n    msg.set_hash_scheme(message::HashScheme::HASH_SCHEME_BLAKE3);\n    msg.set_hash(hash);\n\n    // Sign the message. You need to use a signing key that corresponds to the FID you are adding.\n    // REPLACE THE PRIVATE KEY WITH YOUR OWN\n    let private_key = SigningKey::from_bytes(\n        &SecretKey::from_hex(\"0x...\").expect(\"Please provide a valid private key\"),\n    );\n    let signature = private_key.sign(&msg_data_bytes).to_bytes();\n\n    msg.set_signature_scheme(message::SignatureScheme::SIGNATURE_SCHEME_ED25519);\n    msg.set_signature(signature.to_vec());\n    msg.set_signer(private_key.verifying_key().to_bytes().to_vec());\n\n    // Serialize the message\n    msg.set_data_bytes(msg_data_bytes.to_vec());\n    let msg_bytes = msg.write_to_bytes().unwrap();\n\n    // Finally, submit the message to the network\n\n    // Create a reqwest Client\n    let client = Client::new();\n\n    // Define your endpoint URL\n    let url = \"http://127.0.0.1:3381/v1/submitMessage\";\n\n    // Make the POST request\n    let res = client\n        .post(url)\n        .header(\"Content-Type\", \"application/octet-stream\")\n        .body(msg_bytes)\n        .send()\n        .await\n        .unwrap();\n\n    // Check if it's success\n    if res.status().is_success() {\n        println!(\"Successfully sent the message.\");\n    } else {\n        println!(\"Failed to send the message. HTTP status: {}\", res.status());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reaction Message Structure Definitions\nDESCRIPTION: Defines the structure for reactions to casts, including the reaction type and target identification.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ReactionBody {\n  ReactionType type = 1;\n  CastId target_cast_id = 2;\n  string target_url = 3;\n}\n\nenum ReactionType {\n  REACTION_TYPE_NONE = 0;\n  REACTION_TYPE_LIKE = 1;\n  REACTION_TYPE_RECAST = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Signer Key to Farcaster Account in TypeScript\nDESCRIPTION: Function to add a signer key to the Farcaster key registry. If a private key is provided, it assumes the signer is already registered. Otherwise, it generates a new ED25519 keypair, signs the key request metadata with the custody address, and adds the key to the registry via an onchain transaction.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/writing-messages.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getOrRegisterSigner = async (fid: number) => {\n  if (SIGNER_PRIVATE_KEY !== zeroAddress) {\n    // If a private key is provided, we assume the signer is already in the key registry\n    const privateKeyBytes = fromHex(SIGNER_PRIVATE_KEY, \"bytes\");\n    const publicKeyBytes = ed25519.getPublicKey(privateKeyBytes);\n    return privateKeyBytes;\n  }\n\n  const privateKey = ed25519.utils.randomPrivateKey();\n  const publicKey = toHex(ed25519.getPublicKey(privateKey));\n\n  // To add a key, we need to sign the metadata with the fid of the app we're adding the key on behalf of\n  // We'll use our own fid and custody address for simplicity. This can also be a separate App specific fid.\n  const localAccount = toAccount(account);\n  const eip712signer = new ViemLocalEip712Signer(localAccount);\n  const metadata = await eip712signer.getSignedKeyRequestMetadata({\n    requestFid: BigInt(fid),\n    key: fromHex(publicKey, \"bytes\"),\n    deadline: BigInt(Math.floor(Date.now() / 1000) + 60 * 60), // 1 hour from now\n  });\n\n  const metadataHex = toHex(metadata.unwrapOr(new Uint8Array()));\n\n  const { request: signerAddRequest } = await simulateContract(walletClient, {\n    ...KeyContract,\n    functionName: \"add\",\n    args: [1, publicKey, 1, metadataHex], // keyType, publicKey, metadataType, metadata\n  });\n\n  const signerAddTxHash = await writeContract(walletClient, signerAddRequest);\n  await waitForTransactionReceipt(walletClient, { hash: signerAddTxHash });\n  await new Promise((resolve) => setTimeout(resolve, 30000));\n  return privateKey;\n};\n\n\nconst signer = await getOrRegisterSigner(fid);\n```\n\n----------------------------------------\n\nTITLE: Accessing API via Browser URL\nDESCRIPTION: Example of accessing the Snapchain API directly from a browser by simply entering the URL. This demonstrates how to view casts by a specific FID (Farcaster ID).\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/httpapi.mdx#2025-04-16_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttp://127.0.0.1:3381/v1/castsByFid?fid=2\n```\n\n----------------------------------------\n\nTITLE: Timestamp Filtering Example with Bash\nDESCRIPTION: Example of using timestamp filtering to retrieve casts within a specific time range. The endpoint accepts startTimestamp and stopTimestamp parameters to define the range.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/httpapi.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Get casts from FID 2 between timestamps 1000 and 2000\nhttp://127.0.0.1:3381/v1/castsByFid?fid=2&startTimestamp=1000&stopTimestamp=2000\n```\n\n----------------------------------------\n\nTITLE: Registering a Farcaster Username (fname) in TypeScript\nDESCRIPTION: Function to register a Farcaster username (fname) using the offchain fname registry. It first checks if the FID already has an fname, and if not, generates a default name based on the FID. It then creates an EIP-712 signature to prove ownership and sends a request to the fname registry API.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/writing-messages.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst registerFname = async (fid: number) => {\n  try {\n    // First check if this fid already has an fname\n    const response = await axios.get(`https://fnames.farcaster.xyz/transfers/current?fid=${fid}`);\n    const fname = response.data.transfer.username;\n    return fname;\n  } catch (e) {\n    // No username, ignore and continue with registering\n  }\n\n  const fname = `fid-${fid}`;\n  const timestamp = Math.floor(Date.now() / 1000);\n  const localAccount = toAccount(account);\n  const signer = new ViemLocalEip712Signer(localAccount as LocalAccount<string>);\n  const userNameProofSignature = await signer.signUserNameProofClaim(\n    makeUserNameProofClaim({\n      name: fname,\n      timestamp: timestamp,\n      owner: account.address,\n    }),\n  );\n\n  try {\n    const response = await axios.post(\"https://fnames.farcaster.xyz/transfers\", {\n      name: fname, // Name to register\n      from: 0, // Fid to transfer from (0 for a new registration)\n      to: fid, // Fid to transfer to (0 to unregister)\n      fid: fid, // Fid making the request (must match from or to)\n      owner: account.address, // Custody address of fid making the request\n      timestamp: timestamp, // Current timestamp in seconds\n      signature: bytesToHex(userNameProofSignature._unsafeUnwrap()), // EIP-712 signature signed by the current custody address of the fid\n    });\n    return fname;\n  } catch (e) {\n    // @ts-ignore\n    throw new Error(`Error registering fname: ${JSON.stringify(e.response.data)} (status: ${e.response.status})`);\n  }\n};\n\nconst fname = await registerFname(fid);\n```\n\n----------------------------------------\n\nTITLE: Querying Verifications by FID using cURL\nDESCRIPTION: This snippet demonstrates how to make a GET request to the verificationsByFid endpoint using cURL. It retrieves verifications for FID 2.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/verification.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/verificationsByFid?fid=2\n```\n\n----------------------------------------\n\nTITLE: Response JSON for reactionById Query\nDESCRIPTION: This JSON snippet shows the expected response format when querying a reaction by ID. It includes details about the reaction, such as type, creator FID, timestamp, and target cast information.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/reactions.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"MESSAGE_TYPE_REACTION_ADD\",\n    \"fid\": 2,\n    \"timestamp\": 72752656,\n    \"network\": \"FARCASTER_NETWORK_MAINNET\",\n    \"reactionBody\": {\n      \"type\": \"REACTION_TYPE_LIKE\",\n      \"targetCastId\": {\n        \"fid\": 1795,\n        \"hash\": \"0x7363f449bfb0e7f01c5a1cc0054768ed5146abc0\"\n      }\n    }\n  },\n  \"hash\": \"0x9fc9c51f6ea3acb84184efa88ba4f02e7d161766\",\n  \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n  \"signature\": \"F2OzKsn6Wj...gtyORbyCQ==\",\n  \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n  \"signer\": \"0x78ff9a7...647b6d62558c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Snapchain Node Using Docker Compose\nDESCRIPTION: Commands to set up and run a Snapchain node using Docker Compose. This creates a new node or upgrades an existing one, which will download historical snapshots to catch up to the latest state before beginning synchronization.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir snapchain\ncd snapchain\ndocker compose down # If you have a previous version running\nwget https://raw.githubusercontent.com/farcasterxyz/snapchain/refs/heads/main/docker-compose.mainnet.yml -O docker-compose.yml\ndocker compose up  # append -d to run in the background\n```\n\n----------------------------------------\n\nTITLE: Retrieving Casts by Mention using Farcaster API\nDESCRIPTION: Example of fetching casts that mention a specific FID via GET request to /v1/castsByMention endpoint\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/casts.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/castsByMention?fid=6833\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"data\": {\n        \"type\": \"MESSAGE_TYPE_CAST_ADD\",\n        \"fid\": 2,\n        \"timestamp\": 62298143,\n        \"network\": \"FARCASTER_NETWORK_MAINNET\",\n        \"castAddBody\": {\n          \"embedsDeprecated\": [],\n          \"mentions\": [15, 6833],\n          \"parentCastId\": {\n            \"fid\": 2,\n            \"hash\": \"0xd5540928cd3daf2758e501a61663427e41dcc09a\"\n          },\n          \"text\": \"cc  and \",\n          \"mentionsPositions\": [3, 8],\n          \"embeds\": []\n        }\n      },\n      \"hash\": \"0xc6d4607835197a8ee225e9218d41e38aafb12076\",\n      \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n      \"signature\": \"TOaWrSTmz+cyzPMFGvF...OeUznB0Ag==\",\n      \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n      \"signer\": \"0x78ff9a768c...647b6d62558c\"\n    }\n  ],\n  \"nextPageToken\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for linkById Endpoint in JSON\nDESCRIPTION: The expected JSON response when retrieving a specific link between two FIDs. The response includes the message data with link type, target FID, hash, signature, and other metadata.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/links.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"MESSAGE_TYPE_LINK_ADD\",\n    \"fid\": 6833,\n    \"timestamp\": 61144470,\n    \"network\": \"FARCASTER_NETWORK_MAINNET\",\n    \"linkBody\": {\n      \"type\": \"follow\",\n      \"targetFid\": 2\n    }\n  },\n  \"hash\": \"0x58c23eaf4f6e597bf3af44303a041afe9732971b\",\n  \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n  \"signature\": \"sMypYEMqSyY...nfCA==\",\n  \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n  \"signer\": \"0x0852c07b56...06e999cdd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Snapchain Node with Docker Compose\nDESCRIPTION: Commands to create a directory for Snapchain, download the Docker Compose configuration file, and start the node. This initializes and runs the Snapchain node using Docker Compose.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/running-a-node.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir snapchain\ncd snapchain\nwget https://raw.githubusercontent.com/farcasterxyz/snapchain/refs/heads/main/docker-compose.mainnet.yml -O docker-compose.yml\nsudo docker compose up # -d to run in background, if you set up rootless docker remove sudo\n```\n\n----------------------------------------\n\nTITLE: Querying Reactions by Cast using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to query all reactions to a specific cast using the reactionsByCast endpoint, specifying the target FID, reaction type, and target hash.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/reactions.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/reactionsByCast?target_fid=2&reaction_type=1&target_hash=0x7363f449bfb0e7f01c5a1cc0054768ed5146abc0\n```\n\n----------------------------------------\n\nTITLE: Example Response for linksByTargetFid Endpoint in JSON\nDESCRIPTION: The expected JSON response when retrieving all links to a specific target FID. The response includes an array of messages, each representing a link with its metadata, and a nextPageToken for pagination.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/links.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"data\": {\n        \"type\": \"MESSAGE_TYPE_LINK_ADD\",\n        \"fid\": 302,\n        \"timestamp\": 61144668,\n        \"network\": \"FARCASTER_NETWORK_MAINNET\",\n        \"linkBody\": {\n          \"type\": \"follow\",\n          \"targetFid\": 6833\n        }\n      },\n      \"hash\": \"0x78c62531d96088f640ffe7e62088b49749efe286\",\n      \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n      \"signature\": \"frIZJGIizv...qQd9QJyCg==\",\n      \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n      \"signer\": \"0x59a04...6860ddfab\"\n    }\n  ],\n  \"nextPageToken\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MessageData Structure in Protobuf\nDESCRIPTION: Specifies the structure of MessageData, which includes common fields for all Farcaster messages and a variable body based on the message type.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MessageData {\n  MessageType type = 1;\n  uint64 fid = 2;\n  uint32 timestamp = 3;\n  FarcasterNetwork network = 4;\n  oneof body {\n    CastAddBody cast_add_body = 5;\n    CastRemoveBody cast_remove_body = 6;\n    ReactionBody reaction_body = 7;\n    VerificationAddEthAddressBody verification_add_eth_address_body = 8;\n    VerificationRemoveBody verification_remove_body = 9;\n    UserDataBody user_data_body = 10;\n    LinkBody link_body = 11;\n    UserNameProof username_proof_body = 12;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying On-Chain ID Registry Event by Address using cURL\nDESCRIPTION: This snippet demonstrates how to use cURL to query the onChainIdRegistryEventByAddress endpoint. It retrieves on-chain events for a given Ethereum address.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/onchain.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/onChainIdRegistryEventByAddress?address=0x74232bf61e994655592747e20bdf6fa9b9476f79\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cast by ID using Farcaster API\nDESCRIPTION: Example of fetching a specific cast using its FID and hash via GET request to /v1/castById endpoint\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/casts.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/castById?fid=2&hash=0xd2b1ddc6c88e865a33cb1a565e0058d757042974\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"MESSAGE_TYPE_CAST_ADD\",\n    \"fid\": 2,\n    \"timestamp\": 48994466,\n    \"network\": \"FARCASTER_NETWORK_MAINNET\",\n    \"castAddBody\": {\n      \"embedsDeprecated\": [],\n      \"mentions\": [],\n      \"parentCastId\": {\n        \"fid\": 226,\n        \"hash\": \"0xa48dd46161d8e57725f5e26e34ec19c13ff7f3b9\"\n      },\n      \"text\": \"Cast Text\",\n      \"mentionsPositions\": [],\n      \"embeds\": []\n    }\n  },\n  \"hash\": \"0xd2b1ddc6c88e865a33cb1a565e0058d757042974\",\n  \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n  \"signature\": \"3msLXzxB4eEYe...dHrY1vkxcPAA==\",\n  \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n  \"signer\": \"0x78ff9a...58c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing API via JavaScript with Axios\nDESCRIPTION: Example of calling the Snapchain API from JavaScript using the axios library. This code fetches casts for a specific FID and accesses the returned data, with error handling included.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/httpapi.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from \"axios\";\n\nconst fid = 2;\nconst server = \"http://127.0.0.1:3381\";\n\ntry {\n    const response = await axios.get(`${server}/v1/castsByFid?fid=${fid}`);\n\n    console.log(`API Returned HTTP status ${response.status}`);\n    console.log(`First Cast's text is ${response.messages[0].data.castAddBody.text}`);\n} catch (e) {\n    // Handle errors\n    console.log(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying On-Chain Signers by FID using cURL\nDESCRIPTION: This snippet demonstrates how to use cURL to query the onChainSignersByFid endpoint. It retrieves a list of account keys (signers) provided by a specific FID.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/onchain.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/onChainSignersByFid?fid=6833\n```\n\n----------------------------------------\n\nTITLE: Retrieving Casts by Parent using Farcaster API\nDESCRIPTION: Example of fetching casts by parent cast's FID and hash via GET request to /v1/castsByParent endpoint\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/casts.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/castsByParent?fid=226&hash=0xa48dd46161d8e57725f5e26e34ec19c13ff7f3b9\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"data\": {\n        \"type\": \"MESSAGE_TYPE_CAST_ADD\",\n        \"fid\": 226,\n        \"timestamp\": 48989255,\n        \"network\": \"FARCASTER_NETWORK_MAINNET\",\n        \"castAddBody\": {\n          \"embedsDeprecated\": [],\n          \"mentions\": [],\n          \"parentCastId\": {\n            \"fid\": 226,\n            \"hash\": \"0xa48dd46161d8e57725f5e26e34ec19c13ff7f3b9\"\n          },\n          \"text\": \"Cast's Text\",\n          \"mentionsPositions\": [],\n          \"embeds\": []\n        }\n      },\n      \"hash\": \"0x0e501b359f88dcbcddac50a8f189260a9d02ad34\",\n      \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n      \"signature\": \"MjKnOQCTW42K8+A...tRbJfia2JJBg==\",\n      \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n      \"signer\": \"0x6f1e8758...7f04a3b500ba\"\n    }\n  ],\n  \"nextPageToken\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Casts via HTTP API\nDESCRIPTION: Uses the HTTP API endpoint 'castsByFid' to query all casts for a specific FID. The command uses jq to filter and display only the text content of each cast.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/reading-messages.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Default http port is 3381\n$ curl http://localhost:3381/v1/castsByFid\\?fid\\=1 \\\n| jq \".messages[].data.castAddBody.text \\\n| select( . != null)\"\n\"testing\"\n\"test\"\n\"another test\"\n\"another testy test\"\n```\n\n----------------------------------------\n\nTITLE: Querying On-Chain Events by FID using cURL\nDESCRIPTION: This snippet shows how to use cURL to query the onChainEventsByFid endpoint. It retrieves a list of on-chain events for a specific FID and event type.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/onchain.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/onChainEventsByFid?fid=3&event_type=1\n```\n\n----------------------------------------\n\nTITLE: Defining OnChainEvents API Methods\nDESCRIPTION: Specifies the main API methods available for querying on-chain events, including their request and response types. Each method serves a specific purpose in retrieving different types of on-chain events.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/onchain.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGetOnChainSigner                   | SignerRequest                   | OnChainEvent         \nGetOnChainSignersByFid             | FidRequest                      | OnChainEventResponse \nGetIdRegistryOnChainEvent          | FidRequest                      | OnChainEvent         \nGetIdRegistryOnChainEventByAddress | IdRegistryEventByAddressRequest | OnChainEvent         \nGetOnChainEvents                   | OnChainEventRequest             | OnChainEventResponse\n```\n\n----------------------------------------\n\nTITLE: Submitting a Message with cURL in Bash\nDESCRIPTION: This example shows how to submit a protobuf-serialized message to the Hub using cURL. The message is sent as binary data to the submitMessage endpoint with the content type set to application/octet-stream.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/message.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"http://127.0.0.1:3381/v1/submitMessage\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary \"@message.encoded.protobuf\"\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Event by ID with curl\nDESCRIPTION: Example curl command to fetch a specific Hub event using its ID from the /v1/eventById endpoint. This demonstrates how to query for event 350909155450880.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/events.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/eventById?id=350909155450880\n```\n\n----------------------------------------\n\nTITLE: Retrieving Links by Source FID using curl in Bash\nDESCRIPTION: An example of how to retrieve all links from a specific FID using the linksByFid endpoint. This request fetches all links originating from FID 6833.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/links.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/linksByFid?fid=6833\n```\n\n----------------------------------------\n\nTITLE: Setting Up Snapchain Data Replication to Postgres using Shuttle\nDESCRIPTION: A comprehensive bash script to clone the hub-monorepo, install dependencies, set up Postgres and Redis with Docker, start the worker for reconciliation/backfill, initiate the backfill process, and sync messages from the event stream.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/syncing-to-db.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:farcasterxyz/hub-monorepo.git\n\n# Ensure you have node 21 installed, use nvm to install it\nnvm install 21\n\n# If necessary, build packages/core dependency\n( cd packages/core && yarn install && yarn build; )\n\n# If necessary, build packages/hub-nodejs dependency\n( cd packages/hub-nodejs && yarn install && yarn build; )\n\n# Do remainder within the packages/shuttle directory\ncd packages/shuttle\nyarn install && yarn build\n\n# Start the db dependencies\ndocker compose up postgres redis\n\n# To perform reconciliation/backfill, start the worker (can run multiple processes to speed this up)\nPOSTGRES_URL=postgres://shuttle:password@0.0.0.0:6541 REDIS_URL=0.0.0.0:16379 HUB_HOST=<host>:<port> HUB_SSL=false yarn start worker\n\n# Kick off the backfill process (configure with MAX_FID=100 or BACKFILL_FIDS=1,2,3)\nPOSTGRES_URL=postgres://shuttle:password@0.0.0.0:6541 REDIS_URL=0.0.0.0:16379 HUB_HOST=<host>:<port> HUB_SSL=false yarn start backfill\n\n# Start the app and sync messages from the event stream\nPOSTGRES_URL=postgres://shuttle:password@0.0.0.0:6541 REDIS_URL=0.0.0.0:16379 HUB_HOST=<host>:<port> HUB_SSL=false yarn start start\n```\n\n----------------------------------------\n\nTITLE: Querying UserData by FID using cURL\nDESCRIPTION: Example of how to fetch user profile data for a specific FID using the userDataByFid endpoint. This example retrieves the profile picture (type 1) for FID 6833.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/userdata.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/userDataByFid?fid=6833&user_data_type=1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Links by Target FID using curl in Bash\nDESCRIPTION: An example of how to retrieve all links to a specific target FID using the linksByTargetFid endpoint. This request fetches all links targeting FID 6833.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/links.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/linksByTargetFid?target_fid=6833\n```\n\n----------------------------------------\n\nTITLE: Defining MessageType Enum in Protobuf\nDESCRIPTION: Enumerates the various types of messages in the Farcaster network, including casts, reactions, verifications, and user data.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nenum MessageType {\n  MESSAGE_TYPE_NONE = 0;\n  MESSAGE_TYPE_CAST_ADD = 1;\n  MESSAGE_TYPE_CAST_REMOVE = 2;\n  MESSAGE_TYPE_REACTION_ADD = 3;\n  MESSAGE_TYPE_REACTION_REMOVE = 4;\n  MESSAGE_TYPE_LINK_ADD = 5;\n  MESSAGE_TYPE_LINK_REMOVE = 6;\n  MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS = 7;\n  MESSAGE_TYPE_VERIFICATION_REMOVE = 8;\n  MESSAGE_TYPE_USER_DATA_ADD = 11;\n  MESSAGE_TYPE_USERNAME_PROOF = 12;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for events Request\nDESCRIPTION: Example JSON response from the events endpoint showing the structure of a paginated events response. The response includes a nextPageEventId for pagination and an array of events with their details.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/events.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nextPageEventId\": 350909170294785,\n  \"events\": [\n    {\n      \"type\": \"HUB_EVENT_TYPE_MERGE_USERNAME_PROOF\",\n      \"id\": 350909155450880,\n      \"mergeUsernameProofBody\": {\n        \"usernameProof\": {\n          \"timestamp\": 1695049760,\n          \"name\": \"nftonyp\",\n          \"owner\": \"0x23b3c29900762a70def5dc8890e09dc9019eb553\",\n          \"signature\": \"xp41PgeOz...9Jw5vT/eLnGphJpNshw=\",\n          \"fid\": 20114,\n          \"type\": \"USERNAME_TYPE_FNAME\"\n        }\n      }\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Page of Events with curl\nDESCRIPTION: Example curl command to fetch a page of Hub events starting from a specific event ID using the /v1/events endpoint. This demonstrates paging through events starting from ID 350909155450880.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/events.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/events?from_event_id=350909155450880\n```\n\n----------------------------------------\n\nTITLE: Monitoring Snapchain Node Status\nDESCRIPTION: Command to check the status of your Snapchain node using the API. This retrieves the node information in JSON format and pipes it through jq for prettier output.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/running-a-node.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:3381/v1/info | jq\n```\n\n----------------------------------------\n\nTITLE: Response JSON for reactionsByCast Query\nDESCRIPTION: This JSON snippet shows the expected response format when querying reactions by cast. It includes an array of reaction messages and a nextPageToken for pagination.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/reactions.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"data\": {\n        \"type\": \"MESSAGE_TYPE_REACTION_ADD\",\n        \"fid\": 426,\n        \"timestamp\": 72750141,\n        \"network\": \"FARCASTER_NETWORK_MAINNET\",\n        \"reactionBody\": {\n          \"type\": \"REACTION_TYPE_LIKE\",\n          \"targetCastId\": {\n            \"fid\": 1795,\n            \"hash\": \"0x7363f449bfb0e7f01c5a1cc0054768ed5146abc0\"\n          }\n        }\n      },\n      \"hash\": \"0x7662fba1be3166fc75acc0914a7b0e53468d5e7a\",\n      \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n      \"signature\": \"tmAUEYlt/+...R7IO3CA==\",\n      \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n      \"signer\": \"0x13dd2...204e57bc2a\"\n    }\n  ],\n  \"nextPageToken\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Farcaster IDs using the Fids API\nDESCRIPTION: Example of how to make a request to the Fids API endpoint to retrieve a list of all Farcaster IDs (FIDs). The endpoint accepts no parameters and returns a JSON object containing an array of FIDs and a pagination token.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/fids.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/fids\n```\n\n----------------------------------------\n\nTITLE: SubmitMessage JSON Response Format\nDESCRIPTION: The JSON response structure returned after successfully submitting a message to the Hub. It includes message data, hash, signature details, and signer information.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/message.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"MESSAGE_TYPE_CAST_ADD\",\n    \"fid\": 2,\n    \"timestamp\": 48994466,\n    \"network\": \"FARCASTER_NETWORK_MAINNET\",\n    \"castAddBody\": {\n      \"embedsDeprecated\": [],\n      \"mentions\": [],\n      \"parentCastId\": {\n        \"fid\": 226,\n        \"hash\": \"0xa48dd46161d8e57725f5e26e34ec19c13ff7f3b9\"\n      },\n      \"text\": \"Cast Text\",\n      \"mentionsPositions\": [],\n      \"embeds\": []\n    }\n  },\n  \"hash\": \"0xd2b1ddc6c88e865a33cb1a565e0058d757042974\",\n  \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n  \"signature\": \"3msLXzxB4eEYe...dHrY1vkxcPAA==\",\n  \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n  \"signer\": \"0x78ff9a...58c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response JSON for reactionsByTarget Query\nDESCRIPTION: This JSON snippet demonstrates the expected response format when querying reactions by target URL. It includes an array of reaction messages and a nextPageToken for pagination.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/reactions.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"data\": {\n        \"type\": \"MESSAGE_TYPE_REACTION_ADD\",\n        \"fid\": 1134,\n        \"timestamp\": 79752856,\n        \"network\": \"FARCASTER_NETWORK_MAINNET\",\n        \"reactionBody\": {\n          \"type\": \"REACTION_TYPE_LIKE\",\n          \"targetUrl\": \"chain://eip155:1/erc721:0x39d89b649ffa044383333d297e325d42d31329b2\"\n        }\n      },\n      \"hash\": \"0x94a0309cf11a07b95ace71c62837a8e61f17adfd\",\n      \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n      \"signature\": \"+f/+M...0Uqzd0Ag==\",\n      \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n      \"signer\": \"0xf6...3769198d4c\"\n    }\n  ],\n  \"nextPageToken\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Farcaster Hub Info with Database Stats in Bash\nDESCRIPTION: This example demonstrates how to request Hub information with database statistics enabled by using the optional dbstats parameter set to 1.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/info.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/info?dbstats=1\n```\n\n----------------------------------------\n\nTITLE: UserData API Response Format\nDESCRIPTION: Example JSON response structure returned by the UserData API. Shows the message type, FID, timestamp, network, user data body, and cryptographic verification details including hash and signature information.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/userdata.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"MESSAGE_TYPE_USER_DATA_ADD\",\n    \"fid\": 6833,\n    \"timestamp\": 83433831,\n    \"network\": \"FARCASTER_NETWORK_MAINNET\",\n    \"userDataBody\": {\n      \"type\": \"USER_DATA_TYPE_PFP\",\n      \"value\": \"https://i.imgur.com/HG54Hq6.png\"\n    }\n  },\n  \"hash\": \"0x327b8f47218c369ae01cc453cc23efc79f10181f\",\n  \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n  \"signature\": \"XITQZD7q...LdAlJ9Cg==\",\n  \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n  \"signer\": \"0x0852...6e999cdd\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Verifications API\nDESCRIPTION: This snippet shows the expected JSON response structure from the verificationsByFid endpoint. It includes an array of verification messages and a nextPageToken for pagination.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/verification.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"data\": {\n        \"type\": \"MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS\",\n        \"fid\": 2,\n        \"timestamp\": 73244540,\n        \"network\": \"FARCASTER_NETWORK_MAINNET\",\n        \"verificationAddEthAddressBody\": {\n          \"address\": \"0x91031dcfdea024b4d51e775486111d2b2a715871\",\n          \"ethSignature\": \"tyxj1...x1cYzhyxw=\",\n          \"blockHash\": \"0xd74860c4bbf574d5ad60f03a478a30f990e05ac723e138a5c860cdb3095f4296\"\n        }\n      },\n      \"hash\": \"0xa505331746ec8c5110a94bdb098cd964e43a8f2b\",\n      \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n      \"signature\": \"bln1zIZM.../4riB9IVBQ==\",\n      \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n      \"signer\": \"0x78ff9...b6d62558c\"\n    }\n  ],\n  \"nextPageToken\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Link by ID using curl in Bash\nDESCRIPTION: An example of how to retrieve a specific link between two FIDs using the linkById endpoint. This request fetches a follow relationship from FID 6833 to FID 2.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/links.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/linkById?fid=6833&target_fid=2&link_type=follow\n```\n\n----------------------------------------\n\nTITLE: Building Snapchain from Source\nDESCRIPTION: Instructions for cloning the repository and its dependencies, then building the Snapchain application. This requires cloning eth-signature-verifier and malachite repositories with specific checkout parameters before building Snapchain.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:CassOnMars/eth-signature-verifier.git\ngit clone git@github.com:informalsystems/malachite.git\ncd malachite\ngit checkout 13bca14cd209d985c3adf101a02924acde8723a5\ncd ..\ngit clone git@github.com:farcasterxyz/snapchain.git\ncd snapchain\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Response Format for On-Chain Events Query\nDESCRIPTION: This JSON snippet illustrates the expected response format when querying on-chain events. It includes details about the event, such as the block information, transaction hash, and signer event body.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/onchain.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"events\": [\n    {\n      \"type\": \"EVENT_TYPE_SIGNER\",\n      \"chainId\": 10,\n      \"blockNumber\": 108875456,\n      \"blockHash\": \"0x75fbbb8b2a4ede67ac350e1b0503c6a152c0091bd8e3ef4a6927d58e088eae28\",\n      \"blockTimestamp\": 1693349689,\n      \"transactionHash\": \"0x36ef79e6c460e6ae251908be13116ff0065960adb1ae032b4cc65a8352f28952\",\n      \"logIndex\": 2,\n      \"fid\": 3,\n      \"signerEventBody\": {\n        \"key\": \"0xc887f5bf385a4718eaee166481f1832198938cf33e98a82dc81a0b4b81ffe33d\",\n        \"keyType\": 1,\n        \"eventType\": \"SIGNER_EVENT_TYPE_ADD\",\n        \"metadata\": \"AAAAAAAAA...AAAAA\",\n        \"metadataType\": 1\n      },\n      \"txIndex\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FidsResponse Structure in Markdown\nDESCRIPTION: Describes the structure of the FidsResponse, including an array of fids and a token for pagination.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/fids.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Field           | Type            | Label    | Description   |\n| --------------- | --------------- | -------- | ------------- |\n| fids            | [uint64](#)     | repeated | Array of fids |\n| next_page_token | [bytes](#bytes) | optional |               |\n```\n\n----------------------------------------\n\nTITLE: Querying Reaction by ID using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to query a reaction by its creator's FID, target FID, target hash, and reaction type using the reactionById endpoint.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/reactions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/reactionById?fid=2&reaction_type=1&target_fid=1795&target_hash=0x7363f449bfb0e7f01c5a1cc0054768ed5146abc0\n```\n\n----------------------------------------\n\nTITLE: Farcaster Hub Info API Response Format in JSON\nDESCRIPTION: The JSON response structure from the Info API endpoint that provides version information, sync status, nickname, root hash, database statistics, peer ID, and hub operator FID.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/info.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.5.5\",\n  \"isSyncing\": false,\n  \"nickname\": \"Farcaster Hub\",\n  \"rootHash\": \"fa349603a6c29d27041225261891bc9bc846bccb\",\n  \"dbStats\": {\n    \"numMessages\": 4191203,\n    \"numFidEvents\": 20287,\n    \"numFnameEvents\": 20179\n  },\n  \"peerId\": \"12D3KooWNr294AH1fviDQxRmQ4K79iFSGoRCWzGspVxPprJUKN47\",\n  \"hubOperatorFid\": 6833\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Link Request Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of a Link Request object, specifying the fields required to request a specific Link relationship between users.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/links.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      | Type        | Label | Description                                     |\n| ---------- | ----------- | ----- | ----------------------------------------------- |\n| fid        | [uint64](#) |       | Farcaster ID of the user who generated the Link |\n| link_type  | [string](#) |       | Type of the Link being requested                |\n| target_fid | [uint64](#) |       | Fid of the target                               |\n```\n\n----------------------------------------\n\nTITLE: Querying Reactions by FID using cURL in Bash\nDESCRIPTION: This snippet shows how to query all reactions by a specific FID and reaction type using the reactionsByFid endpoint.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/reactions.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/reactionsByFid?fid=2&reaction_type=1\n```\n\n----------------------------------------\n\nTITLE: Fids API Response Format\nDESCRIPTION: Example response format from the Fids API endpoint. The response is a JSON object containing an array of Farcaster IDs (FIDs) and a nextPageToken for pagination.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/fids.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fids\": [1, 2, 3, 4, 5, 6],\n  \"nextPageToken\": \"AAAnEA==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FidTimestampRequest Structure in Markdown\nDESCRIPTION: This snippet details the structure of a FidTimestampRequest object, used for retrieving Links with optional timestamp filtering, pagination, and ordering parameters.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/links.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Field            | Type              | Label    | Description                                    |\n| ---------------- | ----------------- | -------- | ---------------------------------------------- |\n| fid              | [uint64](#uint64) |          | Farcaster ID                                   |\n| page_size        | [uint32](#uint32) | optional | Number of results to return per page           |\n| page_token       | [bytes](#bytes)   | optional | Token for pagination                           |\n| reverse          | [bool](#bool)     | optional | Whether to return results in reverse order     |\n| start_timestamp  | [uint64](#uint64) | optional | Optional timestamp to start filtering from     |\n| stop_timestamp   | [uint64](#uint64) | optional | Optional timestamp to stop filtering at        |\n```\n\n----------------------------------------\n\nTITLE: Response JSON for reactionsByFid Query\nDESCRIPTION: This JSON snippet demonstrates the expected response format when querying reactions by FID. It includes an array of reaction messages and a nextPageToken for pagination.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/reactions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"data\": {\n        \"type\": \"MESSAGE_TYPE_REACTION_ADD\",\n        \"fid\": 2,\n        \"timestamp\": 72752656,\n        \"network\": \"FARCASTER_NETWORK_MAINNET\",\n        \"reactionBody\": {\n          \"type\": \"REACTION_TYPE_LIKE\",\n          \"targetCastId\": {\n            \"fid\": 1795,\n            \"hash\": \"0x7363f449bfb0e7f01c5a1cc0054768ed5146abc0\"\n          }\n        }\n      },\n      \"hash\": \"0x9fc9c51f6ea3acb84184efa88ba4f02e7d161766\",\n      \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n      \"signature\": \"F2OzKsn6WjP8MTw...hqUbrAvp6mggtyORbyCQ==\",\n      \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n      \"signer\": \"0x78ff9a768...62558c\"\n    }\n  ],\n  \"nextPageToken\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Limits JSON Response Structure\nDESCRIPTION: This JSON response shows the structure of storage limits data returned by the API. It includes limits for different store types such as casts, links, reactions, user data, username proofs, and verifications.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/storagelimits.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limits\": [\n    {\n      \"storeType\": \"STORE_TYPE_CASTS\",\n      \"limit\": 10000\n    },\n    {\n      \"storeType\": \"STORE_TYPE_LINKS\",\n      \"limit\": 5000\n    },\n    {\n      \"storeType\": \"STORE_TYPE_REACTIONS\",\n      \"limit\": 5000\n    },\n    {\n      \"storeType\": \"STORE_TYPE_USER_DATA\",\n      \"limit\": 100\n    },\n    {\n      \"storeType\": \"STORE_TYPE_USERNAME_PROOFS\",\n      \"limit\": 10\n    },\n    {\n      \"storeType\": \"STORE_TYPE_VERIFICATIONS\",\n      \"limit\": 50\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Verification Request Fields in Markdown\nDESCRIPTION: This snippet describes the fields required for a Verification Request, including the Farcaster ID and Ethereum Address being verified.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/verification.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Field   | Type        | Label | Description                                             |\n| ------- | ----------- | ----- | ------------------------------------------------------- |\n| fid     | [uint64](#) |       | Farcaster ID of the user who generated the Verification |\n| address | [bytes](#)  |       | Ethereum Address being verified                         |\n```\n\n----------------------------------------\n\nTITLE: Querying Reactions by Target URL using cURL in Bash\nDESCRIPTION: This snippet shows how to query all reactions to a cast's target URL using the reactionsByTarget endpoint, specifying the URL and optionally the reaction type.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/reactions.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/reactionsByTarget?url=chain://eip155:1/erc721:0x39d89b649ffa044383333d297e325d42d31329b2\n```\n\n----------------------------------------\n\nTITLE: Username Proof Response Structure (JSON)\nDESCRIPTION: This snippet shows the structure of the JSON response returned by the userNameProofByName endpoint. It includes fields such as timestamp, name, owner, signature, fid, and type.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/usernameproof.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": 1670603245,\n  \"name\": \"adityapk\",\n  \"owner\": \"Oi7uUaECifDm+larm+rzl3qQhcM=\",\n  \"signature\": \"fo5OhBP/ud...3IoJdhs=\",\n  \"fid\": 6833,\n  \"type\": \"USERNAME_TYPE_FNAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FidTimestampRequest Fields in Markdown\nDESCRIPTION: This snippet outlines the fields for an FidTimestampRequest, which includes parameters for pagination, ordering, and timestamp filtering when retrieving verification messages.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/verification.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Field            | Type              | Label    | Description                                    |\n| ---------------- | ----------------- | -------- | ---------------------------------------------- |\n| fid              | [uint64](#uint64) |          | Farcaster ID                                   |\n| page_size        | [uint32](#uint32) | optional | Number of results to return per page           |\n| page_token       | [bytes](#bytes)   | optional | Token for pagination                           |\n| reverse          | [bool](#bool)     | optional | Whether to return results in reverse order     |\n| start_timestamp  | [uint64](#uint64) | optional | Optional timestamp to start filtering from     |\n| stop_timestamp   | [uint64](#uint64) | optional | Optional timestamp to stop filtering at        |\n```\n\n----------------------------------------\n\nTITLE: ReactionsByTarget Request Structure Definition - Protobuf\nDESCRIPTION: Defines the data structure for requesting reactions by target (cast ID or URL). Includes pagination and filtering options.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/reactions.md#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ReactionsByTargetRequest {\n  CastId target_cast_id = 1; // optional\n  string target_url = 2; // optional\n  ReactionType reaction_type = 3; // optional\n  uint32 page_size = 4; // optional\n  bytes page_token = 5; // optional\n  bool reverse = 6; // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example with Curl\nDESCRIPTION: Example of an error response when making an invalid API request. The response includes error codes, details, and metadata that can be used for debugging and error handling.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/httpapi.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ curl \"http://127.0.0.1:3381/v1/castById?fid=invalid\"\n{\n  \"errCode\": \"bad_request.validation_failure\",\n  \"presentable\": false,\n  \"name\": \"HubError\",\n  \"code\": 3,\n  \"details\": \"fid must be an integer\",\n  \"metadata\": {\n    \"errcode\": [\n      \"bad_request.validation_failure\",\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: FidTimestampRequest Structure - Protobuf\nDESCRIPTION: Defines the request structure for filtered user data queries, including pagination and timestamp range parameters.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/userdata.md#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage FidTimestampRequest {\n  uint64 fid = 1;\n  optional uint32 page_size = 2;\n  optional bytes page_token = 3;\n  optional bool reverse = 4;\n  optional uint64 start_timestamp = 5;\n  optional uint64 stop_timestamp = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for linksByFid Endpoint in JSON\nDESCRIPTION: The expected JSON response when retrieving all links from a specific FID. The response includes an array of messages, each representing a link with its metadata, and a nextPageToken for pagination.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/links.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"data\": {\n        \"type\": \"MESSAGE_TYPE_LINK_ADD\",\n        \"fid\": 6833,\n        \"timestamp\": 61144470,\n        \"network\": \"FARCASTER_NETWORK_MAINNET\",\n        \"linkBody\": {\n          \"type\": \"follow\",\n          \"targetFid\": 83\n        }\n      },\n      \"hash\": \"0x094e35891519c0e04791a6ba4d2eb63d17462f02\",\n      \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n      \"signature\": \"qYsfX08mS...McYq6IYMl+ECw==\",\n      \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n      \"signer\": \"0x0852c0...a06e999cdd\"\n    }\n  ],\n  \"nextPageToken\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Methods Table in Markdown\nDESCRIPTION: A markdown table defining the API methods, their request and response types, and brief descriptions for the Metadata API.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/metadata.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Method Name             | Request Type            | Response Type            | Description                               |\n| ----------------------- | ----------------------- | ------------------------ | ----------------------------------------- |\n| GetInfo                 | GetInfoRequest          | GetInfoResponse          | Returns metadata about the node's state   |\n| GetTrieMetadataByPrefix | TrieNodeMetadataRequest | TrieNodeMetadataResponse | Get trie metadata for a particular prefix |\n```\n\n----------------------------------------\n\nTITLE: Defining BlocksRequest Message in Protobuf\nDESCRIPTION: Specifies the fields for the BlocksRequest message, including shard_id, start_block_number, and optional stop_block_number.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/blocks.md#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n| Field              | Type              | Label    | Description                              |\n| ------------------ | ----------------- | -------- | ---------------------------------------- |\n| shard_id           | [uint32](#uint32) |          | ID of the shard to get blocks from       |\n| start_block_number | [uint64](#uint64) |          | Block number to start from (inclusive)   |\n| stop_block_number  | [uint64](#uint64) | optional | Block number to stop at (inclusive)      |\n```\n\n----------------------------------------\n\nTITLE: Monitoring Snapchain Node Sync Status\nDESCRIPTION: This command checks the synchronization status of your Snapchain node. It uses curl to query the node's API and jq to format the JSON response. The blockDelay value indicates how far behind the node is from the latest block.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/getting-started.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:3381/v1/info | jq\n```\n\n----------------------------------------\n\nTITLE: Message API Endpoints Table\nDESCRIPTION: Table showing the available API methods, their request and response types, and descriptions for the Message API.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/message.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Method Name     | Request Type | Response Type      | Description                                                   |\n| --------------- | ------------ | ------------------ | ------------------------------------------------------------- |\n| SubmitMessage   | Message      | Message            | Submits a Message to the node                                 |\n| ValidateMessage | Message      | ValidationResponse | Validates a Message on the node without merging and gossiping |\n```\n\n----------------------------------------\n\nTITLE: Defining ShardChunksRequest Message in Protobuf\nDESCRIPTION: Specifies the fields for the ShardChunksRequest message, including shard_id, start_block_number, and optional stop_block_number.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/blocks.md#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n| Field              | Type              | Label    | Description                              |\n| ------------------ | ----------------- | -------- | ---------------------------------------- |\n| shard_id           | [uint32](#uint32) |          | ID of the shard to get chunks from       |\n| start_block_number | [uint64](#uint64) |          | Block number to start from (inclusive)   |\n| stop_block_number  | [uint64](#uint64) | optional | Block number to stop at (inclusive)      |\n```\n\n----------------------------------------\n\nTITLE: Username Proofs by FID Response Structure (JSON)\nDESCRIPTION: This snippet shows the structure of the JSON response returned by the userNameProofsByFid endpoint. It includes an array of proofs, each containing fields such as timestamp, name, owner, signature, fid, and type.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/usernameproof.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proofs\": [\n    {\n      \"timestamp\": 1623910393,\n      \"name\": \"v\",\n      \"owner\": \"0x4114e33eb831858649ea3702e1c9a2db3f626446\",\n      \"signature\": \"bANBae+Ub...kr3Bik4xs=\",\n      \"fid\": 2,\n      \"type\": \"USERNAME_TYPE_FNAME\"\n    },\n    {\n      \"timestamp\": 1690329118,\n      \"name\": \"varunsrin.eth\",\n      \"owner\": \"0x182327170fc284caaa5b1bc3e3878233f529d741\",\n      \"signature\": \"zCEszPt...zqxTiFqVBs=\",\n      \"fid\": 2,\n      \"type\": \"USERNAME_TYPE_ENS_L1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blocks API Methods in Protobuf\nDESCRIPTION: Specifies the API methods for retrieving blocks and shard chunks, including their request and response types.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/blocks.md#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n| Method Name     | Request Type         | Response Type        | Description                                     |\n| --------------- | -------------------- | -------------------- | ----------------------------------------------- |\n| GetBlocks       | BlocksRequest        | stream Block         | Returns a stream of blocks for a given shard    |\n| GetShardChunks  | ShardChunksRequest   | ShardChunksResponse  | Returns chunks of serialized block data         |\n```\n\n----------------------------------------\n\nTITLE: Defining ShardChunksResponse Message in Protobuf\nDESCRIPTION: Specifies the field for the ShardChunksResponse message, which contains an array of shard chunks.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/blocks.md#2025-04-16_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n| Field        | Type                | Label    | Description             |\n| ------------ | ------------------- | -------- | ----------------------- |\n| shard_chunks | [ShardChunk](#)     | repeated | Array of shard chunks   |\n```\n\n----------------------------------------\n\nTITLE: Querying Username Proofs by FID (Bash)\nDESCRIPTION: This snippet demonstrates how to use the userNameProofsByFid endpoint to retrieve a list of proofs for a given FID. It includes the curl command to make the API request.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/usernameproof.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/userNameProofsByFid?fid=2\n```\n\n----------------------------------------\n\nTITLE: Defining Fids API Method in Markdown\nDESCRIPTION: Specifies the GetFids method for the Fids API, including request type, response type, and a brief description of its functionality.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/fids.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Method Name | Request Type | Response Type | Description                          |\n| ----------- | ------------ | ------------- | ------------------------------------ |\n| GetFids     | FidsRequest  | FidsResponse  | Returns a paginated list of all fids |\n```\n\n----------------------------------------\n\nTITLE: ValidationResponse Structure Table\nDESCRIPTION: Table defining the structure of the ValidationResponse object, including field types and descriptions.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/message.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Field   | Type    | Label | Description                                   |\n| ------- | ------- | ----- | --------------------------------------------- |\n| valid   | boolean |       | Whether the message is valid or not           |\n| message | Message |       | The message being validated (same as request) |\n```\n\n----------------------------------------\n\nTITLE: Querying for a User's FID with cURL\nDESCRIPTION: Makes a request to the Farcaster names service to get the FID associated with a username. The result includes a 'to' field containing the FID.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/reading-messages.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://fnames.farcaster.xyz/transfers?name=<username>\n```\n\n----------------------------------------\n\nTITLE: UserData Request Structure - Protobuf\nDESCRIPTION: Defines the structure for requesting user data, including the Farcaster ID (fid) and the type of user data being requested.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/userdata.md#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage UserDataRequest {\n  uint64 fid = 1;\n  UserDataType user_data_type = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TrieNodeMetadataRequest Structure in Markdown\nDESCRIPTION: A markdown table describing the TrieNodeMetadataRequest structure, which specifies the shard ID and prefix for retrieving trie metadata.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/metadata.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Field    | Type              | Label | Description                  |\n| -------- | ----------------- | ----- | ---------------------------- |\n| shard_id | [uint32](#uint32) |       | Shard ID to get metadata for |\n| prefix   | [bytes](#bytes)   |       | Prefix to get metadata for   |\n```\n\n----------------------------------------\n\nTITLE: Defining UserDataBody Structure in Protobuf\nDESCRIPTION: Specifies the structure of UserDataBody, which represents user metadata in the Farcaster network.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage UserDataBody {\n  UserDataType type = 1;\n  string value = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Reaction Request Structure Definition - Protobuf\nDESCRIPTION: Defines the data structure for requesting reaction information. Contains fields for Farcaster ID, reaction type, and optional target identifiers (cast ID or URL).\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/reactions.md#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ReactionRequest {\n  uint64 fid = 1;\n  ReactionType reaction_type = 2;\n  CastId target_cast_id = 3; // optional\n  string target_url = 4; // optional\n}\n```\n\n----------------------------------------\n\nTITLE: ValidateMessage JSON Response Format\nDESCRIPTION: The JSON response structure returned after validating a message. It includes a valid flag indicating whether the message is valid and the complete message structure with all details.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/message.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valid\": true,\n  \"message\": {\n    \"data\": {\n      \"type\": \"MESSAGE_TYPE_FRAME_ACTION\",\n      \"fid\": 2,\n      \"timestamp\": 48994466,\n      \"network\": \"FARCASTER_NETWORK_MAINNET\",\n      \"frameActionBody\": {\n        \"url\": \"https://fcpolls.com/polls/1\",\n        \"buttonIndex\": 2,\n        \"inputText\": \"\",\n        \"castId\": {\n          \"fid\": 226,\n          \"hash\": \"0xa48dd46161d8e57725f5e26e34ec19c13ff7f3b9\"\n        }\n      }\n    },\n    \"hash\": \"0xd2b1ddc6c88e865a33cb1a565e0058d757042974\",\n    \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n    \"signature\": \"3msLXzxB4eEYe...dHrY1vkxcPAA==\",\n    \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n    \"signer\": \"0x78ff9a...58c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LinksByTarget Request Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of a LinksByTarget Request object, used for retrieving Links targeting a specific Farcaster ID with optional pagination and ordering parameters.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/links.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      | Type        | Label    | Description                                     |\n| ---------- | ----------- | -------- | ----------------------------------------------- |\n| target_fid | [uint64](#) |          | Target Farcaster ID to find links for           |\n| link_type  | string      | optional | Type of the Link being requested                |\n| page_size  | uint32      | optional | Number of results to return per page            |\n| page_token | bytes       | optional | Token for pagination                            |\n| reverse    | boolean     | optional | Whether to return results in reverse order      |\n```\n\n----------------------------------------\n\nTITLE: Running Snapchain Tests\nDESCRIPTION: Command to run tests for the Snapchain application using Cargo. This verifies that the implementation is working as expected after setup.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Defining LinksByFid Request Structure in Markdown\nDESCRIPTION: This snippet details the structure of a LinksByFid Request object, used for retrieving Links made by a specific Farcaster ID with optional pagination and ordering parameters.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/links.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      | Type        | Label    | Description                                     |\n| ---------- | ----------- | -------- | ----------------------------------------------- |\n| fid        | [uint64](#) |          | Farcaster ID of the user who generated the Link |\n| link_type  | string      | optional | Type of the Link being requested                |\n| page_size  | uint32      | optional | Number of results to return per page            |\n| page_token | bytes       | optional | Token for pagination                            |\n| reverse    | boolean     | optional | Whether to return results in reverse order      |\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Limits by FID Using cURL\nDESCRIPTION: This example shows how to make a GET request to retrieve the storage limits for a specific FID (Farcaster ID). It uses cURL to query the local development server on port 3381.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/storagelimits.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/storageLimitsByFid?fid=6833\n```\n\n----------------------------------------\n\nTITLE: Defining GetInfoResponse Structure in Markdown\nDESCRIPTION: A markdown table describing the structure of the GetInfoResponse, including field names, types, labels, and descriptions.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/metadata.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Field       | Type                | Label    | Description                  |\n| ----------- | ------------------- | -------- | ---------------------------- |\n| db_stats    | [DbStats](#DbStats) |          | Database statistics          |\n| num_shards  | [uint32](#uint32)   |          | Number of shards in the node |\n| shard_infos | [ShardInfo](#)      | repeated | Information about each shard |\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Development Nodes\nDESCRIPTION: Command to start multiple Snapchain nodes for development purposes using a Makefile target. The nodes will be configured to communicate with each other.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake dev\n```\n\n----------------------------------------\n\nTITLE: Defining DbStats Structure in Markdown\nDESCRIPTION: A markdown table outlining the structure of DbStats, detailing fields related to database statistics such as message count and size.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/metadata.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                 | Type              | Label | Description                               |\n| --------------------- | ----------------- | ----- | ----------------------------------------- |\n| num_messages          | [uint64](#uint64) |       | Total number of messages in the node      |\n| num_fid_registrations | [uint64](#uint64) |       | Number of FID registrations in the node   |\n| approx_size           | [uint64](#uint64) |       | Approximate size of the database in bytes |\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Ubuntu for Snapchain\nDESCRIPTION: Commands to download and install Docker on an Ubuntu server. This installs Docker, which is required to run the Snapchain node using containers.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/running-a-node.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.docker.com -o get-docker.sh\nchmod +x get-docker.sh\n./get-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Defining ShardInfo Structure in Markdown\nDESCRIPTION: A markdown table describing the ShardInfo structure, which includes details about individual shards such as message count, size, and block information.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/metadata.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                 | Type              | Label | Description                              |\n| --------------------- | ----------------- | ----- | ---------------------------------------- |\n| shard_id              | [uint32](#uint32) |       | Shard identifier                         |\n| max_height            | [uint64](#uint64) |       | Maximum block height in the shard        |\n| num_messages          | [uint64](#uint64) |       | Number of messages in the shard          |\n| num_fid_registrations | [uint64](#uint64) |       | Number of FID registrations in the shard |\n| approx_size           | [uint64](#uint64) |       | Approximate size of the shard in bytes   |\n| block_delay           | [uint64](#uint64) |       | Block delay in the shard                 |\n| mempool_size          | [uint64](#uint64) |       | Size of the mempool for this shard       |\n```\n\n----------------------------------------\n\nTITLE: Installing and Running a Vocs Project with Yarn\nDESCRIPTION: Commands for installing dependencies and starting the development server for a Vocs documentation project. This sequence initializes the project by installing required packages and then launches the development environment.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Defining TrieNodeMetadataResponse Structure in Markdown\nDESCRIPTION: A markdown table outlining the TrieNodeMetadataResponse structure, which includes information about trie nodes such as prefix, message count, hash, and child nodes.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/metadata.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Field        | Type                                                  | Label    | Description                          |\n| ------------ | ----------------------------------------------------- | -------- | ------------------------------------ |\n| prefix       | [bytes](#bytes)                                       |          | Prefix of the trie node              |\n| num_messages | [uint64](#uint64)                                     |          | Number of messages under this prefix |\n| hash         | [string](#string)                                     |          | Hash of the trie node                |\n| children     | [TrieNodeMetadataResponse](#TrieNodeMetadataResponse) | repeated | Child nodes of this trie node        |\n```\n\n----------------------------------------\n\nTITLE: Submitting a Message with Authentication in Bash\nDESCRIPTION: This example demonstrates how to submit a message to the Hub with HTTP Basic Authentication when RPC auth is enabled. It uses cURL to send the binary protobuf data with username and password credentials.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/message.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"http://127.0.0.1:3381/v1/submitMessage\" \\\n     -u \"username:password\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary \"@message.encoded.protobuf\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Fid Request Structure\nDESCRIPTION: Specifies the structure for FID-based requests, including pagination parameters and ordering options.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/onchain.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nfid        | [uint64](#) |       | Farcaster ID of the user\npage_size  | uint32      |       | (optional) Type of the Link being requested\npage_token | bytes       |       | (optional)Type of the Link being requested\nreverse    | boolean     |       | (optional) Ordering of the response\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for eventById Request\nDESCRIPTION: Example JSON response from the eventById endpoint showing the structure of a Hub event. This example displays a USERNAME_PROOF merge event containing timestamp, name, owner address, signature, FID, and type information.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/events.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"HUB_EVENT_TYPE_MERGE_USERNAME_PROOF\",\n  \"id\": 350909155450880,\n  \"mergeUsernameProofBody\": {\n    \"usernameProof\": {\n      \"timestamp\": 1695049760,\n      \"name\": \"nftonyp\",\n      \"owner\": \"0x23b3c29900762a70def5dc8890e09dc9019eb553\",\n      \"signature\": \"xp41PgeO...hJpNshw=\",\n      \"fid\": 20114,\n      \"type\": \"USERNAME_TYPE_FNAME\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IdRegistryEventByAddressRequest Structure\nDESCRIPTION: Defines the structure for requesting ID registry events by address, containing just the address field.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/onchain.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\naddress | [bytes](#bytes) |       |             \n```\n\n----------------------------------------\n\nTITLE: Response Format for On-Chain Signers Query\nDESCRIPTION: This JSON snippet shows the expected response format when querying on-chain signers. It includes details about the signer event, such as the key, key type, and associated metadata.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/onchain.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"events\": [\n    {\n      \"type\": \"EVENT_TYPE_SIGNER\",\n      \"chainId\": 10,\n      \"blockNumber\": 108875854,\n      \"blockHash\": \"0xceb1cdc21ee319b06f0455f1cedc0cd4669b471d283a5b2550b65aba0e0c1af0\",\n      \"blockTimestamp\": 1693350485,\n      \"transactionHash\": \"0x76e20cf2f7c3db4b78f00f6bb9a7b78b0acfb1eca4348c1f4b5819da66eb2bee\",\n      \"logIndex\": 2,\n      \"fid\": 6833,\n      \"signerEventBody\": {\n        \"key\": \"0x0852c07b5695ff94138b025e3f9b4788e06133f04e254f0ea0eb85a06e999cdd\",\n        \"keyType\": 1,\n        \"eventType\": \"SIGNER_EVENT_TYPE_ADD\",\n        \"metadata\": \"AAAAAAAAAAAA...AAAAAAAA\",\n        \"metadataType\": 1\n      },\n      \"txIndex\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signer Request Structure\nDESCRIPTION: Defines the structure for requesting signer information, containing the Farcaster ID and the signer's public key.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/onchain.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfid    | [uint64](#) |       | Farcaster ID of the user who generated the Signer\nsigner | [bytes](#)  |       | Public Key of the Signer\n```\n\n----------------------------------------\n\nTITLE: Defining Verifications API Methods in Markdown\nDESCRIPTION: This snippet outlines the available API methods for the Verifications API, including their request and response types, and brief descriptions of their functionality.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/verification.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Method Name                     | Request Type        | Response Type    | Description                                                 |\n| ------------------------------- | ------------------- | ---------------- | ----------------------------------------------------------- |\n| GetVerification                 | VerificationRequest | Message          | Returns a VerificationAdd for an Ethereum Address           |\n| GetVerificationsByFid           | FidRequest          | MessagesResponse | Returns all VerificationAdds made by an Fid                 |\n| GetAllVerificationMessagesByFid | FidTimestampRequest | MessagesResponse | Returns all Verifications made by an Fid with time filtering |\n```\n\n----------------------------------------\n\nTITLE: Defining OnChainEventResponse Structure\nDESCRIPTION: Specifies the response structure for on-chain events, including an array of events and optional pagination token.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/onchain.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nevents          | [OnChainEvent](#onchainevent) | repeated |             \nnext_page_token | [bytes](#bytes)               | optional |             \n```\n\n----------------------------------------\n\nTITLE: Defining SignatureScheme Enum in Protobuf\nDESCRIPTION: Enumerates the signature schemes used for signing Message hashes in the Farcaster network.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nenum SignatureScheme {\n  SIGNATURE_SCHEME_NONE = 0;\n  SIGNATURE_SCHEME_ED25519 = 1;\n  SIGNATURE_SCHEME_EIP712 = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Messages Response Structure - Protobuf\nDESCRIPTION: Defines the response structure containing an array of Farcaster messages and optional pagination token.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/userdata.md#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MessagesResponse {\n  repeated Message messages = 1;\n  optional bytes next_page_token = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Constants for Farcaster Account Creation in TypeScript\nDESCRIPTION: Initializes the necessary constants and contract configurations needed for Farcaster account creation. Includes addresses for ID Gateway, Key Gateway, and ID Registry contracts, along with network settings and private key configurations for custody and signer accounts.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/writing-messages.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ID_GATEWAY_ADDRESS,\n  idGatewayABI,\n  KEY_GATEWAY_ADDRESS,\n  keyGatewayABI,\n  ID_REGISTRY_ADDRESS,\n  idRegistryABI,\n  FarcasterNetwork,\n} from '@farcaster/hub-web';\nimport { zeroAddress } from 'viem';\nimport { optimism } from 'viem/chains';\nimport { generatePrivateKey, privateKeyToAccount, toAccount } from \"viem/accounts\";\n\n/**\n * Populate the following constants with your own values\n */\nconst CUSTODY_PRIVATE_KEY = '<REQUIRED>'; // A private key corresponding with any ETH address.\nconst OP_PROVIDER_URL = '<REQUIRED>'; // Alchemy or Infura url\nconst RECOVERY_ADDRESS = zeroAddress; // Optional, using the default value means the account will not be recoverable later if the mnemonic is lost\nconst SIGNER_PRIVATE_KEY: Hex = zeroAddress; // Optional, using the default means a new signer will be created each time\n\n// Note: crackle is the Farcaster team's mainnet node, which is password protected to prevent abuse. Use a 3rd party node \n// provider like https://neynar.com/ Or, run your own mainnet node and broadcast to it permissionlessly.\nconst HUB_URL = 'crackle.farcaster.xyz:3383'; // URL + Port of the node \nconst HUB_USERNAME = ''; // Username for auth, leave blank if not using TLS\nconst HUB_PASS = ''; // Password for auth, leave blank if not using TLS\nconst USE_SSL = false; // set to true if talking to a node that uses SSL (3rd party hosted nodes or nodes that require auth)\nconst FC_NETWORK = FarcasterNetwork.MAINNET; // Network of the node\n\nconst CHAIN = optimism;\n\nconst IdGateway = {\n  abi: idGatewayABI,\n  address: ID_GATEWAY_ADDRESS,\n  chain: CHAIN,\n};\nconst IdContract = {\n  abi: idRegistryABI,\n  address: ID_REGISTRY_ADDRESS,\n  chain: CHAIN,\n};\nconst KeyContract = {\n  abi: keyGatewayABI,\n  address: KEY_GATEWAY_ADDRESS,\n  chain: CHAIN,\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Username Proof by Name (Bash)\nDESCRIPTION: This snippet demonstrates how to use the userNameProofByName endpoint to retrieve a proof for a Farcaster username. It includes the curl command to make the API request.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/usernameproof.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/userNameProofByName?name=adityapk\n```\n\n----------------------------------------\n\nTITLE: ReactionsByFid Request Structure Definition - Protobuf\nDESCRIPTION: Defines the data structure for requesting reactions by Farcaster ID. Includes pagination parameters and filtering options.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/reactions.md#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ReactionsByFidRequest {\n  uint64 fid = 1;\n  ReactionType reaction_type = 2; // optional\n  uint32 page_size = 3; // optional\n  bytes page_token = 4; // optional\n  boolean reverse = 5; // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog for Snapchain Release\nDESCRIPTION: Command to update the changelog for a new Snapchain version release. It requires setting the SNAPCHAIN_VERSION environment variable with the new version number.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nSNAPCHAIN_VERSION=0.x.y make changelog\n```\n\n----------------------------------------\n\nTITLE: Defining FidsRequest Structure in Markdown\nDESCRIPTION: Outlines the structure of the FidsRequest, including fields for pagination control and sorting order.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/fids.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      | Type              | Label    | Description |\n| ---------- | ----------------- | -------- | ----------- |\n| page_size  | [uint32](#uint32) | optional |             |\n| page_token | [bytes](#bytes)   | optional |             |\n| reverse    | [bool](#bool)     | optional |             |\n```\n\n----------------------------------------\n\nTITLE: Generating Node Keypairs\nDESCRIPTION: Command to generate fresh cryptographic keypairs for a Snapchain node. These are necessary for node identity and security in the network.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin generate_keys\n```\n\n----------------------------------------\n\nTITLE: Defining Block Message in Protobuf\nDESCRIPTION: Specifies the fields for the Block message, including the block header and an array of messages contained in the block.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/blocks.md#2025-04-16_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n| Field              | Type                      | Label    | Description                          |\n| ------------------ | ------------------------- | -------- | ------------------------------------ |\n| header             | [BlockHeader](#)          |          | Header info for the block            |\n| messages           | [Message](#)              | repeated | Array of messages in the block       |\n```\n\n----------------------------------------\n\nTITLE: Validating a Message with cURL in Bash\nDESCRIPTION: This example demonstrates how to validate a protobuf-serialized message with the Hub using cURL. This can be used to verify that the Hub will consider the message valid without actually submitting it.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/message.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"http://127.0.0.1:3381/v1/validateMessage\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary \"@message.encoded.protobuf\"\n\n```\n\n----------------------------------------\n\nTITLE: UserDataType Enum Definition\nDESCRIPTION: Defines the types of user data that can be associated with a Farcaster user profile, including profile picture, display name, bio, URL, username, location, and social media handles.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nenum UserDataType {\n  USER_DATA_TYPE_NONE = 0;\n  USER_DATA_TYPE_PFP = 1;\n  USER_DATA_TYPE_DISPLAY = 2;\n  USER_DATA_TYPE_BIO = 3;\n  USER_DATA_TYPE_URL = 5;\n  USER_DATA_TYPE_USERNAME = 6;\n  USER_DATA_TYPE_LOCATION = 7;\n  USER_DATA_TYPE_TWITTER = 8;\n  USER_DATA_TYPE_GITHUB = 9;\n}\n```\n\n----------------------------------------\n\nTITLE: FidTimestamp Request Structure Definition - Protobuf\nDESCRIPTION: Defines the data structure for requesting reactions with timestamp filtering. Includes pagination parameters and timestamp range filters.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/grpcapi/reactions.md#2025-04-16_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage FidTimestampRequest {\n  uint64 fid = 1;\n  uint32 page_size = 2; // optional\n  bytes page_token = 3; // optional\n  bool reverse = 4; // optional\n  uint64 start_timestamp = 5; // optional\n  uint64 stop_timestamp = 6; // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Link Message Structure Definition\nDESCRIPTION: Defines the structure for creating relationships between users, including link type and target user identification.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage LinkBody {\n  string type = 1;\n  optional uint32 displayTimestamp = 2;\n  uint64 target_fid = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FarcasterNetwork Enum in Protobuf\nDESCRIPTION: Enumerates the different Farcaster networks, including mainnet, testnet, and devnet.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nenum FarcasterNetwork {\n  FARCASTER_NETWORK_NONE = 0;\n  FARCASTER_NETWORK_MAINNET = 1;\n  FARCASTER_NETWORK_TESTNET = 2;\n  FARCASTER_NETWORK_DEVNET = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Verification Message Structure Definitions\nDESCRIPTION: Defines the structure for verification messages that prove ownership of Ethereum addresses.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage VerificationAddEthAddressBody {\n  bytes address = 1;\n  bytes eth_signature = 2;\n  bytes block_hash = 3;\n}\n\nmessage VerificationRemoveBody {\n  bytes address = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HashScheme Enum in Protobuf\nDESCRIPTION: Enumerates the hash schemes used for producing digests of MessageData in the Farcaster network.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nenum HashScheme {\n  HASH_SCHEME_NONE = 0;\n  HASH_SCHEME_BLAKE3 = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Frame Action Message Structure Definition\nDESCRIPTION: Defines the structure for frame action messages, representing user interactions with frames including button presses and input text.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/datatypes/messages.md#2025-04-16_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage FrameActionBody {\n  bytes url = 1;\n  uint32 button_index = 2;\n  CastId cast_id = 3;\n  bytes input_text = 4;\n  bytes state = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for On-Chain ID Registry Event Query\nDESCRIPTION: This JSON snippet shows the expected response format when querying on-chain ID registry events. It includes details about the event, such as the FID, block information, and ID register event body.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/onchain.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"EVENT_TYPE_ID_REGISTER\",\n  \"chainId\": 10,\n  \"blockNumber\": 108874508,\n  \"blockHash\": \"0x20d83804a26247ad8c26d672f2212b28268d145b8c1cefaa4126f7768f46682e\",\n  \"blockTimestamp\": 1693347793,\n  \"transactionHash\": \"0xf3481fc32227fbd982b5f30a87be32a2de1fc5736293cae7c3f169da48c3e764\",\n  \"logIndex\": 7,\n  \"fid\": 3,\n  \"idRegisterEventBody\": {\n    \"to\": \"0x74232bf61e994655592747e20bdf6fa9b9476f79\",\n    \"eventType\": \"ID_REGISTER_EVENT_TYPE_REGISTER\",\n    \"from\": \"0x\",\n    \"recoveryAddress\": \"0x00000000fcd5a8e45785c8a4b9a718c9348e4f18\"\n  },\n  \"txIndex\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Development Environment\nDESCRIPTION: Command to remove any cached items from the development environment using a Makefile target. This helps ensure a clean state for testing or rebuilding.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake clean\n```\n\n----------------------------------------\n\nTITLE: Handling Message Data Bytes in Snapchain\nDESCRIPTION: Code that ensures messages contain dataBytes for Snapchain compatibility. This snippet demonstrates how to manually update messages if not using hub-nodejs builders version >=0.13.0. It encodes the message data and assigns it to dataBytes, then nullifies the original data field.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/guides/migrating-to-snapchain.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (message.dataBytes === undefined) {\n    message.dataBytes = protobufs.MessageData.encode(message.data).finish();\n    message.data = undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Formal State Definition in Snapchain\nDESCRIPTION: Mathematical definition of account state management in Snapchain, defining how transactions affect state using set theory and merge functions.\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/whitepaper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFormal definition:  There exists a state (S) for an account (A) made up of transactions. S is a subset of all transactions made by a user (S ⊆ Ta).  A merge function M accepts an S and t and returns a new state S' (M:S×t→S′). Each T is idempotent but not associative or commutative.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Casts by FID using Farcaster API\nDESCRIPTION: Example of fetching all casts authored by a specific FID via GET request to /v1/castsByFid endpoint\nSOURCE: https://github.com/farcasterxyz/snapchain/blob/main/site/docs/pages/reference/httpapi/casts.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3381/v1/castsByFid?fid=2\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"data\": {\n        \"type\": \"MESSAGE_TYPE_CAST_ADD\",\n        \"fid\": 2,\n        \"timestamp\": 48994466,\n        \"network\": \"FARCASTER_NETWORK_MAINNET\",\n        \"castAddBody\": {... },\n          \"text\": \"Cast Text\",\n          \"mentionsPositions\": [],\n          \"embeds\": []\n        }\n      },\n      \"hash\": \"0xd2b1ddc6c88e865a33cb1a565e0058d757042974\",\n      \"hashScheme\": \"HASH_SCHEME_BLAKE3\",\n      \"signature\": \"3msLXzxB4eEYeF0Le...dHrY1vkxcPAA==\",\n      \"signatureScheme\": \"SIGNATURE_SCHEME_ED25519\",\n      \"signer\": \"0x78ff9a768cf1...2eca647b6d62558c\"\n    }\n  ]\n  \"nextPageToken\": \"\"\n}\n```"
  }
]