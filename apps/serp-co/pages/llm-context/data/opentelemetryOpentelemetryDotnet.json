[
  {
    "owner": "open-telemetry",
    "repo": "opentelemetry-dotnet",
    "content": "TITLE: Configuring OpenTelemetry TracerProvider in ASP.NET Core\nDESCRIPTION: C# code snippet showing how to configure OpenTelemetry tracing in an ASP.NET Core application by registering the TracerProvider with ASP.NET Core instrumentation and console exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-aspnetcore/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(resource => resource\n        .AddService(serviceName: builder.Environment.ApplicationName))\n    .WithTracing(tracing => tracing\n        .AddAspNetCoreInstrumentation()\n        .AddConsoleExporter());\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry with Microsoft.Extensions.Hosting in ASP.NET Core\nDESCRIPTION: Demonstrates how to initialize OpenTelemetry using the AddOpenTelemetry extension method in a hosted application. This approach integrates with the host's service collection and provides configuration for resources, logging, metrics, and tracing.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\n// Clear the default logging providers added by the host\nbuilder.Logging.ClearProviders();\n\n// Initialize OpenTelemetry\nbuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(resource => /* Resource configuration goes here */)\n    .WithLogging(logging => /* Logging configuration goes here */)\n    .WithMetrics(metrics => /* Metrics configuration goes here */)\n    .WithTracing(tracing => /* Tracing configuration goes here */));\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry Integration with IServiceCollection Extensions in C#\nDESCRIPTION: A complete example showing how to create extension methods for IServiceCollection that enable OpenTelemetry tracing and metrics in a library. The code demonstrates named options support, configuration through the Options API, and proper registration of telemetry sources.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/extending-the-sdk/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.DependencyInjection.Extensions;\nusing Microsoft.Extensions.Options;\nusing MyLibrary;\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Trace;\n\nnamespace Microsoft.Extensions.DependencyInjection\n{\n    public static class MyLibraryServiceCollectionRegistrationExtensions\n    {\n        public static IServiceCollection AddMyLibrary(\n            this IServiceCollection services,\n            string? name = null,\n            Action<MyLibraryOptions>? configure = null)\n        {\n            ArgumentNullException.ThrowIfNull(services);\n\n            // Register library services.\n            services.TryAddSingleton<IMyLibraryService, MyLibraryService>();\n\n            // Support named options.\n            name ??= Options.Options.DefaultName;\n\n            if (configure != null)\n            {\n                // Support configuration through Options API.\n                services.Configure(name, configure);\n            }\n\n            // Configure OpenTelemetry tracing.\n            services.ConfigureOpenTelemetryTracerProvider((sp, builder) =>\n            {\n                var options = sp.GetRequiredService<IOptionsMonitor<MyLibraryOptions>>().Get(name);\n                if (options.EnableTracing)\n                {\n                    builder.AddSource(\"MyLibrary\");\n                }\n            });\n\n            // Configure OpenTelemetry metrics.\n            services.ConfigureOpenTelemetryMeterProvider((sp, builder) =>\n            {\n                var options = sp.GetRequiredService<IOptionsMonitor<MyLibraryOptions>>().Get(name);\n                if (options.EnableMetrics)\n                {\n                    builder.AddMeter(\"MyLibrary\");\n                }\n            });\n\n            return services;\n        }\n    }\n}\n\nnamespace MyLibrary\n{\n    // Options class can be bound to IConfiguration or configured by code.\n    public class MyLibraryOptions\n    {\n        public bool EnableTracing { get; set; }\n\n        public bool EnableMetrics { get; set; }\n    }\n\n    internal sealed class MyLibraryService : IMyLibraryService\n    {\n        // Implementation not shown.\n    }\n\n    public interface IMyLibraryService\n    {\n        // Implementation not shown.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Metric Measurements\nDESCRIPTION: Adding measurements to the counter with different attributes for fruit types and colors\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-console/README.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nMyFruitCounter.Add(1, new(\"name\", \"apple\"), new(\"color\", \"red\"));\nMyFruitCounter.Add(2, new(\"name\", \"lemon\"), new(\"color\", \"yellow\"));\nMyFruitCounter.Add(1, new(\"name\", \"lemon\"), new(\"color\", \"yellow\"));\n```\n\n----------------------------------------\n\nTITLE: Accessing current trace context in ASP.NET Core route handler\nDESCRIPTION: C# code snippet demonstrating how to access the current OpenTelemetry trace context (Activity) within an ASP.NET Core minimal API route handler.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-aspnetcore/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapGet(\"/\", () => $\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\");\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Manually with SDK Version 1.10.0+\nDESCRIPTION: Shows how to manually initialize OpenTelemetry SDK version 1.10.0 or newer using the OpenTelemetrySdk.Create API. This approach creates a unified SDK instance that supports cross-cutting extensions and manages all signals, requiring explicit disposal during application shutdown.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\n\nvar sdk = OpenTelemetrySdk.Create(builder => builder\n    .ConfigureResource(resource => /* Resource configuration goes here */)\n    .WithLogging(logging => /* Logging configuration goes here */)\n    .WithMetrics(metrics => /* Metrics configuration goes here */)\n    .WithTracing(tracing => /* Tracing configuration goes here */));\n\n// During application shutdown\nsdk.Dispose();\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Route with Logger Injection in ASP.NET Core\nDESCRIPTION: Code showing how to inject an ILogger into an HTTP endpoint and use extension methods for structured logging.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/getting-started-aspnetcore/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapGet(\"/\", (ILogger<Program> logger) =>\n{\n    logger.FoodPriceChanged(\"artichoke\", 9.99);\n\n    return \"Hello from OpenTelemetry Logs!\";\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag Selection in Views\nDESCRIPTION: Shows how to use Views to select specific tags as dimensions for metrics and how to configure tag filtering, including examples of dimension selection and dropping.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n    // Only choose \"name\" as the dimension for the metric \"MyFruitCounter\"\n    .AddView(\n        instrumentName: \"MyFruitCounter\",\n        metricStreamConfiguration: new MetricStreamConfiguration\n        {\n            TagKeys = new string[] { \"name\" },\n        })\n\n    ...\n    // Only the dimension \"name\" is selected, \"color\" is dropped\n    MyFruitCounter.Add(1, new(\"name\", \"apple\"), new(\"color\", \"red\"));\n    MyFruitCounter.Add(2, new(\"name\", \"lemon\"), new(\"color\", \"yellow\"));\n    MyFruitCounter.Add(2, new(\"name\", \"apple\"), new(\"color\", \"green\"));\n    // Because \"color\" is dropped the resulting metric values are - name:apple LongSum Value:3 and name:lemon LongSum Value:2\n    ...\n\n    // If you provide an empty `string` array as `TagKeys` to the `MetricStreamConfiguration`\n    // the SDK will drop all the dimensions associated with the metric\n    .AddView(\n        instrumentName: \"MyFruitCounter\",\n        metricStreamConfiguration: new MetricStreamConfiguration\n        {\n            TagKeys = Array.Empty<string>(),\n        })\n\n    ...\n    // both \"name\" and \"color\" are dropped\n    MyFruitCounter.Add(1, new(\"name\", \"apple\"), new(\"color\", \"red\"));\n    MyFruitCounter.Add(2, new(\"name\", \"lemon\"), new(\"color\", \"yellow\"));\n    MyFruitCounter.Add(2, new(\"name\", \"apple\"), new(\"color\", \"green\"));\n    // Because both \"name\" and \"color\" are dropped the resulting metric value is - LongSum Value:5\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Meters in MeterProvider\nDESCRIPTION: Demonstrates how to add specific meters to the MeterProvider using exact names and wildcard patterns. Shows the opt-in model for listening to meters and enabling instruments.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Metrics;\n\nusing var meterProvider = Sdk.CreateMeterProviderBuilder()\n    // The following enables instruments from Meter\n    // named \"MyCompany.MyProduct.MyLibrary\" only.\n    .AddMeter(\"MyCompany.MyProduct.MyLibrary\")\n    // The following enables instruments from all Meters\n    // whose name starts with  \"AbcCompany.XyzProduct.\".\n    .AddMeter(\"AbcCompany.XyzProduct.*\")\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exporter in C# for OpenTelemetry .NET SDK\nDESCRIPTION: This code snippet demonstrates how to create a custom exporter by deriving from BaseExporter<Activity> and implementing the Export method. It includes best practices such as using SuppressInstrumentationScope to avoid generating telemetry in the exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/extending-the-sdk/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyExporter : BaseExporter<Activity>\n{\n    public override ExportResult Export(in Batch<Activity> batch)\n    {\n        using var scope = SuppressInstrumentationScope.Begin();\n\n        foreach (var activity in batch)\n        {\n            Console.WriteLine($\"Export: {activity.DisplayName}\");\n        }\n\n        return ExportResult.Success;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Tagging Activities with Performance Checks\nDESCRIPTION: Demonstrates proper activity creation with performance optimization by checking IsAllDataRequested before setting tags. Uses the recommended using statement pattern for proper activity disposal.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var activity = MyActivitySource.StartActivity(\"SayHello\"))\n{\n    if (activity != null && activity.IsAllDataRequested == true)\n    {\n        activity.SetTag(\"http.url\", \"http://www.mywebsite.com\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in ASP.NET Core Application\nDESCRIPTION: Example showing how to register and configure OpenTelemetry tracing and metrics in an ASP.NET Core application using the AddOpenTelemetry extension method. It configures resource, tracing, and metrics with console exporters.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Extensions.Hosting/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Trace;\n\nvar appBuilder = WebApplication.CreateBuilder(args);\n\nappBuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(builder => builder.AddService(serviceName: \"MyService\"))\n    .WithTracing(builder => builder.AddConsoleExporter())\n    .WithMetrics(builder => builder.AddConsoleExporter());\n\nvar app = appBuilder.Build();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry MeterProvider in ASP.NET Core\nDESCRIPTION: Code snippet showing how to configure the OpenTelemetry MeterProvider in an ASP.NET Core application. It sets up ASP.NET Core instrumentation, configures service name resource attributes, and adds a console exporter with a 1-second interval.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-aspnetcore/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nappBuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(builder => builder\n        .AddService(serviceName: \"OTel.NET Getting Started\"))\n    .WithMetrics(builder => builder\n        .AddAspNetCoreInstrumentation()\n        .AddConsoleExporter((exporterOptions, metricReaderOptions) =>\n        {\n            metricReaderOptions.PeriodicExportingMetricReaderOptions.ExportIntervalMilliseconds = 1000;\n        })\n    );\n```\n\n----------------------------------------\n\nTITLE: Starting an Activity and Setting Tags and Status\nDESCRIPTION: Code snippet that starts an Activity (representing an OpenTelemetry Span), sets tags (representing Attributes), and sets the Status to Ok. This creates the core trace data that will be exported.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-console/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var activity = MyActivitySource.StartActivity(\"SayHello\"))\n{\n    activity?.SetTag(\"foo\", 1);\n    activity?.SetTag(\"bar\", \"Hello, World!\");\n    activity?.SetTag(\"baz\", new int[] { 1, 2, 3 });\n    activity?.SetStatus(ActivityStatusCode.Ok);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry Logging in C#\nDESCRIPTION: C# code snippet demonstrating the implementation of OpenTelemetry logging using compile-time logging source generation. This approach provides high-performance, structured logging with type-checked parameters.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/getting-started-console/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ninternal static partial class LoggerExtensions\n{\n    [LoggerMessage(LogLevel.Information, \"Food `{name}` price changed to `{price}`.`)]\n    public static partial void FoodPriceChanged(this ILogger logger, string name, double price);\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Counter Measurements\nDESCRIPTION: Example of recording measurements using a Counter instrument with attributes\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nMyFruitCounter.Add(1, new(\"name\", \"apple\"), new(\"color\", \"red\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing TracerProviderBuilder Extension Method for Custom Exporter Registration\nDESCRIPTION: Complete example of a TracerProviderBuilder extension method that registers a custom exporter with named options support. It demonstrates proper DI integration, options pattern usage, and service registration patterns.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/extending-the-sdk/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics;\nusing Microsoft.Extensions.DependencyInjection.Extensions;\nusing Microsoft.Extensions.Options;\nusing MyLibrary;\nusing OpenTelemetry;\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Trace;\n\nnamespace OpenTelemetry.Trace\n{\n    public static class MyLibraryTracerProviderBuilderRegistrationExtensions\n    {\n        public static TracerProviderBuilder AddMyLibraryExporter(\n            this TracerProviderBuilder builder,\n            string? name = null,\n            Action<MyExporterOptions>? configureExporterOptions = null,\n            Action<BatchExportActivityProcessorOptions>? configureBatchProcessorOptions = null)\n        {\n            ArgumentNullException.ThrowIfNull(builder);\n\n            // Support named options.\n            name ??= Options.DefaultName;\n\n            builder.ConfigureServices(services =>\n            {\n                if (configureExporterOptions != null)\n                {\n                    // Support configuration through Options API.\n                    services.Configure(name, configureExporterOptions);\n                }\n\n                if (configureBatchProcessorOptions != null)\n                {\n                    // Support configuration through Options API.\n                    services.Configure(name, configureBatchProcessorOptions);\n                }\n\n                // Register custom service as a singleton.\n                services.TryAddSingleton<MyCustomService>();\n            });\n\n            builder.AddProcessor(serviceProvider =>\n            {\n                // Retrieve MyExporterOptions instance using name.\n                var exporterOptions = serviceProvider.GetRequiredService<IOptionsMonitor<MyExporterOptions>>().Get(name);\n\n                // Retrieve BatchExportActivityProcessorOptions instance using name.\n                var batchOptions = serviceProvider.GetRequiredService<IOptionsMonitor<BatchExportActivityProcessorOptions>>().Get(name);\n\n                // Retrieve MyCustomService singleton.\n                var myCustomService = serviceProvider.GetRequiredService<MyCustomService>();\n\n                // Return a batch export processor using MyCustomExporter.\n                return new BatchActivityExportProcessor(\n                    new MyCustomExporter(exporterOptions, myCustomService),\n                    batchOptions.MaxQueueSize,\n                    batchOptions.ScheduledDelayMilliseconds,\n                    batchOptions.ExporterTimeoutMilliseconds,\n                    batchOptions.MaxExportBatchSize);\n            });\n\n            // Return builder for call chaining.\n            return builder;\n        }\n    }\n}\n\nnamespace MyLibrary\n{\n    // Options class can be bound to IConfiguration or configured by code.\n    public class MyExporterOptions\n    {\n        public Uri? IngestionUri { get; set; }\n    }\n\n    internal sealed class MyCustomExporter : BaseExporter<Activity>\n    {\n        public MyCustomExporter(\n            MyExporterOptions options,\n            MyCustomService myCustomService)\n        {\n            // Implementation not shown.\n        }\n\n        public override ExportResult Export(in Batch<Activity> batch)\n        {\n            // Implementation not shown.\n\n            return ExportResult.Success;\n        }\n    }\n\n    internal sealed class MyCustomService\n    {\n        // Implementation not shown.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ActivitySource in C# for OpenTelemetry\nDESCRIPTION: Creates an ActivitySource instance with a name and version that identifies the library or application. This instance is typically created once and reused throughout the application.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nstatic ActivitySource activitySource = new ActivitySource(\n    \"MyCompany.MyProduct.MyLibrary\",\n    \"1.0.0\");\n```\n\n----------------------------------------\n\nTITLE: Adding Events to an Activity\nDESCRIPTION: Shows how to add events to an Activity, which can be used to mark significant occurrences within the span's lifetime. Events can include a name, timestamp, and attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nactivity?.AddEvent(new ActivityEvent(\"sample activity event.\"));\n```\n\n----------------------------------------\n\nTITLE: Basic Prometheus Scraping Endpoint Configuration\nDESCRIPTION: Basic setup of Prometheus scraping endpoint middleware in ASP.NET Core application using the UseOpenTelemetryPrometheusScrapingEndpoint extension method.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Prometheus.AspNetCore/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\napp.UseOpenTelemetryPrometheusScrapingEndpoint();\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Metric Streams in OpenTelemetry .NET\nDESCRIPTION: Demonstrates how to set the maximum number of metric streams allowed in the SDK using SetMaxMetricStreams. This example shows the consequence of setting the limit too low, where measurements from additional instruments are dropped.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics.Metrics;\nusing OpenTelemetry;\nusing OpenTelemetry.Metrics;\n\nCounter<long> MyFruitCounter = MyMeter.CreateCounter<long>(\"MyFruitCounter\");\nCounter<long> AnotherFruitCounter = MyMeter.CreateCounter<long>(\"AnotherFruitCounter\");\n\nusing var meterProvider = Sdk.CreateMeterProviderBuilder()\n    .AddMeter(\"MyCompany.MyProduct.MyLibrary\")\n    .AddConsoleExporter()\n    .SetMaxMetricStreams(1) // The default value is 1000\n    .Build();\n\n// SDK only exports measurements from `MyFruitCounter`.\nMyFruitCounter.Add(1, new(\"name\", \"apple\"), new(\"color\", \"red\"));\n\n// The measurements from `AnotherFruitCounter` are dropped as the maximum\n// `MetricStream`s allowed is `1`.\nAnotherFruitCounter.Add(1, new(\"name\", \"apple\"), new(\"color\", \"red\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Processors to TracerProvider in C#\nDESCRIPTION: This snippet demonstrates how to add processors to the TracerProvider before and after it is built. It shows the importance of processor order and ownership.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Trace;\n\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddProcessor(new MyProcessor1())\n    .AddProcessor(new MyProcessor2()))\n    .Build();\n\n// Processors can be added to provider even after it is built.\n// Only those traces which are emitted after this line, will be sent to it.\ntracerProvider.AddProcessor(new MyProcessor3());\n```\n\n----------------------------------------\n\nTITLE: Configuring TracerProvider with OpenTelemetry.Extensions.Hosting in ASP.NET Core\nDESCRIPTION: Demonstrates how to configure TracerProvider using OpenTelemetry.Extensions.Hosting package in an ASP.NET Core application. The AddOpenTelemetry extension automatically manages the TracerProvider lifecycle with the host.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry.Trace;\n\nvar appBuilder = WebApplication.CreateBuilder(args);\n\nappBuilder.Services.AddOpenTelemetry()\n    .WithTracing(builder => builder.AddConsoleExporter());\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry with ASP.NET Core Dependency Injection\nDESCRIPTION: Example showing how to register OpenTelemetry tracing with custom services in an ASP.NET Core application using the OpenTelemetry.Extensions.Hosting package.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar appBuilder = WebApplication.CreateBuilder(args);\n\nappBuilder.Services.AddSingleton<MyCustomService>();\n\nappBuilder.Services.AddOpenTelemetry()\n    .WithTracing(builder => builder\n        .AddProcessor<MyCustomProcessor>());\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Resource Detector with Sdk.Create Approach in C#\nDESCRIPTION: This snippet shows how to add a custom resource detector to different OpenTelemetry signals (tracing, metrics, logging) using the Sdk.Create approach. It demonstrates setting up activity sources, meters, and loggers with the custom resource detector.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/resources/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics;\nusing System.Diagnostics.Metrics;\nusing Microsoft.Extensions.Logging;\nusing OpenTelemetry;\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Resources;\nusing OpenTelemetry.Trace;\n\nnamespace ExtendingTheSdk;\n\npublic class Program\n{\n    private static readonly ActivitySource DemoSource = new(\"OTel.Demo\");\n    private static readonly Meter MeterDemoSource = new(\"OTel.Demo\");\n\n    public static void Main()\n    {\n        using var tracerProvider = Sdk.CreateTracerProviderBuilder()\n            .AddSource(\"OTel.Demo\")\n            .SetResourceBuilder(ResourceBuilder.CreateEmpty().AddDetector(\n                new MyResourceDetector()))\n            .Build();\n\n        using var meterProvider = Sdk.CreateMeterProviderBuilder()\n            .SetResourceBuilder(ResourceBuilder.CreateEmpty().AddDetector(\n                new MyResourceDetector()))\n            .Build();\n\n        using var loggerFactory = LoggerFactory.Create(builder =>\n        {\n            builder.AddOpenTelemetry(options =>\n            {\n                options.SetResourceBuilder(ResourceBuilder\n                    .CreateDefault().AddDetector(\n                        new MyResourceDetector()));\n            });\n        });\n\n        using (var foo = DemoSource.StartActivity(\"Foo\"))\n        {\n            using (var bar = DemoSource.StartActivity(\"Bar\"))\n            {\n                using (var baz = DemoSource.StartActivity(\"Baz\"))\n                {\n                }\n            }\n        }\n\n        var counter = MeterDemoSource.CreateCounter<long>(\"counter\");\n        for (var i = 0; i < 20000; i++)\n            counter.Add(1, new(\"tag1\", \"value1\"), new(\"tag2\", \"value2\"));\n\n        var logger = loggerFactory.CreateLogger(\"OTel.Demo\");\n        logger\n            .LogInformation(\"Hello from {name} {price}.\", \"tomato\", 2.99);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ActivitySource in C#\nDESCRIPTION: Creates a reusable ActivitySource instance using dot-separated UpperCamelCase naming convention. ActivitySource should be created once and reused throughout the application.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic readonly ActivitySource MyActivitySource = new(\"MyCompany.MyProduct.MyLibrary\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource for TracerProvider in C#\nDESCRIPTION: This snippet shows how to configure the Resource associated with the TracerProvider. It demonstrates adding custom attributes and a service name to the resource.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Resources;\nusing OpenTelemetry.Trace;\n\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .ConfigureResource(r => r.AddAttributes(new List<KeyValuePair<string, object>>\n                {\n                    new KeyValuePair<string, object>(\"static-attribute1\", \"v1\"),\n                    new KeyValuePair<string, object>(\"static-attribute2\", \"v2\"),\n                }))\n    .ConfigureResource(resourceBuilder => resourceBuilder.AddService(\"service-name\"))\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Logging in C#\nDESCRIPTION: Demonstrates the recommended way to implement structured logging using key-value pairs for efficient filtering and storage.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar food = \"tomato\";\nvar price = 2.99;\n\nlogger.LogInformation(\"Hello from {food} {price}.\", food, price);\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Links to an Activity\nDESCRIPTION: Demonstrates creating Activity links that connect related traces, including providing links at creation time and adding links after creation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar activityLinks = new List<ActivityLink>();\n\nvar linkedContext1 = new ActivityContext(\n    ActivityTraceId.CreateFromString(\"0af7651916cd43dd8448eb211c80319c\"),\n    ActivitySpanId.CreateFromString(\"b7ad6b7169203331\"),\n    ActivityTraceFlags.None);\n\nvar linkedContext2 = new ActivityContext(\n    ActivityTraceId.CreateFromString(\"4bf92f3577b34da6a3ce929d0e0e4736\"),\n    ActivitySpanId.CreateFromString(\"00f067aa0ba902b7\"),\n    ActivityTraceFlags.Recorded);\n\nactivityLinks.Add(new ActivityLink(linkedContext1));\nactivityLinks.Add(new ActivityLink(linkedContext2));\n\nvar activity = activitySource.StartActivity(\n    \"ActivityWithLinks\",\n    ActivityKind.Server,\n    default(ActivityContext),\n    initialTags,\n    activityLinks); // links provided at creation time.\n\n// One may add links after activity is created too.\nvar linkedContext3 = new ActivityContext(\n    ActivityTraceId.CreateFromString(\"01260a70a81e1fa3ad5a8acfeaa0f711\"),\n    ActivitySpanId.CreateFromString(\"34739aa9e2239da1\"),\n    ActivityTraceFlags.None);\nactivity?.AddLink(linkedContext3);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Resource Detector in C#\nDESCRIPTION: This snippet demonstrates how to create a custom resource detector by implementing the IResourceDetector interface and its Detect method to provide custom resource attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/resources/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry.Resources;\n\ninternal class MyResourceDetector : IResourceDetector\n{\n    public Resource Detect()\n    {\n        var attributes = new List<KeyValuePair<string, object>>\n        {\n            new KeyValuePair<string, object>(\"key\", \"val\"),\n        };\n\n        return new Resource(attributes);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Meter Instance in C#\nDESCRIPTION: Demonstrates how to create a Meter instance with proper naming conventions. The Meter name uses dot-separated UpperCamelCase, which is recommended for clarity and consistency.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic readonly Meter MyMeter = new(\"MyCompany.MyProduct.MyLibrary\", \"1.0\");\n```\n\n----------------------------------------\n\nTITLE: Defining Logger Extension Methods with Source Generation\nDESCRIPTION: Implementation of strongly-typed logger extension methods using the LoggerMessage source generator for high-performance structured logging.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/getting-started-aspnetcore/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ninternal static partial class LoggerExtensions\n{\n    [LoggerMessage(LogLevel.Information, \"Starting the app...\")]\n    public static partial void StartingApp(this ILogger logger);\n\n    [LoggerMessage(LogLevel.Information, \"Food `{name}` price changed to `{price}`.\")] \n    public static partial void FoodPriceChanged(this ILogger logger, string name, double price);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry packages for ASP.NET Core\nDESCRIPTION: Commands to add the required OpenTelemetry NuGet packages including Console exporter, hosting extensions, and ASP.NET Core instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-aspnetcore/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Console\ndotnet add package OpenTelemetry.Extensions.Hosting\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Creating Meter Instance\nDESCRIPTION: Initializing a Meter instance with company and version information\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-console/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static readonly Meter MyMeter = new(\"MyCompany.MyProduct.MyLibrary\", \"1.0\");\n```\n\n----------------------------------------\n\nTITLE: Stopping an OpenTelemetry Activity\nDESCRIPTION: Demonstrates how to properly stop an Activity when the operation is complete, which is necessary for correct trace completion.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nactivity?.Stop();\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Resource Detection with Dependency Injection\nDESCRIPTION: Example demonstrating how to dynamically add resources at startup using a custom IResourceDetector implementation that's registered with dependency injection. The detector adds service name and environment information to telemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Extensions.Hosting/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyResourceDetector : IResourceDetector\n{\n    private readonly IWebHostEnvironment webHostEnvironment;\n\n    public MyResourceDetector(IWebHostEnvironment webHostEnvironment)\n    {\n        this.webHostEnvironment = webHostEnvironment;\n    }\n\n    public Resource Detect()\n    {\n        return ResourceBuilder.CreateEmpty()\n            .AddService(serviceName: this.webHostEnvironment.ApplicationName)\n            .AddAttributes(new Dictionary<string, object> { [\"host.environment\"] = this.webHostEnvironment.EnvironmentName })\n            .Build();\n    }\n}\n\nservices.AddSingleton<MyResourceDetector>();\n\nservices.AddOpenTelemetry()\n    .ConfigureResource(builder =>\n        builder.AddDetector(sp => sp.GetRequiredService<MyResourceDetector>()))\n    .WithTracing(builder => builder.AddConsoleExporter())\n    .WithMetrics(builder => builder.AddConsoleExporter());\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Filtering for OpenTelemetryLoggerProvider in C#\nDESCRIPTION: Illustrates how to configure log filtering rules for the OpenTelemetryLoggerProvider. This example sets a default LogLevel and a specific LogLevel for a custom category.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/customizing-the-sdk/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddFilter<OpenTelemetryLoggerProvider>(\"*\", LogLevel.Error);\nbuilder.AddFilter<OpenTelemetryLoggerProvider>(\"MyProduct.MyLibrary.MyClass\", LogLevel.Warning);\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter Using Delegate and Options API\nDESCRIPTION: Demonstrates different methods to configure OtlpExporter using delegate approach and Options API, including configuration binding from appsettings.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Set via delegate using code:\nappBuilder.Services.AddOpenTelemetry()\n    .WithTracing(builder => builder.AddOtlpExporter(o => {\n        // ...\n    }));\n\n// Set via Options API using code:\nappBuilder.Services.Configure<OtlpExporterOptions>(o => {\n    // ...\n});\n\n// Set via Options API using configuration:\nappBuilder.Services.Configure<OtlpExporterOptions>(\n    appBuilder.Configuration.GetSection(\"OpenTelemetry:otlp\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring TracerProvider with Console Exporter\nDESCRIPTION: Code snippet that configures a TracerProvider to listen to activities from the specified source and export them to the Console. This connects the activity creation with the trace visualization.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-console/README.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddSource(\"MyCompany.MyProduct.MyLibrary\")\n    .AddConsoleExporter()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Using Baggage API in C#\nDESCRIPTION: Demonstrates how to use the OpenTelemetry Baggage API for managing context propagation across service boundaries. Shows methods for getting, setting, removing, and clearing baggage items.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Use GetBaggage to get all the key/value pairs present in Baggage\nforeach (var item in Baggage.GetBaggage())\n{\n    Console.WriteLine(item.Key);\n    Console.WriteLine(item.Value);\n}\n\n// Use SetBaggage method to add a key/value pair in Baggage\nBaggage.SetBaggage(\"AppName\", \"MyApp\");\nBaggage.SetBaggage(\"Region\", \"West US\");\n\n// Use RemoveBaggage method to remove a key/value pair in Baggage\nBaggage.RemoveBaggage(\"AppName\");\n\n// Use ClearBaggage method to remove all the key/value pairs in Baggage\nBaggage.ClearBaggage();\n```\n\n----------------------------------------\n\nTITLE: Using TagList for Efficient Measurement Reporting in C#\nDESCRIPTION: Demonstrates the use of TagList for reporting measurements with multiple tags. This approach is recommended for 4 to 8 tags to optimize performance and reduce heap allocations.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tags = new TagList\n{\n    { \"DimName1\", \"DimValue1\" },\n    { \"DimName2\", \"DimValue2\" },\n    { \"DimName3\", \"DimValue3\" },\n    { \"DimName4\", \"DimValue4\" },\n};\n\ncounter.Add(100, tags);\n```\n\n----------------------------------------\n\nTITLE: Setting Status on an Activity\nDESCRIPTION: Demonstrates setting the OpenTelemetry Status on an Activity, which indicates whether the operation was successful, erroneous, or unset. Includes examples with and without an error description.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nactivity?.SetStatus(ActivityStatusCode.Ok);\nactivity?.SetStatus(ActivityStatusCode.Error, \"Error Description\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Exemplar Filter in OpenTelemetry .NET Metrics\nDESCRIPTION: This snippet demonstrates how to enable and configure exemplar collection by setting the ExemplarFilter. Exemplars are example data points for aggregated data that can provide correlation between metrics and traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Metrics;\n\nusing var meterProvider = Sdk.CreateMeterProviderBuilder()\n    // rest of config not shown\n    .SetExemplarFilter(ExemplarFilterType.TraceBased)\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter with Dependency Injection\nDESCRIPTION: Shows how to configure OtlpExporter when additional dependency injection services are required for configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Step 1: Register user-created configuration service.\nappBuilder.Services.AddSingleton<MyOtlpConfigurationService>();\n\n// Step 2: Use Options API to configure OtlpExporterOptions with user-created service.\nappBuilder.Services.AddOptions<OtlpExporterOptions>()\n    .Configure<MyOtlpConfigurationService>((o, configService) => {\n        o.Endpoint = configService.ResolveOtlpExporterEndpoint();\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding Export Processors to TracerProvider in C#\nDESCRIPTION: This snippet shows how to add export processors to the TracerProvider before it is built. It demonstrates adding both BatchActivityExportProcessor and SimpleActivityExportProcessor.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Trace;\n\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddProcessor(new BatchActivityExportProcessor(new MyExporter1()))\n    .AddProcessor(new SimpleActivityExportProcessor(new MyExporter2()))\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic TracerProvider Using Sdk.CreateTracerProviderBuilder\nDESCRIPTION: Shows how to create and dispose a basic TracerProvider using Sdk.CreateTracerProviderBuilder(). This creates a provider with default configuration that should be disposed at application shutdown.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Trace;\n\nvar tracerProvider = Sdk.CreateTracerProviderBuilder().Build();\n// ....\n\n// Dispose at application shutdown\ntracerProvider.Dispose()\n```\n\n----------------------------------------\n\nTITLE: Compile-time Logging Source Generation\nDESCRIPTION: Demonstrates the optimal logging pattern using compile-time source generation for best performance.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar food = \"tomato\";\nvar price = 2.99;\n\nlogger.SayHello(food, price);\n\ninternal static partial class LoggerExtensions\n{\n    [LoggerMessage(Level = LogLevel.Information, Message = \"Hello from {food} {price}.\")]\n    public static partial void SayHello(this ILogger logger, string food, double price);\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Multiple View Configuration with Unique Names in OpenTelemetry .NET\nDESCRIPTION: Demonstrates the correct approach to configuring multiple views for a single histogram by providing unique names for each metric stream to avoid conflicts.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n    var histogram = meter.CreateHistogram<long>(\"MyHistogram\");\n\n    // Configure a view to aggregate based only on the \"location\" tag,\n    // and rename the metric.\n    .AddView(instrumentName: \"MyHistogram\", metricStreamConfiguration: new MetricStreamConfiguration\n        {\n            Name = \"MyHistogramWithLocation\",\n            TagKeys = new string[] { \"location\" },\n        })\n\n    // Configure a view to aggregate based only on the \"status\" tag,\n    // and rename the metric.\n    .AddView(instrumentName: \"MyHistogram\", metricStreamConfiguration: new MetricStreamConfiguration\n        {\n            Name = \"MyHistogramWithStatus\",\n            TagKeys = new string[] { \"status\" },\n        })\n\n    // The measurement below will be aggregated into two separate metrics, \"MyHistogramWithLocation\"\n    // and \"MyHistogramWithStatus\".\n    histogram.Record(10, new(\"location\", \"seattle\"), new(\"status\", \"OK\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Loggers with LoggerFactory in C#\nDESCRIPTION: Demonstrates different approaches to create loggers using LoggerFactory with proper category naming conventions. Shows how to use generic type parameters and explicit category names following dot-separated UpperCamelCase convention for better log filtering.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nloggerFactory.CreateLogger<MyClass>(); // this is equivalent to CreateLogger(\"MyProduct.MyLibrary.MyClass\")\nloggerFactory.CreateLogger(\"MyProduct.MyLibrary.MyClass\"); // use the fully qualified class name\nloggerFactory.CreateLogger(\"MyProduct.MyLibrary.MyClass.DatabaseOperations\"); // append a subcategory name\nloggerFactory.CreateLogger(\"MyProduct.MyLibrary.MyClass.FileOperations\"); // append another subcategory name\n```\n\n----------------------------------------\n\nTITLE: Providing Initial Tags When Creating an Activity\nDESCRIPTION: Shows how to provide initial tags when creating an Activity, which is recommended for optimal sampling as samplers can only use information available at creation time.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar initialTags = new ActivityTagsCollection();\n\ninitialTags[\"com.mycompany.product.mytag1\"] = \"tagValue1\";\ninitialTags[\"com.mycompany.product.mytag2\"] = \"tagValue2\";\n\nvar activity = activitySource.StartActivity(\n    \"ActivityName\",\n    ActivityKind.Server,\n    \"00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01\",\n    initialTags);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sampler for TracerProvider in C#\nDESCRIPTION: This snippet demonstrates how to configure a custom sampler for the TracerProvider. It shows setting a TraceIdRatioBasedSampler with a sampling rate of 0.25.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Trace;\n\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .SetSampler(new TraceIdRatioBasedSampler(0.25))\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Enabling OTLP Exporter for All Signals\nDESCRIPTION: Cross-cutting configuration to enable OTLP exporter for all telemetry signals (logs, metrics, and traces).\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nappBuilder.Services.AddOpenTelemetry()\n    .UseOtlpExporter();\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus HttpListener in MeterProvider\nDESCRIPTION: Code snippet showing how to configure the PrometheusHttpListener in the MeterProvider builder. Sets up an HTTP listener at http://localhost:9464/ for Prometheus metric scraping.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Prometheus.HttpListener/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\n    .AddMeter(MyMeter.Name)\n    .AddPrometheusHttpListener(\n        options => options.UriPrefixes = new string[] { \"http://localhost:9464/\" })\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Adding OtlpExporter to TracerProvider in C#\nDESCRIPTION: This snippet demonstrates how to add the OtlpExporter to the TracerProvider using its extension method. It shows a simplified way of registering an exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Trace;\n\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddOtlpExporter()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Adding Processor to OpenTelemetryLoggerOptions in C#\nDESCRIPTION: Demonstrates how to add a processor to OpenTelemetryLoggerOptions when creating a LoggerFactory. This is used to customize log processing in OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/customizing-the-sdk/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar loggerFactory = LoggerFactory.Create(builder =>\n{\n    builder.AddOpenTelemetry(logging =>\n    {\n        logging.AddProcessor(...);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OTLP Exporters\nDESCRIPTION: Shows how to configure multiple named OTLP exporters within a single TracerProvider, each with different endpoints specified in configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"OpenTelemetry\": {\n    \"OtlpPrimary\": {\n      \"Endpoint\": \"http://localhost:4317\"\n    },\n    \"OtlpSecondary\": {\n      \"Endpoint\": \"http://localhost:4327\"\n    },\n  }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar appBuilder = WebApplication.CreateBuilder(args);\n\nappBuilder.Services.Configure<OtlpExporterOptions>(\n    \"OtlpPrimary\",\n    appBuilder.Configuration.GetSection(\"OpenTelemetry:OtlpPrimary\"));\n\nappBuilder.Services.Configure<OtlpExporterOptions>(\n    \"OtlpSecondary\",\n    appBuilder.Configuration.GetSection(\"OpenTelemetry:OtlpSecondary\"));\n\nappBuilder.Services.AddOpenTelemetry()\n    .WithTracing(builder => builder\n        .AddOtlpExporter(name: \"OtlpPrimary\", configure: null)\n        .AddOtlpExporter(name: \"OtlpSecondary\", configure: null));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Metric Exporter in C#\nDESCRIPTION: Example of a basic custom exporter that derives from BaseExporter<Metric> and implements the Export method. This exporter suppresses instrumentation to avoid causing live-loops and writes metric data to the console.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/extending-the-sdk/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyExporter : BaseExporter<Metric>\n{\n    public override ExportResult Export(in Batch<Metric> batch)\n    {\n        using var scope = SuppressInstrumentationScope.Begin();\n\n        foreach (var metric in batch)\n        {\n            Console.WriteLine($\"Export: {metric.metric}\");\n\n            foreach (ref readonly var metricPoint in metric.GetMetricPoints())\n            {\n                Console.WriteLine($\"Export: {metricPoint.StartTime}\");\n            }\n        }\n\n        return ExportResult.Success;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom OpenTelemetry Processor in C#\nDESCRIPTION: Sample implementation of a custom processor that inherits from BaseProcessor<Activity> with OnStart and OnEnd method overrides to trace activity lifecycle.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/extending-the-sdk/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyProcessor : BaseProcessor<Activity>\n{\n    public override void OnStart(Activity activity)\n    {\n        Console.WriteLine($\"OnStart: {activity.DisplayName}\");\n    }\n\n    public override void OnEnd(Activity activity)\n    {\n        Console.WriteLine($\"OnEnd: {activity.DisplayName}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics with UseOtlpExporter\nDESCRIPTION: Examples of configuring metrics telemetry with OTLP exporter using different approaches.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Metrics\": {\n    \"EnabledMetrics\": {\n      \"Microsoft.AspNetCore.*\": true,\n      \"System.*\": true,\n      \"MyCompany.*\": true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OTLP Exporter for All Signals in .NET\nDESCRIPTION: Demonstrates how to enable the OTLP Exporter for all telemetry signals (logs, metrics, and traces) using the UseOtlpExporter extension method.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nIOpenTelemetryBuilder.UseOtlpExporter()\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpClient for Zipkin Exporter in C#\nDESCRIPTION: Example of how to configure a custom HttpClient for the Zipkin Exporter using the HttpClientFactory option in ZipkinExporterOptions. This allows for customization of the HttpClient used for exporting data.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Zipkin/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddOpenTelemetry()\n    .WithTracing(builder => builder\n        .AddZipkinExporter(o => o.HttpClientFactory = () =>\n        {\n            HttpClient client = new HttpClient();\n            client.DefaultRequestHeaders.Add(\"X-MyCustomHeader\", \"value\");\n            return client;\n        }));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Sampler in OpenTelemetry .NET SDK\nDESCRIPTION: Example implementation of a custom sampler that inherits from the OpenTelemetry.Trace.Sampler base class. This sampler always returns a decision to record and sample activities.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/extending-the-sdk/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nclass MySampler : Sampler\n{\n    public override SamplingResult ShouldSample(in SamplingParameters samplingParameters)\n    {\n        return new SamplingResult(SamplingDecision.RecordAndSample);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Resource with MeterProvider in C#\nDESCRIPTION: Demonstrates how to configure a Resource with custom attributes and service information using MeterProviderBuilder. Shows the usage of ConfigureResource method to add static attributes and service name to the OpenTelemetry resource.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Resources;\n\nusing var meterProvider = Sdk.CreateMeterProviderBuilder()\n    .ConfigureResource(r => r.AddAttributes(new List<KeyValuePair<string, object>>\n                {\n                    new KeyValuePair<string, object>(\"static-attribute1\", \"v1\"),\n                    new KeyValuePair<string, object>(\"static-attribute2\", \"v2\"),\n                }))\n    .ConfigureResource(resourceBuilder => resourceBuilder.AddService(\"service-name\"))\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Context from W3C Trace-Context String\nDESCRIPTION: Demonstrates creating an Activity with a parent context specified as a W3C Trace-Context compatible string, which is the standard format for propagating trace context across service boundaries.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar activity = activitySource.StartActivity(\n    \"ActivityName\",\n    ActivityKind.Server,\n    \"00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01\");\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter Retry Mechanism in .NET\nDESCRIPTION: Sets the retry mechanism for the OTLP Exporter to either in-memory or disk-based storage. For disk-based retry, it specifies the default storage path and allows customization through an additional environment variable.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n* `OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY`\n\n    * When set to `in_memory`, it enables in-memory retry for transient errors\n    encountered while sending telemetry.\n\n      Added in `1.8.0`.\n\n    * When set to `disk`, it enables retries by storing telemetry on disk during\n    transient errors.  The default path where the telemetry is stored is\n    obtained by calling\n    [Path.GetTempPath()](https://learn.microsoft.com/dotnet/api/system.io.path.gettemppath)\n    or can be customized by setting\n    `OTEL_DOTNET_EXPERIMENTAL_OTLP_DISK_RETRY_DIRECTORY_PATH` environment\n    variable.\n```\n\n----------------------------------------\n\nTITLE: Building Basic MeterProvider in C#\nDESCRIPTION: Creates a basic MeterProvider instance with default configuration. This shows the minimal setup required, though it's not particularly useful without additional configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Metrics;\n\nusing var meterProvider = Sdk.CreateMeterProviderBuilder().Build();\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to an OpenTelemetry Activity\nDESCRIPTION: Shows how to add semantic convention tags to an Activity, including an optimization check with IsAllDataRequested to avoid expensive operations when the activity is not being recorded.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nactivity?.SetTag(\"http.method\", \"GET\");\nif (activity != null && activity.IsAllDataRequested == true)\n{\n    activity.SetTag(\"http.url\", \"http://www.mywebsite.com\");\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Resource Detector with Dependency Injection in C#\nDESCRIPTION: This snippet demonstrates how to register a custom resource detector with dependency injection and integrate it into OpenTelemetry using the OpenTelemetry.Extensions.Hosting method, showing a more service-oriented approach.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/resources/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n    services.AddSingleton<MyResourceDetector>();\n\n    services.AddOpenTelemetry()\n        .ConfigureResource(builder => builder\n            .AddDetector(sp =>\n                sp.GetRequiredService<MyResourceDetector>()))\n        .WithTracing(builder => builder.AddConsoleExporter())\n        .WithMetrics(builder => builder.AddConsoleExporter());\n```\n\n----------------------------------------\n\nTITLE: Handling Unhandled Exceptions with OpenTelemetry\nDESCRIPTION: Complete example showing how to handle unhandled exceptions and record them in OpenTelemetry activities.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/reporting-exceptions/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Diagnostics;\nusing OpenTelemetry;\nusing OpenTelemetry.Trace;\n\npublic class Program\n{\n    private static readonly ActivitySource MyActivitySource = new ActivitySource(\"MyCompany.MyProduct.MyLibrary\");\n\n    public static void Main()\n    {\n        AppDomain.CurrentDomain.UnhandledException += UnhandledExceptionHandler;\n\n        using var tracerProvider = Sdk.CreateTracerProviderBuilder()\n            .AddSource(\"MyCompany.MyProduct.MyLibrary\")\n            .SetSampler(new AlwaysOnSampler())\n            .SetErrorStatusOnException()\n            .AddConsoleExporter()\n            .Build();\n\n        using (MyActivitySource.StartActivity(\"Foo\"))\n        {\n            using (MyActivitySource.StartActivity(\"Bar\"))\n            {\n                throw new Exception(\"Oops!\");\n            }\n        }\n    }\n\n    private static void UnhandledExceptionHandler(object source, UnhandledExceptionEventArgs args)\n    {\n        var ex = (Exception)args.ExceptionObject;\n\n        var activity = Activity.Current;\n\n        while (activity != null)\n        {\n            activity.RecordException(ex);\n            activity.Dispose();\n            activity = activity.Parent;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Trace Exporter in .NET\nDESCRIPTION: Setup for OTLP trace exporter using TracerProviderBuilder with default configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    // rest of config not shown here.\n    .AddOtlpExporter()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Propagators with CompositeTextMapPropagator in OpenTelemetry .NET\nDESCRIPTION: Example demonstrating how to configure OpenTelemetry to use both B3 (Zipkin) and W3C Baggage propagators simultaneously using CompositeTextMapPropagator. This allows context to be propagated in multiple formats.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Extensions.Propagators/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Context.Propagation;\nusing OpenTelemetry.Extensions.Propagators;\n\nSdk.SetDefaultTextMapPropagator(new CompositeTextMapPropagator(new TextMapPropagator[]\n    {\n        new OpenTelemetry.Extensions.Propagators.B3Propagator(),\n        new BaggagePropagator(),\n    }));\n```\n\n----------------------------------------\n\nTITLE: Creating an ActivitySource in C#\nDESCRIPTION: Code snippet that creates an ActivitySource, which represents an OpenTelemetry Tracer. The ActivitySource is used to create and track activities within the application.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-console/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static readonly ActivitySource MyActivitySource = new ActivitySource(\n    \"MyCompany.MyProduct.MyLibrary\");\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Configuration Example in JSON Format\nDESCRIPTION: Example of an appsettings.json file showing how to configure OpenTelemetry settings such as service name through configuration files instead of environment variables.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"OTEL_SERVICE_NAME\": \"MyService\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cardinality Limit for a Specific Metric in C#\nDESCRIPTION: This code shows how to set the cardinality limit for an individual metric using the MetricStreamConfiguration.CardinalityLimit property through the View API. This approach allows for different limits on different metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\n    .AddMeter(\"MyCompany.MyProduct.MyLibrary\")\n    // Set a custom CardinalityLimit (10) for \"MyFruitCounter\"\n    .AddView(\n        instrumentName: \"MyFruitCounter\",\n        new MetricStreamConfiguration { CardinalityLimit = 10 })\n    .AddConsoleExporter()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Single OTLP Exporter\nDESCRIPTION: Demonstrates basic configuration of OtlpExporterOptions using appsettings.json and service configuration. Sets up a single OTLP exporter with a specific endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"OpenTelemetry\": {\n    \"Otlp\": {\n      \"Endpoint\": \"http://localhost:4317\"\n    }\n  }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar appBuilder = WebApplication.CreateBuilder(args);\n\nappBuilder.Services.Configure<OtlpExporterOptions>(\n    appBuilder.Configuration.GetSection(\"OpenTelemetry:Otlp\"));\n\nappBuilder.Services.AddOpenTelemetry()\n    .WithTracing(builder => builder.AddOtlpExporter());\n```\n\n----------------------------------------\n\nTITLE: Advanced Prometheus Scraping Endpoint Configuration\nDESCRIPTION: Advanced configuration of Prometheus scraping endpoint with custom path and port filtering using a predicate function.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Prometheus.AspNetCore/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseOpenTelemetryPrometheusScrapingEndpoint(\n        context => context.Request.Path == \"/internal/metrics\"\n            && context.Connection.LocalPort == 5067);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exporter in OpenTelemetry .NET\nDESCRIPTION: Example of a custom exporter implementation that inherits from BaseExporter<LogRecord>. This exporter writes log records to the console while suppressing instrumentation to avoid loops. It demonstrates proper implementation of the Export method and handling of log record batches.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/extending-the-sdk/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyExporter : BaseExporter<LogRecord>\n{\n    public override ExportResult Export(in Batch<LogRecord> batch)\n    {\n        using var scope = SuppressInstrumentationScope.Begin();\n\n        foreach (var record in batch)\n        {\n            Console.WriteLine($\"Export: {record}\");\n        }\n\n        return ExportResult.Success;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry MeterProvider with Hosting Extensions\nDESCRIPTION: Configuration of OpenTelemetry MeterProvider using the OpenTelemetry.Extensions.Hosting package for .NET 6.0+. Adds Prometheus exporter to the metrics pipeline.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Prometheus.AspNetCore/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddOpenTelemetry()\n    .WithMetrics(builder => builder\n        .AddPrometheusExporter());\n```\n\n----------------------------------------\n\nTITLE: Manual Activity Status Setting for Exception Handling\nDESCRIPTION: Shows how to manually set Activity status when handling exceptions in OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/reporting-exceptions/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var activity = MyActivitySource.StartActivity(\"Foo\"))\n{\n    try\n    {\n        Func();\n    }\n    catch (SomeException ex)\n    {\n        activity?.SetStatus(ActivityStatusCode.Error);\n        DoSomething();\n    }\n    catch (Exception ex)\n    {\n        activity?.SetStatus(ActivityStatusCode.Error);\n        throw;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Console Exporter via NuGet\nDESCRIPTION: This command installs the OpenTelemetry.Exporter.Console package using the dotnet CLI. It adds the Console Exporter to your .NET project, enabling you to print telemetry data to the console window.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Console/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Console\n```\n\n----------------------------------------\n\nTITLE: Configuring Signal-Specific OTLP Settings\nDESCRIPTION: Demonstrates how to configure OTLP settings specifically for different signals (tracing, metrics, logging) using the name parameter.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Step 1: Bind options to config using the name parameter.\nappBuilder.Services.Configure<OtlpExporterOptions>(\"tracing\", appBuilder.Configuration.GetSection(\"OpenTelemetry:tracing:otlp\"));\nappBuilder.Services.Configure<OtlpExporterOptions>(\"metrics\", appBuilder.Configuration.GetSection(\"OpenTelemetry:metrics:otlp\"));\nappBuilder.Services.Configure<OtlpExporterOptions>(\"logging\", appBuilder.Configuration.GetSection(\"OpenTelemetry:logging:otlp\"));\n\n// Step 2: Register OtlpExporter using the name parameter.\nappBuilder.Services.AddOpenTelemetry()\n    .WithTracing(builder => builder.AddOtlpExporter(\"tracing\", configure: null))\n    .WithMetrics(builder => builder.AddOtlpExporter(\"metrics\", configure: null));\n\nappBuilder.Logging.AddOpenTelemetry(builder => builder.AddOtlpExporter(\n    \"logging\",\n    options =>\n    {\n        // Note: Options can also be set via code but order is important. In the example here the code will apply after configuration.\n        options.Endpoint = new Uri(\"http://localhost/logs\");\n    }));\n```\n\n----------------------------------------\n\nTITLE: Customizing Explicit Histogram Buckets with View API in OpenTelemetry .NET\nDESCRIPTION: Demonstrates how to customize histogram bucket boundaries using the View API with ExplicitBucketHistogramConfiguration. Shows examples of defining custom bucket ranges and using an empty boundaries array.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n // Change Histogram boundaries to count measurements under the following buckets:\n // (-inf, 10]\n // (10, 20]\n // (20, +inf)\n.AddView(\n    instrumentName: \"MyHistogram\",\n    new ExplicitBucketHistogramConfiguration { Boundaries = new double[] { 10, 20 } })\n\n// If you provide an empty `double` array as `Boundaries` to the `ExplicitBucketHistogramConfiguration`,\n// the SDK will only export the sum, count, min and max for the measurements.\n// There are no buckets exported in this case.\n.AddView(\n    instrumentName: \"MyHistogram\",\n    new ExplicitBucketHistogramConfiguration { Boundaries = Array.Empty<double>() })\n```\n\n----------------------------------------\n\nTITLE: Configuring Base2 Exponential Bucket Histogram Aggregation in OpenTelemetry .NET\nDESCRIPTION: Shows how to configure a Histogram to use Base2ExponentialBucketHistogramConfiguration through Views. This demonstrates setting the MaxSize parameter which affects the resolution of histogram buckets.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n    // Change the maximum number of buckets for \"MyHistogram\"\n    .AddView(\n        instrumentName: \"MyHistogram\",\n        new Base2ExponentialBucketHistogramConfiguration { MaxSize = 40 })\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry OTLP Exporter package to a .NET project\nDESCRIPTION: Command to add the OpenTelemetry Protocol Exporter NuGet package to the project. This package enables sending metrics to OTLP-compatible backends like Prometheus.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-prometheus-grafana/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol\n```\n\n----------------------------------------\n\nTITLE: Using Activity with C# 'using' Statement\nDESCRIPTION: Shows how to leverage C#'s using statement with Activity for automatic disposal and stopping when the block completes.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var activity = activitySource.StartActivity(\"ActivityName\")\n{\n    activity?.SetTag(\"http.method\", \"GET\");\n} // Activity gets stopped automatically at end of this block during dispose.\n```\n\n----------------------------------------\n\nTITLE: Configuring TracerProvider with Dependency Injection using Sdk.CreateTracerProviderBuilder\nDESCRIPTION: Example showing how to register custom services and processors with the TracerProviderBuilder using ConfigureServices and AddProcessor methods.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing var tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .ConfigureServices(services =>\n    {\n        services.AddSingleton<MyCustomService>();\n    })\n    .AddProcessor<MyCustomProcessor>()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Processor in OpenTelemetry .NET\nDESCRIPTION: Example of a custom processor implementation that inherits from BaseProcessor<LogRecord>. This processor demonstrates the implementation of the OnEnd method for processing log records. The implementation is thread-safe and designed for minimal performance impact.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/extending-the-sdk/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyProcessor : BaseProcessor<LogRecord>\n{\n    public override void OnEnd(LogRecord record)\n    {\n        Console.WriteLine($\"OnEnd: {record}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Processor Constructor with Dependency in OpenTelemetry .NET\nDESCRIPTION: Example of a custom processor class that extends BaseProcessor<Activity> with a dependency on a custom service injected via constructor.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyCustomProcessor : BaseProcessor<Activity>\n{\n    public MyCustomProcessor(MyCustomService myCustomService)\n    {\n        // Implementation not important\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Instruments Using Views\nDESCRIPTION: Demonstrates how to selectively drop specific instruments from a Meter using Views configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n    // Drop the instrument \"MyCounterDrop\".\n    .AddView(instrumentName: \"MyCounterDrop\", MetricStreamConfiguration.Drop)\n```\n\n----------------------------------------\n\nTITLE: Direct MeterProvider Configuration\nDESCRIPTION: Direct configuration of MeterProvider without using hosting extensions. Creates and registers a MeterProvider with Prometheus exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Prometheus.AspNetCore/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\n    .AddPrometheusExporter()\n    .Build();\nbuilder.Services.AddSingleton(meterProvider);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ExemplarReservoir in C#\nDESCRIPTION: Implementation of a custom ExemplarReservoir that records exemplars for measurements with the highest value. It handles both long and double values, and manages thread-safety with proper locking mechanisms. The implementation also responds to delta vs. cumulative aggregation temporality.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/extending-the-sdk/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nclass HighestValueExemplarReservoir : FixedSizeExemplarReservoir\n{\n    private readonly object lockObject = new();\n    private long? previousValueLong;\n    private double? previousValueDouble;\n\n    public HighestValueExemplarReservoir()\n        : base(capacity: 1)\n    {\n    }\n\n    public override void Offer(in ExemplarMeasurement<long> measurement)\n    {\n        if (!this.previousValueLong.HasValue || measurement.Value > this.previousValueLong.Value)\n        {\n            lock (this.lockObject)\n            {\n                if (!this.previousValueLong.HasValue || measurement.Value > this.previousValueLong.Value)\n                {\n                    this.UpdateExemplar(0, in measurement);\n                    this.previousValueLong = measurement.Value;\n                }\n            }\n        }\n    }\n\n    public override void Offer(in ExemplarMeasurement<double> measurement)\n    {\n        if (!this.previousValueDouble.HasValue || measurement.Value > this.previousValueDouble.Value)\n        {\n            lock (this.lockObject)\n            {\n                if (!this.previousValueDouble.HasValue || measurement.Value > this.previousValueDouble.Value)\n                {\n                    this.UpdateExemplar(0, in measurement);\n                    this.previousValueDouble = measurement.Value;\n                }\n            }\n        }\n    }\n\n    protected override void OnCollected()\n    {\n        if (this.ResetOnCollect)\n        {\n            lock (this.lockObject)\n            {\n                this.previousValueLong = null;\n                this.previousValueDouble = null;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpClient for OTLP Exporter in C#\nDESCRIPTION: This snippet demonstrates how to customize the HttpClient used by the OTLP exporter when using HttpProtobuf protocol. It shows how to add custom headers and create a new HttpClient instance.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddOpenTelemetry()\n    .WithTracing(builder => builder\n        .AddOtlpExporter(o =>\n        {\n            o.Protocol = OtlpExportProtocol.HttpProtobuf;\n            o.HttpClientFactory = () =>\n            {\n                HttpClient client = new HttpClient();\n                client.DefaultRequestHeaders.Add(\"X-MyCustomHeader\", \"value\");\n                return client;\n            };\n        }));\n```\n\n----------------------------------------\n\nTITLE: Configuring ActivitySource in TracerProvider\nDESCRIPTION: Demonstrates how to configure ActivitySource subscriptions in TracerProvider using both exact name matching and wildcard patterns. Shows explicit opt-in model for listening to activity sources.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Trace;\n\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    // The following subscribes to activities from Activity Source\n    // named \"MyCompany.MyProduct.MyLibrary\" only.\n    .AddSource(\"MyCompany.MyProduct.MyLibrary\")\n    // The following subscribes to activities from all Activity Sources\n    // whose name starts with  \"AbcCompany.XyzProduct.\".\n    .AddSource(\"AbcCompany.XyzProduct.*\")\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Parent Context with ActivityContext\nDESCRIPTION: Shows how to create an Activity with an explicit parent context using ActivityContext, overriding the default parent-child relationship that would use the current Activity.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar parentContext = new ActivityContext(\n    ActivityTraceId.CreateFromString(\"0af7651916cd43dd8448eb211c80319c\"),\n    ActivitySpanId.CreateFromString(\"b7ad6b7169203331\"),\n    ActivityTraceFlags.None);\n\nvar activity = activitySource.StartActivity(\n    \"ActivityName\",\n    ActivityKind.Server,\n    parentContext);\n```\n\n----------------------------------------\n\nTITLE: Creating Counter Instrument\nDESCRIPTION: Creating a Counter instrument from the Meter for tracking metrics\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-console/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static readonly Counter<long> MyFruitCounter = MyMeter.CreateCounter<long>(\"MyFruitCounter\");\n```\n\n----------------------------------------\n\nTITLE: Registering a Filtering Processor with TracerProvider in C#\nDESCRIPTION: Example showing how to register a custom filtering processor before an exporter processor. The filtering processor is placed before the exporter processor to control which activities are exported.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/extending-the-sdk/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing var tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .SetSampler(new MySampler())\n    .AddSource(\"OTel.Demo\")\n    .AddProcessor(new MyFilteringProcessor(activity => true))\n    .AddProcessor(new SimpleActivityExportProcessor(new MyExporter(\"ExporterX\")))\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring MeterProvider\nDESCRIPTION: Setting up MeterProvider with console exporter and meter configuration\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-console/README.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\n    .AddMeter(\"MyCompany.MyProduct.MyLibrary\")\n    .AddConsoleExporter()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Setting ActivityKind when Starting an Activity\nDESCRIPTION: Demonstrates specifying the ActivityKind (equivalent to OpenTelemetry's SpanKind) when starting an Activity. This example shows creating a Server kind Activity.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar activity = activitySource.StartActivity(\"ActivityName\", ActivityKind.Server);\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Extension with LogPropertiesAttribute\nDESCRIPTION: Extension method definition using LogPropertiesAttribute to enable logging of the FoodRecallNotice object with customized property formatting.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/complex-objects/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ninternal static partial class LoggerExtensions\n{\n    [LoggerMessage(LogLevel.Critical)]\n    public static partial void FoodRecallNotice(\n        this ILogger logger,\n        [LogProperties(OmitReferenceName = true)] in FoodRecallNotice foodRecallNotice);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Data Type Structure\nDESCRIPTION: Definition of a FoodRecallNotice struct representing the complex object to be logged, containing various string properties for food recall information.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/complex-objects/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic struct FoodRecallNotice\n{\n    public string? BrandName { get; set; }\n    public string? ProductDescription { get; set; }\n    public string? ProductType { get; set; }\n    public string? RecallReasonDescription { get; set; }\n    public string? CompanyName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging Complex Object Instance\nDESCRIPTION: Example of instantiating a FoodRecallNotice object and logging it using the custom logger extension.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/complex-objects/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar foodRecallNotice = new FoodRecallNotice\n{\n    BrandName = \"Contoso\",\n    ProductDescription = \"Salads\",\n    ProductType = \"Food & Beverages\",\n    RecallReasonDescription = \"due to a possible health risk from Listeria monocytogenes\",\n    CompanyName = \"Contoso Fresh Vegetables, Inc.\",\n};\n\nlogger.FoodRecallNotice(foodRecallNotice);\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Exception Status Setting\nDESCRIPTION: Configuration code to automatically set error status on exceptions.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/reporting-exceptions/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSdk.CreateTracerProviderBuilder()\n    .SetErrorStatusOnException()\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Metric Exporter in .NET\nDESCRIPTION: Implementation of OTLP metric exporter using MeterProviderBuilder with default configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\n    // rest of config not shown here.\n    .AddOtlpExporter()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Log Exporter in .NET\nDESCRIPTION: Example showing how to set up the OTLP log exporter using LoggerFactory with OpenTelemetry integration.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar loggerFactory = LoggerFactory.Create(builder =>\n{\n    builder.AddOpenTelemetry(options =>\n    {\n        options.AddOtlpExporter();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Sample OpenTelemetry metric output in console\nDESCRIPTION: Example console output showing the metrics collected from ASP.NET Core requests, including HTTP duration histogram with various dimensions and buckets. This demonstrates what to expect when the application runs.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-aspnetcore/README.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nExport http.server.duration, Measures the duration of inbound HTTP requests., Unit: ms, Meter: OpenTelemetry.Instrumentation.AspNetCore/1.0.0.0\n(2023-04-11T21:49:43.6915232Z, 2023-04-11T21:50:50.6564690Z] http.flavor: 1.1 http.method: GET http.route: / http.scheme: http http.status_code: 200 net.host.name: localhost net.host.port: 5000 Histogram\nValue: Sum: 3.5967 Count: 11 Min: 0.073 Max: 2.5539\n(-Infinity,0]:0\n(0,5]:11\n(5,10]:0\n(10,25]:0\n(25,50]:0\n(50,75]:0\n(75,100]:0\n(100,250]:0\n(250,500]:0\n(500,750]:0\n(750,1000]:0\n(1000,2500]:0\n(2500,5000]:0\n(5000,7500]:0\n(7500,10000]:0\n(10000,+Infinity]:0\n```\n\n----------------------------------------\n\nTITLE: Setting ResourceBuilder for OpenTelemetryLoggerOptions in C#\nDESCRIPTION: Shows how to set a custom ResourceBuilder for OpenTelemetryLoggerOptions when creating a LoggerFactory. This is used to define the entity producing the telemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/customizing-the-sdk/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar loggerFactory = LoggerFactory.Create(builder =>\n{\n    builder.AddOpenTelemetry(logging =>\n    {\n        logging.SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(\n            serviceName: \"MyService\",\n            serviceVersion: \"1.0.0\"));\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Producing Multiple Metrics from a Single Instrument in OpenTelemetry .NET\nDESCRIPTION: Demonstrates how to generate multiple metrics from a single instrument using different view configurations. This example shows creating a histogram with both explicit bucket and base2 exponential bucket aggregations.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n    var histogramWithMultipleAggregations = meter.CreateHistogram<long>(\"HistogramWithMultipleAggregations\");\n\n    // Configure the Explicit Bucket Histogram aggregation with custom boundaries and new name.\n    .AddView(instrumentName: \"HistogramWithMultipleAggregations\", new ExplicitBucketHistogramConfiguration() { Boundaries = new double[] { 10, 20 }, Name = \"MyHistogramWithExplicitHistogram\" })\n\n    // Use Base2 Exponential Bucket Histogram aggregation and new name.\n    .AddView(instrumentName: \"HistogramWithMultipleAggregations\", new Base2ExponentialBucketHistogramConfiguration() { Name = \"MyHistogramWithBase2ExponentialBucketHistogram\" })\n\n    // Both views rename the metric to avoid name conflicts. However, in this case,\n    // renaming one would be sufficient.\n\n    // This measurement will be aggregated into two separate metrics.\n    histogramWithMultipleAggregations.Record(10, new(\"tag1\", \"value1\"), new(\"tag2\", \"value2\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Text Map Propagator in OpenTelemetry .NET\nDESCRIPTION: Code snippet showing how to override the default composite propagator with a custom implementation using the OpenTelemetry SDK.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\n\nSdk.SetDefaultTextMapPropagator(new MyCustomPropagator());\n```\n\n----------------------------------------\n\nTITLE: Obtaining ILogger Instance with OpenTelemetrySdk.Create API\nDESCRIPTION: Demonstrates how to obtain an ILogger instance for emitting logs when using the OpenTelemetrySdk.Create API. This uses the GetLoggerFactory extension method on the OpenTelemetrySdk instance.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar logger = sdk.GetLoggerFactory().CreateLogger<Program>();\nlogger.LogInformation(\"Application started\");\n```\n\n----------------------------------------\n\nTITLE: Example of Problematic Multiple View Configuration in OpenTelemetry .NET\nDESCRIPTION: Shows a BAD practice example of configuring multiple views for a single histogram without renaming the metrics, which can lead to naming conflicts and backend issues.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n    var histogram = meter.CreateHistogram<long>(\"MyHistogram\");\n\n    // Configure a view to aggregate based only on the \"location\" tag.\n    .AddView(instrumentName: \"MyHistogram\", metricStreamConfiguration: new MetricStreamConfiguration\n        {\n            TagKeys = new string[] { \"location\" },\n        })\n\n    // Configure another view to aggregate based only on the \"status\" tag.\n    .AddView(instrumentName: \"MyHistogram\", metricStreamConfiguration: new MetricStreamConfiguration\n        {\n            TagKeys = new string[] { \"status\" },\n        })\n\n    // The measurement below will be aggregated into two metric streams, but both will have the same name.\n    // OpenTelemetry will issue a warning about this conflict and pass both streams to the exporter.\n    // However, this may cause issues depending on the backend.\n    histogram.Record(10, new(\"location\", \"seattle\"), new(\"status\", \"OK\"));\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger with OTLP support enabled\nDESCRIPTION: Command to run Jaeger with OTLP protocol support enabled for collecting OpenTelemetry trace data.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-jaeger/README.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./jaeger-all-in-one --collector.otlp.enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring B3 (Zipkin) Context Propagator in OpenTelemetry .NET\nDESCRIPTION: Example showing how to configure OpenTelemetry to use only the B3 Propagator format. This sets B3Propagator as the default text map propagator for the OpenTelemetry SDK.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Extensions.Propagators/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Extensions.Propagators;\n\nSdk.SetDefaultTextMapPropagator(new B3Propagator())\n```\n\n----------------------------------------\n\nTITLE: Creating Meter Instance for Metrics\nDESCRIPTION: Example of creating a Meter instance with name and version for metrics instrumentation\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Meter meter = new Meter(\n    \"companyname.product.instrumentationlibrary\",\n    \"1.0.0\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Metric Reader Options\nDESCRIPTION: Demonstrates how to configure metric reader settings using MetricReaderOptions class.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Set via delegate using code:\nappBuilder.Services.AddOpenTelemetry()\n    .WithMetrics(builder => builder.AddOtlpExporter((exporterOptions, readerOptions) =>\n    {\n        readerOptions.PeriodicExportingMetricReaderOptions.ExportIntervalMilliseconds = 10_000;\n    }));\n\n// Set via Options API using code:\nappBuilder.Services.Configure<MetricReaderOptions>(o =>\n{\n    o.PeriodicExportingMetricReaderOptions.ExportIntervalMilliseconds = 10_000;\n});\n\n// Set via Options API using configuration:\nappBuilder.Services.Configure<MetricReaderOptions>(\n    appBuilder.Configuration.GetSection(\"OpenTelemetry:Metrics\"));\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Links Based Sampler in OpenTelemetry .NET\nDESCRIPTION: Example console output showing how the links based sampler makes decisions. It demonstrates cases where the parent-based sampler drops activities but the links-based sampler decides to record them when linked spans are sampled.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/links-based-sampler/README.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naf448bc1cb3e5be4e4b56a8b6650785c: ParentBasedSampler decision: Drop\naf448bc1cb3e5be4e4b56a8b6650785c: No linked span is sampled. Hence,\nLinksBasedSampler decision is Drop.\n\n1b08120fa35c3f4a37e0b6326dc7688c: ParentBasedSampler decision: Drop\n1b08120fa35c3f4a37e0b6326dc7688c: No linked span is sampled. Hence,\nLinksBasedSampler decision is Drop.\n\nff710bd70baf2e8e843e7b38d1fc4cc1: ParentBasedSampler decision: RecordAndSample\nActivity.TraceId:            ff710bd70baf2e8e843e7b38d1fc4cc1\nActivity.SpanId:             620d9b218afbf926\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: LinksAndParentBasedSampler.Example\nActivity.DisplayName:        Main\nActivity.Kind:               Internal\nActivity.StartTime:          2023-04-18T16:52:16.0373932Z\nActivity.Duration:           00:00:00.0022481\nActivity.Tags:\n    foo: bar\nActivity.Links:\n    f7464f714b23713c9008f8fc884fc391 7d1c96a6f2c95556\n    6660db8951e10644f63cd385e7b9549e 526e615b7a70121a\n    4c94df8e520b32ff25fc44e0c8063c81 8080d0aaafa641af\n    70d8ba08181b5ec073ec8b5db778c41f 99ea6162257046ab\n    d96954e9e76835f442f62eece3066be4 ae9332547b80f50f\nResource associated with Activity:\n    service.name: unknown_service:links-sampler\n\n\n68121534d69b2248c4816c0c5281f908: ParentBasedSampler decision: Drop\n68121534d69b2248c4816c0c5281f908: No linked span is sampled. Hence,\nLinksBasedSampler decision is Drop.\n\n5042f2c52a08143f5f42be3818eb41fa: ParentBasedSampler decision: Drop\n5042f2c52a08143f5f42be3818eb41fa: At least one linked activity\n(TraceID: 5c1185c94f56ebe3c2ccb4b9880afb17, SpanID: 1f77abf0bded4ab9) is sampled.\nHence, LinksBasedSampler decision is RecordAndSample\n\nActivity.TraceId:            5042f2c52a08143f5f42be3818eb41fa\nActivity.SpanId:             0f8a9bfa9d7770e6\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: LinksAndParentBasedSampler.Example\nActivity.DisplayName:        Main\nActivity.Kind:               Internal\nActivity.StartTime:          2023-04-18T16:52:16.0806081Z\nActivity.Duration:           00:00:00.0018874\nActivity.Tags:\n    foo: bar\nActivity.Links:\n    ed77487f4a646399aea5effc818d8bfa fcdde951f29a13e0\n    f79860fdfb949f2c1f1698d1ed8036b9 e422cb771057bf7c\n    6326338d0c0cf3afe7c5946d648b94dc affc7a6c013ea273\n    c0750a9fa146062083b55227ac965ad4 b09d59ed3129779d\n    5c1185c94f56ebe3c2ccb4b9880afb17 1f77abf0bded4ab9\nResource associated with Activity:\n    service.name: unknown_service:links-sampler\n\n\n568a2b9489c58e7a5a769d264a9ddf28: ParentBasedSampler decision: Drop\n568a2b9489c58e7a5a769d264a9ddf28: No linked span is sampled. Hence,\nLinksBasedSampler decision is Drop.\n\n4f8d972b0d7727821ce4a307a7be8e8f: ParentBasedSampler decision: Drop\n4f8d972b0d7727821ce4a307a7be8e8f: No linked span is sampled. Hence,\nLinksBasedSampler decision is Drop.\n\nce940241ed33e1a030da3e9d201101d3: ParentBasedSampler decision: Drop\nce940241ed33e1a030da3e9d201101d3: At least one linked activity\n(TraceID: ba0d91887309399029719e2a71a12f62, SpanID: 61aafe295913080f) is sampled.\nHence, LinksBasedSampler decision is RecordAndSample\n\nActivity.TraceId:            ce940241ed33e1a030da3e9d201101d3\nActivity.SpanId:             5cf3d63926ce4fd5\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: LinksAndParentBasedSampler.Example\nActivity.DisplayName:        Main\nActivity.Kind:               Internal\nActivity.StartTime:          2023-04-18T16:52:16.1127688Z\nActivity.Duration:           00:00:00.0021072\nActivity.Tags:\n    foo: bar\nActivity.Links:\n    5223cff39311c741ef50aca58e4270c3 e401b6840acebf43\n    398b43fee8a75b068cdd11018ef528b0 24cfa4d5fb310b9d\n    34351a0f492d65ef92ca0db3238f5146 5c0a56a16291d765\n    ba0d91887309399029719e2a71a12f62 61aafe295913080f\n    de18a8af2d20972cd4f9439fcd51e909 4c40bc6037e58bf9\nResource associated with Activity:\n    service.name: unknown_service:links-sampler\n\n\nac46618da4495897bacd7d399e6fc6d8: ParentBasedSampler decision: Drop\nac46618da4495897bacd7d399e6fc6d8: No linked span is sampled. Hence,\nLinksBasedSampler decision is Drop.\n\n68a3a05e0348d2a2c1c3db34bc3fd2f5: ParentBasedSampler decision: Drop\n68a3a05e0348d2a2c1c3db34bc3fd2f5: At least one linked activity\n(TraceID: 87773d89fba942b0109d6ce0876bb67e, SpanID: 2aaac98d4e48c261) is sampled.\nHence, LinksBasedSampler decision is RecordAndSample\n\nActivity.TraceId:            68a3a05e0348d2a2c1c3db34bc3fd2f5\nActivity.SpanId:             3d0222f56b0e1e5d\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: LinksAndParentBasedSampler.Example\nActivity.DisplayName:        Main\nActivity.Kind:               Internal\nActivity.StartTime:          2023-04-18T16:52:16.1553354Z\nActivity.Duration:           00:00:00.0049821\nActivity.Tags:\n    foo: bar\nActivity.Links:\n    7175fbd18da2783dc594d1e8f3260c74 13019d9a06a5505b\n    59c9bdd52eb5cf23eae9001006743fcf 25573e0f1b290b8d\n    87773d89fba942b0109d6ce0876bb67e 2aaac98d4e48c261\n    0a1f65c47f556336b4028b515d363810 0816a2a2b7d4ea0b\n    7602375d3eae7e849a9dc27e858dc1c2 b918787b895b1374\nResource associated with Activity:\n    service.name: unknown_service:links-sampler\n```\n\n----------------------------------------\n\nTITLE: Using App.Logger for Middleware Logging\nDESCRIPTION: Example of using the app.Logger property for logging in middleware before dependency injection is fully available.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/getting-started-aspnetcore/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\napp.Logger.StartingApp();\n```\n\n----------------------------------------\n\nTITLE: Creating Counter Instrument\nDESCRIPTION: Example of creating a Counter instrument using the Meter instance\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Counter<long> MyFruitCounter = meter.CreateCounter<long>(\"MyFruitCounter\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Named HttpClient for Zipkin Exporter in C#\nDESCRIPTION: Example of how to configure a named HttpClient for the Zipkin Exporter using IHttpClientFactory. This approach allows for more advanced configuration and management of the HttpClient used for exporting data.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Zipkin/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddHttpClient(\n    \"ZipkinExporter\",\n     configureClient: (client) =>\n        client.DefaultRequestHeaders.Add(\"X-MyCustomHeader\", \"value\"));\n```\n\n----------------------------------------\n\nTITLE: Renaming Instruments Using Views\nDESCRIPTION: Shows how to use Views to rename a metric instrument to a different name, useful for resolving naming conflicts.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n    // Rename an instrument to new name.\n    .AddView(instrumentName: \"MyCounter\", name: \"MyCounterRenamed\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for OpenTelemetry Dependencies\nDESCRIPTION: This snippet mentions the use of a docker-compose.yaml file to set up required dependencies such as OTel Collector, Prometheus, Grafana, and Tempo. It explains the purpose of each component in the telemetry pipeline.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/examples/AspNetCore/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **OTel Collector** Accept telemetry and forwards them to Tempo, Prometheus\n- **Prometheus** to store metrics\n- **Grafana (UI)** UI to view metrics, traces. (Exemplars can be used to jump\n  from metrics to traces)\n- **Tempo** to store traces // TODO: Add a logging store also.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Configuration Sources for TracerProviderBuilder\nDESCRIPTION: Example showing how to set up a custom IConfiguration with JSON files, environment variables, and command-line arguments for use with OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/customizing-the-sdk/README.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// Build configuration from sources. Order is important.\nvar configuration = new ConfigurationBuilder()\n    .AddJsonFile(\"./myOTelSettings.json\")\n    .AddEnvironmentVariables()\n    .AddCommandLine(args)\n    .Build();\n\n// Set up a TracerProvider using the configuration.\nvar provider = Sdk.CreateTracerProviderBuilder()\n    .ConfigureServices(services => services.AddSingleton<IConfiguration>(configuration))\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring MeterProvider with Custom Cardinality\nDESCRIPTION: Example of configuring MeterProvider with a custom cardinality limit for the metric\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-console/README.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\n    .AddMeter(\"MyCompany.MyProduct.MyLibrary\")\n    .AddView(instrumentName: \"MyFruitCounter\", new MetricStreamConfiguration { CardinalityLimit = 10 })\n    .AddConsoleExporter()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Recording Exception Details in Activity\nDESCRIPTION: Demonstrates how to record full exception details in Activity using RecordException method.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/reporting-exceptions/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var activity = MyActivitySource.StartActivity(\"Foo\"))\n{\n    try\n    {\n        Func();\n    }\n    catch (SomeException ex)\n    {\n        activity?.SetStatus(ActivityStatusCode.Error, ex.Message);\n        activity?.RecordException(ex);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TracerProvider with multiple exporters\nDESCRIPTION: C# code snippet showing how to set up a TracerProvider with both Console and OTLP exporters for OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-jaeger/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing var tracerProvider = Sdk.CreateTracerProviderBuilder()\n    ...\n    .AddConsoleExporter()\n    .AddOtlpExporter()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Sample Metric Output\nDESCRIPTION: Example of metric output from the console showing fruit counter measurements with different attributes\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-console/README.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nExport MyFruitCounter, Meter: MyCompany.MyProduct.MyLibrary/1.0\n(2021-09-23T22:00:08.4399776Z, 2021-09-23T22:00:08.4510115Z] color:red name:apple LongSum\nValue: 6\n(2021-09-23T22:00:08.4399776Z, 2021-09-23T22:00:08.4510115Z] color:yellow name:lemon LongSum\nValue: 7\n(2021-09-23T22:00:08.4399776Z, 2021-09-23T22:00:08.4510115Z] color:green name:apple LongSum\nValue: 2\n```\n\n----------------------------------------\n\nTITLE: Incorrect Exception Logging Example\nDESCRIPTION: Demonstrates incorrect way of logging exceptions by including exception details in message template.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/README.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar food = \"tomato\";\nvar price = 2.99;\n\ntry\n{\n    // Execute some logic\n\n    logger.SayHello(food, price);\n}\ncatch (Exception ex)\n{\n    logger.SayHelloFailure(food, price, ex.Message);\n}\n\ninternal static partial class LoggerExtensions\n{\n    [LoggerMessage(Level = LogLevel.Information, Message = \"Hello from {food} {price}.\")]\n    public static partial void SayHello(this ILogger logger, string food, double price);\n\n    // BAD - Exception should not be part of the message template. Use the dedicated parameter.\n    [LoggerMessage(Level = LogLevel.Error, Message = \"Could not say hello from {food} {price} {message}.\")]\n    public static partial void SayHelloFailure(this ILogger logger, string food, double price, string message);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Measurements with Tags to a Counter in C#\nDESCRIPTION: Shows how to add measurements to a counter with tags. The example includes a warning about maintaining consistent tag order for optimal performance.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncounter.Add(2, new(\"name\", \"apple\"), new(\"color\", \"red\"));\ncounter.Add(3, new(\"name\", \"lime\"), new(\"color\", \"green\"));\ncounter.Add(5, new(\"name\", \"lemon\"), new(\"color\", \"yellow\"));\ncounter.Add(8, new(\"color\", \"yellow\"), new(\"name\", \"lemon\")); // bad perf\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Self-Diagnostics in JSON\nDESCRIPTION: JSON configuration for enabling OpenTelemetry self-diagnostics. This file should be named 'OTEL_DIAGNOSTICS.json' and placed in the current working directory of the process to enable logging of internal OpenTelemetry events.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"LogDirectory\": \".\",\n    \"FileSize\": 32768,\n    \"LogLevel\": \"Warning\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Logging with Source Generator\nDESCRIPTION: Demonstrates proper exception logging using compile-time source generation with dedicated exception parameter.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/README.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar food = \"tomato\";\nvar price = 2.99;\n\ntry\n{\n    // Execute some logic\n\n    logger.SayHello(food, price);\n}\ncatch (Exception ex)\n{\n    logger.SayHelloFailure(ex, food, price);\n}\n\ninternal static partial class LoggerExtensions\n{\n    [LoggerMessage(Level = LogLevel.Information, Message = \"Hello from {food} {price}.\")]\n    public static partial void SayHello(this ILogger logger, string food, double price);\n\n    [LoggerMessage(Level = LogLevel.Error, Message = \"Could not say hello from {food} {price}.\")]\n    public static partial void SayHelloFailure(this ILogger logger, Exception exception, string food, double price);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new ASP.NET Core application using dotnet CLI\nDESCRIPTION: Commands to create a new ASP.NET Core web application project and navigate to its directory.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-aspnetcore/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new web -o aspnetcoreapp\ncd aspnetcoreapp\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Console Exporter Package\nDESCRIPTION: Command to add the OpenTelemetry Console Exporter package to the project, which enables the visualization of trace data in the console.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-console/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Console\n```\n\n----------------------------------------\n\nTITLE: Configuring LogRecord Export Processor Options\nDESCRIPTION: Shows different ways to configure processor and batch settings for logging using LogRecordExportProcessorOptions.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Set via delegate using code:\nappBuilder.Logging.AddOpenTelemetry(options =>\n{\n    options.AddOtlpExporter((exporterOptions, processorOptions) =>\n    {\n        processorOptions.BatchExportProcessorOptions.ScheduledDelayMilliseconds = 2000;\n        processorOptions.BatchExportProcessorOptions.MaxExportBatchSize = 5000;\n    });\n});\n\n// Set via Options API using code:\nappBuilder.Services.Configure<LogRecordExportProcessorOptions>(o =>\n{\n    o.BatchExportProcessorOptions.ScheduledDelayMilliseconds = 2000;\n    o.BatchExportProcessorOptions.MaxExportBatchSize = 5000;\n});\n\n// Set via Options API using configuration:\nappBuilder.Services.Configure<LogRecordExportProcessorOptions>(\n    appBuilder.Configuration.GetSection(\"OpenTelemetry:Logging\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource in OpenTelemetry .NET\nDESCRIPTION: Shows the new ConfigureResource method for configuring resources in OpenTelemetry .NET providers.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nConfigureResource\n```\n\n----------------------------------------\n\nTITLE: Exception Logging with Extension Methods\nDESCRIPTION: Shows proper exception logging using extension methods with dedicated exception overloads.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/README.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar food = \"tomato\";\nvar price = 2.99;\n\ntry\n{\n    // Execute some logic\n\n    logger.LogInformation(\"Hello from {food} {price}.\", food, price);\n}\ncatch (Exception ex)\n{\n    logger.LogError(ex, \"Could not say hello from {food} {price}.\", food, price);\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Example with Docker Compose\nDESCRIPTION: Command to run the complete example application using Docker Compose, which includes the WebApi, WorkerService, RabbitMQ, and Zipkin components. This requires Docker Desktop to be installed.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/examples/MicroserviceExample/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Installing Zipkin Exporter Package via .NET CLI\nDESCRIPTION: Command to add the OpenTelemetry.Exporter.Zipkin package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Zipkin/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Zipkin\n```\n\n----------------------------------------\n\nTITLE: Setting Custom ExemplarReservoir for Metrics in OpenTelemetry .NET\nDESCRIPTION: Shows how to set a custom ExemplarReservoir for an instrument using the MetricStreamConfiguration.ExemplarReservoirFactory property. Note that this is an experimental API and requires an ExemplarFilter to enable Exemplars.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n    // Use MyCustomExemplarReservoir for \"MyFruitCounter\"\n    .AddView(\n        instrumentName: \"MyFruitCounter\",\n        new MetricStreamConfiguration { ExemplarReservoirFactory = () => new MyCustomExemplarReservoir() })\n```\n\n----------------------------------------\n\nTITLE: Setting LogRecord Properties in C#\nDESCRIPTION: Illustrates how to set various properties on a LogRecord object in OpenTelemetry .NET.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nLogRecord.Timestamp = ...\nLogRecord.TraceId = ...\nLogRecord.SpanId = ...\nLogRecord.TraceFlags = ...\nLogRecord.TraceState = ...\nLogRecord.CategoryName = ...\nLogRecord.LogLevel = ...\nLogRecord.EventId = ...\nLogRecord.Exception = ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Event Log Attributes in OTLP Exporter for .NET Logs\nDESCRIPTION: Configures the OTLP Exporter to include additional log attributes for event ID and name when exporting log records.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n* `OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES`\n\n    When set to `true`, it enables export of `LogRecord.EventId.Id` as\n    `logrecord.event.id` and `LogRecord.EventId.Name` as `logrecord.event.name`.\n\n    Added in `1.7.0-alpha.1`.\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Experimental OTLP Retry\nDESCRIPTION: Example of setting an environment variable to enable experimental in-memory retry for OTLP exports during transient failures.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nOTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY=in_memory\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Console Exporter Log Output\nDESCRIPTION: Sample console output showing the format of logs captured by OpenTelemetry and exported to the console.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/getting-started-aspnetcore/README.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nLogRecord.Timestamp:               2023-09-06T22:59:17.9787564Z\nLogRecord.CategoryName:            getting-started-aspnetcore\nLogRecord.Severity:                Info\nLogRecord.SeverityText:            Information\nLogRecord.Body:                    Starting the app...\nLogRecord.Attributes (Key:Value):\n    OriginalFormat (a.k.a Body): Starting the app...\nLogRecord.EventId:                 225744744\nLogRecord.EventName:               StartingApp\n\n...\n\nLogRecord.Timestamp:               2023-09-06T22:59:18.0644378Z\nLogRecord.CategoryName:            Microsoft.Hosting.Lifetime\nLogRecord.Severity:                Info\nLogRecord.SeverityText:            Information\nLogRecord.Body:                    Now listening on: {address}\nLogRecord.Attributes (Key:Value):\n    address: http://localhost:5000\n    OriginalFormat (a.k.a Body): Now listening on: {address}\nLogRecord.EventId:                 14\nLogRecord.EventName:               ListeningOnAddress\n\n...\n\nLogRecord.Timestamp:               2023-09-06T23:00:46.1639248Z\nLogRecord.TraceId:                 3507087d60ae4b1d2f10e68f4e40784a\nLogRecord.SpanId:                  c51be9f19c598b69\nLogRecord.TraceFlags:              None\nLogRecord.CategoryName:            Program\nLogRecord.Severity:                Info\nLogRecord.SeverityText:            Information\nLogRecord.Body:                    Food `{name}` price changed to `{price}`.\nLogRecord.Attributes (Key:Value):\n    name: artichoke\n    price: 9.99\n    OriginalFormat (a.k.a Body): Food `{name}` price changed to `{price}`.\nLogRecord.EventId:                 344095174\nLogRecord.EventName:               FoodPriceChanged\n\n...\n```\n\n----------------------------------------\n\nTITLE: Adding TracerProvider.GetTracer Overload in C#\nDESCRIPTION: Added a new overload for TracerProvider.GetTracer which accepts an optional IEnumerable<KeyValuePair<string, object?>> tags parameter, allowing additional attributes to be associated with the Tracer.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTracerProvider.GetTracer(string name, string version, IEnumerable<KeyValuePair<string, object?>>? tags)\n```\n\n----------------------------------------\n\nTITLE: Visualizing MeterProvider and Metric Flow in OpenTelemetry\nDESCRIPTION: This diagram illustrates the relationship between Meters, Instruments, MeterProviders, MetricReaders, and MetricExporters in OpenTelemetry. It shows how measurements flow from instruments to readers and exporters across different meter providers.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/README.md#2025-04-18_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n\nsubgraph Meter A\n  InstrumentX\nend\n\nsubgraph Meter B\n  InstrumentY\n  InstrumentZ\nend\n\nsubgraph Meter Provider 2\n  MetricReader2\n  MetricExporter2\n  MetricReader3\n  MetricExporter3\nend\n\nsubgraph Meter Provider 1\n  MetricReader1\n  MetricExporter1\nend\n\nInstrumentX --> | Measurements | MetricReader1\nInstrumentY --> | Measurements | MetricReader1 --> MetricExporter1\nInstrumentZ --> | Measurements | MetricReader2 --> MetricExporter2\nInstrumentZ --> | Measurements | MetricReader3 --> MetricExporter3\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Console Exporter\nDESCRIPTION: Command to add the OpenTelemetry Console Exporter package to the project\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-console/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Console\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Telemetry.Abstractions Package\nDESCRIPTION: Command to add the required NuGet package for complex object logging support.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/complex-objects/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package Microsoft.Extensions.Telemetry.Abstractions\n```\n\n----------------------------------------\n\nTITLE: Viewing OpenTelemetry Trace Output\nDESCRIPTION: The console output showing trace information after running the application with OpenTelemetry implementation. It displays the Activity's trace ID, span ID, tags, and other metadata.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-console/README.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nActivity.TraceId:          d4a7d499698d62f0e2317a67abc559b6\nActivity.SpanId:           a091d18fbe45bdf6\nActivity.TraceFlags:           Recorded\nActivity.ActivitySourceName: MyCompany.MyProduct.MyLibrary\nActivity.DisplayName: SayHello\nActivity.Kind:        Internal\nActivity.StartTime:   2022-03-30T19:42:33.5178011Z\nActivity.Duration:    00:00:00.0097620\nStatusCode : Ok\nActivity.Tags:\n    foo: 1\n    bar: Hello, World!\n    baz: [1, 2, 3]\nResource associated with Activity:\n    service.name: unknown_service:getting-started\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenTelemetry Stress Test with Custom Options in C#\nDESCRIPTION: Advanced stress test implementation that includes custom command-line options by creating a class that derives from StressTestOptions.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress/README.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing CommandLine;\nusing OpenTelemetry.Tests.Stress;\n\npublic static class Program\n{\n    public static int Main(string[] args)\n    {\n        return StressTestFactory.RunSynchronously<MyStressTest, MyStressTestOptions>(args);\n    }\n\n    private sealed class MyStressTest : StressTest<MyStressTestOptions>\n    {\n        public MyStressTest(MyStressTestOptions options)\n            : base(options)\n        {\n        }\n\n        protected override void RunWorkItemInParallel()\n        {\n            // Use this.Options here to access options supplied\n            // on the command line.\n        }\n    }\n\n    private sealed class MyStressTestOptions : StressTestOptions\n    {\n        [Option('r', \"rate\", HelpText = \"Add help text here for the rate option. Default value: 0.\", Required = false)]\n        public int Rate { get; set; } = 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Activity Status with Error Description\nDESCRIPTION: Example of setting Activity status with custom error description from exception message.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/reporting-exceptions/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var activity = MyActivitySource.StartActivity(\"Foo\"))\n{\n    try\n    {\n        Func();\n    }\n    catch (SomeException ex)\n    {\n        activity?.SetStatus(ActivityStatusCode.Error, ex.Message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a minimal API endpoint in ASP.NET Core\nDESCRIPTION: A simple endpoint configuration using the minimal API syntax in ASP.NET Core. This code defines a GET endpoint at the root path that returns a greeting message.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-aspnetcore/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapGet(\"/\", () => $\"Hello from OpenTelemetry Metrics!\");\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus with OTLP receiver enabled\nDESCRIPTION: Command to start Prometheus server with the OpenTelemetry Protocol receiver feature flag enabled. This allows Prometheus to directly receive OTLP metrics from applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-prometheus-grafana/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./prometheus --web.enable-otlp-receiver\n```\n\n----------------------------------------\n\nTITLE: Retrieving Histogram Min/Max Values in C#\nDESCRIPTION: Demonstrates the new API for retrieving histogram min and max values in OpenTelemetry .NET.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nTryGetHistogramMinMaxValues(out double min, out double max)\n```\n\n----------------------------------------\n\nTITLE: Setting Activity Status with DiagnosticSource\nDESCRIPTION: Example showing how to set activity status using tags when using DiagnosticSource versions older than 6.0. Uses otel.status_code and otel.status_description tags.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nactivity?.SetTag(\"otel.status_code\", \"ERROR\");\nactivity?.SetTag(\"otel.status_description\", \"error status description\");\n```\n\n----------------------------------------\n\nTITLE: Implementing a counter loop in a .NET OpenTelemetry application\nDESCRIPTION: C# code snippet showing how to create a loop that continuously increments counters with different attributes until a key is pressed. This demonstrates basic metric creation with OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-prometheus-grafana/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(\"Press any key to exit\");\n\nwhile (!Console.KeyAvailable)\n{\n    MyFruitCounter.Add(1, new(\"name\", \"apple\"), new(\"color\", \"red\"));\n    MyFruitCounter.Add(2, new(\"name\", \"lemon\"), new(\"color\", \"yellow\"));\n    ...\n\n    Thread.Sleep(300);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Digital Signatures with Cosign in Bash\nDESCRIPTION: This command demonstrates how to verify the integrity of a DLL inside a NuGet package using the cosign tool from Sigstore. It checks the digital signature against the certificate to ensure the package hasn't been tampered with.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify-blob \\\n    --signature OpenTelemetry.dll-keyless.sig \\\n    --certificate OpenTelemetry.dll-keyless.pem.cer \\\n    --certificate-identity \"https://github.com/open-telemetry/opentelemetry-dotnet/.github/workflows/publish-packages-1.0.yml@refs/tags/core-1.10.0-rc.1\" \\\n    --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\" \\\n    OpenTelemetry.dll\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Experimental OTLP Disk Retry\nDESCRIPTION: Example of setting environment variables to enable experimental disk-based retry for OTLP exports and specify a custom directory path.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nOTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY=disk\nOTEL_DOTNET_EXPERIMENTAL_OTLP_DISK_RETRY_DIRECTORY_PATH=/custom/path\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry NuGet Packages\nDESCRIPTION: Commands to add the required OpenTelemetry packages to the ASP.NET Core project.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/getting-started-aspnetcore/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Console\ndotnet add package OpenTelemetry.Extensions.Hosting\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry packages for ASP.NET Core metrics\nDESCRIPTION: Commands to add the required OpenTelemetry NuGet packages to the project, including the Console exporter, hosting extensions, and ASP.NET Core instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-aspnetcore/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Console\ndotnet add package OpenTelemetry.Extensions.Hosting\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Basic Exception Handling Pattern in C#\nDESCRIPTION: Demonstrates the basic pattern of handling exceptions in C# using try-catch blocks.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/reporting-exceptions/README.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n{\n    Func();\n}\ncatch (SomeException ex)\n{\n    DoSomething();\n}\ncatch (Exception ex)\n{\n    DoSomethingElse();\n    throw;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus AspNetCore Exporter Package\nDESCRIPTION: Command to add the OpenTelemetry Prometheus exporter NuGet package to a .NET project. Uses the --prerelease flag as the package is still in development.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Prometheus.AspNetCore/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package --prerelease OpenTelemetry.Exporter.Prometheus.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Console output of OpenTelemetry trace data\nDESCRIPTION: Example of the trace output format displayed in the console when using the ConsoleExporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-jaeger/README.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nActivity.TraceId:            693f1d15634bfe6ba3254d6f9d20df27\nActivity.SpanId:             429cc5a90a753fb3\nActivity.TraceFlags:         Recorded\nActivity.ParentSpanId:       0d64498b736c9a11\nActivity.ActivitySourceName: System.Net.Http\nActivity.DisplayName:        GET\nActivity.Kind:               Client\nActivity.StartTime:          2024-07-04T13:18:12.2408786Z\nActivity.Duration:           00:00:02.1028562\nActivity.Tags:\n    http.request.method: GET\n    server.address: httpstat.us\n    server.port: 443\n    url.full: https://httpstat.us/200?sleep=Redacted\n    network.protocol.version: 1.1\n    http.response.status_code: 200\nResource associated with Activity:\n    service.name: DemoApp\n    service.version: 1.0.0\n    service.instance.id: 03ccafab-e9a7-440a-a9cd-9a0163e0d06c\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.9.0\n...\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry package dependencies\nDESCRIPTION: Commands to add required OpenTelemetry packages for console exporting, OTLP exporting, and HTTP instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-jaeger/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Console\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol\ndotnet add package OpenTelemetry.Instrumentation.Http\n```\n\n----------------------------------------\n\nTITLE: Avoid String Interpolation in Logging\nDESCRIPTION: Shows an anti-pattern using string interpolation which leads to poor performance in logging operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar food = \"tomato\";\nvar price = 2.99;\n\nlogger.LogInformation($\"Hello from {food} {price}.\");\n```\n\n----------------------------------------\n\nTITLE: Customizing Named HttpClient for OTLP Exporter using IHttpClientFactory in C#\nDESCRIPTION: This snippet shows how to customize the named 'OtlpTraceExporter' HttpClient using the AddHttpClient extension method. It demonstrates adding a custom header to the default request headers.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddHttpClient(\n    \"OtlpTraceExporter\",\n    configureClient: (client) =>\n        client.DefaultRequestHeaders.Add(\"X-MyCustomHeader\", \"value\"));\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry In-memory Exporter via NuGet\nDESCRIPTION: Command to install the OpenTelemetry.Exporter.InMemory package using the .NET CLI\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.InMemory/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.InMemory\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Output for Linked Root Activities in OpenTelemetry .NET\nDESCRIPTION: This code snippet represents the output of running the sample. It shows multiple activities, each with a new trace ID and a link to the original activity. The output demonstrates the creation of new root activities for fan-out operations, preserving the connection to the orchestrating activity.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/links-creation-with-new-activities/README.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nActivity.TraceId:            5ce4d8ad4926ecdd0084681f46fa38d9\nActivity.SpanId:             8f9e9441f0789f6e\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: LinksCreationWithNewRootActivities\nActivity.DisplayName:        FannedOutActivity 1\nActivity.Kind:               Internal\nActivity.StartTime:          2023-10-17T01:24:40.4957326Z\nActivity.Duration:           00:00:00.0008656\nActivity.Links:\n    2890476acefb53b93af64a0d91939051 16b83c1517629363\nResource associated with Activity:\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 0.0.0-alpha.0.2600\n    service.name: unknown_service:links-creation\n\nActivity.TraceId:            16a8ad23d14a085f2a1f260a4b474d05\nActivity.SpanId:             0c3e835cfd60c604\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: LinksCreationWithNewRootActivities\nActivity.DisplayName:        FannedOutActivity 2\nActivity.Kind:               Internal\nActivity.StartTime:          2023-10-17T01:24:40.5908290Z\nActivity.Duration:           00:00:00.0009197\nActivity.Links:\n    2890476acefb53b93af64a0d91939051 16b83c1517629363\nResource associated with Activity:\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 0.0.0-alpha.0.2600\n    service.name: unknown_service:links-creation\n\nActivity.TraceId:            46f0b5b68173b4acf4f50e1f5cdb3e55\nActivity.SpanId:             42e7f4439fc2b416\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: LinksCreationWithNewRootActivities\nActivity.DisplayName:        FannedOutActivity 3\nActivity.Kind:               Internal\nActivity.StartTime:          2023-10-17T01:24:40.5930378Z\nActivity.Duration:           00:00:00.0008622\nActivity.Links:\n    2890476acefb53b93af64a0d91939051 16b83c1517629363\nResource associated with Activity:\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 0.0.0-alpha.0.2600\n    service.name: unknown_service:links-creation\n\nActivity.TraceId:            2890476acefb53b93af64a0d91939051\nActivity.SpanId:             6878c2a84d4d4996\nActivity.TraceFlags:         Recorded\nActivity.ParentSpanId:       16b83c1517629363\nActivity.ActivitySourceName: LinksCreationWithNewRootActivities\nActivity.DisplayName:        WrapUp\nActivity.Kind:               Internal\nActivity.StartTime:          2023-10-17T01:24:40.5950683Z\nActivity.Duration:           00:00:00.0008843\nActivity.Tags:\n    foo: 1\nResource associated with Activity:\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 0.0.0-alpha.0.2600\n    service.name: unknown_service:links-creation\n\nActivity.TraceId:            2890476acefb53b93af64a0d91939051\nActivity.SpanId:             16b83c1517629363\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: LinksCreationWithNewRootActivities\nActivity.DisplayName:        OrchestratingActivity\nActivity.Kind:               Internal\nActivity.StartTime:          2023-10-17T01:24:40.4937024Z\nActivity.Duration:           00:00:00.1043390\nActivity.Tags:\n    foo: 1\nResource associated with Activity:\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 0.0.0-alpha.0.2600\n    service.name: unknown_service:links-creation\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Architecture Diagram\nDESCRIPTION: A Mermaid diagram illustrating the relationship between ActivitySource, TracerProvider, Processor, and ConsoleExporter in the OpenTelemetry SDK and API. It shows the flow of Activity objects through the system.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-console/README.md#2025-04-18_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n\nsubgraph SDK\n  TracerProvider\n  Processor[\"SimpleExportProcessor < Activity >\"]\n  ConsoleExporter\nend\n\nsubgraph API\n  ActivitySource[\"ActivitySource(#quot;MyCompany.MyProduct.MyLibrary#quot;)\"]\nend\n\nActivitySource --> | System.Diagnostics.Activity | TracerProvider\n\nTracerProvider --> | System.Diagnostics.Activity | Processor --> | Batch | ConsoleExporter\n```\n\n----------------------------------------\n\nTITLE: Setting Default Cardinality Limit for MeterProvider in C#\nDESCRIPTION: This snippet demonstrates how to set the default cardinality limit for all metrics managed by a MeterProvider. The SetMaxMetricPointsPerMetricStream extension method is used, though it's been marked as obsolete since version 1.10.0.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/customizing-the-sdk/README.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing var meterProvider = Sdk.CreateMeterProviderBuilder()\n    .AddMeter(\"MyCompany.MyProduct.MyLibrary\")\n    .SetMaxMetricPointsPerMetricStream(4000) // Note: The default value is 2000\n    .AddConsoleExporter()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Valid IsEnabled Usage Example\nDESCRIPTION: Shows a valid use case for IsEnabled check when argument evaluation is expensive.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nif (logger.IsEnabled(LogLevel.Information))\n{\n    logger.SayHello(food, Database.GetFoodPrice(food));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiagnosticSource Package with .NET CLI\nDESCRIPTION: Command for installing the System.Diagnostics.DiagnosticSource package, which is required for using the Activity API in OpenTelemetry .NET.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package System.Diagnostics.DiagnosticSource\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Manually with SDK Version 1.9.0 or Older\nDESCRIPTION: Shows how to manually initialize individual OpenTelemetry providers for different signals in SDK version 1.9.0 or older. Each provider is created and managed independently, requiring separate configuration and explicit disposal during shutdown.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing OpenTelemetry;\n\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    /* Tracing configuration goes here */\n    .Build();\n\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\n    /* Metrics configuration goes here */\n    .Build();\n\nvar loggerFactory = LoggerFactory.Create(builder => builder\n    .AddOpenTelemetry(options => /* Logging configuration goes here */));\n\n// During application shutdown\ntracerProvider.Dispose();\nmeterProvider.Dispose();\nloggerFactory.Dispose();\n```\n\n----------------------------------------\n\nTITLE: Obsoleting ActivityExtensions Methods in C#\nDESCRIPTION: Obsoleted the ActivityExtensions.GetStatus, ActivityExtensions.SetStatus, and ActivityExtensions.RecordException extension methods. Users should migrate to the native Activity methods for these operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Obsolete methods\n[Obsolete(\"Use Activity.SetStatus instead.\")]\npublic static void SetStatus(this Activity activity, StatusCode code, string description = null)\n\n[Obsolete(\"Use Activity.Status and Activity.StatusDescription instead.\")]\npublic static Status GetStatus(this Activity activity)\n\n[Obsolete(\"Use Activity.AddException instead.\")]\npublic static void RecordException(this Activity activity, Exception exception)\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenTelemetry Log and Activity Correlation Output\nDESCRIPTION: Example console output showing how LogRecord fields (TraceId, SpanId, TraceFlags) automatically correlate with the corresponding Activity fields when logging occurs within an Activity context.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/correlation/README.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLogRecord.Timestamp:               2024-01-26T17:55:39.2273475Z\nLogRecord.TraceId:                 aed89c3b250fb9d8e16ccab1a4a9bbb5\nLogRecord.SpanId:                  bd44308753200c58\nLogRecord.TraceFlags:              Recorded\nLogRecord.CategoryName:            Program\nLogRecord.Severity:                Info\nLogRecord.SeverityText:            Information\nLogRecord.Body:                    Food `{name}` price changed to `{price}`.\nLogRecord.Attributes (Key:Value):\n    name: artichoke\n    price: 9.99\n    OriginalFormat (a.k.a Body): Food `{name}` price changed to `{price}`.\nLogRecord.EventId:                 344095174\nLogRecord.EventName:               FoodPriceChanged\n\n...\n\nActivity.TraceId:            aed89c3b250fb9d8e16ccab1a4a9bbb5\nActivity.SpanId:             bd44308753200c58\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: MyCompany.MyProduct.MyLibrary\nActivity.DisplayName:        SayHello\nActivity.Kind:              Internal\nActivity.StartTime:          2024-01-26T17:55:39.2223849Z\nActivity.Duration:           00:00:00.0361682\n...\n```\n\n----------------------------------------\n\nTITLE: Installing DiagnosticSource Package\nDESCRIPTION: Command to install the System.Diagnostics.DiagnosticSource package using the .NET CLI\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package System.Diagnostics.DiagnosticSource\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter Options with IConfiguration\nDESCRIPTION: Example of binding OtlpExporterOptions to IConfiguration section when using OpenTelemetry.Extensions.Hosting\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nservices.Configure<OtlpExporterOptions>(this.Configuration.GetSection(\"Otlp\"));\n```\n\n----------------------------------------\n\nTITLE: Unnecessary IsEnabled Check Example\nDESCRIPTION: Demonstrates unnecessary performance optimization attempt using IsEnabled check.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar food = \"tomato\";\nvar price = 2.99;\n\nif (logger.IsEnabled(LogLevel.Information)) // do not do this, there is no perf gain\n{\n    logger.SayHello(food, price);\n}\n\ninternal static partial class LoggerExtensions\n{\n    [LoggerMessage(Level = LogLevel.Information, Message = \"Hello from {food} {price}.\")]\n    public static partial void SayHello(this ILogger logger, string food, double price);\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation for OpenTelemetry .NET Log Redaction\nDESCRIPTION: Markdown documentation explaining how to implement log redaction using a custom processor called MyRedactionProcessor. The processor replaces instances of '<secret>' with 'newRedactedValueHere' in log entries.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/redaction/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Redaction\n\nThis example shows how to redact sensitive information from Logs.\nIn this example, we attach a custom `Processor` called `MyRedactionProcessor`\nwhich is responsible for replacing any instance of the word \"&lt;secret&gt;\"\nwith the value \"newRedactedValueHere\".\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic OpenTelemetry Stress Test in C#\nDESCRIPTION: Code template for creating a simple stress test by implementing a StressTest class with a RunWorkItemInParallel method that contains the code to be tested.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry.Tests.Stress;\n\npublic static class Program\n{\n    public static int Main(string[] args)\n    {\n        return StressTestFactory.RunSynchronously<MyStressTest>(args);\n    }\n\n    private sealed class MyStressTest : StressTest<StressTestOptions>\n    {\n        public MyStressTest(StressTestOptions options)\n            : base(options)\n        {\n        }\n\n        protected override void RunWorkItemInParallel()\n        {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command-line Options for OpenTelemetry Stress Tests\nDESCRIPTION: Help text showing available command-line options for configuring the stress test, including concurrency, Prometheus port, and test duration settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress/README.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  -c, --concurrency      The concurrency (maximum degree of parallelism) for the stress test. Default value: Environment.ProcessorCount.\n\n  -p, --internal_port    The Prometheus http listener port where Prometheus will be exposed for retrieving internal metrics while the stress test is running. Set to '0' to\n                         disable. Default value: 9464.\n\n  -d, --duration         The duration for the stress test to run in seconds. If set to '0' or a negative value the stress test will run until canceled. Default value: 0.\n```\n\n----------------------------------------\n\nTITLE: Defining ApiCompat Exclusions for .NET Compiler Attributes\nDESCRIPTION: This configuration specifies that compiler-generated attributes should be excluded from API compatibility checks in the OpenTelemetry .NET project. It excludes both CompilerGeneratedAttribute and NullableContextAttribute, which are implementation details rather than part of the public API surface.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/build/GlobalAttrExclusions.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// These attributes should be excluded from ApiCompat checks.\n\nT:System.Runtime.CompilerServices.CompilerGeneratedAttribute\nT:System.Runtime.CompilerServices.NullableContextAttribute\n```\n\n----------------------------------------\n\nTITLE: Stress Test Command-Line Options\nDESCRIPTION: Detailed help output showing all available command-line options and their descriptions, including test type, metrics port, view configuration, OTLP settings, and runtime parameters.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress.Metrics/README.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  -t, --type             The metrics stress test type to run. Valid values: [Histogram, Counter]. Default value: Histogram.\n\n  -m, --metrics_port     The Prometheus http listener port where Prometheus will be exposed for retrieving test metrics while the stress test is running. Set to '0' to disable.\n                         Default value: 9185.\n\n  -v, --view             Whether or not a view should be configured to filter tags for the stress test. Default value: False.\n\n  -o, --otlp             Whether or not an OTLP exporter should be added for the stress test. Default value: False.\n\n  -i, --interval         The OTLP exporter export interval in milliseconds. Default value: 5000.\n\n  -e, --exemplars        Whether or not to enable exemplars for the stress test. Default value: False.\n\n  -c, --concurrency      The concurrency (maximum degree of parallelism) for the stress test. Default value: Environment.ProcessorCount.\n\n  -p, --internal_port    The Prometheus http listener port where Prometheus will be exposed for retrieving internal metrics while the stress test is running. Set to '0' to\n                         disable. Default value: 9464.\n\n  -d, --duration         The duration for the stress test to run in seconds. If set to '0' or a negative value the stress test will run until canceled. Default value: 0.\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry.Extensions.Propagators Package via dotnet CLI\nDESCRIPTION: Command to install the OpenTelemetry.Extensions.Propagators package using the dotnet CLI. The --prerelease flag allows installation of prerelease versions of the package.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Extensions.Propagators/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package --prerelease OpenTelemetry.Extensions.Propagators\n```\n\n----------------------------------------\n\nTITLE: Removing Console Exporter for production use\nDESCRIPTION: Code and commands to remove the Console Exporter, keeping only the OTLP Exporter for production deployment.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-jaeger/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing var tracerProvider = Sdk.CreateTracerProviderBuilder()\n    ...\n    // Remove Console Exporter from the final application\n    // .AddConsoleExporter()\n    .AddOtlpExporter()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Initial Console Output\nDESCRIPTION: Expected output from the initial console application run\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-console/README.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pre-Aggregation in OpenTelemetry SDK\nDESCRIPTION: This diagram shows the pre-aggregation process in the OpenTelemetry SDK. It illustrates how measurements are aggregated within the SDK before being sent to the collector, reducing data transmission and enabling cardinality limits and memory preallocation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/README.md#2025-04-18_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n\nsubgraph SDK\n  Instrument --> | Measurements | Pre-Aggregation[Pre-Aggregation]\nend\n\nsubgraph Collector\n  Aggregation\nend\n\nPre-Aggregation --> | Metrics | Aggregation\n```\n\n----------------------------------------\n\nTITLE: Sample Console Output from OpenTelemetry Traces\nDESCRIPTION: Example of trace output from the Console exporter showing activity details, including trace ID, span ID, HTTP request details, and resource attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-aspnetcore/README.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nActivity.TraceId:            c28f7b480d5c7dfc30cfbd80ad29028d\nActivity.SpanId:             27e478bbf9fdec10\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: Microsoft.AspNetCore\nActivity.DisplayName:        GET /\nActivity.Kind:               Server\nActivity.StartTime:          2024-07-04T13:03:37.3318740Z\nActivity.Duration:           00:00:00.3693734\nActivity.Tags:\n    server.address: localhost\n    server.port: 5154\n    http.request.method: GET\n    url.scheme: https\n    url.path: /\n    network.protocol.version: 2\n    user_agent.original: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36\n    http.route: /\n    http.response.status_code: 200\nResource associated with Activity:\n    service.name: getting-started-aspnetcore\n    service.instance.id: a388466b-4969-4bb0-ad96-8f39527fa66b\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.9.0\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus HttpListener Package\nDESCRIPTION: Command to install the OpenTelemetry.Exporter.Prometheus.HttpListener NuGet package with prerelease version.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Prometheus.HttpListener/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package --prerelease OpenTelemetry.Exporter.Prometheus.HttpListener\n```\n\n----------------------------------------\n\nTITLE: Creating New .NET Console Application\nDESCRIPTION: Commands to create and run a new .NET console application project\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-console/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new console --output getting-started\ncd getting-started\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Listing Experimental APIs for OpenTelemetry .NET Logging\nDESCRIPTION: This code snippet lists the Experimental APIs covered by the OTEL1001 diagnostic. These APIs are related to logging functionality in OpenTelemetry .NET and may be subject to changes or removal in future versions.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/diagnostics/experimental-apis/OTEL1001.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `LoggerProvider.GetLogger`\n* `Logger`\n* `LogRecordAttributeList`\n* `LogRecordData`\n* `LogRecordSeverity`\n* `Sdk.CreateLoggerProviderBuilder`\n```\n\n----------------------------------------\n\nTITLE: Creating a new console application for OpenTelemetry tracing\nDESCRIPTION: Commands to create a new .NET console application project for OpenTelemetry and Jaeger implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-jaeger/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new console --output getting-started-jaeger\ncd getting-started-jaeger\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry .NET SDK using dotnet CLI\nDESCRIPTION: Command to install the OpenTelemetry .NET SDK NuGet package using the dotnet CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry\n```\n\n----------------------------------------\n\nTITLE: Command-line Options for OpenTelemetry Trace Stress Tests\nDESCRIPTION: Available command-line parameters for configuring the OpenTelemetry trace stress tests, including concurrency settings, Prometheus metrics port, and test duration.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress.Traces/README.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  -c, --concurrency      The concurrency (maximum degree of parallelism) for the stress test. Default value: Environment.ProcessorCount.\n\n  -p, --internal_port    The Prometheus http listener port where Prometheus will be exposed for retrieving internal metrics while the stress test is running. Set to '0' to\n                         disable. Default value: 9464.\n\n  -d, --duration         The duration for the stress test to run in seconds. If set to '0' or a negative value the stress test will run until canceled. Default value: 0.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating OpenTelemetry Package Versioning with Stable and Non-stable Signals\nDESCRIPTION: This code snippet illustrates the versioning strategy for the OpenTelemetry package, showing how stable and non-stable signals (e.g., Metrics) are handled across different releases. It demonstrates the progression from pre-release versions to stable releases, including the introduction and stabilization of new signals.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/VERSIONING.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`OpenTelemetry` 0.7.0-beta1 release : Pre-release, no API guarantees.\n\n`OpenTelemetry` 1.0.0-rc1 release : Pre-release, no API guarantees, but more\nstable than beta.\n\n`OpenTelemetry` 1.0.0 release : Stable release consisting of only stable signals\n:- Traces, Propagators, Baggage.\n\n`OpenTelemetry` 1.2.0-alpha release : Pre-release consisting of Metric SDK.\nAlpha indicates early stages of development. Metric entry points are from the\n`Sdk` class. This could be released at the same time as `OpenTelemetry 1.0.0` or\nshortly after that. This may be released from an \"experimental-metrics\" branch\nwhich is in sync with master.\n\n`OpenTelemetry` 1.0.1 release : Bug fixes to traces. Does not contain any\nmetrics code.\n\n`OpenTelemetry` 1.1.0 release : New features added to traces. Does not contain\nany metrics code.\n\n`OpenTelemetry` 1.2.0-beta release : Metric evolves to beta status. Still a\npre-release, so breaking changes can still occur.\n\n`OpenTelemetry` 1.2.0-rc1 release : Metric evolves to RC status. Still a\npre-release, but closer to stable.\n\n`OpenTelemetry` 1.2.0 release : Stable package consisting of Traces and Metrics.\nUser who were consuming Metrics features from 1.2.0-rc1 requires *no* code\nchange.\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Metrics Stress Test\nDESCRIPTION: Command to execute the stress test using .NET 8.0 in Release configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress.Metrics/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run --framework net8.0 --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry.Extensions.Hosting via NuGet\nDESCRIPTION: Command to add the OpenTelemetry.Extensions.Hosting package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Extensions.Hosting/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Extensions.Hosting\n```\n\n----------------------------------------\n\nTITLE: Console Output Example of Stratified Sampling in OpenTelemetry.NET\nDESCRIPTION: Sample console output showing the results of stratified sampling implementation. The output demonstrates how different query types (user-initiated and programmatic) are sampled independently, including trace IDs, span IDs, timestamps, and associated metadata.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/stratified-sampling-example/README.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nStratifiedSampler handling userinitiated query\nActivity.TraceId:            1a122d63e5f8d32cb8ebd3e402eb5389\nActivity.SpanId:             83bdc6bbebea1df8\nActivity.TraceFlags:         Recorded\nActivity.ParentSpanId:       1ddd00d845ad645e\nActivity.ActivitySourceName: StratifiedSampling.POC\nActivity.DisplayName:        Main\nActivity.Kind:               Internal\nActivity.StartTime:          2023-02-09T05:19:30.8156879Z\nActivity.Duration:           00:00:00.0008656\nActivity.Tags:\n    queryType: userInitiated\n    foo: child\nResource associated with Activity:\n    service.name: unknown_service:Examples.StratifiedSamplingByQueryType\n\nActivity.TraceId:            1a122d63e5f8d32cb8ebd3e402eb5389\nActivity.SpanId:             1ddd00d845ad645e\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: StratifiedSampling.POC\nActivity.DisplayName:        Main\nActivity.Kind:               Internal\nActivity.StartTime:          2023-02-09T05:19:30.8115186Z\nActivity.Duration:           00:00:00.0424036\nActivity.Tags:\n    queryType: userInitiated\n    foo: bar\nResource associated with Activity:\n    service.name: unknown_service:Examples.StratifiedSamplingByQueryType\n\nStratifiedSampler handling programmatic query\nStratifiedSampler handling programmatic query\nStratifiedSampler handling programmatic query\nStratifiedSampler handling programmatic query\nActivity.TraceId:            03cddefbc0e0f61851135f814522a2df\nActivity.SpanId:             8d4fa3e27a12f666\nActivity.TraceFlags:         Recorded\nActivity.ParentSpanId:       8c46e4dc6d0f418c\nActivity.ActivitySourceName: StratifiedSampling.POC\nActivity.DisplayName:        Main\nActivity.Kind:               Internal\nActivity.StartTime:          2023-02-09T05:19:30.8553756Z\nActivity.Duration:           00:00:00.0000019\nActivity.Tags:\n    queryType: programmatic\n    foo: child\nResource associated with Activity:\n    service.name: unknown_service:Examples.StratifiedSamplingByQueryType\n\nStratifiedSampler handling programmatic query\nStratifiedSampler handling programmatic query\nStratifiedSampler handling programmatic query\nStratifiedSampler handling programmatic query\nStratifiedSampler handling programmatic query\nStratifiedSampler handling userinitiated query\nActivity.TraceId:            8a5894524f1bea2a7bd8271fef9ec22d\nActivity.SpanId:             94b5b004287bd678\nActivity.TraceFlags:         Recorded\nActivity.ParentSpanId:       99600e9fe011c1cc\nActivity.ActivitySourceName: StratifiedSampling.POC\nActivity.DisplayName:        Main\nActivity.Kind:               Internal\nActivity.StartTime:          2023-02-09T05:19:30.9660777Z\nActivity.Duration:           00:00:00.0000005\nActivity.Tags:\n    queryType: userInitiated\n    foo: child\nResource associated with Activity:\n    service.name: unknown_service:Examples.StratifiedSamplingByQueryType\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Logs Stress Test in .NET\nDESCRIPTION: Command to run the OpenTelemetry logs stress test in release mode on .NET 8.0 framework.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress.Logs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run --framework net8.0 --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry.Shims.OpenTracing Package via .NET CLI\nDESCRIPTION: This command installs the OpenTelemetry.Shims.OpenTracing package using the .NET CLI. The --prerelease flag is used to include pre-release versions.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Shims.OpenTracing/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package --prerelease OpenTelemetry.Shims.OpenTracing\n```\n\n----------------------------------------\n\nTITLE: Creating a new console application for OpenTelemetry with Prometheus\nDESCRIPTION: Commands to create a new .NET console application and navigate to its directory. This is the first step in setting up a project for OpenTelemetry metrics integration.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-prometheus-grafana/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new console --output getting-started-prometheus-grafana\ncd getting-started-prometheus-grafana\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry API Package\nDESCRIPTION: Command to install the OpenTelemetry.Api NuGet package using the .NET CLI\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Api\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for OpenTelemetry Logs Stress Test\nDESCRIPTION: Command to display the available command line options for the OpenTelemetry logs stress test.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress.Logs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run --framework net8.0 --configuration Release -- --help\n```\n\n----------------------------------------\n\nTITLE: Example Stress Test Console Output\nDESCRIPTION: Sample output displayed while running an OpenTelemetry stress test, showing configuration options and real-time performance metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress/README.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nOptions: {\"Concurrency\":20,\"PrometheusInternalMetricsPort\":9464,\"DurationSeconds\":0}\nRun OpenTelemetry.Tests.Stress.exe --help to see available options.\nRunning (concurrency = 20, internalPrometheusEndpoint = http://localhost:9464/metrics/), press <Esc> to stop, press <Spacebar> to toggle statistics in the console...\nLoops: 17,384,826,748, Loops/Second: 2,375,222,037, CPU Cycles/Loop: 24, RunningTime (Seconds): 7\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Stress Test Project Reference in XML\nDESCRIPTION: XML project reference to include the OpenTelemetry stress test framework in a .NET project.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress/README.md#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<ProjectReference Include=\"$(RepoRoot)\\test\\OpenTelemetry.Tests.Stress\\OpenTelemetry.Tests.Stress.csproj\" />\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core Application with .NET CLI\nDESCRIPTION: Commands to create a new ASP.NET Core web application using the .NET CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/getting-started-aspnetcore/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new web -o aspnetcoreapp\ncd aspnetcoreapp\n```\n\n----------------------------------------\n\nTITLE: Installing OTLP Exporter Package via .NET CLI\nDESCRIPTION: Command to add the OpenTelemetry Protocol exporter NuGet package to a .NET project.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol\n```\n\n----------------------------------------\n\nTITLE: NuGet Package Publishing Commands\nDESCRIPTION: PowerShell commands to set NuGet API key and publish packages to NuGet repository.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/build/RELEASING.md#2025-04-18_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n.\\nuget.exe setApiKey <actual api key>\n\nget-childitem -Recurse | where {$_.extension -eq \".nupkg\"} | foreach ($_) {.\\nuget.exe push $_.fullname -Source https://api.nuget.org/v3/index.json}\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Feature Branch\nDESCRIPTION: Git commands for creating a new feature branch, committing changes, and pushing to a fork.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git checkout -b feature\n# edit files\n$ git commit\n$ git push fork feature\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Stress Tests with .NET CLI\nDESCRIPTION: Command for running the stress test demo application with the Release configuration on .NET 8.0 framework.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run --framework net8.0 --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a .NET Console Application\nDESCRIPTION: Commands to create a new console application project and run it. This establishes the basic project structure that will be enhanced with OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-console/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new console --output getting-started\ncd getting-started\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Console Exporter Package\nDESCRIPTION: Command to add the OpenTelemetry.Exporter.Console package to the project. This package is required for exporting logs to the console.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/getting-started-console/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Console\n```\n\n----------------------------------------\n\nTITLE: Git Tag Creation for Core Components\nDESCRIPTION: Shell commands to create and push a git tag for core component releases.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/build/RELEASING.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -a core-1.4.0-beta.1 -m \"1.4.0-beta.1 of all core components\"\ngit push origin core-1.4.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: Sample Log Output\nDESCRIPTION: Example of the formatted log output showing how the complex object properties are recorded in the log record.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/complex-objects/README.md#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nLogRecord.Timestamp:               2024-01-12T19:01:16.0604084Z\nLogRecord.CategoryName:            Program\nLogRecord.Severity:                Fatal\nLogRecord.SeverityText:            Critical\nLogRecord.FormattedMessage:\nLogRecord.Body:\nLogRecord.Attributes (Key:Value):\n    CompanyName: Contoso Fresh Vegetables, Inc.\n    RecallReasonDescription: due to a possible health risk from Listeria monocytogenes\n    ProductType: Food & Beverages\n    ProductDescription: Salads\n    BrandName: Contoso\nLogRecord.EventId:                 252550133\nLogRecord.EventName:               FoodRecallNotice\n```\n\n----------------------------------------\n\nTITLE: Command Line Options for OpenTelemetry Logs Stress Test\nDESCRIPTION: Available command line parameters for the stress test including concurrency settings, Prometheus port configuration, and test duration options.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress.Logs/README.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  -c, --concurrency      The concurrency (maximum degree of parallelism) for the stress test. Default value: Environment.ProcessorCount.\n\n  -p, --internal_port    The Prometheus http listener port where Prometheus will be exposed for retrieving internal metrics while the stress test is running. Set to '0' to\n                         disable. Default value: 9464.\n\n  -d, --duration         The duration for the stress test to run in seconds. If set to '0' or a negative value the stress test will run until canceled. Default value: 0.\n```\n\n----------------------------------------\n\nTITLE: Creating and Running .NET Console Application\nDESCRIPTION: Commands to create a new .NET console application project and run it. This sets up the basic structure for the OpenTelemetry logging example.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/getting-started-console/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new console --output getting-started\ncd getting-started\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Version Release Information in Markdown\nDESCRIPTION: This snippet shows the format used to document version releases, including the version number, release date, and changes made. It demonstrates how changelogs are structured for this project.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Prometheus.AspNetCore/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.11.2-beta.1\n\nReleased 2025-Mar-05\n\n* Updated OpenTelemetry core component version(s) to `1.11.2`.\n  ([#6169](https://github.com/open-telemetry/opentelemetry-dotnet/pull/6169))\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Trace Stress Tests in .NET\nDESCRIPTION: Command to run the OpenTelemetry trace stress tests with the .NET 8.0 framework in Release configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress.Traces/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run --framework net8.0 --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenTelemetry .NET Benchmarks by Name\nDESCRIPTION: Example command demonstrating how to filter benchmarks by name using glob patterns. This allows running only specific benchmark tests that match the provided pattern.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/Benchmarks/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run -c Release -f net8.0 -- -f *TraceBenchmarks*\n```\n\n----------------------------------------\n\nTITLE: Creating a new ASP.NET Core application using dotnet CLI\nDESCRIPTION: Commands to create a new ASP.NET Core web application using the .NET CLI. These commands initialize a new web project and navigate to the project directory.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/getting-started-aspnetcore/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new web -o aspnetcoreapp\ncd aspnetcoreapp\n```\n\n----------------------------------------\n\nTITLE: Documenting Bug Fixes in Markdown\nDESCRIPTION: This snippet shows how bug fixes are documented in the changelog, including a brief description of the issue and a link to the relevant pull request.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Prometheus.AspNetCore/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Fixed a bug which lead to empty responses when the internal buffer is resized\n  processing a collection request\n  ([#5676](https://github.com/open-telemetry/opentelemetry-dotnet/pull/5676))\n```\n\n----------------------------------------\n\nTITLE: Running OTLP Integration Tests with Docker Compose\nDESCRIPTION: Shell command to execute integration tests using Docker Compose. The command builds and runs the test container, uses the specified docker-compose.yml configuration, and exits with the test container's exit code.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Exporter.OpenTelemetryProtocol.Tests/IntegrationTest/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose \\\n    --file=test/OpenTelemetry.Exporter.OpenTelemetryProtocol.Tests/IntegrationTest/docker-compose.yml \\\n    --project-directory=. \\\n    up \\\n    --exit-code-from=tests \\\n    --build\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry .NET Benchmarks with Memory Diagnostics\nDESCRIPTION: Command to run all benchmarks in the project with memory diagnostics enabled. This command navigates to the test/Benchmarks directory, builds the project in Release configuration targeting .NET 8.0, and enables the memory diagnostics option.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/Benchmarks/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run -c Release -f net8.0 -- -m\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry.Api.ProviderBuilderExtensions via NuGet\nDESCRIPTION: Command to install the OpenTelemetry.Api.ProviderBuilderExtensions package using the .NET CLI. This package is required for instrumentation library authors working with OpenTelemetry in .NET applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api.ProviderBuilderExtensions/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Api.ProviderBuilderExtensions\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Example\nDESCRIPTION: Example showing the standard format used for changelog entries in this document, including version number, release date, and bullet points for changes.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Prometheus.HttpListener/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.11.2-beta.1\n\nReleased 2025-Mar-05\n\n* Updated OpenTelemetry core component version(s) to `1.11.2`.\n  ([#6169](https://github.com/open-telemetry/opentelemetry-dotnet/pull/6169))\n```\n\n----------------------------------------\n\nTITLE: Finalize Public API PowerShell Command\nDESCRIPTION: PowerShell command to merge unshipped API changes into shipped API files for stable releases.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/build/RELEASING.md#2025-04-18_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n.\\build\\scripts\\finalize-publicapi.ps1 -minVerTagPrefix [MinVerTagPrefix]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Direct Measurement Export in OpenTelemetry\nDESCRIPTION: This diagram illustrates a hypothetical scenario where raw measurement events are exported directly to the collector without pre-aggregation in the SDK. This approach is not currently supported by OpenTelemetry but is shown for comparison.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/README.md#2025-04-18_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n\nsubgraph SDK\n  Instrument\nend\n\nsubgraph Collector\n  Aggregation\nend\n\nInstrument --> | Measurements | Aggregation\n```\n\n----------------------------------------\n\nTITLE: Beta Package Version Update Entry\nDESCRIPTION: Changelog entry showing update of Microsoft.Extensions.Hosting.Abstractions package to beta version 9.0.0-rc.1.24431.7\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Extensions.Hosting/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Updated `Microsoft.Extensions.Hosting.Abstractions` package\n  version to `9.0.0-rc.1.24431.7`.\n  ([#5853](https://github.com/open-telemetry/opentelemetry-dotnet/pull/5853))\n```\n\n----------------------------------------\n\nTITLE: Setting AppContext Switch for HTTP/2 Unencrypted Support\nDESCRIPTION: Code snippet showing how to set the AppContext switch to enable HTTP/2 unencrypted support for OTLP gRPC exports on .NET Core 3.1.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAppContext.SetSwitch(\"System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport\", true);\n```\n\n----------------------------------------\n\nTITLE: Package Version Update Entry\nDESCRIPTION: Changelog entry documenting update of Microsoft.Extensions.Hosting.Abstractions package version to 9.0.0\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Extensions.Hosting/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Updated `Microsoft.Extensions.Hosting.Abstractions` package\n  version to `9.0.0`.\n  ([#5967](https://github.com/open-telemetry/opentelemetry-dotnet/pull/5967))\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for OpenTelemetry Trace Stress Tests\nDESCRIPTION: Command to display available command-line options for the OpenTelemetry trace stress tests by using the --help flag.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress.Traces/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run --framework net8.0 --configuration Release -- --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Options for OpenTelemetry Stress Tests\nDESCRIPTION: Command for viewing available command-line options for the stress test application.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run --framework net8.0 --configuration Release -- --help\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting OpenTelemetry .NET\nDESCRIPTION: Commands for running the test suite and markdown linting to validate changes.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet test\n```\n\nLANGUAGE: sh\nCODE:\n```\nmarkdownlint .\n```\n\n----------------------------------------\n\nTITLE: Update CHANGELOG PowerShell Command\nDESCRIPTION: PowerShell command to update CHANGELOG files for components being released using the update-changelogs script.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/build/RELEASING.md#2025-04-18_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n.\\build\\scripts\\update-changelogs.ps1 -minVerTagPrefix [MinVerTagPrefix] -version [Version]\n```\n\n----------------------------------------\n\nTITLE: Removing the Console Exporter package\nDESCRIPTION: Command to remove the OpenTelemetry Console Exporter package when it's no longer needed in the application.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-jaeger/README.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndotnet remove package OpenTelemetry.Exporter.Console\n```\n\n----------------------------------------\n\nTITLE: Verifying Initial Console Output\nDESCRIPTION: The expected output from running the initial console application, serving as a verification that the project is correctly set up.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/getting-started-console/README.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up OpenTelemetry .NET Repository\nDESCRIPTION: Shell commands for cloning the OpenTelemetry .NET repository, adding a fork remote, and preparing for contributions.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-dotnet.git\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd opentelemetry-dotnet\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add fork https://github.com/YOUR_GITHUB_USERNAME/opentelemetry-dotnet.git\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Tail-Based Sampling in OpenTelemetry .NET\nDESCRIPTION: This code snippet shows the expected output when running the tail-based sampling example. It demonstrates how error activities are included regardless of sampling decision, while successful activities may be dropped based on head-sampling.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/tail-based-sampling-span-level/README.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nIncluding error activity with id\n00-404ddff248b8f9a9b21e347d68d2640e-035858bc3c168885-01 and status Error\nActivity.TraceId:            404ddff248b8f9a9b21e347d68d2640e\nActivity.SpanId:             035858bc3c168885\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: SDK.TailSampling.POC\nActivity.DisplayName:        SayHello\nActivity.Kind:               Internal\nActivity.StartTime:          2023-02-09T19:05:32.5563112Z\nActivity.Duration:           00:00:00.0028144\nActivity.Tags:\n    foo: bar\nStatusCode: Error\nResource associated with Activity:\n    service.name: unknown_service:Examples.TailBasedSamplingAtSpanLevel\n\nDropping activity with id 00-ea861bda268c58d328ab7cbe49851499-daba29055de80a53-00\nand status Ok\n\nIncluding error activity with id\n00-802dea991247e2d699d943167eb546de-cc120b0bd1741b52-01 and status Error\nActivity.TraceId:            802dea991247e2d699d943167eb546de\nActivity.SpanId:             cc120b0bd1741b52\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: SDK.TailSampling.POC\nActivity.DisplayName:        SayHello\nActivity.Kind:               Internal\nActivity.StartTime:          2023-02-09T19:05:32.7021138Z\nActivity.Duration:           00:00:00.0000012\nActivity.Tags:\n    foo: bar\nStatusCode: Error\nResource associated with Activity:\n    service.name: unknown_service:Examples.TailBasedSamplingAtSpanLevel\n\nIncluding head-sampled activity with id\n00-f3c88010615e285c8f3cb3e2bcd70c7f-f9316215f12437c3-01 and status Ok\nActivity.TraceId:            f3c88010615e285c8f3cb3e2bcd70c7f\nActivity.SpanId:             f9316215f12437c3\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: SDK.TailSampling.POC\nActivity.DisplayName:        SayHello\nActivity.Kind:               Internal\nActivity.StartTime:          2023-02-09T19:05:32.8519346Z\nActivity.Duration:           00:00:00.0000034\nActivity.Tags:\n    foo: bar\nStatusCode: Ok\nResource associated with Activity:\n    service.name: unknown_service:Examples.TailBasedSamplingAtSpanLevel\n```\n\n----------------------------------------\n\nTITLE: InMemoryExporter Changelog Entry - Version 1.9.0-rc.1\nDESCRIPTION: Documents the change where experimental APIs covered by OTEL1000 became part of the public API in stable builds.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.InMemory/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* The experimental APIs previously covered by `OTEL1000`\n  (`LoggerProviderBuilder.AddInMemoryExporter` extension) are now part of the\n  public API and supported in stable builds.\n  ([#5648](https://github.com/open-telemetry/opentelemetry-dotnet/pull/5648))\n```\n\n----------------------------------------\n\nTITLE: Git Tag Creation for Unstable Components\nDESCRIPTION: Shell commands to create and push a git tag for core unstable component releases.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/build/RELEASING.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -a coreunstable-1.9.0-beta.1 -m \"1.9.0-beta.1 of all core unstable components\"\ngit push origin coreunstable-1.9.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: Describing OpenTelemetry Collector Protocol Package Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the OpenTelemetry collector protocol package, detailing the contents of each sub-package including common messages, trace service protos, metrics service protos, and logs service protos.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/Shared/Proto/opentelemetry/proto/collector/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# OpenTelemetry Collector Proto\n\nThis package describes the OpenTelemetry collector protocol.\n\n## Packages\n\n1. `common` package contains the common messages shared between different services.\n2. `trace` package contains the Trace Service protos.\n3. `metrics` package contains the Metrics Service protos.\n4. `logs` package contains the Logs Service protos.\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Storage APIs\nDESCRIPTION: Documentation explaining the source of the persistent storage APIs and the process for making changes to the codebase.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/PersistentStorage/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Persistent Storage APIs for OTLP Exporter\n\nThe files in this folder have been copied over from\n[OpenTelemetry.PersistentStorage.Abstractions](https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/1be4157075ad09e13aa54b8e5845d2310bd82673/src/OpenTelemetry.PersistentStorage.Abstractions)\nand\n[OpenTelemetry.PersistentStorage.FileSystem](https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/1be4157075ad09e13aa54b8e5845d2310bd82673/src/OpenTelemetry.PersistentStorage.FileSystem).\nAny code changes in this folder MUST go through changes in the original location\ni.e. in the contrib repo. Here is the sequence of steps to be followed when\nmaking changes:\n\n1. Open a PR for proposed changes in\n   [Contrib](https://github.com/open-telemetry/opentelemetry-dotnet-contrib).\n2. Once the proposed changed is accepted and merged, copy the changes over to\n   this folder and open a new PR.\n```\n\n----------------------------------------\n\nTITLE: Running Individual Projects with .NET CLI\nDESCRIPTION: Commands to run the WebApi and WorkerService projects individually using the .NET CLI. These commands should be executed from the root directory of the example application.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/examples/MicroserviceExample/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run --project WebApi\ndotnet run --project WorkerService\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Documentation\nDESCRIPTION: Comprehensive changelog entries detailing the evolution of the OpenTelemetry .NET Zipkin Exporter, including breaking changes, bug fixes, and feature additions across multiple release versions.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Zipkin/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0-rc2\n\nReleased 2021-Jan-29\n\n* Changed `ZipkinExporter` class and constructor from internal to public.\n  ([#1612](https://github.com/open-telemetry/opentelemetry-dotnet/issues/1612))\n\n* Zipkin will now set the `error` tag to the `Status.Description` value or an\n  empty string when `Status.StatusCode` (`otel.status_code` tag) is set to\n  `ERROR`.\n  ([#1579](https://github.com/open-telemetry/opentelemetry-dotnet/pull/1579)\n  [#1620](https://github.com/open-telemetry/opentelemetry-dotnet/pull/1620)\n  [#1655](https://github.com/open-telemetry/opentelemetry-dotnet/pull/1655))\n\n* Zipkin will no longer send the `otel.status_code` tag if the value is `UNSET`.\n  ([#1609](https://github.com/open-telemetry/opentelemetry-dotnet/pull/1609)\n  [#1620](https://github.com/open-telemetry/opentelemetry-dotnet/pull/1620))\n\n* Zipkin bool tag values will now be sent as `true`/`false` instead of\n  `True`/`False`.\n  ([#1609](https://github.com/open-telemetry/opentelemetry-dotnet/pull/1609))\n\n* Span tags will no longer be populated with Resource Attributes.\n  ([#1663](https://github.com/open-telemetry/opentelemetry-dotnet/pull/1663))\n\n* Spans will no longer be held in memory indefinitely when `ZipkinExporter`\n  cannot connect to the configured endpoint.\n  ([#1726](https://github.com/open-telemetry/opentelemetry-dotnet/pull/1726))\n```\n\n----------------------------------------\n\nTITLE: Updating System.Diagnostics.DiagnosticSource Package Version in C#\nDESCRIPTION: Updated the System.Diagnostics.DiagnosticSource package version to 9.0.0.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Update package reference\n<PackageReference Include=\"System.Diagnostics.DiagnosticSource\" Version=\"9.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Documenting Feature Updates in Markdown\nDESCRIPTION: This snippet demonstrates how new features or significant changes are documented in the changelog, including links to relevant pull requests.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.Prometheus.AspNetCore/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Added meter-level tags to Prometheus exporter\n  ([#5837](https://github.com/open-telemetry/opentelemetry-dotnet/pull/5837))\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Adding Events in Loop\nDESCRIPTION: Example of incorrect Activity event handling that should be avoided. Shows problematic implementation of adding events in a continuous loop which can cause performance and usability issues.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/trace/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static async Task Test()\n{\n    Activity activity = Activity.Current;\n\n    while (true)\n    {\n        activity.AddEvent(new ActivityEvent(\"Processing background task.\"));\n        await Task.Delay(1000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: InMemoryExporter Changelog Entry - Version 1.6.0-alpha.1\nDESCRIPTION: Documents the addition of experimental LoggerProviderBuilder.AddInMemoryExporter registration extension.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.InMemory/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **Experimental (pre-release builds only):** Added\n  `LoggerProviderBuilder.AddInMemoryExporter` registration extension.\n  ([#4584](https://github.com/open-telemetry/opentelemetry-dotnet/pull/4584),\n  [#4735](https://github.com/open-telemetry/opentelemetry-dotnet/pull/4735))\n```\n\n----------------------------------------\n\nTITLE: Creating Default Histogram Buckets for Specific Metrics\nDESCRIPTION: Defines default histogram buckets for well-known histogram metrics from ASP.NET Core and HttpClient runtime with Unit set to seconds.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[ 0, 0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5, 7.5, 10 ]\n```\n\n----------------------------------------\n\nTITLE: Displaying Stress Test Help Options\nDESCRIPTION: Command to display available command-line options and help information for the stress test.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress.Metrics/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run --framework net8.0 --configuration Release -- --help\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Metrics Overflow Attribute\nDESCRIPTION: Shows how to enable an experimental feature to aggregate dropped metric measurements due to reaching the max MetricPoints limit by setting an environment variable.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nOTEL_DOTNET_EXPERIMENTAL_METRICS_EMIT_OVERFLOW_ATTRIBUTE=true\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Output Example for OpenTelemetry Stress Tests\nDESCRIPTION: Sample of Prometheus-formatted metrics exposed by the stress test application, showing loop counts, performance metrics, and GC statistics.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress/README.md#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# HELP OpenTelemetry_Tests_Stress_Loops The total number of `Run()` invocations that are completed.\n# TYPE OpenTelemetry_Tests_Stress_Loops counter\nOpenTelemetry_Tests_Stress_Loops 1844902947 1658950184752\n\n# HELP OpenTelemetry_Tests_Stress_LoopsPerSecond The rate of `Run()` invocations based on a small sliding window of few hundreds of milliseconds.\n# TYPE OpenTelemetry_Tests_Stress_LoopsPerSecond gauge\nOpenTelemetry_Tests_Stress_LoopsPerSecond 9007731.132075472 1658950184752\n\n# HELP OpenTelemetry_Tests_Stress_CpuCyclesPerLoop The average CPU cycles for each `Run()` invocation, based on a small sliding window of few hundreds of milliseconds.\n# TYPE OpenTelemetry_Tests_Stress_CpuCyclesPerLoop gauge\nOpenTelemetry_Tests_Stress_CpuCyclesPerLoop 3008 1658950184752\n\n# HELP process_runtime_dotnet_gc_collections_count Number of garbage collections that have occurred since process start.\n# TYPE process_runtime_dotnet_gc_collections_count counter\nprocess_runtime_dotnet_gc_collections_count{generation=\"gen2\"} 0 1658950184752\nprocess_runtime_dotnet_gc_collections_count{generation=\"gen1\"} 0 1658950184752\nprocess_runtime_dotnet_gc_collections_count{generation=\"gen0\"} 0 1658950184752\n\n# HELP process_runtime_dotnet_gc_allocations_size_bytes Count of bytes allocated on the managed GC heap since the process start. .NET objects are allocated from this heap. Object allocations from unmanaged languages such as C/C++ do not use this heap.\n# TYPE process_runtime_dotnet_gc_allocations_size_bytes counter\nprocess_runtime_dotnet_gc_allocations_size_bytes 5485192 1658950184752\n```\n\n----------------------------------------\n\nTITLE: Starting an Activity for OpenTelemetry Tracing\nDESCRIPTION: Creates and starts a new Activity instance with a display name. This represents a single operation within a trace.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar activity = activitySource.StartActivity(\"ActivityName\");\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry with Dependency Injection in C#\nDESCRIPTION: Shows how to use the new IServiceCollection.AddOpenTelemetry API for configuring OpenTelemetry with dependency injection.\nSOURCE: https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIServiceCollection.AddOpenTelemetry()\n```"
  }
]