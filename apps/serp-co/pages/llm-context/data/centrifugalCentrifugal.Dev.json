[
  {
    "owner": "centrifugal",
    "repo": "centrifugal.dev",
    "content": "TITLE: Generating Centrifugo Configuration\nDESCRIPTION: Command to generate a minimal configuration file with auto-generated option values to get started with Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Rendering and Managing a Chat Room UI with React (JavaScript/TypeScript)\nDESCRIPTION: This React component defines the detailed chat room screen, responsible for fetching room and message data, rendering message lists, providing a chat input, and handling message sending. It makes use of React hooks (useState, useEffect, useContext, useRef), several context providers (AuthContext, ChatContext), and custom fetch/publish callbacks for backend interaction. The component manages scroll behavior to ensure optimal UX, employs unique avatar generation using robohash.org, and handles state updates via a reducer pattern. Inputs include roomIds, message content, and outputs are rendered message lists and dynamic chat UI updates; constraints include required callbacks and an expected context/state structure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect, useContext, useRef, UIEvent } from 'react';\nimport { useParams } from 'react-router-dom';\nimport AuthContext from './AuthContext';\nimport ChatContext from './ChatContext';\n\ninterface ChatRoomDetailProps {\n  fetchRoom: (roomId: string) => Promise<void>\n  fetchMessages: (roomId: string) => Promise<any[]>\n  publishMessage: (roomId: string, content: string) => Promise<boolean>\n}\n\nconst ChatRoomDetail: React.FC<ChatRoomDetailProps> = ({ fetchRoom, fetchMessages, publishMessage }) => {\n  const { id } = useParams() as { id: string };\n  const userInfo = useContext(AuthContext);\n  const { state, dispatch } = useContext(ChatContext);\n  const [content, setContent] = useState('')\n  const [messagesLoading, setMessagesLoading] = useState(false)\n  const [roomLoading, setRoomLoading] = useState(false)\n  const [sendLoading, setSendLoading] = useState(false)\n  const [notFound, setNotFound] = useState(false);\n\n  useEffect(() => {\n    if (messagesLoading) return\n    const init = async () => {\n      setMessagesLoading(true)\n      if (!state.messagesByRoomId[id]) {\n        const messages = await fetchMessages(id)\n        if (messages === null) {\n          setNotFound(true);\n        } else {\n          setNotFound(false);\n          dispatch({\n            type: \"ADD_MESSAGES\", payload: {\n              roomId: id,\n              messages: messages\n            }\n          })\n        }\n      }\n      setMessagesLoading(false)\n    }\n    init()\n  }, [id, state.messagesByRoomId, fetchMessages]);\n\n  useEffect(() => {\n    if (roomLoading) return\n    const init = async () => {\n      setRoomLoading(true)\n      if (!state.roomsById[id]) {\n        const room = await fetchRoom(id)\n        if (room === null) {\n          setNotFound(true);\n        } else {\n          setNotFound(false);\n          dispatch({\n            type: \"ADD_ROOMS\", payload: {\n              rooms: [room],\n            }\n          })\n        }\n      }\n      setRoomLoading(false)\n    }\n    init()\n  }, [id, state.roomsById, fetchRoom]);\n\n  const room = state.roomsById[id] || {};\n  const messages = state.messagesByRoomId[id] || [];\n\n  const messagesEndRef = useRef<any>(null); // Ref for the messages container\n\n  const scrollToBottom = () => {\n    const container = messagesEndRef.current;\n    if (container) {\n      const scrollOptions = {\n        top: container.scrollHeight,\n        behavior: 'auto'\n      };\n      container.scrollTo(scrollOptions);\n    }\n  };\n\n  const getTime = (timeString: string) => {\n    const date = new Date(timeString);\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    const seconds = date.getSeconds().toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  }\n\n  const onFormSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (sendLoading) {\n      return\n    }\n    setSendLoading(true)\n    try {\n      const message = await publishMessage(id!, content)\n      dispatch({\n        type: \"ADD_MESSAGES\", payload: {\n          roomId: id,\n          messages: [message]\n        }\n      })\n      setContent('')\n    } catch (e) {\n      console.log(e)\n    }\n    setSendLoading(false)\n  }\n\n  const handleScroll = (e: UIEvent<HTMLDivElement>) => {\n    const container = (e.target as HTMLElement);\n    if (!container) return;\n    const threshold = 40; // Pixels from the bottom to be considered 'near bottom'\n    const position = container.scrollTop + container.offsetHeight;\n    const height = container.scrollHeight;\n    setIsAtBottom(position + threshold >= height)\n  };\n\n  const [isAtBottom, setIsAtBottom] = useState(true);\n\n  // Scroll to bottom after layout changes.\n  useEffect(() => {\n    if (isAtBottom) {\n      scrollToBottom();\n    }\n  }, [messages, isAtBottom]); // Dependency on messages ensures it runs after messages are updated.\n\n  return (\n    <div id=\"chat-room\">\n      {notFound ? (\n        <div id=\"room-not-found\">\n          NOT A MEMBER OF THIS ROOM\n        </div>\n      ) : (\n        <>\n          <div id=\"room-description\">\n            <span id=\"room-name\">{room.name}</span>\n            <span id=\"room-member-count\">{room.member_count} <span className='chat-room-member-counter-icon'>üêà</span></span>\n          </div>\n          <div id=\"room-messages\" onScroll={handleScroll} ref={messagesEndRef}>\n            {messages.map((message: any) => (\n              <div key={message.id} className={`room-message ${(userInfo.id == message.user.id) ? 'room-message-mine' : 'room-message-not-mine'}`}>\n                <div className='message-avatar'>\n                  <img src={`https://robohash.org/user${message.user.id}.png?set=set4`} alt=\"\" />\n                </div>\n                <div className='message-bubble'>\n                  <div className='message-meta'>\n                    <div className='message-author'>\n                      {message.user.username}\n                    </div>\n                    <div className='message-time'>\n                      {getTime(message.created_at)}\n                    </div>\n                  </div>\n                  <div className='message-content'>\n                    {message.content}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div id=\"chat-input-container\" className={`${(sendLoading) ? 'loading' : ''}`}>\n            <form onSubmit={onFormSubmit}>\n              <input type=\"text\" autoComplete=\"off\" value={content} placeholder=\"Enter message...\" onChange={e => setContent(e.currentTarget.value)} required />\n            </form>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ChatRoomDetail;\n```\n\n----------------------------------------\n\nTITLE: Publishing to Centrifugo Channel Using GRPC in Go - Go\nDESCRIPTION: A complete Go program publishing JSON payloads to a Centrifugo channel over GRPC in a loop. Relies on generated Go client stubs from Protobuf and google.golang.org/grpc. Input parameters include the server address and channel name. Handles both transport and application-level errors, and outputs publish status. Requires a running Centrifugo instance and successful code generation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_26\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n\n    \"centrifugo_example/apiproto\"\n\n    \"google.golang.org/grpc\"\n)\n\nfunc main() {\n    conn, err := grpc.Dial(\"localhost:10000\", grpc.WithInsecure())\n    if err != nil {\n        log.Fatalln(err)\n    }\n    defer conn.Close()\n    client := apiproto.NewCentrifugoApiClient(conn)\n    for {\n        resp, err := client.Publish(context.Background(), &apiproto.PublishRequest{\n            Channel: \"chat:index\",\n            Data:    []byte(`{\"input\": \"hello from GRPC\"}`),\n        })\n        if err != nil {\n            log.Printf(\"Transport level error: %v\", err)\n        } else {\n            if resp.GetError() != nil {\n                respError := resp.GetError()\n                log.Printf(\"Error %d (%s)\", respError.Code, respError.Message)\n            } else {\n                log.Println(\"Successfully published\")\n            }\n        }\n        time.Sleep(time.Second)\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring HMAC Secret Key for JWT in Centrifugo (JSON)\nDESCRIPTION: This snippet demonstrates how to set the client.token.hmac_secret_key option in the Centrifugo config.json file to enable HMAC-based JWT authentication. The hmac_secret_key is used by Centrifugo to validate the signature of incoming client JWTs. The value should be replaced with a secure, random string. This configuration is required for using HS256, HS384, or HS512 algorithms.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"client\": {\n    \"token\": {\n      \"hmac_secret_key\": \"<YOUR-SECRET-STRING-HERE>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Centrifugo Configuration File (Bash)\nDESCRIPTION: Executes the `checkconfig` command to validate the syntax and correctness of a specified Centrifugo configuration file. The configuration file path is provided using the `--config` flag.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/console_commands.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo checkconfig --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Implementing CentrifugoProxy GRPC Subscription Stream with Loki in Go - Go\nDESCRIPTION: This Go code implements a GRPC server that handles the SubscribeUnidirectional method from Centrifugo's proxy.proto. It connects to a Loki GRPC endpoint as a client, parses incoming subscription requests (JSON), and streams real-time log lines to Centrifugo by forwarding entries received from Loki. The service depends on generated Go GRPC code, the Loki client libraries, and proper proto definitions. Inputs include GRPC requests from Centrifugo; outputs are streamed responses and log publications. The code assumes prior code generation and valid network configuration. Security validation for client input should be added in production environments.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-03-18-stream-loki-logs-to-browser-with-websocket-to-grpc-subscriptions.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\\n\\t\\\"log\\\"\\n\\t\\\"fmt\\\"\\n\\n\\tpb \\\"backend/internal/proxyproto\\\"\\n\\t\\\"github.com/grafana/loki/pkg/logproto\\\"\\n\\t\\\"google.golang.org/grpc\\\"\\n\\t\\\"google.golang.org/grpc/credentials/insecure\\\"\\n)\\n\\nconst (\\n\\tlokiGRPCAddress  = \\\"loki:9095\\\"\\n)\\n\\ntype streamerServer struct {\\n\\tpb.UnimplementedCentrifugoProxyServer\\n\\tlokiQuerierClient logproto.QuerierClient\\n}\\n\\ntype clientData struct {\\n\\tQuery string `json:\\\"query\\\"`\\n}\\n\\nfunc (s *streamerServer) SubscribeUnidirectional(\\n\\treq *pb.SubscribeRequest,\\n\\tstream pb.CentrifugoProxy_SubscribeUnidirectionalServer,\\n) error {\\n\\tvar cd clientData\\n\\terr := json.Unmarshal(req.Data, &cd)\\n\\tif err != nil {\\n\\t\\treturn fmt.Errorf(\\\"error unmarshaling data: %w\\\", err)\\n\\t}\\n\\tquery := &logproto.TailRequest{\\n\\t\\tQuery: cd.Query,\\n\\t}\\n\\tctx, cancel := context.WithCancel(stream.Context())\\n\\tdefer cancel()\\n\\n\\tlogStream, err := s.lokiQuerierClient.Tail(ctx, query)\\n\\tif err != nil {\\n\\t\\treturn fmt.Errorf(\\\"error querying Loki: %w\\\", err)\\n\\t}\\n\\n\\tstarted := time.Now()\\n\\tlog.Println(\\\"unidirectional subscribe called with request\\\", req)\\n\\tdefer func() {\\n\\t\\tlog.Println(\\\"unidirectional subscribe finished, elapsed\\\", time.Since(started))\\n\\t}()\\n\\terr = stream.Send(&pb.StreamSubscribeResponse{\\n\\t\\tSubscribeResponse: &pb.SubscribeResponse{},\\n\\t})\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\tfor {\\n\\t\\tselect {\\n\\t\\tcase <-stream.Context().Done():\\n\\t\\t\\treturn stream.Context().Err()\\n\\t\\tdefault:\\n\\t\\t\\tresp, err := logStream.Recv()\\n\\t\\t\\tif err != nil {\\n\\t\\t\\t\\treturn fmt.Errorf(\\\"error receiving from Loki stream: %v\\\", err)\\n\\t\\t\\t}\\n\\t\\t\\tfor _, entry := range resp.Stream.Entries {\\n\\t\\t\\t\\tline := fmt.Sprintf(\\\"%s: %s\\\", entry.Timestamp.Format(\\\"2006-01-02T15:04:05.000Z07:00\\\"), entry.Line)\\n\\t\\t\\t\\terr = stream.Send(&pb.StreamSubscribeResponse{\\n\\t\\t\\t\\t\\tPublication: &pb.Publication{Data: []byte(`{\\\"line\\\":\\\"` + line + `\\\"}`)},\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\tif err != nil {\\n\\t\\t\\t\\t\\treturn err\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunc main() {\\n\\tquerierConn, err := grpc.Dial(lokiGRPCAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\\n\\tif err != nil {\\n\\t\\tlog.Fatalf(\\\"failed to dial Loki: %v\\\", err)\\n\\t}\\n\\tquerierClient := logproto.NewQuerierClient(querierConn)\\n\\n\\taddr := \\\":12000\\\"\\n\\tlis, err := net.Listen(\\\"tcp\\\", addr)\\n\\tif err != nil {\\n\\t\\tlog.Fatalf(\\\"failed to listen: %v\\\", err)\\n\\t}\\n\\n\\ts := grpc.NewServer(grpc.MaxConcurrentStreams(math.MaxUint32))\\n\\tpb.RegisterCentrifugoProxyServer(s, &streamerServer{\\n\\t\\tlokiQuerierClient: querierClient,\\n\\t})\\n\\n\\tlog.Println(\\\"Server listening on\\\", addr)\\n\\tif err := s.Serve(lis); err != nil {\\n\\t\\tlog.Fatalf(\\\"failed to serve: %v\\\", err)\\n\\t}\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Handling a Centrifugo Subscription with Events - Go\nDESCRIPTION: Shows how to subscribe to a Centrifugo channel in Go, attaching event handlers for subscribing, subscribed, and unsubscribed states. Each handler logs state changes and reasons. The code expects a properly initialized Centrifugo Go client and an example channel, outputting subscription events to logs. Handles errors during creation and subscription explicitly.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nsub, err := client.NewSubscription(\"example\")\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nsub.OnSubscribing(func(e centrifuge.SubscribingEvent) {\n\tlog.Printf(\"Subscribing on channel %s - %d (%s)\", sub.Channel, e.Code, e.Reason)\n})\nsub.OnSubscribed(func(e centrifuge.SubscribedEvent) {\n\tlog.Printf(\"Subscribed on channel %s\", sub.Channel)\n})\nsub.OnUnsubscribed(func(e centrifuge.UnsubscribedEvent) {\n\tlog.Printf(\"Unsubscribed from channel %s - %d (%s)\", sub.Channel, e.Code, e.Reason)\n})\n\nerr = sub.Subscribe()\nif err != nil {\n\tlog.Fatalln(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Centrifugo Configuration with Allowed Origins\nDESCRIPTION: Modified configuration file with allowed_origins set to permit connections from localhost:3000.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    ...\n    \"allowed_origins\": [\"http://localhost:3000\"]\n  },\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with a Specified Config File (Bash)\nDESCRIPTION: This snippet demonstrates how to start the Centrifugo server using a specified configuration file with the '-c' flag. It assumes an existing 'config.json' file in the working directory. The command launches the server with this configuration as the input, with output as Centrifugo server logs. Useful in development and production settings to specify explicit configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Registering Connect and Disconnect Event Handlers in Centrifuge Client in JavaScript\nDESCRIPTION: This snippet demonstrates setting up event handlers for the 'connect' and 'disconnect' events on a Centrifuge client instance. The event handler functions receive a context parameter containing event details (such as connection information or disconnect reasons). Use these handlers for logging, UI state management, or implementing custom reconnection logic. Dependencies include a properly initialized Centrifuge instance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.on('connect', function(context) {\n    console.log(context);\n});\n\ncentrifuge.on('disconnect', function(context) {\n    console.log(context);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo HTTP API Key (JSON)\nDESCRIPTION: This JSON snippet illustrates how to set the required API key for Centrifugo's HTTP API within the main configuration file (e.g., `config.json`). The `http_api.key` field under the `http_api` object holds the secret key that must be provided in the `X-API-Key` header or `api_key` query parameter of incoming API requests for authorization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"http_api\": {\n    \"key\": \"<YOUR_API_KEY>\"  \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo WebSocket with JavaScript SDK (JavaScript)\nDESCRIPTION: Demonstrates how to establish a WebSocket connection to a local Centrifugo server using its JavaScript SDK. Requires the Centrifuge client library as a dependency. The 'token' and 'getToken' parameters can be supplied for authentication if needed. The main input is the WebSocket endpoint, and the output is a connected Centrifuge client instance ready for realtime messaging.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/websocket.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {\n    // token: ?,\n    // getToken: ?\n});\n\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Generating Minimal Centrifugo Configuration (Shell)\nDESCRIPTION: This shell command executes the Centrifugo binary with the `genconfig` argument to automatically generate a basic `config.json` file. This file includes essential fields like `token_hmac_secret_key` (or `token_rsa_public_key`) and `api_key`, providing a starting point for Centrifugo configuration. It requires the Centrifugo binary to be present and executable in the current directory or system path.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/integration.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Publishing Data to Centrifugo using Python Requests Library (Python)\nDESCRIPTION: This Python code snippet demonstrates how to publish data to a Centrifugo channel using the `requests` library. It defines the API key, constructs the JSON payload with the target channel (`docs`) and data, sets the necessary HTTP headers (`Content-type` and `X-API-Key`), and sends a POST request to the Centrifugo `/api/publish` endpoint. The script then prints the JSON response received from the server. Requires the `requests` library to be installed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\n\napi_key = \"YOUR_API_KEY\"\ndata = json.dumps({\n    \"channel\": \"docs\", \n    \"data\": {\n        \"content\": \"1\"\n    }\n})\nheaders = {'Content-type': 'application/json', 'X-API-Key': api_key}\nresp = requests.post(\"https://centrifuge.example.com/api/publish\", data=data, headers=headers)\nprint(resp.json())\n```\n\n----------------------------------------\n\nTITLE: Publishing Data via Curl Command\nDESCRIPTION: Curl command demonstrating how to publish data to a Centrifugo channel using the HTTP API endpoint. The command includes the required API key header and JSON payload with channel and data fields.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: d7627bb6-2292-4911-82e1-615c0ed3eebb\" \\\n  --request POST \\\n  --data '{\"channel\": \"channel\", \"data\": {\"value\": 2}}' \\\n  http://localhost:8000/api/publish\n```\n\n----------------------------------------\n\nTITLE: Example Output of Generated JWT (console)\nDESCRIPTION: This log output shows the result of the gentoken command, including the expiration TTL, the username, and the resulting JWT string. The JWT is used as the token parameter for client authentication and must match the server's HMAC secret. Each output will differ depending on the user and secret configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nHMAC SHA-256 JWT for user \"123722\" with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM3MjIiLCJleHAiOjE2NTU0NDgyOTl9.mUU9s5kj3yqp-SAEqloGy8QBgsLg0llA7lKUNwtHRnw\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Centrifugo\nDESCRIPTION: Command to serve static files using Centrifugo's built-in file server on port 3000.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo serve --port 3000\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Centrifugo with curl - Bash\nDESCRIPTION: Demonstrates sending a publication to the Centrifugo Server using curl. This snippet broadcasts the JSON message {\"text\": \"hello\"} to the 'chat' channel, using the X-API-Key header for authentication. Assumes Centrifugo is running and reachable on localhost:8000. The expected output is a JSON response, either indicating success or detailing the error. Dependencies: curl.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat\", \"data\": {\"text\": \"hello\"}}' \\\n  http://localhost:8000/api/publish\n```\n\n----------------------------------------\n\nTITLE: Complete Centrifugo Connection and Subscription in JavaScript\nDESCRIPTION: Full example showing how to connect to a Centrifugo server, create a subscription to the 'example' channel, and listen for publications. This demonstrates the basic workflow of establishing a connection and handling incoming messages.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nconst sub = client.newSubscription('example').on('publication', function(ctx) {\n    console.log(\"received publication from a channel\", ctx.data);\n});\n\nsub.subscribe();\n\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Queuing and Processing Real-Time Messages using React State (JavaScript)\nDESCRIPTION: This JavaScript code provides a React-based queue mechanism for handling incoming real-time chat-related events. Messages are appended to a stateful queue and asynchronously processed inside a useEffect hook, where different event types like 'message_added', 'user_joined', and 'user_left' are dispatched to their respective async handlers; messages are removed from the queue after processing. This pattern requires React hooks, a reducer state for chat, and presumes the existence of event handler functions and a frontend chat state model. Inputs are message objects with 'type' and 'body', outputs are user interface or state updates according to event type; unrecognized types are logged.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst onPublication = (publication: any) => {\n  setMessageQueue(prevQueue => [...prevQueue, publication]);\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst [chatState, dispatch] = useReducer(reducer, initialChatState);\nconst [messageQueue, setMessageQueue] = useState<any[]>([]);\n\nuseEffect(() => {\n  if (messageQueue.length === 0) {\n    return; // Return if no messages to process.\n  }\n\n  const processUserJoined = async (body: any) => {\n    // We will describe this very soon.\n  }\n\n  const processUserLeft = async (body: any) => {\n    // We will describe this very soon.\n  }\n\n  const processMessageAdded = async (body: any) => {\n    // We will describe this very soon.\n  };\n\n  const processMessage = async () => {\n    const message = messageQueue[0];\n\n    const { type, body } = message\n    switch (type) {\n      case 'message_added': {\n        await processMessageAdded(body);\n        break\n      }\n      case 'user_joined': {\n        await processUserJoined(body);\n        break\n      }\n      case 'user_left': {\n        await processUserLeft(body);\n        break\n      }\n      default:\n        console.log('unsupported message type', type, body)\n    }\n\n    // Remove the processed message from the queue\n    setMessageQueue(prevQueue => prevQueue.slice(1));\n  };\n\n  processMessage();\n}, [messageQueue, chatState]);\n```\n\n----------------------------------------\n\nTITLE: Simple Real-time Counter Application\nDESCRIPTION: A basic HTML application that connects to Centrifugo over WebSocket, subscribes to a channel, and updates a counter value in real-time across all browser tabs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n\n<head>\n  <title>Centrifugo quick start</title>\n</head>\n\n<body>\n  <div id=\"counter\">-</div>\n  <script src=\"https://unpkg.com/centrifuge@5.2.2/dist/centrifuge.js\"></script>\n  <script type=\"text/javascript\">\n    const container = document.getElementById('counter');\n\n    const centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\", {\n      token: \"<TOKEN>\"\n    });\n\n    centrifuge.on('connecting', function (ctx) {\n      console.log(`connecting: ${ctx.code}, ${ctx.reason}`);\n    }).on('connected', function (ctx) {\n      console.log(`connected over ${ctx.transport}`);\n    }).on('disconnected', function (ctx) {\n      console.log(`disconnected: ${ctx.code}, ${ctx.reason}`);\n    }).connect();\n\n    const sub = centrifuge.newSubscription(\"channel\");\n\n    sub.on('publication', function (ctx) {\n      container.innerHTML = ctx.data.value;\n      document.title = ctx.data.value;\n    }).on('subscribing', function (ctx) {\n      console.log(`subscribing: ${ctx.code}, ${ctx.reason}`);\n    }).on('subscribed', function (ctx) {\n      console.log('subscribed', ctx);\n    }).on('unsubscribed', function (ctx) {\n      console.log(`unsubscribed: ${ctx.code}, ${ctx.reason}`);\n    }).subscribe();\n  </script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo via Homebrew - Shell\nDESCRIPTION: These two shell commands install Centrifugo on macOS systems using the Homebrew package manager. The first command adds the centrifugal tap; the second installs the Centrifugo formula. Requires Homebrew to be installed, internet access, and compatible macOS version.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap centrifugal/centrifugo\nbrew install centrifugo\n```\n\n----------------------------------------\n\nTITLE: Handling Centrifugo Connect Proxy in Tornado - Python\nDESCRIPTION: This code implements a Tornado HTTP POST handler for Centrifugo's connect proxy. It returns a JSON object identifying the authenticated user (here, statically set as '56') for establishing a connection. Required dependencies include 'tornado.web', 'tornado.ioloop', 'tornado.options', and 'json'. The connect handler listens on '/centrifugo/connect' and should be integrated into the Tornado app; real implementations must perform actual user authentication. The handler expects incoming POST requests from Centrifugo and responds with user identification. Limitations: authentication is placeholder only; secure production logic should be implemented.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CentrifugoConnectHandler(tornado.web.RequestHandler):\n\n    def check_xsrf_cookie(self):\n        pass\n\n    def post(self):\n        self.set_header('Content-Type', 'application/json; charset=\"utf-8\"')\n        data = json.dumps({\n            'result': {\n                'user': '56'\n            }\n        })\n        self.write(data)\n\n\ndef main():\n    options.parse_command_line()\n    app = tornado.web.Application([\n      (r'/centrifugo/connect', CentrifugoConnectHandler),\n    ])\n    app.listen(3000)\n    tornado.ioloop.IOLoop.instance().start()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Namespace History and Recovery in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure a Centrifugo namespace named 'personal' to enable message history and automatic recovery. It sets the 'history_size' to 300 messages, 'history_ttl' to 600 seconds (10 minutes), and enables 'force_recovery'. This configuration allows clients connected to this namespace to automatically retrieve missed messages after temporary disconnections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/recovery.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"personal\",\n        \"history_size\": 300,\n        \"history_ttl\": \"600s\",\n        \"force_recovery\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting and Subscribing to a Channel in Dart\nDESCRIPTION: Shows a full example using the Centrifuge Dart SDK. It demonstrates creating a client, establishing a subscription to a channel, listening for publication events using `subscription.publication.listen`, subscribing to the channel, and connecting the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal client = centrifuge.createClient(\n    'ws://localhost:8000/connection/websocket',\n    centrifuge.ClientConfig(),\n);\n\nfinal subscription = client.newSubscription(channel);\nsubscription.publication.listen((event) {\n    print(event);\n});\nawait subscription.subscribe();\n\nawait client.connect();\n```\n\n----------------------------------------\n\nTITLE: Basic HTML/JavaScript Client with Centrifuge (HTML)\nDESCRIPTION: This HTML file presents a simple real-time app connecting to Centrifugo, displaying a counter that is updated via WebSocket messages. It loads the centrifuge-js library via CDN, establishes a new Centrifuge instance with a JWT token, handles various connection and subscription events, updates the UI with received publications, and logs state transitions. The user must supply a valid JWT token generated by the backend. This code is suitable for running locally with a static file server and expects the Centrifugo server to be accessible at ws://localhost:8000.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n\n<head>\n  <title>Centrifugo quick start</title>\n</head>\n\n<body>\n  <div id=\"counter\">-</div>\n  <script src=\"https://unpkg.com/centrifuge@5.0.1/dist/centrifuge.js\"></script>\n  <script type=\"text/javascript\">\n    const container = document.getElementById('counter');\n\n    const centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\", {\n      token: \"<TOKEN>\"\n    });\n\n    centrifuge.on('connecting', function (ctx) {\n      console.log(`connecting: ${ctx.code}, ${ctx.reason}`);\n    }).on('connected', function (ctx) {\n      console.log(`connected over ${ctx.transport}`);\n    }).on('disconnected', function (ctx) {\n      console.log(`disconnected: ${ctx.code}, ${ctx.reason}`);\n    }).connect();\n\n    const sub = centrifuge.newSubscription(\"channel\");\n\n    sub.on('publication', function (ctx) {\n      container.innerHTML = ctx.data.value;\n      document.title = ctx.data.value;\n    }).on('subscribing', function (ctx) {\n      console.log(`subscribing: ${ctx.code}, ${ctx.reason}`);\n    }).on('subscribed', function (ctx) {\n      console.log('subscribed', ctx);\n    }).on('unsubscribed', function (ctx) {\n      console.log(`unsubscribed: ${ctx.code}, ${ctx.reason}`);\n    }).subscribe();\n  </script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Additional Connection Info - Node.js\nDESCRIPTION: This Node.js snippet shows how to use the 'jose' library to create a JWT with both 'sub' and additional 'info' payload, including a user name. Token is valid for 5 minutes. This pattern is useful for extending session context attached to a Centrifugo connection. Dependencies: 'jose' package.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst jose = require('jose')\\n\\n(async function main() {\\n  const secret = new TextEncoder().encode('secret')\\n  const alg = 'HS256'\\n\\n  const token = await new jose.SignJWT({ sub: '42', info: {\\\"name\\\": \\\"Alexander Emelin\\\"} })\\n    .setProtectedHeader({ alg })\\n    .setExpirationTime('5m')\\n    .sign(secret)\\n\\n  console.log(token);\\n})();\\n\n```\n\n----------------------------------------\n\nTITLE: Sample Centrifugo JSON Configuration\nDESCRIPTION: Example JSON configuration for Centrifugo that includes token settings, allowed origins, HTTP API key, and admin authentication settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/installation.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"token\": {\n      \"hmac_secret_key\": \"my_secret\"\n    },\n    \"allowed_origins\": [\"*\"]\n  },\n  \"http_api\": {\n    \"key\": \"my_api_key\"\n  },\n  \"admin\": {\n    \"password\": \"password\",\n    \"secret\": \"secret\",\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Channels and Namespaces\nDESCRIPTION: Example configuration showing how to set up channel options and namespaces in Centrifugo. Demonstrates global channel options and namespace-specific configurations for facts and gossips channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/channels.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"very-long-secret-key\",\n  \"api_key\": \"secret-api-key\",\n  \n  \"presence\": true,\n  \"history_size\": 10,\n  \"history_ttl\": \"30s\",\n  \n  \"namespaces\": [\n    {\n      \"name\": \"facts\",\n      \"history_size\": 10,\n      \"history_ttl\": \"300s\"\n    },\n    {\n      \"name\": \"gossips\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Subscription Errors in Centrifugo - JavaScript\nDESCRIPTION: Describes how to listen for internal subscription errors in a Centrifugo JavaScript client. The error event handler provides additional debugging information for errors not captured by state transitions. This approach improves error visibility and troubleshooting, especially for temporary issues or token-related problems.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsub.on('error', function(ctx) {\n    console.log(\"subscription error\", ctx);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Port in Centrifugo (JSON) - JSON\nDESCRIPTION: This JSON snippet configures the HTTP server port Centrifugo binds to, using the 'http_server.port' option. It\\'s essential for specifying which network port the server listens to for HTTP and WebSocket clients. Replace the value as needed for your deployment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"http_server\" : {\n    \"port\": \"8000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Configuration for Centrifugo\nDESCRIPTION: Shows a sample Centrifugo server configuration in JSON format, specifying allowed origins, JWT HMAC secret, and API key. This format is fully supported as config.json. Requires knowledge of intended deployment parameters. Inputs: origins (array), secret key (string), API key (string). Output: file consumed by Centrifugo at startup. Secrets should never be exposed in plaintext.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_origins\": [\"http://localhost:3000\"],\n  \"token_hmac_secret_key\": \"<YOUR-SECRET-STRING-HERE>\",\n  \"api_key\": \"<YOUR-API-KEY-HERE>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo Server without Authentication in Javascript\nDESCRIPTION: This snippet demonstrates how to initialize a Centrifuge client instance and establish a basic WebSocket connection to a Centrifugo server running at 'ws://localhost:8000/connection/websocket'. This method does not include authentication, which might be suitable for scenarios where authentication is handled differently (e.g., connect proxy) or not required.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge('ws://localhost:8000/connection/websocket');\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with Admin Web UI Enabled (console)\nDESCRIPTION: This command runs the Centrifugo server with the specified JSON config file and enables the built-in administrative web interface. The --admin flag launches the management GUI for real-time monitoring and configuration. Requires the config.json file previously generated and optionally updated by the user.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n./centrifugo --config=config.json --admin\n```\n\n----------------------------------------\n\nTITLE: Enforcing JWT Audience Claim in Centrifugo Config - JSON\nDESCRIPTION: This snippet shows how to mandate that incoming JWTs are checked for a specific audience claim (`aud`). The field `token_audience` is set to a user-defined value (here, \"centrifugo\"), ensuring only tokens with this audience are accepted. Add this field to your Centrifugo `config.json` file as needed for additional security.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_audience\": \"centrifugo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Channel Subscription Setup\nDESCRIPTION: Shows full implementation of connecting to Centrifugo server and subscribing to a channel across different languages\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nconst sub = client.newSubscription('example').on('publication', function(ctx) {\n    console.log(\"received publication from a channel\", ctx.data);\n});\n\nsub.subscribe();\n\nclient.connect();\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal client = centrifuge.createClient(\n    'ws://localhost:8000/connection/websocket',\n    centrifuge.ClientConfig(),\n);\n\nfinal subscription = client.newSubscription(channel);\nsubscription.publication.listen((event) {\n    print(event);\n});\nawait subscription.subscribe();\n\nawait client.connect();\n```\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftCentrifuge\n\nclass ClientDelegate : NSObject, CentrifugeClientDelegate {}\n\nlet config = CentrifugeClientConfig()\nlet endpoint = \"ws://localhost:8000/connection/websocket\"\nlet client = CentrifugeClient(endpoint: endpoint, config: config, delegate: ClientDelegate())\n\nclass SubscriptionDelegate : NSObject, CentrifugeSubscriptionDelegate {\n    func onPublication(_ s: CentrifugeSubscription, _ e: CentrifugePublicationEvent) {\n        print(\"publication\", e.data)\n    }\n}\n\ndo {\n    sub = try self.client?.newSubscription(channel: \"example\", delegate: SubscriptionDelegate())\n    sub!.subscribe()\n} catch {\n    print(\"Can not create subscription: \\(error)\")\n}\n\nclient.connect()\n```\n\nLANGUAGE: java\nCODE:\n```\nEventListener listener = new EventListener() {};\nOptions opts = new Options();\nClient client = new Client(\"ws://localhost:8000/connection/websocket\", opts, listener);\n\nSubscriptionEventListener subListener = new SubscriptionEventListener() {\n    @Override\n    public void onPublication(Subscription sub, PublicationEvent event) {\n        System.out.println(\"publication from \" + sub.getChannel());\n    }\n};\n\nSubscription sub;\ntry {\n    sub = client.newSubscription(\"example\", subListener);\n    sub.subscribe();\n} catch (DuplicateSubscriptionException e) {\n    e.printStackTrace();\n}\n\nclient.connect();\n```\n\nLANGUAGE: go\nCODE:\n```\nclient := centrifuge.NewJsonClient(\n    \"ws://localhost:8000/connection/websocket\",\n    centrifuge.Config{},\n)\n// defer client.Close()\n\nsub, err := client.NewSubscription(\"example\")\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nsub.OnPublication(func(e centrifuge.PublicationEvent) {\n\tlog.Printf(\"Publication from channel\")\n})\n\nerr = sub.Subscribe()\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nif err = client.Connect(); err != nil {\n    log.Fatalln(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Refresh for Centrifugo Subscriptions in JavaScript\nDESCRIPTION: Advanced example showing how to implement token refresh for Centrifugo subscriptions. Includes a fetch function to get new tokens from the backend and a subscription configuration that uses this function to keep the token fresh.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getToken(url, ctx) {\n    return new Promise((resolve, reject) => {\n        fetch(url, {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(ctx)\n        })\n        .then(res => {\n            if (!res.ok) {\n                throw new Error(`Unexpected status code ${res.status}`);\n            }\n            return res.json();\n        })\n        .then(data => {\n            resolve(data.token);\n        })\n        .catch(err => {\n            reject(err);\n        });\n    });\n}\n\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nconst sub = centrifuge.newSubscription(channel, {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE',\n    getToken: function (ctx) {\n        // ctx has channel in the Subscription token case.\n        return getToken('/centrifuge/subscription_token', ctx);\n    },\n});\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Sample Centrifugo Configuration File (JSON)\nDESCRIPTION: This configuration snippet represents the minimal settings required to start Centrifugo, including security tokens, admin credentials, and CORS allowance. Fields such as token_hmac_secret_key and admin_password are vital for authentication and access. The allowed_origins array is empty, meaning no CORS is allowed by default; it should be modified to allow browser connections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"bbe7d157-a253-4094-9759-06a8236543f9\",\n  \"admin_password\": \"d0683813-0916-4c49-979f-0e08a686b727\",\n  \"admin_secret\": \"4e9eafcf-0120-4ddd-b668-8dc40072c78e\",\n  \"api_key\": \"d7627bb6-2292-4911-82e1-615c0ed3eebb\",\n  \"allowed_origins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Centrifugo Client with JWT Token Authentication - JavaScript\nDESCRIPTION: Initializes a Centrifugo client connection using a JWT token for authentication. The JWT token is provided as part of the client options, enabling secure connections to the server. No external dependencies other than the Centrifuge JavaScript SDK are required. The 'token' parameter represents the authentication credential generated server-side, used during initial connection establishment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE'\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo with WebTransport and WebSocket Fallback (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates initializing the centrifuge-js client to connect to a Centrifugo server using WebTransport as the primary transport and WebSocket as a fallback. It specifies each transport's protocol and endpoint, builds the Centrifuge instance, and invokes a connection. Secure endpoints ('https://' for WebTransport and 'wss://' for WebSocket) are required, with non-TLS not supported for WebTransport. Dependencies include centrifuge-js and properly configured Centrifugo server endpoints.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/webtransport.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst transports = [\n    {\n        transport: 'webtransport',\n        endpoint: 'https://localhost:8000/connection/webtransport'\n    },\n    {\n        transport: 'websocket',\n        endpoint: 'wss://localhost:8000/connection/websocket'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Connection JWT Token in Django View (Python)\nDESCRIPTION: A Django view that authenticates a user, creates a JWT with 'sub' (user ID) and short expiry for Centrifugo connection, and returns it as JSON. Relies on PyJWT ('jwt') library and settings.CENTRIFUGO_TOKEN_SECRET. Used to securely grant frontend clients access to Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\n\nfrom django.conf import settings\n\n\ndef get_connection_token(request):\n    if not request.user.is_authenticated:\n        return JsonResponse({'detail': 'unauthorized'}, status=401)\n\n    token_claims = {\n        'sub': str(request.user.pk),\n        'exp': int(time.time()) + 120\n    }\n    token = jwt.encode(token_claims, settings.CENTRIFUGO_TOKEN_SECRET)\n\n    return JsonResponse({'token': token})\n\n```\n\n----------------------------------------\n\nTITLE: Connecting Client to Centrifugo with a JWT Token (JavaScript, centrifuge-js v3)\nDESCRIPTION: This JavaScript snippet shows how to connect a web client to a Centrifugo server using a previously generated JWT token. It uses the 'Centrifuge' client library (centrifuge-js v3) and passes the JWT as an authentication parameter. The 'connect' method establishes a real-time WebSocket connection. Requires 'centrifuge-js' to be installed and the token variable to be defined as a string JWT prior to usage.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\", {\\n  token: token\\n});\\ncentrifuge.connect();\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Subscription Token Refresh in Javascript\nDESCRIPTION: Demonstrates implementing an asynchronous `getToken` function in Javascript. This function is used by the Centrifuge SDK to automatically refresh expired subscription tokens by fetching a new one from a backend endpoint. It includes error handling for authorization failures (throwing `Centrifuge.UnauthorizedError`) and other potential network or server issues.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getToken(ctx) {\n    // Fetch your application backend.\n    const res = await fetch('http://localhost:8000/centrifugo/subscription_token', {\n        method: 'POST',\n        headers: new Headers({ 'Content-Type': 'application/json' }),\n        body: JSON.stringify({\n            channel: ctx.channel\n        })\n    });\n    if (!res.ok) {\n        if (res.status === 403) {\n            // Return special error to not proceed with token refreshes,\n            // client will be disconnected.\n            throw new Centrifuge.UnauthorizedError();\n        }\n        // Any other error thrown will result into token refresh re-attempts.\n        throw new Error(`Unexpected status code ${res.status}`);\n    }\n    const data = await res.json();\n    return data.token;\n}\n\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nconst sub = centrifuge.newSubscription(channel, {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE', // Optional, getToken is enough.\n    getToken: getToken\n});\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Room Detail Component in React/TypeScript\nDESCRIPTION: A React component that handles chat room display, message rendering, and message sending functionality. Includes scroll management, avatar generation, and real-time message updates.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect, useContext, useRef, UIEvent } from 'react';\nimport { useParams } from 'react-router-dom';\nimport AuthContext from './AuthContext';\nimport ChatContext from './ChatContext';\n\ninterface ChatRoomDetailProps {\n  fetchRoom: (roomId: string) => Promise<void>\n  fetchMessages: (roomId: string) => Promise<any[]>\n  publishMessage: (roomId: string, content: string) => Promise<boolean>\n}\n\nconst ChatRoomDetail: React.FC<ChatRoomDetailProps> = ({ fetchRoom, fetchMessages, publishMessage }) => {\n  // Component implementation...\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Subscriptions in Go\nDESCRIPTION: Demonstrates how to create a subscription, handle subscription events, and manage subscription lifecycle in Go.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nsub, err := client.NewSubscription(\"example\")\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nsub.OnSubscribing(func(e centrifuge.SubscribingEvent) {\n\tlog.Printf(\"Subscribing on channel %s - %d (%s)\", sub.Channel, e.Code, e.Reason)\n})\nsub.OnSubscribed(func(e centrifuge.SubscribedEvent) {\n\tlog.Printf(\"Subscribed on channel %s\", sub.Channel)\n})\nsub.OnUnsubscribed(func(e centrifuge.UnsubscribedEvent) {\n\tlog.Printf(\"Unsubscribed from channel %s - %d (%s)\", sub.Channel, e.Code, e.Reason)\n})\n\nerr = sub.Subscribe()\nif err != nil {\n\tlog.Fatalln(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing and Cleaning Up Centrifugo WebSocket Connection (JavaScript)\nDESCRIPTION: Uses React's useEffect to establish a Centrifugo connection when a user is authenticated and clean it up when the user logs out or userInfo changes. The connection is made using the Centrifuge class and is closed via centrifuge.disconnect() in the cleanup function. Depends on userInfo context, React, and previously imported Centrifuge components.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  if (!userInfo.id) {\n    return;\n  }\n\n  let centrifuge: Centrifuge | null = null;\n\n  const init = async () => {\n    centrifuge = new Centrifuge(WS_ENDPOINT, {\n      debug: true\n    })\n    centrifuge.connect()\n  }\n\n  // As soon as we get authenticated user ‚Äì init our app.\n  init()\n\n  return () => {\n    if (centrifuge) {\n      console.log(\"disconnect Centrifuge\")\n      centrifuge.disconnect()\n    }\n  }\n}, [userInfo])\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics Endpoint (Centrifugo, JSON)\nDESCRIPTION: This JSON configuration snippet enables the Prometheus metrics endpoint by setting the \"prometheus\" option to true in the Centrifugo configuration file. This exposes a \"/metrics\" HTTP endpoint which Prometheus can scrape. No other dependencies are required beyond a working Centrifugo instance; the relevant parameter is \"prometheus\", which toggles the Prometheus output. The configuration should be placed within your main Centrifugo \"config.json\" file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/monitoring.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"prometheus\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing JWT Issuer Claim in Centrifugo Config - JSON\nDESCRIPTION: This snippet sets the expected JWT issuer claim (`iss`) for all tokens accepted by Centrifugo. By defining `token_issuer` in the configuration, only JWTs issued by the given issuer (here, \"my_app\") will be validated. Place this entry within the `config.json` file to apply the check globally.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_issuer\": \"my_app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo Server (Bash)\nDESCRIPTION: Command to start the Centrifugo server with the generated configuration and admin interface.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/quickstart.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo --config=config.json --admin\n```\n\n----------------------------------------\n\nTITLE: Publishing Data to Centrifugo Channel via API using cURL (Bash)\nDESCRIPTION: This `curl` command demonstrates publishing data to a Centrifugo channel ('channel') using the server's HTTP API endpoint (`http://localhost:8000/api`). It sends a POST request with a JSON payload specifying the 'publish' method, the target channel, and the data (`{\"value\": 2}`). Authentication is performed using the `Authorization` header with an API key obtained from the Centrifugo configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/quickstart.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey d7627bb6-2292-4911-82e1-615c0ed3eebb\" \\\n  --request POST \\\n  --data '{\"method\": \"publish\", \"params\": {\"channel\": \"channel\", \"data\": {\"value\": 2}}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Connecting and Subscribing to a Channel in Javascript\nDESCRIPTION: Provides a complete example of using the Centrifuge Javascript SDK to connect to a WebSocket server, create a new subscription to the 'example' channel, set up a publication listener, and initiate the subscription and connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nconst sub = client.newSubscription('example').on('publication', function(ctx) {\n    console.log(\"received publication from a channel\", ctx.data);\n});\n\nsub.subscribe();\n\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Refresh Proxy Endpoint - JSON\nDESCRIPTION: These JSON configuration snippets show how to enable and tune Centrifugo's refresh proxy feature in the server config file. The 'proxy_refresh_endpoint' field specifies the backend URL that Centrifugo will call to validate connections, while 'proxy_refresh_timeout' sets the POST request timeout duration (default is '1s'). Required for enabling server-side session management and validation. Values should be customized per deployment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_refresh_endpoint\": \"http://localhost:3000/centrifugo/refresh\",\n  \"proxy_refresh_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Configuration File\nDESCRIPTION: Command to generate a minimal configuration file with auto-generated values. This creates a config.json file in the current directory with required secret keys.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Streaming as a Fallback Transport in Centrifuge JS SDK (JavaScript)\nDESCRIPTION: This JavaScript code shows how to configure the Centrifuge JS client library to attempt connecting via WebSocket first and then fall back to HTTP streaming if the WebSocket connection fails. It defines an array of transport configurations, specifying the transport type ('websocket' or 'http_stream') and the corresponding endpoint URL for each. The `Centrifuge` instance is initialized with this array, and `connect()` initiates the connection attempt. This relies on Fetch and Readable Streams APIs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/http_stream.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"Use HTTP-streaming with bidirectional emulation as a fallback for WebSocket in JS SDK\"\nconst transports = [\n    {\n        transport: 'websocket',\n        endpoint: 'ws://localhost:8000/connection/websocket'\n    },\n    {\n        transport: 'http_stream',\n        endpoint: 'http://localhost:8000/connection/http_stream'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n```\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Real-Time Events with Centrifugo via Django Backend (Python)\nDESCRIPTION: This Python code demonstrates how to broadcast real-time events to all members of a chat room in a Django application by utilizing the Centrifugo server's HTTP broadcast API. The `CentrifugoMixin` class provides methods to gather room member channels and to publish events through HTTP requests upon successful database commits, handling retries and ensuring message idempotency. Key dependencies include Django REST Framework, requests, Centrifugo server, Django's transaction hooks, and properly configured secret API keys; expected inputs are room IDs and event payloads, outputs are HTTP broadcast notifications to Centrifugo with error handling and idempotency support.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nfrom django.conf import settings\n\n\nclass CentrifugoMixin:\n    # A helper method to return the list of channels for all current members of specific room.\n    # So that the change in the room may be broadcasted to all the members.\n    def get_room_member_channels(self, room_id):\n        members = RoomMember.objects.filter(room_id=room_id).values_list('user', flat=True)\n        return [f'personal:{user_id}' for user_id in members]\n\n    def broadcast_room(self, room_id, broadcast_payload):\n        # Using Centrifugo HTTP API is the simplest way to send real-time message, and usually\n        # it provides the best latency. The trade-off here is that error here may result in\n        # lost real-time event. Depending on the application requirements this may be fine or not.  \n        def broadcast():\n            session = requests.Session()\n            retries = Retry(total=1, backoff_factor=1, status_forcelist=[500, 502, 503, 504])\n            session.mount('http://', HTTPAdapter(max_retries=retries))\n            try:\n                session.post(\n                    \"http://centrifugo:8000/api/broadcast\",\n                    data=json.dumps(broadcast_payload),\n                    headers={\n                        'Content-type': 'application/json', \n                        'X-API-Key': settings.CENTRIFUGO_HTTP_API_KEY,\n                        'X-Centrifugo-Error-Mode': 'transport'\n                    }\n                )\n            except requests.exceptions.RequestException as e:\n                logging.error(e)\n\n        # We need to use on_commit here to not send notification to Centrifugo before\n        # changes applied to the database. Since we are inside transaction.atomic block\n        # broadcast will happen only after successful transaction commit.\n        transaction.on_commit(broadcast)\n\n\nclass MessageListCreateAPIView(ListCreateAPIView, CentrifugoMixin):\n    # Same as before\n\n    @transaction.atomic\n    def create(self, request, *args, **kwargs):\n        room_id = self.kwargs['room_id']\n        room = Room.objects.select_for_update().get(id=room_id)\n        room.increment_version()\n        channels = self.get_room_member_channels(room_id)\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        obj = serializer.save(room=room, user=request.user)\n        room.last_message = obj\n        room.save()\n\n        # This is where we add code to broadcast over Centrifugo API.\n        broadcast_payload = {\n            'channels': channels,\n            'data': {\n                'type': 'message_added',\n                'body': serializer.data\n            },\n            'idempotency_key': f'message_{serializer.data[\"id\"]}'\n        }\n        self.broadcast_room(room_id, broadcast_payload)\n        \n        headers = self.get_success_headers(serializer.data)\n        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass JoinRoomView(APIView, CentrifugoMixin):\n    # Some code skipped here ....\n\n    @transaction.atomic\n    def post(self, request, room_id):\n        # Some code skipped here ....\n        obj, _ = RoomMember.objects.get_or_create(user=request.user, room=room)\n        channels = self.get_room_member_channels(room_id)\n        obj.room.member_count = len(channels)\n        body = RoomMemberSerializer(obj).data\n\n        broadcast_payload = {\n            'channels': channels,\n            'data': {\n                'type': 'user_joined',\n                'body': body\n            },\n            'idempotency_key': f'user_joined_{obj.pk}'\n        }\n        self.broadcast_room(room_id, broadcast_payload)\n        return Response(body, status=status.HTTP_200_OK)\n\n\nclass LeaveRoomView(APIView, CentrifugoMixin):\n    # Some code skipped here ....\n\n    @transaction.atomic\n    def post(self, request, room_id):\n        # Some code skipped here ....\n        obj = get_object_or_404(RoomMember, user=request.user, room=room)\n        obj.room.member_count = len(channels) - 1\n        pk = obj.pk\n        obj.delete()\n        body = RoomMemberSerializer(obj).data\n\n        broadcast_payload = {\n            'channels': channels,\n            'data': {\n                'type': 'user_left',\n                'body': body\n            },\n            'idempotency_key': f'user_left_{pk}'\n        }\n        self.broadcast_room(room_id, broadcast_payload)\n        return Response(body, status=status.HTTP_200_OK)\n\n```\n\nLANGUAGE: python\nCODE:\n```\n# CENTRIFUGO_HTTP_API_KEY is used for auth in Centrifugo server HTTP API.\n# SECURITY WARNING: make it strong, keep it in secret!\nCENTRIFUGO_HTTP_API_KEY = 'api_key'\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Centrifugo with Shell Script\nDESCRIPTION: Shell command to download and install Centrifugo binary automatically. This script detects your system and downloads the appropriate binary distribution.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSLf https://centrifugal.dev/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Granting Subscription-Level Channel Permissions - Centrifugo PRO - JSON\nDESCRIPTION: This snippet configures subscription-level channel permissions using the 'allow' claim in a JWT or the 'allow' field in a subscribe proxy result. The JSON object grants 'pub', 'hst', and 'prs' capabilities (but not 'sub', as it's implied by token validity). This is typically provided as part of a channel-specific JWT or proxy response.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/capabilities.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allow\": [\"pub\", \"hst\", \"prs\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending RPC to Centrifugo Server in JavaScript\nDESCRIPTION: Demonstrates how to send an RPC (Remote Procedure Call) to the Centrifugo server using the centrifuge-js client. This requires RPC proxy to be configured on the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/client_api.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst rpcRequest = {'key': 'value'};\nconst data = await centrifuge.namedRPC('example_method', rpcRequest);\n```\n\n----------------------------------------\n\nTITLE: Returning JWT Token in JSON Refresh Endpoint (Python)\nDESCRIPTION: This snippet illustrates the structure of a JSON object response from a Centrifugo credential refresh endpoint in Python. The returned object includes the freshly generated JWT token as the 'token' field. Prerequisites: a properly generated JWT string assigned to the variable 'token'. Input: a valid JWT token. Output: JSON with a single 'token' property used by the frontend for reconnecting with updated credentials.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"token\": token\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HMAC Secret Key in Centrifugo\nDESCRIPTION: JSON configuration for setting the HMAC secret key used for JWT authentication in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token_hmac_secret_key\": \"<YOUR-SECRET-STRING-HERE>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence via Centrifugo API (Bash)\nDESCRIPTION: Demonstrates using a curl command to query the online presence information for a specific channel (`chat:index`) via the Centrifugo HTTP API. It requires a POST request to the `/api/presence` endpoint with the channel name in the JSON payload and appropriate `Content-Type` and `X-API-Key` headers. The response contains a map of client connections currently subscribed to the channel, including user ID, client ID, and connection info.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channels.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat:index\"}' \\\n  http://localhost:8000/api/presence\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"presence\": {\n            \"66fdf8d1-06f0-4375-9fac-db959d6ee8d6\": {\n                \"user\": \"2694\",\n                \"client\": \"66fdf8d1-06f0-4375-9fac-db959d6ee8d6\",\n                \"conn_info\": {\"name\": \"Alex\"}\n            },\n            \"d4516dd3-0b6e-4cfe-84e8-0342fd2bb20c\": {\n                \"user\": \"2694\",\n                \"client\": \"d4516dd3-0b6e-4cfe-84e8-0342fd2bb20c\",\n                \"conn_info\": {\"name\": \"Alex\"}\n            }\n            \"g3216dd3-1b6e-tcfe-14e8-1342fd2bb20c\": {\n                \"user\": \"56\",\n                \"client\": \"g3216dd3-1b6e-tcfe-14e8-1342fd2bb20c\",\n                \"conn_info\": {\"name\": \"Alice\"}\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo with Token in centrifuge-js v3 - JavaScript\nDESCRIPTION: This snippet shows how to initialize and connect a Centrifugo WebSocket client (centrifuge-js v3) instance using a generated JWT token. The client is configured with the server URL and 'token' param set to the JWT. Upon instantiation, 'connect()' is called to establish the authenticated session. Requires the centrifuge-js v3 library and a valid Centrifugo server URL.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar centrifuge = new Centrifuge(\\\"ws://localhost:8000/connection/websocket\\\", {\\n  token: token\\n});\\ncentrifuge.connect();\\n\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Subscription JWT via `gensubtoken` CLI (Shell)\nDESCRIPTION: Illustrates how to use the Centrifugo `gensubtoken` command-line tool to quickly generate a subscription JWT during development. It requires specifying the user ID (`-u`) and the channel name (`-s`). This command utilizes the HMAC secret key configured in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channel_token_auth.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./centrifugo gensubtoken -u 123722 -s channel\n```\n\n----------------------------------------\n\nTITLE: Connecting the Centrifuge Client to the Server in JavaScript\nDESCRIPTION: This snippet triggers the Centrifuge client to initiate a connection with the server. The connect method transitions the client state from 'disconnected' to 'connecting', and executes the authentication and network bootstrap process as configured. The Centrifuge library must be correctly instantiated and, if needed, configured with a valid authentication token prior to calling this method.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: Customizing JWT User ID Claim in Token Processing - Centrifugo - JSON\nDESCRIPTION: This snippet configures Centrifugo to use an alternative claim, 'user_id', from the JWT token to extract the user ID for authentication purposes, instead of the default 'sub' claim. The 'user_id_claim' option should be a valid regex match (only letters and underscores allowed). All other token options, including this, apply to both connection and subscription tokens unless override config is set. Requires Centrifugo server and JWTs with a matching custom claim present.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"token\": {\n      \"user_id_claim\": \"user_id\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Connection Token from Backend (JavaScript)\nDESCRIPTION: Defines an async function using axios to request a Centrifugo connection JWT from the backend API. Expects a token in the JSON response and is used as the getToken callback for secure Centrifugo WebSocket connections. Requires axios, the correct API endpoint, and a backend route that returns tokens for authenticated users.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getConnectionToken = async () => {\n  const response = await axios.get(`${API_ENDPOINT_BASE}/api/token/connection/`, {})\n  return response.data.token;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages via HTTP API using Bash (curl) - Bash\nDESCRIPTION: Demonstrates how to publish a message to a Centrifugo channel via the HTTP API using curl. This requires that Centrifugo is running and configured with a valid API key. The code sets the X-API-Key header and sends a POST request with JSON data (channel and message content) to /api/publish. Input parameters include the API key, channel name, and payload. The output is the HTTP response indicating success or error. No dependencies except curl.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"test\", \"data\": {\"value\": \"test_value\"}}' \\\n  http://localhost:8000/api/publish\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Custom 'info' Claim and Expiration (NodeJS)\nDESCRIPTION: This Node.js example creates a JWT with both 'sub' and a nested 'info' claim, and sets a 5-minute expiration, using the 'jose' package. The 'info' field stores user metadata to be included in the token. The asynchronous function signs the JWT using HS256 and outputs it as a string. Intended for advanced authentication scenarios in Centrifugo where per-connection metadata is needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst jose = require('jose')\\n\\n(async function main() {\\n  const secret = new TextEncoder().encode('secret')\\n  const alg = 'HS256'\\n\\n  const token = await new jose.SignJWT({ sub: '42', info: {\"name\": \"Alexander Emelin\"} })\\n    .setProtectedHeader({ alg })\\n    .setExpirationTime('5m')\\n    .sign(secret)\\n\\n  console.log(token);\\n})();\\n\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with JSON Configuration (Bash)\nDESCRIPTION: This command starts the Centrifugo server using the settings defined in a specified JSON configuration file (`config.json`). This is typically used after configuring TLS or other settings within the file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/tls.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```\n./centrifugo --config=config.json\n```\n```\n\n----------------------------------------\n\nTITLE: HTML and JavaScript Client Implementation\nDESCRIPTION: A simple HTML page with JavaScript code to connect to Centrifugo, subscribe to a channel, and handle real-time updates.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/quickstart.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n\n<head>\n  <title>Centrifugo quick start</title>\n</head>\n\n<body>\n  <div id=\"counter\">-</div>\n  <script src=\"https://unpkg.com/centrifuge@3.1.0/dist/centrifuge.js\"></script>\n  <script type=\"text/javascript\">\n    const container = document.getElementById('counter');\n\n    const centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\", {\n      token: \"<TOKEN>\"\n    });\n\n    centrifuge.on('connecting', function (ctx) {\n      console.log(`connecting: ${ctx.code}, ${ctx.reason}`);\n    }).on('connected', function (ctx) {\n      console.log(`connected over ${ctx.transport}`);\n    }).on('disconnected', function (ctx) {\n      console.log(`disconnected: ${ctx.code}, ${ctx.reason}`);\n    }).connect();\n\n    const sub = centrifuge.newSubscription(\"channel\");\n\n    sub.on('publication', function (ctx) {\n      container.innerHTML = ctx.data.value;\n      document.title = ctx.data.value;\n    }).on('subscribing', function (ctx) {\n      console.log(`subscribing: ${ctx.code}, ${ctx.reason}`);\n    }).on('subscribed', function (ctx) {\n      console.log('subscribed', ctx);\n    }).on('unsubscribed', function (ctx) {\n      console.log(`unsubscribed: ${ctx.code}, ${ctx.reason}`);\n    }).subscribe();\n  </script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Centrifugo Client with Asynchronous Token Refresh in JavaScript\nDESCRIPTION: This code illustrates configuring a Centrifuge client to use a dynamic asynchronous token refresh callback in JavaScript. It requires the Centrifuge SDK and setups both an initial 'token' and a 'getToken' async function for refreshing tokens, handling authentication errors appropriately. The function fetches a new JWT from the backend, handles authorization errors explicitly, and integrates the callback into client instantiation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getToken() {\n    if (!loggedIn) {\n        return \"\"; // Empty token or pre-generated token for anonymous users.\n    }\n    // Fetch your application backend.\n    const res = await fetch('http://localhost:8000/centrifugo/connection_token');\n    if (!res.ok) {\n        if (res.status === 403) {\n            // Return special error to not proceed with token refreshes,\n            // client will be disconnected.\n            throw new Centrifuge.UnauthorizedError();\n        }\n        // Any other error thrown will result into token refresh re-attempts.\n        throw new Error(`Unexpected status code ${res.status}`);\n    }\n    const data = await res.json();\n    return data.token;\n}\n\nconst client = new Centrifuge(\n    'ws://localhost:8000/connection/websocket',\n    {\n        token: 'JWT-GENERATED-ON-BACKEND-SIDE', // Optional, getToken is enough.\n        getToken: getToken\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling Server-Side Subscription Events with Centrifuge SDK in JavaScript\nDESCRIPTION: Demonstrates how to initialize a Centrifuge client and register event listeners for server-side subscription lifecycle events such as 'subscribed', 'subscribing', 'unsubscribed', and 'publication'. Each callback receives context about the event, and the snippet illustrates where to insert custom logic. Requires Centrifuge JavaScript SDK and a running Centrifugo server over WebSocket. Key parameter: connection URL. Inputs are server-driven events; outputs are logs and potential side effects. Clients must handle events quickly to avoid blocking the read loop.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nclient.on('subscribed', function(ctx) {\n    // Called when subscribed to a server-side channel upon Client moving to\n    // connected state or during connection lifetime if server sends Subscribe\n    // push message.\n    console.log('subscribed to server-side channel', ctx.channel);\n});\n\nclient.on('subscribing', function(ctx) {\n    // Called when existing connection lost (Client reconnects) or Client\n    // explicitly disconnected. Client continue keeping server-side subscription\n    // registry with stream position information where applicable.\n    console.log('subscribing to server-side channel', ctx.channel);\n});\n\nclient.on('unsubscribed', function(ctx) {\n    // Called when server sent unsubscribe push or server-side subscription\n    // previously existed in SDK registry disappeared upon Client reconnect.\n    console.log('unsubscribed from server-side channel', ctx.channel);\n});\n\nclient.on('publication', function(ctx) {\n    // Called when server sends Publication over server-side subscription.\n    console.log('publication receive from server-side channel', ctx.channel, ctx.data);\n});\n\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Configuration via YAML File - YAML\nDESCRIPTION: This YAML snippet demonstrates Centrifugo configuration with structured keys for client authentication and allowed origins, plus API endpoint key under 'http_api'. Make sure to preserve the indentation and use valid YAML syntax. Input: path to configuration file, output: YAML structure loaded by Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclient:\n  token:\n    hmac_secret_key: \"<YOUR-SECRET-STRING-HERE>\"\n  allowed_origins:\n  - http://localhost:3000\nhttp_api:\n  key: \"<YOUR-API-KEY-HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Centrifugo Client with Static JWT Token in JavaScript\nDESCRIPTION: This snippet shows how to initialize a Centrifuge client instance in JavaScript with a statically set JWT authentication token. Dependencies include the Centrifuge JavaScript SDK. The 'token' parameter should contain the backend-generated JWT. The expected input is the WebSocket URL and token; the output is an authenticated client instance ready to connect.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE'\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Subscription State Change Events in Centrifuge JavaScript SDK\nDESCRIPTION: This code demonstrates subscribing to a Centrifugo channel and registering event listeners for 'subscribing', 'subscribed', and 'unsubscribed' state changes using the JavaScript SDK. Dependencies include an initialized Centrifuge client. The 'channel' parameter specifies the subscription channel. Each event listener logs state transitions for observability and debugging purposes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sub = client.newSubscription(channel);\n\nsub.on('subscribing', function(ctx) {\n    console.log('subscribing');\n});\n\nsub.on('subscribed', function(ctx) {\n    console.log('subscribed');\n});\n\nsub.on('unsubscribed', function(ctx) {\n    console.log('unsubscribed');\n});\n\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Connecting Centrifuge-JS Client with JWT Token (JavaScript)\nDESCRIPTION: This code connects a Centrifuge JavaScript client to the Centrifugo websocket endpoint using a JWT token for authentication. Requires 'centrifuge-js' v3. Dependencies: 'centrifuge-js' client library and a valid JWT. Inputs: WebSocket endpoint URL and JWT token. The snippet demonstrates initializing and connecting the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\", {\n  token: token\n});\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: Implementing Login/Logout Flow with Centrifugo v5 SDK\nDESCRIPTION: Example demonstrating how to implement login/logout functionality using the Centrifugo v5 JavaScript SDK, showing token management and connection handling.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-06-29-centrifugo-v5-released.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge('ws://localhost:8000/connection/websocket', {\n    // Provide function which returns empty string for anonymous users,\n    // and proper JWT for authenticated users.\n    getToken: getTokenImplementation\n});\ncentrifuge.connect();\n\nloginButton.addEventListener('click', function() {\n    centrifuge.disconnect();\n    // Do actual login here.\n    centrifuge.connect();\n});\n\nlogoutButton.addEventListener('click', function() {\n    centrifuge.disconnect();\n    // Reset token - so that getToken will be called on next connect attempt.\n    centrifuge.setToken(\"\");\n    // Do actual logout here.\n    centrifuge.connect();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Server with Debug Logging and Namespace (JSON)\nDESCRIPTION: Provides a sample config.json for Centrifugo, setting log level, JWT HMAC secrets, allowed origins for clients, HTTP API key, and defining a 'personal' namespace for channels. Intended for mounting into the Centrifugo container for secure and segmented real-time operations. To be used with Docker deployment and matching backend JWT secrets.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log_level\": \"debug\",\n  \"client\": {\n    \"token\": {\n      \"hmac_secret_key\": \"secret\"\n    },\n    \"allowed_origins\": [\n      \"http://localhost:9000\"\n    ]\n  },\n  \"http_api\": {\n    \"key\": \"api_key\"\n  },\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"personal\"\n      }\n    ]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Messages and Updating Room State - Redux Reducer - JavaScript\nDESCRIPTION: This Redux reducer snippet updates the state when new messages are received or loaded for a specific chat room, ensuring messages are deduplicated, sorted, and that the associated room's last_message and bump time are updated if necessary. It depends on Redux for immutable state management and assumes a normalized state structure with messagesByRoomId, roomsById, and rooms arrays. Inputs include an action payload with roomId and messages, and the output is a state object with updated messages, rooms, and room metadata; special care is taken to prevent duplicate messages and to keep room order current with the latest activity.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ncase 'ADD_MESSAGES': {\n  const roomId = action.payload.roomId;\n  const newMessages = action.payload.messages;\n  let currentMessages = state.messagesByRoomId[roomId] || [];\n\n  // Combine current and new messages, then filter out duplicates.\n  const combinedMessages = [...currentMessages, ...newMessages].filter(\n    (message, index, self) =>\n      index === self.findIndex(m => m.id === message.id)\n  );\n\n  // Sort the combined messages by id in ascending order.\n  combinedMessages.sort((a, b) => a.id - b.id);\n\n  // Find the message with the highest ID.\n  const maxMessageId = combinedMessages.length > 0 ? combinedMessages[combinedMessages.length - 1].id : null;\n\n  let needSort = false;\n\n  // Update the roomsById object with the new last_message if necessary.\n  const updatedRoomsById = { ...state.roomsById };\n  if (maxMessageId !== null && updatedRoomsById[roomId] && (!updatedRoomsById[roomId].last_message || maxMessageId > updatedRoomsById[roomId].last_message.id)) {\n    const newLastMessage = combinedMessages.find(message => message.id === maxMessageId);\n    updatedRoomsById[roomId].last_message = newLastMessage;\n    updatedRoomsById[roomId].bumped_at = newLastMessage.room.bumped_at;\n    needSort = true;\n  }\n\n  let updatedRooms = [...state.rooms];\n  if (needSort) {\n      // Sort mergedRoomIds based on bumped_at field in updatedRoomsById.\n      updatedRooms = updatedRooms.sort((a: any, b: any) => {\n        const roomA = updatedRoomsById[a];\n        const roomB = updatedRoomsById[b];\n        // Compare RFC 3339 date strings directly\n        return roomB.bumped_at.localeCompare(roomA.bumped_at);\n      });\n  }\n\n  return {\n    ...state,\n    messagesByRoomId: {\n      ...state.messagesByRoomId,\n      [roomId]: combinedMessages\n    },\n    roomsById: updatedRoomsById,\n    rooms: updatedRooms,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Centrifugo Connection and Subscription in Swift\nDESCRIPTION: Swift implementation of connecting to a Centrifugo server and subscribing to a channel. Demonstrates delegate pattern usage for handling client and subscription events, including publication reception.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftCentrifuge\n\nclass ClientDelegate : NSObject, CentrifugeClientDelegate {}\n\nlet config = CentrifugeClientConfig()\nlet endpoint = \"ws://localhost:8000/connection/websocket\"\nlet client = CentrifugeClient(endpoint: endpoint, config: config, delegate: ClientDelegate())\n\nclass SubscriptionDelegate : NSObject, CentrifugeSubscriptionDelegate {\n    func onPublication(_ s: CentrifugeSubscription, _ e: CentrifugePublicationEvent) {\n        print(\"publication\", e.data)\n    }\n}\n\ndo {\n    sub = try self.client?.newSubscription(channel: \"example\", delegate: SubscriptionDelegate())\n    sub!.subscribe()\n} catch {\n    print(\"Can not create subscription: \\(error)\")\n}\n\nclient.connect()\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token with Additional Connection Info in Python\nDESCRIPTION: Python example to augment a Centrifugo connection JWT with an 'info' object containing additional user information (e.g., a name). Requires 'PyJWT'. Inputs: user id, info dict, secret key. Outputs: JWT token string with extended claims, enhancing user session context for downstream usage in Centrifugo clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\n\nclaims = {\"sub\": \"42\", \"info\": {\"name\": \"Alexander Emelin\"}}\ntoken = jwt.encode(claims, \"secret\", algorithm=\"HS256\").decode()\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Centrifugo Channel Stream using gocent Client (Go)\nDESCRIPTION: This Go code demonstrates how to paginate over a Centrifugo history stream using the gocent API library. It iteratively fetches channel history in pages of 10 publications, toggling between forward and reverse directions at stream endpoints. It highlights use of the StreamPosition struct to track current location, and illustrates error handling and result logging. Prerequisites: Go, gocent library, Centrifugo client connection. Inputs include context, channel name, and client instance. The code outputs logs of publication offsets and data, and demonstrates direction reversal at stream boundaries. Limitations: the approach is for demonstration purposes (endless loop, both directions).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/history_and_recovery.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Iterate by 10.\nlimit := 10\n// Paginate in reversed order first, then invert it.\nreverse := true\n// Start with nil StreamPosition, then fill it with value while paginating.\nvar sp *gocent.StreamPosition\n\nfor {\n\thistoryResult, err = c.History(\n        ctx,\n        channel,\n\t\tgocent.WithLimit(limit),\n\t\tgocent.WithReverse(reverse),\n        gocent.WithSince(sp),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error calling history: %v\", err)\n\t}\n\tfor _, pub := range historyResult.Publications {\n\t\tlog.Println(pub.Offset, \"=>\", string(pub.Data))\n\t\tsp = &gocent.StreamPosition{\n\t\t\tOffset: pub.Offset,\n\t\t\tEpoch:  historyResult.Epoch,\n\t\t}\n\t}\n\tif len(historyResult.Publications) < limit {\n\t\t// Got all pubs, invert pagination direction.\n\t\treverse = !reverse\n\t\tlog.Println(\"end of stream reached, change iteration direction\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Centrifugo Client with Keycloak Token Authentication\nDESCRIPTION: Implementation of the useEffect hook to establish a Centrifugo WebSocket connection using Keycloak's access token for authentication. Includes token refresh logic to maintain the connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-03-31-keycloak-sso-centrifugo.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  if (!initialized || !keycloak.authenticated) {\n    return;\n  }\n  const centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\", {\n    token: keycloak.token,\n    getToken: function () {\n      return new Promise((resolve, reject) => {\n        keycloak.updateToken(5).then(function () {\n          resolve(keycloak.token);\n        }).catch(function (err) {\n          reject(err);\n          keycloak.logout();\n        });\n      })\n    }\n  });\n\n  centrifuge.connect();\n\n  return () => {\n    centrifuge.disconnect();\n  };\n}, [keycloak, initialized]);\n```\n\n----------------------------------------\n\nTITLE: Querying Active User Connections via API - Bash\nDESCRIPTION: This snippet demonstrates making a POST request to Centrifugo's HTTP API to retrieve all active connections for a specific user using the user_connections method. The curl command includes authentication headers (API key required) and sends a JSON body specifying the target user. Dependencies include Centrifugo running with HTTP API enabled and valid API_KEY for authorization. On success, the server returns a JSON object detailing all active sessions for that user, including associated app and transport information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_connections.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"user_connections\", \"params\": {\"user\": \"42\"}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Initializing Centrifuge Connection with Dynamic JWT Authentication (JavaScript)\nDESCRIPTION: Creates a new Centrifuge client instance with the getToken callback to support JWT-based connection authentication. Requires a getConnectionToken async function that fetches a valid JWT from the backend, ensuring secure connections. Used in conjunction with backend JWT endpoints and React state lifecycle.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge = new Centrifuge(WS_ENDPOINT, {\n    getToken: getConnectionToken,\n    debug: true\n})\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Channel Options in Centrifugo JSON\nDESCRIPTION: This JSON snippet demonstrates setting global channel options in a Centrifugo `config.json` file. It enables presence and history (with size 10 and 300s TTL), forces publication recovery, and grants broad permissions (subscribe, publish, history, presence) to both authenticated (client) and anonymous users by setting the corresponding `allow_...` flags to true. These settings apply to channels without a specific namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channels.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    \"token_hmac_secret_key\": \"my-secret-key\",\n    \"api_key\": \"secret-api-key\",\n    \"presence\": true,\n    \"history_size\": 10,\n    \"history_ttl\": \"300s\",\n    \"force_recovery\": true,\n    \"allow_subscribe_for_client\": true,\n    \"allow_subscribe_for_anonymous\": true,\n    \"allow_publish_for_subscriber\": true,\n    \"allow_publish_for_anonymous\": true,\n    \"allow_history_for_subscriber\": true,\n    \"allow_history_for_anonymous\": true,\n    \"allow_presence_for_subscriber\": true,\n    \"allow_presence_for_anonymous\": true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Streaming and Processing Centrifugo Messages in Browser via Fetch and Readable Streams (JavaScript)\nDESCRIPTION: This JavaScript snippet establishes a streaming connection to Centrifugo's unidirectional HTTP stream endpoint using the Fetch API. It sets up a POST request with a JWT token in the body, then reads the response as a ReadableStream, decoding and buffering each chunk. Each complete line (newline-delimited JSON) is parsed and processed, with error handling for broken or malformed messages. Required dependencies: Web standard Fetch and ReadableStream APIs, available in modern browsers. Input: JWT token string. Output: Parsed message objects logged to the console. Limitation: Server must stream newline-delimited JSON; client logic must handle pings (null/empty).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_http_stream.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst token = 'CENTRIFUGO_JWT_TOKEN_HERE';\n\nfetch('http://localhost:8000/connection/uni_http_stream', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ token })\n})\n    .then(response => {\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder('utf-8');\n        let buffer = '';\n\n        function read() {\n            reader.read().then(({ done, value }) => {\n                if (done) {\n                    console.log('Stream complete');\n                    return;\n                }\n\n                // Decode the new chunk and append to the buffer.\n                buffer += decoder.decode(value, { stream: true });\n\n                // Split the buffer on newlines.\n                const lines = buffer.split('\\n');\n\n                // The last element may be an incomplete message; keep it in the buffer.\n                buffer = lines.pop();\n\n                // Process each complete line.\n                for (const line of lines) {\n                    if (!line.trim()) continue; // Skip empty lines (e.g., ping messages could be null)\n\n                    try {\n                        const message = JSON.parse(line);\n                        // Process your message here.\n                        console.log('Received message:', message);\n                    } catch (error) {\n                        console.error('Error parsing JSON:', error);\n                    }\n                }\n\n                // Continue reading the next chunk.\n                read();\n            });\n        }\n\n        read();\n    })\n    .catch(error => {\n        console.error('Fetch error:', error);\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Read Buffer Size\nDESCRIPTION: JSON configuration example showing how to set the WebSocket read buffer size to optimize memory usage per connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/websocket.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...,\n    \"websocket_read_buffer_size\": 512\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Secret for Centrifugo Token Generation (Python)\nDESCRIPTION: A snippet from Django settings.py defining CENTRIFUGO_TOKEN_SECRET for creating JWTs used in both connection and subscription authentication flows for Centrifugo. Security warning advises keeping the secret strong and confidential. Value must match the server-side Centrifugo config.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# CENTRIFUGO_TOKEN_SECRET is used to create connection and subscription JWT.\n# SECURITY WARNING: make it strong, keep it in secret, never send to the frontend!\nCENTRIFUGO_TOKEN_SECRET = 'secret'\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Channel History Since a Specific Position in JavaScript\nDESCRIPTION: This snippet shows how to retrieve up to 10 publications from a channel's history using the `history` method, starting from a known stream position defined by `offset` and `epoch`. Requires history enabled for the channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst resp = await subscription.history({limit: 10, since: {offset: 0, epoch: '...'}});\nconsole.log(resp.publications);\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Log Output for Permission Denied on Subscription (console)\nDESCRIPTION: This log shows a failed subscribe command due to insufficient permissions, indicating that further configuration is required to allow clients to subscribe. The error code, client ID, and requested channel are all included. The message points users to adjust server configs like allow_subscribe_for_client or use channel JWTs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n2022-06-10 09:45:49 [INF] client command error error=\"permission denied\" client=88116489-350f-447f-9ff3-ab61c9341efe code=103 command=\"id:2  subscribe:{channel:\\\"channel\\\"}\" reply=\"id:2  error:{code:103  message:\\\"permission denied\\\"}\" user=123722\n```\n\n----------------------------------------\n\nTITLE: Generating Minimal Centrifugo Configuration (Bash)\nDESCRIPTION: Generates a default Centrifugo server configuration using the provided command-line utility. Requires Centrifugo binary to be installed and in the PATH. Outputs a config.json file suitable for further customization, containing essential authentication and admin properties.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Listening to Channel Publications using Javascript\nDESCRIPTION: Demonstrates how to register an event listener for 'publication' events on a Centrifuge subscription object (`sub`) in Javascript. The callback function receives a context object (`ctx`) containing the publication data, offset, tags, and potentially publisher info.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsub.on('publication', function(ctx) {\n    console.log(\"received publication\", ctx);\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with a Specified Config File (Bash)\nDESCRIPTION: Executes Centrifugo referencing a configuration file config.json using the -c flag. Requires the config.json file to exist and Centrifugo to be installed. The -c flag instructs Centrifugo to load configuration settings from the provided file. Input: path to config file. Output: Centrifugo server running with the specified settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Generating a Subscription JWT Using Node.js (Centrifugo, JavaScript)\nDESCRIPTION: This JavaScript snippet uses the 'jose' library to asynchronously generate a Centrifugo-compatible JWT for channel subscription. It demonstrates how to construct a new JWT with 'sub' and 'channel' claims, set the algorithm to 'HS256', and configure a 1-hour expiration. The secret key should match Centrifugo's HMAC configuration. Outputs the JWT to the console. Requires Node.js and the 'jose' library.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channel_token_auth.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst jose = require('jose')\n\n(async function main() {\n  const secret = new TextEncoder().encode('secret')\n  const alg = 'HS256'\n\n  const token = await new jose.SignJWT({ sub: '42', channel: '$gossips' })\n    .setProtectedHeader({ alg })\n    .setExpirationTime('1h')\n    .sign(secret)\n\n  console.log(token);\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Namespace for Cache Recovery - Centrifugo - JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure a channel namespace in Centrifugo to enable cache recovery mode. The configuration requires specifying the namespace name, enabling forced recovery, setting the recovery mode to 'cache', and defining the history size and retention TTL. Prerequisites include Centrifugo v5.4.0 or later, and knowledge of Centrifugo configuration structure. The main parameters are 'force_recovery', 'force_recovery_mode', 'history_size', and 'history_ttl'; these ensure only the latest message is retained and delivered on subscription. The output is a JSON config file used by the Centrifugo server, and it must be placed correctly in the server's configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/cache_recovery.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ..\n    \"namespaces\": [\n        {\n            \"name\": \"example\",\n            \"force_recovery\": true,\n            \"force_recovery_mode\": \"cache\",\n            \"history_size\": 1,\n            \"history_ttl\": \"1h\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo Server in JavaScript\nDESCRIPTION: Demonstrates how to establish a connection to a Centrifugo server using the centrifuge-js client library. It shows both unauthenticated and authenticated (using JWT) connection examples.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/client_api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge('ws://localhost:8000/connection/websocket');\ncentrifuge.connect();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge('ws://localhost:8000/connection/websocket');\ncentrifuge.setToken('<USER-JWT>')\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo ClickHouse Analytics in config.json (JSON)\nDESCRIPTION: Shows a sample snippet for enabling ClickHouse analytics in Centrifugo via configuration file. Configuration options include toggling analytics, providing DSN addresses, defining database and cluster names, and export toggles for each analytics stream. To activate locally, cluster name should be empty and only one DSN supplied; settings control which analytics warehouses are included.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"clickhouse_analytics\": {\n        \"enabled\": true,\n        \"clickhouse_dsn\": [\n            \"tcp://127.0.0.1:9000\"\n        ],\n        \"clickhouse_database\": \"centrifugo\",\n        \"clickhouse_cluster\": \"\",\n        \"export_connections\": true,\n        \"export_subscriptions\": true,\n        \"export_publications\": true,\n        \"export_operations\": true,\n        \"export_http_headers\": [\n            \"Origin\",\n            \"User-Agent\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message via Centrifugo API using CURL (Bash)\nDESCRIPTION: This Bash command utilizes `curl` to send a message to a specific Centrifugo channel (`#user12`) via the server's API endpoint (`/api`) on `localhost:8000`. It sends an HTTP POST request with a JSON payload (`-d`) specifying the `publish` method, the target channel, and the message data (`{\"input\": \"hello\"}`). Authentication is provided using an API key passed in the `Authorization` header (`-H`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_http_stream.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncurl -X POST http://localhost:8000/api \\\n    -d '{\"method\": \"publish\", \"params\": {\"channel\": \"#user12\", \"data\": {\"input\": \"hello\"}}}' \\\n    -H \"Authorization: apikey 9230f514-34d2-4971-ace2-851c656e81dc\"\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Subscription JWT using Python `pyjwt`\nDESCRIPTION: Demonstrates creating a Centrifugo channel subscription JWT in Python using the `pyjwt` library. It includes essential claims like `sub` (user ID), `channel`, and `exp` (expiration time), signing it with the HS256 algorithm and a shared secret key defined in Centrifugo configuration (`client.token.hmac_secret_key`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channel_token_auth.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\nimport time\n\nclaims = {\"sub\": \"42\", \"channel\": \"$gossips\", \"exp\": int(time.time()) + 3600}\ntoken = jwt.encode(claims, \"secret\", algorithm=\"HS256\").decode()\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Using Namespaces for Channel Configuration in Centrifugo with JSON\nDESCRIPTION: This JSON configuration snippet sets up Centrifugo with both global channel options and multiple namespaces, each providing their own distinct configuration (such as publish, anonymous, history_size, and history_ttl for the \"public\" namespace; presence and join_leave for the \"gossips\" namespace). The namespaces array allows scoping channel behaviors for groups of channels with namespaced identifiers (e.g., public:news). The global options are used for channels without a namespace. It is important that namespace configuration overrides do not inherit from global settings; all needed options must be set per namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/channels.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token_hmac_secret_key\": \"very-long-secret-key\",\n    \"api_key\": \"secret-api-key\",\n    \"anonymous\": true,\n    \"publish\": true,\n    \"presence\": true,\n    \"join_leave\": true,\n    \"history_size\": 10,\n    \"history_ttl\": \"30s\",\n    \"namespaces\": [\n        {\n          \"name\": \"public\",\n          \"publish\": true,\n          \"anonymous\": true,\n          \"history_size\": 10,\n          \"history_ttl\": \"300s\",\n          \"recover\": true\n        },\n        {\n          \"name\": \"gossips\",\n          \"presence\": true,\n          \"join_leave\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Expiring HS256 JWT for Centrifugo in Python\nDESCRIPTION: Generates an HS256 JWT in Python with both 'sub' and 'exp' claims, making it valid for 5 minutes from creation. Utilizes 'PyJWT' and 'time' standard library for timestamp calculation. Inputs: subject ('sub'), expiration seconds, secret key. Output: JWT string suitable for Centrifugo client authentication. Token includes built-in expiry for increased security.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\nimport time\n\nclaims = {\"sub\": \"42\", \"exp\": int(time.time()) + 5*60}\ntoken = jwt.encode(claims, \"secret\", algorithm=\"HS256\").decode()\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Configuring Graphite Metrics Export (Centrifugo, JSON)\nDESCRIPTION: This snippet shows how to enable and configure metrics export to Graphite by setting the \"graphite\", \"graphite_host\", and \"graphite_port\" options in Centrifugo's configuration JSON. Metrics are aggregated and sent to the specified Graphite host and port via TCP; additional options like \"graphite_interval\" can be adjusted to change aggregation frequency. The snippet is intended for use in the main \"config.json\" file and assumes a running Graphite server reachable at the given host and port.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/monitoring.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"graphite\": true,\n    \"graphite_host\": \"localhost\",\n    \"graphite_port\": 2003\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo Binary\nDESCRIPTION: Basic command to run the Centrifugo binary after downloading and unpacking it from a release archive.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Complete Centrifugo Connection and Subscription in Dart\nDESCRIPTION: Example of connecting to a Centrifugo server, creating a subscription, and listening for publications in Dart. Shows how to use the Dart SDK to handle the subscription lifecycle and publications.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal client = centrifuge.createClient(\n    'ws://localhost:8000/connection/websocket',\n    centrifuge.ClientConfig(),\n);\n\nfinal subscription = client.newSubscription(channel);\nsubscription.publication.listen((event) {\n    print(event);\n});\nawait subscription.subscribe();\n\nawait client.connect();\n```\n\n----------------------------------------\n\nTITLE: Enabling Only Admin Web UI without Authentication - JSON\nDESCRIPTION: This JSON snippet configures Centrifugo to enable the admin web interface without specifying authentication fields, suitable for demonstration or internal use cases. Only 'enabled' is set to true; it is strongly recommended to also define 'password' and 'secret' in production environments for security. This configuration is placed in 'config.json' and enables the web UI on the default port after Centrifugo restarts.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/admin_web.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"admin\\\": {\\n        \\\"enabled\\\": true\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Centrifugo Subscription State Changes in React (JavaScript)\nDESCRIPTION: Attaches an event handler to the Centrifuge subscription to update UI status based on subscription state transitions. Uses SubscriptionStateContext to distinguish between 'subscribed' and other states, reflecting the real-time status to the user. Requires previously established Centrifuge subscription and React state management for setRealTimeStatus.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsub.on('state', (ctx: SubscriptionStateContext) => {\n  if (ctx.newState == SubscriptionState.Subscribed) {\n    setRealTimeStatus('üü¢')\n  } else {\n    setRealTimeStatus('üî¥')\n  }\n})\n\n```\n\n----------------------------------------\n\nTITLE: Connecting and Subscribing to a Channel in Swift\nDESCRIPTION: Illustrates a complete workflow in Swift using the SwiftCentrifuge library. It covers setting up client and subscription delegates, configuring and creating the client, creating a subscription with a delegate, handling potential errors during subscription creation, subscribing, and connecting the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftCentrifuge\n\nclass ClientDelegate : NSObject, CentrifugeClientDelegate {}\n\nlet config = CentrifugeClientConfig()\nlet endpoint = \"ws://localhost:8000/connection/websocket\"\nlet client = CentrifugeClient(endpoint: endpoint, config: config, delegate: ClientDelegate())\n\nclass SubscriptionDelegate : NSObject, CentrifugeSubscriptionDelegate {\n    func onPublication(_ s: CentrifugeSubscription, _ e: CentrifugePublicationEvent) {\n        print(\"publication\", e.data)\n    }\n}\n\ndo {\n    sub = try self.client?.newSubscription(channel: \"example\", delegate: SubscriptionDelegate())\n    sub!.subscribe()\n} catch {\n    print(\"Can not create subscription: \\(error)\")\n}\n\nclient.connect()\n```\n\n----------------------------------------\n\nTITLE: Disabling Request Origin Check in Centrifugo Configuration - JSON\nDESCRIPTION: This configuration snippet disables strict origin checks by setting \"allowed_origins\" to a wildcard array ([\"*\"]). This relaxes security, allowing connections from any origin, and it is strongly discouraged if you use the connect proxy feature. Apply this change by updating your config.json as illustrated.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/migration-v3.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"allowed_origins\": [\"*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Subscription State Events in Centrifuge Dart SDK\nDESCRIPTION: This snippet shows how to handle subscription state events (subscribing, subscribed, unsubscribed) in Dart using the Centrifuge SDK. It sets up asynchronous event listeners for each state on a subscription instance. The code requires an initialized client and a valid channel string. Outputs are printed state changes for monitoring subscription status.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal onSubscriptionEvent = (dynamic event) async {\n  print('subscription $channel> $event');\n};\n\nfinal subscription = client.newSubscription(channel);\n\nsubscription.subscribing.listen(onSubscriptionEvent);\nsubscription.subscribed.listen(onSubscriptionEvent);\nsubscription.unsubscribed.listen(onSubscriptionEvent);\n\nawait subscription.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Persistence for User Blocking in Centrifugo PRO\nDESCRIPTION: JSON configuration for enabling Redis as the persistence engine for user blocking data in Centrifugo PRO. This setting allows blocking information to be stored persistently in Redis.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_block.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"user_block\": {\n        \"persistence_engine\": \"redis\",\n        \"redis_address\": \"localhost:6379\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Service in Docker Compose (YAML)\nDESCRIPTION: Defines the Centrifugo service in a docker-compose YAML file, specifying the container image version, configuration volume mapping, startup command, and exposed port. This configuration enables running Centrifugo as a service with a shared config file and exposing it on the appropriate port. Requires Docker Compose and an accompanying config.json file for mounted settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncentrifugo:\n  image: centrifugo/centrifugo:v5.2.0\n  volumes:\n    - ./centrifugo/config.json:/centrifugo/config.json\n  command: centrifugo -c config.json\n  expose:\n    - 8000\n\n```\n\n----------------------------------------\n\nTITLE: Default Unidirectional HTTP Streaming Endpoint URL (Disabled)\nDESCRIPTION: This URL path serves unidirectional communication via HTTP streaming. Like other emulation endpoints, it is disabled by default.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:8000/connection/uni_http_stream\n```\n\n----------------------------------------\n\nTITLE: Implementing RealTimeDocument Class with Centrifuge\nDESCRIPTION: Example implementation of a RealTimeDocument class that handles document state synchronization. The class manages initial data loading, real-time updates, and state re-synchronization using Centrifuge subscription. It includes handlers for loading data, applying updates, version comparison, and change notifications.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-06-03-real-time-document-state-sync.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst subscription = centrifuge.newSubscription('counter', {});\n\nconst realTimeDocument = new RealTimeDocument({\n    subscription, // Wraps Subscription.\n    load: async (): Promise<{ document: any; version: number }> => {\n        // Must load the actual document state and version from the database.\n        // Ex. return { document: result.document, version: result.version };\n    },\n    applyUpdate: (currentDocument: any, update: any): any => {\n        // Must apply update to the document.\n        // currentDocument.value += update.increment;\n        // return currentDocument;\n    },\n    compareVersion: (currentVersion: number, update: any): number | null => {\n        // Must compare versions in real-time publication and current doc version.\n        // const newVersion = publication.data.version;\n        // return newVersion > currentVersion ? newVersion : null;\n    },\n    onChange: (document: any) => {\n        // Will be called once the document is loaded for the first time and every time\n        // the document state is updated. This is where application may render things\n        // based on the document data.\n    }\n});\n\nrealTimeDocument.startSync();\n```\n\n----------------------------------------\n\nTITLE: Configuring History Size and TTL in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet shows an example configuration (`config.json`) for enabling channel history in Centrifugo for top-level channels (those not belonging to a specific namespace). It sets the `history_size` to 10 (maximum number of messages stored per channel) and `history_ttl` to '60s' (duration for which messages are kept). Both options must be configured with non-zero values to enable history.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/channels.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"history_size\": 10,\n    \"history_ttl\": \"60s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Room Search Component in React TypeScript\nDESCRIPTION: A React functional component that implements a chat room search interface with join/leave functionality. The component uses context for CSRF protection and chat state management, handles loading states, and updates the room list dynamically. It includes async operations for joining/leaving rooms and fetching room data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect, useContext } from 'react';\nimport CsrfContext from './CsrfContext';\nimport ChatContext from './ChatContext';\nimport { joinRoom, leaveRoom, searchRooms } from './AppApi';\n\ninterface ChatSearchProps {\n  fetchRoom: (roomId: string) => Promise<void>\n}\n\nconst ChatSearch: React.FC<ChatSearchProps> = ({ fetchRoom }) => {\n  const csrf = useContext(CsrfContext);\n  const { state, dispatch } = useContext(ChatContext);\n  const [rooms, setRooms] = useState<any>([]);\n  const [loading, setLoading] = useState<any>({})\n\n  const setLoadingFlag = (roomId: any, value: boolean) => {\n    setLoading((prev: any) => ({\n      ...prev,\n      [roomId]: value\n    }));\n  };\n\n  const onJoin = async (roomId: any) => {\n    setLoadingFlag(roomId, true)\n    try {\n      await joinRoom(csrf, roomId)\n      const room = await fetchRoom(roomId)\n      dispatch({\n        type: \"ADD_ROOMS\", payload: {\n          rooms: [room]\n        }\n      })\n      setRooms(rooms.map((room: any) => \n        room.id === roomId\n          ? { ...room, is_member: true }\n          : room\n      ))\n    } catch (e) {\n      console.log(e)\n    }\n    setLoadingFlag(roomId, false)\n  };\n\n  const onLeave = async (roomId: any) => {\n    setLoadingFlag(roomId, true)\n    try {\n      await leaveRoom(csrf, roomId)\n      dispatch({\n        type: \"DELETE_ROOM\", payload: {\n          roomId: roomId\n        }\n      })\n      setRooms(rooms.map((room: any) => \n        room.id === roomId\n          ? { ...room, is_member: false }\n          : room\n      ))\n    } catch (e) {\n      console.log(e)\n    }\n    setLoadingFlag(roomId, false)\n  };\n\n  useEffect(() => {\n    const fetchRooms = async () => {\n      const rooms = await searchRooms()\n      setRooms(rooms)\n    };\n    fetchRooms();\n  }, []);\n\n  return (\n    <div id=\"chat-rooms\">\n      {rooms.map((room: any) => {\n        const roomState = state.roomsById[room.id]\n        let isMember: boolean;\n        if (roomState == null) {\n          isMember = false\n        } else if (roomState !== undefined) {\n          isMember = true\n        } else {\n          isMember = room.is_member\n        }\n        return <div className={`chat-room-block ${(isMember) ? 'member' : 'not-member'}`} key={room.id}>\n          <div className='room-search-item'>\n            <span>\n              {room.name}\n            </span>\n            <span className=\"room-actions\">\n              <button disabled={loading[room.id] === true} className={`${(isMember) ? 'member' : 'not-member'} ${(loading[room.id]) ? 'loading' : ''}`} onClick={() => {\n                if (isMember) {\n                  onLeave(room.id)\n                } else {\n                  onJoin(room.id)\n                }\n              }}>\n                {(isMember) ? 'Leave' : 'Join'}\n              </button>\n            </span>\n          </div>\n        </div>\n      })}\n    </div>\n  );\n};\n\nexport default ChatSearch;\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Service with Docker Compose (YAML)\nDESCRIPTION: A `docker-compose.yml` file defining a service named `centrifugo`. It uses a specific version tag (`centrifugo/centrifugo:v3`) of the official image, mounts the local `config.json` into the container, specifies the command to run Centrifugo with that config, maps host port 8000 to the container's port 8000, and sets ulimits for open files to handle many connections. Requires Docker Compose and a local `config.json`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncentrifugo:\n  container_name: centrifugo\n  image: centrifugo/centrifugo:v3\n  volumes:\n    - ./config.json:/centrifugo/config.json\n  command: centrifugo -c config.json\n  ports:\n    - 8000:8000\n  ulimits:\n    nofile:\n      soft: 65535\n      hard: 65535\n```\n\n----------------------------------------\n\nTITLE: Requesting Subscription JWT and Subscribing to Personal Channel (JavaScript)\nDESCRIPTION: Defines an async function to obtain a subscription JWT for a specific channel from the backend and uses it to create a new Centrifuge subscription. The subscription object listens for 'publication' events to process incoming messages. Requires axios, backend endpoint for subscription tokens, and a valid Centrifuge client instance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getSubscriptionToken = async (channel: string) => {\n  const response = await axios.get(`${API_ENDPOINT_BASE}/api/token/subscription/`, {\n    params: { channel: channel }\n  });\n  return response.data.token;\n}\n\nconst getPersonalChannelSubscriptionToken = async () => {\n    return getSubscriptionToken(personalChannel)\n}\n\nconst sub = centrifuge.newSubscription(personalChannel, {\n    getToken: getPersonalChannelSubscriptionToken\n})\nsub.on('publication', (ctx: PublicationContext) => {\n    // Used to process incoming channel publications. We will talk about it soon.\n    onPublication(ctx.data)\n})\n\nsub.subscribe()\n\n```\n\n----------------------------------------\n\nTITLE: Adding ECDSA Public Key in Centrifugo Config - JSON\nDESCRIPTION: This snippet illustrates adding an ECDSA public key (PEM-encoded) for JWT signature verification in Centrifugo's configuration. The configuration field `token_ecdsa_public_key` should be set to your public key as a string. Place this snippet inside your `config.json` file. PEM newlines must be escaped in the string value.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"token_ecdsa_public_key\": \"-----BEGIN PUBLIC KEY-----\\nxyz23adf...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to HTTP Streaming Endpoint with CURL (bash)\nDESCRIPTION: This bash snippet shows how to POST a JSON body containing a JWT token to the Centrifugo unidirectional HTTP streaming endpoint via curl. Requires curl, active Centrifugo instance, and a valid JWT token. Inputs: token as JSON in the POST data. Output: keeps an HTTP connection open and streams JSON messages and pings from the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_http_stream.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/connection/uni_http_stream \\\n    -d '{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIiLCJleHAiOjE2MjUwNzMyODh9.BxmS4R-X6YXMxLfXNhYRzeHvtu_M2NCaXF6HNu7VnDM\"}'\n```\n\n----------------------------------------\n\nTITLE: Adding RSA Public Key in Centrifugo Config - JSON\nDESCRIPTION: This snippet demonstrates how to configure an RSA public key for JWT signature verification in Centrifugo. By adding the `token_rsa_public_key` field, which must be a PEM-encoded string, Centrifugo will use this key for validating JWTs signed with supported RSA algorithms. The JSON object should be placed within the `config.json` file. Inputs require proper PEM formatting, with literal newline escapes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"token_rsa_public_key\": \"-----BEGIN PUBLIC KEY-----\\nMFwwDQYJKoZ...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel History via Centrifugo HTTP API - Bash\nDESCRIPTION: This shell snippet sends a curl POST request to Centrifugo's /api/history endpoint to retrieve the publication history for a channel. It provides the channel name and a limit for the number of messages to return, and uses an API key for authentication. Replace <API_KEY> or other placeholders as needed. The endpoint returns recent publications, offsets, and Epoch metadata, which are useful for client synchronization and recovery operations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat\", \"limit\": 2}' \\\n  http://localhost:8000/api/history\n```\n\n----------------------------------------\n\nTITLE: Batch Publishing via HTTP API in Bash\nDESCRIPTION: Example of using curl to send a batch request for publishing to multiple channels. This demonstrates how to structure a batch command with multiple publish operations in a single API call.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"commands\": [{\"publish\": {\"channel\": \"test1\", \"data\": {}}}, {\"publish\": {\"channel\": \"x:test2\", \"data\": {}}}]}' \\\n  http://localhost:8000/api/batch\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Channel Namespaces in JSON\nDESCRIPTION: This JSON snippet exemplifies a Centrifugo server configuration file (config.json) that sets global options and two custom namespaces, each with specific history settings. Adjust the 'namespaces' array to control retention and features per channel group. Required fields include 'token_hmac_secret_key', 'api_key', and at least 'name' for each namespace. Input is a JSON object; there is no output, but saving this as config.json will configure the running Centrifugo instance accordingly.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channels.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"token_hmac_secret_key\\\": \\\"very-long-secret-key\\\",\\n  \\\"api_key\\\": \\\"secret-api-key\\\",\\n  \\n  \\\"presence\\\": true,\\n  \\\"history_size\\\": 10,\\n  \\\"history_ttl\\\": \\\"30s\\\",\\n  \\n  \\\"namespaces\\\": [\\n    {\\n      \\\"name\\\": \\\"facts\\\",\\n      \\\"history_size\\\": 10,\\n      \\\"history_ttl\\\": \\\"300s\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"gossips\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo for Push Notifications (JSON)\nDESCRIPTION: Updates the Centrifugo `config.json` file to enable necessary features for push notifications. It enables the database (`database.enabled: true`) for storing device tokens/topics, enables the push notification system (`push_notifications.enabled: true`), configures Redis as the queue backend, enables FCM as a provider, and specifies the path to the Firebase credentials file (`fcm.json`). Requires a running Redis instance and the `fcm.json` file obtained from Firebase.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"database\": {\n    \"enabled\": true,\n    \"postgresql\": {\n      \"dsn\": \"postgresql://grandchat:grandchat@db:5432/grandchat\"\n    }\n  },\n  \"push_notifications\": {\n    \"enabled\": true,\n    \"queue\": {\n      \"redis\": {\n        \"address\": \"redis:6379\"\n      }\n    },\n    \"enabled_providers\": [\n      \"fcm\"\n    ],\n    \"fcm\": {\n      \"credentials_file\": \"fcm.json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring token_user_id_claim in Centrifugo using JSON\nDESCRIPTION: This JSON snippet demonstrates how to set the token_user_id_claim option in Centrifugo's config file, allowing you to specify a custom JWT claim (here, 'user_id') to be used as the user ID instead of the default 'sub'. To use, add or modify the setting in your config.json; the value must match the regexp ^[a-zA-Z_]+$. No additional dependencies beyond Centrifugo are needed. Input is a JSON configuration object; output is Centrifugo using the chosen claim for user identification.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"token_user_id_claim\": \"user_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo for Personal Channel and Single Connection Support (JSON)\nDESCRIPTION: This snippet presents an example Centrifugo server configuration enabling automatic user subscription to personal channels, single connection per user enforcement, and namespace presence tracking. The JSON defines options like 'user_subscribe_to_personal', 'user_personal_single_connection', and specifies a 'personal' namespace with presence enabled. This configuration requires Centrifugo v4+ and appropriate namespace setup; inputs are user connection parameters, and effect is controlling connection and channel behavior for personal notifications.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_subs.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_subscribe_to_personal\": true,\n  \"user_personal_single_connection\": true,\n  \"user_personal_channel_namespace\": \"personal\",\n  \"namespaces\": [\n    {\n      \"name\": \"personal\",\n      \"presence\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Payload for Centrifugo Publish (JSON)\nDESCRIPTION: This JSON object represents the data payload to be published to a Centrifugo channel. It contains a simple counter value (`\"value\": 1`) and is intended to be pasted into the 'data' input field within the Centrifugo admin web panel's 'Actions' section when publishing to the specified channel ('channel').\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/quickstart.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"value\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SSE Endpoint in Centrifugo Config - JSON\nDESCRIPTION: This snippet shows how to enable the unidirectional SSE (EventSource) endpoint in the Centrifugo server configuration file. Setting the 'uni_sse' property to true activates this endpoint. This change requires editing the 'config.json' file used by Centrifugo and restarting the service for changes to take effect. Prerequisites include access to the Centrifugo configuration file ('config.json'). Additional configuration such as adjusting request body size is possible for POST requests. Only relevant configuration lines are shown, with ellipsis representing additional configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_sse.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    ...\\n    \"uni_sse\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Joined Events in JavaScript Chat Application\nDESCRIPTION: Asynchronous JavaScript function `processUserJoined` handles a 'user joined' event. It retrieves the room ID and version from the event body. If the room doesn't exist in `chatState`, it fetches the room details using `fetchRoom` and dispatches 'ADD_ROOMS'. Otherwise, it dispatches 'SET_ROOM_MEMBER_COUNT' to update the room's member count based on the event data. Depends on `chatState`, `fetchRoom`, and `dispatch`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst processUserJoined = async (body: any) => {\n  const roomId = body.room.id\n  const roomVersion = body.room.version\n  let room = chatState.roomsById[roomId]\n  if (!room) {\n    room = await fetchRoom(roomId)\n    if (room === null) {\n      return\n    }\n    dispatch({\n      type: \"ADD_ROOMS\", payload: {\n        rooms: [room]\n      }\n    })\n  } else {\n    dispatch({\n      type: \"SET_ROOM_MEMBER_COUNT\", payload: {\n        roomId: roomId,\n        version: roomVersion,\n        memberCount: body.room.member_count\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Presence Stats Query Example Response - JSON\nDESCRIPTION: This example JSON shows the format of the response for a presence_stats query to the Centrifugo HTTP API. The object under \"result\" includes both the number of connected clients and the number of unique users. This response informs API consumers about current channel usage at a summary level. The fields are integer counts and will change based on the current server state. No dependencies are required to parse this JSON structure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"num_clients\": 0,\n        \"num_users\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting User Status via Server API using cURL\nDESCRIPTION: This cURL command shows how to delete user status information through the Centrifugo server API. It allows deleting status for multiple users in a single request.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_status.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"delete_user_status\", \"params\": {\"users\": [\"42\"]}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Internal Port in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates setting a dedicated port for internal Centrifugo endpoints (API, Admin, Debug, Health, Prometheus) using the `internal_port` option. This allows separating publicly accessible connection endpoints from internal management endpoints.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"internal_port\": 9000\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Publish Command to Centrifugo via Python Requests Library\nDESCRIPTION: This Python script publishes data to a Centrifugo channel using the requests library. It constructs a publish command in JSON, sets the 'Authorization' HTTP header with the API key, and posts the data to the Centrifugo '/api' endpoint. The response is printed as a JSON object. Replace 'YOUR_API_KEY' and the API URL as needed; ensure 'requests' library is installed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\n\ncommand = {\n    \"method\": \"publish\",\n    \"params\": {\n        \"channel\": \"docs\", \n        \"data\": {\n            \"content\": \"1\"\n        }\n    }\n}\n\napi_key = \"YOUR_API_KEY\"\ndata = json.dumps(command)\nheaders = {'Content-type': 'application/json', 'Authorization': 'apikey ' + api_key}\nresp = requests.post(\"https://centrifuge.example.com/api\", data=data, headers=headers)\nprint(resp.json())\n```\n\n----------------------------------------\n\nTITLE: Sample Message-Payload to Publish via Admin Panel/API (JSON)\nDESCRIPTION: Provides a simple JSON object with a value property, representing the message format sent to all subscribed clients. Used within the admin panel or curl API calls for channel publishing. Any structure can be used as required by the app.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"value\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Centrifugo JWT Connection Token with Callback - JavaScript\nDESCRIPTION: Demonstrates how to provide a callback function for token refresh when the Centrifugo client connection token expires. The example shows a function ('getToken') that asynchronously fetches a new token from an endpoint, handling errors and resolving with the new token string. This is passed as 'getToken' in the client options, ensuring seamless reauthentication as required. The expected input includes a context object used in the token generation request, and the output is the refreshed token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getToken(url, ctx) {\n    return new Promise((resolve, reject) => {\n        fetch(url, {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(ctx)\n        })\n        .then(res => {\n            if (!res.ok) {\n                throw new Error(`Unexpected status code ${res.status}`);\n            }\n            return res.json();\n        })\n        .then(data => {\n            resolve(data.token);\n        })\n        .catch(err => {\n            reject(err);\n        });\n    });\n}\n\nconst client = new Centrifuge(\n    'ws://localhost:8000/connection/websocket',\n    {\n        token: 'JWT-GENERATED-ON-BACKEND-SIDE',\n        getToken: function (ctx) {\n            return getToken('/centrifuge/connection_token', ctx);\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Publishing Message to a Specific Channel via HTTP API using cURL (Bash)\nDESCRIPTION: This example demonstrates publishing a message (`{\"text\": \"hello\"}`) to the specific channel `chat` using `curl` and the Centrifugo HTTP API. It requires sending a POST request to the `/api/publish` endpoint, including the `X-API-Key` header for authentication and the channel/data payload in the request body.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat\", \"data\": {\"text\": \"hello\"}}' \\\n  http://localhost:8000/api/publish\n```\n\n----------------------------------------\n\nTITLE: Generating Simplest Connection JWT - Python\nDESCRIPTION: This Python snippet demonstrates generating the most basic JWT containing a 'sub' claim for Centrifugo authentication. It utilizes the jwt.encode function with 'HS256' and decodes the byte result to string (which may be unnecessary in newer PyJWT versions). No expiration or other claims are provided, illustrating the minimal setup required for server-issued Centrifugo connection tokens. Install the 'pyjwt' library before using this script.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\\n\\ntoken = jwt.encode({\\\"sub\\\": \\\"42\\\"}, \\\"secret\\\").decode()\\n\\nprint(token)\\n\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token for Centrifugo User (Bash)\nDESCRIPTION: Generates a new HMAC SHA-256 JWT for a specific user via the Centrifugo command-line tool. Requires Centrifugo's gentoken subcommand and correctly configured secret keys. The '-u' parameter sets the user ID that will be encoded in the token. Output is a ready-to-use JWT string for client authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo gentoken -u 123722\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo Without Explicit Admin Flag (console)\nDESCRIPTION: This command starts the Centrifugo server using only the configuration file, assuming the admin web interface has been enabled via the config file rather than the command line. This simplifies server startup while maintaining all previously configured options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n./centrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Implementing Room List ViewSet in Django Rest Framework\nDESCRIPTION: This ViewSet handles room listing, annotating rooms with member count and filtering for the authenticated user's memberships.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass RoomListViewSet(ListModelMixin, GenericViewSet):\n    serializer_class = RoomSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        return Room.objects.annotate(\n            member_count=Count('memberships')\n        ).filter(\n            memberships__user_id=self.request.user.pk\n        ).prefetch_related('last_message', 'last_message__user').order_by('-memberships__joined_at')\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Endpoint via JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates how to enable Prometheus metrics reporting in Centrifugo by setting the \"prometheus\" option to true in the configuration file. No additional dependencies are required beyond the Centrifugo binary. Once enabled, the /metrics HTTP endpoint becomes available for scraping by a Prometheus instance. Only the specific \"prometheus\" option is required; other settings (represented by ellipsis) may also be present in the configuration. The config must be placed in the main Centrifugo config file, which is typically loaded at instance startup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/monitoring.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"prometheus\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Config with Docker\nDESCRIPTION: Docker command to generate a Centrifugo configuration file using the official Docker image, mounting the current directory.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/installation.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v$PWD:/centrifugo centrifugo/centrifugo:v6 centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Handling Subscription Events in Centrifuge Swift SDK\nDESCRIPTION: This Swift code defines a subscription delegate implementing CentrifugeSubscriptionDelegate to handle subscribing, subscribed, and unsubscribed events. It instantiates a subscription with the delegate, subscribes, and prints event context. Dependencies are the iOS Centrifuge SDK and a valid client reference. Error handling is included for subscription creation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass SubscriptionDelegate : NSObject, CentrifugeSubscriptionDelegate {\n    func onSubscribing(_ s: CentrifugeSubscription, _ e: CentrifugeSubscribingEvent) {\n        print(\"subscribing\", e.code, e.reason)\n    }\n    func onSubscribed(_ s: CentrifugeSubscription, _ e: CentrifugeSubscribedEvent) {\n        print(\"subscribed\")\n    }\n    func onUnsubscribed(_ s: CentrifugeSubscription, _ e: CentrifugeUnsubscribedEvent) {\n        print(\"unsubscribed\", e.code, e.reason)\n    }\n}\n\ndo {\n    sub = try self.client?.newSubscription(channel: \"example\", delegate: SubscriptionDelegate())\n    sub!.subscribe()\n} catch {\n    print(\"Can not create subscription: \\(error)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding a Time-Limited JWT for Centrifugo (Python)\nDESCRIPTION: This snippet demonstrates how to generate a signed JWT with a user subject and expiration claim using the Python 'jwt' package. The token is valid for 10 minutes, after which Centrifugo will require a refresh. Dependencies include the 'jwt' and 'time' modules, and it expects the HMAC secret ('secret') to be kept secure. Output is a string JWT suitable for use as a connection token. The 'sub' claim represents the user ID and 'exp' sets the expiration time in UNIX seconds.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\\nimport time\\n\\ntoken = jwt.encode({\"sub\": \"42\", \"exp\": int(time.time()) + 10*60}, \"secret\", algorithm=\"HS256\")\\n\\nprint(token)\\n\n```\n\n----------------------------------------\n\nTITLE: Generating Simplest Connection JWT with Subject (NodeJS)\nDESCRIPTION: This Node.js snippet uses the 'jose' library to generate a JWT containing a 'sub' (subject) claim for Centrifugo authentication. It initializes the HS256 algorithm, encodes the secret using TextEncoder, and asynchronously signs the token. No expiration or additional claims are present. Output is logged as a string JWT. Requires the 'jose' package and must run in an environment supporting 'async/await'.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst jose = require('jose');\\n\\n(async function main() {\\n  const secret = new TextEncoder().encode('secret')\\n  const alg = 'HS256'\\n\\n  const token = await new jose.SignJWT({ sub: '42' })\\n    .setProtectedHeader({ alg })\\n    .sign(secret)\\n\\n  console.log(token);\\n})();\\n\n```\n\n----------------------------------------\n\nTITLE: Launching Centrifugo Nodes with Redis Engine - Bash\nDESCRIPTION: Demonstrates how to start multiple Centrifugo instances on different ports while connecting them via Redis as the message broker. Assumes Redis is installed and running on the default port. Each command uses a unique port and references a shared config file, with args to enable the Redis engine backend for real-time event distribution. No additional dependencies are required besides Centrifugo and Redis. Inputs: config file with Centrifugo settings. Outputs: Centrifugo instances accessible on specified ports, all relaying messages through Redis.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json --port=8000 --engine.type=redis\n```\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json --port=8001 --engine.type=redis\n```\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json --port=8002 --engine.type=redis\n```\n\n----------------------------------------\n\nTITLE: Managing User Leave Events in JavaScript for Centrifugo-powered Chat\nDESCRIPTION: This function handles user leave events in a chat application. It updates the room's member count or removes the room from the state if the current user left. It also handles version conflicts and fetches room data if necessary.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst processUserLeft = async (body: any) => {\n  const roomId = body.room.id\n  const roomVersion = body.room.version\n  const leftUserId = body.user.id\n  let room = chatState.roomsById[roomId]\n  if (room) {\n    if (room.version >= roomVersion) {\n      console.error(`Outdated version for room ID ${roomId}.`);\n      return\n    }\n    if (userInfo.id == leftUserId) {\n      dispatch({\n        type: \"DELETE_ROOM\", payload: {\n          roomId: roomId\n        }\n      })\n    } else {\n      dispatch({\n        type: \"SET_ROOM_MEMBER_COUNT\", payload: {\n          roomId: roomId,\n          version: roomVersion,\n          memberCount: body.room.member_count\n        }\n      })\n    }\n  } else if (userInfo.id != leftUserId) {\n    room = await fetchRoom(roomId)\n    dispatch({\n      type: \"ADD_ROOMS\", payload: {\n        rooms: [room]\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Join/Leave Events on Client-Side Subscription (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to listen for real-time 'join' and 'leave' events on a Centrifugo client subscription object. Callbacks are registered using the 'on' method to handle notifications when clients subscribe to or unsubscribe from the channel, logging the event context.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/presence.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('join', function(joinCtx) {\n    console.log('client joined:', joinCtx);\n});\n\nsubscription.on('leave', function(leaveCtx) {\n    console.log('client left:', leaveCtx);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Channel History via Centrifugo HTTP API - Bash\nDESCRIPTION: This Bash command sends a 'history' request for the first two messages in the 'chat' channel to the Centrifugo HTTP API, utilizing the 'http' command line tool. The echoed JSON includes the 'method' field and required parameters. The example includes a successful HTTP response with publications (messages and offsets) for the channel, along with stream epoch and offset information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"method\": \"history\", \"params\": {\"channel\": \"chat\", \"limit\": 2}}' | http \"localhost:8000/api\" Authorization:\"apikey KEY\"\nHTTP/1.1 200 OK\nContent-Length: 129\nContent-Type: application/json\nDate: Wed, 21 Jul 2021 05:30:48 GMT\n\n{\n    \"result\": {\n        \"epoch\": \"qFhv\",\n        \"offset\": 4,\n        \"publications\": [\n            {\n                \"data\": {\n                    \"text\": \"hello\"\n                },\n                \"offset\": 2\n            },\n            {\n                \"data\": {\n                    \"text\": \"hello\"\n                },\n                \"offset\": 3\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Recent Publications from Channel Start with Centrifuge JavaScript SDK\nDESCRIPTION: This JavaScript snippet fetches up to 10 most recent publications from the beginning of the message stream in a channel using the subscription.history() method. It requires the channel to have history enabled, and does not specify a starting position, thus retrieving results from the beginning of the stream. Publications are accessible in resp.publications.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history({limit: 10});\nconsole.log(resp.publications);\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA Public Key for JWT in Centrifugo (JSON)\nDESCRIPTION: This code snippet shows how to add an RSA public key for verifying JWTs using RSA algorithms in Centrifugo's config.json. The rsa_public_key should be a PEM-encoded string and supports RSA256, RSA384, or RSA512 algorithms. Ensure the public key is kept secure and in the correct PEM format for successful token verification.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"client\": {\n    \"token\": {\n      \"rsa_public_key\": \"-----BEGIN PUBLIC KEY-----\\nMFwwDQYJKoZ...\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Read Replicas for Push Notifications in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable the use of PostgreSQL read replicas for push notification read operations in Centrifugo to improve performance. It involves setting `push_notifications.read_from_replica` to true and providing an array of replica DSNs under `database.replica_dsn`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/push_notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\",\n        \"replica_dsn\": [\"postgresql://postgres:pass@127.0.0.1:5433/postgres\"]\n    },\n    \"push_notifications\": {\n        \"read_from_replica\": true,\n        // rest of the options...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo config.json (JSON)\nDESCRIPTION: Sample configuration file containing HMAC secret, admin credentials, API key, and an empty CORS allowlist. This must be present for Centrifugo to start. Sensitive values (passwords, secrets) must be kept secure. Parameters: token_hmac_secret_key (used for JWT), admin_password/admin_secret for admin interface, api_key for API authentication, allowed_origins for CORS.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"46b38493-147e-4e3f-86e0-dc5ec54f5133\",\n  \"admin_password\": \"ad0dff75-3131-4a02-8d64-9279b4f1c57b\",\n  \"admin_secret\": \"583bc4b7-0fa5-4c4a-8566-16d3ce4ad401\",\n  \"api_key\": \"aaaf202f-b5f8-4b34-bf88-f6c03a1ecda6\",\n  \"allowed_origins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Centrifugo Channel Subscription and Events - Swift\nDESCRIPTION: Demonstrates how to subscribe to a Centrifugo channel and handle state transitions in Swift using CentrifugeSubscriptionDelegate methods. The delegate handles 'onSubscribing', 'onSubscribed', and 'onUnsubscribed' events, printing state and error codes as appropriate. Requires initialization of a Centrifugo client and the presence of the Centrifuge Swift SDK. The output includes debug and state information for subscription events.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass SubscriptionDelegate : NSObject, CentrifugeSubscriptionDelegate {\n    func onSubscribing(_ s: CentrifugeSubscription, _ e: CentrifugeSubscribingEvent) {\n        print(\"subscribing\", e.code, e.reason)\n    }\n    func onSubscribed(_ s: CentrifugeSubscription, _ e: CentrifugeSubscribedEvent) {\n        print(\"subscribed\")\n    }\n    func onUnsubscribed(_ s: CentrifugeSubscription, _ e: CentrifugeUnsubscribedEvent) {\n        print(\"unsubscribed\", e.code, e.reason)\n    }\n}\n\ndo {\n    sub = try self.client?.newSubscription(channel: \"example\", delegate: SubscriptionDelegate())\n    sub!.subscribe()\n} catch {\n    print(\"Can not create subscription: \\(error)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Centrifugo Publications on Frontend Subscription (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates how to subscribe to message publications using Centrifugo (typically from a WebSocket) in the frontend, likely within a React context. The subscription object's publication event forwards received data to the application queue handler for further processing; requires an active Centrifugo client instance and an established subscription to the relevant channel. Inputs are publication contexts containing event data, outputs route events into the local app's message queue.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsub.on('publication', (ctx: PublicationContext) => {\n    onPublication(ctx.data)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form in React - javascript\nDESCRIPTION: Renders the ChatLogin component, which manages user authentication by collecting username and password. Utilizes useState for form values and useContext for CSRF token, making an API call to a login endpoint via the imported login method. The onSuccess callback is triggered on successful login, and errors are logged for failed attempts. Dependencies include react, corresponding CSS, CsrfContext, and AppApi.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useContext } from 'react';\nimport logo from './assets/centrifugo.svg'\nimport CsrfContext from './CsrfContext';\nimport { login } from './AppApi';\n\ninterface ChatLoginProps {\n  onSuccess: (userId: string) => void;\n}\n\nconst ChatLogin: React.FC<ChatLoginProps> = ({ onSuccess }) => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const csrf = useContext(CsrfContext);\n\n  const handleLogin = async () => {\n    try {\n      const resp = await login(csrf, username, password)\n      onSuccess(resp.user.id.toString());\n    } catch (err) {\n      console.error('Login failed:', err);\n    }\n  };\n\n  return (\n    <form id=\"chat-login\" onSubmit={(e) => {\n      e.preventDefault()\n      handleLogin()\n    }}>\n      <div id=\"chat-login-logo-container\">\n        <img src={logo} width=\"100px\" height=\"100px\" />\n      </div>\n      <div className=\"input-container\">\n        <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} placeholder=\"Username\" />\n      </div>\n      <div className=\"input-container\">\n        <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} placeholder=\"Password\" />\n      </div>\n      <div className='login-button-container'>\n        <button>Login</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ChatLogin;\n```\n\n----------------------------------------\n\nTITLE: Implementing Add Rooms Reducer Action\nDESCRIPTION: Reducer action that handles adding new rooms to the state while maintaining order and avoiding duplicates.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncase 'ADD_ROOMS': {\n  const newRooms = action.payload.rooms;\n\n  const updatedRoomsById = { ...state.roomsById };\n  newRooms.forEach((room: any) => {\n    if (!updatedRoomsById[room.id]) {\n      updatedRoomsById[room.id] = room;\n    }\n  });\n\n  const mergedRoomIds = [...new Set([...newRooms.map((room: any) => room.id), ...state.rooms])];\n\n  const sortedRoomIds = mergedRoomIds.sort((a, b) => {\n    const roomA = updatedRoomsById[a];\n    const roomB = updatedRoomsById[b];\n    return roomB.bumped_at.localeCompare(roomA.bumped_at);\n  });\n\n  return {\n    ...state,\n    roomsById: updatedRoomsById,\n    rooms: sortedRoomIds\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key in Centrifugo Configuration File - JSON\nDESCRIPTION: This code snippet demonstrates how to set the API key within the Centrifugo configuration file (config.json). The 'api_key' parameter is required for HTTP API authorization and must be provided; replace \\u003cYOUR API KEY\\u003e with your own secure key. This key will be used in the Authorization header or as a query parameter in subsequent API requests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"api_key\": \"\\u003cYOUR API KEY\\u003e\"\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Channel Subscription Claims in Connection JWT (JSON)\nDESCRIPTION: This JSON fragment demonstrates how to provide advanced server-side channel subscription options in the subs claim of a connection JWT. Each channel listed under 'subs' can have a data object to include welcome information or other custom payloads in the subscription context. The subs structure supports additional options for per-channel configuration and is included in the connection JWT payload. Inputs are channel names as keys; output is a JWT claim map associating channels with their configurations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"subs\": {\n    \"channel1\": {\n      \"data\": {\"welcome\": \"welcome to channel1\"}\n    },\n    \"channel2\": {\n      \"data\": {\"welcome\": \"welcome to channel2\"}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating License Input Component for Lemon Squeeze (JSX)\nDESCRIPTION: This JSX snippet renders the `LicenseInput` React component, configured specifically for Lemon Squeeze. The `providerName` prop identifies the provider as 'lemon', and `providerHuman` sets the display name to 'Lemon Squezee'. This component is intended to provide a user interface for inputting the Lemon Squeeze key to exchange it for a Centrifugo PRO license.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/src/pages/license_exchange_lemon.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LicenseInput providerName='lemon' providerHuman='Lemon Squezee' />\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace-Specific Options in Centrifugo JSON Config\nDESCRIPTION: Illustrates how to structure Centrifugo configuration with a namespace ('feed'), enabling per-namespace control over presence, history, publish permissions, and anonymous access. This pattern allows for more granular permission management and enforces channel prefix conventions. Dependencies: Centrifugo server, channels must be prefixed by the namespace name.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/channels.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token_hmac_secret_key\": \"my-secret-key\",\n    \"api_key\": \"secret-api-key\",\n    \"namespaces\": [\n        {\n            \"name\": \"feed\",\n            \"presence\": true,\n            \"history_size\": 10,\n            \"history_ttl\": \"300s\",\n            \"force_recovery\": true,\n            \"allow_subscribe_for_client\": true,\n            \"allow_subscribe_for_anonymous\": true,\n            \"allow_publish_for_subscriber\": true,\n            \"allow_publish_for_anonymous\": true,\n            \"allow_history_for_subscriber\": true,\n            \"allow_history_for_anonymous\": true,\n            \"allow_presence_for_subscriber\": true,\n            \"allow_presence_for_anonymous\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Third Centrifugo Node with Redis Engine (Shell)\nDESCRIPTION: Starts a third Centrifugo instance on port 8002, also connecting to the shared Redis backend (`127.0.0.1:6379`). This completes the example setup of a three-node Centrifugo cluster scaled using the Redis engine.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```\ncentrifugo --config=config.json --port=8002 --engine=redis --redis_address=127.0.0.1:6379\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Current Stream Position from Channel History in Javascript\nDESCRIPTION: This snippet shows how to retrieve the current top position (offset and epoch) of the publication stream within a channel using the `history()` method on a `Subscription` object. This requires channel history to be configured on the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history();\nconsole.log(resp.offset);\nconsole.log(resp.epoch);\n```\n\n----------------------------------------\n\nTITLE: Creating Outbox Table for Centrifugo PostgreSQL Consumer - SQL\nDESCRIPTION: This SQL snippet creates the required PostgreSQL outbox table for use with the Centrifugo PostgreSQL async consumer, following the transactional outbox pattern. The table must include id (primary key), method, JSONB payload, partition, and created_at columns. Inputs: CREATE TABLE statement; Output: centrifugo_outbox table. Prerequisite: PostgreSQL. Constraints: Table and fields must exactly match Centrifugo's expectations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/consumers.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS centrifugo_outbox (\n\tid BIGSERIAL PRIMARY KEY,\n\tmethod text NOT NULL,\n\tpayload JSONB NOT NULL,\n\tpartition INTEGER NOT NULL default 0,\n\tcreated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment\nDESCRIPTION: Function to bootstrap the development environment by creating 100k users and multiple rooms with different member counts (100-100k members).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/scale.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef setup_dev():\n    create_users(100_000)\n    r1 = create_room('Centrifugo')\n    fill_room(r1.pk, 100_000)\n    r2 = create_room('Movies')\n    fill_room(r2.pk, 10_000)\n    r3 = create_room('Programming')\n    fill_room(r3.pk, 1_000)\n    r4 = create_room('Football')\n    fill_room(r4.pk, 100)\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages using httpie to Centrifugo HTTP API - Bash\nDESCRIPTION: This bash example demonstrates how to publish a message to a Centrifugo channel using the httpie CLI tool. It pipes a JSON publish command via echo, includes the 'Authorization' header with the API key, and sends the request to the '/api' endpoint. The snippet also shows the formatted HTTP request, request body, and a sample HTTP response. Replace \\u003cYOUR_API_KEY\\u003e as required.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"method\": \"publish\", \"params\": {\"channel\": \"chat\", \"data\": {\"text\": \"hello\"}}}' | http \"localhost:8000/api\" Authorization:\"apikey \\u003cYOUR_API_KEY\\u003e\" -vvv\nPOST /api HTTP/1.1\nAccept: application/json, */*\nAccept-Encoding: gzip, deflate\nAuthorization: apikey KEY\nConnection: keep-alive\nContent-Length: 80\nContent-Type: application/json\nHost: localhost:8000\nUser-Agent: HTTPie/0.9.8\n\n{\n    \"method\": \"publish\",\n    \"params\": {\n        \"channel\": \"chat\",\n        \"data\": {\n            \"text\": \"hello\"\n        }\n    }\n}\n\nHTTP/1.1 200 OK\nContent-Length: 3\nContent-Type: application/json\nDate: Thu, 17 May 2018 22:01:42 GMT\n\n{\n    \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Room Search ViewSet in DRF\nDESCRIPTION: This Python snippet defines a DRF `ModelViewSet` named `RoomSearchViewSet` for handling room search requests. It uses the `RoomSearchSerializer` and requires authentication (`IsAuthenticated`). The `get_queryset` method constructs a query that retrieves all `Room` objects, annotates each with an `is_member` boolean flag indicating if the current user is a member (using `OuterRef` and `Exists`), and orders the results by room name.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass RoomSearchViewSet(viewsets.ModelViewSet):\n    serializer_class = RoomSearchSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        user = self.request.user\n        user_membership = RoomMember.objects.filter(\n            room=OuterRef('pk'),\n            user=user\n        )\n        return Room.objects.annotate(\n            is_member=Exists(user_membership)\n        ).order_by('name')\n```\n\n----------------------------------------\n\nTITLE: Managing Subscription Events with Event Listener in Centrifuge Java SDK\nDESCRIPTION: In this Java snippet, a custom SubscriptionEventListener is created to handle subscription events (subscribed, subscribing, unsubscribed) for a Centrifugo channel. Exception handling is provided in case of duplicate subscriptions. Requires the Centrifuge Java SDK and an active client instance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nSubscriptionEventListener subListener = new SubscriptionEventListener() {\n    @Override\n    public void onSubscribed(Subscription sub, SubscribedEvent event) {\n        System.out.println(\"subscribed to \" + sub.getChannel());\n    }\n    @Override\n    public void onSubscribing(Subscription sub, SubscribingEvent event) {\n        System.out.printf(\"subscribing \" + sub.getChannel());\n    }\n    @Override\n    public void onUnsubscribed(Subscription sub, UnsubscribedEvent event) {\n        System.out.println(\"unsubscribed \" + sub.getChannel());\n    }\n};\n\nSubscription sub;\ntry {\n    sub = client.newSubscription(\"example\", subListener);\n    sub.subscribe();\n} catch (DuplicateSubscriptionException e) {\n    e.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Configuration Using YAML (YAML)\nDESCRIPTION: This sample shows a YAML-format configuration for Centrifugo, specifying allowed origins, secret keys, API key, and log level. Indentation with spaces is required for valid YAML, and value placeholders should be replaced prior to actual use. The YAML file is intended to be supplied to Centrifugo via the '--config' or '-c' flag. Input is the YAML file, output is server configuration and log behavior as per provided values.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nallowed_origins:\\n  - \"http://localhost:3000\"\\ntoken_hmac_secret_key: \"<YOUR-SECRET-STRING-HERE>\"\\napi_key: \"<YOUR-API-KEY-HERE>\"\\nlog_level: debug\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Configuration for Centrifugo\nDESCRIPTION: Sample YAML configuration file (config.yaml) for Centrifugo, specifying allowed origins as a list, JWT HMAC secret, API key, and log level. Suitable for environments and workflows where YAML is preferred. Requires indentation using spaces (not tabs). Inputs: YAML keys and arrays. Output: YAML file parsed by Centrifugo on startup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nallowed_origins:\n  - \"http://localhost:3000\"\ntoken_hmac_secret_key: \"<YOUR-SECRET-STRING-HERE>\"\napi_key: \"<YOUR-API-KEY-HERE>\"\nlog_level: debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Personal Channel Subscription in Centrifugo (JSON)\nDESCRIPTION: This configuration snippet enables automatic subscription for authenticated users to their personal channels using user ID and namespace information. It sets parameters for auto-subscription, designates a personal namespace, and enables presence tracking. It must be placed in Centrifugo's server configuration, targeting scenarios where non-anonymous users require instant personal channel access. Users should define their own namespace and ensure 'presence' aligns with their use case.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"user_subscribe_to_personal\": true,\n    \"user_personal_channel_namespace\": \"personal\",\n    \"namespaces\": [\n        {\n            \"name\": \"personal\",\n            \"presence\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo RPC Proxy Request Payload Example - JSON\nDESCRIPTION: This JSON object represents the structure of the RPC request payload Centrifugo sends to the specified backend proxy. It includes identifiers (client, user), channel context, the name of the requested method, and any associated data. The backend's HTTP handler is expected to process the method/data and return a properly structured result. Fields like 'method' and 'data' are required for bidirectional RPC-style communication between clients and backend logic.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"method\": \"getCurrentPrice\",\n  \"data\":{\"params\": {\"object_id\": 12}}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Connect Proxy Requests with Tornado in Python\nDESCRIPTION: This Python snippet defines a simple HTTP POST handler using the Tornado framework to process Centrifugo connect proxy requests. It demonstrates returning a JSON response with a 'user' identifier, which should be computed from authentication logic in production setups. The handler expects to listen for requests on '/centrifugo/connect', and the example includes application initialization and starting the Tornado IOLoop. Dependencies: tornado, json. Input: HTTP POST request. Output: JSON response with Centrifugo's required structure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass CentrifugoConnectHandler(tornado.web.RequestHandler):\n\n    def check_xsrf_cookie(self):\n        pass\n\n    def post(self):\n        self.set_header('Content-Type', 'application/json; charset=\"utf-8\"')\n        data = json.dumps({\n            'result': {\n                'user': '56'\n            }\n        })\n        self.write(data)\n\n\ndef main():\n    options.parse_command_line()\n    app = tornado.web.Application([\n      (r'/centrifugo/connect', CentrifugoConnectHandler),\n    ])\n    app.listen(3000)\n    tornado.ioloop.IOLoop.instance().start()\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo Node with Redis Engine - Bash Command\nDESCRIPTION: This bash snippet shows how to start a Centrifugo instance with the Redis engine enabled by supplying configuration and Redis address on the command line. Dependencies include the Centrifugo binary and a live Redis server. Important parameters: '--config' (config file), '--port' (HTTP port), '--engine' (engine type), and '--redis_address' (Redis host/port). Input is a set of CLI flags; the output is a running Centrifugo node connected to Redis. Ensure the port is available and Redis is running at the specified address.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json --port=8000 --engine=redis --redis_address=127.0.0.1:6379\n```\n\n----------------------------------------\n\nTITLE: Invalidating User Tokens Using invalidate_user_tokens API - Bash (curl)\nDESCRIPTION: Shows how to invalidate all tokens for a user issued before a given time using Centrifugo PRO's API. The curl command sends a POST request to /api/invalidate_user_tokens with a JSON body detailing the user, issued_before (Unix time), and expire_at values. Used for scenarios such as password changes. Requires tokens to include a 'iat' field.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/token_revocation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"user\": \"test\", \"issued_before\": 1635845022, \"expire_at\": 1635845122}' \\\n  http://localhost:8000/api/invalidate_user_tokens\n```\n\n----------------------------------------\n\nTITLE: Defining the ChatSearch React Component in TypeScript\nDESCRIPTION: This snippet defines the `ChatSearch` functional component using React and TypeScript. It fetches and displays a list of chat rooms, managing loading states with `useState`. It uses `useContext` to access the CSRF token (`CsrfContext`) and chat state/dispatch function (`ChatContext`). The `onJoin` and `onLeave` functions handle user interactions, making API calls (`joinRoom`, `leaveRoom`) and dispatching actions (`ADD_ROOMS`, `DELETE_ROOM`) to update the global state. An effect hook (`useEffect`) fetches the initial room list via `searchRooms` on component mount.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect, useContext } from 'react';\nimport CsrfContext from './CsrfContext';\nimport ChatContext from './ChatContext';\nimport { joinRoom, leaveRoom, searchRooms } from './AppApi';\n\ninterface ChatSearchProps {\n  fetchRoom: (roomId: string) => Promise<void>\n}\n\nconst ChatSearch: React.FC<ChatSearchProps> = ({ fetchRoom }) => {\n  const csrf = useContext(CsrfContext);\n  const { state, dispatch } = useContext(ChatContext);\n  const [rooms, setRooms] = useState<any>([]);\n  const [loading, setLoading] = useState<any>({})\n\n  const setLoadingFlag = (roomId: any, value: boolean) => {\n    setLoading((prev: any) => ({\n      ...prev,\n      [roomId]: value\n    }));\n  };\n\n  const onJoin = async (roomId: any) => {\n    setLoadingFlag(roomId, true)\n    try {\n      await joinRoom(csrf, roomId)\n      const room = await fetchRoom(roomId)\n      dispatch({\n        type: \"ADD_ROOMS\", payload: {\n          rooms: [room]\n        }\n      })\n      setRooms(rooms.map((room: any) => \n        room.id === roomId\n          ? { ...room, is_member: true }\n          : room\n      ))\n    } catch (e) {\n      console.log(e)\n    }\n    setLoadingFlag(roomId, false)\n  };\n\n  const onLeave = async (roomId: any) => {\n    setLoadingFlag(roomId, true)\n    try {\n      await leaveRoom(csrf, roomId)\n      dispatch({\n        type: \"DELETE_ROOM\", payload: {\n          roomId: roomId\n        }\n      })\n      setRooms(rooms.map((room: any) => \n        room.id === roomId\n          ? { ...room, is_member: false }\n          : room\n      ))\n    } catch (e) {\n      console.log(e)\n    }\n    setLoadingFlag(roomId, false)\n  };\n\n  useEffect(() => {\n    const fetchRooms = async () => {\n      const rooms = await searchRooms()\n      setRooms(rooms)\n    };\n    fetchRooms();\n  }, []);\n\n  return (\n    <div id=\"chat-rooms\">\n      {rooms.map((room: any) => {\n        const roomState = state.roomsById[room.id]\n        let isMember: boolean;\n        if (roomState == null) {\n          isMember = false\n        } else if (roomState !== undefined) {\n          isMember = true\n        } else {\n          isMember = room.is_member\n        }\n        return <div className={`chat-room-block ${(isMember) ? 'member' : 'not-member'}`} key={room.id}>\n          <div className='room-search-item'>\n            <span>\n              {room.name}\n            </span>\n            <span className=\"room-actions\">\n              <button disabled={loading[room.id] === true} className={`${(isMember) ? 'member' : 'not-member'} ${(loading[room.id]) ? 'loading' : ''}`} onClick={() => {\n                if (isMember) {\n                  onLeave(room.id)\n                } else {\n                  onJoin(room.id)\n                }\n              }}>\n                {(isMember) ? 'Leave' : 'Join'}\n              </button>\n            </span>\n          </div>\n        </div>\n      })}\n    </div>\n  );\n};\n\nexport default ChatSearch;\n```\n\n----------------------------------------\n\nTITLE: Initializing Centrifuge-js Client with Fallback Transports in Javascript\nDESCRIPTION: This Javascript code demonstrates configuring the Centrifuge client (using `centrifuge-js`) with a prioritized list of transports: WebSocket, HTTP-streaming, and Server-Sent Events (SSE). This setup enables automatic fallback to HTTP-based emulation if WebSocket connection fails, ensuring connectivity even through restrictive proxies. It requires the `centrifuge-js` library and a Centrifugo v4 server configured with the specified endpoints for each transport.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-19-centrifugo-v4-released.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst transports = [\n    {\n        transport: 'websocket',\n        endpoint: 'wss://your_centrifugo.com/connection/websocket'\n    },\n    {\n        transport: 'http_stream',\n        endpoint: 'https://your_centrifugo.com/connection/http_stream'\n    },\n    {\n        transport: 'sse',\n        endpoint: 'https://your_centrifugo.com/connection/sse'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo JavaScript Client\nDESCRIPTION: NPM command to install the Centrifugo JavaScript client SDK.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install centrifuge\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscribe and Publish Proxies Per Namespace\nDESCRIPTION: This configuration demonstrates how to set up different subscribe and publish proxies for different channel namespaces. Each namespace can use a different proxy endpoint for handling subscribe and publish operations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [...],\n  \"namespaces\": [\n    {\n      \"name\": \"ns1\",\n      \"subscribe_proxy_name\": \"subscribe1\",\n      \"publish\": true,\n      \"publish_proxy_name\": \"publish1\"\n    },\n    {\n      \"name\": \"ns2\",\n      \"subscribe_proxy_name\": \"subscribe2\",\n      \"publish\": true,\n      \"publish_proxy_name\": \"publish2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Subscribe Proxy Endpoint in Centrifugo Configuration - JSON\nDESCRIPTION: Defines the \\\\\"proxy_subscribe_endpoint\\\\\" and its associated timeout in the Centrifugo configuration file. This enables subscribe proxying, sending subscription requests to a backend URL with a specific timeout. No other options are shown, and this configuration is partial (note the ellipsis). Required for backend-controlled access to channel subscriptions. Typically used with client transport layers like websocket. Configuration must be in Centrifugo's main JSON file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_endpoint\": \"http://localhost:3000/centrifugo/subscribe\",\n  \"proxy_subscribe_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP API Transport Error Mode Example (Bash/HTTP)\nDESCRIPTION: Shows how enabling transport error mode (via a custom header) causes Centrifugo to reply with native HTTP status codes instead of embedding errors in the response body. Includes both the request command and complete HTTP response. Key constraint: requires Centrifugo v5.1.0 or newer and header 'X-Centrifugo-Error-Mode: transport'.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n‚ùØ echo '{}' | http POST \"http://localhost:8000/api/publish\" \"X-Centrifugo-Error-Mode: transport\"\nHTTP/1.1 400 Bad Request\nContent-Length: 36\nContent-Type: application/json\nDate: Sat, 19 Aug 2023 07:23:59 GMT\n\n{\n    \"code\": 107,\n    \"message\": \"bad request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Custom RPC Methods with Centrifuge JavaScript SDK\nDESCRIPTION: This JavaScript snippet illustrates sending a custom RPC (Remote Procedure Call) to the server using the centrifuge.rpc method. The SDK must be properly configured and the server must support RPC, usually through an RPC proxy setup. The method accepts the procedure name and a data object (payload), and returns a promise containing the RPC response. 'rpcRequest' is the payload sent to the specified 'example_method'. The call should be awaited or handled as a promise.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst rpcRequest = {'key': 'value'};\nconst data = await centrifuge.rpc('example_method', rpcRequest);\n```\n\n----------------------------------------\n\nTITLE: Enabling Admin Web UI in Centrifugo Configuration - JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable the built-in admin web interface in Centrifugo by setting the 'enabled' field to true and specifying 'password' and 'secret' for authentication. It must be placed inside the Centrifugo configuration file, typically 'config.json'. The 'password' is required for login, and 'secret' is used for generating authentication tokens. After updating the config, the Centrifugo server must be restarted for changes to take effect.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/admin_web.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"admin\\\": {\\n    \\\"enabled\\\": true,\\n    \\\"password\\\": \\\"<PASSWORD>\\\",\\n    \\\"secret\\\": \\\"<SECRET>\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Real-Time Publications via Centrifugo Subscription (JavaScript)\nDESCRIPTION: Shows how to subscribe to Centrifugo channel publications in the frontend via the Subscription interface, using a callback to buffer new events. The onPublication function enqueues received real-time events for later processing. Assumes Centrifugo JS client is set up and sub is an active subscription. Expected input is event PublicationContext with a data property; outputs are updates to the message queue state.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nsub.on('publication', (ctx: PublicationContext) => {\n    onPublication(ctx.data)\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst onPublication = (publication: any) => {\n  setMessageQueue(prevQueue => [...prevQueue, publication]);\n};\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Configuration (JSON)\nDESCRIPTION: The minimal configuration file for Centrifugo, including security keys and admin settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/quickstart.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"bbe7d157-a253-4094-9759-06a8236543f9\",\n  \"admin_password\": \"d0683813-0916-4c49-979f-0e08a686b727\",\n  \"admin_secret\": \"4e9eafcf-0120-4ddd-b668-8dc40072c78e\",\n  \"api_key\": \"d7627bb6-2292-4911-82e1-615c0ed3eebb\",\n  \"allowed_origins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Clear Chat State Reducer Action\nDESCRIPTION: Reducer action that resets the chat state to its initial values.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reducer(state: any, action: any) {\n  switch (action.type) {\n    case 'CLEAR_CHAT_STATE': {\n      return initialChatState;\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling Real-time Publications in JavaScript with Centrifugal\nDESCRIPTION: Event handler for processing real-time publications from Centrifugal. It buffers messages until the initial state is loaded, then processes incoming messages by comparing versions and applying updates to maintain document consistency.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-06-03-real-time-document-state-sync.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.#subscription.on('publication', (ctx) => {\n    if (!this.#isLoaded) {\n        // Buffer messages until initial state is loaded.\n        this.#messageBuffer.push(ctx);\n        return;\n    }\n    // Process new messages immediately if initial state is already loaded.\n    const newVersion = this.#compareVersion(ctx.data, this.#version);\n    if (newVersion === null) {\n        // Skip real-time publication, non actual version.\n        return;\n    }\n    this.#document = this.#applyUpdate(this.#document, ctx.data);\n    this.#version = newVersion;\n    this.#onChange(this.#document);\n}\n```\n\n----------------------------------------\n\nTITLE: Using HAProxy Endpoint in Centrifugo Redis Engine Config - JSON\nDESCRIPTION: Shows how to configure Centrifugo to use HAProxy as a Redis endpoint. The address is set to the local HAProxy port. No extra parameters. Dependency: a running HAProxy as configured in the previous snippet. Input: Centrifugo config.json. Output: Centrifugo routes Redis traffic via HAProxy, which balances/fails over actual Redis masters. Limitation: Not HA by itself without Sentinel/HAProxy pairing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"localhost:16379\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Centrifugo Config File via CLI (Bash)\nDESCRIPTION: Runs the Centrifugo CLI command to generate a starter configuration file named config.json. Requires Centrifugo to be installed and available in the shell. No inputs or parameters except the executable itself. Output: a minimally populated config.json file created in the current directory. This provides a template for further editing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Centrifugo Channel with Event Listener - Java\nDESCRIPTION: Provides a Java example of subscribing to a Centrifugo channel, using a SubscriptionEventListener to handle 'onSubscribed', 'onSubscribing', and 'onUnsubscribed' events. The listener prints relevant state changes and handles duplicate subscription exceptions. Requires the Centrifugo Java SDK and an initialized client instance. Inputs include the channel name, and outputs are subscription event logs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nSubscriptionEventListener subListener = new SubscriptionEventListener() {\n    @Override\n    public void onSubscribed(Subscription sub, SubscribedEvent event) {\n        System.out.println(\"subscribed to \" + sub.getChannel());\n    }\n    @Override\n    public void onSubscribing(Subscription sub, SubscribingEvent event) {\n        System.out.printf(\"subscribing \" + sub.getChannel());\n    }\n    @Override\n    public void onUnsubscribed(Subscription sub, UnsubscribedEvent event) {\n        System.out.println(\"unsubscribed \" + sub.getChannel());\n    }\n};\n\nSubscription sub;\ntry {\n    sub = client.newSubscription(\"example\", subListener);\n    sub.subscribe();\n} catch (DuplicateSubscriptionException e) {\n    e.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Configuration with Genconfig - Command Line - Bash\nDESCRIPTION: This snippet shows the use of the Centrifugo CLI's 'genconfig' command to generate an initial configuration file ('config.json') with essential fields like token secret and API key. It requires the Centrifugo binary to be present and executable in the current environment. The generated configuration serves as a foundation for further secure customization before deploying Centrifugo. The primary input is executing the command, and the output is a new or updated 'config.json' file in the working directory. Ensure Centrifugo is installed before running this command.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/integration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig\n\n```\n\n----------------------------------------\n\nTITLE: Generating YAML or TOML Configuration File - Bash\nDESCRIPTION: This command demonstrates generating a Centrifugo configuration file in TOML format using the -c option. It highlights Centrifugo's support for multiple config file formats. Requires the Centrifugo binary and appropriate permissions for file creation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig -c config.toml\n```\n\n----------------------------------------\n\nTITLE: Channel Subscription Implementation\nDESCRIPTION: Python backend code for handling channel subscription authentication and token generation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_subscription_token(request):\n    if not request.user.is_authenticated:\n        return JsonResponse({'detail': 'unauthorized'}, status=401)\n\n    channel = request.GET.get('channel')\n    if channel != f'personal:{request.user.pk}':\n        return JsonResponse({'detail': 'permission denied'}, status=403)\n\n    token_claims = {\n        'sub': str(request.user.pk),\n        'exp': int(time.time()) + 300,\n        'channel': channel\n    }\n    token = jwt.encode(token_claims, settings.CENTRIFUGO_TOKEN_SECRET)\n\n    return JsonResponse({'token': token})\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo GRPC API in Python\nDESCRIPTION: Python code example demonstrating how to connect to Centrifugo's GRPC API, create a stub, and make an Info request. This snippet includes error handling for both GRPC-level and Centrifugo server-level errors.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport grpc\nimport api_pb2_grpc as api_grpc\nimport api_pb2 as api_pb\n\nchannel = grpc.insecure_channel('localhost:10000')\nstub = api_grpc.CentrifugoApiStub(channel)\n\ntry:\n    resp = stub.Info(api_pb.InfoRequest())\nexcept grpc.RpcError as err:\n    # GRPC level error.\n    print(err.code(), err.details())\nelse:\n    if resp.error.code:\n        # Centrifugo server level error.\n        print(resp.error.code, resp.error.message)\n    else:\n        print(resp.result)\n```\n\n----------------------------------------\n\nTITLE: Querying Centrifugo Connections API for User Sessions using Bash\nDESCRIPTION: This `curl` command calls the Centrifugo server's `/api/connections` endpoint via HTTP POST to retrieve active connections. It includes the necessary `Content-Type` header, the `X-API-Key` for authentication (replace `<API_KEY>` with the actual key), and a JSON payload specifying the user ID (`user: \"42\"`) to filter connections for.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/connections.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"user\": \"42\"}' \\\n  http://localhost:8000/api/connections\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming Push Messages (JavaScript)\nDESCRIPTION: Client-side JavaScript pseudocode illustrating a basic approach to processing incoming push messages over a unidirectional connection. It parses the JSON message, checks for specific fields (`connect`, `pub`) to determine the message type, handles ping messages (empty objects), and ignores others.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst onMessage = (message) => {\n    const push = JSON.parse(message);\n    if (push.connect) {\n        // handle connect push.\n    } else if (push.pub) {\n        // handle publication push.\n    } else if (Object.keys(push).length === 0) {\n        // handle ping push.\n    } else {\n        // Ignore other pushes.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Per-User Rate Limits in Centrifugo PRO (JSON)\nDESCRIPTION: This configuration enables distributed rate limiting per user ID using Redis as the backend storage in Centrifugo PRO. Limits are applied globally across a Centrifugo cluster for authenticated users. It requires `enabled` set to true and a `redis_address`. Configuration includes `default` and specific command limits (`publish`, `rpc`) with `buckets` defined by `interval` and `rate`. This adds some latency due to Redis communication but provides cluster-wide consistency.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/rate_limiting.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"redis_user_command_rate_limit\": {\n        \"enabled\": true,\n        \"redis_address\": \"localhost:6379\",\n\n        \"default\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 60\n                },\n            ]\n        },\n        \"publish\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 1\n                }\n            ]\n        },\n        \"rpc\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 10\n                }\n            ],\n            \"method_override\": [\n                {\n                    \"method\": \"update_user_status\",\n                    \"buckets\": [\n                        {\n                            \"interval\": \"20s\",\n                            \"rate\": 1\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Centrifugo Channel via curl (Bash)\nDESCRIPTION: Demonstrates how to make an authenticated HTTP API request to Centrifugo to publish a message to a channel. Requires 'api_key' from config for Authorization header, valid Centrifugo server on localhost:8000, and properly structured JSON payload. Curl sends method 'publish' with 'params' for channel and data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey aaaf202f-b5f8-4b34-bf88-f6c03a1ecda6\" \\\n  --request POST \\\n  --data '{\"method\": \"publish\", \"params\": {\"channel\": \"channel\", \"data\": {\"value\": 2}}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Restricting Allowed Channel Names Using Regex - Centrifugo Configuration - JSON\nDESCRIPTION: This JSON snippet demonstrates how to use the \"channel_regex\" option to restrict channel names within a Centrifugo namespace to a specific regular expression pattern. In the example, only channels within the \"chat\" namespace whose names consist solely of digits are permitted, by setting \"channel_regex\" to \"^[\\d+]$\". This should be used when stricter channel naming conventions are required for security or organizational reasons. Prerequisites include a running Centrifugo server where namespaces are defined via configuration in JSON. Parameters include: \"name\" (namespace name), \"allow_subscribe_for_client\" (to allow client subscriptions), and \"channel_regex\" (the regular expression used for filtering). The expected input is a JSON namespace configuration; the output is server-side enforcement of channel name patterns for client subscriptions. Limitations: This regular expression does not affect server-side subscriptions and applies after removing the namespace prefix.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channels.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"chat\",\n        \"allow_subscribe_for_client\": true,\n        \"channel_regex\": \"^[\\\\d+]$\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Channel State Event Payload (JSON)\nDESCRIPTION: This JSON snippet shows an example payload sent to the configured `proxy_channel_state_endpoint` when a channel state event occurs. The payload contains an `events` array, which can include multiple events for batch processing. Each event object specifies the `channel` name, the event `type` (`occupied` or `vacated`), and the event timestamp in milliseconds (`time_ms`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/channel_events.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n    \"events\": [\n        {\"channel\": \"chat:index\", \"type\": \"occupied\", \"time_ms\": 1697206286533},\n    ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Server-Side Channel with Centrifuge Client (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a Centrifuge client instance using a connection JWT and subscribe to server-side channels without managing client-side subscription objects. The client listens for publication events and processes them based on the channel and data contained within the publication context. Dependencies include the Centrifuge JavaScript SDK, and the main parameters used are the server WebSocket URL and the connection JWT token. Expected input is server-sent publications, with console logging for received messages as output.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {\n    token: 'CONNECTION-JWT'\n});\nclient.on('publication', function(ctx) {\n    console.log('publication received from server-side channel', ctx.channel, ctx.data);\n});\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Initializing Centrifuge Client with JWT in JavaScript\nDESCRIPTION: Demonstrates how to initialize a Centrifuge client with a JWT token for connection authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Create View (POST) in DRF\nDESCRIPTION: This Python snippet shows the `create` method within the `MessageListCreateAPIView` for handling POST requests to create a new message. It operates within an atomic database transaction (`@transaction.atomic`) and uses `select_for_update` to lock the `Room` row. It increments the room's version, validates the incoming message data using `MessageSerializer`, saves the new message associating it with the room and user, updates the room's `last_message` and `bumped_at` fields, saves the room, and returns the serialized new message data with an HTTP 201 Created status.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass MessageListCreateAPIView(ListCreateAPIView):\n    serializer_class = MessageSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        # Shown above.\n\n    @transaction.atomic\n    def create(self, request, *args, **kwargs):\n        room_id = self.kwargs['room_id']\n        room = Room.objects.select_for_update().get(id=room_id)\n        room.increment_version()\n        channels = self.get_room_member_channels(room_id)\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        obj = serializer.save(room=room, user=request.user)\n        room.last_message = obj\n        room.bumped_at = timezone.now()\n        room.save()\n        headers = self.get_success_headers(serializer.data)\n        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages to Multiple Channels with curl - Bash\nDESCRIPTION: Demonstrates the use of the Centrifugo broadcast API method via curl. The snippet sends a JSON payload with 'channels' (an array of channel names) and 'data' (the message to broadcast) to /api/broadcast. Uses the X-API-Key for authentication. Dependencies: curl. Replace API key and channel names as needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channels\": [\"user:1\", \"user:2\"], \"data\": {\"text\": \"hello\"}}' \\\n  http://localhost:8000/api/broadcast\n```\n\n----------------------------------------\n\nTITLE: Implementing User Login with Django View - Python\nDESCRIPTION: Defines a POST API view to authenticate users using Django's built-in authentication functions. Parses username and password from the JSON body, checks credentials, logs the user in, and returns a user summary in JSON. Returns error messages for invalid input or authentication failure. Requires Django Auth and Session middleware.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\\n\\nfrom django.contrib.auth import authenticate, login\\nfrom django.http import JsonResponse\\nfrom django.views.decorators.http import require_POST\\n\\n\\n@require_POST\\ndef login_view(request):\\n    credentials = json.loads(request.body)\\n    username = credentials.get('username')\\n    password = credentials.get('password')\\n\\n    if not username or not password:\\n        return JsonResponse({'detail': 'provide username and password'}, status=400)\\n\\n    user = authenticate(username=username, password=password)\\n    if not user:\\n        return JsonResponse({'detail': 'invalid credentials'}, status=400)\\n\\n    login(request, user)\\n    return JsonResponse({'user': {'id': user.pk, 'username': user.username}})\n```\n\n----------------------------------------\n\nTITLE: Handling Centrifugo Recovery Failure on Client-Side in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to handle the 'subscribed' event using the Centrifugo client library. It checks the context object ('ctx') passed to the event handler. If the client was attempting recovery ('ctx.wasRecovering' is true) but failed ('ctx.recovered' is false), it indicates that the client's state might be lost (e.g., offline too long or too many messages missed). The example calls a function 'setUnrecoverableError' to notify the user, suggesting a page reload to fetch the current state.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/recovery.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsub.on('subscribed', (ctx: SubscribedContext) => {\n  if (ctx.wasRecovering && !ctx.recovered) {\n    setUnrecoverableError('State LOST - please reload the page')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Centrifugo Channel and Handling State Events - JavaScript\nDESCRIPTION: Shows how to create a subscription to a Centrifugo channel using the JavaScript SDK, and attach event listeners for subscription state changes ('subscribing', 'subscribed', and 'unsubscribed'). Each event is logged for monitoring transitions. Requires an initialized Centrifuge client and a channel identifier. The output is event messages in the console and the active subscription.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sub = client.newSubscription(channel);\n\nsub.on('subscribing', function(ctx) {\n    console.log('subscribing');\n});\n\nsub.on('subscribed', function(ctx) {\n    console.log('subscribed');\n});\n\nsub.on('unsubscribed', function(ctx) {\n    console.log('unsubscribed');\n});\n\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Subscriptions in JavaScript\nDESCRIPTION: Demonstrates how to create a subscription, handle subscription state changes, and manage subscription lifecycle in JavaScript.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sub = client.newSubscription(channel);\n\nsub.on('subscribing', function(ctx) {\n    console.log('subscribing');\n});\n\nsub.on('subscribed', function(ctx) {\n    console.log('subscribed');\n});\n\nsub.on('unsubscribed', function(ctx) {\n    console.log('unsubscribed');\n});\n\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Publishing to Centrifugo using Python Requests - Python\nDESCRIPTION: Shows how to publish a message to Centrifugo's HTTP API using Python's requests library. The script prepares JSON data for the request, sets the required Content-Type and X-API-Key headers, and sends a POST request to the /api/publish endpoint. Make sure requests is installed (pip install requests). Key parameters are api_key, the endpoint URL, and the data to be published. Prints the server's JSON response.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\n\napi_key = \"YOUR_API_KEY\"\ndata = json.dumps({\n    \"channel\": \"docs\", \n    \"data\": {\n        \"content\": \"1\"\n    }\n})\nheaders = {'Content-type': 'application/json', 'X-API-Key': api_key}\nresp = requests.post(\"https://centrifuge.example.com/api/publish\", data=data, headers=headers)\nprint(resp.json())\n```\n\n----------------------------------------\n\nTITLE: Connecting and Subscribing to a Channel in Go\nDESCRIPTION: Provides a complete Go example using the `centrifuge-go` library. It demonstrates creating a JSON client, creating a new subscription, setting up a publication handler using `OnPublication`, handling potential errors during subscription creation and subscription, subscribing, and connecting the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nclient := centrifuge.NewJsonClient(\n    \"ws://localhost:8000/connection/websocket\",\n    centrifuge.Config{},\n)\n// defer client.Close()\n\nsub, err := client.NewSubscription(\"example\")\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nsub.OnPublication(func(e centrifuge.PublicationEvent) {\n\tlog.Printf(\"Publication from channel\")\n})\n\nerr = sub.Subscribe()\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nif err = client.Connect(); err != nil {\n    log.Fatalln(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with a Configuration File (Shell)\nDESCRIPTION: This command demonstrates how to start the Centrifugo server using a specific configuration file (`config.json`). The `--config` flag specifies the path to the JSON configuration file containing settings like TLS options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/tls.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```\n./centrifugo --config=config.json\n```\n```\n\n----------------------------------------\n\nTITLE: Presence Query Example Response - JSON\nDESCRIPTION: This JSON snippet provides an example of the response returned from the Centrifugo HTTP API after a successful presence query. The response contains a map of client IDs to user information, including both \"client\" and \"user\" identifiers. The structure of the object helps API consumers interpret which clients are currently subscribed to a channel. No dependencies are required to parse the JSON, but consumers should accommodate the possibility of different numbers or combinations of clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"presence\": {\n            \"c54313b2-0442-499a-a70c-051f8588020f\": {\n                \"client\": \"c54313b2-0442-499a-a70c-051f8588020f\",\n                \"user\": \"42\"\n            },\n            \"adad13b1-0442-499a-a70c-051f858802da\": {\n                \"client\": \"adad13b1-0442-499a-a70c-051f858802da\",\n                \"user\": \"42\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Go GRPC Client Implementation\nDESCRIPTION: Demonstrates implementing a GRPC client in Go with API key authentication, showing how to publish messages to a Centrifugo channel with proper error handling.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n\n    \"centrifugo_example/apiproto\"\n    \n    \"google.golang.org/grpc\"\n)\n\ntype keyAuth struct {\n    key string\n}\n\nfunc (t keyAuth) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {\n    return map[string]string{\n        \"authorization\": \"apikey \" + t.key,\n    }, nil\n}\n\nfunc (t keyAuth) RequireTransportSecurity() bool {\n    return false\n}\n\nfunc main() {\n    conn, err := grpc.Dial(\"localhost:10000\", grpc.WithInsecure(), grpc.WithPerRPCCredentials(keyAuth{\"xxx\"}))\n    if err != nil {\n        log.Fatalln(err)\n    }\n    defer conn.Close()\n    client := apiproto.NewCentrifugoClient(conn)\n    for {\n        resp, err := client.Publish(context.Background(), &PublishRequest{\n            Channel: \"chat:index\",\n            Data:    []byte(`{\"input\": \"hello from GRPC\"}`),\n        })\n        if err != nil {\n            log.Printf(\"Transport level error: %v\", err)\n        } else {\n            if resp.GetError() != nil {\n                respError := resp.GetError()\n                log.Printf(\"Error %d (%s)\", respError.Code, respError.Message)\n            } else {\n                log.Println(\"Successfully published\")\n            }\n        }\n        time.Sleep(time.Second)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Initial Document State in Real-time Document Synchronization\nDESCRIPTION: Asynchronous method to load the initial document state from the backend and apply any buffered real-time messages. Includes error handling with retry capability using exponential backoff.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-06-03-real-time-document-state-sync.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync #loadDocumentApplyBuffered() {\n    try {\n        const result = await this.#load();\n        this.#document = result.document;\n        this.#version = result.version;\n        this.#isLoaded = true;\n        this.#processBufferedMessages();\n    } catch (error) {\n        // Retry the loading, in the final snippet it's implemented\n        // and uses exponential backoff for the retry process.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Granular Proxy Mode for Subscription Streams\nDESCRIPTION: JSON configuration demonstrating how to set up different stream proxies for different namespaces using granular proxy mode. This allows for more flexible routing of subscription streams.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy_streams.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [\n    {\n\t  \"name\": \"stream_1\",\n\t  \"endpoint\": \"grpc://localhost:3000\",\n\t  \"timeout\": \"500ms\",\n    },\n    {\n\t  \"name\": \"stream_2\",\n\t  \"endpoint\": \"grpc://localhost:3001\",\n\t  \"timeout\": \"500ms\",\n    }\n  ],\n  \"namespaces\": [\n    {\n      \"name\": \"ns1\",\n      \"subscribe_stream_proxy_name\": \"stream_1\"\n    },\n    {\n      \"name\": \"ns2\",\n      \"subscribe_stream_proxy_name\": \"stream_2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Multi-Cluster Sharding via Environment Variables (Bash)\nDESCRIPTION: This command starts Centrifugo configured to shard data across multiple Redis Clusters, using environment variables. The `CENTRIFUGO_REDIS_CLUSTER_ADDRESS` variable contains space-separated groups of comma-separated seed node addresses, each group representing a separate Redis Cluster. `CENTRIFUGO_ENGINE` is set to `redis`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_REDIS_CLUSTER_ADDRESS=\"localhost:30001,localhost:30002 localhost:30101,localhost:30102\" CENTRIFUGO_ENGINE=redis ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Disabling Anonymous Usage Stats in JSON Configuration\nDESCRIPTION: This JSON configuration snippet shows how to disable the periodic sending of anonymous usage statistics to the Centrifugo developers. Setting `usage_stats_disable` to `true` prevents this data collection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"usage_stats_disable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Namespaces in Centrifugo PRO Config - JSON\nDESCRIPTION: This snippet illustrates how to define channel namespaces in a Centrifugo PRO JSON configuration, allowing independent management for groups of channels. Each namespace, such as \"feed\", can specify feature enablement (like presence, history, and recovery) and finely control permissions for both authenticated and anonymous users. Prerequisites include Centrifugo PRO and correct nesting of namespaces within the config file. The main input is a JSON config file; output is applied server behavior based on namespaces (channels must be named with the namespace prefix, e.g., feed:). Key constraints include ensuring proper structure and adherence to expected parameters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channels.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"token\": {\n      \"hmac_secret_key\": \"my-secret-key\"\n    }\n  },\n  \"http_api\": {\n    \"key\": \"secret-api-key\"\n  },\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"feed\",\n        \"presence\": true,\n        \"history_size\": 10,\n        \"history_ttl\": \"300s\",\n        \"force_recovery\": true,\n        \"allow_subscribe_for_client\": true,\n        \"allow_subscribe_for_anonymous\": true,\n        \"allow_publish_for_subscriber\": true,\n        \"allow_publish_for_anonymous\": true,\n        \"allow_history_for_subscriber\": true,\n        \"allow_history_for_anonymous\": true,\n        \"allow_presence_for_subscriber\": true,\n        \"allow_presence_for_anonymous\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Centrifugo\nDESCRIPTION: Command to start Centrifugo using the Docker Compose configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/installation.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Implementing Connect Handler in Tornado Python Framework\nDESCRIPTION: A simple example of a Centrifugo connect handler implemented in the Tornado Python framework. This handler authenticates users by returning a static user ID '56' in the response. In a real application, this would involve proper user authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CentrifugoConnectHandler(tornado.web.RequestHandler):\n\n    def check_xsrf_cookie(self):\n        pass\n\n    def post(self):\n        self.set_header('Content-Type', 'application/json; charset=\"utf-8\"')\n        data = json.dumps({\n            'result': {\n                'user': '56'\n            }\n        })\n        self.write(data)\n\n\ndef main():\n    options.parse_command_line()\n    app = tornado.web.Application([\n      (r'/centrifugo/connect', CentrifugoConnectHandler),\n    ])\n    app.listen(3000)\n    tornado.ioloop.IOLoop.instance().start()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Customizing User Status Key Expiry Interval in Redis - JSON\nDESCRIPTION: Shows how to customize the expiration duration of user status keys stored in Redis by setting the 'expire_interval' parameter under 'redis_active_status'. This controls how long (in duration format, e.g., '24h') the user status information persists, automatically extending expiration on each user activity update. Shorter durations reduce Redis storage needs but may remove status records sooner.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_status.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"redis_active_status\": {\n        ...\n        \"expire_interval\": \"24h\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo v5 New HTTP API Request Format\nDESCRIPTION: Example of the new HTTP API format introduced in Centrifugo v5, showing the simplified structure with direct endpoint addressing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-06-29-centrifugo-v5-released.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: API_KEY\" \\\n  --request POST \\\n  --data '{\"channel\": \"test\", \"data\": {\"x\": 1}}' \\\n  http://localhost:8000/api/publish\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo's Unidirectional Push Message Structure (Protobuf)\nDESCRIPTION: Defines the `Push` message structure using Protocol Buffers, which is sent over Centrifugo's unidirectional transports. It includes an enumeration `PushType` listing possible message types (like PUBLICATION, JOIN, LEAVE) and fields for the type, channel, and data payload (`bytes`). This structure forms the basis for real-time updates delivered via unidirectional connections like WebSocket, EventSource, or HTTP streaming, reusing part of the bidirectional client protocol.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Push {\n  enum PushType {\n    PUBLICATION = 0;\n    JOIN = 1;\n    LEAVE = 2;\n    UNSUBSCRIBE = 3;\n    MESSAGE = 4;\n    SUBSCRIBE = 5;\n    CONNECT = 6;\n    DISCONNECT = 7;\n    REFRESH = 8;\n  }\n  PushType type = 1;\n  string channel = 2;\n  bytes data = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Presence Query with cURL in Centrifugo API (Bash)\nDESCRIPTION: This example shows how to execute a presence query using cURL, sending a JSON payload to the Centrifugo API endpoint. It includes the API key for authorization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"method\": \"presence\", \"params\": {\"channel\": \"chat\"}}' | http \"localhost:8000/api\" Authorization:\"apikey KEY\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ClickHouse Analytics in Centrifugo JSON Configuration\nDESCRIPTION: This JSON snippet shows how to enable and configure ClickHouse analytics integration in Centrifugo's configuration file. It includes settings for enabling various data exports and specifying ClickHouse connection details.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"clickhouse_analytics\": {\n        \"enabled\": true,\n        \"clickhouse_dsn\": [\n            \"tcp://127.0.0.1:9000\",\n            \"tcp://127.0.0.1:9001\",\n            \"tcp://127.0.0.1:9002\",\n            \"tcp://127.0.0.1:9003\"\n        ],\n        \"clickhouse_database\": \"centrifugo\",\n        \"clickhouse_cluster\": \"centrifugo_cluster\",\n        \"export_connections\": true,\n        \"export_subscriptions\": true,\n        \"export_operations\": true,\n        \"export_publications\": true,\n        \"export_notifications\": true,\n        \"export_http_headers\": [\n            \"User-Agent\",\n            \"Origin\",\n            \"X-Real-Ip\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Override Configuration in JSON\nDESCRIPTION: Example JSON structure showing how to override channel options for a specific subscriber using the override claim in the JWT token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/channel_token_auth.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"override\": {\n        \"presence\": {\n            \"value\": false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Capabilities - Centrifugo PRO - JSON\nDESCRIPTION: This snippet demonstrates how to assign channel-specific capabilities (such as subscribe) to a connection in Centrifugo PRO via JWT or connection proxy. The JSON includes the 'caps' array, where each object defines channels and allowed actions (like 'sub'). The main parameters include 'channels' (list of channel names) and 'allow' (actions such as 'sub', 'pub', 'prs', 'hst'). As input, this JSON is embedded into a JWT or returned by a proxy, and controls what the client can do on specified channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/capabilities.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\", \"user_42\"],\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Counting TIME_WAIT Sockets for a Process in Shell\nDESCRIPTION: This shell command chain counts the number of network sockets associated with a specific process (identified by `<CENTRIFUGO_PID>`) that are currently in the TIME_WAIT state. A high count can indicate that sockets are not being released quickly enough after closing, potentially leading to resource exhaustion and connection errors (like Nginx 502 errors) under heavy connect/disconnect load. Replace `<CENTRIFUGO_PID>` with the actual Centrifugo process ID.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/infra_tuning.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnetstat -an |grep TIME_WAIT | grep <CENTRIFUGO_PID> | wc -l\n```\n\n----------------------------------------\n\nTITLE: Batching Centrifugo Broadcasts for Parallel Processing in Python (Django)\nDESCRIPTION: This Python snippet demonstrates splitting a large list of Centrifugo channels into smaller batches using an iterator utility function (`chunks`). It then prepares broadcast payloads for each batch within a Django application context, associating them with sequential partition numbers and creating Change Data Capture (CDC) objects. These objects are bulk-inserted into a database, likely to trigger asynchronous and parallel processing of the broadcasts across different Centrifugo nodes or partitions, improving scalability for large fan-out scenarios. Note: The example partitioning might not guarantee message order.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/scale.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom itertools import islice\n\n\ndef chunks(xs, n):\n    n = max(1, n)\n    iterator = iter(xs)\n    return iter(lambda: list(islice(iterator, n)), [])\n\n\nchannel_batches = chunks(channels, 1000)\ncdc_objects = []\ni = 0\nfor batch in channel_batches:\n    broadcast_payload = {\n        'channels': batch,\n        'data': {\n            'type': 'message_added',\n            'body': serializer.data\n        },\n        'idempotency_key': f'message_{serializer.data[\"id\"]}'\n    }\n    cdc_objects.append(CDC(method='broadcast', payload=broadcast_payload, partition=i))\n    i+=1\n\nCDC.objects.bulk_create(cdc_objects)\n```\n\n----------------------------------------\n\nTITLE: Handling Subscription Events in Centrifugal JavaScript Client\nDESCRIPTION: Event handler for subscription events that manages initial document loading and recovery scenarios. It handles first-time loading, successful recovery after disconnection, and re-synchronization when recovery fails.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-06-03-real-time-document-state-sync.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.#subscription.on('subscribed', (ctx) => {\n    if (ctx.wasRecovering) {\n        if (ctx.recovered) {\n            // Successfully re-attached to a stream, nothing else to do.\n        } else {\n            // Re-syncing due to failed recovery.\n            this.#reSync();\n        }\n    } else {\n        // Load data for the first time.\n        this.#loadDocumentApplyBuffered();\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Brokers in Centrifugo PRO Configuration (JSON)\nDESCRIPTION: This JSON snippet shows how to define multiple named brokers (a Redis broker named 'mycustomredis' and a Nats broker named 'mycustomnats') within the top-level 'brokers' array in the Centrifugo configuration file (config.json). These defined brokers can later be referenced and assigned to specific channel namespaces.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/namespace_engines.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"brokers\": [\n    {\n      \"enabled\": true,\n      \"name\": \"mycustomredis\",\n      \"type\": \"redis\",\n      \"redis\": {\n        \"address\": \"127.0.0.1:6379\"\n      }\n    },\n    {\n      \"enabled\": true,\n      \"name\": \"mycustomnats\",\n      \"type\": \"nats\",\n      \"nats\": {\n        \"url\": \"nats://localhost:4222\"\n      }\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Performing Named RPC Calls with Centrifuge SDK in JavaScript\nDESCRIPTION: Shows how to use the Centrifuge JavaScript SDK to perform a named RPC call to the server, which is independent of channels. Requires Centrifuge client connection and RPC proxy configuration on the server. The method accepts the RPC method name and a request object, sending it asynchronously and returning a response. The main input is an object representing the RPC payload; the expected output is processed server data. Not available unless server proxy is enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst rpcRequest = {'key': 'value'};\nconst data = await centrifuge.namedRPC('example_method', rpcRequest);\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token for User Authentication (Go via Bash)\nDESCRIPTION: This Bash command runs a Go program (main.go) to generate an HMAC-SHA256 JWT token for a given user. The generated token authenticates the user (user12 in this case) when connecting to Centrifugo endpoints. Dependency: main.go must provide a CLI interface for token generation. Input: user identifier (user12). Output: JWT printed to terminal, which is copy-pasted into subsequent client requests. Limitation: main.go must implement the expected gentoken subcommand.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_http_stream.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go gentoken -u user12\n```\n\n----------------------------------------\n\nTITLE: Handling Window Unload for Graceful Centrifuge Disconnect (JavaScript)\nDESCRIPTION: This JavaScript snippet adds an event listener to gracefully disconnect the Centrifuge client before the browser window unloads. This prevents lingering WebTransport sessions, which may not always be closed automatically by Chrome on page reload. Recommended to ensure clean client shutdown during development and experimentation with WebTransport.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/webtransport.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener(\"beforeunload\", (event) => { centrifuge.disconnect() });\n```\n\n----------------------------------------\n\nTITLE: Sub Refresh Request Payload\nDESCRIPTION: Example of the payload sent during a subscription refresh request\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"channel\": \"channel\"\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Token Authorization Implementation\nDESCRIPTION: JavaScript code demonstrating subscription with token authorization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst token = await getSubscriptionToken('personal:17');\n\nconst sub = centrifuge.newSubscription('personal:17', {\n    token: token\n});\nsub.on('publication', function(ctx) {\n    console.log(ctx.data);\n})\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: JWT Token Generation Backend\nDESCRIPTION: Python view function for generating JWT tokens for Centrifugo connection authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_connection_token(request):\n    if not request.user.is_authenticated:\n        return JsonResponse({'detail': 'unauthorized'}, status=401)\n\n    token_claims = {\n        'sub': str(request.user.pk),\n        'exp': int(time.time()) + 120\n    }\n    token = jwt.encode(token_claims, settings.CENTRIFUGO_TOKEN_SECRET)\n\n    return JsonResponse({'token': token})\n```\n\n----------------------------------------\n\nTITLE: Listening to Channel Publications in JavaScript\nDESCRIPTION: Basic example of setting up a publication listener for a Centrifugo subscription. The event handler receives a context object containing the publication data, offset, tags, and publisher information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsub.on('publication', function(ctx) {\n    console.log(\"received publication\", ctx);\n});\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for Default Environment Variables (JSON)\nDESCRIPTION: An example Centrifugo v6 configuration file (`config.json`) used to demonstrate the `--base` and `--base-non-zero-only` flags with the `defaultenv` command. It defines client origins, Redis engine settings, and disables the admin interface.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/console_commands.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"allowed_origins\": [\"http://localhost:8000\"]\n  },\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n        \"address\": \"redis://localhost:6379\"\n    }\n  },\n  \"admin\": {\n    \"enabled\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the Centrifugo Rate Limit API using cURL\nDESCRIPTION: This Bash snippet demonstrates how to make a POST request to the Centrifugo `/api/rate_limit` endpoint using cURL. It sends a JSON payload specifying the rate limit `key` (\"rate_limit_test\"), `interval` (60000ms), and `rate` (10 allowed per interval). An API key must be included in the `Authorization` header.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/distributed_rate_limit.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/api/rate_limit \\\n-H \"Authorization: apikey <KEY>\" \\\n-d @- <<'EOF'\n\n{\n    \"key\": \"rate_limit_test\",\n    \"interval\": 60000,\n    \"rate\": 10\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Listening to Join and Leave Events on Subscription - JavaScript\nDESCRIPTION: This JavaScript example registers event handlers for 'join' and 'leave' events on a Centrifugo channel subscription. The event listeners log information about clients that connect to or disconnect from the channel in real time. Dependencies include a functional Centrifugo JavaScript subscription and enabled join/leave on the channel namespace. Input is the joinCtx or leaveCtx event context; output is a console log per event.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/presence.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('join', function(joinCtx) {\n    console.log('client joined:', joinCtx);\n});\n\nsubscription.on('leave', function(leaveCtx) {\n    console.log('client left:', leaveCtx);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Presence in Centrifugo Namespace - JSON\nDESCRIPTION: This snippet shows the JSON configuration required to enable online presence tracking for a Centrifugo namespace. To use presence features, the 'presence' attribute needs to be set to true within the appropriate namespace. No external dependencies other than Centrifugo's server are required, but this configuration must be added to the Centrifugo config file prior to server startup. The primary parameter is the 'namespaces' list under 'channel', specifying which channel namespaces will have presence enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/presence.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"public\",\n        \"presence\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Centrifugo PRO License Key in Configuration - JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to add a valid Centrifugo PRO license key to the config.json file using the \"license\" field. This key is required to unlock PRO features and avoid sandbox restrictions. Dependencies: Replace \\\"<YOUR_LICENSE_KEY>\\\" with an actual license string before starting Centrifugo PRO.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/install_and_run.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"license\": \"<YOUR_LICENSE_KEY>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key in Centrifugo\nDESCRIPTION: JSON configuration example showing how to set up the API key in Centrifugo's config file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"api_key\": \"<YOUR API KEY>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting and Subscribing to a Channel in Java\nDESCRIPTION: Presents a full Java example using the Centrifuge SDK. It involves setting up client and subscription event listeners, creating a client with options, creating a new subscription with its listener, handling potential `DuplicateSubscriptionException`, subscribing, and connecting the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nEventListener listener = new EventListener() {};\nOptions opts = new Options();\nClient client = new Client(\"ws://localhost:8000/connection/websocket\", opts, listener);\n\nSubscriptionEventListener subListener = new SubscriptionEventListener() {\n    @Override\n    public void onPublication(Subscription sub, PublicationEvent event) {\n        System.out.println(\"publication from \" + sub.getChannel());\n    }\n};\n\nSubscription sub;\ntry {\n    sub = client.newSubscription(\"example\", subListener);\n    sub.subscribe();\n} catch (DuplicateSubscriptionException e) {\n    e.printStackTrace();\n}\n\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo YAML Configuration\nDESCRIPTION: Shows an example of a Centrifugo configuration file in YAML format. It configures `allowed_origins`, secret keys (`token_hmac_secret_key`, `api_key`), and sets the `log_level` to `debug`. Note the use of spaces for indentation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nallowed_origins:\n  - \"http://localhost:3000\"\ntoken_hmac_secret_key: \"<YOUR-SECRET-STRING-HERE>\"\napi_key: \"<YOUR-API-KEY-HERE>\"\nlog_level: debug\n```\n\n----------------------------------------\n\nTITLE: Complete Browser SSE Connection Example (JavaScript)\nDESCRIPTION: This JavaScript code provides a complete example for establishing a unidirectional SSE connection to Centrifugo from a browser. It sets up the connection URL with the necessary `cf_connect` parameter (containing the Centrifugo JWT), creates an `EventSource`, and defines an `onmessage` handler to log received data payloads (`event.data`) to the console.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_sse.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst url = new URL('http://localhost:8000/connection/uni_sse');\nurl.searchParams.append(\"cf_connect\", JSON.stringify({\n    'token': '<Centrifugo JWT>'\n}))\nconst eventSource = new EventSource(url);\neventSource.onmessage = function(event) {\n    console.log(event.data);\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Consumer in Centrifugo with JSON - JavaScript/JSON\nDESCRIPTION: This JSON example configures a PostgreSQL-based async consumer for Centrifugo. It specifies consumer name, type, and required connection settings such as DSN, outbox table name, number of partitions, select limit, and polling interval for partitions. Inputs: configuration JSON; Output: enabled PostgreSQL consumer. Dependencies: Centrifugo, accessible PostgreSQL. Constraints: Proper DSN, existing table, partitioning as needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/consumers.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"consumers\": [\n    {\n      \"name\": \"my_postgresql_consumer\",\n      \"type\": \"postgresql\",\n      \"postgresql\": {\n        \"dsn\": \"postgresql://user:password@localhost:5432/db\",\n        \"outbox_table_name\": \"centrifugo_outbox\",\n        \"num_partitions\": 1,\n        \"partition_select_limit\": 100,\n        \"partition_poll_interval\": \"300ms\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Subscription Token Verification in Centrifugo (JSON)\nDESCRIPTION: Presents a Centrifugo JSON configuration (`config.json`) example enabling separate verification settings for subscription tokens, distinct from connection tokens. It activates this feature using `client.subscription_token.enabled: true` and specifies a unique `hmac_secret_key` solely for subscription tokens, while connection tokens might use a different mechanism like JWKS defined under `client.token`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channel_token_auth.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"token\": {\n      \"jwks_public_endpoint\": \"https://example.com/openid-connect/certs\"\n    },\n    \"subscription_token\": {\n      \"enabled\": true,\n      \"hmac_secret_key\": \"separate_secret_which_must_be_strong\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 111 (Too Many Requests)\nDESCRIPTION: Defines the 'Too Many Requests' error code (111), a temporary error returned when the server rejects a request due to enforced rate limiting policies. Clients should typically back off before retrying.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nCode:    111\nMessage: \"too many requests\"\nTemporary: true\n```\n\n----------------------------------------\n\nTITLE: Importing Centrifuge Types into React App (JavaScript)\nDESCRIPTION: Imports the Centrifuge class and several type contexts and enums from the 'centrifuge' package for use in a React frontend. Prepares the React app code to use centrifuge-js for WebSocket connection, channel subscriptions, and type-safe event handling. Required after installing centrifuge-js.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Centrifuge, PublicationContext, SubscriptionStateContext,\n  SubscribedContext, SubscriptionState\n} from 'centrifuge';\n\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Unknown Channel (102)\nDESCRIPTION: Indicates that the specified channel name in a client request does not exist or is not recognized by the server. This often happens when a client tries to interact with a channel within a namespace not defined in the Centrifugo configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    102\nMessage: \"unknown channel\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Admin Web Interface with Centrifugo - JSON\nDESCRIPTION: This configuration example shows how to use a custom-built admin web interface by setting the 'web_path' field within the 'admin' section. By providing the directory path to the custom UI dist build, Centrifugo will serve this directory instead of the built-in UI. 'enabled', 'password', and 'secret' fields are also required for activation and authentication. This is beneficial when developing or customizing admin panels beyond the defaults.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/admin_web.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"admin\\\": {\\n    \\\"enabled\\\": true,\\n    \\\"password\\\": \\\"<PASSWORD>\\\",\\n    \\\"secret\\\": \\\"<SECRET>\\\",\\n    \\\"web_path\\\": \\\"<PATH_TO_WEB_DIST>\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Patterns in Centrifugo JSON\nDESCRIPTION: Example configuration showing how to enable channel patterns and define namespaces with pattern matching. Demonstrates pattern variables using :name syntax.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/channel_patterns.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // rest of the config ...\n    \"channel_patterns\": true, // required to turn on the feature.\n    \"namespaces\": [\n        {\n            \"name\": \"/users/:name\"\n            // namespace options may go here ...\n        },\n        {\n            \"name\": \"/events/:project/:type\"\n            // namespace options may go here ...\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic TLS for Centrifugo HTTP Server (JSON)\nDESCRIPTION: Example JSON configuration for enabling TLS on the Centrifugo HTTP server. It sets `enabled` to `true` within the `http_server.tls` object and specifies paths to the certificate (`cert_pem`) and private key (`key_pem`) files required for HTTPS.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"http_server\": {\n    \"tls\": {\n      \"enabled\": true,\n      \"cert_pem\": \"/path/to/cert.pem\",\n      \"key_pem\": \"/path/to/key.pem\"\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating JWT for User Authentication in Centrifugo\nDESCRIPTION: This snippet demonstrates how to generate a JWT token for user authentication in Centrifugo using the centrifugo CLI tool.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/connections.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ centrifugo genconfig\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ centrifugo gentoken -u 42\n```\n\n----------------------------------------\n\nTITLE: Blocking a User via Centrifugo API (Bash/cURL)\nDESCRIPTION: This cURL command demonstrates how to call the Centrifugo `block_user` API endpoint to block a specific user. It sends a POST request with a JSON payload containing the `user` ID to block and an optional `expire_at` timestamp (Unix seconds) for when the block should automatically expire. Requires a valid `X-API-Key` header for authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_block.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"user\": \"2695\", \"expire_at\": 1635845122}' \\\n  http://localhost:8000/api/block_user\n```\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo via docker-compose - Shell\nDESCRIPTION: This command starts all docker-compose defined services, including Centrifugo, based on a local docker-compose.yml configuration. Requires Docker Compose to be installed and all referenced files (like config.json) to be present.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo in Docker Container (Bash)\nDESCRIPTION: Runs the Centrifugo server within a Docker container using the pulled image. It maps a host directory containing `config.json` to `/centrifugo` inside the container (`-v`), maps host port 8000 to container port 8000 (`-p`), increases the open file limit (`--ulimit nofile`), and instructs the server to use the mounted `config.json` (`-c config.json`). Requires Docker and the specified config file on the host.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --ulimit nofile=65536:65536 -v /host/dir/with/config/file:/centrifugo -p 8000:8000 centrifugo/centrifugo centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Subscription Token Implementation in JavaScript\nDESCRIPTION: Examples of implementing subscription token handling with refresh callback functionality\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst sub = centrifuge.newSubscription(channel, {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE'\n});\nsub.subscribe();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getToken(ctx) {\n    // Fetch your application backend.\n    const res = await fetch('http://localhost:8000/centrifugo/subscription_token', {\n        method: 'POST',\n        headers: new Headers({ 'Content-Type': 'application/json' }),\n        body: JSON.stringify({\n            channel: ctx.channel\n        })\n    });\n    if (!res.ok) {\n        if (res.status === 403) {\n            // Return special error to not proceed with token refreshes,\n            // client will be disconnected.\n            throw new Centrifuge.UnauthorizedError();\n        }\n        // Any other error thrown will result into token refresh re-attempts.\n        throw new Error(`Unexpected status code ${res.status}`);\n    }\n    const data = await res.json();\n    return data.token;\n}\n\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nconst sub = centrifuge.newSubscription(channel, {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE', // Optional, getToken is enough.\n    getToken: getToken\n});\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo v6 Base Configuration (JSON)\nDESCRIPTION: Provides an example `config.json` file for Centrifugo v6. This configuration specifies allowed origins for the client, configures Redis as the engine with a specific address, and explicitly disables the admin interface. This file serves as input for the `--base` flag in `defaultenv` examples.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"allowed_origins\": [\"http://localhost:8000\"]\n  },\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n        \"address\": \"redis://localhost:6379\"\n    }\n  },\n  \"admin\": {\n    \"enabled\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Active Channels via Centrifugo HTTP API - Bash\nDESCRIPTION: This bash snippet shows how to list all active channels with subscribers in Centrifugo by making a POST request via curl. The data payload is an empty JSON object, indicating no filters are applied. The request uses the /api/channels endpoint and requires an API key for authentication. The response will include a map of channels to their associated info. Intended primarily for development, administrative, or debugging purposes due to scalability considerations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{}' \\\n  http://localhost:8000/api/channels\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo Client setToken Usage (JavaScript)\nDESCRIPTION: Shows how to inject a generated JWT token directly into the Centrifuge client using setToken(). The token string must be replaced with an actual JWT previously generated using the correct HMAC secret and user ID. Essential for client authentication; required before connecting.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.setToken(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM3MjIiLCJleHAiOjE1OTAxODYzMTZ9.YMJVJsQbK_p1fYFWkcoKBYr718AeavAk3MAYvxcMk0M\");\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Docker\nDESCRIPTION: Docker command to run Centrifugo container with proper file limits and volume mounting. This command mounts a local config file and exposes port 8000.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --ulimit nofile=262144:262144 -v /host/dir/with/config/file:/centrifugo -p 8000:8000 centrifugo/centrifugo centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Persistence Engine for User Blocking in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet configures Centrifugo PRO to persist user blocking data in a Redis instance by setting the \"persistence_engine\" for the \"user_block\" module to \"redis\" and specifying the address of a single Redis shard. It does not allow sharding or referencing global Redis configuration to avoid scaling issues. Centrifugo will exit on startup if multiple shards are configured. All other configuration parameters can be included using ellipsis (...), with \"redis_address\" pointing to the desired Redis server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/user_block.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"user_block\": {\n        \"persistence_engine\": \"redis\",\n        \"redis_address\": \"localhost:6379\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Persistence for Token Revocation\nDESCRIPTION: JSON configuration for setting up Redis as a persistence engine for token revocation data. This configuration enables storing revocation information in Redis instead of process memory.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/token_revocation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_tokens_invalidate\": {\n    \"storage_type\": \"redis\",\n    \"redis\": {\n      \"address\": \"localhost:6379\"\n    }\n  },\n  \"token_revoke\": {\n    \"storage_type\": \"redis\",\n    \"redis\": {\n      \"address\": \"localhost:6379\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Second Centrifugo Node with Redis Engine - Bash Command\nDESCRIPTION: This snippet demonstrates launching a second Centrifugo instance on a different port using the same Redis backend. Dependencies are identical to the first instance: Centrifugo and Redis. Key parameters adjust only the '--port' flag (here set to '8001'), allowing multiple nodes to join the same PUB/SUB network through Redis. Ensures load balancing and high availability where multiple clients can connect to any node.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json --port=8001 --engine=redis --redis_address=127.0.0.1:6379\n```\n\n----------------------------------------\n\nTITLE: Fetching History Since Position Forward using History API\nDESCRIPTION: Illustrates retrieving up to 10 publications that occurred *after* a specific known stream position (`since: {offset: 0, epoch: \\\"epoch\\\"}`). `reverse: false` dictates forward iteration from the specified offset. The provided epoch must match the stream's current epoch.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/history_and_recovery.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: {offset: 0, epoch: \"epoch\"}, reverse: false)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP API Options in Centrifugo Config (JSON)\nDESCRIPTION: This JSON structure illustrates where HTTP API related options are placed within the Centrifugo configuration file (`config.json`). The `http_api` object serves as a container for specific settings governing the server's HTTP API behavior and security, which are detailed in a separate chapter.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"http_api\": {\n    ...\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Presence Manager in Centrifugo PRO\nDESCRIPTION: This snippet shows how to define a custom Redis-based presence manager that can be used for specific namespaces.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/namespace_engines.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presence_managers\": [\n    {\n      \"enabled\": true,\n      \"name\": \"mycustomredis\",\n      \"type\": \"redis\",\n      \"redis\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring APNs Push Notifications (Token Auth) in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet illustrates setting up Apple Push Notification service (APNs) using token-based authentication in Centrifugo. It requires a PostgreSQL database connection (optional for basic proxying), Redis for queuing, the APNs environment (`development` or `production`), bundle ID, auth type set to `token`, and paths/IDs related to the APNs authentication key (`.p8` file). The `enabled_providers` array must include `apns`. Certificate-based auth using `.p12` files is also supported via alternative options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/push_notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"push_notifications\": {\n        \"redis_address\": \"localhost:6379\",\n        \"enabled_providers\": [\"apns\"],\n        \"apns_endpoint\": \"development\",\n        \"apns_bundle_id\": \"com.example.your_app\",\n        \"apns_auth\": \"token\",\n        \"apns_token_auth_key_path\": \"/path/to/auth/key/file.p8\",\n        \"apns_token_key_id\": \"<your_key_id>\",\n        \"apns_token_team_id\": \"your_team_id\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Individual Token using Centrifugo API\nDESCRIPTION: Curl command to call the revoke_token API method in Centrifugo PRO. This example demonstrates how to revoke a specific token by its unique ID (uid) and set an expiration time for the revocation information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/token_revocation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"revoke_token\", \"params\": {\"uid\": \"xxx-xxx-xxx\", \"expire_at\": 1635845122}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Room Members via Centrifugo Broadcast\nDESCRIPTION: Code for broadcasting messages to all users in a chat room by sending the message to each user's personal channel. It creates a message in the database and then uses Centrifugo's broadcast API to deliver it in real-time.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-12-14-laravel-multi-room-chat-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$message = Message::create([\n    'sender_id' => Auth::user()->id,\n    'message' => $requestData[\"message\"],\n    'room_id' => $id,\n]);\n\n$room = Room::with('users')->find($id);\n\n$channels = [];\nforeach ($room->users as $user) {\n    $channels[] = \"personal:#\" . $user->id;\n}\n\n$this->centrifugo->broadcast($channels, [\n    \"text\" => $message->message,\n    \"createdAt\" => $message->created_at->toDateTimeString(),\n    \"roomId\" => $id,\n    \"senderId\" => Auth::user()->id,\n    \"senderName\" => Auth::user()->name,\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo with Sharding Across Multiple Redis Clusters (JSON)\nDESCRIPTION: This JSON configuration demonstrates how to shard data across multiple independent Redis Clusters within Centrifugo. The `redis_cluster_address` array contains multiple comma-separated strings, each representing the seed nodes of a distinct Redis Cluster. Centrifugo uses consistent hashing (Jump algorithm) to distribute data among these clusters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"redis_cluster_address\": [\n        \"localhost:30001,localhost:30002,localhost:30003\",\n        \"localhost:30101,localhost:30102,localhost:30103\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static HTTP Headers in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet illustrates how to define static HTTP headers that Centrifugo will add to every outgoing HTTP proxy request. The `proxy_static_http_headers` key holds a map of header names to their string values. These static headers can be overridden by proxied client headers if they share the same name and are listed in `proxy_http_headers`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"proxy_static_http_headers\": {\n    \"X-Custom-Header\": \"custom value\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Validating a Centrifugo Subscription JWT Using Bash CLI\nDESCRIPTION: Checks validity of a provided subscription JWT (<TOKEN>) using the given configuration file. Only requires Centrifugo to be installed and a valid config path. Useful for confirming channel token logic works as intended during development.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/console_commands.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo checksubtoken -c config.json <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Configuration File\nDESCRIPTION: Command to start Centrifugo with a specific configuration file. The --config flag points to the JSON configuration file that contains necessary settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Default Bidirectional WebSocket Endpoint URL\nDESCRIPTION: This is the default URL path for establishing a bidirectional WebSocket connection with the Centrifugo server. It operates on the configured host and port (defaulting to localhost:8000).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nws://localhost:8000/connection/websocket\n```\n\n----------------------------------------\n\nTITLE: Enabling Graphite Metrics Export in Centrifugo Configuration - JSON\nDESCRIPTION: This JSON configuration snippet enables automatic export of Centrifugo metrics to a Graphite server by setting 'graphite' to true and specifying 'graphite_host' and 'graphite_port'. Metrics are aggregated over 10-second intervals by default and transmitted over a TCP connection. Required parameters include 'graphite' (boolean), 'graphite_host' (string, Graphite server address), and 'graphite_port' (integer, Graphite TCP port). Optional 'graphite_interval' can be specified for custom aggregation periods. This configuration requires a running Graphite server accessible at the provided host and port.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/observability.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"graphite\": true,\n    \"graphite_host\": \"localhost\",\n    \"graphite_port\": 2003\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Subscription JWT using Node.js `jose`\nDESCRIPTION: Provides a Node.js example for generating a Centrifugo channel subscription JWT using the `jose` library. It sets the `sub` (user ID) and `channel` claims, specifies an expiration time ('1h'), and signs the token using the HS256 algorithm with a secret key retrieved typically from Centrifugo's `client.token.hmac_secret_key` configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channel_token_auth.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst jose = require('jose')\n\n(async function main() {\n  const secret = new TextEncoder().encode('secret')\n  const alg = 'HS256'\n\n  const token = await new jose.SignJWT({ sub: '42', channel: '$gossips' })\n    .setProtectedHeader({ alg })\n    .setExpirationTime('1h')\n    .sign(secret)\n\n  console.log(token);\n})();\n```\n\n----------------------------------------\n\nTITLE: Fetching Limited History Reversed using History API\nDESCRIPTION: Demonstrates retrieving a limited number (up to 10) of historical publications starting from the newest (`since: null`, `reverse: true`). The `limit: 10` parameter restricts the result size, and `reverse: true` ensures newest-to-oldest order.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/history_and_recovery.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: null, reverse: true)\n```\n\n----------------------------------------\n\nTITLE: Setting Standalone Redis Server Address (JSON)\nDESCRIPTION: Demonstrates configuring the Redis engine in Centrifugo to connect to a standalone Redis server by explicitly defining the \"address\" parameter. The address defaults to 127.0.0.1:6379 but can be set to a custom host and port. This config requires the Centrifugo server and a reachable Redis instance on the specified address.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"127.0.0.1:6379\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo from System Bin Directory - Bash\nDESCRIPTION: This command runs the Centrifugo executable from any location, typically after it's installed or symlinked into a system-wide bin directory. It uses a specific configuration file and assumes proper installation and PATH setup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with a Specific Config File (Shell)\nDESCRIPTION: This shell command demonstrates how to start the Centrifugo server with a custom configuration file. The '--config=config.json' flag instructs Centrifugo to load the settings from the specified JSON file, enabling applied TLS and other configurations defined therein.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/tls.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./centrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Channel History from Beginning in JavaScript\nDESCRIPTION: This snippet demonstrates retrieving up to 10 publications from the beginning of the current history stream using the `history` method with a `limit`. Requires history enabled for the channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst resp = await subscription.history({limit: 10});\nconsole.log(resp.publications);\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Redis as Centrifugo Engine (Bash)\nDESCRIPTION: Starts a Redis server container for Centrifugo real-time messaging using Docker. Assumes Docker is installed. No special input is expected; this command launches Redis on port 6379 and requires a compatible Centrifugo configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -p 6379:6379 redis:6\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Engine in Centrifugo\nDESCRIPTION: JSON configuration example showing how to set Redis as the engine in Centrifugo's configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"redis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with a JSON Configuration File using Bash\nDESCRIPTION: Demonstrates how to start the Centrifugo server specifying a JSON configuration file using the `-c` command-line flag.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Stream Proxy Channel Using Centrifugo JavaScript SDK\nDESCRIPTION: This JavaScript code demonstrates how to subscribe to a Centrifugo channel using the client SDK. It creates a new Centrifuge client, connects to the server WebSocket, and subscribes to a namespace-enabled stream channel. The callback on the 'publication' event displays received streamed data. Requires the Centrifuge JS SDK and, optionally, an implementation of token retrieval logic for authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy_streams.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {\n    getToken: getTokenImplementation\n});\n\nclient.connect();\n\nconst sub = client.newSubscription('streams:123e4567-e89b-12d3-a456-426614174000', {\n    data: {}\n}).on('publication', function(ctx) {\n    console.log(\"received publication from a channel\", ctx.data);\n});\n\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Querying Channel History in Reverse Order with Centrifuge JavaScript SDK\nDESCRIPTION: In this snippet, the Centrifuge SDK's subscription.history() method is used to fetch up to 10 publications from a channel in reverse order, i.e., from the newest to the oldest. The 'reverse: true' parameter controls the traversal direction. This query is only meaningful for channels with history enabled. The output is an array of publication events available on resp.publications.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history({limit: 10, reverse: true});\nconsole.log(resp.publications);\n```\n\n----------------------------------------\n\nTITLE: Creating a Centrifuge Client Instance in JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a new Centrifuge client by providing a WebSocket URL and an optional options object. The Centrifuge constructor returns a client object that manages the connection state and interactions with the server. This operation requires the Centrifuge JavaScript library to be available in the execution context, and the URL should point to a valid Centrifugo WebSocket endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\", {});\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo PRO License Key in config.json - json\nDESCRIPTION: Demonstrates how to set the Centrifugo PRO license key within the config.json file under the 'license' field. Requires an existing configuration file and valid license key. Input is the license key; Output is unlocked PRO feature set without sandbox mode. Limitation: '...' denotes omitted configuration settings, actual config file may require additional fields.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/install_and_run.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"license\": \"<YOUR_LICENSE_KEY>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HUP Signal for Config Reload\nDESCRIPTION: Bash command to send HUP signal to Centrifugo for reloading configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkill -HUP <PID>\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Configuration Using JSON (JSON)\nDESCRIPTION: This example provides a Centrifugo configuration file in JSON format. It defines allowed origins, sets the JWT HMAC secret key, and specifies an API key for server API access. Prerequisites include Centrifugo v4 and awareness of security needs for the key fields. The file should be named 'config.json' and is consumed by Centrifugo at startup. Inputs are configuration values; output is server behavior according to these settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"allowed_origins\": [\"http://localhost:3000\"],\\n  \"token_hmac_secret_key\": \"<YOUR-SECRET-STRING-HERE>\",\\n  \"api_key\": \"<YOUR-API-KEY-HERE>\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Centrifugo Version Using Bash CLI\nDESCRIPTION: Outputs the currently installed version of the Centrifugo server and then exits. No dependencies except installation of the Centrifugo binary are required. This is typically used to verify the installation or diagnose version-related issues; takes no arguments and outputs version information to stdout.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/console_commands.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo version\n```\n\n----------------------------------------\n\nTITLE: Client-Side Message Sending with AJAX in Chat Application\nDESCRIPTION: JavaScript code for sending chat messages through an AJAX request when the user presses Enter. The message is sent to a Laravel endpoint which then saves it to the database and broadcasts it via Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-12-14-laravel-multi-room-chat-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmessageInput.onkeyup = function(e) {\n    if (e.keyCode === 13) {\n        e.preventDefault();\n        const message = messageInput.value;\n        if (!message) {\n            return;\n        }\n        const xhttp = new XMLHttpRequest();\n        xhttp.open(\"POST\", \"/rooms/\" + roomId + \"/publish\");\n        xhttp.setRequestHeader(\"X-CSRF-TOKEN\", csrfToken);\n        xhttp.send(JSON.stringify({\n            message: message\n        }));\n        messageInput.value = '';\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Inserting Publish Command Into Centrifugo Outbox Table - SQL\nDESCRIPTION: This SQL command demonstrates how to insert a publish command into the Centrifugo PostgreSQL outbox table, preparing it for consumption by Centrifugo's async consumer. It inserts a JSON payload specifying a channel and message data. Inputs: INSERT statement with parameters for method, payload, partition; Output: new outbox row for Centrifugo to process. Prerequisite: centrifugo_outbox table schema is in place.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/consumers.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO centrifugo_outbox (method, payload, partition)\nVALUES ('publish', '{\"channel\": \"updates\", \"data\": {\"text\": \"Hello, world!\"}}', 0);\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Unsubscribe Code 2500 (Insufficient State)\nDESCRIPTION: Defines the 'Insufficient State' unsubscribe code (2500) sent when Centrifugo detects message loss or order issues in a channel stream with recovery enabled. Codes >= 2500 trigger an automatic resubscribe attempt by SDKs, as recovery might still be possible. Frequent occurrences may signal Centrifugo-to-Broker communication problems.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nCode:   2500\nReason: \"insufficient state\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo server\nDESCRIPTION: JSON configuration for Centrifugo server, including security settings, admin credentials, and proxy settings for connection authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-10-18-integrating-with-nodejs.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"secret\",\n  \"admin\": true,\n  \"admin_password\": \"password\",\n  \"admin_secret\": \"my_admin_secret\",\n  \"api_key\": \"my_api_key\",\n  \"allowed_origins\": [\n    \"http://localhost:9000\"\n  ],\n  \"user_subscribe_to_personal\": true,\n  \"proxy_connect_endpoint\": \"http://localhost:3000/centrifugo/connect\",\n  \"proxy_http_headers\": [\n    \"Cookie\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Redis Engine for Rate Limiting in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to configure Redis-based per-user rate limiting to reuse the Redis connection details already defined for the main Centrifugo engine. By setting `use_redis_from_engine` to `true` within the `redis_user_command_rate_limit` block, the rate limiter connects to the Redis instances specified in the top-level `engine` ('redis') and `redis_address` configuration, avoiding redundant Redis connection setup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/rate_limiting.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_address\": \"localhost:6379\",\n    \"redis_user_command_rate_limit\": {\n        \"enabled\": true,\n        \"use_redis_from_engine\": true,\n        ...\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Graphite Metrics Export in Centrifugo - JSON\nDESCRIPTION: This configuration snippet shows how to set up Centrifugo for automatic metric export to a Graphite server over TCP by enabling the 'graphite' flag and specifying the Graphite host and port. The settings are placed inside Centrifugo's config file, with 'graphite' as a boolean to enable export, 'graphite_host' as the destination address (e.g., 'localhost'), and 'graphite_port' as the connection port (defaulting to 2003). Centrifugo aggregates statistics every 10 seconds by default before pushing updates. Changing aggregation interval is possible via the 'graphite_interval' parameter.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/monitoring.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    ...\\n    \"graphite\": true,\\n    \"graphite_host\": \"localhost\",\\n    \"graphite_port\": 2003\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FCM Push Notifications - Centrifugo PRO - JSON\nDESCRIPTION: This JSON snippet demonstrates a configuration file to enable FCM as a push notification provider in Centrifugo PRO. It requires configuring a PostgreSQL database (for token storage), a Redis address (for push request queuing), and providing the path to FCM service account credentials. The 'enabled_providers' array lists 'fcm' to ensure the provider is active. This configuration is expected as part of the Centrifugo PRO config.json file; ensure both database and Redis services are provisioned and credentials file path is correct.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"database\": {\\n    \"enabled\": true,\\n    \"postgresql\": {\\n      \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\\n    }\\n  },\\n  \"push_notifications\": {\\n    \"queue\": {\\n      \"redis\": {\\n        \"address\": \"localhost:6379\"\\n      }\\n    },\\n    \"enabled_providers\": [\\n      \"fcm\"\\n    ],\\n    \"fcm\": {\\n      \"credentials_file_path\": \"/path/to/service/account/credentials.json\"\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Subscribe Proxy for a Specific Namespace\nDESCRIPTION: Configuration to enable the subscribe proxy for channels in a specific namespace (in this case 'sun'). This applies the proxy_subscribe flag at the namespace configuration level.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_endpoint\": \"http://localhost:3000/centrifugo/subscribe\",\n  \"proxy_subscribe_timeout\":  \"1s\",\n  \"namespaces\": [{\n    \"name\": \"sun\",\n    \"proxy_subscribe\": true\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Personal Namespace in Centrifugo\nDESCRIPTION: JSON configuration for setting up a personal namespace with presence enabled in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"namespaces\": [\n        {\n            \"name\": \"personal\",\n            \"presence\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Expiration Claim - Node.js\nDESCRIPTION: This Node.js example illustrates issuing a 'sub'-scoped JWT with a 5-minute expiration using the 'jose' package. The .setExpirationTime('5m') call specifies the 'exp' claim, and the asynchronous execution mirrors secure token creation flows used in backends. Useful for short-lived session tokens accepted by Centrifugo. Install 'jose' as a dependency.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst jose = require('jose')\\n\\n(async function main() {\\n  const secret = new TextEncoder().encode('secret')\\n  const alg = 'HS256'\\n\\n  const token = await new jose.SignJWT({ sub: '42' })\\n    .setProtectedHeader({ alg })\\n    .setExpirationTime('5m')\\n    .sign(secret)\\n\\n  console.log(token);\\n})();\\n\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Configuration File with Redis Backend and Proxies (JSON)\nDESCRIPTION: Provides a Centrifugo server configuration for WebSocket communication, using Redis as a backend and defining allowed origins and HTTP proxy endpoints for connect, publish, and subscribe events. Prerequisites: a running Redis instance, Centrifugo installed, and Django endpoints ready to handle proxy events. Inputs are configuration properties; output is read by Centrifugo during startup. Limitations include static proxy endpoints and a test-oriented allowed origin.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"port\\\": 8001,\\n    \\\"engine\\\": \\\"redis\\\",\\n    \\\"redis_address\\\": \\\"redis://localhost:6379\\\",\\n    \\\"allowed_origins\\\": \\\"http://localhost:9000\\\",\\n    \\\"proxy_connect_endpoint\\\": \\\"http://localhost:8000/chat/centrifugo/connect/\\\",\\n    \\\"proxy_publish_endpoint\\\": \\\"http://localhost:8000/chat/centrifugo/publish/\\\",\\n    \\\"proxy_subscribe_endpoint\\\": \\\"http://localhost:8000/chat/centrifugo/subscribe/\\\",\\n    \\\"proxy_http_headers\\\": [\\\"Cookie\\\"],\\n    \\\"namespaces\\\": [\\n        {\\n            \\\"name\\\": \\\"rooms\\\",\\n            \\\"publish\\\": true,\\n            \\\"proxy_publish\\\": true,\\n            \\\"proxy_subscribe\\\": true\\n        }\\n    ]\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Message List View (GET) in DRF\nDESCRIPTION: This Python snippet defines the `get_queryset` method for a DRF `ListCreateAPIView` named `MessageListCreateAPIView`. It handles GET requests to list messages for a specific room (`room_id` from URL kwargs). It first verifies that the requesting user is a member of the room using `get_object_or_404`. Then, it retrieves `Message` objects belonging to that room, prefetches related `user` and `room` data, orders them by creation time descending, and returns the queryset to be serialized by `MessageSerializer`. Authentication is required.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass MessageListCreateAPIView(ListCreateAPIView):\n    serializer_class = MessageSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        room_id = self.kwargs['room_id']\n        get_object_or_404(RoomMember, user=self.request.user, room_id=room_id)\n        return Message.objects.filter(\n            room_id=room_id).prefetch_related('user', 'room').order_by('-created_at')\n\n    @transaction.atomic\n    def create(self, request, *args, **kwargs):\n        # Will be shown below.\n```\n\n----------------------------------------\n\nTITLE: Generating Channel Subscription JWT Token in Django View (Python)\nDESCRIPTION: A Django view that validates user authentication and requested channel, then generates a JWT including user ID, expiry, and channel for Centrifugo subscription. Responds with the JWT or an error if unauthorized. Relies on PyJWT, and settings.CENTRIFUGO_TOKEN_SECRET. Secures subscriptions so users can't subscribe to others' channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef get_subscription_token(request):\n    if not request.user.is_authenticated:\n        return JsonResponse({'detail': 'unauthorized'}, status=401)\n\n    channel = request.GET.get('channel')\n    if channel != f'personal:{request.user.pk}':\n        return JsonResponse({'detail': 'permission denied'}, status=403)\n\n    token_claims = {\n        'sub': str(request.user.pk),\n        'exp': int(time.time()) + 300,\n        'channel': channel\n    }\n    token = jwt.encode(token_claims, settings.CENTRIFUGO_TOKEN_SECRET)\n\n    return JsonResponse({'token': token})\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Subscriptions in Java\nDESCRIPTION: Shows how to create a subscription, implement a subscription event listener, and handle subscription lifecycle in Java.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nSubscriptionEventListener subListener = new SubscriptionEventListener() {\n    @Override\n    public void onSubscribed(Subscription sub, SubscribedEvent event) {\n        System.out.println(\"subscribed to \" + sub.getChannel());\n    }\n    @Override\n    public void onSubscribing(Subscription sub, SubscribingEvent event) {\n        System.out.printf(\"subscribing \" + sub.getChannel());\n    }\n    @Override\n    public void onUnsubscribed(Subscription sub, UnsubscribedEvent event) {\n        System.out.println(\"unsubscribed \" + sub.getChannel());\n    }\n};\n\nSubscription sub;\ntry {\n    sub = client.newSubscription(\"example\", subListener);\n    sub.subscribe();\n} catch (DuplicateSubscriptionException e) {\n    e.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications via Centrifugo API in Python\nDESCRIPTION: This Python snippet demonstrates how to send a push notification using the Centrifugo API from a backend service (likely Django, given `CDC.objects.create`). It constructs a payload targeting users subscribed to a specific chat room topic and uses Firebase Cloud Messaging (FCM) for delivery, including notification content and a webpush link. The operation is queued using a Change Data Capture (CDC) mechanism.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npartition = hash(room_id)\npayload = {\n    \"recipient\": {\n        \"filter\": {\n            \"topics\": [f'chat:messages:{room_id}']\n        }\n    },\n    \"notification\": {\n        \"fcm\": {\n            \"message\": {\n                \"notification\": {\n                    \"title\": room_name,\n                    \"body\": broadcast_payload.get('data', {}).get('body', {}).get('content', '')\n                },\n                \"webpush\": {\n                  \"fcm_options\": {\n                    \"link\": f'http://localhost:9000/rooms/{room_id}'\n                  }\n                }\n            }\n        }\n    }\n}\nCDC.objects.create(method='send_push_notification', payload=payload, partition=partition)\n```\n\n----------------------------------------\n\nTITLE: Initializing React + TypeScript App with Vite - bash\nDESCRIPTION: This snippet creates a new React and TypeScript application using Vite via npm. It requires Node.js v18 or above and guides the user to select the appropriate template and name the app during the interactive process. Output is a bootstrapped frontend directory ready for dependency installation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Leave Room View in Django/DRF\nDESCRIPTION: This Python snippet defines a DRF `APIView` named `LeaveRoomView` to handle POST requests for a user to leave a room. It requires authentication and uses an atomic transaction with row locking (`select_for_update`) on the `Room` object. It increments the room's version. It retrieves the existing `RoomMember` record for the user and room using `get_object_or_404`. It calculates the member count *before* deletion (assuming `get_room_member_channels` reflects the state before deletion), updates the room object's transient `member_count`, deletes the membership record, serializes the deleted object's data using `RoomMemberSerializer`, and returns it with a 200 OK status.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass LeaveRoomView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    @transaction.atomic\n    def post(self, request, room_id):\n        room = Room.objects.select_for_update().get(id=room_id)\n        room.increment_version()\n        channels = self.get_room_member_channels(room_id)\n        obj = get_object_or_404(RoomMember, user=request.user, room=room)\n        obj.room.member_count = len(channels) - 1\n        pk = obj.pk\n        obj.delete()\n        body = RoomMemberSerializer(obj).data\n        return Response(body, status=status.HTTP_200_OK)\n```\n\n----------------------------------------\n\nTITLE: Generating Connection JWT with Expiration Claim - Python\nDESCRIPTION: This Python snippet shows how to generate a JWT with a custom 'sub' and 'exp' claim, where 'exp' determines token expiration 10 minutes from now. It relies on the PyJWT package for encoding and the standard time module to compute the expiry timestamp. The output token string should be sent to a Centrifugo client for authentication, and the snippet highlights the use of the 'HS256' algorithm. Replace 'secret' with your configured 'token_hmac_secret_key'.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\\nimport time\\n\\ntoken = jwt.encode({\\\"sub\\\": \\\"42\\\", \\\"exp\\\": int(time.time()) + 10*60}, \\\"secret\\\", algorithm=\\\"HS256\\\")\\n\\nprint(token)\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Connect Proxy Endpoint (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the connect proxy in Centrifugo's `config.json`. It sets the `proxy_connect_endpoint` to the URL of the backend handler (`http://localhost:3000/centrifugo/connect`) and specifies a `proxy_connect_timeout` of 1 second. When these options are set, Centrifugo will forward connection requests (without JWT) to this endpoint for authentication and processing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  ...\n  \"proxy_connect_endpoint\": \"http://localhost:3000/centrifugo/connect\",\n  \"proxy_connect_timeout\":  \"1s\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Broker Address in Centrifugo (JSON)\nDESCRIPTION: Demonstrates how to configure the connection details for a Redis broker within the `broker.redis` object in `config.json`. The `address` field specifies the Redis server URI. This configuration assumes the Redis broker is already enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"broker\": {\n    \"enabled\": true,\n    \"type\": \"redis\"\n    \"redis\": {\n      \"address\": \"redis://...\"\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with uni_http_stream - Bash\nDESCRIPTION: This snippet demonstrates enabling the uni_http_stream transport and starting the Centrifugo server by setting an environment variable and specifying the configuration file. The only requirement is a valid Centrifugo installation and an appropriate config.json present in the working directory. The environment variable enables HTTP streaming necessary for subsequent connection commands. The command must be run before establishing stream connections in further steps.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_connections.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_UNI_HTTP_STREAM=1 centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Publishing Message Using CURL\nDESCRIPTION: CURL command example for publishing a message through Centrifugo's HTTP API.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"info\", \"params\": {}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Defining Room List Serializers in Django Rest Framework\nDESCRIPTION: This snippet defines serializers for user, last message, and room list, including nested serialization for related objects.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username']\n\n\nclass LastMessageSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n\n    class Meta:\n        model = Message\n        fields = ['id', 'content', 'user', 'created_at']\n\nclass RoomSerializer(serializers.ModelSerializer):\n    member_count = serializers.SerializerMethodField()\n    last_message = LastMessageSerializer(read_only=True)\n\n    def get_member_count(self, obj):\n        return obj.member_count\n\n    class Meta:\n        model = Room\n        fields = ['id', 'name', 'version', 'member_count', 'last_message']\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Configuration File via CLI (bash)\nDESCRIPTION: This command invokes the Centrifugo CLI to generate a default configuration file (config.json) in the working directory. No dependencies are required except the Centrifugo binary. Running this prepares the server for further customization; the output is a JSON file containing sensitive keys and application secrets.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Validating Centrifugo Configuration File Using Bash CLI\nDESCRIPTION: Checks the validity of a Centrifugo configuration file (here, 'config.json'). If validation fails, it exits with an error and exit code 1. Requires Centrifugo installed, with '--config' specifying the config file path. Useful in CI/CD or before starting the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/console_commands.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo checkconfig --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Unsubscribe Code 2000 (Server Unsubscribe)\nDESCRIPTION: Defines the 'Server Unsubscribe' code (2000) sent when an unsubscribe is initiated by an explicit server-side API call (e.g., `unsubscribe` RPC). Clients receiving this code will transition to an unsubscribed state and will not automatically attempt to resubscribe.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nCode:   2000\nReason: \"server unsubscribe\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Error Limits in Centrifugo PRO - JSON\nDESCRIPTION: Defines error rate limiting for individual client connections in Centrifugo PRO by configuring in-memory buckets in a JSON configuration file. The configuration enables client error limits, setting a total error rate policy with specified buckets (e.g., 20 errors per 5 seconds), causing Centrifugo PRO to disconnect clients that exceed these limits, advising SDKs not to reconnect. Requires Centrifugo PRO with error limit functionality enabled; the 'client_error_limits' section's parameters must be filled based on server policy. Inputs: JSON config file. Outputs: Active enforcement of per-client error limits. Limitations: Does not count internal errors toward these limits.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/throttling.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"client_error_limits\": {\n        \"enabled\": true,\n        \"total\": {\n            \"buckets\" : [\n                {\n                    \"interval\": \"5s\",\n                    \"rate\": 20\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Capabilities with Wildcard Matching\nDESCRIPTION: Using wildcards in channel names to grant permissions to multiple channels matching a pattern. This example allows subscription to all channels in the 'news' namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/capabilities.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news:*\"],\n            \"match\": \"wildcard\",\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Chat State Configuration\nDESCRIPTION: Definition of the initial state structure for the chat application using React reducer\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialChatState = {\n  rooms: [],\n  roomsById: {},\n  messagesByRoomId: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Creating JWT with Channel Capabilities for Centrifugo Using jose (JavaScript)\nDESCRIPTION: This JavaScript snippet (Node.js) creates a JWT with defined channel capabilities in the 'caps' field for customizing access control in Centrifugo. It leverages the 'jose' library for JWT creation, setting headers, expiration, user subject, and channel permissions. Parameters include the channel configuration in 'caps' and the expiration time. Designed for Node.js environments with async/await support, and outputs the generated JWT to the console. Requires 'jose' as a dependency and Centrifugo PRO for utilizing channel-level capabilities.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst jose = require('jose');\n\n(async function main() {\n  const secret = new TextEncoder().encode('secret')\n  const alg = 'HS256'\n\n  const token = await new jose.SignJWT({\n    sub: '17',\n    caps: [\n      {\n        \"channels\": [\"personal:17\"],\n        \"allow\": [\"sub\"]\n      }\n    ]\n  })\n    .setProtectedHeader({ alg })\n    .setExpirationTime('30m')\n    .sign(secret)\n\n  console.log(token);\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Consumer with Notification Channel - JavaScript/JSON\nDESCRIPTION: This JSON configuration demonstrates how to set up a PostgreSQL async consumer with Centrifugo, including the optional partition_notification_channel for LISTEN/NOTIFY support. The channel name tells Centrifugo which PostgreSQL notification to listen for to trigger immediate consumption. Inputs: configuration JSON; Output: Centrifugo consumer with instant notification. Dependencies: PostgreSQL triggers, correct channel name.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/consumers.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"consumers\": [\n    {\n      \"name\": \"my_postgresql_consumer\",\n      \"type\": \"postgresql\",\n      \"postgresql\": {\n        ...\n        \"partition_notification_channel\": \"centrifugo_partition_change\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel Connection in Centrifugo - JSON\nDESCRIPTION: Provides Centrifugo configuration to connect to a Redis instance through Sentinel for high availability. The 'address' uses the 'redis+sentinel' scheme and includes the required 'sentinel_master_name' query parameter. No other dependencies are required beyond Centrifugo and a working Sentinel deployment. Input: address string. Output: Centrifugo connects to Redis using Sentinel for failover handling. Assumes Redis Sentinel config and quorum are pre-set.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"redis+sentinel://localhost:26379?sentinel_master_name=mymaster\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chat Room List Component Implementation\nDESCRIPTION: React component for rendering the list of chat rooms with room details and navigation\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ChatRoomList = () => {\n  const { state } = useContext(ChatContext);\n\n  return (\n    <div id=\"chat-rooms\">\n      {state.rooms.map((roomId: number) => {\n        const room = state.roomsById[roomId]\n        return <div className=\"chat-room-block\" key={room.id}>\n          <Link to={`/rooms/${room.id}`}>\n            <div className=\"left-column\">\n              <span className=\"name\">{room.name}</span>\n              <span className=\"message-content\">\n                {room.last_message? (\n                  <span>\n                    <span className='message-content-author'>{room.last_message.user.username}:</span>\n                    &nbsp;\n                    {room.last_message.content}\n                  </span>\n                ) : (<></>)}\n              </span>\n            </div>\n            <div className=\"right-column\">\n              <span className=\"chat-room-member-counter\">{room.member_count}&nbsp;<span className=\"chat-room-member-counter-icon\">üêà</span></span>\n            </div>\n          </Link>\n        </div>\n      })}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Subscription Capabilities in Subscription JWT\nDESCRIPTION: Example of setting subscription-level capabilities in a JWT token to allow publishing, history and presence capabilities for a specific channel subscription.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/capabilities.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allow\": [\"pub\", \"hst\", \"prs\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Configuration\nDESCRIPTION: Command to generate a minimal required configuration file for Centrifugo using the genconfig helper command.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Defining the Distributed `connections_distributed` Table Schema in ClickHouse (SQL)\nDESCRIPTION: This SQL snippet shows the `CREATE TABLE` statement for the `centrifugo.connections_distributed` table. This table acts as a distributed layer over the replicated `connections` tables within the `centrifugo_cluster`. It uses the `Distributed` engine, specifying the cluster, database (`centrifugo`), underlying table (`connections`), and the sharding key (`murmurHash3_64(client)`) to route queries and distribute data effectively across the cluster.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nSHOW CREATE TABLE centrifugo.connections_distributed;\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.connections_distributed\n(\n    `client` String,\n    `user` String,\n    `name` String,\n    `version` String,\n    `transport` String,\n    `headers` Map(String, Array(String)),\n    `metadata` Map(String, Array(String)),\n    `time` DateTime\n)\nENGINE = Distributed('centrifugo_cluster', 'centrifugo', 'connections', murmurHash3_64(client)) ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Chat Application URL Patterns in Django\nDESCRIPTION: This Python snippet defines the URL patterns for the `chat` Django application in a `urls.py` file. It uses `django.urls.path` to map specific URL endpoints (e.g., '/rooms/', '/rooms/<int:pk>/', '/search/', '/rooms/<int:room_id>/messages/') to the corresponding DRF viewsets and views (`RoomListViewSet`, `RoomDetailViewSet`, `RoomSearchViewSet`, `MessageListCreateAPIView`, `JoinRoomView`, `LeaveRoomView`). It specifies the allowed HTTP methods for viewset actions (e.g., {'get': 'list'}).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom .views import RoomListViewSet, RoomDetailViewSet, RoomSearchViewSet, \\\n    MessageListCreateAPIView, JoinRoomView, LeaveRoomView\n\n\nurlpatterns = [\n    path('rooms/', RoomListViewSet.as_view({'get': 'list'}), name='room-list'),\n    path('rooms/<int:pk>/', RoomDetailViewSet.as_view({'get': 'retrieve'}), name='room-detail'),\n    path('search/', RoomSearchViewSet.as_view({'get': 'list'}), name='room-search'),\n    path('rooms/<int:room_id>/messages/', MessageListCreateAPIView.as_view(), name='room-messages'),\n    path('rooms/<int:room_id>/join/', JoinRoomView.as_view(), name='join-room'),\n    path('rooms/<int:room_id>/leave/', LeaveRoomView.as_view(), name='leave-room')\n]\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token for Centrifugo User via CLI (bash)\nDESCRIPTION: This command calls the Centrifugo gentoken subcommand to generate a valid HMAC SHA-256 JWT for a specified user (set by the -u flag). The generated token authenticates browser clients to Centrifugo and must be kept secret. No external dependencies required except the Centrifugo binary.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo gentoken -u 123722\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Engine in Centrifugo v6 (YAML)\nDESCRIPTION: Example YAML configuration (`config.yaml`) demonstrating the simplified structure for configuring the engine in Centrifugo v6. This snippet sets the engine `type` to `redis` and specifies the `address` for the Redis connection. This configuration implies using Redis for both the Broker and Presence Manager components, which remains the default recommendation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nengine:\n  type: redis\n  redis:\n    address: localhost:6379\n```\n\n----------------------------------------\n\nTITLE: Adding Gunicorn-based Django Backend Service in Docker Compose - YAML\nDESCRIPTION: Defines a Docker Compose service for building and running the Django backend app using Gunicorn. Mounts the backend code as a volume, exposes port 8000, and sets dependency on the PostgreSQL database to wait until healthy. Requires Docker, Python, and Gunicorn.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbackend:\\n  build: ./backend\\n  volumes:\\n    - ./backend:/usr/src/app\\n  expose:\\n    - 8000\\n  depends_on:\\n    db:\\n      condition: service_healthy\n```\n\n----------------------------------------\n\nTITLE: Configuring HMS Push Notifications - Centrifugo PRO - JSON\nDESCRIPTION: This JSON snippet enables HMS as the push notification provider in Centrifugo PRO. It requires enabling the database (PostgreSQL for token storage), Redis configuration for queueing, and setting up 'hms' in the 'enabled_providers' array. The HMS section expects 'app_id' and 'app_secret' fields with credentials from your HMS Push Kit setup. Ensure all fields are correctly specified and that the Redis and PostgreSQL services are running.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"database\": {\\n    \"enabled\": true,\\n    \"postgresql\": {\\n      \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\\n    }\\n  },\\n  \"push_notifications\": {\\n    \"queue\": {\\n      \"redis\": {\\n        \"address\": \"localhost:6379\"\\n      }\\n    },\\n    \"enabled_providers\": [\\n      \"hms\"\\n    ],\\n    \"hms\": {\\n      \"app_id\": \"<your_app_id>\",\\n      \"app_secret\": \"<your_app_secret>\"\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Presence from Client-Side Subscription (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to retrieve presence information from the client side using the Centrifugo JavaScript SDK. It calls the 'presence' method on an existing 'subscription' object for a specific channel. This requires the client to have permission to call presence for the channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/presence.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.presence(channel);\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages through Application Backend in Centrifugo\nDESCRIPTION: Diagram showing the flow of publishing messages where client sends data to the application backend. The backend validates and processes the data, then publishes it to Centrifugo's API, which delivers real-time notifications to active channel subscribers.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/flow_diagrams.md#2025-04-23_snippet_2\n\nLANGUAGE: swimlanes.io\nCODE:\n```\nClient -> App Backend: Publish request\n\nnote:\nClient sends data to publish to the application backend.\n\nBackend validates it, maybe modifies, optionally saves to the main database, constructs real-time update and publishes it to the Centrifugo server API.\n\nApp Backend -> Centrifugo: Publish over Centrifugo API\n\nCentrifugo -->> Client: {far-bolt fa-lg} Real-time notification\n\nnote: Centrifugo delivers real-time message to active channel subscribers.\n```\n\n----------------------------------------\n\nTITLE: Generating Simple Connection JWT in Python and Node.js\nDESCRIPTION: Code examples in Python and Node.js for generating the simplest possible JWT token for Centrifugo authentication, containing only the subject claim.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/authentication.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\n\ntoken = jwt.encode({\"sub\": \"42\"}, \"secret\").decode()\n\nprint(token)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar jwt = require('jsonwebtoken');\n\nvar token = jwt.sign({ sub: '42' }, 'secret');\n\nconsole.log(token);\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Streaming in Centrifugo Configuration (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable the HTTP streaming transport in Centrifugo by setting the `enabled` flag to `true` within the `http_stream` object in the `config.json` file. This activates the `/connection/http_stream` endpoint and the required `/emulation` endpoint for bidirectional support.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/http_stream.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=config.json\n{\n  \"http_stream\": {\n    \"enabled\": true\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Python 3's http.server (Bash)\nDESCRIPTION: Uses Python 3's built-in HTTP server module to serve the current directory on port 3000. Requires Python 3 to be installed in the environment. Useful alternative for static file serving during local development.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m http.server 3000\n```\n\n----------------------------------------\n\nTITLE: Instantiating Centrifuge Client with JWT Token (JavaScript)\nDESCRIPTION: This JavaScript snippet shows the instantiation of a Centrifuge client, providing the WebSocket endpoint and a valid JWT token for authentication. This step is required for secure client-server communication; the token must be generated server-side and passed securely to the client. Change the \"token\" value for each user/session.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\", {\n    token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM3MjIiLCJleHAiOjE2NTU0NDgyOTl9.mUU9s5kj3yqp-SAEqloGy8QBgsLg0llA7lKUNwtHRnw\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Push Message Structure (Protobuf)\nDESCRIPTION: Protobuf definition for the `Push` message type. This structure encapsulates various asynchronous events (like publications, joins, leaves, connects, disconnects) sent from the Centrifugo server to the client over a unidirectional connection. Each `Push` message contains exactly one of the optional fields.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Push {\n  string channel = 2;\n\n  Publication pub = 4;\n  Join join = 5;\n  Leave leave = 6;\n  Unsubscribe unsubscribe = 7;\n  Message message = 8;\n  Subscribe subscribe = 9;\n  Connect connect = 10;\n  Disconnect disconnect = 11;\n  Refresh refresh = 12;\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Users Subscribed to a Channel Recently in ClickHouse SQL\nDESCRIPTION: SQL query to count the approximate number of unique users subscribed to the 'chat:index' channel within the last 5 minutes. It queries the `centrifugo.subscriptions_distributed` table, using `arrayExists` to check the `channels` array and filtering by time. Includes example output.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(Distinct(user))\nFROM centrifugo.subscriptions_distributed\nWHERE arrayExists(x -> (x = 'chat:index'), channels) AND (time >= (now() - toIntervalMinute(5)));\n\n‚îå‚îÄuniqExact(user)‚îÄ‚îê\n‚îÇ             101 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Setting Centrifugo PRO License Key in Configuration (JSON)\nDESCRIPTION: This JSON snippet illustrates how to set the Centrifugo PRO license key within the main configuration file (e.g., `config.json`). The `license` field should be added at the top level of the JSON object, containing the specific license key string obtained commercially. This unlocks PRO features and removes sandbox limitations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/install_and_run.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ntitle=\"config.json\"\n{\n    ...\n    \"license\": \"<YOUR_LICENSE_KEY>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Centrifugo Configuration using HUP Signal\nDESCRIPTION: This bash command sends the HUP (Hang Up) signal to the Centrifugo process identified by `<PID>`. This triggers a partial configuration reload, specifically updating token secrets and channel options (top-level and namespaces).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nkill -HUP <PID>\n```\n\n----------------------------------------\n\nTITLE: Basic TOML Configuration for Centrifugo\nDESCRIPTION: Provides a template TOML configuration file for Centrifugo (config.toml), illustrating allowed origins, JWT HMAC secret, API key, and log level. Designed for deployment scenarios where TOML syntax is preferred. Requires Centrifugo (with TOML parsing support) and valid environment values. Inputs: options as direct TOML keys/arrays. Output: configuration upon server start.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\nallowed_origins: [ \"http://localhost:3000\" ]\ntoken_hmac_secret_key = \"<YOUR-SECRET-STRING-HERE>\"\napi_key = \"<YOUR-API-KEY-HERE>\"\nlog_level = \"debug\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Centrifugo Reverse Proxy - Nginx Configuration - nginx\nDESCRIPTION: This snippet configures Nginx to reverse proxy requests to a Centrifugo server hosted on a separate domain (e.g., centrifugo.example.com). It sets up an upstream server block, header modifications for WebSocket upgrades, and separate handling for '/connection' and general traffic to support WebSocket connections and standard HTTP requests. Required: Nginx 1.3.13+ and Centrifugo listening on localhost port 8000. Inputs are HTTP/WebSocket client connections; outputs are proxied to the Centrifugo backend. SSL and error handling are provided as commented sections. Limitations: To be used when Centrifugo is hosted on its own domain.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/load_balancing.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\n    server 127.0.0.1:8000;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\n#server {\n#\\tlisten 80;\n#\\tserver_name centrifugo.example.com;\n#\\trewrite ^(.*) https://$server_name$1 permanent;\n#}\n\nserver {\n    server_name centrifugo.example.com;\n\n    listen 80;\n\n    #listen 443 ssl;\n    #ssl_protocols TLSv1.2;\n    #ssl_certificate /etc/nginx/ssl/server.crt;\n    #ssl_certificate_key /etc/nginx/ssl/server.key;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # Only retry if there was a communication error, not a timeout\n    # on the Centrifugo server (to avoid propagating \"queries of death\"\n    # to all frontends)\n    proxy_next_upstream error;\n\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Scheme $scheme;\n    proxy_set_header Host $http_host;\n\n    location /connection {\n        proxy_pass http://centrifugo;\n        proxy_buffering off;\n        keepalive_timeout 65;\n        proxy_read_timeout 60s;\n        proxy_http_version 1.1;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n    }\n    \n    location / {\n        proxy_pass http://centrifugo;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single User Connection in Centrifugo\nDESCRIPTION: This JSON configuration enables automatic personal channel subscriptions and maintains a single connection per user across all Centrifugo nodes. It sets up a 'personal' namespace with presence enabled, which is required for the single connection feature to work.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_subs.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_subscribe_to_personal\": true,\n  \"user_personal_single_connection\": true,\n  \"user_personal_channel_namespace\": \"personal\",\n  \"namespaces\": [\n    {\n      \"name\": \"personal\",\n      \"presence\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo Binary - Shell\nDESCRIPTION: This command executes the Centrifugo server binary from the local directory. It assumes you have already downloaded and unpacked the appropriate binary for your system. The executable should have execution permissions and be run from the command line without additional arguments for basic startup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel State Events in Centrifugo PRO\nDESCRIPTION: Configuration example for enabling channel state events in Centrifugo PRO. Shows how to set up Redis engine and configure channel proxy state endpoint for a chat namespace with presence enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/channel_events.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\"\n  },\n  \"channel\": {\n    \"proxy\": {\n      \"state\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/channel_events\"\n      }\n    },\n    \"namespaces\": [\n      {\n        \"name\": \"chat\",\n        \"presence\": true,\n        \"state_proxy_enabled\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CDC Django Model for Change Data Capture in Python\nDESCRIPTION: Introduces a Django ORM model representing a CDC event record, specifying fields for method, payload, partition, and timestamp. This model is tailored for Debezium-based CDC integration, particularly the semantic distinction of the 'partition' field and message lifecycle (no deletion). The code requires Django configured with a PostgreSQL backend. The input parameters include the event method, payload (dict), and partition, with 'created_at' auto-populated. Each instance corresponds to a change event tracked for streaming into Kafka.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# While the CDC model here is the same as Outbox it has different partition field semantics,\n# also in outbox case we remove processed messages from DB, while in CDC don't. So to not\n# mess up with different semantics when switching between broadcast modes of the example app\n# we created two separated models here. \nclass CDC(models.Model):\n    method = models.TextField(default=\"publish\")\n    payload = models.JSONField()\n    partition = models.BigIntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n```\n\n----------------------------------------\n\nTITLE: Executing Info Command via HTTP API\nDESCRIPTION: Example of calling Centrifugo's info method using HTTP to get information about running nodes, including node names, channel counts, client counts, and version details.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"method\": \"info\", \"params\": {}}' | http \"localhost:8000/api\" Authorization:\"apikey KEY\"\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo Node with Redis Engine\nDESCRIPTION: Command line example for starting a Centrifugo node with Redis engine configuration on port 8000.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json --port=8000 --engine=redis --redis_address=127.0.0.1:6379\n```\n\n----------------------------------------\n\nTITLE: Querying Channel History in Centrifugo API (JSON)\nDESCRIPTION: This snippet shows the JSON structure for querying channel history using the Centrifugo API. It includes the method name, channel, and limit parameters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"history\",\n    \"params\": {\n        \"channel\": \"chat\",\n        \"limit\": 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Proxy Endpoint and Timeout in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet sets up the connect proxy feature. `proxy_connect_endpoint` specifies the backend URL to which Centrifugo will send an HTTP POST request when a client attempts to connect without a JWT. `proxy_connect_timeout` defines the maximum time Centrifugo will wait for a response from the backend.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  ...\n  \"proxy_connect_endpoint\": \"http://localhost:3000/centrifugo/connect\",\n  \"proxy_connect_timeout\":  \"1s\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo PostgreSQL Consumer (JSON)\nDESCRIPTION: JSON configuration snippet for Centrifugo, setting up a PostgreSQL consumer named 'postgresql'. It specifies the database connection string (`dsn`), the outbox table name (`outbox_table_name`), the number of partitions for parallel processing (`num_partitions`), the polling interval (`partition_poll_interval`), and optionally the notification channel for LISTEN/NOTIFY (`partition_notification_channel`). This initial configuration uses polling.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"consumers\": [\n    {\n      \"enabled\": true,\n      \"name\": \"postgresql\",\n      \"type\": \"postgresql\",\n      \"postgresql\": {\n        \"dsn\": \"postgresql://grandchat:grandchat@db:5432/grandchat\",\n        \"outbox_table_name\": \"chat_outbox\",\n        \"num_partitions\": 1,\n        \"partition_select_limit\": 100,\n        \"partition_poll_interval\": \"300ms\",\n        \"partition_notification_channel\": \"centrifugo_partition_change\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SockJS Connection Endpoint for Centrifugo - (No Language)\nDESCRIPTION: This snippet specifies the URL path ('/connection/sockjs') clients must use to connect to Centrifugo via the SockJS transport. It is used as the connection endpoint by browser clients utilizing SockJS as a fallback transport. No dependencies are required beyond having Centrifugo running with SockJS enabled; this is purely a configuration detail for client libraries.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/sockjs.md#2025-04-23_snippet_1\n\nLANGUAGE: \nCODE:\n```\n/connection/sockjs\n```\n\n----------------------------------------\n\nTITLE: Adding Kafka and Kafka Connect Services in Docker Compose (YAML)\nDESCRIPTION: Adds Zookeeper, Kafka, and Kafka Connect (using the Debezium image) services to the `docker-compose.yml` file. It configures necessary environment variables for Kafka broker setup, advertised listeners, and replication factors. The Kafka Connect service is configured with its bootstrap servers and storage topics, and depends on the database and Kafka services being healthy.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nzookeeper:\n  image: confluentinc/cp-zookeeper:latest\n  environment:\n    ZOOKEEPER_CLIENT_PORT: 2181\n    ZOOKEEPER_TICK_TIME: 2000\n\nkafka:\n  image: confluentinc/cp-kafka:latest\n  depends_on:\n    - zookeeper\n  ports:\n    - \"29092:29092\"\n  expose:\n    - 9092\n  healthcheck:\n    test: [\"CMD\", \"kafka-topics\", \"--list\", \"--bootstrap-server\", \"localhost:9092\"]\n    interval: 2s\n    timeout: 5s\n    retries: 10\n  environment:\n    KAFKA_BROKER_ID: 1\n    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092\n    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT\n    KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT\n    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n    KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1\n    KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\n    KAFKA_MAX_REQUEST_SIZE: \"10485760\"  # max.request.size\n    KAFKA_MESSAGE_MAX_BYTES: \"10485760\" # message.max.bytes\n    KAFKA_MAX_PARTITION_FETCH_BYTES: \"10485760\" # max.partition.fetch.bytes\n\nconnect:\n  image: debezium/connect:latest\n  depends_on:\n    db:\n      condition: service_healthy\n    kafka:\n      condition: service_healthy\n  ports:\n    - \"8083:8083\"\n  environment:\n    BOOTSTRAP_SERVERS: kafka:9092\n    GROUP_ID: 1\n    CONFIG_STORAGE_TOPIC: connect_configs\n    OFFSET_STORAGE_TOPIC: connect_offsets\n    STATUS_STORAGE_TOPIC: connect_statuses\n```\n\n----------------------------------------\n\nTITLE: Adding Rooms to State with Reducer in React (JavaScript)\nDESCRIPTION: This reducer case is responsible for adding new rooms to the chat state in an efficient and non-duplicating way. It updates the roomsById mapping, merges and sorts rooms by last activity (bumped_at), and avoids duplicating room entries. Dependency on consistent room objects (must have id and bumped_at fields); outputs the new state structure ready for rendering room lists.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncase 'ADD_ROOMS': {\n  const newRooms = action.payload.rooms;\n\n  // Update roomsById with new rooms, avoiding duplicates.\n  const updatedRoomsById = { ...state.roomsById };\n  newRooms.forEach((room: any) => {\n    if (!updatedRoomsById[room.id]) {\n      updatedRoomsById[room.id] = room;\n    }\n  });\n\n  // Merge new room IDs with existing ones, filtering out duplicates.\n  const mergedRoomIds = [...new Set([...newRooms.map((room: any) => room.id), ...state.rooms])];\n\n  // Sort mergedRoomIds based on bumped_at field in updatedRoomsById.\n  const sortedRoomIds = mergedRoomIds.sort((a, b) => {\n    const roomA = updatedRoomsById[a];\n    const roomB = updatedRoomsById[b];\n    // Compare RFC 3339 date strings directly\n    return roomB.bumped_at.localeCompare(roomA.bumped_at);\n  });\n\n  return {\n    ...state,\n    roomsById: updatedRoomsById,\n    rooms: sortedRoomIds\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic JWKS Endpoint Matching with Regex and Template (JSON)\nDESCRIPTION: This JSON snippet illustrates Centrifugo configuration for dynamic JWKS endpoint construction based on variables extracted from JWT issuer claims via regex. The 'token_issuer_regex' defines a regex with a named group, while 'token_jwks_public_endpoint' is templated to substitute the extracted value at runtime. This enables flexible, claim-driven JWK key fetching for validating JWTs across multiple issuers or realms. The file must reside in Centrifugo config and is not executable code.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"token_issuer_regex\": \"https://example.com/auth/realms/(?P<realm>[A-z]+)\",\\n  \"token_jwks_public_endpoint\": \"https://keycloak:443/{{realm}}/protocol/openid-connect/certs\",\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Generating a User JWT Token for Centrifugo (Bash)\nDESCRIPTION: This Bash command demonstrates executing a Go program (`main.go`) with the `gentoken` subcommand to generate an HMAC SHA-256 JWT (JSON Web Token) for a specific user (`user12`). This token is required for authenticating the user when connecting to Centrifugo, particularly via unidirectional streams. The output shows the generated token string.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_http_stream.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n‚ùØ go run main.go gentoken -u user12\nHMAC SHA-256 JWT for user user12 with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIiLCJleHAiOjE2MjUwNzMyODh9.BxmS4R-X6YXMxLfXNhYRzeHvtu_M2NCaXF6HNu7VnDM\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence via Centrifugo HTTP API - JSON\nDESCRIPTION: This JSON request shows how to query online presence information for a specified channel using the 'presence' method. The \"channel\" parameter must be set to the target channel name (e.g., 'chat'). Send as the body of an authenticated HTTP POST to Centrifugo's API. Response includes details of all clients currently subscribed to the channel, mapped by client ID, or an empty map if none are present.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"presence\",\n    \"params\": {\n        \"channel\": \"chat\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Centrifugo Connection and Subscription in Go\nDESCRIPTION: Go example showing how to connect to a Centrifugo server, create a subscription to a channel, and handle publications. Demonstrates error handling and event callbacks in the Go SDK.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nclient := centrifuge.NewJsonClient(\n    \"ws://localhost:8000/connection/websocket\",\n    centrifuge.Config{},\n)\n// defer client.Close()\n\nsub, err := client.NewSubscription(\"example\")\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nsub.OnPublication(func(e centrifuge.PublicationEvent) {\n\tlog.Printf(\"Publication from channel\")\n})\n\nerr = sub.Subscribe()\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nif err = client.connect(); err != nil {\n    log.Fatalln(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Data to Channel using JSON Command Structure - JSON\nDESCRIPTION: This JSON object demonstrates constructing a 'publish' command for Centrifugo's HTTP API. The 'method' is set to 'publish' and the 'params' include the target channel name and the data payload (here, a chat message). This structure is sent as the HTTP request body when publishing messages to a channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"publish\",\n    \"params\": {\n        \"channel\": \"chat\", \n        \"data\": {\n            \"text\": \"hello\"\n        }\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ECDSA Public Key in Centrifugo\nDESCRIPTION: JSON configuration for setting the ECDSA public key (PEM encoded) for JWT authentication in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token_ecdsa_public_key\": \"-----BEGIN PUBLIC KEY-----\\nxyz23adf...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Room Member Count on Event - Redux Reducer - JavaScript\nDESCRIPTION: This Redux reducer snippet updates a room's member count and version based on external membership events, enforcing that only events with a higher version than the current state are applied. It expects an action payload containing roomId, version, and memberCount, checks that the room exists and that the version is current, and then immutably updates the relevant room in the roomsById state. This snippet is designed to be robust against out-of-order or outdated events, and returns the previous state if no update is performed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ncase 'SET_ROOM_MEMBER_COUNT': {\n  const { roomId, version, memberCount } = action.payload;\n\n  // Check if the roomId exists in roomsById.\n  if (!state.roomsById[roomId]) {\n    console.error(`Room with ID ${roomId} not found.`);\n    return state;\n  }\n\n  // Check if the version in the event is greater than the version in the room object.\n  if (version <= state.roomsById[roomId].version) {\n    console.error(`Outdated version for room ID ${roomId}.`);\n    return state;\n  }\n\n  // Update the member_count and version of the specified room.\n  const updatedRoom = {\n    ...state.roomsById[roomId],\n    member_count: memberCount,\n    version: version,\n  };\n\n  // Return the new state with the updated roomsById.\n  return {\n    ...state,\n    roomsById: {\n      ...state.roomsById,\n      [roomId]: updatedRoom,\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Third Centrifugo Node\nDESCRIPTION: Command line example for starting a third Centrifugo node on port 8002 connected to the same Redis instance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json --port=8002 --engine=redis --redis_address=127.0.0.1:6379\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Configuration with genconfig Command\nDESCRIPTION: Command to automatically generate a minimal Centrifugo configuration file (config.json) with required fields like token_hmac_secret_key and api_key.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/integration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: GRPC API Client for Go\nDESCRIPTION: Example Go code for creating a GRPC client that publishes messages to a Centrifugo channel. This implementation demonstrates connection setup, error handling, and periodic publishing to a channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n\n    \"centrifugo_example/apiproto\"\n\n    \"google.golang.org/grpc\"\n)\n\nfunc main() {\n    conn, err := grpc.Dial(\"localhost:10000\", grpc.WithInsecure())\n    if err != nil {\n        log.Fatalln(err)\n    }\n    defer conn.Close()\n    client := apiproto.NewCentrifugoApiClient(conn)\n    for {\n        resp, err := client.Publish(context.Background(), &apiproto.PublishRequest{\n            Channel: \"chat:index\",\n            Data:    []byte(`{\"input\": \"hello from GRPC\"}`),\n        })\n        if err != nil {\n            log.Printf(\"Transport level error: %v\", err)\n        } else {\n            if resp.GetError() != nil {\n                respError := resp.GetError()\n                log.Printf(\"Error %d (%s)\", respError.Code, respError.Message)\n            } else {\n                log.Println(\"Successfully published\")\n            }\n        }\n        time.Sleep(time.Second)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Override Claim in Centrifugo Subscription JWT (JSON)\nDESCRIPTION: Provides an example of using the `override` claim within a Centrifugo subscription JWT to disable presence information for a specific subscriber. It utilizes the `BoolValue` structure for the `presence` field.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channel_token_auth.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"override\": {\n        \"presence\": {\n            \"value\": false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Representing the TCP Connection Tuple\nDESCRIPTION: This text represents the 4-tuple (source IP, source port, destination IP, destination port) that uniquely identifies a TCP connection within the operating system. Understanding this is crucial for diagnosing ephemeral port exhaustion, as the number of available source ports limits connections between two specific IPs (like a load balancer and a Centrifugo instance). This is a conceptual representation, not executable code.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/infra_tuning.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nsource ip | source port | destination ip | destination port\n```\n\n----------------------------------------\n\nTITLE: Defining Room Search Serializer in Django Rest Framework\nDESCRIPTION: This snippet creates a serializer for room search results using Django Rest Framework. It includes fields for room details and a boolean indicating user membership.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass RoomSearchSerializer(serializers.ModelSerializer):\n\n    is_member = serializers.BooleanField(read_only=True)\n    \n    class Meta:\n        model = Room\n        fields = ['id', 'name', 'created_at', 'updated_at', 'is_member']\n```\n\n----------------------------------------\n\nTITLE: Handling Server-Side Publications with centrifuge-js (JavaScript)\nDESCRIPTION: Shows how to use the `centrifuge-js` library to listen for publications on server-side subscribed channels using the top-level `publication` event handler. The callback context provides the channel name (`ctx.channel`) and data (`ctx.data`). This approach bypasses the need for explicit client-side `subscribe` calls for these channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_subs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst centrifuge = new Centrifuge(address);\n\ncentrifuge.on('publication', function(ctx) {\n    const channel = ctx.channel;\n    const payload = JSON.stringify(ctx.data);\n    console.log('Publication from server-side channel', channel, payload);\n});\n\ncentrifuge.connect();\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3005 (Connection Expired)\nDESCRIPTION: Defines the 'Connection Expired' disconnect code (3005). This is a non-terminal code issued when the client's overall connection duration or inactivity timer expires based on server configuration. Clients are expected to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nCode:   3005\nReason: \"connection expired\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL and Kafka Services for CDC in Docker Compose YAML\nDESCRIPTION: Defines and customizes Docker Compose services for PostgreSQL (with logical replication enabled), Zookeeper, Kafka, and Kafka Connect. It sets specific environment variables, health checks, port mappings, and command options required for proper CDC operation. Dependencies include Docker Compose and relevant images (postgres:15, confluentinc/cp-kafka, confluentinc/cp-zookeeper, debezium/connect). Users must ensure required volume mounts and proper environment variable values (user, password, etc.) are configured. The output is a multi-service YAML definition enabling seamless CDC pipeline initialization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  image: postgres:15\n  volumes:\n    - ./postgres_data:/var/lib/postgresql/data/\n  healthcheck:\n    test: [ \"CMD\", \"pg_isready\", \"-U\", \"grandchat\" ]\n    interval: 1s\n    timeout: 5s\n    retries: 10\n  environment:\n    - POSTGRES_USER=grandchat\n    - POSTGRES_PASSWORD=grandchat\n    - POSTGRES_DB=grandchat\n  expose:\n    - 5432\n  ports:\n    - 5432:5432\n  command: [\"postgres\", \"-c\", \"wal_level=logical\", \"-c\", \"wal_writer_delay=10ms\"]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nzookeeper:\n  image: confluentinc/cp-zookeeper:latest\n  environment:\n    ZOOKEEPER_CLIENT_PORT: 2181\n    ZOOKEEPER_TICK_TIME: 2000\n\nkafka:\n  image: confluentinc/cp-kafka:latest\n  depends_on:\n    - zookeeper\n  ports:\n    - \"29092:29092\"\n  expose:\n    - 9092\n  healthcheck:\n    test: [\"CMD\", \"kafka-topics\", \"--list\", \"--bootstrap-server\", \"localhost:9092\"]\n    interval: 2s\n    timeout: 5s\n    retries: 10\n  environment:\n    KAFKA_BROKER_ID: 1\n    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092\n    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT\n    KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT\n    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n    KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1\n    KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\n    KAFKA_MAX_REQUEST_SIZE: \"10485760\"  # max.request.size\n    KAFKA_MESSAGE_MAX_BYTES: \"10485760\" # message.max.bytes\n    KAFKA_MAX_PARTITION_FETCH_BYTES: \"10485760\" # max.partition.fetch.bytes\n\nconnect:\n  image: debezium/connect:latest\n  depends_on:\n    db:\n      condition: service_healthy\n    kafka:\n      condition: service_healthy\n  ports:\n    - \"8083:8083\"\n  environment:\n    BOOTSTRAP_SERVERS: kafka:9092\n    GROUP_ID: 1\n    CONFIG_STORAGE_TOPIC: connect_configs\n    OFFSET_STORAGE_TOPIC: connect_offsets\n    STATUS_STORAGE_TOPIC: connect_statuses\n```\n\nLANGUAGE: yaml\nCODE:\n```\nconnect-config-loader:\n  image: appropriate/curl:latest\n  depends_on:\n    - connect\n  volumes:\n    - ./debezium/debezium-config.json:/debezium-config.json\n  command: >\n    /bin/sh -c \"\n      echo 'Waiting for Kafka Connect to start...';\n      while ! curl -f http://connect:8083/connectors; do sleep 1; done;\n      echo 'Kafka Connect is up, posting configuration';\n      curl -X DELETE -H 'Content-Type: application/json' http://connect:8083/connectors/chat-connector;\n      curl -X POST -H 'Content-Type: application/json' -v --data @/debezium-config.json http://connect:8083/connectors;\n      echo 'Configuration posted';\n    \"\n```\n\n----------------------------------------\n\nTITLE: Using Templating for Personalized Push Notification Titles in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet illustrates how to use Go templating within a push notification payload sent via Centrifugo. It demonstrates personalizing the `title` field using device metadata (`.device.meta.first_name`). To enable this, the `use_templating` flag must be set to `true` in the `send_push_notification` request, and `use_meta` must also be `true` to access device metadata within the template. Without `use_meta`, only `.device.id` and `.device.user` variables are available.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/push_notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  ..\n  \"title\": \"Hello {{.device.meta.first_name}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting with Subscription Recovery (Bash)\nDESCRIPTION: Example `curl` command for initiating a unidirectional HTTP streaming connection while also providing initial subscription details. The JSON payload includes a connection `token` and a `subs` map specifying channel subscriptions with recovery parameters (`recover`, `offset`, `epoch`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/connection/uni_http_stream -d \\\n  '{\"token\": \"<JWT>\", \"subs\": {\"user#2694\": {\"recover\": true, \"offset\": 12, \"epoch\": \"xD5R\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins for Centrifugo (JSON Array Syntax)\nDESCRIPTION: Demonstrates setting allowed_origins as an array of strings in JSON, suitable for insertion within a Centrifugo JSON configuration file. Necessary for properly configuring CORS and security. No dependencies beyond the config system. Input: list of origins. Output: array recognized by Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\n    \"http://localhost:3000\"\n]\n```\n\n----------------------------------------\n\nTITLE: Updated Centrifugo Configuration with Allowed Origins (JSON)\nDESCRIPTION: Modified configuration to allow connections from localhost:3000.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/quickstart.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"allowed_origins\": [\"http://localhost:3000\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespaced Channel Options in Centrifugo JSON\nDESCRIPTION: This JSON snippet shows how to configure channel options within a specific namespace (`feed`) in a Centrifugo `config.json` file using the `namespaces` array. It applies settings like enabling presence, setting history size/TTL, forcing recovery, and granting broad permissions specifically to channels prefixed with `feed:`. This approach allows for granular control over different real-time features within an application.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channels.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    \"token_hmac_secret_key\": \"my-secret-key\",\n    \"api_key\": \"secret-api-key\",\n    \"namespaces\": [\n        {\n            \"name\": \"feed\",\n            \"presence\": true,\n            \"history_size\": 10,\n            \"history_ttl\": \"300s\",\n            \"force_recovery\": true,\n            \"allow_subscribe_for_client\": true,\n            \"allow_subscribe_for_anonymous\": true,\n            \"allow_publish_for_subscriber\": true,\n            \"allow_publish_for_anonymous\": true,\n            \"allow_history_for_subscriber\": true,\n            \"allow_history_for_anonymous\": true,\n            \"allow_presence_for_subscriber\": true,\n            \"allow_presence_for_anonymous\": true\n        }\n    ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Room Search Serializer in DRF\nDESCRIPTION: This Python snippet defines a Django REST Framework (DRF) serializer `RoomSearchSerializer` for the `Room` model. It specifies the fields to include in the serialized output: 'id', 'name', 'created_at', 'updated_at', and a read-only boolean field 'is_member'. This serializer is intended for use in the room search functionality to represent room data along with the user's membership status.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass RoomSearchSerializer(serializers.ModelSerializer):\n\n    is_member = serializers.BooleanField(read_only=True)\n    \n    class Meta:\n        model = Room\n        fields = ['id', 'name', 'created_at', 'updated_at', 'is_member']\n```\n\n----------------------------------------\n\nTITLE: Connecting via HTTP Streaming with Token (Bash)\nDESCRIPTION: Example `curl` command demonstrating how to initiate a unidirectional HTTP streaming connection to the default endpoint (`/connection/uni_http_stream`). It sends a POST request with a JSON body containing the connection JWT (`token`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/connection/uni_http_stream -d '{\"token\": \"<JWT>\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining Client Indication Constants and Structures with Go\nDESCRIPTION: Declares constants to enforce client indication maximum length and keys, and defines the ClientIndication struct for storing parsed origin and path values. No external dependencies are required, but the QUIC protocol specification should be referenced for context. This snippet provides the foundational types used for client indication handling throughout the server implementation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// client indication stream can not exceed 65535 bytes in length.\n// https://tools.ietf.org/html/draft-vvv-webtransport-quic-02#section-3.2\nconst maxClientIndicationLength = 65535\n\n// define known client indication keys.\ntype clientIndicationKey int16\n\nconst (\n\tclientIndicationKeyOrigin clientIndicationKey = 0\n\tclientIndicationKeyPath                       = 1\n)\n\n// ClientIndication container.\ntype ClientIndication struct {\n\t// Origin client indication value.\n\tOrigin string\n\t// Path client indication value.\n\tPath string\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence via HTTP API - Bash\nDESCRIPTION: This snippet demonstrates how to query online presence information for a specific Centrifugo channel (`chat:index`) using the HTTP API with a POST request. It requires an API key and a valid Centrifugo instance. The returned JSON contains information about all connected clients in the channel, including user ID, client ID, and custom connection info. The curl command must be run from a machine able to reach the Centrifugo API endpoint, and the user provided API key must be substituted for `<API_KEY>`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channels.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat:index\"}' \\\n  http://localhost:8000/api/presence\n{\n    \"result\": {\n        \"presence\": {\n            \"66fdf8d1-06f0-4375-9fac-db959d6ee8d6\": {\n                \"user\": \"2694\",\n                \"client\": \"66fdf8d1-06f0-4375-9fac-db959d6ee8d6\",\n                \"conn_info\": {\"name\": \"Alex\"}\n            },\n            \"d4516dd3-0b6e-4cfe-84e8-0342fd2bb20c\": {\n                \"user\": \"2694\",\n                \"client\": \"d4516dd3-0b6e-4cfe-84e8-0342fd2bb20c\",\n                \"conn_info\": {\"name\": \"Alex\"}\n            }\n            \"g3216dd3-1b6e-tcfe-14e8-1342fd2bb20c\": {\n                \"user\": \"56\",\n                \"client\": \"g3216dd3-1b6e-tcfe-14e8-1342fd2bb20c\",\n                \"conn_info\": {\"name\": \"Alice\"}\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3006 (Subscription Expired)\nDESCRIPTION: Defines the 'Subscription Expired' disconnect code (3006). This is a non-terminal code issued when a client's subscription expires (similar to unsubscribe code 2501, but resulting in full disconnect). Clients are expected to attempt reconnection and re-subscription with a potentially updated token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nCode:   3006\nReason: \"subscription expired\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Proxies for Multiple Namespaces in Centrifugo (JSON)\nDESCRIPTION: This configuration uses the 'subscribe_stream_proxy_name' property in channel namespaces to assign different stream proxies by name, allowing tailored proxy endpoints and timeouts for different namespaces. The 'proxies' block then defines parameters for each named GRPC proxy. This pattern supports multi-tenancy or customized proxy backends per logical stream grouping.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy_streams.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"ns1\",\n        \"subscribe_stream_proxy_enabled\": true,\n        \"subscribe_stream_proxy_name\": \"stream_1\"\n      },\n      {\n        \"name\": \"ns2\",\n        \"subscribe_stream_proxy_enabled\": true,\n        \"subscribe_stream_proxy_name\": \"stream_2\"\n      }\n    ]\n  },\n  \"proxies\": [\n    {\n      \"name\": \"stream_1\",\n      \"endpoint\": \"grpc://localhost:3000\",\n      \"timeout\": \"500ms\"\n    },\n    {\n      \"name\": \"stream_2\",\n      \"endpoint\": \"grpc://localhost:3001\",\n      \"timeout\": \"500ms\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with TOML Configuration (Bash)\nDESCRIPTION: This command starts Centrifugo using a TOML-format configuration file via the '--config' flag. Requires a properly formatted 'config.toml' in the directory. The server will read configuration from this file on startup. Only the config file path is specified as input, with server logs and effects as output.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.toml\n```\n\n----------------------------------------\n\nTITLE: Allowing Browser Origins in Centrifugo Configuration (JSON)\nDESCRIPTION: Updates the allowed_origins property of the config.json to enable CORS from http://localhost:3000. This is required for browser-based clients to connect and interact with Centrifugo's API. The server must be restarted after making changes. Only trusted origins should be listed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"allowed_origins\": [\n    \"http://localhost:3000\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Admin UI via Config File (JSON)\nDESCRIPTION: Shows how to explicitly enable the admin web interface by setting an 'admin' field to true in the config JSON. This allows running Centrifugo without a command-line admin flag. Used for permanent or scriptable admin UI configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"46b38493-147e-4e3f-86e0-dc5ec54f5133\",\n  \"admin\": true,\n  \"admin_password\": \"ad0dff75-3131-4a02-8d64-9279b4f1c57b\",\n  \"admin_secret\": \"583bc4b7-0fa5-4c4a-8566-16d3ce4ad401\",\n  \"api_key\": \"aaaf202f-b5f8-4b34-bf88-f6c03a1ecda6\",\n  \"allowed_origins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global History Size and TTL in Centrifugo (JSON)\nDESCRIPTION: Illustrates how to configure history size and TTL for top-level channels (those not belonging to a specific namespace) in the Centrifugo configuration file (`config.json`). This snippet sets `history_size` to 10 and `history_ttl` to \"60s\", enabling history globally, retaining the last 10 messages for up to 60 seconds. Both options must be set to non-zero values to enable history.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channels.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"history_size\": 10,\n    \"history_ttl\": \"60s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Lifecycle Events in Centrifugo\nDESCRIPTION: Demonstrates how to set up event handlers for connection and disconnection events in Centrifugo using JavaScript.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/client_api.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.on('connect', function(connectCtx){\n    console.log('connected', connectCtx)\n});\n\ncentrifuge.on('disconnect', function(disconnectCtx){\n    console.log('disconnected', disconnectCtx)\n});\n```\n\n----------------------------------------\n\nTITLE: Serving CSRF Token via Django API Endpoint - Python\nDESCRIPTION: Implements a view in Django that returns a CSRF token via HTTP headers (X-CSRFToken) in a JSON response, facilitating session-based authentication with SPAs. Relies on Django's get_token and JsonResponse utilities, requires proper middleware configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import JsonResponse\\nfrom django.middleware.csrf import get_token\\n\\n\\ndef get_csrf(request):\\n    return JsonResponse({}, headers={'X-CSRFToken': get_token(request)})\n```\n\n----------------------------------------\n\nTITLE: Combined Match Types Configuration\nDESCRIPTION: Example demonstrating how to combine different types of channel matching in one configuration\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/capabilities.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"^posts_[\\d]+$\"],\n            \"match\": \"regex\",\n            \"allow\": [\"sub\"]\n        }\n        {\n            \"channels\": [\"user_42\"],\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Centrifugo Publish API Response Format (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a successful response from the Centrifugo `publish` API method. An empty `result` object indicates that the publication was accepted and processed without any Centrifugo-level errors. Depending on the channel configuration (e.g., history), the `result` might contain additional fields like `offset` and `epoch` as described in the PublishResult table.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with Docker Compose (Shell)\nDESCRIPTION: Executes the Docker Compose command `docker-compose up` to build (if necessary), create, and start the services defined in the `docker-compose.yml` file located in the current directory. This launches the Centrifugo container as configured in the YAML file. Requires Docker Compose and a `docker-compose.yml` file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Django Login View\nDESCRIPTION: Authentication endpoint for user login\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom django.contrib.auth import authenticate, login\nfrom django.http import JsonResponse\nfrom django.views.decorators.http import require_POST\n\n\n@require_POST\ndef login_view(request):\n    credentials = json.loads(request.body)\n    username = credentials.get('username')\n    password = credentials.get('password')\n\n    if not username or not password:\n        return JsonResponse({'detail': 'provide username and password'}, status=400)\n\n    user = authenticate(username=username, password=password)\n    if not user:\n        return JsonResponse({'detail': 'invalid credentials'}, status=400)\n\n    login(request, user)\n    return JsonResponse({'user': {'id': user.pk, 'username': user.username}})\n```\n\n----------------------------------------\n\nTITLE: Defining Room Member Serializer in Django Rest Framework\nDESCRIPTION: This serializer is used for room membership operations, including nested serialization for user and room information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass RoomMemberSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    room = RoomSerializer(read_only=True)\n    \n    class Meta:\n        model = RoomMember\n        fields = ['room', 'user']\n```\n\n----------------------------------------\n\nTITLE: Creating Publications Table in ClickHouse (SQL)\nDESCRIPTION: Defines the schema for the 'centrifugo.publications' table using the MergeTree engine, partitioned and ordered by time. This table stores publication event data including channel, source, client, user, event size, and timestamp. Requires ClickHouse; key columns like 'channel', 'source', 'size', etc. must match analytics export format. Expects proper retention (TTL) to maintain storage health.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE centrifugo.publications\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.publications\n(\n    `channel` String,\n    `source` String,\n    `size` UInt64,\n    `client` String,\n    `user` String,\n    `time` DateTime\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: GRPC API with Key Authorization in Go\nDESCRIPTION: Example Go code demonstrating how to implement API key authorization for GRPC API calls to Centrifugo. This implements the necessary credential interfaces for authenticating requests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n\n    \"centrifugo_example/apiproto\"\n    \n    \"google.golang.org/grpc\"\n)\n\ntype keyAuth struct {\n    key string\n}\n\nfunc (t keyAuth) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {\n    return map[string]string{\n        \"authorization\": \"apikey \" + t.key,\n    }, nil\n}\n\nfunc (t keyAuth) RequireTransportSecurity() bool {\n    return false\n}\n\nfunc main() {\n    conn, err := grpc.Dial(\"localhost:10000\", grpc.WithInsecure(), grpc.WithPerRPCCredentials(keyAuth{\"xxx\"}))\n    if err != nil {\n        log.Fatalln(err)\n    }\n    defer conn.Close()\n    client := apiproto.NewCentrifugoClient(conn)\n    for {\n        resp, err := client.Publish(context.Background(), &PublishRequest{\n            Channel: \"chat:index\",\n            Data:    []byte(`{\"input\": \"hello from GRPC\"}`),\n        })\n        if err != nil {\n            log.Printf(\"Transport level error: %v\", err)\n        } else {\n            if resp.GetError() != nil {\n                respError := resp.GetError()\n                log.Printf(\"Error %d (%s)\", respError.Code, respError.Message)\n            } else {\n                log.Println(\"Successfully published\")\n            }\n        }\n        time.Sleep(time.Second)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Open File Limit in Shell\nDESCRIPTION: This shell command displays the current soft limit for the maximum number of open file descriptors allowed for the current process or shell session. This limit directly impacts how many concurrent connections Centrifugo can handle, as each connection requires a file descriptor. The default limit is often too low for high-traffic scenarios.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/infra_tuning.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nulimit -n\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket with SSE Fallback in Centrifuge JS SDK\nDESCRIPTION: Demonstrates how to configure the Centrifuge Javascript SDK to attempt connection via WebSocket first (`ws://localhost:8000/connection/websocket`) and fall back to SSE (`http://localhost:8000/connection/sse`) if WebSocket fails. This uses the bidirectional emulation feature for SSE. Requires the `centrifuge-js` library.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/sse.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst transports = [\n    {\n        transport: 'websocket',\n        endpoint: 'ws://localhost:8000/connection/websocket'\n    },\n    {\n        transport: 'sse',\n        endpoint: 'http://localhost:8000/connection/sse'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n```\n\n----------------------------------------\n\nTITLE: Enabling Unidirectional HTTP Streaming Endpoint in Centrifugo Configuration (JSON)\nDESCRIPTION: This JSON snippet enables the uni_http_stream endpoint in Centrifugo's configuration. The uni_http_stream object must be added or updated in your config.json with the enabled key set to true. This allows clients to establish unidirectional HTTP streaming connections for real-time message delivery. Dependencies: Centrifugo >= v4 with uni_http_stream transport built in. Inputs: None except placement in the main config file. Output: Streaming endpoint exposed at /connection/uni_http_stream. Note: Additional configuration (such as authentication mechanisms) may be required depending on your use case.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_http_stream.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uni_http_stream\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Second Centrifugo Instance on a Different Port (Bash)\nDESCRIPTION: Demonstrates running another instance of Centrifugo, using the same configuration file (`config.json`) but specifying a different listening port (`--port=8001`). This is useful for scaling horizontally when using a shared broker like Nats or Redis.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncentrifugo --config=config.json --port=8001\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Options and Namespaces in Centrifugo JSON Configuration\nDESCRIPTION: This JSON snippet exemplifies how to configure channel options in Centrifugo's `config.json`. It sets default options for channels without a specific namespace under `channel.without_namespace` (enabling presence and setting history size/TTL) and defines two namespaces, `facts` and `gossips`. The `facts` namespace overrides default history settings, while `gossips` inherits Centrifugo's defaults as no specific options are provided for it.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channels.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"channel\": {\n    \"without_namespace\": {\n      \"presence\": true,\n      \"history_size\": 10,\n      \"history_ttl\": \"30s\"\n    },\n    \"namespaces\": [\n      {\n        \"name\": \"facts\",\n        \"history_size\": 10,\n        \"history_ttl\": \"300s\"\n      },\n      {\n        \"name\": \"gossips\"\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Private Channel Subscription Token - JWT in Python\nDESCRIPTION: This Python snippet generates a JWT token used by clients to subscribe to a private Centrifugo channel. It uses the PyJWT library (imported as 'jwt'), encodes the required 'client' and 'channel' claims, and signs with a shared secret using HMAC SHA-256 ('HS256'). The token is then decoded for printing. Dependencies: pyjwt (\"pip install pyjwt\"). Key parameters are the client ID and channel name; both must be set per Centrifugo connection. Input: client ID string and channel name; Output: JWT subscription token string. Ensure 'token_hmac_secret_key' matches the one in your Centrifugo config. For other algorithms (RSA/ECDSA), a private key is required. The snippet assumes Python 3 (due to .decode()).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/private_channels.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\\n\\ntoken = jwt.encode({\\n    \\\"client\\\": \\\"xxxx-xxx-xxx-xxxx\\\",\\n    \\\"channel\\\": \\\"$gossips\\\"\\n}, \\\"secret\\\", algorithm=\\\"HS256\\\").decode()\\n\\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Initializing Centrifuge Client in JavaScript\nDESCRIPTION: Creates a new Centrifuge client instance and establishes a WebSocket connection\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge('ws://localhost:8000/connection/websocket');\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Integration for Centrifugo Admin - JSON Syntax - JavaScript\nDESCRIPTION: This code snippet shows a sample JSON configuration for enabling OIDC-based authentication for Centrifugo PRO admin UI. It includes all essential parameters such as enabling OIDC, specifying the display name, issuer, client ID, audience, redirect URI, extra scopes, and an access CEL expression. Dependencies include a Centrifugo PRO installation with OIDC support and a properly registered client in the selected Identity Provider. Key parameters such as 'issuer', 'client_id', and 'redirect_uri' must correspond to values set up in your IDP configuration, and 'access_cel' defines the access logic. Input is a JSON configuration file, and output is the application of new authentication logic; incorrect values may prevent login or result in improper access control.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/admin_idp_auth.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript title=\\\"config.json\\\"\n{\n  ...\n  \\\"admin_oidc\\\": {\n    \\\"enabled\\\": true,\n    \\\"display_name\\\": \\\"Keycloak\\\",\n    \\\"issuer\\\": \\\"http://localhost:8080/realms/master\\\",\n    \\\"client_id\\\": \\\"myclient\\\",\n    \\\"audience\\\": \\\"myclient\\\",\n    \\\"redirect_uri\\\": \\\"http://localhost:8000\\\",\n    \\\"extra_scopes\\\": [],\n    \\\"access_cel\\\": \\\"'centrifugo_admins' in claims.groups\\\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx to Embed Centrifugo in a Website Location\nDESCRIPTION: This Nginx configuration embeds Centrifugo into a specific location of an existing website. It includes proxy settings for both the main Centrifugo endpoint and the WebSocket connection endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/load_balancing.md#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\n    # uncomment ip_hash if using SockJS transport with many upstream servers.\n    #ip_hash;\n    server 127.0.0.1:8000;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\nserver {\n\n    # ... your web site Nginx config\n\n    location /centrifugo/ {\n        rewrite ^/centrifugo/(.*)        /$1 break;\n        proxy_pass http://centrifugo;\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n    }\n\n    location /centrifugo/connection {\n        rewrite ^/centrifugo(.*)        $1 break;\n        proxy_pass http://centrifugo;\n        proxy_buffering off;\n        keepalive_timeout 65;\n        proxy_read_timeout 60s;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header Host $http_host;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Token Refresh\nDESCRIPTION: Example of the JSON response format that must be returned from the server during a token refresh request. The endpoint should return a new valid JWT token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"token\": token\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Haproxy-Managed Redis (Shell)\nDESCRIPTION: This command starts Centrifugo, directing it to connect to Redis through the Haproxy load balancer defined previously. It uses command-line flags to set the engine to `redis` and the `redis_address` to the Haproxy listener (`localhost:16379`), potentially overriding settings in `config.json`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json --engine=redis --redis_address=\"localhost:16379\"\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to Centrifugo via GRPC Go Client\nDESCRIPTION: Demonstrates a complete Go client that dials the Centrifugo GRPC API, creates a client, and periodically publishes a JSON message to the 'chat:index' channel. Handles both transport and logical (API) errors, and displays success or error logs. Dependencies include generated Protobuf Go code, the Centrifugo server running with GRPC enabled, and the gRPC Go library. Inputs are hardcoded channel and data; outputs are log messages.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_25\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n\n    \"centrifugo_example/apiproto\"\n\n    \"google.golang.org/grpc\"\n)\n\nfunc main() {\n    conn, err := grpc.Dial(\"localhost:10000\", grpc.WithInsecure())\n    if err != nil {\n        log.Fatalln(err)\n    }\n    defer conn.Close()\n    client := apiproto.NewCentrifugoApiClient(conn)\n    for {\n        resp, err := client.Publish(context.Background(), &apiproto.PublishRequest{\n            Channel: \"chat:index\",\n            Data:    []byte(`{\"input\": \"hello from GRPC\"}`),\n        })\n        if err != nil {\n            log.Printf(\"Transport level error: %v\", err)\n        } else {\n            if resp.GetError() != nil {\n                respError := resp.GetError()\n                log.Printf(\"Error %d (%s)\", respError.Code, respError.Message)\n            } else {\n                log.Println(\"Successfully published\")\n            }\n        }\n        time.Sleep(time.Second)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Example without Transport Error Mode\nDESCRIPTION: Example of a HTTP request to Centrifugo API that returns a 200 OK status code with error information contained in the response body.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n‚ùØ echo '{}' | http POST \"http://localhost:8000/api/publish\"\nHTTP/1.1 200 OK\nContent-Length: 46\nContent-Type: application/json\nDate: Sat, 19 Aug 2023 07:23:40 GMT\n\n{\n    \"error\": {\n        \"code\": 107,\n        \"message\": \"bad request\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User ID HTTP Header in Centrifugo\nDESCRIPTION: This snippet demonstrates how to set the 'client.user_id_http_header' option in Centrifugo's configuration to extract the authenticated user ID from a specific HTTP header.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"user_id_http_header\": \"X-User-Id\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Centrifugo Log Output for Invalid JWT Token (console)\nDESCRIPTION: This example log output documents an authentication error when the client attempts to connect using an invalid or placeholder JWT. The log provides detailed error messages related to token format, the client identifier, and the failed command. This highlights the requirement for issuing valid JWT tokens for authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n2022-06-10 09:44:21 [INF] invalid connection token error=\"invalid token: token format is not valid\" client=a65a8463-6a36-421d-814a-0083c8836529\n2022-06-10 09:44:21 [INF] disconnect after handling command client=a65a8463-6a36-421d-814a-0083c8836529 command=\"id:1  connect:{token:\\\"<TOKEN>\\\"  name:\\\"js\\\"}\" reason=\"invalid token\" user=\n```\n\n----------------------------------------\n\nTITLE: Filtering `defaultenv` Output for Non-Zero Base Values (Bash)\nDESCRIPTION: Demonstrates running `centrifugo defaultenv` with both the `--base config.json` and `--base-non-zero-only` flags. This combination instructs the command to output only those environment variables corresponding to configuration keys that were explicitly set to a non-zero (or non-empty/non-false) value within the provided `config.json` file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultenv --base config.json --base-non-zero-only\n```\n\n----------------------------------------\n\nTITLE: Generating a Default Centrifugo Configuration File (Bash)\nDESCRIPTION: This command-line snippet generates a default JSON configuration file for Centrifugo using the 'genconfig' subcommand. Requires Centrifugo to be installed and available in the path. The command takes no arguments and creates a 'config.json' file in the current working directory, laying out minimal settings for further customization. Input is a shell command, output is a file written to disk.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Unblocking a User via HTTP API in Centrifugo (Bash)\nDESCRIPTION: This bash command unblocks a user in Centrifugo by sending an HTTP POST request to the \"/api/unblock_user\" endpoint with JSON data containing the user ID. It uses application/json as content type and requires a valid API key in the request headers. The result is currently an empty object. Replace <API_KEY> and user ID as needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/user_block.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"user\": \"2695\"}' \\\n  http://localhost:8000/api/unblock_user\n```\n\n----------------------------------------\n\nTITLE: Django Models Definition\nDESCRIPTION: Database models for Room, RoomMember, and Message entities\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Room(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    version = models.PositiveBigIntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    bumped_at = models.DateTimeField(auto_now_add=True)\n    last_message = models.ForeignKey(\n        'Message', related_name='last_message_rooms',\n        on_delete=models.SET_NULL, null=True, blank=True,\n    )\n\n    def increment_version(self):\n        self.version += 1\n        self.save()\n        return self.version\n\n    def __str__(self):\n        return self.name\n\n\nclass RoomMember(models.Model):\n    room = models.ForeignKey(Room, related_name='memberships', on_delete=models.CASCADE)\n    user = models.ForeignKey(User, related_name='rooms', on_delete=models.CASCADE)\n    joined_at = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        unique_together = ('room', 'user')\n\n    def __str__(self):\n        return f\"{self.user.username} in {self.room.name}\"\n\n\nclass Message(models.Model):\n    room = models.ForeignKey(Room, related_name='messages', on_delete=models.CASCADE)\n    user = models.ForeignKey(\n        User, related_name='messages', on_delete=models.CASCADE, null=True)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription with Delta Compression - Centrifuge JS - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a Centrifuge client-side subscription with delta compression enabled, using the 'delta: \\\"fossil\\\"' option. The 'centrifuge' object represents the Centrifugo JavaScript SDK instance, and the subscription to 'example:updates' channel negotiates for delta-compressed messages, assuming the server-side configuration permits it. Input requires valid SDK initialization, and output is a subscription object that will receive full or delta-compressed publications depending on server negotiation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/delta_compression.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sub = centrifuge.newSubscription('example:updates', {\n  delta: 'fossil'\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a Subscription JWT Using Python (Centrifugo, Python)\nDESCRIPTION: This Python example demonstrates how to generate a Centrifugo-compatible subscription JWT using the 'jwt' library. It sets essential claims: 'sub' for user ID, 'channel' for channel name, and an expiration ('exp') using current time plus one hour. The secret key corresponds to 'token_hmac_secret_key' from Centrifugo. Outputs a signed JWT string for use by clients. Requires the 'jwt' package and valid claim values per Centrifugo spec.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channel_token_auth.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\nimport time\n\nclaims = {\"sub\": \"42\", \"channel\": \"$gossips\", \"exp\": int(time.time()) + 3600}\ntoken = jwt.encode(claims, \"secret\", algorithm=\"HS256\").decode()\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics Endpoint in Centrifugo Configuration - JSON\nDESCRIPTION: This JSON snippet demonstrates how to enable the Prometheus metrics endpoint in the Centrifugo configuration file by setting the 'prometheus' option to true. When added to config.json, Centrifugo will expose the '/metrics' endpoint, which allows a Prometheus server to scrape and collect metrics for monitoring. No additional dependencies are required beyond Prometheus itself and a proper server configuration. The key parameter is 'prometheus', which should be set to true to activate this feature.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/observability.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"prometheus\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Membership Events on Join/Leave via Centrifugo (Python)\nDESCRIPTION: Illustrates Django view classes for broadcasting room membership changes (user joined or left) to all room members using Centrifugo. Reuses CentrifugoMixin for channel calculation and broadcast logic. Payloads maintain unique idempotency keys and type fields. Requires existing RoomMember, Room, serializers, and Centrifugo API configuration. Ensures atomic DB updates synchronize with event dispatch.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass JoinRoomView(APIView, CentrifugoMixin):\n    # Some code skipped here ....\n\n    @transaction.atomic\n    def post(self, request, room_id):\n        # Some code skipped here ....\n        obj, _ = RoomMember.objects.get_or_create(user=request.user, room=room)\n        channels = self.get_room_member_channels(room_id)\n        obj.room.member_count = len(channels)\n        body = RoomMemberSerializer(obj).data\n\n        broadcast_payload = {\n            'channels': channels,\n            'data': {\n                'type': 'user_joined',\n                'body': body\n            },\n            'idempotency_key': f'user_joined_{obj.pk}'\n        }\n        self.broadcast_room(room_id, broadcast_payload)\n        return Response(body, status=status.HTTP_200_OK)\n\n\nclass LeaveRoomView(APIView, CentrifugoMixin):\n    # Some code skipped here ....\n\n    @transaction.atomic\n    def post(self, request, room_id):\n        # Some code skipped here ....\n        obj = get_object_or_404(RoomMember, user=request.user, room=room)\n        obj.room.member_count = len(channels) - 1\n        pk = obj.pk\n        obj.delete()\n        body = RoomMemberSerializer(obj).data\n\n        broadcast_payload = {\n            'channels': channels,\n            'data': {\n                'type': 'user_left',\n                'body': body\n            },\n            'idempotency_key': f'user_left_{pk}'\n        }\n        self.broadcast_room(room_id, broadcast_payload)\n        return Response(body, status=status.HTTP_200_OK)\n\n```\n\n----------------------------------------\n\nTITLE: Generating Expiring JWT for Centrifugo Client in Python\nDESCRIPTION: This snippet demonstrates how to use Python's JWT library to create a connection token for Centrifugo clients with a short-lived 'exp' (expiration) claim. The token carries the user's subject identifier (sub) and an expiration set 10 minutes ahead. Required dependency is the 'PyJWT' library. Inputs: secret signing key, user identifier. Outputs: Encoded HS256 JWT token for use by the client to connect to Centrifugo. Note: Call .decode() to convert the PyJWT result to a string if using PyJWT < 2.0.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\nimport time\n\ntoken = jwt.encode({\"sub\": \"42\", \"exp\": int(time.time()) + 10*60}, \"secret\").decode()\n\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Unified TLS Configuration for Centrifugo Subsystems (JSON)\nDESCRIPTION: This JSON snippet illustrates using the unified TLS configuration object for a Centrifugo subcomponent (such as 'unified_proxy.grpc'). It enables TLS and specifies file paths to certificate and key PEM files. This new format provides a consistent way to declare TLS options across Centrifugo services; ensure only one source method (file, base64, or raw PEM) is used for each field.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/tls.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"unified_proxy\": {\n    \"grpc\": {\n      \"tls\": {\n        \"enabled\": true,\n        \"cert_pem_file\": \"/path/to/cert.pem\",\n        \"key_pem_file\": \"/path/to/key.pem\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Channel Subscription in JavaScript\nDESCRIPTION: Demonstrates how to subscribe to a Centrifuge channel and handle incoming messages on the client side.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.subscribe('example', function(msgCtx) {\n    console.log(msgCtx)\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics Export in Centrifugo - JSON\nDESCRIPTION: This JSON configuration snippet for Centrifugo demonstrates how to enable Prometheus metrics exporting by setting the 'prometheus' option to true in the config file. This exposes the '/metrics' endpoint, allowing a Prometheus server to scrape metrics from the running Centrifugo instance. No additional dependencies are required besides Centrifugo itself and access to the Prometheus server; the key parameter is 'prometheus', which is a boolean flag controlling endpoint exposure. The config must be placed in the Centrifugo config file for activation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/monitoring.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    ...\\n    \"prometheus\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Issuer Requirement in Centrifugo (JSON)\nDESCRIPTION: This snippet demonstrates how to require JWT issuer (iss claim) validation for client connections in Centrifugo by setting the client.token.issuer field in config.json. Only tokens issued by \"my_app\" will be accepted. This also impacts subscription tokens and can be configured separately for server and subscription tokens.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"token\": {\n      ...\n      \"issuer\": \"my_app\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Limits for Connections in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON configuration demonstrates how to set up error limits for client connections in Centrifugo PRO. It enables error limiting and defines a bucket that allows 20 errors within a 5-second interval before disconnecting the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/rate_limiting.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"client_error_limits\": {\n        \"enabled\": true,\n        \"total\": {\n            \"buckets\" : [\n                {\n                    \"interval\": \"5s\",\n                    \"rate\": 20\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Server API Key Configuration - JSON\nDESCRIPTION: This configuration snippet sets an API key for securing access to Centrifugo's HTTP API. The file (config.json) should be placed in the Centrifugo server's configuration directory, with the api_key value replaced by a secure key. The server enforces requests to include this key in the X-API-Key header. No special libraries required. Make sure other necessary configuration options are set according to your deployment needs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"api_key\": \"<YOUR_API_KEY>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Client Indication Origin and Utility Function in Go\nDESCRIPTION: Validates the parsed Origin field of ClientIndication by parsing its URL and ensuring the host is listed in the server's AllowedOrigins configuration. The helper stringInSlice checks membership in a string slice. Dependencies include the url and errors packages; input must conform to expected URL syntax. Outputs predefined error for bad origins or returns nil for success.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvar errBadOrigin = errors.New(\"bad origin\")\n\nfunc (s *WebTransportServerQuic) validateClientIndication(indication ClientIndication) error {\n\tu, err := url.Parse(indication.Origin)\n\tif err != nil {\n\t\treturn errBadOrigin\n\t}\n\tif !stringInSlice(u.Host, s.config.AllowedOrigins) {\n\t\treturn errBadOrigin\n\t}\n\treturn nil\n}\n\nfunc stringInSlice(a string, list []string) bool {\n\tfor _, b := range list {\n\t\tif b == a {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic TLS (Let's Encrypt) in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable automatic TLS certificate management using Let's Encrypt (ACME) in Centrifugo. It requires setting `tls_autocert` to true and specifying the `tls_autocert_host_whitelist` with the domain(s). Optional parameters like `tls_autocert_cache_dir`, `tls_autocert_email`, `tls_autocert_http`, and `tls_autocert_http_addr` allow further customization for caching, notifications, and HTTP challenge handling. This setup requires a valid public domain name.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/tls.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"tls_autocert\": true,\n  \"tls_autocert_host_whitelist\": \"www.example.com\",\n  \"tls_autocert_cache_dir\": \"/tmp/certs\",\n  \"tls_autocert_email\": \"user@example.com\",\n  \"tls_autocert_http\": true,\n  \"tls_autocert_http_addr\": \":80\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sending a Subscribe Command in JSON (Centrifugo Protocol)\nDESCRIPTION: Illustrates a client sending a 'subscribe' command to the server using the JSON format. The command includes an incremental ID (`id: 1`) for matching the server's reply and a payload specifying the channel to subscribe to (`\"channel\": \"example\"`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_protocol.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"subscribe\": {\"channel\": \"example\"}}\n```\n\n----------------------------------------\n\nTITLE: Sample Centrifugo Log Output Showing Unauthorized Origin (console)\nDESCRIPTION: This log output shows an informational message produced by Centrifugo when a WebSocket connection from an unauthorized origin is rejected. It contains details about the denied request and highlights the necessity of setting allowed_origins in the configuration. No user intervention is needed beyond updating the server config.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n2021-09-01 10:17:33 [INF] request Origin is not authorized due to empty allowed_origins origin=http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token for User Authentication\nDESCRIPTION: Command to generate a JWT token for user ID 42 with a default expiration time of 168 hours, which will be used for connection authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/connections.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ centrifugo gentoken -u 42\nHMAC SHA-256 JWT for user 42 with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0MiIsImV4cCI6MTYyNzcxMzMzNX0.s3eOhujiyBjc4u21nuHkbcWJll4Um0QqGU3PF-6Mf7Y\n```\n\n----------------------------------------\n\nTITLE: Generating Protobuf Messages and GRPC Code - Bash\nDESCRIPTION: This command invokes protoc with the proper plugins and directories to generate Go and Go-GRPC code from the proxy.proto definition. proto files must be present in the specified directory. The output files will be used by the Go backend to implement GRPC services as defined in the proto contract.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-03-18-stream-loki-logs-to-browser-with-websocket-to-grpc-subscriptions.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nprotoc -I ./ proxy.proto --go_out=./ --go-grpc_out=./\\n\n```\n\n----------------------------------------\n\nTITLE: Running ClickHouse Development Environment\nDESCRIPTION: Docker commands for running ClickHouse server and client locally for development purposes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v /tmp/clickhouse:/var/lib/clickhouse -p 9000:9000 --name click clickhouse/clickhouse-server\n\ndocker run -it --rm --link click:clickhouse-server --entrypoint clickhouse-client clickhouse/clickhouse-server --host clickhouse-server\n```\n\n----------------------------------------\n\nTITLE: Fetching Last 10 Publications (Reversed) using Centrifugo History API\nDESCRIPTION: Shows how to use the Centrifugo history API with `limit: 10` and `reverse: true` to retrieve the last 10 publications from the history stream in reverse chronological order (newest first).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/history_and_recovery.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: null, reverse: true) \n```\n\n----------------------------------------\n\nTITLE: Fetching Limited History Forward using History API\nDESCRIPTION: Example of retrieving a limited number (up to 10) of historical publications starting from the oldest (`since: null`, `reverse: false`). The `limit: 10` parameter restricts the maximum number of publications returned.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/history_and_recovery.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: null, reverse: false)\n```\n\n----------------------------------------\n\nTITLE: Generating Python GRPC Clients from Protobuf - Bash\nDESCRIPTION: Documents the shell commands necessary to generate Python GRPC client stubs from a .proto file using grpcio-tools. Requires the grpcio-tools Python package and the api.proto file. Outputs api_pb2.py and api_pb2_grpc.py, which are imported by the application to send GRPC requests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npip install grpcio-tools\npython -m grpc_tools.protoc -I ./ --python_out=. --grpc_python_out=. api.proto\n```\n\n----------------------------------------\n\nTITLE: GRPC Service Definition for Subscription Streams\nDESCRIPTION: PHP-style Proto definition for the GRPC service that handles unidirectional subscription streams. This defines the SubscribeUnidirectional RPC method that must be implemented on the backend.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy_streams.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nservice CentrifugoProxy {\n  ...\n  // SubscribeUnidirectional allows handling unidirectional subscription streams.\n  rpc SubscribeUnidirectional(SubscribeRequest) returns (stream StreamSubscribeResponse);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Subscription Token Verification in Centrifugo v5 (JSON)\nDESCRIPTION: Example Centrifugo v5 configuration (config.json) demonstrating how to use JWKS for connection token validation via `token_jwks_public_endpoint` while enabling separate HMAC-based verification for subscription tokens using `separate_subscription_token_config` set to `true` and specifying `subscription_token_hmac_secret_key`. This allows decoupling authentication mechanisms for connection and subscription phases.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-06-29-centrifugo-v5-released.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"token_jwks_public_endpoint\": \"https://example.com/openid-connect/certs\",\n  \"separate_subscription_token_config\": true,\n  \"subscription_token_hmac_secret_key\": \"separate_secret_which_must_be_strong\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Namespace for Automatic Delta Publishing\nDESCRIPTION: This JSON configuration snippet extends the previous server-side setup for the \"example\" namespace in Centrifugo. By adding `\"delta_publish\": true`, it instructs the server to automatically calculate and attempt to send deltas for all publications within this namespace to clients that have successfully negotiated delta compression, simplifying the publishing process.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/delta_compression.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"example\",\n        \"allowed_delta_types\": [\n          \"fossil\"\n        ],\n        \"force_positioning\": true,\n        \"history_size\": 1,\n        \"history_ttl\": \"60s\",\n        \"delta_publish\": true\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent History (Limit 10) using Centrifugo History API\nDESCRIPTION: Illustrates using the Centrifugo history API with `limit: 10` and `reverse: false` to retrieve the first 10 publications from the history stream, starting from the oldest available message.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/history_and_recovery.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: null, reverse: false)\n```\n\n----------------------------------------\n\nTITLE: Example Subscribe Proxy Success Response\nDESCRIPTION: Example of a successful response that allows the subscription to proceed. The empty result object indicates that the subscription is permitted.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Namespace RPC Proxies in Centrifugo (JSON)\nDESCRIPTION: This snippet shows how to configure per-namespace RPC proxies in Centrifugo. It demonstrates setting up multiple RPC proxies with different endpoints and assigning them to specific RPC namespaces.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxies\": [\n    ...\n    {\n      \"name\": \"rpc1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/rpc\"\n    },\n    {\n      \"name\": \"rpc2\",\n      \"endpoint\": \"grpc://localhost:3002\"\n    }\n  ],\n  \"rpc\": {\n    \"namespaces\": [\n      {\n        \"name\": \"ns1\",\n        \"proxy_enabled\": true,\n        \"proxy_name\": \"rpc1\"\n      },\n      {\n        \"name\": \"ns2\",\n        \"proxy_enabled\": true,\n        \"proxy_name\": \"rpc2\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-cluster Redis Configuration\nDESCRIPTION: Configuration for sharding between multiple Redis clusters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"redis_cluster_address\": [\n        \"localhost:30001,localhost:30002,localhost:30003\",\n        \"localhost:30101,localhost:30102,localhost:30103\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect and Refresh Proxies in Granular Mode\nDESCRIPTION: Configuration showing how to reference named proxies for connect and refresh operations in Centrifugo's granular proxy mode. This allows using specific proxy configurations for authentication and token refresh.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [...],\n  \"connect_proxy_name\": \"connect\",\n  \"refresh_proxy_name\": \"refresh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Refresh Proxy Endpoint (JSON)\nDESCRIPTION: Demonstrates configuring the refresh proxy in `config.json` to use a GRPC backend. Sets the `proxy_refresh_endpoint` to a GRPC address and defines the request timeout.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_refresh_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_refresh_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Per-Connection Rate Limits in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration demonstrates how to enable and set up in-memory rate limiting for individual client connections in Centrifugo. It uses a token bucket algorithm and allows defining limits for specific commands (`publish`, `rpc`), a default limit for unconfigured commands, and a total limit for all commands per interval. Key parameters include `enabled`, `interval` (e.g., \"1s\", \"60s\"), and `rate` (operations per interval). This applies limits on a per-connection basis.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/rate_limiting.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"client_command_rate_limit\": {\n        \"enabled\": true,\n\n        \"default\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 60\n                },\n            ]\n        },\n        \"total\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 20\n                },\n                {\n                    \"interval\": \"60s\",\n                    \"rate\": 50\n                },\n            ]\n        },\n        \"publish\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 1\n                },\n            ]\n        },\n        \"rpc\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 10\n                }\n            ],\n            \"method_override\": [\n                {\n                    \"method\": \"update_user_status\",\n                    \"buckets\": [\n                        {\n                            \"interval\": \"20s\",\n                            \"rate\": 1\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Namespace Channel-Wide Proxies in Centrifugo (JSON)\nDESCRIPTION: This snippet demonstrates how to configure per-namespace channel-wide proxies for subscribe and publish events in Centrifugo. It shows the setup of multiple proxies with different endpoints and their assignment to specific namespaces.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxies\": [\n    {\n      \"name\": \"subscribe1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/subscribe\"\n    },\n    {\n      \"name\": \"publish1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/publish\"\n    },\n    {\n      \"name\": \"subscribe2\",\n      \"endpoint\": \"http://localhost:3002/centrifugo/subscribe\"\n    },\n    {\n      \"name\": \"publish2\",\n      \"endpoint\": \"grpc://localhost:3002\"\n    }\n  ],\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"ns1\",\n        \"subscribe_proxy_enabled\": true,\n        \"subscribe_proxy_name\": \"subscribe1\",\n        \"publish_proxy_enabled\": true,\n        \"publish_proxy_name\": \"publish1\"\n      },\n      {\n        \"name\": \"ns2\",\n        \"subscribe_proxy_enabled\": true,\n        \"subscribe_proxy_name\": \"subscribe2\",\n        \"publish_proxy_enabled\": true,\n        \"publish_proxy_name\": \"publish2\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Presence from Client Instance (JavaScript)\nDESCRIPTION: This example demonstrates retrieving presence data using the top-level Centrifugo client instance, suitable for scenarios where you need to access presence for server-side subscriptions. It requires an initialized client object and appropriate permissions. The method returns an object about users present in the specified channel. Dependencies: Centrifugo JavaScript SDK, valid connection, and correct permissions. Input: channel name; Output: presence data object.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/presence.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst presenceData = await client.presence(channel);\n```\n\n----------------------------------------\n\nTITLE: Making Login API Call with Axios - javascript\nDESCRIPTION: Defines the login function which performs an HTTP POST request for user authentication, passing username and password using axios. Adds the CSRF token to request headers. Returns the resulting user data. Requires dependency on axios, as well as the API endpoint and app settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { API_ENDPOINT_BASE } from \"./AppSettings\";\n\nexport const login = async (csrfToken: string, username: string, password: string) => {\n  const response = await axios.post(`${API_ENDPOINT_BASE}/api/login/`, { username, password }, {\n    headers: {\n      \"X-CSRFToken\": csrfToken\n    }\n  });\n  return response.data\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Refresh Proxy Endpoint Configuration Example (JSON)\nDESCRIPTION: Provides a JSON snippet illustrating how to enable and configure the 'refresh' proxy endpoint in Centrifugo's configuration. This setup instructs Centrifugo to periodically call the backend endpoint for session/connection validation; key fields set the endpoint URL, request timeout, and enablement. Intended use is in the Centrifugo configuration file, and the backend must expose the defined endpoint to receive HTTP POST requests from Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"proxy\": {\n      ...\n      \"refresh\": {\n        \"enabled\": true,\n        \"endpoint\": \"https://your_backend/centrifugo/refresh\",\n        \"timeout\": \"1s\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Presence Stats Query with cURL in Centrifugo API (Bash)\nDESCRIPTION: This example demonstrates how to execute a presence stats query using cURL, sending a JSON payload to the Centrifugo API endpoint with authorization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"method\": \"presence_stats\", \"params\": {\"channel\": \"public:chat\"}}' | http \"localhost:8000/api\" Authorization:\"apikey KEY\"\n```\n\n----------------------------------------\n\nTITLE: Using JWT Token with Centrifuge-js Client\nDESCRIPTION: JavaScript code showing how to connect to Centrifugo using a JWT token with the centrifuge-js v2.x client library.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/authentication.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\");\ncentrifuge.setToken(token);\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: CORRECT: Separate Capabilities per Channel - Centrifugo PRO - JSON\nDESCRIPTION: This example demonstrates best practice for granting capabilities to channels. Each channel receives its own dedicated cap object, consolidating all intended permissions ('sub', 'pub', 'hst', 'prs') for 'user_42', avoiding overlap and ensuring granular control. Use this pattern to prevent accidental omissions of capabilities.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/capabilities.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\"],\n            \"allow\": [\"sub\"]\n        },\n        {\n            \"channels\": [\"user_42\"],\n            \"allow\": [\"sub\", \"pub\", \"hst\", \"prs\"]\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Django App Deployment with Gunicorn - Dockerfile\nDESCRIPTION: Creates a Docker image for running the Django app via Gunicorn web server in development mode (with --reload for hot code reload). Installs Python dependencies from requirements.txt and sets up the work directory for the application. Required for deploying Django via Docker Compose backend service.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM python:3.11.4-slim-buster\\n\\nWORKDIR /usr/src/app\\n\\nENV PYTHONDONTWRITEBYTECODE 1\\nENV PYTHONUNBUFFERED 1\\n\\nRUN pip install --upgrade pip\\nCOPY ./requirements.txt .\\nRUN pip install -r requirements.txt\\n\\nCOPY . .\\n\\nCMD [\\\"gunicorn\\\",  \\\"app.wsgi\\\", \\\"--reload\\\", \\\"--access-logfile\\\", \\\"-\\\", \\\\\\n    \\\"--workers\\\", \\\"2\\\", \\\"--bind\\\", \\\"0.0.0.0:8000\\\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling Unidirectional HTTP Streaming Transport (JSON)\nDESCRIPTION: Centrifugo configuration snippet in JSON format required to enable the unidirectional HTTP streaming transport. Setting `enabled` to `true` within the `uni_http_stream` object activates this transport.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uni_http_stream\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring allowed_origins for a Domain in JSON\nDESCRIPTION: Example JSON snippet demonstrating how to configure `allowed_origins` to permit connections originating from `https://example.com`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\n    \"https://example.com\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel History in Centrifugo - JSON\nDESCRIPTION: This configuration snippet exemplifies enabling channel history for a Centrifugo installation using a JSON file. It sets `history_size` to 10 (maximum messages to keep) and `history_ttl` to 60 seconds for channels outside any namespace. This configuration should be placed inside the main Centrifugo config file. Both `history_size` and `history_ttl` must be set to enable message history; if either is omitted or set to zero, history will be disabled for the affected channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channels.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"channel\": {\n    \"without_namespace\": {\n      \"history_size\": 10,\n      \"history_ttl\": \"60s\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PreparedMessage for WebSocket Writes in Go\nDESCRIPTION: Demonstrates how to create a `PreparedMessage` using `websocket.NewPreparedMessage` with the desired message type (e.g., `websocket.TextMessage`) and payload (`data`). Subsequently, it shows how to send this prepared message over a specific WebSocket connection (`conn`) using the `conn.WritePreparedMessage` method. This approach utilizes the internal caching of `PreparedMessage` to avoid redundant compression and frame construction when broadcasting the same `data` to multiple `conn` instances.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-08-19-optimizing-websocket-compression.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npreparedMessage, _ = websocket.NewPreparedMessage(websocket.TextMessage, data)\n_ := conn.WritePreparedMessage(preparedMessage)\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo WebSocket Client for Real-Time Updates\nDESCRIPTION: JavaScript implementation using the centrifuge-js library to establish WebSocket connection with Centrifugo. It handles connection events and processes incoming messages, updating the UI accordingly based on the current room.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-12-14-laravel-multi-room-chat-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = \"ws://\" + window.location.host + \"/connection/websocket\";\nconst centrifuge = new Centrifuge(url);\n\ncentrifuge.on('connect', function(ctx) {\n    console.log(\"connected to Centrifugo\", ctx);\n});\n\ncentrifuge.on('disconnect', function(ctx) {\n    console.log(\"disconnected from Centrifugo\", ctx);\n});\n\ncentrifuge.on('publish', function(ctx) {\n    if (ctx.data.roomId.toString() === currentRoomId) {\n        addMessage(ctx.data);\n        scrollToLastMessage();\n    }\n    addRoomLastMessage(ctx.data);\n});\n\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: Generating a Default Centrifugo Configuration File - Bash\nDESCRIPTION: This bash command generates a starter 'config.json' in the current directory using Centrifugo\\'s CLI. No parameters are necessary; the result is a minimal config ready for editing or immediate use. Prerequisite: Centrifugo CLI installed. Output: 'config.json' for server configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Counting Throttled Publication Attempts in ClickHouse (SQL)\nDESCRIPTION: Counts publication requests throttled by Centrifugo due to rate limiting (identified by error code 111 for 'publish' op) in the 'operations_distributed' table. Helps monitor excess request volume and fine-tune throttling settings. Requires error and op fields to be present in the operations table.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*)\nFROM centrifugo.operations_distributed\nWHERE (error = 111) AND (op = 'publish');\n\n‚îå‚îÄcount()‚îÄ‚îê\n‚îÇ    4502 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Sending an RPC Request to Server in Javascript\nDESCRIPTION: This snippet demonstrates how to send a Remote Procedure Call (RPC) to the server using `namedRPC()`. It requires specifying the method name ('example_method') and the request payload (`rpcRequest`). This functionality depends on the server having an RPC proxy configured. The method returns a promise that resolves with the data returned by the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst rpcRequest = {'key': 'value'};\nconst data = await centrifuge.namedRPC('example_method', rpcRequest);\n```\n\n----------------------------------------\n\nTITLE: Example Haproxy Configuration for Redis HA (Haproxy)\nDESCRIPTION: Demonstrates an Haproxy configuration (`haproxy.cfg`) section to manage connections to a Redis master-replica setup for high availability. It defines a listener `redis` on port 16379, lists backend Redis servers (one master, one backup) with health checks verifying the 'role:master' status, and configures TCP checks and load balancing. This setup allows Centrifugo to connect to Haproxy instead of directly managing Sentinel connections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_7\n\nLANGUAGE: haproxy\nCODE:\n```\n```\nlisten redis\n    server redis-01 127.0.0.1:6380 check port 6380 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2\n    server redis-02 127.0.0.1:6381 check port 6381 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2 backup\n    bind *:16379\n    mode tcp\n    option tcpka\n    option tcplog\n    option tcp-check\n    tcp-check send PING\\r\\n\n    tcp-check expect string +PONG\n    tcp-check send info\\ replication\\r\\n\n    tcp-check expect string role:master\n    tcp-check send QUIT\\r\\n\n    tcp-check expect string +OK\n    balance roundrobin\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Channel History Top Position with Centrifuge JavaScript SDK\nDESCRIPTION: This code demonstrates retrieving the current top position of a message stream within a channel using the subscription.history() method from the Centrifuge SDK. The call must be awaited, and the response object exposes 'offset' and 'epoch' fields representing the top offset and stream epoch, respectively. The function is only available for channels with history enabled. 'subscription' should be a valid client Subscription object.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history();\nconsole.log(resp.offset);\nconsole.log(resp.epoch);\n```\n\n----------------------------------------\n\nTITLE: Assigning a Connect Proxy in Granular Proxy Mode - JSON\nDESCRIPTION: Shows how to assign a specific proxy as the connect proxy in Centrifugo's granular proxy mode by referencing the proxy by name. The configuration requires that granular proxy mode is enabled, a proxies array is defined, and the proxy to be used for connection events is set via the \"connect_proxy_name\" field. Input includes the name of the connect proxy; output is the routing of connect requests through the specified proxy.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [...],\n  \"connect_proxy_name\": \"connect\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Subscription Streams for a Namespace in Centrifugo\nDESCRIPTION: JSON configuration showing how to enable subscription streams for a specific channel namespace in Centrifugo. This extends the base configuration by adding a namespace with proxy_subscribe_stream enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy_streams.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_stream_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_subscribe_stream_timeout\": \"3s\",\n  \"namespaces\": [\n    {\n        \"name\": \"streams\",\n        \"proxy_subscribe_stream\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Proxy for Centrifugo Events (JSON)\nDESCRIPTION: This JSON snippet shows how to configure Centrifugo to proxy client connect events to your backend via GRPC. The `endpoint` uses the grpc:// prefix, instructing Centrifugo to send GRPC requests. Your backend must implement a GRPC service conforming to Centrifugo's proxy.proto schema, and listen on the specified port. The only key differences from the HTTP proxy example are the protocol specifier (`grpc://`) and the expected message format (protobuf over GRPC).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"proxy\": {\n      \"connect\": {\n        \"enabled\": true,\n        \"endpoint\": \"grpc://your_backend:9000\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Docker Container with Keycloak JWKS Integration\nDESCRIPTION: Docker command to run Centrifugo with environment variables for supporting Keycloak authentication. Configures JWKS endpoint, allowed origins, admin interface access, and user-limited channels for personal messaging.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-03-31-keycloak-sso-centrifugo.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -p 8000:8000 \\\n    -e CENTRIFUGO_ALLOWED_ORIGINS=\"http://localhost:5173\" \\\n    -e CENTRIFUGO_TOKEN_JWKS_PUBLIC_ENDPOINT=\"http://host.docker.internal:8080/realms/myrealm/protocol/openid-connect/certs\" \\\n    -e CENTRIFUGO_ALLOW_USER_LIMITED_CHANNELS=true \\\n    -e CENTRIFUGO_ADMIN=true \\\n    -e CENTRIFUGO_ADMIN_SECRET=secret \\\n    -e CENTRIFUGO_ADMIN_PASSWORD=admin \\\n    centrifugo/centrifugo:v4.1.2 centrifugo\n```\n\n----------------------------------------\n\nTITLE: Enabling Centrifugo HTTP Publish Proxy Globally (JSON)\nDESCRIPTION: This configuration snippet shows how to enable the HTTP publish proxy for all channels in the default (top-level) namespace. It requires setting the `proxy_publish_endpoint`, `proxy_publish_timeout`, and explicitly enabling both `publish` and `proxy_publish` at the top configuration level.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_publish_endpoint\": \"http://localhost:3000/centrifugo/publish\",\n  \"proxy_publish_timeout\":  \"1s\",\n  \"publish\": true,\n  \"proxy_publish\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Binary Proxy Encoding (JSON)\nDESCRIPTION: Shows the `config.json` setting `proxy_binary_encoding` to `true`. This instructs Centrifugo to use base64 encoding (e.g., `b64data`, `b64info`) for binary data in HTTP proxy requests, which is less relevant for GRPC proxies.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_binary_encoding\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel for Centrifugo High Availability - JSON Configuration\nDESCRIPTION: This snippet shows a Centrifugo configuration file enabling Redis Sentinel for high availability by specifying the Sentinel address and monitored master name. Dependencies include a properly set up Redis Sentinel cluster as well as Centrifugo v4 or later. Required parameters include 'engine' (set to 'redis'), 'redis_sentinel_address' (comma-separated Sentinel hosts), and 'redis_sentinel_master_name' (the monitored Redis master). Inputs are Sentinel network settings; the file ensures Centrifugo nodes auto-discover master failover without manual reconfiguration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_sentinel_address\": \"127.0.0.1:26379\",\n    \"redis_sentinel_master_name\": \"mymaster\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Centrifugo Connect Proxy Controller in Laravel\nDESCRIPTION: A Laravel controller that handles WebSocket connection requests from Centrifugo. It authenticates users and sets up personal channels for real-time messaging using server-side subscriptions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-12-14-laravel-multi-room-chat-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass CentrifugoProxyController extends Controller\n{\n    public function connect()\n    {\n        return new JsonResponse([\n            'result' => [\n                'user' => (string) Auth::user()->id,\n                'channels' => [\"personal:#\".Auth::user()->id],\n            ]\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sharding with Different Hosts\nDESCRIPTION: JSON configuration for Centrifugo using Redis sharding with Redis instances on different hosts. This setup helps distribute load when a single Redis instance becomes a bottleneck.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_address\": [\n        \"192.168.1.34:6379\",\n        \"192.168.1.35:6379\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcast Command JSON Structure\nDESCRIPTION: Example JSON structure for broadcasting messages to multiple channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"broadcast\",\n    \"params\": {\n        \"channels\": [\"CHANNEL_1\", \"CHANNEL_2\"],\n        \"data\": {\n            \"text\": \"hello\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Large Room Environments in Django - Python\nDESCRIPTION: Provides a top-level function to seed the development environment with large numbers of users and multiple rooms, calling previous utility functions to set up realistic chat scenarios. Sequentially creates users, rooms, and members; intended to be invoked from the Django shell. Parameters are hardcoded for demonstration: 100k users, and several rooms with varying member counts.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/scale.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef setup_dev():\\n    create_users(100_000)\\n    r1 = create_room('Centrifugo')\\n    fill_room(r1.pk, 100_000)\\n    r2 = create_room('Movies')\\n    fill_room(r2.pk, 10_000)\\n    r3 = create_room('Programming')\\n    fill_room(r3.pk, 1_000)\\n    r4 = create_room('Football')\\n    fill_room(r4.pk, 100)\n```\n\n----------------------------------------\n\nTITLE: Querying User Status via Centrifugo PRO Server API - Bash (curl)\nDESCRIPTION: Shows how to retrieve the activity and online status information for a set of users using Centrifugo's server API. By submitting a POST request with the 'get_user_status' method and specifying target user IDs, you obtain their latest activity ('active') and online ('online') timestamps. Requires application/json headers, a valid API key, and the API endpoint URL.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_status.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"get_user_status\", \"params\": {\"users\": [\"42\"]}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Routing for Chat Room (Python)\nDESCRIPTION: Configures Django URL routes for the chat index and the room view, using 'path' for the root and 're_path' for room names, ensuring URLs like '/room/<room_name>/' are routed to the room view. Requires Django's URL dispatcher to be enabled and the views defined above. Inputs are browser routes; outputs are function calls into the appropriate views.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# chat/urls.py\\nfrom django.urls import path, re_path\\n\\nfrom . import views\\n\\nurlpatterns = [\\n    path('', views.index, name='index'),\\n    re_path('room/(?P<room_name>[A-z0-9_-]+)/', views.room, name='room'),\\n]\\n\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Nats Broker Option - Bash\nDESCRIPTION: This Bash command runs Centrifugo, specifying 'nats' as the broker using a configuration file. The command initializes a Centrifugo instance that connects to the Nats server for PUB/SUB message exchange. 'config.json' must be pre-configured and available, and the Nats server should be running.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --broker=nats --config=config.json\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual TLS in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable TLS in Centrifugo by specifying the paths to existing certificate and private key files. The `tls` flag must be set to true, and `tls_key` and `tls_cert` must point to the respective server key and certificate files obtained from a Certificate Authority or self-signed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/tls.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"tls\": true,\n  \"tls_key\": \"server.key\",\n  \"tls_cert\": \"server.crt\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Publish Proxy Globally in Centrifugo Configuration - JSON\nDESCRIPTION: Adds \\\\\"proxy_publish\\\\\": true to the global configuration layer, enabling publish proxy across all non-namespaced channels in Centrifugo. Must be used together with the publish endpoint and timeout. This allows backend validation for all publish attempts system-wide.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_publish_endpoint\": \"http://localhost:3000/centrifugo/publish\",\n  \"proxy_publish_timeout\":  \"1s\",\n  \"proxy_publish\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Kafka Consumer in JSON\nDESCRIPTION: Demonstrates how to declare a Kafka consumer for Centrifugo within its configuration file. The JSON array enables a named Kafka consumer linked to specific Kafka brokers, topics, and a consumer group. The snippet assumes Centrifugo v4+ with consumer support, and requires correctly configured Kafka endpoints and topics. Once enabled, Centrifugo can subscribe to CDC events streamed from Kafka, providing real-time event delivery to downstream services.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n  ...\n  \"consumers\": [\n    {\n      \"enabled\": true,\n      \"name\": \"my_kafka_consumer\",\n      \"type\": \"kafka\",\n      \"kafka\": {\n        \"brokers\": [\"kafka:9092\"],\n        \"topics\": [\"postgres.public.chat_cdc\"],\n        \"consumer_group\": \"centrifugo\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel History via Centrifugo API using cURL (Bash)\nDESCRIPTION: This Bash snippet demonstrates using cURL to request the message history for a specific channel ('chat:index') from the Centrifugo API. It sends a POST request with the method 'history', the channel name, and an optional limit on the number of messages to retrieve. An API key is required in the Authorization header. The example output shows a list of publications with their data and offsets, along with the stream epoch and latest offset.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/channels.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"history\", \"params\": {\"channel\": \"chat:index\", \"limit\": 100}}' \\\n  http://localhost:8000/api\n{\n    \"result\": {\n        \"publications\": [\n            {\n                \"data\": {\n                    \"input\": \"1\"\n                },\n                \"offset\": 1\n            },\n            {\n                \"data\": {\n                    \"input\": \"2\"\n                },\n                \"offset\": 2\n            }\n        ],\n        \"epoch\": \"gWuY\",\n        \"offset\": 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Configuration (Bash)\nDESCRIPTION: Uses the Centrifugo binary to generate a minimal configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/quickstart.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Setting Static HTTP Headers via Environment Variable (Shell)\nDESCRIPTION: This shell command demonstrates setting static HTTP proxy headers using the `CENTRIFUGO_PROXY_STATIC_HTTP_HEADERS` environment variable. The value must be a JSON string representing the map of header names to values. This offers an alternative configuration method to the `proxy_static_http_headers` key in the JSON config file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```\nexport CENTRIFUGO_PROXY_STATIC_HTTP_HEADERS='{\"X-Custom-Header\": \"custom value\"}'\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence in Centrifugo API (JSON)\nDESCRIPTION: This snippet demonstrates how to query the presence information for a channel using the Centrifugo API. It includes the method name and required parameters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"presence\",\n    \"params\": {\n        \"channel\": \"chat\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message List and Create View in Django Rest Framework\nDESCRIPTION: This view handles both listing and creating messages for a specific room, including permission checks and atomic transactions for message creation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass MessageListCreateAPIView(ListCreateAPIView):\n    serializer_class = MessageSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        room_id = self.kwargs['room_id']\n        get_object_or_404(RoomMember, user=self.request.user, room_id=room_id)\n        return Message.objects.filter(\n            room_id=room_id).prefetch_related('user', 'room').order_by('-created_at')\n\n    @transaction.atomic\n    def create(self, request, *args, **kwargs):\n        room_id = self.kwargs['room_id']\n        room = Room.objects.select_for_update().get(id=room_id)\n        room.increment_version()\n        channels = self.get_room_member_channels(room_id)\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        obj = serializer.save(room=room, user=request.user)\n        room.last_message = obj\n        room.bumped_at = timezone.now()\n        room.save()\n        headers = self.get_success_headers(serializer.data)\n        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Authentication for Centrifugo PRO Admin UI in JSON\nDESCRIPTION: JSON configuration example for setting up OpenID Connect (OIDC) authentication for Centrifugo PRO admin interface. The configuration includes essential parameters like issuer URL, client ID, redirect URI, and access control using CEL expressions to determine admin access rights based on user claims.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/admin_idp_auth.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"admin\": {\n    ...\n    \"oidc\": {\n      \"enabled\": true,\n      \"display_name\": \"Keycloak\",\n      \"issuer\": \"http://localhost:8080/realms/master\",\n      \"client_id\": \"myclient\",\n      \"audience\": \"myclient\",\n      \"redirect_uri\": \"http://localhost:8000\",\n      \"extra_scopes\": [],\n      \"access_cel\": \"'centrifugo_admins' in claims.groups\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Subscribe Proxy Request Payload Example - JSON\nDESCRIPTION: This JSON object shows an example subscribe proxy payload sent by Centrifugo to the backend when a client attempts to subscribe to a channel. The backend must validate the request using client and user identifiers and channel context, and decide whether to authorize the subscription. Custom data provided by the client can appear in the 'data' or 'b64data' fields. Backend handlers must support these fields for proper proxy operation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"channel\": \"chat:index\"\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Disconnect Response for Unauthorized Centrifugo Connection (JSON)\nDESCRIPTION: Shows the expected JSON response schema for instructing Centrifugo to disconnect an unauthorized or unauthenticated client. This object should be returned by the backend proxy endpoint in cases where user authentication fails, and allows specifying a disconnect code and textual reason. No dependencies other than standard JSON formatting, and the server must parse incoming requests, returning this on error; the 'code' corresponds to Centrifugo's disconnect codes and 'reason' is application-defined.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disconnect\": {\n    \"code\": 4501,\n    \"reason\": \"unauthorized\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification using Centrifugo HTTP API\nDESCRIPTION: Example of sending a push notification to devices subscribed to a specific topic using Centrifugo's HTTP API. The request includes authorization and a JSON payload specifying the recipient filter and FCM notification content.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-10-29-discovering-centrifugo-pro-push-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/api/send_push_notification \\\n-H \"Authorization: apikey <KEY>\" \\\n-d @- <<'EOF'\n\n{\n    \"recipient\": {\n        \"filter\": {\n            \"topics\": [\"test\"]\n        }\n    },\n    \"notification\": {\n        \"fcm\": {\n            \"message\": {\n                \"notification\": {\"title\": \"Hello\", \"body\": \"How are you?\"}\n            }\n        }\n    }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Getting Node Information via HTTP API - JSON\nDESCRIPTION: Provides an example response format for Centrifugo\\'s \\\\\"info\\\\\" HTTP API method, showing returned data about running nodes. Does not require dependencies but informs on expected fields such as node name, channel/user/client counts, UID, uptime, and version. Input is a GET/POST to the info endpoint, output is structured JSON as shown.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"nodes\": [\n            {\n                \"name\": \"Alexanders-MacBook-Pro.local_8000\",\n                \"num_channels\": 0,\n                \"num_clients\": 0,\n                \"num_users\": 0,\n                \"uid\": \"f844a2ed-5edf-4815-b83c-271974003db9\",\n                \"uptime\": 0,\n                \"version\": \"\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL for Logical Replication in Docker Compose (YAML)\nDESCRIPTION: Updates the `db` service definition within a `docker-compose.yml` file to enable logical replication in PostgreSQL. This is a prerequisite for using Debezium CDC. It adds a command to start PostgreSQL with `wal_level=logical` and tunes `wal_writer_delay` for potentially faster WAL writes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  image: postgres:15\n  volumes:\n    - ./postgres_data:/var/lib/postgresql/data/\n  healthcheck:\n    test: [ \"CMD\", \"pg_isready\", \"-U\", \"grandchat\" ]\n    interval: 1s\n    timeout: 5s\n    retries: 10\n  environment:\n    - POSTGRES_USER=grandchat\n    - POSTGRES_PASSWORD=grandchat\n    - POSTGRES_DB=grandchat\n  expose:\n    - 5432\n  ports:\n    - 5432:5432\n  command: [\"postgres\", \"-c\", \"wal_level=logical\", \"-c\", \"wal_writer_delay=10ms\"]\n```\n\n----------------------------------------\n\nTITLE: Example Output: HMAC SHA-256 JWT for Development (Text)\nDESCRIPTION: This output displays what the 'centrifugo gensubtoken' command returns‚Äîa complete JWT string corresponding to the specified user and channel, along with details about its expiration. The JWT can be directly used in development environments but should be generated by backend logic for production.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channel_token_auth.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nHMAC SHA-256 JWT for user \"123722\" and channel \"channel\" with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM3MjIiLCJleHAiOjE2NTU0NDg0MzgsImNoYW5uZWwiOiJjaGFubmVsIn0.JyRI3ovNV-abV8VxCmZCD556o2F2mNL1UoU58gNR-uI\n```\n\n----------------------------------------\n\nTITLE: Updated JavaScript Client with JWT Token\nDESCRIPTION: Modified JavaScript code snippet showing how to use the generated JWT token for authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/quickstart.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\", {\n    token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM3MjIiLCJleHAiOjE2NTU0NDgyOTl9.mUU9s5kj3yqp-SAEqloGy8QBgsLg0llA7lKUNwtHRnw\"\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Granular Proxy Mode in Centrifugo\nDESCRIPTION: This configuration turns on granular proxy mode in Centrifugo v3.1.0+, allowing for more fine-grained control of proxy behavior, such as different endpoints for different channel namespaces.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tarantool Engine for Centrifugo\nDESCRIPTION: JSON configuration for connecting Centrifugo to a Tarantool instance. Note that the Tarantool engine is deprecated and will be removed in Centrifugo v6.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"tarantool\",\n    \"tarantool_address\": \"127.0.0.1:3301\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Streaming via `enabled` Flag in Centrifugo Configuration (JSON)\nDESCRIPTION: This JSON snippet illustrates enabling the HTTP streaming feature in Centrifugo's configuration file (`config.json`). Setting `http_stream.enabled` to `true` activates both the primary HTTP streaming endpoint (`/connection/http_stream` by default) and the emulation endpoint (`/emulation` by default) necessary for bidirectional communication using the JavaScript SDK.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/http_stream.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"http_stream\": {\n        \"enabled\": true\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Presence Option in Centrifugo Server (JavaScript/JSON)\nDESCRIPTION: This snippet defines a Centrifugo server namespace configuration object with the online presence feature enabled on the \\\"public\\\" namespace by setting the \\\"presence\\\" flag to true. The object must be included in your server configuration file (e.g., config.json) for presence tracking to be activated on corresponding channels. No dependencies required other than Centrifugo itself; key parameters are the namespace name and the presence flag. Input: JSON config file; Output: presence tracking available for specified namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/presence.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"namespaces\": [{\n        \"name\": \"public\",\n        \"presence\": true\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Centrifugo PRO License Key in Configuration\nDESCRIPTION: This JSON configuration example shows how to set the Centrifugo PRO license key in the config.json file to unlock all PRO features.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/install_and_run.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"license\": \"<YOUR_LICENSE_KEY>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Backend Response for Centrifugo Connect Proxy (JSON)\nDESCRIPTION: This JSON snippet illustrates a minimal successful response that the backend application should return to Centrifugo after processing a connect proxy request. The presence of the `result` object indicates success, and the `user` field within it provides the authenticated user's ID, allowing Centrifugo to accept the connection. The backend can include other optional fields as described in the `ConnectResult` structure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"result\": {\n    \"user\": \"56\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example Output of Default Environment Variables (Bash)\nDESCRIPTION: Illustrates the typical output when running `centrifugo defaultenv --base config.json --base-non-zero-only` with the preceding example JSON configuration. It shows environment variables corresponding only to the non-zero values set in the base file (`client.allowed_origins`, `engine.redis.address`, `engine.type`), skipping `admin.enabled` which was set to `false`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/console_commands.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_CLIENT_ALLOWED_ORIGINS=\"http://localhost:8000\"\nCENTRIFUGO_ENGINE_REDIS_ADDRESS=\"redis://localhost:6379\"\nCENTRIFUGO_ENGINE_TYPE=\"redis\"\n```\n\n----------------------------------------\n\nTITLE: Querying Unique Connected Users in ClickHouse SQL\nDESCRIPTION: SQL query to retrieve a distinct list of user identifiers from the `centrifugo.connections_distributed` table. This shows all unique users who have established a connection recorded in the analytics data. Includes example output.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT user\nFROM centrifugo.connections_distributed;\n\n‚îå‚îÄuser‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ user_1   ‚îÇ\n‚îÇ user_2   ‚îÇ\n‚îÇ user_3   ‚îÇ\n‚îÇ user_4   ‚îÇ\n‚îÇ user_5   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Enabling Sub Refresh Proxy for Global Channels\nDESCRIPTION: Configuration example showing how to enable subscription refresh proxy for all channels without a namespace in Centrifugo. It defines the endpoint and sets the global proxy_sub_refresh flag to true.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_sub_refresh_endpoint\": \"http://localhost:3000/centrifugo/sub_refresh\",\n  \"proxy_sub_refresh\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Disconnect from Proxy Backend\nDESCRIPTION: JSON payload example for custom client disconnection with a specific reason and code. Applications must use codes in range 4000-4999, with 4000-4499 advising reconnection and 4500-4999 being terminal codes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disconnect\": {\n    \"code\": 4500,\n    \"reason\": \"disconnect reason\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Static HTTP Headers to Centrifugo Connect Proxy (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to add a static set of HTTP headers to outgoing connect proxy requests in Centrifugo. Within the `client.proxy.connect.http` object, `static_headers` defines a map where keys are header names (`X-Custom-Header`) and values are the static header values (`custom value`). It also includes proxying the `Cookie` header via `http_headers`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"client\": {\n    \"proxy\": {\n      \"connect\": {\n        \"enabled\": true,\n        \"endpoint\": \"https://your_backend/centrifugo/connect\",\n        \"http_headers\": [\n          \"Cookie\"\n        ],\n        \"http\": {\n          \"static_headers\": {\n            \"X-Custom-Header\": \"custom value\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering WebSocket Packets in Wireshark\nDESCRIPTION: This command filters WebSocket packets in Wireshark, capturing data sent from port 8000. It's used to analyze the network traffic of the football match simulation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-05-30-real-time-data-compression-experiments.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntcp.srcport == 8000 && websocket\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo Server with JWT Authentication in Javascript\nDESCRIPTION: This snippet shows how to initialize a Centrifuge client, set a JSON Web Token (JWT) for user authentication using `setToken()`, and then connect to the Centrifugo server. Authentication via JWT is a common requirement for securing client connections. The JWT should be generated according to the application's authentication logic.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge('ws://localhost:8000/connection/websocket');\ncentrifuge.setToken('<USER-JWT>')\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: Starting First Centrifugo Node with Redis Engine (Shell)\nDESCRIPTION: Starts the first Centrifugo instance on port 8000, explicitly configured to use the Redis engine located at `127.0.0.1:6379`. This command assumes a `config.json` file exists and a Redis server is running at the specified address. It's the first step in setting up a multi-node cluster.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```\ncentrifugo --config=config.json --port=8000 --engine=redis --redis_address=127.0.0.1:6379\n```\n```\n\n----------------------------------------\n\nTITLE: Generating User Connection Token (Bash)\nDESCRIPTION: Uses the `gentoken` command to generate an HMAC SHA-256 based connection token for a specific user ID (`-u`). It requires a configuration file (`-c`) to access the token secret key. By default, the token expires in 1 week, but a custom time-to-live (TTL) in seconds can be specified using the `-t` flag. This command is primarily useful during development.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/console_commands.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gentoken -c config.json -u 28282\n```\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gentoken -c config.json -u 28282 -t 3600\n```\n\n----------------------------------------\n\nTITLE: Enabling SSE Support in Centrifugo Configuration File (JSON)\nDESCRIPTION: This JSON snippet illustrates enabling the SSE (Server-Sent Events) transport at the server level in Centrifugo via its configuration file. Setting the 'sse' property to true is required to activate both the SSE endpoint and the emulation endpoint for HTTP-based fallback connections. This is a server-side prerequisite when using SSE in Centrifugo clients. The configuration file should be edited with care, only including supported keys and values. Dependencies: valid Centrifugo installation and permissions to edit configuration files.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/sse.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"sse\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Port in Centrifugo\nDESCRIPTION: JSON configuration for changing the default port (8000) to a custom port value.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"port\": 9000\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Audience Requirement in Centrifugo (JSON)\nDESCRIPTION: This code sample shows how to enforce JWT audience (aud claim) validation for incoming client tokens by setting the client.token.audience option in Centrifugo's config.json. The value \"centrifugo\" is the expected audience and tokens lacking this or having a different aud will be rejected. This setting also affects subscription tokens and can be separated if needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"token\": {\n      ...\n      \"audience\": \"centrifugo\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SSE Connection from Browser (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to initiate a unidirectional SSE connection to Centrifugo from a web browser. It constructs the connection URL, appends the required `cf_connect` parameter containing the JSON-stringified connection command (including the authentication token '<JWT>'), and then creates a new `EventSource` object using this URL. Note that the URL query length should generally be kept under 2048 characters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_sse.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst url = new URL('http://localhost:8000/connection/uni_sse');\nurl.searchParams.append(\"cf_connect\", JSON.stringify({\n    'token': '<JWT>'\n}));\n\nconst eventSource = new EventSource(url);\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Simple Centrifugo JWT Token in NodeJS\nDESCRIPTION: NodeJS code to create a basic HS256 JWT for Centrifugo with just a 'sub' claim using the 'jsonwebtoken' library. Required dependency: 'jsonwebtoken' npm module. Input: user identifier, secret key. Output: JWT string for client connection. No expiration is implemented.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar jwt = require('jsonwebtoken');\n\nvar token = jwt.sign({ sub: '42' }, 'secret');\n\nconsole.log(token);\n```\n\n----------------------------------------\n\nTITLE: Configuring APNs Push Notifications in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet illustrates configuring Apple Push Notification service (APNs) in Centrifugo using token-based authentication. It requires PostgreSQL and Redis (Centrifugo PRO) configurations, enabling 'apns', setting the endpoint (e.g., 'development'), bundle ID, authentication method ('token'), and providing the path to the token authentication key file (`.p8`), Key ID, and Team ID. Certificate-based authentication (`.p12`) is also supported via separate options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/push_notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"push_notifications\": {\n        \"redis_address\": \"localhost:6379\",\n        \"enabled_providers\": [\"apns\"],\n        \"apns_endpoint\": \"development\",\n        \"apns_bundle_id\": \"com.example.your_app\",\n        \"apns_auth\": \"token\",\n        \"apns_token_auth_key_path\": \"/path/to/auth/key/file.p8\",\n        \"apns_token_key_id\": \"<your_key_id>\",\n        \"apns_token_team_id\": \"your_team_id\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence Statistics via Centrifugo HTTP API - Bash\nDESCRIPTION: Demonstrates usage of bash shell and the 'http' utility to POST a 'presence_stats' query to the Centrifugo API. The example targets the 'public:chat' channel and supplies an authorization key. Upon success, the returned JSON object includes the number of clients and unique users in the channel. This is useful for quick monitoring of activity without detailed presence inspection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"method\": \"presence_stats\", \"params\": {\"channel\": \"public:chat\"}}' | http \"localhost:8000/api\" Authorization:\"apikey KEY\"\nHTTP/1.1 200 OK\nContent-Length: 43\nContent-Type: application/json\nDate: Thu, 17 May 2018 22:09:44 GMT\n\n{\n    \"result\": {\n        \"num_clients\": 0,\n        \"num_users\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo API Error Response Format (JSON)\nDESCRIPTION: This JSON snippet illustrates the structure of an error response returned by the Centrifugo server API when an operation fails. Instead of a `result` field, the response contains an `error` object with a numeric `code` identifying the error type (e.g., 102 for 'namespace not found') and a descriptive `message` string explaining the issue. This format is consistent across different API methods.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": {\n        \"code\": 102,\n        \"message\": \"namespace not found\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Batched WebSocket Messages - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to decode multiple JSON push messages sent in a single WebSocket frame by splitting incoming data at newline characters. It uses \\\"trim\\\" to handle trailing newlines and splits the data before parsing each segment with JSON.parse. Dependencies: standard JavaScript runtime; assumes input string contains valid JSON objects separated by \\n. Input: string data from WebSocket; Output: array of parsed messages. If message boundaries are not properly maintained, parsing errors may occur.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_websocket.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = data.trim().split('\\n').map(r => JSON.parse(r));\n```\n\n----------------------------------------\n\nTITLE: Subscribe Proxy Response Example for Allowed Subscription\nDESCRIPTION: Example of the expected JSON response format for a subscribe proxy request when the subscription is allowed. The empty result object indicates successful authorization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {}}\n```\n\n----------------------------------------\n\nTITLE: Pausing and Unpausing Docker Compose Services - Bash\nDESCRIPTION: These commands allow temporarily suspending (pausing) and resuming (unpausing) the execution of specific Docker Compose services, such as Kafka Connect, for failure scenario testing. The 'connect' parameter refers to the service name in docker-compose.yml. The pause command halts the service, while unpause restarts it without restart or data loss.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/tips_and_tricks.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose pause connect\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose unpause connect\n```\n\n----------------------------------------\n\nTITLE: Enabling Tenant Channels Option in Centrifugo JSON Configuration\nDESCRIPTION: This configuration snippet shows how to enable tenant channels in Centrifugo PRO by setting the \"tenant_channels\" boolean option to true in the config.json file. This is a prerequisite for using tenant-specific channel name patterns. The config must be part of your main Centrifugo server configuration and placed alongside other options. Input is a JSON object, with \"tenant_channels\" as a top-level key. The rest of the configuration is omitted for brevity and should be included as required.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/tenant_channels.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // rest of the config ...\n    \"tenant_channels\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Options in Centrifugo PRO Config - JSON\nDESCRIPTION: This snippet demonstrates how to enable channel features such as presence, message history (with a specified size and TTL), and force publication recovery for channels without a namespace in Centrifugo PRO. The configuration also permits both anonymous and authenticated clients to subscribe, publish, and access presence and history APIs. Dependencies include having Centrifugo PRO installed and using the valid structure in a config.json file. Key parameters include various boolean flags to control access for different client types. Inputs: N/A (static configuration). Outputs: None directly; the config influences Centrifugo server behavior. All keys must be valid according to Centrifugo specification.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channels.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"token\": {\n      \"hmac_secret_key\": \"my-secret-key\"\n    }\n  },\n  \"channel\": {\n    \"without_namespace\": {\n      \"presence\": true,\n      \"history_size\": 10,\n      \"history_ttl\": \"300s\",\n      \"force_recovery\": true,\n      \"allow_subscribe_for_anonymous\": true,\n      \"allow_subscribe_for_client\": true,\n      \"allow_publish_for_anonymous\": true,\n      \"allow_publish_for_subscriber\": true,\n      \"allow_presence_for_anonymous\": true,\n      \"allow_presence_for_subscriber\": true,\n      \"allow_history_for_anonymous\": true,\n      \"allow_history_for_subscriber\": true\n    }\n  },\n  \"http_api\": {\n    \"key\": \"secret-api-key\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Additional Connection Info - Python\nDESCRIPTION: This Python snippet demonstrates including additional metadata in the JWT's payload via the 'info' claim. It adds a 'name' field to the info dictionary along with the standard 'sub'. This extra data can be used by Centrifugo extensions for user identification or authorization. Requires PyJWT; 'secret' should be the secure key shared by Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\\n\\nclaims = {\\\"sub\\\": \\\"42\\\", \\\"info\\\": {\\\"name\\\": \\\"Alexander Emelin\\\"}}\\ntoken = jwt.encode(claims, \\\"secret\\\", algorithm=\\\"HS256\\\").decode()\\nprint(token)\\n\n```\n\n----------------------------------------\n\nTITLE: Creating CDC Events in Django for CDC Pipeline in Python\nDESCRIPTION: Shows how to create a CDC model instance during an event (e.g., after a transaction), assigning partition based on a room_id hash and setting event details. The snippet is tightly coupled with the Debezium CDC architecture, ensuring that each insert is made transactionally for downstream propagation. Inputs include room_id and broadcast_payload; partitioning logic being offloaded to Debezium/Kafka. Assumes the CDC model is defined as above, and that this code appears inside transactional context for atomicity.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# In cdc case Debezium will use this field for setting Kafka partition.\n# We should not prepare proper partition ourselves in this case.\npartition = hash(room_id)\n# Creating outbox object inside transaction will guarantee that Centrifugo will\n# process the command at some point. In normal conditions ‚Äì almost instantly. In this\n# app Debezium will perform CDC and send outbox events to Kafka, event will be then\n# consumed by Centrifugo. The advantages here is that Debezium reads WAL changes and\n# has a negligible overhead on database performance. And most efficient partitioning.\n# The trade-off is that more hops add more real-time event delivery latency. May be\n# still instant enough though.\nCDC.objects.create(method='broadcast', payload=broadcast_payload, partition=partition)\n```\n\n----------------------------------------\n\nTITLE: Updated Centrifuge Client Initialization with Token\nDESCRIPTION: JavaScript code showing how to initialize the Centrifuge client with the generated JWT authentication token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\", {\n    token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM3MjIiLCJleHAiOjE2NTU0NDgyOTl9.mUU9s5kj3yqp-SAEqloGy8QBgsLg0llA7lKUNwtHRnw\"\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring Override Channel Options for Centrifugo Subscription JWT (JSON)\nDESCRIPTION: This JSON snippet illustrates how to use the 'override' claim in a Centrifugo subscription JWT to programmatically change specific channel options on a per-subscriber basis. The object shows how to disable presence for a single subscriber, following the prescribed BoolValue format Centrifugo expects. This pattern is required for any advanced per-channel claim customization and must be part of the JWT payload if override logic is desired.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channel_token_auth.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"override\": {\n        \"presence\": {\n            \"value\": false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Centrifuge client-side JavaScript\nDESCRIPTION: Client-side JavaScript for connecting to Centrifugo, handling connection events, and displaying messages. This code is included in the main application page.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-10-18-integrating-with-nodejs.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawText(text) {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n    document.getElementById('log').appendChild(div);\n}\n\nconst centrifuge = new Centrifuge('ws://localhost:9000/connection/websocket');\n\ncentrifuge.on('connect', function () {\n    drawText('Connected to Centrifugo');\n});\n\ncentrifuge.on('disconnect', function () {\n    drawText('Disconnected from Centrifugo');\n});\n\ncentrifuge.on('publish', function (ctx) {\n    drawText('Publication, time = ' + ctx.data.time);\n});\n\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: Channel Subscription Handler in Go\nDESCRIPTION: Server-side implementation of subscription handler that controls channel access permissions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nnode.OnConnect(func(client *centrifuge.Client) {\n    client.OnSubscribe(func(e centrifuge.SubscribeEvent, cb centrifuge.SubscribeCallback) {\n        if e.Channel != \"example\" {\n            cb(centrifuge.SubscribeReply{}, centrifuge.ErrorPermissionDenied)\n            return\n        }\n        cb(centrifuge.SubscribeReply{}, nil)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Simplest Connection JWT - Node.js\nDESCRIPTION: This Node.js snippet details how to asynchronously create a minimal JWT using the 'jose' library. The token includes a 'sub' claim, uses the 'HS256' algorithm, and is signed with a secret. The asynchronous 'SignJWT' and 'sign' methods handle encoding and header definition. Output is printed to console. Required dependency: 'jose' package (install with npm or yarn). Used to issue tokens for Centrifugo clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst jose = require('jose');\\n\\n(async function main() {\\n  const secret = new TextEncoder().encode('secret')\\n  const alg = 'HS256'\\n\\n  const token = await new jose.SignJWT({ sub: '42' })\\n    .setProtectedHeader({ alg })\\n    .sign(secret)\\n\\n  console.log(token);\\n})();\\n\n```\n\n----------------------------------------\n\nTITLE: Using SSE with Bidirectional Emulation as a Fallback for WebSocket in Centrifuge JS SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet configures the Centrifuge JavaScript SDK to use WebSocket as the primary transport and fallback to SSE when necessary, providing maximum compatibility for browsers. It defines an ordered array of transport options, each specifying 'transport' type and 'endpoint' URL. Dependencies include the Centrifuge SDK, a properly configured Centrifugo server, and CORS/allowed_origins settings. 'centrifuge.connect()' initiates the connection with fallback. Inputs are the array of transports; if both endpoints are reachable, the SDK uses them in defined order.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/sse.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst transports = [\\n    {\\n        transport: 'websocket',\\n        endpoint: 'ws://localhost:8000/connection/websocket'\\n    },\\n    {\\n        transport: 'sse',\\n        endpoint: 'http://localhost:8000/connection/sse'\\n    }\\n];\\nconst centrifuge = new Centrifuge(transports);\\ncentrifuge.connect()\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Docker Setup\nDESCRIPTION: Docker Compose configuration for setting up Centrifugo server with specific version and port exposure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncentrifugo:\n  image: centrifugo/centrifugo:v5.2.0\n  volumes:\n    - ./centrifugo/config.json:/centrifugo/config.json\n  command: centrifugo -c config.json\n  expose:\n    - 8000\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo with a Single Redis Cluster (JSON)\nDESCRIPTION: This JSON snippet configures Centrifugo to connect to a Redis Cluster setup. The `redis_cluster_address` option requires an array containing at least one string, where the string is a comma-separated list of seed node addresses (e.g., `localhost:30001,localhost:30002,localhost:30003`) for the cluster. Centrifugo uses these seeds to discover the entire cluster topology.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"redis_cluster_address\": [\n        \"localhost:30001,localhost:30002,localhost:30003\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence via Centrifugo API using cURL (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to query the Centrifugo server API using cURL to retrieve presence information for a specific channel ('chat:index'). It requires sending a POST request with the method 'presence' and the channel name in the parameters. An API key must be included in the Authorization header. The example output shows the structure containing user IDs, client IDs, and connection info for currently subscribed clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/channels.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"presence\", \"params\": {\"channel\": \"chat:index\"}}' \\\n  http://localhost:8000/api\n{\n    \"result\": {\n        \"presence\": {\n            \"66fdf8d1-06f0-4375-9fac-db959d6ee8d6\": {\n                \"user\": \"2694\",\n                \"client\": \"66fdf8d1-06f0-4375-9fac-db959d6ee8d6\",\n                \"conn_info\": {\"name\": \"Alex\"}\n            },\n            \"d4516dd3-0b6e-4cfe-84e8-0342fd2bb20c\": {\n                \"user\": \"2694\",\n                \"client\": \"d4516dd3-0b6e-4cfe-84e8-0342fd2bb20c\",\n                \"conn_info\": {\"name\": \"Alex\"}\n            }\n            \"g3216dd3-1b6e-tcfe-14e8-1342fd2bb20c\": {\n                \"user\": \"56\",\n                \"client\": \"g3216dd3-1b6e-tcfe-14e8-1342fd2bb20c\",\n                \"conn_info\": {\"name\": \"Alice\"}\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Development Configuration for Centrifugo with ClickHouse\nDESCRIPTION: JSON configuration for setting up Centrifugo with a single ClickHouse instance for development purposes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"clickhouse_analytics\": {\n        \"enabled\": true,\n        \"clickhouse_dsn\": [\n            \"tcp://127.0.0.1:9000\"\n        ],\n        \"clickhouse_database\": \"centrifugo\",\n        \"clickhouse_cluster\": \"\",\n        \"export_connections\": true,\n        \"export_subscriptions\": true,\n        \"export_publications\": true,\n        \"export_operations\": true,\n        \"export_http_headers\": [\n            \"Origin\",\n            \"User-Agent\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Publish Proxy Per Namespace in Centrifugo Configuration - JSON\nDESCRIPTION: Demonstrates how to enable publish proxying for a specific channel namespace in Centrifugo's configuration. The \\\\\"namespaces\\\\\" array lists namespaces with their own \\\\\"proxy_publish\\\\\" flag. Endpoint and timeout are still at the global config level.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_publish_endpoint\": \"http://localhost:3000/centrifugo/publish\",\n  \"proxy_publish_timeout\":  \"1s\",\n  \"namespaces\": [{\n    \"name\": \"sun\",\n    \"proxy_publish\": true\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL via Docker Compose - Bash\nDESCRIPTION: This snippet demonstrates how to connect to a running PostgreSQL instance inside a Docker Compose environment using psql. It requires Docker and the compose file to define a service named 'db' with the grandchat user and database accessible at localhost:5432. Parameters include the username and database both as 'grandchat'. The output is an interactive psql session connected to the database, allowing direct SQL command execution.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/tips_and_tricks.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec db psql postgresql://grandchat:grandchat@localhost:5432/grandchat\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo GRPC Subscribe Proxy Globally (JSON)\nDESCRIPTION: This JSON configuration snippet enables the Subscribe Proxy using GRPC for all channels in the default (top-level) namespace. It specifies the `proxy_subscribe_endpoint` with a `grpc://` scheme and sets `proxy_subscribe` to true at the top level.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_subscribe_timeout\":  \"1s\",\n  \"proxy_subscribe\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dedicated Redis Throttling in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable and configure Redis-based operation throttling in Centrifugo PRO using a dedicated Redis instance. It sets specific rate limits (rate, interval, capacity) for 'publish' and 'rpc' operations, including a method-specific override for an RPC call.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/throttling.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"redis_throttling\": {\n        \"enabled\": false,\n        \"redis_address\": \"localhost:6379\",\n        \"buckets\": {\n            \"publish\": {\n                \"enabled\": true,\n                \"interval\": \"1s\",\n                \"rate\": 1,\n                \"capacity\": 1\n            },\n            \"rpc\": {\n                \"enabled\": true,\n                \"interval\": \"1s\",\n                \"rate\": 10,\n                \"capacity\": 1,\n                \"method_override\": [\n                    {\n                        \"method\": \"updateActiveStatus\",\n                        \"interval\": \"20s\",\n                        \"rate\": 1,\n                        \"capacity\": 1\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Command Pipelining with JSON Streaming in Bash\nDESCRIPTION: Example of combining multiple commands into a single request using JSON streaming format. This approach improves server throughput by sending two publish commands in one HTTP request.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data $'{\"method\": \"publish\", \"params\": {\"channel\": \"test1\", \"data\": {\"test\": 1}}}\\n{\"method\": \"publish\", \"params\": {\"channel\": \"test2\", \"data\": {\"test\": 2}}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Invalidating User Tokens using Centrifugo API\nDESCRIPTION: Curl command to call the invalidate_user_tokens API method in Centrifugo PRO. This example shows how to invalidate all tokens for a specific user issued before a certain time, with an expiration set for the revocation information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/token_revocation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"invalidate_user_tokens\", \"params\": {\"user\": \"test\", \"issued_before\": 1635845022, \"expire_at\": 1635845122}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Providing Proxy RPC Endpoint Configuration for Centrifugo (JSON)\nDESCRIPTION: This JSON code lists Centrifugo server configuration fields to enable the proxy_rpc endpoint and set request timeout. It is to be inserted within the Centrifugo config file, ensuring that all client-initiated RPC calls are forwarded to the specified endpoint. Prerequisites: Backend available to serve at endpoint. Key parameters: 'proxy_rpc_endpoint' (URL), 'proxy_rpc_timeout' (duration).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_rpc_endpoint\": \"http://localhost:3000/centrifugo/connect\",\n  \"proxy_rpc_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Admin UI Endpoint URL with Custom Internal Port\nDESCRIPTION: This URL shows the address where the admin web interface would be accessible if the `internal_port` option is set to 9000 in the Centrifugo configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Consumer in Centrifugo with JSON - JavaScript/JSON\nDESCRIPTION: This snippet shows the JSON configuration for setting up a Kafka async consumer in Centrifugo, with essential fields including consumer name, type, broker addresses, topics to consume, and the consumer group. Inputs: configuration JSON; Output: Centrifugo Kafka consumer ready to process commands. Dependencies: Centrifugo, accessible Kafka cluster. Constraints: Topics and brokers must be reachable.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/consumers.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n  ...\n  \"consumers\": [\n    {\n      \"name\": \"my_kafka_consumer\",\n      \"type\": \"kafka\",\n      \"kafka\": {\n        \"brokers\": [\"localhost:9092\"],\n        \"topics\": [\"postgres.public.chat_cdc\"],\n        \"consumer_group\": \"centrifugo\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Pattern-Based Channels using Centrifugo JavaScript Client\nDESCRIPTION: This JavaScript code demonstrates how a client subscribes to a Centrifugo channel that follows a configured pattern. It creates a new Centrifuge client and subscribes to the '/users/mario' channel, which should match a previously defined server pattern. Requires the Centrifuge JS client library and a running Centrifugo PRO server with corresponding channel pattern configuration. The subscription will only work if the channel matches an enabled channel pattern.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/channel_patterns.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client := new Centrifuge(\"ws://...\", {});\nconst sub = client.newSubscription('/users/mario');\nsub.subscribe();\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a Channel in Centrifuge JavaScript SDK\nDESCRIPTION: This short snippet invokes the unsubscribe method on a subscription object to detach from a Centrifugo channel using the JavaScript SDK. This event triggers the 'unsubscribed' state and keeps the subscription in the registry for optional future resubscription. Prerequisite is a valid Subscription object.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsub.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Method Not Found (104)\nDESCRIPTION: Indicates that the method specified in the client's command does not exist or is not supported by the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    104\nMessage: \"method not found\"\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Uni HTTP Stream Transport\nDESCRIPTION: This command shows how to run Centrifugo with the uni_http_stream transport enabled, which allows connections from the terminal using curl.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/connections.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_UNI_HTTP_STREAM=1 centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Querying Active Channels in Centrifugo API (JSON)\nDESCRIPTION: This snippet shows the JSON structure for querying active channels using the Centrifugo API. It includes the method name and an empty params object.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"channels\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Members to Chat Rooms\nDESCRIPTION: Utility function to add multiple users to a chat room using bulk_create operation for efficiency. Handles users in batches of 100.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/scale.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom chat.models import RoomMember, Room\n\n\ndef fill_room(room_id, limit):\n    members = []\n    total = 0\n    room = Room.objects.get(pk=room_id)\n    for user in User.objects.all()[:limit]:\n        members.append(RoomMember(room=room, user=user))\n\n        if len(members) >= 100:\n            total += len(members)\n            RoomMember.objects.bulk_create(members, ignore_conflicts=True)\n            members = []\n            print(\"Total members created:\", total)\n\n    # Create remaining members.\n    if members:\n        total += len(members)\n        RoomMember.objects.bulk_create(members, ignore_conflicts=True)\n        print(\"Total members created:\", total)\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Setup for Centrifugo\nDESCRIPTION: Command to start Centrifugo using Docker Compose. This launches the Centrifugo service defined in the docker-compose.yml file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Empty Proxy in Centrifugo\nDESCRIPTION: Basic configuration for setting up a cache empty proxy endpoint with timeout settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/channel_cache_empty.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"proxy\": {\n      \"cache_empty\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/cache_empty\",\n        \"timeout\": \"1s\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Token Revocation Persistence - Centrifugo - JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to set up Redis as the persistence engine for Centrifugo PRO's token revocation and user token invalidation features. Explicit Redis address configuration for both `token_revoke` and `user_tokens_invalidate` is required, as sharding and configuration reuse are purposely not supported for safety. All `jti` and `iat` based revocation information will be stored in the specified Redis instance. No additional parameters are required beyond a valid Redis host:port, and this should be provided exactly as shown.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/token_revocation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"token_revoke\": {\n        \"persistence_engine\": \"redis\",\n        \"redis_address\": \"localhost:6379\"\n    },\n    \"user_tokens_invalidate\": {\n        \"persistence_engine\": \"redis\",\n        \"redis_address\": \"localhost:6379\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example for Unknown Namespace - JSON\nDESCRIPTION: Sample JSON output from Centrifugo's HTTP API when attempting to publish to an unknown namespace. The error object contains both a numeric code and a descriptive message. The standard HTTP status code will still be 200 (OK) even in error scenarios.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": {\n        \"code\": 102,\n        \"message\": \"namespace not found\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Simple Centrifugo JWT Token in Python\nDESCRIPTION: This Python snippet shows the minimal generation of an HS256-signed JWT containing only a 'sub' claim, suitable for Centrifugo client connection. The 'PyJWT' library is required. Input: user‚Äôs subject identifier ('sub'), secret signing key. Output: JWT token string for use as a Centrifugo connection credential. No expiration is set in this variant.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\n\ntoken = jwt.encode({\"sub\": \"42\"}, \"secret\").decode()\n\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Generating a JWT Token for a User with Go (go)\nDESCRIPTION: This Go snippet (CLI command) shows how to generate an HMAC-SHA256 JWT for user authentication with Centrifugo. Requires a Go environment, a main.go script supporting the 'gentoken' subcommand, and all necessary Go dependencies installed. Main parameters: -u user12 sets the subject for the token. Outputs a valid JWT token for downstream HTTP/WS authentication. The snippet includes expected command-line output.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_http_stream.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n‚ùØ go run main.go gentoken -u user12\nHMAC SHA-256 JWT for user user12 with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIiLCJleHAiOjE2MjUwNzMyODh9.BxmS4R-X6YXMxLfXNhYRzeHvtu_M2NCaXF6HNu7VnDM\n```\n\n----------------------------------------\n\nTITLE: Encoding Batched JSON Commands in JavaScript (Centrifugo)\nDESCRIPTION: Presents a JavaScript function `encodeCommands` that takes an array of command objects. It iterates through the commands, stringifies each one into JSON using `JSON.stringify`, and joins them with newline characters (`\\n`) to create a single string suitable for sending batched commands in the line-delimited JSON format expected by Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_protocol.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n}\n```\n\n----------------------------------------\n\nTITLE: API Login Function Implementation\nDESCRIPTION: Function to handle login API calls using axios with CSRF token\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const login = async (csrfToken: string, username: string, password: string) => {\n  const response = await axios.post(`${API_ENDPOINT_BASE}/api/login/`, { username, password }, {\n    headers: {\n      \"X-CSRFToken\": csrfToken\n    }\n  });\n  return response.data\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to SSE Endpoint with EventSource - JavaScript\nDESCRIPTION: This snippet demonstrates initializing a connection to Centrifugo's unidirectional SSE endpoint using the EventSource API in JavaScript. It constructs the endpoint URL and appends a JSON-encoded connect command as a URL parameter ('cf_connect'), which includes authentication information such as a JWT token. The EventSource object is used to establish the SSE connection. Dependencies include a modern browser supporting the EventSource API. The 'token' parameter must be replaced with a valid JWT for authentication. This approach is constrained by browser URL length limits (recommended under 2048 characters) and must use GET requests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_sse.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = new URL('http://localhost:8000/connection/uni_sse');\\nurl.searchParams.append(\"cf_connect\", JSON.stringify({\\n    'token': '<JWT>'\\n}));\\n\\nconst eventSource = new EventSource(url);\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Admin Mode in Centrifugo (JSON)\nDESCRIPTION: JSON configuration snippet to enable the admin UI (`admin: true`) in insecure mode (`admin_insecure: true`). This mode allows accessing the admin interface without providing a password, useful for development or when access is controlled externally (e.g., via firewall). While `admin_password` and `admin_secret` are shown, they are not strictly required for login in this mode. Use with caution in production.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/admin_web.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...,\n    \"admin\": true,\n    \"admin_insecure\": true,\n    \"admin_password\": \"<PASSWORD>\",\n    \"admin_secret\": \"<SECRET>\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Replica Subscription\nDESCRIPTION: Configuration to enable Redis replica subscription and move channel subscriptions to replica nodes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/scalability.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"redis+cluster://localhost:7000\",\n      \"replica_client\": {\n        \"enabled\": true\n      },\n      \"subscribe_on_replica\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Port in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to change the default port (8000) on which Centrifugo listens for connections and serves endpoints. Setting `port` to 9000 makes Centrifugo listen on that port instead.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"port\": 9000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ECDSA Public Key for JWT in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet illustrates how to configure an ECDSA public key in Centrifugo's config.json for JWT signature verification. The ecdsa_public_key field expects a PEM-encoded ECDSA public key and enables validation for EC256, EC384, or EC512 JWT algorithms. The correct PEM encoding is necessary for authentication to work properly.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"client\": {\n    \"token\": {\n      \"ecdsa_public_key\": \"-----BEGIN PUBLIC KEY-----\\nxyz23adf...\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Terminal): Connection Limit (3504)\nDESCRIPTION: The connection attempt is rejected, or an existing connection is terminated because a configured connection limit (e.g., per user ID) has been reached. Reconnection should not be attempted unless the limit condition changes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3504\nReason: \"connection limit\"\n```\n\n----------------------------------------\n\nTITLE: Setting Centrifugo Metrics via Environment Variable (Bash)\nDESCRIPTION: This snippet demonstrates how to enable the Prometheus metrics exporter in Centrifugo by setting the relevant environment variable in a bash shell. Requires access to a UNIX shell environment where Centrifugo will be run. The 'CENTRIFUGO_PROMETHEUS' environment variable is set to '1' to enable the feature. Input is a string boolean ('1' or 'true'), with no output except for the side effect on Centrifugo startup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport CENTRIFUGO_PROMETHEUS=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Status via Server API using cURL\nDESCRIPTION: This cURL command demonstrates how to retrieve user status information through the Centrifugo server API. It supports querying status for multiple users in a single request.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_status.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"get_user_status\", \"params\": {\"users\": [\"42\"]}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a Centrifugo Channel - JavaScript\nDESCRIPTION: Shows how to programmatically unsubscribe from a Centrifugo channel using the JavaScript SDK by calling the 'unsubscribe()' method on a subscription. This operation triggers the 'unsubscribed' event and stops automatic resubscription attempts. The subscription object remains registered and can be reused or removed as needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsub.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Sub Refresh Proxy Configuration\nDESCRIPTION: Configuration for setting up the subscription refresh proxy endpoint\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"proxy_sub_refresh_endpoint\": \"http://localhost:3000/centrifugo/sub_refresh\",\n  \"proxy_sub_refresh_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Configuration in TOML (Bash)\nDESCRIPTION: Uses the `genconfig` command with the `-c` flag to generate a Centrifugo configuration file named `config.toml` in TOML format instead of the default JSON. This demonstrates flexibility in configuration file formats.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig -c config.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Admin Web Interface Path in Centrifugo (JSON)\nDESCRIPTION: JSON configuration snippet demonstrating how to enable the admin UI (`admin: true`) and specify a custom directory path (`admin_web_path`) for the web interface files. This allows using a modified version of the official web UI and still requires `admin_password` and `admin_secret` for authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/admin_web.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...,\n    \"admin\": true,\n    \"admin_password\": \"<PASSWORD>\",\n    \"admin_secret\": \"<SECRET>\",\n    \"admin_web_path\": \"<PATH_TO_WEB_DIST>\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the 'notifications' Table Schema in ClickHouse SQL\nDESCRIPTION: Shows the SQL `CREATE TABLE` statement resulting from `SHOW CREATE TABLE centrifugo.notifications`. This table stores push notification event data within the `centrifugo` database, using the MergeTree engine. It includes details like provider, recipient, status, and error information. The table is partitioned by day based on the `time` column, ordered by `time`, and data expires after 1 day (TTL).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE centrifugo.notifications\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.notifications\n(\n    `uid` String,\n    `provider` String,\n    `type` String,\n    `recipient` String,\n    `device_id` String,\n    `platform` String,\n    `user` String,\n    `msg_id` String,\n    `status` String,\n    `error_message` String,\n    `error_code` String,\n    `time` DateTime\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Example Output of Starting Nats Server\nDESCRIPTION: This shows the typical console output when starting a Nats server using the `nats-server` command. It indicates the server version, confirms it's listening for client connections on the default port `4222` (on all interfaces `0.0.0.0`), displays the unique server ID, and states that the server is ready. This output is expected when setting up Nats as a broker for Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n```\n$ nats-server\n[3569] 2020/07/08 20:28:44.324269 [INF] Starting nats-server version 2.1.7\n[3569] 2020/07/08 20:28:44.324400 [INF] Git commit [not set]\n[3569] 2020/07/08 20:28:44.325600 [INF] Listening for client connections on 0.0.0.0:4222\n[3569] 2020/07/08 20:28:44.325612 [INF] Server id is NDAM7GEHUXAKS5SGMA3QE6ZSO4IQUJP6EL3G2E2LJYREVMAMIOBE7JT4\n[3569] 2020/07/08 20:28:44.325617 [INF] Server is ready\n```\n```\n\n----------------------------------------\n\nTITLE: Invalidating User Tokens API Call\nDESCRIPTION: cURL command example for invalidating all tokens for a specific user using the invalidate_user_tokens API endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/token_revocation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"user\": \"test\", \"issued_before\": 1635845022, \"expire_at\": 1635845122}' \\\n  http://localhost:8000/api/invalidate_user_tokens\n```\n\n----------------------------------------\n\nTITLE: Fetching Full History from End using Centrifugo History API\nDESCRIPTION: Explains how to use the Centrifugo history API with `limit: -1` and `reverse: true` to retrieve the entire publication history starting from the most recent publication (newest first). The number of returned publications is capped by the `client_history_max_publication_limit` server configuration (default 300).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/history_and_recovery.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: -1, since: null, reverse: true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo PRO Helm Chart values.yaml for Kubernetes - yaml\nDESCRIPTION: A snippet for values.yaml to configure a Kubernetes Helm chart to use the centrifugo/centrifugo-pro Docker image and a specific version tag. Prerequisites are Helm and Kubernetes. Main parameters include image registry, repository, and tag. Input: values.yaml; Output: Helm chart configuration for deploying PRO; Constraint: only part of the full values.yaml file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/install_and_run.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n...\nimage:\n  registry: docker.io\n  repository: centrifugo/centrifugo-pro\n  tag: v5.4.2\n```\n\n----------------------------------------\n\nTITLE: Finding Configuration Options using `defaultenv` and `grep` (Bash)\nDESCRIPTION: Illustrates a practical use case for the `defaultenv` command by piping its output to `grep`. This allows developers to quickly search for specific configuration options or keywords (like \"HMAC\" in this example) within the list of available environment variables.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultenv | grep \"HMAC\"\n```\n\n----------------------------------------\n\nTITLE: Setting the Connection Token in Centrifuge Client in JavaScript\nDESCRIPTION: This code sets the authentication token for the Centrifuge client, which is required when connecting to a Centrifugo server secured with token-based authentication. The setToken method accepts a string token and updates the client's credentials accordingly. Ensure the token string (e.g., JWT) is obtained and valid before invoking this method; otherwise, authentication will fail.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.setToken(\"XXX\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Uni-HTTP Stream in Centrifugo Configuration (JSON)\nDESCRIPTION: This JSON snippet shows how to enable the unidirectional HTTP streaming feature within Centrifugo's configuration file (`config.json`) by setting the `uni_http_stream` option to `true`. This allows clients to establish long-lived HTTP connections for receiving real-time messages from the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_http_stream.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"uni_http_stream\": true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Presence at Client Top-Level - JavaScript\nDESCRIPTION: This snippet demonstrates the use of the Centrifugo JavaScript client's top-level 'presence' API to query presence data for a channel. It highlights how server-side or administrative clients can invoke presence queries without relying on a subscription context. Requires the Centrifugo JavaScript client instance and that the session has presence permissions for the queried channel. Returns a presence data object containing active subscribers.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/presence.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await client.presence(channel);\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Centrifugo Configuration with Unidirectional WebSocket - JSON\nDESCRIPTION: This configuration example enables the unidirectional WebSocket endpoint, configures HMAC token authentication, and enables automatic user personal channel subscriptions. Must be placed in Centrifugo's config.json file and joined with other necessary server settings. Dependencies: Centrifugo server, valid secret keys, enabled features as documented. Parameters include token secret, subscription auto-enable, and WebSocket transport enable flag. Expects valid JSON and user management via JWT.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_websocket.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"token\": {\n      \"hmac_secret_key\": \"secret\"\n    },\n    \"subscribe_to_user_personal_channel\": {\n      \"enabled\": true\n    }\n  },\n  \"uni_websocket\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Port\nDESCRIPTION: JSON configuration for setting a custom internal port for admin, API, and debug endpoints.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...,\n    \"internal_port\": 9000\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry in Centrifugo Configuration (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to enable OpenTelemetry tracing within the Centrifugo configuration file. Setting both `opentelemetry` and `opentelemetry_api` to `true` activates tracing specifically for server API requests. Explicit enablement is required to avoid performance overhead when tracing is not needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/observability.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"opentelemetry\": true,\n  \"opentelemetry_api\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with OpenTelemetry Environment Variables (Bash)\nDESCRIPTION: This Bash command launches the Centrifugo server with OpenTelemetry environment variables set: OTEL_EXPORTER_OTLP_ENDPOINT (defines Jaeger endpoint), CENTRIFUGO_OPENTELEMETRY (enables OpenTelemetry), and CENTRIFUGO_OPENTELEMETRY_API (enables API tracing). Prerequisites: Jaeger instance from the previous step must be running, and Centrifugo binary must be accessible. Exports traces using http/protobuf by default; adjust OTEL_EXPORTER_OTLP_PROTOCOL if needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/observability.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4318\\\" CENTRIFUGO_OPENTELEMETRY=1 CENTRIFUGO_OPENTELEMETRY_API=1 ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Login Component Implementation\nDESCRIPTION: React component for handling user authentication with username and password\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ChatLogin: React.FC<ChatLoginProps> = ({ onSuccess }) => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const csrf = useContext(CsrfContext);\n\n  const handleLogin = async () => {\n    try {\n      const resp = await login(csrf, username, password)\n      onSuccess(resp.user.id.toString());\n    } catch (err) {\n      console.error('Login failed:', err);\n    }\n  };\n\n  return (\n    <form id=\"chat-login\" onSubmit={(e) => {\n      e.preventDefault()\n      handleLogin()\n    }}>\n      <div id=\"chat-login-logo-container\">\n        <img src={logo} width=\"100px\" height=\"100px\" />\n      </div>\n      <div className=\"input-container\">\n        <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} placeholder=\"Username\" />\n      </div>\n      <div className=\"input-container\">\n        <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} placeholder=\"Password\" />\n      </div>\n      <div className='login-button-container'>\n        <button>Login</button>\n      </div>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Centrifugo Server in JavaScript\nDESCRIPTION: Shows how to disconnect from a Centrifugo server after establishing a connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/client_api.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Enabling Singleflight Option in Centrifugo Configuration - JSON\nDESCRIPTION: Defines a partial Centrifugo configuration file with the `use_singleflight` option set to true, enabling deduplication of concurrent identical history and presence requests using an in-memory singleflight mechanism. Requires Centrifugo PRO and only provides benefits with remote engines like Redis. The main parameter is `use_singleflight` (boolean); setting it to true enables this optimization. The snippet should be added or merged into the `config.json` file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/engine_optimizations.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"use_singleflight\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Users via Centrifugo HTTP API - JSON\nDESCRIPTION: This JSON snippet defines the payload for the Centrifugo API method 'disconnect', allowing administrative force-disconnection of a user by their user ID. The 'params' object must include the 'user' parameter and may include optional values like 'client', 'session', 'whitelist', and a custom 'disconnect' object for detailed control. To use, send this JSON object in an authenticated HTTP POST request to the Centrifugo API endpoint. Expects an empty object as a result, and requires a valid user to be set.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"disconnect\",\n    \"params\": {\n        \"user\": \"USER ID\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Partition Notification Channel in PostgreSQL Consumer Config Using JSON\nDESCRIPTION: This JSON example demonstrates configuring the PostgreSQL consumer to use a LISTEN/NOTIFY channel for instant notification about partition updates. The 'partition_notification_channel' option is set, requiring proper trigger/setup in the database. Ensures low-latency message consumption by responding to notifications.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/consumers.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"consumers\": [\n    {\n      \"enabled\": true,\n      \"name\": \"my_postgresql_consumer\",\n      \"type\": \"postgresql\",\n      \"postgresql\": {\n        ...\n        \"partition_notification_channel\": \"centrifugo_partition_change\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Presence and Join/Leave Features on Subscription in Centrifuge (Go)\nDESCRIPTION: This Go snippet demonstrates how to set up a callback for the `OnSubscribe` event. Within the callback, it modifies the subscription reply options to enable both the online presence feature (`Presence: true`) and the reception of join/leave messages (`JoinLeave: true`) for the specific channel being subscribed to. This configuration allows clients to receive updates when users join or leave the channel and to query the current list of subscribers. It requires the `centrifuge` Go package.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n```go\nclient.OnSubscribe(func(e centrifuge.SubscribeEvent, cb centrifuge.SubscribeCallback) {\n    cb(centrifuge.SubscribeReply{\n        Options: centrifuge.SubscribeOptions{\n            Presence:   true,\n            JoinLeave:  true,\n        },\n    }, nil)\n})\n```\n```\n\n----------------------------------------\n\nTITLE: React WebSocket Connection Setup\nDESCRIPTION: JavaScript code for establishing WebSocket connection with Centrifugo using React useEffect hook.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  if (!userInfo.id) {\n    return;\n  }\n\n  let centrifuge: Centrifuge | null = null;\n\n  const init = async () => {\n    centrifuge = new Centrifuge(WS_ENDPOINT, {\n      debug: true\n    })\n    centrifuge.connect()\n  }\n\n  // As soon as we get authenticated user ‚Äì init our app.\n  init()\n\n  return () => {\n    if (centrifuge) {\n      console.log(\"disconnect Centrifuge\")\n      centrifuge.disconnect()\n    }\n  }\n}, [userInfo])\n```\n\n----------------------------------------\n\nTITLE: Defining Django Outbox Model in Python\nDESCRIPTION: Defines a Django model named `Outbox` representing the structure of the transactional outbox table in PostgreSQL. This table stores events (`method`, `payload`) intended for Centrifugo, along with partitioning information (`partition`) and a creation timestamp. Centrifugo's PostgreSQL consumer expects a table with this structure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Outbox(models.Model):\n    method = models.TextField(default=\"publish\")\n    payload = models.JSONField()\n    partition = models.BigIntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n```\n\n----------------------------------------\n\nTITLE: Defining the Distributed 'publications' Table Schema in ClickHouse SQL\nDESCRIPTION: Shows the SQL `CREATE TABLE` statement resulting from `SHOW CREATE TABLE centrifugo.publications_distributed;` (although the example output incorrectly names the created table `operations_distributed`). This definition creates a distributed table that sits on top of the local `publications` table across nodes in the `centrifugo_cluster`. Data distribution for queries is handled based on a murmurHash3 hash of the `channel` column.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE centrifugo.publications_distributed;\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.operations_distributed\n(\n    `channel` String,\n    `source` String,\n    `size` UInt64,\n    `client` String,\n    `user` String,\n    `time` DateTime\n)\nENGINE = Distributed('centrifugo_cluster', 'centrifugo', 'publications', murmurHash3_64(channel)) ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Retrieving Presence Statistics via Subscription - JavaScript\nDESCRIPTION: This code demonstrates how to retrieve summarized channel presence statistics using the 'presenceStats' method from a Centrifugo channel subscription. It fetches key counts (number of clients and unique users), returning an object with these statistics. Requires Centrifugo JavaScript SDK, an active subscription, and appropriate permissions. Input is the channel; output is a statistics summary object.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/presence.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.presenceStats(channel);\n```\n\n----------------------------------------\n\nTITLE: Publishing Message to User Channel in Centrifugo\nDESCRIPTION: CURL command to publish a message to a user's personal channel in Centrifugo. It sends a POST request to the API endpoint with the channel and message data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_http_stream.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/api/publish \\\n    -d '{\"channel\": \"#user12\", \"data\": {\"input\": \"hello\"}}' \\\n    -H \"Authorization: apikey 9230f514-34d2-4971-ace2-851c656e81dc\"\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Configuration File (Bash)\nDESCRIPTION: Starts the Centrifugo server, explicitly loading configuration settings from the specified `config.json` file located in the current directory. This is the standard command to run the server after generating or creating a configuration file. Requires the Centrifugo binary and the specified configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Centrifugo Stream History Using Go gocent Client - Go\nDESCRIPTION: This Go code demonstrates how to continuously paginate through a Centrifugo channel's publication history using the gocent client library. The example initializes pagination parameters (`limit` and `reverse`), then iterates through the stream by making repeated `History` API calls, updating its position with each publication. Upon reaching the stream end (fewer than `limit` publications returned), the direction of iteration is reversed. Dependencies include the gocent Go library and a properly configured Centrifugo client. Key parameters are `limit`, pagination direction (`reverse`), current position (`StreamPosition`), and channel context. The function streams offset-data pairs from history, adapts iteration direction at boundaries, and is intended as a demonstration for handling paginated history consumption in real-time Go applications.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/history_and_recovery.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Iterate by 10.\nlimit := 10\n// Paginate in reversed order first, then invert it.\nreverse := true\n// Start with nil StreamPosition, then fill it with value while paginating.\nvar sp *gocent.StreamPosition\n\nfor {\n\thistoryResult, err = c.History(\n        ctx,\n        channel,\n\t\tgocent.WithLimit(limit),\n\t\tgocent.WithReverse(reverse),\n        gocent.WithSince(sp),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error calling history: %v\", err)\n\t}\n\tfor _, pub := range historyResult.Publications {\n\t\tlog.Println(pub.Offset, \"=>\", string(pub.Data))\n\t\tsp = &gocent.StreamPosition{\n\t\t\tOffset: pub.Offset,\n\t\t\tEpoch:  historyResult.Epoch,\n\t\t}\n\t}\n\tif len(historyResult.Publications) < limit {\n\t\t// Got all pubs, invert pagination direction.\n\t\treverse = !reverse\n\t\tlog.Println(\"end of stream reached, change iteration direction\")\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Data to Multiple Channels via HTTP API using cURL (Bash)\nDESCRIPTION: This Bash snippet shows how to use the `broadcast` method of the Centrifugo HTTP API with `curl`. It sends the same data (`{\"text\": \"hello\"}`) efficiently to multiple channels (`user:1` and `user:2`) in a single API call. The request is a POST to the `/api/broadcast` endpoint, requiring the `X-API-Key` header and a JSON payload specifying the `channels` array and the `data` object.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channels\": [\"user:1\", \"user:2\"], \"data\": {\"text\": \"hello\"}}' \\\n  http://localhost:8000/api/broadcast\n```\n\n----------------------------------------\n\nTITLE: Deleting User Status via Centrifugo PRO Server API - Bash (curl)\nDESCRIPTION: Provides a command-line example for removing status records of specified users with Centrifugo's server API. The command sends a POST request with the 'delete_user_status' method in the request body and the user IDs in the parameters object. API key authorization and JSON headers are mandatory for successful execution.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_status.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"delete_user_status\", \"params\": {\"users\": [\"42\"]}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Minimal Real-Time Client Using centrifuge-js (HTML+JavaScript)\nDESCRIPTION: Implements a front-end client that connects to Centrifugo over WebSocket, subscribes to a channel, and updates the UI in real-time on message reception. Dependencies: centrifuge-js v2.8.4 (or later). Parameters: WebSocket endpoint (ws://localhost:8000/connection/websocket), channel to subscribe, JWT token for authentication. Inputs are handled via JavaScript event callbacks; output is rendered in the HTML DOM. The token must be replaced with a valid string.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>Centrifugo quick start</title>\n    </head>\n    <body>\n        <div id=\"counter\">-</div>\n        <script src=\"https://cdn.jsdelivr.net/gh/centrifugal/centrifuge-js@2.8.4/dist/centrifuge.min.js\"></script>\n        <script type=\"text/javascript\">\n            const container = document.getElementById('counter')\n            const centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\");\n            centrifuge.setToken(\"<TOKEN>\");\n            \n            centrifuge.on('connect', function(ctx) {\n                console.log(\"connected\", ctx);\n            });\n\n            centrifuge.on('disconnect', function(ctx) {\n                console.log(\"disconnected\", ctx);\n            });\n\n            centrifuge.subscribe(\"channel\", function(ctx) {\n                container.innerHTML = ctx.data.value;\n                document.title = ctx.data.value;\n            });\n\n            centrifuge.connect();\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Fetching Publications from Channel History Since a Specific Position Using Centrifuge SDK in JavaScript\nDESCRIPTION: Demonstrates fetching up to 10 publications from channel history starting from a specific known stream position using the Centrifuge Subscription's 'history' method. Assumes history is enabled for the channel. The method accepts an options object specifying the result limit and stream position ('offset' and 'epoch'). Inputs: limit and since; outputs: an array of publication entries.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resp = await subscription.history({limit: 10, since: {offset: 0, epoch: '...'}});\nconsole.log(resp.publications);\n```\n\n----------------------------------------\n\nTITLE: Building and Running Centrifugo from Source (Shell)\nDESCRIPTION: Clones the Centrifugo source code repository from GitHub using Git, navigates into the cloned project directory, compiles the Go source code using `go build` to create the executable, and then runs the locally built `./centrifugo` binary. This method requires Git and the Go development environment (Go toolchain) to be installed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/centrifugal/centrifugo.git\ncd centrifugo\ngo build\n./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Running ClickHouse Client with Docker (Bash)\nDESCRIPTION: Demonstrates how to connect to a running ClickHouse server container from another Docker container using the clickhouse-client entrypoint. Relies on a --link to reference the already running server and demonstrates client-server interaction in Dockerized environments.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --link click:clickhouse-server --entrypoint clickhouse-client clickhouse/clickhouse-server --host clickhouse-server\n```\n\n----------------------------------------\n\nTITLE: Allowing Localhost Origin for Client Connections (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `client.allowed_origins` option in Centrifugo's `config.json` to permit WebSocket and CORS requests originating from `http://localhost:3000`. This is crucial for preventing Cross-Site Request Forgery (CSRF) and WebSocket hijacking attacks during local development.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"client\": {\n    \"allowed_origins\": [\n      \"http://localhost:3000\"\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo Server with Admin Interface (Console)\nDESCRIPTION: Starts Centrifugo server with a specified configuration file and enables the built-in admin web UI. Only usable if configuration and binary are present. The admin interface listens on default port 8000 for management.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n./centrifugo --config=config.json --admin\n```\n\n----------------------------------------\n\nTITLE: Retrieving Channel History via Centrifugo API (Bash)\nDESCRIPTION: Shows how to use a curl command to retrieve the message history for a specific channel (`chat:index`) via the Centrifugo HTTP API. It sends a POST request to the `/api/history` endpoint with the channel name and an optional limit in the JSON payload. Requires `Content-Type` and `X-API-Key` headers. The response includes an array of historical publications (messages with data and offset), the stream epoch, and the latest offset.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channels.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat:index\", \"limit\": 100}' \\\n  http://localhost:8000/api/history\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"publications\": [\n            {\n                \"data\": {\n                    \"input\": \"1\"\n                },\n                \"offset\": 1\n            },\n            {\n                \"data\": {\n                    \"input\": \"2\"\n                },\n                \"offset\": 2\n            }\n        ],\n        \"epoch\": \"gWuY\",\n        \"offset\": 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins via Environment Variable in Bash\nDESCRIPTION: Defines multiple allowed origins for Centrifugo by setting the CENTRIFUGO_ALLOWED_ORIGINS environment variable as a space-separated string. Useful for ephemeral deployments or containerization where environment-based configuration is preferred. No dependencies apart from bash-compatible shell; Centrifugo parses this environment variable automatically. Input: space-separated origins. Output: sets allowed origins.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CENTRIFUGO_ALLOWED_ORIGINS=\"https://mysite1.example.com https://mysite2.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Enabling SQLite-Backed Namespace Management in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON configuration snippet enables the admin storage feature in Centrifugo PRO, specifically using SQLite as the backend (`storage_type: \"sqlite\"`). It activates database-driven namespace management by setting `manage_namespaces` to `true` and defines the database location via `storage_dsn`. This requires Centrifugo PRO and a configured SQLite database.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/db_namespaces.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"admin_storage\": {\n        \"enabled\": true,\n        \"storage_type\": \"sqlite\",\n        \"storage_dsn\": \"/path/to/centrifugo.db\",\n        \"manage_namespaces\": true\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: RPC Ping Configuration in JSON\nDESCRIPTION: Configuration to enable RPC ping extension in Centrifugo for measuring RTT (Round Trip Time).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"rpc_ping\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo Connect Proxy Request Payload (JSON)\nDESCRIPTION: This JSON snippet shows an example payload sent by Centrifugo to the configured backend endpoint when a client attempts to connect without a JWT and the connect proxy (using HTTP) is enabled. It includes essential details like the unique client ID generated by Centrifugo, the transport mechanism used (e.g., 'websocket'), the protocol ('json' or 'protobuf'), and the encoding ('json' or 'binary').\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo PRO DEB Package on Debian/Ubuntu - Bash\nDESCRIPTION: This command sequence downloads and installs the Centrifugo PRO DEB package for Debian or Ubuntu systems. It uses wget to fetch the specific release and dpkg to install it. Dependencies: Requires wget, sudo privileges, and dpkg tool on a compatible system.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/install_and_run.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/centrifugal/centrifugo-pro/releases/download/v4.0.0-beta.10/centrifugo-pro_4.0.0-beta.10_amd64.deb\nsudo dpkg -i centrifugo-pro_4.0.0-beta.10_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with a Configuration File - Bash\nDESCRIPTION: This bash command starts Centrifugo with an explicit 'config.json' using the '-c' flag. It is suitable for both development and production environments, ensuring the server uses the specified configuration file for all settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Configuration File (Bash)\nDESCRIPTION: Uses the `genconfig` command to automatically generate a configuration file with frequently required options. It supports JSON, YAML, and TOML formats based on the file extension provided with the `-c` flag. This command is primarily intended for development purposes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/console_commands.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig -c config.json\n```\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig -c config.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Read Buffer Size in Centrifugo (JSON)\nDESCRIPTION: Configures the 'read_buffer_size' option for Centrifugo's WebSocket transport in the configuration JSON file. No additional dependencies are required but must be merged into the main Centrifugo config. Setting this parameter controls the per-connection memory allocation for incoming WebSocket payloads. Input is an integer value in bytes; output is optimized server memory usage for WebSocket reads.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/websocket.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    ...\n    \"websocket\": {\n        \"read_buffer_size\": 512\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Centrifugo Built-In Server (bash)\nDESCRIPTION: This command leverages Centrifugo's optional static file server to serve files in the current directory, such as index.html, on port 3000. This is useful for quickly testing the browser client without setting up a separate web server. The --port flag allows specification of the listening port.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo serve --port 3000\n```\n\n----------------------------------------\n\nTITLE: Allowing Subdomain Origins with Wildcard (JSON)\nDESCRIPTION: This JSON configuration snippet illustrates using a wildcard (`*`) within the `client.allowed_origins` array in Centrifugo's `config.json`. This specific example allows connections from any subdomain under `example.com` (e.g., `https://foo.example.com`, `https://bar.example.com`) over HTTPS.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"client\": {\n    \"allowed_origins\": [\n      \"https://*.example.com\"\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Connection JWT with Centrifugo using Bash\nDESCRIPTION: Executes `centrifugo checktoken` to validate a given connection JWT (`<TOKEN>`) against the configuration specified in `config.json` (`-c`). Useful for testing tokens during development. Exits with code 1 on error or validation failure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/console_commands.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo checktoken -c config.json <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Rueidis Performance with Go Testing Framework\nDESCRIPTION: This Go code snippet demonstrates a parallel benchmark of the Rueidis Redis client using Go's testing.B API. It sets up a Rueidis client, then runs parallel Set operations configured for high concurrency (128 parallelism), measuring allocations and failure cases. Prerequisites include the rueidis Go module, a running Redis server (accessible on :6379), and proper Go test setup. Inputs are the testing.B object from 'testing', outputs are benchmark metrics like ns/op, B/op, and allocs/op. The key parameters include the parallelism factor and the Redis server address. This detailed benchmark structure is intended to measure throughput and efficiency under heavy load.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc BenchmarkRueidis(b *testing.B) {\n\tclient, err := rueidis.NewClient(rueidis.ClientOption{\n\t\tInitAddress: []string{\":6379\"},\n\t})\n\tif err != nil {\n\t\tb.Fatal(err)\n\t}\n\n\tb.ResetTimer()\n\tb.SetParallelism(128)\n\tb.ReportAllocs()\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tfor pb.Next() {\n\t\t\tcmd := client.B().Set().Key(\"rueidis\").Value(\"test\").Build()\n\t\t\tres := client.Do(context.Background(), cmd)\n\t\t\tif res.Error() != nil {\n\t\t\t\tb.Fatal(res.Error())\n\t\t\t}\n\t\t}\n\t})\n}\n\n```\n\n----------------------------------------\n\nTITLE: Blocking a User via HTTP API in Centrifugo (Bash)\nDESCRIPTION: This bash snippet demonstrates how to block a user in Centrifugo using an HTTP POST request to the \"/api/block_user\" endpoint. It sends JSON data specifying the user ID and an optional Unix timestamp expiration. The API key must be provided in the \"X-API-Key\" header, and the request requires content-type application/json. The result is currently an empty JSON object. Replace <API_KEY> and other parameters as necessary.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/user_block.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"user\": \"2695\", \"expire_at\": 1635845122}' \\\n  http://localhost:8000/api/block_user\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Subscription Token JWT Setting for Centrifugo (JSON)\nDESCRIPTION: This configuration JSON snippet demonstrates how to set up Centrifugo to accept a JWKS endpoint for connection JWTs while using a separate HMAC secret for validating subscription token JWTs. The 'separate_subscription_token_config' boolean isolates subscription token logic, and the 'subscription_token_hmac_secret_key' provides an independent secret for channel subscriptions. Configuration must be included in Centrifugo's main configuration file ('config.json').\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channel_token_auth.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_jwks_public_endpoint\": \"https://example.com/openid-connect/certs\",\n  \"separate_subscription_token_config\": true,\n  \"subscription_token_hmac_secret_key\": \"separate_secret_which_must_be_strong\"\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo User ID Header Configuration\nDESCRIPTION: Configuration example showing how to set up user ID extraction from HTTP headers\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"client_user_id_http_header\": \"X-User-Id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Centrifugo Subscription States and Events - Dart\nDESCRIPTION: Illustrates subscribing to a Centrifugo channel in Dart using the client SDK, listening to subscription state events ('subscribing', 'subscribed', 'unsubscribed'). Each event listener logs messages for the specific channel. Requires a Dart Centrifugo client and a target channel. Outputs include event messages for subscription state transitions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal onSubscriptionEvent = (dynamic event) async {\n  print('subscription $channel> $event');\n};\n\nfinal subscription = client.newSubscription(channel);\n\nsubscription.subscribing.listen(onSubscriptionEvent);\nsubscription.subscribed.listen(onSubscriptionEvent);\nsubscription.unsubscribed.listen(onSubscriptionEvent);\n\nawait subscription.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics Endpoint in Centrifugo Config (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates enabling the Prometheus metrics endpoint in Centrifugo. By setting `enabled` to `true` under the `prometheus` object, metrics will be exposed at the `/metrics` path for monitoring purposes using Prometheus.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"prometheus\": {\n    \"enabled\": true\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Value Overrides for Channel Options - JSON\nDESCRIPTION: This snippet demonstrates the structure of a BoolValue object used to override channel options dynamically in Centrifugo API requests (such as presence, join_leave, and recovery behaviors). It is a simple JSON object consisting of a single key 'value', which must be set to either true or false. This object can be supplied as an override for various subscription parameters, allowing fine-grained control of feature toggles. No external dependencies are required; the key input is the boolean value, and the only output is the serialized BoolValue object.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": true/false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Persistence for User Blocking in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable persistent storage for user blocking data using Redis in Centrifugo PRO. It specifies `redis` as the `storage_type` and provides the Redis server `address`. Note that consistent sharding is not supported for this feature, and only a single Redis shard address should be provided.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_block.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"user_block\": {\n    \"storage_type\": \"redis\",\n    \"redis\": {\n      \"address\": \"localhost:6379\" \n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Full Presence via Centrifugo Server API (Bash/cURL)\nDESCRIPTION: This Bash command uses cURL to make an HTTP POST request to the Centrifugo server's '/api/presence' endpoint. It queries detailed presence information for the specified channel ('public:test'), requiring a valid API key passed in the 'X-API-Key' header. The request body specifies the target channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/presence.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: YOUR_API_KEY\" \\\n  --request POST \\\n  --data '{\"channel\": \"public:test\"}' \\\n  http://localhost:8000/api/presence\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster in Centrifugo\nDESCRIPTION: Example showing how to configure Centrifugo to use Redis cluster with multiple seed nodes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"redis_cluster_address\": [\n        \"localhost:30001,localhost:30002,localhost:30003\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Channel Presence Statistics in JavaScript\nDESCRIPTION: This snippet shows how to call the `presenceStats` method on a subscription object to get statistics about the channel's presence, specifically the number of connected clients and the number of unique users. Requires presence to be configured for the channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst resp = await subscription.presenceStats();\n// resp contains a number of clients and a number of unique users.\n```\n```\n\n----------------------------------------\n\nTITLE: Reusing Centrifugo Redis Engine for Throttling (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to configure Centrifugo PRO's Redis throttling to reuse the main Redis engine connection instead of a dedicated one. By setting `use_redis_from_engine` to `true`, throttling operations will utilize the Redis instance defined by the global `redis_address` setting when the engine is set to 'redis'.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/throttling.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_address\": \"localhost:6379\",\n    \"redis_throttling\": {\n        \"enabled\": false,\n        \"use_redis_from_engine\": true,\n        \"buckets\": {\n            \"publish\": {\n                \"enabled\": true,\n                \"interval\": \"1s\",\n                \"rate\": 1,\n                \"capacity\": 1\n            }\n        }\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using `defaultenv` with a Base Configuration File (Bash)\nDESCRIPTION: Shows how to use the `centrifugo defaultenv` command with the `--base` flag followed by a configuration file path (e.g., `config.json`). This allows the command to output environment variables based on the values defined in the specified base configuration file, inheriting its settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultenv --base config.json\n```\n\n----------------------------------------\n\nTITLE: Receiving a Subscribe Reply in JSON (Centrifugo Protocol)\nDESCRIPTION: Shows a server's successful reply to a client's command in JSON format. The `id: 1` field echoes the ID from the original command, allowing the client to correlate the reply. The presence of the `subscribe` field (even if empty) indicates the command was processed successfully.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_protocol.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"subscribe\": {}}\n```\n\n----------------------------------------\n\nTITLE: Editing allowed_origins in Centrifugo Configuration (JSON)\nDESCRIPTION: Adding http://localhost:3000 to the allowed_origins array enables browser connections from the local development server. This field enhances security by restricting cross-origin requests to trusted sources only. It is required for browsers to connect to Centrifugo running with default CORS settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"allowed_origins\": [\"http://localhost:3000\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring APNs Push Notifications - Centrifugo PRO - JSON\nDESCRIPTION: This snippet configures APNs (Apple Push Notification service) as Centrifugo PRO's push provider using JSON config. It requires PostgreSQL and Redis configuration for token storage and queuing, and sets 'apns' as the provider. The 'apns' section specifies authentication details including 'endpoint' (typically 'development' or 'production'), app 'bundle_id', and authentication token key parameters. Path to the '.p8' key file must be specified and corresponding IDs provided. Additional authentication modes are available via cert_p12 properties. All required fields should be correctly set for APNs integration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"database\": {\\n    \"enabled\": true,\\n    \"postgresql\": {\\n      \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\\n    }\\n  },\\n  \"push_notifications\": {\\n    \"queue\": {\\n      \"redis\": {\\n        \"address\": \"localhost:6379\"\\n      }\\n    },\\n    \"enabled_providers\": [\\n      \"apns\"\\n    ],\\n    \"apns\": {\\n      \"endpoint\": \"development\",\\n      \"bundle_id\": \"com.example.your_app\",\\n      \"token_key_file\": \"/path/to/auth/key/file.p8\",\\n      \"token_key_id\": \"<your_key_id>\",\\n      \"token_team_id\": \"your_team_id\"\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Write Buffer Size - JSON\nDESCRIPTION: Illustrates configuration of the 'websocket_write_buffer_size' in Centrifugo's config.json to set the write buffer size for each WebSocket connection. By adjusting this value, you can reduce memory usage, although HTTP buffer reuse is disabled. Must be included in the Centrifugo configuration file, entry is in bytes, and the output is individual buffer allocation per connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/websocket.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"websocket_write_buffer_size\": 512\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS with Certificate and Key Files in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet configures Centrifugo to enable TLS by specifying the paths to the server key and certificate files using the 'key_pem_file' and 'cert_pem_file' properties. These options must point to valid PEM-formatted files, which can be either CA-issued or self-signed for development. This configuration block should be placed in 'config.json'; Centrifugo will use it to secure HTTP/WebSocket endpoints.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/tls.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tls\": {\n    \"enabled\": true,\n    \"key_pem_file\": \"server.key\",\n    \"cert_pem_file\": \"server.crt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence Information Using Centrifuge SDK in JavaScript\nDESCRIPTION: Demonstrates how to obtain detailed presence information (list of active subscribers) in a channel after successful subscription using the 'presence' method. The response is a map of client IDs to client details. Requires presence to be enabled for the channel. The input is none; output maps IDs to client/session information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resp = await subscription.presence();\n// resp contains presence information - a map client IDs as keys \n// and client information as values.\n```\n\n----------------------------------------\n\nTITLE: Handling Background Push Notifications with Firebase Service Worker in JavaScript\nDESCRIPTION: This JavaScript code defines a Service Worker for Firebase Cloud Messaging. It imports necessary Firebase compatibility scripts, initializes Firebase Messaging using configuration loaded from `/firebase-config.js`, and sets up a listener (`onBackgroundMessage`) for push notifications received while the application tab is closed or in the background. Upon receiving a message, it extracts the notification data and uses the `self.registration.showNotification` API to display the notification to the user.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Scripts for firebase and firebase messaging\nimportScripts('https://www.gstatic.com/firebasejs/9.16.0/firebase-app-compat.js');\nimportScripts('https://www.gstatic.com/firebasejs/9.16.0/firebase-messaging-compat.js');\nimportScripts('/firebase-config.js');\n\nif (!self.firebaseConfig) {\n    console.error('Firebase config not found');\n} else {\n    firebase.initializeApp(self.firebaseConfig);\n    const messaging = firebase.messaging();\n\n    messaging.onBackgroundMessage(function (payload) {\n        console.log('Received background message ', payload);\n\n        const notification = payload.data;\n        if (!notification) {\n            return\n        }\n\n        // Customize notification here.\n        const notificationOptions = {\n            ...notification,\n        };\n\n        self.registration.showNotification(\n            notification.title,\n            notificationOptions\n        );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Integration in Centrifugo PRO\nDESCRIPTION: This snippet demonstrates how to enable Sentry integration in Centrifugo PRO for error reporting. It includes the basic configuration with the Sentry DSN. Additional options like environment and sample rate can be configured as well.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/observability_enhancements.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"sentry\": {\n    \"enabled\": true,\n    \"dsn\": \"your-project-public-dsn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Throttled Publish Operations for a Specific User in ClickHouse SQL\nDESCRIPTION: SQL query to count the number of throttled 'publish' operations (error code 111) specifically for the user identified as 'user_200'. This query filters the `centrifugo.operations_distributed` table by operation type, error code, and user ID. Includes example output.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*)\nFROM centrifugo.operations_distributed\nWHERE (error = 111) AND (op = 'publish') AND (user = 'user_200');\n\n‚îå‚îÄcount()‚îÄ‚îê\n‚îÇ    1214 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Example Connect Proxy Request Payload - Centrifugo - JSON\nDESCRIPTION: This JSON snippet illustrates the payload Centrifugo sends to the backend when a client without a JWT token initiates a connection, provided connect proxying is configured. It includes essential fields such as 'client' (unique connection ID), 'transport', 'protocol', and 'encoding'. Applications should expect requests in this format to implement custom connection logic or authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Centrifugo from Source\nDESCRIPTION: Commands to build Centrifugo from source code using Go. This sequence clones the repository, navigates to the directory, builds the binary, and runs it.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/centrifugal/centrifugo.git\ncd centrifugo\ngo build\n./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Cache Recovery Channel Using Centrifugo JavaScript SDK\nDESCRIPTION: This JavaScript snippet demonstrates how to subscribe to a Centrifugo channel configured with cache recovery mode using a bidirectional SDK. It assumes the Centrifugo JavaScript client is available and configured. By providing 'since: {}' as an option, the subscription request will enable recovery mode, ensuring the latest publication is delivered immediately upon subscribing. The handler for the 'publication' event receives the latest (and only) publication. Inputs: channel name (e.g., 'example:now-playing-12'); Outputs: subscription events with the latest value. Limitations: Only the most recent message is delivered; interleaved messages may be lost.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/cache_recovery.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sub = centrifuge.newSubscription('example:now-playing-12', {\\n  since: {}\\n});\\n\\nsub.on('publication', (ctx) => {\\n    console.log(ctx);\\n})\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Connections Table Schema\nDESCRIPTION: SQL schema for the connections table that stores client connection information including client details, user data, transport type, and headers.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.connections\n(\n    `client` String,\n    `user` String,\n    `name` String,\n    `version` String,\n    `transport` String,\n    `headers` Map(String, Array(String)),\n    `metadata` Map(String, Array(String)),\n    `time` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{cluster}/{shard}/connections', '{replica}')\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192\n```\n\n----------------------------------------\n\nTITLE: Inspecting Channel Presence Details using Centrifuge JavaScript SDK\nDESCRIPTION: This snippet shows how to retrieve full presence information for a channel with the Centrifuge SDK's subscription.presence() method, returning a map of client IDs as keys and detailed client info as values. The operation must be performed on a channel with presence enabled, and the resulting data can be used to list all active subscribers in the channel. The async/await pattern is used.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.presence();\n// resp contains presence information - a map client IDs as keys \n// and client information as values.\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification via Centrifugo API\nDESCRIPTION: Example of sending a push notification to devices subscribed to a specific topic using Centrifugo's HTTP API. The request includes authorization and notification payload for FCM with a simple title and body message.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/api/send_push_notification \\\n-H \"Authorization: apikey <KEY>\" \\\n-d @- <<'EOF'\n\n{\n    \"recipient\": {\n        \"filter\": {\n            \"topics\": [\"test\"]\n        }\n    },\n    \"notification\": {\n        \"fcm\": {\n            \"message\": {\n                \"notification\": {\"title\": \"Hello\", \"body\": \"How are you?\"}\n            }\n        }\n    }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Configuration for Centrifugo\nDESCRIPTION: Docker Compose YAML configuration to run Centrifugo as a service. This configuration includes volume mounting for the config file, port exposure, and ulimit settings for handling many connections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nversion: \"3.9\"\nservices:\n  centrifugo:\n    container_name: centrifugo\n    image: centrifugo/centrifugo:v4\n    volumes:\n      - ./config.json:/centrifugo/config.json\n    command: centrifugo -c config.json\n    ports:\n      - 8000:8000\n    ulimits:\n      nofile:\n        soft: 65535\n        hard: 65535\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Centrifugo\nDESCRIPTION: Docker Compose YAML configuration for running Centrifugo with mounted configuration file, exposed port, and increased file descriptor limits.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/installation.md#2025-04-23_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nversion: \"3.9\"\nservices:\n  centrifugo:\n    container_name: centrifugo\n    image: centrifugo/centrifugo:v6\n    volumes:\n      - ./config.json:/centrifugo/config.json\n    command: centrifugo -c config.json\n    ports:\n      - 8000:8000\n    ulimits:\n      nofile:\n        soft: 65535\n        hard: 65535\n```\n\n----------------------------------------\n\nTITLE: Final Centrifugo Configuration (JSON)\nDESCRIPTION: Complete configuration file with all necessary settings for the tutorial, including client subscription permissions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/quickstart.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"bbe7d157-a253-4094-9759-06a8236543f9\",\n  \"admin\": true,\n  \"admin_password\": \"d0683813-0916-4c49-979f-0e08a686b727\",\n  \"admin_secret\": \"4e9eafcf-0120-4ddd-b668-8dc40072c78e\",\n  \"api_key\": \"d7627bb6-2292-4911-82e1-615c0ed3eebb\",\n  \"allowed_origins\": [\"http://localhost:3000\"],\n  \"allow_subscribe_for_client\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Expiring JWT for Centrifugo (NodeJS, 5-Minute Validity)\nDESCRIPTION: This Node.js snippet creates a JWT with a 'sub' claim and a 5-minute expiration using the 'jose' library. It sets both protected header (algorithm) and expiration time before signing the token with the provided secret. The asynchronous function outputs the valid JWT string for client-side usage with Centrifugo. Requires 'jose' package and ES2017+ environment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst jose = require('jose')\\n\\n(async function main() {\\n  const secret = new TextEncoder().encode('secret')\\n  const alg = 'HS256'\\n\\n  const token = await new jose.SignJWT({ sub: '42' })\\n    .setProtectedHeader({ alg })\\n    .setExpirationTime('5m')\\n    .sign(secret)\\n\\n  console.log(token);\\n})();\\n\n```\n\n----------------------------------------\n\nTITLE: Inserting to Outbox Table within a Transaction - Python\nDESCRIPTION: Demonstrates how to enqueue an event for broadcast by creating an Outbox entry within a transaction. This guarantees that events are reliably recorded in the outbox table for asynchronous and parallel processing by Centrifugo. Dependencies: Django ORM, correct model import, application context, and variable definitions, particularly 'room_id', 'settings.CENTRIFUGO_OUTBOX_PARTITIONS', and the 'broadcast_payload' dict. Inputs: broadcast payload and partition calculation; outputs: persistent event in outbox table.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# In outbox case we can set partition for parallel processing, but\n# it must be in predefined range and match Centrifugo PostgreSQL\n# consumer configuration.\npartition = hash(room_id)%settings.CENTRIFUGO_OUTBOX_PARTITIONS\n# Creating outbox object inside transaction will guarantee that Centrifugo will\n# process the command at some point. In normal conditions ‚Äì almost instantly.\nOutbox.objects.create(method='broadcast', payload=broadcast_payload, partition=partition)\n```\n\n----------------------------------------\n\nTITLE: Creating Outbox Entry in Django View (Python)\nDESCRIPTION: Python code snippet demonstrating how to create an `Outbox` record within a database transaction. This replaces a direct Centrifugo API call. It calculates a partition number based on `room_id` and `CENTRIFUGO_OUTBOX_PARTITIONS` setting, then creates the `Outbox` object with method 'broadcast' and the corresponding payload. Saving this object within the transaction guarantees the event will be processed by Centrifugo if the transaction commits successfully.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# In outbox case we can set partition for parallel processing, but\n# it must be in predefined range and match Centrifugo PostgreSQL\n# consumer configuration.\npartition = hash(room_id)%settings.CENTRIFUGO_OUTBOX_PARTITIONS\n# Creating outbox object inside transaction will guarantee that Centrifugo will\n# process the command at some point. In normal conditions ‚Äì almost instantly.\nOutbox.objects.create(method='broadcast', payload=broadcast_payload, partition=partition)\n```\n\n----------------------------------------\n\nTITLE: Configuring Transport Fallbacks in Centrifugo JavaScript SDK\nDESCRIPTION: This snippet demonstrates the use of the Centrifugo JavaScript SDK to specify both WebSocket and HTTP streaming transports. The array of transport options allows the client to attempt a WebSocket connection first and fallback to HTTP streaming if necessary. The key parameters include the type of transport and corresponding endpoint URLs. To use this, the Centrifuge SDK library must be included in the project. Inputs are the transport config array, and output is the connection initialization to the Centrifugo backend; ensure the server is properly configured with matching endpoints and allowed origins.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/http_stream.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst transports = [\n    {\n        transport: 'websocket',\n        endpoint: 'ws://localhost:8000/connection/websocket'\n    },\n    {\n        transport: 'http_stream',\n        endpoint: 'http://localhost:8000/connection/http_stream'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Token with Expiration in Python and Node.js\nDESCRIPTION: Examples of generating JWT tokens with a 5-minute expiration time in both Python and Node.js. The expiration claim helps Centrifugo manage connection lifetimes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/authentication.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\nimport time\n\nclaims = {\"sub\": \"42\", \"exp\": int(time.time()) + 5*60}\ntoken = jwt.encode(claims, \"secret\", algorithm=\"HS256\").decode()\nprint(token)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar jwt = require('jsonwebtoken');\n\nvar token = jwt.sign({ sub: '42' }, 'secret', { expiresIn: 5 * 60 });\n\nconsole.log(token);\n```\n\n----------------------------------------\n\nTITLE: Example Publish Proxy Success Response (JSON)\nDESCRIPTION: Shows the minimal expected JSON response from the backend application to Centrifugal when a publish request is allowed. Returning an empty `result` object signals approval for the publication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"result\": {}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub Refresh Proxy Endpoint in Centrifugal (JSON)\nDESCRIPTION: Defines the `endpoint` within the `sub_refresh` proxy settings in `config.json`. This URL specifies the backend service Centrifugal will contact to refresh the validity of expiring client subscriptions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"channel\": {\n    \"proxy\": {\n      \"sub_refresh\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/sub_refresh\"\n      }\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Publishing Data via Centrifugo HTTP API using cURL (Bash)\nDESCRIPTION: This Bash snippet uses `curl` to send a POST request to the Centrifugo `/api/publish` endpoint. It demonstrates publishing a JSON payload `{\"value\": \"test_value\"}` to the channel `test`. Authentication is done via the `X-API-Key` header, which should contain the configured API key. This is a common way to push real-time updates from a backend service to connected clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"test\", \"data\": {\"value\": \"test_value\"}}' \\\n  http://localhost:8000/api/publish\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Address in Centrifugo (JSON) - JSON\nDESCRIPTION: This snippet demonstrates specifying a custom network interface address for the Centrifugo HTTP server in JSON. The 'address' field ensures binding only to the given host (default is all interfaces). Use cases include security or container networking.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"http_server\" : {\n    \"address\": \"0.0.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Command JSON Structure\nDESCRIPTION: Example JSON structure for the publish command in Centrifugo's API.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"publish\",\n    \"params\": {\n        \"channel\": \"chat\", \n        \"data\": {\n            \"text\": \"hello\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Token Issuer in Centrifugo\nDESCRIPTION: Configuration for enabling JWT issuer claim verification in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_issuer\": \"my_app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Toxiproxy for Redis Latency Testing\nDESCRIPTION: Shows how to use toxiproxy-cli to create a proxy for Redis with added latency for performance testing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntoxiproxy-cli create -l localhost:26379 -u localhost:6379 toxic_redis\ntoxiproxy-cli toxic add -t latency -a latency=5 toxic_redis\n```\n\n----------------------------------------\n\nTITLE: Inspecting Channel Presence Statistics with Centrifuge JavaScript SDK\nDESCRIPTION: This code demonstrates querying user and client statistics of a channel using subscription.presenceStats(). The result provides the number of connected clients and the count of unique users currently subscribed. The method should be called using await, and is only valid for channels where presence is configured. Output data is attached to the resp object.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.presenceStats();\n// resp contains a number of clients and a number of unique users.\n```\n\n----------------------------------------\n\nTITLE: Generating Minimal TOML Configuration with Centrifugo using Bash\nDESCRIPTION: Uses the `centrifugo genconfig` command to generate a minimal configuration file in TOML format, saving it as `config.toml`. The format is inferred from the file extension. Exits with code 1 on error.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/console_commands.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig -c config.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Reverse Proxy Routing with Nginx - conf\nDESCRIPTION: This Nginx configuration sets up a reverse proxy to route requests to separate backend (Django), frontend (SPA), and Centrifugo websocket services. It defines upstream blocks for each component, maps URL paths to the corresponding upstream, and sets HTTP headers required for websocket support and client/source IP forwarding. This file should reside at \"nginx/nginx.conf\" and is a prerequisite for orchestrating the services via Docker Compose. Main parameters are the \"server_name\", the \"location\" blocks for /api, /admin, /static, /connection/websocket, and /. The expected output is successfully proxied traffic to the proper service. All dependencies must be up and accessible via Docker networking, and some headers may need attention for production security hardening.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/reverse_proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n  worker_connections 1024;\n}\n\nhttp {\n  upstream backend {\n    server backend:8000;\n  }\n\n  upstream frontend {\n    server frontend:5173;\n  }\n\n  upstream centrifugo {\n    server centrifugo:8000;\n  }\n\n  server {\n    listen 80;\n\n    server_name localhost 127.0.0.1;\n\n    location /api {\n      proxy_pass          http://backend;\n      proxy_http_version  1.1;\n      proxy_redirect      default;\n      proxy_set_header    Upgrade $http_upgrade;\n      proxy_set_header    Connection \"upgrade\";\n      proxy_set_header    Host $host;\n      proxy_set_header    X-Real-IP $remote_addr;\n      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header    X-Forwarded-Host $server_name;\n    }\n\n    location /admin {\n      proxy_pass          http://backend;\n      proxy_http_version  1.1;\n      proxy_redirect      default;\n      proxy_set_header    Upgrade $http_upgrade;\n      proxy_set_header    Connection \"upgrade\";\n      proxy_set_header    Host $host;\n      proxy_set_header    X-Real-IP $remote_addr;\n      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header    X-Forwarded-Host $server_name;\n    }\n\n    location /static {\n      proxy_pass          http://backend;\n      proxy_set_header    Host $host;\n      proxy_http_version  1.1;\n      proxy_redirect      default;\n    }\n\n    location /connection/websocket {\n      proxy_pass          http://centrifugo;\n      proxy_http_version  1.1;\n      proxy_redirect      default;\n      proxy_set_header    Upgrade $http_upgrade;\n      proxy_set_header    Connection \"upgrade\";\n      proxy_set_header    Host $host;\n      proxy_set_header    X-Real-IP $remote_addr;\n      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header    X-Forwarded-Host $server_name;\n    }\n\n    location / {\n      proxy_pass          http://frontend;\n      proxy_http_version  1.1;\n      proxy_redirect      default;\n      proxy_set_header    Upgrade $http_upgrade;\n      proxy_set_header    Connection \"upgrade\";\n      proxy_set_header    Host $host;\n      proxy_set_header    X-Real-IP $remote_addr;\n      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header    X-Forwarded-Host $server_name;\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Proxied HTTP Headers via Environment Variable (Shell)\nDESCRIPTION: This shell command shows how to configure the list of proxied HTTP headers using the `CENTRIFUGO_PROXY_HTTP_HEADERS` environment variable. Headers should be space-separated. This provides an alternative to setting the `proxy_http_headers` option in the configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```\nexport CENTRIFUGO_PROXY_HTTP_HEADERS=\"Cookie User-Agent X-B3-TraceId X-B3-SpanId\" ./centrifugo\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling MySQL-Backed Namespace Management in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON configuration snippet configures Centrifugo PRO to use MySQL for its admin storage (`storage_type: \"mysql\"`). It enables database-driven namespace management via `manage_namespaces: true` and provides the necessary connection string in the `storage_dsn` field according to the go-sql-driver/mysql DSN format. Requires Centrifugo PRO and a running MySQL instance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/db_namespaces.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"admin_storage\": {\n        \"enabled\": true,\n        \"storage_type\": \"mysql\",\n        \"storage_dsn\": \"user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&parseTime=True&loc=Local\",\n        \"manage_namespaces\": true\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adjusting Nginx Worker Connections for High Load (nginx)\nDESCRIPTION: This Nginx configuration snippet shows how to increase the `worker_connections` directive within the `events` block. This setting determines the maximum number of simultaneous connections that each Nginx worker process can handle. Increasing this value (e.g., to 65535) is often necessary when proxying applications like Centrifugo that maintain many persistent connections, ensuring Nginx can cope with the expected load without refusing connections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/load_balancing.md#2025-04-23_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nevents {\n    worker_connections 65535;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Config with Docker - Shell\nDESCRIPTION: This docker run command generates a Centrifugo config file by mounting the current directory into the container. It removes the container after execution and uses the v5 tagged image. Requires Docker installed and proper directory permissions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v$PWD:/centrifugo centrifugo/centrifugo:v5 centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo HTTP Publish Proxy Endpoint (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates setting the endpoint URL and timeout for Centrifugo's HTTP publish proxy. When enabled for a channel namespace, client publish requests will be sent to this backend endpoint for validation before proceeding.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_publish_endpoint\": \"http://localhost:3000/centrifugo/publish\",\n  \"proxy_publish_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Full Default Configuration File (Bash)\nDESCRIPTION: Uses the `defaultconfig` command to generate a configuration file containing all available options set to their default values. It supports JSON, YAML, and TOML formats via the `-c` flag. The `--dry-run` flag outputs the configuration to STDOUT instead of a file, and the `--base` flag allows inheriting values from an existing configuration file, filling in missing options with defaults.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/console_commands.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultconfig -c config.json\ncentrifugo defaultconfig -c config.yaml\ncentrifugo defaultconfig -c config.toml\n```\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultconfig -c config.json --dry-run\n```\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultconfig -c config.json --dry-run --base existing_config.json\n```\n\n----------------------------------------\n\nTITLE: Assigning RPC Proxies Per RPC Namespace - JSON\nDESCRIPTION: Illustrates configuration for routing RPC requests using granular proxy mode in Centrifugo by assigning proxies via the \"rpc_proxy_name\" property within each RPC namespace. The \"rpc_namespaces\" array lists namespace objects, each with a name and a proxy assignment, enabling method-based routing for RPC calls. Inputs are RPC namespace definitions and corresponding proxy names; output is proxy-based routing for RPC events by namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [...],\n  \"namespaces\": [...],\n  \"rpc_namespaces\": [\n    {\n      \"name\": \"rpc_ns1\",\n      \"rpc_proxy_name\": \"rpc1\",\n    },\n    {\n      \"name\": \"rpc_ns2\",\n      \"rpc_proxy_name\": \"rpc2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Counter Data via Admin Panel\nDESCRIPTION: JSON payload for publishing a counter value to a Centrifugo channel through the admin web interface. The data contains a simple value field that will be broadcast to all connected clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"value\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Per-Connection Rate Limits in Centrifugo\nDESCRIPTION: Configuration example for setting up in-memory rate limits on a per-connection basis. Demonstrates total, default, publish and RPC rate limiting with custom method overrides.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/rate_limiting.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"rate_limit\": {\n      \"client_command\": {\n        \"enabled\": true,\n        \"total\": {\n          \"enabled\": true,\n          \"buckets\": [\n            {\n              \"interval\": \"1s\",\n              \"rate\": 20\n            },\n            {\n              \"interval\": \"60s\",\n              \"rate\": 50\n            }\n          ]\n        },\n        \"default\": {\n          \"enabled\": true,\n          \"buckets\": [\n            {\n              \"interval\": \"1s\",\n              \"rate\": 60\n            }\n          ]\n        },\n        \"publish\": {\n          \"enabled\": true,\n          \"buckets\": [\n            {\n              \"interval\": \"1s\",\n              \"rate\": 1\n            }\n          ]\n        },\n        \"rpc\": {\n          \"enabled\": true,\n          \"buckets\": [\n            {\n              \"interval\": \"1s\",\n              \"rate\": 10\n            }\n          ],\n          \"method_override\": {\n            \"update_user_status\": {\n              \"enabled\": true,\n              \"buckets\": [\n                {\n                  \"interval\": \"20s\",\n                  \"rate\": 1\n                }\n              ]                \n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics Endpoint in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable the `/metrics` endpoint in Centrifugo for Prometheus monitoring. Setting `\"enabled\": true` within the `prometheus` section of the `config.json` file makes the metrics available for scraping by a Prometheus server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/observability.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"prometheus\": {\n    \"enabled\": true\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Presence in Centrifugo Namespace Configuration (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable the online presence feature for a specific channel namespace named 'public' within Centrifugo. Setting the 'presence' key to 'true' activates presence tracking for channels within this namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/presence.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"namespaces\": [{\n        \"name\": \"public\",\n        \"presence\": true\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving an Asynchronous Publication Message in JSON\nDESCRIPTION: This JSON object illustrates an asynchronous 'Publication' message sent from the server to subscribed clients. It lacks an 'id' field, distinguishing it from command replies. The 'result' contains the 'channel' and the published 'data', which includes the actual payload and optional metadata ('info').\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"channel\":\"ch1\",\n        \"data\":{\n            \"data\":{\"input\":\"1\"},\n            \"info\":{\n                \"user\":\"2694\",\n                \"client\":\"5c48510e-cf49-4fa8-a9b2-490b22231e74\",\n                \"conn_info\":{\"name\":\"Alexander\"},\n                \"chan_info\":{}\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Default Environment Variables (Bash)\nDESCRIPTION: Executes the `defaultenv` command to print all Centrifugo configuration options formatted as environment variables with their default values to STDOUT. The `--base` flag allows inheriting values from a specified configuration file. Using `--base` combined with `--base-non-zero-only` outputs only environment variables for keys that were set to non-zero values in the base configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/console_commands.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultenv\n```\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultenv --base config.json\n```\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultenv --base config.json --base-non-zero-only\n```\n\n----------------------------------------\n\nTITLE: Initializing EventSource Connection with Connect Command in JavaScript\nDESCRIPTION: Demonstrates how to establish an EventSource connection to Centrifugo by creating a URL with connect command parameters. The connect command is passed as a JSON-encoded string via URL parameters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_sse.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = new URL('http://localhost:8000/connection/uni_sse');\nurl.searchParams.append(\"cf_connect\", JSON.stringify({\n    'token': '<JWT>'\n}));\n\nconst eventSource = new EventSource(url);\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Cluster via Environment Variable\nDESCRIPTION: Command to start Centrifugo with Redis cluster configuration using environment variables instead of a configuration file. This method can be useful in containerized environments.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_REDIS_CLUSTER_ADDRESS=\"localhost:30001\" CENTRIFUGO_ENGINE=redis ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Client RPC Proxy in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to set up the Client RPC proxy in Centrifugo. It defines a default HTTP endpoint (`http://localhost:3000/centrifugo/rpc`) for RPC calls and enables the proxy for both the default (un-namespaced) RPC calls and a specific namespace named 'sun'. This allows Centrifugo to forward RPC requests from clients to the specified backend endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"rpc\": {\n    \"proxy\": {\n      \"endpoint\": \"http://localhost:3000/centrifugo/rpc\"\n    },\n    \"without_namespace\": {\n      \"proxy_enabled\": true\n    },\n    \"namespaces\": [\n      {\n        \"name\": \"sun\",\n        \"proxy_enabled\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx to Embed Centrifugo in a Website Location (nginx)\nDESCRIPTION: This Nginx configuration demonstrates how to embed Centrifugo access within an existing website under a specific path (e.g., /centrifugo/). It uses `rewrite` directives within location blocks (`/centrifugo/` and `/centrifugo/connection`) to strip the prefix before proxying requests to the defined `centrifugo` upstream group. It ensures correct proxying for both regular HTTP/API requests and WebSocket connections, setting appropriate headers like `Host`, `X-Real-IP`, and `X-Scheme`. This setup depends on the `upstream centrifugo` definition and the `map $http_upgrade $connection_upgrade` block shown in the separate domain example.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/load_balancing.md#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\n    # uncomment ip_hash if using SockJS transport with many upstream servers.\n    #ip_hash;\n    server 127.0.0.1:8000;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\nserver {\n\n    # ... your web site Nginx config\n\n    location /centrifugo/ {\n        rewrite ^/centrifugo/(.*)        /$1 break;\n        proxy_pass http://centrifugo;\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n    }\n\n    location /centrifugo/connection {\n        rewrite ^/centrifugo(.*)        $1 break;\n        proxy_pass http://centrifugo;\n        proxy_buffering off;\n        keepalive_timeout 65;\n        proxy_read_timeout 60s;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header Host $http_host;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo via WebTransport and WebSocket with centrifuge-js - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to instantiate the centrifuge-js client with a transports array that includes both WebTransport and WebSocket endpoints. WebTransport is preferred, but falls back to WebSocket if unavailable. Endpoints must use secure schemes (https/wss) as per protocol specifications. This code assumes centrifuge-js has been loaded and that Centrifugo has HTTP/3/WebTransport support enabled. No parameters other than 'endpoint' and 'transport' are necessary for this basic connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/webtransport.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst transports = [\n    {\n        transport: 'webtransport',\n        endpoint: 'https://localhost:8000/connection/webtransport'\n    },\n    {\n        transport: 'websocket',\n        endpoint: 'wss://localhost:8000/connection/websocket'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n```\n\n----------------------------------------\n\nTITLE: Updating User Room Topic Subscriptions via CDC (Python)\nDESCRIPTION: Defines a Python function `update_user_room_topic` within a Django view or class. This function uses the Change Data Capture (CDC) pattern by creating a `CDC` model instance. This record signals Centrifugo to either 'add' or 'remove' a user from a specific chat room's push notification topic (`chat:messages:{room_id}`). It relies on Django ORM and project settings (`PUSH_NOTIFICATIONS_ENABLED`, `CENTRIFUGO_BROADCAST_MODE`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef update_user_room_topic(self, user_id, room_id, op):\n    if not settings.PUSH_NOTIFICATIONS_ENABLED:\n        return\n    if 'cdc' not in settings.CENTRIFUGO_BROADCAST_MODE:\n        return\n    partition = hash(room_id)\n    CDC.objects.create(method='user_topic_update', payload={\n        'user': str(user_id),\n        'topics': ['chat:messages:' + str(room_id)],\n        'op': op\n    }, partition=partition)\n```\n\n----------------------------------------\n\nTITLE: Publish Proxy Request Payload Example - JSON\nDESCRIPTION: Illustrates the data sent to the backend before a message is published to a channel. Fields include client identifiers, protocol details, channel, user, and the intended data payload. The backend endpoint is expected to validate and/or potentially reject publishing based on this input. Suitable for both standard and binary (base64) payload modes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"channel\": \"chat:index\",\n  \"data\":{\"input\":\"hello\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Connection Capabilities with Overlapping Channel Definitions\nDESCRIPTION: Another incorrect example where capabilities for channel 'user_42' are split across multiple entries. Due to Centrifugo's matching behavior, only the first entry's permissions will apply.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/capabilities.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\", \"user_42\"],\n            \"allow\": [\"sub\"]\n        },\n        {\n            \"channels\": [\"user_42\"],\n            \"allow\": [\"pub\", \"hst\", \"prs\"]\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Custom Configuration - Bash\nDESCRIPTION: This command starts the Centrifugo server with a specified configuration file, typically config.json. Essential for production and development to load environment-specific settings. Requires that the configuration file exists and is accessible.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Getting Channel Presence Information in Javascript\nDESCRIPTION: This snippet shows how to retrieve detailed presence information for a channel using the `presence()` method on a `Subscription` object. The response contains a map of connected client IDs and their associated information. This requires channel presence to be configured on the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.presence();\n// resp contains presence information - a map client IDs as keys \n// and client information as values.\n```\n\n----------------------------------------\n\nTITLE: Enabling Admin Web UI with Security Options in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable the Centrifugo Admin Web UI by setting the \\\"admin\\\" option to true, and securing it with \\\"admin_password\\\" and \\\"admin_secret\\\" fields. Dependencies include running Centrifugo and providing this configuration file at startup. The key parameters are \\\"admin\\\" (enables/disables the UI), \\\"admin_password\\\" (password for login), and \\\"admin_secret\\\" (used for authentication tokens). Inputs are JSON key/value pairs; expected output is a secured admin web interface accessible after a Centrifugo restart. Ensure strong and secret credentials for these values.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/admin_web.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    ...\\n    \"admin\": true,\\n    \"admin_password\": \"<PASSWORD>\",\\n    \"admin_secret\": \"<SECRET>\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Personal Channels and Single Connection (JSON)\nDESCRIPTION: Example Centrifugo configuration (`config.json`) demonstrating how to enable automatic subscription to a namespaced personal channel (`personal:#<user_id>`) for authenticated users. It also activates the `single_connection` feature, which attempts to keep only one active connection per user, and enables presence within the 'personal' namespace, a requirement for the single connection feature.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_subs.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"client\": {\n    \"subscribe_to_user_personal_channel\": {\n      \"enabled\": true,\n      \"personal_channel_namespace\": \"personal\",\n      \"single_connection\": true\n    }\n  },\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"personal\",\n        \"presence\": true\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Server-side Channel Publications in JavaScript\nDESCRIPTION: This snippet demonstrates how to listen for publications from server-side channels using the centrifuge-js client. It sets up an event handler for the 'publication' event, which logs the channel and payload of incoming publications.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_subs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge(address);\n\ncentrifuge.on('publication', function(ctx) {\n    const channel = ctx.channel;\n    const payload = JSON.stringify(ctx.data);\n    console.log('Publication from server-side channel', channel, payload);\n});\n\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: Listening for Server-Side Publications with centrifuge-js Client - JavaScript\nDESCRIPTION: Demonstrates how to use the centrifuge-js JavaScript client to listen for server-side publications on subscribed channels without explicit subscription objects. The snippet sets up a Centrifuge client, registers a handler for the 'publish' event to log published messages, and connects to the server. Requires centrifuge-js library and a valid server address. Inputs include publication contexts automatically delivered by Centrifugo; outputs are log entries for each publication received.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_subs.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar centrifuge = new Centrifuge(address);\n\ncentrifuge.on('publish', function(ctx) {\n    const channel = ctx.channel;\n    const payload = JSON.stringify(ctx.data);\n    console.log('Publication from server-side channel', channel, payload);\n});\n\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Trigger for Instant Partition Notification - SQL\nDESCRIPTION: Defines a PL/pgSQL function and trigger for PostgreSQL to notify Centrifugo about new outbox entries instantly using the LISTEN/NOTIFY mechanism. This reduces message delivery latency by triggering event delivery immediately after data insertion. Dependencies: superuser rights on PostgreSQL, existing 'chat_outbox' table, Centrifugo configured to listen on the specified notification channel. Inputs: insertion into 'chat_outbox'; outputs: async partition change notification.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION centrifugo_notify_partition_change()\nRETURNS TRIGGER AS $$\nBEGIN\n    PERFORM pg_notify('centrifugo_partition_change', NEW.partition::text);\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE OR REPLACE TRIGGER centrifugo_notify_partition_trigger\nAFTER INSERT ON chat_outbox\nFOR EACH ROW\nEXECUTE FUNCTION centrifugo_notify_partition_change();\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Publish Proxy for a Namespace\nDESCRIPTION: Configuration for enabling GRPC-based publish proxy for a specific namespace ('chat'). This allows validating publications to channels in that namespace via a GRPC call to the backend.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_publish_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_publish_timeout\":  \"1s\",\n  \"namespaces\": [\n    {\n      \"name\": \"chat\",\n      \"proxy_publish\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Read from PostgreSQL Replicas for Push API - Centrifugo PRO - JSON\nDESCRIPTION: This JSON configuration illustrates using PostgreSQL replicas for reading push notification data in Centrifugo PRO. The 'read_from_replica' option is enabled for push_notifications, and 'replica_dsn' specifies an array of DSN strings for replicas. This setup is ideal for scaling and read-heavy environments. Ensure both primary and replica PostgreSQL hosts are available and configured for replication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"database\": {\\n    \"enabled\": true,\\n    \"postgresql\": {\\n      \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\",\\n      \"replica_dsn\": [\\n        \"postgresql://postgres:pass@127.0.0.1:5433/postgres\"\\n      ]\\n    }\\n  },\\n  \"push_notifications\": {\\n    \"read_from_replica\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Unidirectional GRPC Endpoint in Centrifugo (JSON Configuration)\nDESCRIPTION: This snippet demonstrates how to enable the unidirectional GRPC endpoint in Centrifugo by setting \\\"uni_grpc\\\" to true in the configuration file (config.json). When set, the Centrifugo server will listen for unidirectional GRPC streams on the specified port and address. No external dependencies are needed beyond the standard Centrifugo deployment. The relevant parameter is 'uni_grpc', accepting a boolean value where true enables the endpoint, and the snippet should be placed within the root of your Centrifugo config. The input is a JSON configuration file, and the output is the Centrifugo server running with GRPC support. Use caution to include other needed configuration keys as ellipsis (\\\"...\\\") indicates omitted content.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_grpc.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"uni_grpc\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Protobuf Schema for Football Match State\nDESCRIPTION: This Protobuf schema defines the structure for serializing the football match state. It includes message types for events, players, teams, and the overall match, enabling efficient data encoding for the WebSocket transmissions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-05-30-real-time-data-compression-experiments.md#2025-04-23_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage centrifugal.centrifuge.examples.compression_playground;\n\noption go_package = \"./;apppb\";\n\nenum EventType {\n  UNKNOWN = 0; // Default value, should not be used\n  GOAL = 1;\n  YELLOW_CARD = 2;\n  RED_CARD = 3;\n  SUBSTITUTE = 4;\n}\n\nmessage Event {\n  EventType type = 1;\n  int32 minute = 2;\n}\n\nmessage Player {\n  string name = 1;\n  repeated Event events = 2;\n}\n\nmessage Team {\n  string name = 1;\n  int32 score = 2;\n  repeated Player players = 3;\n}\n\nmessage Match {\n  int32 id = 1;\n  Team home_team = 2;\n  Team away_team = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration for Django and Centrifugo (Nginx)\nDESCRIPTION: Defines an Nginx configuration that listens on port 9000 and proxies requests to both the Django app (for HTTP traffic) and Centrifugo (for /connection/websocket). Assumes the environment is Docker and the local network is available as host.docker.internal. The config manages HTTP and WebSocket upgrades, sets appropriate headers, and disables buffering for WebSocket connections. Limitations: requires mounting the file into the Docker container and may need adaptation for different environments or operating systems.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_10\n\nLANGUAGE: nginx\nCODE:\n```\nevents {\\n    worker_connections 1024;\\n}\\n\\nerror_log /dev/stdout info;\\n\\nhttp {\\n    access_log /dev/stdout;\\n\\n    server {\\n        listen 9000;\\n\\n        server_name localhost;\\n\\n        location / {\\n            proxy_pass http://host.docker.internal:8000;\\n            proxy_http_version 1.1;\\n            proxy_set_header Host $host;\\n            proxy_set_header X-Real-IP $remote_addr;\\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n            proxy_set_header X-Forwarded-Proto $scheme;\\n        }\\n\\n        location /connection/websocket {\\n            proxy_pass http://host.docker.internal:8001;\\n            proxy_http_version 1.1;\\n            proxy_buffering off;\\n            keepalive_timeout 65;\\n            proxy_read_timeout 60s;\\n            proxy_set_header Upgrade $http_upgrade;\\n            proxy_set_header Connection 'upgrade';\\n            proxy_set_header Host $host;\\n            proxy_set_header X-Real-IP $remote_addr;\\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n            proxy_set_header X-Forwarded-Proto $scheme;\\n            proxy_cache_bypass $http_upgrade;\\n        }\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Singleflight in Centrifugo Configuration\nDESCRIPTION: JSON configuration example showing how to enable the use_singleflight option in Centrifugo PRO. This setting can be enabled either through the configuration file or via the CENTRIFUGO_USE_SINGLEFLIGHT environment variable.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/singleflight.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"use_singleflight\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Centrifugo Docker Image\nDESCRIPTION: Docker command to pull the official Centrifugo image from Docker Hub. This downloads the latest Centrifugo container image for use with Docker.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull centrifugo/centrifugo\n```\n\n----------------------------------------\n\nTITLE: Inserting a Publish Command into Outbox Table Using SQL\nDESCRIPTION: This SQL command inserts a new row into the outbox table to trigger a Centrifugo publish event. It specifies the async API method, payload as JSON, and partition. Required parameters are the desired method and payload compatible with Centrifugo's server API. Ensures messages are queued for processing by the outbox consumer.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/consumers.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO centrifugo_outbox (method, payload, partition)\nVALUES ('publish', '{\"channel\": \"updates\", \"data\": {\"text\": \"Hello, world!\"}}', 0);\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Uni HTTP Stream Transport in Bash\nDESCRIPTION: This command starts the Centrifugo server using the configuration specified in `config.json`. It explicitly enables the `uni_http_stream` transport via an environment variable (`CENTRIFUGO_UNI_HTTP_STREAM=1`), which allows clients (like `curl` in the example) to connect using this transport.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/connections.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_UNI_HTTP_STREAM=1 centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Listing Active Channels via Centrifugo HTTP API - JSON\nDESCRIPTION: Represents the JSON payload required to request the list of active channels from the Centrifugo HTTP API using the 'channels' method. The params object is empty by default, but optional pattern filtering is available using glob syntax. Returns a mapping of active channel names to summary info. Recommended for development or administrative use and not suitable for setups with a massive number of channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"channels\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Subscription Token (Bash)\nDESCRIPTION: Executes the `checksubtoken` command to validate a provided subscription JWT (`<TOKEN>`) using the configuration specified in the file (`-c config.json`). This helps in verifying subscription tokens during development.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/console_commands.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo checksubtoken -c config.json <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Starting Second Centrifugo Node\nDESCRIPTION: Command line example for starting an additional Centrifugo node on port 8001 connected to the same Redis instance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json --port=8001 --engine=redis --redis_address=127.0.0.1:6379\n```\n\n----------------------------------------\n\nTITLE: Sending an Unsubscribe Command in JSON\nDESCRIPTION: This JSON object represents an 'unsubscribe' command sent by a client to stop receiving messages from a specific channel. The 'method' field (2) signifies unsubscription, and 'params' contains the target 'channel'. The 'id' is used for request tracking.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3,\n    \"method\": 2,\n    \"params\": {\n        \"channel\": \"ch1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo with Tarantool Engine in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Centrifugo to use the Tarantool engine within its configuration file (e.g., config.json). The `engine` key is set to `\"tarantool\"`, and the `tarantool_address` key specifies the connection address (e.g., `\"127.0.0.1:3301\"`) for the Tarantool instance(s). Ellipsis (...) indicates other potential configuration options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"engine\": \"tarantool\",\n    \"tarantool_address\": \"127.0.0.1:3301\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo with Redis Sentinel (JSON)\nDESCRIPTION: This JSON snippet is an example `config.json` content for configuring Centrifugo to use Redis Sentinel for high availability. It sets the engine to `redis` and specifies the Sentinel addresses (`redis_sentinel_address`) and the master name (`redis_sentinel_master_name`) that Sentinel monitors.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_sentinel_address\": \"127.0.0.1:26379\",\n    \"redis_sentinel_master_name\": \"mymaster\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Room Leave View in Django Rest Framework\nDESCRIPTION: This view handles the process of a user leaving a room, including atomic transactions and version incrementing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass LeaveRoomView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    @transaction.atomic\n    def post(self, request, room_id):\n        room = Room.objects.select_for_update().get(id=room_id)\n        room.increment_version()\n        channels = self.get_room_member_channels(room_id)\n        obj = get_object_or_404(RoomMember, user=request.user, room=room)\n        obj.room.member_count = len(channels) - 1\n        pk = obj.pk\n        obj.delete()\n        body = RoomMemberSerializer(obj).data\n        return Response(body, status=status.HTTP_200_OK)\n```\n\n----------------------------------------\n\nTITLE: Making an HTTP POST Request to Info Endpoint via curl - Bash\nDESCRIPTION: This bash script showcases how to call the Centrifugo Server API's 'info' command using curl. It adds the required 'Authorization' header (with the API key), sends a POST request containing the JSON command body to the local API endpoint, and expects a JSON response with server information. Replace \\u003cAPI_KEY\\u003e with your actual API key for authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Authorization: apikey \\u003cAPI_KEY\\u003e\" \\\n  --request POST \\\n  --data '{\"method\": \"info\", \"params\": {}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Configuring Unidirectional Subscription Streams Proxy in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet configures a Centrifugo channel namespace to enable a subscription stream proxy using a GRPC endpoint. The 'subscribe_stream' object under 'proxy' specifies the endpoint URL and a timeout, denoting how long Centrifugo waits for the backend to begin the stream. Only 'grpc://' endpoints are supported, and the configuration controls GRPC stream communication for subscription handling.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy_streams.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"proxy\": {\n      \"subscribe_stream\": {\n        \"endpoint\": \"grpc://localhost:12000\",\n        \"timeout\": \"3s\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 103 (Permission Denied)\nDESCRIPTION: Defines the client error code 103, indicating \"permission denied\". This error is returned when a client attempts to access a resource for which it does not have the required permissions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    103\nMessage: \"permission denied\"\n```\n\n----------------------------------------\n\nTITLE: Example Analysis Queries for Centrifugo Data\nDESCRIPTION: Collection of example SQL queries for analyzing user connections, throttled publications, channel subscriptions, and push notifications statistics.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT user\nFROM centrifugo.connections_distributed;\n\nSELECT COUNT(*)\nFROM centrifugo.operations_distributed\nWHERE (error = 111) AND (op = 'publish');\n\nSELECT COUNT(Distinct(user))\nFROM centrifugo.subscriptions_distributed\nWHERE arrayExists(x -> (x = 'chat:index'), channels) AND (time >= (now() - toIntervalMinute(5)));\n\nSELECT COUNT(*)\nFROM centrifugo.notifications\nWHERE (time > (now() - toIntervalHour(24))) AND (platform = 'ios')\n```\n\n----------------------------------------\n\nTITLE: Example Allowed Origins for Specific Domain (JSON)\nDESCRIPTION: The snippet shows a sample 'allowed_origins' setting in JSON format permitting connections from 'https://example.com'. Useful for restricting Centrifugo access to a known domain. Should be part of a complete Centrifugo JSON configuration file. Input is a string array for origins.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\\n    \"https://example.com\"\\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Centrifugo Version (Bash)\nDESCRIPTION: Executes the `version` command to display the installed Centrifugo version and then exits. This is useful for quickly checking the currently running version.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/console_commands.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo version\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo User Token with Default Expiry Using Bash CLI\nDESCRIPTION: Creates an HMAC SHA-256 JWT token for a user (ID '28282') via Centrifugo. Requires Centrifugo and a valid 'config.json' file. Token TTL is 1 week by default, and the '-c', '-u' flags specify config path and user ID. Exits with error if generation fails; practical for local development and quick testing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/console_commands.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gentoken -c config.json -u 28282\n```\n\n----------------------------------------\n\nTITLE: Enabling Unidirectional GRPC Endpoint in Centrifugo (JSON Configuration)\nDESCRIPTION: This JSON configuration snippet enables the unidirectional GRPC endpoint by setting the \\\"uni_grpc\\\" parameter to true in the Centrifugo configuration file. To use this feature, place this setting within your centrigufo config (e.g., config.json). Its purpose is to allow the server to accept unidirectional GRPC connections for real-time message streaming. No additional external dependencies are required beyond Centrifugo itself. An established GRPC client must use the correct protobuf definitions and connect to the configured port (default: 11000).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_grpc.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"uni_grpc\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Error Codes to Disconnect Objects for Unidirectional Clients in Centrifugo\nDESCRIPTION: This JSON configuration enables custom mapping of error codes to disconnect objects for unidirectional clients in Centrifugo. It defines transformations for error codes 404, 403, and 429 to specific disconnect codes and reasons.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_connect_code_to_unidirectional_disconnect\": {\n    \"enabled\": true,\n    \"transforms\": [\n      {\"code\": 404, \"to\": {\"code\": 4904, \"reason\": \"not found\"}},\n      {\"code\": 403, \"to\": {\"code\": 4903, \"reason\": \"permission denied\"}},\n      {\"code\": 429, \"to\": {\"code\": 4429, \"reason\": \"too many requests\"}}\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Usage Statistics in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to disable the periodic sending of anonymous usage statistics from the Centrifugo server. Setting the `disabled` field within the `usage_stats` object to `true` prevents this data collection. This should be placed within the main Centrifugo configuration file (e.g., `config.json`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"usage_stats\": {\n    \"disabled\": true\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo Server with Custom Configuration - Bash\nDESCRIPTION: This Bash snippet runs the Centrifugo server executable with a specified configuration file using the \"-c\" flag. It depends on Centrifugo being installed and accessible from the command line. The config.json file must exist in the current working directory. The command outputs server logs or errors to the console.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_websocket.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Sending a Ping Command in JSON\nDESCRIPTION: This JSON object represents a 'ping' command sent periodically by the client to the server to maintain the connection and check its liveness. The 'method' is 'ping', and an 'id' is included. The server is expected to echo this command back as a reply.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\":32,\n    \"method\":\"ping\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Centrifugo Namespaces via Environment Variable (Bash)\nDESCRIPTION: Shows how to configure Centrifugo namespaces using the `CENTRIFUGO_NAMESPACES` environment variable when starting the server. The variable must contain a valid JSON string representing an array of namespace configuration objects (e.g., `[{\"name\": \"ns1\"}, {\"name\": \"ns2\"}]`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n```console\nCENTRIFUGO_NAMESPACES='[{\"name\": \"ns1\"}, {\"name\": \"ns2\"}]' ./centrifugo\n```\n```\n\n----------------------------------------\n\nTITLE: Windowed History Publication in Go\nDESCRIPTION: Example of publishing a message with history retention settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nnode.Publish(\n    \"example\",\n    []byte(`{\"input\": \"hello\"}`),\n    centrifuge.WithHistory(300, time.Minute),\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Admin Web Mode in Centrifugo - JSON\nDESCRIPTION: This configuration snippet demonstrates how to enable insecure admin mode in Centrifugo by setting 'insecure' to true. In this mode, authentication is skipped and the admin web UI is accessible without credentials, which should only be used for development or behind strict network firewalls in production. This configuration is placed in 'config.json'; missing 'password' and 'secret' fields are intentional for this setup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/admin_web.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"admin\\\": {\\n    \\\"enabled\\\": true,\\n    \\\"insecure\\\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Centrifuge Client with WebTransport\nDESCRIPTION: JavaScript code demonstrating how to initialize Centrifuge client with WebTransport as primary transport and WebSocket as fallback. Uses secure endpoints for both transport methods.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/webtransport.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst transports = [\n    {\n        transport: 'webtransport',\n        endpoint: 'https://localhost:8000/connection/webtransport'\n    },\n    {\n        transport: 'websocket',\n        endpoint: 'wss://localhost:8000/connection/websocket'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo with Redis Sharding on Different Hosts (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to set up Redis sharding in Centrifugo using Redis instances located on different network hosts. The `redis_address` array contains the IP addresses and ports (`192.168.1.34:6379`, `192.168.1.35:6379`) of the distributed Redis shards.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_address\": [\n        \"192.168.1.34:6379\",\n        \"192.168.1.35:6379\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Nats PUB/SUB Server via CLI - Bash\nDESCRIPTION: This Bash command launches the Nats server on its default port for PUB/SUB message brokering. The server process prints status and configuration info to stdout. No extra dependencies are required beyond the 'nats-server' executable. After startup, it listens for client connections and is ready to relay messages between Centrifugo instances.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ nats-server\n[3569] 2020/07/08 20:28:44.324269 [INF] Starting nats-server version 2.1.7\n[3569] 2020/07/08 20:28:44.324400 [INF] Git commit [not set]\n[3569] 2020/07/08 20:28:44.325600 [INF] Listening for client connections on 0.0.0.0:4222\n[3569] 2020/07/08 20:28:44.325612 [INF] Server id is NDAM7GEHUXAKS5SGMA3QE6ZSO4IQUJP6EL3G2E2LJYREVMAMIOBE7JT4\n[3569] 2020/07/08 20:28:44.325617 [INF] Server is ready\n\n```\n\n----------------------------------------\n\nTITLE: Subscribe Reply Example - JSON Format\nDESCRIPTION: Example of a server reply to a subscribe command, showing the basic success response structure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_protocol.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"subscribe\": {}}\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome with Flags for WebTransport Testing (Bash)\nDESCRIPTION: This shell command is used to start Google Chrome with specific flags to enable HTTP/3 and WebTransport for local development, especially when using self-signed certificates. The flags include forcing QUIC on localhost and supplying an SPKI fingerprint to bypass certificate errors. The path to Chrome and the SPKI list must be adjusted according to the environment. Intended for local testing only due to the security implications of the flags used.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/webtransport.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/your/Chrome --origin-to-force-quic-on=localhost:8000 --ignore-certificate-errors-spki-list=TSZTiMjLG+DNjESXdJh3f+S8C+RhsFCav7T24VNuCPQ=\n```\n\n----------------------------------------\n\nTITLE: Enabling Graphite Metrics Export via JSON Configuration\nDESCRIPTION: This JSON configuration snippet enables automatic export of Centrifugo metrics to a Graphite server by setting \"graphite\" to true. Key parameters include \"graphite_host\" (server hostname or IP), and \"graphite_port\" (TCP port to connect to, typically 2003). Optional parameter \"graphite_interval\" can specify the aggregation interval in seconds. Metrics are aggregated inside Centrifugo in 10-second intervals by default before being sent to Graphite over a TCP connection. The snippet must be part of the main Centrifugo config file, and the Graphite server must be reachable from the Centrifugo host.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/monitoring.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"graphite\": true,\n    \"graphite_host\": \"localhost\",\n    \"graphite_port\": 2003\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Non-Terminal Disconnect Code 3013 (Too Many Requests)\nDESCRIPTION: Defines the non-terminal client disconnect code 3013, indicating \"too many requests\". This may be issued if a client sends an excessive number of commands to the server, potentially triggering rate limits at the connection level. Clients are expected to reconnect, possibly after a backoff period.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3013\nReason: \"too many requests\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Success Response for Centrifugo Refresh Endpoint\nDESCRIPTION: Presents the required JSON response format for a successful refresh operation as expected by Centrifugo. This reply contains a 'result' field with an 'expire_at' Unix timestamp indicating the prolongation of connection validity. The server must return this structure to allow Centrifugo to keep the client session alive.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\n    \"expire_at\": 1565436268\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Centrifugo Behind Site Location - Nginx Configuration - nginx\nDESCRIPTION: This snippet shows how to embed Centrifugo within an existing site's Nginx configuration under a dedicated location prefix (e.g., '/centrifugo/'). It provides proxy and rewrite rules for the specified location and specialized settings for the '/centrifugo/connection' endpoint to handle WebSocket upgrades and persistent connections. Required: Nginx 1.3.13+ and a Centrifugo server on localhost port 8000. Inputs: site user traffic routed with a Centrifugo prefix; outputs are routed to the Centrifugo backend. This pattern enables running application and Centrifugo behind a single Nginx server. Constraints include proper rewrite rules and header handling for both Web and WebSocket requests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/load_balancing.md#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\n    server 127.0.0.1:8000;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\nserver {\n\n    # ... your web site Nginx config\n\n    location /centrifugo/ {\n        rewrite ^/centrifugo/(.*)        /$1 break;\n        proxy_pass http://centrifugo;\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n    }\n\n    location /centrifugo/connection {\n        rewrite ^/centrifugo(.*)        $1 break;\n        proxy_pass http://centrifugo;\n        proxy_buffering off;\n        keepalive_timeout 65;\n        proxy_read_timeout 60s;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header Host $http_host;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Configuration File\nDESCRIPTION: Command to run Centrifugo instance with a specified configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Configuration via TOML File - TOML\nDESCRIPTION: This TOML snippet configures Centrifugo with client allowed origins and authentication secret under the [client] and [client.token] sections, plus an API key under [http_api]. Dependencies: Centrifugo server, proper file placement. Use TOML tables for hierarchical options, and ensure secrets and keys are replaced before deployment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[client]\nallowed_origins = [ \"http://localhost:3000\" ]\n\n  [client.token]\n  hmac_secret_key = \"<YOUR-SECRET-STRING-HERE>\"\n\n[http_api]\nkey = \"<YOUR-API-KEY-HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins with Wildcard (JSON Array Syntax)\nDESCRIPTION: Configures allowed_origins using a wildcard pattern in the JSON config, enabling multiple subdomains to be matched. Essential for scenarios where clients connect from unpredictable subdomains. Input: pattern with wildcard. Output: config accepts any matching subdomain.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\n    \"https://*.example.com\"\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Subscription Stream Handler for Centrifugo in Go\nDESCRIPTION: This Go snippet implements handling of bidirectional subscription streams within a CentrifugoProxy GRPC server. It starts by receiving the client's initial SubscribeRequest, sends a SubscribeResponse to acknowledge the subscription, and continuously echoes back publication data received from the client over the established stream. Implements two-way (duplex) streaming logic, requires Centrifugo protobuf package and standard GRPC dependencies.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy_streams.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *streamerServer) SubscribeBidirectional(\n\tstream pb.CentrifugoProxy_SubscribeBidirectionalServer,\n) error {\n\tstarted := time.Now()\n\tfmt.Println(\"bidirectional subscribe called\")\n\tdefer func() {\n\t\tfmt.Println(\"bidirectional subscribe finished, elapsed\", time.Since(started))\n\t}()\n\t// First message always contains SubscribeRequest.\n\treq, _ := stream.Recv()\n\tfmt.Println(\"subscribe request received\", req.SubscribeRequest)\n\t_ = stream.Send(&pb.StreamSubscribeResponse{\n\t\tSubscribeResponse: &pb.SubscribeResponse{},\n\t})\n\t// The following messages contain publications from client.\n\tfor {\n\t\treq, _ = stream.Recv()\n\t\tdata := req.Publication.Data\n\t\tfmt.Println(\"data from client\", string(data))\n\t\tvar cd clientData\n\t\tpub := &pb.Publication{Data: data}\n\t\t_ = stream.Send(&pb.StreamSubscribeResponse{Publication: pub})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 105 (Already Subscribed)\nDESCRIPTION: Defines the client error code 105, indicating \"already subscribed\". This error occurs when a client tries to subscribe to a channel it's already subscribed to, either via client-side or server-side subscriptions, as Centrifugo allows only one subscription per channel per client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    105\nMessage: \"already subscribed\"\n```\n\n----------------------------------------\n\nTITLE: Generating User Token with Custom TTL using Centrifugo in Bash\nDESCRIPTION: Uses `centrifugo gentoken` to generate a connection token for user `28282` (specified by `-u`) based on `config.json` (specified by `-c`), but overrides the default expiration time. The `-t 3600` flag sets the token's time-to-live (TTL) to 3600 seconds (1 hour). Useful for development. Exits with code 1 on error.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/console_commands.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gentoken -c config.json -u 28282 -t 3600\n```\n\n----------------------------------------\n\nTITLE: Inappropriate Protocol Disconnect Code\nDESCRIPTION: Disconnect code issued when client connection format cannot handle incoming data, typically when JSON-based clients receive binary data in a channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3506\nReason: \"inappropriate protocol\"\n```\n\n----------------------------------------\n\nTITLE: Executing History Query with cURL in Centrifugo API (Bash)\nDESCRIPTION: This example demonstrates how to execute a history query using cURL, sending a JSON payload to the Centrifugo API endpoint with authorization and limit parameter.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"method\": \"history\", \"params\": {\"channel\": \"chat\", \"limit\": 2}}' | http \"localhost:8000/api\" Authorization:\"apikey KEY\"\n```\n\n----------------------------------------\n\nTITLE: Saving Centrifugo PRO Trace Output to File using CURL\nDESCRIPTION: This command demonstrates how to connect to the Centrifugo PRO admin tracing endpoint using CURL. It sends a POST request specifying the trace type ('user') and the entity ID ('56'), authenticates using an admin token passed in the Authorization header, and saves the resulting trace stream to a file named 'trace.txt'. This requires CURL, a running Centrifugo instance with the admin API enabled, and a valid admin authentication token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/tracing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/admin/trace -H \"Authorization: token <ADMIN_AUTH_TOKEN>\" -d '{\"type\": \"user\", \"entity\": \"56\"}' -o trace.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 103 (Permission Denied)\nDESCRIPTION: Defines the 'Permission Denied' error code (103) returned when a client's access to a specific resource or action is explicitly disallowed by server-side permission checks.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCode:    103\nMessage: \"permission denied\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Unidirectional Subscription Stream Handler in Go\nDESCRIPTION: Go implementation of a GRPC service that handles unidirectional subscription streams. This example sends an initial subscription response followed by periodic publications to the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy_streams.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"math\"\n\t\"net\"\n\t\"strconv\"\n\t\"time\"\n\n\tpb \"example/proxyproto\"\n\t\"google.golang.org/grpc\"\n)\n\ntype streamServer struct {\n\tpb.UnimplementedCentrifugoProxyServer\n}\n\nfunc (s *streamerServer) SubscribeUnidirectional(\n  req *pb.SubscribeRequest,\n  stream pb.CentrifugoProxy_SubscribeUnidirectionalServer,\n) error {\n\tstarted := time.Now()\n\tfmt.Println(\"unidirectional subscribe called with request\", req)\n\tdefer func() {\n\t\tfmt.Println(\"unidirectional subscribe finished, elapsed\", time.Since(started))\n\t}()\n\t_ = stream.Send(&pb.StreamSubscribeResponse{\n\t\tSubscribeResponse: &pb.SubscribeResponse{},\n\t})\n\t// Now publish data to a stream every 1 second.\n\tfor {\n\t\tselect {\n\t\tcase <-stream.Context().Done():\n\t\t\treturn stream.Context().Err()\n\t\tcase <-time.After(1000 * time.Millisecond):\n\t\t}\n\t\tpub := &pb.Publication{Data: []byte(`{\"input\": \"` + strconv.Itoa(i) + `\"}`)}\n\t\t_ = stream.Send(&pb.StreamSubscribeResponse{Publication: pub})\n\t}\n}\n\nfunc main() {\n\tlis, _ := net.Listen(\"tcp\", \":12000\")\n\ts := grpc.NewServer(grpc.MaxConcurrentStreams(math.MaxUint32))\n\tpb.RegisterCentrifugoProxyServer(s, &streamServer{})\n\t_ = s.Serve(lis)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Per-User Rate Limits in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON snippet shows the configuration for Centrifugo PRO's in-memory rate limiting based on user ID. It limits authenticated users across all their connections on a single node. Similar to per-connection limits, it uses token buckets and allows configuration for specific commands (`publish`, `rpc`, `connect`) and a default. It requires `enabled` to be true and defines `buckets` with `interval` and `rate`. Anonymous users are not affected.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/rate_limiting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"user_command_rate_limit\": {\n        \"enabled\": true,\n\n        \"default\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 60\n                },\n            ]\n        },\n        \"publish\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 1\n                }\n            ]\n        },\n        \"rpc\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 10\n                }\n            ],\n            \"method_override\": [\n                {\n                    \"method\": \"update_user_status\",\n                    \"buckets\": [\n                        {\n                            \"interval\": \"20s\",\n                            \"rate\": 1\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from the History API Endpoint\nDESCRIPTION: This JSON object illustrates a successful response from the `/api/history` endpoint when requesting publications. The `result` object includes the stream's current `epoch`, the latest message `offset`, and an array of `publications`. Each publication contains its `data` payload and specific `offset` within the history stream.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"epoch\": \"qFhv\",\n        \"offset\": 4,\n        \"publications\": [\n            {\n                \"data\": {\n                    \"text\": \"hello\"\n                },\n                \"offset\": 2\n            },\n            {\n                \"data\": {\n                    \"text\": \"hello\"\n                },\n                \"offset\": 3\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Server for WebTransport\nDESCRIPTION: JSON configuration for enabling HTTP/3 and WebTransport endpoint in Centrifugo server. Requires TLS configuration with valid certificate and key paths.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/webtransport.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"http3\": true,\n    \"tls\": true,\n    \"tls_cert\": \"path/to/crt\",\n    \"tls_key\": \"path/to/key\",\n    \"webtransport\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Enabling User Channel Subscription with Unidirectional HTTP Stream (JSON)\nDESCRIPTION: This configuration snippet enables both the uni_http_stream transport and automatic personal channel subscription for clients. Under client.subscribe_to_user_personal_channel, enabled is set to true. Under uni_http_stream, enabled is nested (possibly an error; should be a boolean), but per example, \"enabled\": { \"enabled\": true }. Both pieces work together to let authenticated users auto-subscribe to their private channel upon connecting. Inputs: Should be saved in config.json. Outputs: Centrifugo reloads with enabled transport and client subscription logic. Limitations: The nested enabled key is likely a typo and should be confirmed in documentation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_http_stream.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"subscribe_to_user_personal_channel\": {\n      \"enabled\": true\n    }\n  },\n  \"uni_http_stream\": {\n    \"enabled\": {\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Expiration Claim - Python\nDESCRIPTION: This snippet extends basic token generation by creating a JWT with both 'sub' and 'exp' claims, where 'exp' sets expiration for 5 minutes in the future. Requires PyJWT and time modules. The output is the token string, which Centrifugo will accept for authenticating time-limited sessions. Ensure 'secret' matches your Centrifugo HMAC configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\\nimport time\\n\\nclaims = {\\\"sub\\\": \\\"42\\\", \\\"exp\\\": int(time.time()) + 5*60}\\ntoken = jwt.encode(claims, \\\"secret\\\", algorithm=\\\"HS256\\\").decode()\\nprint(token)\\n\n```\n\n----------------------------------------\n\nTITLE: Defining DisconnectConnectionLimit Code and Reason in Centrifugal\nDESCRIPTION: Defines the disconnection code `3504` with reason `\"connection limit\"`. This is issued by the Centrifugal server when a client connection exceeds a configured limit, such as per user ID or based on other rules.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nCode:   3504\nReason: \"connection limit\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo RPC Proxy Endpoint - JSON\nDESCRIPTION: This configuration fragment sets up the Centrifugo RPC proxy, allowing incoming client RPC calls to be handled by the backend at the given HTTP endpoint. The 'proxy_rpc_endpoint' field tells Centrifugo where to send HTTP POSTs, and 'proxy_rpc_timeout' defines the max wait time in seconds for a response. These settings should be included in the main Centrifugo configuration under appropriate conditions. Ensure the backend endpoint is accessible and secure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_rpc_endpoint\": \"http://localhost:3000/centrifugo/connect\",\n  \"proxy_rpc_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-memory Per-connection Throttling in Centrifugo - JSON\nDESCRIPTION: This JSON snippet provides a sample configuration for activating per-connection operation throttling in Centrifugo. It enables the throttling feature, establishes default and total (global per-connection) token buckets, and allows per-operation overrides including for 'publish' and 'rpc' commands (with method-level overrides for RPC). Key parameters include 'interval' (duration of the window in seconds), 'rate' (allowed operations per window), and 'method_override' (specific RPC methods with their own limits). Input is valid JSON inside a Centrifugo config file, and it constrains clients on operation rate. Dependencies include Centrifugo PRO with the throttling feature enabled; no additional libraries required. Outputs are enforced rate limits on incoming commands based on this configuration. Normal users should not hit these limits when set appropriately; backoff and retries may be handled by the SDK or client logic.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/throttling.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"client_command_throttling\": {\n        \"enabled\": true,\n\n        \"default\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 60\n                },\n            ]\n        },\n        \"total\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 20\n                },\n                {\n                    \"interval\": \"60s\",\n                    \"rate\": 50\n                },\n            ]\n        },\n        \"publish\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 1\n                },\n            ]\n        },\n        \"rpc\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 10\n                }\n            ],\n            \"method_override\": [\n                {\n                    \"method\": \"updateActiveStatus\",\n                    \"buckets\": [\n                        {\n                            \"interval\": \"20s\",\n                            \"rate\": 1\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Endpoints in Centrifugo Config (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable Centrifugo's debug endpoints by setting the `enabled` flag within the `debug` object to `true`. When enabled, debug endpoints like `/debug/pprof/` become available, providing useful internal state information for troubleshooting performance issues.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"debug\": {\n    \"enabled\": true\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Consumer in Centrifugo Config Using JSON\nDESCRIPTION: This JSON snippet shows a config example for enabling a PostgreSQL consumer in Centrifugo. It specifies connection DSN, outbox table name, partitioning, polling, and notification setup. The consumer subscribes to the defined table and processes messages as they arrive, requiring proper PostgreSQL access and matching schema.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/consumers.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"consumers\": [\n    {\n      \"enabled\": true,\n      \"name\": \"my_postgresql_consumer\",\n      \"type\": \"postgresql\",\n      \"postgresql\": {\n        \"dsn\": \"postgresql://user:password@localhost:5432/db\",\n        \"outbox_table_name\": \"centrifugo_outbox\",\n        \"num_partitions\": 1,\n        \"partition_select_limit\": 100,\n        \"partition_poll_interval\": \"300ms\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Information via HTTP API in Bash\nDESCRIPTION: Example of using curl to get information about running Centrifugo nodes through the HTTP API. This shows how to make a POST request to the /api/info endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{}' \\\n  http://localhost:8000/api/info\n```\n\n----------------------------------------\n\nTITLE: Enabling Admin Interface in Configuration (JSON)\nDESCRIPTION: By adding the \"admin\": true flag to the JSON configuration, the built-in admin web interface is enabled by default when starting Centrifugo. This eliminates the need for the --admin CLI flag, making the server always expose the admin interface unless otherwise disabled. Other core configuration elements like credentials remain unchanged.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"bbe7d157-a253-4094-9759-06a8236543f9\",\n  \"admin\": true,\n  \"admin_password\": \"d0683813-0916-4c49-979f-0e08a686b727\",\n  \"admin_secret\": \"4e9eafcf-0120-4ddd-b668-8dc40072c78e\",\n  \"api_key\": \"d7627bb6-2292-4911-82e1-615c0ed3eebb\",\n  \"allowed_origins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Admin Web Interface Path in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet illustrates how to specify a custom path to a web interface directory for the Centrifugo Admin Web UI using the \\\"admin_web_path\\\" field. It is used when you want to serve a modified or self-built web UI rather than the official one. Dependencies include Centrifugo and a prepared web interface at the specified path. Key parameters are \\\"admin\\\", \\\"admin_password\\\", \\\"admin_secret\\\", and \\\"admin_web_path\\\", where the last parameter should be a valid file system path. Input is a JSON configuration; output is Centrifugo serving the admin UI from the custom directory after restart. The path must point to a built/dist folder.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/admin_web.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    ...,\\n    \"admin\": true,\\n    \"admin_password\": \"<PASSWORD>\",\\n    \"admin_secret\": \"<SECRET>\",\\n    \"admin_web_path\": \"<PATH_TO_WEB_DIST>\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3012 (No Pong)\nDESCRIPTION: Defines the 'No Pong' disconnect code (3012). This non-terminal code may be issued for bidirectional connections if the client fails to respond to application-level server-to-client pings within the configured timeout, indicating potential unresponsiveness or network issues. Clients are expected to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nCode:   3012\nReason: \"no pong\"\n```\n\n----------------------------------------\n\nTITLE: Namespace-Specific Publish Configuration\nDESCRIPTION: Configuration for enabling publish proxy in a specific namespace\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"proxy_publish_endpoint\": \"http://localhost:3000/centrifugo/publish\",\n  \"proxy_publish_timeout\":  \"1s\",\n  \"namespaces\": [{\n    \"name\": \"sun\",\n    \"publish\": true,\n    \"proxy_publish\": true\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 106 (Limit Exceeded)\nDESCRIPTION: Defines the client error code 106, indicating \"limit exceeded\". This generic error signifies that some server-defined limit has been surpassed; server logs may provide more specifics. For rate limiting, ErrorTooManyRequests (111) is often more specific.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    106\nMessage: \"limit exceeded\"\n```\n\n----------------------------------------\n\nTITLE: Creating Centrifugo Configuration JSON\nDESCRIPTION: Sample Centrifugo configuration JSON with required security keys. This configuration enables the admin interface and sets necessary authentication keys.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"my_secret\",\n  \"api_key\": \"my_api_key\",\n  \"admin_password\": \"password\",\n  \"admin_secret\": \"secret\",\n  \"admin\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 102 (Unknown Channel)\nDESCRIPTION: Defines the client error code 102, signifying an \"unknown channel\". This error is typically returned when a client attempts to interact with a channel associated with a namespace not defined in the Centrifugo configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    102\nMessage: \"unknown channel\"\n```\n\n----------------------------------------\n\nTITLE: Frontend JavaScript Implementation\nDESCRIPTION: JavaScript code for handling WebSocket connections and log subscription using Centrifuge client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-03-18-stream-loki-logs-to-browser-with-websocket-to-grpc-subscriptions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst logs = document.getElementById('logs');\nconst lines = document.getElementById('lines');\nconst queryInput = document.getElementById('query');\nconst button = document.getElementById('submit');\n\nfunction subscribeToLogs(e) {\n    e.preventDefault();\n\n    const query = queryInput.value;\n    if (!query) {\n        alert('Please enter a query.');\n        return;\n    }\n    queryInput.disabled = true;\n    button.disabled = true;\n\n    const centrifuge = new Centrifuge('ws://localhost:9000/connection/websocket');\n\n    const subscription = centrifuge.newSubscription('logs:stream', {\n        data: { query: query }\n    });\n\n    subscription.on('publication', function(ctx) {\n        const logLine = ctx.data.line;\n        const logItem = document.createElement('li');\n        logItem.textContent = logLine;\n        lines.appendChild(logItem);\n        logs.scrollTop = logs.scrollHeight;\n    });\n\n    subscription.subscribe();\n    centrifuge.connect();\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Kafka Topic State in Docker Compose - Bash\nDESCRIPTION: This snippet provides detailed information about a specific Kafka topic (partition, leader, replicas, ISRs, etc.) within a Docker Compose deployment. It assumes the kafka-topics tool is available inside the 'kafka' service. The parameter '--topic postgres.public.chat_cdc' specifies which topic to inspect. The output describes the topic's configuration and state.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/tips_and_tricks.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec kafka kafka-topics --bootstrap-server kafka:9092 --describe --topic postgres.public.chat_cdc\n```\n\n----------------------------------------\n\nTITLE: HTTP API Error Handling Example (Bash/HTTP)\nDESCRIPTION: Demonstrates sending a POST request with erroneous JSON to Centrifugo API, illustrating that by default, errors are reported inside the response with a 200 HTTP code and error payload. No authentication is shown. Outputs HTTP response including headers and body with error field.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n‚ùØ echo '{}' | http POST \"http://localhost:8000/api/publish\"\nHTTP/1.1 200 OK\nContent-Length: 46\nContent-Type: application/json\nDate: Sat, 19 Aug 2023 07:23:40 GMT\n\n{\n    \"error\": {\n        \"code\": 107,\n        \"message\": \"bad request\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Engine Redis for Throttling in Centrifugo - JSON\nDESCRIPTION: This JSON snippet shows how to configure Centrifugo to reuse the Redis instance already declared for the main engine, enabling Redis-based user command throttling without specifying a separate Redis address for throttling. It activates throttling by setting 'use_redis_from_engine' to true together with the 'engine' and 'redis_address' at the root of the configuration. Centrifugo must be running with the Redis engine, and 'enabled' must be set to true. As with other Redis-based throttling, only non-anonymous users are affected, and this ensures a single Redis configuration for both storage and throttling, simplifying cluster deployments.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/throttling.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_address\": \"localhost:6379\",\n    \"redis_user_command_throttling\": {\n        \"enabled\": true,\n        \"use_redis_from_engine\": true,\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo HTTP Stream with CURL\nDESCRIPTION: CURL command to establish a connection to Centrifugo's unidirectional HTTP streaming endpoint. It sends a POST request with a JWT token for authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_http_stream.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/connection/uni_http_stream \\\n    -d '{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIiLCJleHAiOjE2MjUwNzMyODh9.BxmS4R-X6YXMxLfXNhYRzeHvtu_M2NCaXF6HNu7VnDM\"}'\n```\n\n----------------------------------------\n\nTITLE: Specifying Subscription-Specific Capabilities in Centrifugo JWT (JSON)\nDESCRIPTION: This JSON snippet shows how to embed specific capabilities within a Centrifugo subscription JSON Web Token (JWT) using the `allow` claim. In this example, it grants the specific subscription the permissions to publish messages (`\"pub\"`) and query the channel history (`\"hst\"`). This feature, part of Centrifugo PRO, allows for controlling permissions on an individual subscription basis, offering granular control over channel interactions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-19-centrifugo-v4-released.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allow\": [\"pub\", \"hst\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Proxies Array in Centrifugo Configuration - JSON\nDESCRIPTION: Illustrates how to define the \"proxies\" array when enabling granular proxy mode in Centrifugo's configuration. Each proxy object requires a unique \"name\" and an \"endpoint\" (HTTP or GRPC format), with optional fields for timeout, headers, and authentication. The configuration supports multiple proxy objects, each handling a specific purpose such as connect, refresh, subscribe, publish, and RPC events. Inputs include endpoint URLs and authentication metadata; outputs are the registration of proxies for further referencing in the Centrifugo routing flow.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [\n    {\n      \"name\": \"connect\",\n      \"endpoint\": \"http://localhost:3000/centrifugo/connect\",\n      \"timeout\": \"500ms\",\n      \"http_headers\": [\"Cookie\"]\n    },\n    {\n      \"name\": \"refresh\",\n      \"endpoint\": \"http://localhost:3000/centrifugo/refresh\",\n      \"timeout\": \"500ms\"\n    },\n    {\n      \"name\": \"subscribe1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/subscribe\"\n    },\n    {\n      \"name\": \"publish1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/publish\"\n    },\n    {\n      \"name\": \"rpc1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/rpc\"\n    },\n    {\n      \"name\": \"subscribe2\",\n      \"endpoint\": \"http://localhost:3002/centrifugo/subscribe\"\n    },\n    {\n      \"name\": \"publish2\",\n      \"endpoint\": \"grpc://localhost:3002\"\n    }\n    {\n      \"name\": \"rpc2\",\n      \"endpoint\": \"grpc://localhost:3002\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Channel Capabilities for Centrifugo (Python)\nDESCRIPTION: This Python example illustrates how to generate a JWT with specific resource capabilities in the 'caps' field, enabling channel-level permissions for a user in Centrifugo. It uses the 'jwt' package to encode claims including user ID, channel allow-list, and expiry. The key parameters are the 'caps' list and channel names, with the dependency on the PyJWT library. Output is a signed JWT token string, and limitations include requiring Centrifugo PRO for this functionality.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport jwt\nimport time\n\nclaims = {\n    \"sub\": \"17\",\n    \"exp\": int(time.time()) + 30*60,\n    \"caps\": [\n        {\n            \"channels\": [\"personal:17\"],\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n\ntoken = jwt.encode(claims, \"secret\", algorithm=\"HS256\").decode()\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Centrifugo Channel in JavaScript\nDESCRIPTION: Illustrates how to subscribe to a Centrifugo channel and handle incoming messages using the centrifuge-js client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/client_api.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.subscribe('channel', function(messageCtx) {\n    console.log(messageCtx);\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Channel Presence Statistics in Javascript\nDESCRIPTION: This snippet demonstrates how to retrieve statistics about the presence in a channel using the `presenceStats()` method on a `Subscription` object. The response includes the number of connected clients and the number of unique users. This requires channel presence to be configured on the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.presenceStats();\n// resp contains a number of clients and a number of unique users.\n```\n\n----------------------------------------\n\nTITLE: Generating Expiring JWT for Centrifugo (Python, 5-Minute Validity)\nDESCRIPTION: This example creates a JWT with a specified user ID ('sub') and an expiration time ('exp'), valid for 5 minutes. Using the 'jwt' and 'time' Python modules, the encoded HS256 token includes claims for Centrifugo connection control. The code demonstrates how to set the expiration relative to the current UNIX time and to print the resulting token for use on the client. The 'algorithm' parameter is mandatory for HS256 security.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\\nimport time\\n\\nclaims = {\"sub\": \"42\", \"exp\": int(time.time()) + 5*60}\\ntoken = jwt.encode(claims, \"secret\", algorithm=\"HS256\").decode()\\nprint(token)\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Presence via Subscription on Centrifugo Client - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates fetching the full presence information from the client's channel subscription using Centrifugo's SDK. It demonstrates calling the 'presence' method asynchronously on a subscription object, returning a response object with details on all current channel members. Prerequisites include a properly configured Centrifugo JavaScript client, permissions enabled for presence, and a valid subscription. Input is the channel; output is an object describing present clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/presence.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.presence(channel);\n```\n\n----------------------------------------\n\nTITLE: Publishing with GRPC API Key Authorization (Go)\nDESCRIPTION: Shows a Go client using per-RPC credentials to set the 'authorization' metadata with API key for protected Centrifugo GRPC API. Implements custom credentials with a struct and attaches the API key in headers. Requires Centrifugo server configured with grpc_api.key and the gRPC library. Key parameters include the API key, channel name, and payload. Logs errors and successes for each publish attempt.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_26\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n\n    \"centrifugo_example/apiproto\"\n    \n    \"google.golang.org/grpc\"\n)\n\ntype keyAuth struct {\n    key string\n}\n\nfunc (t keyAuth) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {\n    return map[string]string{\n        \"authorization\": \"apikey \" + t.key,\n    }, nil\n}\n\nfunc (t keyAuth) RequireTransportSecurity() bool {\n    return false\n}\n\nfunc main() {\n    conn, err := grpc.Dial(\"localhost:10000\", grpc.WithInsecure(), grpc.WithPerRPCCredentials(keyAuth{\"xxx\"}))\n    if err != nil {\n        log.Fatalln(err)\n    }\n    defer conn.Close()\n    client := apiproto.NewCentrifugoClient(conn)\n    for {\n        resp, err := client.Publish(context.Background(), &PublishRequest{\n            Channel: \"chat:index\",\n            Data:    []byte(`{\"input\": \"hello from GRPC\"}`),\n        })\n        if err != nil {\n            log.Printf(\"Transport level error: %v\", err)\n        } else {\n            if resp.GetError() != nil {\n                respError := resp.GetError()\n                log.Printf(\"Error %d (%s)\", respError.Code, respError.Message)\n            } else {\n                log.Println(\"Successfully published\")\n            }\n        }\n        time.Sleep(time.Second)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence Stats via Centrifugo HTTP API - Bash\nDESCRIPTION: This curl command demonstrates querying concise presence statistics (number of clients and unique users) for a channel via the Centrifugo HTTP API. The request targets the /api/presence_stats endpoint and includes an API key in the header along with the channel name as JSON data. The example presumes Centrifugo is running locally. The output summarizes the count of connected clients and users in the specified channel. Ensure the API key and endpoint are correctly configured.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat\"}' \\\n  http://localhost:8000/api/presence_stats\n```\n\n----------------------------------------\n\nTITLE: Querying Presence via REST API with Curl - Bash\nDESCRIPTION: This Bash snippet demonstrates how to query the Centrifugo server for presence information using the REST API. It sends a POST request to the '/api/presence' endpoint using curl, passing a channel name in the request body and authenticating with an API key. Required dependencies include curl and a running Centrifugo server listening on the specified address. Inputs are the API key and channel name needing presence information; the output is presence data as JSON from the REST endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/presence.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: YOUR_API_KEY\" \\\n  --request POST \\\n  --data '{\"channel\": \"public:test\"}' \\\n  http://localhost:8000/api/presence\n```\n\n----------------------------------------\n\nTITLE: Generating Simplest Connection JWT with Subject (Python)\nDESCRIPTION: This Python code uses the 'jwt' package to encode a JWT containing only a 'sub' (subject/user id) claim. It shows how to sign tokens for Centrifugo connections using HS256 and the application HMAC secret. The call to '.decode()' handles Python 2/3 differences in the returned data type. Input is the user ID, and the output is a string token suitable for the client to authenticate to Centrifugo. No expiration or additional claims are set in this simplest use case.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\\n\\ntoken = jwt.encode({\"sub\": \"42\"}, \"secret\").decode()\\n\\nprint(token)\\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from the Presence API Endpoint\nDESCRIPTION: This JSON object illustrates a successful response structure from the `/api/presence` endpoint. The `result` object contains a `presence` map where keys are client IDs and values are `ClientInfo` objects, detailing the `client` and `user` IDs for each active subscription in the requested channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"presence\": {\n            \"c54313b2-0442-499a-a70c-051f8588020f\": {\n                \"client\": \"c54313b2-0442-499a-a70c-051f8588020f\",\n                \"user\": \"42\"\n            },\n            \"adad13b1-0442-499a-a70c-051f858802da\": {\n                \"client\": \"adad13b1-0442-499a-a70c-051f858802da\",\n                \"user\": \"42\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Node Information in JSON\nDESCRIPTION: Sample JSON response from the info API call, showing details about a Centrifugo node including its name, number of channels, clients, users, and version information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"nodes\": [\n            {\n                \"name\": \"Alexanders-MacBook-Pro.local_8000\",\n                \"num_channels\": 0,\n                \"num_clients\": 0,\n                \"num_users\": 0,\n                \"uid\": \"f844a2ed-5edf-4815-b83c-271974003db9\",\n                \"uptime\": 0,\n                \"version\": \"\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Unidirectional HTTP Stream and User Subscription Configuration (JSON)\nDESCRIPTION: An extended config.json sample enabling both the unidirectional HTTP streaming endpoint (\\\"uni_http_stream\\\": true) and automatic personal user channel subscription (\\\"user_subscribe_to_personal\\\": true). Requires Centrifugo v3+. Key parameters: \\\"uni_http_stream\\\" for endpoint, \\\"user_subscribe_to_personal\\\" for auto-subscribing. No advanced prerequisites are needed except Centrifugo and correct config file usage. Output: enables automatic subscription upon client connect.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_http_stream.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"uni_http_stream\": true,\n    \"user_subscribe_to_personal\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Redis Engine Recovery Operation - Bash\nDESCRIPTION: This Bash code snippet displays the results of a benchmark operation for Redis engine recovery in Centrifugo v3, showing the operation time per ns, bytes allocated per operation, and the number of allocations. No dependencies are required to interpret this snippet; it is typically produced by running Go benchmarks focused on Redis engine performance. Inputs include the benchmark command context, and outputs are numeric benchmark metrics; constraints are tied to single-instance Redis configurations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-08-31-hello-centrifugo-v3.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBenchmarkRedisRecover       26883 ns/op\\t    1204 B/op\\t   28 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with a Configuration File (Bash)\nDESCRIPTION: A shell command to start the Centrifugo server, explicitly loading its configuration from the `config.json` file using the `--config` flag. This is necessary when using custom configurations like a separate broker or presence manager.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncentrifugo --config=config.json\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Kafka Consumer (JSON)\nDESCRIPTION: Shows a snippet of Centrifugo's JSON configuration file, defining a Kafka consumer named `my_kafka_consumer`. This consumer connects to the specified Kafka brokers (`kafka:9092`), subscribes to the topic where Debezium publishes changes (`postgres.public.chat_cdc`), and uses the consumer group `centrifugo`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n  ...\n  \"consumers\": [\n    {\n      \"name\": \"my_kafka_consumer\",\n      \"type\": \"kafka\",\n      \"kafka\": {\n        \"brokers\": [\"kafka:9092\"],\n        \"topics\": [\"postgres.public.chat_cdc\"],\n        \"consumer_group\": \"centrifugo\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unidirectional HTTP Streaming Endpoint in Centrifugo\nDESCRIPTION: JSON configuration to enable the unidirectional HTTP streaming endpoint in Centrifugo. This setting allows clients to connect via long-lived HTTP connections for real-time data transfer.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_http_stream.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"uni_http_stream\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo with curl\nDESCRIPTION: Command to download and install Centrifugo binary using a shell script. This is useful when you're unsure which distribution to choose on Linux or MacOS.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSLf https://centrifugal.dev/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Assigning Connect and Refresh Proxies in Granular Proxy Mode - JSON\nDESCRIPTION: Demonstrates the simultaneous assignment of connect and refresh proxies by proxy name in Centrifugo's configuration. Requires granular proxy mode, a defined proxies list, and sets both \"connect_proxy_name\" and \"refresh_proxy_name\" fields. This ensures that connect and refresh requests are routed through their respective proxies as defined in the proxies array. Inputs are proxy names; resulting in tailored routing for these types of events.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [...],\n  \"connect_proxy_name\": \"connect\",\n  \"refresh_proxy_name\": \"refresh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Terminal Disconnect Code 3501 (Bad Request)\nDESCRIPTION: Defines the terminal client disconnect code 3501, indicating a \"bad request\". This code is issued when a client sends malformed protocol frames that the server cannot parse or process. Clients receiving this code should not reconnect without fixing the protocol implementation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3501\nReason: \"bad request\"\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Non-Terminal): Slow (3008)\nDESCRIPTION: The client is disconnected because it is consuming messages too slowly, causing server-side buffers to potentially overflow. The client should attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3008\nReason: \"slow\"\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Disconnect from Backend via Centrifugo Proxy in JSON\nDESCRIPTION: This JSON example shows how the application backend can instruct Centrifugo to disconnect a client by returning a `disconnect` object in its proxy response. The `code` (must be 4000-4999) determines reconnection behavior (4000-4499 advise reconnect, 4500-4999 are terminal), and the `reason` (max 32 bytes) provides context. This applies to connect, subscribe, publish, and rpc proxy types.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disconnect\": {\n    \"code\": 4500,\n    \"reason\": \"disconnect reason\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Recovery Mode in Centrifugo (JSON)\nDESCRIPTION: This snippet shows a sample Centrifugo configuration file that enables cache recovery mode in a specific channel namespace. Dependencies include a Centrifugo server (v5.4.0+) and access to update the config. The core keys are 'force_recovery' (must be set to true), 'force_recovery_mode' (set to 'cache'), and history-related settings like 'history_size' (typically 1) and retention 'history_ttl'. The configuration ensures that only the latest publication is retained and delivered instantly on subscribe. Inputs: {config.json settings}; Output: JSON config which should be used by Centrifugo. The namespace here is named 'example'.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/cache_recovery.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"channel\\\": {\\n    \\\"namespaces\\\": [\\n      {\\n        \\\"name\\\": \\\"example\\\",\\n        \\\"force_recovery\\\": true,\\n        \\\"force_recovery_mode\\\": \\\"cache\\\",\\n        \\\"history_size\\\": 1,\\n        \\\"history_ttl\\\": \\\"1h\\\"\\n      }\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Exceeded Response\nDESCRIPTION: Example JSON response when the rate limit is exceeded, including timing information for next available window.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/distributed_rate_limit.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"allowed\": false,\n        \"tokens_left\": 0,\n        \"allowed_in\": 5208,\n        \"server_time\": 1694627573210,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Server HTTP API Endpoint URL\nDESCRIPTION: This URL path is the standard endpoint for interacting with the Centrifugo server's HTTP API to publish messages, manage channels, etc.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Overriding Boolean Channel Options in Subscribe Command - JSON\nDESCRIPTION: This JSON object describes the format for overriding boolean channel options in Centrifugo's API. The object includes a 'value' property set to true or false. It is used as part of the 'Override' object under the 'subscribe' command's parameters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": true/false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Push Notification Settings to Login Response (Python)\nDESCRIPTION: Modifies the `login_view` in Django to include push notification-related settings within the JSON response upon successful user login. This passes necessary configuration like the feature flag status, VAPID public key, and Firebase configuration object to the frontend application. Relies on Django's `JsonResponse` and project settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef login_view(request):\n    ...\n    return JsonResponse({\n        'id': user.pk,\n        'username': user.username,\n        'settings': {\n            'push_notifications': {\n                'enabled': settings.PUSH_NOTIFICATIONS_ENABLED,\n                'vapid_public_key': settings.PUSH_NOTIFICATIONS_VAPID_PUBLIC_KEY,\n                'firebase_config': settings.PUSH_NOTIFICATIONS_FIREBASE_CONFIG,\n            }\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Non-Terminal): Connection Expired (3005)\nDESCRIPTION: The client's connection duration has expired according to server configuration. The client is expected to reconnect.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3005\nReason: \"connection expired\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Output to Centrifugo in Benthos\nDESCRIPTION: YAML configuration for setting up HTTP client output in Benthos that publishes messages to Centrifugo's HTTP API with proper authentication and request parameters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-08-19-asynchronous-message-streaming-to-centrifugo-with-benthos.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  label: \"centrifugo_http_publisher\"\n  http_client:\n    url: \"http://localhost:8000/api/publish\"\n    verb: POST\n    headers:\n      X-API-Key: \"<CENTRIFUGO_API_KEY>\"\n    timeout: 5s\n    max_in_flight: 20\n```\n\n----------------------------------------\n\nTITLE: Allowing All Authenticated Users to Access Centrifugo Admin UI\nDESCRIPTION: JSON configuration example showing how to allow all authenticated users to access Centrifugo admin UI by setting a simple 'true' CEL expression. This approach grants admin access to all users who can authenticate via the configured identity provider.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/admin_idp_auth.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"admin\": {\n    ...\n    \"oidc\": {\n      ...\n      \"access_cel\": \"true\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel History via Centrifugo HTTP API - JSON\nDESCRIPTION: This example JSON can be posted to Centrifugo's API under the 'history' method to retrieve a list of publications from the specified channel. The 'channel' parameter is required, and the 'limit' optional parameter controls how many items are returned. Omitting 'limit' returns only stream position. To use, include this JSON in an authenticated POST request.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"history\",\n    \"params\": {\n        \"channel\": \"chat\",\n        \"limit\": 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy HTTP Headers via Environment Variable - Centrifugo - Bash\nDESCRIPTION: This Bash snippet shows how to configure the HTTP headers Centrifugo should proxy via an environment variable before running the Centrifugo process. The 'CENTRIFUGO_PROXY_HTTP_HEADERS' variable is set to a space-separated list of headers, then Centrifugo is launched. Use this approach for runtime configuration in environments where file configuration is less practical.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CENTRIFUGO_PROXY_HTTP_HEADERS=\"Cookie User-Agent X-B3-TraceId X-B3-SpanId\" ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Refresh Request Payload Example - JSON\nDESCRIPTION: This JSON payload is sent by Centrifugo to the backend's refresh proxy endpoint when a client connection needs to be validated or refreshed. The payload includes identifiers like 'client', 'user', and transport/protocol details. Backend handlers should validate the session information and decide whether the connection remains active. All fields except for 'meta' are required for session validation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\"\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking a User via Centrifugo API\nDESCRIPTION: cURL command demonstrating how to block a user using the Centrifugo API. This request blocks a user with ID '2695' until a specified expiration time.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_block.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"block_user\", \"params\": {\"user\": \"2695\", \"expire_at\": 1635845122}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Sending a Connection Refresh Command in JSON\nDESCRIPTION: This JSON object shows a 'refresh' command sent by the client to extend its connection lifetime when connection expiration is enabled on the server. The 'method' (10) indicates refresh, and 'params' must contain a new, valid 'token'. This prevents the server from closing the connection due to expiry.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 4,\n    \"method\": 10,\n    \"params\": {\n        \"token\": \"<refreshed token>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo for HTTP Streaming and Auto-subscription\nDESCRIPTION: JSON configuration to enable unidirectional HTTP streaming and automatically subscribe users to their personal channels upon connection. This setup simplifies the connection process for clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_http_stream.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"uni_http_stream\": true,\n    \"user_subscribe_to_personal\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving a Subscribe Reply in JSON\nDESCRIPTION: This JSON object shows a typical successful reply from the server to a 'subscribe' command. The 'id' matches the request ID. The 'result' object can contain optional fields detailing subscription expiration ('expires', 'ttl') and message recovery status ('recoverable', 'offset', 'epoch', 'publications', 'recovered'). An empty 'result' indicates a basic successful subscription.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2,\n    \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis-based Per-user Throttling in Centrifugo - JSON\nDESCRIPTION: This JSON example demonstrates enabling distributed per-user throttling using Redis as the token bucket store for Centrifugo PRO deployments. The configuration enables Redis-powered rate limiting for specific authenticated user operations and specifies the Redis server address. This is designed for clustered environments where users might connect via different Centrifugo nodes. Key fields include 'enabled', 'redis_address', and command buckets; 'method_override' allows distinct limits per RPC method. Only non-anonymous users are affected. Redis should be properly installed and accessible to Centrifugo. The configuration ensures the same rate limit is enforced globally for a user across all nodes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/throttling.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"redis_user_command_throttling\": {\n        \"enabled\": true,\n        \"redis_address\": \"localhost:6379\",\n\n        \"default\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 60\n                },\n            ]\n        },\n        \"publish\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 1\n                }\n            ]\n        },\n        \"rpc\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 10\n                }\n            ],\n            \"method_override\": [\n                {\n                    \"method\": \"updateActiveStatus\",\n                    \"buckets\": [\n                        {\n                            \"interval\": \"20s\",\n                            \"rate\": 1\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the Presence Stats API Endpoint using cURL in Bash\nDESCRIPTION: This Bash snippet shows how to make a POST request to the `/api/presence_stats` endpoint using `curl`. It requires setting the `X-API-Key` header and providing the channel name (e.g., \"chat\") in the JSON data payload to retrieve summarized presence information: the total number of clients and unique users in the specified channel. Assumes the Centrifugal server is running at `http://localhost:8000`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat\"}' \\\n  http://localhost:8000/api/presence_stats\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Stream Metadata (Offset/Epoch) using History API\nDESCRIPTION: Demonstrates using the Centrifugo history API call with `limit: 0` to retrieve the current stream's top offset and epoch without fetching any actual publication data. `since: null` and `reverse: false` are used but less relevant when the limit is zero.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/history_and_recovery.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 0, since: null, reverse: false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Transports with SSE Fallback in Centrifugo JavaScript SDK\nDESCRIPTION: This JavaScript snippet demonstrates how to configure multiple transport methods in the Centrifugo JS SDK, using WebSocket as the primary method and falling back to SSE if necessary. This approach is beneficial in environments where WebSocket traffic may be restricted. The 'centrifuge' object is initialized with a list of transport configurations, each specifying the protocol and endpoint. The connect() method establishes the connection using the prioritized list. Dependencies: Centrifuge JavaScript SDK must be installed. Key parameters include the 'transports' array for ordering and endpoint specification. Expected input is an array of transport objects; output is a connection to the best available transport.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/sse.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst transports = [\n    {\n        transport: 'websocket',\n        endpoint: 'ws://localhost:8000/connection/websocket'\n    },\n    {\n        transport: 'sse',\n        endpoint: 'http://localhost:8000/connection/sse'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n```\n\n----------------------------------------\n\nTITLE: Creating the Room View Interface with Centrifuge.js (HTML)\nDESCRIPTION: Defines the chat room HTML template for the Django app, adding a message input, a message thread display, and embedding JavaScript to handle Centrifuge WebSocket connections to Centrifugo. This snippet requires the Centrifuge JavaScript library, Django template context (room_name), and a running Centrifugo server. The template expects a 'room_name' context variable, subscribes to the correct room, appends messages to the chat thread, and publishes user messages when Enter is pressed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n\\n<head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <title>Chat Room</title>\\n    <script src=\\\"https://cdn.jsdelivr.net/gh/centrifugal/centrifuge-js@2.8.3/dist/centrifuge.min.js\\\"></script>\\n</head>\\n\\n<body>\\n    <ul id=\\\"chat-thread\\\" class=\\\"chat-thread\\\"></ul>\\n    <div class=\\\"chat-message\\\">\\n        <input id=\\\"chat-message-input\\\" class=\\\"chat-message-input\\\" type=\\\"text\\\" autocomplete=\\\"off\\\" autofocus />\\n    </div>\\n    {{ room_name|json_script:\\\"room-name\\\" }}\\n    <script>\\n        const roomName = JSON.parse(document.getElementById('room-name').textContent);\\n        const chatThread = document.querySelector('#chat-thread');\\n        const messageInput = document.querySelector('#chat-message-input');\\n\\n        const centrifuge = new Centrifuge(\\\"ws://\\\" + window.location.host + \\\"/connection/websocket\\\");\\n\\n        centrifuge.on('connect', function (ctx) {\\n            console.log(\\\"connected\\\", ctx);\\n        });\\n\\n        centrifuge.on('disconnect', function (ctx) {\\n            console.log(\\\"disconnected\\\", ctx);\\n        });\\n\\n        const sub = centrifuge.subscribe('rooms:' + roomName, function (ctx) {\\n            const chatNewThread = document.createElement('li');\\n            const chatNewMessage = document.createTextNode(ctx.data.message);\\n            chatNewThread.appendChild(chatNewMessage);\\n            chatThread.appendChild(chatNewThread);\\n            chatThread.scrollTop = chatThread.scrollHeight;\\n        });\\n\\n        centrifuge.connect();\\n\\n        messageInput.focus();\\n        messageInput.onkeyup = function (e) {\\n            if (e.keyCode === 13) {  // enter, return\\n                e.preventDefault();\\n                const message = messageInput.value;\\n                if (!message) {\\n                    return;\\n                }\\n                sub.publish({ 'message': message });\\n                messageInput.value = '';\\n            }\\n        };\\n    </script>\\n</body>\\n\\n</html>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring WebTransport with WebSocket Fallback in centrifuge-js\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the `centrifuge-js` client to prioritize connecting via WebTransport, with WebSocket as a fallback. It defines an array of transport configurations, specifying the secure endpoint URLs (`https://` for WebTransport, `wss://` for WebSocket). A `Centrifuge` object is instantiated with these transports, and the `connect()` method initiates the connection attempt. This setup requires a Centrifugo v4 server running with HTTP/3 and WebTransport enabled via the `\"webtransport\": true` configuration option.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-19-centrifugo-v4-released.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst transports = [\n    {\n        transport: 'webtransport',\n        endpoint: 'https://your_centrifugo.com/connection/webtransport'\n    },\n    {\n        transport: 'websocket',\n        endpoint: 'wss://your_centrifugo.com/connection/websocket'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Consumers in Centrifugo with JSON - JavaScript/JSON\nDESCRIPTION: This JSON snippet shows how to define an array of consumers in Centrifugo's configuration for asynchronous processing. Each consumer must have a unique name, type ('postgresql' or 'kafka'), and a configuration object for its specific backend (e.g., PostgreSQL or Kafka). The provided fields support enabling/disabling consumers and backend-specific options. Inputs: consumer array as JSON; Output: Centrifugo's internal consumer setup. Dependencies: Centrifugo server. Constraints: Each name must be unique and match regex ^[a-zA-Z0-9_]{2,}.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/consumers.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"consumers\": [\n        {\n            \"name\": \"xxx\",\n            \"type\": \"postgresql\",\n            \"postgresql\": {...}\n        },\n        {\n            \"name\": \"yyy\",\n            \"type\": \"kafka\",\n            \"kafka\": {...}\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-memory Per-user Throttling in Centrifugo - JSON\nDESCRIPTION: This JSON configuration snippet enables in-memory throttling per authenticated user in Centrifugo PRO. It allows specification of token buckets for default, operation-specific (such as 'publish'), and RPC command throttling (with overrides for specific RPC methods). All authenticated (non-anonymous) users are subject to these limits, with 'interval' defining the time window and 'rate' the permitted operation count. Prerequisites include running Centrifugo PRO and using authenticated clients. Inputs are JSON configuration entries under 'user_command_throttling', and the expected output is server-enforced rate limiting per user. Requests from anonymous users are not affected by this configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/throttling.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"user_command_throttling\": {\n        \"enabled\": true,\n\n        \"default\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 60\n                },\n            ]\n        },\n        \"publish\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 1\n                }\n            ]\n        },\n        \"rpc\": {\n            \"buckets\": [\n                {\n                    \"interval\": \"1s\",\n                    \"rate\": 10\n                }\n            ],\n            \"method_override\": [\n                {\n                    \"method\": \"updateActiveStatus\",\n                    \"buckets\": [\n                        {\n                            \"interval\": \"20s\",\n                            \"rate\": 1\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Consumer in Centrifugo Using JSON\nDESCRIPTION: This JSON snippet shows how to configure Centrifugo to act as a Kafka consumer, specifying broker addresses, topics to consume, and the consumer group name. Connection info and an enabled flag are required. Incoming Kafka messages must conform to Centrifugo's expected API command formats.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/consumers.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"consumers\": [\n    {\n      \"enabled\": true,\n      \"name\": \"my_kafka_consumer\",\n      \"type\": \"kafka\",\n      \"kafka\": {\n        \"brokers\": [\"localhost:9092\"],\n        \"topics\": [\"postgres.public.chat_cdc\"],\n        \"consumer_group\": \"centrifugo\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo Connect Proxy Response Payload (JSON)\nDESCRIPTION: This JSON object shows the expected response structure from the application backend when handling a connect proxy request from Centrifugo. The backend should return a `result` object containing at least the authenticated `user` ID (or an empty string for anonymous users). This response confirms the connection is allowed and provides Centrifugo with the necessary user context.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\"result\": {\"user\": \"56\"}}\n```\n```\n\n----------------------------------------\n\nTITLE: Requesting Centrifugo Node Info using GRPC - Python\nDESCRIPTION: Illustrates a client program in Python for requesting info from Centrifugo via the GRPC API. Depends on grpcio, grpcio-tools, and generated Python stubs (api_pb2.py, api_pb2_grpc.py). Inputs are the server address and InfoRequest call; output is node data or error information, with explicit handling for both GRPC-level and API-level errors.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport grpc\nimport api_pb2_grpc as api_grpc\nimport api_pb2 as api_pb\n\nchannel = grpc.insecure_channel('localhost:10000')\nstub = api_grpc.CentrifugoApiStub(channel)\n\ntry:\n    resp = stub.Info(api_pb.InfoRequest())\nexcept grpc.RpcError as err:\n    # GRPC level error.\n    print(err.code(), err.details())\nelse:\n    if resp.error.code:\n        # Centrifugo server level error.\n        print(resp.error.code, resp.error.message)\n    else:\n        print(resp.result)\n\n```\n\n----------------------------------------\n\nTITLE: Defining GRPC API Options in Centrifugo Config (JSON)\nDESCRIPTION: This JSON structure shows the location for GRPC API related options within the Centrifugo configuration file (`config.json`). The `grpc_api` object holds settings specific to the server's GRPC API, including endpoint configuration and security parameters, further explained elsewhere.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"grpc_api\": {\n    ...\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Admin Mode in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet shows how to enable Centrifugo's insecure admin mode by setting \\\"admin_insecure\\\" to true along with \\\"admin\\\". In this mode, login is not required for accessing the admin UI, but optional password/secret fields may remain in the config. Dependencies include a running Centrifugo instance and firewall protection for production as this mode removes password authentication. Key parameters are \\\"admin\\\" and \\\"admin_insecure\\\". Input is a JSON configuration, output is a publicly accessible admin web interface; use with strong network restrictions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/admin_web.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n    ...,\\n    \"admin\": true,\\n    \"admin_insecure\": true,\\n    \"admin_password\": \"<PASSWORD>\",\\n    \"admin_secret\": \"<SECRET>\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo PRO via RPM Package on CentOS - shell\nDESCRIPTION: Installs Centrifugo PRO on CentOS by downloading the RPM and using yum for installation. Dependencies: wget, yum, sudo, compatible CentOS. The command fetches the rpm file and installs it, resulting in a working PRO installation. Inputs: package URL and filename; Output: installed binary; Constraints: CentOS compatible system required.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/install_and_run.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/centrifugal/centrifugo-pro/releases/download/v5.4.2/centrifugo-pro-5.4.2-0.x86_64.rpm\nsudo yum install centrifugo-pro-5.4.2-0.x86_64.rpm\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Token Revocation Persistence - Centrifugo - JSON\nDESCRIPTION: This JSON configuration snippet sets up PostgreSQL as the persistence engine for token revocation and user token invalidation in Centrifugo PRO. Only PostgreSQL is currently supported, configured via a DSN connection string in the `database` block. The `token_revoke` and `user_tokens_invalidate` sections enable database backing for revocations. Required parameters include a valid PostgreSQL DSN and enabling database persistence in the relevant sections. Credentials within the DSN must be configured to allow Centrifugo to connect and store revocation data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/token_revocation.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"token_revoke\": {\n        \"persistence_engine\": \"database\"\n    },\n    \"user_tokens_invalidate\": {\n        \"persistence_engine\": \"database\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GRPC API Client for Python\nDESCRIPTION: Example Python code for creating a GRPC client that communicates with Centrifugo. This snippet demonstrates how to establish a connection and make an Info request with proper error handling.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport grpc\nimport api_pb2_grpc as api_grpc\nimport api_pb2 as api_pb\n\nchannel = grpc.insecure_channel('localhost:10000')\nstub = api_grpc.CentrifugoApiStub(channel)\n\ntry:\n    resp = stub.Info(api_pb.InfoRequest())\nexcept grpc.RpcError as err:\n    # GRPC level error.\n    print(err.code(), err.details())\nelse:\n    if resp.error.code:\n        # Centrifugo server level error.\n        print(resp.error.code, resp.error.message)\n    else:\n        print(resp.result)\n```\n\n----------------------------------------\n\nTITLE: Protobuf Publication Message Definition\nDESCRIPTION: Protocol buffer message definition for Publication type, describing the structure of publication messages including data, client info, offset, and tags.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Publication {\n  bytes data = 4;\n  ClientInfo info = 5;\n  uint64 offset = 6;\n  map<string, string> tags = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Channel in Javascript\nDESCRIPTION: This snippet demonstrates how a client can subscribe to a specific channel (e.g., 'channel') using the `subscribe()` method. It takes the channel name and a callback function to handle incoming messages (`messageCtx`) published to that channel. The method returns a Subscription object, allowing further interaction with the subscription.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.subscribe('channel', function(messageCtx) {\n    console.log(messageCtx);\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Connect Proxy in Centrifugo\nDESCRIPTION: Configuration example for using GRPC instead of HTTP for the connect proxy. The endpoint uses the 'grpc://' scheme to indicate GRPC communication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_connect_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_connect_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Presence via HTTP API (Bash)\nDESCRIPTION: This curl command demonstrates how to request current user presence information for the \\\"public:test\\\" channel from a running Centrifugo server via its HTTP API. It requires a valid Centrifugo API key and assumes the presence option has been enabled for the relevant namespace. The \\\"apikey\\\" must be replaced with your actual API key. Input: POST request with method and channel parameters in JSON; Output: JSON response listing clients currently present in the specified channel. Dependencies: curl, running Centrifugo server, valid API key.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/presence.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey YOUR_API_KEY\" \\\n  --request POST \\\n  --data '{\"method\": \"presence\", \"params\": {\"channel\": \"public:test\"}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Example Connect Reply Object - JSON\nDESCRIPTION: A sample JSON reply from the server to the initial connect command. Used by client code to extract assigned client identifier, server version, and optionally expiration/ttl fields. Input and output both strictly use JSON with fields for id, result (including subfields client/vresion). Clients expect this format as proof of successful connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\":{\n        \"client\": \"421bf374-dd01-4f82-9def-8c31697e956f\",\n        \"version\": \"2.0.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic React Component with Keycloak Authentication UI\nDESCRIPTION: Implementation of the App component with login/logout functionality using the useKeycloak hook. This provides the UI for the SSO authentication flow without Centrifugo connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-03-31-keycloak-sso-centrifugo.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useEffect } from 'react';\nimport logo from './assets/centrifugo.svg'\nimport { Centrifuge } from \"centrifuge\";\nimport { useKeycloak } from '@react-keycloak/web'\nimport './App.css'\n\nfunction App() {\n  const { keycloak, initialized } = useKeycloak()\n\n  if (!initialized) {\n    return null;\n  }\n\n  return (\n    <div>\n      <header>\n        <p>\n          SSO with Keycloak and Centrifugo\n        </p>\n        {keycloak.authenticated ? (\n          <div>\n            <p>Logged in as {keycloak.tokenParsed?.preferred_username}</p>\n            <button type=\"button\" onClick={() => keycloak.logout()}>\n              Logout\n            </button>\n          </div>\n        ) : (\n          <button type=\"button\" onClick={() => keycloak.login()}>\n            Login\n          </button>\n        )}\n      </header>\n    </div >\n  );\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo SSE Endpoint Using EventSource (JavaScript)\nDESCRIPTION: This snippet demonstrates how to establish a unidirectional SSE (EventSource) connection to Centrifugo from a web browser using JavaScript. It adds a 'cf_connect' URL parameter containing a JSON-encoded connection command (such as a JWT token) to the endpoint URL before creating a new EventSource object. Requires a running Centrifugo server with SSE enabled. The input token should be generated according to Centrifugo's authentication specification. Output is a live EventSource object that receives push events from the server. URL query length should be kept under 2048 characters for browser compatibility.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_sse.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = new URL('http://localhost:8000/connection/uni_sse');\nurl.searchParams.append(\"cf_connect\", JSON.stringify({\n    'token': '<JWT>'\n}));\n\nconst eventSource = new EventSource(url);\n```\n\n----------------------------------------\n\nTITLE: JWT-based Authentication Flow in Centrifugo\nDESCRIPTION: Diagram showing the JWT-based authentication flow between client, application backend, and Centrifugo. The backend generates a JWT for the user, the client connects to Centrifugo with this token, establishes a persistent connection, and then receives real-time updates from subscribed channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/flow_diagrams.md#2025-04-23_snippet_0\n\nLANGUAGE: swimlanes.io\nCODE:\n```\nClient <- App Backend: JWT\n\nnote:\nThe backend generates JWT for a user and passes it to the client side.\n\nClient -> Centrifugo: Client connects to Centrifugo with JWT\n\n...: {fas-spinner} Persistent connection established\n\nClient -> Centrifugo: Client issues channel subscribe requests\n\nCentrifugo -->> Client: Client receives real-time updates from channels\n```\n\n----------------------------------------\n\nTITLE: Invalidating User Tokens via Centrifugo REST API - Bash curl Example\nDESCRIPTION: This Bash code snippet shows how to use Centrifugo PRO's REST API to invalidate all tokens for a specific user that were issued before a defined timestamp. The request, sent to the `/api` endpoint with a valid API key, requires `user` (user ID) and `issued_before` (UNIX time) values. The optional `expire_at` parameter constrains how long the revocation remains valid. Inputs are the user ID and timestamp values; the output response is empty if successful.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/token_revocation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"invalidate_user_tokens\", \"params\": {\"user\": \"test\", \"issued_before\": 1635845022, \"expire_at\": 1635845122}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Generating Subscription Token (Bash)\nDESCRIPTION: Uses the `gensubtoken` command to generate an HMAC SHA-256 based subscription token for a specific user (`-u`) and channel (`-s`). It requires a configuration file (`-c`) for the secret key. The token expires in 1 week by default, adjustable via the `-t` flag (TTL in seconds). This command is mostly intended for development use.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/console_commands.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gensubtoken -c config.json -u 28282 -s channel\n```\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gensubtoken -c config.json -u 28282 -s channel -t 3600\n```\n\n----------------------------------------\n\nTITLE: Running Redis Benchmark with Standard Commands\nDESCRIPTION: Running the redis-benchmark tool without pipelining to establish a baseline performance with 100,000 operations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> redis-benchmark -n 100000 set key value\n\nSummary:\n  throughput summary: 84674.01 requests per second\n```\n\n----------------------------------------\n\nTITLE: Setting up Express.js app with session middleware\nDESCRIPTION: Initializes an Express.js application with session middleware, cookie parsing, and static file serving. It sets up routes for the home page, login, and logout functionality.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-10-18-integrating-with-nodejs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst cookieParser = require(\"cookie-parser\");\nconst sessions = require('express-session');\nconst morgan = require('morgan');\nconst axios = require('axios');\n\nconst app = express();\nconst port = 3000;\napp.use(express.json());\n\nconst oneDay = 1000 * 60 * 60 * 24;\n\napp.use(sessions({\n  secret: \"this_is_my_secret_key\",\n  saveUninitialized: true,\n  cookie: { maxAge: oneDay },\n  resave: false\n}));\napp.use(cookieParser());\napp.use(express.urlencoded({ extended: true }))\napp.use(express.json())\napp.use(express.static('static'));\napp.use(morgan('dev'));\n\napp.get('/', (req, res) => {\n  if (req.session.userid) {\n    res.sendFile('views/app.html', { root: __dirname });\n  } else\n    res.sendFile('views/login.html', { root: __dirname })\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Persistence for Token Revocation in Centrifugo PRO\nDESCRIPTION: JSON configuration for enabling Redis persistence engine for token revocation and user token invalidation features in Centrifugo PRO. This setup uses a single Redis instance for storing revocation data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/token_revocation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"token_revoke\": {\n        \"persistence_engine\": \"redis\",\n        \"redis_address\": \"localhost:6379\"\n    },\n    \"user_tokens_invalidate\": {\n        \"persistence_engine\": \"redis\",\n        \"redis_address\": \"localhost:6379\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with a TOML Configuration File - Bash\nDESCRIPTION: This example shows starting Centrifugo using a configuration written in TOML format. The '--config' flag is used to specify the TOML file, allowing flexible deployment and compatibility with TOML syntax.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.toml\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifuge-JS SDK via NPM (Bash)\nDESCRIPTION: Command to install the centrifuge-js JavaScript SDK via npm, enabling frontend applications to connect to Centrifugo using WebSockets. Requires npm and a JavaScript/Node.js-based frontend project.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install centrifuge\n\n```\n\n----------------------------------------\n\nTITLE: Fetching History Before Specific Position (Reversed) using Centrifugo History API\nDESCRIPTION: Explains how to retrieve up to 10 publications in reverse chronological order (newest first) *before* a known stream position specified by `offset` and `epoch` in the `since` parameter. This enables paginating backward through the history.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/history_and_recovery.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: {offset: 11, epoch: \"epoch\"}, reverse: true)\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 111 (Too Many Requests)\nDESCRIPTION: Defines the client error code 111, indicating \"too many requests\". This temporary error signifies that the server rejected the request due to rate limiting policies.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    111\nMessage: \"too many requests\"\nTemporary: true\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL as Push Notification Queue Engine in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to switch the push notification queue engine in Centrifugo PRO from the default Redis Streams to PostgreSQL. This is achieved by setting the `push_notifications.queue_engine` option to \"database\". A PostgreSQL DSN must also be configured.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/push_notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"push_notifications\": {\n        \"queue_engine\": \"database\",\n        // rest of the options...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3011 (Force Reconnect)\nDESCRIPTION: Defines the 'Force Reconnect' disconnect code (3011). This is a non-terminal code issued when the server intentionally disconnects a client but expects it to reconnect immediately (e.g., after configuration changes, load balancing).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nCode:   3011\nReason: \"force reconnect\"\n```\n\n----------------------------------------\n\nTITLE: GRPC Service Definition for Bidirectional Streams\nDESCRIPTION: PHP-style Proto definition for the GRPC service that handles bidirectional subscription streams. This defines the SubscribeBidirectional RPC method with bidirectional streaming capabilities.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy_streams.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nservice CentrifugoProxy {\n  ...\n  // SubscribeBidirectional allows handling bidirectional subscription streams.\n  rpc SubscribeBidirectional(stream StreamSubscribeRequest) returns (stream StreamSubscribeResponse);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multiple Capabilities Configuration\nDESCRIPTION: Example demonstrating incorrect way of setting multiple capabilities for the same channel\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/capabilities.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\"],\n            \"allow\": [\"pub\"]\n        },\n        {\n            \"channels\": [\"news\"],\n            \"allow\": [\"sub\"]\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Subscription JWT Token - Python\nDESCRIPTION: Python code for generating HMAC SHA-256 JWT tokens for channel subscription.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\nimport time\n\nclaims = {\n    \"sub\": \"17\",\n    \"channel\": \"personal:17\"\n    \"exp\": int(time.time()) + 30*60\n}\n\ntoken = jwt.encode(claims, \"secret\", algorithm=\"HS256\").decode()\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Unblocking a User via Centrifugo API\nDESCRIPTION: cURL command showing how to unblock a user using the Centrifugo API. This request unblocks the user with ID '2695'.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_block.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"unblock_user\", \"params\": {\"user\": \"2695\"}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespace-Specific Proxies in Granular Mode\nDESCRIPTION: Configuration example showing how to define different proxies for different channel namespaces in Centrifugo. This enables microservice architecture with specific endpoints for different types of channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [...],\n  \"namespaces\": [\n    {\n      \"name\": \"ns1\",\n      \"subscribe_proxy_name\": \"subscribe1\",\n      \"publish_proxy_name\": \"publish1\"\n    },\n    {\n      \"name\": \"ns2\",\n      \"subscribe_proxy_name\": \"subscribe2\",\n      \"publish_proxy_name\": \"publish2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Centrifugo SSE Connection Endpoint\nDESCRIPTION: Defines the default URL path (`/connection/sse`) used by clients, particularly the Javascript SDK, to establish a Server-Sent Events connection with the Centrifugo server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/sse.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/connection/sse\n```\n\n----------------------------------------\n\nTITLE: Proxy Authentication Flow in Centrifugo\nDESCRIPTION: Diagram illustrating proxy authentication where client connects to Centrifugo without a JWT. Centrifugo forwards the connection request to the application backend, which validates the client connection and provides user credentials in the connect reply.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/flow_diagrams.md#2025-04-23_snippet_1\n\nLANGUAGE: swimlanes.io\nCODE:\n```\nClient -> Centrifugo: Connect request\n\nnote:\nClient connects to Centrifugo without JWT.\n\nCentrifugo -> App backend: Sends request further (via HTTP or GRPC)\n\nnote: The application backend validates client connection and tells Centrifugo user credentials in Connect reply.\n\nApp backend -> Centrifugo: Connect reply\n\nCentrifugo -> Client: Connect Reply\n\n...: {fas-spinner} Persistent connection established\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Connect Proxy with HTTP Header Proxying (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable the connect proxy in Centrifugo's `config.json`. It specifies the backend endpoint URL and lists several HTTP headers (`Cookie`, `Origin`, `User-Agent`, etc.) that should be proxied from the incoming client connection to the specified backend endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"client\": {\n    \"proxy\": {\n      \"connect\": {\n        \"enabled\": true,\n        \"endpoint\": \"https://your_backend/centrifugo/connect\",\n        \"http_headers\": [\n          \"Cookie\",\n          \"Origin\",\n          \"User-Agent\",\n          \"Authorization\",\n          \"X-Real-Ip\",\n          \"X-Forwarded-For\",\n          \"X-Request-Id\"\n        ]\n      }\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Encoding Batched Commands in JavaScript (JSON Format)\nDESCRIPTION: Provides a JavaScript function `encodeCommands` to prepare multiple command objects for batch sending using the line-delimited JSON format. It iterates through an array of command objects, stringifies each one using `JSON.stringify`, and joins them into a single string separated by newline characters (`\\n`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_protocol.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing QUIC Connection Acceptance in Go\nDESCRIPTION: Implements the Run method to accept incoming QUIC connections using quic.Listener. Handles session lifecycle and implements graceful shutdown.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Run server.\nfunc (s *WebTransportServerQuic) Run() error {\n\tlistener, err := quic.ListenAddr(s.config.ListenAddr, s.generateTLSConfig(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor {\n\t\tsess, err := listener.Accept(context.Background())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlog.Printf(\"session accepted: %s\", sess.RemoteAddr().String())\n\t\tgo func() {\n\t\t\tdefer func() {\n\t\t\t\t_ = sess.CloseWithError(0, \"bye\")\n\t\t\t\tlog.Println(\"close session\")\n\t\t\t}()\n\t\t\ts.handleSession(sess)\n\t\t}()\n\t}\n}\n\nfunc (s *WebTransportServerQuic) handleSession(sess quic.Session) {\n    // Not implemented yet.    \n}\n```\n\n----------------------------------------\n\nTITLE: Returning JWT Token from a Backend (Example Response) - Python\nDESCRIPTION: This snippet represents a Python dictionary structure (shown as output, not code to run) sent from a backend as a response to a client token request. The returned JSON payload contains a 'token' field, providing the JWT string that the client should use to authenticate with Centrifugo. While written in Python dictionary syntax, this would typically be converted to JSON in a real REST API. Used as a data contract template for client-server communication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n{\\n    \\\"token\\\": token\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo WebSocket with JavaScript SDK\nDESCRIPTION: Example of establishing a WebSocket connection to a local Centrifugo server using the JavaScript client SDK with optional token configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/websocket.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {\n    // token: ?,\n    // getToken: ?\n});\n\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Persistence Engine for Token Revocation - JSON\nDESCRIPTION: Shows how to configure Centrifugo PRO to use Redis as the persistence engine for both token revocation and user token invalidation. This JSON configuration requires that the Redis server listens on the specified address. Both \"token_revoke\" and \"user_tokens_invalidate\" sections must specify the Redis engine and address. Only a single Redis shard can be used due to lack of sharding support for this feature.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/token_revocation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"token_revoke\": {\n        \"persistence_engine\": \"redis\",\n        \"redis_address\": \"localhost:6379\"\n    },\n    \"user_tokens_invalidate\": {\n        \"persistence_engine\": \"redis\",\n        \"redis_address\": \"localhost:6379\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy for Centrifugo Events (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable Centrifugo event proxying for client connect events via HTTP. Set the proxy connect endpoint to an HTTPS URL so Centrifugo will format client event data as a JSON POST request to your backend. Prerequisites include a backend endpoint listening for POST requests at the specified endpoint, and Centrifugo properly configured as per its documentation. The main parameters are `enabled` (to activate proxying) and `endpoint` (target backend URL). The backend must return a correctly structured JSON response as per the Centrifugo proxy protocol.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"proxy\": {\n      \"connect\": {\n        \"enabled\": true,\n        \"endpoint\": \"https://your_backend/centrifugo/connect\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token with Additional Connection Info in NodeJS\nDESCRIPTION: NodeJS sample to build a Centrifugo JWT embedding an extra 'info' object claim for richer user context, using 'jsonwebtoken'. Input: object with 'sub' and 'info', secret key. Output: HS256 JWT as a string for use in client authentication. Info field can be used by Centrifugo or applications for user display and tracking.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar jwt = require('jsonwebtoken');\n\nvar token = jwt.sign({ sub: '42', info: {\"name\": \"Alexander Emelin\"} }, 'secret');\n\nconsole.log(token);\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream and Proxy Pass for Centrifugo - Nginx - nginx\nDESCRIPTION: This snippet sets up an Nginx upstream named 'centrifugo' to proxy Websocket and HTTP connections to a local Centrifugo server for a standalone domain deployment. It handles proper header forwarding (including Websocket-specific upgrade headers), gzip compression, file serving, error management, and proxy options necessary for reliable persistent connections. The configuration requires Nginx v1.3.13 or higher and presumes a running Centrifugo service, with potential reliance on SSL depending on the actual certificate and key uncommented.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/load_balancing.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\n    # uncomment ip_hash if using SockJS transport with many upstream servers.\n    #ip_hash;\n    server 127.0.0.1:8000;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\n#server {\n#\tlisten 80;\n#\tserver_name centrifugo.example.com;\n#\trewrite ^(.*) https://$server_name$1 permanent;\n#}\n\nserver {\n\n    server_name centrifugo.example.com;\n\n    listen 80;\n\n    #listen 443 ssl;\n    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    #ssl_certificate /etc/nginx/ssl/server.crt;\n    #ssl_certificate_key /etc/nginx/ssl/server.key;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    gzip on;\n    gzip_min_length 1000;\n    gzip_proxied any;\n\n    # Only retry if there was a communication error, not a timeout\n    # on the Centrifugo server (to avoid propagating \"queries of death\"\n    # to all frontends)\n    proxy_next_upstream error;\n\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Scheme $scheme;\n    proxy_set_header Host $http_host;\n\n    location /connection {\n        proxy_pass http://centrifugo;\n        proxy_buffering off;\n        keepalive_timeout 65;\n        proxy_read_timeout 60s;\n        proxy_http_version 1.1;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n    }\n    \n    location / {\n        proxy_pass http://centrifugo;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Room Join View in Django Rest Framework\nDESCRIPTION: This view handles the process of a user joining a room, including atomic transactions and version incrementing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass JoinRoomView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    @transaction.atomic\n    def post(self, request, room_id):\n        room = Room.objects.select_for_update().get(id=room_id)\n        room.increment_version()\n        if RoomMember.objects.filter(user=request.user, room=room).exists():\n            return Response({\"message\": \"already a member\"}, status=status.HTTP_409_CONFLICT)\n        obj, _ = RoomMember.objects.get_or_create(user=request.user, room=room)\n        channels = self.get_room_member_channels(room_id)\n        obj.room.member_count = len(channels)\n        body = RoomMemberSerializer(obj).data\n        return Response(body, status=status.HTTP_200_OK)\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Subscription Token with Custom TTL Using Bash CLI\nDESCRIPTION: Creates a subscription JWT for user '28282' on channel 'channel' with a 1-hour TTL (3600 seconds). Flags specify config, user, channel, and TTL. Centrifugo must be installed. Errors cause exit code 1; useful when verifying short-lived channel access logic.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/console_commands.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gentoken -c config.json -u 28282 -s channel -t 3600\n```\n\n----------------------------------------\n\nTITLE: Example Allowed Origins Option in JSON (JSON)\nDESCRIPTION: This code snippet shows how to set the 'allowed_origins' option in a Centrifugo JSON configuration file to allow requests from 'http://localhost:3000'. This option configures CORS and WebSocket access control. Requires that the configuration is included as part of the JSON configuration file. Input is an array of allowed origins as strings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\\n    \"http://localhost:3000\"\\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Position Sync in Channel Namespace\nDESCRIPTION: Configuration for enabling shared position synchronization in a specific channel namespace to reduce broker load from position sync requests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/scalability.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"example\",\n        \"force_recovery\": true,\n        \"shared_position_sync\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Subscriptions in Dart\nDESCRIPTION: Shows how to create and manage subscriptions, including handling subscription events, in Dart.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal onSubscriptionEvent = (dynamic event) async {\n  print('subscription $channel> $event');\n};\n\nfinal subscription = client.newSubscription(channel);\n\nsubscription.subscribing.listen(onSubscriptionEvent);\nsubscription.subscribed.listen(onSubscriptionEvent);\nsubscription.unsubscribed.listen(onSubscriptionEvent);\n\nawait subscription.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Command Schema (Partial) - Protobuf\nDESCRIPTION: Defines a partial Protobuf schema for the Command message used to communicate with Centrifuge servers. Enumerates valid method types and outlines message fields. Prerequisite: understanding Protobuf syntax and integration with generated code. Used for schema-level reference and implementation in statically-typed client libraries. Key fields are id (unique integer), method (enumeration), and params (serialized bytes).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Command {\n  uint32 id = 1;\n  enum MethodType {\n    CONNECT = 0;\n    SUBSCRIBE = 1;\n    UNSUBSCRIBE = 2;\n    PUBLISH = 3;\n    PRESENCE = 4;\n    PRESENCE_STATS = 5;\n    HISTORY = 6;\n    PING = 7;\n    SEND = 8;\n    RPC = 9;\n    REFRESH = 10;\n    SUB_REFRESH = 11;\n  }\n  MethodType method = 2;\n  bytes params = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Server Configuration\nDESCRIPTION: JSON configuration file for Centrifugo server defining WebSocket settings, API keys, CORS origins, and proxy endpoints\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-12-14-laravel-multi-room-chat-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"port\": 8000,\n  \"engine\": \"memory\",\n  \"api_key\": \"some-long-api-key-which-you-should-keep-secret\",\n  \"allowed_origins\": [\n    \"http://localhost\"\n  ],\n  \"proxy_connect_endpoint\": \"http://nginx/centrifugo/connect/\",\n  \"proxy_http_headers\": [\n    \"Cookie\"\n  ],\n  \"namespaces\": [\n    {\n      \"name\": \"personal\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Capabilities in JWT or Connect Proxy\nDESCRIPTION: Example of setting connection capabilities to allow a client to subscribe to specific channels. This JSON would be included in a JWT 'caps' claim or in a connect proxy result.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/capabilities.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\", \"user_42\"],\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Centrifugo Consumer Notification Channel - JSON\nDESCRIPTION: Shows a Centrifugo JSON consumer config that includes the 'partition_notification_channel' option to enable instant event processing when notified by PostgreSQL. Must be applied to Centrifugo configuration and coordinated with the appropriate SQL trigger. Inputs: notification channel, poll interval and related PostgreSQL event setup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"consumers\": [\n    {\n      \"name\": \"postgresql\",\n      ...\n      \"postgresql\": {\n        ...\n        \"partition_poll_interval\": \"300ms\",\n        \"partition_notification_channel\": \"centrifugo_partition_change\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing History Remove with cURL in Centrifugo API (Bash)\nDESCRIPTION: This example demonstrates how to execute a history remove operation using cURL, sending a JSON payload to the Centrifugo API endpoint with authorization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"method\": \"history_remove\", \"params\": {\"channel\": \"chat\"}}' | http \"localhost:8000/api\" Authorization:\"apikey KEY\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Write Buffer Size\nDESCRIPTION: JSON configuration example demonstrating how to set the WebSocket write buffer size for memory optimization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/websocket.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...,\n    \"websocket_write_buffer_size\": 512\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo Server via Docker - Bash\nDESCRIPTION: This docker command launches the Centrifugo server, mapping required ports and volume mounting the host configuration. It sets high nofile ulimits, suitable for high-concurrency environments. Requires Docker, and the configuration file must exist in the mounted directory. Exposes Centrifugo on port 8000.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --ulimit nofile=262144:262144 -v /host/dir/with/config/file:/centrifugo -p 8000:8000 centrifugo/centrifugo:v5 centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Declaring Initial Chat State for Reducer - javascript\nDESCRIPTION: Defines the structure for the chat state managed by React's useReducer. Includes arrays and maps for rooms and messages, which organize chat data by room. Meant to be integrated with reducer and context setup for chat state management throughout the app.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialChatState = {\n  rooms: [],\n  roomsById: {},\n  messagesByRoomId: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo in Docker\nDESCRIPTION: Docker command to run Centrifugo with a mounted configuration file, exposed port, and increased file descriptor limits for handling many connections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/installation.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --ulimit nofile=262144:262144 -v /host/dir/with/config/file:/centrifugo -p 8000:8000 centrifugo/centrifugo:v6 centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo GRPC Refresh Proxy Endpoint (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates setting up the Refresh Proxy using the GRPC protocol. The `proxy_refresh_endpoint` uses the `grpc://` scheme to indicate that Centrifugo should make GRPC calls to the specified backend service for refreshing connection credentials.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_refresh_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_refresh_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Custom 'info' Connection Claim (Python)\nDESCRIPTION: This snippet demonstrates how to construct a JWT for Centrifugo that includes a custom 'info' claim (containing user details) in addition to 'sub'. Using the 'jwt' library, the claims object adds granular metadata such as user name. The token is HS256 signed with the secret and immediately output as a string for client consumption. Dependencies are the 'jwt' package and the proper secret value.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\\n\\nclaims = {\"sub\": \"42\", \"info\": {\"name\": \"Alexander Emelin\"}}\\ntoken = jwt.encode(claims, \"secret\", algorithm=\"HS256\").decode()\\nprint(token)\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing login and logout handlers\nDESCRIPTION: Express.js route handlers for processing login requests and logging out users. It uses hardcoded credentials for demonstration purposes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-10-18-integrating-with-nodejs.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myusername = 'demo-user'\nconst mypassword = 'demo-pass'\n\napp.post('/login', (req, res) => {\n  if (req.body.username == myusername && req.body.password == mypassword) {\n    req.session.userid = req.body.username;\n    res.redirect('/');\n  } else {\n    res.send('Invalid username or password');\n  }\n});\n\napp.get('/logout', (req, res) => {\n  req.session.destroy();\n  res.redirect('/');\n});\n```\n\n----------------------------------------\n\nTITLE: Calling the Presence API Endpoint using cURL in Bash\nDESCRIPTION: This Bash snippet demonstrates how to make a POST request to the `/api/presence` endpoint using `curl`. It requires setting the `X-API-Key` header and providing the target channel name (e.g., \"chat\") in the JSON data payload to retrieve the list of clients currently subscribed to that channel. Assumes the Centrifugal server is running at `http://localhost:8000`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat\"}' \\\n  http://localhost:8000/api/presence\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Channel with the Centrifuge Client in JavaScript\nDESCRIPTION: This snippet shows how to subscribe to a channel on the Centrifuge server using the subscribe method, which takes the channel name and an eventHandlers object. The subscribe call returns immediately with a Subscription object and processes the subscription asynchronously. Required dependencies include an active Centrifuge client connection and appropriately structured event handler functions for managing channel events.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar subscription = centrifuge.subscribe(\"channel\", eventHandlers);\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Consumer Publication Data Mode - JSON Example - JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Centrifugo with a Kafka consumer that leverages publication data mode. To use this, Centrifugo must be deployed with at least one consumer defined under the \"consumers\" key, specifying its type as \"kafka\". The nested \"kafka\" object takes typical connection parameters (brokers, topics, consumer group) along with publication data mode settings: setting \"enabled\" to true will cause Centrifugo to interpret topic message payloads as publishable data, augmented by headers that specify channels and optionally provide idempotency keys. The key parameters are: \"channels_header\" (specifies which header contains comma-separated channel names) and \"idempotency_key_header\". Inputs are standard Centrifugo config JSON; expected output is correct real-time message delivery as per Centrifugo routing rules. This config requires Centrifugo v4.0+ with Kafka integration enabled and the appropriate Kafka brokers accessible.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/consumers.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"consumers\\\": [\\n    {\\n      \\\"enabled\\\": true,\\n      \\\"name\\\": \\\"my_kafka_consumer\\\",\\n      \\\"type\\\": \\\"kafka\\\",\\n      \\\"kafka\\\": {\\n        \\\"brokers\\\": [\\\"localhost:9092\\\"],\\n        \\\"topics\\\": [\\\"my_topic\\\"],\\n        \\\"consumer_group\\\": \\\"centrifugo\\\",\\n        \\\"publication_data_mode\\\": {\\n          \\\"enabled\\\": true,\\n          \\\"channels_header\\\": \\\"x-centrifugo-channels\\\"\\n          \\\"idempotency_key_header\\\": \\\"x-centrifugo-idempotency-key\\\"\\n        }\\n      }\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the History API Endpoint using cURL in Bash\nDESCRIPTION: This Bash snippet demonstrates how to make a POST request to the `/api/history` endpoint using `curl`. It requires setting the `X-API-Key` header and providing the channel name (e.g., \"chat\") along with a `limit` parameter in the JSON data payload to retrieve a specified number of recent publications from the channel's history. Assumes the Centrifugal server is running at `http://localhost:8000` and history is enabled for the channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat\", \"limit\": 2}' \\\n  http://localhost:8000/api/history\n```\n\n----------------------------------------\n\nTITLE: Re-synchronizing Document State After Failed Recovery\nDESCRIPTION: Method to handle re-synchronization of document state when recovery fails. It resets the loaded flag, clears the message buffer, and initiates a fresh document load and buffered message processing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-06-03-real-time-document-state-sync.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n#reSync() {\n    this.#isLoaded = false; // Reset the flag to collect new messages to the buffer.\n    this.#messageBuffer = [];\n    this.#loadDocumentApplyBuffered();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Localizations for Push Notifications in Centrifugo PRO - JSON\nDESCRIPTION: This snippet shows how to use the 'localizations' field within a push notification request to include translation maps for multiple languages. The field is a nested JSON object where each language code (e.g., 'pt', 'fr') maps to its respective translation strings. Required dependencies: Centrifugo PRO backend configured to accept such payloads. Key parameters include the language codes and their associated 'translations' fields. The system will use these translations based on the device locale. If a translation is missing, the system falls back to the default provided in the template. Limitations: The provided language code must match the device's locale, and at least an English default should be supplied.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/push_notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  ..\n  \"localizations\": {\n    \"pt\": {\n        \"translations\": {\n            \"greeting\": \"Ol\\u00e1\",\n            \"question\": \"Como t\\u00e1 indo\"\n        }\n    }\n    \"fr\": {\n        \"translations\": {\n            \"greeting\": \"Bonjour\",\n            \"question\": \"Comment \\u00e7a va\"\n        }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interpreting WebSocket Disconnect Advice in JSON\nDESCRIPTION: This JSON object illustrates the structure of the disconnect advice sent by the server within the reason field of a WebSocket CLOSE frame. It contains a 'reason' string explaining the disconnection and a boolean 'reconnect' flag advising the client whether it should attempt to reconnect.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"reason\": \"shutdown\",\n    \"reconnect\": true \n}\n```\n\n----------------------------------------\n\nTITLE: Creating ClickHouse Connections Table in SQL\nDESCRIPTION: This SQL snippet shows the structure of the 'connections' table in ClickHouse for storing Centrifugo connection data. It includes fields for client information, user details, and connection metadata.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.connections\n(\n    `client` String,\n    `user` String,\n    `name` String,\n    `version` String,\n    `transport` String,\n    `headers` Map(String, Array(String)),\n    `metadata` Map(String, Array(String)),\n    `time` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{cluster}/{shard}/connections', '{replica}')\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192\n```\n\n----------------------------------------\n\nTITLE: Checking Centrifugo Version\nDESCRIPTION: Command to verify the installed version of Centrifugo. Useful after installation to confirm the correct version is running.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo version\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 107 (Bad Request)\nDESCRIPTION: Defines the client error code 107, indicating a \"bad request\". This error means the server received malformed data from the client and cannot process the request. Retrying the same request is futile.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    107\nMessage: \"bad request\"\n```\n\n----------------------------------------\n\nTITLE: Setting Namespaces via Environment Variable\nDESCRIPTION: Example of setting Centrifugo namespaces configuration through environment variables.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_NAMESPACES='[{\"name\": \"ns1\"}, {\"name\": \"ns2\"}]' ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Configuring Graphite Metrics Export in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates enabling automatic metrics export to Graphite from Centrifugo via TCP. It requires setting `\"enabled\": true` and specifying the Graphite server's `\"host\"` and `\"port\"` within the `graphite` section of the `config.json` file. By default, metrics are aggregated over 10-second intervals before being pushed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/observability.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"graphite\": {\n    \"enabled\": true,\n    \"host\": \"localhost\",\n    \"port\": 2003\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling User Join Events in JavaScript for Centrifugo-powered Chat\nDESCRIPTION: This function processes user join events in a chat application. It fetches the room data if not already loaded and updates the room's member count in the application state.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst processUserJoined = async (body: any) => {\n  const roomId = body.room.id\n  const roomVersion = body.room.version\n  let room = chatState.roomsById[roomId]\n  if (!room) {\n    room = await fetchRoom(roomId)\n    if (room === null) {\n      return\n    }\n    dispatch({\n      type: \"ADD_ROOMS\", payload: {\n        rooms: [room]\n      }\n    })\n  } else {\n    dispatch({\n      type: \"SET_ROOM_MEMBER_COUNT\", payload: {\n        roomId: roomId,\n        version: roomVersion,\n        memberCount: body.room.member_count\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Frontend Service to Docker Compose - yaml\nDESCRIPTION: Configures the 'frontend' service for Docker Compose to build the frontend from source, map relevant folders, expose port 5173, and set development environment. Declares a dependency on the backend service, allowing for orchestrated startup. Requires correct directory structure and Dockerfile in the 'frontend' directory.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfrontend:\n  stdin_open: true\n  build: ./frontend\n  volumes:\n    - ./frontend:/usr/src/app\n    - /usr/src/app/node_modules\n  expose:\n    - 5173\n  environment:\n    - NODE_ENV=development\n  depends_on:\n    - backend\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Centrifugo History Stream using Go (gocent)\nDESCRIPTION: Provides a Go code example using the `gocent` library to continuously iterate over a Centrifugo channel's history stream. It demonstrates pagination using `limit`, `reverse`, and `WithSince` options, retrieving history in chunks of 10 and reversing the iteration direction upon reaching the stream's end. Requires the `gocent` library and assumes an initialized client `c` and context `ctx`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/history_and_recovery.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Iterate by 10.\nlimit := 10\n// Paginate in reversed order first, then invert it.\nreverse := true\n// Start with nil StreamPosition, then fill it with value while paginating.\nvar sp *gocent.StreamPosition\n\nfor {\n\thistoryResult, err = c.History(\n        ctx,\n        channel,\n\t\tgocent.WithLimit(limit),\n\t\tgocent.WithReverse(reverse),\n        gocent.WithSince(sp),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error calling history: %v\", err)\n\t}\n\tfor _, pub := range historyResult.Publications {\n\t\tlog.Println(pub.Offset, \"=>\", string(pub.Data))\n\t\tsp = &gocent.StreamPosition{\n\t\t\tOffset: pub.Offset,\n\t\t\tEpoch:  historyResult.Epoch,\n\t\t}\n\t}\n\tif len(historyResult.Publications) < limit {\n\t\t// Got all pubs, invert pagination direction.\n\t\treverse = !reverse\n\t\tlog.Println(\"end of stream reached, change iteration direction\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo with Redis Sharding on Localhost (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates enabling Redis sharding in Centrifugo using multiple Redis instances running on the local machine. The `redis_address` array lists the addresses (`127.0.0.1:6379`, `127.0.0.1:6380`) of the Redis instances that will serve as shards. Centrifugo distributes data across these shards using consistent hashing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_address\": [\n        \"127.0.0.1:6379\",\n        \"127.0.0.1:6380\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Token Expired (109)\nDESCRIPTION: Returned when the connection token used by the client has expired. Centrifugo SDKs typically handle this by triggering a token refresh mechanism.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    109\nMessage: \"token expired\"\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo via Homebrew on macOS (Shell)\nDESCRIPTION: Installs the Centrifugo server on macOS using the Homebrew package manager. The first command (`brew tap`) adds the official Centrifugo formula repository, and the second command (`brew install`) installs the `centrifugo` package. Requires Homebrew to be installed on the macOS system.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap centrifugal/centrifugo\nbrew install centrifugo\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Frame Size and Write Delay in Centrifugo PRO\nDESCRIPTION: Combines write delay with unlimited message frame size. This configuration sets a 100ms write delay while removing the default limit (16) on the number of messages that can be combined into a single transport frame, allowing for maximum batching efficiency.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/client_msg_batching.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"write_delay\": \"100ms\",\n    \"max_messages_in_frame\": -1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Nginx Service to Docker Compose (YAML)\nDESCRIPTION: This YAML snippet defines an Nginx service within a `docker-compose.yml` file. It uses the official `nginx:1.25` image, mounts the local `./nginx` directory (containing `nginx.conf`) into the container at `/etc/nginx/`, maps host port 9000 to the container's port 80, and declares a dependency on the `backend` service.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/reverse_proxy.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnginx:\n  image: nginx:1.25\n  volumes:\n    - ./nginx:/etc/nginx/\n  ports:\n    - 9000:80\n  depends_on:\n    - backend\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo Server\nDESCRIPTION: Command to start the Centrifugo server using a specific configuration file. This launches the server with the settings defined in the config.json file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_http_stream.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Allow All Origins (Wildcard) in JSON Configuration (JSON)\nDESCRIPTION: This snippet configures Centrifugo to accept requests from any origin by including a single asterisk '*' in the 'allowed_origins' array in the JSON configuration. This setup is typically discouraged except for specific use cases due to its insecurity. Input is the wildcard; effect is unrestricted CORS and WebSocket acceptance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\\n    \"*\"\\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Channel Capabilities Order\nDESCRIPTION: Example showing incorrect ordering of channel capabilities that leads to limited permissions\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/capabilities.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\", \"user_42\"],\n            \"allow\": [\"sub\"]\n        },\n        {\n            \"channels\": [\"user_42\"],\n            \"allow\": [\"pub\", \"hst\", \"prs\"]\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Environment Variables with `centrifugo defaultenv` (Bash)\nDESCRIPTION: Demonstrates running the `centrifugo defaultenv` command. This command prints all available Centrifugo configuration options formatted as environment variables, along with their default values, to standard output. It's useful for discovering configuration possibilities via environment variables.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ centrifugo defaultenv\nCENTRIFUGO_HTTP_SERVER_ADDRESS=\"\"\nCENTRIFUGO_HTTP_SERVER_PORT=\"8000\"\nCENTRIFUGO_ADMIN_ENABLED=false\nCENTRIFUGO_ADMIN_EXTERNAL=false\nCENTRIFUGO_ADMIN_HANDLER_PREFIX=\"\"\nCENTRIFUGO_ADMIN_INSECURE=false\nCENTRIFUGO_ADMIN_PASSWORD=\"\"\nCENTRIFUGO_ADMIN_SECRET=\"\"\n...\n```\n\n----------------------------------------\n\nTITLE: Running Django Migrations using Bash\nDESCRIPTION: Bash commands to generate Django migration files based on the `Outbox` model definition and then apply these migrations to the PostgreSQL database. These commands create the actual `chat_outbox` table required by the Centrifugo consumer.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec backend python manage.py makemigrations\ndocker compose exec backend python manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo Uni-HTTP Stream using CURL (Bash)\nDESCRIPTION: This Bash command uses `curl` to establish a connection to the Centrifugo unidirectional HTTP streaming endpoint (`/connection/uni_http_stream`) running on `localhost:8000`. It sends an HTTP POST request with a JSON payload (`-d`) containing the user's authentication JWT (`token`). This initiates a long-lived HTTP connection for receiving server-sent messages.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_http_stream.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncurl -X POST http://localhost:8000/connection/uni_http_stream \\\n    -d '{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIiLCJleHAiOjE2MjUwNzMyODh9.BxmS4R-X6YXMxLfXNhYRzeHvtu_M2NCaXF6HNu7VnDM\"}'\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Publications Table Schema in ClickHouse\nDESCRIPTION: Defines the publications table structure with channel, source, size, client, user and time fields. Uses MergeTree engine with daily partitioning and 1-day TTL.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.publications\n(\n    `channel` String,\n    `source` String,\n    `size` UInt64,\n    `client` String,\n    `user` String,\n    `time` DateTime\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 109 (Token Expired)\nDESCRIPTION: Defines the 'Token Expired' error code (109) indicating that the client's connection token has expired. Centrifugo SDKs typically handle this specific error by automatically attempting to refresh the token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nCode:    109\nMessage: \"token expired\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo WebSocket with JavaScript SDK - JavaScript\nDESCRIPTION: Demonstrates how to use the Centrifuge JavaScript SDK to establish a WebSocket connection to a local Centrifugo server using the default endpoint. Dependencies include the Centrifuge JavaScript library, and the example assumes the server is running at ws://localhost:8000/connection/websocket. Optional authentication parameters such as 'token' or 'getToken' can be provided. The explicit 'connect' method initiates the actual connection, and expected output is a live websocket connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/websocket.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {\n    // token: ?,\n    // getToken: ?\n});\n\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Configuring allowed_origins for Localhost in JSON\nDESCRIPTION: Example JSON snippet showing how to configure the `allowed_origins` option to allow connections from a web application running on `http://localhost:3000`. This is crucial for preventing CSRF and WebSocket hijacking.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\n    \"http://localhost:3000\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster for Centrifugo\nDESCRIPTION: JSON configuration for connecting Centrifugo to a Redis cluster. Only a few seed nodes need to be specified, and Centrifugo will discover the rest of the cluster nodes automatically.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"redis_cluster_address\": [\n        \"localhost:30001,localhost:30002,localhost:30003\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscribe Proxy in Centrifugo\nDESCRIPTION: Configuration for the subscribe proxy endpoint in Centrifugo. This allows checking client access to channels by proxying subscription requests to the specified endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_endpoint\": \"http://localhost:3000/centrifugo/subscribe\",\n  \"proxy_subscribe_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in JSON Configuration\nDESCRIPTION: This JSON configuration snippet shows how to enable Centrifugo's debug mode by setting the `debug` option to `true`. Enabling debug mode makes additional debugging endpoints available.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"debug\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo GRPC Connect Proxy Endpoint (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable the Connect Proxy using the GRPC protocol. By specifying the endpoint with the `grpc://` scheme, Centrifugo will act as a GRPC client, sending connect requests to the backend GRPC server at `localhost:12000`. The `proxy_connect_timeout` still applies.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_connect_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_connect_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Replicated `operations` Table Schema in ClickHouse (SQL)\nDESCRIPTION: This SQL snippet presents the `CREATE TABLE` statement for the `centrifugo.operations` table in ClickHouse, designed to store details about individual client operations. It includes columns for client/user identifiers, operation type, channel, method, error/disconnect codes, duration, and timestamp. The table utilizes the `ReplicatedMergeTree` engine for replication, partitions data daily, orders by time, and retains data for one day using TTL.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nSHOW CREATE TABLE centrifugo.operations;\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.operations\n(\n    `client` String,\n    `user` String,\n    `op` String,\n    `channel` String,\n    `method` String,\n    `error` UInt32,\n    `disconnect` UInt32,\n    `duration` UInt64,\n    `time` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{cluster}/{shard}/operations', '{replica}')\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with Nats Broker in Bash\nDESCRIPTION: This command starts a Centrifugo instance using the Nats server as its broker for PUB/SUB operations. The `--broker=nats` flag specifies the broker type, enabling communication between multiple Centrifugo nodes via Nats. The `--config=config.json` flag points to the configuration file, which may contain Nats connection details and other settings. This command is the first step in setting up a horizontally scaled Centrifugo cluster using Nats.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncentrifugo --broker=nats --config=config.json\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Interval for User Status in Centrifugo\nDESCRIPTION: This JSON configuration sets the expiration interval for user status information to 24 hours. The expiration time is extended on every update.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_status.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"user_status\": {\n        ...\n        \"expire_interval\": \"24h\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Connect Proxy (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable and configure the connect proxy within Centrifugo's main configuration file (`config.json`). It sets the `enabled` flag to true, specifies the backend gRPC `endpoint`, defines a `timeout`, and lists `http_headers` (like 'Cookie' and 'Authorization') to be forwarded from the client's connection request to the backend.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"client\": {\n    \"proxy\": {\n      \"connect\": {\n        \"enabled\": true,\n        \"endpoint\": \"grpc://your_backend:9000\",\n        \"timeout\": \"1s\",\n        \"http_headers\": [\n          \"Cookie\",\n          \"Authorization\"\n        ]\n      }\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Meta Roles for CEL Evaluation in Centrifugo - JSON\nDESCRIPTION: This example demonstrates a JSON structure for the 'meta' field, which is attached to a Centrifugo connection and referenced in CEL expressions. It shows a 'meta' object with a 'roles' array containing 'admin'. This structure must be supplied either through JWT claims or the connect proxy's output, and allows CEL expressions like 'admin' in meta.roles to evaluate to true for privilege checks. The 'roles' array is essential for role-based access control in the channel permissions setup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/cel_expressions.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\"admin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe Proxy Request Payload Example - JSON\nDESCRIPTION: Represents the request data sent to the backend when handling a proxied subscribe request. All required fields, such as \\\\\"client\\\\\", \\\\\"transport\\\\\", \\\\\"protocol\\\\\", \\\\\"encoding\\\\\", \\\\\"user\\\\\", and \\\\\"channel\\\\\", are provided. This JSON payload is POSTed to the backend endpoint and dictates how access is validated on the backend. Inputs: dynamically generated per connection. Backend should validate and possibly return custom errors or allow access.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"channel\": \"chat:index\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Centrifugo v6 Configuration File in JSON\nDESCRIPTION: Example of a Centrifugo v6 configuration file in JSON format, showing the new structure with client settings and Redis engine configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/migration-v6.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"allowed_origins\": [\"http://localhost:8000\"]\n  },\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n        \"address\": \"redis://localhost:6379\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing User Connections via Curl - Bash\nDESCRIPTION: This snippet illustrates how to establish a connection to Centrifugo using the uni_http_stream transport. The curl POST request includes a JWT token (as previously generated) and an application name in the payload. The endpoint expects a valid token and appropriate data fields ('token' and optional 'name') in the POST body. Each invocation simulates a unique client session; running it multiple times produces multiple connections visible to user_connections API queries.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_connections.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/connection/uni_http_stream --data '{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0MiIsImV4cCI6MTYyNzcxMzMzNX0.s3eOhujiyBjc4u21nuHkbcWJll4Um0QqGU3PF-6Mf7Y\", \"name\": \"terminal\"}'\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Disconnect from Backend (JSON)\nDESCRIPTION: Defines the JSON format for a backend to trigger a custom client disconnect via Centrifugo. Codes 4000-4499 advise reconnection, while 4500-4999 are terminal. The reason string must be <= 32 bytes. This response is not applicable for refresh/sub-refresh proxy requests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disconnect\": {\n    \"code\": 4500,\n    \"reason\": \"disconnect reason\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Minimal Centrifugo JSON Configuration using Shell\nDESCRIPTION: Uses the `centrifugo genconfig` command with the `-c` flag to automatically generate a minimal required configuration file named `config.json`. This provides a basic template to start configuring Centrifugo. The command exits with status code 1 if an error occurs during generation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/console_commands.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncentrifugo genconfig -c config.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Centrifugo Help (Shell)\nDESCRIPTION: Shows the command-line help options for the Centrifugo executable. This is useful for viewing available commands and flags after downloading the binary. Assumes the binary is in the current directory or PATH.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./centrifugo -h\n```\n\n----------------------------------------\n\nTITLE: Defining DisconnectTooManyErrors Code and Reason in Centrifugal\nDESCRIPTION: Defines the disconnection code `3509` with reason `\"too many errors\"`. The Centrifugal server issues this disconnection when a specific client connection generates an excessive number of errors, exceeding a predefined threshold.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_36\n\nLANGUAGE: text\nCODE:\n```\nCode:   3509\nReason: \"too many errors\"\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Tarantool Engine Recovery Operation - Bash\nDESCRIPTION: This Bash code snippet provides benchmark metrics for the Tarantool engine's recovery operation within Centrifugo v3, reporting lower operation time and memory usage than Redis. It is produced similarly via Go benchmarks targeting a single Tarantool instance. It is used for comparative analysis against the Redis result; outputs include nanoseconds per operation, bytes per operation, and allocations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-08-31-hello-centrifugo-v3.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nBenchmarkTarantoolRecover    6292 ns/op\\t     563 B/op\\t   10 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Changing Default Server Port in Centrifugo Config (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to change the default port (usually 8000) on which Centrifugo listens for client connections and serves endpoints. Setting the top-level `port` key to a different value (9000 in this case) modifies the primary listening port for all default endpoints.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"port\": 9000\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Minimal Centrifugo Configuration File - Bash\nDESCRIPTION: This command uses Centrifugo's built-in genconfig command to generate a minimal config.json file in the current directory. It is useful for initial configuration and quick starts. Requires Centrifugo executable and write permissions to the current directory. Outputs a configuration file with autogenerated secrets and options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Nats Broker Raw Mode with Channel Replacements (JSON)\nDESCRIPTION: An example `config.json` snippet showing how to enable Nats raw mode within the `broker.nats` configuration. It enables raw mode (`raw_mode.enabled`), specifies channel character replacements (e.g., `:` to `.`) via `channel_replacements` for mapping Centrifugo channels to Nats subjects, and sets an optional `prefix` specifically for raw mode. This allows direct interaction with Nats topics bypassing Centrifugo's message wrapping, but disables features like join/leave messages.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"broker\": {\n    \"enabled\": true,\n    \"type\": \"nats\",\n    \"nats\": {\n      \"raw_mode\": {\n        \"enabled\": true,\n        \"channel_replacements\": {\n          \":\": \".\"\n        },\n        \"prefix\": \"\"\n      }\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Downloading and Unpacking Centrifugo PRO Binary\nDESCRIPTION: This command downloads and unpacks the Centrifugo PRO binary to the current working directory on Linux or MacOS systems.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/install_and_run.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSLf https://centrifugal.dev/install_pro.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Deleting User Status via Centrifugo Server API using Bash cURL\nDESCRIPTION: This Bash cURL command demonstrates how to clear or delete user status information for specified users via Centrifugo's server API endpoint. It requires an API key and a running Centrifugo instance. Send a users array in the request body; the server's response will be an empty confirmation object. This operation is useful for resetting user state, privacy requests, or administrative cleanup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_status.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"users\": [\"42\"]}' \\\n  http://localhost:8000/api/delete_user_status\n```\n\n----------------------------------------\n\nTITLE: Sending a Push Notification via Centrifugo PRO API using cURL\nDESCRIPTION: This example demonstrates sending a push notification using a cURL command to the Centrifugo PRO `/api` endpoint. It uses the `send_push_notification` method, targets devices subscribed to the 'test' topic (`recipient`), and provides an FCM-specific notification payload (`notification.fcm`). Requires a running Centrifugo instance at `http://localhost:8000` and a valid API key (`<KEY>`) for authorization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/push_notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/api \\\n-H \"Authorization: apikey <KEY>\" \\\n-d @- <<'EOF'\n\n{\n    \"method\": \"send_push_notification\",\n    \"params\": {\n        \"recipient\": {\"topics\": [\"test\"]},\n        \"notification\": {\n            \"fcm\": {\n                \"message\": {\n                    \"notification\": {\"title\": \"Hello\", \"body\": \"How are you?\"}\n                }\n            }\n        }\n    }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Namespaces in Granular Proxy Mode\nDESCRIPTION: Configuration example for defining RPC namespaces with specific proxy endpoints in Centrifugo. This allows routing different RPC methods to different backend services based on namespace prefixes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [...],\n  \"namespaces\": [...],\n  \"rpc_namespaces\": [\n    {\n      \"name\": \"rpc_ns1\",\n      \"rpc_proxy_name\": \"rpc1\",\n    },\n    {\n      \"name\": \"rpc_ns2\",\n      \"rpc_proxy_name\": \"rpc2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting without JWT and Backend Validation in Centrifugo - Markdown\nDESCRIPTION: This snippet demonstrates how a client connects to Centrifugo without providing a JWT, requiring Centrifugo to consult the application backend for validation. The flow highlights use of HTTP or GRPC for backend callbacks, and a persistent connection is established after backend verification. Dependencies include an application backend capable of handling Centrifugo's connect proxy requests and returning validation replies; prerequisite is a non-JWT connection mode configured in Centrifugo. Inputs are client connection requests without JWT; outputs are connect replies and established persistent connections; main constraint is the need for backend availability during connection establishment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/flow_diagrams.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nClient -> Centrifugo: Connect request\n\nnote:\nClient connects to Centrifugo without JWT.\n\nCentrifugo -> App backend: Sends request further (via HTTP or GRPC)\n\nnote: The application backend validates client connection and tells Centrifugo user credentials in Connect reply.\n\nApp backend -> Centrifugo: Connect reply\n\nCentrifugo -> Client: Connect Reply\n\n...: {fas-spinner} Persistent connection established\n```\n\n----------------------------------------\n\nTITLE: BoolValue Object for Option Overrides - JSON\nDESCRIPTION: Auxiliary object representing a boolean value wrapper. Used in override objects to conditionally control presence, join_leave, and other per-channel options in response payloads. Accepts only one key: \\\\\"value\\\\\" as boolean. Used inside override fields of subscribe/proxy result objects.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": true/false\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Test Message to Redis Queue\nDESCRIPTION: Redis command to push a JSON message to the Redis list that will be consumed by Benthos and forwarded to Centrifugo's publish API.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-08-19-asynchronous-message-streaming-to-centrifugo-with-benthos.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:6379> rpush centrifugo.publish '{\"channel\": \"chat\", \"data\": {\"input\": \"test\"}}'\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Correct Channel Capabilities Configuration\nDESCRIPTION: Example showing correct way to configure multiple capabilities for different channels\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/capabilities.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\"],\n            \"allow\": [\"sub\"]\n        },\n        {\n            \"channels\": [\"user_42\"],\n            \"allow\": [\"sub\", \"pub\", \"hst\", \"prs\"]\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Read Buffer Size - JSON\nDESCRIPTION: Shows how to set the 'websocket_read_buffer_size' option in Centrifugo's configuration file to specify the read buffer size for WebSocket connections. This can help reduce memory usage per connection by limiting the buffer to the specified size in bytes. To apply these settings, place this inside the main Centrifugo config.json file. Input is the buffer size; expected output is optimized memory performance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/websocket.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"websocket_read_buffer_size\": 512\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for User Status Query\nDESCRIPTION: This JSON object represents a typical response from the 'get_user_status' API call. It includes the 'active' and 'online' timestamps for the queried user.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_status.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"statuses\":[\n            {\n                \"user\":\"42\",\n                \"active\":1627107289,\n                \"online\":1627107289\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Left Events in JavaScript Chat Application\nDESCRIPTION: Asynchronous JavaScript function `processUserLeft` handles a 'user left' event. It extracts room ID, version, and the ID of the user who left. If the room exists locally, it checks for outdated versions. If the current user (`userInfo.id`) left, it dispatches 'DELETE_ROOM'. Otherwise, it updates the member count via 'SET_ROOM_MEMBER_COUNT'. If the room doesn't exist locally and the leaving user isn't the current user, it fetches the room and dispatches 'ADD_ROOMS'. Depends on `chatState`, `userInfo`, `fetchRoom`, and `dispatch`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst processUserLeft = async (body: any) => {\n  const roomId = body.room.id\n  const roomVersion = body.room.version\n  const leftUserId = body.user.id\n  let room = chatState.roomsById[roomId]\n  if (room) {\n    if (room.version >= roomVersion) {\n      console.error(`Outdated version for room ID ${roomId}.`);\n      return\n    }\n    if (userInfo.id == leftUserId) {\n      dispatch({\n        type: \"DELETE_ROOM\", payload: {\n          roomId: roomId\n        }\n      })\n    } else {\n      dispatch({\n        type: \"SET_ROOM_MEMBER_COUNT\", payload: {\n          roomId: roomId,\n          version: roomVersion,\n          memberCount: body.room.member_count\n        }\n      })\n    }\n  } else if (userInfo.id != leftUserId) {\n    room = await fetchRoom(roomId)\n    dispatch({\n      type: \"ADD_ROOMS\", payload: {\n        rooms: [room]\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Organized Nested Configuration in Centrifugo v6 - YAML\nDESCRIPTION: Shows the restructured Centrifugo v6 YAML configuration, grouping related options under top-level blocks like 'http_server', 'client', 'admin', 'http_api', and 'channel'. Options such as secrets and allowed origins are clearly associated with their context, improving maintainability and clarity. This file requires Centrifugo v6 or later and properly formatted YAML input.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_server:\n  port: 8000\nclient:\n  token:\n    hmac_secret_key: XXX\n  allowed_origins:\n  - http://localhost:3000\nadmin:\n  password: XXX\n  secret: XXX\nhttp_api:\n  key: XXX\nchannel:\n  without_namespace:\n    presence: true\n  namespaces:\n  - name: ns\n    presence: true\n```\n\n----------------------------------------\n\nTITLE: Querying Centrifugo Operations Analytics Table - SQL Example\nDESCRIPTION: This SQL query retrieves all records from the centrifugo.operations table, which contains analytics data exported from Centrifugo to ClickHouse, displaying columns like client ID, user, operation, channel, error, disconnect state, duration, and timestamp. Meant for validation and analytics troubleshooting. No required dependencies beyond ClickHouse with centrifugo.operations table populated by Centrifugo‚Äôs analytics exports.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/analytics.md#2025-04-23_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM centrifugo.operations\n\n‚îå‚îÄclient‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄuser‚îÄ‚î¨‚îÄop‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄchannel‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄmethod‚îÄ‚î¨‚îÄerror‚îÄ‚î¨‚îÄdisconnect‚îÄ‚î¨‚îÄduration‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄtime‚îÄ‚îê\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ connecting  ‚îÇ             ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ   217894 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ connect     ‚îÇ             ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ        0 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ $chat:index ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ    92714 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ presence    ‚îÇ $chat:index ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ     3539 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ test1       ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ     2402 ‚îÇ 2021-07-31 08:15:12 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ test2       ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ      634 ‚îÇ 2021-07-31 08:15:12 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ test3       ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ      412 ‚îÇ 2021-07-31 08:15:12 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Enabling SSE in Centrifugo Configuration with Ellipsis (JSON)\nDESCRIPTION: This example illustrates enabling SSE in a larger config.json context, demonstrating where the 'sse' section with 'enabled': true should be added. Ellipsis '...' indicates other unrelated configuration sections. This highlights only the relevant SSE parameters. A correctly structured config.json with this section activates SSE endpoints for Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/sse.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    ...\\n    \\\"sse\\\": {\\n        \\\"enabled\\\": true\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SSE in Centrifugo Configuration (JSON)\nDESCRIPTION: This snippet shows how to enable the Server-Sent Events (SSE) transport in Centrifugo by setting the 'enabled' property to true within the 'sse' section of your config.json file. Required dependency is the Centrifugo server v4 or newer. With this setting, the /connection/sse endpoint is available for clients to connect. The main key is 'enabled', which is a boolean determining if SSE will be exposed as a transport.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/sse.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \\\"sse\\\": {\\n    \\\"enabled\\\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connection-Level Channel Capabilities in Centrifugo JWT (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to define channel capabilities within a Centrifugo connection JSON Web Token (JWT). The `caps` array specifies rules, allowing the connection to subscribe (`\"sub\"`) to specific channels (`\"news\"`, `\"user_42\"`) using client-side subscriptions while the connection is active. This mechanism, part of Centrifugo PRO, enables fine-grained permission control on a per-connection basis, supplementing namespace-level settings. It also supports wildcard and regex channel matches.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-19-centrifugo-v4-released.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\", \"user_42\"],\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RealTimeDocument with Centrifugal in a Counter Example\nDESCRIPTION: Example usage of the RealTimeDocument class for synchronizing a counter state. Shows configuration with custom load, update, version comparison, and change event handlers in a practical application.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-06-03-real-time-document-state-sync.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst counterContainer = document.getElementById(\"counter\");\n\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\nconst subscription = client.newSubscription('counter', {});\n\nconst realTimeDocument = new RealTimeDocument({\n    subscription,\n    load: async () => {\n        const response = await fetch('/api/counter');\n        const result = await response.json();\n        return { document: result.value, version: result.version };\n    },\n    applyUpdate: (document, update) => {\n        document += update.increment\n        return document\n    },\n    compareVersion: (currentVersion, update) => {\n        const newVersion = update.version;\n        return newVersion > currentVersion ? newVersion : null;\n    },\n    onChange: (document) => {\n        counterContainer.textContent = document;\n    },\n    debug: true,\n});\nclient.connect();\n\n// Note ‚Äì we can call sync even before connect.\nrealTimeDocument.startSync();\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Removal on Logout (Python)\nDESCRIPTION: Extends the `logout_view` in Django (restricted to POST) to handle the removal of push notification device registrations when a user logs out. It optionally extracts a specific `device_id` from the request body. It then calls the Centrifugo PRO `/api/device_remove` HTTP API endpoint, providing the user ID and optionally the specific device ID(s) to unregister. Requires Django, the `requests` library, and Centrifugo API settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@require_POST\ndef logout_view(request):\n    ...\n    \n    device_ids = []\n    device_id = json.loads(request.body).get('device_id', '')\n    if device_id:\n        device_ids = [device_id]\n\n    session = requests.Session()\n    try:\n        resp = session.post(\n            settings.CENTRIFUGO_HTTP_API_ENDPOINT + '/api/device_remove',\n            data=json.dumps({\n                'users': [str(request.user.pk)],\n                'ids': device_ids\n            }),\n            headers={\n                'Content-type': 'application/json',\n                'X-API-Key': settings.CENTRIFUGO_HTTP_API_KEY,\n                'X-Centrifugo-Error-Mode': 'transport'\n            }\n        )\n    except requests.exceptions.RequestException as e:\n        logging.error(e)\n        return JsonResponse({'detail': 'failed to register device'}, status=500)\n    \n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger with OTLP Enabled via Docker (Bash)\nDESCRIPTION: This Bash command utilizes Docker to run the Jaeger all-in-one image, configured to receive OpenTelemetry data. The `-e COLLECTOR_OTLP_ENABLED=true` flag enables the OTLP receiver within Jaeger. Ports are mapped (`-p`) to expose the Jaeger UI (16686) and the OTLP HTTP endpoint (4318), which Centrifugo will use to send trace data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/observability.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --name jaeger \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 16686:16686 \\\n  -p 4318:4318 \\\n  jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis List Input in Benthos\nDESCRIPTION: YAML configuration for setting up a Redis List as an input source for Benthos, targeting a specific queue used for Centrifugo publishing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-08-19-asynchronous-message-streaming-to-centrifugo-with-benthos.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninput:\n  label: \"centrifugo_redis_consumer\"\n  redis_list:\n    url: \"redis://127.0.0.1:6379\"\n    key: \"centrifugo.publish\"\n```\n\n----------------------------------------\n\nTITLE: Connection Capabilities with Regex Matching\nDESCRIPTION: Using regex patterns for matching channel names, allowing more complex patterns than simple wildcards. This example allows subscription to channels following the 'posts_[number]' pattern.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/capabilities.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"^posts_[\\\\d]+$\"],\n            \"match\": \"regex\",\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: docker-compose Service Configuration for Centrifugo - YAML\nDESCRIPTION: This docker-compose.yml file defines a service for running Centrifugo with persistent configuration, mapped ports, and elevated nofile ulimits for production use. It specifies the container image, command, and required volumes. Requires Docker Compose and a valid config.json file present in the working directory.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_10\n\nLANGUAGE: yml\nCODE:\n```\nversion: \"3.9\"\nservices:\n  centrifugo:\n    container_name: centrifugo\n    image: centrifugo/centrifugo:v5\n    volumes:\n      - ./config.json:/centrifugo/config.json\n    command: centrifugo -c config.json\n    ports:\n      - 8000:8000\n    ulimits:\n      nofile:\n        soft: 65535\n        hard: 65535\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Configuration\nDESCRIPTION: Command to automatically generate a basic Centrifugo config.json file with minimal required settings including token_hmac_secret_key and api_key.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/integration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results: Redigo vs Rueidis with Latency\nDESCRIPTION: Displays performance benchmark results comparing Redigo and Rueidis implementations under simulated network latency conditions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n> benchstat redigo_latency_p128.txt rueidis_delay_latency_p128.txt\nname                      old time/op    new time/op    delta\nRedisPublish-8            31.5¬µs ¬± 1%     5.6¬µs ¬± 3%   -82.26%  (p=0.000 n=9+10)\nRedisPublish_History-8    62.8¬µs ¬± 3%    10.6¬µs ¬± 4%   -83.05%  (p=0.000 n=10+10)\nRedisSubscribe-8          1.52¬µs ¬± 5%    6.05¬µs ¬± 8%  +298.70%  (p=0.000 n=8+10)\nRedisRecover-8            48.3¬µs ¬± 3%     7.3¬µs ¬± 4%   -84.80%  (p=0.000 n=10+10)\nRedisAddPresence-8        52.3¬µs ¬± 4%     5.8¬µs ¬± 2%   -88.94%  (p=0.000 n=10+10)\n\n(rest is not important here...)\n```\n\n----------------------------------------\n\nTITLE: Sending a Subscribe Command in JSON (Centrifugo)\nDESCRIPTION: Demonstrates the JSON format for sending a `subscribe` command from a client to the Centrifugo server. It includes the mandatory incremental `id` field (set to 1) for matching the server's reply and the `subscribe` object containing the channel name (`example`). This illustrates the basic structure of a client command.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_protocol.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"subscribe\": {\"channel\": \"example\"}}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Centrifugo PRO Tracing Endpoint with cURL - Bash\nDESCRIPTION: This snippet demonstrates how to use cURL to connect to the Centrifugo PRO admin tracing endpoint, authenticate using an admin token, specify trace parameters for type (user) and entity (user ID 56), and save the response to a file named trace.txt. Dependencies include access to a running Centrifugo PRO instance and a valid admin session token, typically obtained from browser developer tools. Input parameters are the admin token and JSON data in the POST body. The command outputs all relevant trace data for the specified user to a file, suitable for later processing. Note: This trace is best for JSON messages; binary payloads may have limitations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/tracing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/admin/trace -H \"Authorization: token <ADMIN_AUTH_TOKEN>\" -d '{\"type\": \"user\", \"entity\": \"56\"}' -o trace.txt\n```\n\n----------------------------------------\n\nTITLE: Example API user_connections Response - JSON\nDESCRIPTION: This snippet provides a representative JSON response from a successful user_connections API call to Centrifugo. The result object includes a 'connections' map keyed by client IDs, with each entry detailing the app name, transport type, and protocol used for the individual connection. It can be used as reference structure for client or admin tooling to interpret connection metadata. Fields may differ based on actual client properties.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_connections.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"connections\": {\n            \"db8bc772-2654-4283-851a-f29b888ace74\": {\n                \"app_name\": \"terminal\",\n                \"transport\": \"uni_http_stream\",\n                \"protocol\": \"json\"\n            },\n            \"4bc3ca70-ecc5-439d-af14-a78ae18e31c7\": {\n                \"app_name\": \"terminal\",\n                \"transport\": \"uni_http_stream\",\n                \"protocol\": \"json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Binary Command\nDESCRIPTION: Basic command to run Centrifugo after downloading the binary release. This is the simplest way to execute Centrifugo once you have downloaded and unpacked the binary file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Processing New Message Events in JavaScript for Centrifugo-powered Chat\nDESCRIPTION: This function handles new message events in a chat application. It fetches room and message data if not already loaded, and updates the application state with the new message.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst processMessageAdded = async (body: any) => {\n  const roomId = body.room.id\n  const newMessage = body\n\n  let room = chatState.roomsById[roomId]\n  if (!room) {\n    room = await fetchRoom(roomId)\n    dispatch({\n      type: \"ADD_ROOMS\", payload: {\n        rooms: [room]\n      }\n    })\n  }\n\n  let messages = chatState.messagesByRoomId[roomId]\n  if (!messages) {\n    const messages = await fetchMessages(roomId)\n    dispatch({\n      type: \"ADD_MESSAGES\", payload: {\n        roomId: roomId,\n        messages: messages\n      }\n    })\n    return;\n  }\n\n  dispatch({\n    type: \"ADD_MESSAGES\", payload: {\n      roomId: roomId,\n      messages: [newMessage]\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Django Model for CDC Events (Python)\nDESCRIPTION: Defines a Django model named `CDC` used to store event data that will be captured by the CDC process. It includes fields for the `method` (e.g., 'publish', 'broadcast'), the JSON `payload`, a `partition` field (intended to be used by Debezium for Kafka partitioning), and an automatically generated `created_at` timestamp. The comment highlights semantic differences from a similar 'Outbox' model.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# While the CDC model here is the same as Outbox it has different partition field semantics,\n# also in outbox case we remove processed messages from DB, while in CDC don't. So to not\n# mess up with different semantics when switching between broadcast modes of the example app\n# we created two separated models here. \nclass CDC(models.Model):\n    method = models.TextField(default=\"publish\")\n    payload = models.JSONField()\n    partition = models.BigIntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Centrifugo RPC Proxy Request Payload (HTTP) in JSON\nDESCRIPTION: This JSON object shows an example payload that Centrifugo sends to the configured backend application endpoint when proxying an RPC request via HTTP. It includes details about the client connection (ID, transport, protocol, encoding, user), the requested RPC method (`getCurrentPrice`), and the data sent by the client (`{\"params\": {\"object_id\": 12}}`). The backend uses this information to process the RPC call.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"method\": \"getCurrentPrice\",\n  \"data\":{\n    \"params\": {\"object_id\": 12}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Event Listener in JavaScript\nDESCRIPTION: Client-side handler for receiving direct messages from the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.on('message', function(data) {\n    console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Proxy in Centrifugo\nDESCRIPTION: Configuration for the RPC proxy endpoint in Centrifugo. This allows bidirectional communication over WebSocket or SockJS connections by proxying RPC calls to the specified endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_rpc_endpoint\": \"http://localhost:3000/centrifugo/connect\",\n  \"proxy_rpc_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Channel History in Centrifugo\nDESCRIPTION: Shows various ways to retrieve publication history from a Centrifugo channel, including getting the current stream position, fetching publications with limits and offsets, and retrieving publications in reverse order.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/client_api.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history();\nconsole.log(resp.offset);\nconsole.log(resp.epoch);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history({limit: 10, since: {offset: 0, epoch: '...'}});\nconsole.log(resp.publications);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history({limit: 10});\nconsole.log(resp.publications);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history({limit: 10, reverse: true});\nconsole.log(resp.publications);\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Connect Proxy Endpoint (JSON)\nDESCRIPTION: Example `config.json` snippet showing how to enable the connect proxy using a GRPC endpoint (`grpc://...`). Specifies the GRPC server address and the timeout for the proxy request.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_connect_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_connect_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Listen/Notify Trigger for Outbox Partition Using SQL\nDESCRIPTION: This SQL snippet defines a PostgreSQL trigger and function that emits a NOTIFY event when new rows are inserted into a specified outbox table partition. It requires proper permissions and function installation on the given table. Enables Centrifugo to receive immediate partition notifications instead of polling.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/consumers.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION centrifugo_notify_partition_change()\nRETURNS TRIGGER AS $$\nBEGIN\n    PERFORM pg_notify('centrifugo_partition_change', NEW.partition::text);\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE OR REPLACE TRIGGER centrifugo_notify_partition_trigger\nAFTER INSERT ON chat_outbox\nFOR EACH ROW\nEXECUTE FUNCTION centrifugo_notify_partition_change();\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Internal Port Configuration\nDESCRIPTION: Configuration for setting up a custom internal port for admin and debug endpoints\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...,\n    \"internal_port\": 9000\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Presence Statistics via Centrifugo Server API (Bash/cURL)\nDESCRIPTION: This Bash command uses cURL to call the '/api/presence_stats' endpoint of the Centrifugo server. It retrieves summarized presence statistics (client count and unique user count) for the specified channel ('public:test'). Similar to the full presence call, it requires an API key and the channel in the request body.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/presence.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: YOUR_API_KEY\" \\\n  --request POST \\\n  --data '{\"channel\": \"public:test\"}' \\\n  http://localhost:8000/api/presence_stats\n```\n\n----------------------------------------\n\nTITLE: Sample Proxy RPC Success Response Payload for Centrifugo (JSON)\nDESCRIPTION: This JSON snippet illustrates a successful RPC response from backend to Centrifugo, encapsulating application data (in this case, an answer object). The structure must match the documented format, with the 'result' object containing a 'data' field as required. Input: Backend logic's computed answer. Output: HTTP response to Centrifugo's proxy RPC request.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {\"data\": {\"answer\": \"2019\"}}}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Generated from Centrifugo Config\nDESCRIPTION: Example output of environment variables generated from a Centrifugo v6 configuration, showing the new naming convention for configuration options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/migration-v6.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_CLIENT_ALLOWED_ORIGINS=\"http://localhost:8000\"\nCENTRIFUGO_ENGINE_REDIS_ADDRESS=\"redis://localhost:6379\"\nCENTRIFUGO_ENGINE_TYPE=\"redis\"\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Proxy Endpoints in Centrifugo's Granular Proxy Mode\nDESCRIPTION: Configuration example showing how to define multiple named proxy endpoints in Centrifugo's granular proxy mode. Each proxy can have custom settings for timeout, headers, and endpoints.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [\n    {\n      \"name\": \"connect\",\n      \"endpoint\": \"http://localhost:3000/centrifugo/connect\",\n      \"timeout\": \"500ms\",\n      \"http_headers\": [\"Cookie\"]\n    },\n    {\n      \"name\": \"refresh\",\n      \"endpoint\": \"http://localhost:3000/centrifugo/refresh\",\n      \"timeout\": \"500ms\"\n    },\n    {\n      \"name\": \"subscribe1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/subscribe\"\n    },\n    {\n      \"name\": \"publish1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/publish\"\n    },\n    {\n      \"name\": \"rpc1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/rpc\"\n    },\n    {\n      \"name\": \"subscribe2\",\n      \"endpoint\": \"http://localhost:3002/centrifugo/subscribe\"\n    },\n    {\n      \"name\": \"publish2\",\n      \"endpoint\": \"grpc://localhost:3002\"\n    }\n    {\n      \"name\": \"rpc2\",\n      \"endpoint\": \"grpc://localhost:3002\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Centrifugo Consumer for LISTEN/NOTIFY (JSON)\nDESCRIPTION: JSON configuration snippet showing the updated PostgreSQL consumer configuration in Centrifugo. The key change is ensuring the `partition_notification_channel` property is set to the correct channel name ('centrifugo_partition_change') that the PostgreSQL trigger uses. This enables the LISTEN/NOTIFY mechanism for reduced latency.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"consumers\": [\n    {\n      \"enabled\": true,\n      \"name\": \"postgresql\",\n      ...\n      \"postgresql\": {\n        ...\n        \"partition_poll_interval\": \"300ms\",\n        \"partition_notification_channel\": \"centrifugo_partition_change\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Centrifugo Configuration via Environment Variables - Bash\nDESCRIPTION: These bash snippets set Centrifugo options using environment variables instead of a config file. The variables are prefixed with 'CENTRIFUGO_' and correspond to config keys, with uppercase and underscores for nesting. This approach enables configuration via shell for containerized or CI/CD deployments, and values must be properly quoted for spaces or booleans. Input values include allowed origins and Prometheus enablement.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CENTRIFUGO_CLIENT_ALLOWED_ORIGINS=\"https://mysite1.com https://mysite2.com\"\nexport CENTRIFUGO_PROMETHEUS_ENABLED=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Publish Event Handler in JavaScript\nDESCRIPTION: Client-side handler for receiving messages from server-side subscriptions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.on('publish', function(msgCtx) {\n    console.log(msgCtx);\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging Centrifugo WebSocket Connection with wscat (Bash)\nDESCRIPTION: Shows a typical `wscat` session connecting to a Centrifugo WebSocket endpoint (`ws://localhost:8000/connection/websocket`). The client sends a connect command (`{\"id\": 1, \"connect\": {}}`) and receives a successful connection response, but is subsequently disconnected (`code: 3012, reason: \\\"no pong\\\"`) because it fails to respond to the server's application-level ping (`{}`) with a required pong message. This highlights the challenge addressed by the `cf_ws_frame_ping_pong` parameter in v5.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-06-29-centrifugo-v5-released.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n‚ùØ wscat --connect ws://localhost:8000/connection/websocket\nConnected (press CTRL+C to quit)\n> {\"id\": 1, \"connect\": {}}\n< {\"id\":1,\"connect\":{\"client\":\"9ac9de4e-5289-4ad6-9aa7-8447f007083e\",\"version\":\"0.0.0\",\"ping\":25,\"pong\":true}}\n< {}\nDisconnected (code: 3012, reason: \"no pong\")\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Bidirectional Subscription Streams in Namespace via Centrifugo Config (JSON)\nDESCRIPTION: This JSON configuration enables bidirectional subscription streams for a particular namespace by setting 'subscribe_stream_proxy_bidirectional' to true. When enabled, this causes Centrifugo to expect and establish a bidirectional GRPC stream, allowing clients to both receive and send data over the stream. Endpoint and timeout settings must still use the GRPC streaming endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy_streams.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"proxy\": {\n      \"subscribe_stream\": {\n        \"endpoint\": \"grpc://localhost:12000\",\n        \"timeout\": \"3s\"\n      }\n    },\n    \"namespaces\": [\n      {\n        \"name\": \"streams\",\n        \"subscribe_stream_proxy_enabled\": true,\n        \"subscribe_stream_proxy_bidirectional\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling New Messages in JavaScript Chat Application\nDESCRIPTION: Asynchronous JavaScript function `processMessageAdded` handles a 'message added' event. It extracts the room ID and message data from the event body. If the room or its messages are not already in the local `chatState`, it fetches them asynchronously using `fetchRoom` and `fetchMessages`. Finally, it dispatches an 'ADD_MESSAGES' action to update the application state with the new message. Depends on `chatState`, `fetchRoom`, `fetchMessages`, and `dispatch`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst processMessageAdded = async (body: any) => {\n  const roomId = body.room.id\n  const newMessage = body\n\n  let room = chatState.roomsById[roomId]\n  if (!room) {\n    room = await fetchRoom(roomId)\n    dispatch({\n      type: \"ADD_ROOMS\", payload: {\n        rooms: [room]\n      }\n    })\n  }\n\n  let messages = chatState.messagesByRoomId[roomId]\n  if (!messages) {\n    const messages = await fetchMessages(roomId)\n    dispatch({\n      type: \"ADD_MESSAGES\", payload: {\n        roomId: roomId,\n        messages: messages\n      }\n    })\n    return;\n  }\n\n  dispatch({\n    type: \"ADD_MESSAGES\", payload: {\n      roomId: roomId,\n      messages: [newMessage]\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Fallback Transports in Centrifuge-js\nDESCRIPTION: Example configuration for setting up WebSocket fallback transports using HTTP streaming and SSE in Centrifuge-js client. This replaces the deprecated SockJS transport with Centrifugo's built-in bidirectional emulation layer.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst transports = [\n    {\n        transport: 'websocket',\n        endpoint: 'ws://localhost:8000/connection/websocket'\n    },\n    {\n        transport: 'http_stream',\n        endpoint: 'http://localhost:8000/connection/http_stream'\n    },\n    {\n        transport: 'sse',\n        endpoint: 'http://localhost:8000/connection/sse'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n```\n\n----------------------------------------\n\nTITLE: Getting Current Stream Position using Centrifugo History API\nDESCRIPTION: Shows how to use the Centrifugo history API call with `limit: 0` to retrieve the current top offset and epoch of a channel's history stream without retrieving any publications. The `since` parameter is null, and `reverse` is false.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/history_and_recovery.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 0, since: null, reverse: false)\n```\n\n----------------------------------------\n\nTITLE: Publishing Real-time Server Time with Centrifugo API in JavaScript\nDESCRIPTION: This snippet periodically publishes the current server time to a specified user's personal channel on Centrifugo by sending POST requests using the axios HTTP client configured for Centrifugo's API endpoint. Dependencies include the axios library and a valid Centrifugo API key. Key parameters are the API base URL, authorization token, target channel (constructed from the username), and the timestamp payload. The interval is set to 5 seconds. The function logs errors if the HTTP request fails; otherwise, updates are silently published. The snippet assumes the NodeJS runtime environment and the presence of 'myusername' in scope.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-10-18-integrating-with-nodejs.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifugoApiClient = axios.create({\n  baseURL: `http://centrifugo:8000/api`,\n  headers: {\n    Authorization: `apikey my_api_key`,\n    'Content-Type': 'application/json',\n  },\n});\n\nsetInterval(async () => {\n  try {\n    await centrifugoApiClient.post('', {\n      method: 'publish',\n      params: {\n        channel: '#' + myusername, // construct personal channel name.\n        data: {\n          time: Math.floor(new Date().getTime() / 1000),\n        },\n      },\n    });\n  } catch (e) {\n    console.error(e.message);\n  }\n}, 5000);\n```\n\n----------------------------------------\n\nTITLE: RPC Call in JavaScript\nDESCRIPTION: Example of making an RPC call from the client to the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await centrifuge.rpc('my_method', {});\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification via Centrifugo PRO API using cURL\nDESCRIPTION: Demonstrates sending a push notification using the Centrifugo PRO `/api/send_push_notification` endpoint with `curl`. This example targets devices subscribed to the 'test' topic via a filter and includes a basic FCM notification payload with a title and body. Requires a running Centrifugo instance accessible at `http://localhost:8000` and a valid API key for the Authorization header.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/push_notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/api/send_push_notification \\\n-H \"Authorization: apikey <KEY>\" \\\n-d @- <<'EOF'\n\n{\n    \"recipient\": {\n        \"filter\": {\n            \"topics\": [\"test\"]\n        }\n    },\n    \"notification\": {\n        \"fcm\": {\n            \"message\": {\n                \"notification\": {\"title\": \"Hello\", \"body\": \"How are you?\"}\n            }\n        }\n    }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Lifecycle Events in Javascript\nDESCRIPTION: This snippet shows how to register event handlers for 'connect' and 'disconnect' events on the Centrifuge client instance. These handlers receive context objects (`connectCtx`, `disconnectCtx`) with event details and allow the application to react to changes in the connection state.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.on('connect', function(connectCtx){\n    console.log('connected', connectCtx)\n});\n\ncentrifuge.on('disconnect', function(disconnectCtx){\n    console.log('disconnected', disconnectCtx)\n});\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token (Bash)\nDESCRIPTION: Command to generate a JWT token for authentication using Centrifugo's gentoken subcommand.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/quickstart.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo gentoken -u 123722\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing User from Room Topic on Leave (Python)\nDESCRIPTION: Illustrates calling the `update_user_room_topic` method with the operation 'remove' when a user leaves a chat room. This triggers the CDC mechanism to unsubscribe the user from the corresponding push notification topic in Centrifugo. Assumes `self` is an instance of a view/class containing the method, `request.user.pk` is the user ID, and `room_id` is the left room's ID.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.update_user_room_topic(request.user.pk, room_id, 'remove')\n```\n\n----------------------------------------\n\nTITLE: Querying All Operations Data in ClickHouse SQL\nDESCRIPTION: Example SQL query executed within the ClickHouse client to fetch all data (`SELECT *`) from the `centrifugo.operations` table. The sample output shows various recorded operations like connection attempts, successful connects, subscriptions, and presence requests, along with associated metadata like client ID, user, channel, and timing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n:) SELECT * FROM centrifugo.operations\n\n‚îå‚îÄclient‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄuser‚îÄ‚î¨‚îÄop‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄchannel‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄmethod‚îÄ‚î¨‚îÄerror‚îÄ‚î¨‚îÄdisconnect‚îÄ‚î¨‚îÄduration‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄtime‚îÄ‚îê\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ connecting  ‚îÇ             ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ   217894 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ connect     ‚îÇ             ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ        0 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ $chat:index ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ    92714 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ presence    ‚îÇ $chat:index ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ     3539 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ test1       ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ     2402 ‚îÇ 2021-07-31 08:15:12 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ test2       ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ      634 ‚îÇ 2021-07-31 08:15:12 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ test3       ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ      412 ‚îÇ 2021-07-31 08:15:12 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server\nDESCRIPTION: Command to start the Vite development server for the React application, making it available at http://localhost:5173/.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-03-31-keycloak-sso-centrifugo.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP-streaming Transport Fallback in Centrifugo JavaScript SDK - JavaScript\nDESCRIPTION: This code initializes the Centrifuge JavaScript SDK with a prioritized transport list, using WebSocket as the primary transport and HTTP-streaming as a fallback. It requires the Centrifuge SDK to be available in the environment, and endpoints must point to running Centrifugo server instances supporting these transports. The transport configuration objects specify the endpoint for both websockets and HTTP streaming, enabling seamless failover if the primary transport fails. Expected inputs are valid transport objects; no output is explicitly returned, but a successful connection will occur via the best available option. Ensure that the server supports both endpoints and that allowed origins are properly configured.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/http_stream.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst transports = [\n    {\n        transport: 'websocket',\n        endpoint: 'ws://localhost:8000/connection/websocket'\n    },\n    {\n        transport: 'http_stream',\n        endpoint: 'http://localhost:8000/connection/http_stream'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n\n```\n\n----------------------------------------\n\nTITLE: Creating a CDC Event Record in Django (Python)\nDESCRIPTION: Demonstrates how to create an instance of the `CDC` model within a Django application. It calculates a hash based on `room_id` to populate the `partition` field, which Debezium will use for Kafka partitioning. Creating this object within a database transaction ensures the event will eventually be captured by Debezium reading the WAL, sent to Kafka, and consumed by Centrifugo. The comment explains the trade-offs compared to polling an outbox table.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# In cdc case Debezium will use this field for setting Kafka partition.\n# We should not prepare proper partition ourselves in this case.\npartition = hash(room_id)\n# Creating outbox object inside transaction will guarantee that Centrifugo will\n# process the command at some point. In normal conditions ‚Äì almost instantly. In this\n# app Debezium will perform CDC and send outbox events to Kafka, event will be then\n# consumed by Centrifugo. The advantages here is that Debezium reads WAL changes and\n# has a negligible overhead on database performance. And most efficient partitioning.\n# The trade-off is that more hops add more real-time event delivery latency. May be\n# still instant enough though.\nCDC.objects.create(method='broadcast', payload=broadcast_payload, partition=partition)\n```\n\n----------------------------------------\n\nTITLE: Example Response for Batch Request in JSON\nDESCRIPTION: Sample JSON response from a batch API call, showing the results of multiple publish operations. This example includes both a successful publish and an error response for an unknown channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"replies\":[\n        {\"publish\":{}},\n        {\"error\":{\"code\":102,\"message\":\"unknown channel\"}}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Delegate in Swift\nDESCRIPTION: Demonstrates how to implement a subscription delegate to handle subscription events in Swift.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass SubscriptionDelegate : NSObject, CentrifugeSubscriptionDelegate {\n    func onSubscribing(_ s: CentrifugeSubscription, _ e: CentrifugeSubscribingEvent) {\n        print(\"subscribing\", e.code, e.reason)\n    }\n    func onSubscribed(_ s: CentrifugeSubscription, _ e: CentrifugeSubscribedEvent) {\n        print(\"subscribed\")\n    }\n    func onUnsubscribed(_ s: CentrifugeSubscription, _ e: CentrifugeUnsubscribedEvent) {\n        print(\"unsubscribed\", e.code, e.reason)\n    }\n}\n\ndo {\n    sub = try self.client?.newSubscription(channel: \"example\", delegate: SubscriptionDelegate())\n    sub!.subscribe()\n} catch {\n    print(\"Can not create subscription: \\(error)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Async Message Sending in JavaScript\nDESCRIPTION: Shows how to send direct messages to the server without using channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.send({\"input\": \"hello\"});\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect and Refresh Proxies in Granular Mode\nDESCRIPTION: This configuration shows how to reference specific proxies for connect and refresh operations. Once granular proxy mode is enabled, you need to explicitly specify which proxy configuration to use for each operation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [...],\n  \"connect_proxy_name\": \"connect\",\n  \"refresh_proxy_name\": \"refresh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Command to generate static website content in the build directory for production deployment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Default Unidirectional WebSocket Endpoint URL (Disabled)\nDESCRIPTION: This URL path is used for establishing unidirectional WebSocket connections. It is disabled by default in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:8000/connection/uni_websocket\n```\n\n----------------------------------------\n\nTITLE: Describing PushRecipient Object Options - Centrifugo - Markdown\nDESCRIPTION: This snippet documents the 'PushRecipient' object fields using a Markdown table within Centrifugo's notification schema reference. It lists the allowed fields developers may use to target devices, including FCM tokens, topics, and conditions, HMS tokens, topics, and conditions, APNs tokens, and a Centrifugo-specific device filter. The table clarifies that only one field should be set per request to define the recipient scope. This Markdown is meant for technical documentation with no runtime dependencies, serving as a quick lookup for valid recipient targeting options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n`PushRecipient` (you **must set only one of the following fields**):\n\n| Field           | Type            | Required | Description                                                  |\n|-----------------|-----------------|----------|--------------------------------------------------------------|\n| `filter`        | `DeviceFilter`  | No       | Send to device IDs based on Centrifugo device storage filter |\n| `fcm_tokens`    | `array[string]` | No       | Send to a list of FCM native tokens                          |\n| `fcm_topic`     | `string`        | No       | Send to a FCM native topic                                   |\n| `fcm_condition` | `string`        | No       | Send to a FCM native condition                               |\n| `hms_tokens`    | `array[string]` | No       | Send to a list of HMS native tokens                          |\n| `hms_topic`     | `string`        | No       | Send to a HMS native topic                                   |\n| `hms_condition` | `string`        | No       | Send to a HMS native condition                               |\n| `apns_tokens`   | `array[string]` | No       | Send to a list of APNs native tokens                         |\n\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL as Push Notification Queue Engine in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to configure Centrifugo PRO to use PostgreSQL as the queue engine for push notifications, instead of the default Redis Streams. It requires a PostgreSQL database connection specified in the `database` section and setting `push_notifications.queue_engine` to `\"database\"`. While functional, Redis Streams generally offers better performance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/push_notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"push_notifications\": {\n        \"queue_engine\": \"database\",\n        // rest of the options...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level URL Patterns in Django\nDESCRIPTION: This Python snippet defines the main URL patterns for the Django project in `app/urls.py`. It includes standard Django admin URLs, defines several API endpoints under the `/api/` prefix (for CSRF tokens, connection/subscription tokens, login, logout), and crucially, includes all URL patterns defined in the `chat` application's `urls.py` using `include('chat.urls')` under the `/api/` prefix. It also adds static file URL patterns using `staticfiles_urlpatterns`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\nfrom . import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/csrf/', views.get_csrf, name='api-csrf'),\n    path('api/token/connection/', views.get_connection_token, name='api-connection-token'),\n    path('api/token/subscription/', views.get_subscription_token, name='api-subscription-token'),\n    path('api/login/', views.login_view, name='api-login'),\n    path('api/logout/', views.logout_view, name='api-logout'),\n    path('api/', include('chat.urls')),\n]\n\nurlpatterns += staticfiles_urlpatterns()\n```\n\n----------------------------------------\n\nTITLE: Enabling Centrifugo HTTP Publish Proxy for a Namespace (JSON)\nDESCRIPTION: This configuration snippet demonstrates enabling the HTTP publish proxy specifically for channels within the 'sun' namespace. It requires setting the global `proxy_publish_endpoint` and `proxy_publish_timeout`, and then enabling both `publish` and `proxy_publish` within the 'sun' namespace definition.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_publish_endpoint\": \"http://localhost:3000/centrifugo/publish\",\n  \"proxy_publish_timeout\":  \"1s\",\n  \"namespaces\": [{\n    \"name\": \"sun\",\n    \"publish\": true,\n    \"proxy_publish\": true\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT for User Authentication in Centrifugo using Bash\nDESCRIPTION: This command generates an HMAC SHA-256 JSON Web Token (JWT) for a specific user (ID 42 in this example). This token is used to authenticate the user when establishing a connection to the Centrifugo server. The output shows the generated token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/connections.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ centrifugo gentoken -u 42\nHMAC SHA-256 JWT for user 42 with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0MiIsImV4cCI6MTYyNzcxMzMzNX0.s3eOhujiyBjc4u21nuHkbcWJll4Um0QqGU3PF-6Mf7Y\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Error from Backend via Centrifugo Proxy in JSON\nDESCRIPTION: This JSON structure demonstrates how an application backend can respond to a Centrifugo proxy request (connect, subscribe, publish, rpc) with a custom error. By including an `error` object with a specific `code` (must be between 400 and 1999) and `message`, the backend can signal an error condition back to the client through Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": 1000,\n    \"message\": \"custom error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Centrifugo Connect HTTP Handler in Tornado (Python)\nDESCRIPTION: Demonstrates how to implement a Centrifugo connect handler endpoint in Python with the Tornado web framework. This HTTP handler accepts POST requests, disables default XSRF checking, and returns a minimal JSON reply with a hardcoded user ID. Prerequisites include installing tornado and ensuring the handler is mapped to the correct endpoint. Input requests are expected from Centrifugo proxy configuration, and output is a JSON document identifying the user; further authentication, validation, or extension would be required for production systems.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass CentrifugoConnectHandler(tornado.web.RequestHandler):\n\n    def check_xsrf_cookie(self):\n        pass\n\n    def post(self):\n        self.set_header('Content-Type', 'application/json; charset=\"utf-8\"')\n        data = json.dumps({\n            'result': {\n                'user': '56'\n            }\n        })\n        self.write(data)\n\n\ndef main():\n    options.parse_command_line()\n    app = tornado.web.Application([\n      (r'/centrifugo/connect', CentrifugoConnectHandler),\n    ])\n    app.listen(3000)\n    tornado.ioloop.IOLoop.instance().start()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Batching Broadcast Creation for Centrifugo via Django ORM in Python\nDESCRIPTION: This Python snippet demonstrates batching channels into fixed-size groups (here, 1000) and constructing CDC (Change Data Capture) objects for broadcast in a scalable Centrifugo-based system. It depends on Django's ORM, Python's itertools, and a CDC model, requiring 'channels', 'serializer', and 'CDC' context. Each batch is packaged as a distinct payload with an idempotency key and partition index, and all are bulk-inserted into the database with CDC.objects.bulk_create() for efficiency. Inputs are a list of channels and serialized data, and the output is multiple CDC rows for downstream processing. Limitation: partitioning is not stable, possibly causing message order issues.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/scale.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom itertools import islice\n\n\ndef chunks(xs, n):\n    n = max(1, n)\n    iterator = iter(xs)\n    return iter(lambda: list(islice(iterator, n)), [])\n\n\nchannel_batches = chunks(channels, 1000)\ncdc_objects = []\ni = 0\nfor batch in channel_batches:\n    broadcast_payload = {\n        'channels': batch,\n        'data': {\n            'type': 'message_added',\n            'body': serializer.data\n        },\n        'idempotency_key': f'message_{serializer.data[\"id\"]}'\n    }\n    cdc_objects.append(CDC(method='broadcast', payload=broadcast_payload, partition=i))\n    i+=1\n\nCDC.objects.bulk_create(cdc_objects)\n\n```\n\n----------------------------------------\n\nTITLE: Subscribe Proxy Request Payload Example\nDESCRIPTION: Example of the JSON payload sent from Centrifugo to the backend application during a subscribe proxy request. Contains client information and the channel the client wants to subscribe to.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"channel\": \"chat:index\"\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Room Events via Centrifugo HTTP API (Python)\nDESCRIPTION: This snippet defines Django views and mixins to broadcast chat room events to all room members using Centrifugo's HTTP API after successful database commits. It relies on the requests library for HTTP calls, Django ORM for querying memberships, and uses transaction.on_commit to ensure real-time events align with committed state. The payload includes unique idempotency keys and event typing for extensibility. Requires Centrifugo running with an API key, associated Django models (Room, RoomMember), DRF views/serializers, and requests library installed. Inputs depend on room and user contexts; expects proper error handling and network reliability.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nfrom django.conf import settings\n\n\nclass CentrifugoMixin:\n    # A helper method to return the list of channels for all current members of specific room.\n    # So that the change in the room may be broadcasted to all the members.\n    def get_room_member_channels(self, room_id):\n        members = RoomMember.objects.filter(room_id=room_id).values_list('user', flat=True)\n        return [f'personal:{user_id}' for user_id in members]\n\n    def broadcast_room(self, room_id, broadcast_payload):\n        # Using Centrifugo HTTP API is the simplest way to send real-time message, and usually\n        # it provides the best latency. The trade-off here is that error here may result in\n        # lost real-time event. Depending on the application requirements this may be fine or not.  \n        def broadcast():\n            session = requests.Session()\n            retries = Retry(total=1, backoff_factor=1, status_forcelist=[500, 502, 503, 504])\n            session.mount('http://', HTTPAdapter(max_retries=retries))\n            try:\n                session.post(\n                    \"http://centrifugo:8000/api/broadcast\",\n                    data=json.dumps(broadcast_payload),\n                    headers={\n                        'Content-type': 'application/json', \n                        'X-API-Key': settings.CENTRIFUGO_HTTP_API_KEY,\n                        'X-Centrifugo-Error-Mode': 'transport'\n                    }\n                )\n            except requests.exceptions.RequestException as e:\n                logging.error(e)\n\n        # We need to use on_commit here to not send notification to Centrifugo before\n        # changes applied to the database. Since we are inside transaction.atomic block\n        # broadcast will happen only after successful transaction commit.\n        transaction.on_commit(broadcast)\n\n\nclass MessageListCreateAPIView(ListCreateAPIView, CentrifugoMixin):\n    # Same as before\n\n    @transaction.atomic\n    def create(self, request, *args, **kwargs):\n        room_id = self.kwargs['room_id']\n        room = Room.objects.select_for_update().get(id=room_id)\n        room.increment_version()\n        channels = self.get_room_member_channels(room_id)\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        obj = serializer.save(room=room, user=request.user)\n        room.last_message = obj\n        room.save()\n\n        # This is where we add code to broadcast over Centrifugo API.\n        broadcast_payload = {\n            'channels': channels,\n            'data': {\n                'type': 'message_added',\n                'body': serializer.data\n            },\n            'idempotency_key': f'message_{serializer.data[\"id\"]}'\n        }\n        self.broadcast_room(room_id, broadcast_payload)\n        \n        headers = self.get_success_headers(serializer.data)\n        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry in Centrifugo Configuration (JSON)\nDESCRIPTION: This JSON configuration snippet enables OpenTelemetry tracing in Centrifugo by setting the \"opentelemetry\" object with \"enabled\" and \"api\" set to true. To use, add this object to the Centrifugo configuration file. Required for any OTLP trace export. Key parameters: \"enabled\" (activates OpenTelemetry), \"api\" (enables tracing on API). The configuration must be accompanied by proper environment variables and an OpenTelemetry-compatible backend such as Jaeger.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/observability.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"opentelemetry\\\": {\\n    \\\"enabled\\\": true,\\n    \\\"api\\\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Publications from Stream Beginning in Channel History in Javascript\nDESCRIPTION: This snippet shows how to fetch up to 10 publications from the beginning of the channel's history stream using the `history()` method with the `limit` option on a `Subscription` object. Requires channel history to be configured on the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history({limit: 10});\nconsole.log(resp.publications);\n```\n\n----------------------------------------\n\nTITLE: Enabling Sub Refresh Proxy for a Specific Namespace\nDESCRIPTION: Configuration for enabling subscription refresh proxy for channels in a specific namespace ('sun'). This allows controlling which channel namespaces use the proxy feature.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_sub_refresh_endpoint\": \"http://localhost:3000/centrifugo/sub_refresh\",\n  \"namespaces\": [{\n    \"name\": \"sun\",\n    \"proxy_sub_refresh\": true\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Both Custom Broker and Presence Manager to a Namespace\nDESCRIPTION: This configuration shows how to simultaneously assign both a custom Nats broker and a Redis presence manager to a specific channel namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/namespace_engines.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"rates\",\n        \"broker_name\": \"mycustomnats\",\n        \"presence_manager_name\": \"mycustomredis\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Namespaces via Environment Variables\nDESCRIPTION: Example of setting Centrifugo namespaces through environment variables using JSON string format.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nCENTRIFUGO_NAMESPACES='[{\"name\": \"ns1\"}, {\"name\": \"ns2\"}]' ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Config File (TOML) via Command Line (Bash)\nDESCRIPTION: Runs Centrifugo with a TOML-formatted configuration file using the --config flag. Requires config.toml to be present in the working directory and the Centrifugo binary available. Input: config.toml. Output: Centrifugo server launched with TOML-based configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.toml\n```\n\n----------------------------------------\n\nTITLE: Generating Expiring HS256 JWT for Centrifugo in NodeJS\nDESCRIPTION: Shows how to create an HS256 JWT in NodeJS with a 5-minute expiration using the 'jsonwebtoken' package. Inputs: subject claim ('sub'), secret, expiry in seconds. Output: JWT string for client authentication. Inputs are passed to the 'jwt.sign' method along with the expiresIn option for token validity.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar jwt = require('jsonwebtoken');\n\nvar token = jwt.sign({ sub: '42' }, 'secret', { expiresIn: 5 * 60 });\n\nconsole.log(token);\n```\n\n----------------------------------------\n\nTITLE: Removing Rooms from State with Reducer in React (JavaScript)\nDESCRIPTION: This action removes a specified room by ID from the chat state, useful when a user leaves a room or receives a leave event. Instead of deleting the room, it sets its mapping to null (to sync membership state), removes its ID from the main rooms array, and removes all associated messages. Requires correct usage of roomId payload and is called within a Redux/React reducer context.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncase 'DELETE_ROOM': {\n  const roomId = action.payload.roomId;\n\n  // Set the specified room to null instead of deleting it.\n  const newRoomsById = {\n    ...state.roomsById,\n    [roomId]: null // On delete we set roomId to null. This allows to sync membership state of rooms on ChatSearch screen.\n  };\n\n  // Remove the room from the rooms array.\n  const newRooms = state.rooms.filter((id: any) => id !== roomId);\n\n  // Remove associated messages.\n  const { [roomId]: deletedMessages, ...newMessagesByRoomId } = state.messagesByRoomId;\n\n  return {\n    ...state,\n    roomsById: newRoomsById,\n    rooms: newRooms,\n    messagesByRoomId: newMessagesByRoomId\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tokenless Client Connection Flow with Centrifugo - swimlanes.io Diagram\nDESCRIPTION: This swimlanes.io code displays a sequence where a client connects to Centrifugo without JWT. The connection is validated by the backend before Centrifugo establishes a persistent connection. Use this with swimlanes.io tools for rendering. Actors: Client, App backend, Centrifugo. The backend responds to Centrifugo with user credentials via HTTP or GRPC.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/flow_diagrams.md#2025-04-23_snippet_1\n\nLANGUAGE: swimlanes.io\nCODE:\n```\nClient -> Centrifugo: Connect request\n\nnote:\nClient connects to Centrifugo without JWT.\n\nCentrifugo -> App backend: Sends request further (via HTTP or GRPC)\n\nnote: The application backend validates client connection and tells Centrifugo user credentials in Connect reply.\n\nApp backend -> Centrifugo: Connect reply\n\nCentrifugo -> Client: Connect Reply\n\n...: {fas-spinner} Persistent connection established\n```\n\n----------------------------------------\n\nTITLE: Enabling Delta Compression for All Publications in Namespace - Centrifugo Server - JSON\nDESCRIPTION: This JSON configuration extends the earlier namespace setup by enabling 'delta_publish', causing all publications in the specified namespace to use delta compression automatically. Clients capable of delta decoding will receive only the difference between messages. The configuration requires Centrifugo server v5.4.0 or newer and must be placed in the server's main configuration file. The primary parameters are 'allowed_delta_types', 'delta_publish', and required history options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/delta_compression.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ..\n    \"namespaces\": [\n        {\n            \"name\": \"example\",\n            \"allowed_delta_types\": [\"fossil\"],\n            \"force_positioning\": true,\n            \"history_size\": 1,\n            \"history_ttl\": \"60s\",\n            \"delta_publish\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Proxy Success Result Example - JSON\nDESCRIPTION: Minimal expected response from backend allowing the publish request to proceed. A success is indicated by an empty \\\\\"result\\\\\" object. Backend may choose to include data inside result to replace client data, but this is the simplest valid response structure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {}}\n```\n\n----------------------------------------\n\nTITLE: Reloading Centrifugo Configuration via Signal (Bash)\nDESCRIPTION: Sends the HUP signal to a running Centrifugo process (identified by `<PID>`) to trigger a partial configuration reload. Currently, this reloads only token secrets and channel options (top-level and namespaces), not the entire configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nkill -HUP <PID>\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Config File via CLI (bash)\nDESCRIPTION: This command invokes the Centrifugo CLI to generate a default configuration file (config.json). Requires Centrifugo installed and accessible via PATH. No input parameters are accepted; output is a base configuration file in the current directory. Used to bootstrap configuration for further edits such as enabling HTTP streaming.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_http_stream.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Configuration File (Shell)\nDESCRIPTION: This command starts the Centrifugo server, instructing it to load its configuration settings from the specified `config.json` file. This approach is used for applying configurations like Redis Sentinel integration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Project for Centrifugo GRPC Client - Bash\nDESCRIPTION: Outlines the set of bash commands to create a Go module, download Centrifugo\\'s Protobuf schema, and generate GRPC stubs in Go. Requires protoc, Go tools, and network access. Inputs are standard CLI commands; output is a ready-to-use Go project structure with generated client code.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nmkdir centrifugo_grpc_example\ncd centrifugo_grpc_example/\ntouch main.go\ngo mod init centrifugo_example\nmkdir apiproto\ncd apiproto\nwget https://raw.githubusercontent.com/centrifugal/centrifugo/master/internal/apiproto/api.proto -O api.proto\n```\n\n----------------------------------------\n\nTITLE: Configuring Haproxy for Redis Master Balancing - HAProxy\nDESCRIPTION: Provides a HAProxy configuration block for balancing Centrifugo traffic to a Redis master. Checks the master role, expects Redis RESP, configures server health checks and balanced connections. Input: HAProxy configuration file. Output: HAProxy instance that can be targeted from Centrifugo for Redis connectivity. Limitation: HAProxy config must be adapted to real cluster addresses and may require tuning.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_9\n\nLANGUAGE: haproxy\nCODE:\n```\nlisten redis\n    server redis-01 127.0.0.1:6380 check port 6380 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2\n    server redis-02 127.0.0.1:6381 check port 6381 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2 backup\n    bind *:16379\n    mode tcp\n    option tcpka\n    option tcplog\n    option tcp-check\n    tcp-check send PING\\r\\n\n    tcp-check expect string +PONG\n    tcp-check send info\\ replication\\r\\n\n    tcp-check expect string role:master\n    tcp-check send QUIT\\r\\n\n    tcp-check expect string +OK\n    balance roundrobin\n```\n\n----------------------------------------\n\nTITLE: Enabling Bidirectional Subscription Streams in Centrifugo\nDESCRIPTION: JSON configuration for enabling bidirectional subscription streams in a Centrifugo namespace. This extends the unidirectional configuration by adding the bidirectional flag.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy_streams.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_stream_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_subscribe_stream_timeout\": \"3s\",\n  \"namespaces\": [\n    {\n        \"name\": \"streams\",\n        \"proxy_subscribe_stream\": true,\n        \"proxy_subscribe_stream_bidirectional\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing a Specific Domain Origin for Client Connections (JSON)\nDESCRIPTION: This JSON snippet shows how to set `client.allowed_origins` in Centrifugo's `config.json` to explicitly allow WebSocket connections and CORS requests originating from `https://example.com`. This setting enhances security by restricting connections to known and trusted origins.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"client\": {\n    \"allowed_origins\": [\n      \"https://example.com\"\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic TLS (Let's Encrypt) in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet configures Centrifugo for automatic TLS certificate handling using Let's Encrypt (ACME). `tls_autocert` enables the feature. `tls_autocert_host_whitelist` specifies allowed domains. `tls_autocert_cache_dir` sets a cache location for certificates. `tls_autocert_email` provides an email for notifications. `tls_autocert_http` enables the HTTP-01 challenge, and `tls_autocert_http_addr` specifies the address for this challenge.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/tls.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"tls_autocert\": true,\n  \"tls_autocert_host_whitelist\": \"www.example.com\",\n  \"tls_autocert_cache_dir\": \"/tmp/certs\",\n  \"tls_autocert_email\": \"user@example.com\",\n  \"tls_autocert_http\": true,\n  \"tls_autocert_http_addr\": \":80\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: HAProxy Configuration for Redis Sentinel\nDESCRIPTION: An HAProxy configuration example that serves as a proxy between application and Redis, automatically detecting and routing traffic to the Redis master in a Sentinel setup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlisten redis\n    server redis-01 127.0.0.1:6380 check port 6380 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2 on-marked-down shutdown-sessions on-marked-up shutdown-backup-sessions\n    server redis-02 127.0.0.1:6381 check port 6381 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2 backup\n    bind *:6379\n    mode tcp\n    option tcpka\n    option tcplog\n    option tcp-check\n    tcp-check send PING\\r\\n\n    tcp-check expect string +PONG\n    tcp-check send info\\ replication\\r\\n\n    tcp-check expect string role:master\n    tcp-check send QUIT\\r\\n\n    tcp-check expect string +OK\n    balance roundrobin\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP/2 in Centrifugo Server\nDESCRIPTION: Command to disable HTTP/2 support in Centrifugo server using GODEBUG environment variable. This setting affects the built-in Go HTTP server implementation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/faq/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGODEBUG=\"http2server=0\" centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Creating Distributed Publications Table in ClickHouse (SQL)\nDESCRIPTION: Describes the distributed variant of the 'publications' table, enabling the sharding of data across multiple ClickHouse cluster nodes. The ENGINE = Distributed uses murmurHash3_64(channel) for partitioning. Proper setup requires the referenced 'centrifugo_cluster' and correct remote table ('publications') on cluster nodes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE centrifugo.publications_distributed;\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.operations_distributed\n(\n    `channel` String,\n    `source` String,\n    `size` UInt64,\n    `client` String,\n    `user` String,\n    `time` DateTime\n)\nENGINE = Distributed('centrifugo_cluster', 'centrifugo', 'publications', murmurHash3_64(channel)) ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo PRO via DEB Package on Debian/Ubuntu - shell\nDESCRIPTION: Installs Centrifugo PRO on Debian or Ubuntu systems by downloading the DEB package and using dpkg to install it. Dependencies: wget, sudo, dpkg, compatible OS. Inputs are package URL and filename. Outputs: installed centrifugo-pro binary; Limitation: must run on compatible Debian/Ubuntu system.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/install_and_run.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/centrifugal/centrifugo-pro/releases/download/v5.4.2/centrifugo-pro_5.4.2-0_amd64.deb\nsudo dpkg -i centrifugo-pro_5.4.2-0_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Forcing Join/Leave Messages via Server Configuration (JSON)\nDESCRIPTION: This JSON configuration snippet, part of Centrifugal namespace options, forces the server to push join/leave messages to all channel subscribers within that namespace. Setting this option to 'true' overrides client preferences and ensures all clients receive these notifications.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channel_permissions.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"force_push_join_leave\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins for a Different Domain (JSON Array Syntax)\nDESCRIPTION: Similar to the previous snippet, this sets allowed_origins for a different domain in the JSON configuration. Intended to show how to switch between domains. Inputs: desired origin URL. Output: updated config with correct origin.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\n    \"https://example.com\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo GRPC RPC Proxy Endpoint (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to configure the RPC Proxy to use GRPC. By setting `proxy_rpc_endpoint` with a `grpc://` address, client RPC calls will be forwarded to the backend GRPC service for processing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_rpc_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_rpc_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Unidirectional SSE Transport (JSON)\nDESCRIPTION: Centrifugo configuration snippet in JSON format to enable the unidirectional Server-Sent Events (SSE) transport. Setting `enabled` to `true` within the `uni_sse` object activates this transport.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uni_sse\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Client Message in Go\nDESCRIPTION: Demonstrates sending a direct message to a client from the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nclient.Send([]byte(`{\"input\": \"hello\"}`))\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 110 (Expired)\nDESCRIPTION: Defines the 'Expired' error code (110) indicating that the connection itself has expired, not necessarily due to token expiration but potentially other configured time limits.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nCode:    110\nMessage: \"expired\"\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3000 (Connection Closed)\nDESCRIPTION: Represents a client disconnection where the reason is unknown to the server (code 3000, \"connection closed\"). This is used internally when a connection closes without a specific server-sent disconnect reason, covering clean client disconnects or network interruptions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nCode: 3000\nReason: \"connection closed\"\n```\n\n----------------------------------------\n\nTITLE: Running ClickHouse Server with Docker (Bash)\nDESCRIPTION: Example for launching a ClickHouse server locally using Docker. The command starts a container, exposes port 9000, and stores data on a local host volume (/tmp/clickhouse). No dependencies beyond Docker itself; makes a fresh ClickHouse server available for development and test purposes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v /tmp/clickhouse:/var/lib/clickhouse -p 9000:9000 --name click clickhouse/clickhouse-server\n```\n\n----------------------------------------\n\nTITLE: Limiting Connection Count in Go WebSocket Server\nDESCRIPTION: A code snippet that demonstrates how to implement a connection limit check before adding a new WebSocket connection, setting the limit slightly below the system's file descriptor limit to ensure the system remains accessible for debugging.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-11-12-scaling-websocket.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// ulimit -n == 65535\nif conns.Len() >= 65500 {\n    return errors.New(\"connection limit reached\")\n}\nconns.Add(conn)\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics in Centrifugo Configuration (JSON)\nDESCRIPTION: This JSON configuration snippet for Centrifugo enables the Prometheus metrics endpoint by setting the 'enabled' property to true under the 'prometheus' key. Requires Centrifugo server with built-in Prometheus support. Input is configuration JSON; output is Centrifugo exposing /metrics endpoint for Prometheus to scrape.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/monitoring.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"prometheus\": {\n        \"enabled\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling update_user_status RPC from Centrifugo Client API in JavaScript\nDESCRIPTION: This snippet demonstrates how to invoke the built-in update_user_status RPC method from the Centrifugo client using JavaScript, indicating recent user activity. Dependencies include a connected Centrifugo client (centrifuge). The code should be executed whenever the client detects meaningful user actions, and should employ debouncing to avoid frequent RPC calls. Input is an empty parameter object; output is a confirmation or acknowledgment from the Centrifugo server. Properly handles client API integration but not designed for direct backend use.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_status.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait centrifuge.rpc('update_user_status', {});\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo PRO RPM Package on CentOS (Shell)\nDESCRIPTION: These shell commands provide instructions for installing Centrifugo PRO on CentOS systems. The `wget` command downloads the specific version RPM package from GitHub releases. The `yum install` command, executed with `sudo` privileges, installs the downloaded RPM package and its dependencies.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/install_and_run.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/centrifugal/centrifugo-pro/releases/download/v3.2.2/centrifugo-pro-3.2.2-0.x86_64.rpm\nsudo yum install centrifugo-pro-3.2.2-0.x86_64.rpm\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Write Delay in Centrifugo\nDESCRIPTION: Configuration example showing how to set client_write_delay option to 100ms in Centrifugo. This setting introduces a delay in message delivery to collect messages into larger batches, reducing CPU usage at the cost of increased latency.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/client_msg_batching.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // Rest of config here ...\n    \"client_write_delay\": \"100ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Namespace for History and Recovery (JSON)\nDESCRIPTION: Updates the Centrifugo configuration file to enable automatic message recovery for the 'personal' namespace. It sets the history size (`history_size`), history time-to-live (`history_ttl`), and enables forced recovery (`force_recovery`) to allow clients to automatically retrieve missed messages after brief disconnections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/recovery.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"namespaces\": [{\n        \"name\": \"personal\",\n        \"history_size\": 300,\n        \"history_ttl\": \"600s\",\n        \"force_recovery\": true\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HMS Push Notifications in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet demonstrates the configuration for Huawei Mobile Services (HMS) push notifications in Centrifugo. It includes setting the PostgreSQL database DSN, Redis address (for Centrifugo PRO), enabling 'hms' in `enabled_providers`, and specifying the HMS App ID and App Secret.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/push_notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"push_notifications\": {\n        \"redis_address\": \"localhost:6379\",\n        \"enabled_providers\": [\"hms\"],\n        \"hms_app_id\": \"<your_app_id>\",\n        \"hms_app_secret\": \"<your_app_secret>\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CentrifugoProxy GRPC Service Contract for Unidirectional Streams (Proto/Go-like)\nDESCRIPTION: This service declaration illustrates the expected GRPC contract for the backend CentrifugoProxy streaming service with unidirectional subscription streams. The 'SubscribeUnidirectional' RPC method receives a 'SubscribeRequest' and returns a stream of 'StreamSubscribeResponse's. Any backend implementing Centrifugo subscription streams for proxying must implement this interface, typically generated from Protobuf definitions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy_streams.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nservice CentrifugoProxy {\n  ...\n  // SubscribeUnidirectional allows handling unidirectional subscription streams.\n  rpc SubscribeUnidirectional(SubscribeRequest) returns (stream StreamSubscribeResponse);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Subscribe Proxy for Global Channels\nDESCRIPTION: Configuration for enabling GRPC-based subscribe proxy for all channels without namespaces. This allows validating subscriptions to these channels via a GRPC call to the backend.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_subscribe_timeout\":  \"1s\",\n  \"proxy_subscribe\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Publish and Subscribe Proxies Per Namespace - JSON\nDESCRIPTION: Provides an example of per-namespace assignment for subscribe and publish proxies in Centrifugo's granular proxy mode. For each namespace in the \"namespaces\" array, \"subscribe_proxy_name\" and \"publish_proxy_name\" are set to reference specific proxies. This allows distinct routing logic for events by namespace. Input is an array of namespace objects referencing proxies; output is event traffic routing per namespace configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [...],\n  \"namespaces\": [\n    {\n      \"name\": \"ns1\",\n      \"subscribe_proxy_name\": \"subscribe1\",\n      \"publish\": true,\n      \"publish_proxy_name\": \"publish1\"\n    },\n    {\n      \"name\": \"ns2\",\n      \"subscribe_proxy_name\": \"subscribe2\",\n      \"publish\": true,\n      \"publish_proxy_name\": \"publish2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Engine Reuse for Rate Limiting in Centrifugo\nDESCRIPTION: Configuration example showing how to reuse existing Redis engine configuration for rate limiting instead of declaring separate Redis settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/rate_limiting.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"redis\": {\n      \"address\": \"localhost:6379\"\n    },\n    \"type\": \"redis\"\n  },\n  \"client\": {\n    \"rate_limit\": {\n      \"redis_user_command\": {\n        \"enabled\": true,\n        \"redis\": {\n          \"reuse_from_engine\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Successful Rate Limit API Response\nDESCRIPTION: This JSON snippet shows an example successful response from the Centrifugo rate limit API. The `allowed` field is `true`, indicating the action is permitted, and `tokens_left` shows the remaining 9 tokens in the bucket for the specified interval.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/distributed_rate_limit.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"allowed\": true,\n        \"tokens_left\": 9\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Status via Server API using cURL\nDESCRIPTION: This cURL command shows how to update user status through the Centrifugo server API. It allows updating status for multiple users in a single request.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_status.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"update_user_status\", \"params\": {\"users\": [\"42\"]}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Write Delay in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `client_write_delay` option within the Centrifugo configuration file (`config.json`). Setting this duration (e.g., \"100ms\") instructs Centrifugo to collect messages for that period before sending them to a connection, potentially reducing system calls and CPU usage at the cost of slight delivery latency. This is effective for connections receiving a high rate of messages.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/client_msg_batching.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    // Rest of config here ...\n    \"client_write_delay\": \"100ms\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Group-Based Access Control for Centrifugo Admin UI\nDESCRIPTION: JSON configuration snippet showing how to use CEL expressions to restrict access to Centrifugo admin UI based on user group membership. This example checks if the user belongs to the 'centrifugo_admins' group in their token claims.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/admin_idp_auth.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"admin\": {\n    ...\n    \"oidc\": {\n      ...\n      \"access_cel\": \"'centrifugo_admins' in claims.groups\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Too Many Errors Disconnect Code\nDESCRIPTION: Disconnect code issued when a client generates an excessive number of errors.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_36\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3509\nReason: \"too many errors\"\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 110 (Expired)\nDESCRIPTION: Defines the client error code 110, indicating the connection itself has \"expired\" (not related to a connection token).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    110\nMessage: \"expired\"\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Terminal): Not Available (3508)\nDESCRIPTION: Used when an operation is attempted that is fundamentally unavailable or not configured, and a simple error reply (like 108) isn't suitable (e.g., client sending an async message when no server-side handler is set). Reconnection won't resolve this.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3508\nReason: \"not available\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Join/Leave Events in Centrifugo Namespace - JSON\nDESCRIPTION: This JSON configuration enables real-time join and leave events within a Centrifugo channel namespace. By setting 'presence', 'join_leave', and 'force_push_join_leave' to true, the server will emit join/leave events to all channel subscribers regardless of local subscriptions. Dependencies are the Centrifugo server; the fields configured here must be present for events to function.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/presence.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"public\",\n        \"presence\": true,\n        \"join_leave\": true,\n        \"force_push_join_leave\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with a Configuration File (Shell)\nDESCRIPTION: Demonstrates the shell command to start the Centrifugo server. The `./centrifugo` command executes the server binary, and the `-c config.json` flag directs it to load settings from the specified `config.json` file, which should contain the necessary configurations like enabling `uni_websocket`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_websocket.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```\n./centrifugo -c config.json\n```\n```\n\n----------------------------------------\n\nTITLE: Default Unidirectional SSE Endpoint URL (Disabled) - Repeated\nDESCRIPTION: This URL path is for unidirectional communication using Server-Sent Events (SSE)/EventSource. This endpoint is mentioned again and is disabled by default.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:8000/connection/uni_sse\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Outbox Consumer - JSON\nDESCRIPTION: Presents a JSON snippet for the Centrifugo server configuration, enabling consumption of events from a PostgreSQL outbox table. Required for routing messages from outbox entries to Centrifugo for delivery to clients. Dependencies: Centrifugo server (>=v4.0), access to a running PostgreSQL database, and corresponding outbox table structure. Key parameters include 'dsn', 'outbox_table_name', number of partitions, poll interval, and partition notification channel for real-time event delivery. The configuration must be included in Centrifugo's config file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"consumers\": [\n    {\n      \"name\": \"postgresql\",\n      \"type\": \"postgresql\",\n      \"postgresql\": {\n        \"dsn\": \"postgresql://grandchat:grandchat@db:5432/grandchat\",\n        \"outbox_table_name\": \"chat_outbox\",\n        \"num_partitions\": 1,\n        \"partition_select_limit\": 100,\n        \"partition_poll_interval\": \"300ms\",\n        \"partition_notification_channel\": \"centrifugo_partition_change\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Centrifugo to Haproxy for Redis\nDESCRIPTION: Command to start Centrifugo with a connection to Haproxy which manages Redis connections. This simplified configuration lets Haproxy handle Redis master discovery and failover.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json --engine=redis --redis_address=\"localhost:16379\"\n```\n\n----------------------------------------\n\nTITLE: Unblocking a User via Centrifugo API (Bash/cURL)\nDESCRIPTION: This cURL command shows how to use the Centrifugo `unblock_user` API endpoint to remove a block for a specific user. It sends a POST request with a JSON payload containing the `user` ID to unblock. Requires a valid `X-API-Key` header for authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_block.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"user\": \"2695\"}' \\\n  http://localhost:8000/api/unblock_user\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring FCM Push Notifications in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable Firebase Cloud Messaging (FCM) push notifications in Centrifugo. It requires a PostgreSQL database connection (optional for basic proxying), a Redis instance for queuing notification requests, and the path to the FCM service account credentials file. The `enabled_providers` array must include `fcm`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/push_notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"push_notifications\": {\n        \"redis_address\": \"localhost:6379\",\n        \"enabled_providers\": [\"fcm\"],\n        \"fcm_credentials_file_path\": \"/path/to/service/account/credentials.json\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side User-Limited Channel Subscription\nDESCRIPTION: JavaScript code showing how to subscribe to a user-limited channel in the personal namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sub = centrifuge.newSubscription('personal:#17');\nsub.on('publication', function(ctx) {\n    console.log(ctx.data);\n})\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing a User from a Channel via Centrifugo API - JSON\nDESCRIPTION: This JSON snippet shows how to construct an 'unsubscribe' command for Centrifugo's HTTP API. The 'params' must include the target 'channel' and 'user' to unsubscribe. This structure is used as the body in POST requests to the server API to remove a user's subscription from a channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"unsubscribe\",\n    \"params\": {\n        \"channel\": \"CHANNEL NAME\",\n        \"user\": \"USER ID\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SSE Endpoint in Centrifugo Server Configuration (JSON)\nDESCRIPTION: Illustrates the necessary configuration in `config.json` to enable the SSE transport endpoint (`/connection/sse`) and the associated emulation endpoint (`/emulation`) on the Centrifugo server. Setting `\"sse\": true` activates this functionality. This allows clients like `centrifuge-js` to connect using SSE.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/sse.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"sse\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Full History Forward using History API\nDESCRIPTION: Illustrates retrieving the complete history stream starting from the oldest publication (`since: null`, `reverse: false`). The `limit: -1` parameter requests all available publications, though the result is capped by the server-side `client_history_max_publication_limit` (default 300).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/history_and_recovery.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: -1, since: null, reverse: false)\n```\n\n----------------------------------------\n\nTITLE: Defining Room Member Serializer in DRF\nDESCRIPTION: This Python snippet defines a DRF serializer `RoomMemberSerializer` for the `RoomMember` model. It specifies that the nested `user` and `room` fields should be serialized using their respective serializers (`UserSerializer` and `RoomSerializer`) and marked as read-only. This serializer is used to represent the relationship between a user and a room, typically when joining or leaving a room.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass RoomMemberSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    room = RoomSerializer(read_only=True)\n    \n    class Meta:\n        model = RoomMember\n        fields = ['room', 'user']\n```\n\n----------------------------------------\n\nTITLE: Starting Second Centrifugo Node with Redis Engine (Shell)\nDESCRIPTION: Starts a second Centrifugo instance on a different port (8001) to avoid conflict with the first instance when running locally. It connects to the same Redis engine (`127.0.0.1:6379`) as the first node, demonstrating horizontal scaling.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```\ncentrifugo --config=config.json --port=8001 --engine=redis --redis_address=127.0.0.1:6379\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Compression with Sync Pools in Go\nDESCRIPTION: Illustrates how Gorilla WebSocket uses sync.Pool to manage flate.Writer and flate.Reader objects for efficient WebSocket compression in Go.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-08-19-optimizing-websocket-compression.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar (\n    flateWriterPools [maxCompressionLevel - minCompressionLevel + 1]sync.Pool\n    flateReaderPool  = sync.Pool{New: func() interface{} {\n        return flate.NewReader(nil)\n    }}\n)\n```\n\n----------------------------------------\n\nTITLE: Describing TCP Connection Tuple Components\nDESCRIPTION: This snippet illustrates the 4-part tuple that uniquely identifies a TCP connection in the OS: source IP, source port, destination IP, and destination port. It is shown in plaintext within the documentation to help understand connection limits and port exhaustion. No execution is intended.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/infra_tuning.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsource ip | source port | destination ip | destination port\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP/2 Support for Centrifugo Server (Bash)\nDESCRIPTION: This command starts the Centrifugo server while explicitly disabling HTTP/2 support. It achieves this by setting the `GODEBUG` environment variable to `http2server=0` before executing the `centrifugo` binary with its configuration file (`config.json`). This instructs the underlying Go standard library HTTP server, used by Centrifugo, to only use HTTP/1.1.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/faq/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGODEBUG=\"http2server=0\" centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring FCM Push Notifications in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet shows how to configure Centrifugo to send push notifications via Firebase Cloud Messaging (FCM). It requires defining a PostgreSQL database DSN for token storage, a Redis address for queuing (Centrifugo PRO), enabling 'fcm' in `enabled_providers`, and providing the path to the FCM service account credentials file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/push_notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"push_notifications\": {\n        \"redis_address\": \"localhost:6379\",\n        \"enabled_providers\": [\"fcm\"],\n        \"fcm_credentials_file_path\": \"/path/to/service/account/credentials.json\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 'subscribe' Push Messages from Centrifugal Server (JSON)\nDESCRIPTION: This JSON message confirms to the client that its connection has been successfully subscribed to a specific channel during its lifetime. It includes the 'channel' name to which the client was subscribed and an empty 'subscribe' object. This is typically received after the client explicitly subscribes to a channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\":\"test\",\n  \"subscribe\":{}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Namespaces in Granular Proxy Mode\nDESCRIPTION: This configuration shows how to set up RPC namespaces for handling different RPC methods with different proxies. RPC methods prefixed with a namespace (e.g., 'rpc_ns1:test') will use the proxy assigned to that namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [...],\n  \"namespaces\": [...],\n  \"rpc_namespaces\": [\n    {\n      \"name\": \"rpc_ns1\",\n      \"rpc_proxy_name\": \"rpc1\",\n    },\n    {\n      \"name\": \"rpc_ns2\",\n      \"rpc_proxy_name\": \"rpc2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Ping Interval and Pong Timeout in Centrifugo (JSON)\nDESCRIPTION: This snippet provides a sample Centrifugo configuration file in JSON format, demonstrating how to set custom values for the client's ping interval and pong timeout options. The configuration accepts human-readable duration values as strings (such as \"25s\" for 25 seconds). These parameters control heartbeat behavior for persistent bidirectional connections. To apply these settings, place them in the main Centrifugo configuration file and ensure `client.ping_interval` is greater than `client.pong_timeout`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"client\\\": {\\n    \\\"ping_interval\\\": \\\"25s\\\",\\n    \\\"pong_timeout\\\": \\\"8s\\\"\\n  }   \\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Status via Centrifugo PRO Server API - Bash (curl)\nDESCRIPTION: This curl command demonstrates how to update multiple users' activity statuses using Centrifugo's server-side API. The HTTP POST request specifies the 'update_user_status' method, authenticates with an API key, and posts the list of user IDs to update. The endpoint expects application/json content type and a valid API key for authorization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_status.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"update_user_status\", \"params\": {\"users\": [\"42\"]}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis Sharding in Centrifugo Config - JSON\nDESCRIPTION: Demonstrates enabling Redis sharding by specifying an array of Redis addresses. Centrifugo will distribute keys across the listed Redis instances using jump consistent hash. Inputs: List of Redis TCP addresses. Output: Application-level sharding to mitigate single-server bottlenecks. Limitation: Cannot shard within a single Redis instance by DB number when using PUB/SUB.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": [\n        \"127.0.0.1:6379\",\n        \"127.0.0.1:6380\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Redis Cluster via Environment Variable (Bash)\nDESCRIPTION: This command starts Centrifugo configured for Redis Cluster using environment variables. `CENTRIFUGO_REDIS_CLUSTER_ADDRESS` provides a seed node address, and `CENTRIFUGO_ENGINE` sets the engine to `redis`. This is an alternative to using a configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_REDIS_CLUSTER_ADDRESS=\"localhost:30001\" CENTRIFUGO_ENGINE=redis ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Removing Channel History via Centrifugo HTTP API - Bash\nDESCRIPTION: Illustrates use of Bash for HTTP POST requests to remove a channel's message history on Centrifugo. The command echoes a JSON payload for 'history_remove', targeting 'chat', and relies on the 'http' command and Authorization header. Success results in a simple empty result object. Designed to help with administrative tasks or during development, especially before production data retention rules are enforced.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"method\": \"history_remove\", \"params\": {\"channel\": \"chat\"}}' | http \"localhost:8000/api\" Authorization:\"apikey KEY\"\nHTTP/1.1 200 OK\nContent-Length: 43\nContent-Type: application/json\nDate: Thu, 17 May 2018 22:09:44 GMT\n\n{\n    \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a JWT Token for Centrifugo User - Bash\nDESCRIPTION: This command line snippet generates an HMAC SHA-256 JWT for the specified user (\"test_user\") with a time-to-live (TTL) using Centrifugo's built-in gentoken command. It requires a valid Centrifugo installation and a config.json with the correct secret key. The generated token is used for authenticating websocket clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_websocket.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo gentoken -c config.json -u test_user\nHMAC SHA-256 JWT for user test_user with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0X3VzZXIiLCJleHAiOjE2MzAxMzAxNzB9.u7anX-VYXywX1p1lv9UC9CAu04vpA6LgG5gsw5lz1Iw\n```\n\n----------------------------------------\n\nTITLE: Using Localized Template Content\nDESCRIPTION: Example of using localized content in push notification templates with default fallback values.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"{{default [[hello]] .l10n.greeting}}! {{ default [[How is it going]] .l10n.question }} ?\"\n```\n\n----------------------------------------\n\nTITLE: Setting Centrifugo Static Proxy Headers via Environment Variable (Bash)\nDESCRIPTION: This Bash command demonstrates setting the static HTTP headers for the Centrifugo connect proxy using an environment variable. The `CENTRIFUGO_CLIENT_PROXY_CONNECT_HTTP_STATIC_HEADERS` variable is assigned a JSON string representing the map of static headers to be added to outgoing proxy requests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```\nexport CENTRIFUGO_CLIENT_PROXY_CONNECT_HTTP_STATIC_HEADERS='{\"X-Custom-Header\": \"custom value\"}'\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3000 (Connection Closed)\nDESCRIPTION: Defines the 'Connection Closed' disconnect code (3000). This is a special code used internally by the server or SDK when a connection closes without an explicit server-side reason (e.g., client closes browser, network interruption). The server cannot distinguish the exact cause.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nCode: 3000\nReason: \"connection closed\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Unidirectional SSE in Centrifugo Configuration (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable the unidirectional Server-Sent Events (SSE) endpoint in Centrifugo by setting the `enabled` flag to `true` within the `uni_sse` object in the main configuration file (`config.json`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_sse.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=config.json\n{\n  \"uni_sse\": {\n    \"enabled\": true\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Graphite Metrics Export - JSON\nDESCRIPTION: This configuration snippet enables automatic export of metrics to a Graphite backend by adding \"graphite\", \"graphite_host\", and \"graphite_port\" keys to the config.json file. Centrifugo will push aggregated metrics every 10 seconds by default or on the interval set via \"graphite_interval\". Requires proper Graphite server address and port, and is activated when Centrifugo is started with this configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/monitoring.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"graphite\": true,\n    \"graphite_host\": \"localhost\",\n    \"graphite_port\": 2003\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk-Inserting Room Members in Django - Python\nDESCRIPTION: Defines a function to populate a chat room with up to 'limit' users by bulk-creating RoomMember relationships. Uses Room and User models, fetching users with a database slice to restrict membership. Batch-inserts every 100 members for efficiency and supports duplicate ignores with ignore_conflicts. Outputs progress to the console for each batch inserted.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/scale.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom chat.models import RoomMember, Room\\n\\ndef fill_room(room_id, limit):\\n    members = []\\n    total = 0\\n    room = Room.objects.get(pk=room_id)\\n    for user in User.objects.all()[:limit]:\\n        members.append(RoomMember(room=room, user=user))\\n\\n        if len(members) >= 100:\\n            total += len(members)\\n            RoomMember.objects.bulk_create(members, ignore_conflicts=True)\\n            members = []\\n            print(\\\"Total members created:\\\", total)\\n\\n    # Create remaining members.\\n    if members:\\n        total += len(members)\\n        RoomMember.objects.bulk_create(members, ignore_conflicts=True)\\n        print(\\\"Total members created:\\\", total)\n```\n\n----------------------------------------\n\nTITLE: Installing GRPC and Protobuf Tools in Go - Bash\nDESCRIPTION: This snippet describes installing the required protoc code generator plugins for Go and GRPC using the go install command. These dependencies are required to generate Go code from .proto definitions. Ensure your Go environment is configured and GOPATH/bin is in your PATH so installed tools are accessible.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-03-18-stream-loki-logs-to-browser-with-websocket-to-grpc-subscriptions.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@latest\\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Subscribe Proxy Globally in Centrifugo Configuration - JSON\nDESCRIPTION: Extends the previous configuration to include \\\\\"proxy_subscribe\\\\\": true at the top level. This enables subscribe proxy for all channels not in a specific namespace. Requires defining endpoint and timeout options as well. The configuration is partial and meant to be merged with the main Centrifugo config file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_endpoint\": \"http://localhost:3000/centrifugo/subscribe\",\n  \"proxy_subscribe_timeout\":  \"1s\",\n  \"proxy_subscribe\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Debug Mode Configuration\nDESCRIPTION: Configuration to enable debug mode in Centrifugo\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...,\n    \"debug\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sharding in Centrifugo\nDESCRIPTION: Configuration example showing how to set up Redis sharding with two instances running on localhost with different ports.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"engine\": \"redis\",\n    \"redis_address\": [\n        \"127.0.0.1:6379\",\n        \"127.0.0.1:6380\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic JWKS Endpoint Using Regex Extraction - Centrifugo - JSON\nDESCRIPTION: This snippet demonstrates how to configure Centrifugo to use regex extraction from the JWT 'iss' claim for dynamically constructing the JWKS public endpoint. The configuration uses 'issuer_regex' to capture the 'realm' part of the issuer URL and interpolates it into 'jwks_public_endpoint' as a template variable. Dependencies include Centrifugo server v5.0+ and JWT tokens with relevant claims. The key parameters are 'jwks_public_endpoint' (accepts template variables) and 'issuer_regex' (must include named capture groups). Output is dynamic JWKS URL determination upon token validation. Only available for connection-level tokens, not compatible with static 'issuer' or 'audience' config.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"token\": {\n      ...\n      \"jwks_public_endpoint\": \"https://keycloak:443/{{realm}}/protocol/openid-connect/certs\",\n      \"issuer_regex\": \"https://example.com/auth/realms/(?P<realm>[A-z]+)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Allowed Origins in Centrifugo Configuration - JSON\nDESCRIPTION: This snippet demonstrates how to specify a list of allowed origins in the Centrifugo v3 configuration file. The \"allowed_origins\" field restricts which origins can connect to Centrifugo's client transport endpoints. Set this option in your config.json as an array of permitted domain URLs to improve security. Use caution: specifying a wildcard (\"*\") disables strict origin checks, which is insecure if you utilize the connect proxy feature.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/migration-v3.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"allowed_origins\": [\"https://mysite.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo Connect Proxy Request Payload (JSON)\nDESCRIPTION: This JSON object shows an example payload sent by Centrifugo to the configured `proxy_connect_endpoint`. It includes details about the client connection, such as the unique `client` ID, `transport` type, `protocol`, and `encoding` used. This information allows the backend to process the connection attempt.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Persistence for User Blocking - Centrifugo PRO (JSON)\nDESCRIPTION: This JSON snippet demonstrates configuring Centrifugo PRO to persist user block data in a PostgreSQL database. It sets up the database connection with a DSN and instructs the user_block feature to use the 'database' persistence engine. The DSN should be replaced with appropriate credentials. Only PostgreSQL is supported. Prerequisites include a running PostgreSQL instance accessible by the given DSN.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_block.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"user_block\": {\n        \"persistence_engine\": \"database\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unidirectional HTTP Streaming Session (Bash)\nDESCRIPTION: Shows the flow of raw JSON messages received from Centrifugo during a unidirectional HTTP streaming session initiated with `curl`. Includes examples of `connect`, `join`, `pub`, ping (empty `{}`), and `disconnect` messages.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n‚ùØ curl -X POST http://localhost:8000/connection/uni_http_stream -d '{}'\n{\"connect\":{\"client\":\"bb56837...\",\"version\":\"0.0.0 OSS\",\"subs\":{\"#2694\":{}},\"ping\":25,\"session\":\"3159c4f8...\"}}\n{\"channel\":\"#2694\",\"join\":{\"info\":{\"user\":\"2694\",\"client\":\"bb56837e-5b93-4478-95b6-98f3d2269b29\"}}}\n{\"channel\":\"#2694\",\"pub\":{\"data\":{\"input\":1}}}\n{}\n{\"channel\":\"#2694\",\"pub\":{\"data\":{\"input\":2}}}\n{\"channel\":\"#2694\",\"pub\":{\"data\":{\"input\":3}}}\n{\"disconnect\":{\"code\":3001,\"reason\":\"shutdown\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis-based User Status Persistence in Centrifugo using JSON (Basic)\nDESCRIPTION: This JSON configuration enables the user status feature and defines the Redis connection settings for Centrifugo. The config.json is expected by the Centrifugo server at startup, enabling user status tracking and persistence using the provided Redis address. Input parameters include enabling the feature and the Redis host; proper server configuration is required. Constraints: the Redis server must be accessible and properly secured.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_status.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_status\": {\n    \"enabled\": true,\n    \"redis\": {\n      \"address\": \"localhost:6379\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Data to Multiple Channels with Centrifugo API - JSON\nDESCRIPTION: This JSON snippet defines a 'broadcast' command, allowing the same data payload to be published to multiple channels using Centrifugo's HTTP API. 'channels' is a required list of target channels, and 'data' holds the message payload. This command structure is sent as the request body for the broadcast API method.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"broadcast\",\n    \"params\": {\n        \"channels\": [\"CHANNEL_1\", \"CHANNEL_2\"],\n        \"data\": {\n            \"text\": \"hello\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL as Push Notification Queue - Centrifugo PRO - JSON\nDESCRIPTION: This configuration switches the push notification queue in Centrifugo PRO from the default Redis Streams to PostgreSQL. The 'queue' section specifies 'type' as 'postgresql', optionally reusing the main database or specifying a dedicated DSN for queueing. This is useful when Redis is not available or for simplified deployments, but may be less performant under heavy load. Ensure PostgreSQL access is properly configured and note potential message loss when switching from another queue type.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"database\": {\\n    \"postgresql\": {\\n      \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\\n    },\\n    \"enabled\": true\\n  },\\n  \"push_notifications\": {\\n    \"queue\": {\\n      \"type\": \"postgresql\",\\n      \"postgresql\": {\\n        \"reuse_from_database\": true\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Refresh Proxy in Centrifugo\nDESCRIPTION: Configuration for using GRPC protocol for refresh proxy events. This allows Centrifugo to call the application backend over GRPC when refreshing authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_refresh_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_refresh_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Second Connection with Curl\nDESCRIPTION: Identical curl command to establish a second connection to Centrifugo for the same user ID 42, demonstrating multiple active sessions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/connections.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/connection/uni_http_stream --data '{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0MiIsImV4cCI6MTYyNzcxMzMzNX0.s3eOhujiyBjc4u21nuHkbcWJll4Um0QqGU3PF-6Mf7Y\", \"name\": \"terminal\"}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Ping RPC Method Name in Centrifugo\nDESCRIPTION: This configuration demonstrates how to customize the name of the ping RPC method in Centrifugo, changing it from the default 'ping' to 'rtt'.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rpc\": {\n    \"ping\": {\n      \"enabled\": true,\n      \"method\": \"rtt\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Recent Publications in Reverse Order from Channel History in Javascript\nDESCRIPTION: This snippet demonstrates fetching up to 10 most recent publications from a channel's history in reverse chronological order (latest first) using the `history()` method with `limit` and `reverse: true` options on a `Subscription` object. Requires channel history configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history({limit: 10, reverse: true});\nconsole.log(resp.publications);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Compression and PreparedMessage Cache in Centrifuge (Go)\nDESCRIPTION: This code snippet demonstrates how to configure the centrifugal/centrifuge Go library to enable WebSocket compression and set up a cache for prepared messages, which optimizes resource usage for high-throughput messaging. Dependencies include the centrifugal/centrifuge Go package. The key parameters are 'Compression', a boolean enabling compression, and 'CompressionPreparedMessageCacheSize', which sets the cache size in bytes (here, 1 MB). Input is a configuration object to be passed to Centrifuge; there is no direct output but applying this configuration yields reduced CPU and memory usage during runtime. Limitations include appropriate cache sizing for your workload and that the configuration shown is specific to Centrifuge's Go API.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-08-19-optimizing-websocket-compression.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nwebsocketConfig := centrifuge.WebsocketConfig{\n    Compression: true,\n    CompressionPreparedMessageCacheSize: 1048576 // 1 MB. \n}\n```\n\n----------------------------------------\n\nTITLE: Example Publish Proxy Request Payload (JSON)\nDESCRIPTION: Illustrates an example JSON payload sent by Centrifugal to the configured publish proxy endpoint. It contains details about the client connection (`client`, `transport`, `protocol`, `encoding`, `user`), the target `channel`, and the `data` the client is attempting to publish, allowing the backend to validate the request.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"channel\": \"chat:index\",\n  \"data\":{\n    \"input\":\"hello\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Redis Instances for Broker and Presence Manager (JSON)\nDESCRIPTION: Illustrates a complete `config.json` example where both the broker and presence manager are enabled, set to use Redis, but configured to connect to different Redis instances (on ports 6379 and 6380 respectively) for load distribution or specialized setups.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"broker\": {\n    \"enabled\": true,\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"127.0.0.1:6379\"\n    }\n  },\n  \"presence_manager\": {\n    \"enabled\": true,\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"127.0.0.1:6380\"\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Django URL Patterns for Centrifugo Proxy Handlers\nDESCRIPTION: This Python snippet defines URL patterns for a Django chat application using `django.urls`. It maps specific URL paths (`/centrifugo/connect/`, `/centrifugo/subscribe/`, `/centrifugo/publish/`) to corresponding view functions (`views.connect`, `views.subscribe`, `views.publish`) which will handle proxy requests from Centrifugo for connection, subscription, and publication events. It extends existing chat room URLs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"chat/urls.py\"\nfrom django.urls import path, re_path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    re_path('room/(?P<room_name>[A-z0-9_-]+)/', views.room, name='room'),\n    path('centrifugo/connect/', views.connect, name='connect'),\n    path('centrifugo/subscribe/', views.subscribe, name='subscribe'),\n    path('centrifugo/publish/', views.publish, name='publish'),\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Debezium PostgreSQL Connector for Kafka Connect (JSON)\nDESCRIPTION: Provides the JSON configuration for the Debezium PostgreSQL connector (`grandchat-connector`). It specifies connection details for the PostgreSQL database (`db` service), the table to monitor (`public.chat_cdc`), Kafka connection details for schema history, the output plugin (`pgoutput`), JSON converters without schemas, a polling interval, and transformations to extract only the 'after' state of the change event. It also configures topic creation settings and specifies `message.key.columns` for Kafka message partitioning.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"grandchat-connector\",\n    \"config\": {\n        \"connector.class\": \"io.debezium.connector.postgresql.PostgresConnector\",\n        \"database.hostname\": \"db\",\n        \"database.port\": \"5432\",\n        \"database.user\": \"grandchat\",\n        \"database.password\": \"grandchat\",\n        \"database.dbname\": \"grandchat\",\n        \"database.server.name\": \"db\",\n        \"table.include.list\": \"public.chat_cdc\",\n        \"database.history.kafka.bootstrap.servers\": \"kafka:9092\",\n        \"database.history.kafka.topic\": \"schema-changes.chat_cdc\",\n        \"plugin.name\": \"pgoutput\",\n        \"tasks.max\": \"1\",\n        \"producer.override.max.request.size\": \"10485760\",\n        \"topic.creation.default.cleanup.policy\": \"delete\",\n        \"topic.creation.default.partitions\": \"8\",\n        \"topic.creation.default.replication.factor\": \"1\",\n        \"topic.creation.default.retention.ms\": \"604800000\",\n        \"topic.creation.enable\": \"true\",\n        \"topic.prefix\": \"postgres\",\n        \"key.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n        \"value.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n        \"key.converter.schemas.enable\": \"false\",\n        \"value.converter.schemas.enable\": \"false\",\n        \"poll.interval.ms\": \"100\",\n        \"transforms\": \"extractContent\",\n        \"transforms.extractContent.type\": \"org.apache.kafka.connect.transforms.ExtractField$Value\",\n        \"transforms.extractContent.field\": \"after\",\n        \"message.key.columns\": \"public.chat_cdc:partition\",\n        \"snapshot.mode\": \"never\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Users with Django - Python\nDESCRIPTION: Defines a utility function to programmatically create a large number of Django user accounts, batching the creation with bulk_create for performance. Relies on django.contrib.auth.models.User, random string and password generators, and writes users in batches of 100 for efficiency. Parameters: 'n' (number of users to create). Prints total users created after each operation. Suitable for development and load-testing; adjust password requirements for speed if security isn't needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/scale.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\\nfrom django.utils.crypto import get_random_string\\nfrom django.contrib.auth.hashers import make_password\\n\\ndef create_users(n):\\n    users = []\\n    total = 0\\n    for _ in range(n):\\n        username = get_random_string(10)\\n        email = f\\\"{username}@example.com\\\"\\n        password = get_random_string(50)\\n        user = User(username=username, email=email, password=make_password(password, None))\\n        users.append(user)\\n\\n        if len(users) >= 100:\\n            total += len(users)\\n            User.objects.bulk_create(users)\\n            users = []\\n            print(\\\"Total users created:\\\", total)\\n\\n    # Create remaining users.\\n    if users:\\n        total += len(users)\\n        User.objects.bulk_create(users)\\n        print(\\\"Total users created:\\\", total)\n```\n\n----------------------------------------\n\nTITLE: Calling Bootstrap Function from Django Shell - Python\nDESCRIPTION: Provides the import and invocation command for setting up development data when inside the Django shell. After entering the shell, the developer runs these commands to execute the bulk user/room/member setup. Assumes the utility functions reside in app/utils.py and that all required dependencies are available.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/scale.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom app.utils import setup_dev\\nsetup_dev()\n```\n\n----------------------------------------\n\nTITLE: Inspecting Specific Process Limits on Linux\nDESCRIPTION: This shell command reads the `/proc/<PID>/limits` pseudo-file on Linux systems to show the specific resource limits applied to a running process identified by `<PID>`. Replace `<PID>` with the actual process ID of Centrifugo to verify its effective open files limit and other resource constraints.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/infra_tuning.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat /proc/<PID>/limits\n```\n\n----------------------------------------\n\nTITLE: Describing Kafka Topic State (Bash)\nDESCRIPTION: This command describes a specific Kafka topic's state, including partitioning and replication info, using the kafka-topics CLI inside the dockerized Kafka container. The topic in this example is 'postgres.public.chat_cdc'. Useful for debugging partition distribution and verifying deployment health. The Kafka container must be running.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/tips_and_tricks.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec kafka kafka-topics --bootstrap-server kafka:9092 --describe --topic postgres.public.chat_cdc\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Not Available (108)\nDESCRIPTION: Indicates that the requested resource or feature is not enabled or available. For example, trying to access history or presence on a channel where these features are not configured.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    108\nMessage: \"not available\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Centrifugo v2 Protocol via URL Parameter\nDESCRIPTION: Append the `?cf_protocol_version=v2` query parameter to the client connection endpoint URL when using updated client SDKs (v3+) with a Centrifugo v4 server configured with `use_client_protocol_v1_by_default=true`. This explicitly signals to the server that the client supports the newer v2 protocol.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/migration-v4.md#2025-04-23_snippet_1\n\nLANGUAGE: url\nCODE:\n```\n?cf_protocol_version=v2\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 104 (Method Not Found)\nDESCRIPTION: Defines the client error code 104, indicating \"method not found\". This error is returned when a client sends a command with a method name that the server does not recognize or support.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    104\nMessage: \"method not found\"\n```\n\n----------------------------------------\n\nTITLE: Expected Publish Success Response - JSON\nDESCRIPTION: An example Centrifugo HTTP API response returned upon a successful publish operation. The result field is an empty object, indicating no errors or additional data. This response is JSON-encoded.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Boolean Value in Centrifugo Subscribe Override (JSON)\nDESCRIPTION: This snippet shows the JSON structure `{ \"value\": true/false }` used within the 'Override object' returned in a Subscribe Proxy response. This structure allows dynamically overriding channel options like presence, join_leave, position, and recover for a specific connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": true/false\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Go GRPC Client Code from Protobuf - Bash\nDESCRIPTION: Shows the protoc command to generate the required Go client code for GRPC API communication with Centrifugo. Requires protoc, protoc-gen-go, and protoc-gen-go-grpc plugins installed and api.proto fetched locally. Outputs: Go source files for GRPC stubs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nprotoc -I ./ api.proto --go_out=. --go-grpc_out=.\n```\n\n----------------------------------------\n\nTITLE: Describing JWT-based Client Authentication with Centrifugo - swimlanes.io Diagram\nDESCRIPTION: This swimlanes.io snippet illustrates a client authenticating to Centrifugo through an application backend using JWT. The process involves the backend generating a JWT, returning it to the client, which then connects and subscribes to channels, eventually receiving real-time events. Requires swimlanes.io or a compatible sequence diagram generator to render. Actors: Client, App Backend, Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/flow_diagrams.md#2025-04-23_snippet_0\n\nLANGUAGE: swimlanes.io\nCODE:\n```\nClient <- App Backend: JWT\n\nnote:\nThe backend generates JWT for a user and passes it to the client side.\n\nClient -> Centrifugo: Client connects to Centrifugo with JWT\n\n...: {fas-spinner} Persistent connection established\n\nClient -> Centrifugo: Client issues channel subscribe requests\n\nCentrifugo -->> Client: Client receives real-time updates from channels\n```\n\n----------------------------------------\n\nTITLE: Running Benthos with Configuration File\nDESCRIPTION: Command to start a Benthos instance using the specified configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-08-19-asynchronous-message-streaming-to-centrifugo-with-benthos.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenthos -c config.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 108 (Not Available)\nDESCRIPTION: Defines the client error code 108, signifying a resource is \"not available\". This is often returned when attempting to use features like history or presence on a channel where these features are not configured or enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    108\nMessage: \"not available\"\n```\n\n----------------------------------------\n\nTITLE: RPC Handler in Go\nDESCRIPTION: Server-side RPC handler implementation for processing client RPC requests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nclient.OnRPC(func(e centrifuge.RPCEvent, cb centrifuge.RPCCallback) {\n    if e.Method == \"my_method\" {\n        cb(centrifuge.RPCReply{Data: []byte(`{\"result\": \"42\"}`)}, nil)\n        return\n    }\n    cb(centrifuge.RPCReply{}, centrifuge.ErrorMethodNotFound)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Centrifugo connect proxy handler\nDESCRIPTION: Express.js route handler for Centrifugo's connect proxy. It checks the session for authentication and responds with appropriate JSON for successful or failed authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-10-18-integrating-with-nodejs.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/centrifugo/connect', (req, res) => {\n  if (req.session.userid) {\n    res.json({\n      result: {\n        user: req.session.userid\n      }\n    });\n  } else\n    res.json({\n      disconnect: {\n        code: 1000,\n        reason: \"unauthorized\",\n        reconnect: false\n      }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Nats Raw Mode in Centrifugo Configuration - JSON\nDESCRIPTION: This JSON configuration snippet enables Nats raw mode in Centrifugo, allowing direct mapping of Centrifugo channels to Nats topics without Centrifugo-internal message wrapping. The 'channel_replacements' map is used to substitute channel delimiters (here, ':' to '.') before subscription, while the 'prefix' option overrides default topic prefixing. To apply, merge into your main Centrifugo config and ensure correct structure. Limitations: Centrifugo join/leave features are disabled in raw mode.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"nats_raw_mode\": {\n        \"enabled\": true,\n        \"channel_replacements\": {\n            \":\": \".\"\n        },\n        \"prefix\": \"\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo PRO Docker Image in Helm Values - YAML\nDESCRIPTION: This YAML snippet sets the Docker image configuration for deploying Centrifugo PRO using a Helm chart in Kubernetes. It updates the image registry, repository, and tag to ensure that the PRO version is used rather than the default open-source image. Dependencies: Requires Helm, Kubernetes, and access to the official chart repository. Make sure to replace the tag with the desired version.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/install_and_run.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\nimage:\n  registry: docker.io\n  repository: centrifugo/centrifugo-pro\n  tag: v4.0.0-beta.10\n```\n\n----------------------------------------\n\nTITLE: Client-Initiated Publish Request via App Backend\nDESCRIPTION: This diagram demonstrates the flow of a client-initiated publish request. The client sends data to the application backend, which validates and processes it before publishing to Centrifugo. Centrifugo then delivers the real-time message to active channel subscribers.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/flow_diagrams.md#2025-04-23_snippet_2\n\nLANGUAGE: swimlanes\nCODE:\n```\nClient -> App Backend: Publish request\n\nnote:\nClient sends data to publish to the application backend.\n\nBackend validates it, maybe modifies, optionally saves to the main database, constructs real-time update and publishes it to the Centrifugo server API.\n\nApp Backend -> Centrifugo: Publish over Centrifugo API\n\nCentrifugo -->> Client: {far-bolt fa-lg} Real-time notification\n\nnote: Centrifugo delivers real-time message to active channel subscribers.\n```\n\n----------------------------------------\n\nTITLE: Enabling Binary Encoding for HTTP Proxy in Centrifugo\nDESCRIPTION: Configuration to enable binary mode in Centrifugo which uses base64 encoding for binary data in HTTP proxy requests. This allows Centrifugo to properly handle binary payloads when working with JSON-based HTTP proxy.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_binary_encoding\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing History Stream Iteration in Go\nDESCRIPTION: Example program demonstrating how to iterate over a Centrifugo stream using the new history iteration API. The code shows bidirectional pagination with configurable limits and stream position tracking.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-08-31-hello-centrifugo-v3.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Iterate by 10.\nlimit := 10\n// Paginate in reversed order first, then invert it.\nreverse := true\n// Start with nil StreamPosition, then fill it with value while paginating.\nvar sp *gocent.StreamPosition\n\nfor {\n\thistoryResult, err = c.History(\n        ctx,\n        channel,\n\t\tgocent.WithLimit(limit),\n\t\tgocent.WithReverse(reverse),\n        gocent.WithSince(sp),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error calling history: %v\", err)\n\t}\n\tfor _, pub := range historyResult.Publications {\n\t\tlog.Println(pub.Offset, \"=>\", string(pub.Data))\n\t\tsp = &gocent.StreamPosition{\n\t\t\tOffset: pub.Offset,\n\t\t\tEpoch:  historyResult.Epoch,\n\t\t}\n\t}\n\tif len(historyResult.Publications) < limit {\n\t\t// Got all pubs, invert pagination direction.\n\t\treverse = !reverse\n\t\tlog.Println(\"end of stream reached, change iteration direction\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-host Redis Sharding\nDESCRIPTION: Configuration example demonstrating Redis sharding across different host machines.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"engine\": \"redis\",\n    \"redis_address\": [\n        \"192.168.1.34:6379\",\n        \"192.168.1.35:6379\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating User Trace via CURL in Centrifugo PRO\nDESCRIPTION: This command demonstrates how to start tracing events for a specific user (ID '56') using CURL against the Centrifugo admin trace endpoint. It sends a POST request to 'http://localhost:8000/admin/trace' with the required admin authentication token in the 'Authorization' header and specifies the trace type ('user') and target entity ('56') in the JSON request body. The trace output stream is saved to the file 'trace.txt'. A running Centrifugo instance and a valid admin token (obtainable via browser developer tools) are required.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/tracing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/admin/trace -H \"Authorization: token <ADMIN_AUTH_TOKEN>\" -d '{\"type\": \"user\", \"entity\": \"56\"}' -o trace.txt\n```\n\n----------------------------------------\n\nTITLE: Defining GRPC API Package Declaration - Protobuf\nDESCRIPTION: This code snippet shows the required Protobuf package declaration for Centrifugo v3's GRPC API. The package is now \"centrifugal.centrifugo.api\" as a result of v3 changes. You must update your Protobuf definitions accordingly and regenerate any GRPC client/server code to maintain API compatibility. No dependencies beyond Protobuf tooling are required; ensure generated code uses this updated package name for correct RPC method resolution.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/migration-v3.md#2025-04-23_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\npackage centrifugal.centrifugo.api;\n```\n\n----------------------------------------\n\nTITLE: Sample Proxy Refresh Request Payload for Centrifugo (JSON)\nDESCRIPTION: This JSON code sample represents the POST payload Centrifugo sends to the backend's refresh endpoint during a connection refresh. The payload includes client ID, transport type, protocol and encoding details, and user ID. This must be parsed by the backend to determine refresh outcome. Input: HTTP POST from Centrifugo. Output: Backend should return a valid refresh response as documented.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Channel Namespace Metrics in Centrifugo PRO Using JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates how to enable channel namespace labels for Centrifugo PRO transport metrics by setting the appropriate boolean options. It requires Centrifugo PRO v5.1.1 or newer and must appear within your main configuration file (typically config.json). Key parameters include channel_namespace_for_transport_messages_sent (affects sent message metrics) and channel_namespace_for_transport_messages_received (affects received message metrics). This configuration expects boolean true/false values, and will add namespace labels to related Prometheus metrics without significant performance impact.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/observability_enhancements.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"channel_namespace_for_transport_messages_sent\": true,\n    \"channel_namespace_for_transport_messages_received\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Terminal): Invalid Token (3500)\nDESCRIPTION: The client presented an invalid authentication token during connection establishment. The client should not attempt reconnection without obtaining a valid token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3500\nReason: \"invalid token\"\n```\n\n----------------------------------------\n\nTITLE: Backend Dockerfile Configuration\nDESCRIPTION: Dockerfile for Django application using Gunicorn\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.11.4-slim-buster\n\nWORKDIR /usr/src/app\n\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\nRUN pip install --upgrade pip\nCOPY ./requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nCMD [\"gunicorn\",  \"app.wsgi\", \"--reload\", \"--access-logfile\", \"-\", \\\n    \"--workers\", \"2\", \"--bind\", \"0.0.0.0:8000\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Persistence for User Blocking in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to configure Centrifugo PRO to use a PostgreSQL database for persistent storage of user blocking information. It requires enabling the general `database` section with the PostgreSQL connection string (`dsn`) and setting the `user_block` `storage_type` to `database`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_block.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"database\": {\n    \"enabled\": true,\n    \"postgresql\": {\n      \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    }\n  },\n  \"user_block\": {\n    \"storage_type\": \"database\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using a Dedicated PostgreSQL Instance for Push Queue - Centrifugo PRO - JSON\nDESCRIPTION: This JSON snippet demonstrates configuring a dedicated PostgreSQL database instance specifically for the push notification queue in Centrifugo PRO. By providing a separate 'dsn' under 'push_notifications.queue.postgresql', administrators can segregate push queue data from the main application database, which may improve reliability or performance in larger deployments. Ensure the new database instance is running and accessible with the provided DSN.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\\n  ...\\n  \"push_notifications\": {\\n    \"queue\": {\\n      \"type\": \"postgresql\",\\n      \"postgresql\": {\\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/push_queue\"\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Refresh Proxy Response Example\nDESCRIPTION: Example of the expected JSON response format for a refresh proxy request. Includes an expire_at timestamp to indicate when the connection should be considered expired.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {\"expire_at\": 1565436268}}\n```\n\n----------------------------------------\n\nTITLE: Installing Website Dependencies\nDESCRIPTION: Command to install the required dependencies for the Docusaurus-based website using Yarn package manager.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Container for Testing\nDESCRIPTION: Docker command to run a Redis instance that will be used as the message queue for the Benthos-Centrifugo integration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-08-19-asynchronous-message-streaming-to-centrifugo-with-benthos.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --name redis redis:7\n```\n\n----------------------------------------\n\nTITLE: Defining Push Message Structure in Protobuf for Centrifugo\nDESCRIPTION: This Protobuf definition outlines the structure of a Push message in Centrifugo's unidirectional client protocol. It includes various message types that can be sent to the client, such as Publication, Join, Leave, and others.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_client_protocol.md#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Push {\n  string channel = 2;\n\n  Publication pub = 4;\n  Join join = 5;\n  Leave leave = 6;\n  Unsubscribe unsubscribe = 7;\n  Message message = 8;\n  Subscribe subscribe = 9;\n  Connect connect = 10;\n  Disconnect disconnect = 11;\n  Refresh refresh = 12;\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Python\nDESCRIPTION: Alternative command to serve static files using Python's built-in HTTP server on port 3000.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m http.server 3000\n```\n\n----------------------------------------\n\nTITLE: Querying Top 10 Users by Publish Operations Recently in ClickHouse SQL\nDESCRIPTION: SQL query to identify the top 10 users who performed the most 'publish' operations within the last minute. It aggregates counts from `centrifugo.operations_distributed`, groups by user, orders by the count in descending order, and limits the result to 10. Includes example output.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    COUNT(op) AS num_ops,\n    user\nFROM centrifugo.operations_distributed\nWHERE (op = 'publish') AND (time >= (now() - toIntervalMinute(1)))\nGROUP BY user\nORDER BY num_ops DESC\nLIMIT 10;\n\n‚îå‚îÄnum_ops‚îÄ‚î¨‚îÄuser‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ      56 ‚îÇ user_200 ‚îÇ\n‚îÇ      11 ‚îÇ user_75  ‚îÇ\n‚îÇ       6 ‚îÇ user_87  ‚îÇ\n‚îÇ       6 ‚îÇ user_65  ‚îÇ\n‚îÇ       6 ‚îÇ user_39  ‚îÇ\n‚îÇ       5 ‚îÇ user_28  ‚îÇ\n‚îÇ       5 ‚îÇ user_63  ‚îÇ\n‚îÇ       5 ‚îÇ user_89  ‚îÇ\n‚îÇ       3 ‚îÇ user_32  ‚îÇ\n‚îÇ       3 ‚îÇ user_52  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Enabling WebSocket Compression in Go\nDESCRIPTION: Demonstrates how to enable WebSocket compression using the Gorilla WebSocket library in Go. This is done by setting the EnableCompression option on the websocket.Upgrader.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-08-19-optimizing-websocket-compression.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar upgrader = websocket.Upgrader{\n    EnableCompression: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo Server API Command Message for Kafka - JavaScript/JSON\nDESCRIPTION: This JSON object is an example of a Centrifugo async API command message designed to be published to a Kafka topic and consumed by the Centrifugo Kafka consumer. It contains a 'method' (here, 'publish') and a payload with channel and data fields. Inputs: JSON message; Output: real-time event processed by Centrifugo. Constraints: Only valid modifying commands (e.g., publish, broadcast); must be JSON.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/consumers.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"publish\",\n  \"payload\": {\n    \"channel\": \"mychannel\",\n    \"data\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo for Redis Sentinel (JSON)\nDESCRIPTION: Configures Centrifugo within `config.json` to use the Redis engine with Redis Sentinel for high availability. It specifies the engine type as `\"redis\"`, provides a comma-separated list of Sentinel node addresses (`redis_sentinel_address`), and the name of the Redis master (`redis_sentinel_master_name`) monitored by Sentinel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_sentinel_address\": \"127.0.0.1:26379\",\n    \"redis_sentinel_master_name\": \"mymaster\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Publications Since a Known Position from Channel History in Javascript\nDESCRIPTION: This snippet demonstrates fetching up to 10 historical publications from a channel, starting after a known stream position (specified by `offset` and `epoch`). This uses the `history()` method with `limit` and `since` options on a `Subscription` object and requires history configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history({limit: 10, since: {offset: 0, epoch: '...'}});\nconsole.log(resp.publications);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Presence from Top-Level Client Object (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates retrieving presence information using the top-level 'client' object in the Centrifugo SDK. This is useful for scenarios like querying presence for server-side subscriptions or when a specific subscription object isn't readily available. Client permission is still required.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/presence.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await client.presence(channel);\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Regex in Centrifugo Namespace (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure a Centrifugo namespace named 'chat' using the `channel_regex` option. It restricts channel names within this namespace to only contain digits after the 'chat:' prefix (e.g., 'chat:123'). The `allow_subscribe_for_client` option is also enabled, allowing authenticated clients to subscribe. Note that the regex `^[\\d+]$` applies only to the part of the channel name *after* the namespace prefix.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channels.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"namespaces\": [\n    {\n      \"name\": \"chat\",\n      \"allow_subscribe_for_client\": true,\n      \"channel_regex\": \"^[\\d+]$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Channel History in Reverse Order in JavaScript\nDESCRIPTION: This snippet shows how to retrieve up to 10 publications from the end of the channel's history stream (most recent first) by setting the `reverse: true` option in the `history` method. Requires history enabled for the channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst resp = await subscription.history({limit: 10, reverse: true});\nconsole.log(resp.publications);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Reverse Proxy (nginx.conf)\nDESCRIPTION: This Nginx configuration sets up a reverse proxy to route requests to backend (Django), frontend (SPA), and Centrifugo services. It defines upstream blocks for each service and location blocks to direct traffic based on URL paths (`/api`, `/admin`, `/static`, `/connection/websocket`, `/`). It handles WebSocket upgrades and sets appropriate proxy headers.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/reverse_proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n  worker_connections 1024;\n}\n\nhttp {\n  upstream backend {\n    server backend:8000;\n  }\n\n  upstream frontend {\n    server frontend:5173;\n  }\n\n  upstream centrifugo {\n    server centrifugo:8000;\n  }\n\n  server {\n    listen 80;\n\n    server_name localhost 127.0.0.1;\n\n    location /api {\n      proxy_pass          http://backend;\n      proxy_http_version  1.1;\n      proxy_redirect      default;\n      proxy_set_header    Upgrade $http_upgrade;\n      proxy_set_header    Connection \"upgrade\";\n      proxy_set_header    Host $host;\n      proxy_set_header    X-Real-IP $remote_addr;\n      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header    X-Forwarded-Host $server_name;\n    }\n\n    location /admin {\n      proxy_pass          http://backend;\n      proxy_http_version  1.1;\n      proxy_redirect      default;\n      proxy_set_header    Upgrade $http_upgrade;\n      proxy_set_header    Connection \"upgrade\";\n      proxy_set_header    Host $host;\n      proxy_set_header    X-Real-IP $remote_addr;\n      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header    X-Forwarded-Host $server_name;\n    }\n\n    location /static {\n      proxy_pass          http://backend;\n      proxy_set_header    Host $host;\n      proxy_http_version  1.1;\n      proxy_redirect      default;\n    }\n\n    location /connection/websocket {\n      proxy_pass          http://centrifugo;\n      proxy_http_version  1.1;\n      proxy_redirect      default;\n      proxy_set_header    Upgrade $http_upgrade;\n      proxy_set_header    Connection \"upgrade\";\n      proxy_set_header    Host $host;\n      proxy_set_header    X-Real-IP $remote_addr;\n      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header    X-Forwarded-Host $server_name;\n    }\n\n    location / {\n      proxy_pass          http://frontend;\n      proxy_http_version  1.1;\n      proxy_redirect      default;\n      proxy_set_header    Upgrade $http_upgrade;\n      proxy_set_header    Connection \"upgrade\";\n      proxy_set_header    Host $host;\n      proxy_set_header    X-Real-IP $remote_addr;\n      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header    X-Forwarded-Host $server_name;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protobuf Push Message Definition\nDESCRIPTION: Protocol buffer message definition for Push frames used in unidirectional transports, defining various types of messages that can be pushed to clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Push {\n  string channel = 2;\n\n  Publication pub = 4;\n  Join join = 5;\n  Leave leave = 6;\n  Unsubscribe unsubscribe = 7;\n  Message message = 8;\n  Subscribe subscribe = 9;\n  Connect connect = 10;\n  Disconnect disconnect = 11;\n  Refresh refresh = 12;\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Command Response Example - JSON\nDESCRIPTION: Shows an example JSON response from Centrifugo when multiple batch commands are sent. Each reply corresponds to an individual batch operation, reporting success or detailing errors per command. No dependencies; the structure matches what the API returns to the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"replies\":[\n        {\"publish\":{}},\n        {\"error\":{\"code\":102,\"message\":\"unknown channel\"}}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed TLS Certificate Step 2\nDESCRIPTION: Command to generate the final self-signed certificate from the key and CSR files.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -req -sha256 -days 365 -in server.csr -signkey server.key -out server.crt\n```\n\n----------------------------------------\n\nTITLE: Connection Limit Disconnect Code\nDESCRIPTION: Disconnect code issued when a client connection exceeds configured connection limits, either per user ID or other rules.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3504\nReason: \"connection limit\"\n```\n\n----------------------------------------\n\nTITLE: Channel State Event Payload Structure\nDESCRIPTION: Example of the JSON payload structure that Centrifugo PRO sends to the configured webhook endpoint. Shows the events array containing channel state information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/channel_events.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"events\": [\n        {\"channel\": \"chat:index\", \"type\": \"occupied\", \"time_ms\": 1697206286533},\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Per-Namespace Proxies in Centrifugo Configuration (JSON)\nDESCRIPTION: This JSON configuration snippet (`config.json`) demonstrates how to define multiple, named proxy configurations within the top-level `proxies` array. Each object specifies a unique `name` (matching `^[-a-zA-Z0-9_.]{2,}$`), an `endpoint` (HTTP or gRPC), and potentially other proxy settings. These named proxies (e.g., `subscribe1`, `publish2`, `rpc1`) can then be referenced by channel or RPC namespaces for more granular routing, useful in microservice architectures.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxies\": [\n    {\n      \"name\": \"subscribe1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/subscribe\"\n    },\n    {\n      \"name\": \"publish1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/publish\"\n    },\n    {\n      \"name\": \"subscribe2\",\n      \"endpoint\": \"http://localhost:3002/centrifugo/subscribe\"\n    },\n    {\n      \"name\": \"publish2\",\n      \"endpoint\": \"grpc://localhost:3002\"\n    },\n    {\n      \"name\": \"rpc1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/rpc\"\n    },\n    {\n      \"name\": \"rpc2\",\n      \"endpoint\": \"grpc://localhost:3002\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Open Files Limit (ulimit)\nDESCRIPTION: Displays the maximum number of open file descriptors allowed for the current shell session. This limit affects the number of concurrent connections Centrifugo can handle.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/infra_tuning.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nulimit -n\n```\n\n----------------------------------------\n\nTITLE: Configuring Unidirectional HTTP Stream in Centrifugo (JSON)\nDESCRIPTION: This snippet shows how to enable the unidirectional HTTP streaming endpoint in Centrifugo by setting the \\\"uni_http_stream\\\" parameter to true in config.json. This enables clients to establish connections to the /connection/uni_http_stream endpoint. No external dependencies are required besides Centrifugo itself. Expects a JSON configuration file, with the only constraint being boolean values for endpoint activation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_http_stream.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"uni_http_stream\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy Response Status Code Transforms in Centrifugo\nDESCRIPTION: This JSON configuration allows customizing how Centrifugo transforms HTTP status codes from proxy responses into specific error objects. It defines mappings for 404, 403, and 429 status codes to corresponding error codes, messages, and temporary flags.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proxy_http_status_code_transforms\": [\n    {\"status_code\": 404, \"to_error\": {\"code\": 404, \"message\": \"not found\", \"temporary\": false}},\n    {\"status_code\": 403, \"to_error\": {\"code\": 403, \"message\": \"permission denied\", \"temporary\": false}},\n    {\"status_code\": 429, \"to_error\": {\"code\": 429, \"message\": \"too many requests\", \"temporary\": true}}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Proxy Configuration\nDESCRIPTION: Configuration example for setting up the publish proxy endpoint and timeout\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"proxy_publish_endpoint\": \"http://localhost:3000/centrifugo/publish\",\n  \"proxy_publish_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running ClickHouse Server with Docker - Bash Command\nDESCRIPTION: This bash command runs a ClickHouse server instance locally using Docker, mapping the default ClickHouse port and mounting storage to persist data. No inputs beyond Docker and an accessible yandex/clickhouse-server image are required. Output is a running ClickHouse server instance at tcp://127.0.0.1:9000 for use by Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/analytics.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run -it --rm -v /tmp/clickhouse:/var/lib/clickhouse -p 9000:9000 --name click yandex/clickhouse-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxied HTTP Headers in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the `proxy_http_headers` option in Centrifugo's configuration file (`config.json`). It specifies an array of HTTP header names (e.g., `Origin`, `Cookie`, `Authorization`) that Centrifugo should forward from the original client request to the application backend when making proxy requests. This is crucial for maintaining context like authentication across the proxy.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"proxy_http_headers\": [\n        \"Origin\",\n        \"User-Agent\",\n        \"Cookie\",\n        \"Authorization\",\n        \"X-Real-Ip\",\n        \"X-Forwarded-For\",\n        \"X-Request-Id\"\n    ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Publish Proxy for Channels without Namespace (JSON)\nDESCRIPTION: Configures Centrifugal to use the defined publish proxy endpoint for channels that do not belong to a specific namespace. This is achieved by setting `publish_proxy_enabled: true` under the `without_namespace` section within the channel configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"channel\": {\n    \"proxy\": {\n      \"publish\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/publish\"\n      }\n    },\n    \"without_namespace\": {\n      \"publish_proxy_enabled\": true\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sending a Subscribe Command in JSON\nDESCRIPTION: This JSON object represents a 'subscribe' command sent from a client to the Centrifugal server. The 'method' field (1) indicates subscription, and the 'params' object specifies the 'channel' the client wishes to subscribe to. An 'id' is included for correlating the response.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2,\n    \"method\": 1,\n    \"params\": {\n        \"channel\": \"ch1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscribe Stream Proxy in Centrifugo\nDESCRIPTION: JSON configuration for enabling the subscribe stream proxy endpoint in Centrifugo. This specifies the GRPC endpoint and timeout for subscription streams.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy_streams.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_stream_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_subscribe_stream_timeout\": \"3s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Cache Empty Proxy (Centrifugo, JSON)\nDESCRIPTION: This configuration enables the cache empty proxy globally, i.e., for all channels without a namespace, by setting 'proxy_cache_empty' to true at the top level. The proxy endpoint and timeout are also defined. No additional per-channel setup is required with this configuration. The backend endpoint must handle cache empty event notifications for any applicable channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/channel_cache_empty.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_cache_empty_endpoint\": \"http://localhost:3000/centrifugo/subscribe\",\n  \"proxy_cache_empty_timeout\":  \"1s\",\n  \"proxy_cache_empty\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache Empty Proxy for a Namespace (Centrifugo, JSON)\nDESCRIPTION: This snippet shows how to enable the cache empty proxy mechanism only for channels within the 'example' namespace. Under 'namespaces', set 'proxy_cache_empty' to true for the target namespace. The proxy endpoint and timeout settings must also be defined at the top level. This allows for granular control over which channel namespaces will trigger cache empty event notifications to the backend.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/channel_cache_empty.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_cache_empty_endpoint\": \"http://localhost:3000/centrifugo/subscribe\",\n  \"proxy_cache_empty_timeout\":  \"1s\",\n  \"namespaces\": [{\n    \"name\": \"example\",\n    \"proxy_cache_empty\": true\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins in Centrifugo v6 - JSON\nDESCRIPTION: Demonstrates the updated Centrifugo v6 configuration syntax with 'allowed_origins' nested under the 'client' block. This structure clarifies the context for each option and makes management easier. The config is provided as a JSON file, requiring Centrifugo v6 and is used as a server configuration input.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"client\": {\n        \"allowed_origins\": [\"https://example.com\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Engine in Centrifugo (JSON)\nDESCRIPTION: This snippet shows how to configure Centrifugo's engine to use Redis instead of the default memory-based option. The configuration is set in a top-level \"engine\" object, specifying the \"type\" as \"redis\" along with an empty \"redis\" block for defaults. Requires a running Redis server and Centrifugo version supporting distributed mode.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WRONG: Unintended Channel Capability Overlap - Centrifugo PRO - JSON\nDESCRIPTION: This JSON snippet illustrates a subtle configuration error: the channel 'user_42' is included in two different cap objects, but only the first match is used by Centrifugo (here, only 'sub' is granted, even though other capabilities are present later). This can cause users to lack intended permissions. Always avoid duplication and group all permissions for a channel together.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/capabilities.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\", \"user_42\"],\n            \"allow\": [\"sub\"]\n        },\n        {\n            \"channels\": [\"user_42\"],\n            \"allow\": [\"pub\", \"hst\", \"prs\"]\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a Custom Disconnect from Centrifugo Proxy Backend (JSON)\nDESCRIPTION: This JSON structure shows how a backend application handling a Centrifugo proxy request can instruct Centrifugo to disconnect the client connection in a specific way. The `code` must be between 4000-4999, `reason` is a short description (max 32 chars), and `reconnect` (boolean) suggests if the client should attempt to reconnect.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disconnect\": {\n    \"code\": 4000,\n    \"reconnect\": false,\n    \"reason\": \"custom disconnect\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GRPC API via Configuration - JSON\nDESCRIPTION: Presents a config.json snippet to enable Centrifugo\\'s GRPC API by setting the \"grpc_api\" key to true. This requires modifying the Centrifugo server configuration and restarting the server for the setting to take effect. No direct input/output: this is a static setup step.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"grpc_api\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Too Many Requests (111)\nDESCRIPTION: Returned when the server rejects a client request due to rate limiting policies being enforced. This error is marked as temporary, suggesting the client should retry after a delay.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    111\nMessage: \"too many requests\"\nTemporary: true\n```\n\n----------------------------------------\n\nTITLE: Example Join Push Frame (JSON)\nDESCRIPTION: Demonstrates the JSON structure of a `join` push message. This is sent over a unidirectional connection when join/leave notifications are enabled for a channel and a client subscribes. It includes the `channel` name and `info` about the joining client (user ID, client ID).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\":\"#2694\",\n  \"join\":{\n    \"info\":{\"user\":\"2694\",\"client\":\"99288691-e378-4a03-a34d-bf2c0dab6b51\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with Haproxy for Redis HA (Shell)\nDESCRIPTION: Starts Centrifugo configured to use the Redis engine, but directs the Redis connection (`redis_address`) to the Haproxy listener (`localhost:16379`) instead of directly to Redis nodes or Sentinels. This approach leverages Haproxy to handle Redis failover and load balancing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n```\ncentrifugo --config=config.json --engine=redis --redis_address=\"localhost:16379\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ApnsPushNotification Object - Centrifugo - Markdown\nDESCRIPTION: This Markdown snippet documents the 'ApnsPushNotification' object for Apple Push Notification Service use within Centrifugo, listing both optional APNs headers and mandatory JSON payload fields. The table contains links to Apple developer resources to further clarify the details of each part. It serves as technical documentation for developers building notification payloads for APNs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n`ApnsPushNotification`:\n\n| Field     | Type                | Required | Description                                                                                                                                               |\n|-----------|---------------------|----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `headers` | `map[string]string` | No       | APNs [headers](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns) |\n| `payload` | `JSON` object       | Yes      | APNs [payload](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/generating_a_remote_notification)      |\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Docker Service\nDESCRIPTION: Docker Compose configuration for setting up Centrifugo WebSocket server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-03-18-stream-loki-logs-to-browser-with-websocket-to-grpc-subscriptions.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  centrifugo:\n    image: centrifugo/centrifugo:v5.3.0\n    restart: unless-stopped\n    volumes:\n      - ./centrifugo/config.json:/centrifugo/config.json\n    command: centrifugo -c config.json\n    expose:\n      - 8000\n```\n\n----------------------------------------\n\nTITLE: Starting Second Centrifugo Instance with Nats Broker in Bash\nDESCRIPTION: This command starts a second Centrifugo instance, also configured to use Nats as the broker (`--broker=nats`). It uses the same configuration file (`--config=config.json`) but specifies a different listening port (`--port=8001`) using the `--port` flag to avoid conflicts with the first instance. This demonstrates how to run multiple Centrifugo nodes (potentially on different machines) connected via Nats for load balancing and high availability.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncentrifugo --broker=nats --config=config.json --port=8001\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Group-Based Access with access_cel in OIDC Config - JavaScript\nDESCRIPTION: This snippet demonstrates how to set the 'access_cel' field in the OIDC configuration for Centrifugo admin UI to allow access based on group membership. The CEL (Common Expression Language) expression ensures only users in the 'centrifugo_admins' group can use the admin UI. The configuration requires the claims object in the access token to include relevant group details. This entry is intended for scenarios where admin access should be restricted strictly to a specific user group and should be input as part of your JSON configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/admin_idp_auth.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript title=\\\"config.json\\\"\n{\n  ...\n  \\\"admin_oidc\\\": {\n    ...\n    \\\"access_cel\\\": \\\"'centrifugo_admins' in claims.groups\\\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Benchmarking JSON Encoding/Decoding Performance - Bash\nDESCRIPTION: This Bash code snippet presents comprehensive benchmark results for JSON serialization and deserialization in Centrifugo v2 and v3, allowing side-by-side comparison of encoding/decoding speeds and memory allocations. Typically output from Go's testing framework, required context includes the CPU platform. Inputs are the serialization functions being benchmarked and payload size; outputs are benchmark timings and memory profile. Constraints may vary based on the Centrifugo version and optimization libraries applied.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-08-31-hello-centrifugo-v3.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\\nBenchmarkMarshal-12             \\t 5883 ns/op\\t    1121 B/op\\t    6 allocs/op\\nBenchmarkMarshalParallel-12      \\t 1009 ns/op\\t    1121 B/op\\t    6 allocs/op\\nBenchmarkUnmarshal-12           \\t 1717 ns/op\\t    1328 B/op\\t   16 allocs/op\\nBenchmarkUnmarshalParallel-12    \\t492.2 ns/op\\t    1328 B/op\\t   16 allocs/op\n```\n\nLANGUAGE: bash\nCODE:\n```\ncpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\\nBenchmarkMarshal-12             \\t 461.3 ns/op\\t 928 B/op\\t    3 allocs/op\\nBenchmarkMarshalParallel-12      \\t 250.6 ns/op\\t 928 B/op\\t    3 allocs/op\\nBenchmarkUnmarshal-12           \\t 476.5 ns/op\\t 136 B/op\\t    3 allocs/op\\nBenchmarkUnmarshalParallel-12    \\t 107.2 ns/op\\t 136 B/op\\t    3 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3500 (Invalid Token)\nDESCRIPTION: Defines the 'Invalid Token' disconnect code (3500). This is a terminal code issued when a client connects or presents a token that is invalid, malformed, or rejected by the authentication mechanism. Clients will not automatically reconnect upon receiving this code.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nCode:   3500\nReason: \"invalid token\"\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP-streaming Endpoint in Centrifugo Configuration - JSON\nDESCRIPTION: This JSON snippet shows how to enable the HTTP-streaming endpoint by setting the 'http_stream' property to true in the Centrifugo configuration file. This allows clients to connect to the /connection/http_stream and /emulation endpoints for bidirectional emulation. This setting should be added to the main Centrifugo configuration file ('config.json'), and requires a running Centrifugo server supporting these features. Additional properties and configuration items can be added as needed. No input parameters are required other than the Boolean flag, and no output is produced beyond the activation of the HTTP-streaming endpoint upon server restart.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/http_stream.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"http_stream\": true\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating User Status via Centrifugo Server API using Bash cURL\nDESCRIPTION: This Bash cURL snippet shows how to update the status of specified users directly via Centrifugo's server API HTTP endpoint. It requires an appropriate API key and the Centrifugo server running at the specified address. The input is a JSON payload with a users array, and the expected output is an (currently empty) confirmation object. Useful for backend integrations, automated tests, or administrative overrides; does not reflect immediate client activity unless proxied accordingly.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_status.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"users\": [\"42\"]}' \\\n  http://localhost:8000/api/update_user_status\n```\n\n----------------------------------------\n\nTITLE: Permission Denied Disconnect Code\nDESCRIPTION: Disconnect code issued when a client attempts to access a server without sufficient permissions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_34\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3507\nReason: \"permission denied\"\n```\n\n----------------------------------------\n\nTITLE: Unsubscribe Command JSON Structure\nDESCRIPTION: Example JSON structure for unsubscribing a user from a channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"unsubscribe\",\n    \"params\": {\n        \"channel\": \"CHANNEL NAME\",\n        \"user\": \"USER ID\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Subscribe Proxy Error Response\nDESCRIPTION: Example of an error response that denies the subscription request. The error code 403 indicates that the client does not have permission to subscribe to the requested channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": 403,\n    \"message\": \"permission denied\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Subscribe Proxy Per Namespace in Centrifugo Configuration - JSON\nDESCRIPTION: Demonstrates enabling proxy subscription for specific channel namespaces (here, \\\\\"sun\\\\\"). This configuration adds a \\\\\"namespaces\\\\\" array to enable the subscribe proxy flag at the namespace level. Each namespace section may have its own options, but here only the \\\\\"proxy_subscribe\\\\\" boolean is shown. Endpoint and timeout remain at the global level. Used for more granular access control or behavioral differences per namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_endpoint\": \"http://localhost:3000/centrifugo/subscribe\",\n  \"proxy_subscribe_timeout\":  \"1s\",\n  \"namespaces\": [{\n    \"name\": \"sun\",\n    \"proxy_subscribe\": true\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Redis Commands with uber-go/ratelimit in Go\nDESCRIPTION: This snippet demonstrates how to use the uber-go/ratelimit library to limit the rate of Redis commands to 100,000 per second, distributing them evenly across milliseconds for smoother execution.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nrl := ratelimit.New(100, ratelimit.Per(time.Millisecond))\nfor {\n\trl.Take()\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Subscribers to a Channel in ClickHouse (SQL)\nDESCRIPTION: Calculates the number of unique users subscribed to a specific channel ('chat:index') in the last 5 minutes using 'subscriptions_distributed'. May be approximate due to table snapshot frequency and client unsubscriptions in between. Requires 'channels' as an array column and relies on timely snapshot entries for accuracy.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(Distinct(user))\nFROM centrifugo.subscriptions_distributed\nWHERE arrayExists(x -> (x = 'chat:index'), channels) AND (time >= (now() - toIntervalMinute(5)));\n\n‚îå‚îÄuniqExact(user)‚îÄ‚îê\n‚îÇ             101 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Batch Command Example - JSON Format\nDESCRIPTION: Example of multiple commands batched together using line-delimited JSON format.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_protocol.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"subscribe\": {\"channel\": \"ch1\"}}\n{\"id\": 2, \"subscribe\": {\"channel\": \"ch2\"}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Unidirectional WebSocket in Centrifugo Configuration (JSON)\nDESCRIPTION: Shows how to enable the unidirectional WebSocket transport in the Centrifugo server configuration file (`config.json`) by setting the `uni_websocket` key to `true`. This setting activates the `/connection/uni_websocket` endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_websocket.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"uni_websocket\": true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Constructing a Personal Channel Name for Real-Time User Messaging (JavaScript)\nDESCRIPTION: Builds the personal channel identifier for a user by concatenating the 'personal' namespace and the user ID. This channel name is used for subscribing and publishing user-specific data in Centrifugo. Requires userInfo object with id property.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst personalChannel = 'personal:' + userInfo.id\n\n```\n\n----------------------------------------\n\nTITLE: Default Unidirectional EventSource Endpoint URL (Disabled)\nDESCRIPTION: This URL path is designated for unidirectional communication using Server-Sent Events (EventSource). It is disabled by default.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:8000/connection/uni_sse\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Unauthorized (101)\nDESCRIPTION: Returned when a client's request is unauthorized. This signifies that the client lacks the necessary permissions or credentials to perform the requested action.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    101\nMessage: \"unauthorized\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Proxy Endpoint and Timeout - Centrifugo - JSON\nDESCRIPTION: This JSON configuration sets the HTTP endpoint to which Centrifugo should proxy connection (connect) events and specifies a timeout for the request. 'proxy_connect_endpoint' should contain the full URL of your backend endpoint, and 'proxy_connect_timeout' defines how long Centrifugo will wait for the backend's response. This is essential to enable backend-based authentication or custom connection logic.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_connect_endpoint\": \"http://localhost:3000/centrifugo/connect\",\n  \"proxy_connect_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ClickHouse Distributed Connections Table in SQL\nDESCRIPTION: This SQL snippet demonstrates the creation of a distributed 'connections' table in ClickHouse for Centrifugo. It uses the Distributed engine to distribute data across the cluster.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.connections_distributed\n(\n    `client` String,\n    `user` String,\n    `name` String,\n    `version` String,\n    `transport` String,\n    `headers` Map(String, Array(String)),\n    `metadata` Map(String, Array(String)),\n    `time` DateTime\n)\nENGINE = Distributed('centrifugo_cluster', 'centrifugo', 'connections', murmurHash3_64(client))\n```\n\n----------------------------------------\n\nTITLE: Documenting Send Push Notification Request Object - Centrifugo - Markdown\nDESCRIPTION: This snippet defines the schema for the 'send_push_notification' request in Centrifugo using a Markdown table. It details all supported fields, their types, requirements, and in-depth descriptions, including advanced options such as reliability and localization. The table acts as a contract for developers, specifying which fields are required, recommended practices (like UUID for uid), and semantic behaviors of options such as templating and rate limiting. No dependencies are required as this is pure Markdown suitable for documentation purposes, and the expected usage is as technical reference for constructing correct API requests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n#### send_push_notification request\n\n| Field name                 | Type                          | Required | Description                                                                                                                                                                |\n|----------------------------|-------------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `recipient`                | `PushRecipient`               | Yes      | Recipient of push notification                                                                                                                                             |\n| `notification`             | `PushNotification`            | Yes      | Push notification to send                                                                                                                                                  |\n| `uid`                      | `string`                      | No       | Unique identifier for each push notification request, can be used to cancel push. We recommend using UUID v4 for it. Two different requests must have different `uid`      |\n| `send_at`                  | `int64`                       | No       | Optional Unix time in the future (in seconds) when to send push notification, push will be queued until that time.                                                         |\n| `optimize_for_reliability` | `bool`                        | No       | Makes processing heavier, but tolerates edge cases, like not loosing inflight pushes due to temporary queue unavailability.                                                |\n| `limit_strategy`           | `PushLimitStrategy`           | No       | Can be used to set push time constraints (based on device timezone) adnd rate limits. Note, when it's used Centrifugo processes pushes one by one instead of batch sending |\n| `analytics_uid`            | `string`                      | No       | Identifier for push notification analytics, if not set - Centrifugo will use `uid` field.                                                                                  |\n| `localizations`            | `map[string]PushLocalization` | No       | Optional per language localizations for push notification.                                                                                                                 |\n| `use_templating`           | `bool`                        | No       | If set - Centrifugo will use templating for push notification. Note that setting localizations enables templating automatically.                                           |\n| `use_meta`                 | `bool`                        | No       | If set - Centrifugo will additionally load device meta during push sending, this meta becomes available in templating.                                                     |\n\n```\n\n----------------------------------------\n\nTITLE: Including Channels Claim in Connection JWT for Server-Side Subscription (JSON)\nDESCRIPTION: This JSON object outlines the structure of a JWT claim used for server-side channel subscriptions in Centrifugo. By specifying the 'channels' field, the server subscribes the user to the listed channels immediately upon connection. Requires JWT generation and proper claim setup on the authentication backend. The key parameter is 'channels', which lists channel names to subscribe to, and users must ensure that the value matches the intended channel structure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"sub\": \"17\",\n    \"channels\": [\"personal:17\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Internal Server Error (100)\nDESCRIPTION: Indicates an internal server error occurred within Centrifugo. This suggests a problem with the server itself, not typically caused by the client action. The error is marked as temporary, implying a retry might succeed later.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    100\nMessage: \"internal server error\"\nTemporary: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Singleflight in Centrifugo\nDESCRIPTION: Configuration snippet to enable singleflight feature in Centrifugo PRO, which merges identical parallel requests into one network request.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/scalability.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"singleflight\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3009 (Write Error)\nDESCRIPTION: Defines the 'Write Error' disconnect code (3009). This is a non-terminal code issued when the server encounters an error while attempting to send data to the client's connection (e.g., network error, closed socket). Clients are expected to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nCode:   3009\nReason: \"write error\"\n```\n\n----------------------------------------\n\nTITLE: Loading Debezium Configuration into Kafka Connect via Docker Compose (YAML)\nDESCRIPTION: Defines a utility service `connect-config-loader` in `docker-compose.yml` that uses a `curl` image to automatically apply the Debezium connector configuration. It waits for the Kafka Connect service (`connect`) to become available, then uses `curl` to delete any existing connector with the same name and POST the new configuration from the mounted `debezium-config.json` file via the Kafka Connect REST API. This is intended for development convenience.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nconnect-config-loader:\n  image: appropriate/curl:latest\n  depends_on:\n    - connect\n  volumes:\n    - ./debezium/debezium-config.json:/debezium-config.json\n  command: >\n    /bin/sh -c \"\n      echo 'Waiting for Kafka Connect to start...';\n      while ! curl -f http://connect:8083/connectors; do sleep 1; done;\n      echo 'Kafka Connect is up, posting configuration';\n      curl -X DELETE -H 'Content-Type: application/json' http://connect:8083/connectors/chat-connector;\n      curl -X POST -H 'Content-Type: application/json' -v --data @/debezium-config.json http://connect:8083/connectors;\n      echo 'Configuration posted';\n    \"\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Persistence for Token Revocation\nDESCRIPTION: JSON configuration for setting up PostgreSQL database as a persistence engine for token revocation data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/token_revocation.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"database\": {\n    \"enabled\": true,\n    \"postgresql\": {\n      \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    }\n  },\n  \"user_tokens_invalidate\": {\n    \"storage_type\": \"database\"\n  },\n  \"token_revoke\": {\n    \"storage_type\": \"database\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing First Connection to Centrifugo via Uni HTTP Stream using Bash\nDESCRIPTION: This `curl` command establishes a persistent connection to the Centrifugo server running on localhost:8000 using the `uni_http_stream` endpoint. It sends a POST request with a JSON payload containing the previously generated JWT (`token`) for user 42 and a client application name (`name`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/connections.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/connection/uni_http_stream --data '{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0MiIsImV4cCI6MTYyNzcxMzMzNX0.s3eOhujiyBjc4u21nuHkbcWJll4Um0QqGU3PF-6Mf7Y\", \"name\": \"terminal\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Redis Clusters via Environment Variable\nDESCRIPTION: Command to configure sharding between multiple Redis clusters using environment variables. Spaces separate different clusters, while commas separate nodes within the same cluster.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_REDIS_CLUSTER_ADDRESS=\"localhost:30001,localhost:30002 localhost:30101,localhost:30102\" CENTRIFUGO_ENGINE=redis ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Error from Backend (JSON)\nDESCRIPTION: Describes the JSON structure a backend application should return to send a custom error back to the client via Centrifugo. Requires error codes between 400 and 1999. This response is not applicable for refresh/sub-refresh proxy requests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": 1000,\n    \"message\": \"custom error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Disconnect Response for Unauthorized Connections - JSON\nDESCRIPTION: This JSON response example is used by backend services to signal Centrifugo that a remote client should be disconnected due to failed authentication or authorization. The 'disconnect' object contains a Centrifugo-defined code (e.g., 4501) and a developer-specified 'reason'. This response is sent to Centrifugo from the connect proxy endpoint in case of an unauthorized connection attempt. The 'code' and 'reason' fields are customizable based on project requirements.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disconnect\": {\n    \"code\": 4501,\n    \"reason\": \"unauthorized\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to GitHub Pages\nDESCRIPTION: Command to build and deploy the website to GitHub Pages, requiring GitHub username and SSH configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nGIT_USER=<Your GitHub username> USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Sample Proxy Refresh Success Response Payload for Centrifugo (JSON)\nDESCRIPTION: This JSON snippet shows a standard success response for a refresh proxy request, returning a new expiration time for the connection. The 'expire_at' is a Unix timestamp indicating when the connection should expire. The backend should return this structure as a result of processing a refresh request. Input: Refresh POST request. Output: JSON response updating expiry.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {\"expire_at\": 1565436268}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Unknown Configuration Key Warnings in Centrifugo v5 Logs\nDESCRIPTION: Illustrates the warning log messages (`WRN`) produced by Centrifugo v5 upon startup when it detects unknown configuration keys. These warnings can appear for keys found in namespace objects, proxy objects, the main configuration file, or environment variables (prefixed with `CENTRIFUGO_`). This feature helps identify typos or deprecated options without preventing the server from starting.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-06-29-centrifugo-v5-released.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n```\n08:25:33 [WRN] unknown key found in the namespace object key=watch namespace_name=xx\n08:25:33 [WRN] unknown key found in the proxy object key=type proxy_name=connect\n08:25:33 [WRN] unknown key found in the configuration file key=granulr_proxy_mode\n08:25:33 [WRN] unknown key found in the environment key=CENTRIFUGO_ADDRES\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo Server Using Config File (Console)\nDESCRIPTION: Runs Centrifugo using only a configuration file path. This approach works if the config file has admin UI enabled. Useful for simplified or automated server startups.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n./centrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Decoding Replies from JSON Lines - JavaScript\nDESCRIPTION: A JavaScript example function that parses multi-line JSON server replies into an array of JavaScript objects. Used by clients to ingest response messages received via line-delimited JSON over WebSocket. It splits the text block by newline, skips empty lines, parses each as JSON, and accumulates replies. No external dependencies. Input is a newline-delimited string; output is a JavaScript array of reply objects.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Patterns in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON snippet configures Centrifugo PRO to enable channel patterns, allowing dynamic variable segments in channel namespaces. The 'channel_patterns' property must be set to true, and 'namespaces' defines channel patterns using colon-prefixed variable placeholders. Each namespace can include options specific to the pattern. The configuration requires Centrifugo PRO, and is intended for server-side setup. Inputs include valid Centrifugo config fields; outputs are the server applying dynamic channel namespace matching. Limitations include ASCII-only patterns, no pattern conflicts, unique variable names per pattern, and no top-level namespace for pattern-matched channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/channel_patterns.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // rest of the config ...\n    \"channel_patterns\": true, // required to turn on the feature.\n    \"namespaces\": [\n        {\n            \"name\": \"/users/:name\"\n            // namespace options may go here ...\n        },\n        {\n            \"name\": \"/events/:project/:type\"\n            // namespace options may go here ...\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Error Rate Limits in Centrifugo PRO JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable and set up client-side error rate limits within Centrifugo PRO. It defines a bucket where if a client generates more than 20 protocol errors within a 5-second interval, the connection will be disconnected. This feature helps mitigate load from abusive or broken connections by automatically disconnecting them.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/rate_limiting.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"client\": {\n    \"rate_limit\": {\n      \"client_error\": {\n        \"enabled\": true,\n        \"total\": {\n          \"enabled\": true,\n          \"buckets\": [\n            {\n              \"interval\": \"5s\",\n              \"rate\": 20\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Subscribe Proxy Endpoint and Namespace - JSON\nDESCRIPTION: These JSON configuration snippets show how to enable Centrifugo's subscribe proxy globally or for specific namespaces. 'proxy_subscribe_endpoint' and 'proxy_subscribe_timeout' configure the backend endpoint and request timeout, and 'proxy_subscribe' enables the proxy either in the global config or under specific channel namespaces. The namespace pattern allows developers to control proxy checks per logical channel grouping.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_endpoint\": \"http://localhost:3000/centrifugo/subscribe\",\n  \"proxy_subscribe_timeout\":  \"1s\",\n  \"proxy_subscribe\": true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_endpoint\": \"http://localhost:3000/centrifugo/subscribe\",\n  \"proxy_subscribe_timeout\":  \"1s\",\n  \"namespaces\": [{\n    \"name\": \"sun\",\n    \"proxy_subscribe\": true\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo PRO with Docker\nDESCRIPTION: This command demonstrates how to run the Centrifugo PRO Docker image (`centrifugo/centrifugo-pro`). It maps the host's port 8000 to the container's port 8000, mounts a host directory containing the configuration file (`config.json`) to `/centrifugo` inside the container, increases the file descriptor limit (`ulimit`), and starts Centrifugo using the specified configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/install_and_run.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --ulimit nofile=65536:65536 -v /host/dir/with/config/file:/centrifugo -p 8000:8000 centrifugo/centrifugo-pro:v3.2.2 centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Setting an Initial Subscription Token in Javascript\nDESCRIPTION: Shows how to provide a pre-generated JWT as a subscription token when creating a new Centrifuge subscription using the Javascript SDK. The token is passed within the options object during the `newSubscription` call.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst sub = centrifuge.newSubscription(channel, {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE'\n});\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Centrifugo on a Separate Domain (nginx)\nDESCRIPTION: This Nginx configuration sets up a reverse proxy for Centrifugo running on its own domain (e.g., centrifugo.example.com). It defines an upstream group named `centrifugo` pointing to the backend server (127.0.0.1:8000), maps HTTP upgrade headers for WebSocket support, and includes separate location blocks for general proxying (`/`) and WebSocket connections (`/connection`). Key settings include proxy headers (`X-Real-IP`, `X-Scheme`, `Host`), WebSocket upgrade headers (`Upgrade`, `Connection`), keepalive timeout, read timeout, and basic optimizations like gzip. It requires Nginx version 1.3.13+ for WebSocket support. The `ip_hash` directive is commented out but can be enabled for sticky sessions with SockJS.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/load_balancing.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\n    # uncomment ip_hash if using SockJS transport with many upstream servers.\n    #ip_hash;\n    server 127.0.0.1:8000;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\n#server {\n#\tlisten 80;\n#\tserver_name centrifugo.example.com;\n#\trewrite ^(.*) https://$server_name$1 permanent;\n#}\n\nserver {\n\n    server_name centrifugo.example.com;\n\n    listen 80;\n\n    #listen 443 ssl;\n    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    #ssl_certificate /etc/nginx/ssl/server.crt;\n    #ssl_certificate_key /etc/nginx/ssl/server.key;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    gzip on;\n    gzip_min_length 1000;\n    gzip_proxied any;\n\n    # Only retry if there was a communication error, not a timeout\n    # on the Centrifugo server (to avoid propagating \"queries of death\"\n    # to all frontends)\n    proxy_next_upstream error;\n\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Scheme $scheme;\n    proxy_set_header Host $http_host;\n\n    location /connection {\n        proxy_pass http://centrifugo;\n        proxy_buffering off;\n        keepalive_timeout 65;\n        proxy_read_timeout 60s;\n        proxy_http_version 1.1;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n    }\n    \n    location / {\n        proxy_pass http://centrifugo;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Subscription Setup in Go\nDESCRIPTION: Configuration for automatically subscribing clients to channels during connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nnode.OnConnecting(func(ctx context.Context, e centrifuge.ConnectEvent) (centrifuge.ConnectReply, error) {\n    return centrifuge.ConnectReply{\n        Subscriptions: map[string]centrifuge.SubscribeOptions{\n            \"example\": {},\n        },\n    }, nil\n})\n```\n\n----------------------------------------\n\nTITLE: Mapping Centrifugo Error Codes to HTTP Status Codes (Go)\nDESCRIPTION: Presents a Go function that maps Centrifugo-specific error codes to appropriate HTTP status codes. Intended for server-side error handling logic to ensure API responses use conventional HTTP codes. Required dependency: net/http constants.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_30\n\nLANGUAGE: go\nCODE:\n```\nfunc MapErrorToHTTPCode(err *Error) int {\n\tswitch err.Code {\n\tcase ErrorInternal.Code: // 100 -> HTTP 500\n\t\treturn http.StatusInternalServerError\n\tcase ErrorUnknownChannel.Code, ErrorNotFound.Code: // 102, 104 -> HTTP 404\n\t\treturn http.StatusNotFound\n\tcase ErrorBadRequest.Code, ErrorNotAvailable.Code: // 107, 108 -> HTTP 400\n\t\treturn http.StatusBadRequest\n\tcase ErrorUnrecoverablePosition.Code: // 112 -> HTTP 416\n\t\treturn http.StatusRequestedRangeNotSatisfiable\n\tcase ErrorConflict.Code: // 113 -> HTTP 409\n\t\treturn http.StatusConflict\n\tdefault:\n\t\t// Default to Internal Error for unmapped errors.\n\t\t// In general should be avoided - all new API errors must be explicitly described here.\n\t\treturn http.StatusInternalServerError // HTTP 500\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo v4 Legacy HTTP API Request Format\nDESCRIPTION: Example of the old HTTP API format used in Centrifugo v4, showing the nested method and params structure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-06-29-centrifugo-v5-released.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey API_KEY\" \\\n  --request POST \\\n  --data '{\"method\": \"publish\", \"params\": {\"channel\": \"test\", \"data\": {\"x\": 1}}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Refresh Proxy Request Payload Example\nDESCRIPTION: Example of the JSON payload sent from Centrifugo to the backend application during a refresh request. Contains client information including ID, transport, protocol, encoding, and user ID.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\"\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving an Error Reply in JSON (Centrifugo Protocol)\nDESCRIPTION: Example of a full server reply in JSON format indicating an error occurred while processing a command. The `id: 1` matches the client's command, and the `error` field contains the details (code and message) of the failure, replacing the expected result field.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_protocol.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"error\": {\"code\": 100, \"message\": \"internal server error\"}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Unidirectional GRPC via config.json (JSON)\nDESCRIPTION: This snippet demonstrates how to enable the unidirectional GRPC endpoint in Centrifugo by modifying the JSON configuration file. The 'uni_grpc' object with the 'enabled' property set to true activates the service. No additional dependencies are required beyond Centrifugo itself. The input is a JSON object, and the expected outcome is the activation of the GRPC endpoint upon Centrifugo server restart. Only the 'enabled' property is set, but other properties can be added to further configure the GRPC server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_grpc.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"uni_grpc\\\": {\\n    \\\"enabled\\\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Push Notifications on User Login in Frontend JavaScript/TypeScript (React)\nDESCRIPTION: This React `useEffect` hook triggers after user authentication. It checks user settings for push notifications, initializes Firebase using `initializeFirebase`, requests the notification token via `requestNotificationToken`, and if successful, prepares device information (provider, token, platform, metadata). It then calls a backend API (`registerDevice`) to register this device with Centrifugo PRO, stores the returned device ID in local storage, and sets up a handler for foreground notifications (which are ignored in this example).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n    if (!authenticated || !csrf) return;\n    if (!userInfo.settings || !userInfo.settings.push_notifications || !userInfo.settings.push_notifications.enabled) {\n        return;\n    }\n    const setupNotifications = async () => {\n        initializeFirebase(userInfo.settings.push_notifications.firebase_config);\n        const token = await requestNotificationToken(userInfo.settings.push_notifications.firebase_config, userInfo.settings.push_notifications.vapid_public_key);\n\n        if (token) {\n            const deviceInfo = {\n                provider: 'fcm',\n                token: token,\n                platform: 'web',\n                meta: { 'user-agent': navigator.userAgent },\n                tags: {\n                    tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n                },\n            };\n            if (localStorage.getItem(LOCAL_STORAGE_DEVICE_ID_KEY)) {\n                deviceInfo['device_id'] = localStorage.getItem(LOCAL_STORAGE_DEVICE_ID_KEY);\n            }\n            try {\n                const response = await registerDevice(csrf, deviceInfo);\n                console.log('Token sent to server:', response);\n                const deviceId = response.device_id;\n                localStorage.setItem(LOCAL_STORAGE_DEVICE_ID_KEY, deviceId);\n                onForegroundNotification((payload) => {\n                    console.log('Message received in foreground:', payload);\n                    // We are ignoring foreground messages since we receive them over Centrifugo WebSocket.\n                });\n            } catch (error) {\n                console.error('Failed to send token to server:', error);\n            }\n        } else {\n            console.warn('No token received, cannot proceed.');\n        }\n    };\n\n    setupNotifications();\n}, [authenticated, userInfo, csrf]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual TLS in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet shows how to configure Centrifugo to use manually provided TLS certificate (`server.crt`) and key (`server.key`) files. Setting `tls` to `true` enables TLS, and `tls_key` and `tls_cert` specify the paths to the respective files.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/tls.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"tls\": true,\n  \"tls_key\": \"server.key\",\n  \"tls_cert\": \"server.crt\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Batch Processing in Go\nDESCRIPTION: Demonstrates a technique for batching items from a source channel for bulk processing. The code collects up to a maximum number of items without blocking, allowing for efficient batch operations like Redis pipelining.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-11-12-scaling-websocket.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmaxBatchSize := 50\n\nfor {\n    select {\n    case item := <-sourceCh:\n        batch := []string{item}\n    loop:\n        for len(batch) < maxBatchSize {\n            select {\n            case item := <-sourceCh:\n                batch = append(batch, item)\n            default:\n                break loop\n            }\n        }\n        // Do sth with collected batch of items.\n        println(len(batch))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Centrifugo Routing within Existing Website - Nginx - nginx\nDESCRIPTION: This Nginx configuration embeds Centrifugo under a subpath (e.g., /centrifugo/) on an existing website, enabling HTTP and Websocket connections to be proxied transparently from clients through to the Centrifugo server. It includes path rewrites, header management for origins and protocol upgrades, and keeps persistent connections available. Prerequisites are a running Centrifugo backend, the proper upstream block, and Nginx with websocket support (v1.3.13+). The configuration is suitable for use as a location-based proxy instead of a dedicated domain.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/load_balancing.md#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\n    # uncomment ip_hash if using SockJS transport with many upstream servers.\n    #ip_hash;\n    server 127.0.0.1:8000;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\nserver {\n\n    # ... your web site Nginx config\n\n    location /centrifugo/ {\n        rewrite ^/centrifugo/(.*)        /$1 break;\n        proxy_pass http://centrifugo;\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n    }\n\n    location /centrifugo/connection {\n        rewrite ^/centrifugo(.*)        $1 break;\n        proxy_pass http://centrifugo;\n        proxy_buffering off;\n        keepalive_timeout 65;\n        proxy_read_timeout 60s;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header Host $http_host;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Meta Information Structure Example\nDESCRIPTION: Example of meta information structure containing user roles that can be attached via connect proxy or JWT meta claim.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/cel_expressions.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\"admin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Real-Time Updates via App Backend to Centrifugo - Markdown\nDESCRIPTION: This diagram details the process where a client sends a publish request to the backend, which validates, possibly modifies, and optionally persists the data before constructing a real-time update and publishing it to Centrifugo. Centrifugo then delivers a real-time notification to channel subscribers. Required systems include the Centrifugo server API and an application backend able to handle publishing logic; prerequisites are channel setup and subscriber presence. Inputs are client-generated messages, and outputs are real-time notifications to clients; the main constraint is that delivery only occurs for actively subscribed channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/flow_diagrams.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\nClient -> App Backend: Publish request\n\nnote:\nClient sends data to publish to the application backend.\n\nBackend validates it, maybe modifies, optionally saves to the main database, constructs real-time update and publishes it to the Centrifugo server API.\n\nApp Backend -> Centrifugo: Publish over Centrifugo API\n\nCentrifugo -->> Client: {far-bolt fa-lg} Real-time notification\n\nnote: Centrifugo delivers real-time message to active channel subscribers.\n```\n\n----------------------------------------\n\nTITLE: Adding Centrifugo Connection State Visualization\nDESCRIPTION: Code snippet showing how to display the Centrifugo connection state with emoji indicators. The component listens to state changes and updates the UI accordingly.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-03-31-keycloak-sso-centrifugo.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [connectionState, setConnectionState] = useState(\"disconnected\");\n  const stateToEmoji = {\n    \"disconnected\": \"üî¥\",\n    \"connecting\": \"üü†\",\n    \"connected\": \"üü¢\"\n  }\n  ...\n\n  useEffect(() => {\n    ...\n    centrifuge.on('state', function (ctx) {\n      setConnectionState(ctx.newState);\n    })\n    ...\n\n  return (\n    ...\n    <span className={\"connectionState \" + connectionState}>\n      {stateToEmoji[connectionState]}\n    </span>\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Non-Terminal): Write Error (3009)\nDESCRIPTION: The server encountered an error while attempting to write data to the client connection (e.g., network issue). The client should attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3009\nReason: \"write error\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Persistence Engine for Token Revocation - JSON\nDESCRIPTION: Demonstrates configuring Centrifugo PRO to persist token revocation data in a PostgreSQL database. The configuration JSON includes the database section with the connection DSN and sets the \"persistence_engine\" for both \"token_revoke\" and \"user_tokens_invalidate\" to \"database\". Only PostgreSQL is supported as a backend for this mode.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/token_revocation.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"token_revoke\": {\n        \"persistence_engine\": \"database\"\n    },\n    \"user_tokens_invalidate\": {\n        \"persistence_engine\": \"database\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the 'publications' Table Schema in ClickHouse SQL\nDESCRIPTION: Shows the SQL `CREATE TABLE` statement resulting from `SHOW CREATE TABLE centrifugo.publications`. This table stores publication event data within the `centrifugo` database, using the MergeTree engine. It's partitioned by day based on the `time` column and ordered by `time`, with data automatically deleted after 1 day (TTL).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE centrifugo.publications\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.publications\n(\n    `channel` String,\n    `source` String,\n    `size` UInt64,\n    `client` String,\n    `user` String,\n    `time` DateTime\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Configuring the Enabled State for Uni SSE (JSON)\nDESCRIPTION: This JSON snippet, intended for `config.json`, explicitly shows how to enable the unidirectional SSE transport by setting `uni_sse.enabled` to `true`. This makes the `/connection/uni_sse` endpoint active. It illustrates the placement within the overall configuration structure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_sse.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"uni_sse\": {\n        \"enabled\": true\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Message History via HTTP API - Bash\nDESCRIPTION: This snippet shows a curl POST request to retrieve message history for a specific channel in Centrifugo (`chat:index`), specifying a limit of 100 messages. Requires an API key and a running Centrifugo instance. The output contains an array of `publications` (each with payload and stream offset), as well as the latest `epoch` and `offset` values, useful for implementing recovery logic. Clients must have the necessary history permission to query this endpoint successfully.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channels.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat:index\", \"limit\": 100}' \\\n  http://localhost:8000/api/history\n{\n    \"result\": {\n        \"publications\": [\n            {\n                \"data\": {\n                    \"input\": \"1\"\n                },\n                \"offset\": 1\n            },\n            {\n                \"data\": {\n                    \"input\": \"2\"\n                },\n                \"offset\": 2\n            }\n        ],\n        \"epoch\": \"gWuY\",\n        \"offset\": 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Non-Terminal): Force Reconnect (3011)\nDESCRIPTION: The server intentionally disconnects the client for an unspecified reason but expects the client to attempt reconnection immediately.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3011\nReason: \"force reconnect\"\n```\n\n----------------------------------------\n\nTITLE: Assigning a Custom Broker to a Namespace in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to assign a previously defined custom broker to a specific channel namespace. It configures the namespace named 'rates' to use the custom Nats broker named 'mycustomnats' by setting the 'broker_name' property within the namespace definition in the 'namespaces' array.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/namespace_engines.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"namespaces\": [\n    {\n        \"name\": \"rates\",\n        \"broker_name\": \"mycustomnats\"\n    }\n  ]\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Nginx Docker Container with Custom Configuration (Bash)\nDESCRIPTION: Runs an Nginx Docker container on port 9000, mounting a custom Nginx configuration file for proxying to Django and Centrifugo backends. Requires Docker and valid paths to the nginx.conf file. Takes no inputs beyond command arguments and provides a running Nginx instance with HTTP/WebSocket proxying enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v /path/to/nginx.conf:/etc/nginx/nginx.conf:ro -p 9000:9000 --add-host=host.docker.internal:host-gateway nginx\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Non-Terminal Disconnect Code 3001 (Shutdown)\nDESCRIPTION: Defines the non-terminal client disconnect code 3001, indicating \"shutdown\". This code may be sent by a server node that is preparing to shut down. Clients receiving this code are expected to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:      3001\nReason:    \"shutdown\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Centrifugo Error Codes to GRPC Codes (Go)\nDESCRIPTION: Shows a Go function that translates Centrifugo error codes to their corresponding gRPC codes using the 'codes' package. Useful for server implementations to provide standard gRPC error semantics when 'transport' error mode is enabled. Depends on the 'codes' package from gRPC.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nfunc MapErrorToGRPCCode(err *Error) codes.Code {\n\tswitch err.Code {\n\tcase ErrorInternal.Code: // 100\n\t\treturn codes.Internal\n\tcase ErrorUnknownChannel.Code, ErrorNotFound.Code: // 102, 104\n\t\treturn codes.NotFound\n\tcase ErrorBadRequest.Code, ErrorNotAvailable.Code: // 107, 108\n\t\treturn codes.InvalidArgument\n\tcase ErrorUnrecoverablePosition.Code: // 112\n\t\treturn codes.OutOfRange\n\tcase ErrorConflict.Code: // 113\n\t\treturn codes.AlreadyExists\n\tdefault:\n\t\t// Default to Internal Error for unmapped errors.\n\t\t// In general should be avoided - all new API errors must be explicitly described here.\n\t\treturn codes.Internal\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Combined Regex and Default Matching Capabilities - Centrifugo PRO - JSON\nDESCRIPTION: This configuration example demonstrates combining different channel matching strategies within a single 'caps' array: one object uses regex matching for 'posts_\\d+' channels, another targets a specific channel ('user_42') using default matching. Each object includes 'channels', an optional 'match' type, and the corresponding 'allow' array for capabilities. Capabilities are prioritized and matched in order.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/capabilities.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"^posts_[\\\\d]+$\"],\n            \"match\": \"regex\",\n            \"allow\": [\"sub\"]\n        }\n        {\n            \"channels\": [\"user_42\"],\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing Second Connection to Centrifugo via Uni HTTP Stream using Bash\nDESCRIPTION: This `curl` command establishes a second, separate persistent connection to the Centrifugo server for the same user (ID 42) using the same `uni_http_stream` endpoint and JWT. This demonstrates multiple active sessions for a single user.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/connections.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/connection/uni_http_stream --data '{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0MiIsImV4cCI6MTYyNzcxMzMzNX0.s3eOhujiyBjc4u21nuHkbcWJll4Um0QqGU3PF-6Mf7Y\", \"name\": \"terminal\"}'\n```\n\n----------------------------------------\n\nTITLE: Multi-cluster Redis Environment Variables\nDESCRIPTION: Command to configure multiple Redis clusters using environment variables.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_REDIS_CLUSTER_ADDRESS=\"localhost:30001,localhost:30002 localhost:30101,localhost:30102\" CENTRIFUGO_ENGINE=redis ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Cache Empty Proxy Response Format\nDESCRIPTION: Expected response format from the backend for a cache empty proxy request.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/channel_cache_empty.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Centrifugo RPC Proxy Response Structure in JSON\nDESCRIPTION: This JSON snippet exemplifies the expected response structure from the application backend when successfully handling a proxied RPC request from Centrifugo. The backend should return a JSON object containing a `result` field, which in turn holds the `data` to be sent back to the originating client. In this example, the response data is `{\"answer\": \"2019\"}`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\n    \"data\": {\"answer\": \"2019\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Error from Proxy Backend\nDESCRIPTION: JSON payload example for returning a custom error from the application backend to the client. Applications must use error codes in range [400, 1999].\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": 1000,\n    \"message\": \"custom error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo HTTP Publish Proxy Request Payload (JSON)\nDESCRIPTION: This JSON object represents an example payload sent by Centrifugo to the configured backend endpoint (`proxy_publish_endpoint`) when a client attempts to publish. It includes details about the client connection (ID, transport, protocol, user), the target channel, and the data being published.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"channel\": \"chat:index\",\n  \"data\":{\"input\":\"hello\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for SSO and Real-Time Communication\nDESCRIPTION: NPM command to install dependencies for Keycloak authentication integration and Centrifugo WebSocket communication in the React application.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-03-31-keycloak-sso-centrifugo.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @react-keycloak/web centrifuge keycloak-js\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Stack for Laravel Chat App\nDESCRIPTION: Command to start the Docker Compose environment for the Laravel and Centrifugo chat application\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-12-14-laravel-multi-room-chat-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Receiving an Error Reply in JSON (Centrifugo)\nDESCRIPTION: Provides an example of a complete server reply containing an error in JSON format. It includes the `id` (1) matching the original command and the structured `error` object (as previously defined) detailing the issue encountered during command processing. The presence of the `error` field signifies command failure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_protocol.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"error\": {\"code\": 100, \"message\": \"internal server error\"}}\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo Server\nDESCRIPTION: Command to start Centrifugo server with the generated configuration file, enabling the admin web interface.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n./centrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Sending RPC Requests via Centrifuge SDK in JavaScript\nDESCRIPTION: This snippet shows how to send a Remote Procedure Call (RPC) to the server using the `rpc` method of the Centrifuge client instance. It sends a specified method name ('example_method') and payload (`rpcRequest`) over the established real-time connection. This typically requires server-side configuration (like an RPC proxy) to handle the request.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst rpcRequest = {'key': 'value'};\nconst data = await centrifuge.rpc('example_method', rpcRequest);\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Admin UI Authentication in Centrifugo (JSON)\nDESCRIPTION: JSON configuration snippet to enable the Centrifugo admin web interface (`admin: true`) and set the required `admin_password` and `admin_secret` for secure login. These credentials are used for authentication to access the admin panel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/admin_web.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"admin\": true,\n    \"admin_password\": \"<PASSWORD>\",\n    \"admin_secret\": \"<SECRET>\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Centrifugo Connection JWT using Shell\nDESCRIPTION: Executes the `centrifugo checktoken` command to validate a given connection JWT (`<TOKEN>`) against the settings in the specified configuration file (`-c config.json`). This is useful for testing token validity during application development. If the token is invalid or any error occurs during validation, the program exits with status code 1.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/console_commands.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncentrifugo checktoken -c config.json <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Creating login form HTML\nDESCRIPTION: HTML template for the login form, including input fields for username and password.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-10-18-integrating-with-nodejs.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n\n<body>\n    <form action=\"/login\" method=\"post\">\n        <h2>Login (username: demo-user, password: demo-pass)</h2>\n        <div class=\"input-field\">\n            <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Enter Username\">\n        </div>\n        <div class=\"input-field\">\n            <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Enter Password\">\n        </div>\n        <input type=\"submit\" value=\"Log in\">\n    </form>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Querying Presence Stats in Centrifugo API (JSON)\nDESCRIPTION: This snippet shows the JSON structure for querying presence statistics for a channel using the Centrifugo API. It includes the method name and required channel parameter.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"presence_stats\",\n    \"params\": {\n        \"channel\": \"chat\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Redis Clusters for Sharding\nDESCRIPTION: JSON configuration for sharding data between multiple Redis clusters. This approach helps address PUB/SUB scaling limitations in Redis clusters by distributing channels across separate cluster instances.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"redis_cluster_address\": [\n        \"localhost:30001,localhost:30002,localhost:30003\",\n        \"localhost:30101,localhost:30102,localhost:30103\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis Cluster Sharding in Centrifugo Config - JSON\nDESCRIPTION: Illustrates how to shard across multiple Redis Cluster seed nodes or clusters by providing an address array with URIs for each cluster. Centrifugo will use consistent hashing to map data to clusters, supporting distributed and scalable real-time data operations. Input: address array of cluster URIs. Output: Sharded channels/history/presence data. Limitation: Each address must be a valid accessible Redis cluster node.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"address\": [\n        \"redis://127.0.0.1:7000\",\n        \"redis://127.0.0.1:8000\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Rooms in Django\nDESCRIPTION: Simple utility function to create a new chat room with a specified name using Django's Room model.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/scale.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom chat.models import Room\n\n\ndef create_room(name):\n    return Room.objects.create(name=name)\n```\n\n----------------------------------------\n\nTITLE: Configuring ClickHouse Analytics Integration in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the ClickHouse analytics integration within Centrifugo's configuration file (`config.json`). It enables the feature (`\"enabled\": true`), provides connection details like the ClickHouse DSNs, database name, and cluster name. It also specifies which types of data to export (connections, subscriptions, operations, etc.) and which HTTP headers should be included in the connection data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"clickhouse_analytics\": {\n        \"enabled\": true,\n        \"clickhouse_dsn\": [\n            \"tcp://127.0.0.1:9000\",\n            \"tcp://127.0.0.1:9001\",\n            \"tcp://127.0.0.1:9002\",\n            \"tcp://127.0.0.1:9003\"\n        ],\n        \"clickhouse_database\": \"centrifugo\",\n        \"clickhouse_cluster\": \"centrifugo_cluster\",\n        \"export_connections\": true,\n        \"export_subscriptions\": true,\n        \"export_operations\": true,\n        \"export_publications\": true,\n        \"export_notifications\": true,\n        \"export_http_headers\": [\n            \"User-Agent\",\n            \"Origin\",\n            \"X-Real-Ip\"\n        ]\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Full History from Beginning using Centrifugo History API\nDESCRIPTION: Demonstrates using the Centrifugo history API with `limit: -1` and `reverse: false` to fetch the entire publication history from the beginning (oldest message first). The number of returned publications is capped by the `client_history_max_publication_limit` server configuration (default 300).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/history_and_recovery.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: -1, since: null, reverse: false)\n```\n\n----------------------------------------\n\nTITLE: Defining DisconnectChannelLimit Code and Reason in Centrifugal\nDESCRIPTION: Specifies the disconnection code `3505` with reason `\"channel limit\"`. This disconnect occurs when a client connection attempts to exceed the maximum number of channels allowed by the server configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_32\n\nLANGUAGE: text\nCODE:\n```\nCode:   3505\nReason: \"channel limit\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HMS Push Notifications in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable Huawei Mobile Services (HMS) push notifications in Centrifugo. It requires a PostgreSQL database connection (optional for basic proxying), a Redis instance for queuing, and HMS-specific credentials (`hms_app_id` and `hms_app_secret`). The `enabled_providers` array must include `hms`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/push_notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"push_notifications\": {\n        \"redis_address\": \"localhost:6379\",\n        \"enabled_providers\": [\"hms\"],\n        \"hms_app_id\": \"<your_app_id>\",\n        \"hms_app_secret\": \"<your_app_secret>\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Non-Terminal Disconnect Code 3005 (Connection Expired)\nDESCRIPTION: Defines the non-terminal client disconnect code 3005, indicating the \"connection expired\". Clients receiving this code are expected to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3005\nReason: \"connection expired\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Centrifugo Error Codes to GRPC Status Codes\nDESCRIPTION: Go function that maps internal Centrifugo error codes to appropriate GRPC status codes when transport error mode is enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nfunc MapErrorToGRPCCode(err *Error) codes.Code {\n\tswitch err.Code {\n\tcase ErrorInternal.Code: // 100\n\t\treturn codes.Internal\n\tcase ErrorUnknownChannel.Code, ErrorNotFound.Code: // 102, 104\n\t\treturn codes.NotFound\n\tcase ErrorBadRequest.Code, ErrorNotAvailable.Code: // 107, 108\n\t\treturn codes.InvalidArgument\n\tcase ErrorUnrecoverablePosition.Code: // 112\n\t\treturn codes.OutOfRange\n\tcase ErrorConflict.Code: // 113\n\t\treturn codes.AlreadyExists\n\tdefault:\n\t\t// Default to Internal Error for unmapped errors.\n\t\t// In general should be avoided - all new API errors must be explicitly described here.\n\t\treturn codes.Internal\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Memory Engine in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet shows how to explicitly specify the default in-memory engine for Centrifugo's PUB/SUB, channel history cache, and online presence features. This configuration is placed within the `engine` section of the `config.json` file, setting the `type` to `\"memory\"`. Alternative engines like `redis` or integrations like `nats` can be configured here for scaling.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"engine\": {\n    \"type\": \"memory\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Broker to a Namespace\nDESCRIPTION: This configuration demonstrates how to assign a custom Nats broker to a specific channel namespace called 'rates'.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/namespace_engines.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"rates\",\n        \"broker_name\": \"mycustomnats\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing JSON Payload via Admin Panel on Centrifugo - JSON\nDESCRIPTION: This snippet represents the JSON data entered in the Centrifugo admin web panel for publishing to a channel. The JSON object is passed in the 'data' area of the panel and must contain key-value pairs relevant to the application, such as the integer 'value'. Make sure to enter valid JSON structure as the input; the channel name should match the one that clients are subscribed to. No programming dependencies are required for this operation, only access to the Centrifugo admin interface.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"value\": 1\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo PRO via Shell Script - shell\nDESCRIPTION: Downloads and installs the latest Centrifugo PRO binary on Linux or MacOS using a shell script fetched with curl. Prerequisites include network access, curl, and sh. The script pulls install_pro.sh from centrifugal.dev and executes it, saving the centrifugal binary in the current directory. Inputs: None; Output: downloaded binary; Constraints: applicable to Linux/MacOS with shell environment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/install_and_run.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSLf https://centrifugal.dev/install_pro.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxied HTTP Headers - Centrifugo - JSON\nDESCRIPTION: This JSON snippet demonstrates how to add an explicit list of HTTP headers that Centrifugo should forward to the application backend when proxying client events. It should be added to your Centrifugo configuration file. The 'proxy_http_headers' array should include any headers your backend needs for authentication or context, such as 'Origin', 'Cookie', or tracing fields. The configuration is required for secure and context-aware proxying.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"proxy_http_headers\": [\n        \"Origin\",\n        \"User-Agent\",\n        \"Cookie\",\n        \"Authorization\",\n        \"X-Real-Ip\",\n        \"X-Forwarded-For\",\n        \"X-Request-Id\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WebTransport and HTTP/3 in Centrifugo - JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates the minimal configuration needed to enable HTTP/3 and WebTransport support in the Centrifugo server. It requires specifying that both http3 and tls are enabled, alongside file paths for the TLS certificate and key, and finally enabling the webtransport endpoint. The configuration must be placed in Centrifugo's main configuration file (e.g., config.json), and both HTTP/3 and WebTransport require TLS to function by specification.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/webtransport.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"http3\": true,\n    \"tls\": true,\n    \"tls_cert\": \"path/to/crt\",\n    \"tls_key\": \"path/to/key\",\n    \"webtransport\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Unidirectional GRPC Endpoint in Centrifugo - JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Centrifugo to enable the unidirectional GRPC endpoint by setting the \\\"uni_grpc\\\" field to true in the configuration file (e.g., config.json). No additional dependencies are needed beyond Centrifugo itself. The key parameter is \\\"uni_grpc\\\" (boolean), which activates the feature when set to true, making the GRPC server available on the specified port. The configuration snippet must be added to your existing configuration file, merging with other fields as needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_grpc.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    ...\\n    \\\"uni_grpc\\\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Patterns in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet demonstrates the necessary configuration for enabling and defining channel patterns in Centrifugo PRO. It sets the 'channel.patterns' flag to true, and specifies namespaces with patterns using path variables indicated by ':', allowing dynamic matching of channel names. Requires Centrifugo PRO; place this configuration in your config.json. Each namespace can have its own pattern, and channels must match one of these patterns to be valid. Patterns cannot have duplicate variable names, must use ASCII, and only explicit patterns are allowed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/channel_patterns.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"patterns\": true,\n    \"namespaces\": [\n      {\n        \"name\": \"users_name\",\n        \"pattern\": \"/users/:name\"\n      },\n      {\n        \"name\": \"events_project_type\",\n        \"pattern\": \"/events/:project/:type\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Subscription Error Event in Centrifuge JavaScript SDK\nDESCRIPTION: This snippet sets up an error listener for a Centrifuge JavaScript SDK subscription to handle internal errors unrelated to state changes, such as temporary errors or token issues. The registered callback logs the error context, aiding in diagnostics. Requires a subscription instance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsub.on('error', function(ctx) {\n    console.log(\"subscription error\", ctx);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining BoolValue Structure for Override Claim in Centrifugo Subscription JWT (JSON)\nDESCRIPTION: Specifies the JSON structure for a `BoolValue` object used within the `override` claim of a Centrifugo subscription JWT. This structure allows setting boolean channel options for a specific subscriber.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channel_token_auth.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": true/false\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Streaming in Centrifugo Server Config (JSON)\nDESCRIPTION: This configuration snippet enables the HTTP streaming endpoint in the Centrifugo server by setting the 'http_stream' option to true. This is required for clients to connect using HTTP streaming transport. Ensure the Centrifugo server process is restarted after changes. The snippet must be placed within the central configuration JSON file ('config.json') of the server. The output is server-side activation of HTTP streaming support, accessible by enabled endpoints.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/http_stream.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"http_stream\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with Health Check Endpoint via Command Line\nDESCRIPTION: This bash command starts the Centrifugo server using a configuration file (`config.json`) and simultaneously enables the health check endpoint (`/health`) via the `--health` command-line flag. This overrides the `health` setting in the config file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo -c config.json --health\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscribe Permissions with CEL in Centrifugo PRO - JSON\nDESCRIPTION: This snippet defines a namespace in Centrifugo's configuration JSON file, using the 'subscribe_cel' CEL expression to require that a client connection's meta.roles array contains the string 'admin'. This allows only users with the 'admin' role to subscribe to channels in the 'admin' namespace. The configuration must be placed in the Centrifugo 'config.json' file, with 'meta' information being supplied by the backend via JWT or connect proxy. The key parameter is 'subscribe_cel', whose CEL condition is evaluated for every subscription attempt. Only valid CEL expressions can be used.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/cel_expressions.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"namespaces\": [\n        {\n            \"name\": \"admin\",\n            \"subscribe_cel\": \"'admin' in meta.roles\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscribe CEL Expression in Namespace\nDESCRIPTION: Example configuration showing how to set up a subscribe_cel expression for an admin namespace that checks if the user has an admin role in their metadata.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/cel_expressions.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"admin\",\n        \"subscribe_cel\": \"'admin' in meta.roles\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Authenticated WebSocket Handler in Go\nDESCRIPTION: Registers the WebSocket handler with authentication middleware\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nwsHandler := centrifuge.NewWebsocketHandler(node, centrifuge.WebsocketConfig{})\nhttp.Handle(\"/connection/websocket\", auth(wsHandler))\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Server Configuration\nDESCRIPTION: JSON configuration for Centrifugo server including debug settings, CORS origins, security keys and namespace definition.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/centrifugo.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"log_level\": \"debug\",\n    \"allowed_origins\": [\"http://localhost:9000\"],\n    \"token_hmac_secret_key\": \"secret\",\n    \"api_key\": \"api_key\",\n    \"namespaces\": [{\n        \"name\": \"personal\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo WebSocket Buffer Sizes\nDESCRIPTION: This JSON configuration snippet sets the WebSocket read and write buffer sizes for Centrifugo to 512 KB. These settings affect memory usage and were used in the benchmark to achieve the reported results.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-02-10-million-connections-with-centrifugo.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"websocket_read_buffer_size\": 512,\n    \"websocket_write_buffer_size\": 512\n}\n```\n\n----------------------------------------\n\nTITLE: Benchstat Comparison: Redigo vs. go-redis/redis in Centrifugo (Text)\nDESCRIPTION: Provides detailed performance comparison using the `benchstat` tool between Centrifugo's Redis operations implemented with Redigo (old) and go-redis/redis v9 (new). The results cover various Centrifugo-specific operations (Publish, Publish with History, Subscribe, Recover, AddPresence) and show the delta in time per operation, bytes allocated per operation, and allocations per operation. Generally, the `go-redis/redis` implementation shows significant improvements, particularly in reducing latency for history and recovery operations and reducing allocations across most tests.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n```\n‚ùØ benchstat redigo_p128.txt goredis_p128.txt\nname                      old time/op    new time/op    delta\nRedisPublish-8            1.45¬µs ¬±10%    1.88¬µs ¬± 4%  +29.32%  (p=0.000 n=10+10)\nRedisPublish_History-8    12.5¬µs ¬± 6%     9.7¬µs ¬± 3%  -22.77%  (p=0.000 n=10+10)\nRedisSubscribe-8          1.47¬µs ¬±24%    1.47¬µs ¬±10%     ~     (p=0.469 n=10+10)\nRedisRecover-8            18.4¬µs ¬± 2%     6.3¬µs ¬± 0%  -65.78%  (p=0.000 n=10+8)\nRedisAddPresence-8        3.72¬µs ¬± 1%    3.40¬µs ¬± 1%   -8.74%  (p=0.000 n=10+10)\n\nname                      old alloc/op   new alloc/op   delta\nRedisPublish-8              483B ¬± 0%      499B ¬± 0%   +3.37%  (p=0.000 n=9+10)\nRedisPublish_History-8    1.30kB ¬± 0%    1.08kB ¬± 0%  -16.67%  (p=0.000 n=10+10)\nRedisSubscribe-8            892B ¬± 2%      662B ¬± 6%  -25.83%  (p=0.000 n=10+10)\nRedisRecover-8            1.25kB ¬± 1%    1.00kB ¬± 0%  -19.91%  (p=0.000 n=10+10)\nRedisAddPresence-8          907B ¬± 0%      827B ¬± 0%   -8.82%  (p=0.002 n=7+8)\n\nname                      old allocs/op  new allocs/op  delta\nRedisPublish-8              10.0 ¬± 0%       9.0 ¬± 0%  -10.00%  (p=0.000 n=10+10)\nRedisPublish_History-8      29.0 ¬± 0%      25.0 ¬± 0%  -13.79%  (p=0.000 n=10+10)\nRedisSubscribe-8            22.0 ¬± 0%      14.0 ¬± 0%  -36.36%  (p=0.000 n=8+7)\nRedisRecover-8              29.0 ¬± 0%      23.0 ¬± 0%  -20.69%  (p=0.000 n=10+10)\nRedisAddPresence-8          18.0 ¬± 0%      17.0 ¬± 0%   -5.56%  (p=0.000 n=10+10)\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Proxy RPC Request Payload for Centrifugo (JSON)\nDESCRIPTION: This sample JSON provides the structure for a Centrifugo server's POST payload when forwarding an RPC call to the backend. It contains the client identifier, transport/protocol details, user ID, the RPC method being requested, and relevant data. The backend should implement logic to route and produce a suitable response for each method. Input: HTTP POST RPC request from Centrifugo. Output: JSON reply with method result.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"method\": \"getCurrentPrice\",\n  \"data\":{\"params\": {\"object_id\": 12}}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Non-Terminal Disconnect Code 3012 (No Pong)\nDESCRIPTION: Defines the non-terminal client disconnect code 3012, indicating \"no pong\". This may be issued for bidirectional connections if the client fails to respond to application-level server-to-client pings within the configured timeout period. Clients are expected to reconnect.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3012\nReason: \"no pong\"\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Unrecoverable Position (112)\nDESCRIPTION: Indicates that the publication stream for a channel does not contain the necessary range of publications to fulfill a history request, often because the provided recovery epoch is too old or incorrect. The client cannot recover the missed messages from the requested position.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    112\nMessage: \"unrecoverable position\"\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo Server with Configuration (Bash)\nDESCRIPTION: This Bash command starts the Centrifugo server using a specific configuration file (`config.json`). The `-c` flag specifies the path to the configuration file that the server should load on startup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_http_stream.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncentrifugo -c config.json\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with Redis Sentinel Configuration (Shell)\nDESCRIPTION: Starts Centrifugo using the configuration specified in the `config.json` file. The configuration file is expected to contain settings enabling the Redis engine and specifying Redis Sentinel details for high availability, as shown in the subsequent JSON snippet.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```\ncentrifugo --config=config.json\n```\n```\n\n----------------------------------------\n\nTITLE: Channel Pattern Permission Configuration\nDESCRIPTION: Example of CEL expression configuration checking user permissions based on tenant and user variables from channel pattern matching.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/cel_expressions.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"namespaces\": [\n        {\n            \"name\": \"/:tenant/users/:user\",\n            \"subscribe_cel\": \"vars.tenant == meta.tenant && (vars.user == user or 'admin' in meta.roles)\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Status Feature in Centrifugo\nDESCRIPTION: This JSON configuration enables the Redis-based user status feature in Centrifugo. It specifies the Redis address and enables the feature.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_status.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"user_status\": {\n        \"enabled\": true,\n        \"redis_address\": \"127.0.0.1:6379\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unidirectional WebSocket in Centrifugo\nDESCRIPTION: Basic configuration to enable unidirectional WebSocket endpoint in Centrifugo's config.json file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_websocket.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"uni_websocket\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Channel Presence Information in JavaScript\nDESCRIPTION: This snippet demonstrates calling the `presence` method on a subscription object to retrieve full information about all active subscribers currently in the channel. The response is a map of client IDs to client information. Requires presence to be configured for the channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst resp = await subscription.presence();\n// resp contains presence information - a map client IDs as keys \n// and client information as values.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Non-Terminal Disconnect Code 3008 (Slow)\nDESCRIPTION: Defines the non-terminal client disconnect code 3008, indicating the client connection is too \"slow\". This is issued when the client cannot process incoming messages quickly enough. Clients receiving this code are expected to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3008\nReason: \"slow\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notification Settings in Backend (Python)\nDESCRIPTION: Defines essential push notification settings in the Django `settings.py` file. `PUSH_NOTIFICATIONS_ENABLED` acts as a feature flag. `PUSH_NOTIFICATIONS_VAPID_PUBLIC_KEY` stores the public VAPID key from Firebase for Web Push. `PUSH_NOTIFICATIONS_FIREBASE_CONFIG` holds the Firebase web configuration object needed for frontend initialization. These values need to be set according to the specific Firebase project.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPUSH_NOTIFICATIONS_ENABLED = False\nPUSH_NOTIFICATIONS_VAPID_PUBLIC_KEY = 'YOUR_VAPID_PUBLIC_KEY'\nPUSH_NOTIFICATIONS_FIREBASE_CONFIG = {...YOUR FIREBASE CONFIG}\n```\n\n----------------------------------------\n\nTITLE: Enabling Singleflight in Centrifugo PRO Configuration (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to enable the 'use_singleflight' boolean flag in a Centrifugo PRO configuration file. Setting \"use_singleflight\" to true allows Centrifugo to merge simultaneous identical requests (such as history or presence queries) into a single network request, dramatically reducing load on remote brokers. This option is relevant when using remote engines (Redis, KeyDB, Tarantool), and is not beneficial with the memory engine. The input JSON should be included in your 'config.json' file for Centrifugo, alongside any other standard configuration parameters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/singleflight.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"use_singleflight\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message and Minimal Room Serializers in DRF\nDESCRIPTION: This Python snippet defines two DRF serializers for handling messages: `MessageRoomSerializer` provides a minimal representation of a `Room` (id and version), primarily for nesting within message data. `MessageSerializer` serializes `Message` objects, including nested user data (`UserSerializer`) and minimal room data (`MessageRoomSerializer`), along with message content and creation timestamp.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass MessageRoomSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Room\n        fields = ['id', 'version']\n\n\nclass MessageSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    room = MessageRoomSerializer(read_only=True)\n\n    class Meta:\n        model = Message\n        fields = ['id', 'content', 'user', 'room', 'created_at']\n```\n\n----------------------------------------\n\nTITLE: Iterating Bidirectionally Through History Stream in Go\nDESCRIPTION: A Go example using the `gocent` library to continuously iterate through a channel's history. It fetches publications in batches (`limit`), alternates between forward and reverse pagination (`reverse`), and uses `StreamPosition` (`sp`) to track progress. Requires `gocent` library and an initialized client (`c`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/history_and_recovery.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Iterate by 10.\nlimit := 10\n// Paginate in reversed order first, then invert it.\nreverse := true\n// Start with nil StreamPosition, then fill it with value while paginating.\nvar sp *gocent.StreamPosition\n\nfor {\n\thistoryResult, err = c.History(\n        ctx,\n        channel,\n\t\tgocent.WithLimit(limit),\n\t\tgocent.WithReverse(reverse),\n        gocent.WithSince(sp),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error calling history: %v\", err)\n\t}\n\tfor _, pub := range historyResult.Publications {\n\t\tlog.Println(pub.Offset, \"=>\", string(pub.Data))\n\t\tsp = &gocent.StreamPosition{\n\t\t\tOffset: pub.Offset,\n\t\t\tEpoch:  historyResult.Epoch,\n\t\t}\n\t}\n\tif len(historyResult.Publications) < limit {\n\t\t// Got all pubs, invert pagination direction.\n\t\treverse = !reverse\n\t\tlog.Println(\"end of stream reached, change iteration direction\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Unidirectional WebSocket in Centrifugo - JSON\nDESCRIPTION: This snippet demonstrates how to enable the unidirectional WebSocket endpoint in Centrifugo through the configuration file. Set the \\\"enabled\\\" parameter to true inside the \\\"uni_websocket\\\" object. Dependencies: Centrifugo server requires proper formatting of config.json and restart after changes. Key parameter: \\\"enabled\\\" (boolean). No inputs other than valid JSON; default disables the feature unless explicitly set.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_websocket.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uni_websocket\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Pattern Permission Configuration\nDESCRIPTION: Configuration example demonstrating how to set up channel permissions based on user ID and admin role checking.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/cel_expressions.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"without_namespace\": {\n      \"subscribe_cel\": \"vars.user == user or 'admin' in meta.roles\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Certificate Fingerprint for Chrome WebTransport Development - Shell Command\nDESCRIPTION: This bash command produces a certificate fingerprint in base64 required for Chrome's --ignore-certificate-errors-spki-list. It extracts the public key from a .crt file, converts it to DER format, hashes it using SHA-256, and encodes the hash in base64. The resulting fingerprint is used to bypass certificate warnings in a development scenario involving self-signed certificates and HTTP/3/WebTransport.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/webtransport.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in server.crt -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 100 (Internal Error)\nDESCRIPTION: Defines the 'Internal Server Error' code (100) returned to clients via the bidirectional protocol. This is a temporary error indicating a server-side issue, not the client's fault. Clients might retry the operation later.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCode:    100\nMessage: \"internal server error\"\nTemporary: true\n```\n\n----------------------------------------\n\nTITLE: Initializing WebTransport QUIC Server Structure in Go\nDESCRIPTION: Defines the basic server structure with configuration options for WebTransport QUIC implementation. Includes configuration for listen address, TLS certificates, and allowed origins.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\n    \"github.com/lucas-clemente/quic-go\"\n)\n\n// Config for WebTransportServerQuic.\ntype Config struct {\n\t// ListenAddr sets an address to bind server to.\n\tListenAddr string\n\t// TLSCertPath defines a path to .crt cert file.\n\tTLSCertPath string\n\t// TLSKeyPath defines a path to .key cert file\n\tTLSKeyPath string\n\t// AllowedOrigins represents list of allowed origins to connect from.\n\tAllowedOrigins []string\n}\n\n// WebTransportServerQuic can handle WebTransport QUIC connections according\n// to https://tools.ietf.org/html/draft-vvv-webtransport-quic-02.\ntype WebTransportServerQuic struct {\n\tconfig Config\n}\n\n// NewWebTransportServerQuic creates new WebTransportServerQuic.\nfunc NewWebTransportServerQuic(config Config) *WebTransportServerQuic {\n\treturn &WebTransportServerQuic{\n\t\tconfig: config,\n\t}\n}\n\n// Run server.\nfunc (s *WebTransportServerQuic) Run() error {\n\treturn errors.New(\"not implemented\")\n}\n\nfunc main() {\n\tserver := NewWebTransportServerQuic(Config{\n\t\tListenAddr:     \"0.0.0.0:4433\",\n\t\tTLSCertPath:    \"server.crt\",\n\t\tTLSKeyPath:     \"server.key\",\n\t\tAllowedOrigins: []string{\"localhost\", \"googlechrome.github.io\"},\n\t})\n\tif err := server.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Unsubscribe Code 2500 (Insufficient State)\nDESCRIPTION: Defines the client unsubscribe code 2500, indicating an \"insufficient state\". This code is sent when Centrifugo detects message loss or ordering issues in a channel stream with recovery enabled. Clients receiving this code (>= 2500) are expected to attempt resubscription to potentially recover the state.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   2500\nReason: \"insufficient state\"\n```\n\n----------------------------------------\n\nTITLE: History Stream Navigation in JavaScript\nDESCRIPTION: Shows how to paginate through message history in a channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst streamPosition = {'offset': 0, epoch: 'xyz'} \nresp = await sub.history({since: streamPosition, limit: 10});\n```\n\n----------------------------------------\n\nTITLE: RPC Proxy Request Payload Example\nDESCRIPTION: Example of the JSON payload sent from Centrifugo to the backend application during an RPC proxy request. Contains client information and the method and data from the RPC call.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"method\": \"getCurrentPrice\",\n  \"data\":{\"params\": {\"object_id\": 12}}\n}\n```\n\n----------------------------------------\n\nTITLE: Tailing Kafka Topic Messages in Real Time (Bash)\nDESCRIPTION: This Bash command streams new messages from the 'postgres.public.chat_cdc' topic in real time for live debugging or monitoring, leveraging the kafka-console-consumer CLI in the Kafka container. It requires the Kafka broker to be running and accessible, but does not require any additional parameters for basic tailing functionality.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/tips_and_tricks.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec kafka kafka-console-consumer --bootstrap-server kafka:9092 --topic postgres.public.chat_cdc\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Token with Expiration in Python\nDESCRIPTION: Python code to generate a JWT token with an expiration time set 10 minutes in the future. This token is used for authenticating clients with Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\nimport time\n\ntoken = jwt.encode({\"sub\": \"42\", \"exp\": int(time.time()) + 10*60}, \"secret\").decode()\n\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Usage Stats Configuration in JSON\nDESCRIPTION: Configuration to disable anonymous usage statistics reporting in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"usage_stats_disable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel History via API (Plaintext Examples) - Plaintext\nDESCRIPTION: These code snippets demonstrate different queries using the Centrifugo history API. Each invocation illustrates various pagination and filtering options via `limit`, `since`, and `reverse` parameters to fetch message history from a channel. No direct dependencies are required; the examples are intended for illustrative purposes to show options for iterating and accessing historical publications through API requests. Inputs include numeric and object values for `limit` and `since` (with `offset` and `epoch`), while the outputs are the corresponding set of historical publications or current stream positions. Practical limits such as `client.history_max_publication_limit` (default `300`) may restrict the result size.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/history_and_recovery.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 0, since: null, reverse: false)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: -1, since: null, reverse: false)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: -1, since: null, reverse: true)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: null, reverse: false)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: null, reverse: true) \n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: {offset: 0, epoch: \"epoch\"}, reverse: false)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: {offset: 11, epoch: \"epoch\"}, reverse: true)\n```\n\n----------------------------------------\n\nTITLE: Redigo Interface for Redis Command Execution\nDESCRIPTION: The Redigo interface method for executing Redis commands, which uses variadic interface{} arguments for command construction, leading to potential type-safety issues and memory allocations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nDo(commandName string, args ...interface{}) (reply interface{}, err error)\n```\n\n----------------------------------------\n\nTITLE: Implementing Join Room View in Django/DRF\nDESCRIPTION: This Python snippet defines a DRF `APIView` named `JoinRoomView` to handle POST requests for a user to join a room. It requires authentication and uses an atomic transaction with row locking (`select_for_update`) on the `Room` object. It increments the room's version. It checks if the user is already a member; if so, it returns a 409 Conflict status. Otherwise, it creates a `RoomMember` record using `get_or_create`, calculates the new member count (assuming `get_room_member_channels` returns current members), updates the room object's transient `member_count` attribute, serializes the new membership using `RoomMemberSerializer`, and returns the data with a 200 OK status.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass JoinRoomView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    @transaction.atomic\n    def post(self, request, room_id):\n        room = Room.objects.select_for_update().get(id=room_id)\n        room.increment_version()\n        if RoomMember.objects.filter(user=request.user, room=room).exists():\n            return Response({\"message\": \"already a member\"}, status=status.HTTP_409_CONFLICT)\n        obj, _ = RoomMember.objects.get_or_create(user=request.user, room=room)\n        channels = self.get_room_member_channels(room_id)\n        obj.room.member_count = len(channels)\n        body = RoomMemberSerializer(obj).data\n        return Response(body, status=status.HTTP_200_OK)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Brokers in Centrifugo PRO\nDESCRIPTION: This snippet shows how to define additional brokers in Centrifugo PRO, including a custom Redis broker and a Nats broker with their respective connection parameters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/namespace_engines.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"brokers\": [\n    {\n      \"enabled\": true,\n      \"name\": \"mycustomredis\",\n      \"type\": \"redis\",\n      \"redis\": {\n        \"address\": \"127.0.0.1:6379\"\n      }\n    },\n    {\n      \"enabled\": true,\n      \"name\": \"mycustomnats\",\n      \"type\": \"nats\",\n      \"nats\": {\n        \"url\": \"nats://localhost:4222\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo config.json (JSON)\nDESCRIPTION: Provides a minimal example `config.json` file for Centrifugo, defining essential keys like `token_hmac_secret_key`, `api_key`, `admin_password`, and `admin_secret`, and enabling the admin UI (`\"admin\": true`). This file is typically used when running Centrifugo, especially within Docker.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"my_secret\",\n  \"api_key\": \"my_api_key\",\n  \"admin_password\": \"password\",\n  \"admin_secret\": \"secret\",\n  \"admin\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Centrifugo\nDESCRIPTION: JSON configuration for enabling debug mode which exposes additional debug endpoints.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...,\n    \"debug\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Rate Limiting in Centrifugo (config.json)\nDESCRIPTION: This JSON configuration snippet shows how to enable the distributed rate limiter feature in Centrifugo's `config.json` file. The `distributed_rate_limit` object must have `enabled` set to `true`, and `redis_address` must point to the Redis instance (or cluster/shards) used for storing rate limit data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/distributed_rate_limit.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"distributed_rate_limit\": {\n    \"enabled\": true,\n    \"redis_address\": \"localhost:6379\"\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis Active Status Feature in Centrifugo Configuration - JSON\nDESCRIPTION: Configuration example for activating the Redis-based user status feature in Centrifugo. Setting 'enabled' to true under 'redis_active_status' and declaring the 'redis_address' will ensure user activity status is tracked and persisted in Redis. This setup works with direct Redis instances or managed clusters and is required for all user status APIs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_status.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"redis_active_status\": {\n        \"enabled\": true,\n        \"redis_address\": \"127.0.0.1:6379\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Broker and Presence Manager to a Namespace (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to assign both a custom broker and a custom presence manager to a specific namespace within the 'namespaces' array. The namespace named 'rates' is configured to use the 'mycustomnats' broker and the 'mycustomredis' presence manager by setting the 'broker_name' and 'presence_manager_name' properties respectively.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/namespace_engines.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"namespaces\": [\n    {\n        \"name\": \"rates\",\n        \"broker_name\": \"mycustomnats\",\n        \"presence_manager_name\": \"mycustomredis\"\n    }\n  ]\n```\n```\n\n----------------------------------------\n\nTITLE: Calling update_user_status RPC with Centrifugo Client API - JavaScript\nDESCRIPTION: Illustrates how to programmatically update the user's activity status from the client side in a Centrifugo-integrated application. This script uses the Centrifugo JavaScript client to call the 'update_user_status' RPC, which records recent user activity in Redis. The parameters object must be provided (empty in this case), and it is recommended to debounce this operation on frequent user events.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_status.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait centrifuge.namedRPC('update_user_status', {});\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3004 (Internal Server Error)\nDESCRIPTION: Defines the 'Internal Server Error' disconnect code (3004). This is a non-terminal code issued when an unexpected internal error occurs on the server during connection handling. Clients are expected to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nCode:   3004\nReason: \"internal server error\"\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Compose to Use Centrifugo PRO Image (YAML)\nDESCRIPTION: Modifies the `docker-compose.yml` file to specify the Centrifugo PRO Docker image (`centrifugo/centrifugo-pro:v6`). This change is necessary to leverage the push notification features which are exclusive to the PRO version. Requires Docker and Docker Compose.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  centrifugo:\n    image: centrifugo/centrifugo-pro:v6\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Localized Templates in Push Payloads - JSON\nDESCRIPTION: This snippet displays how to reference translation keys within a notification payload template using Centrifugo's templating system. The 'title' field incorporates the 'default' template function to ensure fallback values when a translation is missing, referencing keys from the '.l10n' object. Dependencies: Centrifugo PRO push system supporting template interpolation. Parameters include translation keys 'greeting' and 'question' checked in '.l10n'. The input is a JSON payload, and the output is the rendered notification string delivered to the device.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/push_notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ..\n  \"title\": \"{{default [[hello]] .l10n.greeting}}! {{ default [[How is it going]] .l10n.question }} ?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Redis SET Operations with Redigo in Go\nDESCRIPTION: A benchmark test demonstrating basic usage of the Redigo Redis client library, measuring performance of SET operations using a connection pool with 128 maximum idle and active connections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc BenchmarkRedigo(b *testing.B) {\n\tpool := redigo.Pool{\n\t\tMaxIdle:   128,\n\t\tMaxActive: 128,\n\t\tWait:      true,\n\t\tDial: func() (redigo.Conn, error) {\n\t\t\treturn redigo.Dial(\"tcp\", \":6379\")\n\t\t},\n\t}\n\tdefer pool.Close()\n\n\tb.ResetTimer()\n\tb.SetParallelism(128)\n\tb.ReportAllocs()\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tfor pb.Next() {\n\t\t\tc := pool.Get()\n\t\t\t_, err := c.Do(\"SET\", \"redigo\", \"test\")\n\t\t\tif err != nil {\n\t\t\t\tb.Fatal(err)\n\t\t\t}\n\t\t\tc.Close()\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Presence Stats with User Mapping\nDESCRIPTION: JSON configuration to enable optimized presence stats for Redis engine. This feature maintains additional per-user data structures in Redis, improving performance for channels with large numbers of subscribers at the cost of increased memory usage.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"global_redis_presence_user_mapping\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Unblocking a User via HTTP API - Centrifugo PRO (Bash)\nDESCRIPTION: This Bash snippet illustrates unblocking a user using curl through the Centrifugo HTTP API. It sends a POST with a JSON object specifying the 'unblock_user' method and the user ID to unblock. Insert the actual API key in place of <API_KEY>. The endpoint expects both headers and JSON in this precise format, and the 'user' parameter is required.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_block.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"unblock_user\", \"params\": {\"user\": \"2695\"}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Client Names for Metrics in Centrifugo PRO\nDESCRIPTION: This snippet shows how to register custom client names in Centrifugo configuration to enable segmentation of metrics by client environment. It allows tracking connections from different client types like browsers, Android, and iOS devices.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/observability_enhancements.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"prometheus\": {\n    \"enabled\": true,\n    \"additional_client_names\": [\n      \"my-name1\",\n      \"my-name2\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Refresh Proxy in Centrifugo\nDESCRIPTION: Configuration for the refresh proxy endpoint in Centrifugo. This allows Centrifugo to validate connection validity by calling the specified endpoint when a connection is about to expire.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_refresh_endpoint\": \"http://localhost:3000/centrifugo/refresh\",\n  \"proxy_refresh_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Tenant Pattern Subscription Permission using CEL in Centrifugo - JSON\nDESCRIPTION: This example configures a Centrifugo namespace with a dynamic channel pattern for multi-tenancy. The 'subscribe_cel' CEL expression checks that the tenant variable in the channel ('vars.tenant') matches 'meta.tenant' from connection metadata, and that the subscribing user matches the pattern or possesses the 'admin' role. This complex permission setup is useful in SaaS apps with tenant scoping. Prerequisites: user, meta, and pattern variable injection must be properly configured on the Centrifugo side.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/cel_expressions.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"namespaces\": [\n        {\n            \"name\": \"/:tenant/users/:user\",\n            \"subscribe_cel\": \"vars.tenant == meta.tenant && (vars.user == user or 'admin' in meta.roles)\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Redis Sentinel Configuration File (Config)\nDESCRIPTION: Provides an example configuration file snippet for Redis Sentinel (`sentinel.conf`). It sets the Sentinel's listening port (26379), defines the master node to monitor (`mymaster` at `127.0.0.1:6379` with a quorum of 2), and configures failure detection (`down-after-milliseconds`) and failover timing (`failover-timeout`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n```\nport 26379\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 10000\nsentinel failover-timeout mymaster 60000\n```\n```\n\n----------------------------------------\n\nTITLE: Publishing to Centrifugo Channel with GRPC API Key in Go - Go\nDESCRIPTION: A Go client example that publishes messages to Centrifugo over GRPC with API key authorization. It defines a keyAuth struct to supply per-RPC metadata with the authorization header. Requires Centrifugo to be running with grpc_api_key set, and the appropriate Go and Protobuf libraries generated/imported. Handles both transport and application errors, publishing messages in a loop to a specified channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_27\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n\n    \"centrifugo_example/apiproto\"\n    \n    \"google.golang.org/grpc\"\n)\n\ntype keyAuth struct {\n    key string\n}\n\nfunc (t keyAuth) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {\n    return map[string]string{\n        \"authorization\": \"apikey \" + t.key,\n    }, nil\n}\n\nfunc (t keyAuth) RequireTransportSecurity() bool {\n    return false\n}\n\nfunc main() {\n    conn, err := grpc.Dial(\"localhost:10000\", grpc.WithInsecure(), grpc.WithPerRPCCredentials(keyAuth{\"xxx\"}))\n    if err != nil {\n        log.Fatalln(err)\n    }\n    defer conn.Close()\n    client := apiproto.NewCentrifugoClient(conn)\n    for {\n        resp, err := client.Publish(context.Background(), &PublishRequest{\n            Channel: \"chat:index\",\n            Data:    []byte(`{\"input\": \"hello from GRPC\"}`),\n        })\n        if err != nil {\n            log.Printf(\"Transport level error: %v\", err)\n        } else {\n            if resp.GetError() != nil {\n                respError := resp.GetError()\n                log.Printf(\"Error %d (%s)\", respError.Code, respError.Message)\n            } else {\n                log.Println(\"Successfully published\")\n            }\n        }\n        time.Sleep(time.Second)\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Decoding Batched Replies in JavaScript (JSON Format)\nDESCRIPTION: Presents a JavaScript function `decodeReplies` to parse incoming server data containing multiple replies batched in the line-delimited JSON format. It splits the raw data string by newline characters (`\\n`), parses each non-empty resulting string as a JSON object using `JSON.parse`, and collects them into an array of reply objects.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_protocol.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Stream Position from Channel History in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `history` method on a subscription object without specific options to retrieve the current top position (offset and epoch) of the publication stream within that channel. This requires history to be enabled for the channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst resp = await subscription.history();\nconsole.log(resp.offset);\nconsole.log(resp.epoch);\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying TCP Connection Tuple Members Shell\nDESCRIPTION: This snippet lists the four key elements (source IP, source port, destination IP, destination port) used by the operating system to uniquely identify a TCP connection, referenced as part of an ephemeral port exhaustion discussion. The code block is purely illustrative, not meant to be executed. It clarifies the role of the 4-tuple in connection management and troubleshooting.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/infra_tuning.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsource ip | source port | destination ip | destination port\n```\n\n----------------------------------------\n\nTITLE: Fetching Last N Publications in Reverse Order Using Centrifuge SDK in JavaScript\nDESCRIPTION: Provides a pattern for retrieving up to 10 publications from the end of the channel stream in reverse (last to first) order using the Centrifuge Subscription's 'history' method. Inputs include a 'limit' and 'reverse' flag set to true; output is a publication array ordered from latest to oldest. Channel must have history enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resp = await subscription.history({limit: 10, reverse: true});\nconsole.log(resp.publications);\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications Table Schema in ClickHouse\nDESCRIPTION: Defines the notifications table structure for tracking push notifications with provider, recipient, status and error details. Uses MergeTree engine with daily partitioning.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.notifications\n(\n    `uid` String,\n    `provider` String,\n    `type` String,\n    `recipient` String,\n    `device_id` String,\n    `platform` String,\n    `user` String,\n    `msg_id` String,\n    `status` String,\n    `error_message` String,\n    `error_code` String,\n    `time` DateTime\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192\n```\n\n----------------------------------------\n\nTITLE: Retrieving Presence Statistics from Client-Side Subscription (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to retrieve presence statistics (client count, unique user count) from the client side. It calls the 'presenceStats' method on an existing 'subscription' object for a specific channel, requiring appropriate client permissions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/presence.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.presenceStats(channel);\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Targets for Centrifugo (YAML)\nDESCRIPTION: This Prometheus configuration sets a 5-second scrape interval and defines a scrape job labeled 'centrifugo' to collect metrics from a Centrifugo service at port 8000. This configuration is required for Prometheus to detect and regularly scrape Centrifugo metrics. Inputs are the scraping targets; outputs are time series metrics data for visualization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/monitoring.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 5s\n\nscrape_configs:\n  - job_name: 'centrifugo'\n    static_configs:\n      - targets: ['centrifugo:8000']\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with a TOML Configuration File using Bash\nDESCRIPTION: Shows the command to start Centrifugo using a TOML configuration file specified with the `--config` flag.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.toml\n```\n\n----------------------------------------\n\nTITLE: Implementing Unidirectional Subscription Stream Handler for Centrifugo in Go\nDESCRIPTION: This Go snippet implements the CentrifugoProxy GRPC server's SubscribeUnidirectional method, responsible for handling unidirectional streaming to Centrifugo clients. Initial stream setup sends a subscription acknowledgment, then continually publishes data to the client every second. It demonstrates initialization, publishing, stream termination logic, and highlights the need for increased 'MaxConcurrentStreams' when expecting many concurrent subscriptions. Dependencies include the Centrifugo-generated protobuf Go package, google.golang.org/grpc, as well as Go's standard net and time packages.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy_streams.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"math\"\n\t\"net\"\n\t\"strconv\"\n\t\"time\"\n\n\tpb \"example/proxyproto\"\n\t\"google.golang.org/grpc\"\n)\n\ntype streamServer struct {\n\tpb.UnimplementedCentrifugoProxyServer\n}\n\nfunc (s *streamerServer) SubscribeUnidirectional(\n  req *pb.SubscribeRequest,\n  stream pb.CentrifugoProxy_SubscribeUnidirectionalServer,\n) error {\n\tstarted := time.Now()\n\tfmt.Println(\"unidirectional subscribe called with request\", req)\n\tdefer func() {\n\t\tfmt.Println(\"unidirectional subscribe finished, elapsed\", time.Since(started))\n\t}()\n\t_ = stream.Send(&pb.StreamSubscribeResponse{\n\t\tSubscribeResponse: &pb.SubscribeResponse{},\n\t})\n\t// Now publish data to a stream every 1 second.\n\tfor {\n\t\tselect {\n\t\tcase <-stream.Context().Done():\n\t\t\treturn stream.Context().Err()\n\t\tcase <-time.After(1000 * time.Millisecond):\n\t\t}\n\t\tpub := &pb.Publication{Data: []byte(`{\"input\": \"` + strconv.Itoa(i) + `\"}`)}\n\t\t_ = stream.Send(&pb.StreamSubscribeResponse{Publication: pub})\n\t}\n}\n\nfunc main() {\n\tlis, _ := net.Listen(\"tcp\", \":12000\")\n\ts := grpc.NewServer(grpc.MaxConcurrentStreams(math.MaxUint32))\n\tpb.RegisterCentrifugoProxyServer(s, &streamServer{})\n\t_ = s.Serve(lis)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ClickHouse Analytics in Centrifugo\nDESCRIPTION: Configuration object for enabling and setting up ClickHouse analytics integration in Centrifugo. Includes settings for database connection, cluster configuration, and data export options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clickhouse_analytics\": {\n    \"enabled\": true,\n    \"clickhouse_dsn\": [\n      \"tcp://127.0.0.1:9000\",\n      \"tcp://127.0.0.1:9001\",\n      \"tcp://127.0.0.1:9002\",\n      \"tcp://127.0.0.1:9003\"\n    ],\n    \"clickhouse_database\": \"centrifugo\",\n    \"clickhouse_cluster\": \"centrifugo_cluster\",\n    \"export\": {\n      \"connections\": {\n        \"enabled\": true,\n        \"http_headers\": [\n          \"User-Agent\",\n          \"Origin\",\n          \"X-Real-Ip\"\n        ]\n      },\n      \"subscriptions\": {\n        \"enabled\": true\n      },\n      \"operations\": {\n        \"enabled\": true\n      },\n      \"publications\": {\n        \"enabled\": true\n      },\n      \"notifications\": {\n        \"enabled\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster Sharded PUB/SUB\nDESCRIPTION: Configuration for enabling sharded PUB/SUB in Redis Cluster to improve PUB/SUB scalability across cluster nodes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/scalability.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"redis+cluster://localhost:7000\",\n      \"sharded_pub_sub_partitions\": 64\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Batched JSON Replies in JavaScript (Centrifugo)\nDESCRIPTION: Provides a JavaScript function `decodeReplies` that processes a raw string potentially containing multiple line-delimited JSON replies from the Centrifugo server. It splits the input string by newline characters (`\\n`), parses each resulting non-empty line as a JSON object using `JSON.parse`, and returns an array containing the individual reply objects.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_protocol.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Registration View (Python)\nDESCRIPTION: Implements the `device_register_view` Django view, restricted to POST requests. It authenticates the user, parses device information from the JSON request body, adds the user's ID, and then makes a POST request to the Centrifugo PRO `/api/device_register` HTTP API endpoint to register the device. It returns the Centrifugo-generated device ID upon successful registration. Requires Django, the `requests` library, and Centrifugo API settings (`CENTRIFUGO_HTTP_API_ENDPOINT`, `CENTRIFUGO_HTTP_API_KEY`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@require_POST\ndef device_register_view(request):\n    if not request.user.is_authenticated:\n        return JsonResponse({'detail': 'must be authenticated'}, status=403)\n\n    device_info = json.loads(request.body).get('device')\n    if not device_info:\n        return JsonResponse({'detail': 'device not found'}, status=400)\n\n    # Attach user ID to device info.\n    device_info[\"user\"] = str(request.user.pk)\n\n    session = requests.Session()\n    try:\n        resp = session.post(\n            settings.CENTRIFUGO_HTTP_API_ENDPOINT + '/api/device_register',\n            data=json.dumps(device_info),\n            headers={\n                'Content-type': 'application/json',\n                'X-API-Key': settings.CENTRIFUGO_HTTP_API_KEY,\n                'X-Centrifugo-Error-Mode': 'transport'\n            }\n        )\n    except requests.exceptions.RequestException as e:\n        logging.error(e)\n        return JsonResponse({'detail': 'failed to register device'}, status=500)\n\n    if resp.status_code != 200:\n        logging.error(resp.json())\n        return JsonResponse({'detail': 'failed to register device'}, status=500)\n\n    return JsonResponse({\n        'device_id': resp.json().get('result', {}).get('id')\n    })\n```\n\n----------------------------------------\n\nTITLE: Using Centrifugo WebSocket Fallback Transports in JavaScript\nDESCRIPTION: Configuration example for centrifuge-js client to use WebSocket with HTTP stream and SSE fallbacks. This replaces the deprecated SockJS transport removed in v6.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/migration-v6.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst transports = [\n    {\n        transport: 'websocket',\n        endpoint: 'ws://localhost:8000/connection/websocket'\n    },\n    {\n        transport: 'http_stream',\n        endpoint: 'http://localhost:8000/connection/http_stream'\n    },\n    {\n        transport: 'sse',\n        endpoint: 'http://localhost:8000/connection/sse'\n    }\n];\nconst centrifuge = new Centrifuge(transports);\ncentrifuge.connect()\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo PRO DEB Package on Debian/Ubuntu\nDESCRIPTION: These commands download and install the Centrifugo PRO DEB package on Debian or Ubuntu systems.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/install_and_run.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/centrifugal/centrifugo-pro/releases/download/v6.1.0/centrifugo-pro_6.1.0-0_amd64.deb\nsudo dpkg -i centrifugo-pro_6.1.0-0_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Validating Connection Token (Bash)\nDESCRIPTION: Executes the `checktoken` command to validate a provided connection JWT (`<TOKEN>`) against the settings in a configuration file (`-c config.json`). This is useful for testing and debugging connection tokens during application development.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/console_commands.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo checktoken -c config.json <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Establishing Connections to Centrifugo using Curl\nDESCRIPTION: These curl commands demonstrate how to establish connections to Centrifugo using the uni_http_stream transport and a JWT token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/connections.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/connection/uni_http_stream --data '{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0MiIsImV4cCI6MTYyNzcxMzMzNX0.s3eOhujiyBjc4u21nuHkbcWJll4Um0QqGU3PF-6Mf7Y\", \"name\": \"terminal\"}'\n```\n\n----------------------------------------\n\nTITLE: Querying Unique Users from Connections Table in ClickHouse (SQL)\nDESCRIPTION: Retrieves a distinct list of user identifiers from the 'centrifugo.connections_distributed' table, indicating currently or previously connected users. Useful for understanding connected user base at any given time. Requires distributed connections table to be available.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT user\nFROM centrifugo.connections_distributed;\n\n‚îå‚îÄuser‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ user_1   ‚îÇ\n‚îÇ user_2   ‚îÇ\n‚îÇ user_3   ‚îÇ\n‚îÇ user_4   ‚îÇ\n‚îÇ user_5   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual TLS with Certificate Files in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure Centrifugo to enable TLS using pre-existing certificate (`server.crt`) and private key (`server.key`) files. Set `tls` to `true` and provide the paths to the respective files using `tls_cert` and `tls_key`. This method is suitable when you have obtained certificates from a Certificate Authority (CA) or generated self-signed certificates for development.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/tls.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"tls\": true,\n  \"tls_key\": \"server.key\",\n  \"tls_cert\": \"server.crt\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Subscribe Proxy for Default Namespace\nDESCRIPTION: Configuration to enable the subscribe proxy for channels without a namespace (default namespace). This applies the proxy_subscribe flag at the top configuration level.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_endpoint\": \"http://localhost:3000/centrifugo/subscribe\",\n  \"proxy_subscribe_timeout\":  \"1s\",\n  \"proxy_subscribe\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Centrifugo Error Codes to HTTP Status Codes\nDESCRIPTION: Go function that maps internal Centrifugo error codes to appropriate HTTP status codes when transport error mode is enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_30\n\nLANGUAGE: go\nCODE:\n```\nfunc MapErrorToHTTPCode(err *Error) int {\n\tswitch err.Code {\n\tcase ErrorInternal.Code: // 100 -> HTTP 500\n\t\treturn http.StatusInternalServerError\n\tcase ErrorUnknownChannel.Code, ErrorNotFound.Code: // 102, 104 -> HTTP 404\n\t\treturn http.StatusNotFound\n\tcase ErrorBadRequest.Code, ErrorNotAvailable.Code: // 107, 108 -> HTTP 400\n\t\treturn http.StatusBadRequest\n\tcase ErrorUnrecoverablePosition.Code: // 112 -> HTTP 416\n\t\treturn http.StatusRequestedRangeNotSatisfiable\n\tcase ErrorConflict.Code: // 113 -> HTTP 409\n\t\treturn http.StatusConflict\n\tdefault:\n\t\t// Default to Internal Error for unmapped errors.\n\t\t// In general should be avoided - all new API errors must be explicitly described here.\n\t\treturn http.StatusInternalServerError // HTTP 500\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chat Models in Django - Python\nDESCRIPTION: Declares three core models for the chat app: Room, RoomMember, and Message. Room provides unique room identity and versioning; RoomMember establishes user-to-room relationships; Message stores messages with foreign keys to Room and User. Dependencies are Django's ORM and User model. All fields, relationships, and business logic are preserved as commented.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\\nfrom django.contrib.auth.models import User\\n\\n\\nclass Room(models.Model):\\n    name = models.CharField(max_length=100, unique=True)\\n    version = models.PositiveBigIntegerField(default=0)\\n    created_at = models.DateTimeField(auto_now_add=True)\\n    bumped_at = models.DateTimeField(auto_now_add=True)\\n    last_message = models.ForeignKey(\\n        'Message', related_name='last_message_rooms',\\n        on_delete=models.SET_NULL, null=True, blank=True,\\n    )\\n\\n    def increment_version(self):\\n        self.version += 1\\n        self.save()\\n        return self.version\\n\\n    def __str__(self):\\n        return self.name\\n\\n\\nclass RoomMember(models.Model):\\n    room = models.ForeignKey(Room, related_name='memberships', on_delete=models.CASCADE)\\n    user = models.ForeignKey(User, related_name='rooms', on_delete=models.CASCADE)\\n    joined_at = models.DateTimeField(auto_now_add=True)\\n\\n    class Meta:\\n        unique_together = ('room', 'user')\\n\\n    def __str__(self):\\n        return f\\\"{self.user.username} in {self.room.name}\\\"\\n\\n\\nclass Message(models.Model):\\n    room = models.ForeignKey(Room, related_name='messages', on_delete=models.CASCADE)\\n    # Note, message may have null user ‚Äì we consider such messages \\\"system\\\". These messages\\n    # initiated by the backend and have no user author. We are not using such messages in\\n    # the example currently, but leave the opportunity to extend.\\n    user = models.ForeignKey(\\n        User, related_name='messages', on_delete=models.CASCADE, null=True)\\n    content = models.TextField()\\n    created_at = models.DateTimeField(auto_now_add=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Rooms with Django ORM - Python\nDESCRIPTION: Implements a helper function to create chat room entries in the database via Django's ORM. Depends on the Room model in chat.models. Accepts a room name as input, creates and returns a Room object. Used to bootstrap the chat environment for testing scalability.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/scale.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom chat.models import Room\\n\\ndef create_room(name):\\n    return Room.objects.create(name=name)\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with Custom Configuration (bash)\nDESCRIPTION: This command launches the Centrifugo server using the specified config file (config.json). Requires Centrifugo installed and the provided config file present. Parameter: -c config.json. On success, starts the Centrifugo server with enabled HTTP streaming and user auto-subscription, as per previous config.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_http_stream.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Implementing Django View Functions for Centrifugo Proxy Handlers\nDESCRIPTION: This Python snippet shows the implementation of Django view functions (`connect`, `publish`, `subscribe`) decorated with `@csrf_exempt` to handle Centrifugo proxy requests. The `connect` view authenticates users (using a placeholder 'tutorial-user'), while `publish` and `subscribe` validate respective requests by returning an empty result, effectively allowing all publications and subscriptions. Each view returns a `JsonResponse` conforming to Centrifugo's expected proxy result format. These views are intended to be called by the Centrifugo server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"chat/views.py\"\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\n\n@csrf_exempt\ndef connect(request):\n    # In connect handler we must authenticate connection.\n    # Here we return a fake user ID to Centrifugo to keep tutorial short.\n    # More details about connect result format can be found in proxy docs:\n    # https://centrifugal.dev/docs/server/proxy#connect-proxy\n    logger.debug(request.body)\n    response = {\n        'result': {\n            'user': 'tutorial-user'\n        }\n    }\n    return JsonResponse(response)\n\n@csrf_exempt\ndef publish(request):\n    # In publish handler we can validate publication request initialted by a user.\n    # Here we return an empty object ‚Äì thus allowing publication.\n    # More details about publish result format can be found in proxy docs:\n    # https://centrifugal.dev/docs/server/proxy#publish-proxy\n    response = {\n        'result': {}\n    }\n    return JsonResponse(response)\n\n@csrf_exempt\ndef subscribe(request):\n    # In subscribe handler we can validate user subscription request to a channel.\n    # Here we return an empty object ‚Äì thus allowing subscription.\n    # More details about subscribe result format can be found in proxy docs:\n    # https://centrifugal.dev/docs/server/proxy#subscribe-proxy\n    response = {\n        'result': {}\n    }\n    return JsonResponse(response)        \n```\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo PRO Docker Image\nDESCRIPTION: This command runs the Centrifugo PRO Docker image, setting file limits, mounting a configuration directory, and exposing port 8000.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/install_and_run.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --ulimit nofile=262144:262144 -v /host/dir/with/config/file:/centrifugo -p 8000:8000 centrifugo/centrifugo-pro:v6.1.0 centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Running Toxiproxy Server for Latency Simulation\nDESCRIPTION: Demonstrates how to start the Toxiproxy server to simulate network latency for Redis connections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntoxyproxy-server\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3502 (Stale)\nDESCRIPTION: Defines the 'Stale' disconnect code (3502). This is a terminal code issued to close connections that have been established but failed to authenticate (e.g., send a valid connect command with token) within the server's configured time limit. Clients will not automatically reconnect.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nCode:   3502\nReason: \"stale\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo PRO Image for Kubernetes Helm Chart\nDESCRIPTION: This YAML configuration specifies the Centrifugo PRO image repository and tag for use with the official Helm chart in a Kubernetes deployment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/install_and_run.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n...\nimage:\n  registry: docker.io\n  repository: centrifugo/centrifugo-pro\n  tag: v6.1.0\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo User Token with Custom Expiry using Shell\nDESCRIPTION: Uses the `centrifugo gentoken` command similar to the default generation, but includes the `-t` flag to specify a custom token time-to-live (TTL) in seconds. In this example, `-t 3600` sets the token expiry to 1 hour (3600 seconds) for user `28282` based on `config.json`. Exits with status 1 on error.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/console_commands.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncentrifugo gentoken -c config.json -u 28282 -t 3600\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxied HTTP Headers in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to specify which HTTP headers from the original client request should be forwarded by Centrifugo to the backend application when using the HTTP proxy. This is useful for transparent authentication based on headers like `Cookie` or `Authorization`. The `proxy_http_headers` key takes an array of header names.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"proxy_http_headers\": [\n        \"Origin\",\n        \"User-Agent\",\n        \"Cookie\",\n        \"Authorization\",\n        \"X-Real-Ip\",\n        \"X-Forwarded-For\",\n        \"X-Request-Id\"\n    ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Connections API with Curl\nDESCRIPTION: Curl command to call the connections API, retrieving all active connections for user ID 42 using the Centrifugo HTTP API.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/connections.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"user\": \"42\"}' \\\n  http://localhost:8000/api/connections\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Sessions with ip_hash in Nginx for Centrifugo - Nginx\nDESCRIPTION: This Nginx configuration snippet demonstrates how to enable sticky sessions via the ip_hash directive for upstream servers serving Centrifugo. Sticky sessions ensure that all client requests are directed to the same backend node, which is necessary for SockJS due to its in-process session memory. The upstream group includes two Centrifugo instances, and the configuration requires Nginx as a prerequisite. This setup may be limited in fairness when many clients share the same IP.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/sockjs.md#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\\n    ip_hash;\\n    server 127.0.0.1:8000;\\n    server 127.0.0.2:8000;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Chat Room List Screen in React - javascript\nDESCRIPTION: Displays the main screen showing the list of chat rooms a user belongs to. Fetches chat state via useContext from ChatContext and maps over room IDs to render each room, linking to the respective chat room detail route. Shows room name, last message, user info, and member count. Expects chat state to provide up-to-date room and message information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport ChatContext from './ChatContext'\n\nconst ChatRoomList = () => {\n  const { state } = useContext(ChatContext);\n\n  return (\n    <div id=\"chat-rooms\">\n      {state.rooms.map((roomId: number) => {\n        const room = state.roomsById[roomId]\n        return <div className=\"chat-room-block\" key={room.id}>\n          <Link to={`/rooms/${room.id}`}>\n            <div className=\"left-column\">\n              <span className=\"name\">{room.name}</span>\n              <span className=\"message-content\">\n                {room.last_message? (\n                  <span>\n                    <span className='message-content-author'>{room.last_message.user.username}:</span>\n                    &nbsp;\n                    {room.last_message.content}\n                  </span>\n                ) : (<></>)}\n              </span>\n            </div>\n            <div className=\"right-column\">\n              <span className=\"chat-room-member-counter\">{room.member_count}&nbsp;<span className=\"chat-room-member-counter-icon\">üêà</span></span>\n            </div>\n          </Link>\n        </div>\n      })}\n    </div>\n  );\n};\n\nexport default ChatRoomList;\n```\n\n----------------------------------------\n\nTITLE: Handling Server-Side Subscriptions in Centrifugo\nDESCRIPTION: Shows how to listen for publications from server-side subscriptions using the centrifuge-js client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/client_api.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.on('publish', function(messageCtx) {\n    console.log(messageCtx);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscription Capabilities Configuration\nDESCRIPTION: Example showing how to set subscription-specific capabilities\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/capabilities.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allow\": [\"pub\", \"hst\", \"prs\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Time Duration Examples in JavaScript\nDESCRIPTION: Examples of valid time duration formats in Centrifugo configuration. Shows different time units from milliseconds to hours.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n\"1000ms\" // 1000 milliseconds\n\"1s\"     // 1 second\n\"12h\"    // 12 hours\n\"720h\"   // 30 days\n```\n\n----------------------------------------\n\nTITLE: Querying All Operations from the Table (ClickHouse Output Example)\nDESCRIPTION: Presents sample output from querying the 'centrifugo.operations' table. Useful as a reference for expected table fields (client, user, op, channel, method, error, disconnect, duration, time) and data types. Not actual code, but provides output structure for developers integrating or inspecting operation analytics.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\n:) SELECT * FROM centrifugo.operations\n\n‚îå‚îÄclient‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄuser‚îÄ‚î¨‚îÄop‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄchannel‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄmethod‚îÄ‚î¨‚îÄerror‚îÄ‚î¨‚îÄdisconnect‚îÄ‚î¨‚îÄduration‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄtime‚îÄ‚îê\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ connecting  ‚îÇ             ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ   217894 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ connect     ‚îÇ             ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ        0 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ $chat:index ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ    92714 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ presence    ‚îÇ $chat:index ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ     3539 ‚îÇ 2021-07-31 08:15:09 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ test1       ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ     2402 ‚îÇ 2021-07-31 08:15:12 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ test2       ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ      634 ‚îÇ 2021-07-31 08:15:12 ‚îÇ\n‚îÇ bd55ae3a-dd44-47cb-a4cc-c41f8e33803b ‚îÇ 2694 ‚îÇ subscribe   ‚îÇ test3       ‚îÇ        ‚îÇ     0 ‚îÇ          0 ‚îÇ      412 ‚îÇ 2021-07-31 08:15:12 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Regex Channel Matching Configuration\nDESCRIPTION: Example showing how to use regex patterns for channel matching\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/capabilities.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"^posts_[\\d]+$\"],\n            \"match\": \"regex\",\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Proxies in Granular Proxy Mode\nDESCRIPTION: This configuration example shows how to define multiple proxy endpoints with different settings. Each proxy has a unique name, endpoint, and optional configurations like timeout and HTTP headers to proxy.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true,\n  \"proxies\": [\n    {\n      \"name\": \"connect\",\n      \"endpoint\": \"http://localhost:3000/centrifugo/connect\",\n      \"timeout\": \"500ms\",\n      \"http_headers\": [\"Cookie\"]\n    },\n    {\n      \"name\": \"refresh\",\n      \"endpoint\": \"http://localhost:3000/centrifugo/refresh\",\n      \"timeout\": \"500ms\"\n    },\n    {\n      \"name\": \"subscribe1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/subscribe\"\n    },\n    {\n      \"name\": \"publish1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/publish\"\n    },\n    {\n      \"name\": \"rpc1\",\n      \"endpoint\": \"http://localhost:3001/centrifugo/rpc\"\n    },\n    {\n      \"name\": \"subscribe2\",\n      \"endpoint\": \"http://localhost:3002/centrifugo/subscribe\"\n    },\n    {\n      \"name\": \"publish2\",\n      \"endpoint\": \"grpc://localhost:3002\"\n    }\n    {\n      \"name\": \"rpc2\",\n      \"endpoint\": \"grpc://localhost:3002\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Replicated `connections` Table Schema in ClickHouse (SQL)\nDESCRIPTION: This SQL snippet displays the `CREATE TABLE` statement for the `centrifugo.connections` table in ClickHouse. It defines the columns used to store connection details (client ID, user ID, client name/version, transport type, headers, metadata, timestamp). The table uses the `ReplicatedMergeTree` engine for fault tolerance and scalability, partitions data by day (`toYYYYMMDD(time)`), orders by timestamp, and automatically deletes data older than one day (`TTL time + toIntervalDay(1)`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nSHOW CREATE TABLE centrifugo.connections;\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.connections\n(\n    `client` String,\n    `user` String,\n    `name` String,\n    `version` String,\n    `transport` String,\n    `headers` Map(String, Array(String)),\n    `metadata` Map(String, Array(String)),\n    `time` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{cluster}/{shard}/connections', '{replica}')\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n```\n\n----------------------------------------\n\nTITLE: Processing Buffered Messages in Document Synchronization\nDESCRIPTION: Method to process buffered real-time messages after loading the initial document state. It applies updates with versions greater than the current document version and clears the buffer after processing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-06-03-real-time-document-state-sync.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n#processBufferedMessages() {\n    this.#messageBuffer.forEach((msg) => {\n        const newVersion = this.#compareVersion(msg, this.#version);\n        if (newVersion) { // Otherwise, skip buffered publication.\n            this.#document = this.#applyUpdate(this.#document, msg.data);\n            this.#version = newVersion;\n        }\n    });\n    // Clear the buffer after processing.\n    this.#messageBuffer = [];\n    // Only call onChange with final document state.\n    this.#onChange(this.#document);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Permissions\nDESCRIPTION: Configuration update to allow authenticated clients to subscribe to any channel without a namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"channel\": {\n    \"without_namespace\": {\n      \"allow_subscribe_for_client\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Centrifugo Connection and Subscription in Java\nDESCRIPTION: Java example of connecting to a Centrifugo server and subscribing to a channel. Shows implementation of event listeners for both client and subscription events, with focus on handling publications.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nEventListener listener = new EventListener() {};\nOptions opts = new Options();\nClient client = new Client(\"ws://localhost:8000/connection/websocket\", opts, listener);\n\nSubscriptionEventListener subListener = new SubscriptionEventListener() {\n    @Override\n    public void onPublication(Subscription sub, PublicationEvent event) {\n        System.out.println(\"publication from \" + sub.getChannel());\n    }\n};\n\nSubscription sub;\ntry {\n    sub = client.newSubscription(\"example\", subListener);\n    sub.subscribe();\n} catch (DuplicateSubscriptionException e) {\n    e.printStackTrace();\n}\n\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL LISTEN/NOTIFY Trigger (SQL)\nDESCRIPTION: SQL code to create a PostgreSQL function (`centrifugo_notify_partition_change`) and a trigger (`centrifugo_notify_partition_trigger`). The trigger executes after each row insertion into the `chat_outbox` table, calling the function which uses `pg_notify` to send a notification on the 'centrifugo_partition_change' channel with the partition number. This allows Centrifugo to react to new outbox entries instantly instead of relying solely on polling.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION centrifugo_notify_partition_change()\nRETURNS TRIGGER AS $$\nBEGIN\n    PERFORM pg_notify('centrifugo_partition_change', NEW.partition::text);\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE OR REPLACE TRIGGER centrifugo_notify_partition_trigger\nAFTER INSERT ON chat_outbox\nFOR EACH ROW\nEXECUTE FUNCTION centrifugo_notify_partition_change();\n```\n\n----------------------------------------\n\nTITLE: Complete Centrifugo Configuration with User Subscriptions\nDESCRIPTION: Extended configuration example that enables both unidirectional WebSocket and automatic personal channel subscriptions for users.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_websocket.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"secret\",\n  \"uni_websocket\":true,\n  \"user_subscribe_to_personal\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Namespace-level Subscription Stream Proxy in Centrifugo (JSON)\nDESCRIPTION: This configuration extends the previous example by enabling subscription streams for a specific namespace within the channel. The 'namespaces' array contains a namespace with 'subscribe_stream_proxy_enabled' set to true, allowing streams specifically for that namespace. This makes stream proxies granularly configurable per namespace, alongside endpoint and timeout settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy_streams.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"proxy\": {\n      \"subscribe_stream\": {\n        \"endpoint\": \"grpc://localhost:12000\",\n        \"timeout\": \"3s\"\n      }\n    },\n    \"namespaces\": [\n      {\n        \"name\": \"streams\",\n        \"subscribe_stream_proxy_enabled\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Connect Push Frame (JSON)\nDESCRIPTION: Illustrates the JSON structure of a `connect` push message sent by Centrifugo immediately after establishing a unidirectional connection. Contains essential session details like client ID, server version, established subscriptions (with recovery info if applicable), ping interval, and session ID.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connect\":{\n    \"client\":\"5c5b6011-b282-447d-8753-cee7269117e6\",\n    \"version\":\"0.0.0 OSS\",\n    \"subs\":{\n      \"personal:user#2694\": {\n        \"recoverable\":true,\n        \"offset\": 12,\n        \"epoch\":\"BXLK\",\n        \"positioned\":true\n      },\n      \"global\": {}\n    },\n    \"ping\":25,\n    \"session\":\"631a6f6e-02bc-473b-908f-8059a680e74c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Backend-Mediated Publish Workflow with Centrifugo Delivery - swimlanes.io Diagram\nDESCRIPTION: This swimlanes.io snippet details a workflow where a client publishes data to the backend, which processes, optionally persists, and then forwards to Centrifugo for real-time broadcasting. The diagram emphasizes message validation, storage, and notifies clients subscribed to the relevant channels. Render with swimlanes.io or a compatible diagram tool. Actors: Client, App Backend, Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/flow_diagrams.md#2025-04-23_snippet_2\n\nLANGUAGE: swimlanes.io\nCODE:\n```\nClient -> App Backend: Publish request\n\nnote:\nClient sends data to publish to the application backend.\n\nBackend validates it, maybe modifies, optionally saves to the main database, constructs real-time update and publishes it to the Centrifugo server API.\n\nApp Backend -> Centrifugo: Publish over Centrifugo API\n\nCentrifugo -->> Client: {far-bolt fa-lg} Real-time notification\n\nnote: Centrifugo delivers real-time message to active channel subscribers.\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Subscription Token Using Bash CLI\nDESCRIPTION: Creates a JWT for channel subscription with user ID '28282' and channel 'channel', valid for 1 week. Needs Centrifugo and a valid config file; '-c', '-u', '-s' select config, user ID, and channel. Used in testing channel permissions before going live.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/console_commands.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gensubtoken -c config.json -u 28282 -s channel\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Installed Apps for Chat and Rest Framework - Python\nDESCRIPTION: Demonstrates how to modify the Django settings to enable the custom 'chat' app and the 'rest_framework' package. Required dependencies: Django and Django Rest Framework must be installed. Main parameters: 'INSTALLED_APPS' list determines enabled applications for the Django project.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\\n    'chat',\\n    'django.contrib.admin',\\n    'django.contrib.auth',\\n    'django.contrib.contenttypes',\\n    'django.contrib.sessions',\\n    'django.contrib.messages',\\n    'django.contrib.staticfiles',\\n]\n```\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\\n    'rest_framework',\\n    'chat',\\n    'django.contrib.admin',\\n    'django.contrib.auth',\\n    'django.contrib.contenttypes',\\n    'django.contrib.sessions',\\n    'django.contrib.messages',\\n    'django.contrib.staticfiles',\\n]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload Sent to Backend in Centrifugo Refresh Request\nDESCRIPTION: Displays the structure of the HTTP POST payload sent by Centrifugo to the backend refresh proxy endpoint when validating expiring connections. This object includes identifiers such as client ID, transport type, protocol, encoding, and the user ID. The backend should expect and parse this schema to process the session refresh logic.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Bidirectional Stream Handler in Go\nDESCRIPTION: Go implementation of a GRPC service handler for bidirectional subscription streams. This example receives the initial subscription request and then echoes back all publications received from the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy_streams.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *streamerServer) SubscribeBidirectional(\n\tstream pb.CentrifugoProxy_SubscribeBidirectionalServer,\n) error {\n\tstarted := time.Now()\n\tfmt.Println(\"bidirectional subscribe called\")\n\tdefer func() {\n\t\tfmt.Println(\"bidirectional subscribe finished, elapsed\", time.Since(started))\n\t}()\n\t// First message always contains SubscribeRequest.\n\treq, _ := stream.Recv()\n\tfmt.Println(\"subscribe request received\", req.SubscribeRequest)\n\t_ = stream.Send(&pb.StreamSubscribeResponse{\n\t\tSubscribeResponse: &pb.SubscribeResponse{},\n\t})\n\t// The following messages contain publications from client.\n\tfor {\n\t\treq, _ = stream.Recv()\n\t\tdata := req.Publication.Data\n\t\tfmt.Println(\"data from client\", string(data))\n\t\tvar cd clientData\n\t\tpub := &pb.Publication{Data: data}\n\t\t_ = stream.Send(&pb.StreamSubscribeResponse{Publication: pub})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Request Payload Example\nDESCRIPTION: Example of the payload sent to the backend during a publish request\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"channel\": \"chat:index\",\n  \"data\":{\"input\":\"hello\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Centrifugo Connections API\nDESCRIPTION: This JSON snippet shows a sample response from the Centrifugo connections API, displaying information about active connections for a user.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/connections.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"connections\": {\n            \"db8bc772-2654-4283-851a-f29b888ace74\": {\n                \"app_name\": \"terminal\",\n                \"transport\": \"uni_http_stream\",\n                \"protocol\": \"json\"\n            },\n            \"4bc3ca70-ecc5-439d-af14-a78ae18e31c7\": {\n                \"app_name\": \"terminal\",\n                \"transport\": \"uni_http_stream\",\n                \"protocol\": \"json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo JSON Configuration Using Bash CLI\nDESCRIPTION: Generates a minimal JSON configuration file named 'config.json' for Centrifugo in the current directory. No dependencies beyond Centrifugo installation. The '-c' flag specifies the config output file; if errors occur, it exits with an error message and exit code 1. Used primarily in development to bootstrap a config quickly.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/console_commands.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig -c config.json\n```\n\n----------------------------------------\n\nTITLE: Handling Subscription Events in Centrifuge Go SDK\nDESCRIPTION: This Go snippet demonstrates subscribing to a channel and registering handler functions for subscribing, subscribed, and unsubscribed events in the Centrifuge Go SDK. After error checking, anonymous functions are assigned to event hooks for logging state changes. The subscription is then initiated. Requires Centrifuge Go client and a configured logger.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nsub, err := client.NewSubscription(\"example\")\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nsub.OnSubscribing(func(e centrifuge.SubscribingEvent) {\n\tlog.Printf(\"Subscribing on channel %s - %d (%s)\", sub.Channel, e.Code, e.Reason)\n})\nsub.OnSubscribed(func(e centrifuge.SubscribedEvent) {\n\tlog.Printf(\"Subscribed on channel %s\", sub.Channel)\n})\nsub.OnUnsubscribed(func(e centrifuge.UnsubscribedEvent) {\n\tlog.Printf(\"Unsubscribed from channel %s - %d (%s)\", sub.Channel, e.Code, e.Reason)\n})\n\nerr = sub.Subscribe()\nif err != nil {\n\tlog.Fatalln(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Presence from Subscription (JavaScript)\nDESCRIPTION: This snippet shows how to asynchronously retrieve presence data for a specific channel using a Centrifugo client subscription instance in JavaScript. The call to subscription.presence(channel) returns an object with information about all currently connected clients for the given channel, provided the client has permission for the presence operation on the channel. Requires Centrifugo JavaScript SDK, a configured subscription, and proper channel permissions. Input: channel name; Output: presence data object.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/presence.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst presenceData = await subscription.presence(channel);\n```\n\n----------------------------------------\n\nTITLE: Correct Connection Capabilities Configuration with Separate Channel Entries\nDESCRIPTION: The correct way to configure capabilities for multiple channels, giving each channel its own separate entry with the appropriate permissions to avoid processing issues.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/capabilities.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\"],\n            \"allow\": [\"sub\"]\n        },\n        {\n            \"channels\": [\"user_42\"],\n            \"allow\": [\"sub\", \"pub\", \"hst\", \"prs\"]\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo Connect Proxy Request Payload (JSON)\nDESCRIPTION: This JSON object illustrates the payload structure that Centrifugo sends to the configured `proxy_connect_endpoint` when a client attempts to connect without a token. It includes essential details like a unique `client` ID generated by Centrifugo, the connection `transport` (e.g., 'websocket'), and the `protocol` and `encoding` used.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo ClickHouse Analytics for Single Instance (JSON)\nDESCRIPTION: Example JSON configuration snippet for Centrifugo (`config.json`) demonstrating how to enable ClickHouse analytics for a single, non-clustered ClickHouse instance, typically used during development. It specifies the DSN, database name, leaves `clickhouse_cluster` empty, and enables export for various event types.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"clickhouse_analytics\": {\n        \"enabled\": true,\n        \"clickhouse_dsn\": [\n            \"tcp://127.0.0.1:9000\"\n        ],\n        \"clickhouse_database\": \"centrifugo\",\n        \"clickhouse_cluster\": \"\",\n        \"export_connections\": true,\n        \"export_subscriptions\": true,\n        \"export_publications\": true,\n        \"export_operations\": true,\n        \"export_http_headers\": [\n            \"Origin\",\n            \"User-Agent\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3013 (Too Many Requests)\nDESCRIPTION: Defines the 'Too Many Requests' disconnect code (3013). This non-terminal code may be issued if a client sends an excessive number of commands, potentially triggering server-side rate limits applied at the connection level. Clients are expected to attempt reconnection, possibly after a backoff period.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nCode:   3013\nReason: \"too many requests\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Unidirectional GRPC with Additional Configuration (JSON)\nDESCRIPTION: This snippet illustrates a partial JSON configuration that enables the unidirectional GRPC endpoint in Centrifugo using the 'uni_grpc' object with 'enabled' set to true, as part of a larger configuration file. Ellipsis ('...') indicates the presence of other unrelated configuration settings. The snippet focuses on the required structure to activate the GRPC endpoint; all additional configuration keys are available for further customization as detailed elsewhere in the documentation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_grpc.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    ...\\n    \\\"uni_grpc\\\": {\\n        \\\"enabled\\\": true\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Error Handling when Publishing to Unknown Namespace via httpie - Bash\nDESCRIPTION: This bash httpie example shows how Centrifugo responds with an error JSON object when an API publish command is made to an undefined channel namespace. The snippet includes the full HTTP request and illustrates the 'error' object in the response, which contains a code and message. Replace \\u003cYOUR_API_KEY\\u003e as needed. The pattern applies generally for error responses from the API.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"method\": \"publish\", \"params\": {\"channel\": \"unknown:chat\", \"data\": {\"text\": \"hello\"}}}' | http \"localhost:8000/api\" Authorization:\"apikey \\u003cYOUR_API_KEY\\u003e\"\nHTTP/1.1 200 OK\nContent-Length: 55\nContent-Type: application/json\nDate: Thu, 17 May 2018 22:03:09 GMT\n\n{\n    \"error\": {\n        \"code\": 102,\n        \"message\": \"namespace not found\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing QuicTransport Connection in JavaScript\nDESCRIPTION: Code demonstrates how to create a new QuicTransport connection to a local server over QUIC protocol.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst transport = new QuicTransport('quic-transport://localhost:4433/path');\n```\n\n----------------------------------------\n\nTITLE: Installing Django REST Framework\nDESCRIPTION: Adding REST framework to Django project\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    'rest_framework',\n    'chat',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Custom Configuration (Bash)\nDESCRIPTION: Launches Centrifugo using a specified configuration file. This command expects Centrifugo to be installed and the specified config.json to exist and be valid. No direct input or output beyond standard service startup and logs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo -c config.json\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct HTTP Status Code Transforms for Unidirectional Transports in Centrifugo\nDESCRIPTION: This JSON configuration allows direct mapping of HTTP status codes to disconnect objects for unidirectional transports in Centrifugo. It defines transformations for status codes 404, 403, and 429 to specific disconnect codes and reasons.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proxy_http_status_code_transforms\": [\n    {\"status_code\": 404, \"to_disconnect\": {\"code\": 4904, \"reason\": \"not found\"}},\n    {\"status_code\": 403, \"to_disconnect\": {\"code\": 4903, \"reason\": \"permission denied\"}},\n    {\"status_code\": 429, \"to_disconnect\": {\"code\": 4429, \"reason\": \"too many requests\"}}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to User-Specific Centrifugo Channel\nDESCRIPTION: Code for subscribing to a user-specific channel in Centrifugo using the user's ID from the Keycloak token. Demonstrates how to handle real-time messages from the subscription.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-03-31-keycloak-sso-centrifugo.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  ...\n  const [publishedData, setPublishedData] = useState(\"\");\n  ...\n\n  useEffect(() => {\n    ...\n    const userChannel = \"#\" + keycloak.tokenParsed?.sub;\n    const sub = centrifuge.newSubscription(userChannel);\n    sub.on(\"publication\", function (ctx) {\n      setPublishedData(JSON.stringify(ctx.data));\n    }).subscribe();\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with Uni HTTP Stream Transport\nDESCRIPTION: Command to start Centrifugo with the uni_http_stream transport enabled, which allows connections from terminal using curl.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/connections.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_UNI_HTTP_STREAM=1 centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Handling 'unsubscribe' Push Messages from Centrifugal Server (JSON)\nDESCRIPTION: This JSON message confirms to the client that its connection has been successfully unsubscribed from a specific channel during its lifetime. It includes the 'channel' name from which the client was unsubscribed and an empty 'unsubscribe' object. This is typically received after the client explicitly unsubscribes or if the server forces unsubscription.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\":\"test\",\n  \"unsubscribe\":{}\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Real-Time Message Queue in React (JavaScript)\nDESCRIPTION: Implements a React hook that asynchronously processes a queue of real-time chat events using a useEffect. The handler inspects event types (message_added, user_joined, user_left) and dispatches to type-specific handlers, each capable of updating UI or local state. After processing, the event is dequeued. Requires React environment, useReducer, useState, and integration with the message reception logic. Inputs are arrays of message objects; outputs are state updates and side effects.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/centrifugo.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst [chatState, dispatch] = useReducer(reducer, initialChatState);\nconst [messageQueue, setMessageQueue] = useState<any[]>([]);\n\nuseEffect(() => {\n  if (messageQueue.length === 0) {\n    return; // Return if no messages to process.\n  }\n\n  const processUserJoined = async (body: any) => {\n    // We will describe this very soon.\n  }\n\n  const processUserLeft = async (body: any) => {\n    // We will describe this very soon.\n  }\n\n  const processMessageAdded = async (body: any) => {\n    // We will describe this very soon.\n  };\n\n  const processMessage = async () => {\n    const message = messageQueue[0];\n\n    const { type, body } = message\n    switch (type) {\n      case 'message_added': {\n        await processMessageAdded(body);\n        break\n      }\n      case 'user_joined': {\n        await processUserJoined(body);\n        break\n      }\n      case 'user_left': {\n        await processUserLeft(body);\n        break\n      }\n      default:\n        console.log('unsupported message type', type, body)\n    }\n\n    // Remove the processed message from the queue\n    setMessageQueue(prevQueue => prevQueue.slice(1));\n  };\n\n  processMessage();\n}, [messageQueue, chatState]);\n```\n\n----------------------------------------\n\nTITLE: Defining Outbox Django Model - Python\nDESCRIPTION: Defines a Django ORM model named Outbox with required fields to support the transactional outbox pattern for reliable event publishing. The table is intended to hold events for later consumption by Centrifugo, following a predefined format expected by the Centrifugo outbox consumer. Dependencies: Django ORM, a configured PostgreSQL database; key parameters include 'method' (text), 'payload' (JSON), 'partition' (integer for parallelism), and 'created_at' (timestamp of insertion). The model is inserted within a DB transaction to guarantee atomicity.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Outbox(models.Model):\n    method = models.TextField(default=\"publish\")\n    payload = models.JSONField()\n    partition = models.BigIntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Connection Capabilities in JSON\nDESCRIPTION: Example showing how to set basic connection capabilities for subscribing to specific channels using JSON configuration\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/capabilities.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\", \"user_42\"],\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Subscription Token in JavaScript\nDESCRIPTION: Example of creating a subscription with a JWT token for authentication. This shows how to set a static token when creating a subscription to an authenticated channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst sub = centrifuge.newSubscription(channel, {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE'\n});\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top Publishing Users in ClickHouse (SQL)\nDESCRIPTION: Aggregates and sorts users who performed the highest number of 'publish' operations within the last minute, showing top 10. This query assists in identifying active users or possible load generators. Requires operation timestamp granularity and appropriate partitioning for performant queries.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    COUNT(op) AS num_ops,\n    user\nFROM centrifugo.operations_distributed\nWHERE (op = 'publish') AND (time >= (now() - toIntervalMinute(1)))\nGROUP BY user\nORDER BY num_ops DESC\nLIMIT 10;\n\n‚îå‚îÄnum_ops‚îÄ‚î¨‚îÄuser‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ      56 ‚îÇ user_200 ‚îÇ\n‚îÇ      11 ‚îÇ user_75  ‚îÇ\n‚îÇ       6 ‚îÇ user_87  ‚îÇ\n‚îÇ       6 ‚îÇ user_65  ‚îÇ\n‚îÇ       6 ‚îÇ user_39  ‚îÇ\n‚îÇ       5 ‚îÇ user_28  ‚îÇ\n‚îÇ       5 ‚îÇ user_63  ‚îÇ\n‚îÇ       5 ‚îÇ user_89  ‚îÇ\n‚îÇ       3 ‚îÇ user_32  ‚îÇ\n‚îÇ       3 ‚îÇ user_52  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Listening to Server-Side Subscription Events with Centrifuge JavaScript SDK\nDESCRIPTION: This JavaScript code snippet demonstrates how to attach event listeners to a Centrifuge client instance to handle server-side subscription events such as subscribed, subscribing, unsubscribed, and publication. The Centrifuge SDK is required as a dependency and must be available as a global or imported module. Event listeners provide context objects that deliver details such as the channel name and publication data; handlers should perform minimal blocking work as they are invoked synchronously. The client is connected at the end to activate real-time communication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nclient.on('subscribed', function(ctx) {\n    // Called when subscribed to a server-side channel upon Client moving to\n    // connected state or during connection lifetime if server sends Subscribe\n    // push message.\n    console.log('subscribed to server-side channel', ctx.channel);\n});\n\nclient.on('subscribing', function(ctx) {\n    // Called when existing connection lost (Client reconnects) or Client\n    // explicitly disconnected. Client continue keeping server-side subscription\n    // registry with stream position information where applicable.\n    console.log('subscribing to server-side channel', ctx.channel);\n});\n\nclient.on('unsubscribed', function(ctx) {\n    // Called when server sent unsubscribe push or server-side subscription\n    // previously existed in SDK registry disappeared upon Client reconnect.\n    console.log('unsubscribed from server-side channel', ctx.channel);\n});\n\nclient.on('publication', function(ctx) {\n    // Called when server sends Publication over server-side subscription.\n    console.log('publication receive from server-side channel', ctx.channel, ctx.data);\n});\n\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Pipelining with Redigo in Go\nDESCRIPTION: A Go implementation of Redis pipelining with Redigo that batches commands to improve throughput. The code demonstrates constant definitions, command handling structure, sender implementation, pipeline routine, and benchmarking.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tmaxCommandsInPipeline = 512\n\tnumPipelineWorkers    = 1\n)\n\ntype command struct {\n\terrCh chan error\n}\n\ntype sender struct {\n\tcmdCh chan command\n\tpool  redigo.Pool\n}\n\nfunc newSender(pool redigo.Pool) *sender {\n\tp := &sender{\n\t\tcmdCh: make(chan command),\n\t\tpool:  pool,\n\t}\n\tgo func() {\n\t\tfor {\n\t\t\tfor i := 0; i < numPipelineWorkers; i++ {\n\t\t\t\tp.runPipelineRoutine()\n\t\t\t}\n\t\t}\n\t}()\n\treturn p\n}\n\nfunc (s *sender) send() error {\n\terrCh := make(chan error, 1)\n\tcmd := command{\n\t\terrCh: errCh,\n\t}\n\t// Submit command to be executed by runPipelineRoutine.\n\ts.cmdCh <- cmd\n\treturn <-errCh\n}\n\nfunc (s *sender) runPipelineRoutine() {\n\tconn := p.pool.Get()\n\tdefer conn.Close()\n\tfor {\n\t\tselect {\n\t\tcase cmd := <-s.cmdCh:\n\t\t\tcommands := []command{cmd}\n\t\t\tconn.Send(\"set\", \"redigo\", \"test\")\n\t\tloop:\n\t\t\t// Collect batch of commands to send to Redis in one RTT.\n\t\t\tfor i := 0; i < maxCommandsInPipeline; i++ {\n\t\t\t\tselect {\n\t\t\t\tcase cmd := <-s.cmdCh:\n\t\t\t\t\tcommands = append(commands, cmd)\n\t\t\t\t\tconn.Send(\"set\", \"redigo\", \"test\")\n\t\t\t\tdefault:\n\t\t\t\t\tbreak loop\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Flush all collected commands to the network.\n\t\t\terr := conn.Flush()\n\t\t\tif err != nil {\n\t\t\t\tfor i := 0; i < len(commands); i++ {\n\t\t\t\t\tcommands[i].errCh <- err\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// Read responses to commands, they come in order.\n\t\t\tfor i := 0; i < len(commands); i++ {\n\t\t\t\t_, err := conn.Receive()\n\t\t\t\tcommands[i].errCh <- err\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc BenchmarkRedigoPipelininig(b *testing.B) {\n\tpool := redigo.Pool{\n\t\tWait: true,\n\t\tDial: func() (redigo.Conn, error) {\n\t\t\treturn redigo.Dial(\"tcp\", \":6379\")\n\t\t},\n\t}\n\tdefer pool.Close()\n\n\tsender := newSender(pool)\n\n\tb.ResetTimer()\n\tb.SetParallelism(128)\n\tb.ReportAllocs()\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tfor pb.Next() {\n\t\t\terr := sender.send()\n\t\t\tif err != nil {\n\t\t\t\tb.Fatal(err)\n\t\t\t}\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing `centrifuge-js` with Headers Emulation (JavaScript)\nDESCRIPTION: Demonstrates initializing the `Centrifuge` client using the `centrifuge-js` SDK. It shows how to pass custom HTTP headers (e.g., an `Authorization` bearer token) within the `headers` property of the configuration object. This utilizes the headers emulation feature, allowing these headers to be forwarded by Centrifugo to the backend connect proxy, despite browser limitations on setting headers for WebSocket connections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge(\n    \"wss://example.com/connection/websocket\",\n    {\n        \"headers\": {\n            \"Authorization\": \"Bearer XXX\"\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Non-Terminal Disconnect Code 3006 (Subscription Expired)\nDESCRIPTION: Defines the non-terminal client disconnect code 3006, indicating \"subscription expired\". This is issued when a client's subscription has expired. Clients receiving this code are expected to attempt reconnection (likely requiring a new subscription token).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3006\nReason: \"subscription expired\"\n```\n\n----------------------------------------\n\nTITLE: Counting Throttled Publications for a Specific User in ClickHouse (SQL)\nDESCRIPTION: Extends throttled publications query to restrict by user, filtering on a 'user' column in addition to throttling criteria. Enables fine-grained per-user analytics and troubleshooting for high volume users who hit rate limits.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*)\nFROM centrifugo.operations_distributed\nWHERE (error = 111) AND (op = 'publish') AND (user = 'user_200');\n\n‚îå‚îÄcount()‚îÄ‚îê\n‚îÇ    1214 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Read Buffer Size - Centrifugo - JSON\nDESCRIPTION: Shows how to set the websocket_read_buffer_size option in Centrifugo's config.json file. Setting this value allows customization of memory usage per WebSocket connection by adjusting the size of each read buffer; the default reuses the HTTP server buffer. Increase for handling larger average messages, decrease for lower memory. Required dependency: running Centrifugo server with this configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/websocket.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"websocket_read_buffer_size\": 512\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Centrifugo Version - Shell\nDESCRIPTION: This command displays the currently installed Centrifugo server version for verification purposes. Run this after installing or updating the binary to confirm successful setup. No dependencies except the executable.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./centrifugo version\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo Configuration for Unidirectional WebSocket (JSON)\nDESCRIPTION: Presents an example `config.json` file for Centrifugo tailored for the usage example. It sets a secret key for token generation (`token_hmac_secret_key`), enables the unidirectional WebSocket endpoint (`uni_websocket: true`), and configures automatic subscription to personal channels (`user_subscribe_to_personal: true`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_websocket.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"token_hmac_secret_key\": \"secret\",\n  \"uni_websocket\":true,\n  \"user_subscribe_to_personal\": true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Granular Subscribe Rule with User and Role Matching via CEL - JSON\nDESCRIPTION: This snippet demonstrates a namespaced 'subscribe_cel' rule where access is allowed if either the user ID extracted from the channel pattern equals the current user or if the user has an 'admin' role in the meta object. Intended for config.json in Centrifugo PRO, it enables selective access control based on channel pattern variables ('vars.user') and connection metadata ('meta.roles'), facilitating complex policy expressions. Dependencies include extracting 'meta' from JWT or proxy and using the Centrifugo channel pattern variable mechanism.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/cel_expressions.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"subscribe_cel\": \"vars.user == user or 'admin' in meta.roles\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Capabilities with Full Access to All Channels\nDESCRIPTION: Granting full access (all capabilities) to all channels using a wildcard match. This should be used cautiously as it provides unrestricted access.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/capabilities.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"*\"],\n            \"match\": \"wildcard\",\n            \"allow\": [\"sub\", \"pub\", \"hst\", \"prs\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Write Delay in Centrifugo PRO\nDESCRIPTION: Sets a delay period for collecting messages before sending them to clients, reducing CPU usage by minimizing system calls. This example configures a 100ms write delay, which can significantly reduce server and client CPU usage at the cost of slightly increased latency.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/client_msg_batching.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"write_delay\": \"100ms\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling PostgreSQL LISTEN/NOTIFY for Partition Changes - SQL\nDESCRIPTION: This SQL code defines a trigger function and trigger to notify Centrifugo when a new row is added to the outbox partition, using PostgreSQL's LISTEN/NOTIFY system. The function uses pg_notify to signal the specified channel. Inputs: SQL function and trigger definitions; Output: Notifications sent on partition insertions. Prerequisites: Sufficient privileges to create triggers, trigger applied to correct table. Tune channel and table names as needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/consumers.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION centrifugo_notify_partition_change()\nRETURNS TRIGGER AS $$\nBEGIN\n    PERFORM pg_notify('centrifugo_partition_change', NEW.partition::text);\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE OR REPLACE TRIGGER centrifugo_notify_partition_trigger\nAFTER INSERT ON chat_outbox\nFOR EACH ROW\nEXECUTE FUNCTION centrifugo_notify_partition_change();\n```\n\n----------------------------------------\n\nTITLE: Controlling WebSocket Compression for Individual Messages\nDESCRIPTION: Shows how to control whether compression is used for a specific message when writing data to a WebSocket connection in Go.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-08-19-optimizing-websocket-compression.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconn.EnableWriteCompression(false)\n// Write data.\n```\n\n----------------------------------------\n\nTITLE: Subscribing with Cache Recovery Mode - Centrifugo JavaScript SDK - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to subscribe to a Centrifugo channel configured with cache recovery mode using the JavaScript SDK. It creates a subscription to the 'example:now-playing-12' channel with an empty 'since' object, triggering recovery behavior in the underlying protocol. The code listens for the 'publication' event to process the latest published data immediately after subscription. The main dependency is the Centrifugo JavaScript SDK, and the output is the immediate delivery of the latest publication received in the 'ctx' parameter. Ensure proper channel permissions and correct SDK usage for successful integration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/cache_recovery.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sub = centrifuge.newSubscription('example:now-playing-12', {\n  since: {}\n});\n\nsub.on('publication', (ctx) => {\n    console.log(ctx);\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Subscription JWT with Centrifugo using Bash\nDESCRIPTION: Runs `centrifugo checksubtoken` to validate a given subscription JWT (`<TOKEN>`) using the configuration from `config.json` (`-c`). This command helps test subscription tokens during application development. Exits with code 1 on error or validation failure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/console_commands.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo checksubtoken -c config.json <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Join and Leave Events on Subscription (JavaScript)\nDESCRIPTION: This snippet sets up event listeners for \\\"join\\\" and \\\"leave\\\" events on a Centrifugo subscription object in JavaScript. When a client joins or leaves the channel, the corresponding callback logs the event context to the console. This enables real-time tracking of user activity such as arrivals and departures. Requires the Centrifugo JavaScript SDK, an active subscription, and proper setup of event permissions. Input: event context objects; Output: logs of join and leave events.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/presence.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('join', function(joinCtx) {\n    console.log('client joined:', joinCtx);\n});\n\nsubscription.on('leave', function(leaveCtx) {\n    console.log('client left:', leaveCtx);\n});\n```\n\n----------------------------------------\n\nTITLE: Observing Raw SSE Data Stream with Curl (Bash)\nDESCRIPTION: This Bash snippet uses the `curl` command to connect to the Centrifugo unidirectional SSE endpoint (`http://localhost:8000/connection/uni_sse`) and display the raw data stream. It shows the typical format, including the initial `connect` message containing session details (`client`, `version`, `subs`, `ping`, `session`) and subsequent periodic empty ping messages (`data: {}`) sent by the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_sse.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n‚ùØ curl http://localhost:8000/connection/uni_sse\n\ndata: {\"connect\":{\"client\":\"c09d1965...\",\"version\":\"0.0.0 OSS\",\"subs\":{\"#2694\":{}},\"ping\":25,\"session\":\"1cf6d9f5...\"}}\n\ndata: {}\n\ndata: {}\n\ndata: {}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Tailing Kafka Topic Messages in Docker Compose - Bash\nDESCRIPTION: This snippet attaches a console consumer to a specific Kafka topic, allowing real-time viewing of new messages as they are produced inside a Docker Compose environment. It assumes the kafka-console-consumer tool is available in the 'kafka' service, and that topic 'postgres.public.chat_cdc' exists. The command outputs messages to the console, facilitating debugging and inspection of Kafka events.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/tips_and_tricks.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec kafka kafka-console-consumer --bootstrap-server kafka:9092 --topic postgres.public.chat_cdc\n```\n\n----------------------------------------\n\nTITLE: Renaming Centrifugo User Connections API Method in v4 (PRO)\nDESCRIPTION: The Centrifugo PRO server API method `user_connections` (used in v3) has been renamed to `connections` in v4. This change reflects the method's expanded capabilities beyond just user connections. Backend applications using this API method must update their calls.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/migration-v4.md#2025-04-23_snippet_7\n\nLANGUAGE: api\nCODE:\n```\nuser_connections\n```\n\nLANGUAGE: api\nCODE:\n```\nconnections\n```\n\n----------------------------------------\n\nTITLE: Generating Default Centrifugo Configuration File using Bash\nDESCRIPTION: Shows the command to generate a default `config.json` file in the current directory. This file contains a minimal set of options to start Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Describing PushNotification Object Structure - Centrifugo - Markdown\nDESCRIPTION: This snippet presents the schema structure for the 'PushNotification' object as defined for Centrifugo's push messaging API, showing its fields, purpose, and the required notification provider sub-object (FCM, HMS, or APNs). The table explains the difference between Centrifugo's 'expire_at', and the provider-specific message objects, highlighting best practices. This Markdown code is intended to be used in documentation describing how to compose the push notification part of the request, requiring no additional tooling.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n`PushNotification`:\n\n| Field       | Type                   | Required | Description                                                                                                                                                                                                                                                                       |\n|-------------|------------------------|----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `expire_at` | `int64`                | No       | Unix timestamp when Centrifugo stops attempting to send this notification. Note, it's Centrifugo specific and does not relate to notification TTL fields. We generally recommend to always set this to a reasonable value to protect your app from old push notifications sending |\n| `fcm`       | `FcmPushNotification`  | No       | Notification for FCM                                                                                                                                                                                                                                                              |\n| `hms`       | `HmsPushNotification`  | No       | Notification for HMS                                                                                                                                                                                                                                                              |\n| `apns`      | `ApnsPushNotification` | No       | Notification for APNs                                                                                                                                                                                                                                                             |\n\n```\n\n----------------------------------------\n\nTITLE: Starting Chrome with WebTransport and Certificate Flags - Shell Command\nDESCRIPTION: This shell command launches the Chrome browser with flags required for experimenting with WebTransport and self-signed certificates. The --origin-to-force-quic-on and --ignore-certificate-errors-spki-list flags instruct Chrome to force HTTP/3 (QUIC) on the specified origin and to trust a provided certificate fingerprint, respectively. The certificate fingerprint must be generated separately (see third snippet). This is primarily for development on localhost and may weaken security protections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/webtransport.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/your/Chrome --origin-to-force-quic-on=localhost:8000 --ignore-certificate-errors-spki-list=TSZTiMjLG+DNjESXdJh3f+S8C+RhsFCav7T24VNuCPQ=\n```\n\n----------------------------------------\n\nTITLE: Basic Centrifugo Configuration with Custom Port\nDESCRIPTION: Example of configuring Centrifugo with a custom port setting\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"port\": 9000\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo RPC Proxy Result Example - JSON\nDESCRIPTION: This is a sample JSON response for a Centrifugo RPC proxy call, where the 'result' object contains a 'data' field with the backend's answer (here, an object with an 'answer' property). The backend is expected to use this structure when returning data for RPC requests. The schema allows for any valid JSON in 'data', matching the expected contract for RPC results between Centrifugo and backend.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {\"data\": {\"answer\": \"2019\"}}}\n```\n\n----------------------------------------\n\nTITLE: Handling Server-Side Subscription Events in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Centrifuge client and set up event listeners (`subscribed`, `subscribing`, `unsubscribed`, `publication`) to react to events related to server-side subscriptions. Server-side subscriptions are managed by the server but trigger events on the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nclient.on('subscribed', function(ctx) {\n    // Called when subscribed to a server-side channel upon Client moving to\n    // connected state or during connection lifetime if server sends Subscribe\n    // push message.\n    console.log('subscribed to server-side channel', ctx.channel);\n});\n\nclient.on('subscribing', function(ctx) {\n    // Called when existing connection lost (Client reconnects) or Client\n    // explicitly disconnected. Client continue keeping server-side subscription\n    // registry with stream position information where applicable.\n    console.log('subscribing to server-side channel', ctx.channel);\n});\n\nclient.on('unsubscribed', function(ctx) {\n    // Called when server sent unsubscribe push or server-side subscription\n    // previously existed in SDK registry disappeared upon Client reconnect.\n    console.log('unsubscribed from server-side channel', ctx.channel);\n});\n\nclient.on('publication', function(ctx) {\n    // Called when server sends Publication over server-side subscription.\n    console.log('publication receive from server-side channel', ctx.channel, ctx.data);\n});\n\nclient.connect();\n```\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Chat Room Selection\nDESCRIPTION: HTML template for the index view, allowing users to enter a chat room name. Includes JavaScript for handling user input and navigation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Select a chat room</title>\n</head>\n\n<body>\n    <div class=\"center\">\n        <div class=\"input-wrapper\">\n            <input type=\"text\" id=\"room-name-input\" />\n        </div>\n        <div class=\"input-help\">\n            Type a room name to <a id=\"room-name-submit\" href=\"#\">JOIN</a>\n        </div>\n    </div>\n    <script>\n        const nameInput = document.querySelector('#room-name-input');\n        const nameSubmit = document.querySelector('#room-name-submit');\n        nameInput.focus();\n        nameInput.onkeyup = function (e) {\n            if (e.keyCode === 13) {  // enter, return\n                nameSubmit.click();\n            }\n        };\n        nameSubmit.onclick = function (e) {\n            e.preventDefault();\n            var roomName = nameInput.value;\n            if (!roomName) {\n                return;\n            }\n            window.location.pathname = '/chat/room/' + roomName + '/';\n        };\n    </script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enabling Publish Proxy for a Specific Namespace (JSON)\nDESCRIPTION: Configures Centrifugal to use the defined publish proxy endpoint for channels within a specific namespace (e.g., 'sun'). This is done by setting `publish_proxy_enabled: true` within that namespace's definition in the `namespaces` array.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"channel\": {\n    \"proxy\": {\n      \"publish\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/publish\"\n      }\n    },\n    \"namespaces\": [\n      {\n        \"name\": \"sun\",\n        \"publish_proxy_enabled\": true\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Custom TLS for Redis Sentinel in Centrifugo Config - JSON\nDESCRIPTION: Illustrates adding custom TLS settings for Redis Sentinel using the 'sentinel_tls' key, referencing a unified TLS config object. Input: Redis config object with 'sentinel_tls'. Output: Secure TLS connection to Redis Sentinel. Prerequisite: valid TLS configuration object and Sentinel endpoint with TLS enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"redis+sentinel://localhost:26379?sentinel_master_name=mymaster\",\n      \"sentinel_tls\": {\n        \"enabled\": true,\n        ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Sub Refresh Proxy Request Payload (JSON)\nDESCRIPTION: Illustrates an example JSON payload sent by Centrifugal to the configured sub refresh proxy endpoint when a client's subscription is nearing expiration. It includes client details (`client`, `transport`, `protocol`, `encoding`, `user`) and the specific `channel` requiring refresh.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"channel\": \"channel\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating a User JWT Token with Centrifugo CLI (Shell)\nDESCRIPTION: Shows how to use the Centrifugo command-line interface to generate an HMAC SHA-256 JWT for a specific user (`test_user`). This token is required to authenticate the WebSocket connection when not using a connect proxy. The `-c` flag points to the config file containing the secret key, and the `-u` flag specifies the user ID.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_websocket.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```\n‚ùØ ./centrifugo -c config.json -u test_user\nHMAC SHA-256 JWT for user test_user with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0X3VzZXIiLCJleHAiOjE2MzAxMzAxNzB9.u7anX-VYXywX1p1lv9UC9CAu04vpA6LgG5gsw5lz1Iw\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Unsubscribe Code 2501 (Subscription Expired)\nDESCRIPTION: Defines the client unsubscribe code 2501, indicating the \"subscription expired\". This code is sent when a client's channel subscription token has expired. Clients receiving this code (>= 2500) are expected to resubscribe, likely after obtaining an updated subscription token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   2501\nReason: \"subscription expired\"\n```\n\n----------------------------------------\n\nTITLE: Configuring uni_websocket Endpoint in Centrifugo - JSON\nDESCRIPTION: This snippet demonstrates how to enable the unidirectional WebSocket endpoint by setting the \"uni_websocket\" option to true in your Centrifugo config.json file. This option is required for exposing the /connection/uni_websocket route. No additional dependencies are needed other than a valid Centrifugo installation. The file can specify other settings as well, denoted by the ellipsis.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_websocket.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"uni_websocket\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache Empty Proxy for Named Namespace\nDESCRIPTION: Configuration example showing how to enable cache empty proxy for a specific namespace named 'example'.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/channel_cache_empty.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"proxy\": {\n      \"cache_empty\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/cache_empty\",\n        \"timeout\": \"1s\"\n      }\n    },\n    \"namespaces\": [{\n      \"name\": \"example\",\n      \"cache_empty_proxy_enabled\": \"unified\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Message Using Python Requests\nDESCRIPTION: Python script demonstrating how to publish a message to a Centrifugo channel using the requests library.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\n\ncommand = {\n    \"method\": \"publish\",\n    \"params\": {\n        \"channel\": \"docs\", \n        \"data\": {\n            \"content\": \"1\"\n        }\n    }\n}\n\napi_key = \"YOUR_API_KEY\"\ndata = json.dumps(command)\nheaders = {'Content-type': 'application/json', 'Authorization': 'apikey ' + api_key}\nresp = requests.post(\"https://centrifuge.example.com/api\", data=data, headers=headers)\nprint(resp.json())\n```\n\n----------------------------------------\n\nTITLE: Successful Publish Response\nDESCRIPTION: Example of a successful response from the publish endpoint\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {}}\n```\n\n----------------------------------------\n\nTITLE: Checking Centrifugo Version (Shell)\nDESCRIPTION: Displays the installed version of the Centrifugo server binary. This command helps verify the downloaded or installed version. Assumes the binary is in the current directory or PATH.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./centrifugo version\n```\n\n----------------------------------------\n\nTITLE: Implementing Loki Log Sender in Go\nDESCRIPTION: Go implementation for sending log entries to Loki via HTTP API, including message structure and continuous log generation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-03-18-stream-loki-logs-to-browser-with-websocket-to-grpc-subscriptions.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tlokiPushEndpoint = \"http://loki:3100/loki/api/v1/push\"\n)\n\ntype lokiPushMessage struct {\n\tStreams []lokiStream `json:\"streams\"`\n}\n\ntype lokiStream struct {\n\tStream map[string]string `json:\"stream\"`\n\tValues [][]string        `json:\"values\"`\n}\n\nfunc sendLogMessageToLoki(_ context.Context) error {\n\tsources := []string{\"backend1\", \"backend2\", \"backend3\"}\n\tsource := sources[rand.Intn(len(sources))]\n\tlogMessage := fmt.Sprintf(\"log from %s source\", source)\n\n\tpayload := lokiPushMessage{\n\t\tStreams: []lokiStream{\n\t\t\t{\n\t\t\t\tStream: map[string]string{\n\t\t\t\t\t\"source\": source,\n\t\t\t\t},\n\t\t\t\tValues: [][]string{\n\t\t\t\t\t{fmt.Sprintf(\"%d\", time.Now().UnixNano()), logMessage},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tjsonData, err := json.Marshal(payload)\n\tif err != nil {\n\t\treturn err\n\t}\n\tresp, err := http.Post(\n\t\tlokiPushEndpoint, \"application/json\", bytes.NewBuffer(jsonData))\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusNoContent {\n\t\treturn fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\treturn nil\n}\n\nfunc sendLogsToLoki(ctx context.Context) {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tcase <-time.After(200 * time.Millisecond):\n\t\t\terr := sendLogMessageToLoki(ctx)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"error sending log to Loki:\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc main() {\n\tctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGTERM, syscall.SIGINT)\n\tdefer cancel()\n\n\tsendLogsToLoki(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Code to Unidirectional Disconnect Transforms in Centrifugo (JSON)\nDESCRIPTION: This snippet shows how to configure error code to unidirectional disconnect transforms in Centrifugo. It demonstrates mapping specific error codes to custom disconnect objects with different codes and reasons for unidirectional clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"connect_code_to_unidirectional_disconnect\": {\n      \"enabled\": true,\n      \"transforms\": [\n        {\"code\": 404, \"to\": {\"code\": 4904, \"reason\": \"not found\"}},\n        {\"code\": 403, \"to\": {\"code\": 4903, \"reason\": \"permission denied\"}},\n        {\"code\": 429, \"to\": {\"code\": 4429, \"reason\": \"too many requests\"}}\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from the Presence Stats API Endpoint\nDESCRIPTION: This JSON object illustrates a successful response from the `/api/presence_stats` endpoint. It contains a `result` object with `num_clients` (total client connections) and `num_users` (unique user count) fields, providing a concise summary of the presence state for the requested channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"num_clients\": 0,\n        \"num_users\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure - JSON Format\nDESCRIPTION: Example of an error response structure containing code, message and temporary flag.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_protocol.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 100,\n    \"message\": \"internal server error\",\n    \"temporary\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo Connect Proxy Response Payload (JSON)\nDESCRIPTION: This JSON object represents a successful response from the backend application to a Centrifugo connect proxy request. The `result` object contains information for Centrifugo, such as the authenticated `user` ID. This response allows the client connection to proceed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\"result\": {\"user\": \"56\"}}\n```\n```\n\n----------------------------------------\n\nTITLE: Listening for Server-side Publications with centrifuge-js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the centrifuge-js SDK to listen for publications from server-side channels without instantiating subscription objects. The code defines an event handler for the 'publication' event on the Centrifuge client, logs channel and payload information, and then establishes a connection. Required dependencies include the 'centrifuge-js' library and a valid Centrifugo server address. The event context provides details about the channel and data received; this approach suits both server- and client-initiated subscriptions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_subs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst centrifuge = new Centrifuge(address);\n\ncentrifuge.on('publication', function(ctx) {\n    const channel = ctx.channel;\n    const payload = JSON.stringify(ctx.data);\n    console.log('Publication from server-side channel', channel, payload);\n});\n\ncentrifuge.connect();\n```\n\n----------------------------------------\n\nTITLE: Configuring React with Keycloak Provider in main.jsx\nDESCRIPTION: Code for the main entry point of the React application, setting up the Keycloak client configuration and wrapping the app with ReactKeycloakProvider to enable SSO authentication.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-03-31-keycloak-sso-centrifugo.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { ReactKeycloakProvider } from '@react-keycloak/web'\nimport App from './App'\nimport './index.css'\n\nimport Keycloak from \"keycloak-js\";\n\nconst keycloakClient = new Keycloak({\n  url: \"http://localhost:8080\",\n  realm: \"myrealm\",\n  clientId: \"myclient\"\n})\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <ReactKeycloakProvider authClient={keycloakClient}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ReactKeycloakProvider>,\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Sentinel User and Password in Centrifugo Redis Config - JSON\nDESCRIPTION: Demonstrates how to pass explicit Sentinel user and password in the Redis connection string using 'sentinel_user' and 'sentinel_password' parameters. Dependencies: user/password correctly configured in the Sentinel setup. Input: address string with user/pass. Output: Authenticated Sentinel connection by Centrifugo. Limitation: Credentials must not be exposed in public configs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"redis+sentinel://localhost:26379?sentinel_master_name=mymaster&sentinel_user=sentinel&sentinel_password=XXX\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Multiple JSON Commands - Text Framing - Text\nDESCRIPTION: Demonstrates how to stream multiple Command objects from client to server using the JSON protocol format as line-delimited text. Each line represents a distinct Command message. No runtime or libraries required‚Äîthis highlights the wire-level protocol. Key parameters include Command id, method, and params. Expects JSON-compliant input and output, where each Command is serialized to a separate line in the message stream.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\"id\": 1, \"method\": 1, \"params\": {\"channel\": \"ch1\"}}\n{\"id\": 2, \"method\": 1, \"params\": {\"channel\": \"ch2\"}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Health Check via Command Line\nDESCRIPTION: Command line instruction to enable health check endpoint using the --health flag.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo -c config.json --health\n```\n\n----------------------------------------\n\nTITLE: Incorrect Connection Capabilities Configuration with Duplicate Channels\nDESCRIPTION: An example of an incorrect capability configuration where the same channel appears in multiple cap objects. Centrifugo will only process the first match and ignore subsequent ones.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/capabilities.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\"],\n            \"allow\": [\"pub\"]\n        },\n        {\n            \"channels\": [\"news\"],\n            \"allow\": [\"sub\"]\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sub Refresh Success Response\nDESCRIPTION: Example of a successful response from the subscription refresh endpoint\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {\"expire_at\": 1565436268}}\n```\n\n----------------------------------------\n\nTITLE: Cache Empty Event Notification Request Payload (Centrifugo, JSON)\nDESCRIPTION: This JSON object represents the body of the HTTP POST request sent to the backend when a cache empty event occurs. The 'channel' field contains the name of the channel with the cache miss. The backend should check this field to determine which channel needs cache population.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/channel_cache_empty.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": \"example:index\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Compression in Centrifugo PRO\nDESCRIPTION: This configuration snippet shows how to set the 'websocket.compression_prepared_message_size' option in Centrifugo PRO. This option enables caching of prepared WebSocket messages for connections with negotiated WebSocket compression, improving CPU and memory usage.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"websocket\": {\n    \"compression_prepared_message_size\": 10485760\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching the Last N Publications from Channel History Using Centrifuge SDK in JavaScript\nDESCRIPTION: Shows how to retrieve up to 10 most recent publications from the beginning of the channel stream using the Centrifuge Subscription's 'history' method. No stream position ('since') is specified, so history is fetched from the current stream head. Inputs include an options object with a 'limit'; output is the list of latest publication objects.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resp = await subscription.history({limit: 10});\nconsole.log(resp.publications);\n```\n\n----------------------------------------\n\nTITLE: Permission Denied Error Response\nDESCRIPTION: Example of returning a permission denied error response for subscription attempts\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": 403,\n    \"message\": \"permission denied\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis-Based Per-User Rate Limits in Centrifugo\nDESCRIPTION: Configuration examples for setting up Redis-based distributed rate limits. Includes both direct Redis configuration and engine reuse options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/rate_limiting.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"rate_limit\": {\n      \"redis_user_command\": {\n        \"enabled\": true,\n        \"default\": {\n          \"enabled\": true,\n          \"buckets\": [\n            {\n              \"interval\": \"1s\",\n              \"rate\": 60\n            }\n          ]\n        },\n        \"publish\": {\n          \"enabled\": true,\n          \"buckets\": [\n            {\n              \"interval\": \"1s\",\n              \"rate\": 1\n            }\n          ]\n        },\n        \"rpc\": {\n          \"enabled\": true,\n          \"buckets\": [\n            {\n              \"interval\": \"1s\",\n              \"rate\": 10\n            }\n          ],\n          \"method_override\": {\n            \"update_user_status\": {\n              \"enabled\": true,\n              \"buckets\": [\n                {\n                  \"interval\": \"20s\",\n                  \"rate\": 1\n                }\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Subscription to a Stream with JavaScript SDK\nDESCRIPTION: JavaScript code using the Centrifuge client to connect and subscribe to a channel with subscription streaming enabled. This demonstrates how to handle publications received from the stream.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy_streams.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {\n    getToken: getTokenImplementation\n});\n\nclient.connect();\n\nconst sub = client.newSubscription('streams:123e4567-e89b-12d3-a456-426614174000', {\n    data: {}\n}).on('publication', function(ctx) {\n    console.log(\"received publication from a channel\", ctx.data);\n});\n\nsub.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 106 (Limit Exceeded)\nDESCRIPTION: Defines the 'Limit Exceeded' error code (106) indicating that some general server-side limit (e.g., connection limit, subscription limit) has been surpassed. Server logs typically provide more specific details. Error 111 is specifically for request rate limiting.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nCode:    106\nMessage: \"limit exceeded\"\n```\n\n----------------------------------------\n\nTITLE: Obtaining Certificate Fingerprint for Chrome Testing (Bash)\nDESCRIPTION: This sequence of OpenSSL commands generates a base64-encoded SPKI fingerprint from a server certificate for use in Chrome's --ignore-certificate-errors-spki-list flag. This fingerprint helps Chrome identify and permit connections to servers with self-signed certificates during WebTransport testing. Replace 'server.crt' with the actual certificate file. Each command must be executed in sequence, piped as shown.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/webtransport.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in server.crt -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\n```\n\n----------------------------------------\n\nTITLE: Examples of Time Duration String Formats\nDESCRIPTION: These examples illustrate the valid string formats for specifying time durations in Centrifugo configuration options. Durations combine a number and a unit (ms, s, m, h). Minimal resolution is 1ms, though some options require second precision.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n\"1000ms\" // 1000 milliseconds\n\"1s\"     // 1 second\n\"12h\"    // 12 hours\n\"720h\"   // 30 days\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Terminal): Force No Reconnect (3503)\nDESCRIPTION: The server intentionally disconnects the client and explicitly instructs it not to attempt reconnection. This might be due to administrative action or policy.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3503\nReason: \"force disconnect\"\n```\n\n----------------------------------------\n\nTITLE: Global Namespace Publish Configuration\nDESCRIPTION: Example of enabling publish proxy for channels without namespace\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"proxy_publish_endpoint\": \"http://localhost:3000/centrifugo/publish\",\n  \"proxy_publish_timeout\":  \"1s\",\n  \"publish\": true,\n  \"proxy_publish\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Error Object for Denied Subscription or Publish - JSON\nDESCRIPTION: Standard response structure for signaling an error from proxy backend (such as denying a subscription or publish action). Wraps error code and message in an \\\\\"error\\\\\" object. Recommended codes are 400-1999 per Centrifugo error conventions. This instructs Centrifugo to reject the subscription/publish request, triggering appropriate client events.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": 403,\n    \"message\": \"permission denied\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unrecoverable State in Centrifugo Client (JavaScript)\nDESCRIPTION: Demonstrates how to handle the 'subscribed' event on a Centrifugo client subscription in JavaScript. It checks the event context (`ctx`) to determine if the client was attempting recovery (`ctx.wasRecovering`) but failed (`!ctx.recovered`), indicating that the message history cache could not cover the disconnection period. In such cases, it suggests notifying the user to reload the application to fetch the latest state.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/recovery.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsub.on('subscribed', (ctx: SubscribedContext) => {\n  if (ctx.wasRecovering && !ctx.recovered) {\n    setUnrecoverableError('State LOST - please reload the page')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing Channel Data in Go\nDESCRIPTION: Example of publishing data to a Centrifuge channel from the server side.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nnode.Publish(\"example\", []byte(`{\"input\": \"hello\"}`))\n```\n\n----------------------------------------\n\nTITLE: Configuring Haproxy for Redis High Availability (Plain Text)\nDESCRIPTION: This Haproxy configuration snippet sets up a TCP listener (`redis`) to manage connections to a Redis master/replica setup as an alternative to direct Sentinel configuration in Centrifugo. It performs health checks using PING and INFO replication commands to route traffic only to the active Redis master.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nlisten redis\n    server redis-01 127.0.0.1:6380 check port 6380 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2\n    server redis-02 127.0.0.1:6381 check port 6381 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2 backup\n    bind *:16379\n    mode tcp\n    option tcpka\n    option tcplog\n    option tcp-check\n    tcp-check send PING\\r\\n\n    tcp-check expect string +PONG\n    tcp-check send info\\ replication\\r\\n\n    tcp-check expect string role:master\n    tcp-check send QUIT\\r\\n\n    tcp-check expect string +OK\n    balance roundrobin\n```\n\n----------------------------------------\n\nTITLE: Error Object Schema Example - JSON\nDESCRIPTION: Illustrates the structure of an error object that may be returned in Reply messages as part of Centrifuge protocol. Contains a numeric code and human-readable error message. Requires clients to parse these fields for error handling. Input and output both strictly adhere to JSON schema expectations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 100,\n    \"message\": \"internal server error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Non-Terminal Disconnect Code 3009 (Write Error)\nDESCRIPTION: Defines the non-terminal client disconnect code 3009, indicating a \"write error\". This code is issued when the server encounters an error while attempting to send data to the client connection. Clients receiving this code are expected to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3009\nReason: \"write error\"\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Docker Container for Development\nDESCRIPTION: Docker command to initialize a Keycloak instance with administrative credentials for SSO configuration. This sets up Keycloak in development mode with an admin account for configuring realms, clients, and users.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-03-31-keycloak-sso-centrifugo.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -p 8080:8080 \\\n    -e KEYCLOAK_ADMIN=admin \\\n    -e KEYCLOAK_ADMIN_PASSWORD=admin \\\n    quay.io/keycloak/keycloak:21.0.1 start-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Encoding Mode in Centrifugo\nDESCRIPTION: This configuration enables binary encoding mode in Centrifugo, which uses base64 format for passing binary data in proxy requests. This is particularly useful for HTTP proxies that can't handle arbitrary binary data in JSON.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_binary_encoding\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Command Publication via HTTP API - Bash\nDESCRIPTION: Demonstrates how to execute two publish commands in a single HTTP request using curl and Centrifugo\\'s batch API. Requires curl and an active Centrifugo server instance. Key parameters include the API key (in header) and a JSON body with an array of commands. Output is standard JSON replies for each command, reducing network latency by batching.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"commands\": [{\"publish\": {\"channel\": \"test1\", \"data\": {}}}, {\"publish\": {\"channel\": \"x:test2\", \"data\": {}}}]}' \\\n  http://localhost:8000/api/batch\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo TOML Configuration Using Bash CLI\nDESCRIPTION: Produces a minimal TOML configuration file as 'config.toml' for Centrifugo setup. Depends on Centrifugo being installed. The extension determines the format; errors cause exit code 1. Useful for developing or switching between configuration syntaxes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/console_commands.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig -c config.toml\n```\n\n----------------------------------------\n\nTITLE: Listing Kafka Topics in Docker Compose - Bash\nDESCRIPTION: This snippet lists all Kafka topics available in a Kafka instance running as a Docker Compose service. It assumes the 'kafka' service is running and accessible within the compose network, and uses the kafka-topics CLI tool to query the broker at kafka:9092. No parameters are required. The output is a list of current topics.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/tips_and_tricks.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec kafka kafka-topics --bootstrap-server kafka:9092 --list\n```\n\n----------------------------------------\n\nTITLE: Connecting to Unidirectional WebSocket using wscat (Shell)\nDESCRIPTION: Provides the command to connect to the Centrifugo unidirectional WebSocket endpoint using the `wscat` utility. The `-c` flag specifies the WebSocket URL (`ws://localhost:8000/connection/uni_websocket`) to connect to. This command establishes the raw WebSocket connection; Centrifugo-specific commands like the connect command must be sent subsequently.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_websocket.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```\nwscat -c \"ws://localhost:8000/connection/uni_websocket\"\n```\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL via Docker using Bash\nDESCRIPTION: Bash command to connect to the PostgreSQL database server running within a Docker container using the `psql` client. This connection is necessary to execute the SQL commands for creating the LISTEN/NOTIFY trigger.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec db psql postgresql://grandchat:grandchat@localhost:5432/grandchat\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence Statistics via Centrifugo HTTP API - JSON\nDESCRIPTION: This JSON snippet is used to request the short presence statistics for a channel using the 'presence_stats' method. Requires the 'channel' parameter and responds with counts for 'num_clients' and 'num_users'. Intended for use as the body of an HTTP POST to the Centrifugo API, this operation does not provide per-client info, only aggregated counts.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"presence_stats\",\n    \"params\": {\n        \"channel\": \"chat\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Wrapper Example - JSON\nDESCRIPTION: An example object using the BoolValue wrapper as accepted by Centrifugo API's override fields. This can be used for options such as presence, join_leave, etc. The value property should be set to true or false as needed. Applies when dynamically overriding channel options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": true/false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP API Transport Error Mode Globally (JSON)\nDESCRIPTION: Sets the Centrifugo HTTP API to use transport-native error codes globally via the 'http_api.error_mode' configuration option with the value 'transport'. Requires Centrifugo v5.1.0 or later and proper configuration loading.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"http_api\": {\n        \"error_mode\": \"transport\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Proxied HTTP Headers via Environment Variable (Shell)\nDESCRIPTION: This shell command demonstrates an alternative method to configure proxied HTTP headers in Centrifugo using the `CENTRIFUGO_PROXY_HTTP_HEADERS` environment variable. The headers are provided as a space-separated string. This allows configuring the proxy headers without modifying the main configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```\nexport CENTRIFUGO_PROXY_HTTP_HEADERS=\"Cookie User-Agent X-B3-TraceId X-B3-SpanId\" ./centrifugo\n```\n```\n\n----------------------------------------\n\nTITLE: Sub Refresh Proxy Request Payload\nDESCRIPTION: Example of the JSON payload sent from Centrifugo to the application backend when a subscription is going to expire. It includes client ID, transport method, protocol details, and channel information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"channel\": \"channel\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating main application HTML\nDESCRIPTION: HTML template for the main application page, including a logout link and a div for logging messages. It also imports the Centrifuge JavaScript client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-10-18-integrating-with-nodejs.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n\n<head>\n  <link rel=\"stylesheet\" href=\"app.css\">\n  <script src=\"https://cdn.jsdelivr.net/gh/centrifugal/centrifuge-js@2.8.3/dist/centrifuge.min.js\"></script>\n</head>\n\n<body>\n  <div>\n    <a href='/logout'>Click to logout</a>\n  </div>\n  <div id=\"log\"></div>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Django CSRF Token View\nDESCRIPTION: Endpoint for retrieving CSRF token\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import JsonResponse\nfrom django.middleware.csrf import get_token\n\n\ndef get_csrf(request):\n    return JsonResponse({}, headers={'X-CSRFToken': get_token(request)})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Persistence for User Blocking - Centrifugo PRO (JSON)\nDESCRIPTION: This JSON snippet shows how to enable the Redis persistence engine for user blocking in Centrifugo PRO. It requires the user_block configuration with a redis_address specifying the Redis host and port. When this setup is active, Centrifugo stores all user block data in a single Redis instance, which is a hard requirement due to lack of sharding support for this feature. Inputs include the Redis socket address. Ensure Redis is running at the specified address, and note that only one shard is supported.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_block.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"user_block\": {\n        \"persistence_engine\": \"redis\",\n        \"redis_address\": \"localhost:6379\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Centrifugo GRPC Go Client (Bash)\nDESCRIPTION: Runs the main.go file to start the client program after all setup and build steps are complete. Requires Go installed and main.go populated with the appropriate code.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 101 (Unauthorized)\nDESCRIPTION: Defines the 'Unauthorized' error code (101) returned to clients when a request lacks proper authorization credentials or permissions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCode:    101\nMessage: \"unauthorized\"\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Terminal): Bad Request (3501)\nDESCRIPTION: The client sent malformed protocol frames during communication. This indicates a client-side implementation error, and reconnection without fixing the issue is futile.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3501\nReason: \"bad request\"\n```\n\n----------------------------------------\n\nTITLE: Configuring allowed_origins with Wildcard for Subdomains in JSON\nDESCRIPTION: Illustrates using a wildcard `*` within the `allowed_origins` configuration in JSON. This example allows connections from any subdomain under `example.com` over HTTPS (e.g., `https://foo.example.com`, `https://bar.example.com`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\n    \"https://*.example.com\"\n]\n```\n\n----------------------------------------\n\nTITLE: Adding URL Pattern for Device Registration API (Python)\nDESCRIPTION: Adds a URL pattern to Django's `urls.py` to route POST requests to `/api/device/register/` to the `device_register_view` function. This establishes the backend endpoint responsible for handling push notification device registrations. Depends on Django's URL routing system and the existence of `views.device_register_view`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npath('api/device/register/', views.device_register_view, name='api-device-register'),\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Namespace for Delta Compression (Initial)\nDESCRIPTION: This JSON snippet shows the server-side configuration within Centrifugo's `config.json` needed to support delta compression for a channel namespace named \"example\". It enables the 'fossil' delta type, forces positioning, and configures history, which are prerequisites for delta compression to function correctly when a client subscribes with the corresponding option.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/delta_compression.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"example\",\n        \"allowed_delta_types\": [\n          \"fossil\"\n        ],\n        \"force_positioning\": true,\n        \"history_size\": 1,\n        \"history_ttl\": \"60s\"\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring WebTransport and HTTP/3 in Centrifugo (JSON)\nDESCRIPTION: This JSON code defines Centrifugo's server configuration for enabling HTTP/3 and WebTransport. It illustrates how to activate TLS (by specifying key and certificate files), enable HTTP/3, and turn on the WebTransport endpoint. The configuration file must be placed at the appropriate location and used on Centrifugo server startup. Required parameters include the TLS key/certificate paths and flags to enable HTTP/3 and WebTransport. This setup is required for any WebTransport client connection to function.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/webtransport.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"http_server\": {\n    \"tls\": {\n      \"enabled\": true,\n      \"key_pem\": \"path/to/key\",\n      \"cert_pem\": \"path/to/crt\"\n    },\n    \"http3\": {\n      \"enabled\": true\n    }\n  },\n  \"webtransport\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing to Centrifugo Channel Using curl and API Key - Bash\nDESCRIPTION: This Bash snippet shows how to programmatically publish a message to a Centrifugo channel using the 'curl' command. It sends a POST request with JSON data to the /api/publish endpoint, includes headers for Content-Type and X-API-Key (which should be replaced with the API key from your Centrifugo config), and specifies the channel and data in the payload. Requires curl to be installed and the Centrifugo server running and accessible at the specified endpoint. Input parameters include API key, channel name, and data payload; the output is the HTTP response from the server, indicating success or errors. Be sure to keep your API key secure.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: d7627bb6-2292-4911-82e1-615c0ed3eebb\" \\\n  --request POST \\\n  --data '{\"channel\": \"channel\", \"data\": {\"value\": 2}}' \\\n  http://localhost:8000/api/publish\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Centrifugo on a Separate Domain\nDESCRIPTION: This Nginx configuration sets up Centrifugo on its own domain. It includes upstream server definition, WebSocket support, and proxy settings for both the connection endpoint and other routes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/load_balancing.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\n    # uncomment ip_hash if using SockJS transport with many upstream servers.\n    #ip_hash;\n    server 127.0.0.1:8000;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\n#server {\n#\tlisten 80;\n#\tserver_name centrifugo.example.com;\n#\trewrite ^(.*) https://$server_name$1 permanent;\n#}\n\nserver {\n\n    server_name centrifugo.example.com;\n\n    listen 80;\n\n    #listen 443 ssl;\n    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    #ssl_certificate /etc/nginx/ssl/server.crt;\n    #ssl_certificate_key /etc/nginx/ssl/server.key;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    gzip on;\n    gzip_min_length 1000;\n    gzip_proxied any;\n\n    # Only retry if there was a communication error, not a timeout\n    # on the Centrifugo server (to avoid propagating \"queries of death\"\n    # to all frontends)\n    proxy_next_upstream error;\n\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Scheme $scheme;\n    proxy_set_header Host $http_host;\n\n    location /connection {\n        proxy_pass http://centrifugo;\n        proxy_buffering off;\n        keepalive_timeout 65;\n        proxy_read_timeout 60s;\n        proxy_http_version 1.1;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n    }\n    \n    location / {\n        proxy_pass http://centrifugo;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Channel Options in Centrifugo Config (Top-Level) in JSON\nDESCRIPTION: This JSON snippet illustrates defining several core Centrifugo channel options at the top-level. Fields include token_hmac_secret_key (for token verification), api_key, and boolean flags (anonymous, publish, subscribe_to_publish, presence, join_leave) which control channel permissions and behaviors. history_size and history_ttl enable message history buffering for reliability, and recover turns on reconnect-based message recovery. All fields must be set according to application security and reliability needs; history features require setting both size and ttl.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/channels.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token_hmac_secret_key\": \"my-secret-key\",\n    \"api_key\": \"secret-api-key\",\n    \"anonymous\": true,\n    \"publish\": true,\n    \"subscribe_to_publish\": true,\n    \"presence\": true,\n    \"join_leave\": true,\n    \"history_size\": 10,\n    \"history_ttl\": \"300s\",\n    \"recover\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debezium PostgreSQL Connector for CDC in JSON\nDESCRIPTION: Specifies Debezium connector settings for capturing changes from a PostgreSQL database, transforming them, and publishing to Kafka. The JSON includes all key parameters such as connector class, database connection, table filters, plugin, transformations, and Kafka topic options. Dependencies involve Debezium, Kafka, and appropriate database privileges (logical replication enabled). Inputs are database host/port, user credentials, topic and table lists. On successful configuration, Debezium streams changes from PostgreSQL's WAL to Kafka for further event consumption.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/outbox_cdc.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"grandchat-connector\",\n    \"config\": {\n        \"connector.class\": \"io.debezium.connector.postgresql.PostgresConnector\",\n        \"database.hostname\": \"db\",\n        \"database.port\": \"5432\",\n        \"database.user\": \"grandchat\",\n        \"database.password\": \"grandchat\",\n        \"database.dbname\": \"grandchat\",\n        \"database.server.name\": \"db\",\n        \"table.include.list\": \"public.chat_cdc\",\n        \"database.history.kafka.bootstrap.servers\": \"kafka:9092\",\n        \"database.history.kafka.topic\": \"schema-changes.chat_cdc\",\n        \"plugin.name\": \"pgoutput\",\n        \"tasks.max\": \"1\",\n        \"producer.override.max.request.size\": \"10485760\",\n        \"topic.creation.default.cleanup.policy\": \"delete\",\n        \"topic.creation.default.partitions\": \"8\",\n        \"topic.creation.default.replication.factor\": \"1\",\n        \"topic.creation.default.retention.ms\": \"604800000\",\n        \"topic.creation.enable\": \"true\",\n        \"topic.prefix\": \"postgres\",\n        \"key.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n        \"value.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n        \"key.converter.schemas.enable\": \"false\",\n        \"value.converter.schemas.enable\": \"false\",\n        \"poll.interval.ms\": \"100\",\n        \"transforms\": \"extractContent\",\n        \"transforms.extractContent.type\": \"org.apache.kafka.connect.transforms.ExtractField$Value\",\n        \"transforms.extractContent.field\": \"after\",\n        \"message.key.columns\": \"public.chat_cdc:partition\",\n        \"snapshot.mode\": \"never\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Stream Position Using Centrifuge SDK in JavaScript\nDESCRIPTION: Illustrates how to retrieve the current top position (offset and epoch) of a channel's publication history using the Centrifuge Subscription object's 'history' method. Requires a valid subscription object connected to a channel with history enabled. The response provides metadata about the latest publication point for subsequent queries. Inputs: none or options object; outputs: offset and epoch describing stream state.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resp = await subscription.history();\nconsole.log(resp.offset);\nconsole.log(resp.epoch);\n```\n\n----------------------------------------\n\nTITLE: Generating Minimal JSON Configuration with Centrifugo using Bash\nDESCRIPTION: Runs the `centrifugo genconfig` command with the `-c` flag to automatically generate a minimal required configuration file named `config.json`. Useful primarily for development setups. Exits with code 1 on error.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/console_commands.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig -c config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Engine in Centrifugo - JSON Configuration\nDESCRIPTION: This snippet demonstrates how to set Centrifugo's engine to Redis in a JSON config file, enabling distributed message delivery, persistent presence, and history storage. The primary dependency is a running Redis instance (version 5.0.1 or higher). The key parameter is 'engine', which accepts values like 'memory', 'redis', or 'tarantool'. Inputs are Centrifugo configuration options, and the output is a valid JSON file that Centrifugo uses to determine which backend engine to use. Ensure the file is properly structured and Redis is accessible from Centrifugo nodes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"redis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 'leave' Push Messages from Centrifugal Server (JSON)\nDESCRIPTION: This JSON message is sent by the Centrifugal server when a user leaves a channel that has the join/leave feature enabled. It contains the channel identifier ('channel') and a 'leave' object with an 'info' sub-object detailing the user ('user') and client ('client') that left. This requires the channel to be configured with join/leave notifications on the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\":\"#2694\",\n  \"leave\":{\n    \"info\":{\"user\":\"2694\",\"client\":\"99288691-e378-4a03-a34d-bf2c0dab6b51\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Mode for Centrifugo Admin Web UI (JSON)\nDESCRIPTION: This snippet toggles the \"admin_insecure\" flag to true in the Centrifugo \"config.json\" file, enabling auto-login to the admin UI without requiring password authentication. While convenient for development or trusted environments, this setting is highly insecure and should be combined with firewall/network rules in production to restrict access. Dependencies include a running Centrifugo instance and proper understanding of security implications. Inputs: boolean values for enabling admin and insecure mode, with placeholder settings for password and secret fields (optional in insecure mode). The system bypasses standard authentication and logs the user in automatically.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/admin_web.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n    ...,\\n    \"admin\": true,\\n    \"admin_insecure\": true,\\n    \"admin_password\": \"<PASSWORD>\",\\n    \"admin_secret\": \"<SECRET>\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sticky Sessions in Nginx for Centrifugo Clusters - Nginx\nDESCRIPTION: This Nginx configuration snippet demonstrates how to use the ip_hash directive in an upstream definition to enable sticky sessions when multiple Centrifugo backend nodes are served behind a load balancer. Sticky sessions ensure that all requests from the same client IP address are routed to the same backend Centrifugo node, which is critical for maintaining SockJS transport session consistency. Make sure the Nginx server block proxies traffic to this upstream, and note that this method may not be ideal when many users share an IP address (e.g., NATed environments); for production, consider cookie-based stickiness using a module like nginx-sticky-module.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/sockjs.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\n    ip_hash;\n    server 127.0.0.1:8000;\n    server 127.0.0.2:8000;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SockJS Endpoint Path in Centrifugo - Text\nDESCRIPTION: This snippet specifies the HTTP endpoint for SockJS connections within Centrifugo, which should be targeted by SockJS clients. It forms part of the configuration and integration details for client-server communication. The endpoint is static and must be used to direct SockJS traffic to the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/sockjs.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\\n/connection/sockjs\\n\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence Statistics Using Centrifuge SDK in JavaScript\nDESCRIPTION: Shows how to retrieve aggregated statistics (number of clients and unique users) for a channel using the 'presenceStats' method after subscribing. The method returns an object containing count metrics. Applicable when presence is configured for the channel. Input: none; output: number of clients and unique users.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_api.md#2025-04-23_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resp = await subscription.presenceStats();\n// resp contains a number of clients and a number of unique users.\n```\n\n----------------------------------------\n\nTITLE: Basic Tenant Channel Format Examples\nDESCRIPTION: Examples of tenant channel naming format showing how to include the tenant identifier in square brackets at the start of the channel name.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/tenant_channels.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[org_1]news\n[org_1]posts:42\n```\n\n----------------------------------------\n\nTITLE: Example Subscribe Proxy Request Payload\nDESCRIPTION: Example of the JSON payload that Centrifugal sends to the application backend when a client attempts to subscribe to a channel. Contains client information and the requested channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":\"9336a229-2400-4ebc-8c50-0a643d22e8a0\",\n  \"transport\":\"websocket\",\n  \"protocol\": \"json\",\n  \"encoding\":\"json\",\n  \"user\":\"56\",\n  \"channel\": \"chat:index\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nginx Service in Docker Compose - yaml\nDESCRIPTION: This snippet defines the deployment of the Nginx service within Docker Compose. It maps the Nginx configuration directory from the project to the container, exposes port 80 of the container to host port 9000, and sets a dependency on the 'backend' service. The image used is 'nginx:1.25'. This setup requires a properly configured nginx/nginx.conf file, and expects Docker Compose orchestration to link the services for the reverse proxy operations as described.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/reverse_proxy.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnginx:\n  image: nginx:1.25\n  volumes:\n    - ./nginx:/etc/nginx/\n  ports:\n    - 9000:80\n  depends_on:\n    - backend\n\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger for OpenTelemetry Trace Collection (Bash)\nDESCRIPTION: This Bash command runs a Jaeger instance using Docker, enabling the collector for OTLP (OpenTelemetry Protocol). Jaeger is set to expose web and OTLP HTTP endpoints on ports 16686 and 4318, respectively. It requires Docker and network access to these ports. This sets up a backend for Centrifugo's trace export; ensure Jaeger is running before Centrifugo is started.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/observability.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --name jaeger \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 16686:16686 \\\n  -p 4318:4318 \\\n  jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Enabling Granular Proxy Mode (JSON)\nDESCRIPTION: Example `config.json` snippet demonstrating how to enable the granular proxy mode by setting `granular_proxy_mode` to `true`. This changes how proxy settings are interpreted, allowing for per-namespace configurations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Environment Variables from Centrifugo v6 Config\nDESCRIPTION: Command to generate environment variables based on a Centrifugo v6 configuration file, outputting only non-zero values from the base configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/migration-v6.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultenv --base config.json --base-non-zero-only\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Unsubscribe Code 2501 (Subscription Expired)\nDESCRIPTION: Defines the 'Subscription Expired' unsubscribe code (2501) sent when a client's subscription has expired (e.g., due to an expired subscription token). Codes >= 2500 trigger an automatic resubscribe attempt by SDKs, which should include obtaining an updated subscription token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nCode:   2501\nReason: \"subscription expired\"\n```\n\n----------------------------------------\n\nTITLE: Blocking a User via HTTP API - Centrifugo PRO (Bash)\nDESCRIPTION: This Bash snippet demonstrates using curl to block a user via the Centrifugo HTTP API. The request sends a POST with a JSON payload specifying the 'block_user' method, the user ID, and an optional expire_at timestamp. API authentication is provided via an Authorization header. Replace <API_KEY> with your real API key. The JSON body structure must match the expected block_user schema.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_block.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"block_user\", \"params\": {\"user\": \"2695\", \"expire_at\": 1635845122}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Rate Limit Configuration\nDESCRIPTION: JSON configuration example for enabling the distributed rate limiter in Centrifugo with Redis connection settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/distributed_rate_limit.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"distributed_rate_limit\": {\n    \"enabled\": true,\n    \"redis_address\": \"localhost:6379\"\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Receiving an Asynchronous Leave Message in JSON\nDESCRIPTION: This JSON object represents an asynchronous 'Leave' message sent by the server when a client unsubscribes from a channel. It's identified by 'type': 2 within the 'result'. The 'data' contains information ('info') about the client that left. Requires the 'join_leave' option to be enabled on the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"type\":2,\n        \"channel\":\"ch1\",\n        \"data\":{\n            \"info\":{\n                \"user\":\"2694\",\n                \"client\":\"5c48510e-cf49-4fa8-a9b2-490b22231e74\",\n                \"conn_info\":{\"name\":\"Alexander\"},\n                \"chan_info\":{}\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Batching Multiple Commands in JSON (Centrifugo Protocol)\nDESCRIPTION: Demonstrates how multiple client commands (e.g., two `subscribe` commands with different IDs and channels) can be sent in a single request payload using the line-delimited JSON streaming format. Each command is encoded as a standard JSON object, and commands are separated by a newline character (`\\n`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_protocol.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"subscribe\": {\"channel\": \"ch1\"}}\n{\"id\": 2, \"subscribe\": {\"channel\": \"ch2\"}}\n```\n\n----------------------------------------\n\nTITLE: Generating New Centrifugo Configuration File (Bash)\nDESCRIPTION: This Bash command calls Centrifugo's built-in configuration generator via CLI. Running centrifugo genconfig in a shell generates a default config.json file with generic settings, suitable as a baseline before enabling transports or changing other Centrifugo options. No dependencies except Centrifugo binary installation. Inputs: None. Output: config.json written to the current working directory. Limitation: Should only be run if config does not exist, or changes will overwrite existing config.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_http_stream.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Configuration\nDESCRIPTION: Command to generate a new Centrifugo configuration file. This is typically the first step in setting up a Centrifugo server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_http_stream.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Building Centrifugo from Source - Shell\nDESCRIPTION: This sequence clones the official Centrifugo GitHub repository, builds the server using Go, and runs the resulting executable. Requires Go (1.16+) installed and git. Outputs the centrifugo binary in the project directory.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/centrifugal/centrifugo.git\ncd centrifugo\ngo build\n./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Wildcard Channel Matching Configuration\nDESCRIPTION: Example demonstrating how to use wildcards for matching multiple channels in a namespace\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/capabilities.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news:*\"],\n            \"match\": \"wildcard\",\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Multiple Commands for JSON Transport - JavaScript\nDESCRIPTION: Implements a JavaScript function to encode an array of command objects into a line-delimited JSON string as required by Centrifuge's protocol over WebSocket. This approach applies to clients communicating using the JSON protocol. It accepts an array of commands, stringifies each, then joins them with a newline separator. No external dependencies are required. Input is an array of JavaScript objects; output is a newline-delimited string of JSON commands.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing to Unknown Namespace with curl - Bash\nDESCRIPTION: Illustrates how an error response is triggered when publishing to an undefined namespace using Centrifugo's HTTP API via curl. Sends a POST request to the channel 'unknown:chat', with authentication header set. Assumes the namespace is not declared in Centrifugo's configuration. The response will contain error details in JSON format.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"unknown:chat\", \"data\": {\"text\": \"hello\"}}' \\\n  http://localhost:8000/api/publish\n```\n\n----------------------------------------\n\nTITLE: Generating Default Centrifugo Configuration (Bash)\nDESCRIPTION: Executes the Centrifugo binary with the `genconfig` command to generate a minimal default configuration file named `config.json` in the current directory. This file contains necessary initial settings, including auto-generated secret keys, required to start the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Enabling Granular Proxy Mode in Centrifugo\nDESCRIPTION: Configuration to enable granular proxy mode in Centrifugo, which allows for more fine-grained control over proxy settings compared to the default global proxy configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"granular_proxy_mode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Non-Terminal): Insufficient State (3010)\nDESCRIPTION: The server detected that the client's position within a channel's publication stream is inconsistent or incorrect, potentially indicating missed messages. Disconnecting allows the client to reconnect and potentially recover the correct state.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3010\nReason: \"insufficient state\"\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Non-Terminal): Too Many Requests (3013)\nDESCRIPTION: The client is disconnected because it has sent too many commands or requests within a given timeframe, exceeding server rate limits. The client should attempt reconnection, potentially after a backoff period.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3013\nReason: \"too many requests\"\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Non-Terminal): No Pong (3012)\nDESCRIPTION: For bidirectional connections using application-level pings, the server disconnects the client because it did not receive a pong response within the configured timeout period. The client should attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3012\nReason: \"no pong\"\n```\n\n----------------------------------------\n\nTITLE: BoolValue Field Example for Option Overrides - JSON\nDESCRIPTION: This small snippet demonstrates how to structure a Boolean override value when customizing channel options via the `subs` claim or similar extension points. The `BoolValue` object wraps a primitive boolean in a JSON object with a single field. Inputs are booleans; outputs are used as embedded properties in JWT payloads sent to Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": true/false\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Client Subscriptions in Centrifugo Config (JSON)\nDESCRIPTION: Setting allow_subscribe_for_client to true in the Centrifugo config allows all authenticated clients to subscribe to any channel without explicit channel JWTs or ACL policies. This simplifies development but may not be suitable for production without further restrictions. Always ensure this setting aligns with your application's security requirements.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"bbe7d157-a253-4094-9759-06a8236543f9\",\n  \"admin\": true,\n  \"admin_password\": \"d0683813-0916-4c49-979f-0e08a686b727\",\n  \"admin_secret\": \"4e9eafcf-0120-4ddd-b668-8dc40072c78e\",\n  \"api_key\": \"d7627bb6-2292-4911-82e1-615c0ed3eebb\",\n  \"allowed_origins\": [\"http://localhost:3000\"],\n  \"allow_subscribe_for_client\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example Connect Proxy Response Payload - Centrifugo - JSON\nDESCRIPTION: This JSON snippet demonstrates a minimal valid backend response to the Centrifugo connect proxy event. The backend must return a JSON object with a 'result' field containing at least the 'user' field. This allows Centrifugo to identify and authenticate the client connection, and further fields may be included as per specification.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {\"user\": \"56\"}}\n```\n\n----------------------------------------\n\nTITLE: Using Unified TLS Configuration Object in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet demonstrates the usage of the new unified TLS configuration object, introduced in Centrifugo v5, specifically for configuring TLS for a gRPC proxy (`proxy_grpc_tls`). It enables TLS (`enabled`) and specifies the paths to the certificate (`cert_pem_file`) and key (`key_pem_file`) files. This unified structure is planned for wider adoption across Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/tls.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"proxy_grpc_tls\": {\n    \"enabled\": true,\n    \"cert_pem_file\": \"/path/to/cert.pem\",\n    \"key_pem_file\": \"/path/to/key.pem\"\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel State Events in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates the minimal setup required to enable channel state events (`occupied` and `vacated`) for a specific namespace (`chat`) in Centrifugo PRO. It requires setting the engine to `redis`, defining a `proxy_channel_state_endpoint` for the webhook, and enabling `presence` and `channel_state_events` within the desired namespace configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/channel_events.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=config.json\n{\n    ...\n    \"engine\": \"redis\",\n    \"proxy_channel_state_endpoint\": \"http://localhost:3000/centrifugo/channel_events\",\n    \"namespaces\": [\n        {\n            \"name\": \"chat\",\n            \"presence\": true,\n            \"channel_state_events\": [\"occupied\", \"vacated\"]\n        }\n    ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example of JWT 'subs' Claim Structure - JSON\nDESCRIPTION: This snippet provides an example payload for the `subs` claim in a connection JWT used by Centrifugo. It shows how to include per-channel data in the claim to automatically handle server-side subscriptions and pass custom data for use during connection establishment. The keys are channel names, and values are option objects with optional fields such as `data`. This should be incorporated as part of the JWT payload generated on the backend. Inputs are JSON objects; outputs are JWTs consumed by Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"subs\": {\n    \"channel1\": {\n      \"data\": {\"welcome\": \"welcome to channel1\"}\n    },\n    \"channel2\": {\n      \"data\": {\"welcome\": \"welcome to channel2\"}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx with Sticky Sessions for Centrifugo - nginx\nDESCRIPTION: This snippet provides an example Nginx upstream configuration that uses the ip_hash directive to maintain sticky sessions. Sticky sessions ensure that all requests from the same client IP are directed to the same Centrifugo backend node, which is required for persistent SockJS sessions. This configuration assumes multiple Centrifugo server instances (at 127.0.0.1:8000 and 127.0.0.2:8000) and leverages ip_hash for basic stickiness. Its limitation is that it may not distribute load fairly if many clients share the same IP (such as behind a proxy), so alternatives like cookie-based modules may be preferred. No external dependencies are required for basic use, but the nginx-sticky-module is recommended for improved fairness.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/sockjs.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\n    ip_hash;\n    server 127.0.0.1:8000;\n    server 127.0.0.2:8000;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Subscribe Proxy for a Specific Namespace\nDESCRIPTION: Configuration to enable subscribe proxy for channels within a specific namespace called 'sun'. This allows subscription permission checking for all channels in that namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"channel\": {\n    \"proxy\": {\n      \"subscribe\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/subscribe\"\n      }\n    },\n    \"namespaces\": [\n      {\n        \"name\": \"sun\",\n        \"subscribe_proxy_enabled\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Django Shell Commands\nDESCRIPTION: Commands to execute the setup script from Django shell for initializing the development environment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/scale.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom app.utils import setup_dev\nsetup_dev()\n```\n\n----------------------------------------\n\nTITLE: Command Encoding Function - JavaScript\nDESCRIPTION: JavaScript function that encodes multiple commands into a line-delimited JSON string for batched transmission.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_protocol.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing User to Room Topic on Join (Python)\nDESCRIPTION: Illustrates calling the `update_user_room_topic` method with the operation 'add' when a user joins a chat room. This triggers the CDC mechanism to subscribe the user to the corresponding push notification topic in Centrifugo. Assumes `self` is an instance of a view/class containing the method, `request.user.pk` is the user ID, and `room_id` is the joined room's ID.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nself.update_user_room_topic(request.user.pk, room_id, 'add')\n```\n\n----------------------------------------\n\nTITLE: Python GRPC Client Implementation\nDESCRIPTION: Example showing how to implement a GRPC client in Python to communicate with Centrifugo, including error handling for both GRPC and API-level errors.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport grpc\nimport api_pb2_grpc as api_grpc\nimport api_pb2 as api_pb\n\nchannel = grpc.insecure_channel('localhost:10000')\nstub = api_grpc.CentrifugoApiStub(channel)\n\ntry:\n    resp = stub.Info(api_pb.InfoRequest())\nexcept grpc.RpcError as err:\n    # GRPC level error.\n    print(err.code(), err.details())\nelse:\n    if resp.error.code:\n        # Centrifugo server level error.\n        print(resp.error.code, resp.error.message)\n    else:\n        print(resp.result)\n```\n\n----------------------------------------\n\nTITLE: Defining the Distributed `operations_distributed` Table Schema in ClickHouse (SQL)\nDESCRIPTION: This SQL snippet defines the `centrifugo.operations_distributed` table, which serves as a distributed interface for the `operations` data across a ClickHouse cluster. It employs the `Distributed` engine, specifying the target cluster (`centrifugo_cluster`), database (`centrifugo`), base table (`operations`), and uses a hash of the client ID (`murmurHash3_64(client)`) as the sharding key for distributing queries.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nSHOW CREATE TABLE centrifugo.operations_distributed;\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.operations_distributed\n(\n    `client` String,\n    `user` String,\n    `op` String,\n    `channel` String,\n    `method` String,\n    `error` UInt32,\n    `disconnect` UInt32,\n    `duration` UInt64,\n    `time` DateTime\n)\nENGINE = Distributed('centrifugo_cluster', 'centrifugo', 'operations', murmurHash3_64(client)) ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Permission Denied (103)\nDESCRIPTION: Returned when the client has successfully authenticated but does not have sufficient permissions to access the requested resource or perform the specific action on a channel (e.g., subscribe, publish).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    103\nMessage: \"permission denied\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx `ip_hash` for Sticky Sessions in Centrifugo\nDESCRIPTION: This Nginx configuration block demonstrates how to enable sticky sessions using the `ip_hash` directive within an upstream group named `centrifugo`. This ensures requests from the same client IP are consistently routed to the same backend Centrifugo node, which is necessary for SockJS transport when multiple nodes are deployed behind a load balancer. The surrounding text notes potential fairness issues with `ip_hash` and suggests alternative cookie-based methods might be preferable.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/sockjs.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream centrifugo {\n    ip_hash;\n    server 127.0.0.1:8000;\n    server 127.0.0.2:8000;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channels via HTTP API in Bash\nDESCRIPTION: Example of using curl to query active channels through Centrifugo's HTTP API. This demonstrates how to make a POST request with an API key to retrieve channel information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{}' \\\n  http://localhost:8000/api/channels\n```\n\n----------------------------------------\n\nTITLE: Validating Centrifugo Configuration File using Bash\nDESCRIPTION: Executes the `centrifugo checkconfig` command to validate the specified configuration file (`config.json`) using the `--config` flag. If any validation errors are found, the program exits with an error message and exit code 1.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/console_commands.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo checkconfig --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub Refresh Proxy in Centrifugo\nDESCRIPTION: Configuration for enabling subscription refresh proxy which allows Centrifugo to call the backend when it's time to refresh a subscription. This removes the need for client-side subscription refresh workflows.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_sub_refresh_endpoint\": \"http://localhost:3000/centrifugo/sub_refresh\",\n  \"proxy_sub_refresh_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Token Audience in Centrifugo\nDESCRIPTION: Configuration for enabling JWT audience claim verification in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_audience\": \"centrifugo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Recovery Configuration in Go\nDESCRIPTION: Server-side configuration for enabling automatic message recovery in subscriptions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nclient.OnSubscribe(func(e centrifuge.SubscribeEvent, cb centrifuge.SubscribeCallback) {\n    cb(centrifuge.SubscribeReply{\n        Options: centrifuge.SubscribeOptions{\n            Recover:   true,\n        },\n    }, nil)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Write Buffer Size - Centrifugo - JSON\nDESCRIPTION: Demonstrates how to set the websocket_write_buffer_size parameter in Centrifugo's config.json, which controls the write buffer size for each WebSocket connection. Lowering this value may save memory at the cost of not reusing the HTTP output buffer. Ensure Centrifugo loads the updated configuration for the change to take effect.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/websocket.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"websocket_write_buffer_size\": 512\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing User Status Response from Centrifugo Server API in JSON\nDESCRIPTION: This snippet illustrates the expected JSON structure of the response when querying user status from Centrifugo's server API. The example shows a result object with a statuses array, where each status may include user, active (last activity Unix timestamp), and online (last online timestamp) fields depending on available data. This structure is essential for clients or backend consumers to interpret real-time and historical user presence. Input is a statuses result; output must be parsed for application logic.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_status.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"statuses\":[\n            {\n                \"user\":\"42\",\n                \"active\":1627107289,\n                \"online\":1627107289\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dockerfile for Vite React App - Dockerfile\nDESCRIPTION: Specifies a Dockerfile for the frontend React application in the 'frontend' directory. Uses Node.js 18 slim as a base image, sets up working directory and PATH, copies package files, installs dependencies with npm ci, and sets the default command to run Vite in host mode. Requires package.json, package-lock.json, and assumes project dependencies managed via npm.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM node:18-slim\n\nWORKDIR /usr/src/app\n\nENV PATH /usr/src/app/node_modules/.bin:$PATH\n\n# install and cache app dependencies\nCOPY package.json .\nCOPY package-lock.json .\nRUN npm ci\n\nCMD [\"vite\", \"--host\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed TLS Certificate Step 1\nDESCRIPTION: Commands to generate initial RSA key and certificate signing request for local development.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -des3 -passout pass:x -out server.pass.key 2048\nopenssl rsa -passin pass:x -in server.pass.key -out server.key\nrm server.pass.key\nopenssl req -new -key server.key -out server.csr\n```\n\n----------------------------------------\n\nTITLE: Defining the Broker Interface for PUB/SUB and Streaming in Centrifuge (Go)\nDESCRIPTION: This snippet presents the `Broker` interface definition in Go. It outlines the contract for components responsible for message publishing/subscription (PUB/SUB), managing history streams, and handling control messages within the Centrifuge framework. This interface is fundamental to Centrifuge's scalability, allowing different backend implementations (like Redis or Nats) to manage message distribution across multiple nodes. It depends on types like `BrokerEventHandler`, `ClientInfo`, `PublishOptions`, etc., defined within the Centrifuge package.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype Broker interface {\n\tRun(BrokerEventHandler) error\n\tSubscribe(ch string) error\n\tUnsubscribe(ch string) error\n\tPublish(ch string, data []byte, opts PublishOptions) (StreamPosition, error)\n\tPublishJoin(ch string, info *ClientInfo) error\n\tPublishLeave(ch string, info *ClientInfo) error\n\tPublishControl(data []byte, nodeID string) error\n\tHistory(ch string, filter HistoryFilter) ([]*Publication, StreamPosition, error)\n\tRemoveHistory(ch string) error\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Benchmarking go-redis/redis SET Operation (Go)\nDESCRIPTION: Implements a Go benchmark function (`BenchmarkGoredis`) using the `testing` package to measure the performance of `SET` operations with `go-redis/redis` without pipelining. It initializes a `UniversalClient` with specific addresses and pool size, defers closing the client, resets the timer, sets parallelism, reports allocations, and runs the `client.Set` command in parallel loops, failing the benchmark on error.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc BenchmarkGoredis(b *testing.B) {\n\tclient := redis.NewUniversalClient(&redis.UniversalOptions{\n\t\tAddrs:    []string{\":6379\"},\n\t\tPoolSize: 128,\n\t})\n\tdefer client.Close()\n\n\tb.ResetTimer()\n\tb.SetParallelism(128)\n\tb.ReportAllocs()\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tfor pb.Next() {\n\t\t\tresp := client.Set(context.Background(), \"goredis\", \"test\", 0)\n\t\t\tif resp.Err() != nil {\n\t\t\t\tb.Fatal(resp.Err())\n\t\t\t}\n\t\t}\n\t})\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Non-Terminal): Server Error (3004)\nDESCRIPTION: The client is disconnected due to an internal server error. Clients are expected to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3004\nReason: \"internal server error\"\n```\n\n----------------------------------------\n\nTITLE: Revoking Individual Token API Call\nDESCRIPTION: cURL command example for revoking a specific token using the revoke_token API endpoint.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/token_revocation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"uid\": \"xxx-xxx-xxx\", \"expire_at\": 1635845122}' \\\n  http://localhost:8000/api/revoke_token\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo JWT Token - Bash\nDESCRIPTION: This snippet shows how to generate a Centrifugo configuration and a JWT token for a user with Centrifugo command-line tools. Required dependencies are the Centrifugo CLI tools (installed and available in your PATH). The command generates an HMAC SHA-256 signed JWT token valid for a fixed TTL, which is then output for immediate use as a bearer token when authenticating connections from clients. The key parameter is the user ID (-u 42). The snippet is for local testing and development; token expiry is determined by TTL and must be changed as needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_connections.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig\ncentrifugo gentoken -u 42\nHMAC SHA-256 JWT for user 42 with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0MiIsImV4cCI6MTYyNzcxMzMzNX0.s3eOhujiyBjc4u21nuHkbcWJll4Um0QqGU3PF-6Mf7Y\n```\n\n----------------------------------------\n\nTITLE: Reply Decoding Function - JavaScript\nDESCRIPTION: JavaScript function that decodes server responses by splitting line-delimited JSON into individual replies.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_protocol.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Empty Proxy Endpoint and Timeout (Centrifugo, JSON)\nDESCRIPTION: This snippet demonstrates how to add the proxy endpoint and timeout values to your Centrifugo configuration file to enable cache empty event notifications. The 'proxy_cache_empty_endpoint' specifies the backend HTTP endpoint, and 'proxy_cache_empty_timeout' determines the maximum allowable duration for the proxy HTTP POST request. Ensure your server at the configured endpoint can handle incoming POST requests as per Centrifugo's expectations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/channel_cache_empty.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_cache_empty_endpoint\": \"http://localhost:3000/centrifugo/cache_empty\",\n  \"proxy_cache_empty_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PreparedMessage Structure in Go (Gorilla WebSocket)\nDESCRIPTION: Shows the Go struct definitions for `PreparedMessage`, `prepareKey`, and `preparedFrame` from the Gorilla WebSocket library. `PreparedMessage` caches the wire representation of a message payload to optimize sending the same message to multiple connections, especially with compression enabled. It uses `prepareKey` to uniquely identify cache entries based on connection options (server/client, compression enabled, compression level) and `preparedFrame` to store the actual wire data, employing `sync.Once` for efficient, thread-safe initialization of the prepared frame data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-08-19-optimizing-websocket-compression.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// PreparedMessage caches on the wire representations of a message payload.\n// Use PreparedMessage to efficiently send a message payload to multiple\n// connections. PreparedMessage is especially useful when compression is used\n// because the CPU and memory expensive compression operation can be executed\n// once for a given set of compression options.\ntype PreparedMessage struct {\n    messageType int\n    data        []byte\n    mu          sync.Mutex\n    frames      map[prepareKey]*preparedFrame\n}\n\n// prepareKey defines a unique set of options to cache prepared frames in PreparedMessage.\ntype prepareKey struct {\n    isServer         bool\n    compress         bool\n    compressionLevel int\n}\n\n// preparedFrame contains data in wire representation.\ntype preparedFrame struct {\n    once sync.Once\n    data []byte\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Session and Accepting Client Indication Stream in Go\nDESCRIPTION: Implements session handling by accepting a unidirectional stream from the client, attempting to parse and validate the client indication, and then communicating with the client. Depends on the quic.Session API and expects the methods receiveClientIndication and validateClientIndication to be present. The key operations are stream acceptance, client data parsing, validation, and entering the main communication loop, with error logging throughout.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *WebTransportServerQuic) handleSession(sess quic.Session) {\n    stream, err := sess.AcceptUniStream(context.Background())\n    if err != nil {\n        log.Println(err)\n        return\n    }\n    log.Printf(\"uni stream accepted, id: %d\", stream.StreamID())\n\n    indication, err := receiveClientIndication(stream)\n    if err != nil {\n        log.Println(err)\n        return\n    }\n    log.Printf(\"client indication: %+v\", indication)\n\n    if err := s.validateClientIndication(indication); err != nil {\n        log.Println(err)\n        return\n    }\n\n    // this method blocks.\n    if err := s.communicate(sess); err != nil {\n        log.Println(err)\n    }\n}\n\nfunc receiveClientIndication(stream quic.ReceiveStream) (ClientIndication, error) {\n    return ClientIndication{}, errors.New(\"not implemented yet\")\n}\n\nfunc (s *WebTransportServerQuic) validateClientIndication(indication ClientIndication) error {\n\treturn errors.New(\"not implemented yet\")\n}\n\nfunc (s *WebTransportServerQuic) communicate(sess quic.Session) error {\n    return errors.New(\"not implemented yet\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Terminal): Stale (3502)\nDESCRIPTION: The client connected but failed to authenticate within the server's configured time limit. The connection is considered stale and closed. Reconnection might succeed if authentication is performed promptly.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3502\nReason: \"stale\"\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Operations Table Schema\nDESCRIPTION: SQL schema for the operations table that records client operations including operation type, channel, method, error status, and duration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.operations\n(\n    `client` String,\n    `user` String,\n    `op` String,\n    `channel` String,\n    `method` String,\n    `error` UInt32,\n    `disconnect` UInt32,\n    `duration` UInt64,\n    `time` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{cluster}/{shard}/operations', '{replica}')\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192\n```\n\n----------------------------------------\n\nTITLE: CentrifugoProxy GRPC Service Contract for Bidirectional Streams (Proto/Go-like)\nDESCRIPTION: This service method illustrates the CentrifugoProxy GRPC contract for bidirectional stream proxies. The 'SubscribeBidirectional' method accepts a stream of 'StreamSubscribeRequest's and returns a stream of 'StreamSubscribeResponse's, facilitating two-way communication between Centrifugo clients and backend. Any backend GRPC service must implement this prototype for bidirectional streaming.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy_streams.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nservice CentrifugoProxy {\n  ...\n  // SubscribeBidirectional allows handling bidirectional subscription streams.\n  rpc SubscribeBidirectional(stream StreamSubscribeRequest) returns (stream StreamSubscribeResponse);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for get_user_status API (Inactive or Unknown User) - JSON\nDESCRIPTION: Shows an example response when no recent activity or online information is available for a queried user in the 'get_user_status' API call. Only the 'user' field is included, without 'active' or 'online' fields. The status object presence in the response ensures consistent array ordering with respect to the input.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_status.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"statuses\":[\n            {\n                \"user\":\"42\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Status via Centrifugo Server API using Bash cURL\nDESCRIPTION: Utilizing Bash cURL, this snippet retrieves the current user statuses from Centrifugo's server API, requiring an API key and properly set up Centrifugo instance. The request contains an array of user IDs to query, and the expected response includes the user's status fields (user, active, online) or only the user field if activity status is unknown. Useful for backend processes that need to display or react to user presence or recency information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_status.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"users\": [\"42\"]}' \\\n  http://localhost:8000/api/get_user_status\n```\n\n----------------------------------------\n\nTITLE: Adjusting Nginx Worker Connections - Nginx Configuration - nginx\nDESCRIPTION: This snippet increases the 'worker_connections' limit in the Nginx events block, which is essential for supporting large numbers of simultaneous persistent connections (such as WebSockets). No external dependencies except standard Nginx configuration are required. The key parameter 'worker_connections' increases the maximum per-worker open connections. Increasing this value allows Nginx to efficiently manage more concurrent users connected through load-balanced Centrifugo nodes. Be aware that system-level ulimit may also need adjustment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/load_balancing.md#2025-04-23_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nevents {\n    worker_connections 65535;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis-based User Status Persistence in Centrifugo using JSON (Engine Reuse)\nDESCRIPTION: This snippet extends Centrifugo's config.json to enable user status using the Redis engine already declared elsewhere in Centrifugo's configuration. It uses the use_from_engine parameter to leverage existing Redis setup, simplifying resource management and connection pooling. Prerequisites include Centrifugo's engine.type set to 'redis' and correct network access. Designed for streamlined deployment without duplicating connection details.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_status.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\"\n  },\n  \"user_status\": {\n    \"enabled\": true,\n    \"redis\": {\n      \"use_from_engine\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sharding with Two Local Instances\nDESCRIPTION: JSON configuration for Centrifugo using Redis sharding with two local Redis instances. Sharding distributes channels and history/presence keys across Redis instances using consistent hashing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_address\": [\n        \"127.0.0.1:6379\",\n        \"127.0.0.1:6380\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Integration in Centrifugo PRO\nDESCRIPTION: Configuration snippet demonstrating how to enable and configure Sentry integration in Centrifugo PRO for error tracking and monitoring. Requires a valid Sentry DSN.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sentry\": {\n    \"enabled\": true,\n    \"dsn\": \"your-project-public-dsn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HMAC Secret Key in Centrifugo Config - JSON\nDESCRIPTION: This snippet shows how to add an HMAC secret key for token signing in the Centrifugo configuration file. The `token_hmac_secret_key` field stores the secret required by Centrifugo to verify JWTs signed with HMAC algorithms. Replace the placeholder string with your secure secret. The surrounding context instructs the developer to add this entry inside the `config.json` file, alongside any other settings. The input is a JSON object with a string field, and its output is the configuration file used by Centrifugo. No other dependencies are required beyond Centrifugo itself.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"token_hmac_secret_key\": \"<YOUR-SECRET-STRING-HERE>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Session: Sending Connect Command and Server Response - Bash + JSON\nDESCRIPTION: This interactive example shows a wscat session where a connect command with a JWT and subscription map is sent to Centrifugo, and the corresponding JSON response from the server is shown. The connect payload includes the \"token\" and a \"subs\" object mapping channels to subscription details. The server returns a JSON message with session and subscription info. No dependencies beyond a running Centrifugo server and wscat client are required.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_websocket.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n‚ùØ wscat -c \"ws://localhost:8000/connection/uni_websocket\"\n\nConnected (press CTRL+C to quit)\n> {\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0X3VzZXIiLCJleHAiOjE2NTY1MDMwNDV9.3UYL-UCUBp27TybeBK7Z0OenwdsKwCMRe46fuEjJnzI\", \"subs\": {\"abc\": {}}}\n< {\"connect\":{\"client\":\"bfd28799-b958-4791-b9e9-b011eaef68c1\",\"version\":\"0.0.0\",\"subs\":{\"#test_user\":{}},\"expires\":true,\"ttl\":604407,\"ping\":25,\"session\":\"57b1287b-44ec-45c8-93fc-696c5294af25\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Application Layout in React - javascript\nDESCRIPTION: Sets up the top-level React component for the chat application's frontend. Uses useState and useReducer for various parts of the chat state and wraps the app in multiple React Context providers (CsrfContext, AuthContext, ChatContext). Renders either the login view or authenticated chat layouts using React Router, with authentication info loaded from localStorage. Expects supporting context, routing, and reducer implementations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst App: React.FC = () => {\n  let localAuth: any = {};\n  if (localStorage.getItem(LOCAL_STORAGE_AUTH_KEY)) {\n    localAuth = JSON.parse(localStorage.getItem(LOCAL_STORAGE_AUTH_KEY)!)\n  }\n  const [authenticated, setAuthenticated] = useState<boolean>(localAuth.id !== undefined)\n  const [userInfo, setUserInfo] = useState<any>(localAuth)\n  const [csrf, setCSRF] = useState('')\n  const [unrecoverableError, setUnrecoverableError] = useState('')\n  const [chatState, dispatch] = useReducer(reducer, initialChatState);\n  const [realTimeStatus, setRealTimeStatus] = useState('üî¥')\n  const [messageQueue, setMessageQueue] = useState<any[]>([]);\n\n  return (\n    <CsrfContext.Provider value={csrf}>\n      <AuthContext.Provider value={userInfo}>\n        {authenticated ? (\n          <ChatContext.Provider value={{ state: chatState, dispatch }}>\n            <Router>\n              <ChatLayout>\n                <Routes>\n                  <Route path=\"/\" element={<ChatRoomList />} />\n                  <Route path=\"/search\" element={<ChatSearch />} />\n                  <Route path=\"/rooms/:id\" element={<ChatRoomDetail />} />\n                </Routes>\n              </ChatLayout>\n            </Router>\n          </ChatContext.Provider>\n        ) : (\n          <ChatLogin />\n        )}\n      </AuthContext.Provider>\n    </CsrfContext.Provider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Templating Push Notification Content\nDESCRIPTION: Example of using templating in push notification payloads with device meta data access. Requires setting use_templating flag to true.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Hello {{.device.meta.first_name}}\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Unidirectional WebSocket Using wscat - Bash\nDESCRIPTION: This snippet demonstrates opening an interactive websocket connection to Centrifugo's uni_websocket endpoint using the wscat tool. The command must be run in a terminal with wscat installed. A URI to the websocket endpoint (typically ws://localhost:8000/connection/uni_websocket) must be supplied. Output will show connection status and allow message sending.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_websocket.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwscat -c \"ws://localhost:8000/connection/uni_websocket\"\n```\n\n----------------------------------------\n\nTITLE: Defining FcmPushNotification Object - Centrifugo - Markdown\nDESCRIPTION: This code block documents the fields of the 'FcmPushNotification' object for use with Centrifugo's push notification API. It specifies the requirements for the FCM provider, particularly that the 'message' field must adhere to Google's REST format for FCM messages. This table is meant to guide developers in forming the correct payload for FCM sends and clarifies which parts of the request are mandatory.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n`FcmPushNotification`:\n\n| Field     | Type          | Required | Description                                                                                                            |\n|-----------|---------------|----------|------------------------------------------------------------------------------------------------------------------------|\n| `message` | `JSON` object | Yes      | FCM [Message](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#Message) described in FCM docs. |\n\n```\n\n----------------------------------------\n\nTITLE: Default Bidirectional HTTP-Streaming Endpoint URL (Disabled)\nDESCRIPTION: This URL path is used for bidirectional connection emulation via HTTP-streaming. This endpoint is disabled by default and needs explicit configuration to be enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nws://localhost:8000/connection/http_stream\n```\n\n----------------------------------------\n\nTITLE: Defining PushLocalization Object - Centrifugo - Markdown\nDESCRIPTION: This snippet provides the Markdown table schema for 'PushLocalization', an object designed for managing per-language translation variables within Centrifugo push notifications. The only field listed, 'translations', requires developers to supply a map of variables to their localized values. This documentation helps clarify localization expectations when templating messages.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n`PushLocalization`:\n\n| Field          | Type                | Required | Description                                       |\n|----------------|---------------------|----------|---------------------------------------------------|\n| `translations` | `map[string]string` | Yes      | Variable name to value for the specific language. |\n\n```\n\n----------------------------------------\n\nTITLE: Revoking an Individual Token Using revoke_token API - Bash (curl)\nDESCRIPTION: Illustrates how to revoke a single token via the Centrifugo PRO HTTP API using curl. It sends a POST request to /api/revoke_token with headers for content type and API key, and a JSON payload including the token's unique ID (uid) and optional expire_at (expiration time in Unix seconds). Requires a token with a 'jti' claim and appropriate API permissions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/token_revocation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"uid\": \"xxx-xxx-xxx\", \"expire_at\": 1635845122}' \\\n  http://localhost:8000/api/revoke_token\n```\n\n----------------------------------------\n\nTITLE: Defining an Error Structure in JSON Replies (Centrifugo Protocol)\nDESCRIPTION: Defines the structure of an `error` object returned within a server reply when a command fails. It includes a numeric `code`, a human-readable `message`, and an optional boolean `temporary` flag indicating if the error state might be transient. This structure is nested within the main reply object.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_protocol.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 100,\n    \"message\": \"internal server error\",\n    \"temporary\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Empty Proxy Request Payload\nDESCRIPTION: Example of the JSON payload sent to the backend when a cache miss occurs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/channel_cache_empty.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": \"example:index\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic JWKS Endpoint in Centrifugo (JSON Example)\nDESCRIPTION: Shows a JSON-based Centrifugo configuration that enables dynamic JWKS endpoint construction based on extracted JWT issuer claim variables via regex. Inputs: regex for issuer matching and endpoint template. Output: Proper configuration for secure, per-realm public key loading. 'token_issuer_regex' extracts named groups, and 'token_jwks_public_endpoint' uses them in its URL template. Useful for integrating with multi-tenant identity providers.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_issuer_regex\": \"https://example.com/auth/realms/(?P<realm>[A-z]+)\",\n  \"token_jwks_public_endpoint\": \"https://keycloak:443/{{realm}}/protocol/openid-connect/certs\",\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Refresh Proxy Result Example - JSON\nDESCRIPTION: This response example shows the expected result from the backend after handling a refresh proxy request. The 'result' object contains an 'expire_at' field (a future UNIX timestamp after which the connection will be expired by Centrifugo). Optional fields can be used to expire the connection immediately ('expired') or to include 'info' or 'b64info' metadata. The backend must ensure 'expire_at' is set according to its session/token policy.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {\"expire_at\": 1565436268}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Channel Namespace Resolution for Metrics in Centrifugo PRO\nDESCRIPTION: This configuration enables channel namespace resolution for metrics in Centrifugo PRO. It allows for more granular insights into bandwidth consumption, frame generation, and error rates across different channel namespaces.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/observability_enhancements.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"prometheus\": {\n    \"enabled\": true,\n    \"channel_namespace_resolution\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence via Centrifugo HTTP API - Bash\nDESCRIPTION: This Bash command demonstrates an HTTP POST request to the Centrifugo API for retrieving channel presence details. The echoed JSON payload specifies the 'presence' method and sets the channel name to 'chat'. The http utility sends this request along with required Authorization headers. The response, when successful, includes a result object listing client and user IDs currently present in the specified channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfz@centrifugo: echo '{\"method\": \"presence\", \"params\": {\"channel\": \"chat\"}}' | http \"localhost:8000/api\" Authorization:\"apikey KEY\"\nHTTP/1.1 200 OK\nContent-Length: 127\nContent-Type: application/json\nDate: Thu, 17 May 2018 22:13:17 GMT\n\n{\n    \"result\": {\n        \"presence\": {\n            \"c54313b2-0442-499a-a70c-051f8588020f\": {\n                \"client\": \"c54313b2-0442-499a-a70c-051f8588020f\",\n                \"user\": \"42\"\n            },\n            \"adad13b1-0442-499a-a70c-051f858802da\": {\n                \"client\": \"adad13b1-0442-499a-a70c-051f858802da\",\n                \"user\": \"42\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database via Docker Compose (Bash)\nDESCRIPTION: This Bash command allows users to open a PostgreSQL interactive terminal (psql) session by executing psql inside the running database container via Docker Compose. Authentication occurs with the grandchat user against a database named grandchat. Prerequisites: The Docker Compose project should be running and the db service should be named 'db'. This is typically used for inspecting data or running ad-hoc SQL queries.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/tips_and_tricks.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec db psql postgresql://grandchat:grandchat@localhost:5432/grandchat\n```\n\n----------------------------------------\n\nTITLE: React App Layout Implementation\nDESCRIPTION: Main application component implementing authentication context, routing, and chat state management\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst App: React.FC = () => {\n  let localAuth: any = {};\n  if (localStorage.getItem(LOCAL_STORAGE_AUTH_KEY)) {\n    localAuth = JSON.parse(localStorage.getItem(LOCAL_STORAGE_AUTH_KEY)!)\n  }\n  const [authenticated, setAuthenticated] = useState<boolean>(localAuth.id !== undefined)\n  const [userInfo, setUserInfo] = useState<any>(localAuth)\n  const [csrf, setCSRF] = useState('')\n  const [unrecoverableError, setUnrecoverableError] = useState('')\n  const [chatState, dispatch] = useReducer(reducer, initialChatState);\n  const [realTimeStatus, setRealTimeStatus] = useState('üî¥')\n  const [messageQueue, setMessageQueue] = useState<any[]>([]);\n\n  return (\n    <CsrfContext.Provider value={csrf}>\n      <AuthContext.Provider value={userInfo}>\n        {authenticated ? (\n          <ChatContext.Provider value={{ state: chatState, dispatch }}>\n            <Router>\n              <ChatLayout>\n                <Routes>\n                  <Route path=\"/\" element={<ChatRoomList />} />\n                  <Route path=\"/search\" element={<ChatSearch />} />\n                  <Route path=\"/rooms/:id\" element={<ChatRoomDetail />} />\n                </Routes>\n              </ChatLayout>\n            </Router>\n          </ChatContext.Provider>\n        ) : (\n          <ChatLogin />\n        )}\n      </AuthContext.Provider>\n    </CsrfContext.Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast HTTP Client for Proxy in Centrifugo PRO\nDESCRIPTION: This snippet demonstrates how to enable the fast optimized HTTP client for proxy requests in Centrifugo PRO. The 'use_fast_client' option is set to true within the 'http' section of the connect proxy configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"proxy\": {\n      \"connect\": {\n        \"enabled\": true,\n        \"endpoint\": \"https://your_backend/centrifugo/connect\",\n        \"http\": {\n          \"use_fast_client\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ClickHouse Distributed Subscriptions Table in SQL\nDESCRIPTION: This SQL snippet demonstrates the creation of a distributed 'subscriptions' table in ClickHouse for Centrifugo. It uses the Distributed engine to distribute data across the cluster.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.subscriptions_distributed\n(\n    `client` String,\n    `user` String,\n    `channels` Array(String),\n    `time` DateTime\n)\nENGINE = Distributed('centrifugo_cluster', 'centrifugo', 'subscriptions', murmurHash3_64(client))\n```\n\n----------------------------------------\n\nTITLE: Creating ClickHouse Distributed Operations Table in SQL\nDESCRIPTION: This SQL snippet demonstrates the creation of a distributed 'operations' table in ClickHouse for Centrifugo. It uses the Distributed engine to distribute data across the cluster.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.operations_distributed\n(\n    `client` String,\n    `user` String,\n    `op` String,\n    `channel` String,\n    `method` String,\n    `error` UInt32,\n    `disconnect` UInt32,\n    `duration` UInt64,\n    `time` DateTime\n)\nENGINE = Distributed('centrifugo_cluster', 'centrifugo', 'operations', murmurHash3_64(client))\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA Public Key in Centrifugo\nDESCRIPTION: JSON configuration for setting the RSA public key (PEM encoded) for JWT authentication in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token_rsa_public_key\": \"-----BEGIN PUBLIC KEY-----\\nMFwwDQYJKoZ...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Limits for a Running Process (Linux)\nDESCRIPTION: Retrieves the specific resource limits applied to a running process identified by its Process ID (PID) by reading the `/proc` filesystem. This is useful for verifying the actual limits applied to the Centrifugo process.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/infra_tuning.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncat /proc/<PID>/limits\n```\n\n----------------------------------------\n\nTITLE: Defining PushRateLimitStrategy Object - Centrifugo - Markdown\nDESCRIPTION: This Markdown table describes the fields and structure for Centrifugo's 'PushRateLimitStrategy' configuration used for implementing rate limiting of push notifications. Developers are guided on how to select which keys are used for rate limiting, specify time-based policies, and the action to take if the limit is reached. It documents all relevant fields for advanced rate control and references variable usage. This Markdown serves purely documentation purposes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n`PushRateLimitStrategy`:\n\n| Field                  | Type                     | Required | Description                                                                             |\n|------------------------|--------------------------|----------|-----------------------------------------------------------------------------------------|\n| `key`                  | `string`                 | No       | Optional key for rate limit policy, supports variables (`devide.id` and `device.user`). |\n| `policies`             | `array[RateLimitPolicy]` | No       | Set time limit policy                                                                   |\n| `drop_if_rate_limited` | `bool`                   | No       | Drop push if rate limited, otherwise queue for later                                    |\n\n```\n\n----------------------------------------\n\nTITLE: Executing Rate Limit Check via cURL\nDESCRIPTION: Example of how to make a rate limit check request to Centrifugo's API using cURL. The request includes a key, interval, and rate parameters.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/distributed_rate_limit.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/api/rate_limit \\\n-H \"Authorization: apikey <KEY>\" \\\n-d @- <<'EOF'\n\n{\n    \"key\": \"rate_limit_test\",\n    \"interval\": 60000,\n    \"rate\": 10\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Sample Reply Listing - Text Framing - Text\nDESCRIPTION: Shows a sample of how the server sends multiple Reply objects back to the client as line-delimited JSON, corresponding to issued Commands. Each line is a discrete JSON-formatted response. No programming logic is required‚Äîthis is the direct wire format for responses.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n{\"id\": 1, \"result\": {}}\n{\"id\": 2, \"result\": {}}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Logout in Django\nDESCRIPTION: This snippet defines a view function for logging out a user using Django's built-in authentication system. It requires a POST request and returns a JSON response.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom django.contrib.auth import logout\nfrom django.http import JsonResponse\nfrom django.views.decorators.http import require_POST\n\n\n@require_POST\ndef logout_view(request):\n    if not request.user.is_authenticated:\n        return JsonResponse({'detail': 'must be authenticated'}, status=403)\n\n    logout(request)\n    return JsonResponse({})\n```\n\n----------------------------------------\n\nTITLE: Allowing User-Limited Channels in Centrifugo v4 Namespace\nDESCRIPTION: Enable the `allow_user_limited_channels` option within a specific namespace configuration in Centrifugo v4. This explicitly permits the use of user-limited channels (channels containing '#') within that namespace, a permission which needs to be explicitly granted in v4.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/migration-v4.md#2025-04-23_snippet_4\n\nLANGUAGE: configuration\nCODE:\n```\nallow_user_limited_channels\n```\n\n----------------------------------------\n\nTITLE: Setting Publish Proxy Endpoint in Centrifugo Configuration - JSON\nDESCRIPTION: Defines the \\\\\"proxy_publish_endpoint\\\\\" and its timeout for publish proxying in Centrifugo's configuration. This enables backend validation for client publish requests, using HTTP POST to the specified endpoint, with a defined request timeout. Shown as a partial configuration snippet.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_publish_endpoint\": \"http://localhost:3000/centrifugo/publish\",\n  \"proxy_publish_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Terminal): Too Many Errors (3509)\nDESCRIPTION: The client is disconnected because it has generated an excessive number of errors within a certain period, indicating potential misbehavior or malfunction. Reconnection should not be attempted without investigating the cause of the errors.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3509\nReason: \"too many errors\"\n```\n\n----------------------------------------\n\nTITLE: Permitting All Authenticated Users with access_cel in OIDC Config - JavaScript\nDESCRIPTION: This snippet sets the 'access_cel' field to the CEL expression 'true', effectively granting admin access to all users authenticated by the Identity Provider. While this simplifies access control, it should be used with caution due to security implications. This setting is intended as a JSON configuration input and requires OIDC and basic access control integration to be enabled in Centrifugo PRO.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/admin_idp_auth.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript title=\\\"config.json\\\"\n{\n  ...\n  \\\"access_cel\\\": \\\"true\\\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Starting a Local PostgreSQL Instance using Docker (Bash)\nDESCRIPTION: This command uses Docker to quickly start a local PostgreSQL database instance (version 15) suitable for testing Centrifugo's database persistence feature. It sets the default user to `postgres`, the password to `pass`, and maps the container's port 5432 to the host's port 5432.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_block.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```\ndocker run -it --rm -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=pass -p 5432:5432 postgres:15\n```\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo HTTP Publish Proxy Success Response (JSON)\nDESCRIPTION: This JSON snippet shows the minimal successful response expected from the backend application when allowing a proxied publish request. Returning an empty result object (`{ \"result\": {} }`) signifies approval to Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Persistence Engine for User Blocking in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration enables Centrifugo PRO to store blocked user information in a PostgreSQL database. It sets up the database DSN and selects the database as the \"user_block\" persistence engine. The only supported database is PostgreSQL, and credentials must be properly set. Additional parameters may be specified using ellipsis (...). This configuration ensures that block data survives Centrifugo restarts.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/user_block.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"user_block\": {\n        \"persistence_engine\": \"database\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Publish Method in go-redis/redis (Go)\nDESCRIPTION: Shows the function signature for the `Publish` method on the `go-redis/redis` Client. It takes a context, channel string, and a message (as an interface{}), returning an `IntCmd`. This highlights the library's type-safe approach compared to Redigo, although the message type allows for flexibility (`string` or `[]byte`) but might cause extra allocations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (c Client) Publish(ctx context.Context, channel string, message interface{}) *IntCmd\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis Broker in Centrifugo Configuration (JSON)\nDESCRIPTION: Shows the basic JSON structure within `config.json` to enable a separate broker and specify its type as Redis. This requires setting `broker.enabled` to `true` and `broker.type` to `\"redis\"`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"broker\": {\n    \"enabled\": true,\n    \"type\": \"redis\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Redis Sentinel Configuration - Bash/Config\nDESCRIPTION: This snippet is a sample configuration file for setting up a Redis Sentinel instance to monitor a master on port 6379 with a required quorum of 2. Dependencies include Redis Sentinel 5.0.1+ running on the specified port. Key options: 'port' (Sentinel listening port), 'sentinel monitor' (master and quorum), 'sentinel down-after-milliseconds' (failure detection), and 'sentinel failover-timeout' (failover window). Input is the Sentinel config file; output is a monitored Redis master with automatic failover support. Update IPs and names per deployment requirements.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nport 26379\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 10000\nsentinel failover-timeout mymaster 60000\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscribe CEL Expression for Admin Namespace\nDESCRIPTION: Example shows how to configure a subscribe_cel expression in a namespace to check if user has admin role in their meta information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/cel_expressions.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"namespaces\": [\n        {\n            \"name\": \"admin\",\n            \"subscribe_cel\": \"'admin' in meta.roles\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Django Room and Index Views (Python)\nDESCRIPTION: Implements two Django view functions: one rendering the chat index and one rendering the room view, passing the 'room_name' context variable for the template. This snippet requires Django to be installed and configured, the chat app template directory structure to exist, and URLs to point to these views. The 'room' view expects a 'room_name' route parameter and renders 'chat/room.html'. Inputs are HTTP requests; outputs are rendered HTML page responses.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\\n\\n\\ndef index(request):\\n    return render(request, 'chat/index.html')\\n\\ndef room(request, room_name):\\n    return render(request, 'chat/room.html', {\\n        'room_name': room_name\\n    })\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ADD_MESSAGES Action in Redux for Chat Application\nDESCRIPTION: This action handles adding new messages to a room, updating the last message, and sorting rooms based on the latest activity. It combines new and existing messages, removes duplicates, and updates the room list accordingly.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncase 'ADD_MESSAGES': {\n  const roomId = action.payload.roomId;\n  const newMessages = action.payload.messages;\n  let currentMessages = state.messagesByRoomId[roomId] || [];\n\n  // Combine current and new messages, then filter out duplicates.\n  const combinedMessages = [...currentMessages, ...newMessages].filter(\n    (message, index, self) =>\n      index === self.findIndex(m => m.id === message.id)\n  );\n\n  // Sort the combined messages by id in ascending order.\n  combinedMessages.sort((a, b) => a.id - b.id);\n\n  // Find the message with the highest ID.\n  const maxMessageId = combinedMessages.length > 0 ? combinedMessages[combinedMessages.length - 1].id : null;\n\n  let needSort = false;\n\n  // Update the roomsById object with the new last_message if necessary.\n  const updatedRoomsById = { ...state.roomsById };\n  if (maxMessageId !== null && updatedRoomsById[roomId] && (!updatedRoomsById[roomId].last_message || maxMessageId > updatedRoomsById[roomId].last_message.id)) {\n    const newLastMessage = combinedMessages.find(message => message.id === maxMessageId);\n    updatedRoomsById[roomId].last_message = newLastMessage;\n    updatedRoomsById[roomId].bumped_at = newLastMessage.room.bumped_at;\n    needSort = true;\n  }\n\n  let updatedRooms = [...state.rooms];\n  if (needSort) {\n      // Sort mergedRoomIds based on bumped_at field in updatedRoomsById.\n      updatedRooms = updatedRooms.sort((a: any, b: any) => {\n        const roomA = updatedRoomsById[a];\n        const roomB = updatedRoomsById[b];\n        // Compare RFC 3339 date strings directly\n        return roomB.bumped_at.localeCompare(roomA.bumped_at);\n      });\n  }\n\n  return {\n    ...state,\n    messagesByRoomId: {\n      ...state.messagesByRoomId,\n      [roomId]: combinedMessages\n    },\n    roomsById: updatedRoomsById,\n    rooms: updatedRooms,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Non-Terminal Disconnect Code 3010 (Insufficient State)\nDESCRIPTION: Defines the non-terminal client disconnect code 3010, indicating \"insufficient state\". This is issued when Centrifugo detects a discrepancy in the client's position within a channel stream (for channels with recovery enabled), often due to message loss from the broker. Disconnecting allows the client to potentially restore the correct state upon reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3010\nReason: \"insufficient state\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Haproxy for Redis in Centrifugo\nDESCRIPTION: Haproxy configuration example for balancing traffic to Redis master. This setup checks Redis instances for master role and routes traffic accordingly, providing HA without direct Sentinel configuration in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_6\n\nLANGUAGE: conf\nCODE:\n```\nlisten redis\n    server redis-01 127.0.0.1:6380 check port 6380 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2\n    server redis-02 127.0.0.1:6381 check port 6381 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2 backup\n    bind *:16379\n    mode tcp\n    option tcpka\n    option tcplog\n    option tcp-check\n    tcp-check send PING\\r\\n\n    tcp-check expect string +PONG\n    tcp-check send info\\ replication\\r\\n\n    tcp-check expect string role:master\n    tcp-check send QUIT\\r\\n\n    tcp-check expect string +OK\n    balance roundrobin\n```\n\n----------------------------------------\n\nTITLE: Generating Go code from Protobuf schema (Shell)\nDESCRIPTION: Runs protoc with appropriate flags to generate Go and GRPC client code from the Protobuf schema file api.proto. Requires protoc, protoc-gen-go, and protoc-gen-go-grpc binaries installed in PATH.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nprotoc -I ./ api.proto --go_out=. --go-grpc_out=.\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files (Bash)\nDESCRIPTION: Commands to serve the HTML file using either Centrifugo's built-in server or Python's HTTP server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/quickstart.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo serve --port 3000\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m http.server 3000\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3008 (Slow)\nDESCRIPTION: Defines the 'Slow' disconnect code (3008). This is a non-terminal code issued when the server detects that a client is not consuming messages quickly enough, causing server-side buffers to potentially overflow. Clients are expected to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nCode:   3008\nReason: \"slow\"\n```\n\n----------------------------------------\n\nTITLE: Starting Third Centrifugo Node with Redis Engine - Bash Command\nDESCRIPTION: Similar to earlier bash entries, this snippet starts a third Centrifugo instance, this time listening on port 8002, also connected to the shared Redis server. The command enables running a third node, increasing resilience and connection throughput. Parameters and requirements are unchanged but the '--port' argument is incremented. Appropriate for local development clusters; in production, nodes typically run on separate hosts.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json --port=8002 --engine=redis --redis_address=127.0.0.1:6379\n```\n\n----------------------------------------\n\nTITLE: Interactive wscat Session with Connect Command (Shell/Text)\nDESCRIPTION: Illustrates an interactive session using `wscat` after connecting to the Centrifugo unidirectional WebSocket endpoint. It shows sending the JSON connect command (`> {\"token\": \"...\", \"subs\": {...}}`) containing the authentication token and desired subscriptions, and the corresponding successful connect response (`< {\"type\":6,\"data\":{...}}`) received from the server, confirming the connection and subscriptions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_websocket.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n```\n‚ùØ wscat -c \"ws://localhost:8000/connection/uni_websocket\"\nConnected (press CTRL+C to quit)\n> {\"token\": \"eyJh..5lz1Iw\", \"subs\": {\"abc\": {}}}\n< {\"type\":6,\"data\":{\"client\":\"8ceaa299-4c7b-4254-9d65-c61b6883833a\",\"version\":\"3.0.0\",\"subs\":{\"#test_user\":{\"recoverable\":true,\"epoch\":\"StoH\",\"positioned\":true},\"abc\":{\"recoverable\":true,\"epoch\":\"nNgd\",\"positioned\":true},\"expires\":true,\"ttl\":604653}}\n```\n```\n\n----------------------------------------\n\nTITLE: Counting Recent iOS Push Notifications in ClickHouse (SQL)\nDESCRIPTION: Returns the total number of push notifications delivered to iOS devices in the last 24 hours by querying the 'notifications' table and filtering on the 'platform' column. Facilitates tracking of notification delivery for platform-specific analytics or debugging.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*)\nFROM centrifugo.notifications\nWHERE (time > (now() - toIntervalHour(24))) AND (platform = 'ios')\n\n‚îå‚îÄcount()‚îÄ‚îê\n‚îÇ   31200 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Limit Exceeded (106)\nDESCRIPTION: Indicates that a certain server-defined limit has been exceeded by the client's request. More specific details might be available in the server logs. For rate limiting, the more specific 'Too Many Requests' (111) error might be used.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    106\nMessage: \"limit exceeded\"\n```\n\n----------------------------------------\n\nTITLE: Skipping User Check in Subscription Tokens During Migration\nDESCRIPTION: Add the `\"skip_user_check_in_subscription_token\": true` option to the Centrifugo v4 configuration (likely in JSON format). This temporarily disables the v4 requirement that the `sub` claim in the subscription token must match the connection's authenticated user ID, facilitating a smoother migration from v3.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/migration-v4.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"skip_user_check_in_subscription_token\": true\n```\n\n----------------------------------------\n\nTITLE: Implementing Room List ViewSet in DRF\nDESCRIPTION: This Python snippet defines a DRF viewset `RoomListViewSet` inheriting from `ListModelMixin` and `GenericViewSet` to list rooms. It uses `RoomSerializer` and requires authentication. The `get_queryset` method filters rooms to show only those the requesting user is a member of, annotates each room with its member count, prefetches related `last_message` and `last_message.user` data for efficiency, and orders the rooms by the user's join time descending.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass RoomListViewSet(ListModelMixin, GenericViewSet):\n    serializer_class = RoomSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        return Room.objects.annotate(\n            member_count=Count('memberships')\n        ).filter(\n            memberships__user_id=self.request.user.pk\n        ).prefetch_related('last_message', 'last_message__user').order_by('-memberships__joined_at')\n```\n\n----------------------------------------\n\nTITLE: Proxying HTTP Headers in Centrifugo Configuration - JSON\nDESCRIPTION: This snippet shows how to specify which HTTP headers should be proxied to Centrifugo in v3 by listing them under the \"proxy_http_headers\" field in config.json. This configuration mimics the behavior from v2, ensuring headers such as \"Origin\", \"User-Agent\", and others are forwarded by the proxy. To fully replicate old behavior, additionally extend this array with any custom values previously configured under \"proxy_extra_http_headers\" (now deprecated).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/migration-v3.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"proxy_http_headers\": [\n        \"Origin\",\n        \"User-Agent\",\n        \"Cookie\",\n        \"Authorization\",\n        \"X-Real-Ip\",\n        \"X-Forwarded-For\",\n        \"X-Request-Id\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo to use Redis Engine (JSON)\nDESCRIPTION: Sets the `engine` option in the Centrifugo `config.json` file to `\"redis\"`. This enables the use of Redis for PUB/SUB, presence, and history data, which is necessary for scaling Centrifugo across multiple nodes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"engine\": \"redis\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Connecting to Multiple Redis Sentinel Addresses - JSON\nDESCRIPTION: Shows Centrifugo config for specifying multiple Sentinel addresses using the 'addr' query parameter in the Redis connection string. Requires Redis Sentinels at listed hosts/ports and the given 'sentinel_master_name'. Input: address with multiple addrs. Output: Enhanced Sentinel HA with failover across several Sentinels. Limitation: all addresses must be reachable and valid Sentinels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"redis+sentinel://localhost:26379?sentinel_master_name=mymaster&addr=localhost:26380\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Room Search ViewSet in Django Rest Framework\nDESCRIPTION: This ViewSet handles room search functionality, annotating rooms with user membership information and ordering results by name.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass RoomSearchViewSet(viewsets.ModelViewSet):\n    serializer_class = RoomSearchSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        user = self.request.user\n        user_membership = RoomMember.objects.filter(\n            room=OuterRef('pk'),\n            user=user\n        )\n        return Room.objects.annotate(\n            is_member=Exists(user_membership)\n        ).order_by('name')\n```\n\n----------------------------------------\n\nTITLE: Counting Throttled Publish Operations in ClickHouse SQL\nDESCRIPTION: SQL query to count the total number of 'publish' operations recorded in the `centrifugo.operations_distributed` table that were throttled by Centrifugo, indicated by error code 111 ('Too many requests'). Includes example output showing the total count.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*)\nFROM centrifugo.operations_distributed\nWHERE (error = 111) AND (op = 'publish');\n\n‚îå‚îÄcount()‚îÄ‚îê\n‚îÇ    4502 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Connecting to ClickHouse Server with Docker Client (Bash)\nDESCRIPTION: Bash command using Docker to run the `clickhouse-client` tool and connect to a running ClickHouse server container named `click`. It links the client container to the server container and specifies the server's hostname for the connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --link click:clickhouse-server --entrypoint clickhouse-client clickhouse/clickhouse-server --host clickhouse-server\n```\n\n----------------------------------------\n\nTITLE: Importing ConfigConverter Component in MDX/React\nDESCRIPTION: Imports the `ConfigConverter` React component, likely within an MDX file for a documentation site (e.g., Docusaurus). The `@site` alias typically resolves to the source directory, allowing structured component imports.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/migration-v3.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigConverter from \"@site/src/components/converter\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Centrifugo Admin Web UI via JSON Configuration\nDESCRIPTION: This snippet demonstrates how to enable the Centrifugo admin web UI by setting the \"admin\" property to true in the \"config.json\" file, alongside mandatory security settings: \"admin_password\" and \"admin_secret\". This configuration ensures that only authenticated users can access the admin web interface. Required dependencies include a properly installed Centrifugo server and access to the configuration file. Inputs: boolean for admin flag; string values for password and secret. All fields must be strong and kept secret. Outputs: Admin UI becomes accessible at the default server URL after service restart.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/admin_web.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    ...\\n    \"admin\": true,\\n    \"admin_password\": \"<PASSWORD>\",\\n    \"admin_secret\": \"<SECRET>\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Not Available Disconnect Code\nDESCRIPTION: Disconnect code issued when ErrorNotAvailable does not fit message type, specifically when client sends asynchronous message without MessageHandler set on server side.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_35\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3508\nReason: \"not available\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Middleware in Go\nDESCRIPTION: Creates an HTTP middleware function that adds user credentials to the request context\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc auth(h http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tcred := &centrifuge.Credentials{\n\t\t\tUserID: \"42\",\n\t\t}\n\t\tnewCtx := centrifuge.SetCredentials(r.Context(), cred)\n\t\tr = r.WithContext(newCtx)\n\t\th.ServeHTTP(w, r)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Example Publication Push Frame (JSON)\nDESCRIPTION: Shows the JSON structure of a `pub` push message received over a unidirectional connection. It indicates the target `channel`, the actual published `data` (as a JSON object), and the stream `offset` for recovery purposes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\":\"test\",\n  \"pub\": {\n    \"data\":{\"input\":1},\n    \"offset\":1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Boolean Environment Variable in Bash\nDESCRIPTION: Demonstrates how to set a boolean configuration option (`prometheus` in this case) for Centrifugo using an environment variable. According to Go's `ParseBool`, values like \"1\" or \"true\" enable the option, while \"0\" or \"false\" disable it.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport CENTRIFUGO_PROMETHEUS=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Worker Connections for Centrifugo\nDESCRIPTION: This Nginx configuration snippet increases the worker_connections to handle a large number of concurrent connections, which is important for Centrifugo's real-time messaging capabilities.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/load_balancing.md#2025-04-23_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nevents {\n    worker_connections 65535;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Bidirectional SockJS Endpoint URL (Disabled)\nDESCRIPTION: This URL path is the default endpoint for SockJS connections, providing bidirectional communication capabilities. It is disabled by default and requires configuration to be activated.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:8000/connection/sockjs\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis CLI for Testing\nDESCRIPTION: Docker command to execute Redis CLI in the running Redis container to interact with the Redis server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-08-19-asynchronous-message-streaming-to-centrifugo-with-benthos.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it redis redis-cli\n```\n\n----------------------------------------\n\nTITLE: Publishing API Command Message to Kafka Topic Using JSON\nDESCRIPTION: This JSON object represents a Centrifugo API command that should be published directly to a Kafka topic. The message includes a 'method' and a 'payload' matching the Centrifugo server API definition. Intended to be consumed asynchronously and reliably by a Centrifugo Kafka consumer instance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/consumers.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"publish\",\n  \"payload\": {\n    \"channel\": \"mychannel\",\n    \"data\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batching Client Commands in Line-Delimited JSON (Centrifugo)\nDESCRIPTION: Shows how multiple client commands (two `subscribe` commands in this case) can be batched together in a single request using the line-delimited JSON format. Each command is a separate JSON object on its own line, terminated by a newline character (`\\n`), allowing for efficient transmission by reducing system calls.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_protocol.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"subscribe\": {\"channel\": \"ch1\"}}\n{\"id\": 2, \"subscribe\": {\"channel\": \"ch2\"}}\n```\n\n----------------------------------------\n\nTITLE: Reusing Redis Engine Configuration for Active Status - JSON\nDESCRIPTION: Demonstrates how to configure Centrifugo to reuse its internal Redis engine for user active status tracking. Enabling 'use_redis_from_engine' in 'redis_active_status' simplifies setup if Redis is already configured for your messaging engine, allowing active status and message engine to share the same connection. This is especially useful for unified deployment environments.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_status.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_address\": \"localhost:6379\",\n    \"redis_active_status\": {\n        \"enabled\": true,\n        \"use_redis_from_engine\": true,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscribe Proxy in Centrifugal\nDESCRIPTION: Basic configuration of subscribe proxy in the config.json file. This sets up the endpoint that will handle subscription permission checks.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"channel\": {\n    \"proxy\": {\n      \"subscribe\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/subscribe\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connections API Response Example\nDESCRIPTION: Example JSON response from the connections API showing two active connections for user ID 42, including transport type and protocol information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/connections.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"connections\": {\n            \"db8bc772-2654-4283-851a-f29b888ace74\": {\n                \"app_name\": \"terminal\",\n                \"transport\": \"uni_http_stream\",\n                \"protocol\": \"json\"\n            },\n            \"4bc3ca70-ecc5-439d-af14-a78ae18e31c7\": {\n                \"app_name\": \"terminal\",\n                \"transport\": \"uni_http_stream\",\n                \"protocol\": \"json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Channel Capability Matching - Centrifugo PRO - JSON\nDESCRIPTION: This snippet configures connection capabilities for all channels matching the 'news:*' pattern using wildcard matching. The 'match' key specifies the type of channel resource matching ('wildcard'), and 'allow' defines capabilities for all matching channels. This is used in JWT payloads or connect proxy results to manage groups of channels dynamically.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/capabilities.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news:*\"],\n            \"match\": \"wildcard\",\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Kafka Topics from Dockerized Kafka (Bash)\nDESCRIPTION: This Bash command lists all Kafka topics currently available in the Kafka broker managed by Docker Compose. It is executed from the project root and assumes that the Docker Compose service for Kafka is named 'kafka'. Requires the kafka-topics CLI to be available within the Kafka container. No input parameters; returns the topic names.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/tips_and_tricks.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec kafka kafka-topics --bootstrap-server kafka:9092 --list\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Configuration\nDESCRIPTION: JSON configuration for Centrifugo server including proxy subscription stream settings and namespace configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-03-18-stream-loki-logs-to-browser-with-websocket-to-grpc-subscriptions.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"client_insecure\": true,\n    \"allowed_origins\": [\"http://localhost:9000\"],\n    \"proxy_subscribe_stream_endpoint\": \"grpc://backend:12000\",\n    \"proxy_subscribe_stream_timeout\": \"3s\",\n    \"namespaces\": [\n      {\n          \"name\": \"logs\",\n          \"proxy_subscribe_stream\": true\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DisconnectPermissionDenied Code and Reason in Centrifugal\nDESCRIPTION: Details the disconnection code `3507` with reason `\"permission denied\"`. This code is issued when a client attempts an action or connection without the necessary permissions required by the Centrifugal server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_34\n\nLANGUAGE: text\nCODE:\n```\nCode:   3507\nReason: \"permission denied\"\n```\n\n----------------------------------------\n\nTITLE: Channel Limit Disconnect Code\nDESCRIPTION: Disconnect code issued when a client connection exceeds the configured channel limit.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3505\nReason: \"channel limit\"\n```\n\n----------------------------------------\n\nTITLE: Clearing Chat State with a Reducer Action in React (JavaScript)\nDESCRIPTION: This reducer action handles resetting the chat state to its initial shape. When the CLEAR_CHAT_STATE action type is dispatched, the reducer simply returns the initialChatState object, effectively removing all room and message data. This is typically called when a user logs out or when a complete state reset is required. It assumes initialChatState is available in scope.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reducer(state: any, action: any) {\n  switch (action.type) {\n    case 'CLEAR_CHAT_STATE': {\n      return initialChatState;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Consumers Array in Centrifugo Config Using JSON\nDESCRIPTION: This JSON snippet configures the 'consumers' array in Centrifugo's 'config.json' to enable asynchronous consumers for PostgreSQL and Kafka. Each consumer has settings like 'enabled', 'name', 'type', and technology-specific sections. Required parameters include consumer names/types and database or Kafka connection info. Outputs are enabled consumers that process server API commands from the declared sources.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/consumers.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"consumers\": [\n    {\n      \"enabled\": true,\n      \"name\": \"xxx\",\n      \"type\": \"postgresql\",\n      \"postgresql\": {...}\n    },\n    {\n      \"enabled\": true,\n      \"name\": \"yyy\",\n      \"type\": \"kafka\",\n      \"kafka\": {...}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Terminal Disconnect Code 3502 (Stale)\nDESCRIPTION: Defines the terminal client disconnect code 3502, indicating a \"stale\" connection. This code is issued to close a connection that failed to authenticate within the server's configured time limit after initially connecting. Clients receiving this code should not automatically reconnect without addressing potential authentication delays.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3502\nReason: \"stale\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Engine Interface Combining Broker and PresenceManager in Centrifuge (Go)\nDESCRIPTION: This snippet defines the `Engine` interface in Go by embedding the `Broker` and `PresenceManager` interfaces. An `Engine` represents the core component responsible for both message brokering (PUB/SUB, history) and presence management within a Centrifuge node. Concrete implementations like `MemoryEngine` (for single-node setups) or `RedisEngine` (for scalable, multi-node deployments) provide the actual logic satisfying both embedded interface contracts. This composition abstracts the underlying storage and communication mechanisms for scalability.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype Engine interface {\n\tBroker\n\tPresenceManager\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 104 (Method Not Found)\nDESCRIPTION: Defines the 'Method Not Found' error code (104) returned when the method specified in a client command (e.g., RPC call) does not exist or is not recognized by the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nCode:    104\nMessage: \"method not found\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Write Buffer Size in Centrifugo (JSON)\nDESCRIPTION: Shows how to set the 'write_buffer_size' for WebSocket transport in the JSON configuration for Centrifugo. No external dependencies are needed beyond Centrifugo and its config file. Adjusting this parameter can help tune server memory usage for outgoing WebSocket payloads. Input is an integer number of bytes; output is a customized write buffer allocation per connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/websocket.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    ...\n    \"websocket\": {\n        \"write_buffer_size\": 512\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Benthos Configuration File\nDESCRIPTION: Command to create a default Benthos configuration file that will be customized for Centrifugo integration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-08-19-asynchronous-message-streaming-to-centrifugo-with-benthos.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbenthos create > config.yaml\n```\n\n----------------------------------------\n\nTITLE: Publishing Message to Personal Channel via HTTP API (Bash)\nDESCRIPTION: This Bash snippet demonstrates publishing a message to a specific user's personal channel (e.g., #user12) by POSTing to the /api/publish endpoint with the channel and data as JSON, plus an API key in the Authorization header. Dependency: Centrifugo API key/permission setup required. Input: Channel name, data payload. Output: API's JSON response (not shown). Limitation: Requires correct API key and running server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_http_stream.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/api/publish \\\n    -d '{\"channel\": \"#user12\", \"data\": {\"input\": \"hello\"}}' \\\n    -H \"Authorization: apikey 9230f514-34d2-4971-ace2-851c656e81dc\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Django Project Environment\nDESCRIPTION: Creating virtual environment and installing Django\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\n./env/bin/activate\npython -m pip install Django\npython -m django --version\ndjango-admin startproject app\nmv app backend\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 108 (Not Available)\nDESCRIPTION: Defines the 'Not Available' error code (108) indicating that a requested resource or feature (like history or presence) is not enabled or configured for the target channel on the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nCode:    108\nMessage: \"not available\"\n```\n\n----------------------------------------\n\nTITLE: Subscribe Proxy Configuration\nDESCRIPTION: JSON configuration for setting up subscribe proxy functionality in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"proxy_subscribe_endpoint\": \"http://localhost:9000/centrifugo/subscribe\",\n    \"namespaces\": [\n        {\n            \"name\": \"personal\",\n            \"presence\": true,\n            \"proxy_subscribe\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking PreparedMessage Performance in Go\nDESCRIPTION: Presents benchmark results comparing WebSocket message broadcasting with compression enabled, contrasting the standard write method (`Compression_*`) with the `PreparedMessage` approach (`CompressionPrepared_*`). The results clearly show significant reductions in execution time (ns/op), memory allocation per operation (B/op), and the number of allocations per operation (allocs/op) when `PreparedMessage` is used. The benefits become increasingly pronounced as the number of concurrent connections grows (100, 1000, 10000), highlighting its efficiency for large-scale broadcasts.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-08-19-optimizing-websocket-compression.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n‚ùØ go test -run xxx -bench BenchmarkBroadcast -benchmem\n\nCompression_100_conn-8             198619 ns/op\\t   14113 B/op\\t    301 allocs/op\nCompressionPrepared_100_conn-8      42643 ns/op\\t   12320 B/op\\t     19 allocs/op\n\nCompression_1000_conn-8           1797432 ns/op\\t  123864 B/op\\t   3001 allocs/op\nCompressionPrepared_1000_conn-8    649506 ns/op\\t   11421 B/op\\t     19 allocs/op\n\nCompression_10000_conn-8         16506132 ns/op\\t 1040709 B/op\\t  30007 allocs/op\nCompressionPrepared_10000_conn-8  7702265 ns/op\\t   11631 B/op\\t     21 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Token with User Information in Python and Node.js\nDESCRIPTION: Examples showing how to include additional user information in JWT tokens for Centrifugo in both Python and Node.js. This demonstrates adding a user's name to the token's info field.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/authentication.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\n\nclaims = {\"sub\": \"42\", \"info\": {\"name\": \"Alexander Emelin\"}}\ntoken = jwt.encode(claims, \"secret\", algorithm=\"HS256\").decode()\nprint(token)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar jwt = require('jsonwebtoken');\n\nvar token = jwt.sign({ sub: '42', info: {\"name\": \"Alexander Emelin\"} }, 'secret');\n\nconsole.log(token);\n```\n\n----------------------------------------\n\nTITLE: Connection Capabilities with Multiple Match Types\nDESCRIPTION: Combining different types of channel matching (regex and exact matching) in a single capabilities configuration to provide varying levels of access.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/capabilities.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"^posts_[\\\\d]+$\"],\n            \"match\": \"regex\",\n            \"allow\": [\"sub\"]\n        }\n        {\n            \"channels\": [\"user_42\"],\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User, Last Message, and Room Serializers in DRF\nDESCRIPTION: This Python snippet defines three DRF serializers: `UserSerializer` (for basic user info), `LastMessageSerializer` (for message details including the user), and `RoomSerializer` (for room details including member count and the last message). `RoomSerializer` uses a `SerializerMethodField` to calculate `member_count` and nests `LastMessageSerializer` for the `last_message` field. These are used for representing room data in lists.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username']\n\n\nclass LastMessageSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n\n    class Meta:\n        model = Message\n        fields = ['id', 'content', 'user', 'created_at']\n\nclass RoomSerializer(serializers.ModelSerializer):\n    member_count = serializers.SerializerMethodField()\n    last_message = LastMessageSerializer(read_only=True)\n\n    def get_member_count(self, obj):\n        return obj.member_count\n\n    class Meta:\n        model = Room\n        fields = ['id', 'name', 'version', 'member_count', 'last_message']\n```\n\n----------------------------------------\n\nTITLE: Using a Cache for PreparedMessage in WebSocket Writes (Go)\nDESCRIPTION: Illustrates the runtime usage of the `PreparedMessage` cache (`t.preparedCache`) within the Centrifuge WebSocket transport layer. When `usePreparedMessage` is true, the code first attempts to retrieve a pre-existing `PreparedMessage` from the cache using the message data (`data`, converted to a string `key`) via `t.preparedCache.Get(key)`. If a cached entry (`preparedMessage`) is found (`ok` is true), it's directly used with `t.conn.WritePreparedMessage`. If not found, a new `PreparedMessage` is created using `websocket.NewPreparedMessage`, stored in the cache via `t.preparedCache.Set(key, preparedMessage)`, and then written to the connection. This pattern maximizes reuse of prepared messages during concurrent broadcasts, reducing computational overhead.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-08-19-optimizing-websocket-compression.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n...\nif usePreparedMessage {\n    key := convert.BytesToString(data)\n    preparedMessage, ok := t.preparedCache.Get(key)\n    if !ok {\n        var err error\n        preparedMessage, err = websocket.NewPreparedMessage(messageType, data)\n        if err != nil {\n            return err\n        }\n        t.preparedCache.Set(key, preparedMessage)\n    }\n    err := t.conn.WritePreparedMessage(preparedMessage)\n    if err != nil {\n        return err\n    }\n} else {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Client Indication Key-Value Data from QUIC Stream in Go\nDESCRIPTION: Implements reading and parsing the client indication binary format from a QUIC receive stream. Uses binary.Read to decode 16-bit integer keys and value lengths, then reads value bytes, mapping to the corresponding fields in ClientIndication. Requires the io and encoding/binary packages, and enforces the maximum length constraint for the indication stream. Expects inputs to match the defined format; returns error for abnormal cases such as unexpected EOF or short reads.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc receiveClientIndication(stream quic.ReceiveStream) (ClientIndication, error) {\n\tvar clientIndication ClientIndication\n\n    // read no more than maxClientIndicationLength bytes.\n\treader := io.LimitReader(stream, maxClientIndicationLength)\n\n\tdone := false\n\n\tfor {\n\t\tif done {\n\t\t\tbreak\n\t\t}\n\t\tvar key int16\n\t\terr := binary.Read(reader, binary.BigEndian, &key)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tdone = true\n\t\t\t} else {\n\t\t\t\treturn clientIndication, err\n\t\t\t}\n\t\t}\n\t\tvar valueLength int16\n\t\terr = binary.Read(reader, binary.BigEndian, &valueLength)\n\t\tif err != nil {\n\t\t\treturn clientIndication, err\n\t\t}\n\t\tbuf := make([]byte, valueLength)\n\t\tn, err := reader.Read(buf)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n                // still need to process indication value.\n\t\t\t\tdone = true\n\t\t\t} else {\n\t\t\t\treturn clientIndication, err\n\t\t\t}\n\t\t}\n\t\tif int16(n) != valueLength {\n\t\t\treturn clientIndication, errors.New(\"read less than expected\")\n\t\t}\n\t\tvalue := string(buf)\n\n\t\tswitch clientIndicationKey(key) {\n\t\tcase clientIndicationKeyOrigin:\n\t\t\tclientIndication.Origin = value\n\t\tcase clientIndicationKeyPath:\n\t\t\tclientIndication.Path = value\n\t\tdefault:\n\t\t\tlog.Printf(\"skip unknown client indication key: %d: %s\", key, value)\n\t\t}\n\t}\n\treturn clientIndication, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Identifying Client Presence Capability (Plaintext)\nDESCRIPTION: This identifier refers to the 'presence' capability. A client must possess this capability to request join/leave messages upon subscribing to a channel, provided the server hasn't already mandated these messages via the 'force_push_join_leave' option.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channel_permissions.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npresence\n```\n\n----------------------------------------\n\nTITLE: Defining RateLimitPolicy Object - Centrifugo - Markdown\nDESCRIPTION: This code block is a Markdown table for documenting the fields of a 'RateLimitPolicy' object in Centrifugo, describing the configuration options available for limiting the rate of push notification delivery. It emphasizes the type and the purpose of the fields in enforcing these restrictions for developers. The snippet acts as reference material rather than executable code.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n`RateLimitPolicy`:\n\n| Field         | Type  | Required | Description                         |\n|---------------|-------|----------|-------------------------------------|\n\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 102 (Unknown Channel)\nDESCRIPTION: Defines the 'Unknown Channel' error code (102) returned when a client tries to interact with a channel name that doesn't exist or isn't configured on the server, often due to an undefined namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCode:    102\nMessage: \"unknown channel\"\n```\n\n----------------------------------------\n\nTITLE: Querying Open Files Limit Shell\nDESCRIPTION: This shell snippet displays the current maximum number of open files permitted for the running user by invoking the ulimit tool with the -n flag. No dependencies are required besides standard shell access. The command returns a single integer value representing the maximum descriptors allowed, which influences the number of simultaneous connections possible by the Centrifugo server or any process.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/infra_tuning.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nulimit -n\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Non-Terminal Disconnect Code 3004 (Server Error)\nDESCRIPTION: Defines the non-terminal client disconnect code 3004, indicating an \"internal server error\". This code is issued when an unexpected error occurs on the server side. Clients receiving this code are expected to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3004\nReason: \"internal server error\"\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 109 (Token Expired)\nDESCRIPTION: Defines the client error code 109, indicating the connection \"token expired\". Centrifugo SDKs typically handle this error specifically by initiating a token refresh process.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    109\nMessage: \"token expired\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Kafka Consumer Group State (Bash)\nDESCRIPTION: This command displays the state of a specific Kafka consumer group ('centrifugo' in this example), including partition ownership, consumer lag, and offset details. Executed within the Kafka container from Docker Compose, it helps operators monitor consumer health and lag. Input: consumer group name. Output: tabular consumer group status.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/tips_and_tricks.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec kafka kafka-consumer-groups --bootstrap-server kafka:9092 --describe --group centrifugo\n```\n\n----------------------------------------\n\nTITLE: Creating First Connection with Curl\nDESCRIPTION: Curl command to establish a connection to Centrifugo using the uni_http_stream transport with the JWT token for user 42.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/connections.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/connection/uni_http_stream --data '{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0MiIsImV4cCI6MTYyNzcxMzMzNX0.s3eOhujiyBjc4u21nuHkbcWJll4Um0QqGU3PF-6Mf7Y\", \"name\": \"terminal\"}'\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Push Notifications on Logout in Frontend JavaScript/TypeScript (React)\nDESCRIPTION: This JavaScript snippet, part of a logout handler function (`onLoggedOut`), performs cleanup related to push notifications. It removes the stored device ID from local storage and calls the `removeNotificationToken` function (defined in `PushNotification.tsx`) to delete the FCM token from the Firebase service.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst onLoggedOut = async () => {\n    ...\n    localStorage.removeItem(LOCAL_STORAGE_DEVICE_ID_KEY);\n    await removeNotificationToken();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating User Token for Centrifugo\nDESCRIPTION: Command to generate a JWT token for a user in Centrifugo. This token is used for authentication when connecting to the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_http_stream.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go gentoken -u user12\n```\n\n----------------------------------------\n\nTITLE: Configuring Root URL Patterns for Django Project\nDESCRIPTION: Django root URL configuration, including the chat app URLs and admin URLs in the project's urlpatterns.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf.urls import include\nfrom django.urls import path\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('chat/', include('chat.urls')),\n    path('admin/', admin.site.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User by User ID Using Centrifugo API - JSON\nDESCRIPTION: This JSON object demonstrates the 'disconnect' API call for Centrifugo, which forcibly disconnects a user based on their user ID. The 'method' is 'disconnect', and 'params' must include the user's ID. Use this as the JSON body for HTTP POST requests to disconnect users via the API.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"disconnect\",\n    \"params\": {\n        \"user\": \"USER ID\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Persistence for User Blocking in Centrifugo PRO\nDESCRIPTION: JSON configuration for using PostgreSQL as the persistence engine for user blocking data in Centrifugo PRO. This setup enables storing blocking information in a PostgreSQL database.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_block.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"user_block\": {\n        \"persistence_engine\": \"database\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT for User Authentication\nDESCRIPTION: Command to generate a JSON Web Token (JWT) for authenticating a user with ID 123722 to Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo gentoken -u 123722\n```\n\n----------------------------------------\n\nTITLE: Enabling Subscribe Proxy for Channels Without Namespace\nDESCRIPTION: Configuration to enable subscribe proxy for channels without a specific namespace. This allows subscription permission checking for all non-namespaced channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"channel\": {\n    \"proxy\": {\n      \"subscribe\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/subscribe\"\n      }\n    },\n    \"without_namespace\": {\n      \"subscribe_proxy_enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Personal Channel Subscription and Single Connection - JSON\nDESCRIPTION: Provides a JSON configuration example for Centrifugo to enable automatic personal channel subscriptions and restrict users to a single connection. Key parameters are user_subscribe_to_personal (enables user channel subscription), user_personal_single_connection (enforces single connection per user), and user_personal_channel_namespace (specifies a custom namespace for personal channels). Also ensures presence tracking is enabled in the personal namespace. Requires Centrifugo server; no direct code inputs, but these options affect server behavior.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_subs.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"user_subscribe_to_personal\": true,\n  \"user_personal_single_connection\": true,\n  \"user_personal_channel_namespace\": \"personal\",\n  \"namespaces\": [\n    {\n      \"name\": \"personal\",\n      \"presence\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo User Token with Custom TTL Using Bash CLI\nDESCRIPTION: Produces a JWT for user '28282' valid for 3600 seconds (1 hour) using provided config, with '-t' flag adjusting token TTL. Prerequisite is a valid 'config.json' and Centrifugo installed. Exits with error if the operation fails; handy for temporary token testing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/console_commands.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gentoken -c config.json -u 28282 -t 3600\n```\n\n----------------------------------------\n\nTITLE: Checking Size of flate.Writer in Go\nDESCRIPTION: Demonstrates how to check the size of a flate.Writer object in Go, highlighting the significant memory footprint of this type.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-08-19-optimizing-websocket-compression.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"unsafe\"\nimport \"compress/flate\"\n\nfunc main() {\n    var w flate.Writer\n    println(unsafe.Sizeof(w))\n    // Output: 656640\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Chat State Structure\nDESCRIPTION: Defines the initial state structure for the chat application with arrays and objects for rooms and messages management.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialChatState = {\n  rooms: [],\n  roomsById: {},\n  messagesByRoomId: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Configuration File\nDESCRIPTION: Command to generate a basic Centrifugo configuration file which is needed before generating tokens.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/connections.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Getting Certificate Fingerprint\nDESCRIPTION: Command to extract the SHA-256 fingerprint from the generated certificate for Chrome configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in server.crt -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\n```\n\n----------------------------------------\n\nTITLE: Creating a React App with Vite for Keycloak Integration\nDESCRIPTION: Commands to set up a new React application using Vite and install necessary dependencies including Keycloak, React-Keycloak integration, and Centrifuge client library.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-03-31-keycloak-sso-centrifugo.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest keycloak_sso_auth -- --template react\ncd keycloak_sso_auth\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building AI Context\nDESCRIPTION: Command to build AI context from multiple source directories including FAQ, configuration, and SDK source code.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-context -- ./docs/faq \"Centrifugo FAQ\" ../centrifugo/config.default.json \"Centrifugo default JSON configuration\" ../centrifuge-js/src \"centrifuge-js SDK source code (Javascript)\" ../centrifuge-dart/lib \"centrifuge-dart SDK source code (Dart)\"\n```\n\n----------------------------------------\n\nTITLE: Fetching History Since Specific Position using Centrifugo History API\nDESCRIPTION: Demonstrates retrieving up to 10 publications chronologically (oldest first) from a specific point in the stream, identified by `offset` and `epoch` provided in the `since` parameter. This allows paginating forward through the history.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/history_and_recovery.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: {offset: 0, epoch: \"epoch\"}, reverse: false)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Docker Compose Configuration\nDESCRIPTION: Docker compose setup for PostgreSQL database\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  db:\n    image: postgres:15\n    volumes:\n      - ./postgres_data:/var/lib/postgresql/data/\n    healthcheck:\n      test: [ \"CMD\", \"pg_isready\", \"-U\", \"grandchat\" ]\n      interval: 1s\n      timeout: 5s\n      retries: 10\n    environment:\n      - POSTGRES_USER=grandchat\n      - POSTGRES_PASSWORD=grandchat\n      - POSTGRES_DB=grandchat\n    expose:\n      - 5432\n    ports:\n      - 5432:5432\n```\n\n----------------------------------------\n\nTITLE: Enabling Swagger UI in Centrifugo Config (JSON)\nDESCRIPTION: This JSON configuration snippet illustrates how to enable the Swagger UI for Centrifugo's server HTTP API. Setting `enabled` to `true` within the `swagger` object makes the interactive API documentation UI available at the `/swagger` path.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"swagger\": {\n    \"enabled\": true\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Subscribe Proxy (JSON)\nDESCRIPTION: Illustrates configuring the subscribe proxy in `config.json` to use a GRPC backend for channels without specific namespaces. Sets the GRPC endpoint, timeout, and enables the global subscribe proxy.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_subscribe_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_subscribe_timeout\":  \"1s\",\n  \"proxy_subscribe\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Logout View in Django\nDESCRIPTION: This Python snippet defines a Django view function `logout_view` responsible for logging out an authenticated user. It uses the `@require_POST` decorator to ensure only POST requests are accepted. It checks if the user is authenticated; if not, it returns a 403 Forbidden response. Otherwise, it calls Django's built-in `logout` function and returns an empty JSON response indicating success.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom django.contrib.auth import logout\nfrom django.http import JsonResponse\nfrom django.views.decorators.http import require_POST\n\n\n@require_POST\ndef logout_view(request):\n    if not request.user.is_authenticated:\n        return JsonResponse({'detail': 'must be authenticated'}, status=403)\n\n    logout(request)\n    return JsonResponse({})\n```\n\n----------------------------------------\n\nTITLE: Removing Centrifugo Unlimited History Option in v4\nDESCRIPTION: The configuration option `use_unlimited_history_by_default` has been removed in Centrifugo v4. This option was part of the v2 to v3 migration process and is no longer necessary or supported. Remove it from your configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/migration-v4.md#2025-04-23_snippet_6\n\nLANGUAGE: configuration\nCODE:\n```\nuse_unlimited_history_by_default\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo from PATH (Bash)\nDESCRIPTION: Starts the Centrifugo server using the specified `config.json`. This command assumes the `centrifugo` executable has been placed or symlinked into a directory included in the system's PATH environment variable, allowing it to be run from any location.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Centifugo v5 Full Config Example - YAML\nDESCRIPTION: Provides a Centrifugo v5 YAML configuration example showing various options such as port, secrets, API key, allowed origins, and presence settings, all at the top level. This format is compatible with Centrifugo v5, and must be provided in YAML syntax. Inputs are configuration parameters, and outputs are server behaviors determined by these values. Some fields require sensitive values like secrets.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nport: 8000\ntoken_hmac_secret_key: XXX\nadmin_password: XXX\nadmin_secret: XXX\napi_key: XXX\nallowed_origins:\n- http://localhost:3000\npresence: true\nnamespaces:\n- name: ns\n  presence: true\n```\n\n----------------------------------------\n\nTITLE: Receiving an Asynchronous Join Message in JSON\nDESCRIPTION: This JSON object represents an asynchronous 'Join' message sent by the server when a client subscribes to a channel. It's identified by 'type': 1 within the 'result'. The 'data' contains information ('info') about the client that joined. Requires the 'join_leave' option to be enabled on the server for the channel namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"type\":1,\n        \"channel\":\"ch1\",\n        \"data\":{\n            \"info\":{\n                \"user\":\"2694\",\n                \"client\":\"5c48510e-cf49-4fa8-a9b2-490b22231e74\",\n                \"conn_info\":{\"name\":\"Alexander\"},\n                \"chan_info\":{}\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Unidirectional HTTP Stream with CURL (Bash)\nDESCRIPTION: This example connects to the Centrifugo uni_http_stream endpoint using CURL. It issues a POST request to /connection/uni_http_stream with a JSON body containing a valid JWT token. Dependency: Running Centrifugo server with HTTP stream enabled. Inputs: Host URL, JWT token. Output: Raw streaming response (messages/pings) printed to terminal. Limitation: Message parsing is not performed; all output is as received.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_http_stream.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/connection/uni_http_stream \\\n    -d '{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIiLCJleHAiOjE2MjUwNzMyODh9.BxmS4R-X6YXMxLfXNhYRzeHvtu_M2NCaXF6HNu7VnDM\"}'\n```\n\n----------------------------------------\n\nTITLE: Fetching History Since Position Reversed using History API\nDESCRIPTION: Shows how to retrieve up to 10 publications that occurred *before* a specific known stream position (`since: {offset: 11, epoch: \\\"epoch\\\"}`), fetching them in reverse order (newest to oldest) relative to the `since` position. The provided epoch must match.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/history_and_recovery.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: 10, since: {offset: 11, epoch: \"epoch\"}, reverse: true)\n```\n\n----------------------------------------\n\nTITLE: Implementing SET_ROOM_MEMBER_COUNT Action in Redux for Chat Application\nDESCRIPTION: This action updates the member count and version of a specific room. It checks if the room exists and if the new version is greater than the current one before applying the update.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncase 'SET_ROOM_MEMBER_COUNT': {\n  const { roomId, version, memberCount } = action.payload;\n\n  // Check if the roomId exists in roomsById.\n  if (!state.roomsById[roomId]) {\n    console.error(`Room with ID ${roomId} not found.`);\n    return state;\n  }\n\n  // Check if the version in the event is greater than the version in the room object.\n  if (version <= state.roomsById[roomId].version) {\n    console.error(`Outdated version for room ID ${roomId}.`);\n    return state;\n  }\n\n  // Update the member_count and version of the specified room.\n  const updatedRoom = {\n    ...state.roomsById[roomId],\n    member_count: memberCount,\n    version: version,\n  };\n\n  // Return the new state with the updated roomsById.\n  return {\n    ...state,\n    roomsById: {\n      ...state.roomsById,\n      [roomId]: updatedRoom,\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Terminal): Channel Limit (3505)\nDESCRIPTION: The client is disconnected because it has exceeded the maximum number of channels it is allowed to subscribe to, according to server configuration. Reconnection should not be attempted without reducing channel subscriptions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3505\nReason: \"channel limit\"\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Limited Channel Configuration\nDESCRIPTION: JSON configuration extending namespace settings to allow user-limited channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"namespaces\": [\n        {\n            \"name\": \"personal\",\n            \"presence\": true,\n            \"allow_user_limited_channels\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with GRPC API enabled (Bash)\nDESCRIPTION: Starts the Centrifugo server with the GRPC API enabled by setting the CENTRIFUGO_GRPC_API environment variable and running the server with a specified config file. Requires Centrifugo installed and a valid config.json file. This is the first step before running GRPC clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_GRPC_API=1 centrifugo --config config.json\n```\n\n----------------------------------------\n\nTITLE: Server-Side Subscription Options Example\nDESCRIPTION: Example of using the subs claim in JWT to configure server-side subscriptions with custom data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/authentication.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subs\": {\n    \"channel1\": {\n      \"data\": {\"welcome\": \"welcome to channel1\"}\n    },\n    \"channel2\": {\n      \"data\": {\"welcome\": \"welcome to channel2\"}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating User Connection Token with Centrifugo using Bash\nDESCRIPTION: Runs `centrifugo gentoken` to generate an HMAC SHA-256 based connection token for the user specified by the `-u` flag (ID `28282`), using settings from the configuration file specified by `-c` (`config.json`). By default, the token expires in 1 week. Useful for development. Exits with code 1 on error.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/console_commands.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gentoken -c config.json -u 28282\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS Auto-Cert with Let's Encrypt in Centrifugo (JSON) - JSON\nDESCRIPTION: This configuration enables Let's Encrypt ACME-based TLS certificate auto-provisioning for Centrifugo's HTTP server using the 'tls_autocert' section. Required fields include 'enabled', 'host_whitelist', and optionally 'cache_dir', 'email', 'http', and 'http_addr'. The input must be a valid JSON object under 'http_server'. Proper email and domain setup are prerequisites for successful certificate issuance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"http_server\": {\n    \"tls_autocert\": {\n      \"enabled\": true,\n      \"host_whitelist\": \"www.example.com\",\n      \"cache_dir\": \"/tmp/certs\",\n      \"email\": \"user@example.com\",\n      \"http\": true,\n      \"http_addr\": \":80\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ClickHouse Analytics for Centrifugo - JSON Configuration\nDESCRIPTION: This JSON snippet sets up Centrifugo to use a single ClickHouse instance for analytics by providing a local DSN and leaving the cluster name blank. Key fields include 'clickhouse_dsn' for connection, 'clickhouse_database' for target database, and flags to enable export of connections, operations, and specified HTTP headers. Input is a config.json file; output is Centrifugo‚Äôs proper behavior on startup. No dependencies outside Centrifugo‚Äôs analytics module.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/analytics.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    ...\n    \"clickhouse_analytics\": {\n        \"enabled\": true,\n        \"clickhouse_dsn\": [\n            \"tcp://127.0.0.1:9000\"\n        ],\n        \"clickhouse_database\": \"centrifugo\",\n        \"clickhouse_cluster\": \"\",\n        \"export_connections\": true,\n        \"export_operations\": true,\n        \"export_http_headers\": [\n            \"Origin\",\n            \"User-Agent\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic TLS with Let's Encrypt in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration enables Centrifugo's automatic TLS certificate handling via the ACME protocol (specifically Let's Encrypt). It requires setting `tls_autocert` to `true` and configuring parameters like the domain whitelist (`tls_autocert_host_whitelist`), certificate cache directory (`tls_autocert_cache_dir`), contact email (`tls_autocert_email`), and settings for the ACME HTTP-01 challenge (`tls_autocert_http`, `tls_autocert_http_addr`). Centrifugo will automatically obtain and renew certificates for the specified domains.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/tls.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"tls_autocert\": true,\n  \"tls_autocert_host_whitelist\": \"www.example.com\",\n  \"tls_autocert_cache_dir\": \"/tmp/certs\",\n  \"tls_autocert_email\": \"user@example.com\",\n  \"tls_autocert_http\": true,\n  \"tls_autocert_http_addr\": \":80\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Frontend Service Configuration\nDESCRIPTION: Docker Compose configuration for the frontend service with volume mounts and environment settings\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfrontend:\n  stdin_open: true\n  build: ./frontend\n  volumes:\n    - ./frontend:/usr/src/app\n    - /usr/src/app/node_modules\n  expose:\n    - 5173\n  environment:\n    - NODE_ENV=development\n  depends_on:\n    - backend\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with Debug Logging\nDESCRIPTION: Commands to generate a Centrifugo configuration file and start the server with debug logging enabled to see incoming API requests in the logs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2023-08-19-asynchronous-message-streaming-to-centrifugo-with-benthos.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo genconfig\ncentrifugo -c config.json --log_level debug\n```\n\n----------------------------------------\n\nTITLE: Example Meta Information Structure\nDESCRIPTION: Sample JSON structure showing the expected format of meta information containing user roles.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/cel_expressions.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\"admin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Subscription JWT Token - NodeJS\nDESCRIPTION: NodeJS code for generating HMAC SHA-256 JWT tokens for channel subscription.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-07-29-101-way-to-subscribe.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst jose = require('jose')\n\n(async function main() {\n  const secret = new TextEncoder().encode('secret')\n  const alg = 'HS256'\n\n  const token = await new jose.SignJWT({ 'sub': '17', 'channel': 'personal:17' })\n    .setProtectedHeader({ alg })\n    .setExpirationTime('30m')\n    .sign(secret)\n\n  console.log(token);\n})();\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Configuration in JSON\nDESCRIPTION: Example of the BoolValue object structure used for overriding channel options in Centrifugo\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": true/false\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Dockerfile Configuration\nDESCRIPTION: Docker configuration for the frontend service using Node.js 18\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:18-slim\n\nWORKDIR /usr/src/app\n\nENV PATH /usr/src/app/node_modules/.bin:$PATH\n\n# install and cache app dependencies\nCOPY package.json .\nCOPY package-lock.json .\nRUN npm ci\n\nCMD [\"vite\", \"--host\"]\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Service in Docker Compose - YAML\nDESCRIPTION: Describes a Docker Compose service for a PostgreSQL database container. Contains settings for environment variables, volumes, ports, and service healthcheck. Intended for local development and testing with Django connected to PostgreSQL.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\\n\\nservices:\\n  db:\\n    image: postgres:15\\n    volumes:\\n      - ./postgres_data:/var/lib/postgresql/data/\\n    healthcheck:\\n      test: [ \\\"CMD\\\", \\\"pg_isready\\\", \\\"-U\\\", \\\"grandchat\\\" ]\\n      interval: 1s\\n      timeout: 5s\\n      retries: 10\\n    environment:\\n      - POSTGRES_USER=grandchat\\n      - POSTGRES_PASSWORD=grandchat\\n      - POSTGRES_DB=grandchat\\n    expose:\\n      - 5432\\n    ports:\\n      - 5432:5432\n```\n\n----------------------------------------\n\nTITLE: Handling 'disconnect' Push Messages from Centrifugal Server (JSON)\nDESCRIPTION: This JSON message is sent by the Centrifugal server immediately before closing the client connection due to an error or specific reason. It contains a 'disconnect' object with a numeric 'code' and a descriptive string 'reason' explaining the cause of the disconnection. The connection is terminated by the server after this message is sent.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_client_protocol.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disconnect\":{\n    \"code\":3004,\n    \"reason\":\"internal server error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3001 (Shutdown)\nDESCRIPTION: Defines the 'Shutdown' disconnect code (3001). This is a non-terminal code sent when the Centrifugo node is undergoing a graceful shutdown. Clients receiving this code are expected to attempt reconnection (possibly to a different node).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nCode:      3001\nReason:    \"shutdown\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from Centrifugo Connections API\nDESCRIPTION: This JSON structure represents a typical successful response from the `/api/connections` endpoint. It contains a `result` object, which includes a `connections` map. Each key in the map is a unique client ID, and the value is a `ConnectionInfo` object detailing the connection's application name, transport, and protocol. In this example, it shows two active connections for the queried user (ID 42).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/connections.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"connections\": {\n            \"db8bc772-2654-4283-851a-f29b888ace74\": {\n                \"app_name\": \"terminal\",\n                \"transport\": \"uni_http_stream\",\n                \"protocol\": \"json\"\n            },\n            \"4bc3ca70-ecc5-439d-af14-a78ae18e31c7\": {\n                \"app_name\": \"terminal\",\n                \"transport\": \"uni_http_stream\",\n                \"protocol\": \"json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Sub Refresh Proxy for a Specific Namespace (JSON)\nDESCRIPTION: Configures Centrifugal to use the defined sub refresh proxy endpoint for channels within a specific namespace (e.g., 'sun'). Enable this by setting `sub_refresh_proxy_enabled: true` in the namespace's configuration under the `namespaces` array.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"channel\": {\n    \"proxy\": {\n      \"sub_refresh\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/sub_refresh\"\n      }\n    },\n    \"namespaces\": [\n      {\n        \"name\": \"sun\",\n        \"sub_refresh_proxy_enabled\": true\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Triggering an Error when Publishing to Unknown Namespace using cURL (Bash)\nDESCRIPTION: This `curl` command demonstrates triggering an error response from the Centrifugo `publish` API. It attempts to publish data to a channel (`unknown:chat`) within a namespace (`unknown`) that is not defined in the Centrifugo configuration. This will result in an API error response, typically with HTTP status 200 OK but containing an `error` field in the JSON body.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"unknown:chat\", \"data\": {\"text\": \"hello\"}}' \\\n  http://localhost:8000/api/publish\n```\n\n----------------------------------------\n\nTITLE: Enabling Nats Broker in Centrifugo Configuration (JSON)\nDESCRIPTION: Shows the minimal `config.json` configuration required to enable a separate broker and specify its type as Nats. Set `broker.enabled` to `true` and `broker.type` to `\"nats\"`. Requires a running Nats server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"broker\": {\n    \"enabled\": true,\n    \"type\": \"nats\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling PostgreSQL-Backed Namespace Management in Centrifugo PRO (JSON)\nDESCRIPTION: This JSON configuration snippet enables the admin storage feature in Centrifugo PRO using PostgreSQL (`storage_type: \"postgresql\"`). It activates database-driven namespace management (`manage_namespaces: true`) and specifies the connection details using a standard PostgreSQL DSN format in `storage_dsn`. Requires Centrifugo PRO and a running PostgreSQL instance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/db_namespaces.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"admin_storage\": {\n        \"enabled\": true,\n        \"storage_type\": \"postgresql\",\n        \"storage_dsn\": \"host=localhost user=postgres password=mysecretpassword dbname=centrifugo port=5432 sslmode=disable\",\n        \"manage_namespaces\": true\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Presence via Centrifugo HTTP API - Bash\nDESCRIPTION: This snippet demonstrates how to use curl to request the presence information for a channel from the Centrifugo HTTP API. It sends a POST request with an API key in the header and passes the channel name as JSON data. The endpoint at http://localhost:8000/api/presence is called, and the expected output contains the clients currently present in the channel. Requires a running Centrifugo server and a valid API key. The response will list connected client and user IDs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{\"channel\": \"chat\"}' \\\n  http://localhost:8000/api/presence\n```\n\n----------------------------------------\n\nTITLE: Querying Presence Stats via REST API with Curl - Bash\nDESCRIPTION: This Bash code shows how to retrieve summarized presence statistics (number of clients and unique users for a channel) from Centrifugo using curl. The command POSTs to the '/api/presence_stats' endpoint, requiring a valid API key and channel field. The output is a JSON object with aggregate presence data. Prerequisites include curl, a running Centrifugo instance, and the appropriate API key.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/presence.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"X-API-Key: YOUR_API_KEY\" \\\n  --request POST \\\n  --data '{\"channel\": \"public:test\"}' \\\n  http://localhost:8000/api/presence_stats\n```\n\n----------------------------------------\n\nTITLE: Automatic TLS Certificate Configuration via ACME/Let\\'s Encrypt in Centrifugo (JSON)\nDESCRIPTION: This JSON snippet configures Centrifugo to automatically handle TLS certificates using the ACME protocol with Let's Encrypt. Options include enabling ACME integration, listing allowed domains ('host_whitelist'), configuring a cache directory, specifying admin email, and adjusting HTTP challenge server parameters. Place this under the 'tls_autocert' key in 'config.json' for Centrifugo to automatically acquire and renew TLS certificates.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/tls.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tls_autocert\": {\n    \"enabled\": true,\n    \"host_whitelist\": \"www.example.com\",\n    \"cache_dir\": \"/tmp/certs\",\n    \"email\": \"user@example.com\",\n    \"http\": true,\n    \"http_addr\": \":80\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Non-Terminal): Shutdown (3001)\nDESCRIPTION: The server is shutting down and disconnects the client. Clients receiving this code are expected to attempt reconnection, potentially to a different server node.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:      3001\nReason:    \"shutdown\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase and Managing FCM Tokens in Frontend JavaScript/TypeScript\nDESCRIPTION: This JavaScript/TypeScript module provides utility functions for integrating Firebase Cloud Messaging (FCM) in the frontend. It includes initializing the Firebase app and messaging service, requesting user permission for notifications, registering a Service Worker (`/firebase-messaging-sw.js`), retrieving the FCM device token using a VAPID key, setting up a listener for foreground messages, and deleting the FCM token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/push_notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getMessaging, getToken, onMessage, deleteToken } from 'firebase/messaging';\nimport { initializeApp } from 'firebase/app';\n\nlet messaging;\n\nexport const initializeFirebase = (firebaseConfig: any) => {\n    if (!messaging) {\n        if (navigator.serviceWorker === undefined) {\n            return\n        }\n        const app = initializeApp(firebaseConfig);\n        messaging = getMessaging(app);\n    }\n};\n\nexport const requestNotificationToken = async (firebaseConfig: any, vapidKey: string): Promise<string | null> => {\n    try {\n        const permission = await Notification.requestPermission();\n        if (permission !== 'granted') {\n            return null;\n        }\n\n        if ('serviceWorker' in navigator) {\n            if (navigator.serviceWorker === undefined) {\n                return null;\n            }\n            try {\n                const registration = await navigator.serviceWorker.register('/firebase-messaging-sw.js');\n            } catch (err) {\n                return null;\n            }\n        } else {\n            return null;\n        }\n        const token = await getToken(messaging, {\n            vapidKey: vapidKey,\n        });\n        return token;\n    } catch (error) {\n        return null;\n    }\n};\n\nexport const onForegroundNotification = (callback) => {\n    if (messaging) {\n        onMessage(messaging, callback);\n    }\n};\n\nexport const removeNotificationToken = async () => {\n    if (messaging) {\n        await deleteToken(messaging);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting TIME_WAIT Sockets for Centrifugo Process Shell\nDESCRIPTION: This pipeline examines all active network sockets, filters for those in TIME_WAIT state associated with the Centrifugo process (by <CENTRIFUGO_PID>), and counts the result. The snippet combines netstat, grep, and wc -l commands, assumes Linux or compatible environment, and is used to gauge how many connections are in a lingering state which may affect system resource pressure. Replace <CENTRIFUGO_PID> with the numeric process ID.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/infra_tuning.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnetstat -an |grep TIME_WAIT | grep <CENTRIFUGO_PID> | wc -l\n```\n\n----------------------------------------\n\nTITLE: Publishing Message to User Channel via HTTP API (bash)\nDESCRIPTION: This curl snippet sends a publish command to Centrifugo's HTTP API, targeting a personal user channel with data. Requires curl, a running Centrifugo server, appropriate API key, and correct endpoint configuration. Key parameters: channel name, data payload, and API key for authentication. Output: triggers a server-side message broadcast to the channel.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_http_stream.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/api \\\n    -d '{\"method\": \"publish\", \"params\": {\"channel\": \"#user12\", \"data\": {\"input\": \"hello\"}}}' \\\n    -H \"Authorization: apikey 9230f514-34d2-4971-ace2-851c656e81dc\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Absent User Activity in Status Response from Centrifugo Server API in JSON\nDESCRIPTION: This snippet provides an example of the server API response in JSON when user activity or online information is missing. The statuses array includes only the user field for the requested ID, allowing client applications to distinguish online/offline or idle states. This distinction aids in building user interfaces reflecting true presence and freshness of user actions. Only the presence of the user ID is guaranteed in this minimal example.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_status.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"statuses\":[\n            {\n                \"user\":\"42\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Chart for Centrifugo PRO Image (YAML)\nDESCRIPTION: This YAML snippet shows the configuration required within the `values.yaml` file when using the official Centrifugo Helm chart for a Kubernetes deployment. It specifies the Docker image registry, repository (`centrifugo/centrifugo-pro`), and tag (`v3.2.2`) to ensure the PRO version of Centrifugo is deployed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/install_and_run.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle=\"values.yaml\"\n...\nimage:\n  registry: docker.io\n  repository: centrifugo/centrifugo-pro\n  tag: v3.2.2\n```\n\n----------------------------------------\n\nTITLE: Querying Connections API in Centrifugo using Curl\nDESCRIPTION: This curl command shows how to call the connections API over HTTP to retrieve information about active connections for a specific user.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/connections.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"connections\", \"params\": {\"user\": \"42\"}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with GRPC API Enabled - Bash\nDESCRIPTION: A bash command for starting the Centrifugo server with GRPC API enabled by setting an environment variable and specifying the config file. Assumes Centrifugo binary is installed and config.json is present. Outputs server startup; used before interacting with GRPC clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_GRPC_API=1 centrifugo --config config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Delta Types for a Namespace - Centrifugo Server - JSON\nDESCRIPTION: This JSON configuration snippet shows how to define a Centrifugo namespace that allows delta compression using the Fossil algorithm. The 'allowed_delta_types' array contains 'fossil', ensuring that clients can negotiate delta compression, while additional options such as 'force_positioning', 'history_size', and 'history_ttl' enable history retrieval and stream positioning. This configuration must be added to the server's config.json to support client-side delta subscriptions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/delta_compression.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ..\n    \"namespaces\": [\n        {\n            \"name\": \"example\",\n            \"allowed_delta_types\": [\"fossil\"],\n            \"force_positioning\": true,\n            \"history_size\": 1,\n            \"history_ttl\": \"60s\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Channels in JavaScript Client\nDESCRIPTION: Basic example showing how to subscribe to a pattern-based channel using the Centrifuge JavaScript client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/channel_patterns.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client := new Centrifuge(\"ws://...\", {});\nconst sub = client.newSubscription('/users/mario');\nsub.subscribe();\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Revoking Token by ID via Centrifugo REST API - Bash curl Example\nDESCRIPTION: This Bash example demonstrates how to revoke a single token in Centrifugo PRO using the HTTP REST API via a `curl` POST request. It targets the `/api` endpoint, requiring both a valid API key and the `jti` (`uid`) of the token to be revoked. The optional `expire_at` parameter (UNIX timestamp) specifies when revocation should expire‚Äîoptimally matching your JWT lifetime. Input parameters include the API key, target token UID, and optionally the revocation expiration time; the output is an empty object on success.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/token_revocation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: apikey <API_KEY>\" \\\n  --request POST \\\n  --data '{\"method\": \"revoke_token\", \"params\": {\"uid\": \"xxx-xxx-xxx\", \"expire_at\": 1635845122}}' \\\n  http://localhost:8000/api\n```\n\n----------------------------------------\n\nTITLE: Handling Server-Side Subscription Publications in Javascript\nDESCRIPTION: This snippet shows how to listen for messages coming from server-side subscriptions directly on the Centrifuge client instance using `centrifuge.on('publish', ...)`. This is used when subscriptions are managed on the server-side rather than initiated by the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.on('publish', function(messageCtx) {\n    console.log(messageCtx);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo Options via JSON - JSON\nDESCRIPTION: This snippet demonstrates how to define Centrifugo configuration options using a JSON file, specifying allowed client origins and enabling Prometheus. Prerequisites include a Centrifugo server instance and proper filesystem permissions. The 'client.allowed_origins' array denotes valid hosts for connections, and 'prometheus.enabled' toggles the Prometheus metrics integration. The file should be structured as standard JSON and referenced by Centrifugo at startup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"allowed_origins\": [\n      \"https://mysite1.com\",\n      \"https://mysite2.com\"\n    ]\n  },\n  \"prometheus\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3503 (Force Disconnect)\nDESCRIPTION: Defines the 'Force Disconnect' disconnect code (3503). This is a terminal code issued when the server intentionally disconnects a client and explicitly instructs it not to attempt reconnection (e.g., administrative action, banning).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nCode:   3503\nReason: \"force disconnect\"\n```\n\n----------------------------------------\n\nTITLE: Defining HmsPushNotification Object - Centrifugo - Markdown\nDESCRIPTION: This Markdown table describes the schema for 'HmsPushNotification' objects that enable sending push notifications via Huawei's HMS within Centrifugo integrations. The field 'message' must comply with Huawei's documented HMS Push Kit REST structure. This documentation reference helps developers structure their HMS push payloads correctly without ambiguity.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n`HmsPushNotification`:\n\n| Field     | Type          | Required | Description                                                                                                                                                                                             |\n|-----------|---------------|----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `message` | `JSON` object | Yes      | HMS [Message](https://developer.huawei.com/consumer/en/doc/development/HMSCore-References/https-send-api-0000001050986197#EN-US_TOPIC_0000001134031085__p1324218481619) described in HMS Push Kit docs. |\n\n```\n\n----------------------------------------\n\nTITLE: Example Refresh Token JSON Response (Python-narrative)\nDESCRIPTION: This snippet demonstrates a minimal backend response format for returning a fresh JWT token to the Centrifugo client. The JSON structure includes a 'token' field containing the string JWT created earlier. This example is used in the context of token refresh workflows and presumes secure backend logic to authenticate and sign the new token appropriately. Input and output are both JSON; integration with SDKs uses the returned 'token' field value.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/authentication.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n{\\n    \"token\": token\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Example with Transport Error Mode\nDESCRIPTION: Example of a HTTP request to Centrifugo API using transport error mode, which returns an appropriate HTTP status code (400) instead of 200 OK.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n‚ùØ echo '{}' | http POST \"http://localhost:8000/api/publish\" \"X-Centrifugo-Error-Mode: transport\"\nHTTP/1.1 400 Bad Request\nContent-Length: 36\nContent-Type: application/json\nDate: Sat, 19 Aug 2023 07:23:59 GMT\n\n{\n    \"code\": 107,\n    \"message\": \"bad request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Redis URI with User, Password, and Database (JSON)\nDESCRIPTION: Illustrates connecting Centrifugo to a Redis server using a URI scheme, which includes user, password, host, port, and a specific Redis database index. This advanced configuration enables secure authentication and custom Redis DB selection, and assumes compatible Redis URI support on both server and client sides.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"redis://user:password@127.0.0.1:6379/0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Output of `defaultenv` with Non-Zero Filter (Bash)\nDESCRIPTION: Shows the example output generated by the `centrifugo defaultenv --base config.json --base-non-zero-only` command, using the previously shown `config.json`. It lists only the environment variables (`CENTRIFUGO_CLIENT_ALLOWED_ORIGINS`, `CENTRIFUGO_ENGINE_REDIS_ADDRESS`, `CENTRIFUGO_ENGINE_TYPE`) corresponding to keys that had non-zero/non-empty/non-false values in the base configuration. The `admin.enabled: false` setting is omitted from this output.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_CLIENT_ALLOWED_ORIGINS=\"http://localhost:8000\"\nCENTRIFUGO_ENGINE_REDIS_ADDRESS=\"redis://localhost:6379\"\nCENTRIFUGO_ENGINE_TYPE=\"redis\"\n```\n\n----------------------------------------\n\nTITLE: Complete Centrifugo Configuration with Personal Channel Subscriptions - JSON\nDESCRIPTION: This snippet provides a full example of centifugo configuration enabling symmetric HMAC JWT authentication (via \"token_hmac_secret_key\"), unidirectional websocket endpoint, and automatic subscription to personal channels (\"user_subscribe_to_personal\"). The file must be named config.json and referenced in Centrifugo CLI invocations for these features to work. All fields are required for this specific workflow.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_websocket.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"secret\",\n  \"uni_websocket\":true,\n  \"user_subscribe_to_personal\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Distributed Notifications Table in ClickHouse (SQL)\nDESCRIPTION: Provides a distributed table for 'notifications', allowing for sharded analytics across the ClickHouse cluster keyed by 'uid'. Requires the ClickHouse cluster ('centrifugo_cluster') to be pre-configured along with local tables and the necessary schema compatibility.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE centrifugo.notifications_distributed;\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.operations_distributed\n(\n    `uid` String,\n    `provider` String,\n    `type` String,\n    `recipient` String,\n    `device_id` String,\n    `platform` String,\n    `user` String,\n    `msg_id` String,\n    `status` String,\n    `error_message` String,\n    `error_code` String,\n    `time` DateTime\n)\nENGINE = Distributed('centrifugo_cluster', 'centrifugo', 'notifications', murmurHash3_64(uid)) ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: RPC Ping Implementation in JavaScript\nDESCRIPTION: Client-side JavaScript implementation to measure RTT using the RPC ping extension.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst startTime = performance.now();\ncentrifuge.rpc('ping', {}).then(function() {\n  const endTime = performance.now();\n  console.log('rtt', ((endTime - startTime)).toFixed(2).toString(), 'ms');  // Output: rtt 0.90 ms\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Subscription with Delta Compression in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a client-side subscription to a Centrifugal channel ('example:updates') using the JavaScript SDK (`centrifuge-js`). It specifically requests delta compression by setting the `delta` option to `'fossil'`, enabling the client to potentially receive compressed updates.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/delta_compression.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst sub = centrifuge.newSubscription('example:updates', {\n  delta: 'fossil'\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Outbox Table for Centrifugo Integration Using SQL\nDESCRIPTION: This SQL snippet creates the 'centrifugo_outbox' table in PostgreSQL for transactional outbox patterns. The table includes an auto-increment primary key, method name, JSONB payload, partition info, and a timestamp. It's a required prerequisite for the PostgreSQL consumer to successfully poll for new async commands to forward to Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/consumers.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS centrifugo_outbox (\n\tid BIGSERIAL PRIMARY KEY,\n\tmethod text NOT NULL,\n\tpayload JSONB NOT NULL,\n\tpartition INTEGER NOT NULL default 0,\n\tcreated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Patterned Channels with Centrifuge Client (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how a client subscribes to a channel that matches a server-defined pattern in Centrifugo PRO. Using the Centrifuge client, it creates a new subscription to '/users/mario', then initiates the subscription and connects the client. The Centrifuge JavaScript library is required to use this code. The main parameters include the WebSocket endpoint and the dynamic channel name. The output is an active subscription to the specified channel, assuming it matches the server configuration. The snippet assumes the channel pattern exists in the Centrifugo server configuration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/channel_patterns.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client := new Centrifuge(\"ws://...\", {});\nconst sub = client.newSubscription('/users/mario');\nsub.subscribe();\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Querying History with Centrifugo History API Patterns (Markdown)\nDESCRIPTION: These code snippets illustrate various ways to interact with Centrifugo's channel history iteration API. They demonstrate combinations of the limit, since, and reverse parameters to control history retrieval direction and window. These are usage examples to be supplied to the history endpoint, not executable code. The expected outputs are subsets of publication streams, depending on the specified parameters. Key parameters: limit (number of items), since (position), reverse (direction). Default publication limits and constraints (such as client_history_max_publication_limit = 300) apply.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/history_and_recovery.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nhistory(limit: 0, since: null, reverse: false)\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nhistory(limit: -1, since: null, reverse: false)\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nhistory(limit: -1, since: null, reverse: true)\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nhistory(limit: 10, since: null, reverse: false)\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nhistory(limit: 10, since: null, reverse: true) \n```\n\nLANGUAGE: Markdown\nCODE:\n```\nhistory(limit: 10, since: {offset: 0, epoch: \"epoch\"}, reverse: false)\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nhistory(limit: 10, since: {offset: 11, epoch: \"epoch\"}, reverse: true)\n```\n\n----------------------------------------\n\nTITLE: Enabling Health Check Endpoint in Centrifugo Config (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable the health check endpoint in Centrifugo. Setting `enabled` to `true` within the `health` object makes the `/health` endpoint available, which is useful for liveness and readiness probes, particularly in Kubernetes environments.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"health\": {\n    \"enabled\": true\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC RPC Proxy Endpoint (JSON)\nDESCRIPTION: Shows how to configure the RPC proxy in `config.json` to forward requests to a GRPC service. Includes the GRPC endpoint URL and the timeout setting.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_rpc_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_rpc_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy Response Status Code Transforms in Centrifugo (JSON)\nDESCRIPTION: This snippet demonstrates how to configure HTTP proxy response status code transforms in Centrifugo. It shows how to map specific HTTP status codes to custom error objects with different codes, messages, and temporary flags.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"proxy\": {\n      \"connect\": {\n        \"enabled\": true,\n        \"http\": {\n          \"status_to_code_transforms\": [\n            {\"status_code\": 404, \"to_error\": {\"code\": 404, \"message\": \"not found\", \"temporary\": false}},\n            {\"status_code\": 403, \"to_error\": {\"code\": 403, \"message\": \"permission denied\", \"temporary\": false}},\n            {\"status_code\": 429, \"to_error\": {\"code\": 429, \"message\": \"too many requests\", \"temporary\": true}}\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Handler in Go\nDESCRIPTION: Server-side handler for processing direct messages from clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nclient.OnMessage(func(e centrifuge.MessageEvent) {\n    log.Printf(\"message from client: %s\", e.Data)\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Full History Reversed using History API\nDESCRIPTION: Shows how to retrieve the complete history stream starting from the newest publication (`since: null`, `reverse: true`). The `limit: -1` parameter requests all available publications in reverse order, subject to the server-side `client_history_max_publication_limit` (default 300).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/history_and_recovery.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhistory(limit: -1, since: null, reverse: true)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Internal Port in Centrifugo (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to configure Centrifugo to serve internal endpoints (like admin UI, debug, API, Prometheus, health checks) on a custom port (9000 in this example) instead of the default application port. This is useful for separating internal and external traffic, especially when fine-grained proxy configuration per location is unavailable.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"internal_port\": 9000\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining PushLimitStrategy Object - Centrifugo - Markdown\nDESCRIPTION: This code block documents the structure of the 'PushLimitStrategy' object as used in Centrifugo request schemas. The table lists possible rate and time limit sub-objects for restricting push notification delivery, indicating that these settings are optional. This documentation assists developers in configuring message throttling and delivery constraints programmatically.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n`PushLimitStrategy`:\n\n| Field        | Type                    | Required | Description             |\n|--------------|-------------------------|----------|-------------------------|\n| `rate_limit` | `PushRateLimitStrategy` | No       | Set rate limit policies |\n| `time_limit` | `PushTimeLimitStrategy` | No       | Set time limit policy   |\n\n```\n\n----------------------------------------\n\nTITLE: Querying Channel History Since Known Position with Centrifuge JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to request up to 10 historical publications from a channel, starting from a known offset and epoch, using the subscription.history() method. The parameters specify how many messages to retrieve and from what position. Only applicable for subscriptions where history is enabled. Output is an array of publications, accessed through resp.publications.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.history({limit: 10, since: {offset: 0, epoch: '...'}});\nconsole.log(resp.publications);\n```\n\n----------------------------------------\n\nTITLE: Generating a Subscription Token via Centrifugo CLI (Bash)\nDESCRIPTION: This Bash shell command uses the 'centrifugo' CLI tool to create a subscription JWT for a specific user and channel. The '-u' flag specifies the user ID and '-s' the channel. The tool outputs an HMAC SHA-256 JWT with default expiration time for testing and development purposes. Requires Centrifugo binary accessible from the command line.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/channel_token_auth.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo gensubtoken -u 123722 -s channel\n```\n\n----------------------------------------\n\nTITLE: Generating Default Config Files with Centrifugo CLI - Bash\nDESCRIPTION: Demonstrates usage of the 'centrifugo defaultconfig' CLI command to generate configuration files populated with default values, supporting multiple formats (JSON, YAML, TOML). It also shows how to output to STDOUT using '--dry-run', and how to extend a base config. Requires the Centrifugo CLI to be installed. Input is the command with outputs being configuration files or STDOUT content.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultconfig -c config.json\ncentrifugo defaultconfig -c config.yaml\ncentrifugo defaultconfig -c config.toml\n```\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultconfig -c config.json --dry-run\n```\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo defaultconfig -c config.json --dry-run --base existing_config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Response Codes for Unidirectional SSE Transport in Centrifugo\nDESCRIPTION: This JSON configuration enables mapping of connect codes to HTTP response status codes for the unidirectional SSE (Server-Sent Events) transport in Centrifugo. It defines transformations for codes 404, 403, and 429 to their corresponding HTTP status codes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uni_sse_connect_code_to_http_response\": {\n    \"enabled\": true,\n    \"transforms\": [\n      {\"code\": 404, \"to\": {\"status_code\": 404}},\n      {\"code\": 403, \"to\": {\"status_code\": 403}},\n      {\"code\": 429, \"to\": {\"status_code\": 429}}\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel History Query Example Response - JSON\nDESCRIPTION: This JSON snippet illustrates the typical response from Centrifugo's history endpoint, displaying publication messages retrieved for a channel. The \"result\" contains fields for stream epoch, offset position, and an array of publication objects, each including message data (e.g., \"text\") and its offset. Clients can use this information to display chat messages, implement message synchronization, or support message recovery on reconnect. Consumers should handle cases where the publications array may be empty if no history is available.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"epoch\": \"qFhv\",\n        \"offset\": 4,\n        \"publications\": [\n            {\n                \"data\": {\n                    \"text\": \"hello\"\n                },\n                \"offset\": 2\n            },\n            {\n                \"data\": {\n                    \"text\": \"hello\"\n                },\n                \"offset\": 3\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Channel Capability Matching - Centrifugo PRO - JSON\nDESCRIPTION: This snippet provides a JSON configuration for granting subscribe access to all channels that match the regular expression '^posts_[\\d]+$'. The 'match' parameter is set to 'regex', and the 'channels' array includes a regex pattern. Used in connection JWTs or connect proxy results for granular, pattern-based permission assignment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/capabilities.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"^posts_[\\\\d]+$\"],\n            \"match\": \"regex\",\n            \"allow\": [\"sub\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL with Docker Compose - Bash\nDESCRIPTION: Illustrates how to connect to the PostgreSQL instance inside the Docker Compose environment using the standard psql client. Required to set up triggers or inspect database state. Assumes Docker Compose services are properly named and credentials match those in the example. Output: psql shell connected to the 'grandchat' database.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec db psql postgresql://grandchat:grandchat@localhost:5432/grandchat\n```\n\n----------------------------------------\n\nTITLE: Specifying Time Durations in Centrifugo (Javascript)\nDESCRIPTION: Illustrates the string format used to define time durations in Centrifugo configuration options. Durations combine a numerical value with a unit suffix (`ms`, `s`, `m`, `h`). Note that while millisecond resolution (`ms`) is possible, some options only support second precision.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_30\n\nLANGUAGE: js\nCODE:\n```\n```js\n\"1000ms\" // 1000 milliseconds\n\"1s\"     // 1 second\n\"12h\"    // 12 hours\n\"720h\"   // 30 days\n```\n```\n\n----------------------------------------\n\nTITLE: JSON Object Format for BoolValue Override in Centrifugo Proxy\nDESCRIPTION: This snippet defines the shape of a BoolValue object, used for per-connection option overrides within subscription config objects sent to or from Centrifugo. This object contains a single 'value' boolean field. Can be returned as part of connect or refresh responses by the backend. Input: JSON with a boolean value. Output: Consumed by Centrifugo proxy logic.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": true/false\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Channel History via Centrifugo HTTP API - JSON\nDESCRIPTION: This JSON snippet is used to call the 'history_remove' API method, which erases all publication history for the specified channel without resetting stream position metadata. Supply the channel name in the 'params' section. Intended for administrative or cleanup purposes, especially during development or troubleshooting. POST this as the request body with authorization to perform history removal.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"history_remove\",\n    \"params\": {\n        \"channel\": \"chat\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WRONG: Overlapping Channel Capabilities - Centrifugo PRO - JSON\nDESCRIPTION: This snippet shows an incorrect way to structure capabilities, where the same channel ('news') is listed in multiple cap objects with different 'allow' actions. Centrifugo only processes the first matching entry, leading to incomplete or unexpected permission grants. Such a pattern should be avoided to prevent permission conflicts.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/capabilities.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"news\"],\n            \"allow\": [\"pub\"]\n        },\n        {\n            \"channels\": [\"news\"],\n            \"allow\": [\"sub\"]\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Code to HTTP Response Transforms for Unidirectional SSE in Centrifugo (JSON)\nDESCRIPTION: This snippet shows how to configure connect code to HTTP response transforms for unidirectional SSE (Server-Sent Events) in Centrifugo. It demonstrates mapping specific connect codes to HTTP status codes for the SSE transport.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uni_sse\": {\n    \"enabled\": true,\n    \"connect_code_to_http_response\": {\n      \"enabled\": true,\n      \"transforms\": [\n        {\"code\": 404, \"to\": {\"status_code\": 404}},\n        {\"code\": 403, \"to\": {\"status_code\": 403}},\n        {\"code\": 429, \"to\": {\"status_code\": 429}}\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Centrifugo Connection JWT Using Bash CLI\nDESCRIPTION: Validates a user-provided connection JWT (<TOKEN>) against the provided configuration file, outputting an error and returning exit code 1 if the token fails validation. Requires Centrifugo installed; used to verify tokens before integrating them into an application workflow.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/console_commands.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo checktoken -c config.json <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Multi-tenant Channel Permission Configuration\nDESCRIPTION: Advanced configuration example showing how to implement tenant-aware channel permissions with user and admin role checks.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/cel_expressions.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"/:tenant/users/:user\",\n        \"subscribe_cel\": \"vars.tenant == meta.tenant && (vars.user == user or 'admin' in meta.roles)\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Distributed `subscriptions_distributed` Table Schema in ClickHouse (SQL)\nDESCRIPTION: This SQL snippet shows the `CREATE TABLE` statement for the `centrifugo.subscriptions_distributed` table. This table provides a unified view for querying subscription data across a ClickHouse cluster using the `Distributed` engine. It references the `centrifugo_cluster`, the `centrifugo` database, the underlying `subscriptions` table, and uses `murmurHash3_64(client)` as the sharding key to distribute queries based on the client ID.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nSHOW CREATE TABLE centrifugo.subscriptions_distributed;\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.subscriptions_distributed\n(\n    `client` String,\n    `user` String,\n    `channels` Array(String),\n    `time` DateTime\n)\nENGINE = Distributed('centrifugo_cluster', 'centrifugo', 'subscriptions', murmurHash3_64(client)) ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Presence Manager in Centrifugo PRO Configuration (JSON)\nDESCRIPTION: This JSON snippet illustrates defining a custom presence manager within the 'presence_managers' array in the Centrifugo configuration file (config.json). It defines a Redis-based presence manager named 'mycustomredis'. Currently, Centrifugo PRO only supports 'redis' type for custom presence managers.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/namespace_engines.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"presence_managers\": [\n    {\n      \"enabled\": true,\n      \"name\": \"mycustomredis\",\n      \"type\": \"redis\",\n      \"redis\": {}\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Redis Sentinel Node Configuration - Plaintext\nDESCRIPTION: Example configuration for a Redis Sentinel node. Includes listener port, monitored master, quorum size, and timing parameters. Meant to be placed in a Redis Sentinel configuration file. Assumes 3-node Sentinel cluster.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nport 26379\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 10000\nsentinel failover-timeout mymaster 60000\n```\n\n----------------------------------------\n\nTITLE: Expected Cache Empty Event Response Payload (Centrifugo, JSON)\nDESCRIPTION: This JSON snippet illustrates the minimum valid response structure that the backend should return to acknowledge the cache empty event. The 'result' property should be present even if empty. Optionally, a 'populated' boolean property may also be specified to notify Centrifugo whether cache population occurred, prompting another state recovery attempt.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/channel_cache_empty.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a Custom Error from Centrifugo Proxy Backend (JSON)\nDESCRIPTION: This JSON structure demonstrates how a backend application handling a Centrifugo proxy request (e.g., subscribe, publish) can return a custom error to the client. The `code` must be >= 1000, and `message` provides a description. This prevents the requested action (e.g., subscription, publication) from proceeding.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": 1000,\n    \"message\": \"custom error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Sub Refresh Proxy Success Response (JSON)\nDESCRIPTION: Shows the expected JSON response structure from the backend application to Centrifugal for a successful subscription refresh. The `result` object must contain an `expire_at` field with a future Unix timestamp, indicating the new expiration time for the subscription.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"result\": {\n    \"expire_at\": 1565436268\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Chat Application in Django\nDESCRIPTION: This snippet defines URL patterns for various views in the chat application, including room management and message handling.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom .views import RoomListViewSet, RoomDetailViewSet, RoomSearchViewSet, \\\n    MessageListCreateAPIView, JoinRoomView, LeaveRoomView\n\n\nurlpatterns = [\n    path('rooms/', RoomListViewSet.as_view({'get': 'list'}), name='room-list'),\n    path('rooms/<int:pk>/', RoomDetailViewSet.as_view({'get': 'retrieve'}), name='room-detail'),\n    path('search/', RoomSearchViewSet.as_view({'get': 'list'}), name='room-search'),\n    path('rooms/<int:room_id>/messages/', MessageListCreateAPIView.as_view(), name='room-messages'),\n    path('rooms/<int:room_id>/join/', JoinRoomView.as_view(), name='join-room'),\n    path('rooms/<int:room_id>/leave/', LeaveRoomView.as_view(), name='leave-room')\n]\n```\n\n----------------------------------------\n\nTITLE: Pausing and Unpausing a Docker Compose Service (Bash)\nDESCRIPTION: These Bash commands pause and unpause a running Docker Compose service (e.g., 'connect'), which is useful for simulating service disruptions or testing how applications handle dependencies going offline. The service name ('connect') should match the name defined in docker-compose.yml, and the Docker Compose stack must be running.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/tips_and_tricks.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose pause connect\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose unpause connect\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Regex in Centrifugo JSON Config\nDESCRIPTION: Demonstrates how to restrict allowed channel names in a namespace using the 'channel_regex' option. This configuration ensures that only channels whose names match the specified regular expression (in this case, digits after the 'chat:' prefix) can be created. Requires Centrifugo server and Go regular expression syntax.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/channels.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"namespaces\": [\n    {\n      \"name\": \"chat\",\n      \"allow_subscribe_for_client\": true,\n      \"channel_regex\": \"^[\\\\d+]$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting User Status Expiration Interval in Centrifugo with JSON Configuration\nDESCRIPTION: This JSON config snippet shows how to adjust the expiration interval for user status keys in Redis, setting how long user activity is retained. 'expire_interval' uses a duration string (e.g., '24h') and should be placed within the user_status section of Centrifugo's config.json. The parameter enhances control over status retention, with '...' indicating omitted unrelated settings. Must be combined with other configuration options in a valid Centrifugo config file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/user_status.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"user_status\": {\n    ...\n    \"expire_interval\": \"24h\"        \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC RPC Proxy in Centrifugo\nDESCRIPTION: Configuration example for using GRPC protocol for RPC proxy calls. This allows forwarding client RPC requests to the application backend over GRPC.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_rpc_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_rpc_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Centrifugo's Built-In Server (Bash)\nDESCRIPTION: Starts the Centrifugo static file server to serve files from the current directory on port 3000. This is suitable for quick local development. Centrifugo binary must be available; port can be adjusted as needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/quickstart.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./centrifugo serve --port 3000\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo PRO RPM Package on Centos - Bash\nDESCRIPTION: This snippet downloads and installs the Centrifugo PRO RPM package for Centos-based systems. It uses wget to retrieve the package and yum to install it. It requires administrator permissions. Dependencies: wget, yum, and a compatible Centos environment are needed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/install_and_run.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/centrifugal/centrifugo-pro/releases/download/v4.0.0-beta.10/centrifugo-pro-4.0.0-beta.10.x86_64.rpm\nsudo yum install centrifugo-pro-4.0.0-beta.10.x86_64.rpm\n```\n\n----------------------------------------\n\nTITLE: Enabling Sub Refresh Proxy for Channels without Namespace (JSON)\nDESCRIPTION: Configures Centrifugal to use the defined sub refresh proxy endpoint for channels without a specific namespace. This requires setting `sub_refresh_proxy_enabled: true` under the `without_namespace` section.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"channel\": {\n    \"proxy\": {\n      \"sub_refresh\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/sub_refresh\"\n      }\n    },\n    \"without_namespace\": {\n      \"sub_refresh_proxy_enabled\": true\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Representing Errors in JSON Replies (Centrifugo)\nDESCRIPTION: Illustrates the structure of an `error` object within a Centrifugo server reply when using JSON format. It includes a numeric `code` (e.g., 100), a descriptive `message`, and an optional boolean `temporary` flag indicating if the error might be transient. This structure is consistent across different error types.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_protocol.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 100,\n    \"message\": \"internal server error\",\n    \"temporary\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Presence and Join/Leave Events in Namespace Config (JSON)\nDESCRIPTION: This JSON configuration snippet extends the previous example by enabling join and leave events alongside presence for the 'public' namespace. Setting 'join_leave' to 'true' instructs Centrifugo to emit these events, and 'force_push_join_leave' ensures they are pushed to clients.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/presence.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"namespaces\": [{\n        \"name\": \"public\",\n        \"presence\": true,\n        \"join_leave\": true,\n        \"force_push_join_leave\": true\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting X-API-Key HTTP Header - HTTP (header format example)\nDESCRIPTION: Shows how to include the API key using the X-API-Key header for HTTP requests to the Centrifugo HTTP API. No special dependencies; this string should be used as part of the request headers when making API calls. Replace <YOUR_API_KEY> with your actual secret key.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/server_api.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nX-API-Key: <YOUR_API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Subscribe Proxy Success Result Example - JSON\nDESCRIPTION: Minimal expected response from the backend when a subscribe request is allowed. An empty \\\\\"result\\\\\" object indicates approval without any additional data. The proxy handler may include more fields inside \\\\\"result\\\\\" if enriching the subscription, but an empty object is sufficient for basic authorization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Top-Level Channel Options in Centrifugo JSON Config\nDESCRIPTION: Shows how to set key real-time features and permission options at the root of the Centrifugo configuration. This includes presence, history, forced recovery, and permissions for client and anonymous access to subscribe, publish, presence, and history APIs. Dependencies: Centrifugo server. Parameters configure top-level channels not scoped by namespaces.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/channels.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token_hmac_secret_key\": \"my-secret-key\",\n    \"api_key\": \"secret-api-key\",\n    \"presence\": true,\n    \"history_size\": 10,\n    \"history_ttl\": \"300s\",\n    \"force_recovery\": true,\n    \"allow_subscribe_for_client\": true,\n    \"allow_subscribe_for_anonymous\": true,\n    \"allow_publish_for_subscriber\": true,\n    \"allow_publish_for_anonymous\": true,\n    \"allow_history_for_subscriber\": true,\n    \"allow_history_for_anonymous\": true,\n    \"allow_presence_for_subscriber\": true,\n    \"allow_presence_for_anonymous\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Cluster via Environment Variables\nDESCRIPTION: Command to configure Redis cluster using environment variables instead of JSON config.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_REDIS_CLUSTER_ADDRESS=\"localhost:30001\" CENTRIFUGO_ENGINE=redis ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo with OpenTelemetry Environment Variables (Bash)\nDESCRIPTION: This Bash command starts the Centrifugo server, enabling and configuring OpenTelemetry tracing using environment variables. `OTEL_EXPORTER_OTLP_ENDPOINT` directs Centrifugo to send traces to the specified Jaeger OTLP HTTP endpoint (localhost:4318 in this case). `CENTRIFUGO_OPENTELEMETRY=1` and `CENTRIFUGO_OPENTELEMETRY_API=1` activate the OpenTelemetry feature and API tracing within Centrifugo respectively.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/observability.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nOTEL_EXPORTER_OTLP_ENDPOINT=\"http://localhost:4318\" CENTRIFUGO_OPENTELEMETRY=1 CENTRIFUGO_OPENTELEMETRY_API=1 ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Describing Kafka Consumer Group State in Docker Compose - Bash\nDESCRIPTION: This snippet shows how to inspect the state of a specific Kafka consumer group (such as lag, partition assignments, and offsets) from inside a Docker Compose environment. It uses the kafka-consumer-groups tool run from the 'kafka' service. The required parameter '--group centrifugo' specifies the consumer group to describe. The output details consumer group metrics important for monitoring and debugging.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/tips_and_tricks.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec kafka kafka-consumer-groups --bootstrap-server kafka:9092 --describe --group centrifugo\n```\n\n----------------------------------------\n\nTITLE: Example Denied Rate Limit API Response\nDESCRIPTION: This JSON snippet illustrates a response when the rate limit has been exceeded. The `allowed` field is `false`, `tokens_left` is 0, `allowed_in` indicates the time (5208 milliseconds) until the action might be allowed again based on the token refill rate, and `server_time` provides the server's timestamp (Unix epoch in milliseconds) when the check occurred.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/distributed_rate_limit.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"allowed\": false,\n        \"tokens_left\": 0,\n        \"allowed_in\": 5208,\n        \"server_time\": 1694627573210\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Monitoring Endpoint - JSON\nDESCRIPTION: This configuration snippet enables the Prometheus metrics endpoint in Centrifugo by setting the \"prometheus\" option to true in the config.json file. This makes Centrifugo expose a /metrics endpoint consumable by Prometheus servers. Requires Centrifugo to be restarted with this configuration. Only one simple key needs to be added, and no further parameters are required.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/monitoring.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"prometheus\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Refresh Callback in JavaScript\nDESCRIPTION: Shows how to implement a token refresh callback function for maintaining an authenticated connection with Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_api.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getToken() {\n    if (!loggedIn) {\n        return \"\"; // Empty token or pre-generated token for anonymous users.\n    }\n    // Fetch your application backend.\n    const res = await fetch('http://localhost:8000/centrifugo/connection_token');\n    if (!res.ok) {\n        if (res.status === 403) {\n            // Return special error to not proceed with token refreshes,\n            // client will be disconnected.\n            throw new Centrifuge.UnauthorizedError();\n        }\n        // Any other error thrown will result into token refresh re-attempts.\n        throw new Error(`Unexpected status code ${res.status}`);\n    }\n    const data = await res.json();\n    return data.token;\n}\n\nconst client = new Centrifuge(\n    'ws://localhost:8000/connection/websocket',\n    {\n        token: 'JWT-GENERATED-ON-BACKEND-SIDE', // Optional, getToken is enough.\n        getToken: getToken\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis Presence Manager in Centrifugo Configuration (JSON)\nDESCRIPTION: Provides the JSON configuration in `config.json` to enable a separate presence manager and set its type to Redis. This involves setting `presence_manager.enabled` to `true` and `presence_manager.type` to `\"redis\"`. Currently, only Redis is supported for the presence manager type.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"presence_manager\": {\n    \"enabled\": true,\n    \"type\": \"redis\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating ClickHouse Operations Table in SQL\nDESCRIPTION: This SQL snippet shows the structure of the 'operations' table in ClickHouse for storing Centrifugo operation data. It includes fields for client operations, errors, and performance metrics.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.operations\n(\n    `client` String,\n    `user` String,\n    `op` String,\n    `channel` String,\n    `method` String,\n    `error` UInt32,\n    `disconnect` UInt32,\n    `duration` UInt64,\n    `time` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{cluster}/{shard}/operations', '{replica}')\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192\n```\n\n----------------------------------------\n\nTITLE: Validating Centrifugo Configuration File using Bash\nDESCRIPTION: Runs the `centrifugo checkconfig` command to validate the structure and syntax of a specified configuration file (e.g., `config.json`). The `--config` flag points to the file path. If any validation errors are detected, the program exits with a status code of 1 and an error message.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/console_commands.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo checkconfig --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Client Connection to Centrifugo without JWT\nDESCRIPTION: This diagram shows the process of a client connecting to Centrifugo without a JWT. The connection request is forwarded to the application backend for validation, which then provides user credentials to Centrifugo in the connect reply.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/flow_diagrams.md#2025-04-23_snippet_1\n\nLANGUAGE: swimlanes\nCODE:\n```\nClient -> Centrifugo: Connect request\n\nnote:\nClient connects to Centrifugo without JWT.\n\nCentrifugo -> App backend: Sends request further (via HTTP or GRPC)\n\nnote: The application backend validates client connection and tells Centrifugo user credentials in Connect reply.\n\nApp backend -> Centrifugo: Connect reply\n\nCentrifugo -> Client: Connect Reply\n\n...: {fas-spinner} Persistent connection established\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results: Redigo vs. go-redis/redis Simple SET (Text)\nDESCRIPTION: Displays the comparative benchmark results between Redigo and go-redis/redis for basic SET operations, likely generated from running benchmark functions like the one previously shown. The output shows `go-redis/redis` is slightly faster in terms of nanoseconds per operation (ns/op) but allocates significantly more memory (bytes/op and allocs/op) compared to Redigo in this specific non-pipelined test.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n```\nBenchmarkRedigo-8        228804        4648 ns/op        62 B/op         2 allocs/op\nBenchmarkGoredis-8       268444        4561 ns/op       244 B/op         8 allocs/op\n```\n```\n\n----------------------------------------\n\nTITLE: Localizing Push Notifications\nDESCRIPTION: Example of configuring push notification localizations for multiple languages using the localizations field.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/push_notifications.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"localizations\": {\n    \"pt\": {\n        \"translations\": {\n            \"greeting\": \"Ol√°\",\n            \"question\": \"Como t√° indo\"\n        }\n    },\n    \"fr\": {\n        \"translations\": {\n            \"greeting\": \"Bonjour\",\n            \"question\": \"Comment √ßa va\"\n        }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics via Environment Variable in Bash\nDESCRIPTION: Sets the CENTRIFUGO_PROMETHEUS environment variable to enable Prometheus metrics in Centrifugo. No dependencies other than bash-compatible shell and Centrifugo server. The variable value \\\"1\\\" will be interpreted as true by Centrifugo. Expected input: string assignment. Output: side effect of process-local environment variable for Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport CENTRIFUGO_PROMETHEUS=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring history_ttl for Centrifugo Channels in JSON\nDESCRIPTION: This snippet demonstrates how to set a nonzero history_ttl (history time-to-live) and history_size on a Centrifugo channel within a JSON configuration file. history_ttl determines how long (with second-level precision) to retain the in-memory PUB/SUB history for the channel, enabling reliable client recovery features. Required fields are history_size and history_ttl, with history_ttl as a duration string (e.g., \"60s\"). Omitting these disables channel history.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/channels.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"history_size\": 10,\n    \"history_ttl\": \"60s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Configuration File\nDESCRIPTION: The default Centrifugo configuration file generated by the genconfig command, containing authentication secrets and admin credentials.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/quickstart.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"token\": {\n      \"hmac_secret_key\": \"bbe7d157-a253-4094-9759-06a8236543f9\"\n    },\n    \"allowed_origins\": []\n  },\n  \"http_api\": {\n    \"key\": \"d7627bb6-2292-4911-82e1-615c0ed3eebb\"\n  },\n  \"admin\": {\n    \"enabled\": true,\n    \"password\": \"d0683813-0916-4c49-979f-0e08a686b727\",\n    \"secret\": \"4e9eafcf-0120-4ddd-b668-8dc40072c78e\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Chat State Shape in React (JavaScript)\nDESCRIPTION: This snippet defines the initial structure for the chat application's state used with React's reducer. It contains arrays and objects for chat rooms, a mapping of room IDs to room data, and a mapping of room IDs to message arrays. This state shape is critical for organizing rooms and their messages in memory, with empty defaults for initial rendering. No specific external dependencies are required, and the format is intended to be manipulated by reducer actions.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialChatState = {\n  rooms: [],\n  roomsById: {},\n  messagesByRoomId: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep Latest Publication in Namespace - Centrifugo PRO - JSON\nDESCRIPTION: This JSON snippet demonstrates how to enable delta compression for at most once scenarios by activating the 'keep_latest_publication' option within a Centrifugo PRO namespace. The 'allowed_delta_types' parameter should include available delta types, while 'keep_latest_publication' must be set to true. Place this in your Centrifugo config.json file under the 'namespaces' array; channels under this namespace will keep the latest publication in memory as long as subscribers are present. Requires Centrifugo PRO, and has the limitation that the latest publication is only retained while channels are subscribed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/delta_at_most_once.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"namespaces\": [\n        {\n            \"name\": \"example\",\n            \"allowed_delta_types\": [\"fossil\"],\n            \"keep_latest_publication\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django to Use PostgreSQL Database - Python\nDESCRIPTION: Sets Django project settings to connect to a PostgreSQL database service. Dependencies: Python, Django, and the psycopg2 Python driver should be installed. Main parameters specify database engine, name, user, password, host, and port. Intended for use when deploying via Docker Compose.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\\n    'default': {\\n        'ENGINE': 'django.db.backends.postgresql',\\n        'NAME': 'grandchat',\\n        'USER': 'grandchat',\\n        'PASSWORD': 'grandchat',\\n        'HOST': 'db',\\n        'PORT': '5432',\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Info Method with HTTP API in Bash\nDESCRIPTION: Example of calling the 'info' method via HTTP API to get information about running Centrifugo nodes. This command returns details about all nodes in the cluster including their name, client count, and version.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/server_api.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"method\": \"info\", \"params\": {}}' | http \"localhost:8000/api\" Authorization:\"apikey KEY\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Centrifugo GRPC Go Client Project (Bash)\nDESCRIPTION: Creates a new Go project directory for Centrifugo GRPC client, initializes a Go module, and downloads the required Protobuf schema file for code generation. Requires Go tools and wget installed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/server_api.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmkdir centrifugo_grpc_example\ncd centrifugo_grpc_example/\ntouch main.go\ngo mod init centrifugo_example\nmkdir apiproto\ncd apiproto\nwget https://raw.githubusercontent.com/centrifugal/centrifugo/master/internal/apiproto/api.proto -O api.proto\n```\n\n----------------------------------------\n\nTITLE: Querying Open File Limit with Shell Commands\nDESCRIPTION: These shell commands allow administrators to check the maximum number of open files a Centrifugo process can have at runtime and to inspect the limit details of any process by PID. No dependencies except standard Unix utilities are required. Inputs are either run in a shell directly or with process-specific PID values, and outputs are printed to stdout.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/infra_tuning.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nulimit -n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncat /proc/<PID>/limits\n```\n\n----------------------------------------\n\nTITLE: Counting iOS Push Notifications in Last 24 Hours in ClickHouse SQL\nDESCRIPTION: SQL query to count the total number of push notifications sent to iOS devices within the last 24 hours. It queries the `centrifugo.notifications` table, filtering by the `platform` column and a time range. Includes example output.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*)\nFROM centrifugo.notifications\nWHERE (time > (now() - toIntervalHour(24))) AND (platform = 'ios')\n\n‚îå‚îÄcount()‚îÄ‚îê\n‚îÇ   31200 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Subscribe Proxy Allowed Response Example - JSON\nDESCRIPTION: This response example is returned by the backend to Centrifugo to indicate a successful authorization for a client's channel subscription. The 'result' object is empty but can include additional details as needed by integration. This structure is required for subscribe proxy endpoints to confirm permission checks.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {}}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Allowed Origins for Subdomains (JSON)\nDESCRIPTION: This example demonstrates how to use a wildcard ('*') in the origin pattern for Centrifugo JSON configuration, matching all subdomains under 'example.com'. This is intended for multi-subdomain deployments. It is configured via a string pattern with wildcard, input as a JSON array.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\\n    \"https://*.example.com\"\\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React App - bash\nDESCRIPTION: After generating the Vite project, these commands navigate into the project folder and install all npm dependencies. This allows the user to build and run the React app locally with all required packages.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Example Debug Endpoint URL with Custom Internal Port\nDESCRIPTION: This URL shows the address for the debug pprof endpoint when the `internal_port` configuration option is set to 9000. Internal endpoints like debug, API, and Prometheus will use this specified port.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:9000/debug/pprof/\n```\n\n----------------------------------------\n\nTITLE: Disabling Centrifugo v1 Client Protocol Support\nDESCRIPTION: Set the `disable_client_protocol_v1` boolean configuration option to `true` (available from Centrifugo v4.1.1) to completely turn off support for the older v1 client protocol. This enhances security and enforces the use of the newer protocol once all clients are migrated.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/migration-v4.md#2025-04-23_snippet_2\n\nLANGUAGE: configuration\nCODE:\n```\ndisable_client_protocol_v1\n```\n\n----------------------------------------\n\nTITLE: Checking Process Resource Limits on Linux Shell\nDESCRIPTION: This snippet shows how to check the current resource limits, including open files, for a specific running process by reading and displaying its /proc/<PID>/limits file. To use it, replace <PID> with the process ID of interest. It requires Linux with /proc filesystem. The output lists various limits affecting the specified process, useful for determining maximum connections and diagnosing resource bottlenecks.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/infra_tuning.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat /proc/<PID>/limits\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache Empty Proxy for Default Namespace\nDESCRIPTION: Configuration showing how to enable cache empty proxy for channels without a namespace using the proxy_cache_empty flag.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/channel_cache_empty.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"proxy\": {\n      \"cache_empty\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/cache_empty\",\n        \"timeout\": \"1s\"\n      }\n    },\n    \"without_namespace\": {\n      \"cache_empty_proxy_enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Sockets in TIME_WAIT State for a Specific Process\nDESCRIPTION: Uses `netstat` and `grep` to count the number of network sockets currently in the TIME_WAIT state associated with a specific Centrifugo process PID. A high count can indicate potential issues with rapid connection cycling and resource exhaustion.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/infra_tuning.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnetstat -an |grep TIME_WAIT | grep <CENTRIFUGO_PID> | wc -l\n```\n\n----------------------------------------\n\nTITLE: Defining DisconnectNotAvailable Code and Reason in Centrifugal\nDESCRIPTION: Specifies the disconnection code `3508` with reason `\"not available\"`. This is used when a requested feature or handler is unavailable, for instance, when an asynchronous message is sent but no server-side message handler is configured.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_35\n\nLANGUAGE: text\nCODE:\n```\nCode:   3508\nReason: \"not available\"\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 100 (Internal Server Error)\nDESCRIPTION: Defines the client error code 100, representing an \"internal server error\". This temporary error indicates a server-side issue, not a client fault. It's returned in replies to client commands within the bidirectional client protocol.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    100\nMessage: \"internal server error\"\nTemporary: true\n```\n\n----------------------------------------\n\nTITLE: Setting Centrifugo Namespaces via Environment Variable\nDESCRIPTION: This bash command demonstrates how to configure Centrifugo namespaces using the `CENTRIFUGO_NAMESPACES` environment variable. The value must be a valid JSON string representing an array of namespace objects.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nCENTRIFUGO_NAMESPACES='[{\"name\": \"ns1\"}, {\"name\": \"ns2\"}]' ./centrifugo\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Per-User Rate Limits in Centrifugo\nDESCRIPTION: Configuration example for setting up in-memory rate limits on a per-user basis. Shows default, publish and RPC rate limiting with method-specific overrides.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/rate_limiting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"rate_limit\": {\n      \"user_command\": {\n        \"enabled\": true,\n        \"default\": {\n          \"enabled\": true,\n          \"buckets\": [\n            {\n              \"interval\": \"1s\",\n              \"rate\": 60\n            }\n          ]\n        },\n        \"publish\": {\n          \"enabled\": true,\n          \"buckets\": [\n            {\n              \"interval\": \"1s\",\n              \"rate\": 1\n            }\n          ]\n        },\n        \"rpc\": {\n          \"enabled\": true,\n          \"buckets\": [\n            {\n              \"interval\": \"1s\",\n              \"rate\": 10\n            }\n          ],\n          \"method_override\": {\n            \"update_user_status\": {\n              \"enabled\": true,\n              \"buckets\": [\n                {\n                  \"interval\": \"20s\",\n                  \"rate\": 1\n                }\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Publish Proxy for Namespace (JSON)\nDESCRIPTION: Example `config.json` for setting up a publish proxy for a specific namespace (\"chat\") using a GRPC endpoint. It defines the GRPC endpoint, timeout, and enables both publishing and proxying for the namespace.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/proxy.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_publish_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_publish_timeout\":  \"1s\"\n  \"namespaces\": [\n    {\n      \"name\": \"chat\",\n      \"publish\": true,\n      \"proxy_publish\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect: Connection Closed (3000)\nDESCRIPTION: A pseudo-disconnect code used internally or in logs when a client connection closes without a specific reason initiated by the server. This could be a clean client-side disconnect or a network interruption.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nCode: 3000\nReason: \"connection closed\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Delta Compression with keep_latest_publication in Centrifugo\nDESCRIPTION: JSON configuration example showing how to enable delta compression for a namespace using keep_latest_publication option. This configuration allows delta compression for at-most-once delivery scenarios by keeping the latest publication in node's memory.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/delta_at_most_once.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel\": {\n    \"namespaces\": [\n      {\n        \"name\": \"example\",\n        \"allowed_delta_types\": [\n          \"fossil\"\n        ],\n        \"keep_latest_publication\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 112 (Unrecoverable Position)\nDESCRIPTION: Defines the 'Unrecoverable Position' error code (112) returned during a history query when the requested range of messages (based on sequence/offset and epoch) is no longer available in the stream, potentially due to retention limits or an incorrect epoch provided by the client.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nCode:    112\nMessage: \"unrecoverable position\"\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Centrifugo Server in Javascript\nDESCRIPTION: This snippet demonstrates how to explicitly close the connection to the Centrifugo server using the `disconnect()` method on the client instance. This can be used when the client application no longer needs the real-time connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/client_api.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncentrifuge.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Disconnect Response in Centrifugo Proxy (JSON)\nDESCRIPTION: This JSON snippet shows how to structure a disconnect response for unauthorized or unauthenticated connections in Centrifugo proxy endpoints. The response includes a 'code' indicating the disconnect reason and a 'reason' field with a textual explanation. This is to be returned from the HTTP handler to instruct Centrifugo to close the client's connection. Input: HTTP request. Output: JSON response indicating disconnect. Limitations: The choice of codes/reasons should comply with Centrifugo's documented rules.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disconnect\": {\n    \"code\": 4501,\n    \"reason\": \"unauthorized\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Centrifuge Node in Go\nDESCRIPTION: Creates and runs a new Centrifuge node instance using default configuration settings\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nnode, err := centrifuge.New(centrifuge.DefaultConfig)\nif err != nil {\n    log.Fatal(err)\n}\n\nif err := node.Run(); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSE in Centrifugo Config\nDESCRIPTION: JSON configuration to enable the unidirectional SSE endpoint in Centrifugo server settings.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_sse.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"uni_sse\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main URL Patterns for Django Application\nDESCRIPTION: This snippet sets up the main URL configuration for the Django application, including admin, API endpoints, and static file serving.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\nfrom . import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/csrf/', views.get_csrf, name='api-csrf'),\n    path('api/token/connection/', views.get_connection_token, name='api-connection-token'),\n    path('api/token/subscription/', views.get_subscription_token, name='api-subscription-token'),\n    path('api/login/', views.login_view, name='api-login'),\n    path('api/logout/', views.logout_view, name='api-logout'),\n    path('api/', include('chat.urls')),\n]\n\nurlpatterns += staticfiles_urlpatterns()\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo GRPC Publish Proxy for a Namespace (JSON)\nDESCRIPTION: This configuration example enables the Publish Proxy using GRPC specifically for the 'chat' namespace. It sets the `proxy_publish_endpoint` to a GRPC address and enables `publish` and `proxy_publish` within the namespace definition.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_publish_endpoint\": \"grpc://localhost:12000\",\n  \"proxy_publish_timeout\":  \"1s\"\n  \"namespaces\": [\n    {\n      \"name\": \"chat\",\n      \"publish\": true,\n      \"proxy_publish\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Channel History in Centrifugo API (JSON)\nDESCRIPTION: This snippet shows the JSON structure for removing channel history using the Centrifugo API. It includes the method name and channel parameter.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/server_api.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"method\": \"history_remove\",\n    \"params\": {\n        \"channel\": \"chat\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Terminal): Permission Denied (3507)\nDESCRIPTION: The client attempted to access the server or perform an action without sufficient permissions, leading to a terminal disconnection. Reconnection should not be attempted without addressing the permission issue.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3507\nReason: \"permission denied\"\n```\n\n----------------------------------------\n\nTITLE: Updating User Status via Client-side RPC in JavaScript\nDESCRIPTION: This snippet demonstrates how to call the 'update_user_status' RPC method from the client-side using JavaScript. It's recommended to debounce these calls to avoid excessive API usage.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_status.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait centrifuge.rpc('update_user_status', {});\n```\n\n----------------------------------------\n\nTITLE: Starting Centrifugo Server with Custom Configuration (Bash)\nDESCRIPTION: This Bash command launches the Centrifugo server with a specific configuration file. The -c flag points Centrifugo to the desired config.json, which may have uni_http_stream and other features enabled. Dependency: Centrifugo must be installed. Input: config.json should exist in the current directory. Output: Active server instance listening on its configured ports and available endpoints.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/uni_http_stream.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Chat App\nDESCRIPTION: Django URL configuration for the chat application, mapping the index view to the root URL of the chat app.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n```\n\n----------------------------------------\n\nTITLE: RPC Proxy Response Example\nDESCRIPTION: Example of the expected JSON response format for an RPC proxy request. Includes the data field containing the actual response to the RPC call.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/proxy.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {\"data\": {\"answer\": \"2019\"}}}\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Subscriptions Table Schema\nDESCRIPTION: SQL schema for the subscriptions table that tracks client channel subscriptions with client ID, user, and subscribed channels.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.subscriptions\n(\n    `client` String,\n    `user` String,\n    `channels` Array(String),\n    `time` DateTime\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192\n```\n\n----------------------------------------\n\nTITLE: Retrieving Presence Information in Centrifugo\nDESCRIPTION: Demonstrates how to get presence information and presence stats for a Centrifugo channel, including full information about active subscribers and a summary of client and user counts.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/client_api.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.presence();\n// resp contains presence information - a map client IDs as keys \n// and client information as values.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await subscription.presenceStats();\n// resp contains a number of clients and a number of unique users.\n```\n\n----------------------------------------\n\nTITLE: Running ClickHouse Client via Docker - Bash Command\nDESCRIPTION: This bash command starts the ClickHouse SQL client in a Docker container, linking it to a running ClickHouse server container. Requires Docker, a running server named 'click', and the yandex/clickhouse-client image. Output is an interactive shell for executing further SQL commands against ClickHouse.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/analytics.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run -it --rm --link click:clickhouse-server yandex/clickhouse-client --host clickhouse-server\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Subscribing with JWT in Centrifugo - Markdown\nDESCRIPTION: This snippet illustrates the process where the backend generates a JWT, delivers it to the client, and the client authenticates and subscribes to channels via Centrifugo. It uses a swimlane diagram format in Markdown to depict roles and steps. The required setup includes a backend capable of JWT issuance and a Centrifugo server configured for JWT authentication; the JWT is passed as a parameter during the client's connection. Expected outputs include a persistent real-time connection and subsequent channel subscription updates; inputs are user credentials and a generated JWT.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/flow_diagrams.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nClient <- App Backend: JWT\n\nnote:\nThe backend generates JWT for a user and passes it to the client side.\n\nClient -> Centrifugo: Client connects to Centrifugo with JWT\n\n...: {fas-spinner} Persistent connection established\n\nClient -> Centrifugo: Client issues channel subscribe requests\n\nCentrifugo -->> Client: Client receives real-time updates from channels\n```\n\n----------------------------------------\n\nTITLE: Renaming Centrifugo Anonymous Connection Option in v4\nDESCRIPTION: In Centrifugo v4, the configuration option `client_anonymous` (used in v3) was renamed to `allow_anonymous_connect_without_token` to better describe its function of permitting anonymous connections without a JWT. Configuration files must be updated to use the new name during migration.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/migration-v4.md#2025-04-23_snippet_5\n\nLANGUAGE: configuration\nCODE:\n```\nclient_anonymous\n```\n\nLANGUAGE: configuration\nCODE:\n```\nallow_anonymous_connect_without_token\n```\n\n----------------------------------------\n\nTITLE: Generating Minimal Centrifugo TOML Configuration using Shell\nDESCRIPTION: Executes the `centrifugo genconfig` command to generate a minimal configuration file, specifying the TOML format by using the `.toml` extension in the filename provided with the `-c` flag (e.g., `config.toml`). It supports generating configurations in JSON, YAML, or TOML based on the file extension. Exits with status 1 on error.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/console_commands.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncentrifugo genconfig -c config.toml\n```\n\n----------------------------------------\n\nTITLE: Reusing Redis Engine for User Status in Centrifugo\nDESCRIPTION: This JSON configuration demonstrates how to reuse the existing Redis engine for the user status feature, avoiding the need for a separate Redis instance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/user_status.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"engine\": \"redis\",\n    \"redis_address\": \"localhost:6379\",\n    \"user_status\": {\n        \"enabled\": true,\n        \"use_redis_from_engine\": true,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating User Tracing in Centrifugo PRO and Saving Output using CURL (Bash)\nDESCRIPTION: This Bash command uses CURL to connect to the Centrifugo PRO admin tracing endpoint (`/admin/trace`). It sends a POST request with an admin authorization token and specifies tracing for user ID \"56\". The real-time trace output is then redirected and saved to a file named `trace.txt`. Requires CURL, a running Centrifugo instance, and a valid `<ADMIN_AUTH_TOKEN>`.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/tracing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/admin/trace -H \"Authorization: token <ADMIN_AUTH_TOKEN>\" -d '{\"type\": \"user\", \"entity\": \"56\"}' -o trace.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Publish Proxy Endpoint in Centrifugal (JSON)\nDESCRIPTION: Defines the `endpoint` within the `publish` proxy settings in `config.json`. This URL specifies the backend service Centrifugal will contact to validate client publish requests before broadcasting the message.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  ...\n  \"channel\": {\n    \"proxy\": {\n      \"publish\": {\n        \"endpoint\": \"http://localhost:3000/centrifugo/publish\"\n      }\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Service in Docker Compose (YAML)\nDESCRIPTION: This snippet defines a Grafana service in Docker Compose using the grafana/grafana-oss image. It sets environment variables for the admin account, mounts provision and data directories, depends on Prometheus, and exposes Grafana on port 3000. Requires Docker Compose, a correct provisioning directory structure, and Prometheus running. Inputs are volumes and environment variables; output is a Grafana instance ready for use.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/monitoring.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  grafana:\n    image: grafana/grafana-oss:11.4.0\n    depends_on:\n      - prometheus\n    # Expose Grafana on host port 3000\n    ports:\n      - \"3000:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_USER=admin\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n    volumes:\n      # Mount local provisioning directory to automatically configure Prometheus as a datasource\n      - ./grafana/provisioning:/etc/grafana/provisioning\n      - grafana-data:/var/lib/grafana\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Persistence for Token Revocation in Centrifugo PRO\nDESCRIPTION: JSON configuration for enabling PostgreSQL database persistence engine for token revocation and user token invalidation features in Centrifugo PRO. This setup uses a PostgreSQL database for storing revocation data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/token_revocation.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"database\": {\n        \"dsn\": \"postgresql://postgres:pass@127.0.0.1:5432/postgres\"\n    },\n    \"token_revoke\": {\n        \"persistence_engine\": \"database\"\n    },\n    \"user_tokens_invalidate\": {\n        \"persistence_engine\": \"database\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Proxy Refresh Endpoint Configuration for Centrifugo (JSON)\nDESCRIPTION: This JSON snippet demonstrates a fragment of a Centrifugo server configuration enabling the proxy_refresh endpoint and specifying a timeout. These settings instruct Centrifugo to POST refresh requests to the backend at the given endpoint, using the specified timeout. Prerequisite: The backend must have a handler ready at the specified URL. Key parameters: 'proxy_refresh_endpoint' (URL), 'proxy_refresh_timeout' (duration). Limitations: Only a fragment; should be included in the full Centrifugo config.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proxy_refresh_endpoint\": \"http://localhost:3000/centrifugo/refresh\",\n  \"proxy_refresh_timeout\":  \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for WebTransport QUIC Server in Go\nDESCRIPTION: Implements TLS configuration for the WebTransport QUIC server, including certificate loading and ALPN protocol specification for WebTransport compatibility.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// https://tools.ietf.org/html/draft-vvv-webtransport-quic-02#section-3.1\nconst alpnQuicTransport = \"wq-vvv-01\"\n\nfunc (s *WebTransportServerQuic) generateTLSConfig() *tls.Config {\n\tcert, err := tls.LoadX509KeyPair(s.config.TLSCertPath, s.config.TLSKeyPath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn &tls.Config{\n\t\tCertificates: []tls.Certificate{cert},\n\t\tNextProtos:   []string{alpnQuicTransport},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Full Access Capability Assignment - Centrifugo PRO - JSON\nDESCRIPTION: This snippet illustrates how to grant a client all possible permissions across all channels by matching every channel with '*', specifying 'wildcard' as the match mode, and allowing all capabilities ('sub', 'pub', 'hst', 'prs'). This configuration should only be used when the client is fully trusted, as it provides unrestricted access.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/capabilities.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"*\"],\n            \"match\": \"wildcard\",\n            \"allow\": [\"sub\", \"pub\", \"hst\", \"prs\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Django View for Chat Index\nDESCRIPTION: Python function to render the index view for the chat application using Django's render function.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-11-04-integrating-with-django-building-chat-application.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\n\ndef index(request):\n    return render(request, 'chat/index.html')\n```\n\n----------------------------------------\n\nTITLE: Enabling unidirectional SSE (EventSource) in Centrifugo Configuration (JSON)\nDESCRIPTION: This JSON snippet shows how to enable the unidirectional SSE (EventSource) endpoint by adding the 'uni_sse' property to the Centrifugo configuration file and setting it to true. This allows clients to connect to the new SSE endpoint. Place this property in your 'config.json' file and ensure the configuration file is loaded by your Centrifugo server instance. Other unrelated configuration fields are represented by the ellipsis (...).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_sse.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"uni_sse\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for get_user_status API (Active User) - JSON\nDESCRIPTION: This JSON structure shows a successful response from the 'get_user_status' API call. It includes the 'statuses' list, where each object details a user's ID along with 'active' and 'online' Unix timestamp fields. This indicates both the most recent application activity and online presence for the user. All fields are returned in sequential correspondence to the requested user IDs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/user_status.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"statuses\":[\n            {\n                \"user\":\"42\",\n                \"active\":1627107289,\n                \"online\":1627107289\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Bad Request (107)\nDESCRIPTION: Returned when the server cannot process the client's request because the data sent is malformed or violates the protocol specification. Retrying the same request is unlikely to succeed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    107\nMessage: \"bad request\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a PreparedMessage Cache with Otter in Go\nDESCRIPTION: Shows how to initialize a cache for `websocket.PreparedMessage` objects using the `maypok86/otter` library in Go, specifically for the Centrifuge project. The cache uses string keys (derived from message data) and stores pointers to `websocket.PreparedMessage`. It's configured using a builder pattern, setting a maximum size (`config.CompressionPreparedMessageCacheSize`), a cost function based on key length to manage memory, and a short time-to-live (TTL) of 1 second. This cache resides in the WebSocket transport layer to optimize broadcasts without coupling higher application layers to WebSocket specifics.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-08-19-optimizing-websocket-compression.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\notter.MustBuilder[string, *websocket.PreparedMessage](int(config.CompressionPreparedMessageCacheSize)).\n    Cost(func(key string, value *websocket.PreparedMessage) uint32 {\n        return 2 * uint32(len(key))\n    }).\n    WithTTL(time.Second).\n    Build()\n```\n\n----------------------------------------\n\nTITLE: Signal Handling in Bash\nDESCRIPTION: Command to send HUP signal to Centrifugo for reloading configuration. Used for reloading token secrets and channel options.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkill -HUP <PID>\n```\n\n----------------------------------------\n\nTITLE: Displaying Centrifugo Version using Shell\nDESCRIPTION: Executes the `centrifugo version` command to display the installed Centrifugo version information and then exits. This command does not require any configuration file.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/console_commands.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncentrifugo version\n```\n\n----------------------------------------\n\nTITLE: Generating Subscription Token with Python JWT\nDESCRIPTION: Python code example demonstrating how to generate a subscription token using the PyJWT library, including user ID and channel information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/channel_token_auth.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\n\ntoken = jwt.encode({\n    \"sub\": \"42\",\n    \"channel\": \"$gossips\"\n}, \"secret\", algorithm=\"HS256\").decode()\n\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 101 (Unauthorized)\nDESCRIPTION: Defines the client error code 101, indicating an \"unauthorized\" request. This error is returned in replies to client commands when the request lacks proper authorization.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    101\nMessage: \"unauthorized\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Replica Presence Reading\nDESCRIPTION: Configuration to enable reading presence information from Redis replica nodes instead of primary.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/scalability.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engine\": {\n    \"type\": \"redis\",\n    \"redis\": {\n      \"address\": \"redis+cluster://localhost:7000\",\n      \"replica_client\": {\n        \"enabled\": true\n      },\n      \"presence_read_from_replica\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Unload Handler for WebTransport\nDESCRIPTION: JavaScript event listener to properly close WebTransport sessions when the browser window is reloaded, preventing hanging connections.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/webtransport.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener(\"beforeunload\", (event) => { centrifuge.disconnect() });\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo PRO RPM Package on CentOS\nDESCRIPTION: These commands download and install the Centrifugo PRO RPM package on CentOS systems.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/install_and_run.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/centrifugal/centrifugo-pro/releases/download/v6.1.0/centrifugo-pro-6.1.0-0.x86_64.rpm\nsudo yum install centrifugo-pro-6.1.0-0.x86_64.rpm\n```\n\n----------------------------------------\n\nTITLE: Basic Publication Listener in JavaScript\nDESCRIPTION: Demonstrates how to set up a basic event listener for publications in a Centrifugo subscription\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/client_api.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsub.on('publication', function(ctx) {\n    console.log(\"received publication\", ctx);\n});\n```\n\n----------------------------------------\n\nTITLE: Full Channel Access Configuration\nDESCRIPTION: Example showing how to grant full access to all channels using wildcard matching\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/capabilities.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"caps\": [\n        {\n            \"channels\": [\"*\"],\n            \"match\": \"wildcard\",\n            \"allow\": [\"sub\", \"pub\", \"hst\", \"prs\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Loki Docker Service\nDESCRIPTION: Docker Compose configuration for setting up Loki log aggregation service.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-03-18-stream-loki-logs-to-browser-with-websocket-to-grpc-subscriptions.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  loki:\n    image: grafana/loki:2.9.5\n    ports:\n      - \"3100:3100\"\n```\n\n----------------------------------------\n\nTITLE: Example Minimal Centrifugo JSON Configuration\nDESCRIPTION: Provides a basic example of a Centrifugo configuration file in JSON format. It includes essential options like `allowed_origins` for CORS/CSRF protection, `token_hmac_secret_key` for JWT signature verification, and `api_key` for server API authorization. These keys should be kept secret.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_origins\": [\"http://localhost:3000\"],\n  \"token_hmac_secret_key\": \"<YOUR-SECRET-STRING-HERE>\",\n  \"api_key\": \"<YOUR-API-KEY-HERE>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Rate Limit Response\nDESCRIPTION: Example JSON response when the rate limit check is successful and tokens are available.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/distributed_rate_limit.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"allowed\": true,\n        \"tokens_left\": 9\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Ping RPC Extension in Centrifugo\nDESCRIPTION: This configuration enables the RPC ping extension in Centrifugo, allowing clients to measure round-trip time (RTT) to the server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rpc\": {\n    \"ping\": {\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Status to Disconnect Transforms for Unidirectional Clients in Centrifugo (JSON)\nDESCRIPTION: This snippet demonstrates how to configure direct status to disconnect transforms for unidirectional clients in Centrifugo. It shows how to map specific HTTP status codes directly to custom disconnect objects with different codes and reasons.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/proxy.md#2025-04-23_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": {\n    \"proxy\": {\n      \"connect\": {\n        \"enabled\": true,\n        \"http\": {\n          \"status_to_code_transforms\": [\n            {\"status_code\": 404, \"to_disconnect\": {\"code\": 4904, \"reason\": \"not found\"}},\n            {\"status_code\": 403, \"to_disconnect\": {\"code\": 4903, \"reason\": \"permission denied\"}},\n            {\"status_code\": 429, \"to_disconnect\": {\"code\": 4429, \"reason\": \"too many requests\"}}\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Minimal Configuration (JSON)\nDESCRIPTION: This JSON snippet represents a minimal configuration file for Centrifugo, specifying the HMAC secret key for tokens, API key, administrator password and secret, and enabling admin mode. Required for server initialization with access control. Place this file as config.json in the Centrifugo working directory.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hmac_secret_key\": \"my_secret\",\n  \"api_key\": \"my_api_key\",\n  \"admin_password\": \"password\",\n  \"admin_secret\": \"secret\",\n  \"admin\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Admin Web Handler Prefix in Centrifugo - JSON\nDESCRIPTION: This 'config.json' snippet customizes the path prefix for serving the admin web UI by setting 'handler_prefix' to '/admin'. With this configuration, the admin interface will be accessible under '/admin' route rather than at the root. This is useful when integrating Centrifugo with multiple web services or for routing purposes. The rest of the 'admin' configuration remains unchanged.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/admin_web.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"admin\\\": {\\n    ...\\n    \\\"handler_prefix\\\": \\\"/admin\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Channel Subscription Token with Centrifugo using Bash\nDESCRIPTION: Executes `centrifugo gensubtoken` to create an HMAC SHA-256 subscription token for the user specified by `-u` (ID `28282`) and the channel specified by `-s` (`channel`), using configuration from `config.json` (`-c`). The token expires in 1 week by default. Primarily for development use. Exits with code 1 on error.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/console_commands.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gensubtoken -c config.json -u 28282 -s channel\n```\n\n----------------------------------------\n\nTITLE: Defining DisconnectInappropriateProtocol Code and Reason in Centrifugal\nDESCRIPTION: Outlines the disconnection code `3506` with reason `\"inappropriate protocol\"`. This is triggered when a client's connection format is incompatible with the data received, like a JSON client getting binary data, often indicating a programming error.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nCode:   3506\nReason: \"inappropriate protocol\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Datasource in Grafana (YAML)\nDESCRIPTION: This YAML file configures Grafana to use Prometheus as the default data source, accessible at http://prometheus:9090, and uses proxy access. This configuration is automatically loaded by Grafana at startup from the provisioning directory. Dependencies: Grafana 7+ with provisioning folder, Prometheus accessible at the specified URL. Inputs are data source definitions, output is default Prometheus data source in Grafana.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/monitoring.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    url: http://prometheus:9090\n    access: proxy\n    isDefault: true\n```\n\n----------------------------------------\n\nTITLE: Pulling Centrifugo Docker Image (Shell)\nDESCRIPTION: Downloads the latest official Centrifugo server Docker image (`centrifugo/centrifugo`) from Docker Hub. Requires Docker to be installed and running.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/installation.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull centrifugo/centrifugo\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo from System Path\nDESCRIPTION: Command to run Centrifugo when the binary is available in the system PATH, allowing execution from any directory.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Django Database Configuration\nDESCRIPTION: Database settings for Django application\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'grandchat',\n        'USER': 'grandchat',\n        'PASSWORD': 'grandchat',\n        'HOST': 'db',\n        'PORT': '5432',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Centrifugo TOML Configuration\nDESCRIPTION: Provides an example of a Centrifugo configuration file in TOML format. It sets `allowed_origins`, secret keys (`token_hmac_secret_key`, `api_key`), and specifies the `log_level` as `debug` for development purposes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\nallowed_origins: [ \"http://localhost:3000\" ]\ntoken_hmac_secret_key = \"<YOUR-SECRET-STRING-HERE>\"\napi_key = \"<YOUR-API-KEY-HERE>\"\nlog_level = \"debug\"\n```\n\n----------------------------------------\n\nTITLE: Creating Distributed Publications Table in ClickHouse\nDESCRIPTION: Creates a distributed version of the publications table across the Centrifugo cluster, using channel-based hash distribution.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.operations_distributed\n(\n    `channel` String,\n    `source` String,\n    `size` UInt64,\n    `client` String,\n    `user` String,\n    `time` DateTime\n)\nENGINE = Distributed('centrifugo_cluster', 'centrifugo', 'publications', murmurHash3_64(channel))\n```\n\n----------------------------------------\n\nTITLE: Setting up WebSocket Handler in Go\nDESCRIPTION: Configures and registers a WebSocket handler for handling real-time connections\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nwsHandler := centrifuge.NewWebsocketHandler(node, centrifuge.WebsocketConfig{})\nhttp.Handle(\"/connection/websocket\", wsHandler)\n```\n\n----------------------------------------\n\nTITLE: Enabling Tenant Channels in Centrifugo Configuration\nDESCRIPTION: JSON configuration to enable tenant channels feature in Centrifugo PRO by setting the tenant_channels option to true.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/tenant_channels.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // rest of the config ...\n    \"tenant_channels\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Non-Terminal Disconnect Code 3011 (Force Reconnect)\nDESCRIPTION: Defines the non-terminal client disconnect code 3011, indicating a \"force reconnect\". This code is issued when the server intentionally disconnects a client for an unspecified reason but expects the client to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3011\nReason: \"force reconnect\"\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications Table in ClickHouse (SQL)\nDESCRIPTION: Specifies the schema for the 'centrifugo.notifications' table, capturing push notification event details such as uid, provider, device info, status, error codes, and timestamp. Designed for use with MergeTree engine for analytic queries and periodic snapshots. This table is marked as a PRO feature and is essential for notification auditing.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE centrifugo.notifications\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.notifications\n(\n    `uid` String,\n    `provider` String,\n    `type` String,\n    `recipient` String,\n    `device_id` String,\n    `platform` String,\n    `user` String,\n    `msg_id` String,\n    `status` String,\n    `error_message` String,\n    `error_code` String,\n    `time` DateTime\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Disabling Usage Stats\nDESCRIPTION: JSON configuration to disable anonymous usage statistics collection in Centrifugo.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"usage_stats_disable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3501 (Bad Request)\nDESCRIPTION: Defines the 'Bad Request' disconnect code (3501). This is a terminal code issued when a client sends data that severely violates the client protocol (e.g., malformed JSON, incorrect command structure). Clients will not automatically reconnect.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_28\n\nLANGUAGE: text\nCODE:\n```\nCode:   3501\nReason: \"bad request\"\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Disconnect Code 3010 (Insufficient State)\nDESCRIPTION: Defines the 'Insufficient State' disconnect code (3010). This non-terminal code is issued for channels with recovery when Centrifugo detects a potential message loss from the broker, indicating the client's stream position might be invalid. Disconnecting forces the client to reconnect and potentially restore the correct state. Frequent occurrences suggest broker communication issues.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nCode:   3010\nReason: \"insufficient state\"\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Already Subscribed (105)\nDESCRIPTION: Returned when a client attempts to subscribe to a channel to which it is already subscribed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    105\nMessage: \"already subscribed\"\n```\n\n----------------------------------------\n\nTITLE: Receiving a Subscribe Reply in JSON (Centrifugo)\nDESCRIPTION: Shows the JSON format for a successful server reply to a `subscribe` command. It echoes the original command's `id` (1) and includes an empty `subscribe` object, indicating successful subscription without additional data in this specific case. This demonstrates a successful command-reply interaction.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/client_protocol.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"subscribe\": {}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Uni-HTTP Stream and User Subscription (JSON)\nDESCRIPTION: This JSON snippet demonstrates configuring Centrifugo within `config.json` by enabling both the unidirectional HTTP streaming (`uni_http_stream: true`) and the feature for automatically subscribing connected users to their personal channel (`user_subscribe_to_personal: true`).\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_http_stream.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n    ...\n    \"uni_http_stream\": true,\n    \"user_subscribe_to_personal\": true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sub Refresh Proxy Response Example\nDESCRIPTION: Expected JSON response format from the application backend to a subscription refresh request. In this example, it updates the expiration time of the subscription.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/proxy.md#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": {\"expire_at\": 1565436268}}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in Centrifugo Configuration (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the logging level within the `log` section of the Centrifugo configuration file (`config.json`). It sets the `level` to `\"error\"`, meaning only error messages and above will be logged. Other possible values include `\"none\"`, `\"trace\"`, `\"debug\"`, `\"info\"`, and `\"warn\".\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"log\" : {\n    \"level\": \"error\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Django Migrations for Outbox Table - Bash\nDESCRIPTION: Provides bash commands to generate and apply Django migrations, creating the outbox table in a PostgreSQL database. Requires Docker Compose setup with 'backend' service running, Python, Django installed, and proper settings for database connectivity. Inputs: migration commands; output: the outbox table creation and ORM synchronization in the database.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/outbox_cdc.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec backend python manage.py makemigrations\ndocker compose exec backend python manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Example Output from Centrifugo `gensubtoken` Command (Text)\nDESCRIPTION: Shows the typical output format when running the `centrifugo gensubtoken` command. It displays the generated HMAC SHA-256 JWT, the user ID, channel, and the token's expiration time-to-live (TTL), confirming the successful generation of the token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/channel_token_auth.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nHMAC SHA-256 JWT for user \"123722\" and channel \"channel\" with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM3MjIiLCJleHAiOjE2NTU0NDg0MzgsImNoYW5uZWwiOiJjaGFubmVsIn0.JyRI3ovNV-abV8VxCmZCD556o2F2mNL1UoU58gNR-uI\n```\n\n----------------------------------------\n\nTITLE: Centrifugo SSE Ping Message Format (Data Event Example, None)\nDESCRIPTION: This snippet illustrates the SSE message format used by Centrifugo to send ping events to connected clients. The server emits events with event name 'ping' and empty 'data' field to help clients detect connection state. No dependencies are required to interpret this message format, but client code should handle such pings appropriately by ignoring them or using them for liveness checks. Output is an SSE data event.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_sse.md#2025-04-23_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nevent: ping\ndata:\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed Origins via Environment Variable (Bash)\nDESCRIPTION: This snippet shows how to configure multiple allowed origins for Centrifugo via an environment variable. The 'CENTRIFUGO_ALLOWED_ORIGINS' variable accepts a space-separated list of origins. It is used in environments where environment variables are preferred over config files, and expects a single string as input. No output is produced except the Centrifugo process reading this on startup.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CENTRIFUGO_ALLOWED_ORIGINS=\"https://mysite1.example.com https://mysite2.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Unsubscribe Code 2000 (Server Unsubscribe)\nDESCRIPTION: Defines the client unsubscribe code 2000, indicating a \"server unsubscribe\". This code is sent when a server explicitly unsubscribes a client via an API call. Clients receiving this code will not attempt to automatically resubscribe.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   2000\nReason: \"server unsubscribe\"\n```\n\n----------------------------------------\n\nTITLE: Receiving Streamed JSON and Pings from HTTP Streaming Endpoint (bash output)\nDESCRIPTION: This output sample illustrates what is displayed when connecting to the HTTP streaming endpoint using curl and a valid JWT token. No dependencies; simply the observed terminal output. Outputs: JSON payloads with client info, null pings, and data messages. Limitation: the data structure follows Centrifugo's streaming protocol.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/uni_http_stream.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n‚ùØ curl -X POST http://localhost:8000/connection/uni_http_stream \\\n    -d '{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIiLCJleHAiOjE2MjUwNzMyODh9.BxmS4R-X6YXMxLfXNhYRzeHvtu_M2NCaXF6HNu7VnDM\"}'\n{\"type\":6,\"data\":{\"client\":\"cf5dc239-83ac-4d0f-b9ed-9733d7f7b61b\",\"version\":\"dev\",\"subs\":{\"#user12\":{}}}}\nnull\nnull\nnull\nnull\nnull\n{\"channel\":\"#user12\",\"data\":{\"data\":{\"input\": \"hello\"}}}\n```\n\n----------------------------------------\n\nTITLE: Setting an Array Environment Variable in Bash\nDESCRIPTION: Illustrates setting an array configuration option (`allowed_origins`) via an environment variable. Multiple values are provided as a single space-separated string.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CENTRIFUGO_ALLOWED_ORIGINS=\"https://mysite1.example.com https://mysite2.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Terminal): Inappropriate Protocol (3506)\nDESCRIPTION: The client is disconnected because its connection format cannot handle the data being sent. A common example is a JSON-based client receiving binary data. This usually indicates a programming error, and reconnection without addressing the protocol mismatch is pointless.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3506\nReason: \"inappropriate protocol\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Distributed 'notifications' Table Schema in ClickHouse SQL\nDESCRIPTION: Shows the SQL `CREATE TABLE` statement resulting from `SHOW CREATE TABLE centrifugo.notifications_distributed;` (although the example output incorrectly names the created table `operations_distributed`). This definition creates a distributed table that sits on top of the local `notifications` table across nodes in the `centrifugo_cluster`. Data distribution for queries is handled based on a murmurHash3 hash of the `uid` column.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE centrifugo.notifications_distributed;\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.operations_distributed\n(\n    `uid` String,\n    `provider` String,\n    `type` String,\n    `recipient` String,\n    `device_id` String,\n    `platform` String,\n    `user` String,\n    `msg_id` String,\n    `status` String,\n    `error_message` String,\n    `error_code` String,\n    `time` DateTime\n)\nENGINE = Distributed('centrifugo_cluster', 'centrifugo', 'notifications', murmurHash3_64(uid)) ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo User Token with Default Expiry using Shell\nDESCRIPTION: Invokes the `centrifugo gentoken` command to generate an HMAC SHA-256 based connection token for a specific user ID (`-u 28282`), using settings from the provided configuration file (`-c config.json`). By default, the generated token expires in one week. Exits with status code 1 if an error occurs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/console_commands.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncentrifugo gentoken -c config.json -u 28282\n```\n\n----------------------------------------\n\nTITLE: Enabling Centrifugo v3 Protocol Compatibility in v4\nDESCRIPTION: Set the `use_client_protocol_v1_by_default` configuration option to `true` in Centrifugo v4 to allow older clients using the v1 protocol to connect during the migration period. This ensures existing clients continue working after upgrading the server but before updating client SDKs.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/migration-v4.md#2025-04-23_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\nuse_client_protocol_v1_by_default\n```\n\n----------------------------------------\n\nTITLE: Defining the PresenceManager Interface for Online Status in Centrifuge (Go)\nDESCRIPTION: This code defines the `PresenceManager` interface in Go. It specifies the methods required for managing real-time presence information within Centrifuge channels, including adding/removing client presence records (`AddPresence`, `RemovePresence`), retrieving the full list of present clients (`Presence`), and getting aggregated presence statistics like connection count and unique user count (`PresenceStats`). Implementations of this interface handle the storage and retrieval of presence data, often using external systems like Redis for scalability. It depends on the `centrifuge` and standard `time` packages.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2021-01-15-centrifuge-intro.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype PresenceManager interface {\n\tPresence(ch string) (map[string]*ClientInfo, error)\n\tPresenceStats(ch string) (PresenceStats, error)\n\tAddPresence(ch string, clientID string, info *ClientInfo, expire time.Duration) error\n\tRemovePresence(ch string, clientID string) error\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Second Centrifugo Instance on Alternate Port - Bash\nDESCRIPTION: This command launches an additional Centrifugo process configured to use the Nats broker, binding to port 8001 instead of the default. It enables horizontal scaling by allowing multiple Centrifugo servers to share the same Nats backend. Requires a valid 'config.json' and assumes Nats server is accessible.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/engines.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --broker=nats --config=config.json --port=8001\n\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Configuration Using TOML (TOML)\nDESCRIPTION: This snippet demonstrates a Centrifugo configuration file in TOML format. It sets allowed origins, secret and API keys, and adjusts the log level to debug for development insight. Prerequisites include a 'config.toml' file with valid TOML syntax. The code expects proper value replacement for keys before use. Input is a TOML config file; output is server behavior as configured.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\nallowed_origins: [ \"http://localhost:3000\" ]\\ntoken_hmac_secret_key = \"<YOUR-SECRET-STRING-HERE>\"\\napi_key = \"<YOUR-API-KEY-HERE>\"\\nlog_level = \"debug\"\n```\n\n----------------------------------------\n\nTITLE: Generating Subscription Token with Custom TTL using Centrifugo in Bash\nDESCRIPTION: Uses `centrifugo gentoken` (potentially a typo in the source, likely meant `gensubtoken`) to generate a token for user `28282` (`-u`) and channel `channel` (`-s`) using `config.json` (`-c`). The `-t 3600` flag sets the token TTL to 3600 seconds (1 hour), overriding the default. Useful for development. Exits with code 1 on error.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/console_commands.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo gentoken -c config.json -u 28282 -s channel -t 3600\n```\n\n----------------------------------------\n\nTITLE: Allowing All Origins (Discouraged) for Client Connections (JSON)\nDESCRIPTION: This JSON snippet demonstrates setting `client.allowed_origins` to `[\"*\"]` in Centrifugo's `config.json`, which effectively disables the origin check and allows WebSocket connections and CORS requests from any origin. This configuration is generally discouraged due to security risks, particularly when using the connect proxy feature.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"client\": {\n    \"allowed_origins\": [\n      \"*\"\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Protocol Version Parameter in JavaScript\nDESCRIPTION: When upgrading client SDKs, add a URL parameter to specify the new protocol version. This tells Centrifugo to use the modern generation of the protocol for the connection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/migration-v4.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n?cf_protocol_version=v2\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo PRO in Docker Container - docker\nDESCRIPTION: Runs the Centrifugo PRO server in a Docker container using the centrifugo/centrifugo-pro image. Requires Docker installed and the configuration file mounted from the host. Key parameters: --ulimit for open files, -v for volume mount (configuration), -p for port mapping, and image version. Input: config.json; Output: running Centrifugo service; Limitation: specific to Docker-based deployments.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/install_and_run.md#2025-04-23_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --ulimit nofile=262144:262144 -v /host/dir/with/config/file:/centrifugo -p 8000:8000 centrifugo/centrifugo-pro:v5.4.2 centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Python HTTP Server (bash)\nDESCRIPTION: This command uses the built-in Python 3 HTTP server module to serve files from the current directory on port 3000. It is an alternative to the Centrifugo static server and does not require any dependencies beyond Python 3. Useful for development and testing of static web assets.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/quickstart.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m http.server 3000\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Terminal Disconnect Code 3503 (Force No Reconnect)\nDESCRIPTION: Defines the terminal client disconnect code 3503, indicating a \"force disconnect\" with no reconnect advised. This code is issued when the server intentionally disconnects a client and explicitly instructs it not to attempt reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3503\nReason: \"force disconnect\"\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo from Any Directory\nDESCRIPTION: Command to run Centrifugo after it's been installed in the system path. This allows executing Centrifugo from any directory without specifying the full path.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Creating ClickHouse Subscriptions Table in SQL\nDESCRIPTION: This SQL snippet shows the structure of the 'subscriptions' table in ClickHouse for storing Centrifugo subscription data. It includes fields for client, user, channels, and timestamp.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/analytics.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE centrifugo.subscriptions\n(\n    `client` String,\n    `user` String,\n    `channels` Array(String),\n    `time` DateTime\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192\n```\n\n----------------------------------------\n\nTITLE: Starting the Nats Server (Bash)\nDESCRIPTION: A shell command to start the Nats messaging server. This is a prerequisite for using the Nats broker with Centrifugo. The example output shows the server initializing and listening for client connections on the default port 4222.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/engines.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n```\n$ nats-server\n[3569] 2020/07/08 20:28:44.324269 [INF] Starting nats-server version 2.1.7\n[3569] 2020/07/08 20:28:44.324400 [INF] Git commit [not set]\n[3569] 2020/07/08 20:28:44.325600 [INF] Listening for client connections on 0.0.0.0:4222\n[3569] 2020/07/08 20:28:44.325612 [INF] Server id is NDAM7GEHUXAKS5SGMA3QE6ZSO4IQUJP6EL3G2E2LJYREVMAMIOBE7JT4\n[3569] 2020/07/08 20:28:44.325617 [INF] Server is ready\n```\n```\n\n----------------------------------------\n\nTITLE: Example Redis Sentinel Configuration (Plain Text)\nDESCRIPTION: This snippet shows an example configuration file for a Redis Sentinel instance itself (not Centrifugo). It defines the port, the master to monitor (`mymaster`), its address, the required quorum (2), and various timeout settings for failure detection and failover.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/engines.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nport 26379\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 10000\nsentinel failover-timeout mymaster 60000\n```\n\n----------------------------------------\n\nTITLE: URL Parameter Addition for Protocol Version\nDESCRIPTION: Example showing the URL parameter required to specify protocol version v2 when connecting to Centrifugo v4.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/getting-started/migration-v4.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n?cf_protocol_version=v2\n```\n\n----------------------------------------\n\nTITLE: Echoing Data Over Bidirectional QUIC Streams in Go\nDESCRIPTION: Implements a basic server communication loop: accepts bidirectional streams from the client, echoes all received data back using io.Copy, and repeats. This function continues until an error occurs or session ends. Depends on the context, io, and quic packages. It assumes client-initiated streams and is suitable for simple echo functionality in testing or prototyping.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *WebTransportServerQuic) communicate(sess quic.Session) error {\n\tfor {\n\t\tstream, err := sess.AcceptStream(context.Background())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlog.Printf(\"stream accepted: %d\", stream.StreamID())\n\t\tif _, err := io.Copy(stream, stream); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Centrifugo Configuration File (Bash)\nDESCRIPTION: This Bash command `centrifugo genconfig` is used to generate a default configuration file (typically named `config.json`) for the Centrifugo server. This file contains various settings that control the server's behavior and features.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/uni_http_stream.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncentrifugo genconfig\n```\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo PRO via Docker - Bash\nDESCRIPTION: This snippet shows how to run Centrifugo PRO in a Docker container using the official centrifugo-pro image from Docker Hub. It sets a ulimit for open files, mounts a configuration directory from the host, exposes port 8000, and launches Centrifugo with a custom configuration file. Dependencies: Docker must be installed on the host, and a valid config.json should exist in the mounted directory.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/install_and_run.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --ulimit nofile=262144:262144 -v /host/dir/with/config/file:/centrifugo -p 8000:8000 centrifugo/centrifugo-pro:v4.0.0-beta.10 centrifugo -c config.json\n```\n\n----------------------------------------\n\nTITLE: Client Connection to Centrifugo with JWT\nDESCRIPTION: This diagram illustrates the process of a client connecting to Centrifugo using a JWT. The backend generates a JWT for the user, which is then used by the client to establish a persistent connection with Centrifugo and subscribe to channels for real-time updates.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/flow_diagrams.md#2025-04-23_snippet_0\n\nLANGUAGE: swimlanes\nCODE:\n```\nClient <- App Backend: JWT\n\nnote:\nThe backend generates JWT for a user and passes it to the client side.\n\nClient -> Centrifugo: Client connects to Centrifugo with JWT\n\n...: {fas-spinner} Persistent connection established\n\nClient -> Centrifugo: Client issues channel subscribe requests\n\nCentrifugo -->> Client: Client receives real-time updates from channels\n```\n\n----------------------------------------\n\nTITLE: Configuring System Limits for High-Performance WebSocket Server in Linux\nDESCRIPTION: This snippet shows the sysctl configuration used to optimize the Linux system for handling a large number of concurrent connections. It increases file descriptor limits, TCP memory, and socket buffer sizes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-02-10-million-connections-with-centrifugo.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfs.file-max = 3276750\nfs.nr_open = 1048576\nnet.ipv4.tcp_mem = 3086496\t4115330\t6172992\nnet.ipv4.tcp_rmem = 8192\t8388608\t16777216\nnet.ipv4.tcp_wmem = 4096\t4194394\t16777216\nnet.core.rmem_max = 33554432\nnet.core.wmem_max = 33554432\n```\n\n----------------------------------------\n\nTITLE: Generating Default Configuration for Centrifugo in Bash\nDESCRIPTION: This command generates a default configuration file for Centrifugo. This file typically contains settings required to run the Centrifugo server.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/connections.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ centrifugo genconfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Tarantool Engine\nDESCRIPTION: Basic configuration for using Tarantool as the Centrifugo engine.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/engines.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"engine\": \"tarantool\",\n    \"tarantool_address\": \"127.0.0.1:3301\"\n}\n```\n\n----------------------------------------\n\nTITLE: Client Connect Command Example - JSON\nDESCRIPTION: Represents a JSON-serialized Command message issued by the client to initiate a connection and authorize via optional token. Conforms to enumeration and schema requirements dictated by Centrifuge's Protobuf definition. Key parameters: id (request correlation), method (command type), params.token (authentication token), params.data (arbitrary client data). Input should include possible token and data fields; output is this JSON format for transmission.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": 0,\n    \"params\": {\n        \"token\": \"JWT\",\n        \"data\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Serializers in Django Rest Framework\nDESCRIPTION: This snippet creates serializers for messages, including nested serialization for user and room information.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass MessageRoomSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Room\n        fields = ['id', 'version']\n\n\nclass MessageSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    room = MessageRoomSerializer(read_only=True)\n\n    class Meta:\n        model = Message\n        fields = ['id', 'content', 'user', 'room', 'created_at']\n```\n\n----------------------------------------\n\nTITLE: Running Single ClickHouse Instance with Docker (Bash)\nDESCRIPTION: Bash command using Docker to start a single ClickHouse server instance locally. It maps port 9000, mounts a volume for data persistence (`/tmp/clickhouse` mapped to `/var/lib/clickhouse`), names the container `click`, and runs in interactive mode, removing the container on exit.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/pro/analytics.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v /tmp/clickhouse:/var/lib/clickhouse -p 9000:9000 --name click clickhouse/clickhouse-server\n```\n\n----------------------------------------\n\nTITLE: Defining Allowed Origins in Centrifugo v5 Configuration - JSON\nDESCRIPTION: Shows a Centrifugo v5 configuration example where the 'allowed_origins' option is set at the top level, allowing the server to specify which origins are permitted for client connections. No nesting is present, and this was the older structure before v6. The JSON format requires a Centrifugo installation that is compatible with v5 syntax, and the input is the configuration file itself.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2025-01-16-centrifugo-v6-released.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowed_origins\": [\"https://example.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Position Sync in Channel Namespace - JSON\nDESCRIPTION: Shows how to enable shared position synchronization for a specific channel namespace in Centrifugo configuration by setting the boolean `shared_position_sync` to true inside a namespace object. This setting reduces broker load from position sync requests in channels with many subscribers. Place within the `namespaces` array in `config.json`; `name`, `force_recovery`, and `shared_position_sync` are key parameters. Intended for advanced Centrifugo PRO deployments with positioning/recovery enabled.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/engine_optimizations.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"namespaces\": [\n        {\n            \"name\": \"example\",\n            \"force_recovery\": true,\n            \"shared_position_sync\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Permitting All Origins for Centrifugo (JSON Array Syntax)\nDESCRIPTION: Sets allowed_origins to [\"*\"] in the JSON config, which allows all origins to connect to Centrifugo. Generally not recommended for security, except in very controlled environments. Input: asterisk. Output: CORS open for all origins.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\n    \"*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining the `subscriptions` Table Schema in ClickHouse (SQL)\nDESCRIPTION: This SQL snippet displays the `CREATE TABLE` statement for the `centrifugo.subscriptions` table in ClickHouse. It defines columns to store client subscription details: client ID, user ID, an array of subscribed channels, and the timestamp. The table uses the `MergeTree` engine, partitions data by day (`toYYYYMMDD(time)`), orders by timestamp, and sets a Time-To-Live (TTL) of one day for the data.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/analytics.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nSHOW CREATE TABLE centrifugo.subscriptions\n\n‚îå‚îÄstatement‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ CREATE TABLE centrifugo.subscriptions\n(\n    `client` String,\n    `user` String,\n    `channels` Array(String),\n    `time` DateTime\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(time)\nORDER BY time\nTTL time + toIntervalDay(1)\nSETTINGS index_granularity = 8192 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring allowed_origins to Allow All Origins (Insecure) in JSON\nDESCRIPTION: Shows how to configure `allowed_origins` to allow connections from any origin using `\"*\"`. This configuration is discouraged as it can be insecure, especially when using the connect proxy feature.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"allowed_origins\": [\n    \"*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Vite React Project\nDESCRIPTION: Commands to create and initialize a new Vite project with React and TypeScript\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/frontend.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest\ncd frontend\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Service in Docker Compose (YAML)\nDESCRIPTION: This snippet adds a Prometheus service to a Docker Compose setup, using the official prom/prometheus image. It mounts the local prometheus.yml configuration, sets the config file path via the command, and exposes the Prometheus interface on port 9090. Dependencies: Docker and Docker Compose; requires a prometheus.yml file at the specified path. Inputs are Docker Compose service definitions, output is a running Prometheus container accessible locally.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/monitoring.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    image: prom/prometheus:v3.0.1\n    volumes:\n      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n    ports:\n      - 9090:9090\n```\n\n----------------------------------------\n\nTITLE: WebSocket Debug Session with wscat (bash)\nDESCRIPTION: Demonstrates a typical interactive debugging session using the 'wscat' CLI tool to connect to a Centrifugo WebSocket endpoint. No dependencies beyond 'wscat' (Node.js package). Shows sending and receiving JSON-protocol messages over a live WebSocket connection. Inputs are manual JSON commands; outputs are server responses and connection status notifications. Useful exclusively for debugging session flow and protocol inspection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/transports/websocket.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n‚ùØ wscat --connect ws://localhost:8000/connection/websocket\nConnected (press CTRL+C to quit)\n> {\"id\": 1, \"connect\": {}}\n< {\"id\":1,\"connect\":{\"client\":\"9ac9de4e-5289-4ad6-9aa7-8447f007083e\",\"version\":\"0.0.0\",\"ping\":25,\"pong\":true}}\n< {}\nDisconnected (code: 3012, reason: \"no pong\")\n```\n\n----------------------------------------\n\nTITLE: Subscribe Command Example - JSON Format\nDESCRIPTION: Example of a subscribe command sent from client to server in JSON format, demonstrating the command structure with ID and channel specification.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/transports/client_protocol.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"subscribe\": {\"channel\": \"example\"}}\n```\n\n----------------------------------------\n\nTITLE: Customizing Web UI Path for Centrifugo Admin Interface (JSON)\nDESCRIPTION: This JSON snippet adds the \"admin_web_path\" property to specify a custom directory for the web admin interface static files, allowing the use of a customized or modified web UI. \"admin\", \"admin_password\", and \"admin_secret\" must still be provided for authentication and access control. Dependency: accessible file path to the alternative web UI build. Inputs include path as string. The output is the admin web UI loaded from the specified location upon server start.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/admin_web.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    ...,\\n    \"admin\": true,\\n    \"admin_password\": \"<PASSWORD>\",\\n    \"admin_secret\": \"<SECRET>\",\\n    \"admin_web_path\": \"<PATH_TO_WEB_DIST>\"\\n}\n```\n\n----------------------------------------\n\nTITLE: TCP Connection Identification Tuple\nDESCRIPTION: Illustrates the four components (source IP, source port, destination IP, destination port) that uniquely identify a TCP connection within the operating system. This tuple is fundamental to understanding potential port exhaustion issues.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/infra_tuning.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsource ip | source port | destination ip | destination port\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure\nDESCRIPTION: Initial setup of project directory and docker-compose file\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/backend.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir grand-chat-tutorial\ncd grand-chat-tutorial\ntouch docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Tenant Channel Pattern Examples\nDESCRIPTION: Examples of tenant channel naming using the channel patterns approach, demonstrating hierarchical structure with tenant identifier.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/pro/tenant_channels.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[org_1]/users/mario\n[org_1]/posts/42\n```\n\n----------------------------------------\n\nTITLE: Analyzing Sockets in TIME_WAIT State Using Shell\nDESCRIPTION: This shell pipeline counts the number of socket descriptors in the TIME_WAIT state for a specific Centrifugo process. It uses 'netstat' to list all sockets, 'grep' to filter by state and process ID, and 'wc -l' to count the results. Replace <CENTRIFUGO_PID> with the actual process ID. No additional dependencies are required beyond standard Unix networking tools.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/infra_tuning.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnetstat -an |grep TIME_WAIT | grep <CENTRIFUGO_PID> | wc -l\n```\n\n----------------------------------------\n\nTITLE: Defining Client Connection Options in Centrifugo Config (JSON)\nDESCRIPTION: This JSON structure indicates where client connection options are configured in the Centrifugo configuration file (`config.json`). The `client` object groups various settings related to client behavior, security (like allowed origins and token authentication), performance tuning (like ping intervals and queue sizes), and connection limits.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"config.json\"\n{\n  \"client\": {\n    ...\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Starting a Local PostgreSQL Database Using Docker (Bash)\nDESCRIPTION: This bash command quickly starts a local PostgreSQL 15 server via Docker with the specified user and password, exposing port 5432. It's intended for development or testing of Centrifugo's database-backed user blocking. The command removes the container when stopped and runs interactively. Ensure Docker is installed and port 5432 is free before running.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/pro/user_block.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=pass -p 5432:5432 postgres:15\n```\n\n----------------------------------------\n\nTITLE: Running Centrifugo with a Configuration File (Shell)\nDESCRIPTION: This shell command demonstrates how to start the Centrifugo server, instructing it to load its configuration from the specified `config.json` file using the `--config` flag.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/tls.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```\n./centrifugo --config=config.json\n```\n```\n\n----------------------------------------\n\nTITLE: Tuning Worker Connections for High Load - Nginx - nginx\nDESCRIPTION: This short Nginx configuration snippet sets the worker_connections parameter within the events block, enabling the server to efficiently handle a large number of simultaneous persistent connections‚Äîcritical for high concurrency environments. This value should be adjusted depending on expected load and available system limits (especially file descriptors). Requires placement inside Nginx's main configuration and may require 'ulimit' tuning on the host system.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/server/load_balancing.md#2025-04-23_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nevents {\n    worker_connections 65535;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 105 (Already Subscribed)\nDESCRIPTION: Defines the 'Already Subscribed' error code (105) returned when a client attempts to subscribe to a channel it's already subscribed to. Centrifugo enforces a single subscription per channel per client, whether initiated client-side or server-side.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nCode:    105\nMessage: \"already subscribed\"\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Terminal Disconnect Code 3500 (Invalid Token)\nDESCRIPTION: Defines the terminal client disconnect code 3500, indicating an \"invalid token\". This code is issued when a client connects or attempts an operation with a token that is invalid or malformed. Clients receiving this code should not attempt reconnection without obtaining a valid token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3500\nReason: \"invalid token\"\n```\n\n----------------------------------------\n\nTITLE: Running Redis Benchmark with Pipelining\nDESCRIPTION: Running the redis-benchmark tool with pipelining enabled (-P 64) to demonstrate performance improvement with 100,000 operations.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2022-12-20-improving-redis-engine-performance.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> redis-benchmark -n 100000 -P 64 set key value\n\nSummary:\n  throughput summary: 666880.00 requests per second\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo PRO DEB Package on Debian/Ubuntu (Shell)\nDESCRIPTION: These shell commands guide the user on installing Centrifugo PRO on Debian or Ubuntu systems. The first command uses `wget` to download the specific version DEB package from the GitHub releases. The second command uses `dpkg` with `sudo` privileges to install the downloaded package.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/pro/install_and_run.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/centrifugal/centrifugo-pro/releases/download/v3.2.2/centrifugo-pro_3.2.2-0_amd64.deb\nsudo dpkg -i centrifugo-pro_3.2.2-0_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Defining a Boolean Value Structure for Option Overrides - JSON\nDESCRIPTION: This snippet demonstrates the JSON structure used for boolean overrides within Centrifugo SubscribeOptionOverride objects. The 'BoolValue' object encapsulates a 'value' key, which can be assigned true or false, to programmatically override channel namespace boolean options when configuring subscriptions. It is used for fine-tuned, per-connection configuration and must be formatted as a JSON object adhering to the Centrifugo server specification.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/authentication.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": true/false\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Football Match State\nDESCRIPTION: This JSON snippet represents the initial state of a football match, including team names and player lists. It demonstrates the structure of the data being sent over WebSocket in the experiment.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-05-30-real-time-data-compression-experiments.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"homeTeam\":{\n      \"name\":\"Real Madrid\",\n      \"players\":[\n         {\n            \"name\":\"John Doe\"\n         },\n         {\n            \"name\":\"Jane Smith\"\n         },\n         {\n            \"name\":\"Alex Johnson\"\n         },\n         {\n            \"name\":\"Chris Lee\"\n         },\n         {\n            \"name\":\"Pat Kim\"\n         },\n         {\n            \"name\":\"Sam Morgan\"\n         },\n         {\n            \"name\":\"Jamie Brown\"\n         },\n         {\n            \"name\":\"Casey Davis\"\n         },\n         {\n            \"name\":\"Morgan Garcia\"\n         },\n         {\n            \"name\":\"Taylor White\"\n         },\n         {\n            \"name\":\"Jordan Martinez\"\n         }\n      ]\n   },\n   \"awayTeam\":{\n      \"name\":\"Barcelona\",\n      \"players\":[\n         {\n            \"name\":\"Robin Wilson\"\n         },\n         {\n            \"name\":\"Drew Taylor\",\n            \"events\":[\n               {\n                  \"type\":\"RED_CARD\"\n               }\n            ]\n         },\n         {\n            \"name\":\"Jessie Bailey\"\n         },\n         {\n            \"name\":\"Casey Flores\"\n         },\n         {\n            \"name\":\"Jordan Walker\"\n         },\n         {\n            \"name\":\"Charlie Green\"\n         },\n         {\n            \"name\":\"Alex Adams\"\n         },\n         {\n            \"name\":\"Morgan Thompson\"\n         },\n         {\n            \"name\":\"Taylor Clark\"\n         },\n         {\n            \"name\":\"Jordan Hernandez\"\n         },\n         {\n            \"name\":\"Jamie Lewis\"\n         }\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 112 (Unrecoverable Position)\nDESCRIPTION: Defines the client error code 112, indicating an \"unrecoverable position\". This error occurs during a history query when the requested range of publications is no longer available in the stream, possibly due to an incorrect epoch being provided.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/server/codes.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    112\nMessage: \"unrecoverable position\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Room Reducer Action\nDESCRIPTION: Reducer action that removes a room from the state and its associated messages while maintaining sync across devices.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/frontend.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncase 'DELETE_ROOM': {\n  const roomId = action.payload.roomId;\n\n  const newRoomsById = {\n    ...state.roomsById,\n    [roomId]: null\n  };\n\n  const newRooms = state.rooms.filter((id: any) => id !== roomId);\n\n  const { [roomId]: deletedMessages, ...newMessagesByRoomId } = state.messagesByRoomId;\n\n  return {\n    ...state,\n    roomsById: newRoomsById,\n    rooms: newRooms,\n    messagesByRoomId: newMessagesByRoomId\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Users in Django\nDESCRIPTION: Utility function to create multiple fake users efficiently using Django's bulk_create functionality. Creates users with random usernames, emails and hashed passwords.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/tutorial/scale.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom django.utils.crypto import get_random_string\nfrom django.contrib.auth.hashers import make_password\n\n\ndef create_users(n):\n    users = []\n    total = 0\n    for _ in range(n):\n        username = get_random_string(10)\n        email = f\"{username}@example.com\"\n        password = get_random_string(50)\n        user = User(username=username, email=email, password=make_password(password, None))\n        users.append(user)\n\n        if len(users) >= 100:\n            total += len(users)\n            User.objects.bulk_create(users)\n            users = []\n            print(\"Total users created:\", total)\n\n    # Create remaining users.\n    if users:\n        total += len(users)\n        User.objects.bulk_create(users)\n        print(\"Total users created:\", total)\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigConverter Component in MDX/React\nDESCRIPTION: Renders the imported `ConfigConverter` component using JSX syntax within an MDX file. This component provides an interactive, client-side tool to help users convert Centrifugo v2 configuration files (JSON format) to the v3 format automatically.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/migration-v3.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigConverter />\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start a local development server that provides live previews of website changes.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Listing Centrifugo v2 to v3 Configuration Changes\nDESCRIPTION: Provides a comprehensive list of configuration option changes required when migrating from Centrifugo v2 to v3. This includes options that have been removed (e.g., `v3_use_offset`), renamed (e.g., `secret` to `token_hmac_secret_key`), and those that need their values converted to the duration format (e.g., `history_ttl`). This list serves as a reference for manual configuration updates.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/getting-started/migration-v3.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n`allowed_origins` is now required to be set to authorize requests with `Origin` header\n\n`v3_use_offset` removed\n\n`redis_streams` removed\n\n`tls_autocert_force_rsa` removed\n\n`redis_pubsub_num_workers` removed\n\n`sockjs_disable` removed\n\n`secret` renamed to `token_hmac_secret_key`\n\n`history_lifetime` renamed to `history_ttl`\n\n`history_recover` renamed to `recover`\n\n`client_presence_ping_interval` renamed to `client_presence_update_interval`\n\n`client_ping_interval` renamed to `websocket_ping_interval`\n\n`client_message_write_timeout` renamed to `websocket_write_timeout`\n\n`client_request_max_size` renamed to `websocket_message_size_limit`\n\n`client_presence_expire_interval` renamed to `presence_ttl`\n\n`memory_history_meta_ttl` renamed to `history_meta_ttl`\n\n`redis_history_meta_ttl` renamed to `history_meta_ttl`\n\n`redis_sequence_ttl` renamed to `history_meta_ttl`\n\n`redis_presence_ttl` renamed to `presence_ttl`\n\n`presence_ttl` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`websocket_write_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`websocket_ping_interval` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`client_presence_update_interval` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`history_ttl` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`history_meta_ttl` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`nats_dial_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`nats_write_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`graphite_interval` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`shutdown_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`shutdown_termination_delay` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`proxy_connect_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`proxy_refresh_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`proxy_rpc_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`proxy_subscribe_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`proxy_publish_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`client_expired_close_delay` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`client_expired_sub_close_delay` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`client_stale_close_delay` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`client_channel_position_check_delay` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`node_info_metrics_aggregate_interval` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`websocket_ping_interval` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`websocket_write_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`sockjs_heartbeat_delay` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`redis_idle_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`redis_connect_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`redis_read_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`redis_write_timeout` should be converted to [duration](../server/configuration.md#setting-time-duration-options)\n\n`redis_cluster_addrs` renamed to `redis_cluster_address`\n\n`redis_sentinels` renamed to `redis_sentinel_address`\n\n`redis_master_name` renamed to `redis_sentinel_master_name`\n```\n\n----------------------------------------\n\nTITLE: Frontend HTML Structure\nDESCRIPTION: HTML markup for the log streaming interface including form input and log display area.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-03-18-stream-loki-logs-to-browser-with-websocket-to-grpc-subscriptions.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Streaming logs with Centrifugo and Loki</title>\n</head>\n<body>\n    <div id=\"app\">\n        <form id=\"input\" onsubmit=\"subscribeToLogs(event)\">\n            <input type=\"text\" id=\"query\" autocomplete=\"off\" placeholder=\"Enter log query\" />\n            <button id=\"submit\" type=\"submit\">SUBSCRIBE</button>\n        </form>\n        <div id=\"logs\" style=\"margin-top: 20px;\">\n            <ul id=\"lines\"></ul>\n        </div>\n    </div>\n    <script src=\"https://unpkg.com/centrifuge@^5/dist/centrifuge.js\"></script>\n    <script src=\"app.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Error: Expired (110)\nDESCRIPTION: Indicates that the connection itself has expired, independent of any specific connection token.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:    110\nMessage: \"expired\"\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Client Disconnect (Non-Terminal): Subscription Expired (3006)\nDESCRIPTION: A specific client subscription has expired (e.g., due to channel-specific TTL). The client is disconnected and should re-authenticate and re-subscribe upon reconnection.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/codes.md#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nCode:   3006\nReason: \"subscription expired\"\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome Canary with QUIC Flags\nDESCRIPTION: Command to start Chrome Canary with custom flags for QUIC testing and certificate trust.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2020-10-16-experimenting-with-quic-transport.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/Applications/Google\\ Chrome\\ Canary.app/Contents/MacOS/Google\\ Chrome\\ Canary \\\n    --origin-to-force-quic-on=localhost:4433 \\\n    --ignore-certificate-errors-spki-list=pe2P0fQwecKFMc6kz3+Y5MuVwVwEtGXyST5vJeaOO/M=\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Centrifugo via Shell Script - Shell\nDESCRIPTION: This command line uses curl to fetch and pipe a shell script from centrifugal.dev to your shell, which automates downloading and unpacking the Centrifugo binary for Linux or MacOS environments. Requires curl, a UNIX-like shell, and internet access. Outputs the centrifugo binary in the current working directory.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/getting-started/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSLf https://centrifugal.dev/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Receiving an Asynchronous Unsubscribe Notification in JSON\nDESCRIPTION: This JSON object shows an asynchronous 'Unsubscribe' message sent from the server to a specific client, indicating that the server has unsubscribed this client from the specified 'channel'. It's identified by 'type': 3 within the 'result'. The 'data' object is typically empty.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-3/transports/protocol.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"type\":3,\n        \"channel\":\"ch1\",\n        \"data\":{}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Publication Message Structure in Protobuf for Centrifugo\nDESCRIPTION: This Protobuf definition specifies the structure of a Publication message in Centrifugo's unidirectional client protocol. It includes fields for data, client info, offset, and tags.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/transports/uni_client_protocol.md#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Publication {\n  bytes data = 4;\n  ClientInfo info = 5;\n  uint64 offset = 6;\n  map<string, string> tags = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Debug pprof Endpoint URL\nDESCRIPTION: This URL path becomes available when Centrifugo is started with debug mode enabled (`\"debug\": true`). It exposes Go's pprof interface for inspecting the internal state and performance metrics of the Centrifugo instance.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:8000/debug/pprof/\n```\n\n----------------------------------------\n\nTITLE: Default Bidirectional SSE (EventSource) Endpoint URL (Disabled)\nDESCRIPTION: This URL path provides bidirectional connection emulation using Server-Sent Events (SSE), also known as EventSource. This endpoint is disabled by default.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nws://localhost:8000/connection/sse\n```\n\n----------------------------------------\n\nTITLE: Initializing Django Project Structure with Docker Compose - Bash\nDESCRIPTION: Bootstraps a new Django project using bash commands. It creates relevant directories and files, initializes a Python virtual environment, installs Django, generates the project, moves it, and prepares structure for further development. Prerequisites: Python 3, bash shell.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/tutorial/backend.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir grand-chat-tutorial\\ncd grand-chat-tutorial\\ntouch docker-compose.yml\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\\n./env/bin/activate\\npython -m pip install Django\\npython -m django --version\\ndjango-admin startproject app\\nmv app backend\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd backend\\npython manage.py startapp chat\n```\n\n----------------------------------------\n\nTITLE: Final JSON Football Match State\nDESCRIPTION: This JSON snippet shows the final state of the football match, including scores, player events, and substitutions. It illustrates the complete data structure at the end of the simulation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/blog/2024-05-30-real-time-data-compression-experiments.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"homeTeam\":{\n      \"name\":\"Real Madrid\",\n      \"score\":3,\n      \"players\":[\n         {\n            \"name\":\"John Doe\",\n            \"events\":[\n               {\n                  \"type\":\"YELLOW_CARD\",\n                  \"minute\":6\n               },\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":39\n               }\n            ]\n         },\n         {\n            \"name\":\"Jane Smith\"\n         },\n         {\n            \"name\":\"Alex Johnson\"\n         },\n         {\n            \"name\":\"Chris Lee\",\n            \"events\":[\n               {\n                  \"type\":\"GOAL\",\n                  \"minute\":84\n               }\n            ]\n         },\n         {\n            \"name\":\"Pat Kim\"\n         },\n         {\n            \"name\":\"Sam Morgan\"\n         },\n         {\n            \"name\":\"Jamie Brown\",\n            \"events\":[\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":9\n               }\n            ]\n         },\n         {\n            \"name\":\"Casey Davis\",\n            \"events\":[\n               {\n                  \"type\":\"YELLOW_CARD\",\n                  \"minute\":81\n               }\n            ]\n         },\n         {\n            \"name\":\"Morgan Garcia\",\n            \"events\":[\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":15\n               },\n               {\n                  \"type\":\"GOAL\",\n                  \"minute\":30\n               },\n               {\n                  \"type\":\"YELLOW_CARD\",\n                  \"minute\":57\n               },\n               {\n                  \"type\":\"GOAL\",\n                  \"minute\":62\n               },\n               {\n                  \"type\":\"RED_CARD\",\n                  \"minute\":66\n               }\n            ]\n         },\n         {\n            \"name\":\"Taylor White\",\n            \"events\":[\n               {\n                  \"type\":\"YELLOW_CARD\",\n                  \"minute\":18\n               },\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":42\n               },\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":45\n               },\n               {\n                  \"type\":\"YELLOW_CARD\",\n                  \"minute\":69\n               },\n               {\n                  \"type\":\"RED_CARD\",\n                  \"minute\":72\n               }\n            ]\n         },\n         {\n            \"name\":\"Jordan Martinez\",\n            \"events\":[\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":21\n               },\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":24\n               }\n            ]\n         }\n      ]\n   },\n   \"awayTeam\":{\n      \"name\":\"Barcelona\",\n      \"score\":3,\n      \"players\":[\n         {\n            \"name\":\"Robin Wilson\"\n         },\n         {\n            \"name\":\"Drew Taylor\",\n            \"events\":[\n               {\n                  \"type\":\"RED_CARD\"\n               },\n               {\n                  \"type\":\"GOAL\",\n                  \"minute\":12\n               }\n            ]\n         },\n         {\n            \"name\":\"Jessie Bailey\"\n         },\n         {\n            \"name\":\"Casey Flores\",\n            \"events\":[\n               {\n                  \"type\":\"YELLOW_CARD\",\n                  \"minute\":78\n               }\n            ]\n         },\n         {\n            \"name\":\"Jordan Walker\",\n            \"events\":[\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":33\n               }\n            ]\n         },\n         {\n            \"name\":\"Charlie Green\",\n            \"events\":[\n               {\n                  \"type\":\"GOAL\",\n                  \"minute\":51\n               },\n               {\n                  \"type\":\"GOAL\",\n                  \"minute\":60\n               },\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":75\n               }\n            ]\n         },\n         {\n            \"name\":\"Alex Adams\"\n         },\n         {\n            \"name\":\"Morgan Thompson\",\n            \"events\":[\n               {\n                  \"type\":\"YELLOW_CARD\",\n                  \"minute\":27\n               },\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":48\n               }\n            ]\n         },\n         {\n            \"name\":\"Taylor Clark\",\n            \"events\":[\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":3\n               },\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":87\n               }\n            ]\n         },\n         {\n            \"name\":\"Jordan Hernandez\"\n         },\n         {\n            \"name\":\"Jamie Lewis\",\n            \"events\":[\n               {\n                  \"type\":\"YELLOW_CARD\",\n                  \"minute\":36\n               },\n               {\n                  \"type\":\"SUBSTITUTE\",\n                  \"minute\":54\n               }\n            ]\n         }\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centrifugo Client Error Code 107 (Bad Request)\nDESCRIPTION: Defines the 'Bad Request' error code (107) returned when the server cannot process received client data because it's malformed or violates the protocol specification. Retrying the same request is unlikely to succeed.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-5/server/codes.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nCode:    107\nMessage: \"bad request\"\n```\n\n----------------------------------------\n\nTITLE: Checking Centrifugo Version\nDESCRIPTION: Command to verify the installed version of Centrifugo after installation.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/docs/getting-started/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./centrifugo version\n```\n\n----------------------------------------\n\nTITLE: Displaying Centrifugo Version using Bash\nDESCRIPTION: Executes the `centrifugo version` command to display the currently installed version of Centrifugo and then exits.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/versioned_docs/version-4/server/console_commands.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncentrifugo version\n```\n\n----------------------------------------\n\nTITLE: Defining Crawler Rules in robots.txt\nDESCRIPTION: This configuration block defines rules for all web crawlers (`User-agent: *`). It explicitly allows access to the `sitemap.xml` file and disallows access to the `/__unused/` directory. It also specifies the location of the sitemap and the preferred host for the domain.\nSOURCE: https://github.com/centrifugal/centrifugal.dev/blob/main/static/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\n\nAllow: /sitemap.xml\nDisallow: /__unused/\nSitemap: https://centrifugal.dev/sitemap.xml\nHost: https://centrifugal.dev\n```"
  }
]