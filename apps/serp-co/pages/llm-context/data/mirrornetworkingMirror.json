[
  {
    "owner": "mirrornetworking",
    "repo": "mirror",
    "content": "TITLE: Implementing NetworkBehaviour in Unity with Mirror\nDESCRIPTION: Demonstrates a basic Player class using Mirror's NetworkBehaviour for multiplayer game development. Shows SyncVar usage, server/client-specific methods, and remote procedure calls (RPCs).\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/README.md#2025-04-06_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\npublic class Player : NetworkBehaviour\n{\n    // Synced automatically\n    [SyncVar] public int health = 100;\n    \n    // Lists, Dictionaries, Sets too\n    SyncList<Item> inventory = new SyncList<Item>();\n    \n    // Server/Client-only code\n    [Server] void LevelUp() {}\n    [Client] void Animate() {}\n    \n    void Update()\n    {\n        // isServer/isClient for runtime checks\n        if (isServer) Heal();\n        if (isClient) Move();\n    }\n    \n    // Zero overhead remote calls\n    [Command]   void CmdUseItem(int slot) {} // Client to Server\n    [ClientRpc] void RpcRespawn() {}         // Server to all Clients\n    [TargetRpc] void Hello() {}              // Server to one Client\n}\n```\n\n----------------------------------------\n\nTITLE: Mirror NetworkBehaviour Template Implementation in C#\nDESCRIPTION: A complete template for creating network-enabled MonoBehaviours using Mirror networking. It includes Unity callbacks, network lifecycle methods, and documentation for each method. This serves as a starting point for any networked object in a Mirror-based multiplayer game.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/52-Mirror__Network Behaviour-NewNetworkBehaviour.cs.txt#2025-04-06_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Mirror;\n\n/*\n\tDocumentation: https://mirror-networking.gitbook.io/docs/guides/networkbehaviour\n\tAPI Reference: https://mirror-networking.com/docs/api/Mirror.NetworkBehaviour.html\n*/\n\npublic class #SCRIPTNAME# : NetworkBehaviour\n{\n    #region Unity Callbacks\n\n    /// <summary>\n    /// Add your validation code here after the base.OnValidate(); call.\n    /// </summary>\n    protected override void OnValidate()\n    {\n        base.OnValidate();\n    }\n\n    // NOTE: Do not put objects in DontDestroyOnLoad (DDOL) in Awake.  You can do that in Start instead.\n    void Awake()\n    {\n    }\n\n    void Start()\n    {\n    }\n\n    #endregion\n\n    #region Start & Stop Callbacks\n\n    /// <summary>\n    /// This is invoked for NetworkBehaviour objects when they become active on the server.\n    /// <para>This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created.</para>\n    /// <para>This will be called for objects on a \"host\" as well as for object on a dedicated server.</para>\n    /// </summary>\n    public override void OnStartServer() { }\n\n    /// <summary>\n    /// Invoked on the server when the object is unspawned\n    /// <para>Useful for saving object data in persistent storage</para>\n    /// </summary>\n    public override void OnStopServer() { }\n\n    /// <summary>\n    /// Called on every NetworkBehaviour when it is activated on a client.\n    /// <para>Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client.</para>\n    /// </summary>\n    public override void OnStartClient() { }\n\n    /// <summary>\n    /// This is invoked on clients when the server has caused this object to be destroyed.\n    /// <para>This can be used as a hook to invoke effects or do client specific cleanup.</para>\n    /// </summary>\n    public override void OnStopClient() { }\n\n    /// <summary>\n    /// Called when the local player object has been set up.\n    /// <para>This happens after OnStartClient(), as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input.</para>\n    /// </summary>\n    public override void OnStartLocalPlayer() { }\n\n    /// <summary>\n    /// Called when the local player object is being stopped.\n    /// <para>This happens before OnStopClient(), as it may be triggered by an ownership message from the server, or because the player object is being destroyed. This is an appropriate place to deactivate components or functionality that should only be active for the local player, such as cameras and input.</para>\n    /// </summary>\n    public override void OnStopLocalPlayer() {}\n\n    /// <summary>\n    /// This is invoked on behaviours that have authority, based on context and <see cref=\"NetworkIdentity.hasAuthority\">NetworkIdentity.hasAuthority</see>.\n    /// <para>This is called after <see cref=\"OnStartServer\">OnStartServer</see> and before <see cref=\"OnStartClient\">OnStartClient.</see></para>\n    /// <para>When <see cref=\"NetworkIdentity.AssignClientAuthority\">AssignClientAuthority</see> is called on the server, this will be called on the client that owns the object. When an object is spawned with <see cref=\"NetworkServer.Spawn\">NetworkServer.Spawn</see> with a NetworkConnectionToClient parameter included, this will be called on the client that owns the object.</para>\n    /// </summary>\n    public override void OnStartAuthority() { }\n\n    /// <summary>\n    /// This is invoked on behaviours when authority is removed.\n    /// <para>When NetworkIdentity.RemoveClientAuthority is called on the server, this will be called on the client that owns the object.</para>\n    /// </summary>\n    public override void OnStopAuthority() { }\n\n    #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom NetworkManager in C# for Mirror Networking in Unity\nDESCRIPTION: This code snippet defines a custom NetworkManager class that extends Mirror's NetworkManager. It includes overrides for various Unity callbacks, scene management, server and client system callbacks, and start/stop events. This allows for fine-grained control over the networking behavior in a Unity game or application.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/50-Mirror__Network Manager-NewNetworkManager.cs.txt#2025-04-06_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\nusing Mirror;\n\npublic class #SCRIPTNAME# : NetworkManager\n{\n    public static new #SCRIPTNAME# singleton => (#SCRIPTNAME#)NetworkManager.singleton;\n\n    public override void Awake()\n    {\n        base.Awake();\n    }\n\n    #region Unity Callbacks\n\n    public override void OnValidate()\n    {\n        base.OnValidate();\n    }\n\n    public override void Start()\n    {\n        base.Start();\n    }\n\n    public override void LateUpdate()\n    {\n        base.LateUpdate();\n    }\n\n    public override void OnDestroy()\n    {\n        base.OnDestroy();\n    }\n\n    #endregion\n\n    #region Start & Stop\n\n    public override void ConfigureHeadlessFrameRate()\n    {\n        base.ConfigureHeadlessFrameRate();\n    }\n\n    public override void OnApplicationQuit()\n    {\n        base.OnApplicationQuit();\n    }\n\n    #endregion\n\n    #region Scene Management\n\n    public override void ServerChangeScene(string newSceneName)\n    {\n        base.ServerChangeScene(newSceneName);\n    }\n\n    public override void OnServerChangeScene(string newSceneName) { }\n\n    public override void OnServerSceneChanged(string sceneName) { }\n\n    public override void OnClientChangeScene(string newSceneName, SceneOperation sceneOperation, bool customHandling) { }\n\n    public override void OnClientSceneChanged()\n    {\n        base.OnClientSceneChanged();\n    }\n\n    #endregion\n\n    #region Server System Callbacks\n\n    public override void OnServerConnect(NetworkConnectionToClient conn) { }\n\n    public override void OnServerReady(NetworkConnectionToClient conn)\n    {\n        base.OnServerReady(conn);\n    }\n\n    public override void OnServerAddPlayer(NetworkConnectionToClient conn)\n    {\n        base.OnServerAddPlayer(conn);\n    }\n\n    public override void OnServerDisconnect(NetworkConnectionToClient conn)\n    {\n        base.OnServerDisconnect(conn);\n    }\n\n    public override void OnServerError(NetworkConnectionToClient conn, TransportError transportError, string message) { }\n\n    public override void OnServerTransportException(NetworkConnectionToClient conn, Exception exception) { }\n\n    #endregion\n\n    #region Client System Callbacks\n\n    public override void OnClientConnect()\n    {\n        base.OnClientConnect();\n    }\n\n    public override void OnClientDisconnect() { }\n\n    public override void OnClientNotReady() { }\n\n    public override void OnClientError(TransportError transportError, string message) { }\n\n    public override void OnClientTransportException(Exception exception) { }\n\n    #endregion\n\n    #region Start & Stop Callbacks\n\n    public override void OnStartHost() { }\n\n    public override void OnStartServer() { }\n\n    public override void OnStartClient() { }\n\n    public override void OnStopHost() { }\n\n    public override void OnStopServer() { }\n\n    public override void OnStopClient() { }\n\n    #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NetworkBehaviour Template in C# for Mirror Networking\nDESCRIPTION: A comprehensive NetworkBehaviour implementation that includes server, client, and authority lifecycle events. The class provides event actions for network state changes and includes documented callback methods for various networking scenarios.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/53-Mirror__Network Behaviour With Actions-NewNetworkBehaviourWithActions.cs.txt#2025-04-06_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Mirror;\n\n/*\n\tDocumentation: https://mirror-networking.gitbook.io/docs/guides/networkbehaviour\n\tAPI Reference: https://mirror-networking.com/docs/api/Mirror.NetworkBehaviour.html\n*/\n\npublic class #SCRIPTNAME# : NetworkBehaviour\n{\n    // You can adjust the parameters of the Actions below to suit your needs and pass the values through the Invoke() method.\n\n    public event Action<NetworkIdentity> OnStartServerAction;\n    public event Action<NetworkIdentity> OnStopServerAction;\n    public event Action OnStartClientAction;\n    public event Action OnStopClientAction;\n    public event Action OnStartLocalPlayerAction;\n    public event Action OnStopLocalPlayerAction;\n    public event Action OnStartAuthorityAction;\n    public event Action OnStopAuthorityAction;\n\n    #region Unity Callbacks\n\n    /// <summary>\n    /// Add your validation code here after the base.OnValidate(); call.\n    /// </summary>\n    protected override void OnValidate()\n    {\n        base.OnValidate();\n    }\n\n    // NOTE: Do not put objects in DontDestroyOnLoad (DDOL) in Awake.  You can do that in Start instead.\n    void Awake()\n    {\n        // Example of adding a handler for OnStartServerAction\n        // Multiple handlers can be added for actions\n        // Use -= to remove handlers\n        // Set the action to null to remove all handlers\n        OnStartServerAction += OnStartServerHandler;\n    }\n\n    void Start()\n    {\n    }\n\n    /// <summary>\n    /// Example handler for OnStartServerAction\n    /// </summary>\n    /// <remarks>Handlers can be assigned from, and exist, in any script</remarks>\n    public void OnStartServerHandler(NetworkIdentity identity)\n    {\n        Debug.Log($\"#SCRIPTNAME#.OnStartServerAction invoked for {identity}\");\n    }\n\n    #endregion\n\n    #region Start & Stop Callbacks\n\n    /// <summary>\n    /// This is invoked for NetworkBehaviour objects when they become active on the server.\n    /// <para>This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created.</para>\n    /// <para>This will be called for objects on a \"host\" as well as for object on a dedicated server.</para>\n    /// </summary>\n    public override void OnStartServer()\n    {\n        OnStartServerAction?.Invoke(netIdentity);\n    }\n\n    /// <summary>\n    /// Invoked on the server when the object is unspawned\n    /// <para>Useful for saving object data in persistent storage</para>\n    /// </summary>\n    public override void OnStopServer()\n    {\n        OnStopServerAction?.Invoke(netIdentity);\n    }\n\n    /// <summary>\n    /// Called on every NetworkBehaviour when it is activated on a client.\n    /// <para>Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client.</para>\n    /// </summary>\n    public override void OnStartClient()\n    {\n        OnStartClientAction?.Invoke();\n    }\n\n    /// <summary>\n    /// This is invoked on clients when the server has caused this object to be destroyed.\n    /// <para>This can be used as a hook to invoke effects or do client specific cleanup.</para>\n    /// </summary>\n    public override void OnStopClient()\n    {\n        OnStopClientAction?.Invoke();\n    }\n\n    /// <summary>\n    /// Called when the local player object has been set up.\n    /// <para>This happens after OnStartClient(), as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input.</para>\n    /// </summary>\n    public override void OnStartLocalPlayer()\n    {\n        OnStartLocalPlayerAction?.Invoke();\n    }\n\n    /// <summary>\n    /// Called when the local player object is being stopped.\n    /// <para>This happens before OnStopClient(), as it may be triggered by an ownership message from the server, or because the player object is being destroyed. This is an appropriate place to deactivate components or functionality that should only be active for the local player, such as cameras and input.</para>\n    /// </summary>\n    public override void OnStopLocalPlayer()\n    {\n        OnStopLocalPlayerAction?.Invoke();\n    }\n\n    /// <summary>\n    /// This is invoked on behaviours that have authority, based on context and <see cref=\"NetworkIdentity.hasAuthority\">NetworkIdentity.hasAuthority</see>.\n    /// <para>This is called after <see cref=\"OnStartServer\">OnStartServer</see> and before <see cref=\"OnStartClient\">OnStartClient.</see></para>\n    /// <para>When <see cref=\"NetworkIdentity.AssignClientAuthority\">AssignClientAuthority</see> is called on the server, this will be called on the client that owns the object. When an object is spawned with <see cref=\"NetworkServer.Spawn\">NetworkServer.Spawn</see> with a NetworkConnectionToClient parameter included, this will be called on the client that owns the object.</para>\n    /// </summary>\n    public override void OnStartAuthority()\n    {\n        OnStartAuthorityAction?.Invoke();\n    }\n\n    /// <summary>\n    /// This is invoked on behaviours when authority is removed.\n    /// <para>When NetworkIdentity.RemoveClientAuthority is called on the server, this will be called on the client that owns the object.</para>\n    /// </summary>\n    public override void OnStopAuthority()\n    {\n        OnStopAuthorityAction?.Invoke();\n    }\n\n    #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended NetworkManager in Unity with Mirror Framework\nDESCRIPTION: A comprehensive NetworkManager implementation that extends Mirror's base NetworkManager class. It adds custom event handling for network operations, scene management, and server/client communications. The class includes Unity lifecycle methods, scene management functions, and network callback overrides with additional event actions.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\nusing Mirror;\n\npublic class #SCRIPTNAME# : NetworkManager\n{\n    public event Action OnStartAction;\n    public event Action OnDestroyAction;\n    public event Action OnApplicationQuitAction;\n    public event Action<string> ServerChangeSceneAction;\n    public event Action<string> OnServerChangeSceneAction;\n    public event Action<string> OnServerSceneChangedAction;\n    public event Action<string, SceneOperation, bool> OnClientChangeSceneAction;\n    public event Action OnClientSceneChangedAction;\n    public event Action<NetworkConnectionToClient> OnServerConnectAction;\n    public event Action<NetworkConnectionToClient> OnServerReadyAction;\n    public event Action<NetworkConnectionToClient> OnServerAddPlayerAction;\n    public event Action<NetworkConnectionToClient> OnServerDisconnectAction;\n    public event Action<NetworkConnectionToClient, TransportError, string> OnServerErrorAction;\n    public event Action<NetworkConnectionToClient, Exception> OnServerTransportExceptionAction;\n    public event Action OnClientConnectAction;\n    public event Action OnClientDisconnectAction;\n    public event Action OnClientNotReadyAction;\n    public event Action<TransportError, string> OnClientErrorAction;\n    public event Action<Exception> OnClientTransportExceptionAction;\n    public event Action OnStartServerAction;\n    public event Action OnStopServerAction;\n    public event Action OnStartHostAction;\n    public event Action OnStopHostAction;\n    public event Action OnStartClientAction;\n    public event Action OnStopClientAction;\n\n    public static new #SCRIPTNAME# singleton => (#SCRIPTNAME#)NetworkManager.singleton;\n\n    public override void Awake()\n    {\n        base.Awake();\n        OnStartAction += OnStartedActionHandler;\n    }\n\n    public void OnStartedActionHandler()\n    {\n        Debug.Log(\"#SCRIPTNAME#.OnStartAction invoked\");\n    }\n\n    public override void OnValidate()\n    {\n        base.OnValidate();\n    }\n\n    public override void Start()\n    {\n        OnStartAction?.Invoke();\n        base.Start();\n    }\n\n    public override void LateUpdate()\n    {\n        base.LateUpdate();\n    }\n\n    public override void OnDestroy()\n    {\n        OnDestroyAction?.Invoke();\n        base.OnDestroy();\n    }\n\n    public override void ConfigureHeadlessFrameRate()\n    {\n        base.ConfigureHeadlessFrameRate();\n    }\n\n    public override void OnApplicationQuit()\n    {\n        OnApplicationQuitAction?.Invoke();\n        base.OnApplicationQuit();\n    }\n\n    public override void ServerChangeScene(string newSceneName)\n    {\n        ServerChangeSceneAction?.Invoke(newSceneName);\n        base.ServerChangeScene(newSceneName);\n    }\n\n    public override void OnServerChangeScene(string newSceneName)\n    {\n        OnServerChangeSceneAction?.Invoke(newSceneName);\n    }\n\n    public override void OnServerSceneChanged(string sceneName)\n    {\n        OnServerSceneChangedAction?.Invoke(sceneName);\n    }\n\n    public override void OnClientChangeScene(string newSceneName, SceneOperation sceneOperation, bool customHandling)\n    {\n        OnClientChangeSceneAction?.Invoke(newSceneName, sceneOperation, customHandling);\n    }\n\n    public override void OnClientSceneChanged()\n    {\n        OnClientSceneChangedAction?.Invoke();\n        base.OnClientSceneChanged();\n    }\n\n    public override void OnServerConnect(NetworkConnectionToClient conn)\n    {\n        OnServerConnectAction?.Invoke(conn);\n    }\n\n    public override void OnServerReady(NetworkConnectionToClient conn)\n    {\n        OnServerReadyAction?.Invoke(conn);\n        base.OnServerReady(conn);\n    }\n\n    public override void OnServerAddPlayer(NetworkConnectionToClient conn)\n    {\n        OnServerAddPlayerAction?.Invoke(conn);\n        base.OnServerAddPlayer(conn);\n    }\n\n    public override void OnServerDisconnect(NetworkConnectionToClient conn)\n    {\n        OnServerDisconnectAction?.Invoke(conn);\n        base.OnServerDisconnect(conn);\n    }\n\n    public override void OnServerError(NetworkConnectionToClient conn, TransportError transportError, string message)\n    {\n        OnServerErrorAction?.Invoke(conn, transportError, message);\n    }\n\n    public override void OnServerTransportException(NetworkConnectionToClient conn, Exception exception)\n    {\n        OnServerTransportExceptionAction?.Invoke(conn, exception);\n    }\n```\n\n----------------------------------------\n\nTITLE: Network Transform Base Implementation in C#\nDESCRIPTION: A template class that extends NetworkTransformBase to handle network transform synchronization. Includes methods for construction, getting/setting transform properties, handling teleportation, and managing state resets. Contains debug GUI functionality for development builds.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/57-Mirror__Network Transform-NewNetworkTransform.cs.txt#2025-04-06_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#define onlySyncOnChange_BANDWIDTH_SAVING\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Mirror;\n\n/*\n    Documentation: https://mirror-networking.gitbook.io/docs/components/network-transform\n    API Reference: https://mirror-networking.com/docs/api/Mirror.NetworkTransformBase.html\n*/\n\npublic class #SCRIPTNAME# : NetworkTransformBase\n{\n    #region Unity Callbacks\n\n    protected override void Awake() { }\n\n    protected override void OnValidate()\n    {\n        base.OnValidate();\n    }\n\n    /// <summary>\n    /// This calls Reset()\n    /// </summary>\n    protected override void OnEnable()\n    {\n        base.OnEnable();\n    }\n\n    /// <summary>\n    /// This calls Reset()\n    /// </summary>\n    protected override void OnDisable()\n    {\n        base.OnDisable();\n    }\n\n    #endregion\n\n    #region NT Base Callbacks\n\n    /// <summary>\n    /// NTSnapshot struct is created here\n    /// </summary>\n    protected override TransformSnapshot Construct()\n    {\n        return base.Construct();\n    }\n\n    protected override Vector3 GetPosition()\n    {\n        return base.GetPosition();\n    }\n\n    protected override Quaternion GetRotation()\n    {\n        return base.GetRotation();\n    }\n\n    protected override Vector3 GetScale()\n    {\n        return base.GetScale();\n    }\n\n    protected override void SetPosition(Vector3 position)\n    {\n        base.SetPosition(position);\n    }\n\n    protected override void SetRotation(Quaternion rotation)\n    {\n        base.SetRotation(rotation);\n    }\n\n    protected override void SetScale(Vector3 scale)\n    {\n        base.SetScale(scale);\n    }\n\n    /// <summary>\n    /// localPosition, localRotation, and localScale are set here:\n    /// interpolated values are used if interpolation is enabled.\n    /// goal values are used if interpolation is disabled.\n    /// </summary>\n    protected override void Apply(TransformSnapshot interpolated, TransformSnapshot endGoal)\n    {\n        base.Apply(interpolated, endGoal);\n    }\n\n    /// <summary>\n    /// Called by both CmdTeleport and RpcTeleport on server and clients, respectively.\n    /// Here you can disable a Character Controller before calling the base method,\n    /// and re-enable it after the base method call to avoid conflicting with it.\n    /// </summary>\n    protected override void OnTeleport(Vector3 destination)\n    {\n        base.OnTeleport(destination);\n    }\n\n    /// <summary>\n    /// Called by both CmdTeleport and RpcTeleport on server and clients, respectively.\n    /// Here you can disable a Character Controller before calling the base method,\n    /// and re-enable it after the base method call to avoid conflicting with it.\n    /// </summary>\n    protected override void OnTeleport(Vector3 destination, Quaternion rotation)\n    {\n        base.OnTeleport(destination, rotation);\n    }\n\n    /// <summary>\n    /// Buffers are cleared and interpolation times are reset to zero here.\n    /// This may be called when you are implementing some system of not sending\n    /// if nothing changed, or just plain resetting if you have not received data\n    /// for some time, as this will prevent a long interpolation period between old\n    /// and just received data, as it will look like a lag. Reset() should also be\n    /// called when authority is changed to another client or server, to prevent\n    /// old buffers bugging out the interpolation if authority is changed back.\n    /// </summary>\n    public override void ResetState()\n    {\n        base.ResetState();\n    }\n\n    #endregion\n\n    #region GUI\n\n    // OnGUI allocates even if it does nothing. avoid in release.\n#if UNITY_EDITOR || DEVELOPMENT_BUILD\n\n    protected override void OnGUI()\n    {\n        base.OnGUI();\n    }\n\n    protected override void DrawGizmos(SortedList<double, TransformSnapshot> buffer)\n    {\n        base.DrawGizmos(buffer);\n    }\n\n    protected override void OnDrawGizmos()\n    {\n        base.OnDrawGizmos();\n    }\n\n#endif\n\n    #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NetworkRoomManager in Unity with Mirror\nDESCRIPTION: Complete implementation template for a NetworkRoomManager subclass that handles room-based networking functionality. Includes server callbacks for player management, scene handling, and client connection events, as well as client-side callbacks for room events and UI handling.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/54-Mirror__Network Room Manager-NewNetworkRoomManager.cs.txt#2025-04-06_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing UnityEngine;\nusing Mirror;\n\npublic class #SCRIPTNAME# : NetworkRoomManager\n{\n    public static new #SCRIPTNAME# singleton => (#SCRIPTNAME#)NetworkRoomManager.singleton;\n\n    #region Server Callbacks\n\n    public override void OnRoomStartServer() { }\n\n    public override void OnRoomStopServer() { }\n\n    public override void OnRoomStartHost() { }\n\n    public override void OnRoomStopHost() { }\n\n    public override void OnRoomServerConnect(NetworkConnectionToClient conn) { }\n\n    public override void OnRoomServerDisconnect(NetworkConnectionToClient conn) { }\n\n    public override void OnRoomServerSceneChanged(string sceneName) { }\n\n    public override GameObject OnRoomServerCreateRoomPlayer(NetworkConnectionToClient conn)\n    {\n        return base.OnRoomServerCreateRoomPlayer(conn);\n    }\n\n    public override GameObject OnRoomServerCreateGamePlayer(NetworkConnectionToClient conn, GameObject roomPlayer)\n    {\n        return base.OnRoomServerCreateGamePlayer(conn, roomPlayer);\n    }\n\n    public override void OnRoomServerAddPlayer(NetworkConnectionToClient conn)\n    {\n        base.OnRoomServerAddPlayer(conn);\n    }\n\n    public override bool OnRoomServerSceneLoadedForPlayer(NetworkConnectionToClient conn, GameObject roomPlayer, GameObject gamePlayer)\n    {\n        return base.OnRoomServerSceneLoadedForPlayer(conn, roomPlayer, gamePlayer);\n    }\n\n    public override void ReadyStatusChanged()\n    {\n        base.ReadyStatusChanged();\n    }\n\n    public override void OnRoomServerPlayersReady()\n    {\n        base.OnRoomServerPlayersReady();\n    }\n\n    public override void OnRoomServerPlayersNotReady() { }\n\n    #endregion\n\n    #region Client Callbacks\n\n    public override void OnRoomClientEnter() { }\n\n    public override void OnRoomClientExit() { }\n\n    public override void OnRoomClientConnect() { }\n\n    public override void OnRoomClientDisconnect() { }\n\n    public override void OnRoomStartClient() { }\n\n    public override void OnRoomStopClient() { }\n\n    public override void OnRoomClientSceneChanged() { }\n\n    #endregion\n\n    #region Optional UI\n\n    public override void OnGUI()\n    {\n        base.OnGUI();\n    }\n\n    #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NetworkRoomPlayer in C# for Mirror Networking\nDESCRIPTION: This code snippet defines a custom NetworkRoomPlayer class that extends the base NetworkRoomPlayer from Mirror. It includes overrides for various lifecycle methods and hooks for server, client, and room-related events. The class is designed to work with the NetworkRoomManager to create a multiplayer room system in Unity.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/55-Mirror__Network Room Player-NewNetworkRoomPlayer.cs.txt#2025-04-06_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing UnityEngine;\nusing Mirror;\n\n/// <summary>\n/// This component works in conjunction with the NetworkRoomManager to make up the multiplayer room system.\n/// The RoomPrefab object of the NetworkRoomManager must have this component on it.\n/// This component holds basic room player data required for the room to function.\n/// Game specific data for room players can be put in other components on the RoomPrefab or in scripts derived from NetworkRoomPlayer.\n/// </summary>\npublic class #SCRIPTNAME# : NetworkRoomPlayer\n{\n    #region Start & Stop Callbacks\n\n    /// <summary>\n    /// This is invoked for NetworkBehaviour objects when they become active on the server.\n    /// <para>This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created.</para>\n    /// <para>This will be called for objects on a \"host\" as well as for object on a dedicated server.</para>\n    /// </summary>\n    public override void OnStartServer() { }\n\n    /// <summary>\n    /// Invoked on the server when the object is unspawned\n    /// <para>Useful for saving object data in persistent storage</para>\n    /// </summary>\n    public override void OnStopServer() { }\n\n    /// <summary>\n    /// Called on every NetworkBehaviour when it is activated on a client.\n    /// <para>Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client.</para>\n    /// </summary>\n    public override void OnStartClient() { }\n\n    /// <summary>\n    /// This is invoked on clients when the server has caused this object to be destroyed.\n    /// <para>This can be used as a hook to invoke effects or do client specific cleanup.</para>\n    /// </summary>\n    public override void OnStopClient() { }\n\n    /// <summary>\n    /// Called when the local player object has been set up.\n    /// <para>This happens after OnStartClient(), as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input.</para>\n    /// </summary>\n    public override void OnStartLocalPlayer() { }\n\n    /// <summary>\n    /// This is invoked on behaviours that have authority, based on context and <see cref=\"NetworkIdentity.hasAuthority\">NetworkIdentity.hasAuthority</see>.\n    /// <para>This is called after <see cref=\"OnStartServer\">OnStartServer</see> and before <see cref=\"OnStartClient\">OnStartClient.</see></para>\n    /// <para>When <see cref=\"NetworkIdentity.AssignClientAuthority\"/> is called on the server, this will be called on the client that owns the object. When an object is spawned with <see cref=\"NetworkServer.Spawn\">NetworkServer.Spawn</see> with a NetworkConnectionToClient parameter included, this will be called on the client that owns the object.</para>\n    /// </summary>\n    public override void OnStartAuthority() { }\n\n    /// <summary>\n    /// This is invoked on behaviours when authority is removed.\n    /// <para>When NetworkIdentity.RemoveClientAuthority is called on the server, this will be called on the client that owns the object.</para>\n    /// </summary>\n    public override void OnStopAuthority() { }\n\n    #endregion\n\n    #region Room Client Callbacks\n\n    /// <summary>\n    /// This is a hook that is invoked on all player objects when entering the room.\n    /// <para>Note: isLocalPlayer is not guaranteed to be set until OnStartLocalPlayer is called.</para>\n    /// </summary>\n    public override void OnClientEnterRoom() { }\n\n    /// <summary>\n    /// This is a hook that is invoked on all player objects when exiting the room.\n    /// </summary>\n    public override void OnClientExitRoom() { }\n\n    #endregion\n\n    #region SyncVar Hooks\n\n    /// <summary>\n    /// This is a hook that is invoked on clients when the index changes.\n    /// </summary>\n    /// <param name=\"oldIndex\">The old index value</param>\n    /// <param name=\"newIndex\">The new index value</param>\n    public override void IndexChanged(int oldIndex, int newIndex) { }\n\n    /// <summary>\n    /// This is a hook that is invoked on clients when a RoomPlayer switches between ready or not ready.\n    /// <para>This function is called when the a client player calls SendReadyToBeginMessage() or SendNotReadyToBeginMessage().</para>\n    /// </summary>\n    /// <param name=\"oldReadyState\">The old readyState value</param>\n    /// <param name=\"newReadyState\">The new readyState value</param>\n    public override void ReadyStateChanged(bool oldReadyState, bool newReadyState) { }\n\n    #endregion\n\n    #region Optional UI\n\n    public override void OnGUI()\n    {\n        base.OnGUI();\n    }\n\n    #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a NetworkAuthenticator Class in Mirror for Unity\nDESCRIPTION: A complete template for implementing a custom network authenticator in Mirror. It defines authentication message structures and implements both server and client-side authentication logic including message handling, connection verification, and proper resource cleanup. This template serves as a starting point for implementing various authentication mechanisms.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/52-Mirror__Network Authenticator-NewNetworkAuthenticator.cs.txt#2025-04-06_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Mirror;\nusing UnityEngine;\n\n/*\n    Documentation: https://mirror-networking.gitbook.io/docs/components/network-authenticators\n    API Reference: https://mirror-networking.com/docs/api/Mirror.NetworkAuthenticator.html\n*/\n\npublic class #SCRIPTNAME# : NetworkAuthenticator\n{\n    #region Messages\n\n    public struct AuthRequestMessage : NetworkMessage { }\n\n    public struct AuthResponseMessage : NetworkMessage { }\n\n    #endregion\n\n    #region Server\n\n    /// <summary>\n    /// Called on server from StartServer to initialize the Authenticator\n    /// <para>Server message handlers should be registered in this method.</para>\n    /// </summary>\n    public override void OnStartServer()\n    {\n        // register a handler for the authentication request we expect from client\n        NetworkServer.RegisterHandler<AuthRequestMessage>(OnAuthRequestMessage, false);\n    }\n\n    /// <summary>\n    /// Called on server from OnServerConnectInternal when a client needs to authenticate\n    /// </summary>\n    /// <param name=\"conn\">Connection to client.</param>\n    public override void OnServerAuthenticate(NetworkConnectionToClient conn) { }\n\n    /// <summary>\n    /// Called on server when the client's AuthRequestMessage arrives\n    /// </summary>\n    /// <param name=\"conn\">Connection to client.</param>\n    /// <param name=\"msg\">The message payload</param>\n    public void OnAuthRequestMessage(NetworkConnectionToClient conn, AuthRequestMessage msg)\n    {\n        AuthResponseMessage authResponseMessage = new AuthResponseMessage();\n        conn.Send(authResponseMessage);\n\n        // Accept the successful authentication\n        ServerAccept(conn);\n    }\n\n    /// <summary>\n    /// Called when server stops, used to unregister message handlers if needed.\n    /// </summary>\n    public override void OnStopServer()\n    {\n        // Unregister the handler for the authentication request\n        NetworkServer.UnregisterHandler<AuthRequestMessage>();\n    }\n\n    #endregion\n\n    #region Client\n\n    /// <summary>\n    /// Called on client from StartClient to initialize the Authenticator\n    /// <para>Client message handlers should be registered in this method.</para>\n    /// </summary>\n    public override void OnStartClient()\n    {\n        // register a handler for the authentication response we expect from server\n        NetworkClient.RegisterHandler<AuthResponseMessage>(OnAuthResponseMessage, false);\n    }\n\n    /// <summary>\n    /// Called on client from OnClientConnectInternal when a client needs to authenticate\n    /// </summary>\n    public override void OnClientAuthenticate()\n    {\n        AuthRequestMessage authRequestMessage = new AuthRequestMessage();\n        NetworkClient.Send(authRequestMessage);\n    }\n\n    /// <summary>\n    /// Called on client when the server's AuthResponseMessage arrives\n    /// </summary>\n    /// <param name=\"msg\">The message payload</param>\n    public void OnAuthResponseMessage(AuthResponseMessage msg)\n    {\n        // Authentication has been accepted\n        ClientAccept();\n    }\n\n    /// <summary>\n    /// Called when client stops, used to unregister message handlers if needed.\n    /// </summary>\n    public override void OnStopClient()\n    {\n        // Unregister the handler for the authentication response\n        NetworkClient.UnregisterHandler<AuthResponseMessage>();\n    }\n\n    #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interest Management Base Class in C#\nDESCRIPTION: A complete template class that extends Mirror's InterestManagement system. It includes essential methods for managing network object visibility, observer rebuilding, and host-specific visibility handling. This template provides default implementations that can be customized for specific game requirements.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/54-Mirror__Custom Interest Management-CustomInterestManagement.cs.txt#2025-04-06_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Mirror;\n\npublic class #SCRIPTNAME# : InterestManagement\n{\n    [ServerCallback]\n    public override bool OnCheckObserver(NetworkIdentity identity, NetworkConnectionToClient newObserver)\n    {\n        return true;\n    }\n\n    [ServerCallback]\n    public override void OnRebuildObservers(NetworkIdentity identity, HashSet<NetworkConnectionToClient> newObservers)\n    {\n        foreach (NetworkConnectionToClient conn in NetworkServer.connections.Values)\n            newObservers.Add(conn);\n    }\n\n    [ServerCallback]\n    public override void OnSpawned(NetworkIdentity identity) { }\n\n    [ServerCallback]\n    public override void OnDestroyed(NetworkIdentity identity) { }\n\n    [ServerCallback]\n    public override void SetHostVisibility(NetworkIdentity identity, bool visible)\n    {\n        base.SetHostVisibility(identity, visible);\n    }\n\n    [ServerCallback]\n    public override void ResetState() { }\n\n    [ServerCallback]\n    void Update()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Instructions for Multiple Additive Scenes\nDESCRIPTION: Instructions for setting up build settings and scene configuration for multiple additive scenes in Mirror Networking. Details the required scene order and configuration of the MultiScene Network Manager.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Examples/MultipleAdditiveScenes/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Multiple Additive Scenes Example\n\nIn Build Settings, remove all scenes and add both of the scenes from the Scenes folder in the following order:\n\n- Main\n- Game\n```\n\n----------------------------------------\n\nTITLE: Setting Up Couch Co-Op Scene Configuration\nDESCRIPTION: Instructions for configuring and running the couch co-op example scene, including control schemes for local players and network connection capabilities. Supports flexible player combinations for both local and remote players with customizable input controls.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Examples/CouchCoop/_ReadMe.txt#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Couch Co-Op Example\n\nOpen scene: SceneCouchCoop\n\n- Start game, click UI button Add Player, to add local couch players, add as few or as many local couch players as you want.\n(only 4 keyboard inputs have been setup for this example, for more players, add more controls).\nJoin via another client, localhost, LAN or across internet, and add remote couch players.\n(no forced amount, can be any combination, example, 1 vs 1, 2 vs 2, 2 vs 4, 99 vs 20)\n\n- Jump keys are numbers 1, 2, 3, 4, depending on which player you are.\nThen AD, FG, HJ, KL for movement, all can be customised on the CouchPlayerManager script.\nEveryone joint uses arrow keys and space bar for quick fun testing of all local couch players.\n(something you would remove for release)\n\n- Locate Prefab: CouchPlayerManager\nSet your custom controls here, the max couch players that can be spawned will depend on control key array lengths.\n```\n\n----------------------------------------\n\nTITLE: Detecting Edgegap Plugin with Compiler Directive in C#\nDESCRIPTION: Code snippet demonstrating how to detect the presence of the Edgegap plugin in Unity Editor using a compiler directive. This can be used by developers to conditionally include code based on whether the Edgegap plugin is present.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Hosting/Edgegap/README.md#2025-04-06_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#if EDGEGAP_PLUGIN_SERVERS\n{...your code...}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Implementing PauseableSimulationTimer in Unity C#\nDESCRIPTION: This snippet shows how to use a PauseableSimulationTimer to create a pauseable timer. It includes methods for toggling pause state and checking for timer expiration. The timer is initialized in Start() and checked in Update().\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Examples/BenchmarkStinkySteak/Dependencies/Unity-Simulation-Timer/README.md#2025-04-06_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate PauseableSimulationTimer _timer;\n\npublic PauseableSimulationTimer Timer => _timer;\n\nprivate void Start()\n{\n    _timer = PauseableSimulationTimer.CreateFromSeconds(_delay);\n}\n\npublic void TogglePause()\n{\n    if(!_timer.IsPaused)\n    {\n        _timer.Pause();\n        return;\n    }\n\n    _timer.Resume();\n}\n\nprivate void Update()\n{\n    if(_timer.IsExpired())\n    {\n        _gameObject.SetActive(false);\n        _timer = PauseableSimulationTimer.None;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimulationTimer in Unity C#\nDESCRIPTION: This snippet demonstrates how to create and use a SimulationTimer to disable a GameObject after a specified delay. It initializes the timer in Start() and checks for expiration in Update().\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Examples/BenchmarkStinkySteak/Dependencies/Unity-Simulation-Timer/README.md#2025-04-06_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate SimulationTimer _disableTimer;\n\nprivate void Start()\n{\n    _disableTimer = SimulationTimer.CreateFromSeconds(_delay);\n}\n\nprivate void Update()\n{\n    if(_disableTimer.IsExpired())\n    {\n        _gameObject.SetActive(false);\n        _disableTimer = SimulationTimer.None;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NetworkManager for CCU Tests in Mirror Networking\nDESCRIPTION: Instructions for setting up the NetworkManager component for CCU testing. This includes setting the server's IP and port, enabling auto-start for headless server, and auto-connect for headless clients.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Examples/BenchmarkIdle/Readme.txt#2025-04-06_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// In NetworkManager:\n- set the server's IP/Port\n- enable 'auto start headless server', build server binary.\n- enable 'auto connect headless client', build client binary.\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Connection Callbacks in Mirror\nDESCRIPTION: Handles client connection events with default implementation and custom action invocation.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnClientConnect()\n{\n    OnClientConnectAction?.Invoke();\n    base.OnClientConnect();\n}\n```\n\n----------------------------------------\n\nTITLE: Server Start Callback Implementation\nDESCRIPTION: Handles server start events for both dedicated server and host modes.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnStartServer()\n{\n    OnStartServerAction?.Invoke();\n}\n```\n\n----------------------------------------\n\nTITLE: Host Start Callback Implementation\nDESCRIPTION: Handles host mode start events when server and client are combined.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnStartHost()\n{\n    OnStartHostAction?.Invoke();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Disconnection Handler\nDESCRIPTION: Manages client disconnection events by invoking custom disconnection actions.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnClientDisconnect()\n{\n    OnClientDisconnectAction?.Invoke();\n}\n```\n\n----------------------------------------\n\nTITLE: Player Controls and Gameplay Instructions\nDESCRIPTION: Detailed instructions for player movement, scoring mechanics, and physics interactions within the multiple scene setup.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Examples/MultipleAdditiveScenes/README.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   WASDQE keys to move & turn your player capsule, Space to jump.\n\n-   Colliding with the small colored spheres scores points base on their color.\n\n-   Colliding with the larger tumblers sends them rolling around...they're server-side non-kinematic rigidbodies.\n\n-   Only scores for the players in the same subscene are shown at the top of the game window.\n```\n\n----------------------------------------\n\nTITLE: Client Start Callback Implementation\nDESCRIPTION: Handles client start events when initializing network client functionality.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnStartClient()\n{\n    OnStartClientAction?.Invoke();\n}\n```\n\n----------------------------------------\n\nTITLE: Client Stop Callback Implementation\nDESCRIPTION: Manages client stop events when shutting down network client functionality.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnStopClient()\n{\n    OnStopClientAction?.Invoke();\n}\n```\n\n----------------------------------------\n\nTITLE: Server Stop Callback Implementation\nDESCRIPTION: Manages server stop events for both dedicated server and host modes.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnStopServer()\n{\n    OnStopServerAction?.Invoke();\n}\n```\n\n----------------------------------------\n\nTITLE: Host Stop Callback Implementation\nDESCRIPTION: Manages host mode stop events when shutting down combined server and client.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnStopHost()\n{\n    OnStopHostAction?.Invoke();\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results History for Mirror PredictedRigidbody\nDESCRIPTION: Historical benchmark data comparing performance metrics between predicted and non-predicted rigidbodies with 1000 objects. Shows progressive improvements in client FPS from March 13 to March 28, 2024, through various optimizations.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Examples/BenchmarkPrediction/Readme.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nNot Predicted:    1000 FPS Client,   2500 FPS Server\nPredicted:         \n  2024-03-13:      500 FPS Client,   1700 FPS Server\n  2024-03-13:      580 FPS Client,   1700 FPS Server // micro optimizations\n  2024-03-14:      590 FPS Client,   1700 FPS Server // UpdateGhosting() every 4th frame\n  2024-03-14:      615 FPS Client,   1700 FPS Server // predictedRigidbodyTransform.GetPositionAndRotation()\n  2024-03-15:      625 FPS Client,   1700 FPS Server // Vector3.MoveTowardsCustom()\n  2024-03-18:      628 FPS Client,   1700 FPS Server // removed O(N) insertion from CorrectHistory()\n  2024-03-28:      800 FPS Client,   1700 FPS Server // FAST mode prediction\n```\n\n----------------------------------------\n\nTITLE: Handling Client Not Ready State\nDESCRIPTION: Processes client not ready notifications, commonly used during scene transitions.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnClientNotReady()\n{\n    OnClientNotReadyAction?.Invoke();\n}\n```\n\n----------------------------------------\n\nTITLE: Client Transport Error Handler\nDESCRIPTION: Manages transport-level errors by providing error type and message information.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnClientError(TransportError transportError, string message)\n{\n    OnClientErrorAction?.Invoke(transportError, message);\n}\n```\n\n----------------------------------------\n\nTITLE: Client Transport Exception Handler\nDESCRIPTION: Handles transport-level exceptions by invoking custom exception handling actions.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/ScriptTemplates/51-Mirror__Network Manager With Actions-NewNetworkManagerWithActions.cs.txt#2025-04-06_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnClientTransportException(Exception exception)\n{\n    OnClientTransportExceptionAction?.Invoke(exception);\n}\n```\n\n----------------------------------------\n\nTITLE: C# Micro-Optimization Examples\nDESCRIPTION: Common micro-optimization techniques for improving performance at instruction level.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/CONTRIBUTING.md#2025-04-06_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ni >> 2                                   // instead of i / 4\nVector3.SqrMagnitude(b - a) < K * K         // instead of Vector3.Distance(a,b) < K\n```\n\n----------------------------------------\n\nTITLE: C# String Interpolation Example\nDESCRIPTION: Recommended string formatting approach using C# string interpolation.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/CONTRIBUTING.md#2025-04-06_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n$\"name = {name}\"                        // instead of \"name = \" + name\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Example in Shell\nDESCRIPTION: Demonstrates the proper format for writing a git commit message with a brief summary and a more detailed paragraph explaining the changes and their impact.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/CONTRIBUTING.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -m \"A brief summary of the commit\"\n> \n> A paragraph describing what changed and its impact.\n```\n\n----------------------------------------\n\nTITLE: C# Variable Declaration Style\nDESCRIPTION: Recommended approach for variable type declarations in C#.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/CONTRIBUTING.md#2025-04-06_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nint x                                    // instead of var x\nNetworkIdentity identity                    // instead of NetworkIdentity uv\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.3.0 Release in Markdown\nDESCRIPTION: Describes the features added in version 1.3.0 of SimpleWebTransport, specifically allowing the increase of max message size to int32.max.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Transports/SimpleWeb/SimpleWeb/CHANGELOG.md#2025-04-06_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# [1.3.0](https://github.com/James-Frowen/SimpleWebTransport/compare/v1.2.7...v1.3.0) (2022-02-12)\n\n\n### Features\n\n* Allowing max message size to be increase to int32.max ([#2](https://github.com/James-Frowen/SimpleWebTransport/issues/2)) ([4cc60fd](https://github.com/James-Frowen/SimpleWebTransport/commit/4cc60fd67f3c65d90ced0e6f9f97d15d0368076d))\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.2.7 Release in Markdown\nDESCRIPTION: Details the bug fix in version 1.2.7 of SimpleWebTransport, addressing an ObjectDisposedException in toString method.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Transports/SimpleWeb/SimpleWeb/CHANGELOG.md#2025-04-06_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.2.7](https://github.com/James-Frowen/SimpleWebTransport/compare/v1.2.6...v1.2.7) (2022-02-12)\n\n\n### Bug Fixes\n\n* fixing ObjectDisposedException in toString ([426de52](https://github.com/James-Frowen/SimpleWebTransport/commit/426de52ee4e98ac6212713b2b2272e3affb8fc99))\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.2.6 Release in Markdown\nDESCRIPTION: Describes the bug fix in version 1.2.6 of SimpleWebTransport, addressing a 'Runtime is not defined' issue for Unity 2021.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Transports/SimpleWeb/SimpleWeb/CHANGELOG.md#2025-04-06_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.2.6](https://github.com/James-Frowen/SimpleWebTransport/compare/v1.2.5...v1.2.6) (2022-02-02)\n\n\n### Bug Fixes\n\n* fixing Runtime is not defined for unity 2021 ([945b50d](https://github.com/James-Frowen/SimpleWebTransport/commit/945b50dbad5b71c43e2bdaa4033f87d3f62c5572))\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.2.5 Release in Markdown\nDESCRIPTION: Details the update in version 1.2.5 of SimpleWebTransport, changing Pointer_stringify to UTF8ToString.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Transports/SimpleWeb/SimpleWeb/CHANGELOG.md#2025-04-06_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.2.5](https://github.com/James-Frowen/SimpleWebTransport/compare/v1.2.4...v1.2.5) (2022-02-02)\n\n\n### Bug Fixes\n\n* updating Pointer_stringify to UTF8ToString ([2f5a74b](https://github.com/James-Frowen/SimpleWebTransport/commit/2f5a74ba10865e934be8d3b54ebfdeb14ca491f6))\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.2.3 Release in Markdown\nDESCRIPTION: Details the fix for a compile error in assemblyInfo in version 1.2.3 of SimpleWebTransport.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Transports/SimpleWeb/SimpleWeb/CHANGELOG.md#2025-04-06_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.2.3](https://github.com/James-Frowen/SimpleWebTransport/compare/v1.2.2...v1.2.3) (2021-12-16)\n\n\n### Bug Fixes\n\n* fixing compile error in assemblyInfo ([7ee8380](https://github.com/James-Frowen/SimpleWebTransport/commit/7ee8380b4daf34d4e12017de55d8be481690046f))\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.2.4 Release in Markdown\nDESCRIPTION: Describes the addition of a meta file for the changelog in version 1.2.4 of SimpleWebTransport.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Transports/SimpleWeb/SimpleWeb/CHANGELOG.md#2025-04-06_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.2.4](https://github.com/James-Frowen/SimpleWebTransport/compare/v1.2.3...v1.2.4) (2021-12-16)\n\n\n### Bug Fixes\n\n* adding meta file for changelog ([ba5b164](https://github.com/James-Frowen/SimpleWebTransport/commit/ba5b1647aa5cc69ca80f5b52c542a9b5ee749c7f))\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.2.2 Release in Markdown\nDESCRIPTION: Describes the fix for a release issue with an empty commit in version 1.2.2 of SimpleWebTransport.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/Assets/Mirror/Transports/SimpleWeb/SimpleWeb/CHANGELOG.md#2025-04-06_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.2.2](https://github.com/James-Frowen/SimpleWebTransport/compare/v1.2.1...v1.2.2) (2021-12-16)\n\n\n### Bug Fixes\n\n* fixing release with empty commit ([068af74](https://github.com/James-Frowen/SimpleWebTransport/commit/068af74f7399354081f25181f90fb060b0fa1524))\n```\n\n----------------------------------------\n\nTITLE: Defining Unity Editor Version for Mirror Networking Project\nDESCRIPTION: This YAML configuration specifies that the project uses Unity 2021.3.35f1 with revision 157b46ce122a. This information is essential for version control and ensuring all developers use the same Unity version for compatibility.\nSOURCE: https://github.com/MirrorNetworking/Mirror/blob/master/ProjectSettings/ProjectVersion.txt#2025-04-06_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nm_EditorVersion: 2021.3.35f1\nm_EditorVersionWithRevision: 2021.3.35f1 (157b46ce122a)\n```"
  }
]