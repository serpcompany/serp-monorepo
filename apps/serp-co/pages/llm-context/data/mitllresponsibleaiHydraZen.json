[
  {
    "owner": "mit-ll-responsible-ai",
    "repo": "hydra-zen",
    "content": "TITLE: Implementing CLI Support in a Hydra Application with Python\nDESCRIPTION: Main implementation that modifies the existing task function by adding ZenStore to create a local config store, implementing a __main__ clause to enable CLI usage, adding configs to Hydra's store, and using the zen decorator to generate the CLI.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/tutorials/add_cli.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra_zen import builds, zen, ZenStore\n\n# The same task function as before\ndef task_function(player1: str, player2: str):\n    with open(\"player_log.txt\", \"w\") as f:\n        f.write(\"Game session log:\\n\")\n        f.write(f\"Player 1: {player1}\\n\" f\"Player 2: {player2}\")\n\n    return player1, player2\n\nConfig = builds(task_function, populate_full_signature=True)\n\n# 1) Create a local config store and store our config\nstore = ZenStore()\nstore(Config, name=\"my_app\")\n\n# 2) Adding our __main__ clause to our script. \n#    Executing `python my_app.py [...]` will generate a CLI for our running\n#    our task function\nif __name__ == \"__main__\":\n    # 3) We need to add the configs from our local store to Hydra's\n    #    global config store\n    store.add_to_hydra_store()\n    \n    # 4) hydra_main generates a CLI based off of the config\n    #    stored under the name \"my_app\", and will run\n    #    `task_function`\n    zen(task_function).hydra_main(config_name=\"my_app\", \n                                 version_base=\"1.1\",\n                                 config_path=None,\n                                 )\n```\n\n----------------------------------------\n\nTITLE: Using ZenStore to Auto-Generate and Store Configs in Python\nDESCRIPTION: Example of using the new ZenStore class to automatically generate and store configurations for PyTorch optimizers, demonstrating its auto-config capabilities.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra_zen import ZenStore\nfrom torch.optim import Adam, AdamW, RMSprop\n\ntorch_store = ZenStore(\"torch_store\")\n\noptim_store = torch_store(group=\"optim\", zen_partial=True, lr=0.001)\n\noptim_store(Adam, name=\"adam\", amsgrad=True)\noptim_store(AdamW, name=\"adamw\", betas=(0.1, 0.999))\noptim_store(RMSprop, name=\"rmsprop\")\n\ntorch_store.add_to_hydra_store()\n```\n\n----------------------------------------\n\nTITLE: Launching Experiments with Native Python Types in Overrides in Python\nDESCRIPTION: Example of using hydra-zen's improved launch function that accepts native Python types for overrides. This demonstrates the new, more ergonomic way of specifying overrides.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra_zen import launch, instantiate, make_config, multirun, hydra_list\n\nvalues_for_experiment = [random.uniform(0, 1) for i in range(10)]\n\njobs = launch(\n   make_config(a=None, b=None),\n   instantiate,\n   overrides={\n         \"a\": 1,\n         \"b\": hydra_list([1, 2, 3]),\n         \"+param\": multirun(values_for_experiment)\n   },\n   multirun=True\n)\n```\n\n----------------------------------------\n\nTITLE: Recursive Auto-conversion of Dataclasses in Hydra-Zen\nDESCRIPTION: Demonstrates how hydra-zen's auto-conversion process works recursively for nested dataclasses, allowing complex configurations to be easily created and instantiated.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> from statistics import mean\n>>> @dataclass\n... class Foo:\n...     bar: Bar\n\n>>> foobar = Foo(Bar(reduce_fn=mean))\n>>> instantiate(just(foobar))\nFoo(bar=Bar(reduce_fn=<function mean at 0x000001F224640310>))\n>>> instantiate(builds(Foo, bar=Bar(sum)))\nFoo(bar=Bar(reduce_fn=<built-in function sum>))\n```\n\n----------------------------------------\n\nTITLE: Defining a Hydra-Agnostic Task Function with zen Wrapper in Python\nDESCRIPTION: Example of using the new zen wrapper to define a Hydra-agnostic task function with an explicit signature, eliminating Hydra-specific boilerplate.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef trainer_task_fn(model, data, partial_optim, trainer, num_epochs):\n   optim = partial_optim(model.parameters())\n   trainer(model, optim, data).fit(num_epochs)\n\nif __name__ == \"__main__\":\n    from hydra_zen import zen\n    \n    zen(trainer_task_fn).hydra_main(config_name=\"my_app\", config_path=None)\n```\n\n----------------------------------------\n\nTITLE: Using ZenStore as a Decorator for Auto-Config and Storage in Python\nDESCRIPTION: Example of using ZenStore as a decorator to automatically configure and store objects, demonstrating an alternative pattern for populating the store.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom hydra_zen import store\n\nprofile_store = store(group=\"profile\")\n```\n\n----------------------------------------\n\nTITLE: Streamlined Hydra-zen Application with Decorator Syntax\nDESCRIPTION: A more concise version of the application using ZenStore as a decorator to both create and store the config for the task function in a single line.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/tutorials/add_cli.rst#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra_zen import zen, ZenStore\n\nstore = ZenStore()\n\n@store(name=\"my_app\")\ndef task_function(player1: str, player2: str):\n    with open(\"player_log.txt\", \"w\") as f:\n        f.write(\"Game session log:\\n\")\n        f.write(f\"Player 1: {player1}\\n\" f\"Player 2: {player2}\")\n\n    return player1, player2\n\nif __name__ == \"__main__\":\n    store.add_to_hydra_store()\n    zen(task_function).hydra_main(config_name=\"my_app\", \n                                 version_base=\"1.1\",\n                                 config_path=None,\n                                 )\n```\n\n----------------------------------------\n\nTITLE: Instantiating Global ZenStore Instance\nDESCRIPTION: Creates a pre-instantiated, globally-available instance of ZenStore with specific configuration parameters. The store is initialized with deferred configuration and Hydra store settings enabled.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/store.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra_zen import ZenStore\n\nstore = ZenStore(\n    name=\"zen_store\",\n    deferred_to_config=True,\n    deferred_hydra_store=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Auto-config Support for Dataclasses in Hydra-Zen\nDESCRIPTION: Demonstrates how to use hydra-zen's auto-config support for dataclasses, including those with non-Hydra-compatible type annotations and default values.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Callable, Sequence\nfrom dataclasses import dataclass\n\n@dataclass\nclass Bar:\n   reduce_fn: Callable[[Sequence[float]], float] = sum  # <- not compat w/ Hydra\n```\n\n----------------------------------------\n\nTITLE: Using Hydra-Zen's just() Function for Auto-conversion in Python\nDESCRIPTION: Shows how to use the just() function to create Hydra-compatible configurations from dataclasses with non-standard type annotations and default values.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> from hydra_zen import builds, just, instantiate, to_yaml\n>>> just_bar = just(Bar())\n\n>>> print(to_yaml(just_bar))\n_target_: __main__.Bar\nreduce_fn:\n  _target_: hydra_zen.funcs.get_obj\n  path: builtins.sum\n\n>>> instantiate(just_bar)  # returns Bar()\nBar(reduce_fn=<built-in function sum>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Beartype Validation with Hydra-Zen\nDESCRIPTION: Setup code to create configuration objects with runtime type checking using beartype and hydra-zen's custom builds function.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/how_to/beartype.rst#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from toy_library import process_age, process_shape\n\n>>> from hydra_zen import make_custom_builds_fn\n>>> from hydra_zen.third_party.beartype import validates_with_beartype\n\n>>> builds = make_custom_builds_fn(\n...     populate_full_signature=True,\n...     zen_wrappers=validates_with_beartype,\n...     hydra_convert=\"all\",\n... )\n\n>>> ConfAge = builds(process_age)\n>>> ConfShape = builds(process_shape)\n```\n\n----------------------------------------\n\nTITLE: Creating Hashable Dataclasses with Hydra-Zen in Python\nDESCRIPTION: Shows how hydra-zen's dataclass-creation functions produce hashable dataclasses by default, allowing nested dataclass configurations to work in Python 3.11.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass, field\nfrom typing import Any\n\nfrom hydra_zen import builds\nfrom hydra_zen.typing import Builds\n\n@dataclass\nclass Config:\n    # This is still OK\n    builds_dict: Builds[type[dict[Any, Any]]] = builds(dict)()\n```\n\n----------------------------------------\n\nTITLE: Creating Database Store and Configurations in Python\nDESCRIPTION: Shows how to create a database store and add configurations to it using decorators. It defines a function for creating profile databases with different sizes.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndb_store = store(group=\"database\")\n\n# calls `builds(profile_database, [...])` under the hood and\n# adds the config to the store under the \"profile\" group\n@db_store(name=\"database\")\n@db_store(name=\"test_database\", size=1)\ndef profile_database(size):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Stores with Decorators in Python\nDESCRIPTION: Demonstrates the use of store decorators to add profile configurations to a store. It creates two profile entries with different 'has_root' values and defines a Profile dataclass.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Adds two store entries under the \"profile\" group of the store\n# with configured defaults for `has_root`\n@profile_store(name=\"admin\", has_root=True)\n@profile_store(name=\"basic\", has_root=False)\n@dataclass\nclass Profile:\n    username: str\n    schema: str\n    has_root: bool\n```\n\n----------------------------------------\n\nTITLE: Reading Output Files in Python for Hydra Job Inspection\nDESCRIPTION: Python code to read the output files generated by the Hydra job, including a utility function for reading files and commands to find and display the latest job output.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/tutorials/add_cli.rst#2025-04-07_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from pathlib import Path \n>>> def print_file(x: Path):\n...     with x.open(\"r\") as f: \n...         print(f.read())\n\n>>> *_, latest_job = sorted((Path.cwd() / \"outputs\").glob(\"*/*\"))\n>>> latest_job  # changes based  on reader's date, time, and OS\nWindowsPath('C:/outputs/2021-10-21/12-58-13')\n\n>>> print_file(latest_job / \"player_log.txt\")\nGame session log:\nPlayer 1: mario\nPlayer 2: luigi\n```\n\n----------------------------------------\n\nTITLE: Defining a Hydra-Specific Task Function in Python\nDESCRIPTION: Example of the traditional way of defining a task function for a Hydra application, which includes Hydra-specific boilerplate code.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport hydra\nfrom hydra.utils import instantiate\n\n@hydra.main(config_name=\"my_app\", config_path=None, version_base=\"1.2\")\ndef trainer_task_fn(cfg):\n   model = instantiate(cfg.model)\n   data = instantiate(cfg.data)\n   partial_optim = instantiate(cfg.partial_optim)\n   trainer = instantiate(cfg.trainer)\n   \n   optim = partial_optim(model.parameters())\n   trainer(model, optim, data).fit(cfg.num_epochs)\n\nif __name__ == \"__main__\":\n   trainer_task_fn()\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Annotated Library Code\nDESCRIPTION: Example library code that demonstrates type hints using beartype, including a custom PositiveInt type and functions with type annotations.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/how_to/beartype.rst#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union, Sequence, TypeAlias\n\nfrom beartype.vale import Is\nfrom typing_extensions import Annotated\n\n\nPositiveInt: TypeAlias = Annotated[int, Is[lambda x: x >= 0]]\n\n\ndef process_age(age: PositiveInt):\n    return age\n\n\ndef process_shape(shape: Union[int, Sequence[int]]):\n    return shape\n```\n\n----------------------------------------\n\nTITLE: Launching Experiments with Manual CLI-Compatible Overrides in Python\nDESCRIPTION: Example of using hydra-zen's launch function with manually formed CLI-compatible override strings. This demonstrates the old way of specifying overrides.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra_zen import launch, instantiate, make_config\n\nvalues_for_experiment = [random.uniform(0, 1) for i in range(10)]\n\njobs = launch(\n   make_config(a=None, b=None),\n   instantiate,\n   overrides=[\n         \"a=1\",\n         \"b=[1,2,3]\",\n         \"+param=\" + \",\".join([str(i) for i in values_for_experiment])\n   ],\n   multirun=True\n)\n```\n\n----------------------------------------\n\nTITLE: Launching Hydra Application with Command Line Parameters\nDESCRIPTION: Running the application from the command line with player1 and player2 parameters set to 'mario' and 'luigi', respectively.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/tutorials/add_cli.rst#2025-04-07_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python my_app.py player1=mario player2=luigi\n```\n\n----------------------------------------\n\nTITLE: Type Annotation Example for Shape Parameter\nDESCRIPTION: Demonstrates the use of Union type hint to specify that a value should be either an integer or a sequence of integers.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/how_to/beartype.rst#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nUnion[int, Sequence[int]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Values in Dataclasses in Python\nDESCRIPTION: Demonstrates how default values and default factories affect attribute access in dataclasses. It shows that factory defaults can only be accessed from instances, not the class itself.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> hasattr(IsOK, \"number\")\nTrue\n>>> hasattr(IsOK, \"nested\")\nFalse\n>>> hasattr(IsOK(), \"nested\")\nTrue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mutable Default Values for Dataclasses in Python\nDESCRIPTION: Illustrates the change in mutability rules for dataclasses starting in Python 3.11. It shows how to handle mutable default values using default factories.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/changes.rst#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass A:\n   ...\n\n@dataclass\nclass NoLongerValid:\n   number: int = 1\n   nested: A = A()  # will raise at runtime due to mutable default\n\n@dataclass\nclass IsOK:\n   number: int = 1\n   nested: A = field(default_factory=lambda: A())\n```\n\n----------------------------------------\n\nTITLE: Checking Configurable Components with Hydra CLI Help Command\nDESCRIPTION: Using the --help command to view the configurable aspects of the Hydra application, showing the required fields (player1 and player2) that need to be configured.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/tutorials/add_cli.rst#2025-04-07_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python my_app.py --help\nmy_app is powered by Hydra.\n\n== Configuration groups ==\nCompose your configuration from those groups (group=option)\n\n\n\n== Config ==\nOverride anything in the config (foo.bar=value)\n\nplayer1: ???\nplayer2: ???\n```\n\n----------------------------------------\n\nTITLE: Testing Runtime Type Validation\nDESCRIPTION: Examples demonstrating successful and failed type checking scenarios using the configured objects with beartype validation.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/how_to/beartype.rst#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from hydra_zen import instantiate\n\n>>> instantiate(ConfAge, age=12)  # OK\n12\n\n>>> instantiate(ConfAge, age=-100)  # Bad: negative int\nBeartypeCallHintPepParamException- process_age() parameter age=-100 violates type \nhint [...]\n\n>>> instantiate(ConfAge, age=\"twelve\")  # Bad: not an int\nBeartypeCallHintPepParamException- process_age() parameter age='twelve' violates \ntype hint [...]\n\n>>> instantiate(ConfShape, shape=3)  # OK\n3\n\n>>> instantiate(ConfShape, shape=[1, 2, 5])  # OK\n[1, 2, 5]\n\n>>> instantiate(ConfShape, shape=[\"a\", \"b\"])  # Bad: not a sequence of ints\nBeartypeCallHintPepParamException- process_shape() parameter shape=['a', 'b'] \nviolates type hint [...]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using validates_with_pydantic Function in Python\nDESCRIPTION: This snippet demonstrates how to import and use the 'validates_with_pydantic' function from the hydra_zen.third_party.pydantic module. The function appears to be an autofunction, suggesting it's automatically documented and likely provides a way to validate Hydra-Zen configurations using Pydantic.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/generated/hydra_zen.third_party.pydantic.validates_with_pydantic.rst#2025-04-07_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom hydra_zen.third_party.pydantic import validates_with_pydantic\n\n# Usage example (hypothetical)\ndef my_config():\n    # Configuration definition\n    pass\n\nvalidated_config = validates_with_pydantic(my_config)\n```\n\n----------------------------------------\n\nTITLE: Importing uses_zen_processing Function from Hydra-Zen\nDESCRIPTION: This snippet demonstrates how to import the uses_zen_processing function from the hydra_zen module. The function is likely a key component of the Hydra-Zen framework for configuration management or data processing.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/generated/hydra_zen.uses_zen_processing.rst#2025-04-07_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom hydra_zen import uses_zen_processing\n```\n\n----------------------------------------\n\nTITLE: Installing Beartype Package via pip\nDESCRIPTION: Command to install the beartype package, which provides runtime type-checking capabilities.\nSOURCE: https://github.com/mit-ll-responsible-ai/hydra-zen/blob/main/docs/source/how_to/beartype.rst#2025-04-07_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install beartype\n```"
  }
]