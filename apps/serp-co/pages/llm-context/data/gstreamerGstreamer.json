[
  {
    "owner": "gstreamer",
    "repo": "gstreamer",
    "content": "TITLE: Cloning GStreamer Plugin Template Repository - Shell\nDESCRIPTION: Demonstrates how to clone the GStreamer gst-template git repository using shell commands. These commands are necessary to obtain the files and utilities required for creating a new GStreamer plugin based on existing templates. Expects a working internet connection and the git command installed; outputs diagnostic messages to confirm repository initialization.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/boiler.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nshell $ git clone https://gitlab.freedesktop.org/gstreamer/gst-template.git\nInitialized empty Git repository in /some/path/gst-template/.git/\nremote: Counting objects: 373, done.\nremote: Compressing objects: 100% (114/114), done.\nremote: Total 373 (delta 240), reused 373 (delta 240)\nReceiving objects: 100% (373/373), 75.16 KiB | 78 KiB/s, done.\nResolving deltas: 100% (240/240), done.\n\n```\n\n----------------------------------------\n\nTITLE: Registering Static Metadata for a GStreamer Element - C\nDESCRIPTION: Shows how to assign human-readable metadata such as name, category, description, and author to a new GStreamer element using gst_element_class_set_static_metadata. Parameters include the GObject class instance, a long element name, component type, a brief description, and author's name with email. This information is used by GStreamer core and tools to display element details at runtime or in discovery. Should be called during the class_init function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/boiler.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ngst_element_class_set_static_metadata (klass,\n  \"An example plugin\",\n  \"Example/FirstExample\",\n  \"Shows the basic structure of a plugin\",\n  \"your name <your.name@your.isp>\");\n\n```\n\n----------------------------------------\n\nTITLE: Installing GStreamer and Plugins on Ubuntu/Debian using apt-get\nDESCRIPTION: Installs the GStreamer core library development files, base plugin development files, bad plugin development files, various plugin sets (base, good, bad, ugly), libav integration, command-line tools, and plugins for X, ALSA, GL, GTK3, Qt5, and PulseAudio on Ubuntu or Debian distributions using the `apt-get` package manager. Requires superuser (root) privileges.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-linux.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\napt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio\n```\n\n----------------------------------------\n\nTITLE: Using GObject Enum Property for Pattern Selection in GStreamer Element - C\nDESCRIPTION: This snippet demonstrates how to declare and register a property of enum type (e.g., \\\"pattern\\\") for GStreamer elements, improving user experience by exposing named variants instead of raw integers. It includes steps for defining the enum, registering it with GObject, installing the property using g_param_spec_enum, and handling property values in the set/get property functions. Dependencies include GLib, GObject, and GStreamer, and key parameters are the enum values and property IDs. This approach facilitates clearer configuration in GUIs and better documentation for property values.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/args.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum {\n  GST_VIDEOTESTSRC_SMPTE,\n  GST_VIDEOTESTSRC_SNOW,\n  GST_VIDEOTESTSRC_BLACK\n} GstVideotestsrcPattern;\n\n[. .]\n\n#define GST_TYPE_VIDEOTESTSRC_PATTERN (gst_videotestsrc_pattern_get_type ())\nstatic GType\ngst_videotestsrc_pattern_get_type (void)\n{\n  static GType videotestsrc_pattern_type = 0;\n\n  if (!videotestsrc_pattern_type) {\n    static GEnumValue pattern_types[] = {\n      { GST_VIDEOTESTSRC_SMPTE, \"SMPTE 100% color bars\",    \"smpte\" },\n      { GST_VIDEOTESTSRC_SNOW,  \"Random (television snow)\", \"snow\"  },\n      { GST_VIDEOTESTSRC_BLACK, \"0% Black\",                 \"black\" },\n      { 0, NULL, NULL },\n    };\n\n    videotestsrc_pattern_type =\n    g_enum_register_static (\"GstVideotestsrcPattern\",\n                pattern_types);\n  }\n\n  return videotestsrc_pattern_type;\n}\n\n[. .]\n\nstatic void\ngst_videotestsrc_class_init (GstvideotestsrcClass *klass)\n{\n\n  /* define virtual function pointers */\n  object_class->set_property = gst_my_filter_set_property;\n  object_class->get_property = gst_my_filter_get_property;\n[. .]\n  g_object_class_install_property (G_OBJECT_CLASS (klass), PROP_PATTERN,\n    g_param_spec_enum (\"pattern\", \"Pattern\",\n               \"Type of test pattern to generate\",\n                       GST_TYPE_VIDEOTESTSRC_PATTERN, GST_VIDEOTESTSRC_SMPTE,\n                       G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));\n\n\n\n[. .]\n}\n\n[. .]\n\nstatic void\ngst_my_filter_set_property (GObject      *object,\n                guint         prop_id,\n                const GValue *value,\n                GParamSpec   *pspec)\n{\n  GstMyFilter *filter = GST_MY_FILTER (object);\n\n  switch (prop_id) {\n    case PROP_PATTERN:\n      filter->video_test_pattern = (GstVideotestsrcPattern)g_value_get_enum(value);\n      break;\n    default:\n      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);\n      break;\n  }\n}\n\nstatic void\ngst_my_filter_get_property (GObject    *object,\n                guint       prop_id,\n                GValue     *value,\n                GParamSpec *pspec)\n{\n  GstMyFilter *filter = GST_MY_FILTER (object);\n\n  switch (prop_id) {\n    case PROP_PATTERN:\n      g_value_set_enum (value, filter->video_test_pattern);\n      break;\n    default:\n      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);\n      break;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete GStreamer Hello World Application in Python\nDESCRIPTION: A Python implementation of the GStreamer Hello World application that plays a video from the internet using the playbin element. Shows the Python binding approach to GStreamer functionality.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n#!/usr/bin/env python3\n\nimport sys\nimport gi\n\ngi.require_version('Gst', '1.0')\nfrom gi.repository import Gst, GLib\n\n# Initializes Gstreamer, it's plugins, and GST_DEBUG\nGst.init(sys.argv)\n\n# Create the elements\nsource = Gst.ElementFactory.make(\"playbin\", \"source\")\nif not source:\n    sys.stderr.write(\" Unable to create source\\n\")\n    sys.exit(1)\n\n# Set the URI to play\nsource.set_property('uri', 'https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm')\n\n# Start playing\nret = source.set_state(Gst.State.PLAYING)\nif ret == Gst.StateChangeReturn.FAILURE:\n    sys.stderr.write(\" Unable to set the pipeline to the playing state.\\n\")\n    sys.exit(1)\n\n# Wait until error or EOS\nbus = source.get_bus()\nmsg = bus.timed_pop_filtered(\nGst.CLOCK_TIME_NONE,\nGst.MessageType.ERROR | Gst.MessageType.EOS\n)\n\n# Free resources\nsource.set_state(Gst.State.NULL)\n```\n\n----------------------------------------\n\nTITLE: Complete GStreamer Hello World Application in C\nDESCRIPTION: A complete C application that initializes GStreamer, creates a playbin pipeline to play a video from the internet, and handles the basic event loop and cleanup. This demonstrates the minimal code required for a functional GStreamer application.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <gst/gst.h>\n\nint main(int argc, char *argv[]) {\n  GstElement *pipeline;\n  GstBus *bus;\n  GstMessage *msg;\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Build the pipeline */\n  pipeline =\n      gst_parse_launch\n      (\"playbin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\",\n      NULL);\n\n  /* Start playing */\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n\n  /* Wait until error or EOS */\n  bus = gst_element_get_bus (pipeline);\n  msg =\n      gst_bus_timed_pop_filtered (bus, GST_CLOCK_TIME_NONE,\n      GST_MESSAGE_ERROR | GST_MESSAGE_EOS);\n\n  /* See next tutorial for proper error message handling/parsing */\n  if (GST_MESSAGE_TYPE (msg) == GST_MESSAGE_ERROR) {\n    g_error (\"An error occurred! Re-run with the GST_DEBUG=*:WARN environment \"\n        \"variable set for more details.\");\n  }\n\n  /* Free resources */\n  gst_message_unref (msg);\n  gst_object_unref (bus);\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (pipeline);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Pad-Added Signal Handler in C for GStreamer\nDESCRIPTION: Connects the pad-added signal of the uridecodebin element to the pad_added_handler callback function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/dynamic-pipelines.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ng_signal_connect (data.source, \"pad-added\", G_CALLBACK (pad_added_handler), &data);\n```\n\n----------------------------------------\n\nTITLE: Logging Errors in GStreamer Applications (C)\nDESCRIPTION: Mentions the `GST_ERROR()` macro (and related macros like `GST_WARNING`, `GST_INFO`, `GST_DEBUG`) used within C application code to print custom diagnostic messages into the GStreamer debug log. This integrates application-specific diagnostics with the standard GStreamer logging system, controlled by `GST_DEBUG`. Requires the GStreamer development libraries.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/debugging-tools.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nGST_ERROR()\n```\n\n----------------------------------------\n\nTITLE: Implementing a GStreamer Media Player in Android Java\nDESCRIPTION: A complete Android Activity implementation that creates a media player using GStreamer. The code handles UI interactions, native GStreamer initialization, media playback control, surface management for video rendering, and state persistence across activity lifecycle.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.gst_sdk_tutorials.tutorial_4;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.TimeZone;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.ImageButton;\nimport android.widget.SeekBar;\nimport android.widget.SeekBar.OnSeekBarChangeListener;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport org.freedesktop.gstreamer.GStreamer;\n\npublic class Tutorial4 extends Activity implements SurfaceHolder.Callback, OnSeekBarChangeListener {\n    private native void nativeInit();     // Initialize native code, build pipeline, etc\n    private native void nativeFinalize(); // Destroy pipeline and shutdown native code\n    private native void nativeSetUri(String uri); // Set the URI of the media to play\n    private native void nativePlay();     // Set pipeline to PLAYING\n    private native void nativeSetPosition(int milliseconds); // Seek to the indicated position, in milliseconds\n    private native void nativePause();    // Set pipeline to PAUSED\n    private static native boolean nativeClassInit(); // Initialize native class: cache Method IDs for callbacks\n    private native void nativeSurfaceInit(Object surface); // A new surface is available\n    private native void nativeSurfaceFinalize(); // Surface about to be destroyed\n    private long native_custom_data;      // Native code will use this to keep private data\n\n    private boolean is_playing_desired;   // Whether the user asked to go to PLAYING\n    private int position;                 // Current position, reported by native code\n    private int duration;                 // Current clip duration, reported by native code\n    private boolean is_local_media;       // Whether this clip is stored locally or is being streamed\n    private int desired_position;         // Position where the users wants to seek to\n    private String mediaUri;              // URI of the clip being played\n\n    private final String defaultMediaUri = \"https://gstreamer.freedesktop.org/data/media/sintel_trailer-368p.ogv\";\n\n    // Called when the activity is first created.\n    @Override\n    public void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n\n        // Initialize GStreamer and warn if it fails\n        try {\n            GStreamer.init(this);\n        } catch (Exception e) {\n            Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();\n            finish();\n            return;\n        }\n\n        setContentView(R.layout.main);\n\n        ImageButton play = (ImageButton) this.findViewById(R.id.button_play);\n        play.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                is_playing_desired = true;\n                nativePlay();\n            }\n        });\n\n        ImageButton pause = (ImageButton) this.findViewById(R.id.button_stop);\n        pause.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                is_playing_desired = false;\n                nativePause();\n            }\n        });\n\n        SurfaceView sv = (SurfaceView) this.findViewById(R.id.surface_video);\n        SurfaceHolder sh = sv.getHolder();\n        sh.addCallback(this);\n\n        SeekBar sb = (SeekBar) this.findViewById(R.id.seek_bar);\n        sb.setOnSeekBarChangeListener(this);\n\n        // Retrieve our previous state, or initialize it to default values\n        if (savedInstanceState != null) {\n            is_playing_desired = savedInstanceState.getBoolean(\"playing\");\n            position = savedInstanceState.getInt(\"position\");\n            duration = savedInstanceState.getInt(\"duration\");\n            mediaUri = savedInstanceState.getString(\"mediaUri\");\n            Log.i (\"GStreamer\", \"Activity created with saved state:\");\n        } else {\n            is_playing_desired = false;\n            position = duration = 0;\n            mediaUri = defaultMediaUri;\n            Log.i (\"GStreamer\", \"Activity created with no saved state:\");\n        }\n        is_local_media = false;\n        Log.i (\"GStreamer\", \"  playing:\" + is_playing_desired + \" position:\" + position +\n                \" duration: \" + duration + \" uri: \" + mediaUri);\n\n        // Start with disabled buttons, until native code is initialized\n        this.findViewById(R.id.button_play).setEnabled(false);\n        this.findViewById(R.id.button_stop).setEnabled(false);\n\n        nativeInit();\n    }\n\n    protected void onSaveInstanceState (Bundle outState) {\n        Log.d (\"GStreamer\", \"Saving state, playing:\" + is_playing_desired + \" position:\" + position +\n                \" duration: \" + duration + \" uri: \" + mediaUri);\n        outState.putBoolean(\"playing\", is_playing_desired);\n        outState.putInt(\"position\", position);\n        outState.putInt(\"duration\", duration);\n        outState.putString(\"mediaUri\", mediaUri);\n    }\n\n    protected void onDestroy() {\n        nativeFinalize();\n        super.onDestroy();\n    }\n\n    // Called from native code. This sets the content of the TextView from the UI thread.\n    private void setMessage(final String message) {\n        final TextView tv = (TextView) this.findViewById(R.id.textview_message);\n        runOnUiThread (new Runnable() {\n          public void run() {\n            tv.setText(message);\n          }\n        });\n    }\n\n    // Set the URI to play, and record whether it is a local or remote file\n    private void setMediaUri() {\n        nativeSetUri (mediaUri);\n        is_local_media = mediaUri.startsWith(\"file://\");\n    }\n\n    // Called from native code. Native code calls this once it has created its pipeline and\n    // the main loop is running, so it is ready to accept commands.\n    private void onGStreamerInitialized () {\n        Log.i (\"GStreamer\", \"GStreamer initialized:\");\n        Log.i (\"GStreamer\", \"  playing:\" + is_playing_desired + \" position:\" + position + \" uri: \" + mediaUri);\n\n        // Restore previous playing state\n        setMediaUri ();\n        nativeSetPosition (position);\n        if (is_playing_desired) {\n            nativePlay();\n        } else {\n            nativePause();\n        }\n\n        // Re-enable buttons, now that GStreamer is initialized\n        final Activity activity = this;\n        runOnUiThread(new Runnable() {\n            public void run() {\n                activity.findViewById(R.id.button_play).setEnabled(true);\n                activity.findViewById(R.id.button_stop).setEnabled(true);\n            }\n        });\n    }\n\n    // The text widget acts as an slave for the seek bar, so it reflects what the seek bar shows, whether\n    // it is an actual pipeline position or the position the user is currently dragging to.\n    private void updateTimeWidget () {\n        final TextView tv = (TextView) this.findViewById(R.id.textview_time);\n        final SeekBar sb = (SeekBar) this.findViewById(R.id.seek_bar);\n        final int pos = sb.getProgress();\n\n        SimpleDateFormat df = new SimpleDateFormat(\"HH:mm:ss\");\n        df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        final String message = df.format(new Date (pos)) + \" / \" + df.format(new Date (duration));\n        tv.setText(message);\n    }\n\n    // Called from native code\n    private void setCurrentPosition(final int position, final int duration) {\n        final SeekBar sb = (SeekBar) this.findViewById(R.id.seek_bar);\n\n        // Ignore position messages from the pipeline if the seek bar is being dragged\n        if (sb.isPressed()) return;\n\n        runOnUiThread (new Runnable() {\n          public void run() {\n            sb.setMax(duration);\n            sb.setProgress(position);\n            updateTimeWidget();\n          }\n        });\n        this.position = position;\n        this.duration = duration;\n    }\n\n    static {\n        System.loadLibrary(\"gstreamer_android\");\n        System.loadLibrary(\"tutorial-4\");\n        nativeClassInit();\n    }\n\n    public void surfaceChanged(SurfaceHolder holder, int format, int width,\n            int height) {\n        Log.d(\"GStreamer\", \"Surface changed to format \" + format + \" width \"\n                + width + \" height \" + height);\n        nativeSurfaceInit (holder.getSurface());\n    }\n\n    public void surfaceCreated(SurfaceHolder holder) {\n        Log.d(\"GStreamer\", \"Surface created: \" + holder.getSurface());\n    }\n\n    public void surfaceDestroyed(SurfaceHolder holder) {\n        Log.d(\"GStreamer\", \"Surface destroyed\");\n        nativeSurfaceFinalize ();\n    }\n\n    // Called from native code when the size of the media changes or is first detected.\n    // Inform the video surface about the new size and recalculate the layout.\n    private void onMediaSizeChanged (int width, int height) {\n        Log.i (\"GStreamer\", \"Media size changed to \" + width + \"x\" + height);\n        final GStreamerSurfaceView gsv = (GStreamerSurfaceView) this.findViewById(R.id.surface_video);\n        gsv.media_width = width;\n        gsv.media_height = height;\n        runOnUiThread(new Runnable() {\n            public void run() {\n                gsv.requestLayout();\n            }\n        });\n    }\n\n    // The Seek Bar thumb has moved, either because the user dragged it or we have called setProgress()\n    public void onProgressChanged(SeekBar sb, int progress, boolean fromUser) {\n        if (fromUser == false) return;\n        desired_position = progress;\n        // If this is a local file, allow scrub seeking, this is, seek as soon as the slider is moved.\n        if (is_local_media) nativeSetPosition(desired_position);\n        updateTimeWidget();\n    }\n\n    // The user started dragging the Seek Bar thumb\n    public void onStartTrackingTouch(SeekBar sb) {\n        nativePause();\n    }\n\n    // The user released the Seek Bar thumb\n    public void onStopTrackingTouch(SeekBar sb) {\n\n\n```\n\n----------------------------------------\n\nTITLE: Initializing GStreamer in Python\nDESCRIPTION: Code snippet showing how to initialize GStreamer in Python using the GStreamer Python bindings. This is required before using any GStreamer functionality.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Initializes Gstreamer, it's plugins, and GST_DEBUG\nGst.init(sys.argv)\n```\n\n----------------------------------------\n\nTITLE: Implementing a GStreamer Pipeline with Custom Waveform Generation in C\nDESCRIPTION: This code creates a GStreamer pipeline that generates a synthetic waveform using appsrc, then processes the audio in three parallel paths: audio playback, visualization, and data monitoring. It demonstrates manual buffer creation, pad linking, and signal handling for GStreamer elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/short-cutting-the-pipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n#include <gst/audio/audio.h>\n#include <string.h>\n\n#define CHUNK_SIZE 1024   /* Amount of bytes we are sending in each buffer */\n#define SAMPLE_RATE 44100 /* Samples per second we are sending */\n\n/* Structure to contain all our information, so we can pass it to callbacks */\ntypedef struct _CustomData {\n  GstElement *pipeline, *app_source, *tee, *audio_queue, *audio_convert1, *audio_resample, *audio_sink;\n  GstElement *video_queue, *audio_convert2, *visual, *video_convert, *video_sink;\n  GstElement *app_queue, *app_sink;\n\n  guint64 num_samples;   /* Number of samples generated so far (for timestamp generation) */\n  gfloat a, b, c, d;     /* For waveform generation */\n\n  guint sourceid;        /* To control the GSource */\n\n  GMainLoop *main_loop;  /* GLib's Main Loop */\n} CustomData;\n\n/* This method is called by the idle GSource in the mainloop, to feed CHUNK_SIZE bytes into appsrc.\n * The idle handler is added to the mainloop when appsrc requests us to start sending data (need-data signal)\n * and is removed when appsrc has enough data (enough-data signal).\n */\nstatic gboolean push_data (CustomData *data) {\n  GstBuffer *buffer;\n  GstFlowReturn ret;\n  int i;\n  GstMapInfo map;\n  gint16 *raw;\n  gint num_samples = CHUNK_SIZE / 2; /* Because each sample is 16 bits */\n  gfloat freq;\n\n  /* Create a new empty buffer */\n  buffer = gst_buffer_new_and_alloc (CHUNK_SIZE);\n\n  /* Set its timestamp and duration */\n  GST_BUFFER_TIMESTAMP (buffer) = gst_util_uint64_scale (data->num_samples, GST_SECOND, SAMPLE_RATE);\n  GST_BUFFER_DURATION (buffer) = gst_util_uint64_scale (num_samples, GST_SECOND, SAMPLE_RATE);\n\n  /* Generate some psychodelic waveforms */\n  gst_buffer_map (buffer, &map, GST_MAP_WRITE);\n  raw = (gint16 *)map.data;\n  data->c += data->d;\n  data->d -= data->c / 1000;\n  freq = 1100 + 1000 * data->d;\n  for (i = 0; i < num_samples; i++) {\n    data->a += data->b;\n    data->b -= data->a / freq;\n    raw[i] = (gint16)(500 * data->a);\n  }\n  gst_buffer_unmap (buffer, &map);\n  data->num_samples += num_samples;\n\n  /* Push the buffer into the appsrc */\n  g_signal_emit_by_name (data->app_source, \"push-buffer\", buffer, &ret);\n\n  /* Free the buffer now that we are done with it */\n  gst_buffer_unref (buffer);\n\n  if (ret != GST_FLOW_OK) {\n    /* We got some error, stop sending data */\n    return FALSE;\n  }\n\n  return TRUE;\n}\n\n/* This signal callback triggers when appsrc needs data. Here, we add an idle handler\n * to the mainloop to start pushing data into the appsrc */\nstatic void start_feed (GstElement *source, guint size, CustomData *data) {\n  if (data->sourceid == 0) {\n    g_print (\"Start feeding\\n\");\n    data->sourceid = g_idle_add ((GSourceFunc) push_data, data);\n  }\n}\n\n/* This callback triggers when appsrc has enough data and we can stop sending.\n * We remove the idle handler from the mainloop */\nstatic void stop_feed (GstElement *source, CustomData *data) {\n  if (data->sourceid != 0) {\n    g_print (\"Stop feeding\\n\");\n    g_source_remove (data->sourceid);\n    data->sourceid = 0;\n  }\n}\n\n/* The appsink has received a buffer */\nstatic GstFlowReturn new_sample (GstElement *sink, CustomData *data) {\n  GstSample *sample;\n\n  /* Retrieve the buffer */\n  g_signal_emit_by_name (sink, \"pull-sample\", &sample);\n  if (sample) {\n    /* The only thing we do in this example is print a * to indicate a received buffer */\n    g_print (\"*\");\n    gst_sample_unref (sample);\n    return GST_FLOW_OK;\n  }\n\n  return GST_FLOW_ERROR;\n}\n\n/* This function is called when an error message is posted on the bus */\nstatic void error_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  GError *err;\n  gchar *debug_info;\n\n  /* Print error details on the screen */\n  gst_message_parse_error (msg, &err, &debug_info);\n  g_printerr (\"Error received from element %s: %s\\n\", GST_OBJECT_NAME (msg->src), err->message);\n  g_printerr (\"Debugging information: %s\\n\", debug_info ? debug_info : \"none\");\n  g_clear_error (&err);\n  g_free (debug_info);\n\n  g_main_loop_quit (data->main_loop);\n}\n\nint main(int argc, char *argv[]) {\n  CustomData data;\n  GstPad *tee_audio_pad, *tee_video_pad, *tee_app_pad;\n  GstPad *queue_audio_pad, *queue_video_pad, *queue_app_pad;\n  GstAudioInfo info;\n  GstCaps *audio_caps;\n  GstBus *bus;\n\n  /* Initialize custom data structure */\n  memset (&data, 0, sizeof (data));\n  data.b = 1; /* For waveform generation */\n  data.d = 1;\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Create the elements */\n  data.app_source = gst_element_factory_make (\"appsrc\", \"audio_source\");\n  data.tee = gst_element_factory_make (\"tee\", \"tee\");\n  data.audio_queue = gst_element_factory_make (\"queue\", \"audio_queue\");\n  data.audio_convert1 = gst_element_factory_make (\"audioconvert\", \"audio_convert1\");\n  data.audio_resample = gst_element_factory_make (\"audioresample\", \"audio_resample\");\n  data.audio_sink = gst_element_factory_make (\"autoaudiosink\", \"audio_sink\");\n  data.video_queue = gst_element_factory_make (\"queue\", \"video_queue\");\n  data.audio_convert2 = gst_element_factory_make (\"audioconvert\", \"audio_convert2\");\n  data.visual = gst_element_factory_make (\"wavescope\", \"visual\");\n  data.video_convert = gst_element_factory_make (\"videoconvert\", \"video_convert\");\n  data.video_sink = gst_element_factory_make (\"autovideosink\", \"video_sink\");\n  data.app_queue = gst_element_factory_make (\"queue\", \"app_queue\");\n  data.app_sink = gst_element_factory_make (\"appsink\", \"app_sink\");\n\n  /* Create the empty pipeline */\n  data.pipeline = gst_pipeline_new (\"test-pipeline\");\n\n  if (!data.pipeline || !data.app_source || !data.tee || !data.audio_queue || !data.audio_convert1 ||\n      !data.audio_resample || !data.audio_sink || !data.video_queue || !data.audio_convert2 || !data.visual ||\n      !data.video_convert || !data.video_sink || !data.app_queue || !data.app_sink) {\n    g_printerr (\"Not all elements could be created.\\n\");\n    return -1;\n  }\n\n  /* Configure wavescope */\n  g_object_set (data.visual, \"shader\", 0, \"style\", 0, NULL);\n\n  /* Configure appsrc */\n  gst_audio_info_set_format (&info, GST_AUDIO_FORMAT_S16, SAMPLE_RATE, 1, NULL);\n  audio_caps = gst_audio_info_to_caps (&info);\n  g_object_set (data.app_source, \"caps\", audio_caps, \"format\", GST_FORMAT_TIME, NULL);\n  g_signal_connect (data.app_source, \"need-data\", G_CALLBACK (start_feed), &data);\n  g_signal_connect (data.app_source, \"enough-data\", G_CALLBACK (stop_feed), &data);\n\n  /* Configure appsink */\n  g_object_set (data.app_sink, \"emit-signals\", TRUE, \"caps\", audio_caps, NULL);\n  g_signal_connect (data.app_sink, \"new-sample\", G_CALLBACK (new_sample), &data);\n  gst_caps_unref (audio_caps);\n\n  /* Link all elements that can be automatically linked because they have \"Always\" pads */\n  gst_bin_add_many (GST_BIN (data.pipeline), data.app_source, data.tee, data.audio_queue, data.audio_convert1, data.audio_resample,\n      data.audio_sink, data.video_queue, data.audio_convert2, data.visual, data.video_convert, data.video_sink, data.app_queue,\n      data.app_sink, NULL);\n  if (gst_element_link_many (data.app_source, data.tee, NULL) != TRUE ||\n      gst_element_link_many (data.audio_queue, data.audio_convert1, data.audio_resample, data.audio_sink, NULL) != TRUE ||\n      gst_element_link_many (data.video_queue, data.audio_convert2, data.visual, data.video_convert, data.video_sink, NULL) != TRUE ||\n      gst_element_link_many (data.app_queue, data.app_sink, NULL) != TRUE) {\n    g_printerr (\"Elements could not be linked.\\n\");\n    gst_object_unref (data.pipeline);\n    return -1;\n  }\n\n  /* Manually link the Tee, which has \"Request\" pads */\n  tee_audio_pad = gst_element_request_pad_simple (data.tee, \"src_%u\");\n  g_print (\"Obtained request pad %s for audio branch.\\n\", gst_pad_get_name (tee_audio_pad));\n  queue_audio_pad = gst_element_get_static_pad (data.audio_queue, \"sink\");\n  tee_video_pad = gst_element_request_pad_simple (data.tee, \"src_%u\");\n  g_print (\"Obtained request pad %s for video branch.\\n\", gst_pad_get_name (tee_video_pad));\n  queue_video_pad = gst_element_get_static_pad (data.video_queue, \"sink\");\n  tee_app_pad = gst_element_request_pad_simple (data.tee, \"src_%u\");\n  g_print (\"Obtained request pad %s for app branch.\\n\", gst_pad_get_name (tee_app_pad));\n  queue_app_pad = gst_element_get_static_pad (data.app_queue, \"sink\");\n  if (gst_pad_link (tee_audio_pad, queue_audio_pad) != GST_PAD_LINK_OK ||\n      gst_pad_link (tee_video_pad, queue_video_pad) != GST_PAD_LINK_OK ||\n      gst_pad_link (tee_app_pad, queue_app_pad) != GST_PAD_LINK_OK) {\n    g_printerr (\"Tee could not be linked\\n\");\n    gst_object_unref (data.pipeline);\n    return -1;\n  }\n  gst_object_unref (queue_audio_pad);\n  gst_object_unref (queue_video_pad);\n  gst_object_unref (queue_app_pad);\n\n  /* Instruct the bus to emit signals for each received message, and connect to the interesting signals */\n  bus = gst_element_get_bus (data.pipeline);\n  gst_bus_add_signal_watch (bus);\n  g_signal_connect (G_OBJECT (bus), \"message::error\", (GCallback)error_cb, &data);\n  gst_object_unref (bus);\n\n  /* Start playing the pipeline */\n  gst_element_set_state (data.pipeline, GST_STATE_PLAYING);\n\n  /* Create a GLib Main Loop and set it to run */\n  data.main_loop = g_main_loop_new (NULL, FALSE);\n  g_main_loop_run (data.main_loop);\n\n  /* Release the request pads from the Tee, and unref them */\n  gst_element_release_request_pad (data.tee, tee_audio_pad);\n  gst_element_release_request_pad (data.tee, tee_video_pad);\n  gst_element_release_request_pad (data.tee, tee_app_pad);\n  gst_object_unref (tee_audio_pad);\n  gst_object_unref (tee_video_pad);\n  gst_object_unref (tee_app_pad);\n\n  /* Free resources */\n  gst_element_set_state (data.pipeline, GST_STATE_NULL);\n  gst_object_unref (data.pipeline);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Cleanup in C\nDESCRIPTION: Code that properly cleans up GStreamer resources before application termination. This includes freeing messages, setting the pipeline to NULL state, and unreferencing objects to prevent memory leaks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n/* Free resources */\ngst_message_unref (msg);\ngst_object_unref (bus);\ngst_element_set_state (pipeline, GST_STATE_NULL);\ngst_object_unref (pipeline);\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Pad Creation in GStreamer\nDESCRIPTION: Example showing how to handle dynamically created pads in a GStreamer pipeline. The code sets up a basic Ogg demuxer pipeline and attaches a signal handler to respond when new pads are created.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/pads.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nstatic void\ncb_new_pad (GstElement *element,\n        GstPad     *pad,\n        gpointer    data)\n{\n  gchar *name;\n\n  name = gst_pad_get_name (pad);\n  g_print (\"A new pad %s was created\\n\", name);\n  g_free (name);\n\n  /* here, you would setup a new pad link for the newly created pad */\n[..]\n\n}\n\nint\nmain (int   argc,\n      char *argv[])\n{\n  GstElement *pipeline, *source, *demux;\n  GMainLoop *loop;\n\n  /* init */\n  gst_init (&argc, &argv);\n\n  /* create elements */\n  pipeline = gst_pipeline_new (\"my_pipeline\");\n  source = gst_element_factory_make (\"filesrc\", \"source\");\n  g_object_set (source, \"location\", argv[1], NULL);\n  demux = gst_element_factory_make (\"oggdemux\", \"demuxer\");\n\n  /* you would normally check that the elements were created properly */\n\n  /* put together a pipeline */\n  gst_bin_add_many (GST_BIN (pipeline), source, demux, NULL);\n  gst_element_link_pads (source, \"src\", demux, \"sink\");\n\n  /* listen for newly created pads */\n  g_signal_connect (demux, \"pad-added\", G_CALLBACK (cb_new_pad), NULL);\n\n  /* start the pipeline */\n  gst_element_set_state (GST_ELEMENT (pipeline), GST_STATE_PLAYING);\n  loop = g_main_loop_new (NULL, FALSE);\n  g_main_loop_run (loop);\n\n[..]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GStreamer Plugin Structures and Type Macros - C\nDESCRIPTION: Defines C structures for the plugin instance (GstMyFilter) and class (GstMyFilterClass), and provides a set of macros and function declarations necessary for GObject type registration and casting. Relies on GStreamer and GLib types and must be included in all plugin source files to ensure correct type identification and compatibility. This header ensures the element has sink and source pads, supports a silent mode, and is fully recognized by the GObject and GStreamer plugin system.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/boiler.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\n/* Definition of structure storing data for this element. */\ntypedef struct _GstMyFilter {\n  GstElement element;\n\n  GstPad *sinkpad, *srcpad;\n\n  gboolean silent;\n\n\n\n} GstMyFilter;\n\n/* Standard definition defining a class for this element. */\ntypedef struct _GstMyFilterClass {\n  GstElementClass parent_class;\n} GstMyFilterClass;\n\n/* Standard macros for defining types for this element.  */\n#define GST_TYPE_MY_FILTER (gst_my_filter_get_type())\n#define GST_MY_FILTER(obj) \\\n  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_MY_FILTER,GstMyFilter))\n#define GST_MY_FILTER_CLASS(klass) \\\n  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_MY_FILTER,GstMyFilterClass))\n#define GST_IS_MY_FILTER(obj) \\\n  (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_MY_FILTER))\n#define GST_IS_MY_FILTER_CLASS(klass) \\\n  (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_MY_FILTER))\n\n/* Standard function returning type information. */\nGType gst_my_filter_get_type (void);\n\nGST_ELEMENT_REGISTER_DECLARE(my_filter)\n\n```\n\n----------------------------------------\n\nTITLE: Implementing and Registering a GStreamer Event Handler in C\nDESCRIPTION: Defines and assigns a custom event function for a GStreamer element's sink pad. The main function, gst_my_filter_sink_event, processes events like CAPS, EOS, and delegates others to the default handler. It demonstrates best practices such as manual forwarding for CAPS events (since the default handler does not propagate them), and ensures stream-specific clean-up on EOS. Key dependencies include the GStreamer library and a custom element structure with sink and source pads. Inputs are the pad, parent object, and event; output is a gboolean indicating event handling success. Limitations: tailored for a specific filter element and expects proper pad and element initialization.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/eventfn.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean gst_my_filter_sink_event (GstPad    *pad,\n                                          GstObject *parent,\n                                          GstEvent  *event);\n\n[..]\n\nstatic void\ngst_my_filter_init (GstMyFilter * filter)\n{\n[..]\n  /* configure event function on the pad before adding\n   * the pad to the element */\n  gst_pad_set_event_function (filter->sinkpad,\n      gst_my_filter_sink_event);\n[..]\n}\n\nstatic gboolean\ngst_my_filter_sink_event (GstPad    *pad,\n                  GstObject *parent,\n                  GstEvent  *event)\n{\n  gboolean ret;\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  switch (GST_EVENT_TYPE (event)) {\n    case GST_EVENT_CAPS:\n      /* we should handle the format here */\n\n      /* push the event downstream */\n      ret = gst_pad_push_event (filter->srcpad, event);\n      break;\n    case GST_EVENT_EOS:\n      /* end-of-stream, we should close down all stream leftovers here */\n      gst_my_filter_stop_processing (filter);\n\n      ret = gst_pad_event_default (pad, parent, event);\n      break;\n    default:\n      /* just call the default handler */\n      ret = gst_pad_event_default (pad, parent, event);\n      break;\n  }\n  return ret;\n}\n\n```\n\n----------------------------------------\n\nTITLE: GStreamer Element Creation in C\nDESCRIPTION: Creates source and sink elements for the video pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/* Create the elements */\nsource = gst_element_factory_make (\"videotestsrc\", \"source\");\nsink = gst_element_factory_make (\"autovideosink\", \"sink\");\n```\n\n----------------------------------------\n\nTITLE: Registering a GStreamer Interface using Macros in C\nDESCRIPTION: Shows a more concise method for registering a GStreamer interface using the `G_DEFINE_TYPE_WITH_CODE` macro combined with `G_IMPLEMENT_INTERFACE`. This approach simplifies the boilerplate code required for type and interface registration compared to manual static registration. It also includes the standard element registration macro `GST_ELEMENT_REGISTER_DEFINE`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/interfaces.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic void gst_my_filter_some_interface_init   (GstSomeInterface *iface);\n\nG_DEFINE_TYPE_WITH_CODE (GstMyFilter, gst_my_filter,GST_TYPE_ELEMENT,\n     G_IMPLEMENT_INTERFACE (GST_TYPE_SOME_INTERFACE,\n            gst_my_filter_some_interface_init));\n\nGST_ELEMENT_REGISTER_DEFINE(my_filter, \"my-filter\", GST_RANK_NONE, GST_TYPE_MY_FILTER);\n\n```\n\n----------------------------------------\n\nTITLE: Creating GStreamer Element Using Factory Find and Create\nDESCRIPTION: Shows an alternative method to create a GStreamer element by first finding the element factory and then creating the element. Includes proper memory management and error handling.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/elements.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nint\nmain (int   argc,\n      char *argv[])\n{\n  GstElementFactory *factory;\n  GstElement * element;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n\n  /* create element, method #2 */\n  factory = gst_element_factory_find (\"fakesrc\");\n  if (!factory) {\n    g_print (\"Failed to find factory of type 'fakesrc'\\n\");\n    return -1;\n  }\n  element = gst_element_factory_create (factory, \"source\");\n  if (!element) {\n    g_print (\"Failed to create element, even though its factory exists!\\n\");\n    return -1;\n  }\n\n  gst_object_unref (GST_OBJECT (element));\n  gst_object_unref (GST_OBJECT (factory));\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ghost Pads in GStreamer with C\nDESCRIPTION: This code snippet demonstrates how to create a ghost pad in GStreamer. It initializes GStreamer, creates a fakesink element inside a bin, and then creates a ghost pad that exposes the sink element's pad at the bin level, allowing the bin to be used as a substitute for the sink element.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/pads.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nint\nmain (int   argc,\n      char *argv[])\n{\n  GstElement *bin, *sink;\n  GstPad *pad;\n\n  /* init */\n  gst_init (&argc, &argv);\n\n  /* create element, add to bin */\n  sink = gst_element_factory_make (\"fakesink\", \"sink\");\n  bin = gst_bin_new (\"mybin\");\n  gst_bin_add (GST_BIN (bin), sink);\n\n  /* add ghostpad */\n  pad = gst_element_get_static_pad (sink, \"sink\");\n  gst_element_add_pad (bin, gst_ghost_pad_new (\"sink\", pad));\n  gst_object_unref (GST_OBJECT (pad));\n\n[..]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GStreamer Elements in C\nDESCRIPTION: Demonstrates how to create GStreamer elements using gst_element_factory_make(). This function is used to instantiate specific GStreamer elements like videotestsrc and autovideosink.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_14\n\nLANGUAGE: C\nCODE:\n```\ngst_element_factory_make(\"videotestsrc\", \"source\");\ngst_element_factory_make(\"autovideosink\", \"sink\");\n```\n\n----------------------------------------\n\nTITLE: Setting Element Properties in Python\nDESCRIPTION: Configures the video test source pattern property in Python, showing multiple ways to set properties.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Modify the source's properties\nsource.props.pattern = 0\n# Or alternatively\n# source.set_property(\"pattern\", 0)\n# or\n# Gst.util_set_object_arg(source, \"pattern\", 0)\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Android Build Settings with CMake\nDESCRIPTION: Complete CMake configuration for building a GStreamer Android tutorial project. Sets up architecture-specific paths, configures GStreamer dependencies, and defines build settings for a shared library. Handles multiple Android ABIs and ensures proper linking with GStreamer mobile components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/examples/tutorials/android/android-tutorial-1/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18.1)\n\nproject(\"android-tutorial-1\" LANGUAGES C CXX)\n\nif(NOT DEFINED GSTREAMER_ROOT_ANDROID)\n    message(FATAL_ERROR \"GSTREAMER_ROOT_ANDROID is not defined!\")\nendif()\n\nif(ANDROID_ABI STREQUAL \"armeabi\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm\")\nelseif(ANDROID_ABI STREQUAL \"armeabi-v7a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/armv7\")\nelseif(ANDROID_ABI STREQUAL \"arm64-v8a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm64\")\nelseif(ANDROID_ABI STREQUAL \"x86\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86\")\nelseif(ANDROID_ABI STREQUAL \"x86_64\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86_64\")\nelse()\n    message(FATAL_ERROR \"Target arch ABI not supported: ${ANDROID_ABI}\")\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH \"${GSTREAMER_ROOT}/share/cmake\")\n\nset(GSTREAMER_NDK_BUILD_PATH  \"${GSTREAMER_ROOT}/share/gst-android/ndk-build/\")\nset(GSTREAMER_PLUGINS         coreelements)\nfind_library(LOG_LIB log REQUIRED)\nfind_package(GStreamerMobile COMPONENTS ${GSTREAMER_PLUGINS} fonts REQUIRED)\n\nadd_library(tutorial-1 SHARED tutorial-1.c dummy.cpp)\ntarget_link_libraries(tutorial-1\n    PUBLIC\n        GStreamer::mobile\n        ${ANDROID_LIB}\n        ${LOG_LIB}\n)\nset_target_properties(tutorial-1\n    PROPERTIES\n        C_VISIBILITY_PRESET hidden\n        CXX_VISIBILITY_PRESET hidden\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Equalized Audio Player with GStreamer\nDESCRIPTION: This complete program demonstrates how to create a custom audio sink bin containing an equalizer for GStreamer's playbin. It creates a bin with an equalizer, audioconvert, and autoaudiosink elements, links them together, and exposes a ghost pad for connection to playbin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/custom-playbin-sinks.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nint main(int argc, char *argv[]) {\n  GstElement *pipeline, *bin, *equalizer, *convert, *sink;\n  GstPad *pad, *ghost_pad;\n  GstBus *bus;\n  GstMessage *msg;\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Build the pipeline */\n  pipeline = gst_parse_launch (\"playbin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\", NULL);\n\n  /* Create the elements inside the sink bin */\n  equalizer = gst_element_factory_make (\"equalizer-3bands\", \"equalizer\");\n  convert = gst_element_factory_make (\"audioconvert\", \"convert\");\n  sink = gst_element_factory_make (\"autoaudiosink\", \"audio_sink\");\n  if (!equalizer || !convert || !sink) {\n    g_printerr (\"Not all elements could be created.\\n\");\n    return -1;\n  }\n\n  /* Create the sink bin, add the elements and link them */\n  bin = gst_bin_new (\"audio_sink_bin\");\n  gst_bin_add_many (GST_BIN (bin), equalizer, convert, sink, NULL);\n  gst_element_link_many (equalizer, convert, sink, NULL);\n  pad = gst_element_get_static_pad (equalizer, \"sink\");\n  ghost_pad = gst_ghost_pad_new (\"sink\", pad);\n  gst_pad_set_active (ghost_pad, TRUE);\n  gst_element_add_pad (bin, ghost_pad);\n  gst_object_unref (pad);\n\n  /* Configure the equalizer */\n  g_object_set (G_OBJECT (equalizer), \"band1\", (gdouble)-24.0, NULL);\n  g_object_set (G_OBJECT (equalizer), \"band2\", (gdouble)-24.0, NULL);\n\n  /* Set playbin's audio sink to be our sink bin */\n  g_object_set (GST_OBJECT (pipeline), \"audio-sink\", bin, NULL);\n\n  /* Start playing */\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n\n  /* Wait until error or EOS */\n  bus = gst_element_get_bus (pipeline);\n  msg = gst_bus_timed_pop_filtered (bus, GST_CLOCK_TIME_NONE, GST_MESSAGE_ERROR | GST_MESSAGE_EOS);\n\n  /* Free resources */\n  if (msg != NULL)\n    gst_message_unref (msg);\n  gst_object_unref (bus);\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (pipeline);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GStreamer Element Using Element Factory\nDESCRIPTION: Demonstrates how to create a GStreamer element using gst_element_factory_make(), including proper initialization and cleanup. Creates a 'fakesrc' element named 'source' with error handling.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/elements.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nint\nmain (int   argc,\n      char *argv[])\n{\n  GstElement *element;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n\n  /* create element */\n  element = gst_element_factory_make (\"fakesrc\", \"source\");\n  if (!element) {\n    g_print (\"Failed to create element of type 'fakesrc'\\n\");\n    return -1;\n  }\n\n  gst_object_unref (GST_OBJECT (element));\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Video Properties from Fixed Capabilities – GStreamer (C)\nDESCRIPTION: This snippet defines a function that safely extracts the width and height properties from a fixed GstCaps object representing video capabilities. It checks that the caps are fixed, then retrieves the first structure and reads the \"width\" and \"height\" integer fields using GstStructure API. An appropriate diagnostic is printed if either property is missing. Requires GStreamer’s core libraries and is intended for use where fixed (non-dynamic) video caps are needed. Inputs: GstCaps pointer; Outputs: printed width and height or diagnostic. The code assumes a fixed caps structure with integer width and height fields.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/pads.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic void\nread_video_props (GstCaps *caps)\n{\n  gint width, height;\n  const GstStructure *str;\n\n  g_return_if_fail (gst_caps_is_fixed (caps));\n\n  str = gst_caps_get_structure (caps, 0);\n  if (!gst_structure_get_int (str, \"width\", &width) ||\n      !gst_structure_get_int (str, \"height\", &height)) {\n    g_print (\"No width/height available\\n\");\n    return;\n  }\n\n  g_print (\"The video size of this set of capabilities is %dx%d\\n\",\n       width, height);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting a GStreamer Filter Sink Event Function in C\nDESCRIPTION: This snippet shows how to register an event handling function (`gst_my_filter_sink_event`) on the sink pad of a custom GStreamer element (`GstMyFilter`) during its initialization (`gst_my_filter_init`). This allows the element to intercept and process stream events like CAPS changes or End-Of-Stream signals.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/chainfn.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic void\ngst_my_filter_init (GstMyFilter * filter)\n{\n[..]\n  gst_pad_set_event_function (filter->sinkpad,\n      gst_my_filter_sink_event);\n[..]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Media Duration and Setting Slider Range\nDESCRIPTION: Code that queries the media duration if it's not already known, then sets the range of the slider control to match the duration of the media in seconds.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n/* If we didn't know it yet, query the stream duration */\nif (!GST_CLOCK_TIME_IS_VALID (data->duration)) {\n  if (!gst_element_query_duration (data->playbin, GST_FORMAT_TIME, &data->duration)) {\n    g_printerr (\"Could not query current duration.\\n\");\n  } else {\n    /* Set the range of the slider to the clip duration, in SECONDS */\n    gtk_range_set_range (GTK_RANGE (data->slider), 0, (gdouble)data->duration / GST_SECOND);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Plugin Initialization and Definition (GStreamer, C)\nDESCRIPTION: This code implements the plugin_init function, which registers the custom element (my_filter) when the plugin is loaded, returning TRUE if registration succeeds. The GST_PLUGIN_DEFINE macro is used to declare plugin metadata and ensure the plugin is discoverable by GStreamer. Required dependencies include GStreamer macros and correct linking to the plugin binary. Parameters include plugin versioning, licensing, description, and name.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/boiler.md#2025-04-23_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nstatic gboolean\nplugin_init (GstPlugin *plugin)\n{\n  return GST_ELEMENT_REGISTER (my_filter, plugin);\n}\n\nGST_PLUGIN_DEFINE (\n  GST_VERSION_MAJOR,\n  GST_VERSION_MINOR,\n  my_filter,\n  \"My filter plugin\",\n  plugin_init,\n  VERSION,\n  \"LGPL\",\n  \"GStreamer\",\n  \"http://gstreamer.net/\"\n)\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Initialization for GStreamer Android Application\nDESCRIPTION: Sets up the CustomData structure and creates a thread to run the GStreamer pipeline. This method is called from Java to initialize the native components of the application.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nstatic void gst_native_init (JNIEnv* env, jobject thiz) {\n  CustomData *data = g_new0 (CustomData, 1);\n  SET_CUSTOM_DATA (env, thiz, custom_data_field_id, data);\n  data->app = (*env)->NewGlobalRef (env, thiz);\n  pthread_create (&gst_app_thread, NULL, &app_function, data);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the GStreamer Pipeline in Python\nDESCRIPTION: Sets the pipeline to the playing state and checks for errors in Python.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# Start playing\nret = pipeline.set_state(Gst.State.PLAYING)\nif ret == Gst.StateChangeReturn.FAILURE:\n    print(\"Unable to set the pipeline to the playing state.\")\n    exit(-1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Metadata in GStreamer\nDESCRIPTION: Complete implementation of a custom metadata API for GStreamer. It includes initialization, transformation, and cleanup functions, plus the implementation of meta registration and the buffer addition function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n[...]\n\nstatic gboolean\nmy_example_meta_init (GstMeta * meta, gpointer params, GstBuffer * buffer)\n{\n  MyExampleMeta *emeta = (MyExampleMeta *) meta;\n\n  emeta->age = 0;\n  emeta->name = NULL;\n\n  return TRUE;\n}\n\nstatic gboolean\nmy_example_meta_transform (GstBuffer * transbuf, GstMeta * meta,\n    GstBuffer * buffer, GQuark type, gpointer data)\n{\n  MyExampleMeta *emeta = (MyExampleMeta *) meta;\n\n  /* we always copy no matter what transform */\n  gst_buffer_add_my_example_meta (transbuf, emeta->age, emeta->name);\n\n  return TRUE;\n}\n\nstatic void\nmy_example_meta_free (GstMeta * meta, GstBuffer * buffer)\n{\n  MyExampleMeta *emeta = (MyExampleMeta *) meta;\n\n  g_free (emeta->name);\n  emeta->name = NULL;\n}\n\nconst GstMetaInfo *\nmy_example_meta_get_info (void)\n{\n  static const GstMetaInfo *meta_info = NULL;\n\n  if (g_once_init_enter (&meta_info)) {\n    const GstMetaInfo *mi = gst_meta_register (MY_EXAMPLE_META_API_TYPE,\n        \"MyExampleMeta\",\n        sizeof (MyExampleMeta),\n        my_example_meta_init,\n        my_example_meta_free,\n        my_example_meta_transform);\n    g_once_init_leave (&meta_info, mi);\n  }\n  return meta_info;\n}\n\nMyExampleMeta *\ngst_buffer_add_my_example_meta (GstBuffer   *buffer,\n                                gint         age,\n                                const gchar *name)\n{\n  MyExampleMeta *meta;\n\n  g_return_val_if_fail (GST_IS_BUFFER (buffer), NULL);\n\n  meta = (MyExampleMeta *) gst_buffer_add_meta (buffer,\n      MY_EXAMPLE_META_INFO, NULL);\n\n  meta->age = age;\n  meta->name = g_strdup (name);\n\n  return meta;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GStreamer No-Rebuffer Strategy with Buffering Queries in C\nDESCRIPTION: This C code demonstrates a GStreamer pipeline setup using `playbin` to implement a no-rebuffer strategy. It initializes GStreamer, creates a pipeline for a given URI, and manages buffering by querying the pipeline's buffer status, position, and duration. The `buffer_timeout` function periodically checks if enough data is buffered relative to the remaining playback time. Bus messages for buffering (`GST_MESSAGE_BUFFERING`) and asynchronous state changes (`GST_MESSAGE_ASYNC_DONE`) are handled to pause the pipeline during buffering and resume playback when conditions allow. Requires GStreamer and GLib libraries.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/buffering.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nGstState target_state;\nstatic gboolean is_live;\nstatic gboolean is_buffering;\n\nstatic gboolean\nbuffer_timeout (gpointer data)\n{\n  GstElement *pipeline = data;\n  GstQuery *query;\n  gboolean busy;\n  gint percent;\n  gint64 estimated_total;\n  gint64 position, duration;\n  guint64 play_left;\n\n  query = gst_query_new_buffering (GST_FORMAT_TIME);\n\n  if (!gst_element_query (pipeline, query))\n    return TRUE;\n\n  gst_query_parse_buffering_percent (query, &busy, &percent);\n  gst_query_parse_buffering_range (query, NULL, NULL, NULL, &estimated_total);\n\n  if (estimated_total == -1)\n    estimated_total = 0;\n\n  /* calculate the remaining playback time */\n  if (!gst_element_query_position (pipeline, GST_FORMAT_TIME, &position))\n    position = -1;\n  if (!gst_element_query_duration (pipeline, GST_FORMAT_TIME, &duration))\n    duration = -1;\n\n  if (duration != -1 && position != -1)\n    play_left = GST_TIME_AS_MSECONDS (duration - position);\n  else\n    play_left = 0;\n\n  g_message (\"play_left %\" G_GUINT64_FORMAT\", estimated_total %\" G_GUINT64_FORMAT\n      \", percent %d\", play_left, estimated_total, percent);\n\n  /* we are buffering or the estimated download time is bigger than the\n   * remaining playback time. We keep buffering. */\n  is_buffering = (busy || estimated_total * 1.1 > play_left);\n\n  if (!is_buffering)\n    gst_element_set_state (pipeline, target_state);\n\n  return is_buffering;\n}\n\nstatic void\non_message_buffering (GstBus *bus, GstMessage *message, gpointer user_data)\n{\n  GstElement *pipeline = user_data;\n  gint percent;\n\n  /* no state management needed for live pipelines */\n  if (is_live)\n    return;\n\n  gst_message_parse_buffering (message, &percent);\n\n  if (percent < 100) {\n    /* buffering busy */\n    if (!is_buffering) {\n      is_buffering = TRUE;\n      if (target_state == GST_STATE_PLAYING) {\n        /* we were not buffering but PLAYING, PAUSE  the pipeline. */\n        gst_element_set_state (pipeline, GST_STATE_PAUSED);\n      }\n    }\n  }\n}\n\nstatic void\non_message_async_done (GstBus *bus, GstMessage *message, gpointer user_data)\n{\n  GstElement *pipeline = user_data;\n\n  if (!is_buffering)\n    gst_element_set_state (pipeline, target_state);\n  else\n    g_timeout_add (500, buffer_timeout, pipeline);\n}\n\ngint\nmain (gint   argc,\n      gchar *argv[])\n{\n  GstElement *pipeline;\n  GMainLoop *loop;\n  GstBus *bus;\n  GstStateChangeReturn ret;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n  loop = g_main_loop_new (NULL, FALSE);\n\n  /* make sure we have a URI */\n  if (argc != 2) {\n    g_print (\"Usage: %s <URI>\\n\", argv[0]);\n    return -1;\n  }\n\n  /* set up */\n  pipeline = gst_element_factory_make (\"playbin\", \"pipeline\");\n  g_object_set (G_OBJECT (pipeline), \"uri\", argv[1], NULL);\n  g_object_set (G_OBJECT (pipeline), \"flags\", 0x697 , NULL);\n\n  bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));\n  gst_bus_add_signal_watch (bus);\n\n  g_signal_connect (bus, \"message::buffering\",\n    (GCallback) on_message_buffering, pipeline);\n  g_signal_connect (bus, \"message::async-done\",\n    (GCallback) on_message_async_done, pipeline);\n  gst_object_unref (bus);\n\n  is_buffering = FALSE;\n  target_state = GST_STATE_PLAYING;\n  ret = gst_element_set_state (pipeline, GST_STATE_PAUSED);\n\n  switch (ret) {\n    case GST_STATE_CHANGE_SUCCESS:\n      is_live = FALSE;\n      break;\n\n    case GST_STATE_CHANGE_FAILURE:\n      g_warning (\"failed to PAUSE\");\n      return -1;\n\n    case GST_STATE_CHANGE_NO_PREROLL:\n      is_live = TRUE;\n      break;\n\n    default:\n      break;\n  }\n\n  /* now run */\n  g_main_loop_run (loop);\n\n  /* also clean up */\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (GST_OBJECT (pipeline));\n  g_main_loop_unref (loop);\n\n  return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Probes in GStreamer\nDESCRIPTION: Demonstrates how to add and remove probes on GStreamer pads. These functions allow attaching and detaching callbacks to monitor pad activity.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/pipeline-manipulation.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ngst_pad_add_probe ()\n```\n\nLANGUAGE: C\nCODE:\n```\ngst_pad_remove_probe ()\n```\n\n----------------------------------------\n\nTITLE: Performing Seek Operation in GStreamer Pipeline with C\nDESCRIPTION: This code demonstrates how to perform a seek operation in a GStreamer pipeline using gst_element_seek_simple(). It includes conditions for when to seek and explains the usage of seek flags like GST_SEEK_FLAG_FLUSH and GST_SEEK_FLAG_KEY_UNIT.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/time-management.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n/* If seeking is enabled, we have not done it yet, and the time is right, seek */\nif (data.seek_enabled && !data.seek_done && current > 10 * GST_SECOND) {\n  g_print (\"\\nReached 10s, performing seek...\\n\");\n  gst_element_seek_simple (data.pipeline, GST_FORMAT_TIME,\n      GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT, 30 * GST_SECOND);\n  data.seek_done = TRUE;\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Network-Resilient Streaming Player with GStreamer in C\nDESCRIPTION: This code implements a complete GStreamer-based media player in C that streams video from a web URI, handling buffering and clock lost messages to maintain smooth playback. It initializes the GStreamer pipeline using playbin, installs bus signal watchers, manages live stream detection, and processes bus messages for errors, buffering, clock synchronization, and end-of-stream. Required dependencies include GStreamer development libraries, and the code is intended to be compiled with gcc using `pkg-config --cflags --libs gstreamer-1.0`. The main inputs are the C source file and GStreamer libraries; on execution, it fetches media from the Internet for playback. Limitations include reliance on network connectivity and the presence of GStreamer libraries at runtime.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/streaming.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\\n#include <string.h>\\n\\ntypedef struct _CustomData {\\n  gboolean is_live;\\n  GstElement *pipeline;\\n  GMainLoop *loop;\\n} CustomData;\\n\\nstatic void cb_message (GstBus *bus, GstMessage *msg, CustomData *data) {\\n\\n  switch (GST_MESSAGE_TYPE (msg)) {\\n    case GST_MESSAGE_ERROR: {\\n      GError *err;\\n      gchar *debug;\\n\\n      gst_message_parse_error (msg, &err, &debug);\\n      g_print (\"Error: %s\\n\", err->message);\\n      g_error_free (err);\\n      g_free (debug);\\n\\n      gst_element_set_state (data->pipeline, GST_STATE_READY);\\n      g_main_loop_quit (data->loop);\\n      break;\\n    }\\n    case GST_MESSAGE_EOS:\\n      /* end-of-stream */\\n      gst_element_set_state (data->pipeline, GST_STATE_READY);\\n      g_main_loop_quit (data->loop);\\n      break;\\n    case GST_MESSAGE_BUFFERING: {\\n      gint percent = 0;\\n\\n      /* If the stream is live, we do not care about buffering. */\\n      if (data->is_live) break;\\n\\n      gst_message_parse_buffering (msg, &percent);\\n      g_print (\"Buffering (%3d%%)\\r\", percent);\\n      /* Wait until buffering is complete before start/resume playing */\\n      if (percent < 100)\\n        gst_element_set_state (data->pipeline, GST_STATE_PAUSED);\\n      else\\n        gst_element_set_state (data->pipeline, GST_STATE_PLAYING);\\n      break;\\n    }\\n    case GST_MESSAGE_CLOCK_LOST:\\n      /* Get a new clock */\\n      gst_element_set_state (data->pipeline, GST_STATE_PAUSED);\\n      gst_element_set_state (data->pipeline, GST_STATE_PLAYING);\\n      break;\\n    default:\\n      /* Unhandled message */\\n      break;\\n    }\\n}\\n\\nint main(int argc, char *argv[]) {\\n  GstElement *pipeline;\\n  GstBus *bus;\\n  GstStateChangeReturn ret;\\n  GMainLoop *main_loop;\\n  CustomData data;\\n\\n  /* Initialize GStreamer */\\n  gst_init (&argc, &argv);\\n\\n  /* Initialize our data structure */\\n  memset (&data, 0, sizeof (data));\\n\\n  /* Build the pipeline */\\n  pipeline = gst_parse_launch (\"playbin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\", NULL);\\n  bus = gst_element_get_bus (pipeline);\\n\\n  /* Start playing */\\n  ret = gst_element_set_state (pipeline, GST_STATE_PLAYING);\\n  if (ret == GST_STATE_CHANGE_FAILURE) {\\n    g_printerr (\"Unable to set the pipeline to the playing state.\\n\");\\n    gst_object_unref (pipeline);\\n    return -1;\\n  } else if (ret == GST_STATE_CHANGE_NO_PREROLL) {\\n    data.is_live = TRUE;\\n  }\\n\\n  main_loop = g_main_loop_new (NULL, FALSE);\\n  data.loop = main_loop;\\n  data.pipeline = pipeline;\\n\\n  gst_bus_add_signal_watch (bus);\\n  g_signal_connect (bus, \"message\", G_CALLBACK (cb_message), &data);\\n\\n  g_main_loop_run (main_loop);\\n\\n  /* Free resources */\\n  g_main_loop_unref (main_loop);\\n  gst_object_unref (bus);\\n  gst_element_set_state (pipeline, GST_STATE_NULL);\\n  gst_object_unref (pipeline);\\n  return 0;\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Downstream Events in GStreamer Elements (C)\nDESCRIPTION: This C code implements a custom sink pad event handler for a GStreamer filter element. The handler dispatches based on event type, forwarding recognized events downstream and performing additional processing as needed (e.g., cleaning up resources on EOS or FLUSH_STOP events). It requires GStreamer development headers, and the element must have been constructed with src_pad and appropriate function pointers set. Key parameters include the event type being handled and associated element-specific cleanup or transformation logic. Inputs are GstPad pointers and events; output is a boolean indicating whether the event was handled.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/events.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean\ngst_my_filter_sink_event (GstPad  *pad, GstObject * parent, GstEvent * event)\n{\n  GstMyFilter *filter;\n  gboolean ret;\n\n  filter = GST_MY_FILTER (parent);\n  ...\n\n  switch (GST_EVENT_TYPE (event)) {\n    case GST_EVENT_SEGMENT:\n      /* maybe save and/or update the current segment (e.g. for output\n       * clipping) or convert the event into one in a different format\n       * (e.g. BYTES to TIME) or drop it and set a flag to send a segment\n       * event in a different format later */\n      ret = gst_pad_push_event (filter->src_pad, event);\n      break;\n    case GST_EVENT_EOS:\n      /* end-of-stream, we should close down all stream leftovers here */\n      gst_my_filter_stop_processing (filter);\n      ret = gst_pad_push_event (filter->src_pad, event);\n      break;\n    case GST_EVENT_FLUSH_STOP:\n      gst_my_filter_clear_temporary_buffers (filter);\n      ret = gst_pad_push_event (filter->src_pad, event);\n      break;\n    default:\n      ret = gst_pad_event_default (pad, parent, event);\n      break;\n  }\n\n  ...\n  return ret;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Data Structure for GStreamer Playback State\nDESCRIPTION: Defines a C struct `_CustomData` to encapsulate all necessary data for the GStreamer playback application. This includes a pointer to the `playbin` element, counts for video, audio, and text streams, indices for the currently selected streams, and a pointer to the GLib `GMainLoop` for handling events and interactivity.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n/* Structure to contain all our information, so we can pass it around */\ntypedef struct _CustomData {\n  GstElement *playbin;  /* Our one and only element */\n\n  gint n_video;          /* Number of embedded video streams */\n  gint n_audio;          /* Number of embedded audio streams */\n  gint n_text;           /* Number of embedded subtitle streams */\n\n  gint current_video;    /* Currently playing video stream */\n  gint current_audio;    /* Currently playing audio stream */\n  gint current_text;     /* Currently playing subtitle stream */\n\n  GMainLoop *main_loop;  /* GLib's Main Loop */\n} CustomData;\n```\n\n----------------------------------------\n\nTITLE: Defining Capabilities for Pad Template (GStreamer, C)\nDESCRIPTION: This snippet illustrates a GstStaticPadTemplate definition for a sink pad with more specific capabilities, restricting media type to 'audio/x-raw' with format S16, mono or stereo, and any sample rate between 8000 and 96000 Hz. This is done by specifying a caps string, using both property lists and ranges, inside GST_STATIC_CAPS. Defining correct capabilities ensures only supported formats are accepted by the plugin. GStreamer development files and macros like GST_AUDIO_NE (S16) must be available.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/boiler.md#2025-04-23_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nstatic GstStaticPadTemplate sink_factory =\nGST_STATIC_PAD_TEMPLATE (\n  \"sink\",\n  GST_PAD_SINK,\n  GST_PAD_ALWAYS,\n  GST_STATIC_CAPS (\n    \"audio/x-raw, \"\n      \"format = (string) \" GST_AUDIO_NE (S16) \", \"\n      \"channels = (int) { 1, 2 }, \"\n      \"rate = (int) [ 8000, 96000 ]\"\n  )\n);\n\n```\n\n----------------------------------------\n\nTITLE: Generating Video Frames with GStreamer appsrc in C\nDESCRIPTION: This C code demonstrates creating a GStreamer pipeline using `appsrc` to generate video data. It sets up `appsrc` for raw video (RGB16, 384x288), connects to its `need-data` signal, and within the callback (`cb_need_data`), generates alternating black and white frames, timestamps them for 2 FPS, and pushes them into the pipeline using `g_signal_emit_by_name`. The pipeline converts the color space and displays the video using `xvimagesink`. It requires the GStreamer library.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/pipeline-manipulation.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nstatic GMainLoop *loop;\n\nstatic void\ncb_need_data (GstElement *appsrc,\n          guint       unused_size,\n          gpointer    user_data)\n{\n  static gboolean white = FALSE;\n  static GstClockTime timestamp = 0;\n  GstBuffer *buffer;\n  guint size;\n  GstFlowReturn ret;\n\n  size = 385 * 288 * 2;\n\n  buffer = gst_buffer_new_allocate (NULL, size, NULL);\n\n  /* this makes the image black/white */\n  gst_buffer_memset (buffer, 0, white ? 0xff : 0x0, size);\n\n  white = !white;\n\n  GST_BUFFER_PTS (buffer) = timestamp;\n  GST_BUFFER_DURATION (buffer) = gst_util_uint64_scale_int (1, GST_SECOND, 2);\n\n  timestamp += GST_BUFFER_DURATION (buffer);\n\n  g_signal_emit_by_name (appsrc, \"push-buffer\", buffer, &ret);\n  gst_buffer_unref (buffer);\n\n  if (ret != GST_FLOW_OK) {\n    /* something wrong, stop pushing */\n    g_main_loop_quit (loop);\n  }\n}\n\ngint\nmain (gint   argc,\n      gchar *argv[])\n{\n  GstElement *pipeline, *appsrc, *conv, *videosink;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n  loop = g_main_loop_new (NULL, FALSE);\n\n  /* setup pipeline */\n  pipeline = gst_pipeline_new (\"pipeline\");\n  appsrc = gst_element_factory_make (\"appsrc\", \"source\");\n  conv = gst_element_factory_make (\"videoconvert\", \"conv\");\n  videosink = gst_element_factory_make (\"xvimagesink\", \"videosink\");\n\n  /* setup */\n  g_object_set (G_OBJECT (appsrc), \"caps\",\n        gst_caps_new_simple (\"video/x-raw\",\n                     \"format\", G_TYPE_STRING, \"RGB16\",\n                     \"width\", G_TYPE_INT, 384,\n                     \"height\", G_TYPE_INT, 288,\n                     \"framerate\", GST_TYPE_FRACTION, 0, 1,\n                     NULL), NULL);\n  gst_bin_add_many (GST_BIN (pipeline), appsrc, conv, videosink, NULL);\n  gst_element_link_many (appsrc, conv, videosink, NULL);\n\n  /* setup appsrc */\n  g_object_set (G_OBJECT (appsrc),\n        \"stream-type\", 0, // 0 corresponds to GST_APP_STREAM_TYPE_STREAM (push mode)\n        \"format\", GST_FORMAT_TIME, NULL);\n  g_signal_connect (appsrc, \"need-data\", G_CALLBACK (cb_need_data), NULL);\n\n  /* play */\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n  g_main_loop_run (loop);\n\n  /* clean up */\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (GST_OBJECT (pipeline));\n  g_main_loop_unref (loop);\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GstDiscoverer Instance\nDESCRIPTION: Creates a new GstDiscoverer object with a specified timeout period in nanoseconds using GST_SECOND macro\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Instantiate the Discoverer */\ndata.discoverer = gst_discoverer_new (5 * GST_SECOND, &err);\nif (!data.discoverer) {\n  g_print (\"Error creating discoverer instance: %s\\n\", err->message);\n  g_clear_error (&err);\n  return -1;\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Pipeline Effects Dynamically in GStreamer - C\nDESCRIPTION: This C code snippet demonstrates how to safely swap a video effect element in a running GStreamer pipeline at regular intervals. It uses pad probes to block the data flow, handles the end-of-stream for safe removal, manages element queuing, and ensures the pipeline remains valid and running throughout the transition. Dependencies include GStreamer development libraries and GLib; required parameters are GStreamer element names for effects, and the pipeline expects video input and is configured to display using ximagesink. The implementation ensures that color space conversions are handled via videoconvert, and supports customizing effects via command-line arguments.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/pipeline-manipulation.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nstatic gchar *opt_effects = NULL;\n\n#define DEFAULT_EFFECTS \"identity,exclusion,navigationtest,\" \\\n    \"agingtv,videoflip,vertigotv,gaussianblur,shagadelictv,edgetv\"\n\nstatic GstPad *blockpad;\nstatic GstElement *conv_before;\nstatic GstElement *conv_after;\nstatic GstElement *cur_effect;\nstatic GstElement *pipeline;\n\nstatic GQueue effects = G_QUEUE_INIT;\n\nstatic GstPadProbeReturn\nevent_probe_cb (GstPad * pad, GstPadProbeInfo * info, gpointer user_data)\n{\n  GMainLoop *loop = user_data;\n  GstElement *next;\n\n  if (GST_EVENT_TYPE (GST_PAD_PROBE_INFO_DATA (info)) != GST_EVENT_EOS)\n    return GST_PAD_PROBE_OK;\n\n  gst_pad_remove_probe (pad, GST_PAD_PROBE_INFO_ID (info));\n\n  /* take next effect from the queue */\n  next = g_queue_pop_head (&effects);\n  if (next == NULL) {\n    GST_DEBUG_OBJECT (pad, \"no more effects\");\n    g_main_loop_quit (loop);\n    return GST_PAD_PROBE_DROP;\n  }\n\n  g_print (\"Switching from '%s' to '%s'..\\n\", GST_OBJECT_NAME (cur_effect),\n      GST_OBJECT_NAME (next));\n\n  gst_element_set_state (cur_effect, GST_STATE_NULL);\n\n  /* remove unlinks automatically */\n  GST_DEBUG_OBJECT (pipeline, \"removing %\" GST_PTR_FORMAT, cur_effect);\n  gst_bin_remove (GST_BIN (pipeline), cur_effect);\n\n  /* push current effect back into the queue */\n  g_queue_push_tail (&effects, g_steal_pointer (&cur_effect));\n\n  /* add, link and start the new effect */\n  GST_DEBUG_OBJECT (pipeline, \"adding   %\" GST_PTR_FORMAT, next);\n  gst_bin_add (GST_BIN (pipeline), next);\n\n  GST_DEBUG_OBJECT (pipeline, \"linking..\");\n  gst_element_link_many (conv_before, next, conv_after, NULL);\n\n  gst_element_set_state (next, GST_STATE_PLAYING);\n\n  cur_effect = next;\n  GST_DEBUG_OBJECT (pipeline, \"done\");\n\n  return GST_PAD_PROBE_DROP;\n}\n\nstatic GstPadProbeReturn\npad_probe_cb (GstPad * pad, GstPadProbeInfo * info, gpointer user_data)\n{\n  GstPad *srcpad, *sinkpad;\n\n  GST_DEBUG_OBJECT (pad, \"pad is blocked now\");\n\n  /* remove the probe first */\n  gst_pad_remove_probe (pad, GST_PAD_PROBE_INFO_ID (info));\n\n  /* install new probe for EOS */\n  srcpad = gst_element_get_static_pad (cur_effect, \"src\");\n  gst_pad_add_probe (srcpad, GST_PAD_PROBE_TYPE_BLOCK |\n      GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM, event_probe_cb, user_data, NULL);\n  gst_object_unref (srcpad);\n\n  /* push EOS into the element, the probe will be fired when the\n   * EOS leaves the effect and it has thus drained all of its data */\n  sinkpad = gst_element_get_static_pad (cur_effect, \"sink\");\n  gst_pad_send_event (sinkpad, gst_event_new_eos ());\n  gst_object_unref (sinkpad);\n\n  return GST_PAD_PROBE_OK;\n}\n\nstatic gboolean\ntimeout_cb (gpointer user_data)\n{\n  gst_pad_add_probe (blockpad, GST_PAD_PROBE_TYPE_BLOCK_DOWNSTREAM,\n      pad_probe_cb, user_data, NULL);\n\n  return TRUE;\n}\n\nstatic gboolean\nbus_cb (GstBus * bus, GstMessage * msg, gpointer user_data)\n{\n  GMainLoop *loop = user_data;\n\n  switch (GST_MESSAGE_TYPE (msg)) {\n    case GST_MESSAGE_ERROR:{\n      GError *err = NULL;\n      gchar *dbg;\n\n      gst_message_parse_error (msg, &err, &dbg);\n      gst_object_default_error (msg->src, err, dbg);\n      g_clear_error (&err);\n      g_free (dbg);\n      g_main_loop_quit (loop);\n      break;\n    }\n    default:\n      break;\n  }\n  return TRUE;\n}\n\nint\nmain (int argc, char **argv)\n{\n  GOptionEntry options[] = {\n    {\"effects\", 'e', 0, G_OPTION_ARG_STRING, &opt_effects,\n        \"Effects to use (comma-separated list of element names)\", NULL},\n    {NULL}\n  };\n  GOptionContext *ctx;\n  GError *err = NULL;\n  GMainLoop *loop;\n  GstElement *src, *q1, *q2, *effect, *filter, *sink;\n  gchar **effect_names, **e;\n\n  ctx = g_option_context_new (\"\");\n  g_option_context_add_main_entries (ctx, options, GETTEXT_PACKAGE);\n  g_option_context_add_group (ctx, gst_init_get_option_group ());\n  if (!g_option_context_parse (ctx, &argc, &argv, &err)) {\n    g_error (\"Error initializing: %s\\n\", err->message);\n    return 1;\n  }\n  g_option_context_free (ctx);\n\n  if (opt_effects != NULL)\n    effect_names = g_strsplit (opt_effects, \",\", -1);\n  else\n    effect_names = g_strsplit (DEFAULT_EFFECTS, \",\", -1);\n\n  for (e = effect_names; e != NULL && *e != NULL; ++e) {\n    GstElement *el;\n\n    el = gst_element_factory_make (*e, NULL);\n    if (el) {\n      g_print (\"Adding effect '%s'\\n\", *e);\n      g_queue_push_tail (&effects, gst_object_ref_sink (el));\n    }\n  }\n\n  pipeline = gst_pipeline_new (\"pipeline\");\n\n  src = gst_element_factory_make (\"videotestsrc\", NULL);\n  g_object_set (src, \"is-live\", TRUE, NULL);\n\n  filter = gst_element_factory_make (\"capsfilter\", NULL);\n  gst_util_set_object_arg (G_OBJECT (filter), \"caps\",\n      \"video/x-raw, width=320, height=240, \"\n      \"format={ I420, YV12, YUY2, UYVY, AYUV, Y41B, Y42B, \"\n      \"YVYU, Y444, v210, v216, NV12, NV21, UYVP, A420, YUV9, YVU9, IYU1 }\");\n\n  q1 = gst_element_factory_make (\"queue\", NULL);\n\n  blockpad = gst_element_get_static_pad (q1, \"src\");\n\n  conv_before = gst_element_factory_make (\"videoconvert\", NULL);\n\n  effect = g_queue_pop_head (&effects);\n  cur_effect = effect;\n\n  conv_after = gst_element_factory_make (\"videoconvert\", NULL);\n\n  q2 = gst_element_factory_make (\"queue\", NULL);\n\n  sink = gst_element_factory_make (\"ximagesink\", NULL);\n\n  gst_bin_add_many (GST_BIN (pipeline), src, filter, q1, conv_before, effect,\n      conv_after, q2, sink, NULL);\n\n  gst_element_link_many (src, filter, q1, conv_before, effect, conv_after,\n      q2, sink, NULL);\n\n  if (gst_element_set_state (pipeline,\n          GST_STATE_PLAYING) == GST_STATE_CHANGE_FAILURE) {\n    g_error (\"Error starting pipeline\");\n    return 1;\n  }\n\n  loop = g_main_loop_new (NULL, FALSE);\n\n  gst_bus_add_watch (GST_ELEMENT_BUS (pipeline), bus_cb, loop);\n\n  g_timeout_add_seconds (1, timeout_cb, loop);\n\n  g_main_loop_run (loop);\n\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n\n  gst_object_unref (blockpad);\n  gst_bus_remove_watch (GST_ELEMENT_BUS (pipeline));\n  gst_object_unref (pipeline);\n  g_main_loop_unref (loop);\n\n  g_queue_clear_full (&effects, (GDestroyNotify) gst_object_unref);\n  gst_object_unref (cur_effect);\n  g_strfreev (effect_names);\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving GStreamer Element Factory Information in C\nDESCRIPTION: Demonstrates initializing GStreamer, finding an element factory by name ('fakesrc'), and printing its name, category (klass), and description using GStreamer API functions like `gst_element_factory_find`, `gst_plugin_feature_get_name`, and `gst_element_factory_get_metadata`. It checks if the factory exists and prints an error if not. Finally, it unreferences the factory object.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/elements.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nint\nmain (int   argc,\n      char *argv[])\n{\n  GstElementFactory *factory;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n\n  /* get factory */\n  factory = gst_element_factory_find (\"fakesrc\");\n  if (!factory) {\n    g_print (\"You don't have the 'fakesrc' element installed!\\n\");\n    return -1;\n  }\n\n  /* display information */\n  g_print (\"The '%s' element is a member of the category %s.\\n\"\n           \"Description: %s\\n\",\n           gst_plugin_feature_get_name (GST_PLUGIN_FEATURE (factory)),\n           gst_element_factory_get_metadata (factory, GST_ELEMENT_METADATA_KLASS),\n           gst_element_factory_get_metadata (factory, GST_ELEMENT_METADATA_DESCRIPTION));\n\n  gst_object_unref (GST_OBJECT (factory));\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic GStreamer Audio Player in C\nDESCRIPTION: A complete implementation of an Ogg/Vorbis audio player using GStreamer. The program creates a pipeline with file source, Ogg demuxer, Vorbis decoder, audio converter, and audio sink elements. It includes error handling and end-of-stream detection.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/helloworld.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n#include <glib.h>\n\nstatic gboolean\nbus_call (GstBus     *bus,\n          GstMessage *msg,\n          gpointer    data)\n{\n  GMainLoop *loop = (GMainLoop *) data;\n\n  switch (GST_MESSAGE_TYPE (msg)) {\n\n    case GST_MESSAGE_EOS:\n      g_print (\"End of stream\\n\");\n      g_main_loop_quit (loop);\n      break;\n\n    case GST_MESSAGE_ERROR: {\n      gchar  *debug;\n      GError *error;\n\n      gst_message_parse_error (msg, &error, &debug);\n      g_free (debug);\n\n      g_printerr (\"Error: %s\\n\", error->message);\n      g_error_free (error);\n\n      g_main_loop_quit (loop);\n      break;\n    }\n    default:\n      break;\n  }\n\n  return TRUE;\n}\n\nstatic void\non_pad_added (GstElement *element,\n              GstPad     *pad,\n              gpointer    data)\n{\n  GstPad *sinkpad;\n  GstElement *decoder = (GstElement *) data;\n\n  /* We can now link this pad with the vorbis-decoder sink pad */\n  g_print (\"Dynamic pad created, linking demuxer/decoder\\n\");\n\n  sinkpad = gst_element_get_static_pad (decoder, \"sink\");\n\n  gst_pad_link (pad, sinkpad);\n\n  gst_object_unref (sinkpad);\n}\n\nint\nmain (int   argc,\n      char *argv[])\n{\n  GMainLoop *loop;\n\n  GstElement *pipeline, *source, *demuxer, *decoder, *conv, *sink;\n  GstBus *bus;\n  guint bus_watch_id;\n\n  /* Initialisation */\n  gst_init (&argc, &argv);\n\n  loop = g_main_loop_new (NULL, FALSE);\n\n\n  /* Check input arguments */\n  if (argc != 2) {\n    g_printerr (\"Usage: %s <Ogg/Vorbis filename>\\n\", argv[0]);\n    return -1;\n  }\n\n\n  /* Create gstreamer elements */\n  pipeline = gst_pipeline_new (\"audio-player\");\n  source   = gst_element_factory_make (\"filesrc\",       \"file-source\");\n  demuxer  = gst_element_factory_make (\"oggdemux\",      \"ogg-demuxer\");\n  decoder  = gst_element_factory_make (\"vorbisdec\",     \"vorbis-decoder\");\n  conv     = gst_element_factory_make (\"audioconvert\",  \"converter\");\n  sink     = gst_element_factory_make (\"autoaudiosink\", \"audio-output\");\n\n  if (!pipeline || !source || !demuxer || !decoder || !conv || !sink) {\n    g_printerr (\"One element could not be created. Exiting.\\n\");\n    return -1;\n  }\n\n  /* Set up the pipeline */\n\n  /* we set the input filename to the source element */\n  g_object_set (G_OBJECT (source), \"location\", argv[1], NULL);\n\n  /* we add a message handler */\n  bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));\n  bus_watch_id = gst_bus_add_watch (bus, bus_call, loop);\n  gst_object_unref (bus);\n\n  /* we add all elements into the pipeline */\n  /* file-source | ogg-demuxer | vorbis-decoder | converter | alsa-output */\n  gst_bin_add_many (GST_BIN (pipeline),\n                    source, demuxer, decoder, conv, sink, NULL);\n\n  /* we link the elements together */\n  /* file-source -> ogg-demuxer ~> vorbis-decoder -> converter -> alsa-output */\n  gst_element_link (source, demuxer);\n  gst_element_link_many (decoder, conv, sink, NULL);\n  g_signal_connect (demuxer, \"pad-added\", G_CALLBACK (on_pad_added), decoder);\n\n  /* Set the pipeline to \"playing\" state*/\n  g_print (\"Now playing: %s\\n\", argv[1]);\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n\n\n  /* Iterate */\n  g_print (\"Running...\\n\");\n  g_main_loop_run (loop);\n\n\n  /* Out of the main loop, clean up nicely */\n  g_print (\"Returned, stopping playback\\n\");\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n\n  g_print (\"Deleting pipeline\\n\");\n  gst_object_unref (GST_OBJECT (pipeline));\n  g_source_remove (bus_watch_id);\n  g_main_loop_unref (loop);\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GStreamer in C\nDESCRIPTION: This C code snippet presents a minimal GStreamer application. It includes the core GStreamer header (`gst/gst.h`) and calls `gst_init(NULL, NULL)` within the `main` function to initialize the GStreamer library. This basic structure serves as an example for demonstrating compilation methods.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-mac-osx.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nint\nmain(int argc, char *argv[])\n{\n  gst_init(NULL, NULL);\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Pad Function with GST_DEBUG_FUNCPTR in GStreamer (C)\nDESCRIPTION: This snippet exemplifies the use of the GST_DEBUG_FUNCPTR macro when assigning event handler functions to a GStreamer pad in C. This macro wraps a function pointer in a way that enhances debug output clarity, assisting in function tracing when debugging pipelines. Dependency: GStreamer base libraries. Key parameter is the pad object and the function to handle events. Expected input: Initialization code setting the pad event handler; output: Improved traceability and debug log readability. Limitation: Only relevant when GStreamer debugging is enabled.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/appendix/checklist-element.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ngst_pad_set_event_func (myelement->srcpad,\n    GST_DEBUG_FUNCPTR (my_element_src_event));\n\n```\n\n----------------------------------------\n\nTITLE: Implementing GStreamer Playback with Subtitle Selection in C\nDESCRIPTION: This C code demonstrates a GStreamer application using the `playbin` element to play media with video, audio, and subtitle streams. It initializes GStreamer, sets the media URI and subtitle URI, enables playback flags for all stream types, and uses a GLib main loop to handle bus messages and keyboard input. The `analyze_streams` function retrieves and displays metadata about the available streams, while `handle_keyboard` allows the user to select the active subtitle stream by entering its index. Dependencies include GStreamer 1.0 and GLib.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/subtitle-management.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n#include <gst/gst.h>\n\n/* Structure to contain all our information, so we can pass it around */\ntypedef struct _CustomData {\n  GstElement *playbin;  /* Our one and only element */\n\n  gint n_video;          /* Number of embedded video streams */\n  gint n_audio;          /* Number of embedded audio streams */\n  gint n_text;           /* Number of embedded subtitle streams */\n\n  gint current_video;    /* Currently playing video stream */\n  gint current_audio;    /* Currently playing audio stream */\n  gint current_text;     /* Currently playing subtitle stream */\n\n  GMainLoop *main_loop;  /* GLib's Main Loop */\n} CustomData;\n\n/* playbin flags */\ntypedef enum {\n  GST_PLAY_FLAG_VIDEO         = (1 << 0), /* We want video output */\n  GST_PLAY_FLAG_AUDIO         = (1 << 1), /* We want audio output */\n  GST_PLAY_FLAG_TEXT          = (1 << 2)  /* We want subtitle output */\n} GstPlayFlags;\n\n/* Forward definition for the message and keyboard processing functions */\nstatic gboolean handle_message (GstBus *bus, GstMessage *msg, CustomData *data);\nstatic gboolean handle_keyboard (GIOChannel *source, GIOCondition cond, CustomData *data);\n\nint main(int argc, char *argv[]) {\n  CustomData data;\n  GstBus *bus;\n  GstStateChangeReturn ret;\n  gint flags;\n  GIOChannel *io_stdin;\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Create the elements */\n  data.playbin = gst_element_factory_make (\"playbin\", \"playbin\");\n\n  if (!data.playbin) {\n    g_printerr (\"Not all elements could be created.\\n\");\n    return -1;\n  }\n\n  /* Set the URI to play */\n  g_object_set (data.playbin, \"uri\", \"https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.ogv\", NULL);\n\n  /* Set the subtitle URI to play and some font description */\n  g_object_set (data.playbin, \"suburi\", \"https://gstreamer.freedesktop.org/data/media/sintel_trailer_gr.srt\", NULL);\n  g_object_set (data.playbin, \"subtitle-font-desc\", \"Sans, 18\", NULL);\n\n  /* Set flags to show Audio, Video and Subtitles */\n  g_object_get (data.playbin, \"flags\", &flags, NULL);\n  flags |= GST_PLAY_FLAG_VIDEO | GST_PLAY_FLAG_AUDIO | GST_PLAY_FLAG_TEXT;\n  g_object_set (data.playbin, \"flags\", flags, NULL);\n\n  /* Add a bus watch, so we get notified when a message arrives */\n  bus = gst_element_get_bus (data.playbin);\n  gst_bus_add_watch (bus, (GstBusFunc)handle_message, &data);\n\n  /* Add a keyboard watch so we get notified of keystrokes */\n#ifdef G_OS_WIN32\n  io_stdin = g_io_channel_win32_new_fd (fileno (stdin));\n#else\n  io_stdin = g_io_channel_unix_new (fileno (stdin));\n#endif\n  g_io_add_watch (io_stdin, G_IO_IN, (GIOFunc)handle_keyboard, &data);\n\n  /* Start playing */\n  ret = gst_element_set_state (data.playbin, GST_STATE_PLAYING);\n  if (ret == GST_STATE_CHANGE_FAILURE) {\n    g_printerr (\"Unable to set the pipeline to the playing state.\\n\");\n    gst_object_unref (data.playbin);\n    return -1;\n  }\n\n  /* Create a GLib Main Loop and set it to run */\n  data.main_loop = g_main_loop_new (NULL, FALSE);\n  g_main_loop_run (data.main_loop);\n\n  /* Free resources */\n  g_main_loop_unref (data.main_loop);\n  g_io_channel_unref (io_stdin);\n  gst_object_unref (bus);\n  gst_element_set_state (data.playbin, GST_STATE_NULL);\n  gst_object_unref (data.playbin);\n  return 0;\n}\n\n/* Extract some metadata from the streams and print it on the screen */\nstatic void analyze_streams (CustomData *data) {\n  gint i;\n  GstTagList *tags;\n  gchar *str;\n  guint rate;\n\n  /* Read some properties */\n  g_object_get (data->playbin, \"n-video\", &data->n_video, NULL);\n  g_object_get (data->playbin, \"n-audio\", &data->n_audio, NULL);\n  g_object_get (data->playbin, \"n-text\", &data->n_text, NULL);\n\n  g_print (\"%d video stream(s), %d audio stream(s), %d text stream(s)\\n\",\n    data->n_video, data->n_audio, data->n_text);\n\n  g_print (\"\\n\");\n  for (i = 0; i < data->n_video; i++) {\n    tags = NULL;\n    /* Retrieve the stream's video tags */\n    g_signal_emit_by_name (data->playbin, \"get-video-tags\", i, &tags);\n    if (tags) {\n      g_print (\"video stream %d:\\n\", i);\n      gst_tag_list_get_string (tags, GST_TAG_VIDEO_CODEC, &str);\n      g_print (\"  codec: %s\\n\", str ? str : \"unknown\");\n      g_free (str);\n      gst_tag_list_free (tags);\n    }\n  }\n\n  g_print (\"\\n\");\n  for (i = 0; i < data->n_audio; i++) {\n    tags = NULL;\n    /* Retrieve the stream's audio tags */\n    g_signal_emit_by_name (data->playbin, \"get-audio-tags\", i, &tags);\n    if (tags) {\n      g_print (\"audio stream %d:\\n\", i);\n      if (gst_tag_list_get_string (tags, GST_TAG_AUDIO_CODEC, &str)) {\n        g_print (\"  codec: %s\\n\", str);\n        g_free (str);\n      }\n      if (gst_tag_list_get_string (tags, GST_TAG_LANGUAGE_CODE, &str)) {\n        g_print (\"  language: %s\\n\", str);\n        g_free (str);\n      }\n      if (gst_tag_list_get_uint (tags, GST_TAG_BITRATE, &rate)) {\n        g_print (\"  bitrate: %d\\n\", rate);\n      }\n      gst_tag_list_free (tags);\n    }\n  }\n\n  g_print (\"\\n\");\n  for (i = 0; i < data->n_text; i++) {\n    tags = NULL;\n    /* Retrieve the stream's subtitle tags */\n    g_print (\"subtitle stream %d:\\n\", i);\n    g_signal_emit_by_name (data->playbin, \"get-text-tags\", i, &tags);\n    if (tags) {\n      if (gst_tag_list_get_string (tags, GST_TAG_LANGUAGE_CODE, &str)) {\n        g_print (\"  language: %s\\n\", str);\n        g_free (str);\n      }\n      gst_tag_list_free (tags);\n    } else {\n      g_print (\"  no tags found\\n\");\n    }\n  }\n\n  g_object_get (data->playbin, \"current-video\", &data->current_video, NULL);\n  g_object_get (data->playbin, \"current-audio\", &data->current_audio, NULL);\n  g_object_get (data->playbin, \"current-text\", &data->current_text, NULL);\n\n  g_print (\"\\n\");\n  g_print (\"Currently playing video stream %d, audio stream %d and subtitle stream %d\\n\",\n      data->current_video, data->current_audio, data->current_text);\n  g_print (\"Type any number and hit ENTER to select a different subtitle stream\\n\");\n}\n\n/* Process messages from GStreamer */\nstatic gboolean handle_message (GstBus *bus, GstMessage *msg, CustomData *data) {\n  GError *err;\n  gchar *debug_info;\n\n  switch (GST_MESSAGE_TYPE (msg)) {\n    case GST_MESSAGE_ERROR:\n      gst_message_parse_error (msg, &err, &debug_info);\n      g_printerr (\"Error received from element %s: %s\\n\", GST_OBJECT_NAME (msg->src), err->message);\n      g_printerr (\"Debugging information: %s\\n\", debug_info ? debug_info : \"none\");\n      g_clear_error (&err);\n      g_free (debug_info);\n      g_main_loop_quit (data->main_loop);\n      break;\n    case GST_MESSAGE_EOS:\n      g_print (\"End-Of-Stream reached.\\n\");\n      g_main_loop_quit (data->main_loop);\n      break;\n    case GST_MESSAGE_STATE_CHANGED: {\n      GstState old_state, new_state, pending_state;\n      gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n      if (GST_MESSAGE_SRC (msg) == GST_OBJECT (data->playbin)) {\n        if (new_state == GST_STATE_PLAYING) {\n          /* Once we are in the playing state, analyze the streams */\n          analyze_streams (data);\n        }\n      }\n    } break;\n  }\n\n  /* We want to keep receiving messages */\n  return TRUE;\n}\n\n/* Process keyboard input */\nstatic gboolean handle_keyboard (GIOChannel *source, GIOCondition cond, CustomData *data) {\n  gchar *str = NULL;\n\n  if (g_io_channel_read_line (source, &str, NULL, NULL, NULL) == G_IO_STATUS_NORMAL) {\n    int index = atoi (str);\n    if (index < 0 || index >= data->n_text) {\n      g_printerr (\"Index out of bounds\\n\");\n    } else {\n      /* If the input was a valid subtitle stream index, set the current subtitle stream */\n      g_print (\"Setting current subtitle stream to %d\\n\", index);\n      g_object_set (data->playbin, \"current-text\", index, NULL);\n    }\n  }\n  g_free (str);\n  return TRUE;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Stream Tags Using GStreamer and GTK+ in C\nDESCRIPTION: This snippet retrieves audio and subtitle stream metadata (language and bitrate) using GStreamer APIs and inserts formatted data into a GTK+ TextBuffer for GUI display. Dependencies are GTK+ 3.0 and GStreamer 1.0. The key parameters include 'tags', a GstTagList for stream tags, and 'text', a GtkTextBuffer pointer. It expects valid stream tags and a ready GTK+ environment, and manages memory cleanup after inserting stream information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntotal_str = g_strdup_printf (\"  language: %s\\n\", str);\ngtk_text_buffer_insert_at_cursor (text, total_str, -1);\ng_free (total_str);\ng_free (str);\n}\nif (gst_tag_list_get_uint (tags, GST_TAG_BITRATE, &rate)) {\n  total_str = g_strdup_printf (\"  bitrate: %d\\n\", rate);\n  gtk_text_buffer_insert_at_cursor (text, total_str, -1);\n  g_free (total_str);\n}\ngst_tag_list_free (tags);\n}\n}\n\nfor (i = 0; i < n_text; i++) {\n  tags = NULL;\n  /* Retrieve the stream's subtitle tags */\n  g_signal_emit_by_name (data->playbin, \"get-text-tags\", i, &tags);\n  if (tags) {\n    total_str = g_strdup_printf (\"\\nsubtitle stream %d:\\n\", i);\n    gtk_text_buffer_insert_at_cursor (text, total_str, -1);\n    g_free (total_str);\n    if (gst_tag_list_get_string (tags, GST_TAG_LANGUAGE_CODE, &str)) {\n      total_str = g_strdup_printf (\"  language: %s\\n\", str);\n      gtk_text_buffer_insert_at_cursor (text, total_str, -1);\n      g_free (total_str);\n      g_free (str);\n    }\n    gst_tag_list_free (tags);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Element Properties in C\nDESCRIPTION: Configures the video test source pattern property.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n/* Modify the source's properties */\ng_object_set (source, \"pattern\", 0, NULL);\n```\n\n----------------------------------------\n\nTITLE: Error Handling and Bus Monitoring in C\nDESCRIPTION: Waits for the pipeline to finish and handles error messages from the GStreamer bus.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_12\n\nLANGUAGE: C\nCODE:\n```\n/* Wait until error or EOS */\nbus = gst_element_get_bus (pipeline);\nmsg =\n    gst_bus_timed_pop_filtered (bus, GST_CLOCK_TIME_NONE,\n    GST_MESSAGE_ERROR | GST_MESSAGE_EOS);\n\n/* Parse message */\nif (msg != NULL) {\n  GError *err;\n  gchar *debug_info;\n\n  switch (GST_MESSAGE_TYPE (msg)) {\n    case GST_MESSAGE_ERROR:\n      gst_message_parse_error (msg, &err, &debug_info);\n      g_printerr (\"Error received from element %s: %s\\n\",\n          GST_OBJECT_NAME (msg->src), err->message);\n      g_printerr (\"Debugging information: %s\\n\",\n          debug_info ? debug_info : \"none\");\n      g_clear_error (&err);\n      g_free (debug_info);\n      break;\n    case GST_MESSAGE_EOS:\n      g_print (\"End-Of-Stream reached.\\n\");\n      break;\n    default:\n      /* We should not reach here because we only asked for ERRORs and EOS */\n      g_printerr (\"Unexpected message received.\\n\");\n      break;\n  }\n  gst_message_unref (msg);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to GStreamer Pipeline in C\nDESCRIPTION: Illustrates how to add multiple elements to a GStreamer pipeline using gst_bin_add_many(). This function allows adding several elements to a bin (like a pipeline) in one call.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_16\n\nLANGUAGE: C\nCODE:\n```\ngst_bin_add_many(GST_BIN(pipeline), source, sink, NULL);\n```\n\n----------------------------------------\n\nTITLE: GStreamer Buffer Push Implementation\nDESCRIPTION: Implementation of buffer creation and pushing to appsrc. Handles buffer allocation, timestamp setting, and data generation for audio samples.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/short-cutting-the-pipeline.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean push_data (CustomData *data) {\n  GstBuffer *buffer;\n  GstFlowReturn ret;\n  GstMapInfo map;\n  int i;\n  gint num_samples = CHUNK_SIZE / 2;\n  gfloat freq;\n\n  buffer = gst_buffer_new_and_alloc (CHUNK_SIZE);\n\n  GST_BUFFER_TIMESTAMP (buffer) = gst_util_uint64_scale (data->num_samples, GST_SECOND, SAMPLE_RATE);\n  GST_BUFFER_DURATION (buffer) = gst_util_uint64_scale (num_samples, GST_SECOND, SAMPLE_RATE);\n\n  if (gst_buffer_map (buf, &map, GST_MAP_READ)) {\n    gint16 *raw = (gint16 *) map.data;\n    /* create samples here */\n    gst_buffer_unmap (buf, &map);\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining the _class_init Function for GStreamer Plugin Class - C\nDESCRIPTION: Implements the class initialization function for the GstMyFilter class, retrieving the parent GstElementClass and calling gst_element_class_set_static_metadata to register descriptive metadata for the element. This function is part of the GObject system's class registration and is automatically invoked as part of type initialization. Requires correct prototype and linkage to the type registration macros, and encapsulates element metadata setup.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/boiler.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstatic void\ngst_my_filter_class_init (GstMyFilterClass * klass)\n{\n  GstElementClass *element_class = GST_ELEMENT_CLASS (klass);\n\n[..]\n  gst_element_class_set_static_metadata (element_class,\n    \"An example plugin\",\n    \"Example/FirstExample\",\n    \"Shows the basic structure of a plugin\",\n    \"your name <your.name@your.isp>\");\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a GStreamer Pipeline in C\nDESCRIPTION: This C code demonstrates how to build, run, and clean up a GStreamer pipeline for audio playback using plugins and a custom filter. It initializes the GStreamer library, creates source, decoder, conversion, filtering, and sink elements, links them into a pipeline, and manages bus messages for error and end-of-stream events. The dependencies include GStreamer and GLib development libraries, and the program takes the input MP3 filename as a command line argument, outputting playback or error details and requiring custom plugins (like 'my_filter') to be installed and discoverable.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/testapp.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nstatic gboolean\nbus_call (GstBus     *bus,\n      GstMessage *msg,\n      gpointer    data)\n{\n  GMainLoop *loop = data;\n\n  switch (GST_MESSAGE_TYPE (msg)) {\n    case GST_MESSAGE_EOS:\n      g_print (\"End-of-stream\\n\");\n      g_main_loop_quit (loop);\n      break;\n    case GST_MESSAGE_ERROR: {\n      gchar *debug = NULL;\n      GError *err = NULL;\n\n      gst_message_parse_error (msg, &err, &debug);\n\n      g_print (\"Error: %s\\n\", err->message);\n      g_error_free (err);\n\n      if (debug) {\n        g_print (\"Debug details: %s\\n\", debug);\n        g_free (debug);\n      }\n\n      g_main_loop_quit (loop);\n      break;\n    }\n    default:\n      break;\n  }\n\n  return TRUE;\n}\n\ngint\nmain (gint   argc,\n      gchar *argv[])\n{\n  GstStateChangeReturn ret;\n  GstElement *pipeline, *filesrc, *decoder, *filter, *sink;\n  GstElement *convert1, *convert2, *resample;\n  GMainLoop *loop;\n  GstBus *bus;\n  guint watch_id;\n\n  /* initialization */\n  gst_init (&argc, &argv);\n  loop = g_main_loop_new (NULL, FALSE);\n  if (argc != 2) {\n    g_print (\"Usage: %s <mp3 filename>\\n\", argv[0]);\n    return 01;\n  }\n\n  /* create elements */\n  pipeline = gst_pipeline_new (\"my_pipeline\");\n\n  /* watch for messages on the pipeline's bus (note that this will only\n   * work like this when a GLib main loop is running) */\n  bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));\n  watch_id = gst_bus_add_watch (bus, bus_call, loop);\n  gst_object_unref (bus);\n\n  filesrc  = gst_element_factory_make (\"filesrc\", \"my_filesource\");\n  decoder  = gst_element_factory_make (\"mad\", \"my_decoder\");\n\n  /* putting an audioconvert element here to convert the output of the\n   * decoder into a format that my_filter can handle (we are assuming it\n   * will handle any sample rate here though) */\n  convert1 = gst_element_factory_make (\"audioconvert\", \"audioconvert1\");\n\n  /* use \"identity\" here for a filter that does nothing */\n  filter   = gst_element_factory_make (\"my_filter\", \"my_filter\");\n\n  /* there should always be audioconvert and audioresample elements before\n   * the audio sink, since the capabilities of the audio sink usually vary\n   * depending on the environment (output used, sound card, driver etc.) */\n  convert2 = gst_element_factory_make (\"audioconvert\", \"audioconvert2\");\n  resample = gst_element_factory_make (\"audioresample\", \"audioresample\");\n  sink     = gst_element_factory_make (\"pulsesink\", \"audiosink\");\n\n  if (!sink || !decoder) {\n    g_print (\"Decoder or output could not be found - check your install\\n\");\n    return -1;\n  } else if (!convert1 || !convert2 || !resample) {\n    g_print (\"Could not create audioconvert or audioresample element, \"\n             \"check your installation\\n\");\n    return -1;\n  } else if (!filter) {\n    g_print (\"Your self-written filter could not be found. Make sure it \"\n             \"is installed correctly in $(libdir)/gstreamer-1.0/ or \"\n             \"~/.gstreamer-1.0/plugins/ and that gst-inspect-1.0 lists it. \"\n             \"If it doesn't, check with 'GST_DEBUG=*:2 gst-inspect-1.0' for \"\n             \"the reason why it is not being loaded.\");\n    return -1;\n  }\n\n  g_object_set (G_OBJECT (filesrc), \"location\", argv[1], NULL);\n\n  gst_bin_add_many (GST_BIN (pipeline), filesrc, decoder, convert1, filter,\n                    convert2, resample, sink, NULL);\n\n  /* link everything together */\n  if (!gst_element_link_many (filesrc, decoder, convert1, filter, convert2,\n                              resample, sink, NULL)) {\n    g_print (\"Failed to link one or more elements!\\n\");\n    return -1;\n  }\n\n  /* run */\n  ret = gst_element_set_state (pipeline, GST_STATE_PLAYING);\n  if (ret == GST_STATE_CHANGE_FAILURE) {\n    GstMessage *msg;\n\n    g_print (\"Failed to start up pipeline!\\n\");\n\n    /* check if there is an error message with details on the bus */\n    msg = gst_bus_poll (bus, GST_MESSAGE_ERROR, 0);\n    if (msg) {\n      GError *err = NULL;\n\n      gst_message_parse_error (msg, &err, NULL);\n      g_print (\"ERROR: %s\\n\", err->message);\n      g_error_free (err);\n      gst_message_unref (msg);\n    }\n    return -1;\n  }\n\n  g_main_loop_run (loop);\n\n  /* clean up */\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (pipeline);\n  g_source_remove (watch_id);\n  g_main_loop_unref (loop);\n\n  return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Type Detection using GStreamer in C\nDESCRIPTION: This code demonstrates how to use GStreamer's typefind element to detect the media type of a stream. It creates a pipeline that reads a file, attempts to identify its media type, and prints the detected type along with the probability of the match.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/autoplugging.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\n[.. my_bus_callback goes here ..]\n\nstatic gboolean\nidle_exit_loop (gpointer data)\n{\n  g_main_loop_quit ((GMainLoop *) data);\n\n  /* once */\n  return FALSE;\n}\n\nstatic void\ncb_typefound (GstElement *typefind,\n          guint       probability,\n          GstCaps    *caps,\n          gpointer    data)\n{\n  GMainLoop *loop = data;\n  gchar *type;\n\n  type = gst_caps_to_string (caps);\n  g_print (\"Media type %s found, probability %d%%\\n\", type, probability);\n  g_free (type);\n\n  /* since we connect to a signal in the pipeline thread context, we need\n   * to set an idle handler to exit the main loop in the mainloop context.\n   * Normally, your app should not need to worry about such things. */\n  g_idle_add (idle_exit_loop, loop);\n}\n\ngint\nmain (gint   argc,\n      gchar *argv[])\n{\n  GMainLoop *loop;\n  GstElement *pipeline, *filesrc, *typefind, *fakesink;\n  GstBus *bus;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n  loop = g_main_loop_new (NULL, FALSE);\n\n  /* check args */\n  if (argc != 2) {\n    g_print (\"Usage: %s <filename>\\n\", argv[0]);\n    return -1;\n  }\n\n  /* create a new pipeline to hold the elements */\n  pipeline = gst_pipeline_new (\"pipe\");\n\n  bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));\n  gst_bus_add_watch (bus, my_bus_callback, NULL);\n  gst_object_unref (bus);\n\n  /* create file source and typefind element */\n  filesrc = gst_element_factory_make (\"filesrc\", \"source\");\n  g_object_set (G_OBJECT (filesrc), \"location\", argv[1], NULL);\n  typefind = gst_element_factory_make (\"typefind\", \"typefinder\");\n  g_signal_connect (typefind, \"have-type\", G_CALLBACK (cb_typefound), loop);\n  fakesink = gst_element_factory_make (\"fakesink\", \"sink\");\n\n  /* setup */\n  gst_bin_add_many (GST_BIN (pipeline), filesrc, typefind, fakesink, NULL);\n  gst_element_link_many (filesrc, typefind, fakesink, NULL);\n  gst_element_set_state (GST_ELEMENT (pipeline), GST_STATE_PLAYING);\n  g_main_loop_run (loop);\n\n  /* unset */\n  gst_element_set_state (GST_ELEMENT (pipeline), GST_STATE_NULL);\n  gst_object_unref (GST_OBJECT (pipeline));\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Pads in GStreamer (C)\nDESCRIPTION: This C snippet illustrates how to implement request pads in a GStreamer element by registering a request pad template and providing 'request_new_pad' and 'release_pad' callbacks. The functions handle instantiating requested pads, attaching context, and performing cleanup when pads are released, following GStreamer conventions. The element must register a pad template with GST_PAD_REQUEST and handle addition/removal of pads on-demand.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/request.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\nstatic GstPad * gst_my_filter_request_new_pad   (GstElement     *element,\n                         GstPadTemplate *templ,\n                                                 const gchar    *name,\n                                                 const GstCaps  *caps);\n\nstatic void gst_my_filter_release_pad (GstElement *element,\n                                       GstPad *pad);\n\nstatic GstStaticPadTemplate sink_factory =\nGST_STATIC_PAD_TEMPLATE (\n  \"sink_%u\",\n  GST_PAD_SINK,\n  GST_PAD_REQUEST,\n  GST_STATIC_CAPS (\"ANY\")\n);\n\nstatic void\ngst_my_filter_class_init (GstMyFilterClass *klass)\n{\n  GstElementClass *element_class = GST_ELEMENT_CLASS (klass);\n[..]\n  gst_element_class_add_pad_template (klass,\n    gst_static_pad_template_get (&sink_factory));\n[..]\n  element_class->request_new_pad = gst_my_filter_request_new_pad;\n  element_class->release_pad = gst_my_filter_release_pad;\n}\n\nstatic GstPad *\ngst_my_filter_request_new_pad (GstElement     *element,\n                   GstPadTemplate *templ,\n                   const gchar    *name,\n                               const GstCaps  *caps)\n{\n  GstPad *pad;\n  GstMyFilterInputContext *context;\n\n  context = g_new0 (GstMyFilterInputContext, 1);\n  pad = gst_pad_new_from_template (templ, name);\n  gst_pad_set_element_private (pad, context);\n\n  /* normally, you would set _chain () and _event () functions here */\n\n  gst_element_add_pad (element, pad);\n\n  return pad;\n}\n\nstatic void\ngst_my_filter_release_pad (GstElement *element,\n                           GstPad *pad)\n{\n  GstMyFilterInputContext *context;\n\n  context = gst_pad_get_element_private (pad);\n  g_free (context);\n\n  gst_element_remove_pad (element, pad);\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Setting up GStreamer Plugin Type and Registration Macros - C\nDESCRIPTION: Uses macros and provided header to implement the GObject type for the element and make registration boilerplate available. The macros G_DEFINE_TYPE and GST_ELEMENT_REGISTER_DEFINE set up inheritance from GstElement and register the plugin's type for dynamic discovery. Requires inclusion of the plugin header and is essential for type safety and plugin registration at runtime.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/boiler.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#include \"filter.h\"\n\nG_DEFINE_TYPE (GstMyFilter, gst_my_filter, GST_TYPE_ELEMENT);\nGST_ELEMENT_REGISTER_DEFINE(my_filter, \"my-filter\", GST_RANK_NONE, GST_TYPE_MY_FILTER);\n\n```\n\n----------------------------------------\n\nTITLE: Registering Static Pad Templates in Class Init (GStreamer, C)\nDESCRIPTION: This code demonstrates registering previously defined static pad templates with a GStreamer element class during its class initialization function. It uses gst_element_class_add_pad_template to associate both source and sink pad templates with the GstElementClass, after obtaining a runtime GstPadTemplate from the static template using gst_static_pad_template_get. This step is necessary for GStreamer to understand the pads that the element may expose. Dependencies include valid static pad template declarations and the GStreamer object model.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/boiler.md#2025-04-23_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nstatic GstStaticPadTemplate sink_factory = [..],\n    src_factory = [..];\n\nstatic void\ngst_my_filter_class_init (GstMyFilterClass * klass)\n{\n  GstElementClass *element_class = GST_ELEMENT_CLASS (klass);\n[..]\n\n  gst_element_class_add_pad_template (element_class,\n    gst_static_pad_template_get (&src_factory));\n  gst_element_class_add_pad_template (element_class,\n    gst_static_pad_template_get (&sink_factory));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Pipeline in C\nDESCRIPTION: Adds the source and sink elements to the pipeline and links them together.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n/* Build the pipeline */\ngst_bin_add_many (GST_BIN (pipeline), source, sink, NULL);\nif (gst_element_link (source, sink) != TRUE) {\n  g_printerr (\"Elements could not be linked.\\n\");\n  gst_object_unref (pipeline);\n  return -1;\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing UI with Current Playback Position\nDESCRIPTION: Callback function that queries the current playback position and duration from the pipeline and updates the UI. It runs periodically to refresh the UI with the latest position information, converting GStreamer's nanosecond timestamps to milliseconds for the UI.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_15\n\nLANGUAGE: C\nCODE:\n```\n/* If we have pipeline and it is running, query the current position and clip duration and inform\n * the application */\nstatic gboolean refresh_ui (GStreamerBackend *self) {\n    gint64 position;\n\n    /* We do not want to update anything unless we have a working pipeline in the PAUSED or PLAYING state */\n    if (!self || !self->pipeline || self->state < GST_STATE_PAUSED)\n        return TRUE;\n\n    /* If we didn't know it yet, query the stream duration */\n    if (!GST_CLOCK_TIME_IS_VALID (self->duration)) {\n        gst_element_query_duration (self->pipeline, GST_FORMAT_TIME, &self->duration);\n    }\n\n    if (gst_element_query_position (self->pipeline, GST_FORMAT_TIME, &position)) {\n        /* The UI expects these values in milliseconds, and GStreamer provides nanoseconds */\n        [self setCurrentUIPosition:position / GST_MSECOND duration:self->duration / GST_MSECOND];\n    }\n    return TRUE;\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Media Streams in GStreamer C Application\nDESCRIPTION: This function extracts metadata from video, audio, and subtitle streams in the media file. It demonstrates how to retrieve and display information about multiple streams in a GStreamer pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nstatic void analyze_streams (CustomData *data) {\n  gint i;\n  GstTagList *tags;\n  gchar *str;\n  guint rate;\n\n  g_object_get (data->playbin, \"n-video\", &data->n_video, NULL);\n  g_object_get (data->playbin, \"n-audio\", &data->n_audio, NULL);\n  g_object_get (data->playbin, \"n-text\", &data->n_text, NULL);\n\n  g_print (\"%d video stream(s), %d audio stream(s), %d text stream(s)\\n\",\n    data->n_video, data->n_audio, data->n_text);\n\n  // ... (code for analyzing video, audio, and subtitle streams)\n\n  g_object_get (data->playbin, \"current-video\", &data->current_video, NULL);\n  g_object_get (data->playbin, \"current-audio\", &data->current_audio, NULL);\n  g_object_get (data->playbin, \"current-text\", &data->current_text, NULL);\n\n  g_print (\"\\n\");\n  g_print (\"Currently playing video stream %d, audio stream %d and text stream %d\\n\",\n    data->current_video, data->current_audio, data->current_text);\n  g_print (\"Type any number and hit ENTER to select a different audio stream\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Audio Streams in GStreamer Playbin C\nDESCRIPTION: This code demonstrates how to switch between different audio streams in a playing media file using GStreamer's g_object_set function on the playbin element.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n/* Add a bus watch, so we get notified when the pipeline changes state */\nbus = gst_element_get_bus (playbin);\ngst_bus_add_watch (bus, (GstBusFunc)handle_message, loop);\n\n/* Start playing */\nret = gst_element_set_state (playbin, GST_STATE_PLAYING);\nif (ret == GST_STATE_CHANGE_FAILURE) {\n  g_printerr (\"Unable to set the pipeline to the playing state.\\n\");\n  gst_object_unref (playbin);\n  return -1;\n}\n\n/* Switch to the next audio stream every 10 seconds */\ng_timeout_add_seconds (10, (GSourceFunc)switch_audio, playbin);\n\ng_main_loop_run (loop);\n```\n\n----------------------------------------\n\nTITLE: Handling Buffering Events for Network Streams with GStreamer in C\nDESCRIPTION: This code processes the buffering bus message within a GStreamer application to manage pipeline playback during buffering. It ignores buffering if the pipeline is live, but otherwise parses the buffer percentage, prints it, pauses playback if buffering is not complete, and resumes playback when buffering reaches 100 percent. The snippet assumes a valid GStreamer bus message handler and the presence of a CustomData context. Requires GStreamer library and typical pipeline setup.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/streaming.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ncase GST_MESSAGE_BUFFERING: {\\n  gint percent = 0;\\n\\n  /* If the stream is live, we do not care about buffering. */\\n  if (data->is_live) break;\\n\\n  gst_message_parse_buffering (msg, &percent);\\n  g_print (\"Buffering (%3d%%)\\r\", percent);\\n  /* Wait until buffering is complete before start/resume playing */\\n  if (percent < 100)\\n    gst_element_set_state (data->pipeline, GST_STATE_PAUSED);\\n  else\\n    gst_element_set_state (data->pipeline, GST_STATE_PLAYING);\\n  break;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GTK+ Media Player with GStreamer in C\nDESCRIPTION: This code snippet demonstrates how to create a media player with a graphical user interface using GTK+ and GStreamer. It includes functionality for playback control, seeking, and displaying stream information. The player uses the GStreamer playbin element for media playback.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <string.h>\n\n#include <gtk/gtk.h>\n#include <gst/gst.h>\n#include <gdk/gdk.h>\n\n/* Structure to contain all our information, so we can pass it around */\ntypedef struct _CustomData {\n  GstElement *playbin;           /* Our one and only pipeline */\n\n  GtkWidget *sink_widget;         /* The widget where our video will be displayed */\n  GtkWidget *slider;              /* Slider widget to keep track of current position */\n  GtkWidget *streams_list;        /* Text widget to display info about the streams */\n  gulong slider_update_signal_id; /* Signal ID for the slider update signal */\n\n  GstState state;                 /* Current state of the pipeline */\n  gint64 duration;                /* Duration of the clip, in nanoseconds */\n} CustomData;\n\n/* This function is called when the PLAY button is clicked */\nstatic void play_cb (GtkButton *button, CustomData *data) {\n  gst_element_set_state (data->playbin, GST_STATE_PLAYING);\n}\n\n/* This function is called when the PAUSE button is clicked */\nstatic void pause_cb (GtkButton *button, CustomData *data) {\n  gst_element_set_state (data->playbin, GST_STATE_PAUSED);\n}\n\n/* This function is called when the STOP button is clicked */\nstatic void stop_cb (GtkButton *button, CustomData *data) {\n  gst_element_set_state (data->playbin, GST_STATE_READY);\n}\n\n/* This function is called when the main window is closed */\nstatic void delete_event_cb (GtkWidget *widget, GdkEvent *event, CustomData *data) {\n  stop_cb (NULL, data);\n  gtk_main_quit ();\n}\n\n/* This function is called when the slider changes its position. We perform a seek to the\n * new position here. */\nstatic void slider_cb (GtkRange *range, CustomData *data) {\n  gdouble value = gtk_range_get_value (GTK_RANGE (data->slider));\n  gst_element_seek_simple (data->playbin, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT,\n      (gint64)(value * GST_SECOND));\n}\n\n/* This creates all the GTK+ widgets that compose our application, and registers the callbacks */\nstatic void create_ui (CustomData *data) {\n  GtkWidget *main_window;  /* The uppermost window, containing all other windows */\n  GtkWidget *main_box;     /* VBox to hold main_hbox and the controls */\n  GtkWidget *main_hbox;    /* HBox to hold the video sink and the stream info text widget */\n  GtkWidget *controls;     /* HBox to hold the buttons and the slider */\n  GtkWidget *play_button, *pause_button, *stop_button; /* Buttons */\n\n  main_window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n  g_signal_connect (G_OBJECT (main_window), \"delete-event\", G_CALLBACK (delete_event_cb), data);\n\n  play_button = gtk_button_new_from_icon_name (\"media-playback-start\", GTK_ICON_SIZE_SMALL_TOOLBAR);\n  g_signal_connect (G_OBJECT (play_button), \"clicked\", G_CALLBACK (play_cb), data);\n\n  pause_button = gtk_button_new_from_icon_name (\"media-playback-pause\", GTK_ICON_SIZE_SMALL_TOOLBAR);\n  g_signal_connect (G_OBJECT (pause_button), \"clicked\", G_CALLBACK (pause_cb), data);\n\n  stop_button = gtk_button_new_from_icon_name (\"media-playback-stop\", GTK_ICON_SIZE_SMALL_TOOLBAR);\n  g_signal_connect (G_OBJECT (stop_button), \"clicked\", G_CALLBACK (stop_cb), data);\n\n  data->slider = gtk_scale_new_with_range (GTK_ORIENTATION_HORIZONTAL, 0, 100, 1);\n  gtk_scale_set_draw_value (GTK_SCALE (data->slider), 0);\n  data->slider_update_signal_id = g_signal_connect (G_OBJECT (data->slider), \"value-changed\", G_CALLBACK (slider_cb), data);\n\n  data->streams_list = gtk_text_view_new ();\n  gtk_text_view_set_editable (GTK_TEXT_VIEW (data->streams_list), FALSE);\n\n  controls = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);\n  gtk_box_pack_start (GTK_BOX (controls), play_button, FALSE, FALSE, 2);\n  gtk_box_pack_start (GTK_BOX (controls), pause_button, FALSE, FALSE, 2);\n  gtk_box_pack_start (GTK_BOX (controls), stop_button, FALSE, FALSE, 2);\n  gtk_box_pack_start (GTK_BOX (controls), data->slider, TRUE, TRUE, 2);\n\n  main_hbox = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);\n  gtk_box_pack_start (GTK_BOX (main_hbox), data->sink_widget, TRUE, TRUE, 0);\n  gtk_box_pack_start (GTK_BOX (main_hbox), data->streams_list, FALSE, FALSE, 2);\n\n  main_box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);\n  gtk_box_pack_start (GTK_BOX (main_box), main_hbox, TRUE, TRUE, 0);\n  gtk_box_pack_start (GTK_BOX (main_box), controls, FALSE, FALSE, 0);\n  gtk_container_add (GTK_CONTAINER (main_window), main_box);\n  gtk_window_set_default_size (GTK_WINDOW (main_window), 640, 480);\n\n  gtk_widget_show_all (main_window);\n}\n\n/* This function is called periodically to refresh the GUI */\nstatic gboolean refresh_ui (CustomData *data) {\n  gint64 current = -1;\n\n  /* We do not want to update anything unless we are in the PAUSED or PLAYING states */\n  if (data->state < GST_STATE_PAUSED)\n    return TRUE;\n\n  /* If we didn't know it yet, query the stream duration */\n  if (!GST_CLOCK_TIME_IS_VALID (data->duration)) {\n    if (!gst_element_query_duration (data->playbin, GST_FORMAT_TIME, &data->duration)) {\n      g_printerr (\"Could not query current duration.\\n\");\n    } else {\n      /* Set the range of the slider to the clip duration, in SECONDS */\n      gtk_range_set_range (GTK_RANGE (data->slider), 0, (gdouble)data->duration / GST_SECOND);\n    }\n  }\n\n  if (gst_element_query_position (data->playbin, GST_FORMAT_TIME, &current)) {\n    /* Block the \"value-changed\" signal, so the slider_cb function is not called\n     * (which would trigger a seek the user has not requested) */\n    g_signal_handler_block (data->slider, data->slider_update_signal_id);\n    /* Set the position of the slider to the current pipeline position, in SECONDS */\n    gtk_range_set_value (GTK_RANGE (data->slider), (gdouble)current / GST_SECOND);\n    /* Re-enable the signal */\n    g_signal_handler_unblock (data->slider, data->slider_update_signal_id);\n  }\n  return TRUE;\n}\n\n/* This function is called when new metadata is discovered in the stream */\nstatic void tags_cb (GstElement *playbin, gint stream, CustomData *data) {\n  /* We are possibly in a GStreamer working thread, so we notify the main\n   * thread of this event through a message in the bus */\n  gst_element_post_message (playbin,\n    gst_message_new_application (GST_OBJECT (playbin),\n      gst_structure_new_empty (\"tags-changed\")));\n}\n\n/* This function is called when an error message is posted on the bus */\nstatic void error_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  GError *err;\n  gchar *debug_info;\n\n  /* Print error details on the screen */\n  gst_message_parse_error (msg, &err, &debug_info);\n  g_printerr (\"Error received from element %s: %s\\n\", GST_OBJECT_NAME (msg->src), err->message);\n  g_printerr (\"Debugging information: %s\\n\", debug_info ? debug_info : \"none\");\n  g_clear_error (&err);\n  g_free (debug_info);\n\n  /* Set the pipeline to READY (which stops playback) */\n  gst_element_set_state (data->playbin, GST_STATE_READY);\n}\n\n/* This function is called when an End-Of-Stream message is posted on the bus.\n * We just set the pipeline to READY (which stops playback) */\nstatic void eos_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  g_print (\"End-Of-Stream reached.\\n\");\n  gst_element_set_state (data->playbin, GST_STATE_READY);\n}\n\n/* This function is called when the pipeline changes states. We use it to\n * keep track of the current state. */\nstatic void state_changed_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  GstState old_state, new_state, pending_state;\n  gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n  if (GST_MESSAGE_SRC (msg) == GST_OBJECT (data->playbin)) {\n    data->state = new_state;\n    g_print (\"State set to %s\\n\", gst_element_state_get_name (new_state));\n    if (old_state == GST_STATE_READY && new_state == GST_STATE_PAUSED) {\n      /* For extra responsiveness, we refresh the GUI as soon as we reach the PAUSED state */\n      refresh_ui (data);\n    }\n  }\n}\n\n/* Extract metadata from all the streams and write it to the text widget in the GUI */\nstatic void analyze_streams (CustomData *data) {\n  gint i;\n  GstTagList *tags;\n  gchar *str, *total_str;\n  guint rate;\n  gint n_video, n_audio, n_text;\n  GtkTextBuffer *text;\n\n  /* Clean current contents of the widget */\n  text = gtk_text_view_get_buffer (GTK_TEXT_VIEW (data->streams_list));\n  gtk_text_buffer_set_text (text, \"\", -1);\n\n  /* Read some properties */\n  g_object_get (data->playbin, \"n-video\", &n_video, NULL);\n  g_object_get (data->playbin, \"n-audio\", &n_audio, NULL);\n  g_object_get (data->playbin, \"n-text\", &n_text, NULL);\n\n  for (i = 0; i < n_video; i++) {\n    tags = NULL;\n    /* Retrieve the stream's video tags */\n    g_signal_emit_by_name (data->playbin, \"get-video-tags\", i, &tags);\n    if (tags) {\n      total_str = g_strdup_printf (\"video stream %d:\\n\", i);\n      gtk_text_buffer_insert_at_cursor (text, total_str, -1);\n      g_free (total_str);\n      gst_tag_list_get_string (tags, GST_TAG_VIDEO_CODEC, &str);\n      total_str = g_strdup_printf (\"  codec: %s\\n\", str ? str : \"unknown\");\n      gtk_text_buffer_insert_at_cursor (text, total_str, -1);\n      g_free (total_str);\n      g_free (str);\n      gst_tag_list_free (tags);\n    }\n  }\n\n  for (i = 0; i < n_audio; i++) {\n    tags = NULL;\n    /* Retrieve the stream's audio tags */\n    g_signal_emit_by_name (data->playbin, \"get-audio-tags\", i, &tags);\n    if (tags) {\n      total_str = g_strdup_printf (\"\\naudio stream %d:\\n\", i);\n      gtk_text_buffer_insert_at_cursor (text, total_str, -1);\n      g_free (total_str);\n      if (gst_tag_list_get_string (tags, GST_TAG_AUDIO_CODEC, &str)) {\n        total_str = g_strdup_printf (\"  codec: %s\\n\", str);\n        gtk_text_buffer_insert_at_cursor (text, total_str, -1);\n        g_free (total_str);\n        g_free (str);\n      }\n      if (gst_tag_list_get_string (tags, GST_TAG_LANGUAGE_CODE, &str)) {\n\n```\n\n----------------------------------------\n\nTITLE: Playing a Media File Section with GStreamer in C\nDESCRIPTION: This C snippet constructs a GStreamer pipeline to play only a selected portion (2 to 5 seconds) of a media file. It dynamically blocks uridecodebin's pads, waits for preroll, posts a custom application message, conducts a seek, and then plays only the specified segment. Key dependencies include GStreamer and GLib (for main loop and atomics), with the uridecodebin and sink elements needed. Parameters such as input URI and section times are hardcoded/configured, and output appears via a video sink with state transitions and EOS handling. Limitations: pad synchronization and error handling are required for robust operation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/pipeline-manipulation.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nstatic GMainLoop *loop;\nstatic gint counter;\nstatic GstBus *bus;\nstatic gboolean prerolled = FALSE;\nstatic GstPad *sinkpad;\n\nstatic void\ndec_counter (GstElement * pipeline)\n{\n  if (prerolled)\n    return;\n\n  if (g_atomic_int_dec_and_test (&counter)) {\n    /* all probes blocked and no-more-pads signaled, post\n     * message on the bus. */\n    prerolled = TRUE;\n\n    gst_bus_post (bus, gst_message_new_application (\n          GST_OBJECT_CAST (pipeline),\n          gst_structure_new_empty (\"ExPrerolled\")));\n  }\n}\n\n/* called when a source pad of uridecodebin is blocked */\nstatic GstPadProbeReturn\ncb_blocked (GstPad          *pad,\n            GstPadProbeInfo *info,\n            gpointer         user_data)\n{\n  GstElement *pipeline = GST_ELEMENT (user_data);\n\n  if (prerolled)\n    return GST_PAD_PROBE_REMOVE;\n\n  dec_counter (pipeline);\n\n  return GST_PAD_PROBE_OK;\n}\n\n/* called when uridecodebin has a new pad */\nstatic void\ncb_pad_added (GstElement *element,\n              GstPad     *pad,\n              gpointer    user_data)\n{\n  GstElement *pipeline = GST_ELEMENT (user_data);\n\n  if (prerolled)\n    return;\n\n  g_atomic_int_inc (&counter);\n\n  gst_pad_add_probe (pad, GST_PAD_PROBE_TYPE_BLOCK_DOWNSTREAM,\n      (GstPadProbeCallback) cb_blocked, pipeline, NULL);\n\n  /* try to link to the video pad */\n  gst_pad_link (pad, sinkpad);\n}\n\n/* called when uridecodebin has created all pads */\nstatic void\ncb_no_more_pads (GstElement *element,\n                 gpointer    user_data)\n{\n  GstElement *pipeline = GST_ELEMENT (user_data);\n\n  if (prerolled)\n    return;\n\n  dec_counter (pipeline);\n}\n\n/* called when a new message is posted on the bus */\nstatic void\ncb_message (GstBus     *bus,\n            GstMessage *message,\n            gpointer    user_data)\n{\n  GstElement *pipeline = GST_ELEMENT (user_data);\n\n  switch (GST_MESSAGE_TYPE (message)) {\n    case GST_MESSAGE_ERROR:\n      g_print (\"we received an error!\\n\");\n      g_main_loop_quit (loop);\n      break;\n    case GST_MESSAGE_EOS:\n      g_print (\"we reached EOS\\n\");\n      g_main_loop_quit (loop);\n      break;\n    case GST_MESSAGE_APPLICATION:\n    {\n      if (gst_message_has_name (message, \"ExPrerolled\")) {\n        /* it's our message */\n        g_print (\"we are all prerolled, do seek\\n\");\n        gst_element_seek (pipeline,\n            1.0, GST_FORMAT_TIME,\n            GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_ACCURATE,\n            GST_SEEK_TYPE_SET, 2 * GST_SECOND,\n            GST_SEEK_TYPE_SET, 5 * GST_SECOND);\n\n        gst_element_set_state (pipeline, GST_STATE_PLAYING);\n      }\n      break;\n    }\n    default:\n      break;\n  }\n}\n\ngint\nmain (gint   argc,\n      gchar *argv[])\n{\n  GstElement *pipeline, *src, *csp, *vs, *sink;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n  loop = g_main_loop_new (NULL, FALSE);\n\n  if (argc < 2) {\n    g_print (\"usage: %s <uri>\", argv[0]);\n    return -1;\n  }\n\n  /* build */\n  pipeline = gst_pipeline_new (\"my-pipeline\");\n\n  bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));\n  gst_bus_add_signal_watch (bus);\n  g_signal_connect (bus, \"message\", (GCallback) cb_message,\n      pipeline);\n\n  src = gst_element_factory_make (\"uridecodebin\", \"src\");\n  if (src == NULL)\n    g_error (\"Could not create 'uridecodebin' element\");\n\n  g_object_set (src, \"uri\", argv[1], NULL);\n\n  csp = gst_element_factory_make (\"videoconvert\", \"csp\");\n  if (csp == NULL)\n    g_error (\"Could not create 'videoconvert' element\");\n\n  vs = gst_element_factory_make (\"videoscale\", \"vs\");\n  if (vs == NULL)\n    g_error (\"Could not create 'videoscale' element\");\n\n  sink = gst_element_factory_make (\"autovideosink\", \"sink\");\n  if (sink == NULL)\n    g_error (\"Could not create 'autovideosink' element\");\n\n  gst_bin_add_many (GST_BIN (pipeline), src, csp, vs, sink, NULL);\n\n  /* can't link src yet, it has no pads */\n  gst_element_link_many (csp, vs, sink, NULL);\n\n  sinkpad = gst_element_get_static_pad (csp, \"sink\");\n\n  /* for each pad block that is installed, we will increment\n   * the counter. for each pad block that is signaled, we\n   * decrement the counter. When the counter is 0 we post\n   * an app message to tell the app that all pads are\n   * blocked. Start with 1 that is decremented when no-more-pads\n   * is signaled to make sure that we only post the message\n   * after no-more-pads */\n  g_atomic_int_set (&counter, 1);\n\n  g_signal_connect (src, \"pad-added\",\n      (GCallback) cb_pad_added, pipeline);\n  g_signal_connect (src, \"no-more-pads\",\n      (GCallback) cb_no_more_pads, pipeline);\n\n  gst_element_set_state (pipeline, GST_STATE_PAUSED);\n\n  g_main_loop_run (loop);\n\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n\n  gst_object_unref (sinkpad);\n  gst_object_unref (bus);\n  gst_object_unref (pipeline);\n  g_main_loop_unref (loop);\n\n  return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Input Watch using GLib GIOChannel\nDESCRIPTION: Sets up keyboard input handling using GLib's I/O channels. It creates a `GIOChannel` for standard input (`stdin`), using platform-specific functions (`g_io_channel_win32_new_fd` or `g_io_channel_unix_new`). Then, `g_io_add_watch` is used to attach the `handle_keyboard` callback function, which will be invoked when data is available on stdin (a key is pressed).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n  /* Add a keyboard watch so we get notified of keystrokes */\n#ifdef _WIN32\n  io_stdin = g_io_channel_win32_new_fd (fileno (stdin));\n#else\n  io_stdin = g_io_channel_unix_new (fileno (stdin));\n#endif\n  g_io_add_watch (io_stdin, G_IO_IN, (GIOFunc)handle_keyboard, &data);\n```\n\n----------------------------------------\n\nTITLE: Defining CustomData Structure for GStreamer Android Integration\nDESCRIPTION: Defines a structure to hold all necessary information for running a GStreamer pipeline in an Android application. It includes references to the Java application instance, GStreamer pipeline, GLib main loop, and Android native window.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct _CustomData {\n  jobject app;            /* Application instance, used to call its methods. A global reference is kept. */\n  GstElement *pipeline;   /* The running pipeline */\n  GMainContext *context;  /* GLib context used to run the main loop */\n  GMainLoop *main_loop;   /* GLib main loop */\n  gboolean initialized;   /* To avoid informing the UI multiple times about the initialization */\n  GstElement *video_sink; /* The video sink element which receives VideoOverlay commands */\n  ANativeWindow *native_window; /* The Android native window where video will be rendered */\n} CustomData;\n```\n\n----------------------------------------\n\nTITLE: Importing GStreamer Python Overrides using PyGObject - Python\nDESCRIPTION: Demonstrates how to import and initialize GStreamer inside a Python 3 script using PyGObject with introspection. The code requires that gi (PyGObject) is installed and 'Gst' version 1.0 is available. The sequence sets up the correct version for 'Gst' and imports both GObject and Gst namespaces for further GStreamer pipeline development. No parameters required; output is the successful availability of GStreamer Python bindings in the current namespace.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-python/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport gi\ngi.require_version('Gst', '1.0')\nfrom gi.repository import GObject, Gst\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Level Example in GStreamer\nDESCRIPTION: Example output of GStreamer debug log at level 2, showing error information from a filesrc element attempting to access a non-existent file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/debugging-tools.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n0:00:00.868050000  1592   09F62420 WARN                 filesrc gstfilesrc.c:1044:gst_file_src_start:<filesrc0> error: No such file \"non-existing-file.webm\"\n```\n\n----------------------------------------\n\nTITLE: Linking Elements with Multiple Video Capabilities – GStreamer (C)\nDESCRIPTION: This code demonstrates using gst_caps_new_full() and gst_structure_new() to construct a GstCaps object containing multiple GstStructure variants, allowing more complex filtering for linking two GStreamer elements. It creates caps supporting two video types: 'video/x-raw' and 'video/x-bayer', both with identical dimensions and framerate, then attempts to link the elements with this set of caps. If linking fails, a warning is issued. Inputs: two GstElement pointers; Outputs: gboolean success state. This requires GStreamer’s core libraries and is used when more than one possible capability needs to be allowed during pad negotiation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/pads.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean\nlink_elements_with_filter (GstElement *element1, GstElement *element2)\n{\n  gboolean link_ok;\n  GstCaps *caps;\n\n  caps = gst_caps_new_full (\n      gst_structure_new (\"video/x-raw\",\n             \"width\", G_TYPE_INT, 384,\n             \"height\", G_TYPE_INT, 288,\n             \"framerate\", GST_TYPE_FRACTION, 25, 1,\n             NULL),\n      gst_structure_new (\"video/x-bayer\",\n             \"width\", G_TYPE_INT, 384,\n             \"height\", G_TYPE_INT, 288,\n             \"framerate\", GST_TYPE_FRACTION, 25, 1,\n             NULL),\n      NULL);\n\n  link_ok = gst_element_link_filtered (element1, element2, caps);\n  gst_caps_unref (caps);\n\n  if (!link_ok) {\n    g_warning (\"Failed to link element1 and element2!\");\n  }\n\n  return link_ok;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Encoding and writing to an Ogg audio file in GStreamer via Bash\nDESCRIPTION: This command generates audio using audiotestsrc, encodes it with vorbisenc, multiplexes with oggmux, and writes the output to 'test.ogg' using filesink. Requires GStreamer with audiotestsrc, vorbisenc, oggmux, and filesink plugins. The location property on filesink specifies the output file; this example demonstrates basic audio pipeline and encoding functionality.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 audiotestsrc ! vorbisenc ! oggmux ! filesink location=test.ogg\n```\n\n----------------------------------------\n\nTITLE: Creating a Playbin Pipeline in C\nDESCRIPTION: Code that creates a GStreamer pipeline using the playbin element, which automatically handles media playback. The pipeline is created using gst_parse_launch which builds a pipeline from a textual description.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n/* Build the pipeline */\npipeline =\n    gst_parse_launch\n    (\"playbin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\",\n    NULL);\n```\n\n----------------------------------------\n\nTITLE: Implementing VideoViewController for iOS GStreamer Media Player in Objective-C\nDESCRIPTION: This snippet contains the complete implementation of VideoViewController.m which handles the UI and interactions for a GStreamer-based video player. It manages play/pause controls, time slider scrubbing, UI updates for media position, media size changes and communication with the GStreamerBackend.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"VideoViewController.h\"\n#import \"GStreamerBackend.h\"\n#import <UIKit/UIKit.h>\n\n@interface VideoViewController () {\n    GStreamerBackend *gst_backend;\n    int media_width;                /* Width of the clip */\n    int media_height;               /* height of the clip */\n    Boolean dragging_slider;        /* Whether the time slider is being dragged or not */\n    Boolean is_local_media;         /* Whether this clip is stored locally or is being streamed */\n    Boolean is_playing_desired;     /* Whether the user asked to go to PLAYING */\n}\n\n@end\n\n@implementation VideoViewController\n\n@synthesize uri;\n\n/*\n * Private methods\n */\n\n/* The text widget acts as an slave for the seek bar, so it reflects what the seek bar shows, whether\n * it is an actual pipeline position or the position the user is currently dragging to. */\n- (void) updateTimeWidget\n{\n    NSInteger position = time_slider.value / 1000;\n    NSInteger duration = time_slider.maximumValue / 1000;\n    NSString *position_txt = @\" -- \";\n    NSString *duration_txt = @\" -- \";\n\n    if (duration > 0) {\n        NSUInteger hours = duration / (60 * 60);\n        NSUInteger minutes = (duration / 60) % 60;\n        NSUInteger seconds = duration % 60;\n\n        duration_txt = [NSString stringWithFormat:@\"%02u:%02u:%02u\", hours, minutes, seconds];\n    }\n    if (position > 0) {\n        NSUInteger hours = position / (60 * 60);\n        NSUInteger minutes = (position / 60) % 60;\n        NSUInteger seconds = position % 60;\n\n        position_txt = [NSString stringWithFormat:@\"%02u:%02u:%02u\", hours, minutes, seconds];\n    }\n\n    NSString *text = [NSString stringWithFormat:@\"%@ / %@\",\n                      position_txt, duration_txt];\n\n    time_label.text = text;\n}\n\n/*\n * Methods from UIViewController\n */\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n\n    play_button.enabled = FALSE;\n    pause_button.enabled = FALSE;\n\n    /* As soon as the GStreamer backend knows the real values, these ones will be replaced */\n    media_width = 320;\n    media_height = 240;\n\n    uri = @\"https://gstreamer.freedesktop.org/data/media/sintel_trailer-368p.ogv\";\n\n    gst_backend = [[GStreamerBackend alloc] init:self videoView:video_view];\n}\n\n- (void)viewDidDisappear:(BOOL)animated\n{\n    if (gst_backend)\n    {\n        [gst_backend deinit];\n    }\n}\n\n- (void)didReceiveMemoryWarning\n{\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n/* Called when the Play button is pressed */\n-(IBAction) play:(id)sender\n{\n    [gst_backend play];\n    is_playing_desired = YES;\n}\n\n/* Called when the Pause button is pressed */\n-(IBAction) pause:(id)sender\n{\n    [gst_backend pause];\n    is_playing_desired = NO;\n}\n\n/* Called when the time slider position has changed, either because the user dragged it or\n * we programmatically changed its position. dragging_slider tells us which one happened */\n- (IBAction)sliderValueChanged:(id)sender {\n    if (!dragging_slider) return;\n    // If this is a local file, allow scrub seeking, this is, seek as soon as the slider is moved.\n    if (is_local_media)\n        [gst_backend setPosition:time_slider.value];\n    [self updateTimeWidget];\n}\n\n/* Called when the user starts to drag the time slider */\n- (IBAction)sliderTouchDown:(id)sender {\n    [gst_backend pause];\n    dragging_slider = YES;\n}\n\n/* Called when the user stops dragging the time slider */\n- (IBAction)sliderTouchUp:(id)sender {\n    dragging_slider = NO;\n    // If this is a remote file, scrub seeking is probably not going to work smoothly enough.\n    // Therefore, perform only the seek when the slider is released.\n    if (!is_local_media)\n        [gst_backend setPosition:time_slider.value];\n    if (is_playing_desired)\n        [gst_backend play];\n}\n\n/* Called when the size of the main view has changed, so we can\n * resize the sub-views in ways not allowed by storyboarding. */\n- (void)viewDidLayoutSubviews\n{\n    CGFloat view_width = video_container_view.bounds.size.width;\n    CGFloat view_height = video_container_view.bounds.size.height;\n\n    CGFloat correct_height = view_width * media_height / media_width;\n    CGFloat correct_width = view_height * media_width / media_height;\n\n    if (correct_height < view_height) {\n        video_height_constraint.constant = correct_height;\n        video_width_constraint.constant = view_width;\n    } else {\n        video_width_constraint.constant = correct_width;\n        video_height_constraint.constant = view_height;\n    }\n\n    time_slider.frame = CGRectMake(time_slider.frame.origin.x, time_slider.frame.origin.y, toolbar.frame.size.width - time_slider.frame.origin.x - 8, time_slider.frame.size.height);\n}\n\n/*\n * Methods from GstreamerBackendDelegate\n */\n\n-(void) gstreamerInitialized\n{\n    dispatch_async(dispatch_get_main_queue(), ^{\n        play_button.enabled = TRUE;\n        pause_button.enabled = TRUE;\n        message_label.text = @\"Ready\";\n        [gst_backend setUri:uri];\n        is_local_media = [uri hasPrefix:@\"file://\"];\n        is_playing_desired = NO;\n    });\n}\n\n-(void) gstreamerSetUIMessage:(NSString *)message\n{\n    dispatch_async(dispatch_get_main_queue(), ^{\n        message_label.text = message;\n    });\n}\n\n-(void) mediaSizeChanged:(NSInteger)width height:(NSInteger)height\n{\n    media_width = width;\n    media_height = height;\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [self viewDidLayoutSubviews];\n        [video_view setNeedsLayout];\n        [video_view layoutIfNeeded];\n    });\n}\n\n-(void) setCurrentPosition:(NSInteger)position duration:(NSInteger)duration\n{\n    /* Ignore messages from the pipeline if the time sliders is being dragged */\n    if (dragging_slider) return;\n\n    dispatch_async(dispatch_get_main_queue(), ^{\n        time_slider.maximumValue = duration;\n        time_slider.value = position;\n        [self updateTimeWidget];\n    });\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Basic GStreamer Initialization in C\nDESCRIPTION: Demonstrates the basic initialization of GStreamer using gst_init() and how to retrieve and display the linked GStreamer version information. Includes necessary header includes and version checking logic.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/init.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n#include <gst/gst.h>\n\nint\nmain (int   argc,\n      char *argv[])\n{\n  const gchar *nano_str;\n  guint major, minor, micro, nano;\n\n  gst_init (&argc, &argv);\n\n  gst_version (&major, &minor, &micro, &nano);\n\n  if (nano == 1)\n    nano_str = \"(CVS)\";\n  else if (nano == 2)\n    nano_str = \"(Prerelease)\";\n  else\n    nano_str = \"\";\n\n  printf (\"This program is linked against GStreamer %d.%d.%d %s\\n\",\n          major, minor, micro, nano_str);\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main GStreamer Pipeline Function for Android\nDESCRIPTION: The main function for creating and running the GStreamer pipeline in a separate thread. It sets up the GLib main loop, builds the pipeline, connects to bus signals, and manages the pipeline's lifecycle.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nstatic void *app_function (void *userdata) {\n  JavaVMAttachArgs args;\n  GstBus *bus;\n  CustomData *data = (CustomData *)userdata;\n  GSource *bus_source;\n  GError *error = NULL;\n\n  GST_DEBUG (\"Creating pipeline in CustomData at %p\", data);\n\n  /* Create our own GLib Main Context and make it the default one */\n  data->context = g_main_context_new ();\n  g_main_context_push_thread_default(data->context);\n\n  /* Build pipeline */\n  data->pipeline = gst_parse_launch(\"videotestsrc ! warptv ! videoconvert ! autovideosink\", &error);\n  if (error) {\n    gchar *message = g_strdup_printf(\"Unable to build pipeline: %s\", error->message);\n    g_clear_error (&error);\n    set_ui_message(message, data);\n    g_free (message);\n    return NULL;\n  }\n\n  /* Set the pipeline to READY, so it can already accept a window handle, if we have one */\n  gst_element_set_state(data->pipeline, GST_STATE_READY);\n\n  data->video_sink = gst_bin_get_by_interface(GST_BIN(data->pipeline), GST_TYPE_VIDEO_OVERLAY);\n  if (!data->video_sink) {\n    GST_ERROR (\"Could not retrieve video sink\");\n    return NULL;\n  }\n\n  /* Instruct the bus to emit signals for each received message, and connect to the interesting signals */\n  bus = gst_element_get_bus (data->pipeline);\n  bus_source = gst_bus_create_watch (bus);\n  g_source_set_callback (bus_source, (GSourceFunc) gst_bus_async_signal_func, NULL, NULL);\n  g_source_attach (bus_source, data->context);\n  g_source_unref (bus_source);\n  g_signal_connect (G_OBJECT (bus), \"message::error\", (GCallback)error_cb, data);\n  g_signal_connect (G_OBJECT (bus), \"message::state-changed\", (GCallback)state_changed_cb, data);\n  gst_object_unref (bus);\n\n  /* Create a GLib Main Loop and set it to run */\n  GST_DEBUG (\"Entering main loop... (CustomData:%p)\", data);\n  data->main_loop = g_main_loop_new (data->context, FALSE);\n  check_initialization_complete (data);\n  g_main_loop_run (data->main_loop);\n  GST_DEBUG (\"Exited main loop\");\n  g_main_loop_unref (data->main_loop);\n  data->main_loop = NULL;\n\n  /* Free resources */\n  g_main_context_pop_thread_default(data->context);\n  g_main_context_unref (data->context);\n  gst_element_set_state (data->pipeline, GST_STATE_NULL);\n  gst_object_unref (data->video_sink);\n  gst_object_unref (data->pipeline);\n\n  return NULL;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Video Media Type Properties in GStreamer\nDESCRIPTION: This snippet outlines the properties of the 'video/x-raw' media type in GStreamer, including dimensions, framerate, views, interlace mode, chroma site, colorimetry, pixel aspect ratio, and format. It provides detailed explanations for each property and its possible values.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**video/x-raw**\n\n - **width**, `G_TYPE_INT`: Mandatory. The width of the image in pixels.\n\n - **height**, `G_TYPE_INT`: Mandatory. The height of the image in pixels\n\n - **framerate**, `GST_TYPE_FRACTION`: Default 0/1. The framerate of the video,\n   0/1 for variable framerate\n\n - **max-framerate**, `GST_TYPE_FRACTION`: Default as framerate. For variable\n   framerates this would be the maximum expected framerate. This\n   value is only valid when the framerate is set to \"variable\" (0/1)\n\n - **views**, `G_TYPE_INT`: Default 1. The number of views for multiview video.\n   Each buffer contains multiple `GstVideoMeta` buffers that describe each\n   view. use the frame id to get access to the different views.\n\n - **interlace-mode**, `G_TYPE_STRING`: Default progressive. The interlace\n   mode (also see the [interlaced video design docs](additional/design/interlaced-video.md)).\n   The following values are possible:\n\n   - *\"progressive\"*: all frames are progressive\n\n   - *\"interleaved\"*: 2 fields are interleaved in one video frame. Extra buffer\n     flags describe the field order.\n\n   - *\"mixed\"*: progressive and interleaved frames, extra buffer flags\n     describe the frame and fields.\n\n   - *\"fields\"*: 2 fields are stored in one buffer. Use the frame ID\n     to get access to the required field. For multiview (the\n     'views' property > 1) the fields of view N can be found at\n     frame ID (N * 2) and (N * 2) + 1.\n     Each view has only half the amount of lines as noted in the\n     height property, pads specifying the \"fields\" property\n     must be prepared for this. This mode requires multiple\n     GstVideoMeta metadata to describe the fields.\n\n   - *\"alternate\"*: one field per buffer, with buffer flags indicating\n     whether the field is the top field (`GST_VIDEO_BUFFER_FLAG_TOP_FIELD`) or\n     bottom field (`GST_VIDEO_BUFFER_FLAG_BOTTOM_FIELD`). Top and bottom fields\n     are expected to alternate in this mode. Caps for this interlace mode must\n     also carry a `format:Interlaced` caps feature (`GST_CAPS_FEATURE_FORMAT_INTERLACED`)\n     to ensure backwards compatibility for the new mode. `width` and `height`\n     fields in caps indicate **frame** dimensions not field dimensions, meaning\n     the height of the video data inside the buffers will be half of the height\n     in the caps. (Since: 1.16)\n\n - **chroma-site**, `G_TYPE_STRING`: Default `GST_VIDEO_CHROMA_SITE_UNKNOWN`.\n   The chroma siting of the video frames.\n\n   - *\"jpeg\"*: `GST_VIDEO_CHROMA_SITE_JPEG`\n   - *\"mpeg2\"*: `GST_VIDEO_CHROMA_SITE_MPEG2`\n   - *\"dv\"*: `GST_VIDEO_CHROMA_SITE_DV`\n   - ...\n   - *\"none\"*: `GST_VIDEO_CHROMA_SITE_NONE`\n\n - **colorimetry**, `G_TYPE_STRING`: Default `GST_VIDEO_COLORIMETRY_UNKNOWN`.\n   The colorimetry of the video frames. Predefined colorimetry is given with the following values:\n\n   - *\"bt601\"*\n   - *\"bt709\"*\n   - *\"smpte240m\"*\n\n - **pixel-aspect-ratio**, `GST_TYPE_FRACTION`: Default 1/1. The pixel aspect\n   ration of the video\n\n - **format**, `G_TYPE_STRING`: Mandatory. The format of the video. See the\n   Formats section for a list of valid format strings.\n```\n\n----------------------------------------\n\nTITLE: Implementing Audio Playback with Decodebin in C\nDESCRIPTION: Shows how to implement audio playback using GStreamer's decodebin element. The code sets up a pipeline with filesrc and decodebin, handles dynamic pad creation, and connects to an audio sink.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/highlevel/playback-components.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\n[.. my_bus_callback goes here ..]\n\nGstElement *pipeline, *audio;\n\nstatic void\ncb_newpad (GstElement *decodebin,\n       GstPad     *pad,\n       gpointer    data)\n{\n  GstCaps *caps;\n  GstStructure *str;\n  GstPad *audiopad;\n\n  /* only link once */\n  audiopad = gst_element_get_static_pad (audio, \"sink\");\n  if (GST_PAD_IS_LINKED (audiopad)) {\n    g_object_unref (audiopad);\n    return;\n  }\n\n  /* check media type */\n  caps = gst_pad_query_caps (pad, NULL);\n  str = gst_caps_get_structure (caps, 0);\n  if (!g_strrstr (gst_structure_get_name (str), \"audio\")) {\n    gst_caps_unref (caps);\n    gst_object_unref (audiopad);\n    return;\n  }\n  gst_caps_unref (caps);\n\n  /* link'n'play */\n  gst_pad_link (pad, audiopad);\n\n  g_object_unref (audiopad);\n}\n\ngint\nmain (gint   argc,\n      gchar *argv[])\n{\n  GMainLoop *loop;\n  GstElement *src, *dec, *conv, *sink;\n  GstPad *audiopad;\n  GstBus *bus;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n  loop = g_main_loop_new (NULL, FALSE);\n\n  /* make sure we have input */\n  if (argc != 2) {\n    g_print (\"Usage: %s <filename>\\n\", argv[0]);\n    return -1;\n  }\n\n  /* setup */\n  pipeline = gst_pipeline_new (\"pipeline\");\n\n  bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));\n  gst_bus_add_watch (bus, my_bus_callback, loop);\n  gst_object_unref (bus);\n\n  src = gst_element_factory_make (\"filesrc\", \"source\");\n  g_object_set (G_OBJECT (src), \"location\", argv[1], NULL);\n  dec = gst_element_factory_make (\"decodebin\", \"decoder\");\n  g_signal_connect (dec, \"pad-added\", G_CALLBACK (cb_newpad), NULL);\n  gst_bin_add_many (GST_BIN (pipeline), src, dec, NULL);\n  gst_element_link (src, dec);\n\n  /* create audio output */\n  audio = gst_bin_new (\"audiobin\");\n  conv = gst_element_factory_make (\"audioconvert\", \"aconv\");\n  audiopad = gst_element_get_static_pad (conv, \"sink\");\n  sink = gst_element_factory_make (\"alsasink\", \"sink\");\n  gst_bin_add_many (GST_BIN (audio), conv, sink, NULL);\n  gst_element_link (conv, sink);\n  gst_element_add_pad (audio,\n      gst_ghost_pad_new (\"sink\", audiopad));\n  gst_object_unref (audiopad);\n  gst_bin_add (GST_BIN (pipeline), audio);\n\n  /* run */\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n  g_main_loop_run (loop);\n\n  /* cleanup */\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (GST_OBJECT (pipeline));\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GStreamer Element Query Function in C\nDESCRIPTION: This C code snippet demonstrates the declaration, registration, and implementation of a query function (`gst_my_filter_src_query`) for a source pad (`filter->srcpad`) of a custom GStreamer element (`GstMyFilter`). The function is registered in the element's initialization function (`gst_my_filter_init`) using `gst_pad_set_query_function`. The implementation uses a switch statement on the query type (`GST_QUERY_TYPE`) to handle specific queries like `GST_QUERY_POSITION`, `GST_QUERY_DURATION`, and `GST_QUERY_CAPS`. For unhandled query types, it calls the default pad query handler `gst_pad_query_default`. Key parameters include the pad (`pad`), the parent object (`parent`, cast to `GstMyFilter`), and the query object (`query`).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/queryfn.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean gst_my_filter_src_query (GstPad    *pad,\n                                         GstObject *parent,\n                                         GstQuery  *query);\n\n[..]\n\nstatic void\ngst_my_filter_init (GstMyFilter * filter)\n{\n[..]\n  /* configure event function on the pad before adding\n   * the pad to the element */\n  gst_pad_set_query_function (filter->srcpad,\n      gst_my_filter_src_query);\n[..]\n}\n\nstatic gboolean\ngst_my_filter_src_query (GstPad    *pad,\n                 GstObject *parent,\n                 GstQuery  *query)\n{\n  gboolean ret;\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  switch (GST_QUERY_TYPE (query)) {\n    case GST_QUERY_POSITION:\n      /* we should report the current position */\n      [...]\n      break;\n    case GST_QUERY_DURATION:\n      /* we should report the duration here */\n      [...]\n      break;\n    case GST_QUERY_CAPS:\n      /* we should report the supported caps here */\n      [...]\n      break;\n    default:\n      /* just call the default handler */\n      ret = gst_pad_query_default (pad, parent, query);\n      break;\n  }\n  return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Building GStreamer Pipeline\nDESCRIPTION: Creates a basic GStreamer pipeline using gst_parse_launch with error handling and user notification.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-running-pipeline.md#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\npipeline = gst_parse_launch(\"audiotestsrc ! audioconvert ! audioresample ! autoaudiosink\", &error);\nif (error) {\n    gchar *message = g_strdup_printf(\"Unable to build pipeline: %s\", error->message);\n    g_clear_error (&error);\n    [self setUIMessage:message];\n    g_free (message);\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing JNI and Registering Native Methods in C\nDESCRIPTION: The JNI_OnLoad function is the entry point called when the native library is loaded by the JVM. It retrieves the JNIEnv pointer, stores the JavaVM instance, finds the Java class containing the native methods (Tutorial3), registers the native methods defined in the native_methods array using RegisterNatives, and sets up thread-specific data for managing JNIEnv pointers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\njint JNI_OnLoad(JavaVM *vm, void *reserved) {\n  JNIEnv *env = NULL;\n\n  java_vm = vm;\n\n  if ((*vm)->GetEnv(vm, (void**) &env, JNI_VERSION_1_4) != JNI_OK) {\n    __android_log_print (ANDROID_LOG_ERROR, \"tutorial-3\", \"Could not retrieve JNIEnv\");\n    return 0;\n  }\n  jclass klass = (*env)->FindClass (env, \"org/freedesktop/gstreamer/tutorials/tutorial_3/Tutorial3\");\n  (*env)->RegisterNatives (env, klass, native_methods, G_N_ELEMENTS(native_methods));\n\n  pthread_key_create (&current_jni_env, detach_current_thread);\n\n  return JNI_VERSION_1_4;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GStreamer and GTK+ Media Player\nDESCRIPTION: The main function that initializes GStreamer and GTK+, creates a playbin pipeline with video sink, and sets up the necessary UI components. It configures the video sink to render to a GTK+ widget and sets the initial media URI.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint main(int argc, char *argv[]) {\n  CustomData data;\n  GstStateChangeReturn ret;\n  GstBus *bus;\n  GstElement *gtkglsink, *videosink;\n\n  /* Initialize GTK */\n  gtk_init (&argc, &argv);\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Initialize our data structure */\n  memset (&data, 0, sizeof (data));\n  data.duration = GST_CLOCK_TIME_NONE;\n\n  /* Create the elements */\n  data.playbin = gst_element_factory_make (\"playbin\", \"playbin\");\n  videosink = gst_element_factory_make (\"glsinkbin\", \"glsinkbin\");\n  gtkglsink = gst_element_factory_make (\"gtkglsink\", \"gtkglsink\");\n\n  /* Here we create the GTK Sink element which will provide us with a GTK widget where\n   * GStreamer will render the video at and we can add to our UI.\n   * Try to create the OpenGL version of the video sink, and fallback if that fails */\n  if ((gtkglsink) && (videosink)) {\n    g_printerr (\"Successfully created GTK GL Sink\");\n\n    g_object_set (videosink, \"sink\", gtkglsink, NULL);\n\n    /* The gtkglsink creates the gtk widget for us. This is accessible through a property.\n     * So we get it and use it later to add it to our gui. */\n    g_object_get (gtkglsink, \"widget\", &data.sink_widget, NULL);\n  } else {\n    g_printerr (\"Could not create gtkglsink, falling back to gtksink.\\n\");\n\n    videosink = gst_element_factory_make (\"gtksink\", \"gtksink\");\n    g_object_get (videosink, \"widget\", &data.sink_widget, NULL);\n  }\n\n  if ((!data.playbin) || (!videosink)) {\n    g_printerr (\"Not all elements could be created.\\n\");\n    return -1;\n  }\n\n  /* Set the URI to play */\n  g_object_set (data.playbin, \"uri\", \"https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\", NULL);\n\n  /* Set the video-sink  */\n  g_object_set (data.playbin, \"video-sink\", videosink, NULL);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Elements for a GStreamer Sink Bin\nDESCRIPTION: This code snippet creates the individual elements that will compose the custom audio sink bin in GStreamer. It initializes an equalizer, audioconvert, and autoaudiosink elements that will be used to process audio.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/custom-playbin-sinks.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Create the elements inside the sink bin */\nequalizer = gst_element_factory_make (\"equalizer-3bands\", \"equalizer\");\nconvert = gst_element_factory_make (\"audioconvert\", \"convert\");\nsink = gst_element_factory_make (\"autoaudiosink\", \"audio_sink\");\nif (!equalizer || !convert || !sink) {\n  g_printerr (\"Not all elements could be created.\\n\");\n  return -1;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream Metadata in GStreamer C\nDESCRIPTION: This snippet shows how to retrieve metadata for audio and video streams using GStreamer's gst_tag_list_get_string function. It iterates through available streams and prints their languages and codec information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nfor (i = 0; i < n_audio; i++) {\n  tags = NULL;\n  /* Retrieve the stream's audio tags */\n  g_signal_emit_by_name (playbin, \"get-audio-tags\", i, &tags);\n  if (tags) {\n    gst_tag_list_get_string (tags, GST_TAG_LANGUAGE_CODE, &str);\n    g_print (\"  language: %s\\n\", str ? str : \"unknown\");\n    g_free (str);\n    gst_tag_list_free (tags);\n  }\n}\n\nfor (i = 0; i < n_video; i++) {\n  tags = NULL;\n  /* Retrieve the stream's video tags */\n  g_signal_emit_by_name (playbin, \"get-video-tags\", i, &tags);\n  if (tags) {\n    g_print (\"video stream %d:\\n\", i);\n    if (gst_tag_list_get_string (tags, GST_TAG_VIDEO_CODEC, &str)) {\n      g_print (\"  codec: %s\\n\", str);\n      g_free (str);\n    }\n    gst_tag_list_free (tags);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Mapping GstBuffer with Memory (GStreamer, C)\nDESCRIPTION: This code snippet illustrates the process of creating an empty GstBuffer, allocating memory, appending it to the buffer, then mapping and initializing its data using gst_buffer_map and memset. It is written in C and depends on the GStreamer library. The buffer is then safely released using gst_buffer_unref. The sample covers buffer creation, memory management, and shows proper lifecycle handling, assuming GStreamer initialization and headers are present.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n[...]\n  GstBuffer *buffer;\n  GstMemory *mem;\n  GstMapInfo info;\n\n  /* make empty buffer */\n  buffer = gst_buffer_new ();\n\n  /* make memory holding 100 bytes */\n  mem = gst_allocator_alloc (NULL, 100, NULL);\n\n  /* add the buffer */\n  gst_buffer_append_memory (buffer, mem);\n\n[...]\n\n  /* get WRITE access to the memory and fill with 0xff */\n  gst_buffer_map (buffer, &info, GST_MAP_WRITE);\n  memset (info.data, 0xff, info.size);\n  gst_buffer_unmap (buffer, &info);\n\n[...]\n\n  /* free the buffer */\n  gst_buffer_unref (buffer);\n\n[...]\n\n```\n\n----------------------------------------\n\nTITLE: Initializing GStreamer\nDESCRIPTION: Code snippet showing how to initialize GStreamer, which is a required first step in any GStreamer application. This initializes all internal structures and checks for available plugins.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/* Initialize GStreamer */\ngst_init (&argc, &argv);\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pipeline Creation in Python\nDESCRIPTION: Creates a pipeline container for the GStreamer elements in Python.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# Create the empty pipeline\npipeline = Gst.Pipeline.new(\"test-pipeline\")\n```\n\n----------------------------------------\n\nTITLE: GStreamer Capability Specification Syntax\nDESCRIPTION: Shows how to define media format capabilities in a GStreamer pipeline, including MIME types and properties with their data types, ranges, and lists.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nMIMETYPE [, PROPERTY[, PROPERTY ...]]] [; CAPS[; CAPS ...]]\n\nNAME=[(TYPE)] VALUE in lists and ranges: [(TYPE)] VALUE\n```\n\n----------------------------------------\n\nTITLE: Error Handling and Bus Monitoring in Python\nDESCRIPTION: Waits for the pipeline to finish and handles error messages from the GStreamer bus in Python.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n# Wait for EOS or error\nbus = pipeline.get_bus()\nmsg = bus.timed_pop_filtered(\n    Gst.CLOCK_TIME_NONE,\n    Gst.MessageType.ERROR | Gst.MessageType.EOS\n)\n\n# Parse message\nif msg:\n    if msg.type == Gst.MessageType.ERROR:\n        err, debug_info = msg.parse_error()\n        print(f\"Error received from element {msg.src.get_name()}: {err.message}\")\n        print(f\"Debugging information: {debug_info if debug_info else 'none'}\")\n    elif msg.type == Gst.MessageType.EOS:\n        print(\"End-Of-Stream reached.\")\n    else:\n        # This should not be reached\n        print(\"Unexpected message received.\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Elements to a Bin in GStreamer\nDESCRIPTION: This snippet demonstrates how to create a pipeline, a bin, and elements, then add the elements to the bin and the bin to the pipeline. It also shows how to link elements within the bin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/bins.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nint\nmain (int   argc,\n      char *argv[])\n{\n  GstElement *bin, *pipeline, *source, *sink;\n\n  /* init */\n  gst_init (&argc, &argv);\n\n  /* create */\n  pipeline = gst_pipeline_new (\"my_pipeline\");\n  bin = gst_bin_new (\"my_bin\");\n  source = gst_element_factory_make (\"fakesrc\", \"source\");\n  sink = gst_element_factory_make (\"fakesink\", \"sink\");\n\n  /* First add the elements to the bin */\n  gst_bin_add_many (GST_BIN (bin), source, sink, NULL);\n  /* add the bin to the pipeline */\n  gst_bin_add (GST_BIN (pipeline), bin);\n\n  /* link the elements */\n  gst_element_link (source, sink);\n\n[..]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Main GStreamer Pipeline Setup and Event Loop\nDESCRIPTION: Core method that sets up the GStreamer pipeline, configures bus monitoring, and runs the main loop. It creates the pipeline with playbin, sets up signal handlers for bus messages, configures UI refresh callbacks, and handles cleanup when the loop exits.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_13\n\nLANGUAGE: Objective-C\nCODE:\n```\n/* Main method for the bus monitoring code */\n-(void) app_function\n{\n    GstBus *bus;\n    GSource *timeout_source;\n    GSource *bus_source;\n    GError *error = NULL;\n\n    GST_DEBUG (\"Creating pipeline\");\n\n    /* Create our own GLib Main Context and make it the default one */\n    context = g_main_context_new ();\n    g_main_context_push_thread_default(context);\n\n    /* Build pipeline */\n    pipeline = gst_parse_launch(\"playbin\", &error);\n    if (error) {\n        gchar *message = g_strdup_printf(\"Unable to build pipeline: %s\", error->message);\n        g_clear_error (&error);\n        [self setUIMessage:message];\n        g_free (message);\n        return;\n    }\n\n    /* Set the pipeline to READY, so it can already accept a window handle */\n    gst_element_set_state(pipeline, GST_STATE_READY);\n\n    video_sink = gst_bin_get_by_interface(GST_BIN(pipeline), GST_TYPE_VIDEO_OVERLAY);\n    if (!video_sink) {\n        GST_ERROR (\"Could not retrieve video sink\");\n        return;\n    }\n    gst_video_overlay_set_window_handle(GST_VIDEO_OVERLAY(video_sink), (guintptr) (id) ui_video_view);\n\n    /* Instruct the bus to emit signals for each received message, and connect to the interesting signals */\n    bus = gst_element_get_bus (pipeline);\n    bus_source = gst_bus_create_watch (bus);\n    g_source_set_callback (bus_source, (GSourceFunc) gst_bus_async_signal_func, NULL, NULL);\n    g_source_attach (bus_source, context);\n    g_source_unref (bus_source);\n    g_signal_connect (G_OBJECT (bus), \"message::error\", (GCallback)error_cb, (__bridge void *)self);\n    g_signal_connect (G_OBJECT (bus), \"message::eos\", (GCallback)eos_cb, (__bridge void *)self);\n    g_signal_connect (G_OBJECT (bus), \"message::state-changed\", (GCallback)state_changed_cb, (__bridge void *)self);\n    g_signal_connect (G_OBJECT (bus), \"message::duration\", (GCallback)duration_cb, (__bridge void *)self);\n    g_signal_connect (G_OBJECT (bus), \"message::buffering\", (GCallback)buffering_cb, (__bridge void *)self);\n    g_signal_connect (G_OBJECT (bus), \"message::clock-lost\", (GCallback)clock_lost_cb, (__bridge void *)self);\n    gst_object_unref (bus);\n\n    /* Register a function that GLib will call 4 times per second */\n    timeout_source = g_timeout_source_new (250);\n    g_source_set_callback (timeout_source, (GSourceFunc)refresh_ui, (__bridge void *)self, NULL);\n    g_source_attach (timeout_source, context);\n    g_source_unref (timeout_source);\n\n    /* Create a GLib Main Loop and set it to run */\n    GST_DEBUG (\"Entering main loop...\");\n    main_loop = g_main_loop_new (context, FALSE);\n    [self check_initialization_complete];\n    g_main_loop_run (main_loop);\n    GST_DEBUG (\"Exited main loop\");\n    g_main_loop_unref (main_loop);\n    main_loop = NULL;\n\n    /* Free resources */\n    g_main_context_pop_thread_default(context);\n    g_main_context_unref (context);\n    gst_element_set_state (pipeline, GST_STATE_NULL);\n    gst_object_unref (pipeline);\n    pipeline = NULL;\n\n    ui_delegate = NULL;\n    ui_video_view = NULL;\n\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic GStreamer Pipeline in C\nDESCRIPTION: This code demonstrates how to build a GStreamer pipeline dynamically by responding to pad-added signals from a demuxer. It creates a pipeline that plays only the audio track from a video file, handling element linking at runtime when new pads are detected.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/dynamic-pipelines.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\n/* Structure to contain all our information, so we can pass it to callbacks */\ntypedef struct _CustomData {\n  GstElement *pipeline;\n  GstElement *source;\n  GstElement *convert;\n  GstElement *resample;\n  GstElement *sink;\n} CustomData;\n\n/* Handler for the pad-added signal */\nstatic void pad_added_handler (GstElement *src, GstPad *pad, CustomData *data);\n\nint main(int argc, char *argv[]) {\n  CustomData data;\n  GstBus *bus;\n  GstMessage *msg;\n  GstStateChangeReturn ret;\n  gboolean terminate = FALSE;\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Create the elements */\n  data.source = gst_element_factory_make (\"uridecodebin\", \"source\");\n  data.convert = gst_element_factory_make (\"audioconvert\", \"convert\");\n  data.resample = gst_element_factory_make (\"audioresample\", \"resample\");\n  data.sink = gst_element_factory_make (\"autoaudiosink\", \"sink\");\n\n  /* Create the empty pipeline */\n  data.pipeline = gst_pipeline_new (\"test-pipeline\");\n\n  if (!data.pipeline || !data.source || !data.convert || !data.resample || !data.sink) {\n    g_printerr (\"Not all elements could be created.\\n\");\n    return -1;\n  }\n\n  /* Build the pipeline. Note that we are NOT linking the source at this\n   * point. We will do it later. */\n  gst_bin_add_many (GST_BIN (data.pipeline), data.source, data.convert, data.resample, data.sink, NULL);\n  if (!gst_element_link_many (data.convert, data.resample, data.sink, NULL)) {\n    g_printerr (\"Elements could not be linked.\\n\");\n    gst_object_unref (data.pipeline);\n    return -1;\n  }\n\n  /* Set the URI to play */\n  g_object_set (data.source, \"uri\", \"https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\", NULL);\n\n  /* Connect to the pad-added signal */\n  g_signal_connect (data.source, \"pad-added\", G_CALLBACK (pad_added_handler), &data);\n\n  /* Start playing */\n  ret = gst_element_set_state (data.pipeline, GST_STATE_PLAYING);\n  if (ret == GST_STATE_CHANGE_FAILURE) {\n    g_printerr (\"Unable to set the pipeline to the playing state.\\n\");\n    gst_object_unref (data.pipeline);\n    return -1;\n  }\n\n  /* Listen to the bus */\n  bus = gst_element_get_bus (data.pipeline);\n  do {\n    msg = gst_bus_timed_pop_filtered (bus, GST_CLOCK_TIME_NONE,\n        GST_MESSAGE_STATE_CHANGED | GST_MESSAGE_ERROR | GST_MESSAGE_EOS);\n\n    /* Parse message */\n    if (msg != NULL) {\n      GError *err;\n      gchar *debug_info;\n\n      switch (GST_MESSAGE_TYPE (msg)) {\n        case GST_MESSAGE_ERROR:\n          gst_message_parse_error (msg, &err, &debug_info);\n          g_printerr (\"Error received from element %s: %s\\n\", GST_OBJECT_NAME (msg->src), err->message);\n          g_printerr (\"Debugging information: %s\\n\", debug_info ? debug_info : \"none\");\n          g_clear_error (&err);\n          g_free (debug_info);\n          terminate = TRUE;\n          break;\n        case GST_MESSAGE_EOS:\n          g_print (\"End-Of-Stream reached.\\n\");\n          terminate = TRUE;\n          break;\n        case GST_MESSAGE_STATE_CHANGED:\n          /* We are only interested in state-changed messages from the pipeline */\n          if (GST_MESSAGE_SRC (msg) == GST_OBJECT (data.pipeline)) {\n            GstState old_state, new_state, pending_state;\n            gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n            g_print (\"Pipeline state changed from %s to %s:\\n\",\n                gst_element_state_get_name (old_state), gst_element_state_get_name (new_state));\n          }\n          break;\n        default:\n          /* We should not reach here */\n          g_printerr (\"Unexpected message received.\\n\");\n          break;\n      }\n      gst_message_unref (msg);\n    }\n  } while (!terminate);\n\n  /* Free resources */\n  gst_object_unref (bus);\n  gst_element_set_state (data.pipeline, GST_STATE_NULL);\n  gst_object_unref (data.pipeline);\n  return 0;\n}\n\n/* This function will be called by the pad-added signal */\nstatic void pad_added_handler (GstElement *src, GstPad *new_pad, CustomData *data) {\n  GstPad *sink_pad = gst_element_get_static_pad (data->convert, \"sink\");\n  GstPadLinkReturn ret;\n  GstCaps *new_pad_caps = NULL;\n  GstStructure *new_pad_struct = NULL;\n  const gchar *new_pad_type = NULL;\n\n  g_print (\"Received new pad '%s' from '%s':\\n\", GST_PAD_NAME (new_pad), GST_ELEMENT_NAME (src));\n\n  /* If our converter is already linked, we have nothing to do here */\n  if (gst_pad_is_linked (sink_pad)) {\n    g_print (\"We are already linked. Ignoring.\\n\");\n    goto exit;\n  }\n\n  /* Check the new pad's type */\n  new_pad_caps = gst_pad_get_current_caps (new_pad);\n  new_pad_struct = gst_caps_get_structure (new_pad_caps, 0);\n  new_pad_type = gst_structure_get_name (new_pad_struct);\n  if (!g_str_has_prefix (new_pad_type, \"audio/x-raw\")) {\n    g_print (\"It has type '%s' which is not raw audio. Ignoring.\\n\", new_pad_type);\n    goto exit;\n  }\n\n  /* Attempt the link */\n  ret = gst_pad_link (new_pad, sink_pad);\n  if (GST_PAD_LINK_FAILED (ret)) {\n    g_print (\"Type is '%s' but link failed.\\n\", new_pad_type);\n  } else {\n    g_print (\"Link succeeded (type '%s').\\n\", new_pad_type);\n  }\n\nexit:\n  /* Unreference the new pad's caps, if we got them */\n  if (new_pad_caps != NULL)\n    gst_caps_unref (new_pad_caps);\n\n  /* Unreference the sink pad */\n  gst_object_unref (sink_pad);\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Bus Message Handler Setup\nDESCRIPTION: Example showing how to set up a bus message handler using GLib mainloop integration and signal connections for error and EOS messages.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/bus.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGstBus *bus;\n\n[..]\n\nbus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));\ngst_bus_add_signal_watch (bus);\ng_signal_connect (bus, \"message::error\", G_CALLBACK (cb_message_error), NULL);\ng_signal_connect (bus, \"message::eos\", G_CALLBACK (cb_message_eos), NULL);\n\n[..]\n```\n\n----------------------------------------\n\nTITLE: Checking For GstEvent or GstMessage Leaks and Raising Warnings (Shell)\nDESCRIPTION: Enables the leaks tracer for GstEvent and GstMessage object types specifically, with elevated debug output for the tracer subsystem. GST_TRACERS is set with the object type filters; if leaks are detected for these types, warnings are raised at exit. Input/output is as for previous leak tracer commands, but focused on event/message object types.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nGST_DEBUG=\\\"GST_TRACER:7\\\" GST_TRACERS=\\\"leaks(GstEvent,GstMessage)\\\" \\\\\ngst-launch-1.0 videotestsrc num-buffers=10 ! fakesink\n```\n\n----------------------------------------\n\nTITLE: Configuring and Linking GStreamer Playsink Pipeline in C\nDESCRIPTION: This C code creates a GStreamer pipeline that decodes a URI using uridecodebin and renders audio/video/text streams using playsink, dynamically attaching decoded pads to the correct request pads on playsink. Dependencies: GStreamer C libraries and headers. Key parameters include the file URI (passed via command-line), various GStreamer elements and pipelines, with input as a URI and output as playback with possible visualization. Limitations: only the first audio/video/text pads are linked per stream; for multiple pads, an input-selector is needed. Usage requires proper GStreamer installation and valid media URIs.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/highlevel/playback-components.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\n\n[.. my_bus_callback goes here ..]\n\n\n\n\nGstElement *pipeline, *sink;\n\nstatic void\ncb_pad_added (GstElement *dec,\n          GstPad     *pad,\n          gpointer    data)\n{\n  GstCaps *caps;\n  GstStructure *str;\n  const gchar *name;\n  GstPadTemplate *templ;\n  GstElementClass *klass;\n\n  /* check media type */\n  caps = gst_pad_query_caps (pad, NULL);\n  str = gst_caps_get_structure (caps, 0);\n  name = gst_structure_get_name (str);\n\n  klass = GST_ELEMENT_GET_CLASS (sink);\n\n  if (g_str_has_prefix (name, \"audio\")) {\n    templ = gst_element_class_get_pad_template (klass, \"audio_sink\");\n  } else if (g_str_has_prefix (name, \"video\")) {\n    templ = gst_element_class_get_pad_template (klass, \"video_sink\");\n  } else if (g_str_has_prefix (name, \"text\")) {\n    templ = gst_element_class_get_pad_template (klass, \"text_sink\");\n  } else {\n    templ = NULL;\n  }\n\n  if (templ) {\n    GstPad *sinkpad;\n\n    sinkpad = gst_element_request_pad (sink, templ, NULL, NULL);\n\n    if (!gst_pad_is_linked (sinkpad))\n      gst_pad_link (pad, sinkpad);\n\n    gst_object_unref (sinkpad);\n  }\n\n  gst_clear_caps (&caps);\n}\n\ngint\nmain (gint   argc,\n      gchar *argv[])\n{\n  GMainLoop *loop;\n  GstElement *dec;\n  GstBus *bus;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n  loop = g_main_loop_new (NULL, FALSE);\n\n  /* make sure we have input */\n  if (argc != 2) {\n    g_print (\"Usage: %s <uri>\\n\", argv[0]);\n    return -1;\n  }\n\n  /* setup */\n  pipeline = gst_pipeline_new (\"pipeline\");\n\n  bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));\n  gst_bus_add_watch (bus, my_bus_callback, loop);\n  gst_object_unref (bus);\n\n  dec = gst_element_factory_make (\"uridecodebin\", \"source\");\n  g_object_set (G_OBJECT (dec), \"uri\", argv[1], NULL);\n  g_signal_connect (dec, \"pad-added\", G_CALLBACK (cb_pad_added), NULL);\n\n  /* create audio output */\n  sink = gst_element_factory_make (\"playsink\", \"sink\");\n  gst_util_set_object_arg (G_OBJECT (sink), \"flags\",\n      \"soft-colorbalance+soft-volume+vis+text+audio+video\");\n  gst_bin_add_many (GST_BIN (pipeline), dec, sink, NULL);\n\n  /* run */\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n  g_main_loop_run (loop);\n\n  /* cleanup */\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (GST_OBJECT (pipeline));\n\n  return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Pulling media over HTTP using souphttpsrc in GStreamer via Bash\nDESCRIPTION: This bash command uses gst-launch-1.0 to stream media over HTTP with souphttpsrc, decode it via decodebin, then render to video. The location property specifies the remote resource; elements require GStreamer and related plugins, including libsoup support. Output is sent to autovideosink, with auto-negotiation of formats.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 souphttpsrc location=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm ! decodebin ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Adding Static Debug Category in GStreamer\nDESCRIPTION: Code snippet showing how to define a static debug category in C code to use with GStreamer's debugging system. This creates a custom category for your application's debug messages.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/debugging-tools.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nGST_DEBUG_CATEGORY_STATIC (my_category);\n#define GST_CAT_DEFAULT my_category\n```\n\n----------------------------------------\n\nTITLE: Querying Position and Duration in GStreamer Pipeline (C)\nDESCRIPTION: This snippet demonstrates how to query the current position and duration of a GStreamer pipeline. It uses gst_element_query_position() and gst_element_query_duration() functions to retrieve time information, which is then printed to the console.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/queryevents.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nstatic gboolean\ncb_print_position (GstElement *pipeline)\n{\n  gint64 pos, len;\n\n  if (gst_element_query_position (pipeline, GST_FORMAT_TIME, &pos)\n    && gst_element_query_duration (pipeline, GST_FORMAT_TIME, &len)) {\n    g_print (\"Time: %\" GST_TIME_FORMAT \" / %\" GST_TIME_FORMAT \"\\r\",\n         GST_TIME_ARGS (pos), GST_TIME_ARGS (len));\n  }\n\n  /* call me again */\n  return TRUE;\n}\n\ngint\nmain (gint   argc,\n      gchar *argv[])\n{\n  GstElement *pipeline;\n\n[..]\n\n  /* run pipeline */\n  g_timeout_add (200, (GSourceFunc) cb_print_position, pipeline);\n  g_main_loop_run (loop);\n\n[..]\n\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer New Sample Handler\nDESCRIPTION: Callback function that processes new samples received by appsink. Retrieves and handles incoming buffers from the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/short-cutting-the-pipeline.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nstatic GstFlowReturn new_sample (GstElement *sink, CustomData *data) {\n  GstSample *sample;\n  g_signal_emit_by_name (sink, \"pull-sample\", &sample);\n  if (sample) {\n    g_print (\"*\");\n    gst_sample_unref (sample);\n    return GST_FLOW_OK;\n  }\n  return GST_FLOW_ERROR;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GStreamer Sink Element Core Functions in C\nDESCRIPTION: Core implementation of a GStreamer sink element showing state management, synchronization, queuing, and event handling. Includes critical functions for commit, sync, rendering, queuing, and state transitions with detailed preroll and buffer handling logic.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/element-sink.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n# Commit the state. We return TRUE if we can continue\n# streaming, FALSE in the case we go to a READY or NULL state.\n# if we go to PLAYING, we don't need to block on preroll.\ncommit\n{\n  LOCK\n  switch (pending)\n    case PLAYING:\n      need_preroll = FALSE\n      break\n    case PAUSED:\n      break\n    case READY:\n    case NULL:\n      return FALSE\n    case VOID:\n      return TRUE\n\n  # update state\n  state = pending\n  next = VOID\n  pending = VOID\n  UNLOCK\n  return TRUE\n}\n\n# Sync an object. We have to wait for the element to reach\n# the PLAYING state before we can wait on the clock.\n# Some items do not need synchronisation (most events) so the\n# get_times method returns FALSE (not syncable)\n# need_preroll indicates that we are not in the PLAYING state\n# and therefore need to commit and potentially block on preroll\n# if our clock_wait got interrupted we commit and block again.\n# The reason for this is that the current item being rendered is\n# not yet finished and we can use that item to finish preroll.\ndo_sync (obj)\n{\n  # get timing information for this object\n  syncable = get_times (obj, &start, &stop)\n  if (!syncable)\n    return OK;\nagain:\n  while (need_preroll)\n    if (need_commit)\n      need_commit = FALSE\n      if (!commit)\n        return FLUSHING\n\n    if (need_preroll)\n      # release PREROLL_LOCK and wait. prerolled can be observed\n      # and will be TRUE\n      prerolled = TRUE\n      PREROLL_WAIT (releasing PREROLL_LOCK)\n      prerolled = FALSE\n      if (flushing)\n        return FLUSHING\n\n  if (valid (start || stop))\n    PREROLL_UNLOCK\n    end_time = stop\n    ret = wait_clock (obj,start)\n    PREROLL_LOCK\n    if (flushing)\n      return FLUSHING\n    # if the clock was unscheduled, we redo the\n    # preroll\n    if (ret == UNSCHEDULED)\n      goto again\n}\n\n# render a prerollable item (EOS or buffer). It is\n# always called with the PREROLL_LOCK helt.\nrender_object (obj)\n{\n  ret = do_sync (obj)\n  if (ret != OK)\n    return ret;\n\n  # preroll and syncing done, now we can render\n  render(obj)\n}\n                               | # sinks that sync on buffer contents do like this\n                               | while (more_to_render)\n                               |   ret = render\n                               |   if (ret == interrupted)\n                               |     prerolled = TRUE\nrender (buffer)          ----->|     PREROLL_WAIT (releasing PREROLL_LOCK)\n                               |     prerolled = FALSE\n                               |     if (flushing)\n                               |       return FLUSHING\n                               |\n\n# queue a prerollable item (EOS or buffer). It is\n# always called with the PREROLL_LOCK helt.\n# This function will commit the state when receiving the\n# first prerollable item.\n# items are then added to the rendering queue or rendered\n# right away if no preroll is needed.\nqueue (obj, prerollable)\n{\n  if (need_preroll)\n    if (prerollable)\n      queuelen++\n\n    # first item in the queue while we need preroll\n    # will complete state change and call preroll\n    if (queuelen == 1)\n      preroll (obj)\n      if (need_commit)\n        need_commit = FALSE\n        if (!commit)\n          return FLUSHING\n\n    # then see if we need more preroll items before we\n    # can block\n    if (need_preroll)\n      if (queuelen <= maxqueue)\n        queue.add (obj)\n        return OK\n\n  # now clear the queue and render each item before\n  # rendering the current item.\n  while (queue.hasItem)\n    render_object (queue.remove())\n\n  render_object (obj)\n  queuelen = 0\n}\n\n# various event functions\nevent\n  EOS:\n    # events must complete preroll too\n    STREAM_LOCK\n    PREROLL_LOCK\n    if (flushing)\n      return FALSE\n    ret = queue (event, TRUE)\n    if (ret == FLUSHING)\n      return FALSE\n    PREROLL_UNLOCK\n    STREAM_UNLOCK\n    break\n  SEGMENT:\n    # the segment must be used to clip incoming\n    # buffers. Then go into the queue as non-prerollable\n    # items used for syncing the buffers\n    STREAM_LOCK\n    PREROLL_LOCK\n    if (flushing)\n      return FALSE\n    set_clip\n    ret = queue (event, FALSE)\n    if (ret == FLUSHING)\n      return FALSE\n    PREROLL_UNLOCK\n    STREAM_UNLOCK\n    break\n  FLUSH_START:\n    # set flushing and unblock all that is waiting\n    event                   ----> subclasses can interrupt render\n    PREROLL_LOCK\n    flushing = TRUE\n    unlock_clock\n    PREROLL_SIGNAL\n    PREROLL_UNLOCK\n    STREAM_LOCK\n    lost_state\n    STREAM_UNLOCK\n    break\n  FLUSH_END:\n    # unset flushing and clear all data and eos\n    STREAM_LOCK\n    event\n    PREROLL_LOCK\n    queue.clear\n    queuelen = 0\n    flushing = FALSE\n    eos = FALSE\n    PREROLL_UNLOCK\n    STREAM_UNLOCK\n    break\n\n# the chain function checks the buffer falls within the\n# configured segment and queues the buffer for preroll and\n# rendering\nchain\n  STREAM_LOCK\n  PREROLL_LOCK\n  if (flushing)\n    return FLUSHING\n  if (clip)\n    queue (buffer, TRUE)\n  PREROLL_UNLOCK\n  STREAM_UNLOCK\n\nstate\n  switch (transition)\n    READY_PAUSED:\n      # no datapassing is going on so we always return ASYNC\n      ret = ASYNC\n      need_commit = TRUE\n      eos = FALSE\n      flushing = FALSE\n      need_preroll = TRUE\n      prerolled = FALSE\n      break\n    PAUSED_PLAYING:\n      # we grab the preroll lock. This we can only do if the\n      # chain function is either doing some clock sync, we are\n      # waiting for preroll or the chain function is not being called.\n      PREROLL_LOCK\n      if (prerolled || eos)\n        ret = OK\n        need_commit = FALSE\n        need_preroll = FALSE\n        if (eos)\n          post_eos\n        else\n          PREROLL_SIGNAL\n      else\n        need_preroll = TRUE\n        need_commit = TRUE\n        ret = ASYNC\n      PREROLL_UNLOCK\n      break\n    PLAYING_PAUSED:\n                         ---> subclass can interrupt render\n      # we grab the preroll lock. This we can only do if the\n      # chain function is either doing some clock sync\n      # or the chain function is not being called.\n      PREROLL_LOCK\n      need_preroll = TRUE\n      unlock_clock\n      if (prerolled || eos)\n        ret = OK\n      else\n        ret = ASYNC\n      PREROLL_UNLOCK\n      break\n    PAUSED_READY:\n                         ---> subclass can interrupt render\n      # we grab the preroll lock. Set to flushing and unlock\n      # everything. This should exit the chain functions and stop\n      # streaming.\n      PREROLL_LOCK\n      flushing = TRUE\n      unlock_clock\n      queue.clear\n      queuelen = 0\n      PREROLL_SIGNAL\n      ret = OK\n      PREROLL_UNLOCK\n      break\n```\n\n----------------------------------------\n\nTITLE: Setting and Implementing a Basic GStreamer Filter Chain Function in C\nDESCRIPTION: This snippet demonstrates the basic structure for implementing a GStreamer filter. It shows the initialization function (`gst_my_filter_init`) setting the `_chain` function (`gst_my_filter_chain`) on the element's sink pad. The `gst_my_filter_chain` function itself receives a data buffer (`buf`), optionally prints its size, and pushes it downstream via the source pad (`filter->srcpad`). This represents the core data flow logic for a simple filter.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/chainfn.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic GstFlowReturn gst_my_filter_chain (GstPad    *pad,\n                                          GstObject *parent,\n                                          GstBuffer *buf);\n\n[..]\n\nstatic void\ngst_my_filter_init (GstMyFilter * filter)\n{\n[..]\n  /* configure chain function on the pad before adding\n   * the pad to the element */\n  gst_pad_set_chain_function (filter->sinkpad,\n      gst_my_filter_chain);\n[..]\n}\n\nstatic GstFlowReturn\ngst_my_filter_chain (GstPad    *pad,\n                     GstObject *parent,\n             GstBuffer *buf)\n{\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  if (!filter->silent)\n    g_print (\"Have data of size %\" G_GSIZE_FORMAT\" bytes!\\n\",\n        gst_buffer_get_size (buf));\n\n  return gst_pad_push (filter->srcpad, buf);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GStreamer Element Sink and Source Pads in C\nDESCRIPTION: This C function `gst_my_filter_init` demonstrates the initialization of a custom GStreamer element (`GstMyFilter`). It creates sink and source pads using `gst_pad_new_from_static_template` based on predefined static templates (`sink_template`, `src_template`) and adds these pads to the element instance using `gst_element_add_pad`. It also initializes a custom boolean property `silent` to `FALSE`. This function is typically called when a new instance of the element is created.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/pads.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\n\nstatic void\ngst_my_filter_init (GstMyFilter *filter)\n{\n  /* pad through which data comes in to the element */\n  filter->sinkpad = gst_pad_new_from_static_template (\n    &sink_template, \"sink\");\n  /* pads are configured here with gst_pad_set_*_function () */\n\n\n\n  gst_element_add_pad (GST_ELEMENT (filter), filter->sinkpad);\n\n  /* pad through which data goes out of the element */\n  filter->srcpad = gst_pad_new_from_static_template (\n    &src_template, \"src\");\n  /* pads are configured here with gst_pad_set_*_function () */\n\n\n\n  gst_element_add_pad (GST_ELEMENT (filter), filter->srcpad);\n\n  /* properties initial value */\n  filter->silent = FALSE;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing GStreamer Pipeline Control in an Android Activity (Java)\nDESCRIPTION: This Java code defines the `Tutorial2` Android Activity. It initializes GStreamer, sets up UI controls (play/pause buttons), manages the desired playback state across Activity restarts, and interacts with native C code via JNI methods (`nativeInit`, `nativeFinalize`, `nativePlay`, `nativePause`, `nativeClassInit`). It uses `runOnUiThread` to update the UI from non-UI threads (callbacks from native code). Dependencies include the Android SDK, GStreamer Android SDK, and the associated native libraries (`gstreamer_android`, `tutorial-2`).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.freedesktop.gstreamer.tutorials.tutorial_2;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.ImageButton;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport org.freedesktop.gstreamer.GStreamer;\n\npublic class Tutorial2 extends Activity {\n    private native void nativeInit();     // Initialize native code, build pipeline, etc\n    private native void nativeFinalize(); // Destroy pipeline and shutdown native code\n    private native void nativePlay();     // Set pipeline to PLAYING\n    private native void nativePause();    // Set pipeline to PAUSED\n    private static native boolean nativeClassInit(); // Initialize native class: cache Method IDs for callbacks\n    private long native_custom_data;      // Native code will use this to keep private data\n\n    private boolean is_playing_desired;   // Whether the user asked to go to PLAYING\n\n    // Called when the activity is first created.\n    @Override\n    public void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n\n        // Initialize GStreamer and warn if it fails\n        try {\n            GStreamer.init(this);\n        } catch (Exception e) {\n            Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();\n            finish();\n            return;\n        }\n\n        setContentView(R.layout.main);\n\n        ImageButton play = (ImageButton) this.findViewById(R.id.button_play);\n        play.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                is_playing_desired = true;\n                nativePlay();\n            }\n        });\n\n        ImageButton pause = (ImageButton) this.findViewById(R.id.button_stop);\n        pause.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                is_playing_desired = false;\n                nativePause();\n            }\n        });\n\n        if (savedInstanceState != null) {\n            is_playing_desired = savedInstanceState.getBoolean(\"playing\");\n            Log.i (\"GStreamer\", \"Activity created. Saved state is playing:\" + is_playing_desired);\n        } else {\n            is_playing_desired = false;\n            Log.i (\"GStreamer\", \"Activity created. There is no saved state, playing: false\");\n        }\n\n        // Start with disabled buttons, until native code is initialized\n        this.findViewById(R.id.button_play).setEnabled(false);\n        this.findViewById(R.id.button_stop).setEnabled(false);\n\n        nativeInit();\n    }\n\n    protected void onSaveInstanceState (Bundle outState) {\n        Log.d (\"GStreamer\", \"Saving state, playing:\" + is_playing_desired);\n        outState.putBoolean(\"playing\", is_playing_desired);\n    }\n\n    protected void onDestroy() {\n        nativeFinalize();\n        super.onDestroy();\n    }\n\n    // Called from native code. This sets the content of the TextView from the UI thread.\n    private void setMessage(final String message) {\n        final TextView tv = (TextView) this.findViewById(R.id.textview_message);\n        runOnUiThread (new Runnable() {\n          public void run() {\n            tv.setText(message);\n          }\n        });\n    }\n\n    // Called from native code. Native code calls this once it has created its pipeline and\n    // the main loop is running, so it is ready to accept commands.\n    private void onGStreamerInitialized () {\n        Log.i (\"GStreamer\", \"Gst initialized. Restoring state, playing:\" + is_playing_desired);\n        // Restore previous playing state\n        if (is_playing_desired) {\n            nativePlay();\n        } else {\n            nativePause();\n        }\n\n        // Re-enable buttons, now that GStreamer is initialized\n        final Activity activity = this;\n        runOnUiThread(new Runnable() {\n            public void run() {\n                activity.findViewById(R.id.button_play).setEnabled(true);\n                activity.findViewById(R.id.button_stop).setEnabled(true);\n            }\n        });\n    }\n\n    static {\n        System.loadLibrary(\"gstreamer_android\");\n        System.loadLibrary(\"tutorial-2\");\n        nativeClassInit();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Android Native Window Surface in GStreamer\nDESCRIPTION: Handles initialization and cleanup of the native window surface for video rendering. The code releases any previous window, assigns the new surface, and triggers initialization checks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nANativeWindow *new_native_window = ANativeWindow_fromSurface(env, surface);\nGST_DEBUG (\"Received surface %p (native window %p)\", surface, new_native_window);\n\nif (data->native_window) {\n  ANativeWindow_release (data->native_window);\n  if (data->native_window == new_native_window) {\n    GST_DEBUG (\"New native window is the same as the previous one\", data->native_window);\n    if (data->pipeline) {\n      gst_x_overlay_expose(GST_X_OVERLAY (data->pipeline));\n      gst_x_overlay_expose(GST_X_OVERLAY (data->pipeline));\n    }\n    return;\n  } else {\n    GST_DEBUG (\"Released previous native window %p\", data->native_window);\n    data->initialized = FALSE;\n  }\n}\ndata->native_window = new_native_window;\n\ncheck_initialization_complete (data);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Playbin Flags for Media Output Control\nDESCRIPTION: This snippet demonstrates how to modify the 'flags' property of a `playbin` element. It first retrieves the current flags using `g_object_get`, then modifies them using bitwise operations with the `GstPlayFlags` enum values (enabling video and audio, disabling text), and finally sets the updated flags using `g_object_set`. This controls which media types are rendered.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n/* Set flags to show Audio and Video but ignore Subtitles */\ng_object_get (data.playbin, \"flags\", &flags, NULL);\nflags |= GST_PLAY_FLAG_VIDEO | GST_PLAY_FLAG_AUDIO;\nflags &= ~GST_PLAY_FLAG_TEXT;\ng_object_set (data.playbin, \"flags\", flags, NULL);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Media Playback with Playbin in C\nDESCRIPTION: Demonstrates how to create a basic media player using GStreamer's playbin element. The code initializes GStreamer, creates a playbin instance, sets up a URI for playback, and handles the pipeline state management.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/highlevel/playback-components.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\n[.. my_bus_callback goes here ..]\n\ngint\nmain (gint   argc,\n      gchar *argv[])\n{\n  GMainLoop *loop;\n  GstElement *play;\n  GstBus *bus;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n  loop = g_main_loop_new (NULL, FALSE);\n\n  /* make sure we have a URI */\n  if (argc != 2) {\n    g_print (\"Usage: %s <URI>\\n\", argv[0]);\n    return -1;\n  }\n\n  /* set up */\n  play = gst_element_factory_make (\"playbin\", \"play\");\n  g_object_set (G_OBJECT (play), \"uri\", argv[1], NULL);\n\n  bus = gst_pipeline_get_bus (GST_PIPELINE (play));\n  gst_bus_add_watch (bus, my_bus_callback, loop);\n  gst_object_unref (bus);\n\n  gst_element_set_state (play, GST_STATE_PLAYING);\n\n  /* now run */\n  g_main_loop_run (loop);\n\n  /* also clean up */\n  gst_element_set_state (play, GST_STATE_NULL);\n  gst_object_unref (GST_OBJECT (play));\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Linking GStreamer EncodeBin Example\nDESCRIPTION: Demonstrates how to create and configure an EncodeBin element, set its profile, and link it with video source and sink elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/encoding.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nencbin = gst_element_factory_make (\"encodebin, NULL);\ng_object_set (encbin, \"profile\", \"N900/H264 HQ\", NULL);\ngst_element_link (encbin, filesink);\n\nvsrcpad = gst_element_get_src_pad (source, \"src1\");\nvsinkpad = gst_element_request_pad_simple (encbin, \"video\\_%u\");\ngst_pad_link (vsrcpad, vsinkpad);\n```\n\n----------------------------------------\n\nTITLE: Declaring a QtGStreamer Video Player Widget Class - C++\nDESCRIPTION: This header file ('player.h') declares the Player class that derives from QGst::Ui::VideoWidget, encapsulating media playback control, position, and volume management for the main application. It sets up the interface for implementing playback state, URI setting, position querying and changing, and length retrieval. Prerequisites include Qt, QtGStreamer, and the implementation of Player in a corresponding CPP file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#ifndef PLAYER_H\\n#define PLAYER_H\\n#include <QtCore/QTimer>\\n#include <QtCore/QTime>\\n#include <QGst/Pipeline>\\n#include <QGst/Ui/VideoWidget>\\n\\nclass Player : public QGst::Ui::VideoWidget\\n{\\n    Q_OBJECT\\npublic:\\n    Player(QWidget *parent = 0);\\n    ~Player();\\n\\n    void setUri(const QString &uri);\\n\\n    QTime position() const;\\n    void setPosition(const QTime &pos);\\n    int volume() const;\\n    QTime length() const;\n```\n\n----------------------------------------\n\nTITLE: Creating GStreamer Elements for Audio Processing and Visualization\nDESCRIPTION: This snippet instantiates various GStreamer elements required for audio processing and visualization, including audio source, tee, queues, converters, and sinks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/multithreading-and-pad-availability.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Create the elements */\naudio_source = gst_element_factory_make (\"audiotestsrc\", \"audio_source\");\ntee = gst_element_factory_make (\"tee\", \"tee\");\naudio_queue = gst_element_factory_make (\"queue\", \"audio_queue\");\naudio_convert = gst_element_factory_make (\"audioconvert\", \"audio_convert\");\naudio_resample = gst_element_factory_make (\"audioresample\", \"audio_resample\");\naudio_sink = gst_element_factory_make (\"autoaudiosink\", \"audio_sink\");\nvideo_queue = gst_element_factory_make (\"queue\", \"video_queue\");\nvisual = gst_element_factory_make (\"wavescope\", \"visual\");\nvideo_convert = gst_element_factory_make (\"videoconvert\", \"video_convert\");\nvideo_sink = gst_element_factory_make (\"autovideosink\", \"video_sink\");\n```\n\n----------------------------------------\n\nTITLE: Resampling audio stream using audioresample in GStreamer via Bash\nDESCRIPTION: This gst-launch-1.0 pipeline decodes audio from a remote URI, resamples it to 4000 Hz with audioresample and audio/x-raw caps, and outputs to autoaudiosink. audioresample supports configurable quality options, and is required for handling sample rate negotiation. All elements must be available; remote source is specified by the 'uri' property.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 uridecodebin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm ! audioresample ! audio/x-raw,rate=4000 ! audioconvert ! autoaudiosink\n```\n\n----------------------------------------\n\nTITLE: Handling GST_EVENT_QOS in a GStreamer Element (C)\nDESCRIPTION: This C code snippet demonstrates how a GStreamer element handles an incoming `GST_EVENT_QOS` within its sink pad's event function. It parses the event using `gst_event_parse_qos` to extract QoS parameters (type, proportion, diff, timestamp), stores these values in the element's private data structure protected by a lock (`GST_OBJECT_LOCK`/`GST_OBJECT_UNLOCK`), and then forwards the event upstream via `gst_pad_push_event`. This pattern is essential for elements participating in QoS management.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/qos.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\n    [...]\n\n    case GST_EVENT_QOS:\n    {\n      GstQOSType type;\n      gdouble proportion;\n      GstClockTimeDiff diff;\n      GstClockTime timestamp;\n\n      gst_event_parse_qos (event, &type, &proportion, &diff, &timestamp);\n\n      GST_OBJECT_LOCK (decoder);\n      priv->qos_proportion = proportion;\n      priv->qos_timestamp = timestamp;\n      priv->qos_diff = diff;\n      GST_OBJECT_UNLOCK (decoder);\n\n      res = gst_pad_push_event (decoder->sinkpad, event);\n      break;\n    }\n\n    [...]\n\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Timed Message Polling in GStreamer Pipeline with C\nDESCRIPTION: This code snippet demonstrates how to use gst_bus_timed_pop_filtered() to poll for specific messages on the GStreamer bus with a timeout. It allows for periodic UI updates and message handling.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/time-management.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nmsg = gst_bus_timed_pop_filtered (bus, 100 * GST_MSECOND,\n    GST_MESSAGE_STATE_CHANGED | GST_MESSAGE_ERROR | GST_MESSAGE_EOS | GST_MESSAGE_DURATION);\n```\n\n----------------------------------------\n\nTITLE: Implementing a CAPS Query Function in GStreamer\nDESCRIPTION: This code shows how to implement a CAPS query function that informs peer elements about supported formats. It handles format capabilities with consideration of sample rate flexibility and intersects the results with pad template caps.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/negotiation.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean\ngst_my_filter_query (GstPad *pad, GstObject * parent, GstQuery * query)\n{\n  gboolean ret;\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  switch (GST_QUERY_TYPE (query)) {\n    case GST_QUERY_CAPS\n    {\n      GstPad *otherpad;\n      GstCaps *temp, *caps, *filt, *tcaps;\n      gint i;\n\n      otherpad = (pad == filter->srcpad) ? filter->sinkpad :\n                                           filter->srcpad;\n      caps = gst_pad_get_allowed_caps (otherpad);\n\n      gst_query_parse_caps (query, &filt);\n\n      /* We support *any* samplerate, indifferent from the samplerate\n       * supported by the linked elements on both sides. */\n      for (i = 0; i < gst_caps_get_size (caps); i++) {\n        GstStructure *structure = gst_caps_get_structure (caps, i);\n\n        gst_structure_remove_field (structure, \"rate\");\n      }\n\n      /* make sure we only return results that intersect our\n       * padtemplate */\n      tcaps = gst_pad_get_pad_template_caps (pad);\n      if (tcaps) {\n        temp = gst_caps_intersect (caps, tcaps);\n        gst_caps_unref (caps);\n        gst_caps_unref (tcaps);\n        caps = temp;\n      }\n      /* filter against the query filter when needed */\n      if (filt) {\n        temp = gst_caps_intersect (caps, filt);\n        gst_caps_unref (caps);\n        caps = temp;\n      }\n      gst_query_set_caps_result (query, caps);\n      gst_caps_unref (caps);\n      ret = TRUE;\n      break;\n    }\n    default:\n      ret = gst_pad_query_default (pad, parent, query);\n      break;\n  }\n  return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Discovery Results\nDESCRIPTION: Handles different discovery result cases and errors through a switch statement\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nswitch (result) {\n  case GST_DISCOVERER_URI_INVALID:\n    g_print (\"Invalid URI '%s'\\n\", uri);\n    break;\n  case GST_DISCOVERER_ERROR:\n    g_print (\"Discoverer error: %s\\n\", err->message);\n    break;\n  case GST_DISCOVERER_TIMEOUT:\n    g_print (\"Timeout\\n\");\n    break;\n  case GST_DISCOVERER_BUSY:\n    g_print (\"Busy\\n\");\n    break;\n  case GST_DISCOVERER_MISSING_PLUGINS:{\n    const GstStructure *s;\n    gchar *str;\n\n    s = gst_discoverer_info_get_misc (info);\n    str = gst_structure_to_string (s);\n\n    g_print (\"Missing plugins: %s\\n\", str);\n    g_free (str);\n    break;\n  }\n  case GST_DISCOVERER_OK:\n    g_print (\"Discovered '%s'\\n\", uri);\n    break;\n}\n\nif (result != GST_DISCOVERER_OK) {\n  g_printerr (\"This URI cannot be played\\n\");\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Pipeline in Python\nDESCRIPTION: Adds the source and sink elements to the pipeline and links them together in Python.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Build the pipeline\npipeline.add(source, sink)\nif not source.link(sink):\n    print(\"Elements could not be linked.\")\n    exit(-1)\n```\n\n----------------------------------------\n\nTITLE: Compiling a Basic GStreamer Tutorial using GCC and pkg-config\nDESCRIPTION: Compiles the `basic-tutorial-1.c` source file using the `gcc` compiler. It links against the GStreamer core library by dynamically obtaining the required compiler (`--cflags`) and linker (`--libs`) flags via `pkg-config --cflags --libs gstreamer-1.0`. The output executable is named `basic-tutorial-1`. Note that specific tutorials may require additional libraries to be added to the `pkg-config` command.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-linux.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngcc basic-tutorial-1.c -o basic-tutorial-1 `pkg-config --cflags --libs gstreamer-1.0`\n```\n\n----------------------------------------\n\nTITLE: Handling State Changes and Seeking Capability Query in GStreamer with C\nDESCRIPTION: This snippet shows how to handle state change messages in a GStreamer pipeline, update the playing state, and query the seeking capabilities of the stream. It uses gst_query_new_seeking() and gst_element_query() to determine if seeking is enabled.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/time-management.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ncase GST_MESSAGE_STATE_CHANGED: {\n  GstState old_state, new_state, pending_state;\n  gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n  if (GST_MESSAGE_SRC (msg) == GST_OBJECT (data->pipeline)) {\n    g_print (\"Pipeline state changed from %s to %s:\\n\",\n        gst_element_state_get_name (old_state), gst_element_state_get_name (new_state));\n\n    /* Remember whether we are in the PLAYING state or not */\n    data->playing = (new_state == GST_STATE_PLAYING);\n\n    if (data->playing) {\n      /* We just moved to PLAYING. Check if seeking is possible */\n      GstQuery *query;\n      gint64 start, end;\n      query = gst_query_new_seeking (GST_FORMAT_TIME);\n      if (gst_element_query (data->pipeline, query)) {\n        gst_query_parse_seeking (query, NULL, &data->seek_enabled, &start, &end);\n        if (data->seek_enabled) {\n          g_print (\"Seeking is ENABLED from %\" GST_TIME_FORMAT \" to %\" GST_TIME_FORMAT \"\\n\",\n              GST_TIME_ARGS (start), GST_TIME_ARGS (end));\n        } else {\n          g_print (\"Seeking is DISABLED for this stream.\\n\");\n        }\n      }\n      else {\n        g_printerr (\"Seeking query failed.\");\n      }\n      gst_query_unref (query);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the User Interface\nDESCRIPTION: Function call to create the GTK+ user interface. The implementation contains GTK+-related function calls to build the UI components and register signal handlers for user interactions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/* Create the GUI */\ncreate_ui (&data);\n\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tracing Benchmarks and Log Analysis (Shell)\nDESCRIPTION: Invokes the tracing benchmark test script with specified tracers and media, then runs regular expression searches on the resulting trace.log to count occurrences of specific tracing events. Requires the test script and suitable media files. Outputs event counts for proc/thread rusage and log traces, enabling basic performance/memory/CPU profiling.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nrun ./tests/benchmarks/tracing.sh <tracer(s)> <media>\n\negrep -c \\\"(proc|thread)-rusage\\\" trace.log 658618 grep -c\n\\\"gst_tracer_log_trace\\\" trace.log 823351\n```\n\n----------------------------------------\n\nTITLE: Delayed Seek Callback Function in C\nDESCRIPTION: Implements the `delayed_seek_cb` function, a GLib GSourceFunc callback. This function is triggered by a timer set up in `execute_seek` when a seek operation needs to be delayed. It calls `execute_seek` again with the stored `data->desired_position` to perform the actual seek. It returns FALSE to indicate the timer source should be removed after execution.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n/* Delayed seek callback. This gets called by the timer setup in the above function. */\nstatic gboolean delayed_seek_cb (CustomData *data) {\n  GST_DEBUG (\"Doing delayed seek to %\" GST_TIME_FORMAT, GST_TIME_ARGS (data->desired_position));\n  execute_seek (data->desired_position, data);\n  return FALSE;\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pipeline with Custom Thread Pool Configuration\nDESCRIPTION: Example application showing how to configure a custom thread pool for a GStreamer pipeline. Demonstrates handling of stream status messages and configuration of real-time threads for streaming operations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/threads.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic GMainLoop* loop;\n\nstatic void\non_stream_status (GstBus     *bus,\n                  GstMessage *message,\n                  gpointer    user_data)\n{\n  GstStreamStatusType type;\n  GstElement *owner;\n  const GValue *val;\n  GstTask *task = NULL;\n\n  gst_message_parse_stream_status (message, &type, &owner);\n\n  val = gst_message_get_stream_status_object (message);\n\n  /* see if we know how to deal with this object */\n  if (G_VALUE_TYPE (val) == GST_TYPE_TASK) {\n    task = g_value_get_object (val);\n  }\n\n  switch (type) {\n    case GST_STREAM_STATUS_TYPE_CREATE:\n      if (task) {\n        GstTaskPool *pool;\n\n        pool = test_rt_pool_new();\n\n        gst_task_set_pool (task, pool);\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nstatic void\non_error (GstBus     *bus,\n          GstMessage *message,\n          gpointer    user_data)\n{\n  g_message (\"received ERROR\");\n  g_main_loop_quit (loop);\n}\n\nstatic void\non_eos (GstBus     *bus,\n        GstMessage *message,\n        gpointer    user_data)\n{\n  g_main_loop_quit (loop);\n}\n\nint\nmain (int argc, char *argv[])\n{\n  GstElement *bin, *fakesrc, *fakesink;\n  GstBus *bus;\n  GstStateChangeReturn ret;\n\n  gst_init (&argc, &argv);\n\n  /* create a new bin to hold the elements */\n  bin = gst_pipeline_new (\"pipeline\");\n  g_assert (bin);\n\n  /* create a source */\n  fakesrc = gst_element_factory_make (\"fakesrc\", \"fakesrc\");\n  g_assert (fakesrc);\n  g_object_set (fakesrc, \"num-buffers\", 50, NULL);\n\n  /* and a sink */\n  fakesink = gst_element_factory_make (\"fakesink\", \"fakesink\");\n  g_assert (fakesink);\n\n  /* add objects to the main pipeline */\n  gst_bin_add_many (GST_BIN (bin), fakesrc, fakesink, NULL);\n\n  /* link the elements */\n  gst_element_link (fakesrc, fakesink);\n\n  loop = g_main_loop_new (NULL, FALSE);\n\n  /* get the bus, we need to install a sync handler */\n  bus = gst_pipeline_get_bus (GST_PIPELINE (bin));\n  gst_bus_enable_sync_message_emission (bus);\n  gst_bus_add_signal_watch (bus);\n\n  g_signal_connect (bus, \"sync-message::stream-status\",\n      (GCallback) on_stream_status, NULL);\n  g_signal_connect (bus, \"message::error\",\n      (GCallback) on_error, NULL);\n  g_signal_connect (bus, \"message::eos\",\n      (GCallback) on_eos, NULL);\n\n  /* start playing */\n  ret = gst_element_set_state (bin, GST_STATE_PLAYING);\n  if (ret != GST_STATE_CHANGE_SUCCESS) {\n    g_message (\"failed to change state\");\n    return -1;\n  }\n\n  /* Run event loop listening for bus messages until EOS or ERROR */\n  g_main_loop_run (loop);\n\n  /* stop the bin */\n  gst_element_set_state (bin, GST_STATE_NULL);\n  gst_object_unref (bus);\n  g_main_loop_unref (loop);\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Audio from a WebM Container\nDESCRIPTION: Shows how to extract only the audio stream from a WebM file. This pipeline downloads a WebM file, demuxes it to access the audio stream, parses the Vorbis audio data, and creates a new Matroska file containing only the audio.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 souphttpsrc location=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm ! matroskademux name=d d.audio_0 ! vorbisparse ! matroskamux ! filesink location=sintel_audio.mka\n```\n\n----------------------------------------\n\nTITLE: Transcoding WebM to MP4 (H.264/AAC) with gst-launch-1.0 (Bash)\nDESCRIPTION: Demonstrates transcoding a WebM file to MP4 format using `gst-launch-1.0`. It decodes the input using `uridecodebin`, encodes video to H.264 (`x264enc`) and audio to AAC (`voaacenc`), muxes the streams into an MP4 container (`mp4mux`), and saves the result to `sintel.mp4` using `filesink`. A larger queue (`max-size-time=5000000000`) is used on the audio path to compensate for potential video encoder latency, ensuring the pipeline can preroll. Requires relevant GStreamer encoder/decoder/muxer plugins.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 uridecodebin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm name=d ! queue ! videoconvert ! x264enc ! video/x-h264,profile=high ! mp4mux name=m ! filesink location=sintel.mp4 d. ! queue max-size-time=5000000000 max-size-bytes=0 max-size-buffers=0 ! audioconvert ! audioresample ! voaacenc ! m.\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Data Structure for GStreamer Playback Control in C\nDESCRIPTION: This snippet defines a structure to hold information about the GStreamer pipeline, including playback state, seeking capabilities, and media duration. It also declares a forward definition for the message handling function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/time-management.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct _CustomData {\n  GstElement *playbin;  /* Our one and only element */\n  gboolean playing;      /* Are we in the PLAYING state? */\n  gboolean terminate;    /* Should we terminate execution? */\n  gboolean seek_enabled; /* Is seeking enabled for this media? */\n  gboolean seek_done;    /* Have we performed the seek already? */\n  gint64 duration;       /* How long does this media last, in nanoseconds */\n} CustomData;\n\n/* Forward definition of the message processing function */\nstatic void handle_message (CustomData *data, GstMessage *msg);\n```\n\n----------------------------------------\n\nTITLE: Object Reference Counting in GStreamer\nDESCRIPTION: Shows proper reference counting for GStreamer objects where the caller receives an object with increased refcount and must unref it after use. This pattern prevents memory leaks while ensuring object lifecycle management.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/standards.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\npeer = gst_pad_get_peer (pad);          /* peer with increased refcount */\nif (peer) {\n  .. use peer ..\n  gst_object_unref (GST_OBJECT (peer)); /* unref peer after usage */\n}\n```\n\n----------------------------------------\n\nTITLE: Generating audio test wave with GStreamer via Bash\nDESCRIPTION: This command generates a test audio signal via audiotestsrc, converts it with audioconvert, and outputs to system audio using autoaudiosink. The wave property selects the waveform type; elements must be present in the GStreamer installation. The pipeline confirms end-to-end audio functionality in test setups.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 audiotestsrc ! audioconvert ! autoaudiosink\n```\n\n----------------------------------------\n\nTITLE: Implementing the iOS View Controller with GStreamer Integration\nDESCRIPTION: Implementation of the ViewController class that manages the UI and communicates with the GStreamer backend. It handles video view initialization, playback controls, and maintains the correct aspect ratio of the video display area.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/video.md#2025-04-23_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import \"ViewController.h\"\n#import \"GStreamerBackend.h\"\n#import <UIKit/UIKit.h>\n\n@interface ViewController () {\n    GStreamerBackend *gst_backend;\n    int media_width;\n    int media_height;\n}\n\n@end\n\n@implementation ViewController\n\n/*\n * Methods from UIViewController\n */\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n\n    play_button.enabled = FALSE;\n    pause_button.enabled = FALSE;\n\n    /* Make these constant for now, later tutorials will change them */\n    media_width = 320;\n    media_height = 240;\n\n    gst_backend = [[GStreamerBackend alloc] init:self videoView:video_view];\n}\n\n- (void)didReceiveMemoryWarning\n{\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n/* Called when the Play button is pressed */\n-(IBAction) play:(id)sender\n{\n    [gst_backend play];\n}\n\n/* Called when the Pause button is pressed */\n-(IBAction) pause:(id)sender\n{\n    [gst_backend pause];\n}\n\n- (void)viewDidLayoutSubviews\n{\n    CGFloat view_width = video_container_view.bounds.size.width;\n    CGFloat view_height = video_container_view.bounds.size.height;\n\n    CGFloat correct_height = view_width * media_height / media_width;\n    CGFloat correct_width = view_height * media_width / media_height;\n\n    if (correct_height < view_height) {\n        video_height_constraint.constant = correct_height;\n        video_width_constraint.constant = view_width;\n    } else {\n        video_width_constraint.constant = correct_width;\n        video_height_constraint.constant = view_height;\n    }\n}\n\n/*\n * Methods from GstreamerBackendDelegate\n */\n\n-(void) gstreamerInitialized\n{\n    dispatch_async(dispatch_get_main_queue(), ^{\n        play_button.enabled = TRUE;\n        pause_button.enabled = TRUE;\n        message_label.text = @\"Ready\";\n    });\n}\n\n-(void) gstreamerSetUIMessage:(NSString *)message\n{\n    dispatch_async(dispatch_get_main_queue(), ^{\n        message_label.text = message;\n    });\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom GStreamer Element State Change Handling in C\nDESCRIPTION: This C code demonstrates how to implement the `change_state` virtual function for a custom GStreamer element (`GstMyFilter`). It shows how to hook the custom function (`gst_my_filter_change_state`) in the class initialization (`gst_my_filter_class_init`). The `gst_my_filter_change_state` function handles specific state transitions, allocating resources on `GST_STATE_CHANGE_NULL_TO_READY` and freeing them on `GST_STATE_CHANGE_READY_TO_NULL`. It correctly chains up to the parent element's `change_state` function, ensuring downward transitions deallocate resources only after the parent class has finished, which is crucial for thread safety.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/states.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic GstStateChangeReturn\ngst_my_filter_change_state (GstElement *element, GstStateChange transition);\n\nstatic void\ngst_my_filter_class_init (GstMyFilterClass *klass)\n{\n  GstElementClass *element_class = GST_ELEMENT_CLASS (klass);\n\n  element_class->change_state = gst_my_filter_change_state;\n}\n\n\n\nstatic GstStateChangeReturn\ngst_my_filter_change_state (GstElement *element, GstStateChange transition)\n{\n  GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;\n  GstMyFilter *filter = GST_MY_FILTER (element);\n\n  switch (transition) {\n\tcase GST_STATE_CHANGE_NULL_TO_READY:\n\t  if (!gst_my_filter_allocate_memory (filter))\n\t\treturn GST_STATE_CHANGE_FAILURE;\n\t  break;\n\tdefault:\n\t  break;\n  }\n\n  ret = GST_ELEMENT_CLASS (parent_class)->change_state (element, transition);\n  if (ret == GST_STATE_CHANGE_FAILURE)\n\treturn ret;\n\n  switch (transition) {\n\tcase GST_STATE_CHANGE_READY_TO_NULL:\n\t  gst_my_filter_free_memory (filter);\n\t  break;\n\tdefault:\n\t  break;\n  }\n\n  return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Format Conversion with GStreamer Filter\nDESCRIPTION: This snippet demonstrates how to implement a GStreamer filter element that can convert between different audio sample rates. It shows caps negotiation with both passthrough mode and format conversion capabilities.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/negotiation.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean\ngst_my_filter_setcaps (GstMyFilter *filter,\n               GstCaps *caps)\n{\n  if (gst_pad_set_caps (filter->srcpad, caps)) {\n    filter->passthrough = TRUE;\n  } else {\n    GstCaps *othercaps, *newcaps;\n    GstStructure *s = gst_caps_get_structure (caps, 0), *others;\n\n    /* no passthrough, setup internal conversion */\n    gst_structure_get_int (s, \"channels\", &filter->channels);\n    othercaps = gst_pad_get_allowed_caps (filter->srcpad);\n    others = gst_caps_get_structure (othercaps, 0);\n    gst_structure_set (others,\n      \"channels\", G_TYPE_INT, filter->channels, NULL);\n\n    /* now, the samplerate value can optionally have multiple values, so\n     * we \"fixate\" it, which means that one fixed value is chosen */\n    newcaps = gst_caps_copy_nth (othercaps, 0);\n    gst_caps_unref (othercaps);\n    gst_pad_fixate_caps (filter->srcpad, newcaps);\n    if (!gst_pad_set_caps (filter->srcpad, newcaps))\n      return FALSE;\n\n    /* we are now set up, configure internally */\n    filter->passthrough = FALSE;\n    gst_structure_get_int (s, \"rate\", &filter->from_samplerate);\n    others = gst_caps_get_structure (newcaps, 0);\n    gst_structure_get_int (others, \"rate\", &filter->to_samplerate);\n  }\n\n  return TRUE;\n}\n\nstatic gboolean\ngst_my_filter_sink_event (GstPad    *pad,\n                  GstObject *parent,\n                  GstEvent  *event)\n{\n  gboolean ret;\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  switch (GST_EVENT_TYPE (event)) {\n    case GST_EVENT_CAPS:\n    {\n      GstCaps *caps;\n\n      gst_event_parse_caps (event, &caps);\n      ret = gst_my_filter_setcaps (filter, caps);\n      break;\n    }\n    default:\n      ret = gst_pad_event_default (pad, parent, event);\n      break;\n  }\n  return ret;\n}\n\nstatic GstFlowReturn\ngst_my_filter_chain (GstPad    *pad,\n             GstObject *parent,\n             GstBuffer *buf)\n{\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n  GstBuffer *out;\n\n  /* push on if in passthrough mode */\n  if (filter->passthrough)\n    return gst_pad_push (filter->srcpad, buf);\n\n  /* convert, push */\n  out = gst_my_filter_convert (filter, buf);\n  gst_buffer_unref (buf);\n\n  return gst_pad_push (filter->srcpad, out);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up GLib Main Loop\nDESCRIPTION: Creates and runs a GLib main loop to wait for discovery signals\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n/* Create a GLib Main Loop and set it to run, so we can wait for the signals */\ndata.loop = g_main_loop_new (NULL, FALSE);\ng_main_loop_run (data.loop);\n```\n\n----------------------------------------\n\nTITLE: Rescaling Video during Playback with gst-launch-1.0 (Bash)\nDESCRIPTION: Shows how to rescale video using `gst-launch-1.0`. The pipeline decodes a media file with `uridecodebin`, uses the `videoscale` element to resize the video, sets the output resolution to 320x200 via a caps filter (`video/x-raw,width=320,height=200`), performs necessary color space conversion with `videoconvert`, and plays it back via `autovideosink`. Requires GStreamer core, `uridecodebin`, and `videoscale` elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 uridecodebin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm ! queue ! videoscale ! video/x-raw,width=320,height=200 ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Forward Declaring Callback Functions in C\nDESCRIPTION: Provides forward declarations for static callback functions `handle_message` and `handle_keyboard`. `handle_message` is intended for processing messages from the GStreamer bus, while `handle_keyboard` is designed to handle keyboard input events, enabling interactivity.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n/* Forward definition for the message and keyboard processing functions */\nstatic gboolean handle_message (GstBus *bus, GstMessage *msg, CustomData *data);\nstatic gboolean handle_keyboard (GIOChannel *source, GIOCondition cond, CustomData *data);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Data Structure in C for GStreamer Pipeline\nDESCRIPTION: Defines a structure to hold information about the GStreamer pipeline elements, allowing easy passing of data to callbacks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/dynamic-pipelines.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct _CustomData {\n  GstElement *pipeline;\n  GstElement *source;\n  GstElement *convert;\n  GstElement *resample;\n  GstElement *sink;\n} CustomData;\n```\n\n----------------------------------------\n\nTITLE: Handle GStreamer End-Of-Stream Messages in C\nDESCRIPTION: Implements the `eos_cb` function, a GStreamer bus callback (`GstBusFunc`). It's called when an End-Of-Stream (EOS) message is posted on the bus. It sets the target state to PAUSED, attempts to set the pipeline to PAUSED (updating the `is_live` flag based on the result), and then calls `execute_seek` to seek to the beginning of the media (position 0).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n/* Called when the End Of the Stream is reached. Just move to the beginning of the media and pause. */\nstatic void eos_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  data->target_state = GST_STATE_PAUSED;\n  data->is_live = (gst_element_set_state (data->pipeline, GST_STATE_PAUSED) == GST_STATE_CHANGE_NO_PREROLL);\n  execute_seek (0, data);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Network Buffering in GStreamer Android Media Player\nDESCRIPTION: This callback function manages network buffering by pausing the pipeline during buffering and resuming it when complete. It also updates the UI with buffering percentage information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_40\n\nLANGUAGE: c\nCODE:\n```\nstatic void buffering_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  gint percent;\n\n  if (data->is_live)\n    return;\n\n  gst_message_parse_buffering (msg, &percent);\n  if (percent < 100 && data->target_state >= GST_STATE_PAUSED) {\n    gchar * message_string = g_strdup_printf (\"Buffering %d%%\", percent);\n    gst_element_set_state (data->pipeline, GST_STATE_PAUSED);\n    set_ui_message (message_string, data);\n    g_free (message_string);\n  } else if (data->target_state >= GST_STATE_PLAYING) {\n    gst_element_set_state (data->pipeline, GST_STATE_PLAYING);\n  } else if (data->target_state >= GST_STATE_PAUSED) {\n    set_ui_message (\"Buffering complete\", data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Attach Current Thread to JVM using JNI in C\nDESCRIPTION: Implements the `attach_current_thread` function, which attaches the calling C thread to the Java Virtual Machine (JVM) using the JNI `AttachCurrentThread` function. This is necessary for C threads created outside the JVM to call Java methods. It returns the JNIEnv pointer for the attached thread or NULL on failure.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n/* Register this thread with the VM */\nstatic JNIEnv *attach_current_thread (void) {\n  JNIEnv *env;\n  JavaVMAttachArgs args;\n\n  GST_DEBUG (\"Attaching thread %p\", g_thread_self ());\n  args.version = JNI_VERSION_1_4;\n  args.name = NULL;\n  args.group = NULL;\n\n  if ((*java_vm)->AttachCurrentThread (java_vm, &env, &args) < 0) {\n    GST_ERROR (\"Failed to attach current thread\");\n    return NULL;\n  }\n\n  return env;\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Audio Ringbuffer Structure Diagram\nDESCRIPTION: ASCII diagram illustrating the structure of the audio ringbuffer, showing segments and play position, with each segment containing a fixed number of samples.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/audiosinks.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      play position\n        v\n+---+---+---+-------------------------------------+----------+\n+ 0 | 1 | 2 | ....                                | segtotal |\n+---+---+---+-------------------------------------+----------+\n<--->\n  segsize bytes = N samples * bytes_per_sample.\n```\n\n----------------------------------------\n\nTITLE: Handling Application Bus Messages in GStreamer with C\nDESCRIPTION: This function serves as a GTK+ and GStreamer callback for application-specific bus messages, particularly handling the 'tags-changed' message emitted when stream tags are updated. It invokes analyze_streams to refresh the GUI with new metadata. Dependencies include a properly initialized GStreamer and GTK+ environment, and valid GstBus, GstMessage, and CustomData structures. This snippet expects that only 'tags-changed' messages are currently issued.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* This function is called when an \"application\" message is posted on the bus.\n * Here we retrieve the message posted by the tags_cb callback */\nstatic void application_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  if (g_strcmp0 (gst_structure_get_name (gst_message_get_structure (msg)), \"tags-changed\") == 0) {\n    /* If the message is the \"tags-changed\" (only one we are currently issuing), update\n     * the stream info GUI */\n    analyze_streams (data);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example of Audio Sink Pad Capabilities in GStreamer\nDESCRIPTION: This code snippet shows the template capabilities for an audio sink pad. It demonstrates how the pad supports two formats of raw audio (S16LE and U8) with various ranges for rate and channels.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-formats-and-pad-capabilities.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSINK template: 'sink'\n  Availability: Always\n  Capabilities:\n    audio/x-raw\n               format: S16LE\n                 rate: [ 1, 2147483647 ]\n             channels: [ 1, 2 ]\n    audio/x-raw\n               format: U8\n                 rate: [ 1, 2147483647 ]\n             channels: [ 1, 2 ]\n```\n\n----------------------------------------\n\nTITLE: Adding a Pad to a GstElement in C\nDESCRIPTION: This function adds a pad to a GstElement. It sets the element as the parent of the pad, adds the pad to the element's list of pads, updates pad counts, and emits a 'new_pad' signal. It includes several error checks to ensure proper usage.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstelement.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngst_element_add_pad(element,pads)\n```\n\n----------------------------------------\n\nTITLE: Recovering from Lost Clock Events with GStreamer in C\nDESCRIPTION: This snippet handles the GST_MESSAGE_CLOCK_LOST bus message in a GStreamer application by pausing and resuming the pipeline to acquire a new global clock. It is used when synchronization among sinks is disrupted—for example, during network stream or device changes. Requires GStreamer pipeline context and is typically placed within a bus message callback. The code does not take any extra parameters and relies on the pipeline being properly initialized.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/streaming.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ncase GST_MESSAGE_CLOCK_LOST:\\n  /* Get a new clock */\\n  gst_element_set_state (data->pipeline, GST_STATE_PAUSED);\\n  gst_element_set_state (data->pipeline, GST_STATE_PLAYING);\\n  break;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Ogg/Vorbis Player Bin in GStreamer\nDESCRIPTION: This example shows how to create and use a custom bin (oggvorbisplayer) that encapsulates an Ogg/Vorbis decoder. It demonstrates setting the audio file location and starting playback.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/bins.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint\nmain (int   argc,\n      char *argv[])\n{\n  GstElement *player;\n\n  /* init */\n  gst_init (&argc, &argv);\n\n  /* create player */\n  player = gst_element_factory_make (\"oggvorbisplayer\", \"player\");\n\n  /* set the source audio file */\n  g_object_set (player, \"location\", \"helloworld.ogg\", NULL);\n\n  /* start playback */\n  gst_element_set_state (GST_ELEMENT (player), GST_STATE_PLAYING);\n[..]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Waveform Generator with GStreamer's appsrc and playbin\nDESCRIPTION: Complete implementation of a GStreamer application that generates a psychedelic waveform audio stream using appsrc connected to playbin. The code demonstrates how to configure the appsrc element, handle data flow through callbacks, and generate audio samples programmatically.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/short-cutting-the-pipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n#include <gst/audio/audio.h>\n#include <string.h>\n\n#define CHUNK_SIZE 1024   /* Amount of bytes we are sending in each buffer */\n#define SAMPLE_RATE 44100 /* Samples per second we are sending */\n\n/* Structure to contain all our information, so we can pass it to callbacks */\ntypedef struct _CustomData {\n  GstElement *pipeline;\n  GstElement *app_source;\n\n  guint64 num_samples;   /* Number of samples generated so far (for timestamp generation) */\n  gfloat a, b, c, d;     /* For waveform generation */\n\n  guint sourceid;        /* To control the GSource */\n\n  GMainLoop *main_loop;  /* GLib's Main Loop */\n} CustomData;\n\n/* This method is called by the idle GSource in the mainloop, to feed CHUNK_SIZE bytes into appsrc.\n * The ide handler is added to the mainloop when appsrc requests us to start sending data (need-data signal)\n * and is removed when appsrc has enough data (enough-data signal).\n */\nstatic gboolean push_data (CustomData *data) {\n  GstBuffer *buffer;\n  GstFlowReturn ret;\n  int i;\n  GstMapInfo map;\n  gint16 *raw;\n  gint num_samples = CHUNK_SIZE / 2; /* Because each sample is 16 bits */\n  gfloat freq;\n\n  /* Create a new empty buffer */\n  buffer = gst_buffer_new_and_alloc (CHUNK_SIZE);\n\n  /* Set its timestamp and duration */\n  GST_BUFFER_TIMESTAMP (buffer) = gst_util_uint64_scale (data->num_samples, GST_SECOND, SAMPLE_RATE);\n  GST_BUFFER_DURATION (buffer) = gst_util_uint64_scale (num_samples, GST_SECOND, SAMPLE_RATE);\n\n  /* Generate some psychodelic waveforms */\n  gst_buffer_map (buffer, &map, GST_MAP_WRITE);\n  raw = (gint16 *)map.data;\n  data->c += data->d;\n  data->d -= data->c / 1000;\n  freq = 1100 + 1000 * data->d;\n  for (i = 0; i < num_samples; i++) {\n    data->a += data->b;\n    data->b -= data->a / freq;\n    raw[i] = (gint16)(500 * data->a);\n  }\n  gst_buffer_unmap (buffer, &map);\n  data->num_samples += num_samples;\n\n  /* Push the buffer into the appsrc */\n  g_signal_emit_by_name (data->app_source, \"push-buffer\", buffer, &ret);\n\n  /* Free the buffer now that we are done with it */\n  gst_buffer_unref (buffer);\n\n  if (ret != GST_FLOW_OK) {\n    /* We got some error, stop sending data */\n    return FALSE;\n  }\n\n  return TRUE;\n}\n\n/* This signal callback triggers when appsrc needs data. Here, we add an idle handler\n * to the mainloop to start pushing data into the appsrc */\nstatic void start_feed (GstElement *source, guint size, CustomData *data) {\n  if (data->sourceid == 0) {\n    g_print (\"Start feeding\\n\");\n    data->sourceid = g_idle_add ((GSourceFunc) push_data, data);\n  }\n}\n\n/* This callback triggers when appsrc has enough data and we can stop sending.\n * We remove the idle handler from the mainloop */\nstatic void stop_feed (GstElement *source, CustomData *data) {\n  if (data->sourceid != 0) {\n    g_print (\"Stop feeding\\n\");\n    g_source_remove (data->sourceid);\n    data->sourceid = 0;\n  }\n}\n\n/* This function is called when an error message is posted on the bus */\nstatic void error_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  GError *err;\n  gchar *debug_info;\n\n  /* Print error details on the screen */\n  gst_message_parse_error (msg, &err, &debug_info);\n  g_printerr (\"Error received from element %s: %s\\n\", GST_OBJECT_NAME (msg->src), err->message);\n  g_printerr (\"Debugging information: %s\\n\", debug_info ? debug_info : \"none\");\n  g_clear_error (&err);\n  g_free (debug_info);\n\n  g_main_loop_quit (data->main_loop);\n}\n\n/* This function is called when playbin has created the appsrc element, so we have\n * a chance to configure it. */\nstatic void source_setup (GstElement *pipeline, GstElement *source, CustomData *data) {\n  GstAudioInfo info;\n  GstCaps *audio_caps;\n\n  g_print (\"Source has been created. Configuring.\\n\");\n  data->app_source = source;\n\n  /* Configure appsrc */\n  gst_audio_info_set_format (&info, GST_AUDIO_FORMAT_S16, SAMPLE_RATE, 1, NULL);\n  audio_caps = gst_audio_info_to_caps (&info);\n  g_object_set (source, \"caps\", audio_caps, \"format\", GST_FORMAT_TIME, NULL);\n  g_signal_connect (source, \"need-data\", G_CALLBACK (start_feed), data);\n  g_signal_connect (source, \"enough-data\", G_CALLBACK (stop_feed), data);\n  gst_caps_unref (audio_caps);\n}\n\nint main(int argc, char *argv[]) {\n  CustomData data;\n  GstBus *bus;\n\n  /* Initialize custom data structure */\n  memset (&data, 0, sizeof (data));\n  data.b = 1; /* For waveform generation */\n  data.d = 1;\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Create the playbin element */\n  data.pipeline = gst_parse_launch (\"playbin uri=appsrc://\", NULL);\n  g_signal_connect (data.pipeline, \"source-setup\", G_CALLBACK (source_setup), &data);\n\n  /* Instruct the bus to emit signals for each received message, and connect to the interesting signals */\n  bus = gst_element_get_bus (data.pipeline);\n  gst_bus_add_signal_watch (bus);\n  g_signal_connect (G_OBJECT (bus), \"message::error\", (GCallback)error_cb, &data);\n  gst_object_unref (bus);\n\n  /* Start playing the pipeline */\n  gst_element_set_state (data.pipeline, GST_STATE_PLAYING);\n\n  /* Create a GLib Main Loop and set it to run */\n  data.main_loop = g_main_loop_new (NULL, FALSE);\n  g_main_loop_run (data.main_loop);\n\n  /* Free resources */\n  gst_element_set_state (data.pipeline, GST_STATE_NULL);\n  gst_object_unref (data.pipeline);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Audio Visualization in GStreamer with C\nDESCRIPTION: This code demonstrates how to create a music player with audio visualization using GStreamer. It retrieves all available visualization plugins, selects one (preferably GOOM), and configures playbin to use it when playing an audio stream. The implementation includes finding visualization elements, setting the appropriate playbin flags, and connecting the visualization plugin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/audio-visualization.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\n/* playbin flags */\ntypedef enum {\n  GST_PLAY_FLAG_VIS           = (1 << 3) /* Enable rendering of visualizations when there is no video stream. */\n} GstPlayFlags;\n\n/* Return TRUE if this is a Visualization element */\nstatic gboolean filter_vis_features (GstPluginFeature *feature, gpointer data) {\n  GstElementFactory *factory;\n\n  if (!GST_IS_ELEMENT_FACTORY (feature))\n    return FALSE;\n  factory = GST_ELEMENT_FACTORY (feature);\n  if (!g_strrstr (gst_element_factory_get_klass (factory), \"Visualization\"))\n    return FALSE;\n\n  return TRUE;\n}\n\nint main(int argc, char *argv[]) {\n  GstElement *pipeline, *vis_plugin;\n  GstBus *bus;\n  GstMessage *msg;\n  GList *list, *walk;\n  GstElementFactory *selected_factory = NULL;\n  guint flags;\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Get a list of all visualization plugins */\n  list = gst_registry_feature_filter (gst_registry_get (), filter_vis_features, FALSE, NULL);\n\n  /* Print their names */\n  g_print(\"Available visualization plugins:\\n\");\n  for (walk = list; walk != NULL; walk = g_list_next (walk)) {\n    const gchar *name;\n    GstElementFactory *factory;\n\n    factory = GST_ELEMENT_FACTORY (walk->data);\n    name = gst_element_factory_get_longname (factory);\n    g_print(\"  %s\\n\", name);\n\n    if (selected_factory == NULL || g_str_has_prefix (name, \"GOOM\")) {\n      selected_factory = factory;\n    }\n  }\n\n  /* Don't use the factory if it's still empty */\n  /* e.g. no visualization plugins found */\n  if (!selected_factory) {\n    g_print (\"No visualization plugins found!\\n\");\n    return -1;\n  }\n\n  /* We have now selected a factory for the visualization element */\n  g_print (\"Selected '%s'\\n\", gst_element_factory_get_longname (selected_factory));\n  vis_plugin = gst_element_factory_create (selected_factory, NULL);\n  if (!vis_plugin)\n    return -1;\n\n  /* Build the pipeline */\n  pipeline = gst_parse_launch (\"playbin uri=http://radio.hbr1.com:19800/ambient.ogg\", NULL);\n\n  /* Set the visualization flag */\n  g_object_get (pipeline, \"flags\", &flags, NULL);\n  flags |= GST_PLAY_FLAG_VIS;\n  g_object_set (pipeline, \"flags\", flags, NULL);\n\n  /* set vis plugin for playbin */\n  g_object_set (pipeline, \"vis-plugin\", vis_plugin, NULL);\n\n  /* Start playing */\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n\n  /* Wait until error or EOS */\n  bus = gst_element_get_bus (pipeline);\n  msg = gst_bus_timed_pop_filtered (bus, GST_CLOCK_TIME_NONE, GST_MESSAGE_ERROR | GST_MESSAGE_EOS);\n\n  /* Free resources */\n  if (msg != NULL)\n    gst_message_unref (msg);\n  gst_plugin_feature_list_free (list);\n  gst_object_unref (bus);\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (pipeline);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Caps Filters to Resolve Linking Ambiguity\nDESCRIPTION: Demonstrates how to use Caps filters to resolve ambiguity when linking elements. This pipeline specifically selects the VP8 video stream from a WebM file by inserting a video/x-vp8 Caps filter in the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 souphttpsrc location=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm ! matroskademux ! video/x-vp8 ! matroskamux ! filesink location=sintel_video.mkv\n```\n\n----------------------------------------\n\nTITLE: Playing an MP3 File with a GStreamer Pipeline in C\nDESCRIPTION: This C snippet demonstrates initializing the GStreamer library, constructing an MP3 playback pipeline from elements (file source, MP3 decoder, and audio sink), transitioning the pipeline to PLAYING state, servicing the playback loop, and finally releasing resources. Dependencies include the GStreamer development libraries (headers and linker), and it works by parsing a pipeline launch string and running the playback synchronously. Parameters include command-line arguments for GStreamer options and a hardcoded MP3 location. Output is real-time audio playback of './music.mp3', and the code lacks error handling for brevity. Compiling and running require GStreamer dev files and a valid MP3 file at the specified path.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/company/gvadec.txt#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* note that the sample program does not do error checking for simplicities\n * sake */\nint\nmain (int argc, char **argv)\n{\n  GstElement *pipeline;\n\n  gst_init (&argc, &argv);\n  pipeline = gst_parse_launch (\"filesrc location=./music.mp3 ! mad ! osssink\",\n      NULL);\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n  while (gst_bin_iterate (GST_BIN (pipeline)));\n  gst_object_unref (GST_OBJECT (pipeline));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing set_window_handle for GstVideoOverlay in C\nDESCRIPTION: Provides an example implementation for the `set_window_handle` virtual function required by the `GstVideoOverlay` interface. This function is called when an application provides an external window handle for the element to render video into. The implementation updates the element's internal window handle, potentially destroying any previously managed window.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/interfaces.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic void\ngst_my_filter_set_window_handle (GstVideoOverlay *overlay, guintptr handle)\n{\n  GstMyFilter *my_filter = GST_MY_FILTER (overlay);\n\n  if (my_filter->window)\n    gst_my_filter_destroy_window (my_filter->window);\n\n  my_filter->window = handle;\n}\n\nstatic void\ngst_my_filter_xoverlay_init (GstVideoOverlayClass *iface)\n{\n  iface->set_window_handle = gst_my_filter_set_window_handle;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Manually Linking GStreamer Tee Element with Request Pads\nDESCRIPTION: This snippet demonstrates how to manually link the Tee element, which has Request Pads. It requests pads from the Tee, obtains sink pads from downstream elements, and links them using gst_pad_link().\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/multithreading-and-pad-availability.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n/* Manually link the Tee, which has \"Request\" pads */\ntee_audio_pad = gst_element_request_pad_simple (tee, \"src_%u\");\ng_print (\"Obtained request pad %s for audio branch.\\n\", gst_pad_get_name (tee_audio_pad));\nqueue_audio_pad = gst_element_get_static_pad (audio_queue, \"sink\");\ntee_video_pad = gst_element_request_pad_simple (tee, \"src_%u\");\ng_print (\"Obtained request pad %s for video branch.\\n\", gst_pad_get_name (tee_video_pad));\nqueue_video_pad = gst_element_get_static_pad (video_queue, \"sink\");\nif (gst_pad_link (tee_audio_pad, queue_audio_pad) != GST_PAD_LINK_OK ||\n    gst_pad_link (tee_video_pad, queue_video_pad) != GST_PAD_LINK_OK) {\n  g_printerr (\"Tee could not be linked.\\n\");\n  gst_object_unref (pipeline);\n  return -1;\n}\ngst_object_unref (queue_audio_pad);\ngst_object_unref (queue_video_pad);\n```\n\n----------------------------------------\n\nTITLE: Initializing Native Surface for GStreamer Video Rendering in C\nDESCRIPTION: This JNI function, gst_native_surface_init, receives a Java Surface object, obtains the corresponding ANativeWindow using ANativeWindow_fromSurface, and manages the native window handle. It handles cases where a previous window existed, either refreshing the overlay if the window is the same or resetting initialization if it's a new window. Finally, it stores the new window handle and calls check_initialization_complete to potentially signal GStreamer readiness.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nstatic void gst_native_surface_init (JNIEnv *env, jobject thiz, jobject surface) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  ANativeWindow *new_native_window = ANativeWindow_fromSurface(env, surface);\n  GST_DEBUG (\"Received surface %p (native window %p)\", surface, new_native_window);\n\n  if (data->native_window) {\n    ANativeWindow_release (data->native_window);\n    if (data->native_window == new_native_window) {\n      GST_DEBUG (\"New native window is the same as the previous one\", data->native_window);\n      if (data->video_sink) {\n        gst_video_overlay_expose(GST_VIDEO_OVERLAY (data->video_sink));\n        gst_video_overlay_expose(GST_VIDEO_OVERLAY (data->video_sink));\n      }\n      return;\n    } else {\n      GST_DEBUG (\"Released previous native window %p\", data->native_window);\n      data->initialized = FALSE;\n    }\n  }\n  data->native_window = new_native_window;\n\n  check_initialization_complete (data);\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Initialization in C\nDESCRIPTION: Initializes the required GStreamer components for the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/* Initialize GStreamer */\nif (!gst_is_initialized ())\n  gst_init (&argc, &argv);\n```\n\n----------------------------------------\n\nTITLE: Handling GStreamer Buffering Messages in C\nDESCRIPTION: Example code showing how to handle BUFFERING messages in a GStreamer pipeline. The code demonstrates state management based on buffering percentage, including pausing the pipeline while buffering and resuming playback when buffering is complete.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/buffering.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nswitch (GST_MESSAGE_TYPE (message)) {\n  case GST_MESSAGE_BUFFERING:{\n    gint percent;\n\n    /* no state management needed for live pipelines */\n    if (is_live)\n      break;\n\n    gst_message_parse_buffering (message, &percent);\n\n    if (percent == 100) {\n      /* a 100% message means buffering is done */\n      buffering = FALSE;\n      /* if the desired state is playing, go back */\n      if (target_state == GST_STATE_PLAYING) {\n        gst_element_set_state (pipeline, GST_STATE_PLAYING);\n      }\n    } else {\n      /* buffering busy */\n      if (!buffering && target_state == GST_STATE_PLAYING) {\n        /* we were not buffering but PLAYING, PAUSE  the pipeline. */\n        gst_element_set_state (pipeline, GST_STATE_PAUSED);\n      }\n      buffering = TRUE;\n    }\n    break;\n  case ...\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a GStreamer Pad for Fixed Caps Negotiation in C\nDESCRIPTION: Creates a GStreamer pad (`GstPad`) from a static template and calls `gst_pad_use_fixed_caps()` on it. This indicates that the pad will only output a single, fixed media format (GstCaps), typical for elements like typefinders or demuxers where the output format is inherent to the data or configuration. Requires the GStreamer library.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/negotiation.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\n\n[..]\n  pad = gst_pad_new_from_static_template (..);\n  gst_pad_use_fixed_caps (pad);\n[..]\n\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Seek Throttling in GStreamer iOS\nDESCRIPTION: This function implements seek throttling to prevent excessive seek operations. It either performs the seek immediately or schedules it for later execution based on the time elapsed since the last seek.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_18\n\nLANGUAGE: Objective-C\nCODE:\n```\nstatic void execute_seek (gint64 position, GStreamerBackend *self) {\n    gint64 diff;\n\n    if (position == GST_CLOCK_TIME_NONE)\n        return;\n\n    diff = gst_util_get_timestamp () - self->last_seek_time;\n\n    if (GST_CLOCK_TIME_IS_VALID (self->last_seek_time) && diff < SEEK_MIN_DELAY) {\n        /* The previous seek was too close, delay this one */\n        GSource *timeout_source;\n\n        if (self->desired_position == GST_CLOCK_TIME_NONE) {\n            /* There was no previous seek scheduled. Setup a timer for some time in the future */\n            timeout_source = g_timeout_source_new ((SEEK_MIN_DELAY - diff) / GST_MSECOND);\n            g_source_set_callback (timeout_source, (GSourceFunc)delayed_seek_cb, (__bridge void *)self, NULL);\n            g_source_attach (timeout_source, self->context);\n            g_source_unref (timeout_source);\n        }\n        /* Update the desired seek position. If multiple requests are received before it is time\n         * to perform a seek, only the last one is remembered. */\n        self->desired_position = position;\n        GST_DEBUG (\"Throttling seek to %\" GST_TIME_FORMAT \", will be in %\" GST_TIME_FORMAT,\n                   GST_TIME_ARGS (position), GST_TIME_ARGS (SEEK_MIN_DELAY - diff));\n    } else {\n        /* Perform the seek now */\n        GST_DEBUG (\"Seeking to %\" GST_TIME_FORMAT, GST_TIME_ARGS (position));\n        self->last_seek_time = gst_util_get_timestamp ();\n        gst_element_seek_simple (self->pipeline, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT, position);\n        self->desired_position = GST_CLOCK_TIME_NONE;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Element and Bin Syntax\nDESCRIPTION: Shows the syntax for defining elements with properties, setting element presets, and creating bins in a GStreamer pipeline description.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nELEMENTTYPE [PROPERTY1 ...]\n\nPROPERTY=VALUE ...\n\n@preset=<preset name> ...\n\n[BINTYPE.] ([PROPERTY1 ...] PIPELINE-DESCRIPTION)\n```\n\n----------------------------------------\n\nTITLE: Starting the GStreamer Pipeline in C\nDESCRIPTION: Sets the pipeline to the playing state and checks for errors.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n/* Start playing */\nret = gst_element_set_state (pipeline, GST_STATE_PLAYING);\nif (ret == GST_STATE_CHANGE_FAILURE) {\n  g_printerr (\"Unable to set the pipeline to the playing state.\\n\");\n  gst_object_unref (pipeline);\n  return -1;\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Application Messages in GStreamer Bus Callback\nDESCRIPTION: This function handles application-specific messages posted on the GStreamer bus. It checks if the message is a 'tags-changed' notification and calls the analyze_streams function to update the stream information in the UI.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n/* This function is called when an \"application\" message is posted on the bus.\n * Here we retrieve the message posted by the tags_cb callback */\nstatic void application_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  if (g_strcmp0 (gst_structure_get_name (gst_message_get_structure (msg)), \"tags-changed\") == 0) {\n    /* If the message is the \"tags-changed\" (only one we are currently issuing), update\n     * the stream info GUI */\n    analyze_streams (data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata API Interface in C for GStreamer\nDESCRIPTION: Header file snippet showing the interface for a custom metadata API implementation in GStreamer. It defines the function to get metadata info and a convenience macro to access it, along with a function to add the metadata to a GstBuffer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n[...]\n\n/* implementation */\nconst GstMetaInfo *my_example_meta_get_info (void);\n#define MY_EXAMPLE_META_INFO (my_example_meta_get_info())\n\nMyExampleMeta * gst_buffer_add_my_example_meta (GstBuffer      *buffer,\n                                                gint            age,\n                                                const gchar    *name);\n```\n\n----------------------------------------\n\nTITLE: GStreamer Initialization with GOption Command Line Parsing\nDESCRIPTION: Shows how to initialize GStreamer while also handling custom command-line arguments using GLib's GOption interface. Demonstrates combining application-specific options with GStreamer's standard options.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/init.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nint\nmain (int   argc,\n      char *argv[])\n{\n  gboolean silent = FALSE;\n  gchar *savefile = NULL;\n  GOptionContext *ctx;\n  GError *err = NULL;\n  GOptionEntry entries[] = {\n    { \"silent\", 's', 0, G_OPTION_ARG_NONE, &silent,\n      \"do not output status information\", NULL },\n    { \"output\", 'o', 0, G_OPTION_ARG_STRING, &savefile,\n      \"save xml representation of pipeline to FILE and exit\", \"FILE\" },\n    { NULL }\n  };\n\n  ctx = g_option_context_new (\"- Your application\");\n  g_option_context_add_main_entries (ctx, entries, NULL);\n  g_option_context_add_group (ctx, gst_init_get_option_group ());\n  if (!g_option_context_parse (ctx, &argc, &argv, &err)) {\n    g_print (\"Failed to initialize: %s\\n\", err->message);\n    g_clear_error (&err);\n    g_option_context_free (ctx);\n    return 1;\n  }\n  g_option_context_free (ctx);\n\n  printf (\"Run me with --help to see the Application options appended.\\n\");\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Stream Information\nDESCRIPTION: Retrieves and processes stream information from the discovered media\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nsinfo = gst_discoverer_info_get_stream_info (info);\nif (!sinfo)\n  return;\n\ng_print (\"Stream information:\\n\");\n\nprint_topology (sinfo, 1);\n\ngst_discoverer_stream_info_unref (sinfo);\n```\n\n----------------------------------------\n\nTITLE: Linking Elements with Simple Video Filter Capabilities – GStreamer (C)\nDESCRIPTION: This function illustrates how to programmatically construct a simple GstCaps object using gst_caps_new_simple() to filter the linking between two GStreamer elements, typically in a pipeline. The created filter ensures that only data matching the specified format, width, height, and framerate will pass between the elements. Dependencies: GStreamer C API. Key parameters: input elements (GstElement*), specifics such as pixel format, integer width/height, and fractional framerate. On failure to link with the filter, a warning is logged. Input: two GstElement pointers; Output: gboolean indicating successful linkage. The use of gst_element_link_filtered automatically handles intermediate capsfilter insertion.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/pads.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean\nlink_elements_with_filter (GstElement *element1, GstElement *element2)\n{\n  gboolean link_ok;\n  GstCaps *caps;\n\n  caps = gst_caps_new_simple (\"video/x-raw\",\n          \"format\", G_TYPE_STRING, \"I420\",\n          \"width\", G_TYPE_INT, 384,\n          \"height\", G_TYPE_INT, 288,\n          \"framerate\", GST_TYPE_FRACTION, 25, 1,\n          NULL);\n\n  link_ok = gst_element_link_filtered (element1, element2, caps);\n  gst_caps_unref (caps);\n\n  if (!link_ok) {\n    g_warning (\"Failed to link element1 and element2!\");\n  }\n\n  return link_ok;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating RTP Packets from H264 Video Buffer in GStreamer\nDESCRIPTION: This example demonstrates how to fragment H264 data from an input buffer into multiple RTP packets, each with their own headers. The output consists of an array of buffers, where each buffer contains separate GstMemory blocks for the RTP header and a subbuffer of the original H264 data, avoiding unnecessary memory copies.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/buffer.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n                     +-------+-------+---------------------------+--------+\ninput H264 buffer:   | NALU1 | NALU2 |  .....                    | NALUx  |\n                     +-------+-------+---------------------------+--------+\n                           |\n                           V\narray of             +-+ +-------+  +-+ +-------+            +-+ +-------+\noutput buffers:      | | | NALU1 |  | | | NALU2 |   ....     | | | NALUx |\n                     +-+ +-------+  +-+ +-------+            +-+ +-------+\n                     :           :  :           :\n                     \\-----------/  \\-----------/\n                       buffer 1        buffer 2\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring GStreamer Playbin Element in C\nDESCRIPTION: This snippet initializes GStreamer, creates a playbin element, sets the media URI, and configures playback flags. It demonstrates how to set up a basic GStreamer pipeline for media playback.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_4\n\nLANGUAGE: C\nCODE:\n```\ngst_init (&argc, &argv);\n\ndata.playbin = gst_element_factory_make (\"playbin\", \"playbin\");\n\nif (!data.playbin) {\n  g_printerr (\"Not all elements could be created.\\n\");\n  return -1;\n}\n\ng_object_set (data.playbin, \"uri\", \"https://gstreamer.freedesktop.org/data/media/sintel_cropped_multilingual.webm\", NULL);\n\ng_object_get (data.playbin, \"flags\", &flags, NULL);\nflags |= GST_PLAY_FLAG_VIDEO | GST_PLAY_FLAG_AUDIO;\nflags &= ~GST_PLAY_FLAG_TEXT;\ng_object_set (data.playbin, \"flags\", flags, NULL);\n\ng_object_set (data.playbin, \"connection-speed\", 56, NULL);\n```\n\n----------------------------------------\n\nTITLE: Implementing JNI Methods for GStreamer Android Integration\nDESCRIPTION: JNI methods for initializing the native code, finalizing resources, and controlling the GStreamer pipeline (play/pause). These methods are called from the Java side to interact with the native GStreamer implementation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nstatic void gst_native_init (JNIEnv* env, jobject thiz) {\n  CustomData *data = g_new0 (CustomData, 1);\n  SET_CUSTOM_DATA (env, thiz, custom_data_field_id, data);\n  GST_DEBUG_CATEGORY_INIT (debug_category, \"tutorial-3\", 0, \"Android tutorial 3\");\n  gst_debug_set_threshold_for_name(\"tutorial-3\", GST_LEVEL_DEBUG);\n  GST_DEBUG (\"Created CustomData at %p\", data);\n  data->app = (*env)->NewGlobalRef (env, thiz);\n  GST_DEBUG (\"Created GlobalRef for app object at %p\", data->app);\n  pthread_create (&gst_app_thread, NULL, &app_function, data);\n}\n\nstatic void gst_native_finalize (JNIEnv* env, jobject thiz) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  GST_DEBUG (\"Quitting main loop...\");\n  g_main_loop_quit (data->main_loop);\n  GST_DEBUG (\"Waiting for thread to finish...\");\n  pthread_join (gst_app_thread, NULL);\n  GST_DEBUG (\"Deleting GlobalRef for app object at %p\", data->app);\n  (*env)->DeleteGlobalRef (env, data->app);\n  GST_DEBUG (\"Freeing CustomData at %p\", data);\n  g_free (data);\n  SET_CUSTOM_DATA (env, thiz, custom_data_field_id, NULL);\n  GST_DEBUG (\"Done finalizing\");\n}\n\nstatic void gst_native_play (JNIEnv* env, jobject thiz) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  GST_DEBUG (\"Setting state to PLAYING\");\n  gst_element_set_state (data->pipeline, GST_STATE_PLAYING);\n}\n\nstatic void gst_native_pause (JNIEnv* env, jobject thiz) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  GST_DEBUG (\"Setting state to PAUSED\");\n  gst_element_set_state (data->pipeline, GST_STATE_PAUSED);\n}\n```\n\n----------------------------------------\n\nTITLE: Element State Locking Implementation in C\nDESCRIPTION: Demonstrates the state locking mechanism for handling element state transitions with success status. Shows the interaction between set_state(), change_state(), and commit_state functions with proper locking sequence.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/states.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nset_state(element)       change_state (element)   commit_state\n\n    |                         |                       |\n    |                         |                       |\nSTATE_LOCK                    |                       |\n    |                         |                       |\n    |------------------------>|                       |\n    |                         |                       |\n    |                         |                       |\n    |                         | (do state change)     |\n    |                         |                       |\n    |                         |                       |\n    |                         | if `SUCCESS`            |\n    |                         |---------------------->|\n    |                         |                       | post message\n    |                         |                       |\n    |                         |<----------------------| if (!final) change_state (next)\n    |                         |                       | else SIGNAL\n    |                         |                       |\n    |                         |                       |\n    |                         |                       |\n    |<------------------------|                       |\n    |     `SUCCESS`\n    |\nSTATE_UNLOCK\n    |\n  `SUCCESS`\n```\n\n----------------------------------------\n\nTITLE: GStreamer Data Feed Start Callback\nDESCRIPTION: Callback function that initiates data feeding when appsrc needs more data. Sets up an idle handler to push data into the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/short-cutting-the-pipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic void start_feed (GstElement *source, guint size, CustomData *data) {\n  if (data->sourceid == 0) {\n    g_print (\"Start feeding\\n\");\n    data->sourceid = g_idle_add ((GSourceFunc) push_data, data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Debug Category in GStreamer Element (C)\nDESCRIPTION: This snippet demonstrates how to define and initialize a static debug category for a GStreamer plugin element using the GStreamer logging framework in C. Dependencies include the GStreamer core and its logging API. The macro GST_DEBUG_CATEGORY_STATIC declares a static debug category, and GST_CAT_DEFAULT sets the default logging context for this file. During class initialization, GST_DEBUG_CATEGORY_INIT is called to register the category. This setup enables runtime debugging control with GST_DEBUG() and related macros. Parameters include the category variable, name, and description. Expected input: Element class initialization routine. Output: Debug messages categorized under the custom element name. Limitations: Logging requires appropriate runtime settings to be visible.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/appendix/checklist-element.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGST_DEBUG_CATEGORY_STATIC (myelement_debug);\n#define GST_CAT_DEFAULT myelement_debug\n\n[..]\n\nstatic void\ngst_myelement_class_init (GstMyelementClass *klass)\n{\n[..]\n  GST_DEBUG_CATEGORY_INIT (myelement_debug, \"myelement\",\n               0, \"My own element\");\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing GStreamer Error and State Change Callbacks\nDESCRIPTION: Callback functions for handling GStreamer bus errors and state changes. Parses error messages and state changes, formatting them for UI display.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-running-pipeline.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstatic void error_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self)\n{\n    GError *err;\n    gchar *debug_info;\n    gchar *message_string;\n\n    gst_message_parse_error (msg, &err, &debug_info);\n    message_string = g_strdup_printf (\"Error received from element %s: %s\", GST_OBJECT_NAME (msg->src), err->message);\n    g_clear_error (&err);\n    g_free (debug_info);\n    [self setUIMessage:message_string];\n    g_free (message_string);\n    gst_element_set_state (self->pipeline, GST_STATE_NULL);\n}\n\nstatic void state_changed_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self)\n{\n    GstState old_state, new_state, pending_state;\n    gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n    if (GST_MESSAGE_SRC (msg) == GST_OBJECT (self->pipeline)) {\n        gchar *message = g_strdup_printf(\"State changed to %s\", gst_element_state_get_name(new_state));\n        [self setUIMessage:message];\n        g_free (message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking a Pad to a GhostPad in C\nDESCRIPTION: This code snippet demonstrates the process of linking a source pad to a GhostPad using the gst_pad_link function. It handles both untargeted and targeted GhostPads.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstghostpad.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ngst_pad_link (src, X)\n```\n\n----------------------------------------\n\nTITLE: Extracting and Printing Tags from a File in C using GStreamer\nDESCRIPTION: This C program demonstrates how to extract tags from a media file using GStreamer and print them. It sets up a pipeline with uridecodebin and fakesink, listens for tag messages on the bus, and prints the received tags.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* compile with:\n * gcc -o tags tags.c `pkg-config --cflags --libs gstreamer-1.0` */\n#include <gst/gst.h>\n\nstatic void\nprint_one_tag (const GstTagList * list, const gchar * tag, gpointer user_data)\n{\n  int i, num;\n\n  num = gst_tag_list_get_tag_size (list, tag);\n  for (i = 0; i < num; ++i) {\n    const GValue *val;\n\n    /* Note: when looking for specific tags, use the gst_tag_list_get_xyz() API,\n     * we only use the GValue approach here because it is more generic */\n    val = gst_tag_list_get_value_index (list, tag, i);\n    if (G_VALUE_HOLDS_STRING (val)) {\n      g_print (\"\\t%20s : %s\\n\", tag, g_value_get_string (val));\n    } else if (G_VALUE_HOLDS_UINT (val)) {\n      g_print (\"\\t%20s : %u\\n\", tag, g_value_get_uint (val));\n    } else if (G_VALUE_HOLDS_DOUBLE (val)) {\n      g_print (\"\\t%20s : %g\\n\", tag, g_value_get_double (val));\n    } else if (G_VALUE_HOLDS_BOOLEAN (val)) {\n      g_print (\"\\t%20s : %s\\n\", tag,\n          (g_value_get_boolean (val)) ? \"true\" : \"false\");\n    } else if (GST_VALUE_HOLDS_BUFFER (val)) {\n      GstBuffer *buf = gst_value_get_buffer (val);\n      guint buffer_size = gst_buffer_get_size (buf);\n\n      g_print (\"\\t%20s : buffer of size %u\\n\", tag, buffer_size);\n    } else if (GST_VALUE_HOLDS_DATE_TIME (val)) {\n      GstDateTime *dt = g_value_get_boxed (val);\n      gchar *dt_str = gst_date_time_to_iso8601_string (dt);\n\n      g_print (\"\\t%20s : %s\\n\", tag, dt_str);\n      g_free (dt_str);\n    } else {\n      g_print (\"\\t%20s : tag of type '%s'\\n\", tag, G_VALUE_TYPE_NAME (val));\n    }\n  }\n}\n\nstatic void\non_new_pad (GstElement * dec, GstPad * pad, GstElement * fakesink)\n{\n  GstPad *sinkpad;\n\n  sinkpad = gst_element_get_static_pad (fakesink, \"sink\");\n  if (!gst_pad_is_linked (sinkpad)) {\n    if (gst_pad_link (pad, sinkpad) != GST_PAD_LINK_OK)\n      g_error (\"Failed to link pads!\");\n  }\n  gst_object_unref (sinkpad);\n}\n\nint\nmain (int argc, char ** argv)\n{\n  GstElement *pipe, *dec, *sink;\n  GstMessage *msg;\n  gchar *uri;\n\n  gst_init (&argc, &argv);\n\n  if (argc < 2)\n    g_error (\"Usage: %s FILE or URI\", argv[0]);\n\n  if (gst_uri_is_valid (argv[1])) {\n    uri = g_strdup (argv[1]);\n  } else {\n    uri = gst_filename_to_uri (argv[1], NULL);\n  }\n\n  pipe = gst_pipeline_new (\"pipeline\");\n\n  dec = gst_element_factory_make (\"uridecodebin\", NULL);\n  g_object_set (dec, \"uri\", uri, NULL);\n  gst_bin_add (GST_BIN (pipe), dec);\n\n  sink = gst_element_factory_make (\"fakesink\", NULL);\n  gst_bin_add (GST_BIN (pipe), sink);\n\n  g_signal_connect (dec, \"pad-added\", G_CALLBACK (on_new_pad), sink);\n\n  gst_element_set_state (pipe, GST_STATE_PAUSED);\n\n  while (TRUE) {\n    GstTagList *tags = NULL;\n\n    msg = gst_bus_timed_pop_filtered (GST_ELEMENT_BUS (pipe),\n        GST_CLOCK_TIME_NONE,\n        GST_MESSAGE_ASYNC_DONE | GST_MESSAGE_TAG | GST_MESSAGE_ERROR);\n\n    if (GST_MESSAGE_TYPE (msg) != GST_MESSAGE_TAG) /* error or async_done */\n      break;\n\n    gst_message_parse_tag (msg, &tags);\n\n    g_print (\"Got tags from element %s:\\n\", GST_OBJECT_NAME (msg->src));\n    gst_tag_list_foreach (tags, print_one_tag, NULL);\n    g_print (\"\\n\");\n    gst_tag_list_unref (tags);\n\n    gst_message_unref (msg);\n  }\n\n  if (GST_MESSAGE_TYPE (msg) == GST_MESSAGE_ERROR) {\n    GError *err = NULL;\n\n    gst_message_parse_error (msg, &err, NULL);\n    g_printerr (\"Got error: %s\\n\", err->message);\n    g_error_free (err);\n  }\n\n  gst_message_unref (msg);\n  gst_element_set_state (pipe, GST_STATE_NULL);\n  gst_object_unref (pipe);\n  g_free (uri);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tag Metadata in GStreamer Threading Context\nDESCRIPTION: This callback function is invoked when new metadata tags are discovered in the media stream. Since it runs in a GStreamer working thread (not the main thread), it posts an application message to the bus to notify the main thread about the tag changes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n/* This function is called when new metadata is discovered in the stream */\nstatic void tags_cb (GstElement *playbin, gint stream, CustomData *data) {\n  /* We are possibly in a GStreamer working thread, so we notify the main\n   * thread of this event through a message in the bus */\n  gst_element_post_message (playbin,\n    gst_message_new_application (GST_OBJECT (playbin),\n      gst_structure_new_empty (\"tags-changed\")));\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Input for Audio Stream Selection in GStreamer C Application\nDESCRIPTION: This function processes user input to change the current audio stream during playback. It demonstrates how to interact with the playbin element to switch between multiple audio tracks in real-time.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nstatic gboolean handle_keyboard (GIOChannel *source, GIOCondition cond, CustomData *data) {\n  gchar *str = NULL;\n\n  if (g_io_channel_read_line (source, &str, NULL, NULL, NULL) == G_IO_STATUS_NORMAL) {\n    int index = g_ascii_strtoull (str, NULL, 0);\n    if (index < 0 || index >= data->n_audio) {\n      g_printerr (\"Index out of bounds\\n\");\n    } else {\n      g_print (\"Setting current audio stream to %d\\n\", index);\n      g_object_set (data->playbin, \"current-audio\", index, NULL);\n    }\n  }\n  g_free (str);\n  return TRUE;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting GStreamer Pipeline DOT Files to Images - Shell\nDESCRIPTION: Uses the shell and Graphviz's 'dot' tool to convert DOT files exported by GStreamer into SVG, PNG, or JPG images. Assumes DOT files were generated via GST_DEBUG_DUMP_DOT_DIR and Graphviz is installed. Key, required parameters are the input DOT file (e.g., foo.dot) and the desired output format (e.g., SVG, PNG). Output is a graphical representation of the GStreamer pipeline state.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ndot foo.dot -Tsvg -o foo.svg\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Overlay Producer in C for GStreamer\nDESCRIPTION: This snippet shows how a logo or subpicture overlay element would produce and attach video overlay compositions to video buffers. It demonstrates creating new compositions and rectangles, and reusing cached compositions for efficiency.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/subtitle-overlays.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nif (logoverlay->cached_composition == NULL) {\n  comp = composition_new ();\n\n  rect = rectangle_new (format, pixels_buf,\n                        width, height, stride, par_n, par_d,\n                        x, y, render_width, render_height);\n\n  /* composition adds its own ref for the rectangle */\n  composition_add_rectangle (comp, rect);\n  rectangle_unref (rect);\n\n  /* buffer adds its own ref for the composition */\n  video_buffer_attach_composition (comp);\n\n  /* we take ownership of the composition and save it for later */\n  logoverlay->cached_composition = comp;\n} else {\n  video_buffer_attach_composition (logoverlay->cached_composition);\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Element Creation in Python\nDESCRIPTION: Creates source and sink elements for the video pipeline in Python.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Create the elements\nsource = Gst.ElementFactory.make(\"videotestsrc\", \"source\")\nsink = Gst.ElementFactory.make(\"autovideosink\", \"sink\")\n```\n\n----------------------------------------\n\nTITLE: Adjusting video framerate via videorate in GStreamer (C/Bash hybrid)\nDESCRIPTION: Here, gst-launch-1.0 is invoked (snippet shown in C context) to create a test video with videotestsrc at 30 fps, run through videorate (adjusting to 1 fps), and display it. This demonstrates frame dropping/duplication using videorate for matching pipeline requirements. Dependencies: all elements must be present; video/x-raw caps set input/output rate.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\ngst-launch-1.0 videotestsrc ! video/x-raw,framerate=30/1 ! videorate ! video/x-raw,framerate=1/1 ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Setting Up GStreamer Bus Signal Handlers\nDESCRIPTION: Configuring the GStreamer bus to emit signals for received messages and connecting callback functions to handle specific messages such as errors, end-of-stream, state changes, and application messages.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n  /* Instruct the bus to emit signals for each received message, and connect to the interesting signals */\n  bus = gst_element_get_bus (data.playbin);\n  gst_bus_add_signal_watch (bus);\n  g_signal_connect (G_OBJECT (bus), \"message::error\", (GCallback)error_cb, &data);\n  g_signal_connect (G_OBJECT (bus), \"message::eos\", (GCallback)eos_cb, &data);\n  g_signal_connect (G_OBJECT (bus), \"message::state-changed\", (GCallback)state_changed_cb, &data);\n  g_signal_connect (G_OBJECT (bus), \"message::application\", (GCallback)application_cb, &data);\n  gst_object_unref (bus);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain Function for Multi-Sink Elements in C\nDESCRIPTION: This code snippet demonstrates how to implement a chain function for multi-sink elements in GStreamer. It shows how to queue buffers and wait for data on multiple pads using locks and condition variables.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/scheduling.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic GstFlowReturn _chain (GstPad *pad, GstBuffer *buffer)\n{\n  LOCK (mylock);\n  while (pad->store != NULL) {\n    WAIT (mycond, mylock);\n  }\n  pad->store = buffer;\n  SIGNAL (mycond);\n  UNLOCK (mylock);\n\n  return GST_FLOW_OK;\n}\n\nstatic void _pull (GstPad *pad, GstBuffer **buffer)\n{\n  LOCK (mylock);\n  while (pad->store == NULL) {\n    WAIT (mycond, mylock);\n  }\n  **buffer = pad->store;\n  pad->store = NULL;\n  SIGNAL (mycond);\n  UNLOCK (mylock);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Management and Seeking in GStreamer\nDESCRIPTION: This code demonstrates how to query stream position, duration, and implement seeking functionality in GStreamer. It creates a playbin pipeline, periodically checks the current position, and performs a seek operation after 10 seconds of playback. The example also shows how to handle various GStreamer messages.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/time-management.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\n/* Structure to contain all our information, so we can pass it around */\ntypedef struct _CustomData {\n  GstElement *playbin;  /* Our one and only element */\n  gboolean playing;      /* Are we in the PLAYING state? */\n  gboolean terminate;    /* Should we terminate execution? */\n  gboolean seek_enabled; /* Is seeking enabled for this media? */\n  gboolean seek_done;    /* Have we performed the seek already? */\n  gint64 duration;       /* How long does this media last, in nanoseconds */\n} CustomData;\n\n/* Forward definition of the message processing function */\nstatic void handle_message (CustomData *data, GstMessage *msg);\n\nint main(int argc, char *argv[]) {\n  CustomData data;\n  GstBus *bus;\n  GstMessage *msg;\n  GstStateChangeReturn ret;\n\n  data.playing = FALSE;\n  data.terminate = FALSE;\n  data.seek_enabled = FALSE;\n  data.seek_done = FALSE;\n  data.duration = GST_CLOCK_TIME_NONE;\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Create the elements */\n  data.playbin = gst_element_factory_make (\"playbin\", \"playbin\");\n\n  if (!data.playbin) {\n    g_printerr (\"Not all elements could be created.\\n\");\n    return -1;\n  }\n\n  /* Set the URI to play */\n  g_object_set (data.playbin, \"uri\", \"https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\", NULL);\n\n  /* Start playing */\n  ret = gst_element_set_state (data.playbin, GST_STATE_PLAYING);\n  if (ret == GST_STATE_CHANGE_FAILURE) {\n    g_printerr (\"Unable to set the pipeline to the playing state.\\n\");\n    gst_object_unref (data.playbin);\n    return -1;\n  }\n\n  /* Listen to the bus */\n  bus = gst_element_get_bus (data.playbin);\n  do {\n    msg = gst_bus_timed_pop_filtered (bus, 100 * GST_MSECOND,\n        GST_MESSAGE_STATE_CHANGED | GST_MESSAGE_ERROR | GST_MESSAGE_EOS | GST_MESSAGE_DURATION);\n\n    /* Parse message */\n    if (msg != NULL) {\n      handle_message (&data, msg);\n    } else {\n      /* We got no message, this means the timeout expired */\n      if (data.playing) {\n        gint64 current = -1;\n\n        /* Query the current position of the stream */\n        if (!gst_element_query_position (data.playbin, GST_FORMAT_TIME, &current)) {\n          g_printerr (\"Could not query current position.\\n\");\n        }\n\n        /* If we didn't know it yet, query the stream duration */\n        if (!GST_CLOCK_TIME_IS_VALID (data.duration)) {\n          if (!gst_element_query_duration (data.playbin, GST_FORMAT_TIME, &data.duration)) {\n            g_printerr (\"Could not query current duration.\\n\");\n          }\n        }\n\n        /* Print current position and total duration */\n        g_print (\"Position %\" GST_TIME_FORMAT \" / %\" GST_TIME_FORMAT \"\\r\",\n            GST_TIME_ARGS (current), GST_TIME_ARGS (data.duration));\n\n        /* If seeking is enabled, we have not done it yet, and the time is right, seek */\n        if (data.seek_enabled && !data.seek_done && current > 10 * GST_SECOND) {\n          g_print (\"\\nReached 10s, performing seek...\\n\");\n          gst_element_seek_simple (data.playbin, GST_FORMAT_TIME,\n              GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT, 30 * GST_SECOND);\n          data.seek_done = TRUE;\n        }\n      }\n    }\n  } while (!data.terminate);\n\n  /* Free resources */\n  gst_object_unref (bus);\n  gst_element_set_state (data.playbin, GST_STATE_NULL);\n  gst_object_unref (data.playbin);\n  return 0;\n}\n\nstatic void handle_message (CustomData *data, GstMessage *msg) {\n  GError *err;\n  gchar *debug_info;\n\n  switch (GST_MESSAGE_TYPE (msg)) {\n    case GST_MESSAGE_ERROR:\n      gst_message_parse_error (msg, &err, &debug_info);\n      g_printerr (\"Error received from element %s: %s\\n\", GST_OBJECT_NAME (msg->src), err->message);\n      g_printerr (\"Debugging information: %s\\n\", debug_info ? debug_info : \"none\");\n      g_clear_error (&err);\n      g_free (debug_info);\n      data->terminate = TRUE;\n      break;\n    case GST_MESSAGE_EOS:\n      g_print (\"\\nEnd-Of-Stream reached.\\n\");\n      data->terminate = TRUE;\n      break;\n    case GST_MESSAGE_DURATION:\n      /* The duration has changed, mark the current one as invalid */\n      data->duration = GST_CLOCK_TIME_NONE;\n      break;\n    case GST_MESSAGE_STATE_CHANGED: {\n      GstState old_state, new_state, pending_state;\n      gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n      if (GST_MESSAGE_SRC (msg) == GST_OBJECT (data->playbin)) {\n        g_print (\"Pipeline state changed from %s to %s:\\n\",\n            gst_element_state_get_name (old_state), gst_element_state_get_name (new_state));\n\n        /* Remember whether we are in the PLAYING state or not */\n        data->playing = (new_state == GST_STATE_PLAYING);\n\n        if (data->playing) {\n          /* We just moved to PLAYING. Check if seeking is possible */\n          GstQuery *query;\n          gint64 start, end;\n          query = gst_query_new_seeking (GST_FORMAT_TIME);\n          if (gst_element_query (data->playbin, query)) {\n            gst_query_parse_seeking (query, NULL, &data->seek_enabled, &start, &end);\n            if (data->seek_enabled) {\n              g_print (\"Seeking is ENABLED from %\" GST_TIME_FORMAT \" to %\" GST_TIME_FORMAT \"\\n\",\n                  GST_TIME_ARGS (start), GST_TIME_ARGS (end));\n            } else {\n              g_print (\"Seeking is DISABLED for this stream.\\n\");\n            }\n          }\n          else {\n            g_printerr (\"Seeking query failed.\");\n          }\n          gst_query_unref (query);\n        }\n      }\n    } break;\n    default:\n      /* We should not reach here */\n      g_printerr (\"Unexpected message received.\\n\");\n      break;\n  }\n  gst_message_unref (msg);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Uridecodebin3 for Various Inputs in GStreamer\nDESCRIPTION: Shows how to use uridecodebin3 to support different input sources including local files and network streams.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 uridecodebin3 uri=file:///path/to/video.mp4 name=decoder decoder. ! queue ! audioconvert ! audioresample ! pulsesink   decoder. !  videoconvert ! xvimagesink\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 uridecodebin3 uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm name=decoder decoder. ! queue ! audioconvert ! audioresample ! pulsesink   decoder. !  videoconvert ! xvimagesink\n```\n\n----------------------------------------\n\nTITLE: Implementing get_range Function in GStreamer Filter Element\nDESCRIPTION: This code demonstrates how to implement a _get_range() function in a GStreamer element to provide random access. The example shows the initialization of a filter element, setting up the get_range function, and implementing the function to handle requests for data at specific offsets.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/scheduling.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include \"filter.h\"\nstatic GstFlowReturn\n        gst_my_filter_get_range (GstPad     * pad,\n                     GstObject  * parent,\n                     guint64      offset,\n                     guint        length,\n                     GstBuffer ** buf);\n\nG_DEFINE_TYPE (GstMyFilter, gst_my_filter, GST_TYPE_ELEMENT);\nGST_ELEMENT_REGISTER_DEFINE(my_filter, \"my-filter\", GST_RANK_NONE, GST_TYPE_MY_FILTER);\n\n\nstatic void\ngst_my_filter_init (GstMyFilter * filter)\n{\n\n[..]\n\n  gst_pad_set_getrange_function (filter->srcpad,\n      gst_my_filter_get_range);\n\n[..]\n}\n\nstatic GstFlowReturn\ngst_my_filter_get_range (GstPad     * pad,\n             GstObject  * parent,\n             guint64      offset,\n             guint        length,\n             GstBuffer ** buf)\n{\n\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  [.. here, you would fill *buf ..]\n\n  return GST_FLOW_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a GLib Main Loop\nDESCRIPTION: Creates a GLib `GMainLoop` using `g_main_loop_new` and starts its execution with `g_main_loop_run`. This loop waits for events (like GStreamer messages or keyboard input) and dispatches them to registered callback functions (`handle_message`, `handle_keyboard`). The loop runs until `g_main_loop_quit()` is called.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n/* Create a GLib Main Loop and set it to run */\ndata.main_loop = g_main_loop_new (NULL, FALSE);\ng_main_loop_run (data.main_loop);\n```\n\n----------------------------------------\n\nTITLE: Starting GstDiscoverer Process\nDESCRIPTION: Initiates the discoverer process before providing URIs to analyze\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n/* Start the discoverer process (nothing to do yet) */\ngst_discoverer_start (data.discoverer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Overlay Blending on Raw Video in C for GStreamer\nDESCRIPTION: This function demonstrates how to blend video overlay compositions onto raw video buffers. It handles different video formats, scales and converts overlay pixels as needed, and performs the actual blending operation for each overlay rectangle.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/subtitle-overlays.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid\ngst_video_overlay_composition_blend (GstVideoOverlayComposition * comp\n                                     GstBuffer                  * video_buf)\n{\n  guint n;\n\n  g_return_if_fail (gst_buffer_is_writable (video_buf));\n  g_return_if_fail (GST_BUFFER_CAPS (video_buf) != NULL);\n\n  ... parse video_buffer caps into BlendVideoFormatInfo ...\n\n  for each rectangle in the composition: {\n\n         if (gst_video_format_is_yuv (video_buf_format)) {\n           overlay_format = FORMAT_AYUV;\n         } else if (gst_video_format_is_rgb (video_buf_format)) {\n           overlay_format = FORMAT_ARGB;\n         } else {\n           /* FIXME: grayscale? */\n           return;\n         }\n\n         /* this will scale and convert AYUV<->ARGB if needed */\n         pixels = rectangle_get_pixels_scaled (rectangle, overlay_format);\n\n         ... clip output rectangle ...\n\n         __do_blend (video_buf_format, video_buf->data,\n                     overlay_format, pixels->data,\n                     x, y, width, height, stride);\n\n         gst_buffer_unref (pixels);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Latency for Leaky Buffering in GStreamer (C)\nDESCRIPTION: This snippet demonstrates how to calculate the maximum latency for an element with leaky buffering in a GStreamer pipeline, taking the minimum of upstream and element-specific maximum latencies.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/latency.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nmax_latency = MIN (upstream_max_latency, own_max_latency)\n```\n\n----------------------------------------\n\nTITLE: Initializing GStreamer Playback with GTK+ UI in C\nDESCRIPTION: This main function sets up the GTK+ and GStreamer frameworks, configures media source and video sinks, connects to GStreamer bus signals, and manages application state and resources. It demonstrates dynamic creation and fallback of sink elements (gtkglsink, glsinkbin, gtksink), assignment of widgets, event loop starting with gtk_main, and proper cleanup. Inputs are command-line args and expected dependencies are gtk+-3.0 and gstreamer-1.0. The program handles element creation, pipeline configuration, GUI creation, and error fallback for video sinks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint main(int argc, char *argv[]) {\n  CustomData data;\n  GstStateChangeReturn ret;\n  GstBus *bus;\n  GstElement *gtkglsink, *videosink;\n\n  /* Initialize GTK */\n  gtk_init (&argc, &argv);\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Initialize our data structure */\n  memset (&data, 0, sizeof (data));\n  data.duration = GST_CLOCK_TIME_NONE;\n\n  /* Create the elements */\n  data.playbin = gst_element_factory_make (\"playbin\", \"playbin\");\n  videosink = gst_element_factory_make (\"glsinkbin\", \"glsinkbin\");\n  gtkglsink = gst_element_factory_make (\"gtkglsink\", \"gtkglsink\");\n\n  /* Here we create the GTK Sink element which will provide us with a GTK widget where\n   * GStreamer will render the video at and we can add to our UI.\n   * Try to create the OpenGL version of the video sink, and fallback if that fails */\n  if (gtkglsink != NULL && videosink != NULL) {\n    g_printerr (\"Successfully created GTK GL Sink\");\n\n    g_object_set (videosink, \"sink\", gtkglsink, NULL);\n\n    /* The gtkglsink creates the gtk widget for us. This is accessible through a property.\n     * So we get it and use it later to add it to our gui. */\n    g_object_get (gtkglsink, \"widget\", &data.sink_widget, NULL);\n  } else {\n    g_printerr (\"Could not create gtkglsink, falling back to gtksink.\\n\");\n\n    videosink = gst_element_factory_make (\"gtksink\", \"gtksink\");\n    g_object_get (videosink, \"widget\", &data.sink_widget, NULL);\n  }\n\n  if (!data.playbin || !videosink) {\n    g_printerr (\"Not all elements could be created.\\n\");\n    return -1;\n  }\n\n  /* Set the URI to play */\n  g_object_set (data.playbin, \"uri\", \"https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\", NULL);\n\n  /* Set the video-sink  */\n  g_object_set (data.playbin, \"video-sink\", videosink, NULL);\n\n  /* Connect to interesting signals in playbin */\n  g_signal_connect (G_OBJECT (data.playbin), \"video-tags-changed\", (GCallback) tags_cb, &data);\n  g_signal_connect (G_OBJECT (data.playbin), \"audio-tags-changed\", (GCallback) tags_cb, &data);\n  g_signal_connect (G_OBJECT (data.playbin), \"text-tags-changed\", (GCallback) tags_cb, &data);\n\n  /* Create the GUI */\n  create_ui (&data);\n\n  /* Instruct the bus to emit signals for each received message, and connect to the interesting signals */\n  bus = gst_element_get_bus (data.playbin);\n  gst_bus_add_signal_watch (bus);\n  g_signal_connect (G_OBJECT (bus), \"message::error\", (GCallback)error_cb, &data);\n  g_signal_connect (G_OBJECT (bus), \"message::eos\", (GCallback)eos_cb, &data);\n  g_signal_connect (G_OBJECT (bus), \"message::state-changed\", (GCallback)state_changed_cb, &data);\n  g_signal_connect (G_OBJECT (bus), \"message::application\", (GCallback)application_cb, &data);\n  gst_object_unref (bus);\n\n  /* Start playing */\n  ret = gst_element_set_state (data.playbin, GST_STATE_PLAYING);\n  if (ret == GST_STATE_CHANGE_FAILURE) {\n    g_printerr (\"Unable to set the pipeline to the playing state.\\n\");\n    gst_object_unref (data.playbin);\n    gst_object_unref (videosink);\n    return -1;\n  }\n\n  /* Register a function that GLib will call every second */\n  g_timeout_add_seconds (1, (GSourceFunc)refresh_ui, &data);\n\n  /* Start the GTK main loop. We will not regain control until gtk_main_quit is called. */\n  gtk_main ();\n\n  /* Free resources */\n  gst_element_set_state (data.playbin, GST_STATE_NULL);\n  gst_object_unref (data.playbin);\n  gst_object_unref (videosink);\n\n  return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Seek Throttling in GStreamer for Android\nDESCRIPTION: This function implements seek throttling by limiting the frequency of seek operations. It either executes a seek immediately or schedules it for later to avoid overwhelming the demuxer with rapid seek requests.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_39\n\nLANGUAGE: c\nCODE:\n```\nstatic void execute_seek (gint64 desired_position, CustomData *data) {\n  gint64 diff;\n\n  if (desired_position == GST_CLOCK_TIME_NONE)\n    return;\n\n  diff = gst_util_get_timestamp () - data->last_seek_time;\n\n  if (GST_CLOCK_TIME_IS_VALID (data->last_seek_time) && diff < SEEK_MIN_DELAY) {\n    /* The previous seek was too close, delay this one */\n    GSource *timeout_source;\n\n    if (data->desired_position == GST_CLOCK_TIME_NONE) {\n      /* There was no previous seek scheduled. Setup a timer for some time in the future */\n      timeout_source = g_timeout_source_new ((SEEK_MIN_DELAY - diff) / GST_MSECOND);\n      g_source_set_callback (timeout_source, (GSourceFunc)delayed_seek_cb, data, NULL);\n      g_source_attach (timeout_source, data->context);\n      g_source_unref (timeout_source);\n    }\n    /* Update the desired seek position. If multiple requests are received before it is time\n     * to perform a seek, only the last one is remembered. */\n    data->desired_position = desired_position;\n    GST_DEBUG (\"Throttling seek to %\" GST_TIME_FORMAT \", will be in %\" GST_TIME_FORMAT,\n        GST_TIME_ARGS (desired_position), GST_TIME_ARGS (SEEK_MIN_DELAY - diff));\n  } else {\n    /* Perform the seek now */\n    GST_DEBUG (\"Seeking to %\" GST_TIME_FORMAT, GST_TIME_ARGS (desired_position));\n    data->last_seek_time = gst_util_get_timestamp ();\n    gst_element_seek_simple (data->pipeline, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT, desired_position);\n    data->desired_position = GST_CLOCK_TIME_NONE;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Gapless Playback Feature in GStreamer Playbin\nDESCRIPTION: Explains how to implement gapless playback using the 'about-to-finish' signal in playbin. The application should set a new URI in the callback to ensure seamless transition to the next media.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/playbin.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Gapless playback feature\n\nplaybin has an `about-to-finish` signal. The application should\nconfigure a new uri (and optional suburi) in the callback. When the\ncurrent media finishes, this new media will be played next.\n```\n\n----------------------------------------\n\nTITLE: Defining Macros for JNI Field Assignment with GStreamer (C)\nDESCRIPTION: This macro, SET_CUSTOM_DATA, simplifies setting a JNI object's field from native code, specifically assigning a C data pointer to a Java object's long field. It casts data appropriately for passing between Java and native code, ensuring proper storage of native handles. The macro depends on a variable 'env' of JNIEnv* type, an object instance 'thiz', and a pre-obtained fieldID for the target Java field; it expects the project to include JNI headers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n# define SET_CUSTOM_DATA(env, thiz, fieldID, data) (*env)->SetLongField (env, thiz, fieldID, (jlong)(jint)data)\n```\n\n----------------------------------------\n\nTITLE: Refresh UI with GStreamer Position/Duration in C\nDESCRIPTION: Implements the `refresh_ui` function, designed to be called periodically (e.g., from a timer). It checks if the GStreamer pipeline exists and is in a PAUSED or PLAYING state. If so, it queries the pipeline's current position and duration (caching the duration if not already known) using `gst_element_query_position` and `gst_element_query_duration`. It then calls `set_current_ui_position` to update the Android UI, converting GStreamer's nanosecond values to milliseconds for Java.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n/* If we have pipeline and it is running, query the current position and clip duration and inform\n * the application */\nstatic gboolean refresh_ui (CustomData *data) {\n  gint64 current = -1;\n  gint64 position;\n\n  /* We do not want to update anything unless we have a working pipeline in the PAUSED or PLAYING state */\n  if (!data || !data->pipeline || data->state < GST_STATE_PAUSED)\n    return TRUE;\n\n  /* If we didn't know it yet, query the stream duration */\n  if (!GST_CLOCK_TIME_IS_VALID (data->duration)) {\n    if (!gst_element_query_duration (data->pipeline, GST_FORMAT_TIME, data->duration)) {\n      GST_WARNING (\"Could not query current duration\");\n    }\n  }\n\n  if (gst_element_query_position (data->pipeline, GST_FORMAT_TIME, &position)) {\n    /* Java expects these values in milliseconds, and GStreamer provides nanoseconds */\n    set_current_ui_position (position / GST_MSECOND, data->duration / GST_MSECOND, data);\n  }\n  return TRUE;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Control Binding\nDESCRIPTION: Attaches a GstControlSource to a GObject property using a direct control binding.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/dparams.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ngst_object_add_control_binding (object, gst_direct_control_binding_new (object, \"prop1\", csource));\n```\n\n----------------------------------------\n\nTITLE: Using gst_pad_get_peer Function in GStreamer C\nDESCRIPTION: Demonstrates an alternative method to access a peer pad using the gst_pad_get_peer function, which handles locking internally.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/MT-refcounting.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\npeer = gst_pad_get_peer (pad);\nif (peer) {\n  ... use peer ...\n\n  gst_object_unref (GST_OBJECT (peer));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining audio/x-raw Media Type Properties in GStreamer\nDESCRIPTION: This snippet lists the mandatory properties for the audio/x-raw media type in GStreamer. It includes format, rate, channels, channel-mask, and layout properties with their respective types and descriptions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-audio-raw.md#2025-04-23_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n**audio/x-raw**\n\n - **format**, `G_TYPE_STRING`: Mandatory. The format of the audio samples, see\n   the Formats section for a list of valid sample formats.\n\n - **rate**, `G_TYPE_INT`: Mandatory. The samplerate of the audio\n\n - **channels**, `G_TYPE_INT`: Mandatory. The number of channels\n\n - **channel-mask**, `GST_TYPE_BITMASK`: Mandatory for more than 2 channels\n   Bitmask of channel positions present. May be omitted for mono and\n   stereo. May be set to 0 to denote that the channels are unpositioned.\n\n - **layout**, `G_TYPE_STRING`: Mandatory. The layout of channels within a\n   buffer. Possible values are \"interleaved\" (for LRLRLRLR) and\n   \"non-interleaved\" (LLLLRRRR)\n```\n\n----------------------------------------\n\nTITLE: Processing Media Tags\nDESCRIPTION: Extracts and processes metadata tags from the discovered media\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\ntags = gst_discoverer_info_get_tags (info);\nif (tags) {\n  g_print (\"Tags:\\n\");\n  gst_tag_list_foreach (tags, print_tag_foreach, GINT_TO_POINTER (1));\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Initialization in Python\nDESCRIPTION: Initializes the required GStreamer components for the pipeline in Python.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Initialize GStreamer\nif not Gst.is_initialized():\n    Gst.init(None)\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending Seek Events in GStreamer for Playback Rate Control\nDESCRIPTION: This function creates and sends a seek event to change the playback rate. It first obtains the current position and then creates an appropriate seek event based on whether playback is forward or backward.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/playback-speed.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* Send seek event to change rate */\nstatic void send_seek_event (CustomData *data) {\n  gint64 position;\n  GstEvent *seek_event;\n\n  /* Obtain the current position, needed for the seek event */\n  if (!gst_element_query_position (data->pipeline, GST_FORMAT_TIME, &position)) {\n    g_printerr (\"Unable to retrieve current position.\\n\");\n    return;\n  }\n```\n\n----------------------------------------\n\nTITLE: Playing Video and Audio from MPEG Movie with GStreamer\nDESCRIPTION: Shows how to play both video and audio portions of an MPEG movie using GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=movie.mpg ! dvddemux name=demuxer  \\\n\\\ndemuxer. ! queue ! mpegvideoparse ! mpeg2dec ! videoconvert ! sdlvideosink \\\ndemuxer. ! queue ! mpegaudioparse ! mpg123audiodec ! audioconvert ! audioresample ! pulsesink\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider Position Change Callback\nDESCRIPTION: Callback function that handles user interactions with the slider. When the user changes the slider position, it performs a seek operation in the GStreamer pipeline to the corresponding time position.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n/* This function is called when the slider changes its position. We perform a seek to the\n * new position here. */\nstatic void slider_cb (GtkRange *range, CustomData *data) {\n  gdouble value = gtk_range_get_value (GTK_RANGE (data->slider));\n  gst_element_seek_simple (data->playbin, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT,\n      (gint64)(value * GST_SECOND));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Surface Finalization in GStreamer JNI Implementation\nDESCRIPTION: Handles cleanup of native window resources when the surface is destroyed. It resets the overlay window handle, sets the pipeline to READY state, and releases the native window.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_30\n\nLANGUAGE: c\nCODE:\n```\nstatic void gst_native_surface_finalize (JNIEnv *env, jobject thiz) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  GST_DEBUG (\"Releasing Native Window %p\", data->native_window);\n\n  if (data->pipeline) {\n    gst_x_overlay_set_window_handle (GST_X_OVERLAY (data->pipeline), (guintptr)NULL);\n    gst_element_set_state (data->pipeline, GST_STATE_READY);\n  }\n\n  ANativeWindow_release (data->native_window);\n  data->native_window = NULL;\n  data->initialized = FALSE;\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Playback Rate and Direction in GStreamer\nDESCRIPTION: This code handles keyboard commands to modify playback speed and direction. It uses 'S' and 's' to double or halve the playback rate, and 'd' to reverse playback direction, then sends seek events to apply these changes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/playback-speed.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ncase 's':\n  if (g_ascii_isupper (str[0])) {\n    data->rate *= 2.0;\n  } else {\n    data->rate /= 2.0;\n  }\n  send_seek_event (data);\n  break;\ncase 'd':\n  data->rate *= -1.0;\n  send_seek_event (data);\n  break;\n```\n\n----------------------------------------\n\nTITLE: Declaring Pad-Added Handler Function in C for GStreamer\nDESCRIPTION: Forward declaration of the pad-added signal handler function, which will be used to handle dynamic pad creation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/dynamic-pipelines.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic void pad_added_handler (GstElement *src, GstPad *pad, CustomData *data);\n```\n\n----------------------------------------\n\nTITLE: Capturing Video Snapshot with appsink in GStreamer\nDESCRIPTION: This C code demonstrates how to use appsink to capture a snapshot from a video stream in GStreamer. It sets up a pipeline, configures appsink, seeks to a specific position, and saves the captured frame as a PNG image.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/pipeline-manipulation.md#2025-04-23_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#include <gst/gst.h>\n#ifdef HAVE_GTK\n#include <gtk/gtk.h>\n#endif\n\n#include <stdlib.h>\n\n#define CAPS \"video/x-raw,format=RGB,width=160,pixel-aspect-ratio=1/1\"\n\nint\nmain (int argc, char *argv[])\n{\n  GstElement *pipeline, *sink;\n  gint width, height;\n  GstSample *sample;\n  gchar *descr;\n  GError *error = NULL;\n  gint64 duration, position;\n  GstStateChangeReturn ret;\n  gboolean res;\n  GstMapInfo map;\n\n  gst_init (&argc, &argv);\n\n  if (argc != 2) {\n    g_print (\"usage: %s <uri>\\n Writes snapshot.png in the current directory\\n\",\n        argv[0]);\n    exit (-1);\n  }\n\n  /* create a new pipeline */\n  descr =\n      g_strdup_printf (\"uridecodebin uri=%s ! videoconvert ! videoscale ! \"\n      \" appsink name=sink caps=\\\"\" CAPS \"\\\"\", argv[1]);\n  pipeline = gst_parse_launch (descr, &error);\n\n  if (error != NULL) {\n    g_print (\"could not construct pipeline: %s\\n\", error->message);\n    g_clear_error (&error);\n    exit (-1);\n  }\n\n  /* get sink */\n  sink = gst_bin_get_by_name (GST_BIN (pipeline), \"sink\");\n\n  /* set to PAUSED to make the first frame arrive in the sink */\n  ret = gst_element_set_state (pipeline, GST_STATE_PAUSED);\n  switch (ret) {\n    case GST_STATE_CHANGE_FAILURE:\n      g_print (\"failed to play the file\\n\");\n      exit (-1);\n    case GST_STATE_CHANGE_NO_PREROLL:\n      /* for live sources, we need to set the pipeline to PLAYING before we can\n       * receive a buffer. We don't do that yet */\n      g_print (\"live sources not supported yet\\n\");\n      exit (-1);\n    default:\n      break;\n  }\n  /* This can block for up to 5 seconds. If your machine is really overloaded,\n   * it might time out before the pipeline prerolled and we generate an error. A\n   * better way is to run a mainloop and catch errors there. */\n  ret = gst_element_get_state (pipeline, NULL, NULL, 5 * GST_SECOND);\n  if (ret == GST_STATE_CHANGE_FAILURE) {\n    g_print (\"failed to play the file\\n\");\n    exit (-1);\n  }\n\n  /* get the duration */\n  gst_element_query_duration (pipeline, GST_FORMAT_TIME, &duration);\n\n  if (duration != -1)\n    /* we have a duration, seek to 5% */\n    position = duration * 5 / 100;\n  else\n    /* no duration, seek to 1 second, this could EOS */\n    position = 1 * GST_SECOND;\n\n  /* seek to the position in the file. Most files have a black first frame so\n   * by seeking to somewhere else we have a bigger chance of getting something\n   * more interesting. An optimisation would be to detect black images and then\n   * seek a little more */\n  gst_element_seek_simple (pipeline, GST_FORMAT_TIME,\n      GST_SEEK_FLAG_KEY_UNIT | GST_SEEK_FLAG_FLUSH, position);\n\n  /* get the preroll buffer from appsink, this block untils appsink really\n   * prerolls */\n  g_signal_emit_by_name (sink, \"pull-preroll\", &sample, NULL);\n\n  /* if we have a buffer now, convert it to a pixbuf. It's possible that we\n   * don't have a buffer because we went EOS right away or had an error. */\n  if (sample) {\n    GstBuffer *buffer;\n    GstCaps *caps;\n    GstStructure *s;\n\n    /* get the snapshot buffer format now. We set the caps on the appsink so\n     * that it can only be an rgb buffer. The only thing we have not specified\n     * on the caps is the height, which is dependant on the pixel-aspect-ratio\n     * of the source material */\n    caps = gst_sample_get_caps (sample);\n    if (!caps) {\n      g_print (\"could not get snapshot format\\n\");\n      exit (-1);\n    }\n    s = gst_caps_get_structure (caps, 0);\n\n    /* we need to get the final caps on the buffer to get the size */\n    res = gst_structure_get_int (s, \"width\", &width);\n    res |= gst_structure_get_int (s, \"height\", &height);\n    if (!res) {\n      g_print (\"could not get snapshot dimension\\n\");\n      exit (-1);\n    }\n\n    /* create pixmap from buffer and save, gstreamer video buffers have a stride\n     * that is rounded up to the nearest multiple of 4 */\n    buffer = gst_sample_get_buffer (sample);\n    /* Mapping a buffer can fail (non-readable) */\n    if (gst_buffer_map (buffer, &map, GST_MAP_READ)) {\n#ifdef HAVE_GTK\n      pixbuf = gdk_pixbuf_new_from_data (map.data,\n          GDK_COLORSPACE_RGB, FALSE, 8, width, height,\n          GST_ROUND_UP_4 (width * 3), NULL, NULL);\n\n      /* save the pixbuf */\n      gdk_pixbuf_save (pixbuf, \"snapshot.png\", \"png\", &error, NULL);\n#endif\n      gst_buffer_unmap (buffer, &map);\n    }\n    gst_sample_unref (sample);\n  } else {\n    g_print (\"could not make snapshot\\n\");\n  }\n\n  /* cleanup and exit */\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (sink);\n  gst_object_unref (pipeline);\n\n  exit (0);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving GStreamer Compiler and Linker Flags using pkg-config\nDESCRIPTION: Uses the `pkg-config` utility to retrieve the necessary compiler (`--cflags`) and linker (`--libs`) flags for the GStreamer core library (`gstreamer-1.0`). These flags should be included in the `gcc` command when compiling applications that use GStreamer. Additional GStreamer libraries (e.g., `gstreamer-video-1.0`) can be added after `gstreamer-1.0`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-linux.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npkg-config --cflags --libs gstreamer-1.0\n```\n\n----------------------------------------\n\nTITLE: Defining and Accessing GObject Boolean Property in GStreamer Element - C\nDESCRIPTION: This snippet shows how to declare and implement a boolean property (e.g., \\\"silent\\\") in a custom GStreamer element using GObject in C. It covers defining the property in an enum, setting up the class install property function, and implementing the set/get property callbacks. Dependencies include GLib, GObject, and GStreamer headers. Key parameters include the property ID and value, and the get/set routines are responsible for synchronizing the property with the internal instance variable. The example assumes that default values are manually assigned in the element's _init function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/args.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* properties */\nenum {\n  PROP_0,\n  PROP_SILENT\n  /* FILL ME */\n};\n\nstatic void gst_my_filter_set_property  (GObject      *object,\n                         guint         prop_id,\n                         const GValue *value,\n                         GParamSpec   *pspec);\nstatic void gst_my_filter_get_property  (GObject      *object,\n                         guint         prop_id,\n                         GValue       *value,\n                         GParamSpec   *pspec);\n\nstatic void\ngst_my_filter_class_init (GstMyFilterClass *klass)\n{\n  GObjectClass *object_class = G_OBJECT_CLASS (klass);\n\n  /* define virtual function pointers */\n  object_class->set_property = gst_my_filter_set_property;\n  object_class->get_property = gst_my_filter_get_property;\n\n  /* define properties */\n  g_object_class_install_property (object_class, PROP_SILENT,\n    g_param_spec_boolean (\"silent\", \"Silent\",\n              \"Whether to be very verbose or not\",\n              FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));\n}\n\nstatic void\ngst_my_filter_set_property (GObject      *object,\n                guint         prop_id,\n                const GValue *value,\n                GParamSpec   *pspec)\n{\n  GstMyFilter *filter = GST_MY_FILTER (object);\n\n  switch (prop_id) {\n    case PROP_SILENT:\n      filter->silent = g_value_get_boolean (value);\n      g_print (\"Silent argument was changed to %s\\n\",\n           filter->silent ? \"true\" : \"false\");\n      break;\n    default:\n      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);\n      break;\n  }\n}\n\nstatic void\ngst_my_filter_get_property (GObject    *object,\n                guint       prop_id,\n                GValue     *value,\n                GParamSpec *pspec)\n{\n  GstMyFilter *filter = GST_MY_FILTER (object);\n\n  switch (prop_id) {\n    case PROP_SILENT:\n      g_value_set_boolean (value, filter->silent);\n      break;\n    default:\n      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);\n      break;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting GST_DEBUG for Category-Level GStreamer Debugging - Bash\nDESCRIPTION: Sets the GST_DEBUG environment variable in Bash to specify categories and debug levels for GStreamer. This variable controls which debug messages are shown when running GStreamer-related processes. Category-level assignments can help isolate and diagnose specific pipeline, plugin, or category issues. Requires GStreamer installed; input format is category:level, comma-separated. Levels: 1=ERROR, 2=WARN, 3=FIXME, 4=INFO, 5=DEBUG, 6=LOG, 7=TRACE, 9=MEMDUMP.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nGST_DEBUG=totem:4,typefind:5\n```\n\n----------------------------------------\n\nTITLE: Implementing Progressive Streaming with Local Storage in GStreamer\nDESCRIPTION: This code demonstrates how to enable progressive downloading and local storage of streamed media using GStreamer. It sets up a pipeline with playbin, enables the DOWNLOAD flag, handles buffering messages, and displays download progress. The code also shows how to query and display buffering information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/progressive-streaming.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <gst/gst.h>\n#include <string.h>\n\n#define GRAPH_LENGTH 78\n\n/* playbin flags */\ntypedef enum {\n  GST_PLAY_FLAG_DOWNLOAD      = (1 << 7) /* Enable progressive download (on selected formats) */\n} GstPlayFlags;\n\ntypedef struct _CustomData {\n  gboolean is_live;\n  GstElement *pipeline;\n  GMainLoop *loop;\n  gint buffering_level;\n} CustomData;\n\nstatic void got_location (GstObject *gstobject, GstObject *prop_object, GParamSpec *prop, gpointer data) {\n  gchar *location;\n  g_object_get (G_OBJECT (prop_object), \"temp-location\", &location, NULL);\n  g_print (\"Temporary file: %s\\n\", location);\n  g_free (location);\n  /* Uncomment this line to keep the temporary file after the program exits */\n  /* g_object_set (G_OBJECT (prop_object), \"temp-remove\", FALSE, NULL); */\n}\n\nstatic void cb_message (GstBus *bus, GstMessage *msg, CustomData *data) {\n\n  switch (GST_MESSAGE_TYPE (msg)) {\n    case GST_MESSAGE_ERROR: {\n      GError *err;\n      gchar *debug;\n\n      gst_message_parse_error (msg, &err, &debug);\n      g_print (\"Error: %s\\n\", err->message);\n      g_error_free (err);\n      g_free (debug);\n\n      gst_element_set_state (data->pipeline, GST_STATE_READY);\n      g_main_loop_quit (data->loop);\n      break;\n    }\n    case GST_MESSAGE_EOS:\n      /* end-of-stream */\n      gst_element_set_state (data->pipeline, GST_STATE_READY);\n      g_main_loop_quit (data->loop);\n      break;\n    case GST_MESSAGE_BUFFERING:\n      /* If the stream is live, we do not care about buffering. */\n      if (data->is_live) break;\n\n      gst_message_parse_buffering (msg, &data->buffering_level);\n\n      /* Wait until buffering is complete before start/resume playing */\n      if (data->buffering_level < 100)\n        gst_element_set_state (data->pipeline, GST_STATE_PAUSED);\n      else\n        gst_element_set_state (data->pipeline, GST_STATE_PLAYING);\n      break;\n    case GST_MESSAGE_CLOCK_LOST:\n      /* Get a new clock */\n      gst_element_set_state (data->pipeline, GST_STATE_PAUSED);\n      gst_element_set_state (data->pipeline, GST_STATE_PLAYING);\n      break;\n    default:\n      /* Unhandled message */\n      break;\n    }\n}\n\nstatic gboolean refresh_ui (CustomData *data) {\n  GstQuery *query;\n  gboolean result;\n\n  query = gst_query_new_buffering (GST_FORMAT_PERCENT);\n  result = gst_element_query (data->pipeline, query);\n  if (result) {\n    gint n_ranges, range, i;\n    gchar graph[GRAPH_LENGTH + 1];\n    gint64 position = 0, duration = 0;\n\n    memset (graph, ' ', GRAPH_LENGTH);\n    graph[GRAPH_LENGTH] = '\\0';\n\n    n_ranges = gst_query_get_n_buffering_ranges (query);\n    for (range = 0; range < n_ranges; range++) {\n      gint64 start, stop;\n      gst_query_parse_nth_buffering_range (query, range, &start, &stop);\n      start = start * GRAPH_LENGTH / (stop - start);\n      stop = stop * GRAPH_LENGTH / (stop - start);\n      for (i = (gint)start; i < stop; i++)\n        graph [i] = '-';\n    }\n    if (gst_element_query_position (data->pipeline, GST_FORMAT_TIME, &position) &&\n        GST_CLOCK_TIME_IS_VALID (position) &&\n        gst_element_query_duration (data->pipeline, GST_FORMAT_TIME, &duration) &&\n        GST_CLOCK_TIME_IS_VALID (duration)) {\n      i = (gint)(GRAPH_LENGTH * (double)position / (double)(duration + 1));\n      graph [i] = data->buffering_level < 100 ? 'X' : '>';\n    }\n    g_print (\"[%s]\", graph);\n    if (data->buffering_level < 100) {\n      g_print (\" Buffering: %3d%%\", data->buffering_level);\n    } else {\n      g_print (\"                \");\n    }\n    g_print (\"\\r\");\n  }\n\n  return TRUE;\n\n}\n\nint main(int argc, char *argv[]) {\n  GstElement *pipeline;\n  GstBus *bus;\n  GstStateChangeReturn ret;\n  GMainLoop *main_loop;\n  CustomData data;\n  guint flags;\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Initialize our data structure */\n  memset (&data, 0, sizeof (data));\n  data.buffering_level = 100;\n\n  /* Build the pipeline */\n  pipeline = gst_parse_launch (\"playbin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\", NULL);\n  bus = gst_element_get_bus (pipeline);\n\n  /* Set the download flag */\n  g_object_get (pipeline, \"flags\", &flags, NULL);\n  flags |= GST_PLAY_FLAG_DOWNLOAD;\n  g_object_set (pipeline, \"flags\", flags, NULL);\n\n  /* Uncomment this line to limit the amount of downloaded data */\n  /* g_object_set (pipeline, \"ring-buffer-max-size\", (guint64)4000000, NULL); */\n\n  /* Start playing */\n  ret = gst_element_set_state (pipeline, GST_STATE_PLAYING);\n  if (ret == GST_STATE_CHANGE_FAILURE) {\n    g_printerr (\"Unable to set the pipeline to the playing state.\\n\");\n    gst_object_unref (pipeline);\n    return -1;\n  } else if (ret == GST_STATE_CHANGE_NO_PREROLL) {\n    data.is_live = TRUE;\n  }\n\n  main_loop = g_main_loop_new (NULL, FALSE);\n  data.loop = main_loop;\n  data.pipeline = pipeline;\n\n  gst_bus_add_signal_watch (bus);\n  g_signal_connect (bus, \"message\", G_CALLBACK (cb_message), &data);\n  g_signal_connect (pipeline, \"deep-notify::temp-location\", G_CALLBACK (got_location), NULL);\n\n  /* Register a function that GLib will call every second */\n  g_timeout_add_seconds (1, (GSourceFunc)refresh_ui, &data);\n\n  g_main_loop_run (main_loop);\n\n  /* Free resources */\n  g_main_loop_unref (main_loop);\n  gst_object_unref (bus);\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (pipeline);\n  g_print (\"\\n\");\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Real-Time Thread Pool in GStreamer\nDESCRIPTION: Implementation of a custom GstTaskPool subclass that creates real-time threads using POSIX pthreads with SCHED_RR scheduling policy. This code demonstrates how to create high-priority threads for GStreamer streaming operations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/threads.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <pthread.h>\n\ntypedef struct\n{\n  pthread_t thread;\n} TestRTId;\n\nG_DEFINE_TYPE (TestRTPool, test_rt_pool, GST_TYPE_TASK_POOL);\n\nstatic void\ndefault_prepare (GstTaskPool * pool, GError ** error)\n{\n  /* we don't do anything here. We could construct a pool of threads here that\n   * we could reuse later but we don't */\n}\n\nstatic void\ndefault_cleanup (GstTaskPool * pool)\n{\n}\n\nstatic gpointer\ndefault_push (GstTaskPool * pool, GstTaskPoolFunction func, gpointer data,\n    GError ** error)\n{\n  TestRTId *tid;\n  gint res;\n  pthread_attr_t attr;\n  struct sched_param param;\n\n  tid = g_new0 (TestRTId, 1);\n\n  pthread_attr_init (&attr);\n  if ((res = pthread_attr_setschedpolicy (&attr, SCHED_RR)) != 0)\n    g_warning (\"setschedpolicy: failure: %p\", g_strerror (res));\n\n  param.sched_priority = 50;\n  if ((res = pthread_attr_setschedparam (&attr, &param)) != 0)\n    g_warning (\"setschedparam: failure: %p\", g_strerror (res));\n\n  if ((res = pthread_attr_setinheritsched (&attr, PTHREAD_EXPLICIT_SCHED)) != 0)\n    g_warning (\"setinheritsched: failure: %p\", g_strerror (res));\n\n  res = pthread_create (&tid->thread, &attr, (void *(*)(void *)) func, data);\n\n  if (res != 0) {\n    g_set_error (error, G_THREAD_ERROR, G_THREAD_ERROR_AGAIN,\n        \"Error creating thread: %s\", g_strerror (res));\n    g_free (tid);\n    tid = NULL;\n  }\n\n  return tid;\n}\n\nstatic void\ndefault_join (GstTaskPool * pool, gpointer id)\n{\n  TestRTId *tid = (TestRTId *) id;\n\n  pthread_join (tid->thread, NULL);\n\n  g_free (tid);\n}\n\nstatic void\ntest_rt_pool_class_init (TestRTPoolClass * klass)\n{\n  GstTaskPoolClass *gsttaskpool_class;\n\n  gsttaskpool_class = (GstTaskPoolClass *) klass;\n\n  gsttaskpool_class->prepare = default_prepare;\n  gsttaskpool_class->cleanup = default_cleanup;\n  gsttaskpool_class->push = default_push;\n  gsttaskpool_class->join = default_join;\n}\n\nstatic void\ntest_rt_pool_init (TestRTPool * pool)\n{\n}\n\nGstTaskPool *\ntest_rt_pool_new (void)\n{\n  GstTaskPool *pool;\n\n  pool = g_object_new (TEST_TYPE_RT_POOL, NULL);\n\n  return pool;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Periodic UI Refresh\nDESCRIPTION: Registering a function with GLib that will be called every second to update the user interface elements, particularly to refresh the position slider to reflect the current playback position.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n/* Register a function that GLib will call every second */\ng_timeout_add_seconds (1, (GSourceFunc)refresh_ui, &data);\n\n```\n\n----------------------------------------\n\nTITLE: Attaching and Detaching Native Threads to JNI Environment (C)\nDESCRIPTION: Implements static functions for safely attaching and detaching threads to the JVM using JNI. 'attach_current_thread' handles thread registration with provided attach arguments; 'detach_current_thread' unregisters. Error checks ensure proper thread state, and obtained JNIEnv pointers are returned for further native-Java interactions. These utility functions depend on the global JavaVM pointer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nstatic JNIEnv *attach_current_thread (void) {\n  JNIEnv *env;\n  JavaVMAttachArgs args;\n\n  GST_DEBUG (\"Attaching thread %p\", g_thread_self ());\n  args.version = JNI_VERSION_1_4;\n  args.name = NULL;\n  args.group = NULL;\n\n  if ((*java_vm)->AttachCurrentThread (java_vm, &env, &args) < 0) {\n    GST_ERROR (\"Failed to attach current thread\");\n    return NULL;\n  }\n\n  return env;\n}\n\nstatic void detach_current_thread (void *env) {\n  GST_DEBUG (\"Detaching thread %p\", g_thread_self ());\n  (*java_vm)->DetachCurrentThread (java_vm);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Overlay Consumer in C for GStreamer Sink\nDESCRIPTION: This code snippet demonstrates how a video sink that supports texture scaling would consume and render video overlay compositions. It iterates through composition rectangles, handling both Pango markup and pixel data, and positions the overlays on the video surface.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/subtitle-overlays.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ngst_foo_sink_render () {\n  /* assume only one for now */\n  if video_buffer has composition:\n    composition = video_buffer.get_composition()\n\n    for each rectangle in composition:\n      if rectangle.source_data_type == PANGO_MARKUP\n        actor = text_from_pango_markup (rectangle.get_source_data())\n      else\n        pixels = rectangle.get_pixels_unscaled (FORMAT_RGBA, ...)\n        actor = texture_from_rgba (pixels, ...)\n\n      .. position + scale on top of video surface ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Handling Keyboard Input for Playback Control in GStreamer\nDESCRIPTION: This snippet shows how to implement a keyboard handler function that toggles between play and pause states in a GStreamer pipeline. It processes user input to control playback state.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/playback-speed.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Process keyboard input */\nstatic gboolean handle_keyboard (GIOChannel *source, GIOCondition cond, CustomData *data) {\n  gchar *str = NULL;\n\n  if (g_io_channel_read_line (source, &str, NULL, NULL, NULL) != G_IO_STATUS_NORMAL) {\n    return TRUE;\n  }\n\n  switch (g_ascii_tolower (str[0])) {\n  case 'p':\n    data->playing = !data->playing;\n    gst_element_set_state (data->pipeline, data->playing ? GST_STATE_PLAYING : GST_STATE_PAUSED);\n    g_print (\"Setting state to %s\\n\", data->playing ? \"PLAYING\" : \"PAUSE\");\n    break;\n```\n\n----------------------------------------\n\nTITLE: Launching uridecodebin playback with GStreamer via Bash\nDESCRIPTION: This bash command uses gst-launch-1.0 to play a remote video URI using uridecodebin, converting it for video output. Dependencies include the GStreamer runtime, and all referenced elements must be available in the installation. The command expects a URL as the input (set in the uri property) and outputs the decoded video to autovideosink; use '-v' for negotiation details.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 uridecodebin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Setting Target on a GhostPad in C\nDESCRIPTION: This function sets or changes the target of a GhostPad. It can be used on both untargeted and targeted GhostPads, and handles the necessary unlinking and relinking operations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstghostpad.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ngst_ghost_pad_set_target (char *name, GstPad *newtarget)\n```\n\n----------------------------------------\n\nTITLE: Querying Video Buffer Pools with ALLOCATION (GStreamer, C)\nDESCRIPTION: Demonstrates querying and configuring a GstBufferPool based on negotiated caps using the ALLOCATION query mechanism in GStreamer. Relies on gst/video/video.h, gst/video/gstvideopool.h, and related headers. Key parameters include caps (negotiated capabilities), pool (allocated buffer pool), and buffer pool configuration. The code finds a peer-provided pool or creates one, sets buffer pool options, parameters (caps, size, min, max), and activates the pool, with optional GST_BUFFER_POOL_OPTION_VIDEO_META for video meta-data. The input and output revolve around GstBufferPool and its associated configuration for video buffers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/video/video.h>\n#include <gst/video/gstvideometa.h>\n#include <gst/video/gstvideopool.h>\n\n  GstCaps *caps;\n  GstQuery *query;\n  GstStructure *structure;\n  GstBufferPool *pool;\n  GstStructure *config;\n  guint size, min, max;\n\n[...]\n\n  /* find a pool for the negotiated caps now */\n  query = gst_query_new_allocation (caps, TRUE);\n\n  if (!gst_pad_peer_query (scope->srcpad, query)) {\n    /* query failed, not a problem, we use the query defaults */\n  }\n\n  if (gst_query_get_n_allocation_pools (query) > 0) {\n    /* we got configuration from our peer, parse them */\n    gst_query_parse_nth_allocation_pool (query, 0, &pool, &size, &min, &max);\n  } else {\n    pool = NULL;\n    size = 0;\n    min = max = 0;\n  }\n\n  if (pool == NULL) {\n    /* we did not get a pool, make one ourselves then */\n    pool = gst_video_buffer_pool_new ();\n  }\n\n  config = gst_buffer_pool_get_config (pool);\n  gst_buffer_pool_config_add_option (config, GST_BUFFER_POOL_OPTION_VIDEO_META);\n  gst_buffer_pool_config_set_params (config, caps, size, min, max);\n  gst_buffer_pool_set_config (pool, config);\n\n  /* and activate */\n  gst_buffer_pool_set_active (pool, TRUE);\n\n[...]\n\n```\n\n----------------------------------------\n\nTITLE: Define CustomData Structure in C\nDESCRIPTION: Defines the `CustomData` structure to encapsulate all necessary information for managing the GStreamer pipeline and interacting with the Android application via JNI. It holds references to the Java application object, GStreamer elements (pipeline), GLib main loop components, native window, pipeline state, duration, seek parameters, and live stream status.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct _CustomData {\n  jobject app;                  /* Application instance, used to call its methods. A global reference is kept. */\n  GstElement *pipeline;         /* The running pipeline */\n  GMainContext *context;        /* GLib context used to run the main loop */\n  GMainLoop *main_loop;         /* GLib main loop */\n  gboolean initialized;         /* To avoid informing the UI multiple times about the initialization */\n  ANativeWindow *native_window; /* The Android native window where video will be rendered */\n  GstState state;               /* Current pipeline state */\n  GstState target_state;        /* Desired pipeline state, to be set once buffering is complete */\n  gint64 duration;              /* Cached clip duration */\n  gint64 desired_position;      /* Position to seek to, once the pipeline is running */\n  GstClockTime last_seek_time;  /* For seeking overflow prevention (throttling) */\n  gboolean is_live;             /* Live streams do not use buffering */\n} CustomData;\n```\n\n----------------------------------------\n\nTITLE: Calculating Running-Time in GStreamer\nDESCRIPTION: This formula defines the running-time in GStreamer. It is calculated as the difference between the current absolute-time (obtained from the pipeline's `GstClock`) and the base-time (a snapshot of the absolute-time taken when the pipeline entered the PLAYING state). This running-time represents the total time spent in the PLAYING state.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/clocks.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrunning-time = absolute-time - base-time\n```\n\n----------------------------------------\n\nTITLE: Execute or Schedule GStreamer Seek Operation in C\nDESCRIPTION: Implements the `execute_seek` function, which handles requests to seek the GStreamer pipeline to a `desired_position`. It checks if the time elapsed since the `last_seek_time` is less than `SEEK_MIN_DELAY`. If it's too soon, it schedules the seek for later using a GLib timeout source (`g_timeout_source_new`) that calls `delayed_seek_cb`. If enough time has passed, it performs the seek immediately using `gst_element_seek_simple` with FLUSH and KEY_UNIT flags, updates `last_seek_time`, and clears the `desired_position`. This throttles seek requests to prevent issues.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_18\n\nLANGUAGE: c\nCODE:\n```\n/* Forward declaration for the delayed seek callback */\nstatic gboolean delayed_seek_cb (CustomData *data);\n\n/* Perform seek, if we are not too close to the previous seek. Otherwise, schedule the seek for\n * some time in the future. */\nstatic void execute_seek (gint64 desired_position, CustomData *data) {\n  gint64 diff;\n\n  if (desired_position == GST_CLOCK_TIME_NONE)\n    return;\n\n  diff = gst_util_get_timestamp () - data->last_seek_time;\n\n  if (GST_CLOCK_TIME_IS_VALID (data->last_seek_time) && diff < SEEK_MIN_DELAY) {\n    /* The previous seek was too close, delay this one */\n    GSource *timeout_source;\n\n    if (data->desired_position == GST_CLOCK_TIME_NONE) {\n      /* There was no previous seek scheduled. Setup a timer for some time in the future */\n      timeout_source = g_timeout_source_new ((SEEK_MIN_DELAY - diff) / GST_MSECOND);\n      g_source_set_callback (timeout_source, (GSourceFunc)delayed_seek_cb, data, NULL);\n      g_source_attach (timeout_source, data->context);\n      g_source_unref (timeout_source);\n    }\n    /* Update the desired seek position. If multiple requests are received before it is time\n     * to perform a seek, only the last one is remembered. */\n    data->desired_position = desired_position;\n    GST_DEBUG (\"Throttling seek to %\" GST_TIME_FORMAT \", will be in %\" GST_TIME_FORMAT,\n        GST_TIME_ARGS (desired_position), GST_TIME_ARGS (SEEK_MIN_DELAY - diff));\n  } else {\n    /* Perform the seek now */\n    GST_DEBUG (\"Seeking to %\" GST_TIME_FORMAT, GST_TIME_ARGS (desired_position));\n    data->last_seek_time = gst_util_get_timestamp ();\n    gst_element_seek_simple (data->pipeline, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT, desired_position);\n    data->desired_position = GST_CLOCK_TIME_NONE;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pipeline: Video Test Source with Queue to Custom Video Sink\nDESCRIPTION: This pipeline introduces a queue element between the video test source and a custom video sink. It illustrates how buffer allocation and management work with a limited number of buffers, and how elements can be rate-limited based on buffer availability.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/bufferpool.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nvideotestsrc ! queue ! myvideosink\n```\n\n----------------------------------------\n\nTITLE: Handling GStreamer State Change Messages in C\nDESCRIPTION: Processes state change messages from the pipeline, demonstrating how to track and print state transitions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/dynamic-pipelines.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\ncase GST_MESSAGE_STATE_CHANGED:\n  if (GST_MESSAGE_SRC (msg) == GST_OBJECT (data.pipeline)) {\n    GstState old_state, new_state, pending_state;\n    gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n    g_print (\"Pipeline state changed from %s to %s:\\n\",\n        gst_element_state_get_name (old_state), gst_element_state_get_name (new_state));\n  }\n  break;\n```\n\n----------------------------------------\n\nTITLE: Handling State Changes in GStreamer Pipeline\nDESCRIPTION: Callback function that processes state change messages from the GStreamer bus. It updates the UI with the new state and performs necessary operations when transitioning to the PAUSED state, such as checking media size and executing pending seeks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_11\n\nLANGUAGE: C\nCODE:\n```\n/* Notify UI about pipeline state changes */\nstatic void state_changed_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self)\n{\n    GstState old_state, new_state, pending_state;\n    gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n    /* Only pay attention to messages coming from the pipeline, not its children */\n    if (GST_MESSAGE_SRC (msg) == GST_OBJECT (self->pipeline)) {\n        self->state = new_state;\n        gchar *message = g_strdup_printf(\"State changed to %s\", gst_element_state_get_name(new_state));\n        [self setUIMessage:message];\n        g_free (message);\n\n        if (old_state == GST_STATE_READY && new_state == GST_STATE_PAUSED)\n        {\n            check_media_size(self);\n\n            /* If there was a scheduled seek, perform it now that we have moved to the Paused state */\n            if (GST_CLOCK_TIME_IS_VALID (self->desired_position))\n                execute_seek (self->desired_position, self);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tracing Hooks in GStreamer Core Functions (C)\nDESCRIPTION: Shows how to wrap GStreamer core functions with tracing macros to enable hook-based tracing. This example wraps the gst_pad_push() function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nGstFlowReturn gst_pad_push (GstPad * pad, GstBuffer * buffer) {\n  GstFlowReturn res;\n\n  g_return_val_if_fail (GST_IS_PAD (pad), GST_FLOW_ERROR);\n  g_return_val_if_fail (GST_PAD_IS_SRC (pad), GST_FLOW_ERROR);\n  g_return_val_if_fail (GST_IS_BUFFER (buffer), GST_FLOW_ERROR);\n\n  GST_TRACER_PAD_PUSH_PRE (pad, buffer);\n  res = gst_pad_push_data (pad,\n      GST_PAD_PROBE_TYPE_BUFFER | GST_PAD_PROBE_TYPE_PUSH, buffer);\n  GST_TRACER_PAD_PUSH_POST (pad, res);\n  return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GStreamer DOT File Output Directory (Bash)\nDESCRIPTION: Sets the `GST_DEBUG_DUMP_DOT_DIR` environment variable to specify a directory where GStreamer should save `.dot` files representing the pipeline graph at each state change. This is useful for visualizing pipeline topology and negotiated capabilities. Unsetting the variable disables this feature.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/debugging-tools.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGST_DEBUG_DUMP_DOT_DIR\n```\n\n----------------------------------------\n\nTITLE: Playing AVI with External Subtitles using GStreamer\nDESCRIPTION: Demonstrates how to play an AVI movie with an external text subtitle stream using GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 textoverlay name=overlay ! videoconvert ! videoscale ! autovideosink \\\nfilesrc location=movie.avi ! decodebin3 !  videoconvert ! overlay.video_sink \\\nfilesrc location=movie.srt ! subparse ! overlay.text_sink\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer appsink Element\nDESCRIPTION: Setup of appsink element with signal emission enabling and new-sample callback connection. Configures the sink to receive audio data and process incoming samples.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/short-cutting-the-pipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* Configure appsink */\ng_object_set (data.app_sink, \"emit-signals\", TRUE, \"caps\", audio_caps, NULL);\ng_signal_connect (data.app_sink, \"new-sample\", G_CALLBACK (new_sample), &data);\ngst_caps_unref (audio_caps);\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring GStreamer Pipeline in Objective-C\nDESCRIPTION: Implements the app_function method to create and configure the GStreamer pipeline. Sets up the video sink, connects to bus signals for error and state change handling, and initializes the GLib main loop.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/video.md#2025-04-23_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\n-(void) app_function\n{\n    GstBus *bus;\n    GSource *bus_source;\n    GError *error = NULL;\n\n    GST_DEBUG (\"Creating pipeline\");\n\n    /* Create our own GLib Main Context and make it the default one */\n    context = g_main_context_new ();\n    g_main_context_push_thread_default(context);\n\n    /* Build pipeline */\n    pipeline = gst_parse_launch(\"videotestsrc ! warptv ! videoconvert ! autovideosink\", &error);\n    if (error) {\n        gchar *message = g_strdup_printf(\"Unable to build pipeline: %s\", error->message);\n        g_clear_error (&error);\n        [self setUIMessage:message];\n        g_free (message);\n        return;\n    }\n\n    /* Set the pipeline to READY, so it can already accept a window handle */\n    gst_element_set_state(pipeline, GST_STATE_READY);\n\n    video_sink = gst_bin_get_by_interface(GST_BIN(pipeline), GST_TYPE_VIDEO_OVERLAY);\n    if (!video_sink) {\n        GST_ERROR (\"Could not retrieve video sink\");\n        return;\n    }\n    gst_video_overlay_set_window_handle(GST_VIDEO_OVERLAY(video_sink), (guintptr) (id) ui_video_view);\n\n    /* Instruct the bus to emit signals for each received message, and connect to the interesting signals */\n    bus = gst_element_get_bus (pipeline);\n    bus_source = gst_bus_create_watch (bus);\n    g_source_set_callback (bus_source, (GSourceFunc) gst_bus_async_signal_func, NULL, NULL);\n    g_source_attach (bus_source, context);\n    g_source_unref (bus_source);\n    g_signal_connect (G_OBJECT (bus), \"message::error\", (GCallback)error_cb, (__bridge void *)self);\n    g_signal_connect (G_OBJECT (bus), \"message::state-changed\", (GCallback)state_changed_cb, (__bridge void *)self);\n    gst_object_unref (bus);\n\n    /* Create a GLib Main Loop and set it to run */\n    GST_DEBUG (\"Entering main loop...\");\n    main_loop = g_main_loop_new (context, FALSE);\n    [self check_initialization_complete];\n    g_main_loop_run (main_loop);\n    GST_DEBUG (\"Exited main loop\");\n    g_main_loop_unref (main_loop);\n    main_loop = NULL;\n\n    /* Free resources */\n    g_main_context_pop_thread_default(context);\n    g_main_context_unref (context);\n    gst_element_set_state (pipeline, GST_STATE_NULL);\n    gst_object_unref (pipeline);\n\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GStreamer Filter Sink Event Handler in C\nDESCRIPTION: This function (`gst_my_filter_sink_event`) implements the event handling logic for a GStreamer filter's sink pad. It uses a switch statement on the event type (`GST_EVENT_TYPE`) to handle specific events like `GST_EVENT_CAPS` (for format changes) and `GST_EVENT_EOS` (End-Of-Stream). For unhandled events, it calls the default pad event handler (`gst_pad_event_default`).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/chainfn.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean\ngst_my_filter_sink_event (GstPad    *pad,\n                  GstObject *parent,\n                  GstEvent  *event)\n{\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  switch (GST_EVENT_TYPE (event)) {\n    case GST_EVENT_CAPS:\n      /* we should handle the format here */\n      break;\n    case GST_EVENT_EOS:\n      /* end-of-stream, we should close down all stream leftovers here */\n      gst_my_filter_stop_processing (filter);\n      break;\n    default:\n      break;\n  }\n\n  return gst_pad_event_default (pad, parent, event);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Buffering in GStreamer iOS Media Player\nDESCRIPTION: This callback function handles buffering messages for network resilience. It pauses the pipeline during buffering and resumes playback when buffering is complete, updating the UI with the current buffering status.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_19\n\nLANGUAGE: Objective-C\nCODE:\n```\nstatic void buffering_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self) {\n    gint percent;\n\n    if (self->is_live)\n        return;\n\n    gst_message_parse_buffering (msg, &percent);\n    if (percent < 100 && self->target_state >= GST_STATE_PAUSED) {\n        gchar * message_string = g_strdup_printf (\"Buffering %d%%\", percent);\n        gst_element_set_state (self->pipeline, GST_STATE_PAUSED);\n        [self setUIMessage:message_string];\n        g_free (message_string);\n    } else if (self->target_state >= GST_STATE_PLAYING) {\n        gst_element_set_state (self->pipeline, GST_STATE_PLAYING);\n    } else if (self->target_state >= GST_STATE_PAUSED) {\n        [self setUIMessage:\"Buffering complete\"];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GStreamer Pipeline in C using gst_parse_launch\nDESCRIPTION: Demonstrates how to use gst_parse_launch() function in C to create and run a GStreamer pipeline. This program creates an MP3 playback pipeline, sets the input file, and handles pipeline messages.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/programs.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nint\nmain (int argc, char *argv[])\n{\n  GstElement *pipeline;\n  GstElement *filesrc;\n  GstMessage *msg;\n  GstBus *bus;\n  GError *error = NULL;\n\n  gst_init (&argc, &argv);\n\n  if (argc != 2) {\n    g_print (\"usage: %s <filename>\\n\", argv[0]);\n    return -1;\n  }\n\n  pipeline = gst_parse_launch (\"filesrc name=my_filesrc ! mad ! osssink\", &error);\n  if (!pipeline) {\n    g_print (\"Parse error: %s\\n\", error->message);\n    exit (1);\n  }\n\n  filesrc = gst_bin_get_by_name (GST_BIN (pipeline), \"my_filesrc\");\n  g_object_set (filesrc, \"location\", argv[1], NULL);\n  g_object_unref (filesrc);\n\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n\n  bus = gst_element_get_bus (pipeline);\n\n  /* wait until we either get an EOS or an ERROR message. Note that in a real\n   * program you would probably not use gst_bus_poll(), but rather set up an\n   * async signal watch on the bus and run a main loop and connect to the\n   * bus's signals to catch certain messages or all messages */\n  msg = gst_bus_poll (bus, GST_MESSAGE_EOS | GST_MESSAGE_ERROR, -1);\n\n  switch (GST_MESSAGE_TYPE (msg)) {\n    case GST_MESSAGE_EOS: {\n      g_print (\"EOS\\n\");\n      break;\n    }\n    case GST_MESSAGE_ERROR: {\n      GError *err = NULL; /* error to show to users                 */\n      gchar *dbg = NULL;  /* additional debug string for developers */\n\n      gst_message_parse_error (msg, &err, &dbg);\n      if (err) {\n        g_printerr (\"ERROR: %s\\n\", err->message);\n        g_error_free (err);\n      }\n      if (dbg) {\n        g_printerr (\"[Debug details: %s]\\n\", dbg);\n        g_free (dbg);\n      }\n    }\n    default:\n      g_printerr (\"Unexpected message of type %d\", GST_MESSAGE_TYPE (msg));\n      break;\n  }\n  gst_message_unref (msg);\n\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (pipeline);\n  gst_object_unref (bus);\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Rescaling video with videoscale in GStreamer via Bash\nDESCRIPTION: This pipeline uses uridecodebin to decode a remote video file, passes it through videoscale and sets explicit width/height, then converts and displays it. videoscale supports many YUV/RGB formats and is effective when output dimensions might vary. All listed elements and properties must be supported in the GStreamer installation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 uridecodebin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm ! videoscale ! video/x-raw,width=178,height=100 ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Allocating and Mapping GstMemory (GStreamer, C)\nDESCRIPTION: This C snippet demonstrates how to allocate a GstMemory object, map it for write access, fill it with a pattern, and then unmap it to release resources. It relies on the GStreamer core library and uses gst_allocator_alloc to obtain a new memory block, followed by gst_memory_map and gst_memory_unmap for safe access. The snippet expects GStreamer headers to be included and a valid GStreamer environment; it shows basic usage and does not implement custom allocators or memory types.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n[...]\n\n  GstMemory *mem;\n  GstMapInfo info;\n  gint i;\n\n  /* allocate 100 bytes */\n  mem = gst_allocator_alloc (NULL, 100, NULL);\n\n  /* get access to the memory in write mode */\n  gst_memory_map (mem, &info, GST_MAP_WRITE);\n\n  /* fill with pattern */\n  for (i = 0; i < info.size; i++)\n    info.data[i] = i;\n\n  /* release memory */\n  gst_memory_unmap (mem, &info);\n\n[...]\n\n```\n\n----------------------------------------\n\nTITLE: Creating Element Factories in GStreamer (C)\nDESCRIPTION: This snippet demonstrates how to create GStreamer element factories for audio source and sink, and then use these factories to instantiate actual elements. It also includes error handling and printing pad template information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-formats-and-pad-capabilities.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n/* Create the element factories */\nsource_factory = gst_element_factory_find (\"audiotestsrc\");\nsink_factory = gst_element_factory_find (\"autoaudiosink\");\nif (!source_factory || !sink_factory) {\n  g_printerr (\"Not all element factories could be created.\\n\");\n  return -1;\n}\n\n/* Print information about the pad templates of these factories */\nprint_pad_templates_information (source_factory);\nprint_pad_templates_information (sink_factory);\n\n/* Ask the factories to instantiate actual elements */\nsource = gst_element_factory_create (source_factory, \"source\");\nsink = gst_element_factory_create (sink_factory, \"sink\");\n```\n\n----------------------------------------\n\nTITLE: Illustrating Incremental Download Pipeline in GStreamer\nDESCRIPTION: This code snippet shows the structure of a GStreamer pipeline for incremental download. It demonstrates how httpsrc, buffer, and demux elements are connected, with the buffer element writing to a file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/buffering.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n+---------+     +---------+     +-------+\n| httpsrc |     | buffer  |     | demux |\n|        src - sink      src - sink     ....\n+---------+     +----|----+     +-------+\n                     V\n                    file\n```\n\n----------------------------------------\n\nTITLE: Linking GStreamer Elements in C\nDESCRIPTION: Demonstrates how to link GStreamer elements together using gst_element_link(). This function creates a connection between the source pad of one element and the sink pad of another.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_17\n\nLANGUAGE: C\nCODE:\n```\ngst_element_link(source, sink);\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Balance Control with GstColorBalance in C\nDESCRIPTION: A complete application that demonstrates how to implement color balance controls using GStreamer. The program creates a playbin pipeline and allows users to adjust contrast, brightness, hue, and saturation in real-time through keyboard input.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/color-balance.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <string.h>\n#include <stdio.h>\n#include <gst/gst.h>\n#include <gst/video/colorbalance.h>\n\ntypedef struct _CustomData {\n  GstElement *pipeline;\n  GMainLoop *loop;\n} CustomData;\n\n/* Process a color balance command */\nstatic void update_color_channel (const gchar *channel_name, gboolean increase, GstColorBalance *cb) {\n  gdouble step;\n  gint value;\n  GstColorBalanceChannel *channel = NULL;\n  const GList *channels, *l;\n\n  /* Retrieve the list of channels and locate the requested one */\n  channels = gst_color_balance_list_channels (cb);\n  for (l = channels; l != NULL; l = l->next) {\n    GstColorBalanceChannel *tmp = (GstColorBalanceChannel *)l->data;\n\n    if (g_strrstr (tmp->label, channel_name)) {\n      channel = tmp;\n      break;\n    }\n  }\n  if (!channel)\n    return;\n\n  /* Change the channel's value */\n  step = 0.1 * (channel->max_value - channel->min_value);\n  value = gst_color_balance_get_value (cb, channel);\n  if (increase) {\n    value = (gint)(value + step);\n    if (value > channel->max_value)\n      value = channel->max_value;\n  } else {\n    value = (gint)(value - step);\n    if (value < channel->min_value)\n      value = channel->min_value;\n  }\n  gst_color_balance_set_value (cb, channel, value);\n}\n\n/* Output the current values of all Color Balance channels */\nstatic void print_current_values (GstElement *pipeline) {\n  const GList *channels, *l;\n\n  /* Output Color Balance values */\n  channels = gst_color_balance_list_channels (GST_COLOR_BALANCE (pipeline));\n  for (l = channels; l != NULL; l = l->next) {\n    GstColorBalanceChannel *channel = (GstColorBalanceChannel *)l->data;\n    gint value = gst_color_balance_get_value (GST_COLOR_BALANCE (pipeline), channel);\n    g_print (\"%s: %3d%% \", channel->label,\n        100 * (value - channel->min_value) / (channel->max_value - channel->min_value));\n  }\n  g_print (\"\\n\");\n}\n\n/* Process keyboard input */\nstatic gboolean handle_keyboard (GIOChannel *source, GIOCondition cond, CustomData *data) {\n  gchar *str = NULL;\n\n  if (g_io_channel_read_line (source, &str, NULL, NULL, NULL) != G_IO_STATUS_NORMAL) {\n    return TRUE;\n  }\n\n  switch (g_ascii_tolower (str[0])) {\n  case 'c':\n    update_color_channel (\"CONTRAST\", g_ascii_isupper (str[0]), GST_COLOR_BALANCE (data->pipeline));\n    break;\n  case 'b':\n    update_color_channel (\"BRIGHTNESS\", g_ascii_isupper (str[0]), GST_COLOR_BALANCE (data->pipeline));\n    break;\n  case 'h':\n    update_color_channel (\"HUE\", g_ascii_isupper (str[0]), GST_COLOR_BALANCE (data->pipeline));\n    break;\n  case 's':\n    update_color_channel (\"SATURATION\", g_ascii_isupper (str[0]), GST_COLOR_BALANCE (data->pipeline));\n    break;\n  case 'q':\n    g_main_loop_quit (data->loop);\n    break;\n  default:\n    break;\n  }\n\n  g_free (str);\n\n  print_current_values (data->pipeline);\n\n  return TRUE;\n}\n\nint main(int argc, char *argv[]) {\n  CustomData data;\n  GstStateChangeReturn ret;\n  GIOChannel *io_stdin;\n\n  /* Initialize GStreamer */\n  gst_init (&argc, &argv);\n\n  /* Initialize our data structure */\n  memset (&data, 0, sizeof (data));\n\n  /* Print usage map */\n  g_print (\n    \"USAGE: Choose one of the following options, then press enter:\\n\"\n    \" 'C' to increase contrast, 'c' to decrease contrast\\n\"\n    \" 'B' to increase brightness, 'b' to decrease brightness\\n\"\n    \" 'H' to increase hue, 'h' to decrease hue\\n\"\n    \" 'S' to increase saturation, 's' to decrease saturation\\n\"\n    \" 'Q' to quit\\n\");\n\n  /* Build the pipeline */\n  data.pipeline = gst_parse_launch (\"playbin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\", NULL);\n\n  /* Add a keyboard watch so we get notified of keystrokes */\n#ifdef G_OS_WIN32\n  io_stdin = g_io_channel_win32_new_fd (fileno (stdin));\n#else\n  io_stdin = g_io_channel_unix_new (fileno (stdin));\n#endif\n  g_io_add_watch (io_stdin, G_IO_IN, (GIOFunc)handle_keyboard, &data);\n\n  /* Start playing */\n  ret = gst_element_set_state (data.pipeline, GST_STATE_PLAYING);\n  if (ret == GST_STATE_CHANGE_FAILURE) {\n    g_printerr (\"Unable to set the pipeline to the playing state.\\n\");\n    gst_object_unref (data.pipeline);\n    return -1;\n  }\n  print_current_values (data.pipeline);\n\n  /* Create a GLib Main Loop and set it to run */\n  data.loop = g_main_loop_new (NULL, FALSE);\n  g_main_loop_run (data.loop);\n\n  /* Free resources */\n  g_main_loop_unref (data.loop);\n  g_io_channel_unref (io_stdin);\n  gst_element_set_state (data.pipeline, GST_STATE_NULL);\n  gst_object_unref (data.pipeline);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Time from Clock\nDESCRIPTION: Formula showing how running time is calculated from the absolute time and base time in a GStreamer pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/synchronisation.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nC.running_time = absolute_time - base_time\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying Video Stream Tags\nDESCRIPTION: Iterates through the detected video streams. For each stream index `i`, it retrieves the associated metadata (`GstTagList`) using the 'get-video-tags' action signal via `g_signal_emit_by_name`. If tags are found, it extracts the video codec information using `gst_tag_list_get_string` with the `GST_TAG_VIDEO_CODEC` key, prints the codec name, and frees the allocated tag list and string.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nfor (i = 0; i < data->n_video; i++) {\n  tags = NULL;\n  /* Retrieve the stream's video tags */\n  g_signal_emit_by_name (data->playbin, \"get-video-tags\", i, &tags);\n  if (tags) {\n    g_print (\"video stream %d:\\n\", i);\n    gst_tag_list_get_string (tags, GST_TAG_VIDEO_CODEC, &str);\n    g_print (\"  codec: %s\\n\", str ? str : \"unknown\");\n    g_free (str);\n    gst_tag_list_free (tags);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a GStreamer Equalizer Element\nDESCRIPTION: This code configures the equalizer-3bands element by setting attenuation values for different frequency bands. It demonstrates how to modify properties of elements inside a custom sink bin to control audio processing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/custom-playbin-sinks.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n/* Configure the equalizer */\ng_object_set (G_OBJECT (equalizer), \"band1\", (gdouble)-24.0, NULL);\ng_object_set (G_OBJECT (equalizer), \"band2\", (gdouble)-24.0, NULL);\n```\n\n----------------------------------------\n\nTITLE: Deallocating GStreamerBackend in Objective-C\nDESCRIPTION: The dealloc method ensures proper cleanup of the GStreamer pipeline by setting it to NULL state and releasing resources.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-running-pipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n-(void) dealloc\n{\n    if (pipeline) {\n        GST_DEBUG(\"Setting the pipeline to NULL\");\n        gst_element_set_state(pipeline, GST_STATE_NULL);\n        gst_object_unref(pipeline);\n        pipeline = NULL;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GstController in GStreamer Elements\nDESCRIPTION: This code snippet demonstrates how to use GstController in a GStreamer element to synchronize property values with buffer timestamps. It shows retrieving values at specific intervals, allocating memory for samples, and cleaning up resources.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/slomo/controller.txt#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGstController ctrl = gst_object_get_controller (self);\nGstValueArray prop1;\nprop1.property_name = \"prop1\";\nif (ctrl) {\n  gst_controller_sync_values (ctrl, GST_BUFFER_TIMESTAMP);\n  samples_per_period = control-period / sample-rate;\n  nvalues = num_samples / samples_per_period;\n  prop1.nbsamples = nvalues;\n  prop1.sample_interval = control-period;\n  prop1.values = g_new (type, nvalues);\n  gst_controller_get_value_array (ctrl, GST_BUFFER_TIMESTAMP, &prop1);\n} else {\n  prop1.values = &self->prop1;\n  samples_per_period = num_samples;\n}\n[...]\n\nfor (i = 0; i < num_samples; i++) {\n  prop1_val = prop1.values[i / samples_per_period];\n  process();\n}\n\n[...]\nif (ctrl) {\n  gst_controller_sync_values (ctrl, GST_BUFFER_TIMESTAMP + GST_BUFFER_DURATION);\n  g_free (prop1.values);\n}\n```\n\n----------------------------------------\n\nTITLE: Seeking to Specific Time in GStreamer Pipeline (C)\nDESCRIPTION: This function demonstrates how to perform a seek operation in a GStreamer pipeline. It uses gst_element_seek() to seek to a specific time in nanoseconds. The seek is performed with flushing enabled, which is suitable for PAUSED or PLAYING states.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/queryevents.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic void\nseek_to_time (GstElement *pipeline,\n          gint64      time_nanoseconds)\n{\n  if (!gst_element_seek (pipeline, 1.0, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH,\n                         GST_SEEK_TYPE_SET, time_nanoseconds,\n                         GST_SEEK_TYPE_NONE, GST_CLOCK_TIME_NONE)) {\n    g_print (\"Seek failed!\\n\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to GStreamer Documentation (Meson)\nDESCRIPTION: Meson code snippet demonstrating how to add a new plugin to the GStreamer documentation. Shows the structure for declaring a library and adding it to the plugins list.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: meson\nCODE:\n```\ngst_elements = library('gstcoreelements',\n  gst_elements_sources,\n  c_args : gst_c_args,\n  include_directories : [configinc],\n  dependencies : [gst_dep, gst_base_dep],\n  install : true,\n  install_dir : plugins_install_dir,\n)\nplugins += [gst_elements]\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Application Function for GStreamer Android Thread\nDESCRIPTION: Creates and runs the GStreamer pipeline in a separate thread. Sets up the GLib context, creates the audio pipeline, connects to bus signals, and runs the main loop.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_30\n\nLANGUAGE: c\nCODE:\n```\n/* Main method for the native code. This is executed on its own thread. */\nstatic void *app_function (void *userdata) {\n  JavaVMAttachArgs args;\n  GstBus *bus;\n  CustomData *data = (CustomData *)userdata;\n  GSource *bus_source;\n  GError *error = NULL;\n\n  GST_DEBUG (\"Creating pipeline in CustomData at %p\", data);\n\n  /* Create our own GLib Main Context and make it the default one */\n  data->context = g_main_context_new ();\n  g_main_context_push_thread_default(data->context);\n  \n  data->pipeline = gst_parse_launch(\"audiotestsrc ! audioconvert ! audioresample ! autoaudiosink\", &error);\n  if (error) {\n    gchar *message = g_strdup_printf(\"Unable to build pipeline: %s\", error->message);\n    g_clear_error (&error);\n    set_ui_message(message, data);\n    g_free (message);\n    return NULL;\n  }\n  \n  bus = gst_element_get_bus (data->pipeline);\n  bus_source = gst_bus_create_watch (bus);\n  g_source_set_callback (bus_source, (GSourceFunc) gst_bus_async_signal_func, NULL, NULL);\n  g_source_attach (bus_source, data->context);\n  g_source_unref (bus_source);\n  g_signal_connect (G_OBJECT (bus), \"message::error\", (GCallback)error_cb, data);\n  g_signal_connect (G_OBJECT (bus), \"message::state-changed\", (GCallback)state_changed_cb, data);\n  gst_object_unref (bus);\n  \n  GST_DEBUG (\"Entering main loop... (CustomData:%p)\", data);\n  data->main_loop = g_main_loop_new (data->context, FALSE);\n  check_initialization_complete (data);\n  g_main_loop_run (data->main_loop);\n  GST_DEBUG (\"Exited main loop\");\n  g_main_loop_unref (data->main_loop);\n  data->main_loop = NULL;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GstMetaInfo Structure in C\nDESCRIPTION: Structure containing metadata type information, implementation details, and function pointers for initialization, cleanup, and transformation operations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/meta.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstruct _GstMetaInfo {\n  GType                      api;       /* api type */\n  GType                      type;      /* implementation type */\n  gsize                      size;      /* size of the structure */\n\n  GstMetaInitFunction        init_func;\n  GstMetaFreeFunction        free_func;\n  GstMetaTransformFunction   transform_func;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom SurfaceView for GStreamer Video Display in Java\nDESCRIPTION: A custom SurfaceView implementation that overrides onMeasure() to maintain the aspect ratio of media content. This class allows setting media width and height properties and calculates the optimal view dimensions based on layout constraints and the media's aspect ratio.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npackage org.freedesktop.gstreamer.tutorials.tutorial_3;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.SurfaceView;\nimport android.view.View;\n\n// A simple SurfaceView whose width and height can be set from the outside\npublic class GStreamerSurfaceView extends SurfaceView {\n    public int media_width = 320;\n    public int media_height = 240;\n\n    // Mandatory constructors, they do not do much\n    public GStreamerSurfaceView(Context context, AttributeSet attrs,\n            int defStyle) {\n        super(context, attrs, defStyle);\n    }\n\n    public GStreamerSurfaceView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public GStreamerSurfaceView (Context context) {\n        super(context);\n    }\n\n    // Called by the layout manager to find out our size and give us some rules.\n    // We will try to maximize our size, and preserve the media's aspect ratio if\n    // we are given the freedom to do so.\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int width = 0, height = 0;\n        int wmode = View.MeasureSpec.getMode(widthMeasureSpec);\n        int hmode = View.MeasureSpec.getMode(heightMeasureSpec);\n        int wsize = View.MeasureSpec.getSize(widthMeasureSpec);\n        int hsize = View.MeasureSpec.getSize(heightMeasureSpec);\n\n        Log.i (\"GStreamer\", \"onMeasure called with \" + media_width + \"x\" + media_height);\n        // Obey width rules\n        switch (wmode) {\n        case View.MeasureSpec.AT_MOST:\n            if (hmode == View.MeasureSpec.EXACTLY) {\n                width = Math.min(hsize * media_width / media_height, wsize);\n                break;\n            }\n        case View.MeasureSpec.EXACTLY:\n            width = wsize;\n            break;\n        case View.MeasureSpec.UNSPECIFIED:\n            width = media_width;\n        }\n\n        // Obey height rules\n        switch (hmode) {\n        case View.MeasureSpec.AT_MOST:\n            if (wmode == View.MeasureSpec.EXACTLY) {\n                height = Math.min(wsize * media_height / media_width, hsize);\n                break;\n            }\n        case View.MeasureSpec.EXACTLY:\n            height = hsize;\n            break;\n        case View.MeasureSpec.UNSPECIFIED:\n            height = media_height;\n        }\n\n        // Finally, calculate best size when both axis are free\n        if (hmode == View.MeasureSpec.AT_MOST && wmode == View.MeasureSpec.AT_MOST) {\n            int correct_height = width * media_height / media_width;\n            int correct_width = height * media_width / media_height;\n\n            if (correct_height < height)\n                height = correct_height;\n            else\n                width = correct_width;\n        }\n\n        // Obey minimum size\n        width = Math.max (getSuggestedMinimumWidth(), width);\n        height = Math.max (getSuggestedMinimumHeight(), height);\n        setMeasuredDimension(width, height);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Converting MP3 to FLAC with GStreamer\nDESCRIPTION: Demonstrates how to convert an MP3 file to FLAC format using GStreamer elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=music.mp3 ! mpegaudioparse ! mpg123audiodec ! audioconvert ! flacenc ! filesink location=test.flac\n```\n\n----------------------------------------\n\nTITLE: Download Buffering Pipeline Structure\nDESCRIPTION: ASCII diagram illustrating the download buffering pipeline structure, showing how the buffer element writes to a file while streaming data to the demuxer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/buffering.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      +---------+     +---------+     +-------+\n      | httpsrc |     | buffer  |     | demux |\n      |        src - sink      src - sink     ....\n      +---------+     +----|----+     +-------+\n                           V\n                          file\n\n```\n\n----------------------------------------\n\nTITLE: Executing SEEK Event with FLUSH in GStreamer\nDESCRIPTION: This snippet outlines the general flow for executing a SEEK event with FLUSH in GStreamer. It describes a 6-step process involving unblocking streaming threads, acquiring locks, performing the seek, and resuming dataflow.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/events.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1) unblock the streaming threads, they could be blocked in a chain\n   function. This is done by sending a `FLUSH_START` on all srcpads or by pausing\n   the streaming task, depending on the seek FLUSH flag.\n   The flush will make sure that all downstream elements unlock and\n   that control will return to this element chain/loop function.\n   We cannot lock the `STREAM_LOCK` before doing this since it might\n   cause a deadlock.\n\n2) acquire the `STREAM_LOCK`. This will work since the chain/loop function\n   was unlocked/paused in step 1).\n\n3) perform the seek. since the `STREAM_LOCK` is held, the streaming thread\n   will wait for the seek to complete. Most likely, the stream thread\n   will pause because the peer elements are flushing.\n\n4) send a `FLUSH_STOP` event to all peer elements to allow streaming again.\n\n5) create a SEGMENT event to signal the new buffer timestamp base time.\n   This event must be queued to be sent by the streaming thread.\n\n6) start stopped tasks and unlock the `STREAM_LOCK`, dataflow will continue\n   now from the new position.\n```\n\n----------------------------------------\n\nTITLE: Generating GStreamer Plugin Boilerplate with make_element - Shell\nDESCRIPTION: Illustrates how to invoke the make_element tool to generate basic source files for a new plugin. Requires prior cloning of gst-template and proper navigation to the source directory; the command outputs the boilerplate source and header files for a plugin called MyFilter. Capitalization in the plugin name is important due to filesystem and tool constraints.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/boiler.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nshell $ cd gst-template/gst-plugin/src\nshell $ ../tools/make_element MyFilter\n\n```\n\n----------------------------------------\n\nTITLE: Declaring GESTimelineObject API for Effect Management in C\nDESCRIPTION: This snippet declares C functions for adding effects to a GESTimelineObject, retrieving applied effects, and managing effect positions. It includes functions for adding, getting, and positioning effects within the timeline object.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/effects.txt#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nGESTrackEffect *ges_timeline_object_add_effect (GESTimelineObject *object,\n                                              GESEffect *effect_material,\n                                              gint position);\n\nGList *\nges_timeline_object_get_effects (GESTimelineObject *object);\n\ngboolean\nges_timeline_object_set_top_effect_position (GESTimelineObject *object,\n      GESTrackEffect *effect, guint newposition);\n\ngint\nges_timeline_object_get_top_effect_position (GESTimelineObject *object,\n      GESTrackEffect *effect);\n```\n\n----------------------------------------\n\nTITLE: Printing Pad Capabilities in GStreamer (C)\nDESCRIPTION: This function retrieves and prints the current capabilities of a specified pad in a given GStreamer element. It handles cases where negotiation may not be finished by querying acceptable caps if current caps are not available.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-formats-and-pad-capabilities.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic void print_pad_capabilities (GstElement *element, gchar *pad_name) {\n  GstPad *pad = NULL;\n  GstCaps *caps = NULL;\n\n  /* Retrieve pad */\n  pad = gst_element_get_static_pad (element, pad_name);\n  if (!pad) {\n    g_printerr (\"Could not retrieve pad '%s'\\n\", pad_name);\n    return;\n  }\n\n  /* Retrieve negotiated caps (or acceptable caps if negotiation is not finished yet) */\n  caps = gst_pad_get_current_caps (pad);\n  if (!caps)\n    caps = gst_pad_query_caps (pad, NULL);\n\n  /* Print and free */\n  g_print (\"Caps for the %s pad:\\n\", pad_name);\n  print_caps (caps, \"      \");\n  gst_caps_unref (caps);\n  gst_object_unref (pad);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cropping Metadata with GstVideoCropMeta (GStreamer Video Meta, C)\nDESCRIPTION: This C code block demonstrates attaching cropping metadata to a GstBuffer object using GstVideoCropMeta from the GStreamer video meta API. The usage of gst_buffer_add_video_crop_meta allocates and attaches a metadata structure, after which the cropping rectangle (x, y, width, height) is set. Requires inclusion of gst/video/gstvideometa.h header and a valid GstBuffer. Intended for scenarios where downstream elements need to be informed of cropping requirements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/video/gstvideometa.h>\n\n[...]\n  GstVideoCropMeta *meta;\n\n  /* buffer points to a video frame, add some cropping metadata */\n  meta = gst_buffer_add_video_crop_meta (buffer);\n\n  /* configure the cropping metadata */\n  meta->x = 8;\n  meta->y = 8;\n  meta->width = 120;\n  meta->height = 80;\n[...]\n\n```\n\n----------------------------------------\n\nTITLE: Constructing Complex GStreamer Pipeline with gst-launch\nDESCRIPTION: Shows a more complex gst-launch command that creates a pipeline for playing a DVD. It demuxes the DVD stream, processes audio and video separately, and outputs them to appropriate sinks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/programs.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch filesrc location=redpill.vob ! dvddemux name=demux \\\n demux.audio_00 ! queue ! a52dec ! audioconvert ! audioresample ! osssink \\\n demux.video_00 ! queue ! mpeg2dec ! videoconvert ! xvimagesink\n```\n\n----------------------------------------\n\nTITLE: Setting Element Properties in gst-launch-1.0\nDESCRIPTION: Demonstrates how to set properties on pipeline elements by modifying the pattern property of videotestsrc to display a different test pattern (circles).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 videotestsrc pattern=11 ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Implementing a GStreamer AVI Typefind Function in C\nDESCRIPTION: This C code snippet defines a GStreamer typefind function (`gst_avi_typefind_function`) to detect AVI files by checking for the 'RIFF' and 'AVI ' markers at the beginning of a data stream. It uses `gst_type_find_peek` to examine the data and `gst_type_find_suggest` to propose the `video/x-msvideo` capability upon successful detection. The snippet also includes the necessary GStreamer macros (`GST_TYPE_FIND_REGISTER_DEFINE`, `GST_TYPEFIND_REGISTER`) and a `plugin_init` function for registering this typefinder within a GStreamer plugin. It depends on the GStreamer core libraries.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/media-types.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic GstStaticCaps avi_caps = GST_STATIC_CAPS (\"video/x-msvideo\");\n#define AVI_CAPS gst_static_caps_get(&avi_caps)\nstatic void\ngst_avi_typefind_function (GstTypeFind *tf,\n              gpointer     pointer)\n{\n  guint8 *data = gst_type_find_peek (tf, 0, 12);\n\n  if (data &&\n      GUINT32_FROM_LE (&((guint32 *) data)[0]) == GST_MAKE_FOURCC ('R','I','F','F') &&\n      GUINT32_FROM_LE (&((guint32 *) data)[2]) == GST_MAKE_FOURCC ('A','V','I',' ')) {\n    gst_type_find_suggest (tf, GST_TYPE_FIND_MAXIMUM, AVI_CAPS);\n  }\n}\n\nGST_TYPE_FIND_REGISTER_DEFINE(avi, \"video/x-msvideo\", GST_RANK_PRIMARY,\n    gst_avi_typefind_function, \"avi\", AVI_CAPS, NULL, NULL);\n\nstatic gboolean\nplugin_init (GstPlugin *plugin)\n{\n  return GST_TYPEFIND_REGISTER(avi, plugin);\n}\n\n```\n\n----------------------------------------\n\nTITLE: JNI Interface Implementation\nDESCRIPTION: Native JNI interface methods for controlling the GStreamer pipeline from Java code. Includes initialization, state control (play/pause), position seeking, and cleanup methods.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nstatic void gst_native_init (JNIEnv* env, jobject thiz) {\n  CustomData *data = g_new0 (CustomData, 1);\n  data->desired_position = GST_CLOCK_TIME_NONE;\n  data->last_seek_time = GST_CLOCK_TIME_NONE;\n  SET_CUSTOM_DATA (env, thiz, custom_data_field_id, data);\n  GST_DEBUG_CATEGORY_INIT (debug_category, \"tutorial-4\", 0, \"Android tutorial 4\");\n  gst_debug_set_threshold_for_name(\"tutorial-4\", GST_LEVEL_DEBUG);\n  GST_DEBUG (\"Created CustomData at %p\", data);\n  data->app = (*env)->NewGlobalRef (env, thiz);\n  GST_DEBUG (\"Created GlobalRef for app object at %p\", data->app);\n  pthread_create (&gst_app_thread, NULL, &app_function, data);\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Data in GStreamer (C)\nDESCRIPTION: Demonstrates how a source element pushes data to a downstream element using the gst_pad_push() method. The downstream element receives the buffer in its Chain function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/push-pull.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngst_pad_push()\n```\n\n----------------------------------------\n\nTITLE: Main GStreamer Native Thread Function for App Logic (C)\nDESCRIPTION: The function 'app_function' runs on its dedicated thread, creates a new GLib main context, instantiates and configures the GStreamer pipeline (with error handling), connects message handlers, runs a GLib main loop, and performs cleanup. It serves as the pipeline's main runtime loop and synchronization point for JNI-initiated commands, requiring GStreamer and GLib dependencies.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nstatic void *app_function (void *userdata) {\n  JavaVMAttachArgs args;\n  GstBus *bus;\n  CustomData *data = (CustomData *)userdata;\n  GSource *bus_source;\n  GError *error = NULL;\n\n  GST_DEBUG (\"Creating pipeline in CustomData at %p\", data);\n\n  /* Create our own GLib Main Context and make it the default one */\n  data->context = g_main_context_new ();\n  g_main_context_push_thread_default(data->context);\n\n  /* Build pipeline */\n  data->pipeline = gst_parse_launch(\"audiotestsrc ! audioconvert ! audioresample ! autoaudiosink\", &error);\n  if (error) {\n    gchar *message = g_strdup_printf(\"Unable to build pipeline: %s\", error->message);\n    g_clear_error (&error);\n    set_ui_message(message, data);\n    g_free (message);\n    return NULL;\n  }\n\n  /* Instruct the bus to emit signals for each received message, and connect to the interesting signals */\n  bus = gst_element_get_bus (data->pipeline);\n  bus_source = gst_bus_create_watch (bus);\n  g_source_set_callback (bus_source, (GSourceFunc) gst_bus_async_signal_func, NULL, NULL);\n  g_source_attach (bus_source, data->context);\n  g_source_unref (bus_source);\n  g_signal_connect (G_OBJECT (bus), \"message::error\", (GCallback)error_cb, data);\n  g_signal_connect (G_OBJECT (bus), \"message::state-changed\", (GCallback)state_changed_cb, data);\n  gst_object_unref (bus);\n\n  /* Create a GLib Main Loop and set it to run */\n  GST_DEBUG (\"Entering main loop... (CustomData:%p)\", data);\n  data->main_loop = g_main_loop_new (data->context, FALSE);\n  check_initialization_complete (data);\n  g_main_loop_run (data->main_loop);\n  GST_DEBUG (\"Exited main loop\");\n  g_main_loop_unref (data->main_loop);\n  data->main_loop = NULL;\n\n  /* Free resources */\n  g_main_context_pop_thread_default(data->context);\n  g_main_context_unref (data->context);\n  gst_element_set_state (data->pipeline, GST_STATE_NULL);\n  gst_object_unref (data->pipeline);\n\n  return NULL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Video Sink from GStreamer Playbin\nDESCRIPTION: This code obtains the video sink element from the playbin pipeline. It's used to send seek events directly to the sink rather than to the entire pipeline to avoid performing multiple seeks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/playback-speed.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nif (data->video_sink == NULL) {\n  /* If we have not done so, obtain the sink through which we will send the seek events */\n  g_object_get (data->pipeline, \"video-sink\", &data->video_sink, NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing OpenGL Context With GStreamer in C\nDESCRIPTION: This code snippet shows how to share an OpenGL context with GStreamer. It handles the GST_MESSAGE_NEED_CONTEXT message type, creating and setting a gst.gl.app_context when requested.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/opengl.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean\nsync_bus_call (GstBus *bus, GstMessage *msg, gpointer    data)\n{\n  switch (GST_MESSAGE_TYPE (msg)) {\n    case GST_MESSAGE_NEED_CONTEXT:\n    {\n      const gchar *context_type;\n      GstContext *context = NULL;\n     \n      gst_message_parse_context_type (msg, &context_type);\n      g_print(\"got need context %s\\n\", context_type);\n\n      if (g_strcmp0 (context_type, \"gst.gl.app_context\") == 0) {\n        GstGLContext *gl_context; /* get this from the application somehow */\n        GstStructure *s;\n\n        context = gst_context_new (\"gst.gl.app_context\", TRUE);\n        s = gst_context_writable_structure (context);\n        gst_structure_set (s, \"context\", GST_GL_TYPE_CONTEXT, gl_context, NULL);\n\n        gst_element_set_context (GST_ELEMENT (msg->src), context);\n      }\n      if (context)\n        gst_context_unref (context);\n      break;\n    }\n    default:\n      break;\n  }\n\n  return FALSE;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Playbin Properties with g_object_set\nDESCRIPTION: Illustrates setting multiple properties ('uri', 'flags', 'connection-speed') of the `playbin` element in a single call to `g_object_set`. This function takes property name-value pairs and requires a `NULL` terminator.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_13\n\nLANGUAGE: c\nCODE:\n```\ng_object_set (data.playbin, \"uri\", \"https://gstreamer.freedesktop.org/data/media/sintel_cropped_multilingual.webm\", \"flags\", flags, \"connection-speed\", 56, NULL);\n```\n\n----------------------------------------\n\nTITLE: Inspecting a GStreamer Element (vp8dec) with gst-inspect-1.0 (Bash)\nDESCRIPTION: Demonstrates using `gst-inspect-1.0` to retrieve detailed information about a specific GStreamer element (`vp8dec`). The output includes plugin details (name, description, filename, version), element hierarchy, pad templates (including capabilities like accepted/produced media types), and configurable element properties (like name, parent, post-processing flags, threading). This information is crucial for understanding how to correctly use the element within a pipeline. Requires GStreamer core and the plugin containing the `vp8dec` element (e.g., `gst-plugins-good`).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngst-inspect-1.0 vp8dec\n\nFactory Details:\n  Rank                     primary (256)\n  Long-name                On2 VP8 Decoder\n  Klass                    Codec/Decoder/Video\n  Description              Decode VP8 video streams\n  Author                   David Schleef <ds@entropywave.com>, Sebastian Dröge <sebastian.droege@collabora.co.uk>\n\nPlugin Details:\n  Name                     vpx\n  Description              VP8 plugin\n  Filename                 /usr/lib64/gstreamer-1.0/libgstvpx.so\n  Version                  1.6.4\n  License                  LGPL\n  Source module            gst-plugins-good\n  Source release date      2016-04-14\n  Binary package           Fedora GStreamer-plugins-good package\n  Origin URL               http://download.fedoraproject.org\n\nGObject\n +----GInitiallyUnowned\n       +----GstObject\n             +----GstElement\n                   +----GstVideoDecoder\n                         +----GstVP8Dec\n\nPad Templates:\n  SINK template: 'sink'\n    Availability: Always\n    Capabilities:\n      video/x-vp8\n\n  SRC template: 'src'\n    Availability: Always\n    Capabilities:\n      video/x-raw\n                 format: I420\n                  width: [ 1, 2147483647 ]\n                 height: [ 1, 2147483647 ]\n              framerate: [ 0/1, 2147483647/1 ]\n\n\nElement Flags:\n  no flags set\n\nElement Implementation:\n  Has change_state() function: gst_video_decoder_change_state\n\nElement has no clocking capabilities.\nElement has no URI handling capabilities.\n\nPads:\n  SINK: 'sink'\n    Pad Template: 'sink'\n  SRC: 'src'\n    Pad Template: 'src'\n\nElement Properties:\n  name                : The name of the object\n                        flags: readable, writable\n                        String. Default: \"vp8dec0\"\n  parent              : The parent of the object\n                        flags: readable, writable\n                        Object of type \"GstObject\"\n  post-processing     : Enable post processing\n                        flags: readable, writable\n                        Boolean. Default: false\n  post-processing-flags: Flags to control post processing\n                        flags: readable, writable\n                        Flags \"GstVP8DecPostProcessingFlags\" Default: 0x00000403, \"mfqe+demacroblock+deblock\"\n                           (0x00000001): deblock          - Deblock\n                           (0x00000002): demacroblock     - Demacroblock\n                           (0x00000004): addnoise         - Add noise\n                           (0x00000400): mfqe             - Multi-frame quality enhancement\n  deblocking-level    : Deblocking level\n                        flags: readable, writable\n                        Unsigned Integer. Range: 0 - 16 Default: 4\n  noise-level         : Noise level\n                        flags: readable, writable\n                        Unsigned Integer. Range: 0 - 16 Default: 0\n  threads             : Maximum number of decoding threads\n                        flags: readable, writable\n                        Unsigned Integer. Range: 1 - 16 Default: 0\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a GStreamer Bin\nDESCRIPTION: This code snippet demonstrates how to create a GStreamer bin, add multiple elements to it, and link them together to form a processing chain. This pattern is essential for creating complex sink components for playbin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/custom-playbin-sinks.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* Create the sink bin, add the elements and link them */\nbin = gst_bin_new (\"audio_sink_bin\");\ngst_bin_add_many (GST_BIN (bin), equalizer, convert, sink, NULL);\ngst_element_link_many (equalizer, convert, sink, NULL);\n```\n\n----------------------------------------\n\nTITLE: Adding Meta-Information to ALLOCATION Query (GStreamer, C)\nDESCRIPTION: Demonstrates adding a GstStructure with video alignment meta to the ALLOCATION query using gst_query_add_allocation_meta. This enables downstream elements to receive the meta requirements for buffer allocation. Requires the query object, GST_VIDEO_META_API_TYPE, and the params GstStructure constructed with alignment information. Outputs modified query with added meta-data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_13\n\nLANGUAGE: c\nCODE:\n```\ngst_query_add_allocation_meta (query, GST_VIDEO_META_API_TYPE, params);\n```\n\n----------------------------------------\n\nTITLE: Parsing Input and Creating Sometimes Pads in GStreamer (C)\nDESCRIPTION: This C snippet demonstrates how to create sometimes pads dynamically in a GStreamer filter element depending on the content of an input text file. It includes initialization of pad templates, element setup, and a processing loop that parses the file, creates pads for each stream, and pushes buffers to the appropriate pad. Dependencies include GStreamer core libraries and conventions for element and pad handling. The element expects lines with stream indices and stream data; pads are created up to a limit based on the header, and the logic is resilient to malformed data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/request.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\n\ntypedef struct _GstMyFilter {\n[..]\n  gboolean firstrun;\n  GList *srcpadlist;\n} GstMyFilter;\n\nstatic GstStaticPadTemplate src_factory =\nGST_STATIC_PAD_TEMPLATE (\n  \"src_%u\",\n  GST_PAD_SRC,\n  GST_PAD_SOMETIMES,\n  GST_STATIC_CAPS (\"ANY\")\n);\n\nstatic void\ngst_my_filter_class_init (GstMyFilterClass *klass)\n{\n  GstElementClass *element_class = GST_ELEMENT_CLASS (klass);\n[..]\n  gst_element_class_add_pad_template (element_class,\n    gst_static_pad_template_get (&src_factory));\n[..]\n}\n\nstatic void\ngst_my_filter_init (GstMyFilter *filter)\n{\n[..]\n  filter->firstrun = TRUE;\n  filter->srcpadlist = NULL;\n}\n\n/*\n * Get one line of data - without newline.\n */\n\nstatic GstBuffer *\ngst_my_filter_getline (GstMyFilter *filter)\n{\n  guint8 *data;\n  gint n, num;\n\n  /* max. line length is 512 characters - for safety */\n  for (n = 0; n < 512; n++) {\n    num = gst_bytestream_peek_bytes (filter->bs, &data, n + 1);\n    if (num != n + 1)\n      return NULL;\n\n    /* newline? */\n    if (data[n] == '\\n') {\n      GstBuffer *buf = gst_buffer_new_allocate (NULL, n + 1, NULL);\n\n      gst_bytestream_peek_bytes (filter->bs, &data, n);\n      gst_buffer_fill (buf, 0, data, n);\n      gst_buffer_memset (buf, n, '\\0', 1);\n      gst_bytestream_flush_fast (filter->bs, n + 1);\n\n      return buf;\n    }\n  }\n}\n\nstatic void\ngst_my_filter_loopfunc (GstElement *element)\n{\n  GstMyFilter *filter = GST_MY_FILTER (element);\n  GstBuffer *buf;\n  GstPad *pad;\n  GstMapInfo map;\n  gint num, n;\n\n  /* parse header */\n  if (filter->firstrun) {\n    gchar *padname;\n    guint8 id;\n\n    if (!(buf = gst_my_filter_getline (filter))) {\n      gst_element_error (element, STREAM, READ, (NULL),\n             (\"Stream contains no header\"));\n      return;\n    }\n    gst_buffer_extract (buf, 0, &id, 1);\n    num = atoi (id);\n    gst_buffer_unref (buf);\n\n    /* for each of the streams, create a pad */\n    for (n = 0; n < num; n++) {\n      padname = g_strdup_printf (\"src_%u\", n);\n      pad = gst_pad_new_from_static_template (src_factory, padname);\n      g_free (padname);\n\n      /* here, you would set _event () and _query () functions */\n\n      /* need to activate the pad before adding */\n      gst_pad_set_active (pad, TRUE);\n\n      gst_element_add_pad (element, pad);\n      filter->srcpadlist = g_list_append (filter->srcpadlist, pad);\n    }\n  }\n\n  /* and now, simply parse each line and push over */\n  if (!(buf = gst_my_filter_getline (filter))) {\n    GstEvent *event = gst_event_new (GST_EVENT_EOS);\n    GList *padlist;\n\n    for (padlist = srcpadlist;\n         padlist != NULL; padlist = g_list_next (padlist)) {\n      pad = GST_PAD (padlist->data);\n      gst_pad_push_event (pad, gst_event_ref (event));\n    }\n    gst_event_unref (event);\n    /* pause the task here */\n    return;\n  }\n\n  /* parse stream number and go beyond the ':' in the data */\n  gst_buffer_map (buf, &map, GST_MAP_READ);\n  num = atoi (map.data[0]);\n  if (num >= 0 && num < g_list_length (filter->srcpadlist)) {\n    pad = GST_PAD (g_list_nth_data (filter->srcpadlist, num);\n\n    /* magic buffer parsing foo */\n    for (n = 0; map.data[n] != ':' &&\n                map.data[n] != '\\0'; n++) ;\n    if (map.data[n] != '\\0') {\n      GstBuffer *sub;\n\n      /* create region copy that starts right past the space. The reason\n       * that we don't just forward the data pointer is because the\n       * pointer is no longer the start of an allocated block of memory,\n       * but just a pointer to a position somewhere in the middle of it.\n       * That cannot be freed upon disposal, so we'd either crash or have\n       * a memleak. Creating a region copy is a simple way to solve that. */\n      sub = gst_buffer_copy_region (buf, GST_BUFFER_COPY_ALL,\n          n + 1, map.size - n - 1);\n      gst_pad_push (pad, sub);\n    }\n  }\n  gst_buffer_unmap (buf, &map);\n  gst_buffer_unref (buf);\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Manually Building a Playback Pipeline with gst-launch-1.0 (Bash)\nDESCRIPTION: Constructs a detailed GStreamer pipeline using `gst-launch-1.0` to play a WebM file from a URL. It manually links elements for fetching (`souphttpsrc`), demuxing (`matroskademux`), decoding (VP8 video via `vp8dec`, Vorbis audio via `vorbisdec`), format conversion (`videoconvert`, `audioconvert`), resampling (`audioresample`), and output to auto-detected sinks (`autovideosink`, `autoaudiosink`). Queues are used between stages. Requires specific GStreamer plugins for each element.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 souphttpsrc location=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm ! matroskademux name=d ! queue ! vp8dec ! videoconvert ! autovideosink d. ! queue ! vorbisdec ! audioconvert ! audioresample ! autoaudiosink\n```\n\n----------------------------------------\n\nTITLE: GStreamer Clock Message Types\nDESCRIPTION: Message types used by GStreamer for clock-related notifications in the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/clocks.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nGST_MESSAGE_CLOCK_PROVIDE\nNEW_CLOCK\nCLOCK_LOST\nGST_CLOCK_UNSCHEDULED\n```\n\n----------------------------------------\n\nTITLE: Creating GStreamer Pipeline Elements in C\nDESCRIPTION: Instantiates the necessary GStreamer elements for the pipeline, including uridecodebin, audioconvert, audioresample, and autoaudiosink.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/dynamic-pipelines.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ndata.source = gst_element_factory_make (\"uridecodebin\", \"source\");\ndata.convert = gst_element_factory_make (\"audioconvert\", \"convert\");\ndata.resample = gst_element_factory_make (\"audioresample\", \"resample\");\ndata.sink = gst_element_factory_make (\"autoaudiosink\", \"sink\");\n```\n\n----------------------------------------\n\nTITLE: Using Metadata Convenience Macro\nDESCRIPTION: Demonstrates usage of the convenience macro for accessing and modifying metadata.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/meta.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nGstMetaTiming *timing;\n\ntiming = gst_buffer_get_meta_timing (buffer);\ntiming->timestamp = 0;\ntiming->duration = 20 * GST_MSECOND;\n```\n\n----------------------------------------\n\nTITLE: Initializing JNI Class References and Method IDs for GStreamer Integration (C)\nDESCRIPTION: The 'gst_native_class_init' function retrieves and caches field and method IDs used for interaction between native and Java code, validating required method signatures. It logs an error if any method or field ID is missing, ensuring class interface compatibility before pipeline use. This function is intended to be called during Java class static initialization.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nstatic jboolean gst_native_class_init (JNIEnv* env, jclass klass) {\n  custom_data_field_id = (*env)->GetFieldID (env, klass, \"native_custom_data\", \"J\");\n  set_message_method_id = (*env)->GetMethodID (env, klass, \"setMessage\", \"(Ljava/lang/String;)V\");\n  on_gstreamer_initialized_method_id = (*env)->GetMethodID (env, klass, \"onGStreamerInitialized\", \"()V\");\n\n  if (!custom_data_field_id || !set_message_method_id || !on_gstreamer_initialized_method_id) {\n    /* We emit this message through the Android log instead of the GStreamer log because the later\n     * has not been initialized yet.\n     */\n    __android_log_print (ANDROID_LOG_ERROR, \"tutorial-2\", \"The calling class does not implement all necessary interface methods\");\n    return JNI_FALSE;\n  }\n  return JNI_TRUE;\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Data in GStreamer (C)\nDESCRIPTION: Shows how a downstream element can pull data from an upstream element by calling gst_pad_pull_range() on one of its sinkpads.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/push-pull.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ngst_pad_pull_range()\n```\n\n----------------------------------------\n\nTITLE: Registering Metadata in GESMetaContainer (C API)\nDESCRIPTION: API functions for registering metadata with specific flags and default values in a GESMetaContainer. These functions allow registering various types of metadata with additional control over their properties.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/metadata.txt#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ngboolean\nges_meta_container_register_meta_boolean (GESMetaContainer *container,\n                                          GESMetaFlag flags,\n                                          const gchar* meta_item,\n                                          gboolean value);\n\ngboolean\nges_meta_container_register_meta_int     (GESMetaContainer *container,\n                                          GESMetaFlag flags,\n                                          const gchar* meta_item,\n                                          gint value);\n\ngboolean\nges_meta_container_register_meta_uint    (GESMetaContainer *container,\n                                          GESMetaFlag flags,\n                                          const gchar* meta_item,\n                                          guint value);\n\ngboolean\nges_meta_container_register_meta_int64   (GESMetaContainer *container,\n                                          GESMetaFlag flags,\n                                          const gchar* meta_item,\n                                          gint64 value);\n\ngboolean\nges_meta_container_register_meta_uint64  (GESMetaContainer *container,\n                                          GESMetaFlag flags,\n                                          const gchar* meta_item,\n                                          guint64 value);\n\ngboolean\nges_meta_container_register_meta_float   (GESMetaContainer *container,\n                                          GESMetaFlag flags,\n                                          const gchar* meta_item,\n                                          gfloat value);\n\ngboolean\nges_meta_container_register_meta_double  (GESMetaContainer *container,\n                                          GESMetaFlag flags,\n                                          const gchar* meta_item,\n                                          gdouble value);\n\ngboolean\nges_meta_container_register_meta_date    (GESMetaContainer *container,\n                                          GESMetaFlag flags,\n                                          const gchar* meta_item,\n                                          const GDate* value);\n\ngboolean\nges_meta_container_register_meta_date_time  (GESMetaContainer *container,\n                                             GESMetaFlag flags,\n                                             const gchar* meta_item,\n                                             const GstDateTime* value);\n\ngboolean\nges_meta_container_register_meta_string     (GESMetaContainer *container,\n                                             GESMetaFlag flags,\n                                             const gchar* meta_item,\n                                             const gchar* value);\n\ngboolean\nges_meta_container_register_meta            (GESMetaContainer *container,\n                                             GESMetaFlag flags,\n                                             const gchar* meta_item,\n                                             const GValue * value);\n\ngboolean\nges_meta_container_check_meta_registered    (GESMetaContainer *container,\n                                             const gchar * meta_item,\n                                             GESMetaFlag * flags,\n                                             GType * type);\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty GStreamer Pipeline in C\nDESCRIPTION: Shows how to create an empty GStreamer pipeline using gst_pipeline_new(). This function creates a new pipeline object, which can then be populated with elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_15\n\nLANGUAGE: C\nCODE:\n```\ngst_pipeline_new(\"test-pipeline\");\n```\n\n----------------------------------------\n\nTITLE: Defining GstStaticPadTemplate in GStreamer (C)\nDESCRIPTION: This snippet defines a static pad template named 'sink_factory' for a sink pad in a GStreamer element using the GST_STATIC_PAD_TEMPLATE macro, specifying its name, direction, existence property, and supported capabilities. The code requires GStreamer development headers and links against GStreamer libraries. The 'sink_factory' can later be registered with the element class to describe the pads the element supports. Input parameters include the pad name (\"sink\"), pad direction (GST_PAD_SINK), pad presence (GST_PAD_ALWAYS), and capabilities (ANY).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/boiler.md#2025-04-23_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nstatic GstStaticPadTemplate sink_factory =\nGST_STATIC_PAD_TEMPLATE (\n  \"sink\",\n  GST_PAD_SINK,\n  GST_PAD_ALWAYS,\n  GST_STATIC_CAPS (\"ANY\")\n);\n\n```\n\n----------------------------------------\n\nTITLE: Inspecting GStreamer Plugin\nDESCRIPTION: Command to verify GStreamer installation by inspecting the fakesrc plugin\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/using.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-inspect-1.0 fakesrc\n```\n\n----------------------------------------\n\nTITLE: Waiting for Pipeline Events in C\nDESCRIPTION: Code that waits for events on the GStreamer pipeline bus, such as errors or end-of-stream signals. The bus is a system that delivers messages from the elements to the application.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n/* Wait until error or EOS */\nbus = gst_element_get_bus (pipeline);\nmsg =\n    gst_bus_timed_pop_filtered (bus, GST_CLOCK_TIME_NONE,\n    GST_MESSAGE_ERROR | GST_MESSAGE_EOS);\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Caps on a GStreamer Pad in C\nDESCRIPTION: Creates a `GstCaps` object defining a specific raw audio format using `gst_caps_new_simple` with placeholders for samplerate and channels. It then sets these caps on the specified `GstPad` using `gst_pad_set_caps`. If setting the caps fails, it logs an error using `GST_ELEMENT_ERROR` and returns `GST_FLOW_ERROR`. Requires the GStreamer library.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/negotiation.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\n\n[..]\n    caps = gst_caps_new_simple (\"audio/x-raw\",\n        \"format\", G_TYPE_STRING, GST_AUDIO_NE(F32),\n        \"rate\", G_TYPE_INT, <samplerate>,\n        \"channels\", G_TYPE_INT, <num-channels>, NULL);\n    if (!gst_pad_set_caps (pad, caps)) {\n      GST_ELEMENT_ERROR (element, CORE, NEGOTIATION, (NULL),\n          (\"Some debug information here\"));\n      return GST_FLOW_ERROR;\n    }\n[..]\n\n\n```\n\n----------------------------------------\n\nTITLE: Set UI Message via JNI Call in C\nDESCRIPTION: Implements the `set_ui_message` function, which sends a string message to the Android UI. It retrieves the JNI environment, converts the C string (`gchar*`) to a Java string (`jstring`), calls the pre-cached Java method `set_message_method_id` on the application object (`data->app`), and handles potential JNI exceptions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n/* Change the content of the UI's TextView */\nstatic void set_ui_message (const gchar *message, CustomData *data) {\n  JNIEnv *env = get_jni_env ();\n  GST_DEBUG (\"Setting message to: %s\", message);\n  jstring jmessage = (*env)->NewStringUTF(env, message);\n  (*env)->CallVoidMethod (env, data->app, set_message_method_id, jmessage);\n  if ((*env)->ExceptionCheck (env)) {\n    GST_ERROR (\"Failed to call Java method\");\n    (*env)->ExceptionClear (env);\n  }\n  (*env)->DeleteLocalRef (env, jmessage);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Branched Pipelines with Named Elements\nDESCRIPTION: Shows how to create a branched pipeline using the tee element with named elements. This pipeline displays the same video in two separate windows by splitting the stream with a tee element.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 videotestsrc ! videoconvert ! tee name=t ! queue ! autovideosink t. ! queue ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Declaring the CustomData Structure for JNI and GStreamer Callbacks (C)\nDESCRIPTION: This struct holds the required native references for managing a GStreamer pipeline, threading, and JNI callbacks. Members include a global Java object reference for callbacks, pointers for the pipeline, context, and main loop, and a boolean flag for initialization status. The struct is a central context passed throughout the native code and shared between callback functions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_13\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct _CustomData {\n  jobject app;           /* Application instance, used to call its methods. A global reference is kept. */\n  GstElement *pipeline;  /* The running pipeline */\n  GMainContext *context; /* GLib context used to run the main loop */\n  GMainLoop *main_loop;  /* GLib main loop */\n  gboolean initialized;  /* To avoid informing the UI multiple times about the initialization */\n} CustomData;\n```\n\n----------------------------------------\n\nTITLE: Checking GStreamer Initialization Status\nDESCRIPTION: Method to verify if all conditions are met for GStreamer initialization and notify the application accordingly through the delegate.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-running-pipeline.md#2025-04-23_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\n-(void) check_initialization_complete\n{\n    if (!initialized && main_loop) {\n        GST_DEBUG (\"Initialization complete, notifying application.\");\n        if (ui_delegate && [ui_delegate respondsToSelector:@selector(gstreamerInitialized)])\n        {\n            [ui_delegate gstreamerInitialized];\n        }\n        initialized = TRUE;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Time in GStreamer Streaming\nDESCRIPTION: Calculates the running_time value for buffers based on segment rate. Used for clock synchronization with positive or negative rates.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/streams.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nif (S.rate > 0.0)\n  running_time = (B.timestamp - S.start) / ABS (S.rate) + S.base;\nelse\n  running_time = (S.stop - B.timestamp) / ABS (S.rate) + S.base;\n```\n\n----------------------------------------\n\nTITLE: DRM Video Info Structure Definition\nDESCRIPTION: C structure definition for storing DRM video information including video info, DRM fourcc format and modifier.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/dmabuf.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct GstDrmVideoInfo\n{\n  GstVideoInfo vinfo;\n  guint32 drm_fourcc;\n  guint64 drm_modifier;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Pipeline State and Retrieving Video Sink Interface in C\nDESCRIPTION: This snippet sets the GStreamer pipeline to the READY state using gst_element_set_state. This allows elements like autovideosink to instantiate the actual underlying sink element. Then, it retrieves the video sink element that implements the GST_TYPE_VIDEO_OVERLAY interface using gst_bin_get_by_interface. This interface is necessary for rendering video onto the external native window provided by Android.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n/* Set the pipeline to READY, so it can already accept a window handle, if we have one */\ngst_element_set_state(data->pipeline, GST_STATE_READY);\n\ndata->video_sink = gst_bin_get_by_interface(GST_BIN(data->pipeline), GST_TYPE_VIDEO_OVERLAY);\nif (!data->video_sink) {\n  GST_ERROR (\"Could not retrieve video sink\");\n  return NULL;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GStreamer Pipeline Position\nDESCRIPTION: Function to query the current position of the GStreamer pipeline and return it as a QTime object.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nQTime Player::position() const\n{\n    if (m_pipeline) {\n        //here we query the pipeline about its position\n        //and we request that the result is returned in time format\n        QGst::PositionQueryPtr query = QGst::PositionQuery::create(QGst::FormatTime);\n        m_pipeline->query(query);\n        return QGst::ClockTime(query->position()).toTime();\n    } else {\n        return QTime(0,0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Using Video Meta Alignment from ALLOCATION Query (GStreamer, C)\nDESCRIPTION: Explains how to retrieve and parse GstStructure alignment data from an ALLOCATION query reply. Looks up allocation meta index, parses the structure, reconstructs align using gst_structure_get_uint, and aligns GstVideoInfo accordingly. Essential for drivers/elements that must adapt their buffer layouts to peer requirements. Inputs include the query, allocation caps, and references to align, info, and plane_size. Outputs calculated video buffer parameters for compliant buffer allocation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nguint video_idx;\nGstStructure *params;\n\nif (gst_query_find_allocation_meta (query, GST_VIDEO_META_API_TYPE, &video_idx)) {\n  gst_query_parse_nth_allocation_meta (query, video_idx, &params);\n\n  if (params) {\n    GstVideoAlignment align;\n    GstVideoInfo info;\n    gsize plane_size[GST_VIDEO_MAX_PLANES];\n\n    gst_video_alignment_reset (&align);\n\n    gst_structure_get_uint (s, \"padding-top\", &align.padding_top);\n    gst_structure_get_uint (s, \"padding-bottom\", &align.padding_bottom);\n    gst_structure_get_uint (s, \"padding-left\", &align.padding_left);\n    gst_structure_get_uint (s, \"padding-right\", &align.padding_right);\n    gst_structure_get_uint (s, \"stride-align0\", &align.stride_align[0]);\n    gst_structure_get_uint (s, \"stride-align1\", &align.stride_align[1]);\n    gst_structure_get_uint (s, \"stride-align2\", &align.stride_align[2]);\n    gst_structure_get_uint (s, \"stride-align3\", &align.stride_align[3]);\n\n    gst_video_info_from_caps (&info, caps);\n\n    gst_video_info_align_full (&info, align, plane_size);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Link Syntax\nDESCRIPTION: Demonstrates various ways to link elements in a GStreamer pipeline, including direct links, links with capability filters, and links using specific pads.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[[SRCELEMENT].[PAD1,...]] ! [[SINKELEMENT].[PAD1,...]]\n[[SRCELEMENT].[PAD1,...]] ! CAPS ! [[SINKELEMENT].[PAD1,...]]\n[[SRCELEMENT].[PAD1,...]] : [[SINKELEMENT].[PAD1,...]]\n[[SRCELEMENT].[PAD1,...]] : CAPS : [[SINKELEMENT].[PAD1,...]]\n```\n\n----------------------------------------\n\nTITLE: Handling Discovery Callbacks\nDESCRIPTION: Callback function implementation for processing discovered media information and handling various discovery results\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n/* This function is called every time the discoverer has information regarding\n * one of the URIs we provided.*/\nstatic void on_discovered_cb (GstDiscoverer *discoverer, GstDiscovererInfo *info, GError *err, CustomData *data) {\n  GstDiscovererResult result;\n  const gchar *uri;\n  const GstTagList *tags;\n  GstDiscovererStreamInfo *sinfo;\n\n  uri = gst_discoverer_info_get_uri (info);\n  result = gst_discoverer_info_get_result (info);\n```\n\n----------------------------------------\n\nTITLE: Sharing X11 Display With GStreamer in C\nDESCRIPTION: This code snippet demonstrates how to share an X11 display with GStreamer. It handles the GST_MESSAGE_NEED_CONTEXT message type, creating and setting a GstGLDisplay context when requested.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/opengl.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean\nsync_bus_call (GstBus *bus, GstMessage *msg, gpointer data)\n{\n  switch (GST_MESSAGE_TYPE (msg)) {\n    case GST_MESSAGE_NEED_CONTEXT:\n    {\n      const gchar *context_type;\n      GstContext *context = NULL;\n     \n      gst_message_parse_context_type (msg, &context_type);\n      g_print(\"got need context %s\\n\", context_type);\n\n      if (g_strcmp0 (context_type, GST_GL_DISPLAY_CONTEXT_TYPE) == 0) {\n        Display *x11_display; /* get this from the application somehow */\n        GstGLDisplay *gl_display = GST_GL_DISPLAY (gst_gl_display_x11_new_with_display (x11_display));\n\n        context = gst_context_new (GST_GL_DISPLAY_CONTEXT_TYPE, TRUE);\n        gst_context_set_gl_display (context, gl_display);\n\n        gst_element_set_context (GST_ELEMENT (msg->src), context);\n      }\n      if (context)\n        gst_context_unref (context);\n      break;\n    }\n    default:\n      break;\n  }\n\n  return FALSE;\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Basic Video Pipeline with gst-launch-1.0\nDESCRIPTION: Creates a simple pipeline that generates a test video pattern, converts it to the appropriate format, and displays it in a window. This demonstrates the basic element linking syntax of gst-launch-1.0.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 videotestsrc ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Handling Play/Pause Button Clicks in Android Activity (Java)\nDESCRIPTION: This snippet sets up `OnClickListener`s for the play and pause `ImageButton`s within the `onCreate` method. When the play button is clicked, it sets the `is_playing_desired` flag to true and calls the `nativePlay()` JNI method. When the pause button is clicked, it sets `is_playing_desired` to false and calls `nativePause()`. This delegates the actual pipeline state change to the native code while maintaining the desired state in the Java layer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nImageButton play = (ImageButton) this.findViewById(R.id.button_play);\nplay.setOnClickListener(new OnClickListener() {\n    public void onClick(View v) {\n        is_playing_desired = true;\n        nativePlay();\n    }\n});\nImageButton pause = (ImageButton) this.findViewById(R.id.button_stop);\npause.setOnClickListener(new OnClickListener() {\n    public void onClick(View v) {\n        is_playing_desired = false;\n        nativePause();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting GstDiscoverer Signals\nDESCRIPTION: Sets up signal handlers for 'discovered' and 'finished' events from the GstDiscoverer\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* Connect to the interesting signals */\ng_signal_connect (data.discoverer, \"discovered\", G_CALLBACK (on_discovered_cb), &data);\ng_signal_connect (data.discoverer, \"finished\", G_CALLBACK (on_finished_cb), &data);\n```\n\n----------------------------------------\n\nTITLE: Playing MP3 from Local File or HTTP Stream using GIO\nDESCRIPTION: Shows how to use GIO to play MP3 files from local storage or HTTP streams.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 giosrc location=music.mp3 ! mpegaudioparse ! mpg123audiodec ! audioconvert ! pulsesink\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 giosrc location=http://domain.com/music.mp3 ! mpegaudioparse ! mpg123audiodec ! audioconvert ! audioresample ! pulsesink\n```\n\n----------------------------------------\n\nTITLE: Stream Selection Event API in GStreamer\nDESCRIPTION: API declarations for creating and parsing stream selection events in GStreamer, used to configure which streams should be activated.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-selection.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nGST_EVENT_SELECT_STREAMS\n\ngst_event_new_select_streams(...)\ngst_event_parse_select_streams(...)\n```\n\n----------------------------------------\n\nTITLE: Using decodebin with network source in GStreamer via Bash\nDESCRIPTION: This bash snippet demonstrates using gst-launch-1.0 with souphttpsrc to retrieve a remote media file over HTTP, then decodes and displays the video stream. The souphttpsrc element depends on libsoup and network access; decodebin handles selection of suitable demuxers and decoders. The output is sent to autovideosink; this approach supports a variety of input types.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 souphttpsrc location=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm ! decodebin ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing Caps in a Running GStreamer Pipeline - C\nDESCRIPTION: Illustrates how to programmatically change video format parameters (width and height) of a running GStreamer pipeline by updating the caps property on a capsfilter element. This C code depends on the GStreamer library (\"gst/gst.h\") and assumes GStreamer is properly initialized and available at runtime. The example builds a pipeline with a videotestsrc, dynamically alters the caps in a loop while the pipeline is PLAYING, and monitors for errors via gst_bus_poll. Key parameters controlled are width and height, and the pipeline gracefully handles format negotiation and cleanup. The output is console logs showing resize operations; it is limited to width and height ranges and performs a finite number of iterations, suitable for demonstration or testing of dynamic pipeline reconfiguration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/pipeline-manipulation.md#2025-04-23_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n#include <stdlib.h>\\n\\n#include <gst/gst.h>\\n\\n#define MAX_ROUND 100\\n\\nint\\nmain (int argc, char **argv)\\n{\\n  GstElement *pipe, *filter;\\n  GstCaps *caps;\\n  gint width, height;\\n  gint xdir, ydir;\\n  gint round;\\n  GstMessage *message;\\n\\n  gst_init (&argc, &argv);\\n\\n  pipe = gst_parse_launch_full (\"videotestsrc ! capsfilter name=filter ! \"\\n             \"ximagesink\", NULL, GST_PARSE_FLAG_NONE, NULL);\\n  g_assert (pipe != NULL);\\n\\n  filter = gst_bin_get_by_name (GST_BIN (pipe), \"filter\");\\n  g_assert (filter);\\n\\n  width = 320;\\n  height = 240;\\n  xdir = ydir = -10;\\n\\n  for (round = 0; round < MAX_ROUND; round++) {\\n    gchar *capsstr;\\n    g_print (\"resize to %dx%d (%d/%d)   \\r\", width, height, round, MAX_ROUND);\\n\\n    /* we prefer our fixed width and height but allow other dimensions to pass\\n     * as well */\\n    capsstr = g_strdup_printf (\"video/x-raw, width=(int)%d, height=(int)%d\",\\n        width, height);\\n\\n    caps = gst_caps_from_string (capsstr);\\n    g_free (capsstr);\\n    g_object_set (filter, \"caps\", caps, NULL);\\n    gst_caps_unref (caps);\\n\\n    if (round == 0)\\n      gst_element_set_state (pipe, GST_STATE_PLAYING);\\n\\n    width += xdir;\\n    if (width >= 320)\\n      xdir = -10;\\n    else if (width < 200)\\n      xdir = 10;\\n\\n    height += ydir;\\n    if (height >= 240)\\n      ydir = -10;\\n    else if (height < 150)\\n      ydir = 10;\\n\\n    message =\\n        gst_bus_poll (GST_ELEMENT_BUS (pipe), GST_MESSAGE_ERROR,\\n        50 * GST_MSECOND);\\n    if (message) {\\n      g_print (\"got error           \\n\");\\n\\n      gst_message_unref (message);\\n    }\\n  }\\n  g_print (\"done                    \\n\");\\n\\n  gst_object_unref (filter);\\n  gst_element_set_state (pipe, GST_STATE_NULL);\\n  gst_object_unref (pipe);\\n\\n  return 0;\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Debug Category in GStreamer\nDESCRIPTION: Code snippet showing how to initialize a custom debug category after GStreamer initialization. This registers your category with the debugging system for the duration of your application.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/debugging-tools.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nGST_DEBUG_CATEGORY_INIT (my_category, \"my category\", 0, \"This is my very own\");\n```\n\n----------------------------------------\n\nTITLE: Updating Slider Position Based on Playback Position\nDESCRIPTION: Code that queries the current playback position and updates the slider position accordingly, temporarily blocking the 'value-changed' signal to prevent triggering an unintended seek operation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nif (gst_element_query_position (data->playbin, GST_FORMAT_TIME, &current)) {\n  /* Block the \"value-changed\" signal, so the slider_cb function is not called\n   * (which would trigger a seek the user has not requested) */\n  g_signal_handler_block (data->slider, data->slider_update_signal_id);\n  /* Set the position of the slider to the current pipeline position, in SECONDS */\n\n```\n\n----------------------------------------\n\nTITLE: JNI Methods for Initializing, Controlling, and Finalizing GStreamer Pipeline (C)\nDESCRIPTION: Implements functions exposed to Java via JNI for native initial setup, resource teardown, and runtime pipeline control (pause and play). Each function interacts with CustomData and global references; thread management and JNI field/method invocations are handled as needed. These functions must be registered with Java, and dependencies include JNI macros and pthreads.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nstatic void gst_native_init (JNIEnv* env, jobject thiz) {\n  CustomData *data = g_new0 (CustomData, 1);\n  SET_CUSTOM_DATA (env, thiz, custom_data_field_id, data);\n  GST_DEBUG_CATEGORY_INIT (debug_category, \"tutorial-2\", 0, \"Android tutorial 2\");\n  gst_debug_set_threshold_for_name(\"tutorial-2\", GST_LEVEL_DEBUG);\n  GST_DEBUG (\"Created CustomData at %p\", data);\n  data->app = (*env)->NewGlobalRef (env, thiz);\n  GST_DEBUG (\"Created GlobalRef for app object at %p\", data->app);\n  pthread_create (&gst_app_thread, NULL, &app_function, data);\n}\n\nstatic void gst_native_finalize (JNIEnv* env, jobject thiz) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  GST_DEBUG (\"Quitting main loop...\");\n  g_main_loop_quit (data->main_loop);\n  GST_DEBUG (\"Waiting for thread to finish...\");\n  pthread_join (gst_app_thread, NULL);\n  GST_DEBUG (\"Deleting GlobalRef for app object at %p\", data->app);\n  (*env)->DeleteGlobalRef (env, data->app);\n  GST_DEBUG (\"Freeing CustomData at %p\", data);\n  g_free (data);\n  SET_CUSTOM_DATA (env, thiz, custom_data_field_id, NULL);\n  GST_DEBUG (\"Done finalizing\");\n}\n\nstatic void gst_native_play (JNIEnv* env, jobject thiz) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  GST_DEBUG (\"Setting state to PLAYING\");\n  gst_element_set_state (data->pipeline, GST_STATE_PLAYING);\n}\n\nstatic void gst_native_pause (JNIEnv* env, jobject thiz) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  GST_DEBUG (\"Setting state to PAUSED\");\n  gst_element_set_state (data->pipeline, GST_STATE_PAUSED);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Android.mk for GStreamer integration in NDK\nDESCRIPTION: The Android NDK makefile that defines how to build the native part of the application with GStreamer dependencies. It specifies the required shared libraries, source files, and plugins needed for compilation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/link-against-gstreamer.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE    := tutorial-1\nLOCAL_SRC_FILES := tutorial-1.c\nLOCAL_SHARED_LIBRARIES := gstreamer_android\nLOCAL_LDLIBS := -llog\ninclude $(BUILD_SHARED_LIBRARY)\n\nifndef GSTREAMER_ROOT\nifndef GSTREAMER_ROOT_ANDROID\n$(error GSTREAMER_ROOT_ANDROID is not defined!)\nendif\nGSTREAMER_ROOT        := $(GSTREAMER_ROOT_ANDROID)\nendif\nGSTREAMER_NDK_BUILD_PATH  := $(GSTREAMER_ROOT)/share/gst-android/ndk-build/\nGSTREAMER_PLUGINS         := coreelements\ninclude $(GSTREAMER_NDK_BUILD_PATH)/gstreamer-1.0.mk\n```\n\n----------------------------------------\n\nTITLE: Using GStreamer 1.0 Playbin for Complete Media Playback\nDESCRIPTION: Demonstrates using playbin, which provides a complete playback solution including source selection, decoding, and rendering with minimal pipeline configuration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nplaybin uri=file:///path/to/foo.flac audio-sink=pulsesink\n```\n\n----------------------------------------\n\nTITLE: GStreamer Native Code Setup in C\nDESCRIPTION: Initial setup of GStreamer native code including debug category definition and custom data handling macros for JNI integration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#include <string.h>\n#include <jni.h>\n#include <android/log.h>\n#include <android/native_window.h>\n#include <android/native_window_jni.h>\n#include <gst/gst.h>\n#include <gst/interfaces/xoverlay.h>\n#include <gst/video/video.h>\n#include <pthread.h>\n\nGST_DEBUG_CATEGORY_STATIC (debug_category);\n#define GST_CAT_DEFAULT debug_category\n```\n\n----------------------------------------\n\nTITLE: Setting Subtitle URI and Font Description in GStreamer\nDESCRIPTION: Configures playbin to use an external subtitle file and sets the font properties for subtitle rendering using Pango font description format. The subtitle URI points to an SRT file and the font is set to Sans, 18.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/subtitle-management.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* Set the subtitle URI to play and some font description */\ng_object_set (data.playbin, \"suburi\", \"https://gstreamer.freedesktop.org/data/media/sintel_trailer_gr.srt\", NULL);\ng_object_set (data.playbin, \"subtitle-font-desc\", \"Sans, 18\", NULL);\n```\n\n----------------------------------------\n\nTITLE: Handling GStreamer Error Messages and UI Feedback (C)\nDESCRIPTION: Implements the 'error_cb' callback for GStreamer bus messages, extracting error information and posting a detailed message to the Java UI. It parses errors, frees allocated memory, updates the UI, and sets the pipeline state to NULL, gracefully responding to runtime errors. Dependencies include the GStreamer library, GLib memory utilities, and the set_ui_message function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nstatic void error_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  GError *err;\n  gchar *debug_info;\n  gchar *message_string;\n\n  gst_message_parse_error (msg, &err, &debug_info);\n  message_string = g_strdup_printf (\"Error received from element %s: %s\", GST_OBJECT_NAME (msg->src), err->message);\n  g_clear_error (&err);\n  g_free (debug_info);\n  set_ui_message (message_string, data);\n  g_free (message_string);\n  gst_element_set_state (data->pipeline, GST_STATE_NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Gathering Media Information via GstDiscoverer in GStreamer (C)\nDESCRIPTION: This C code snippet demonstrates an asynchronous workflow for inspecting media URIs using GStreamer\\'s GstDiscoverer utility from the gstreamer-pbutils library. It defines callback functions for processing discovery results and traverses all streams and substreams to collect and print codec, tags, and metadata details. Main dependencies are gstreamer-1.0 and gstreamer-pbutils-1.0, and key parameters include the URI to inspect (passed via command line or as a default). Output is written to stdout and provides duration, tags, stream info, and whether the stream is seekable. To build, use gcc with pkg-config to link against GStreamer; media on the internet may take extra time to analyze depending on connection. Limitations include basic error handling and no playback—intended purely for informational purposes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <string.h>\\n#include <gst/gst.h>\\n#include <gst/pbutils/pbutils.h>\\n\\n/* Structure to contain all our information, so we can pass it around */\\ntypedef struct _CustomData {\\n  GstDiscoverer *discoverer;\\n  GMainLoop *loop;\\n} CustomData;\\n\\n/* Print a tag in a human-readable format (name: value) */\\nstatic void print_tag_foreach (const GstTagList *tags, const gchar *tag, gpointer user_data) {\\n  GValue val = { 0, };\\n  gchar *str;\\n  gint depth = GPOINTER_TO_INT (user_data);\\n\\n  gst_tag_list_copy_value (&val, tags, tag);\\n\\n  if (G_VALUE_HOLDS_STRING (&val))\\n    str = g_value_dup_string (&val);\\n  else\\n    str = gst_value_serialize (&val);\\n\\n  g_print (\"%*s%s: %s\\n\", 2 * depth, \" \", gst_tag_get_nick (tag), str);\\n  g_free (str);\\n\\n  g_value_unset (&val);\\n}\\n\\n/* Print information regarding a stream */\\nstatic void print_stream_info (GstDiscovererStreamInfo *info, gint depth) {\\n  gchar *desc = NULL;\\n  GstCaps *caps;\\n  const GstTagList *tags;\\n\\n  caps = gst_discoverer_stream_info_get_caps (info);\\n\\n  if (caps) {\\n    if (gst_caps_is_fixed (caps))\\n      desc = gst_pb_utils_get_codec_description (caps);\\n    else\\n      desc = gst_caps_to_string (caps);\\n    gst_caps_unref (caps);\\n  }\\n\\n  g_print (\"%*s%s: %s\\n\", 2 * depth, \" \", gst_discoverer_stream_info_get_stream_type_nick (info), (desc ? desc : \"\"));\\n\\n  if (desc) {\\n    g_free (desc);\\n    desc = NULL;\\n  }\\n\\n  tags = gst_discoverer_stream_info_get_tags (info);\\n  if (tags) {\\n    g_print (\"%*sTags:\\n\", 2 * (depth + 1), \" \");\\n    gst_tag_list_foreach (tags, print_tag_foreach, GINT_TO_POINTER (depth + 2));\\n  }\\n}\\n\\n/* Print information regarding a stream and its substreams, if any */\\nstatic void print_topology (GstDiscovererStreamInfo *info, gint depth) {\\n  GstDiscovererStreamInfo *next;\\n\\n  if (!info)\\n    return;\\n\\n  print_stream_info (info, depth);\\n\\n  next = gst_discoverer_stream_info_get_next (info);\\n  if (next) {\\n    print_topology (next, depth + 1);\\n    gst_discoverer_stream_info_unref (next);\\n  } else if (GST_IS_DISCOVERER_CONTAINER_INFO (info)) {\\n    GList *tmp, *streams;\\n\\n    streams = gst_discoverer_container_info_get_streams (GST_DISCOVERER_CONTAINER_INFO (info));\\n    for (tmp = streams; tmp; tmp = tmp->next) {\\n      GstDiscovererStreamInfo *tmpinf = (GstDiscovererStreamInfo *) tmp->data;\\n      print_topology (tmpinf, depth + 1);\\n    }\\n    gst_discoverer_stream_info_list_free (streams);\\n  }\\n}\\n\\n/* This function is called every time the discoverer has information regarding\\n * one of the URIs we provided.*/\\nstatic void on_discovered_cb (GstDiscoverer *discoverer, GstDiscovererInfo *info, GError *err, CustomData *data) {\\n  GstDiscovererResult result;\\n  const gchar *uri;\\n  const GstTagList *tags;\\n  GstDiscovererStreamInfo *sinfo;\\n\\n  uri = gst_discoverer_info_get_uri (info);\\n  result = gst_discoverer_info_get_result (info);\\n  switch (result) {\\n    case GST_DISCOVERER_URI_INVALID:\\n      g_print (\"Invalid URI '%s'\\n\", uri);\\n      break;\\n    case GST_DISCOVERER_ERROR:\\n      g_print (\"Discoverer error: %s\\n\", err->message);\\n      break;\\n    case GST_DISCOVERER_TIMEOUT:\\n      g_print (\"Timeout\\n\");\\n      break;\\n    case GST_DISCOVERER_BUSY:\\n      g_print (\"Busy\\n\");\\n      break;\\n    case GST_DISCOVERER_MISSING_PLUGINS:{\\n      const GstStructure *s;\\n      gchar *str;\\n\\n      s = gst_discoverer_info_get_misc (info);\\n      str = gst_structure_to_string (s);\\n\\n      g_print (\"Missing plugins: %s\\n\", str);\\n      g_free (str);\\n      break;\\n    }\\n    case GST_DISCOVERER_OK:\\n      g_print (\"Discovered '%s'\\n\", uri);\\n      break;\\n  }\\n\\n  if (result != GST_DISCOVERER_OK) {\\n    g_printerr (\"This URI cannot be played\\n\");\\n    return;\\n  }\\n\\n  /* If we got no error, show the retrieved information */\\n\\n  g_print (\"\\nDuration: %\" GST_TIME_FORMAT \"\\n\", GST_TIME_ARGS (gst_discoverer_info_get_duration (info)));\\n\\n  tags = gst_discoverer_info_get_tags (info);\\n  if (tags) {\\n    g_print (\"Tags:\\n\");\\n    gst_tag_list_foreach (tags, print_tag_foreach, GINT_TO_POINTER (1));\\n  }\\n\\n  g_print (\"Seekable: %s\\n\", (gst_discoverer_info_get_seekable (info) ? \"yes\" : \"no\"));\\n\\n  g_print (\"\\n\");\\n\\n  sinfo = gst_discoverer_info_get_stream_info (info);\\n  if (!sinfo)\\n    return;\\n\\n  g_print (\"Stream information:\\n\");\\n\\n  print_topology (sinfo, 1);\\n\\n  gst_discoverer_stream_info_unref (sinfo);\\n\\n  g_print (\"\\n\");\\n}\\n\\n/* This function is called when the discoverer has finished examining\\n * all the URIs we provided.*/\\nstatic void on_finished_cb (GstDiscoverer *discoverer, CustomData *data) {\\n  g_print (\"Finished discovering\\n\");\\n\\n  g_main_loop_quit (data->loop);\\n}\\n\\nint main (int argc, char **argv) {\\n  CustomData data;\\n  GError *err = NULL;\\n  gchar *uri = \"https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\";\\n\\n  /* if a URI was provided, use it instead of the default one */\\n  if (argc > 1) {\\n    uri = argv[1];\\n  }\\n\\n  /* Initialize custom data structure */\\n  memset (&data, 0, sizeof (data));\\n\\n  /* Initialize GStreamer */\\n  gst_init (&argc, &argv);\\n\\n  g_print (\"Discovering '%s'\\n\", uri);\\n\\n  /* Instantiate the Discoverer */\\n  data.discoverer = gst_discoverer_new (5 * GST_SECOND, &err);\\n  if (!data.discoverer) {\\n    g_print (\"Error creating discoverer instance: %s\\n\", err->message);\\n    g_clear_error (&err);\\n    return -1;\\n  }\\n\\n  /* Connect to the interesting signals */\\n  g_signal_connect (data.discoverer, \"discovered\", G_CALLBACK (on_discovered_cb), &data);\\n  g_signal_connect (data.discoverer, \"finished\", G_CALLBACK (on_finished_cb), &data);\\n\\n  /* Start the discoverer process (nothing to do yet) */\\n  gst_discoverer_start (data.discoverer);\\n\\n  /* Add a request to process asynchronously the URI passed through the command line */\\n  if (!gst_discoverer_discover_uri_async (data.discoverer, uri)) {\\n    g_print (\"Failed to start discovering URI '%s'\\n\", uri);\\n    g_object_unref (data.discoverer);\\n    return -1;\\n  }\\n\\n  /* Create a GLib Main Loop and set it to run, so we can wait for the signals */\\n  data.loop = g_main_loop_new (NULL, FALSE);\\n  g_main_loop_run (data.loop);\\n\\n  /* Stop the discoverer process */\\n  gst_discoverer_stop (data.discoverer);\\n\\n  /* Free resources */\\n  g_object_unref (data.discoverer);\\n  g_main_loop_unref (data.loop);\\n\\n  return 0;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pull-Mode Task Function for GStreamer Element in C\nDESCRIPTION: This snippet defines a GStreamer element's pull-mode loop function, handling input reading and output buffer pushing using random access over sink pads. It reads fixed-size blocks from an upstream pad using gst_pad_pull_range, queries duration, detects end-of-stream, handles errors, and pushes buffers downstream. The function is intended as a GstTaskFunction launched when the pad is activated in pull mode. Required dependencies are GStreamer and a valid element structure with srcpad, sinkpad, and offset members. Inputs include the filter object; outputs are data flow and potential end-of-stream events. Limitations are handling only fixed block sizes and basic EOS/flow error cases. The approach is suitable for custom elements that need precise read control in a pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/scheduling.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n    #define BLOCKSIZE 2048\n\n    static void\n    gst_my_filter_loop (GstMyFilter * filter)\n    {\n      GstFlowReturn ret;\n      guint64 len;\n      GstBuffer *buf = NULL;\n\n      if (!gst_pad_query_duration (filter->sinkpad, GST_FORMAT_BYTES, &len)) {\n        GST_DEBUG_OBJECT (filter, \\\"failed to query duration, pausing\\\");\n        goto stop;\n      }\n\n       if (filter->offset >= len) {\n        GST_DEBUG_OBJECT (filter, \\\"at end of input, sending EOS, pausing\\\");\n        gst_pad_push_event (filter->srcpad, gst_event_new_eos ());\n        goto stop;\n      }\n\n      /* now, read BLOCKSIZE bytes from byte offset filter->offset */\n      ret = gst_pad_pull_range (filter->sinkpad, filter->offset,\n          BLOCKSIZE, &buf);\n\n      if (ret != GST_FLOW_OK) {\n        GST_DEBUG_OBJECT (filter, \\\"pull_range failed: %s\\\", gst_flow_get_name (ret));\n        goto stop;\n      }\n\n      /* now push buffer downstream */\n      ret = gst_pad_push (filter->srcpad, buf);\n\n      buf = NULL; /* gst_pad_push() took ownership of buffer */\n\n      if (ret != GST_FLOW_OK) {\n        GST_DEBUG_OBJECT (filter, \\\"pad_push failed: %s\\\", gst_flow_get_name (ret));\n        goto stop;\n      }\n\n      /* everything is fine, increase offset and wait for us to be called again */\n      filter->offset += BLOCKSIZE;\n      return;\n\n    stop:\n      GST_DEBUG_OBJECT (filter, \\\"pausing task\\\");\n      gst_pad_pause_task (filter->sinkpad);\n    }\n```\n\n----------------------------------------\n\nTITLE: URI Format Examples in GStreamer\nDESCRIPTION: Examples of supported URI formats in GStreamer for accessing different types of media sources. These URIs can be used with gst_element_make_from_uri() function along with GST_URI_SRC or GST_URI_SINK type parameters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/interfaces.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfile:///<path>/<file>\nhttp://<host>/<path>/<file>\nrtsp://<host>/<path>\ndvb://<CHANNEL>\n...\n```\n\n----------------------------------------\n\nTITLE: Attaching GstControlSource to a Property in GStreamer 1.0\nDESCRIPTION: Example demonstrating how to attach a control source to a property in GStreamer 1.0. This replaces the old controller API that was moved and integrated into GstObject.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\ngst_object_add_control_binding (object,\n  gst_direct_control_binding_new (object, property_name, control_source));\n```\n\n----------------------------------------\n\nTITLE: Testing Video Display\nDESCRIPTION: Command to display a test video pattern using videotestsrc\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/using.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 videotestsrc ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Handling GStreamer Bus Messages in C\nDESCRIPTION: This function processes messages from the GStreamer bus, including error handling, end-of-stream detection, and state change notifications. It's crucial for managing the lifecycle of the media playback.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nstatic gboolean handle_message (GstBus *bus, GstMessage *msg, CustomData *data) {\n  GError *err;\n  gchar *debug_info;\n\n  switch (GST_MESSAGE_TYPE (msg)) {\n    case GST_MESSAGE_ERROR:\n      gst_message_parse_error (msg, &err, &debug_info);\n      g_printerr (\"Error received from element %s: %s\\n\", GST_OBJECT_NAME (msg->src), err->message);\n      g_printerr (\"Debugging information: %s\\n\", debug_info ? debug_info : \"none\");\n      g_clear_error (&err);\n      g_free (debug_info);\n      g_main_loop_quit (data->main_loop);\n      break;\n    case GST_MESSAGE_EOS:\n      g_print (\"End-Of-Stream reached.\\n\");\n      g_main_loop_quit (data->main_loop);\n      break;\n    case GST_MESSAGE_STATE_CHANGED: {\n      GstState old_state, new_state, pending_state;\n      gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n      if (GST_MESSAGE_SRC (msg) == GST_OBJECT (data->playbin)) {\n        if (new_state == GST_STATE_PLAYING) {\n          analyze_streams (data);\n        }\n      }\n    } break;\n  }\n\n  return TRUE;\n}\n```\n\n----------------------------------------\n\nTITLE: GstMemory Structure Definition in C\nDESCRIPTION: Core structure definition for GstMemory object that manages multimedia data buffers. Contains fields for memory allocation, sizing, and hierarchy management.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/memory.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct GstMemory {\n  GstMiniObject   mini_object;\n\n  GstAllocator   *allocator;\n\n  GstMemory      *parent;\n  gsize           maxsize;\n  gsize           align;\n  gsize           offset;\n  gsize           size;\n};\n```\n\n----------------------------------------\n\nTITLE: Time Widget Text Formatting for GStreamer iOS Player\nDESCRIPTION: Updates a text widget to display current playback position and duration in HH:mm:ss format. Converts millisecond values to human-readable time strings.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void) updateTimeWidget\n{\n    NSInteger position = time_slider.value / 1000;\n    NSInteger duration = time_slider.maximumValue / 1000;\n    NSString *position_txt = @\" -- \";\n    NSString *duration_txt = @\" -- \";\n\n    if (duration > 0) {\n        NSUInteger hours = duration / (60 * 60);\n        NSUInteger minutes = (duration / 60) % 60;\n        NSUInteger seconds = duration % 60;\n\n        duration_txt = [NSString stringWithFormat:@\"%02u:%02u:%02u\", hours, minutes, seconds];\n    }\n    if (position > 0) {\n        NSUInteger hours = position / (60 * 60);\n        NSUInteger minutes = (position / 60) % 60;\n        NSUInteger seconds = position % 60;\n\n        position_txt = [NSString stringWithFormat:@\"%02u:%02u:%02u\", hours, minutes, seconds];\n    }\n\n    NSString *text = [NSString stringWithFormat:@\"%@ / %@\",\n                      position_txt, duration_txt];\n\n    time_label.text = text;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GStreamer Tag Writer Element in C\nDESCRIPTION: This C code demonstrates a basic GStreamer filter element implementing the `GstTagSetter` interface to write tags. It includes type registration with the interface, a function (`gst_my_filter_write_tag`) to format and push individual tags as buffers, and a task function (`gst_my_filter_task_func`) that pulls data/events, merges incoming pipeline tags (`GST_EVENT_TAG`) with application-set tags, and writes the combined list downstream. Note: The example is marked as outdated for GStreamer 1.0.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/tagging.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nGType\ngst_my_filter_get_type (void)\n{\n[..]\n    static const GInterfaceInfo tag_setter_info = {\n      NULL,\n      NULL,\n      NULL\n    };\n[..]\n    g_type_add_interface_static (my_filter_type,\n                 GST_TYPE_TAG_SETTER,\n                 &tag_setter_info);\n[..]\n}\n\nstatic void\ngst_my_filter_init (GstMyFilter *filter)\n{\n[..]\n}\n\n/*\n * Write one tag.\n */\n\nstatic void\ngst_my_filter_write_tag (const GstTagList *taglist,\n             const gchar      *tagname,\n             gpointer          data)\n{\n  GstMyFilter *filter = GST_MY_FILTER (data);\n  GstBuffer *buffer;\n  guint num_values = gst_tag_list_get_tag_size (list, tag_name), n;\n  const GValue *from;\n  GValue to = { 0 };\n\n  g_value_init (&to, G_TYPE_STRING);\n\n  for (n = 0; n < num_values; n++) {\n    guint8 * data;\n    gsize size;\n\n    from = gst_tag_list_get_value_index (taglist, tagname, n);\n    g_value_transform (from, &to);\n\n    data = g_strdup_printf (\"%s:%s\", tagname,\n        g_value_get_string (&to));\n    size = strlen (data);\n\n    buf = gst_buffer_new_wrapped (data, size);\n    gst_pad_push (filter->srcpad, buf);\n  }\n\n  g_value_unset (&to);\n}\n\nstatic void\ngst_my_filter_task_func (GstElement *element)\n{\n  GstMyFilter *filter = GST_MY_FILTER (element);\n  GstTagSetter *tagsetter = GST_TAG_SETTER (element);\n  GstData *data;\n  GstEvent *event;\n  gboolean eos = FALSE;\n  GstTagList *taglist = gst_tag_list_new ();\n\n  while (!eos) {\n    data = gst_pad_pull (filter->sinkpad);\n\n    /* We're not very much interested in data right now */\n    if (GST_IS_BUFFER (data))\n      gst_buffer_unref (GST_BUFFER (data));\n    event = GST_EVENT (data);\n\n    switch (GST_EVENT_TYPE (event)) {\n      case GST_EVENT_TAG:\n        gst_tag_list_insert (taglist, gst_event_tag_get_list (event),\n                 GST_TAG_MERGE_PREPEND);\n        gst_event_unref (event);\n        break;\n      case GST_EVENT_EOS:\n        eos = TRUE;\n        gst_event_unref (event);\n        break;\n      default:\n        gst_pad_event_default (filter->sinkpad, event);\n        break;\n    }\n  }\n\n  /* merge tags with the ones retrieved from the application */\n  if ((gst_tag_setter_get_tag_list (tagsetter)) {\n    gst_tag_list_insert (taglist,\n             gst_tag_setter_get_tag_list (tagsetter),\n             gst_tag_setter_get_tag_merge_mode (tagsetter));\n  }\n\n  /* write tags */\n  gst_tag_list_foreach (taglist, gst_my_filter_write_tag, filter);\n\n  /* signal EOS */\n  gst_pad_push (filter->srcpad, gst_event_new (GST_EVENT_EOS));\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Events to GStreamer Elements\nDESCRIPTION: This simple line sends the previously created seek event to the video sink. This causes the pipeline to change its playback rate as specified in the event.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/playback-speed.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n/* Send the event */\ngst_element_send_event (data->video_sink, seek_event);\n```\n\n----------------------------------------\n\nTITLE: Initializing GStreamer Plugin in C\nDESCRIPTION: This snippet shows the plugin registration macro GST_PLUGIN_DEFINE which is used to define the entry point for a GStreamer plugin. It includes version information, license, package, origin, and initialization function details.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/templates/C.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n<div class=\"gi-lang-c\">\n```\n\n----------------------------------------\n\nTITLE: Defining GstMeta Base Structure in C\nDESCRIPTION: Core structure definition for GstMeta that serves as a common header for all metadata information that can be attached to a buffer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/meta.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct _GstMeta {\n  GstMetaFlags       flags;\n  const GstMetaInfo *info;    /* tag and info for the meta item */\n};\n```\n\n----------------------------------------\n\nTITLE: State Change Process for GstPipeline in GStreamer\nDESCRIPTION: Describes the state change process for GstPipeline, including actions performed during transitions between NULL, READY, PAUSED, and PLAYING states. It covers bus flushing, running time management, clock selection, and latency calculation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstpipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `NULL` → `READY`:\n  - set the bus to non-flushing\n- `READY` → `PAUSED`:\n  - reset the `running_time` to 0\n- `PAUSED` → `PLAYING`:\n  - Select a clock.\n  - calculate `base_time` using the `running_time`.\n  - calculate and distribute latency.\n  - set clock and `base_time` on all elements before performing the state\n    change.\n- `PLAYING` → `PAUSED`:\n  - calculate the `running_time` when the pipeline was `PAUSED`.\n- `READY` → `NULL`:\n  - set the bus to flushing (when auto-flushing is enabled)\n```\n\n----------------------------------------\n\nTITLE: Updating Time Slider Position in iOS GStreamer App\nDESCRIPTION: Method to update the time slider position based on current playback state. Handles UI updates through dispatch_async to ensure thread safety and prevents updates while user is dragging.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n-(void) setCurrentPosition:(NSInteger)position duration:(NSInteger)duration\n{\n    /* Ignore messages from the pipeline if the time sliders is being dragged */\n    if (dragging_slider) return;\n\n    dispatch_async(dispatch_get_main_queue(), ^{\n        time_slider.maximumValue = duration;\n        time_slider.value = position;\n        [self updateTimeWidget];\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Pad Probes in GStreamer\nDESCRIPTION: Core functions for adding and removing probes on GStreamer pads. The add function accepts a probe type mask and callback, returning a unique identifier that can be used for removal.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/probes.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngulong  gst_pad_add_probe    (GstPad *pad,\n                                  GstPadProbeType mask,\n                                  GstPadProbeCallback callback,\n                                  gpointer user_data,\n                                  GDestroyNotify destroy_data);\n```\n\nLANGUAGE: c\nCODE:\n```\nvoid    gst_pad_remove_probe (GstPad *pad, gulong id);\n```\n\n----------------------------------------\n\nTITLE: String Memory Management in GStreamer\nDESCRIPTION: Demonstrates proper string handling in GStreamer where the caller owns the returned string and must free it after use. The function makes a copy of the string and the caller is responsible for freeing the memory using g_free().\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/standards.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nname = gst_element_get_name (element);   /* copy of name is made */\n.. use name ..\ng_free (name);                           /* free after usage */\n```\n\n----------------------------------------\n\nTITLE: Handling Pipeline Events using GstBus in GStreamer 0.10 (C)\nDESCRIPTION: GStreamer 0.10 introduces the `GstBus` as the standard mechanism for applications to receive pipeline messages (errors, EOS, etc.). This replaces the 0.8 approach of using signal handlers directly on elements or bins. The `GstBus` ensures messages are delivered in the application's main loop context (e.g., a `GMainLoop`), eliminating the need for manual thread-safety measures like using `g_idle_add()` within signal handlers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/porting.md#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nGstBus\n```\n\nLANGUAGE: C\nCODE:\n```\ng_idle_add ()\n```\n\n----------------------------------------\n\nTITLE: Implementing Autoplug Continue Callback in GStreamer\nDESCRIPTION: This code snippet shows the function signature for the 'autoplug-continue' signal callback in GstDecodeBin. It allows the application to control whether autoplugging should continue for a given pad and caps.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/decodebin.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngboolean user_function (GstElement * decodebin, GstPad *pad, GstCaps * caps)\n```\n\n----------------------------------------\n\nTITLE: Initializing GStreamer and Creating Playbin Pipeline in C\nDESCRIPTION: This snippet sets up a basic GStreamer pipeline using playbin. It initializes GStreamer, creates a playbin element, and sets the URI of the media to be played.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Initialize GStreamer */\ngst_init (&argc, &argv);\n\n/* Create the elements */\nplaybin = gst_element_factory_make (\"playbin\", \"playbin\");\n\nif (!playbin) {\n  g_printerr (\"Not all elements could be created.\\n\");\n  return -1;\n}\n\n/* Set the URI to play */\ng_object_set (playbin, \"uri\", \"https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm\", NULL);\n```\n\n----------------------------------------\n\nTITLE: Querying Current Position and Duration in GStreamer Pipeline with C\nDESCRIPTION: This snippet shows how to query the current position and duration of a media stream in a GStreamer pipeline using gst_element_query_position() and gst_element_query_duration(). It also demonstrates error handling for these queries.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/time-management.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n/* Query the current position of the stream */\nif (!gst_element_query_position (data.pipeline, GST_FORMAT_TIME, &current)) {\n  g_printerr (\"Could not query current position.\\n\");\n}\n\n/* If we didn't know it yet, query the stream duration */\nif (!GST_CLOCK_TIME_IS_VALID (data.duration)) {\n  if (!gst_element_query_duration (data.pipeline, GST_FORMAT_TIME, &data.duration)) {\n     g_printerr (\"Could not query current duration.\\n\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Video using RTP with GStreamer\nDESCRIPTION: Demonstrates how to stream video using RTP and network elements with GStreamer for both transmitter and receiver.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 v4l2src ! queue ! videoconvert ! x264enc tune=zerolatency key-int-max=15 ! video/x-h264,profile=main ! rtph264pay pt=96 config-interval=-1 ! udpsink host=192.168.1.1 port=5000\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 udpsrc port=5000 ! application/x-rtp,clock-rate=90000,payload=96 ! rtpjitterbuffer ! rtph264depay ! h264parse ! avdec_h264 ! videoconvert ! xvimagesink\n```\n\n----------------------------------------\n\nTITLE: GstStream Function Prototypes in C\nDESCRIPTION: Declares function prototypes for creating, getting, setting, and manipulating GstStream objects and related events.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-selection.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nGstStream *gst_stream_new(...);\n\nGstStream *gst_stream_get_*(...);\n\nGstStream *gst_stream_set_*(...);\n\nGstStream *gst_event_set_stream(GstEvent *stream_start, GstStream *stream)\n\nvoid gst_event_parse_stream (GstEvent * event, GstStream ** stream);\n```\n\n----------------------------------------\n\nTITLE: Serializing Video Alignment into GstStructure (GStreamer, C)\nDESCRIPTION: Shows creating a GstStructure to serialize video alignment information for buffer layout negotiation. This snippet, used in propose_allocation of hardware encoding elements, packs alignment parameters such as paddings and stride aligns into a named structure. Dependencies include GStreamer and correct definition of the align variable as a GstVideoAlignment object. The structure can be attached to ALLOCATION query as meta-parameters, facilitating hardware-aware buffer negotiations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nparams = gst_structure_new (\"video-meta\",\n    \"padding-top\", G_TYPE_UINT, align.padding_top,\n    \"padding-bottom\", G_TYPE_UINT, align.padding_bottom,\n    \"padding-left\", G_TYPE_UINT, align.padding_left,\n    \"padding-right\", G_TYPE_UINT, align.padding_right,\n    \"stride-align0\", G_TYPE_UINT, align->stride_align[0],\n    \"stride-align1\", G_TYPE_UINT, align->stride_align[1],\n    \"stride-align2\", G_TYPE_UINT, align->stride_align[2],\n    \"stride-align3\", G_TYPE_UINT, align->stride_align[3],\n    NULL);\n```\n\n----------------------------------------\n\nTITLE: Implementing Java Class Initialization in C for GStreamer Android Integration\nDESCRIPTION: Sets up the JNI environment by retrieving method and field IDs needed for C-to-Java communication, which allows C code to access Java fields and call Java methods.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_28\n\nLANGUAGE: c\nCODE:\n```\n/* Static class initializer: retrieve method and field IDs */\nstatic jboolean gst_native_class_init (JNIEnv* env, jclass klass) {\n  custom_data_field_id = (*env)->GetFieldID (env, klass, \"native_custom_data\", \"J\");\n  set_message_method_id = (*env)->GetMethodID (env, klass, \"setMessage\", \"(Ljava/lang/String;)V\");\n  on_gstreamer_initialized_method_id = (*env)->GetMethodID (env, klass, \"onGStreamerInitialized\", \"()V\");\n\n  if (!custom_data_field_id || !set_message_method_id || !on_gstreamer_initialized_method_id) {\n    /* We emit this message through the Android log instead of the GStreamer log because the later\n     * has not been initialized yet.\n     */\n    __android_log_print (ANDROID_LOG_ERROR, \"tutorial-2\", \"The calling class does not implement all necessary interface methods\");\n    return JNI_FALSE;\n  }\n  return JNI_TRUE;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the iOS View Controller Interface with Video Container\nDESCRIPTION: Header file for the ViewController class that defines outlets for UI elements including the video container view and its constraints. Implements the GStreamerBackendDelegate protocol for communication with the GStreamer backend.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/video.md#2025-04-23_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import <UIKit/UIKit.h>\n#import \"GStreamerBackendDelegate.h\"\n\n@interface ViewController : UIViewController <GStreamerBackendDelegate> {\n    IBOutlet UILabel *message_label;\n    IBOutlet UIBarButtonItem *play_button;\n    IBOutlet UIBarButtonItem *pause_button;\n    IBOutlet UIView *video_view;\n    IBOutlet UIView *video_container_view;\n    IBOutlet NSLayoutConstraint *video_width_constraint;\n    IBOutlet NSLayoutConstraint *video_height_constraint;\n}\n\n-(IBAction) play:(id)sender;\n-(IBAction) pause:(id)sender;\n\n/* From GStreamerBackendDelegate */\n-(void) gstreamerInitialized;\n-(void) gstreamerSetUIMessage:(NSString *)message;\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Main Qt GStreamer Application Implementation\nDESCRIPTION: Complete implementation of an audio processing application using Qt and GStreamer. Includes pipeline setup, buffer handling, and audio processing logic.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/using-appsink-appsrc-in-qt.md#2025-04-23_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n#include <iostream>\n#include <QtCore/QCoreApplication>\n#include <QGlib/Error>\n#include <QGlib/Connect>\n#include <QGst/Init>\n#include <QGst/Bus>\n#include <QGst/Pipeline>\n#include <QGst/Parse>\n#include <QGst/Message>\n#include <QGst/Utils/ApplicationSink>\n#include <QGst/Utils/ApplicationSource>\n\nclass MySink : public QGst::Utils::ApplicationSink\n{\npublic:\n    MySink(QGst::Utils::ApplicationSource *src)\n        : QGst::Utils::ApplicationSink(), m_src(src) {}\nprotected:\n    virtual void eos()\n    {\n        m_src->endOfStream();\n    }\n    virtual QGst::FlowReturn newBuffer()\n    {\n        m_src->pushBuffer(pullBuffer());\n        return QGst::FlowOk;\n    }\nprivate:\n    QGst::Utils::ApplicationSource *m_src;\n};\n\nclass Player : public QCoreApplication\n{\npublic:\n    Player(int argc, char **argv);\n    ~Player();\nprivate:\n    void onBusMessage(const QGst::MessagePtr & message);\nprivate:\n    QGst::Utils::ApplicationSource m_src;\n    MySink m_sink;\n    QGst::PipelinePtr pipeline1;\n    QGst::PipelinePtr pipeline2;\n};\nPlayer::Player(int argc, char **argv)\n    : QCoreApplication(argc, argv), m_sink(&m_src)\n{\n    QGst::init(&argc, &argv);\n    if (argc <= 1) {\n        std::cerr << \"Usage: \" << argv[0] << \" <audio_file>\" << std::endl;\n        std::exit(1);\n    }\n    const char *caps = \"audio/x-raw-int,channels=1,rate=8000,\"\n                       \"signed=(boolean)true,width=16,depth=16,endianness=1234\";\n    /* source pipeline */\n    QString pipe1Descr = QString(\"filesrc location=\\\"%1\\\" ! \"\n                                 \"decodebin2 ! \"\n                                 \"audioconvert ! \"\n                                 \"audioresample ! \"\n                                 \"appsink name=\\\"mysink\\\" caps=\\\"%2\\\"\").arg(argv[1], caps);\n    pipeline1 = QGst::Parse::launch(pipe1Descr).dynamicCast<QGst::Pipeline>();\n    m_sink.setElement(pipeline1->getElementByName(\"mysink\"));\n    QGlib::connect(pipeline1->bus(), \"message::error\", this, &Player::onBusMessage);\n    pipeline1->bus()->addSignalWatch();\n    /* sink pipeline */\n    QString pipe2Descr = QString(\"appsrc name=\\\"mysrc\\\" caps=\\\"%1\\\" ! autoaudiosink\").arg(caps);\n    pipeline2 = QGst::Parse::launch(pipe2Descr).dynamicCast<QGst::Pipeline>();\n    m_src.setElement(pipeline2->getElementByName(\"mysrc\"));\n    QGlib::connect(pipeline2->bus(), \"message\", this, &Player::onBusMessage);\n    pipeline2->bus()->addSignalWatch();\n    /* start playing */\n    pipeline1->setState(QGst::StatePlaying);\n    pipeline2->setState(QGst::StatePlaying);\n}\nPlayer::~Player()\n{\n    pipeline1->setState(QGst::StateNull);\n    pipeline2->setState(QGst::StateNull);\n}\nvoid Player::onBusMessage(const QGst::MessagePtr & message)\n{\n    switch (message->type()) {\n    case QGst::MessageEos:\n        quit();\n        break;\n    case QGst::MessageError:\n        qCritical() << message.staticCast<QGst::ErrorMessage>()->error();\n        break;\n    default:\n        break;\n    }\n}\n\nint main(int argc, char **argv)\n{\n    Player p(argc, argv);\n    return p.exec();\n}\n```\n\n----------------------------------------\n\nTITLE: UI Refresh Timer Setup for GStreamer Android Player\nDESCRIPTION: Creates a periodic timer to update the UI with playback position. This code sets up a GLib timeout source that calls refresh_ui every 250ms to update the playback position display.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_35\n\nLANGUAGE: c\nCODE:\n```\ntimeout_source = g_timeout_source_new (250);\ng_source_set_callback (timeout_source, (GSourceFunc)refresh_ui, data, NULL);\ng_source_attach (timeout_source, data->context);\ng_source_unref (timeout_source);\n```\n\n----------------------------------------\n\nTITLE: GStreamer Property Control Example\nDESCRIPTION: Example code reference showing how elements should call gst_object_sync_values() to enable property control synchronization during processing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/controller.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngst_object_sync_values (self, timestamp)\n```\n\n----------------------------------------\n\nTITLE: Parsing GStreamer Pipeline String for Video Playback in C\nDESCRIPTION: This code uses gst_parse_launch to create a GStreamer pipeline from a string description. The pipeline consists of a videotestsrc (video source), warptv (video effect), videoconvert (color space conversion), and autovideosink (automatically selects the appropriate video sink for the platform, which will be configured for Android native window rendering later).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_12\n\nLANGUAGE: c\nCODE:\n```\ndata->pipeline = gst_parse_launch(\"videotestsrc ! warptv ! videoconvert ! autovideosink \", &error);\n```\n\n----------------------------------------\n\nTITLE: Concurrent List Iteration with Cookie Mechanism in GStreamer C\nDESCRIPTION: Demonstrates a technique for safely iterating a list in a concurrent environment using a cookie mechanism to detect and handle concurrent modifications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/MT-refcounting.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nGST_OBJECT_LOCK (lock);\n/* grab list and cookie */\ncookie = object->list_cookie;\nlist = object->list;\nwhile (list) {\n  GstObject *item = GST_OBJECT (list->data);\n  /* need to ref the item before releasing the lock */\n  gst_object_ref (item);\n  GST_OBJECT_UNLOCK (lock);\n\n  ... use/change item here...\n\n  /* release item here */\n  gst_object_unref (item);\n\n  GST_OBJECT_LOCK (lock);\n  if (cookie != object->list_cookie) {\n    /* handle rollback caused by concurrent modification\n     * of the list here */\n\n    ...rollback changes to items...\n\n    /* grab new cookie and list */\n    cookie = object->list_cookie;\n    list = object->list;\n  }\n  else {\n    list = g_list_next (list);\n  }\n}\nGST_OBJECT_UNLOCK (lock);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Multithreaded GStreamer Pipeline with Audio-Video Branching - C\nDESCRIPTION: This C code builds and runs a GStreamer pipeline that generates a synthetic tone, splits it into two branches using the 'tee' element, and processes each branch in parallel threads via 'queue' elements—one for audio playback and one for waveform video visualization. It demonstrates manual linking of 'request' pads, configuration of multiple elements, state transitions, and proper resource management. Dependencies include the GStreamer 1.0 development packages, and key parameters (like frequency and visualization style) can be adjusted via 'g_object_set'. Expected input is none (self-generating audio), while outputs are system audio and a waveform window; the code must be compiled and linked using `pkg-config --cflags --libs gstreamer-1.0`, and is designed for educational and reference purposes, not high-performance or production use.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/multithreading-and-pad-availability.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\\n\\nint main(int argc, char *argv[]) {\\n  GstElement *pipeline, *audio_source, *tee, *audio_queue, *audio_convert, *audio_resample, *audio_sink;\\n  GstElement *video_queue, *visual, *video_convert, *video_sink;\\n  GstBus *bus;\\n  GstMessage *msg;\\n  GstPad *tee_audio_pad, *tee_video_pad;\\n  GstPad *queue_audio_pad, *queue_video_pad;\\n\\n  /* Initialize GStreamer */\\n  gst_init (&argc, &argv);\\n\\n  /* Create the elements */\\n  audio_source = gst_element_factory_make (\"audiotestsrc\", \"audio_source\");\\n  tee = gst_element_factory_make (\"tee\", \"tee\");\\n  audio_queue = gst_element_factory_make (\"queue\", \"audio_queue\");\\n  audio_convert = gst_element_factory_make (\"audioconvert\", \"audio_convert\");\\n  audio_resample = gst_element_factory_make (\"audioresample\", \"audio_resample\");\\n  audio_sink = gst_element_factory_make (\"autoaudiosink\", \"audio_sink\");\\n  video_queue = gst_element_factory_make (\"queue\", \"video_queue\");\\n  visual = gst_element_factory_make (\"wavescope\", \"visual\");\\n  video_convert = gst_element_factory_make (\"videoconvert\", \"csp\");\\n  video_sink = gst_element_factory_make (\"autovideosink\", \"video_sink\");\\n\\n  /* Create the empty pipeline */\\n  pipeline = gst_pipeline_new (\"test-pipeline\");\\n\\n  if (!pipeline || !audio_source || !tee || !audio_queue || !audio_convert || !audio_resample || !audio_sink ||\\n      !video_queue || !visual || !video_convert || !video_sink) {\\n    g_printerr (\"Not all elements could be created.\\n\");\\n    return -1;\\n  }\\n\\n  /* Configure elements */\\n  g_object_set (audio_source, \"freq\", 215.0f, NULL);\\n  g_object_set (visual, \"shader\", 0, \"style\", 1, NULL);\\n\\n  /* Link all elements that can be automatically linked because they have \\\"Always\\\" pads */\\n  gst_bin_add_many (GST_BIN (pipeline), audio_source, tee, audio_queue, audio_convert, audio_resample, audio_sink,\\n      video_queue, visual, video_convert, video_sink, NULL);\\n  if (gst_element_link_many (audio_source, tee, NULL) != TRUE ||\\n      gst_element_link_many (audio_queue, audio_convert, audio_resample, audio_sink, NULL) != TRUE ||\\n      gst_element_link_many (video_queue, visual, video_convert, video_sink, NULL) != TRUE) {\\n    g_printerr (\"Elements could not be linked.\\n\");\\n    gst_object_unref (pipeline);\\n    return -1;\\n  }\\n\\n  /* Manually link the Tee, which has \\\"Request\\\" pads */\\n  tee_audio_pad = gst_element_request_pad_simple (tee, \"src_%u\");\\n  g_print (\"Obtained request pad %s for audio branch.\\n\", gst_pad_get_name (tee_audio_pad));\\n  queue_audio_pad = gst_element_get_static_pad (audio_queue, \"sink\");\\n  tee_video_pad = gst_element_request_pad_simple (tee, \"src_%u\");\\n  g_print (\"Obtained request pad %s for video branch.\\n\", gst_pad_get_name (tee_video_pad));\\n  queue_video_pad = gst_element_get_static_pad (video_queue, \"sink\");\\n  if (gst_pad_link (tee_audio_pad, queue_audio_pad) != GST_PAD_LINK_OK ||\\n      gst_pad_link (tee_video_pad, queue_video_pad) != GST_PAD_LINK_OK) {\\n    g_printerr (\"Tee could not be linked.\\n\");\\n    gst_object_unref (pipeline);\\n    return -1;\\n  }\\n  gst_object_unref (queue_audio_pad);\\n  gst_object_unref (queue_video_pad);\\n\\n  /* Start playing the pipeline */\\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\\n\\n  /* Wait until error or EOS */\\n  bus = gst_element_get_bus (pipeline);\\n  msg = gst_bus_timed_pop_filtered (bus, GST_CLOCK_TIME_NONE, GST_MESSAGE_ERROR | GST_MESSAGE_EOS);\\n\\n  /* Release the request pads from the Tee, and unref them */\\n  gst_element_release_request_pad (tee, tee_audio_pad);\\n  gst_element_release_request_pad (tee, tee_video_pad);\\n  gst_object_unref (tee_audio_pad);\\n  gst_object_unref (tee_video_pad);\\n\\n  /* Free resources */\\n  if (msg != NULL)\\n    gst_message_unref (msg);\\n  gst_object_unref (bus);\\n  gst_element_set_state (pipeline, GST_STATE_NULL);\\n\\n  gst_object_unref (pipeline);\\n  return 0;\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing GStreamer Element Properties Using GObject\nDESCRIPTION: Demonstrates how to access and manipulate GStreamer element properties using the GObject property system. Shows retrieval of the element's name property.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/elements.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nint\nmain (int   argc,\n      char *argv[])\n{\n  GstElement *element;\n  gchar *name;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n\n  /* create element */\n  element = gst_element_factory_make (\"fakesrc\", \"source\");\n\n  /* get name */\n  g_object_get (G_OBJECT (element), \"name\", &name, NULL);\n  g_print (\"The name of the element is '%s'.\\n\", name);\n  g_free (name);\n\n  gst_object_unref (GST_OBJECT (element));\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Check Media Size and Notify Application via JNI in C\nDESCRIPTION: Implements the `check_media_size` function, which retrieves the video dimensions from the GStreamer pipeline. It gets the `video-sink` element from the pipeline, accesses its sink pad, retrieves the negotiated GstCaps, and parses them using `gst_video_format_parse_caps` to get width and height. It also attempts to parse the pixel aspect ratio using `gst_video_parse_caps_pixel_aspect_ratio` and adjusts the width accordingly. Finally, it calls the Java method `on_media_size_changed_method_id` via JNI to inform the application.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_25\n\nLANGUAGE: c\nCODE:\n```\n/* Retrieve the video sink's Caps and tell the application about the media size */\nstatic void check_media_size (CustomData *data) {\n  JNIEnv *env = get_jni_env ();\n  GstElement *video_sink;\n  GstPad *video_sink_pad;\n  GstCaps *caps;\n  GstVideoFormat fmt;\n  int width;\n  int height;\n\n  /* Retrieve the Caps at the entrance of the video sink */\n  g_object_get (data->pipeline, \"video-sink\", &video_sink, NULL);\n  video_sink_pad = gst_element_get_static_pad (video_sink, \"sink\");\n  caps = gst_pad_get_negotiated_caps (video_sink_pad);\n\n  if (gst_video_format_parse_caps(caps, &fmt, &width, &height)) {\n    int par_n, par_d;\n    if (gst_video_parse_caps_pixel_aspect_ratio (caps, &par_n, &par_d)) {\n      width = width * par_n / par_d;\n    }\n    GST_DEBUG (\"Media size is %dx%d, notifying application\", width, height);\n\n    // Missing closing bracket and potential JNI call in original snippet, assuming typical structure\n    // (*env)->CallVoidMethod(env, data->app, on_media_size_changed_method_id, width, height);\n    // if ((*env)->ExceptionCheck (env)) {\n    //   GST_ERROR (\"Failed to call Java method\");\n    //   (*env)->ExceptionClear (env);\n    // }\n  }\n\n  // gst_caps_unref(caps); // Should unref caps\n  // gst_object_unref(video_sink_pad); // Should unref pad\n  // gst_object_unref(video_sink); // Should unref sink\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing a GStreamer Pipeline for Ogg/Vorbis Playback\nDESCRIPTION: ASCII diagram illustrating a simple GStreamer pipeline for playing an Ogg/Vorbis audio file. It shows the flow of data through elements like filesrc, oggdemux, vorbisdec, and alsasink.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+-----------------------------------------------------------+\n|    ----------> downstream ------------------->            |\n|                                                           |\n| pipeline                                                  |\n| +---------+   +----------+   +-----------+   +----------+ |\n| | filesrc |   | oggdemux |   | vorbisdec |   | alsasink | |\n| |        src-sink       src-sink        src-sink        | |\n| +---------+   +----------+   +-----------+   +----------+ |\n|                                                           |\n|    <---------< upstream <-------------------<             |\n+-----------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Using Filtered Caps in GStreamer\nDESCRIPTION: Shows examples of using filtered caps to specify video formats and audio parameters in GStreamer pipelines.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 videotestsrc ! 'video/x-raw,format=YUY2;video/x-raw,format=YV12' ! xvimagesink\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 v4l2src ! image/jpeg ! queue ! decodebin3 ! videoconvert ! autovideosink\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 pulsesrc !  'audio/x-raw,rate=[32000,64000],format={S16LE,S24LE,S32LE}' ! wavenc ! filesink location=recording.wav\n```\n\n----------------------------------------\n\nTITLE: Setting Media URI in GStreamer iOS Backend\nDESCRIPTION: Method that sets the URI property of the playbin pipeline. It converts the NSString URI to a C string and uses g_object_set to update the pipeline's URI property.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_14\n\nLANGUAGE: Objective-C\nCODE:\n```\n-(void) setUri:(NSString*)uri\n{\n    const char *char_uri = [uri UTF8String];\n    g_object_set(pipeline, \"uri\", char_uri, NULL);\n    GST_DEBUG (\"URI set to %s\", char_uri);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Control Points\nDESCRIPTION: Sets timed control points for parameter animation, defining a transition from 0.0 to 1.0 over one second.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/dparams.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nGstTimedValueControlSource *tv_csource = (GstTimedValueControlSource *)csource;\ngst_timed_value_control_source_set (tv_csource, 0 * GST_SECOND, 0.0);\ngst_timed_value_control_source_set (tv_csource, 1 * GST_SECOND, 1.0);\n```\n\n----------------------------------------\n\nTITLE: Initializing EncodeBin in GStreamer C Code\nDESCRIPTION: This snippet demonstrates how to create and configure an EncodeBin element in GStreamer, setting its profile and linking it to a file sink. It also shows how to request a video pad and link it to a source.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/encoding.txt#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nencbin = gst_element_factory_make(\"encodebin, NULL);\ng_object_set (encbin, \"profile\", \"N900/H264 HQ\", NULL);\ngst_element_link (encbin, filesink);\n\n...\n\nvsrcpad = gst_element_get_src_pad(source, \"src1\");\nvsinkpad = gst_element_request_pad_simple (encbin, \"video_%d\");\ngst_pad_link(vsrcpad, vsinkpad);\n```\n\n----------------------------------------\n\nTITLE: Enabling UI Buttons from Non-UI Thread Using runOnUiThread (Java)\nDESCRIPTION: This code, executed within the `onGStreamerInitialized` callback (which runs on a native thread), re-enables the play and stop buttons. Since UI modifications must happen on the main UI thread, it uses `runOnUiThread` to post a `Runnable` that performs the `setEnabled(true)` calls on the correct thread. The `Activity` instance is passed using a `final` variable.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Re-enable buttons, now that GStreamer is initialized\nfinal Activity activity = this;\nrunOnUiThread(new Runnable() {\n    public void run() {\n        activity.findViewById(R.id.button_play).setEnabled(true);\n        activity.findViewById(R.id.button_stop).setEnabled(true);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Currently Selected Stream Indices\nDESCRIPTION: Retrieves the indices of the currently active video, audio, and text streams being handled by `playbin`. It uses `g_object_get` to read the 'current-video', 'current-audio', and 'current-text' properties of the `playbin` element and stores the values in the `CustomData` structure.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_18\n\nLANGUAGE: c\nCODE:\n```\ng_object_get (data->playbin, \"current-video\", &data->current_video, NULL);\ng_object_get (data->playbin, \"current-audio\", &data->current_audio, NULL);\ng_object_get (data->playbin, \"current-text\", &data->current_text, NULL);\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Sink for GStreamer's Playbin\nDESCRIPTION: This code shows how to set a custom sink bin as the audio-sink for GStreamer's playbin element. It demonstrates the property setting mechanism that allows playbin customization.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/custom-playbin-sinks.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n/* Set playbin's audio sink to be our sink bin */\ng_object_set (GST_OBJECT (pipeline), \"audio-sink\", bin, NULL);\n```\n\n----------------------------------------\n\nTITLE: Processing Keyboard Input to Change Audio Streams in GStreamer\nDESCRIPTION: This function handles keyboard input to change the current audio stream in a GStreamer playbin pipeline. It reads a line from the input, converts it to an integer, validates it against available audio streams, and sets the 'current-audio' property of playbin to switch streams.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n/* Process keyboard input */\nstatic gboolean handle_keyboard (GIOChannel *source, GIOCondition cond, CustomData *data) {\n  gchar *str = NULL;\n\n  if (g_io_channel_read_line (source, &str, NULL, NULL, NULL) == G_IO_STATUS_NORMAL) {\n    int index = g_ascii_strtoull (str, NULL, 0);\n    if (index < 0 || index >= data->n_audio) {\n      g_printerr (\"Index out of bounds\\n\");\n    } else {\n      /* If the input was a valid audio stream index, set the current audio stream */\n      g_print (\"Setting current audio stream to %d\\n\", index);\n      g_object_set (data->playbin, \"current-audio\", index, NULL);\n    }\n  }\n  g_free (str);\n  return TRUE;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GStreamer Python Dependencies on Debian Systems - Shell\nDESCRIPTION: Installs all required build dependencies for the Python 3 GStreamer bindings on a Debian-based Linux distribution. Using the 'apt build-dep' command ensures that the environment is set up for building gst-python from source. The key dependency is python3-gst-1.0; users must have root privileges. No parameters other than the package name are required. Outputs status and package installation logs. Only works on apt-based systems.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt build-dep python3-gst-1.0\n```\n\n----------------------------------------\n\nTITLE: Implementing GStreamer UI Controls in ViewController (Objective-C)\nDESCRIPTION: This Objective-C code snippet defines the ViewController class, which orchestrates the iOS UI and its communication with a GStreamer backend for audio playback. It sets up UI controls (Play, Pause buttons, message label), initializes the backend in viewDidLoad, and handles button actions by forwarding them to the backend. Delegate methods update UI elements in response to backend state changes and messages, ensuring all UI updates occur on the main thread using dispatch_async. Dependencies include UIKit and a custom GStreamerBackend class. Inputs are user interactions and backend delegate calls; outputs are UI updates. The code assumes a proper implementation of GStreamerBackend and associated delegate protocol. Limitations: Actual audio stream management is handled elsewhere, and this file relies on external UI elements being connected.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-running-pipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import \"ViewController.h\"\\n#import \"GStreamerBackend.h\"\\n#import <UIKit/UIKit.h>\\n\\n@interface ViewController () {\\n    GStreamerBackend *gst_backend;\\n}\\n\\n@end\\n\\n@implementation ViewController\\n\\n/*\\n * Methods from UIViewController\\n */\\n\\n- (void)viewDidLoad\\n{\\n    [super viewDidLoad];\\n\\n    play_button.enabled = FALSE;\\n    pause_button.enabled = FALSE;\\n\\n    gst_backend = [[GStreamerBackend alloc] init:self];\\n}\\n\\n- (void)didReceiveMemoryWarning\\n{\\n    [super didReceiveMemoryWarning];\\n    // Dispose of any resources that can be recreated.\\n}\\n\\n/* Called when the Play button is pressed */\\n-(IBAction) play:(id)sender\\n{\\n    [gst_backend play];\\n}\\n\\n/* Called when the Pause button is pressed */\\n-(IBAction) pause:(id)sender\\n{\\n    [gst_backend pause];\\n}\\n\\n/*\\n * Methods from GstreamerBackendDelegate\\n */\\n\\n-(void) gstreamerInitialized\\n{\\n    dispatch_async(dispatch_get_main_queue(), ^{\\n        play_button.enabled = TRUE;\\n        pause_button.enabled = TRUE;\\n        message_label.text = @\"Ready\";\\n    });\\n}\\n\\n-(void) gstreamerSetUIMessage:(NSString *)message\\n{\\n    dispatch_async(dispatch_get_main_queue(), ^{\\n        message_label.text = message;\\n    });\\n}\\n\\n@end\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Buffer from GstBufferPool in GStreamer\nDESCRIPTION: Demonstrates how to acquire a buffer from a previously configured and activated GstBufferPool. The example shows proper error handling by checking the flow return value.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n  [...]\n\n  GstFlowReturn ret;\n  GstBuffer *buffer;\n\n  ret = gst_buffer_pool_acquire_buffer (pool, &buffer, NULL);\n  if (G_UNLIKELY (ret != GST_FLOW_OK))\n    goto pool_failed;\n\n  [...]\n```\n\n----------------------------------------\n\nTITLE: Defining GStreamer Seek Flag: GST_SEEK_FLAG_ACCURATE\nDESCRIPTION: This snippet defines the GST_SEEK_FLAG_ACCURATE flag used in GStreamer seek operations. It specifies that the demuxer/parser should ensure the sought position is accurate in relation to the stream's beginning, even at the cost of performance.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/seeking.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `GST_SEEK_FLAG_ACCURATE`\n```\n\n----------------------------------------\n\nTITLE: Calculating Stream Time in GStreamer Streaming\nDESCRIPTION: Calculates the stream_time value representing current position in stream between 0 and duration, accounting for applied rate.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/streams.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstream_time = (B.timestamp - S.start) * ABS (S.applied_rate) + S.time;\n```\n\n----------------------------------------\n\nTITLE: Implementing Transform Caps Negotiation in a GStreamer Filter (C)\nDESCRIPTION: Defines two functions for a custom GStreamer filter (`GstMyFilter`) to handle transform negotiation. `gst_my_filter_sink_event` intercepts `GST_EVENT_CAPS` on the sink pad, parses the incoming caps using `gst_event_parse_caps`, and calls `gst_my_filter_setcaps`. The `gst_my_filter_setcaps` function extracts properties (rate, channels) from the input caps' structure, creates new output caps (e.g., changing audio format to S16 while preserving rate/channels) using `gst_caps_new_simple`, and sets these on the filter's source pad (`filter->srcpad`) via `gst_pad_set_caps`. Requires the GStreamer library and a defined `GstMyFilter` element structure.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/negotiation.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n\n\n  [...]\n\nstatic gboolean\ngst_my_filter_setcaps (GstMyFilter *filter,\n               GstCaps *caps)\n{\n  GstStructure *structure;\n  int rate, channels;\n  gboolean ret;\n  GstCaps *outcaps;\n\n  structure = gst_caps_get_structure (caps, 0);\n  ret = gst_structure_get_int (structure, \"rate\", &rate);\n  ret = ret && gst_structure_get_int (structure, \"channels\", &channels);\n  if (!ret)\n    return FALSE;\n\n  outcaps = gst_caps_new_simple (\"audio/x-raw\",\n      \"format\", G_TYPE_STRING, GST_AUDIO_NE(S16),\n      \"rate\", G_TYPE_INT, rate,\n      \"channels\", G_TYPE_INT, channels, NULL);\n  ret = gst_pad_set_caps (filter->srcpad, outcaps);\n  gst_caps_unref (outcaps);\n\n  return ret;\n}\n\nstatic gboolean\ngst_my_filter_sink_event (GstPad    *pad,\n                  GstObject *parent,\n                  GstEvent  *event)\n{\n  gboolean ret;\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  switch (GST_EVENT_TYPE (event)) {\n    case GST_EVENT_CAPS:\n    {\n      GstCaps *caps;\n\n      gst_event_parse_caps (event, &caps);\n      ret = gst_my_filter_setcaps (filter, caps);\n      break;\n    }\n    default:\n      ret = gst_pad_event_default (pad, parent, event);\n      break;\n  }\n  return ret;\n}\n\n  [...]\n\n\n```\n\n----------------------------------------\n\nTITLE: GStreamer Video Properties Specification\nDESCRIPTION: Defines the complete set of configurable properties for GStreamer video elements, including dimensional properties (width, height, position), alpha transparency, deinterlacing modes and fields, and video orientation options. Each property includes its value type and valid options where applicable.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/libs/GESVideoUriSource-children-props.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### `alpha`\n\nalpha of the stream\n\nValue type: #gdouble\n\n#### `fields`\n\nFields to use for deinterlacing\n\nValid values:\n  - **All fields** (0) – all\n  - **Top fields only** (1) – top\n  - **Bottom fields only** (2) – bottom\n  - **Automatically detect** (3) – auto\n\nSee #deinterlace:fields\n\n#### `height`\n\nheight of the source\n\nValue type: #gint\n\n#### `mode`\n\nDeinterlace Mode\n\nValid values:\n  - **Auto detection (best effort)** (0) – auto\n  - **Force deinterlacing** (1) – interlaced\n  - **Run in passthrough mode** (2) – disabled\n  - **Auto detection (strict)** (3) – auto-strict\n\nSee #deinterlace:mode\n\n#### `posx`\n\nx position of the stream\n\nValue type: #gint\n\n#### `posy`\n\ny position of the stream\n\nValue type: #gint\n\n#### `tff`\n\nDeinterlace top field first\n\nValid values:\n  - **Auto detection** (0) – auto\n  - **Top field first** (1) – tff\n  - **Bottom field first** (2) – bff\n\nSee #deinterlace:tff\n\n#### `video-direction`\n\nVideo direction: rotation and flipping\n\nValid values:\n  - **GST_VIDEO_ORIENTATION_IDENTITY** (0) – identity\n  - **GST_VIDEO_ORIENTATION_90R** (1) – 90r\n  - **GST_VIDEO_ORIENTATION_180** (2) – 180\n  - **GST_VIDEO_ORIENTATION_90L** (3) – 90l\n  - **GST_VIDEO_ORIENTATION_HORIZ** (4) – horiz\n  - **GST_VIDEO_ORIENTATION_VERT** (5) – vert\n  - **GST_VIDEO_ORIENTATION_UL_LR** (6) – ul-lr\n  - **GST_VIDEO_ORIENTATION_UR_LL** (7) – ur-ll\n  - **GST_VIDEO_ORIENTATION_AUTO** (8) – auto\n  - **GST_VIDEO_ORIENTATION_CUSTOM** (9) – custom\n\nSee #GstVideoDirection:video-direction\n\n#### `width`\n\nwidth of the source\n\nValue type: #gint\n```\n\n----------------------------------------\n\nTITLE: Creating Custom EaglUIView for GStreamer Video Rendering in iOS\nDESCRIPTION: Implementation of EaglUIView class that inherits from UIView and overrides the layerClass method to return CAEAGLLayer. This enables glimagesink to properly render video content within the UIView.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/video.md#2025-04-23_snippet_7\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import \"EaglUIVIew.h\"\n\n#import <QuartzCore/QuartzCore.h>\n\n@implementation EaglUIView\n\n+ (Class) layerClass\n{\n    return [CAEAGLLayer class];\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Checking Media Size in GStreamer iOS Backend\nDESCRIPTION: Function that retrieves video dimensions from GStreamer pipeline and notifies the UI. It gets the video sink's caps, extracts video information, and calls the delegate method to update the UI with the correct dimensions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_10\n\nLANGUAGE: Objective-C\nCODE:\n```\n/* Retrieve the video sink's Caps and tell the application about the media size */\nstatic void check_media_size (GStreamerBackend *self) {\n    GstElement *video_sink;\n    GstPad *video_sink_pad;\n    GstCaps *caps;\n    GstVideoInfo info;\n\n    /* Retrieve the Caps at the entrance of the video sink */\n    g_object_get (self->pipeline, \"video-sink\", &video_sink, NULL);\n\n    /* Do nothing if there is no video sink (this might be an audio-only clip */\n    if (!video_sink) return;\n\n    video_sink_pad = gst_element_get_static_pad (video_sink, \"sink\");\n    caps = gst_pad_get_current_caps (video_sink_pad);\n\n    if (gst_video_info_from_caps(&info, caps)) {\n        info.width = info.width * info.par_n / info.par_d;\n        GST_DEBUG (\"Media size is %dx%d, notifying application\", info.width, info.height);\n\n        if (self->ui_delegate && [self->ui_delegate respondsToSelector:@selector(mediaSizeChanged:info.height:)])\n        {\n            [self->ui_delegate mediaSizeChanged:info.width height:info.height];\n        }\n    }\n\n    gst_caps_unref(caps);\n    gst_object_unref (video_sink_pad);\n    gst_object_unref(video_sink);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Video Surface with GStreamer in Java\nDESCRIPTION: Java code that implements a basic Android activity with a SurfaceView for video display. It handles the surface lifecycle and implements native method declarations to communicate with the GStreamer C backend.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.freedesktop.gstreamer.tutorials.tutorial_3;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.ImageButton;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport org.freedesktop.gstreamer.GStreamer;\n\npublic class Tutorial3 extends Activity implements SurfaceHolder.Callback {\n    private native void nativeInit();     // Initialize native code, build pipeline, etc\n    private native void nativeFinalize(); // Destroy pipeline and shutdown native code\n    private native void nativePlay();     // Set pipeline to PLAYING\n    private native void nativePause();    // Set pipeline to PAUSED\n    private static native boolean nativeClassInit(); // Initialize native class: cache Method IDs for callbacks\n    private native void nativeSurfaceInit(Object surface);\n    private native void nativeSurfaceFinalize();\n    private long native_custom_data;      // Native code will use this to keep private data\n\n    private boolean is_playing_desired;   // Whether the user asked to go to PLAYING\n\n    // Called when the activity is first created.\n    @Override\n    public void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n\n        // Initialize GStreamer and warn if it fails\n        try {\n            GStreamer.init(this);\n        } catch (Exception e) {\n            Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();\n            finish();\n            return;\n        }\n\n        setContentView(R.layout.main);\n\n        ImageButton play = (ImageButton) this.findViewById(R.id.button_play);\n        play.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                is_playing_desired = true;\n                nativePlay();\n            }\n        });\n\n        ImageButton pause = (ImageButton) this.findViewById(R.id.button_stop);\n        pause.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                is_playing_desired = false;\n                nativePause();\n            }\n        });\n\n        SurfaceView sv = (SurfaceView) this.findViewById(R.id.surface_video);\n        SurfaceHolder sh = sv.getHolder();\n        sh.addCallback(this);\n\n        if (savedInstanceState != null) {\n            is_playing_desired = savedInstanceState.getBoolean(\"playing\");\n            Log.i (\"GStreamer\", \"Activity created. Saved state is playing:\" + is_playing_desired);\n        } else {\n            is_playing_desired = false;\n            Log.i (\"GStreamer\", \"Activity created. There is no saved state, playing: false\");\n        }\n\n        // Start with disabled buttons, until native code is initialized\n        this.findViewById(R.id.button_play).setEnabled(false);\n        this.findViewById(R.id.button_stop).setEnabled(false);\n\n        nativeInit();\n    }\n\n    protected void onSaveInstanceState (Bundle outState) {\n        Log.d (\"GStreamer\", \"Saving state, playing:\" + is_playing_desired);\n        outState.putBoolean(\"playing\", is_playing_desired);\n    }\n\n    protected void onDestroy() {\n        nativeFinalize();\n        super.onDestroy();\n    }\n\n    // Called from native code. This sets the content of the TextView from the UI thread.\n    private void setMessage(final String message) {\n        final TextView tv = (TextView) this.findViewById(R.id.textview_message);\n        runOnUiThread (new Runnable() {\n          public void run() {\n            tv.setText(message);\n          }\n        });\n    }\n\n    // Called from native code. Native code calls this once it has created its pipeline and\n    // the main loop is running, so it is ready to accept commands.\n    private void onGStreamerInitialized () {\n        Log.i (\"GStreamer\", \"Gst initialized. Restoring state, playing:\" + is_playing_desired);\n        // Restore previous playing state\n        if (is_playing_desired) {\n            nativePlay();\n        } else {\n            nativePause();\n        }\n\n        // Re-enable buttons, now that GStreamer is initialized\n        final Activity activity = this;\n        runOnUiThread(new Runnable() {\n            public void run() {\n                activity.findViewById(R.id.button_play).setEnabled(true);\n                activity.findViewById(R.id.button_stop).setEnabled(true);\n            }\n        });\n    }\n\n    static {\n        System.loadLibrary(\"gstreamer_android\");\n        System.loadLibrary(\"tutorial-3\");\n        nativeClassInit();\n    }\n\n    public void surfaceChanged(SurfaceHolder holder, int format, int width,\n            int height) {\n        Log.d(\"GStreamer\", \"Surface changed to format \" + format + \" width \"\n                + width + \" height \" + height);\n        nativeSurfaceInit (holder.getSurface());\n    }\n\n    public void surfaceCreated(SurfaceHolder holder) {\n        Log.d(\"GStreamer\", \"Surface created: \" + holder.getSurface());\n    }\n\n    public void surfaceDestroyed(SurfaceHolder holder) {\n        Log.d(\"GStreamer\", \"Surface destroyed\");\n        nativeSurfaceFinalize ();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GhostPad without a Target in C\nDESCRIPTION: This function creates a new GhostPad with a specified name and direction, but without a target. It allows for setting the target later.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstghostpad.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ngst_ghost_pad_new_no_target (char *name, GstPadDirection dir)\n```\n\n----------------------------------------\n\nTITLE: Define Minimum Seek Delay Constant in C\nDESCRIPTION: Defines a constant `SEEK_MIN_DELAY` representing the minimum time interval (500 milliseconds) allowed between consecutive seek operations. This prevents rapid seeks which can be visually disruptive and confuse GStreamer demuxers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#define SEEK_MIN_DELAY (500 * GST_MSECOND)\n```\n\n----------------------------------------\n\nTITLE: GStreamer Native Finalization in C\nDESCRIPTION: Implementation of native finalization method called from Java's onDestroy(). Handles cleanup of GStreamer pipeline, thread termination, and memory deallocation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_33\n\nLANGUAGE: c\nCODE:\n```\nstatic void gst_native_finalize (JNIEnv* env, jobject thiz) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  GST_DEBUG (\"Quitting main loop...\");\n  g_main_loop_quit (data->main_loop);\n  GST_DEBUG (\"Waiting for thread to finish...\");\n  pthread_join (gst_app_thread, NULL);\n  GST_DEBUG (\"Deleting GlobalRef for app object at %p\", data->app);\n  (*env)->DeleteGlobalRef (env, data->app);\n  GST_DEBUG (\"Freeing CustomData at %p\", data);\n  g_free (data);\n  SET_CUSTOM_DATA (env, thiz, custom_data_field_id, NULL);\n  GST_DEBUG (\"Done finalizing\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handle GStreamer Clock Lost Messages in C\nDESCRIPTION: Implements the `clock_lost_cb` function, a GStreamer bus callback (`GstBusFunc`). It's called when the pipeline loses its clock, which can disrupt synchronization. If the pipeline was supposed to be playing (`data->target_state >= GST_STATE_PLAYING`), it attempts to recover by briefly setting the state to PAUSED and then back to PLAYING, which often helps GStreamer re-establish clock synchronization.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_24\n\nLANGUAGE: c\nCODE:\n```\n/* Called when the clock is lost */\nstatic void clock_lost_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  if (data->target_state >= GST_STATE_PLAYING) {\n    gst_element_set_state (data->pipeline, GST_STATE_PAUSED);\n    gst_element_set_state (data->pipeline, GST_STATE_PLAYING);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Video Meta Alignment to Buffers (GStreamer, C)\nDESCRIPTION: Illustrates how to add and set alignment for GstVideoMeta on a buffer in a custom buffer pool's alloc function. This requires inclusion of GstVideoMeta API and correct setup of the buffer pool's video_info. The code adds GstVideoMeta with alignment to the buffer, enabling downstream elements (e.g., v4l2src) to read buffer constraints and configure their drivers accordingly. Key input parameters include a buffer, video_info struct, offset and stride arrays, and a GstVideoAlignment struct. Outputs a buffer with proper meta-data alignment for zero-copy buffers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n      meta = gst_buffer_add_video_meta_full (buf, GST_VIDEO_FRAME_FLAG_NONE,\n          GST_VIDEO_INFO_FORMAT (&pool->video_info),\n          GST_VIDEO_INFO_WIDTH (&pool->video_info),\n          GST_VIDEO_INFO_HEIGHT (&pool->video_info),\n          GST_VIDEO_INFO_N_PLANES (&pool->video_info), offset, stride);\n\n      gst_video_meta_set_alignment (meta, align);\n```\n\n----------------------------------------\n\nTITLE: Displaying Pad Capabilities Information in GStreamer (C)\nDESCRIPTION: This C code initializes GStreamer, constructs a basic audio pipeline, and demonstrates introspection by printing static pad template information, as well as the negotiated pad capabilities of pipeline elements at runtime and upon state changes. Dependencies include the GStreamer 1.0 development libraries and headers. Major parameters include element factory names (\"audiotestsrc\", \"autoaudiosink\") and pad names (\"sink\"). Inputs are handled via command line (argc, argv), and output is sent to standard output and error. The code can be compiled and run on platforms supporting GStreamer and demonstrates the practical aspects of pad and capability querying with helpful formatted outputs. Limitations: It specifically targets audio pipelines and may require GStreamer plugins for the chosen elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-formats-and-pad-capabilities.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\\n\\n/* Functions below print the Capabilities in a human-friendly format */\\nstatic gboolean print_field (GQuark field, const GValue * value, gpointer pfx) {\\n  gchar *str = gst_value_serialize (value);\\n\\n  g_print (\"%s  %15s: %s\\n\", (gchar *) pfx, g_quark_to_string (field), str);\\n  g_free (str);\\n  return TRUE;\\n}\\n\\nstatic void print_caps (const GstCaps * caps, const gchar * pfx) {\\n  guint i;\\n\\n  g_return_if_fail (caps != NULL);\\n\\n  if (gst_caps_is_any (caps)) {\\n    g_print (\"%sANY\\n\", pfx);\\n    return;\\n  }\\n  if (gst_caps_is_empty (caps)) {\\n    g_print (\"%sEMPTY\\n\", pfx);\\n    return;\\n  }\\n\\n  for (i = 0; i < gst_caps_get_size (caps); i++) {\\n    GstStructure *structure = gst_caps_get_structure (caps, i);\\n\\n    g_print (\"%s%s\\n\", pfx, gst_structure_get_name (structure));\\n    gst_structure_foreach (structure, print_field, (gpointer) pfx);\\n  }\\n}\\n\\n/* Prints information about a Pad Template, including its Capabilities */\\nstatic void print_pad_templates_information (GstElementFactory * factory) {\\n  const GList *pads;\\n  GstStaticPadTemplate *padtemplate;\\n\\n  g_print (\"Pad Templates for %s:\\n\", gst_element_factory_get_longname (factory));\\n  if (!gst_element_factory_get_num_pad_templates (factory)) {\\n    g_print (\"  none\\n\");\\n    return;\\n  }\\n\\n  pads = gst_element_factory_get_static_pad_templates (factory);\\n  while (pads) {\\n    padtemplate = pads->data;\\n    pads = g_list_next (pads);\\n\\n    if (padtemplate->direction == GST_PAD_SRC)\\n      g_print (\"  SRC template: '%s'\\n\", padtemplate->name_template);\\n    else if (padtemplate->direction == GST_PAD_SINK)\\n      g_print (\"  SINK template: '%s'\\n\", padtemplate->name_template);\\n    else\\n      g_print (\"  UNKNOWN!!! template: '%s'\\n\", padtemplate->name_template);\\n\\n    if (padtemplate->presence == GST_PAD_ALWAYS)\\n      g_print (\"    Availability: Always\\n\");\\n    else if (padtemplate->presence == GST_PAD_SOMETIMES)\\n      g_print (\"    Availability: Sometimes\\n\");\\n    else if (padtemplate->presence == GST_PAD_REQUEST)\\n      g_print (\"    Availability: On request\\n\");\\n    else\\n      g_print (\"    Availability: UNKNOWN!!!\\n\");\\n\\n    if (padtemplate->static_caps.string) {\\n      GstCaps *caps;\\n      g_print (\"    Capabilities:\\n\");\\n      caps = gst_static_caps_get (&padtemplate->static_caps);\\n      print_caps (caps, \"      \");\\n      gst_caps_unref (caps);\\n\\n    }\\n\\n    g_print (\"\\n\");\\n  }\\n}\\n\\n/* Shows the CURRENT capabilities of the requested pad in the given element */\\nstatic void print_pad_capabilities (GstElement *element, gchar *pad_name) {\\n  GstPad *pad = NULL;\\n  GstCaps *caps = NULL;\\n\\n  /* Retrieve pad */\\n  pad = gst_element_get_static_pad (element, pad_name);\\n  if (!pad) {\\n    g_printerr (\"Could not retrieve pad '%s'\\n\", pad_name);\\n    return;\\n  }\\n\\n  /* Retrieve negotiated caps (or acceptable caps if negotiation is not finished yet) */\\n  caps = gst_pad_get_current_caps (pad);\\n  if (!caps)\\n    caps = gst_pad_query_caps (pad, NULL);\\n\\n  /* Print and free */\\n  g_print (\"Caps for the %s pad:\\n\", pad_name);\\n  print_caps (caps, \"      \");\\n  gst_caps_unref (caps);\\n  gst_object_unref (pad);\\n}\\n\\nint main(int argc, char *argv[]) {\\n  GstElement *pipeline, *source, *sink;\\n  GstElementFactory *source_factory, *sink_factory;\\n  GstBus *bus;\\n  GstMessage *msg;\\n  GstStateChangeReturn ret;\\n  gboolean terminate = FALSE;\\n\\n  /* Initialize GStreamer */\\n  gst_init (&argc, &argv);\\n\\n  /* Create the element factories */\\n  source_factory = gst_element_factory_find (\"audiotestsrc\");\\n  sink_factory = gst_element_factory_find (\"autoaudiosink\");\\n  if (!source_factory || !sink_factory) {\\n    g_printerr (\"Not all element factories could be created.\\n\");\\n    return -1;\\n  }\\n\\n  /* Print information about the pad templates of these factories */\\n  print_pad_templates_information (source_factory);\\n  print_pad_templates_information (sink_factory);\\n\\n  /* Ask the factories to instantiate actual elements */\\n  source = gst_element_factory_create (source_factory, \"source\");\\n  sink = gst_element_factory_create (sink_factory, \"sink\");\\n\\n  /* Create the empty pipeline */\\n  pipeline = gst_pipeline_new (\"test-pipeline\");\\n\\n  if (!pipeline || !source || !sink) {\\n    g_printerr (\"Not all elements could be created.\\n\");\\n    return -1;\\n  }\\n\\n  /* Build the pipeline */\\n  gst_bin_add_many (GST_BIN (pipeline), source, sink, NULL);\\n  if (gst_element_link (source, sink) != TRUE) {\\n    g_printerr (\"Elements could not be linked.\\n\");\\n    gst_object_unref (pipeline);\\n    return -1;\\n  }\\n\\n  /* Print initial negotiated caps (in NULL state) */\\n  g_print (\"In NULL state:\\n\");\\n  print_pad_capabilities (sink, \"sink\");\\n\\n  /* Start playing */\\n  ret = gst_element_set_state (pipeline, GST_STATE_PLAYING);\\n  if (ret == GST_STATE_CHANGE_FAILURE) {\\n    g_printerr (\"Unable to set the pipeline to the playing state (check the bus for error messages).\\n\");\\n  }\\n\\n  /* Wait until error, EOS or State Change */\\n  bus = gst_element_get_bus (pipeline);\\n  do {\\n    msg = gst_bus_timed_pop_filtered (bus, GST_CLOCK_TIME_NONE, GST_MESSAGE_ERROR | GST_MESSAGE_EOS |\\n        GST_MESSAGE_STATE_CHANGED);\\n\\n    /* Parse message */\\n    if (msg != NULL) {\\n      GError *err;\\n      gchar *debug_info;\\n\\n      switch (GST_MESSAGE_TYPE (msg)) {\\n        case GST_MESSAGE_ERROR:\\n          gst_message_parse_error (msg, &err, &debug_info);\\n          g_printerr (\"Error received from element %s: %s\\n\", GST_OBJECT_NAME (msg->src), err->message);\\n          g_printerr (\"Debugging information: %s\\n\", debug_info ? debug_info : \"none\");\\n          g_clear_error (&err);\\n          g_free (debug_info);\\n          terminate = TRUE;\\n          break;\\n        case GST_MESSAGE_EOS:\\n          g_print (\"End-Of-Stream reached.\\n\");\\n          terminate = TRUE;\\n          break;\\n        case GST_MESSAGE_STATE_CHANGED:\\n          /* We are only interested in state-changed messages from the pipeline */\\n          if (GST_MESSAGE_SRC (msg) == GST_OBJECT (pipeline)) {\\n            GstState old_state, new_state, pending_state;\\n            gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\\n            g_print (\"\\nPipeline state changed from %s to %s:\\n\",\\n                gst_element_state_get_name (old_state), gst_element_state_get_name (new_state));\\n            /* Print the current capabilities of the sink element */\\n            print_pad_capabilities (sink, \"sink\");\\n          }\\n          break;\\n        default:\\n          /* We should not reach here because we only asked for ERRORs, EOS and STATE_CHANGED */\\n          g_printerr (\"Unexpected message received.\\n\");\\n          break;\\n      }\\n      gst_message_unref (msg);\\n    }\\n  } while (!terminate);\\n\\n  /* Free resources */\\n  gst_object_unref (bus);\\n  gst_element_set_state (pipeline, GST_STATE_NULL);\\n  gst_object_unref (pipeline);\\n  gst_object_unref (source_factory);\\n  gst_object_unref (sink_factory);\\n  return 0;\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Native Window Update/Release in gst_native_surface_init (C)\nDESCRIPTION: This code fragment within the gst_native_surface_init function handles the scenario where a new native window is received while a previous one might still exist. It releases the old window, compares the new window handle with the previous one, and either triggers a redraw (if handles are the same) or resets the initialization flag (if handles are different) before assigning the new window handle.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n    ANativeWindow_release (data->native_window);\n    if (data->native_window == new_native_window) {\n      GST_DEBUG (\"New native window is the same as the previous one\", data->native_window);\n      if (data->video_sink) {\n        gst_video_overlay_expose(GST_VIDEO_OVERLAY (data->video_sink));\n        gst_video_overlay_expose(GST_VIDEO_OVERLAY (data->video_sink));\n      }\n      return;\n    } else {\n      GST_DEBUG (\"Released previous native window %p\", data->native_window);\n      data->initialized = FALSE;\n    }\n  }\n  data->native_window = new_native_window;\n\n  check_initialization_complete (data);\n```\n\n----------------------------------------\n\nTITLE: Setting Up GStreamer Pipeline for Playback\nDESCRIPTION: Function to create and configure the GStreamer pipeline using playbin, set up video rendering, and connect to bus messages.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nvoid Player::setUri(const QString & uri)\n{\n    QString realUri = uri;\n    //if uri is not a real uri, assume it is a file path\n    if (realUri.indexOf(\"://\") < 0) {\n        realUri = QUrl::fromLocalFile(realUri).toEncoded();\n    }\n    if (!m_pipeline) {\n        m_pipeline = QGst::ElementFactory::make(\"playbin\").dynamicCast<QGst::Pipeline>();\n        if (m_pipeline) {\n            //let the video widget watch the pipeline for new video sinks\n            watchPipeline(m_pipeline);\n            //watch the bus for messages\n            QGst::BusPtr bus = m_pipeline->bus();\n            bus->addSignalWatch();\n            QGlib::connect(bus, \"message\", this, &Player::onBusMessage);\n        } else {\n            qCritical() << \"Failed to create the pipeline\";\n        }\n    }\n    if (m_pipeline) {\n        m_pipeline->setProperty(\"uri\", realUri);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pad Probe Type Enumeration\nDESCRIPTION: Enumeration defining various probe types including blocking controls, datatype selectors, and scheduling modes for GStreamer pad probes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/probes.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum\n{\n  GST_PAD_PROBE_TYPE_INVALID          = 0,\n\n  /* flags to control blocking */\n  GST_PAD_PROBE_TYPE_IDLE             = (1 << 0),\n  GST_PAD_PROBE_TYPE_BLOCK            = (1 << 1),\n\n  /* flags to select datatypes */\n  GST_PAD_PROBE_TYPE_BUFFER           = (1 << 4),\n  GST_PAD_PROBE_TYPE_BUFFER_LIST      = (1 << 5),\n  GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM = (1 << 6),\n  GST_PAD_PROBE_TYPE_EVENT_UPSTREAM   = (1 << 7),\n  GST_PAD_PROBE_TYPE_EVENT_FLUSH      = (1 << 8),\n  GST_PAD_PROBE_TYPE_QUERY_DOWNSTREAM = (1 << 9),\n  GST_PAD_PROBE_TYPE_QUERY_UPSTREAM   = (1 << 10),\n\n  /* flags to select scheduling mode */\n  GST_PAD_PROBE_TYPE_PUSH             = (1 << 12),\n  GST_PAD_PROBE_TYPE_PULL             = (1 << 13),\n} GstPadProbeType;\n```\n\n----------------------------------------\n\nTITLE: Setting up GStreamer Plugins and Dependencies in CMake\nDESCRIPTION: This snippet includes the GStreamer plugins CMake file, sets up the list of GStreamer plugins to be used, and defines additional GStreamer dependencies for the project.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/playback/player/android/app/src/main/jni/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(\"${GSTREAMER_NDK_BUILD_PATH}/plugins.cmake\")\nset(GSTREAMER_PLUGINS         ${GSTREAMER_PLUGINS_CORE} ${GSTREAMER_PLUGINS_PLAYBACK} ${GSTREAMER_PLUGINS_CODECS} ${GSTREAMER_PLUGINS_NET} ${GSTREAMER_PLUGINS_SYS} ${GSTREAMER_PLUGINS_CODECS_RESTRICTED} ${GSTREAMER_CODECS_GPL} ${GSTREAMER_PLUGINS_ENCODING} ${GSTREAMER_PLUGINS_VIS} ${GSTREAMER_PLUGINS_EFFECTS} ${GSTREAMER_PLUGINS_NET_RESTRICTED})\nset(GStreamer_EXTRA_DEPS gstreamer-play-1.0 gstreamer-player-1.0 gstreamer-video-1.0 glib-2.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Pipeline with Parser and Decoder\nDESCRIPTION: A basic GStreamer pipeline configuration demonstrating the use of a parser and decoder. This static pipeline allows the parser to query the decoder's capabilities before processing data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/decodebin.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n... ! parser ! decoder ! sink\n```\n\n----------------------------------------\n\nTITLE: Registering Static GStreamer Plugin in C\nDESCRIPTION: Demonstrates how to register a static GStreamer plugin using gst_plugin_register_static() instead of GST_PLUGIN_DEFINE(). This allows elements to be available without requiring dynamically loadable libraries. Includes element registration function and initialization code.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/compiling.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/*\n * Here, you would write the actual plugin code.\n */\n\n[..]\n\nstatic gboolean\nregister_elements (GstPlugin *plugin)\n{\n  return GST_ELEMENT_REGISTER (my_element_name, plugin);\n}\n\nstatic\nmy_code_init (void)\n{\n  ...\n\n  gst_plugin_register_static (\n    GST_VERSION_MAJOR,\n    GST_VERSION_MINOR,\n    \"my-private-plugins\",\n    \"Private elements of my application\",\n    register_elements,\n    VERSION,\n    \"LGPL\",\n    \"my-application-source\",\n    \"my-application\",\n    \"http://www.my-application.net/\")\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GLib Objects in GStreamer\nDESCRIPTION: Demonstrates the core object model dependencies in GStreamer, which relies on GObject and GLib 2.0 framework objects. This pattern is fundamental to GStreamer's object-oriented architecture.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/introduction/motivation.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGObject, GLib 2.0\n```\n\n----------------------------------------\n\nTITLE: Detecting Live Streams after Set State with GStreamer in C\nDESCRIPTION: This snippet shows how to detect if a GStreamer pipeline is processing a live stream by checking the return value of gst_element_set_state(). If the code returns GST_STATE_CHANGE_NO_PREROLL, it sets a flag in the CustomData structure, which can then disable buffering logic for live streams elsewhere in the application. Requires GStreamer library and an initialized pipeline element. The code expects the GStreamer pipeline and state management setup to be in place.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/streaming.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Start playing */\\nret = gst_element_set_state (pipeline, GST_STATE_PLAYING);\\nif (ret == GST_STATE_CHANGE_FAILURE) {\\n  g_printerr (\"Unable to set the pipeline to the playing state.\\n\");\\n  gst_object_unref (pipeline);\\n  return -1;\\n} else if (ret == GST_STATE_CHANGE_NO_PREROLL) {\\n  data.is_live = TRUE;\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling GStreamer Bus Messages in C\nDESCRIPTION: Callback functions for processing error and state change messages from the GStreamer bus. These functions update the UI with relevant information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-running-pipeline.md#2025-04-23_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nstatic void error_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self)\n{\n    GError *err;\n    gchar *debug_info;\n    gchar *message_string;\n\n    gst_message_parse_error (msg, &err, &debug_info);\n    message_string = g_strdup_printf (\"Error received from element %s: %s\", GST_OBJECT_NAME (msg->src), err->message);\n    g_clear_error (&err);\n    g_free (debug_info);\n    [self setUIMessage:message_string];\n    g_free (message_string);\n    gst_element_set_state (self->pipeline, GST_STATE_NULL);\n}\n\nstatic void state_changed_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self)\n{\n    GstState old_state, new_state, pending_state;\n    gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n    /* Only pay attention to messages coming from the pipeline, not its children */\n    if (GST_MESSAGE_SRC (msg) == GST_OBJECT (self->pipeline)) {\n        gchar *message = g_strdup_printf(\"State changed to %s\", gst_element_state_get_name(new_state));\n        [self setUIMessage:message];\n        g_free (message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pad Probe Return Values\nDESCRIPTION: Enumeration of possible return values from a pad probe callback, controlling how the probe and data flow should proceed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/probes.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum\n{\n  GST_PAD_PROBE_DROP,\n  GST_PAD_PROBE_OK,\n  GST_PAD_PROBE_REMOVE,\n  GST_PAD_PROBE_PASS,\n  GST_PAD_PROBE_HANDLED\n} GstPadProbeReturn;\n```\n\n----------------------------------------\n\nTITLE: Wrapped Memory Creation Function in C\nDESCRIPTION: Function to create a new GstMemory object that wraps existing memory with custom flags and parameters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/memory.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nGstMemory * gst_memory_new_wrapped  (GstMemoryFlags flags,\n                                     gpointer data, gsize maxsize,\n                                     gsize offset, gsize size,\n                                     gpointer user_data,\n                                     GDestroyNotify notify);\n```\n\n----------------------------------------\n\nTITLE: Creating GStreamer Seek Events for Different Playback Directions\nDESCRIPTION: This code creates seek events with different parameters depending on the playback direction. When playing forward, it seeks from the current position to the end; when playing backward, it seeks from the beginning to the current position.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/playback-speed.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n/* Create the seek event */\nif (data->rate > 0) {\n  seek_event = gst_event_new_seek (data->rate, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_ACCURATE,\n      GST_SEEK_TYPE_SET, position, GST_SEEK_TYPE_END, 0);\n} else {\n  seek_event = gst_event_new_seek (data->rate, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_ACCURATE,\n      GST_SEEK_TYPE_SET, 0, GST_SEEK_TYPE_SET, position);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GStreamerBackend to Retrieve GStreamer Version\nDESCRIPTION: Implements a GStreamerBackend class that serves as a bridge between GStreamer C API and Objective-C. Contains a method to retrieve the GStreamer version as an NSString, handling proper memory management between C and Objective-C.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/link-against-gstreamer.md#2025-04-23_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import \"GStreamerBackend.h\"\n\n#include <gst/gst.h>\n\n@implementation GStreamerBackend\n\n-(NSString*) getGStreamerVersion\n{\n    char *version_utf8 = gst_version_string();\n    NSString *version_string = [NSString stringWithUTF8String:version_utf8];\n    g_free(version_utf8);\n    return version_string;\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Launching uridecodebin audio playback with GStreamer via Bash\nDESCRIPTION: This bash command uses gst-launch-1.0 with uridecodebin to decode audio from a remote URI, then converts and outputs it to the system audio sink. Dependencies are GStreamer and the specified plugins and elements; the uri parameter must point to a valid media resource. The pipeline outputs audio to autoaudiosink; all negotiation is handled automatically by GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 uridecodebin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm ! audioconvert ! autoaudiosink\n```\n\n----------------------------------------\n\nTITLE: Recording Audio Input to Ogg File with GStreamer\nDESCRIPTION: Demonstrates how to record sound from audio input and encode it into an Ogg file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 pulsesrc ! audioconvert ! vorbisenc ! oggmux ! filesink location=input.ogg\n```\n\n----------------------------------------\n\nTITLE: Defining GStreamer Message Types in Markdown\nDESCRIPTION: This snippet lists and describes various GStreamer message types, including their purposes and behaviors within a pipeline. It covers essential messages like EOS, errors, warnings, state changes, and specialized messages for different pipeline events.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/messages.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**`GST_MESSAGE_EOS`**: Posted by sink elements. This message is posted to the\napplication when all the sinks in a pipeline have posted an EOS message. When\nperforming a flushing seek, the EOS state of the pipeline and sinks is reset.\n\n**`GST_MESSAGE_ERROR`**: An element in the pipeline got into an error state.\nThe message carries a GError and a debug string describing the error. This\nusually means that part of the pipeline is not streaming anymore.\n\n**`GST_MESSAGE_WARNING`**: An element in the pipeline encountered a condition\nthat made it produce a warning. This could be a recoverable decoding error or\nsome other non fatal event. The pipeline continues streaming after a warning.\n\n**`GST_MESSAGE_INFO`**: An element produced an informational message.\n\n**`GST_MESSAGE_TAG`**: An element decoded metadata about the stream. The\nmessage carries a `GstTagList` with the tag information.\n\n**`GST_MESSAGE_BUFFERING`**: An element is buffering data and that could\npotentially take some time. This message is typically emitted by elements that\nperform some sort of network buffering. While the pipeline is buffering it\nshould remain in the `PAUSED` state. When the buffering is finished, it can\nresume `PLAYING`.\n\n**`GST_MESSAGE_STATE_CHANGED`**: An element changed state in the pipeline.\nThe message carries the old, new and pending state of the element.\n\n**`GST_MESSAGE_STATE_DIRTY`**: An internal message used to instruct\na pipeline hierarchy that a state recalculation must be performed because of an\nASYNC state change completed. This message is not used anymore.\n\n**`GST_MESSAGE_STEP_DONE`**: An element stepping frames has finished. This is\ncurrently not used.\n\n**`GST_MESSAGE_CLOCK_PROVIDE`**: An element notifies its capability of\nproviding a clock for the pipeline.\n\n**`GST_MESSAGE_CLOCK_LOST`**: The current clock, as selected by the pipeline,\nbecame unusable. The pipeline will select a new clock on the next PLAYING state\nchange.\n\n**`GST_MESSAGE_NEW_CLOCK`**: A new clock was selected for the pipeline.\n\n**`GST_MESSAGE_STRUCTURE_CHANGE`**: The pipeline changed its structure, This\nmeans elements were added or removed or pads were linked or unlinked. This\nmessage is not yet used.\n\n**`GST_MESSAGE_STREAM_STATUS`**: Posted by an element when it\nstarts/stops/pauses a streaming task. It contains information about the reason\nwhy the stream state changed along with the thread id. The application can use\nthis information to detect failures in streaming threads and/or to adjust\nstreaming thread priorities.\n\n**`GST_MESSAGE_APPLICATION`**: The application posted a message. This message\nmust be used when the application posts a message on the bus.\n\n**`GST_MESSAGE_ELEMENT`**: Element-specific message. See the specific\nelement's documentation\n\n**`GST_MESSAGE_SEGMENT_START`**: An element started playback of a new\nsegment. This message is not forwarded to applications but is used internally\nto schedule `SEGMENT_DONE` messages.\n\n**`GST_MESSAGE_SEGMENT_DONE`**: An element or bin completed playback of\na segment. This message is only posted on the bus if a `SEGMENT` seek is\nperformed on a pipeline.\n\n**`GST_MESSAGE_DURATION_CHANGED`**: An element posts this message when it has\ndetected or updated the stream duration.\n\n**`GST_MESSAGE_ASYNC_START`**: Posted by sinks when they start an\nasynchronous state change.\n\n**`GST_MESSAGE_ASYNC_DONE`**: Posted by sinks when they receive the first\ndata buffer and complete the asynchronous state change.\n\n**`GST_MESSAGE_LATENCY`**: Posted by elements when the latency in a pipeline\nchanged and a new global latency should be calculated by the pipeline or\napplication.\n\n**`GST_MESSAGE_REQUEST_STATE`**: Posted by elements when they want to change\nthe state of the pipeline they are in. A typical use case would be an audio\nsink that requests the pipeline to pause in order to play a higher priority\nstream.\n\n**`GST_MESSAGE_STEP_START`**: A stepping operation has started.\n\n**`GST_MESSAGE_QOS`**: A buffer was dropped or an element changed its\nprocessing strategy for Quality of Service reasons.\n\n**`GST_MESSAGE_PROGRESS`**: A progress message was posted. Progress messages\ninform the application about the state of asynchronous operations.\n\n**`GST_MESSAGE_TOC`**: A new table of contents (TOC) was found or a previously\nfound one was updated.\n\n**`GST_MESSAGE_STREAM_START`**: Signals the start of a new stream.\n\n**`GST_MESSAGE_NEED_CONTEXT`**: Signals that an element wants a specific context (Since 1.2)\n\n**`GST_MESSAGE_HAVE_CONTEXT`**: Signals that an element created a context (Since 1.2)\n```\n\n----------------------------------------\n\nTITLE: Creating GESTimelineParseLaunchEffect in C\nDESCRIPTION: This function creates a new GESTimelineParseLaunchEffect from the description of video and audio bins. It returns a newly created GESTimelineParseLaunchEffect or NULL if an error occurs.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/effects.txt#2025-04-23_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nGESTimelineParseLaunchEffect *\nges_timeline_parse_launch_effect_new (const gchar * video_bin_description,\n    const gchar * audio_bin_description)\n```\n\n----------------------------------------\n\nTITLE: Calculating Buffer Arrival Time in GStreamer QoS\nDESCRIPTION: Formula showing how to calculate the time when a buffer arrived in the sink using buffer timestamp and jitter.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/qos.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nT1 = B1 + J1.\n```\n\n----------------------------------------\n\nTITLE: Compiling Programs with GStreamer Using pkg-config - Shell\nDESCRIPTION: This shell snippet demonstrates how to compile and link a single-file C program using GStreamer by leveraging pkg-config to automatically determine the correct compiler (CFLAGS) and linker (LIBS) options. It uses libtool's --mode=link to handle shared library dependencies appropriately during the build process. The dependencies required are GStreamer development libraries, pkg-config, and libtool. Replace \"myprog.c\" with your C source file and \"myprog\" with your desired output binary name. The resulting executable links against GStreamer and is suitable for development on Unix/Linux.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/developing.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ libtool --mode=link gcc `pkg-config --cflags --libs gstreamer-1.0` -o myprog myprog.c\n```\n\n----------------------------------------\n\nTITLE: Converting MP3 to Ogg Vorbis with GStreamer\nDESCRIPTION: Shows how to convert an MP3 music file to Ogg Vorbis format using GStreamer elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=music.mp3 ! mpegaudioparse ! mpg123audiodec ! audioconvert ! vorbisenc ! oggmux ! filesink location=music.ogg\n```\n\n----------------------------------------\n\nTITLE: GstAllocatorClass Structure Definition in C\nDESCRIPTION: Class structure for GstAllocator defining virtual methods for memory allocation and deallocation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/memory.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstruct _GstAllocatorClass {\n  GstObjectClass object_class;\n\n  GstMemory *  (*alloc)      (GstAllocator *allocator, gsize size,\n                              GstAllocationParams *params);\n  void         (*free)       (GstAllocator *allocator, GstMemory *memory);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Seek Operation in GStreamer for Android\nDESCRIPTION: This function handles seeking to a specific position in a media file, storing the desired position for later execution if the pipeline is not in the appropriate state.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_37\n\nLANGUAGE: c\nCODE:\n```\nvoid gst_native_set_position (JNIEnv* env, jobject thiz, int milliseconds) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  gint64 desired_position = (gint64)(milliseconds * GST_MSECOND);\n  if (data->state >= GST_STATE_PAUSED) {\n    execute_seek(desired_position, data);\n  } else {\n    GST_DEBUG (\"Scheduling seek to %\" GST_TIME_FORMAT \" for later\", GST_TIME_ARGS (desired_position));\n    data->desired_position = desired_position;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Flow Between Pads\nDESCRIPTION: ASCII diagram illustrating the query process between pads, including probe handling and error conditions during push and pull operations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/probes.md#2025-04-23_snippet_5\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n                    pad                           peerpad\n                     |                               |\ngst_pad_peer_query() |                               |\n-------------------->O                               |\n                     O                               |\n                     O-> do BLOCK probes             |\n                     O                               |\n                     O-> do QUERY | PUSH probes      |\n        no peer?     O                               |\n          FALSE      O                               |\n       < - - - - - - O                               |\n                     O   gst_pad_query()             |\n                     O------------------------------>O\n                     O                               O-> do BLOCK probes\n                     O                               O\n                     O                               O-> do QUERY | PUSH probes\n                     O                               O\n                     O                               O---> queryfunc\n                     O                    error      O\n       <- - - - - - - - - - - - - - - - - - - - - - -O\n                     O                               O\n                     O                               O-> do QUERY | PULL probes\n                     O< - - - - - - - - - - - - - - -O\n                     O                               |\n                     O-> do QUERY | PULL probes      |\n                     O                               |\n       < - - - - - - O                               |\n                     |                               |\n```\n\n----------------------------------------\n\nTITLE: Controlling GStreamer Pipeline State in Objective-C\nDESCRIPTION: The play and pause methods attempt to set the GStreamer pipeline to the PLAYING or PAUSED state respectively, reporting any failures through the UI.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-running-pipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\n-(void) play\n{\n    if(gst_element_set_state(pipeline, GST_STATE_PLAYING) == GST_STATE_CHANGE_FAILURE) {\n        [self setUIMessage:\"Failed to set pipeline to playing\"];\n    }\n}\n\n-(void) pause\n{\n    if(gst_element_set_state(pipeline, GST_STATE_PAUSED) == GST_STATE_CHANGE_FAILURE) {\n        [self setUIMessage:\"Failed to set pipeline to paused\"];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GstPlayFlags Enum for Playbin Configuration\nDESCRIPTION: Defines a C enum `GstPlayFlags` mirroring the one used internally by the `playbin` element. This provides convenient constants (GST_PLAY_FLAG_VIDEO, GST_PLAY_FLAG_AUDIO, GST_PLAY_FLAG_TEXT) for manipulating the 'flags' property of `playbin` to control which types of streams (video, audio, subtitles) should be rendered.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n/* playbin flags */\ntypedef enum {\n  GST_PLAY_FLAG_VIDEO         = (1 << 0), /* We want video output */\n  GST_PLAY_FLAG_AUDIO         = (1 << 1), /* We want audio output */\n  GST_PLAY_FLAG_TEXT          = (1 << 2)  /* We want subtitle output */\n} GstPlayFlags;\n```\n\n----------------------------------------\n\nTITLE: Documenting xRGB Sparse RGB Format Layout with Space First (Markdown, Plaintext)\nDESCRIPTION: This snippet describes the xRGB format, where the leading byte is unused (space first), followed by red, green, and blue channels. It gives a block diagram and details for memory layout, stride, and offset, which are essential for pixel buffer manipulation in image I/O or rendering pipelines using xRGB.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |X |R0|G0|B0| |X |R1|G1|B1| ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: R\\n          depth:           8\\n          pstride:         4\\n          offset:          1\\n\\n        Component 1: G\\n          depth:           8\\n          pstride:         4\\n          offset:          2\\n\\n        Component 2: B\\n          depth            8\\n          pstride:         4\\n          offset:          3\\n\\n        Image\\n          default rstride: width * 4\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Running the Leaks Tracer with Full Backtraces in GStreamer (Shell)\nDESCRIPTION: Activates the leaks tracer module for all GstProxyPad objects, tracking references and reporting stack traces with maximum detail. `GST_TRACERS` is configured to specify full backtrace flags, reference tracking, and a filter for GstProxyPad objects. Requires a GStreamer build with tracer modules enabled. Parameters such as object filters, tracing mode, and stack trace detail are passed using a syntax similar to GstStructure. Input is the command to execute; output is detailed trace logs including ref/unref tracking and backtraces.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nGST_TRACERS=leaks(stack-traces-flags=full,filters=\\u201dGstProxyPad\\u201d,check-refs=true) COMMAND\n```\n\n----------------------------------------\n\nTITLE: Setting Up GStreamer Pipeline and Main Loop in Objective-C\nDESCRIPTION: The app_function method creates and configures the GStreamer pipeline, sets up the bus monitoring, and runs the GLib main loop for message processing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-running-pipeline.md#2025-04-23_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\n-(void) app_function\n{\n    GstBus *bus;\n    GSource *bus_source;\n    GError *error = NULL;\n\n    GST_DEBUG (\"Creating pipeline\");\n\n    /* Create our own GLib Main Context and make it the default one */\n    context = g_main_context_new ();\n    g_main_context_push_thread_default(context);\n\n    /* Build pipeline */\n    pipeline = gst_parse_launch(\"audiotestsrc ! audioconvert ! audioresample ! autoaudiosink\", &error);\n    if (error) {\n        gchar *message = g_strdup_printf(\"Unable to build pipeline: %s\", error->message);\n        g_clear_error (&error);\n        [self setUIMessage:message];\n        g_free (message);\n        return;\n    }\n\n    /* Instruct the bus to emit signals for each received message, and connect to the interesting signals */\n    bus = gst_element_get_bus (pipeline);\n    bus_source = gst_bus_create_watch (bus);\n    g_source_set_callback (bus_source, (GSourceFunc) gst_bus_async_signal_func, NULL, NULL);\n    g_source_attach (bus_source, context);\n    g_source_unref (bus_source);\n    g_signal_connect (G_OBJECT (bus), \"message::error\", (GCallback)error_cb, (__bridge void *)self);\n    g_signal_connect (G_OBJECT (bus), \"message::state-changed\", (GCallback)state_changed_cb, (__bridge void *)self);\n    gst_object_unref (bus);\n\n    /* Create a GLib Main Loop and set it to run */\n    GST_DEBUG (\"Entering main loop...\");\n    main_loop = g_main_loop_new (context, FALSE);\n    [self check_initialization_complete];\n    g_main_loop_run (main_loop);\n    GST_DEBUG (\"Exited main loop\");\n    g_main_loop_unref (main_loop);\n    main_loop = NULL;\n\n    /* Free resources */\n    g_main_context_pop_thread_default(context);\n    g_main_context_unref (context);\n    gst_element_set_state (pipeline, GST_STATE_NULL);\n    gst_object_unref (pipeline);\n\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking GStreamer Initialization Completion with Native Window in C\nDESCRIPTION: This function, check_initialization_complete, verifies if both the GStreamer main loop is running and a native window handle has been received. If both conditions are met and initialization hasn't happened yet, it informs the video sink about the native window handle using gst_video_overlay_set_window_handle, notifies the Java application via a JNI callback (on_gstreamer_initialized_method_id), and sets the initialized flag.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nstatic void check_initialization_complete (CustomData *data) {\n  JNIEnv *env = get_jni_env ();\n  if (!data->initialized && data->native_window && data->main_loop) {\n    GST_DEBUG (\"Initialization complete, notifying application. native_window:%p main_loop:%p\", data->native_window, data->main_loop);\n\n    /* The main loop is running and we received a native window, inform the sink about it */\n    gst_video_overlay_set_window_handle (GST_VIDEO_OVERLAY (data->video_sink), (guintptr)data->native_window);\n\n    (*env)->CallVoidMethod (env, data->app, on_gstreamer_initialized_method_id);\n    if ((*env)->ExceptionCheck (env)) {\n      GST_ERROR (\"Failed to call Java method\");\n      (*env)->ExceptionClear (env);\n    }\n    data->initialized = TRUE;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pad-Added Handler in C for GStreamer\nDESCRIPTION: Defines the pad_added_handler function to handle dynamic pad creation, check pad types, and link new pads to the audio processing pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/dynamic-pipelines.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstatic void pad_added_handler (GstElement *src, GstPad *new_pad, CustomData *data) {\n  GstPad *sink_pad = gst_element_get_static_pad (data->convert, \"sink\");\n  \n  if (gst_pad_is_linked (sink_pad)) {\n    g_print (\"We are already linked. Ignoring.\\n\");\n    goto exit;\n  }\n  \n  new_pad_caps = gst_pad_get_current_caps (new_pad, NULL);\n  new_pad_struct = gst_caps_get_structure (new_pad_caps, 0);\n  new_pad_type = gst_structure_get_name (new_pad_struct);\n  if (!g_str_has_prefix (new_pad_type, \"audio/x-raw\")) {\n    g_print (\"It has type '%s' which is not raw audio. Ignoring.\\n\", new_pad_type);\n    goto exit;\n  }\n  \n  ret = gst_pad_link (new_pad, sink_pad);\n  if (GST_PAD_LINK_FAILED (ret)) {\n    g_print (\"Type is '%s' but link failed.\\n\", new_pad_type);\n  } else {\n    g_print (\"Link succeeded (type '%s').\\n\", new_pad_type);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer appsrc Element\nDESCRIPTION: Configuration of appsrc element including audio format settings and signal callbacks for data flow control. Sets up audio caps and connects need-data and enough-data signals.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/short-cutting-the-pipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Configure appsrc */\ngst_audio_info_set_format (&info, GST_AUDIO_FORMAT_S16, SAMPLE_RATE, 1, NULL);\naudio_caps = gst_audio_info_to_caps (&info);\ng_object_set (data.app_source, \"caps\", audio_caps, NULL);\ng_signal_connect (data.app_source, \"need-data\", G_CALLBACK (start_feed), &data);\ng_signal_connect (data.app_source, \"enough-data\", G_CALLBACK (stop_feed), &data);\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Android Build Environment in CMake\nDESCRIPTION: Sets up a complete build environment for a GStreamer Android application. The script determines the correct GStreamer root path based on the target architecture, includes necessary plugins and dependencies, and configures a shared library target with appropriate linking.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/examples/tutorials/android/android-tutorial-4/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18.1)\n\nproject(\"android-tutorial-4\" LANGUAGES C CXX)\n\nif(NOT DEFINED GSTREAMER_ROOT_ANDROID)\n    message(FATAL_ERROR \"GSTREAMER_ROOT_ANDROID is not defined!\")\nendif()\n\nif(ANDROID_ABI STREQUAL \"armeabi\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm\")\nelseif(ANDROID_ABI STREQUAL \"armeabi-v7a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/armv7\")\nelseif(ANDROID_ABI STREQUAL \"arm64-v8a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm64\")\nelseif(ANDROID_ABI STREQUAL \"x86\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86\")\nelseif(ANDROID_ABI STREQUAL \"x86_64\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86_64\")\nelse()\n    message(FATAL_ERROR \"Target arch ABI not supported: ${ANDROID_ABI}\")\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH \"${GSTREAMER_ROOT}/share/cmake\")\n\nset(GSTREAMER_NDK_BUILD_PATH  \"${GSTREAMER_ROOT}/share/gst-android/ndk-build/\")\ninclude(\"${GSTREAMER_NDK_BUILD_PATH}/plugins.cmake\")\nset(GSTREAMER_PLUGINS         ${GSTREAMER_PLUGINS_CORE} ${GSTREAMER_PLUGINS_PLAYBACK} ${GSTREAMER_PLUGINS_CODECS} ${GSTREAMER_PLUGINS_NET} ${GSTREAMER_PLUGINS_SYS})\nset(GStreamer_EXTRA_DEPS gstreamer-video-1.0)\nset(G_IO_MODULES openssl)\nfind_library(ANDROID_LIB android REQUIRED)\nfind_library(LOG_LIB log REQUIRED)\nfind_package(GStreamerMobile COMPONENTS ${GSTREAMER_PLUGINS} fonts ca_certificates REQUIRED)\n\nadd_library(tutorial-4 SHARED tutorial-4.c dummy.cpp)\ntarget_link_libraries(tutorial-4\n    PUBLIC\n        GStreamer::mobile\n        ${ANDROID_LIB}\n        ${LOG_LIB}\n)\nset_target_properties(tutorial-4\n    PROPERTIES\n        C_VISIBILITY_PRESET hidden\n        CXX_VISIBILITY_PRESET hidden\n)\n```\n\n----------------------------------------\n\nTITLE: Handling GStreamer Bus Messages in Qt\nDESCRIPTION: Function to process GStreamer bus messages, including end-of-stream, errors, and state changes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nvoid Player::onBusMessage(const QGst::MessagePtr & message)\n{\n    switch (message->type()) {\n    case QGst::MessageEos: //End of stream. We reached the end of the file.\n        stop();\n        break;\n    case QGst::MessageError: //Some error occurred.\n        qCritical() << message.staticCast<QGst::ErrorMessage>()->error();\n        stop();\n        break;\n    case QGst::MessageStateChanged: //The element in message->source() has changed state\n        if (message->source() == m_pipeline) {\n            handlePipelineStateChange(message.staticCast<QGst::StateChangedMessage>());\n        }\n        break;\n    default:\n        break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writable Object Access Method in GStreamer\nDESCRIPTION: Method used to ensure thread-safe modification of shared objects by creating writable copies when necessary\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/MT-refcounting.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n_get_writable();\n```\n\n----------------------------------------\n\nTITLE: GStreamer Event Types Code Reference\nDESCRIPTION: References to GStreamer event types used for sparse stream handling including FILLER, SEGMENT, FLUSH_START, FLUSH_STOP, and DRAIN events.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/sparsestreams.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`FILLER`\n`SEGMENT`\n`GAP`\n`DRAIN`\n`FLUSH_START`\n`FLUSH_STOP`\n```\n\n----------------------------------------\n\nTITLE: Probe Return Values in GStreamer\nDESCRIPTION: Illustrates the return values used in probe callbacks to control the behavior of the probe and the flow of data through the pad.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/pipeline-manipulation.md#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_DROP\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_REMOVE\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_PASS\n```\n\n----------------------------------------\n\nTITLE: Defining General Encapsulated Object (GEOB) Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the GEOB frame used to encapsulate any type of file within an ID3v2 tag. The frame includes text encoding, MIME type, filename, content description, and the actual binary object data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_16\n\nLANGUAGE: Binary\nCODE:\n```\n<Header for 'General encapsulated object', ID: \"GEOB\">\nText encoding          $xx\nMIME type              <text string> $00\nFilename               <text string according to encoding> $00 (00)\nContent description    <text string according to encoding> $00 (00)\nEncapsulated object    <binary data>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Color Balance Channel Values in GStreamer\nDESCRIPTION: A function that retrieves and displays all color balance channels from a GStreamer pipeline supporting the GstColorBalance interface. It lists each channel's name and current value as a percentage of its range.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/color-balance.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Output the current values of all Color Balance channels */\nstatic void print_current_values (GstElement *pipeline) {\n  const GList *channels, *l;\n\n  /* Output Color Balance values */\n  channels = gst_color_balance_list_channels (GST_COLOR_BALANCE (pipeline));\n  for (l = channels; l != NULL; l = l->next) {\n    GstColorBalanceChannel *channel = (GstColorBalanceChannel *)l->data;\n    gint value = gst_color_balance_get_value (GST_COLOR_BALANCE (pipeline), channel);\n    g_print (\"%s: %3d%% \", channel->label,\n        100 * (value - channel->min_value) / (channel->max_value - channel->min_value));\n  }\n  g_print (\"\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Media with playbin using gst-launch-1.0 (Bash)\nDESCRIPTION: Demonstrates basic media playback using `gst-launch-1.0` and the `playbin` element. `playbin` automatically handles the creation of the necessary pipeline components (source, demuxer, decoders, sinks) to play the media specified by the URI. Requires GStreamer core and the `playbin` element installed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 playbin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\n```\n\n----------------------------------------\n\nTITLE: Complex Pipeline with Multiple Outputs\nDESCRIPTION: Advanced GStreamer pipeline examples showing audio and video stream handling with automatic sink selection\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/using.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=my-random-media-file.mpeg !decodebin name=decoder \\\n       decoder. ! queue ! videoconvert ! xvimagesink \\\n       decoder. ! queue ! audioconvert ! pulsesink\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=my-random-media-file.mpeg !decodebin name=decoder \\\n       decoder. ! queue ! videoconvert ! autovideosink \\\n       decoder. ! queue ! audioconvert ! autoaudiosink\n```\n\n----------------------------------------\n\nTITLE: State Lock Protection Implementation in C\nDESCRIPTION: Demonstrates the basic state locking mechanism to prevent concurrent state modifications and handle state variable protection.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/states.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nset_state(element)\n\nSTATE_LOCK\n\nLOCK\nupdate current, next, pending state\ncookie++\nUNLOCK\n\nchange_state\n\nSTATE_UNLOCK\n```\n\n----------------------------------------\n\nTITLE: URI Setting Function for GStreamer Media Player\nDESCRIPTION: Handles setting a new media URI for playback. It converts the Java string to native format, sets the playbin's URI property, and handles state transitions. This function also determines if the new media source is a live stream.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_33\n\nLANGUAGE: c\nCODE:\n```\nvoid gst_native_set_uri (JNIEnv* env, jobject thiz, jstring uri) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data || !data->pipeline) return;\n  const gchar *char_uri = (*env)->GetStringUTFChars (env, uri, NULL);\n  GST_DEBUG (\"Setting URI to %s\", char_uri);\n  if (data->target_state >= GST_STATE_READY)\n    gst_element_set_state (data->pipeline, GST_STATE_READY);\n  g_object_set(data->pipeline, \"uri\", char_uri, NULL);\n  (*env)->ReleaseStringUTFChars (env, uri, char_uri);\n  data->duration = GST_CLOCK_TIME_NONE;\n  data->is_live = (gst_element_set_state (data->pipeline, data->target_state) == GST_STATE_CHANGE_NO_PREROLL);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the C JNI bridge for GStreamer in Android\nDESCRIPTION: The native C implementation that bridges between Java and GStreamer. It registers the native methods with the JVM and implements the function to retrieve GStreamer version information through the GStreamer API.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/link-against-gstreamer.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <string.h>\n#include <jni.h>\n#include <android/log.h>\n#include <gst/gst.h>\n\n/*\n * Java Bindings\n */\nstatic jstring gst_native_get_gstreamer_info (JNIEnv* env, jobject thiz) {\n  char *version_utf8 = gst_version_string();\n  jstring *version_jstring = (*env)->NewStringUTF(env, version_utf8);\n  g_free (version_utf8);\n  return version_jstring;\n}\n\nstatic JNINativeMethod native_methods[] = {\n  { \"nativeGetGStreamerInfo\", \"()Ljava/lang/String;\", (void *) gst_native_get_gstreamer_info}\n};\n\njint JNI_OnLoad(JavaVM *vm, void *reserved) {\n  JNIEnv *env = NULL;\n\n  if ((*vm)->GetEnv(vm, (void**) &env, JNI_VERSION_1_4) != JNI_OK) {\n    __android_log_print (ANDROID_LOG_ERROR, \"tutorial-1\", \"Could not retrieve JNIEnv\");\n    return 0;\n  }\n  jclass klass = (*env)->FindClass (env, \"org/freedesktop/gstreamer/tutorials/tutorial_1/Tutorial1\");\n  (*env)->RegisterNatives (env, klass, native_methods, G_N_ELEMENTS(native_methods));\n\n  return JNI_VERSION_1_4;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Per-Thread JNI Environment Pointer (C)\nDESCRIPTION: Provides a static function, get_jni_env, that returns the current thread's JNIEnv pointer, attaching the thread to the Java VM if necessary. Uses pthread thread-local storage for caching and efficiency. It ensures that native threads can safely call Java methods from any GStreamer context.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nstatic JNIEnv *get_jni_env (void) {\n  JNIEnv *env;\n\n  if ((env = pthread_getspecific (current_jni_env)) == NULL) {\n    env = attach_current_thread ();\n    pthread_setspecific (current_jni_env, env);\n  }\n\n  return env;\n}\n```\n\n----------------------------------------\n\nTITLE: appsrc-push: GStreamer Validation Scenario Action\nDESCRIPTION: Pushes a sample (buffer) into a specified `appsrc` element. Requires `target-element-name`. Various optional parameters control the buffer's properties (caps, timestamps, duration, content source like file or appsink, offset, size, segment info). Execution can be timed using `playback-time` or triggered by `on-message`. The action waits for the buffer push if the pipeline state allows flow.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_25\n\nLANGUAGE: validate-scenario\nCODE:\n```\n``` validate-scenario\nappsrc-push,\n    target-element-name=(string),\n    [caps=(caps)],\n    [dts=(GstClockTime)],\n    [duration=(GstClockTime)],\n    [file-name=(string)],\n    [fill-mode=(string)],\n    [from-appsink=(string)],\n    [offset=(uint64)],\n    [pts=(GstClockTime)],\n    [segment=((GstStructure)segment,[start=(GstClockTime)][stop=(GstClockTime)][base=(GstClockTime)][offset=(GstClockTime)][time=(GstClockTime)][postion=(GstClockTime)][duration=(GstClockTime)])],\n    [size=(uint64)],\n    [playback-time=(double,string)];\n```\n```\n\n----------------------------------------\n\nTITLE: GStreamer ForceKeyUnit Event Structure\nDESCRIPTION: Definition of the GstForceKeyUnit event structure containing timestamp, stream-time, running-time, and all-headers fields. This structure is used to communicate keyframe requirements through the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/keyframe-force.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGstForceKeyUnit\n - \"timestamp\" (G_TYPE_UINT64): the timestamp of the buffer that triggered the event.\n - \"stream-time\" (G_TYPE_UINT64): the stream position that triggered the event.\n - \"running-time\" (G_TYPE_UINT64): the running time of the stream when the event was triggered.\n - \"all-headers\" (G_TYPE_BOOLEAN): Send all headers, including those in the caps or those sent at the start of the stream.\n - ...: optional other data fields.\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Time for Live Sources in GStreamer\nDESCRIPTION: This snippet demonstrates how to calculate the running time for live sources in GStreamer. It subtracts the base_time from the absolute_time to get the current running_time of the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/element-source.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nabsolute_time - base_time\n```\n\n----------------------------------------\n\nTITLE: Converting WAV to Ogg Vorbis or MP3 with GStreamer\nDESCRIPTION: Demonstrates how to convert a WAV file to either Ogg Vorbis or MP3 format using GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=music.wav ! wavparse ! audioconvert ! vorbisenc ! oggmux ! filesink location=music.ogg\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=music.wav ! wavparse ! audioconvert ! lamemp3enc ! xingmux ! id3v2mux ! filesink location=music.mp3\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Progress Codes in GStreamer\nDESCRIPTION: Lists standard codes for various asynchronous operations in GStreamer, such as opening resources, DNS lookups, and socket connections. These codes help standardize progress reporting across different elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/progress.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* \"open\" : A resource is being opened\n\n* \"close\" : A resource is being closed\n\n* \"name-lookup\" : A DNS lookup.\n\n* \"connect\" : A socket connection is established\n\n* \"disconnect\" : a socket connection is closed\n\n* \"request\" : A request is sent to a server and we are waiting for a reply.\nThis message is posted right before the request is sent and completed when the\nreply has arrived completely. * \"mount\" : A volume is being mounted\n\n* \"unmount\" : A volume is being unmounted\n```\n\n----------------------------------------\n\nTITLE: Media Size Detection in GStreamer Android Application\nDESCRIPTION: Retrieves the video size from negotiated caps and reports it to the Java application. This function accesses the video sink's pad, extracts width and height information, and applies pixel aspect ratio correction before notifying the Java layer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_34\n\nLANGUAGE: c\nCODE:\n```\nstatic void check_media_size (CustomData *data) {\n  JNIEnv *env = get_jni_env ();\n  GstElement *video_sink;\n  GstPad *video_sink_pad;\n  GstCaps *caps;\n  GstVideoFormat fmt;\n  int width;\n  int height;\n\n  /* Retrieve the Caps at the entrance of the video sink */\n  g_object_get (data->pipeline, \"video-sink\", &video_sink, NULL);\n  video_sink_pad = gst_element_get_static_pad (video_sink, \"sink\");\n  caps = gst_pad_get_negotiated_caps (video_sink_pad);\n\n  if (gst_video_format_parse_caps(caps, &fmt, &width, &height)) {\n    int par_n, par_d;\n    if (gst_video_parse_caps_pixel_aspect_ratio (caps, &par_n, &par_d)) {\n      width = width * par_n / par_d;\n    }\n    GST_DEBUG (\"Media size is %dx%d, notifying application\", width, height);\n\n    (*env)->CallVoidMethod (env, data->app, on_media_size_changed_method_id, (jint)width, (jint)height);\n    if ((*env)->ExceptionCheck (env)) {\n      GST_ERROR (\"Failed to call Java method\");\n      (*env)->ExceptionClear (env);\n    }\n  }\n\n  gst_caps_unref(caps);\n  gst_object_unref (video_sink_pad);\n  gst_object_unref(video_sink);\n}\n```\n\n----------------------------------------\n\nTITLE: Using GStreamer Plugin Categories in the Makefile (Makefile)\nDESCRIPTION: This Makefile snippet demonstrates how to include grouped sets of GStreamer plugins in an Android NDK build by referencing plugin category variables defined in a plugins.mk file. Instead of manually listing plugins, categories simplify maintenance and allow modular expansion. The code requires GSTREAMER_NDK_BUILD_PATH to be set and assumes plugins.mk exists at that path. Categories (e.g., GSTREAMER_PLUGINS_CORE, GSTREAMER_PLUGINS_CODECS) can be combined for flexible configuration. Dependency: Make sure plugins.mk has been downloaded as part of the GStreamer Android distribution.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/for-android-development.md#2025-04-23_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\ninclude $(GSTREAMER_NDK_BUILD_PATH)/plugins.mk\\nGSTREAMER_PLUGINS  := $(GSTREAMER_PLUGINS_CORE) $(GSTREAMER_PLUGINS_CODECS) playbin souphttpsrc\n```\n\n----------------------------------------\n\nTITLE: GStreamer Plugin Configuration in Android.mk\nDESCRIPTION: This makefile snippet configures the required GStreamer plugins for the Android media player, including core, playback, codecs, network, and system plugins.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_41\n\nLANGUAGE: makefile\nCODE:\n```\nGSTREAMER_PLUGINS         := $(GSTREAMER_PLUGINS_CORE) $(GSTREAMER_PLUGINS_PLAYBACK) $(GSTREAMER_PLUGINS_CODECS) $(GSTREAMER_PLUGINS_NET) $(GSTREAMER_PLUGINS_SYS)\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Options with GOption in GStreamer 0.10 (C)\nDESCRIPTION: GStreamer 0.10 adopts the GOption framework from GLib (version 2.6+) for command-line argument parsing, replacing the Popt library integration used in 0.8. The function `gst_init_get_popt_table()` is removed. Applications should now use `gst_init_get_option_group()` to retrieve a `GOptionGroup` containing GStreamer's command-line options and integrate it into their application's GOption parsing logic.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/porting.md#2025-04-23_snippet_8\n\nLANGUAGE: C\nCODE:\n```\ngst_init_get_popt_table ()\n```\n\nLANGUAGE: C\nCODE:\n```\ngst_init_get_option_group ()\n```\n\n----------------------------------------\n\nTITLE: Commercial Frame Structure\nDESCRIPTION: Specifies the complex frame structure for commercial offers, including pricing, validity, seller details, and logo.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_34\n\nLANGUAGE: plain\nCODE:\n```\n<Header for 'Commercial frame', ID: \"COMR\">\nText encoding     $xx\nPrice string      <text string> $00\nValid until       <text string>\nContact URL       <text string> $00\nReceived as       $xx\nName of seller    <text string according to encoding> $00 (00)\nDescription       <text string according to encoding> $00 (00)\nPicture MIME type <string> $00\nSeller logo       <binary data>\n```\n\n----------------------------------------\n\nTITLE: Printing Processing Latencies in a GStreamer Audio Pipeline (Shell)\nDESCRIPTION: Activates the latency tracer module to print processing latency stats for an audio pipeline. The command configures GST_TRACERS=latency and constructs a sample pipeline with audiotestsrc, audioconvert, volume, and autoaudiosink. Input is a gst-launch-1.0 command; output is latency info for processing pipeline stages, useful for performance tuning or debugging.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nGST_DEBUG=\\\"GST_TRACER:7\\\" GST_TRACERS=latency gst-launch-1.0 \\\\\naudiotestsrc num-buffers=10 ! audioconvert ! volume volume=0.7 ! \\\\\nautoaudiosink\n```\n\n----------------------------------------\n\nTITLE: Implementing Autoplug Select Callback in GStreamer\nDESCRIPTION: This code snippet shows the function signature for the 'autoplug-select' signal callback in GstDecodeBin. It allows the application to choose which element factory should be tried next during autoplugging.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/decodebin.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ngint user_function (GstElement* decodebin, GstPad* pad, GstCaps*caps, GValueArray* factories);\n```\n\n----------------------------------------\n\nTITLE: Discovering Media File Information with gst-discoverer-1.0 (Bash)\nDESCRIPTION: Uses `gst-discoverer-1.0` with the verbose flag (`-v`) to analyze a media file URI and display its properties. The output shows the detected topology, including the container format (`video/webm`) and details about the contained audio and video streams (codec, resolution, framerate, channels, sample rate, language, tags). It also lists overall media properties like duration and seekability. This is helpful for determining the necessary GStreamer elements needed to process the file. Requires GStreamer core and the `gst-discoverer-1.0` tool.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngst-discoverer-1.0 https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm -v\n\nAnalyzing https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\nDone discovering https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\nTopology:\n  container: video/webm\n    audio: audio/x-vorbis, channels=(int)2, rate=(int)48000\n      Codec:\n        audio/x-vorbis, channels=(int)2, rate=(int)48000\n      Additional info:\n        None\n      Language: en\n      Channels: 2\n      Sample rate: 48000\n      Depth: 0\n      Bitrate: 80000\n      Max bitrate: 0\n      Tags:\n        taglist, language-code=(string)en, container-format=(string)Matroska, audio-codec=(string)Vorbis, application-name=(string)ffmpeg2theora-0.24, encoder=(string)\"Xiph.Org\\ libVorbis\\ I\\ 20090709\", encoder-version=(uint)0, nominal-bitrate=(uint)80000, bitrate=(uint)80000;\n    video: video/x-vp8, width=(int)854, height=(int)480, framerate=(fraction)25/1\n      Codec:\n        video/x-vp8, width=(int)854, height=(int)480, framerate=(fraction)25/1\n      Additional info:\n        None\n      Width: 854\n      Height: 480\n      Depth: 0\n      Frame rate: 25/1\n      Pixel aspect ratio: 1/1\n      Interlaced: false\n      Bitrate: 0\n      Max bitrate: 0\n      Tags:\n        taglist, video-codec=(string)\"VP8\\ video\", container-format=(string)Matroska;\n\nProperties:\n  Duration: 0:00:52.250000000\n  Seekable: yes\n  Tags:\n      video codec: VP8 video\n      language code: en\n      container format: Matroska\n      application name: ffmpeg2theora-0.24\n      encoder: Xiph.Org libVorbis I 20090709\n      encoder version: 0\n      audio codec: Vorbis\n      nominal bitrate: 80000\n      bitrate: 80000\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pad Probe Callback Function Definition\nDESCRIPTION: Definition of the probe callback function that handles pad events. The callback receives the pad, probe info, and user data as parameters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/probes.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nGstPadProbeReturn (*GstPadProbeCallback) (GstPad *pad, GstPadProbeInfo *info,\n    gpointer user_data);\n```\n\n----------------------------------------\n\nTITLE: Generating video test pattern with GStreamer via Bash\nDESCRIPTION: This gst-launch-1.0 pipeline produces a sample video pattern using videotestsrc, passes it through videoconvert, and displays it using autovideosink. The videotestsrc can be configured with the 'pattern' property to change the pattern; ensure required GStreamer plugins are available. The output is a test video window, helpful for pipeline debugging.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 videotestsrc ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Android Build Environment\nDESCRIPTION: Sets up the basic CMake project configuration and determines the GStreamer root directory based on the Android ABI architecture. Validates required environment variables and sets architecture-specific paths.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/webrtc/android/app/src/main/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18.1)\n\nproject(\"android-webrtc\" LANGUAGES C CXX)\n\nif(NOT DEFINED GSTREAMER_ROOT_ANDROID)\n    message(FATAL_ERROR \"GSTREAMER_ROOT_ANDROID is not defined!\")\nendif()\n\nif(ANDROID_ABI STREQUAL \"armeabi\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm\")\nelseif(ANDROID_ABI STREQUAL \"armeabi-v7a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/armv7\")\nelseif(ANDROID_ABI STREQUAL \"arm64-v8a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm64\")\nelseif(ANDROID_ABI STREQUAL \"x86\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86\")\nelseif(ANDROID_ABI STREQUAL \"x86_64\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86_64\")\nelse()\n    message(FATAL_ERROR \"Target arch ABI not supported: ${ANDROID_ABI}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Referencing GStreamer Binary Directory in Visual Studio\nDESCRIPTION: This snippet shows the syntax used within Visual Studio property pages (like the Debugging Working Directory setting) to reference the GStreamer binary directory via the `GSTREAMER_ROOT_X86` environment variable. The `$(...)` notation is specific to Visual Studio's macro expansion.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_9\n\nLANGUAGE: visualstudio\nCODE:\n```\n$(GSTREAMER_ROOT_X86)\\bin\n```\n\n----------------------------------------\n\nTITLE: Defining the ID3v2 Frame Header Structure (Text)\nDESCRIPTION: Specifies the 10-byte structure for an ID3v2 frame header. It includes a 4-character Frame ID ($xx xx xx xx, using capital A-Z and 0-9), a 32-bit synchsafe integer Size (4 * %0xxxxxxx, excluding the header), and two Flag bytes ($xx xx).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-structure.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nFrame ID      $xx xx xx xx  (four characters)\nSize      4 * %0xxxxxxx\nFlags         $xx xx\n```\n\n----------------------------------------\n\nTITLE: Handling Media Size Changes in GStreamer iOS Video Player\nDESCRIPTION: This snippet demonstrates how the VideoViewController handles media size changes from the GStreamerBackend. It updates the view layout to maintain the correct aspect ratio of the video and ensures UI updates happen on the main thread.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n-(void) mediaSizeChanged:(NSInteger)width height:(NSInteger)height\n{\n    media_width = width;\n    media_height = height;\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [self viewDidLayoutSubviews];\n        [video_view setNeedsLayout];\n        [video_view layoutIfNeeded];\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element and Pad Properties - GStreamer - validate-scenario\nDESCRIPTION: Defines an action to check current element or pad property values in a running pipeline. Supports optional 'playback-time' parameter to define when the check is performed. The snippet expects property references in the form element[.pad]::property-name, used to validate test expectations for property states.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_19\n\nLANGUAGE: validate-scenario\nCODE:\n```\ncheck-properties,\\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Setting up a Data Probe and Video Pipeline in GStreamer (C)\nDESCRIPTION: Implements a GStreamer pipeline in C that attaches a pad probe to a videotestsrc element, allowing inspection and in-place modification (horizontal inversion) of video buffer data as it streams through the pipeline. The example covers pipeline construction, element instantiation, pad probe setup via gst_pad_add_probe(), and safe buffer manipulation with gst_buffer_make_writable() and gst_buffer_map(). Prerequisites include GStreamer development headers and libraries, typically available through package managers. Inputs are hardcoded pipeline parameters and element names, with output displayed in an application-created window. Proper error checks and assertions are included; however, modifying buffer data is only guaranteed safe if the buffer is writable, and blocking operations/contentious state changes should be avoided in the probe callback context.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/pipeline-manipulation.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nstatic GstPadProbeReturn\ncb_have_data (GstPad          *pad,\n              GstPadProbeInfo *info,\n              gpointer         user_data)\n{\n  gint x, y;\n  GstMapInfo map;\n  guint16 *ptr, t;\n  GstBuffer *buffer;\n\n  buffer = GST_PAD_PROBE_INFO_BUFFER (info);\n\n  buffer = gst_buffer_make_writable (buffer);\n\n  /* Making a buffer writable can fail (for example if it\n   * cannot be copied and is used more than once)\n   */\n  if (buffer == NULL)\n    return GST_PAD_PROBE_OK;\n\n  /* Mapping a buffer can fail (non-writable) */\n  if (gst_buffer_map (buffer, &map, GST_MAP_WRITE)) {\n    ptr = (guint16 *) map.data;\n    /* invert data */\n    for (y = 0; y < 288; y++) {\n      for (x = 0; x < 384 / 2; x++) {\n        t = ptr[384 - 1 - x];\n        ptr[384 - 1 - x] = ptr[x];\n        ptr[x] = t;\n      }\n      ptr += 384;\n    }\n    gst_buffer_unmap (buffer, &map);\n  }\n\n  GST_PAD_PROBE_INFO_DATA (info) = buffer;\n\n  return GST_PAD_PROBE_OK;\n}\n\ngint\nmain (gint   argc,\n      gchar *argv[])\n{\n  GMainLoop *loop;\n  GstElement *pipeline, *src, *sink, *filter, *csp;\n  GstCaps *filtercaps;\n  GstPad *pad;\n\n  /* init GStreamer */\n  gst_init (&argc, &argv);\n  loop = g_main_loop_new (NULL, FALSE);\n\n  /* build */\n  pipeline = gst_pipeline_new (\"my-pipeline\");\n  src = gst_element_factory_make (\"videotestsrc\", \"src\");\n  if (src == NULL)\n    g_error (\"Could not create 'videotestsrc' element\");\n\n  filter = gst_element_factory_make (\"capsfilter\", \"filter\");\n  g_assert (filter != NULL); /* should always exist */\n\n  csp = gst_element_factory_make (\"videoconvert\", \"csp\");\n  if (csp == NULL)\n    g_error (\"Could not create 'videoconvert' element\");\n\n  sink = gst_element_factory_make (\"xvimagesink\", \"sink\");\n  if (sink == NULL) {\n    sink = gst_element_factory_make (\"ximagesink\", \"sink\");\n    if (sink == NULL)\n      g_error (\"Could not create neither 'xvimagesink' nor 'ximagesink' element\");\n  }\n\n  gst_bin_add_many (GST_BIN (pipeline), src, filter, csp, sink, NULL);\n  gst_element_link_many (src, filter, csp, sink, NULL);\n  filtercaps = gst_caps_new_simple (\"video/x-raw\",\n               \"format\", G_TYPE_STRING, \"RGB16\",\n               \"width\", G_TYPE_INT, 384,\n               \"height\", G_TYPE_INT, 288,\n               \"framerate\", GST_TYPE_FRACTION, 25, 1,\n               NULL);\n  g_object_set (G_OBJECT (filter), \"caps\", filtercaps, NULL);\n  gst_caps_unref (filtercaps);\n\n  pad = gst_element_get_static_pad (src, \"src\");\n  gst_pad_add_probe (pad, GST_PAD_PROBE_TYPE_BUFFER,\n      (GstPadProbeCallback) cb_have_data, NULL, NULL);\n  gst_object_unref (pad);\n\n  /* run */\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n\n  /* wait until it's up and running or failed */\n  if (gst_element_get_state (pipeline, NULL, NULL, -1) == GST_STATE_CHANGE_FAILURE) {\n    g_error (\"Failed to go into PLAYING state\");\n  }\n\n  g_print (\"Running ...\\n\");\n  g_main_loop_run (loop);\n\n  /* exit */\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (pipeline);\n\n  return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Logging Optional Tracer Values in GStreamer (C)\nDESCRIPTION: Shows how to log optional tracer values, using a boolean to indicate presence and the actual value if present.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nGstClockTime pts = GST_BUFFER_PTS (buf);\n\ngst_tracer_record_log (fmt, ..., GST_CLOCK_TIME_IS_VALID (pts), pts, ...);\n```\n\n----------------------------------------\n\nTITLE: GstBus Method References\nDESCRIPTION: Core GstBus methods for message handling including posting (gst_bus_post), retrieving (gst_bus_peek, gst_bus_pop), polling (gst_bus_poll), and sync handler setup (gst_bus_set_sync_handler).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstbus.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngst_bus_post()\ngst_bus_peek()\ngst_bus_pop()\ngst_bus_poll()\ngst_bus_set_sync_handler()\n```\n\n----------------------------------------\n\nTITLE: Implementing Playback Control Callbacks\nDESCRIPTION: Callback functions for play, pause, and stop buttons that set the GStreamer pipeline to the appropriate state. The stop function sets the pipeline to READY state rather than NULL for faster state transitions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n/* This function is called when the PLAY button is clicked */\nstatic void play_cb (GtkButton *button, CustomData *data) {\n  gst_element_set_state (data->playbin, GST_STATE_PLAYING);\n}\n\n/* This function is called when the PAUSE button is clicked */\nstatic void pause_cb (GtkButton *button, CustomData *data) {\n  gst_element_set_state (data->playbin, GST_STATE_PAUSED);\n}\n\n/* This function is called when the STOP button is clicked */\nstatic void stop_cb (GtkButton *button, CustomData *data) {\n  gst_element_set_state (data->playbin, GST_STATE_READY);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Transform Element Processing Functions\nDESCRIPTION: Core processing functions for GStreamer transform elements. The transform() function handles output to new buffers, while transform_ip() performs in-place transformations. These functions support three operational modes: passthrough, in-place, and copy-transform.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/element-transform.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntransform() - Transform the input buffer to the output buffer. The output buffer is guaranteed to be writable and different from the input buffer.\n\ntransform_ip() - Transform the input buffer in-place. The input buffer is writable and of bigger or equal size than the output buffer.\n```\n\n----------------------------------------\n\nTITLE: GstAllocator Structure Definition in C\nDESCRIPTION: Definition of the allocator object that creates and manages GstMemory instances. Includes function pointers for memory operations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/memory.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct _GstAllocator {\n  GstObject                 object;\n\n  const gchar               *mem_type;\n\n  GstMemoryMapFunction       mem_map;\n  GstMemoryUnmapFunction     mem_unmap;\n  GstMemoryCopyFunction      mem_copy;\n  GstMemoryShareFunction     mem_share;\n  GstMemoryIsSpanFunction    mem_is_span;\n\n  GstMemoryMapFullFunction   mem_map_full;\n  GstMemoryUnmapFullFunction mem_unmap_full;\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Pull Range Support in GStreamer (C)\nDESCRIPTION: Illustrates the use of gst_pad_check_pull_range() to determine if a sinkpad supports pull-based operations during pad activation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/push-pull.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ngst_pad_check_pull_range()\n```\n\n----------------------------------------\n\nTITLE: Allocating Buffer with Negotiated Allocator/Bufferpool in GStreamer\nDESCRIPTION: This snippet shows how to allocate a buffer using the negotiated allocator or bufferpool after performing an ALLOCATION query in GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/negotiation.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbuffer = gst_buffer_new_allocate (NULL, size, 0);\n# fill buffer and push\n```\n\n----------------------------------------\n\nTITLE: UI Position Refresh Function for GStreamer Media Player\nDESCRIPTION: Updates UI with current playback position and duration. This function queries the pipeline for the current position and duration, converts the values from nanoseconds to milliseconds, and notifies the Java UI through a callback.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_36\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean refresh_ui (CustomData *data) {\n  gint64 current = -1;\n  gint64 position;\n\n  /* We do not want to update anything unless we have a working pipeline in the PAUSED or PLAYING state */\n  if (!data || !data->pipeline || data->state < GST_STATE_PAUSED)\n    return TRUE;\n\n  /* If we didn't know it yet, query the stream duration */\n  if (!GST_CLOCK_TIME_IS_VALID (data->duration)) {\n    if (!gst_element_query_duration (data->pipeline, GST_FORMAT_TIME, &data->duration)) {\n      GST_WARNING (\"Could not query current duration\");\n    }\n  }\n\n  if (gst_element_query_position (data->pipeline, GST_FORMAT_TIME, &position)) {\n    /* Java expects these values in milliseconds, and GStreamer provides nanoseconds */\n    set_current_ui_position (position / GST_MSECOND, data->duration / GST_MSECOND, data);\n  }\n  return TRUE;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Variables for JNI and Thread Management (C)\nDESCRIPTION: Defines global static variables to cache JNI references, GStreamer pipeline thread identifiers, and method/field IDs. These are shared across all functions in the file, providing persistent handles for thread-specific data, Java VM, JNI field lookups, and method invocations. Dependencies include pthread and JNI; variables must be initialized before use, typically in JNI_OnLoad or class initialization routines.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nstatic pthread_t gst_app_thread;\nstatic pthread_key_t current_jni_env;\nstatic JavaVM *java_vm;\nstatic jfieldID custom_data_field_id;\nstatic jmethodID set_message_method_id;\nstatic jmethodID on_gstreamer_initialized_method_id;\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Latency in GStreamer Pipeline (C)\nDESCRIPTION: This code snippet demonstrates how to calculate the minimum latency in a GStreamer pipeline by adding the upstream minimum latency to the element's own minimum latency.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/latency.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nmin_latency = upstream_min_latency + own_min_latency\n```\n\n----------------------------------------\n\nTITLE: Updating GstTagList Usage in GStreamer 1.0\nDESCRIPTION: Example showing how to make a GstTagList writable before modifying it in GStreamer 1.0. With the transition to the refcounted mini object model, tag lists must be made writable before modification.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\ntaglist = gst_tag_list_make_writable (taglist);\n```\n\n----------------------------------------\n\nTITLE: Running GStreamer Unit Tests with gst-validate-launcher\nDESCRIPTION: Basic commands for running GStreamer unit tests with gst-validate-launcher, including how to run all tests, only core tests, or specific component tests.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-launcher.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-launcher check.gst*\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-Based Seeking in GStreamer Pipeline\nDESCRIPTION: Demonstrates how to create and send a seek event to a GStreamer element. The function creates a new seek event with specified time parameters and sends it upstream in the pipeline to request a position change in the media stream.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/data.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic void\nseek_to_time (GstElement *element,\n          guint64     time_ns)\n{\n  GstEvent *event;\n\n  event = gst_event_new_seek (1.0, GST_FORMAT_TIME,\n                  GST_SEEK_FLAG_NONE,\n                  GST_SEEK_METHOD_SET, time_ns,\n                  GST_SEEK_TYPE_NONE, G_GUINT64_CONSTANT (0));\n  gst_element_send_event (element, event);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Keyframe in GStreamer\nDESCRIPTION: Command to add a keyframe to an element property at a specific timestamp with a given value.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_16\n\nLANGUAGE: validate-scenario\nCODE:\n```\nadd-keyframe,\n    [playback-time=(double,string)],\n    element-name=(string),\n    property-name=(string),\n    timestamp=(string or float),\n    value=(float);\n```\n\n----------------------------------------\n\nTITLE: Initializing GStreamer and Qt Application in C++\nDESCRIPTION: Main function that initializes GStreamer and Qt, creates the MediaApp, and starts playback if a file is provided as an argument.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nint main(int argc, char *argv[])\n{\n    QApplication app(argc, argv);\n    QGst::init(&argc, &argv);\n    MediaApp media;\n    media.show();\n    if (argc == 2) {\n        media.openFile(argv[1]);\n    }\n    return app.exec();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android NDK Build for GStreamer Video with Android.mk\nDESCRIPTION: Android NDK build configuration file that sets up the necessary libraries and dependencies for the GStreamer video tutorial. It includes core, system, and effects plugins, as well as the gstreamer-video library for the VideoOverlay interface.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE    := tutorial-3\nLOCAL_SRC_FILES := tutorial-3.c\nLOCAL_SHARED_LIBRARIES := gstreamer_android\nLOCAL_LDLIBS := -llog -landroid\ninclude $(BUILD_SHARED_LIBRARY)\n\nifndef GSTREAMER_ROOT\nifndef GSTREAMER_ROOT_ANDROID\n$(error GSTREAMER_ROOT_ANDROID is not defined!)\nendif\nGSTREAMER_ROOT        := $(GSTREAMER_ROOT_ANDROID)\nendif\nGSTREAMER_NDK_BUILD_PATH  := $(GSTREAMER_ROOT)/share/gst-android/ndk-build/\ninclude $(GSTREAMER_NDK_BUILD_PATH)/plugins.mk\nGSTREAMER_PLUGINS         := $(GSTREAMER_PLUGINS_CORE) $(GSTREAMER_PLUGINS_SYS) $(GSTREAMER_PLUGINS_EFFECTS)\nGSTREAMER_EXTRA_DEPS      := gstreamer-video-1.0\ninclude $(GSTREAMER_NDK_BUILD_PATH)/gstreamer.mk\n```\n\n----------------------------------------\n\nTITLE: Launching and Logging GStreamer Android Tutorials - Bash\nDESCRIPTION: These shell commands illustrate how to launch an installed GStreamer Android tutorial application and see real-time GStreamer logs. The first command starts the application activity directly from an adb shell, the second filters and outputs GStreamer-related log lines using logcat and egrep. Prerequisites include an attached and unlocked Android device, the Adb tool, and a successfully installed application. Outputs provide immediate execution of the app and show all log entries containing 'gst'.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/for-android-development.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ adb shell am start -n adb shell am start -n org.freedesktop.gstreamer.tutorials.tutorial_1/.Tutorial1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ adb logcat | egrep '(gst)'\n```\n\n----------------------------------------\n\nTITLE: GstBin Function References in Markdown\nDESCRIPTION: Key function references for GstBin operations including element addition/removal, element retrieval, and message handling within GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstbin.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngst_bin_add()\ngst_bin_remove()\ngst_bin_get_by_name()\ngst_bin_iterate_elements()\n```\n\n----------------------------------------\n\nTITLE: Inspecting Action Types in GES\nDESCRIPTION: Command to inspect available action types in GStreamer Editing Services that can be used in scenarios.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/ges-launch.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nges-launch-1.0 --inspect-action-type\n```\n\n----------------------------------------\n\nTITLE: Printing Stream Topology\nDESCRIPTION: Recursively prints the topology of streams and their substreams\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n/* Print information regarding a stream and its substreams, if any */\nstatic void print_topology (GstDiscovererStreamInfo *info, gint depth) {\n  GstDiscovererStreamInfo *next;\n\n  if (!info)\n    return;\n\n  print_stream_info (info, depth);\n\n  next = gst_discoverer_stream_info_get_next (info);\n  if (next) {\n    print_topology (next, depth + 1);\n    gst_discoverer_stream_info_unref (next);\n  } else if (GST_IS_DISCOVERER_CONTAINER_INFO (info)) {\n    GList *tmp, *streams;\n\n    streams = gst_discoverer_container_info_get_streams (GST_DISCOVERER_CONTAINER_INFO (info));\n    for (tmp = streams; tmp; tmp = tmp->next) {\n      GstDiscovererStreamInfo *tmpinf = (GstDiscovererStreamInfo *) tmp->data;\n      print_topology (tmpinf, depth + 1);\n    }\n    gst_discoverer_stream_info_list_free (streams);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering JNI Native Methods and Library Initialization (C)\nDESCRIPTION: Defines the list of native methods exported to the Java layer and the 'JNI_OnLoad' function that registers them at library load time. 'JNI_OnLoad' also retrieves the initial JNI environment, finds the Java class, registers native methods, creates a pthread key for thread-local storage, and returns supported JNI version. If the environment can't be obtained, it logs an error and aborts loading.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_24\n\nLANGUAGE: c\nCODE:\n```\nstatic JNINativeMethod native_methods[] = {\n  { \"nativeInit\", \"()V\", (void *) gst_native_init},\n  { \"nativeFinalize\", \"()V\", (void *) gst_native_finalize},\n  { \"nativePlay\", \"()V\", (void *) gst_native_play},\n  { \"nativePause\", \"()V\", (void *) gst_native_pause},\n  { \"nativeClassInit\", \"()Z\", (void *) gst_native_class_init}\n};\n\njint JNI_OnLoad(JavaVM *vm, void *reserved) {\n  JNIEnv *env = NULL;\n\n  java_vm = vm;\n\n  if ((*vm)->GetEnv(vm, (void**) &env, JNI_VERSION_1_4) != JNI_OK) {\n    __android_log_print (ANDROID_LOG_ERROR, \"tutorial-2\", \"Could not retrieve JNIEnv\");\n    return 0;\n  }\n  jclass klass = (*env)->FindClass (env, \"org/freedesktop/gstreamer/tutorials/tutorial_2/Tutorial2\");\n  (*env)->RegisterNatives (env, klass, native_methods, G_N_ELEMENTS(native_methods));\n\n  pthread_key_create (&current_jni_env, detach_current_thread);\n\n  return JNI_VERSION_1_4;\n}\n```\n\n----------------------------------------\n\nTITLE: Source Pad Event Handling in GStreamer\nDESCRIPTION: Function call for pushing events on source pads. The function stores sticky events in an array before sending to peer pad.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/events.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ngst_pad_push_event()\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking GStreamer Elements in a Pipeline (C)\nDESCRIPTION: Shows the process of initializing GStreamer, creating a new pipeline (`gst_pipeline_new`), instantiating source, filter, and sink elements ('fakesrc', 'identity', 'fakesink') using `gst_element_factory_make`, adding them to the pipeline using `gst_bin_add_many`, and linking them sequentially with `gst_element_link_many`. It includes a check to ensure linking was successful.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/elements.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\nint\nmain (int   argc,\n      char *argv[])\n{\n  GstElement *pipeline;\n  GstElement *source, *filter, *sink;\n\n  /* init */\n  gst_init (&argc, &argv);\n\n  /* create pipeline */\n  pipeline = gst_pipeline_new (\"my-pipeline\");\n\n  /* create elements */\n  source = gst_element_factory_make (\"fakesrc\", \"source\");\n  filter = gst_element_factory_make (\"identity\", \"filter\");\n  sink = gst_element_factory_make (\"fakesink\", \"sink\");\n\n  /* must add elements to pipeline before linking them */\n  gst_bin_add_many (GST_BIN (pipeline), source, filter, sink, NULL);\n\n  /* link */\n  if (!gst_element_link_many (source, filter, sink, NULL)) {\n    g_warning (\"Failed to link elements!\");\n  }\n\n[..]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Using Cropping Metadata (GStreamer Video Meta, C)\nDESCRIPTION: This snippet shows how to retrieve GstVideoCropMeta from a GstBuffer and use its fields to determine how to render a video frame, either cropped or uncropped. It uses gst_buffer_get_video_crop_meta to fetch the metadata. If present, it calls a rendering function with cropping parameters; otherwise, it falls back to default rendering. Requires the gst/video/gstvideometa.h header and valid function implementations for frame rendering.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/video/gstvideometa.h>\n\n[...]\n  GstVideoCropMeta *meta;\n\n  /* buffer points to a video frame, get the cropping metadata */\n  meta = gst_buffer_get_video_crop_meta (buffer);\n\n  if (meta) {\n    /* render frame with cropping */\n    _render_frame_cropped (buffer, meta->x, meta->y, meta->width, meta->height);\n  } else {\n    /* render frame */\n    _render_frame (buffer);\n  }\n[...]\n\n```\n\n----------------------------------------\n\nTITLE: Defining CustomData Structure in C for GStreamer Android Integration\nDESCRIPTION: Defines a structure to maintain state between Java and C code, including references to the application instance, GStreamer pipeline, GLib context and main loop.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_26\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct _CustomData {\n  jobject app;           /* Application instance, used to call its methods. A global reference is kept. */\n  GstElement *pipeline;  /* The running pipeline */\n  GMainContext *context; /* GLib context used to run the main loop */\n  GMainLoop *main_loop;  /* GLib main loop */\n  gboolean initialized;  /* To avoid informing the UI multiple times about the initialization */\n} CustomData;\n```\n\n----------------------------------------\n\nTITLE: Identifying System C Runtime DLL\nDESCRIPTION: Specifies the target system C Runtime library (MSVCRT.DLL) used by GStreamer and recommended for applications to avoid runtime conflicts and dependencies on specific Visual Studio versions. This DLL is present on Windows systems since XP.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nMSVCRT.DLL\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Actions\nDESCRIPTION: Action to execute a series of actions repeatedly using an iterator parameter, supporting both range-based and value-based iterations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_36\n\nLANGUAGE: validate-scenario\nCODE:\n```\nforeach,\n    actions=({array of [structures]}),\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Internal Parent Setting Implementation\nDESCRIPTION: Core implementation of _set_parent() method that handles atomic parent assignment and floating reference management.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nlock (child);\nif (child->parent != null) {\n  unlock (child);\n  return false;\n}\nif (is_floating (child)) {\n  unset (child, floating);\n}\nelse {\n  _ref (child);\n}\nchild->parent = parent;\nunlock (child);\n_signal (parent_set, child, parent);\nreturn true;\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom GstMeta API Type (GStreamer Meta API Registration, C)\nDESCRIPTION: This C snippet registers a custom GstMeta API type by implementing my_example_meta_api_get_type, which calls gst_meta_api_type_register with a unique name and tag set. It illustrates required best practice for thread-safe GType initialization using g_once_init_enter/leave. The snippet assumes my-example-meta.h is available and GStreamer is properly initialized. It is necessary for custom meta extensions to be recognized by GStreamer buffer objects.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#include \"my-example-meta.h\"\n\nGType\nmy_example_meta_api_get_type (void)\n{\n  static GType type;\n  static const gchar *tags[] = { \"foo\", \"bar\", NULL };\n\n  if (g_once_init_enter (&type)) {\n    GType _type = gst_meta_api_type_register (\"MyExampleMetaAPI\", tags);\n    g_once_init_leave (&type, _type);\n  }\n  return type;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Delayed Seeks in GStreamer iOS Pipeline State Change\nDESCRIPTION: This code snippet demonstrates how to execute a delayed seek when the pipeline state changes from READY to PAUSED. It checks for a scheduled seek and performs it if necessary.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_17\n\nLANGUAGE: Objective-C\nCODE:\n```\nif (old_state == GST_STATE_READY && new_state == GST_STATE_PAUSED)\n{\n    check_media_size(self);\n\n    /* If there was a scheduled seek, perform it now that we have moved to the Paused state */\n    if (GST_CLOCK_TIME_IS_VALID (self->desired_position))\n        execute_seek (self->desired_position, self);\n}\n```\n\n----------------------------------------\n\nTITLE: Set UI Playback Position via JNI Call in C\nDESCRIPTION: Implements the `set_current_ui_position` function, which updates the Android UI with the current media playback position and total duration. It retrieves the JNI environment and calls the pre-cached Java method `set_current_position_method_id` on the application object (`data->app`), passing the position and duration as integers (milliseconds). Potential JNI exceptions are checked and cleared.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n/* Tell the application what is the current position and clip duration */\nstatic void set_current_ui_position (gint position, gint duration, CustomData *data) {\n  JNIEnv *env = get_jni_env ();\n  (*env)->CallVoidMethod (env, data->app, set_current_position_method_id, position, duration);\n  if ((*env)->ExceptionCheck (env)) {\n    GST_ERROR (\"Failed to call Java method\");\n    (*env)->ExceptionClear (env);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating GStreamer Pipeline Seek Event Flow\nDESCRIPTION: An ASCII diagram illustrating the sequence of events (seek, PAUSE, FLUSH_START, FLUSH done, SEGMENT, PLAY) and their propagation within a sample GStreamer pipeline (filesrc -> mp3dec -> alsasink) during a seek operation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n```\n                                   | a) seek on pipeline\n                                   | b) PAUSE pipeline\n+----------------------------------V--------+\n| pipeline                         | c) seek on sink\n| +---------+   +----------+   +---V------+ |\n| | filesrc |   | mp3dec   |   | alsasink | |\n| |        src-sink       src-sink        | |\n| +---------+   +----------+   +----|-----+ |\n+-----------------------------------|-------+\n           <------------------------+\n                 d) seek travels upstream\n\n    --------------------------> 1) FLUSH event\n    | 2) stop streaming\n    | 3) perform seek\n    --------------------------> 4) FLUSH done event\n    --------------------------> 5) SEGMENT event\n\n    | e) update running_time to 0\n    | f) PLAY pipeline\n```\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pipeline Creation in C\nDESCRIPTION: Creates a pipeline container for the GStreamer elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/concepts.md#2025-04-23_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n/* Create the empty pipeline */\npipeline = gst_pipeline_new (\"test-pipeline\");\n```\n\n----------------------------------------\n\nTITLE: Processing Time Slider Value Changes in GStreamer iOS App\nDESCRIPTION: Handles time slider value changes during user interaction. Implements scrub seeking for local media files and updates time display.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n- (IBAction)sliderValueChanged:(id)sender {\n    if (!dragging_slider) return;\n    // If this is a local file, allow scrub seeking, this is, seek as soon as the slider is moved.\n    if (is_local_media)\n        [gst_backend setPosition:time_slider.value];\n    [self updateTimeWidget];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GStreamer Encoding Target in XML\nDESCRIPTION: This XML snippet defines an encoding target for the Nokia N900 device. It specifies the target name, category, and associated encoding profiles.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/encoding.txt#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<gst-encoding-target>\n  <name>Nokia N900</name>\n  <category>Consumer Device</category>\n  <profiles>\n    <profile>Nokia N900/H264 HQ</profile>\n    <profile>Nokia N900/MP3</profile>\n    <profile>Nokia N900/AAC</profile>\n  </profiles>\n</gst-encoding-target>\n```\n\n----------------------------------------\n\nTITLE: Get JNI Environment for Current Thread in C\nDESCRIPTION: Implements the `get_jni_env` function, which retrieves the JNIEnv pointer for the current thread. It uses `pthread_getspecific` to check if the environment is already cached for the thread. If not, it calls `attach_current_thread` to attach the thread and stores the JNIEnv using `pthread_setspecific` for later retrieval.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n/* Retrieve the JNI environment for this thread */\nstatic JNIEnv *get_jni_env (void) {\n  JNIEnv *env;\n\n  if ((env = pthread_getspecific (current_jni_env)) == NULL) {\n    env = attach_current_thread ();\n    pthread_setspecific (current_jni_env, env);\n  }\n\n  return env;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Allocation Parameters in GStreamer\nDESCRIPTION: C structure representing allocator parameters returned by the allocation query. Used with gst_query_parse_nth_allocation_param() to extract allocator details.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/bufferpool.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct {\n    GstAllocator *allocator;\n    GstAllocationParams params;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Seek Action in GstValidate Scenario\nDESCRIPTION: Example of how to represent a seek action in a .scenario file. This action seeks to a specific playback time with defined start point and flags.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-scenarios.md#2025-04-23_snippet_0\n\nLANGUAGE: gstreamer\nCODE:\n```\nseek, playback-time=10.0, start=0.0, flags=accurate+flush\n```\n\n----------------------------------------\n\nTITLE: GstBaseSrc Random Access Buffering Query Response\nDESCRIPTION: Default response values for a BUFFERING query when GstBaseSrc has random access capability. Includes buffer percentage, mode, rates, and position parameters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/buffering.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n\"buffer-percent\" = 100\n\"buffering-mode\" = \"stream\"\n\"avg-in-rate\" = -1\n\"avg-out-rate\" = -1\n\"buffering-left\" = 0\n\"format\" = GST_FORMAT_BYTES\n\"start\" = 0\n\"stop\" = the total filesize\n\"estimated-total\" = 0\n\"buffering-ranges\" = NULL\n```\n\n----------------------------------------\n\nTITLE: Creating a playbin pipeline with appsrc URI\nDESCRIPTION: Code demonstrating how to create a GStreamer playbin element that uses appsrc as its source by setting the URI to 'appsrc://'.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/short-cutting-the-pipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Create the playbin element */\ndata.pipeline = gst_parse_launch (\"playbin uri=appsrc://\", NULL);\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Rank - GStreamer - validate-scenario\nDESCRIPTION: Defines an action to change the rank of a GStreamer plugin feature in testing scenarios. Requires the feature name and rank to assign. Expects parameters for the feature (as string) and new rank (as string or int), affecting plugin selection order during test execution. Useful in core pipeline testing to control which plugins are prioritized.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_15\n\nLANGUAGE: validate-scenario\nCODE:\n```\nset-feature-rank,\\n    feature-name=(string),\\n    rank=(string, int);\n```\n\n----------------------------------------\n\nTITLE: Connecting to playbin's source-setup signal\nDESCRIPTION: Code showing how to connect to the source-setup signal emitted by playbin, which allows configuring the appsrc element after it has been created internally.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/short-cutting-the-pipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ng_signal_connect (data.pipeline, \"source-setup\", G_CALLBACK (source_setup), &data);\n```\n\n----------------------------------------\n\nTITLE: Defining GStreamer Multiview Video Metadata Structures\nDESCRIPTION: C structure definitions for multiview video metadata handling in GStreamer. Includes view labels for left/right views and structures for storing view information and metadata.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stereo-multiview-video.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n        GST_VIDEO_MULTIVIEW_VIEW_LEFT = 1\n        GST_VIDEO_MULTIVIEW_VIEW_RIGHT = 2\n\n        struct GstVideoMultiviewViewInfo {\n            guint view_label;\n            guint meta_id; // id of the GstVideoMeta for this view\n\n            padding;\n        }\n\n        struct GstVideoMultiviewMeta {\n            guint n_views;\n            GstVideoMultiviewViewInfo *view_info;\n        }\n```\n\n----------------------------------------\n\nTITLE: Running Ninja to Build From the Build Directory (Shell)\nDESCRIPTION: After configuring the Meson build directory, this snippet shows how to change into the build directory and invoke Ninja to build the project and its dependencies. Requires the Ninja build tool to be installed and a successful Meson configuration step. The build artifacts are output to the build directory.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd <build_directory>\\nninja\n```\n\n----------------------------------------\n\nTITLE: Identifying Alternate Fields Video Buffers in GStreamer\nDESCRIPTION: This snippet describes the alternate fields mode introduced in GStreamer 1.16, explaining how to identify these buffers and interpret their properties.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/interlaced-video.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nIf the video info interlace mode is **\"alternate\"**, then each buffer\ncarries a single field of interlaced video.\n\n`GST_VIDEO_BUFFER_FLAG_TOP_FIELD` and `GST_VIDEO_BUFFER_FLAG_BOTTOM_FIELD`\nindicate whether the buffer carries a top or bottom field. The order of\nbuffers/fields in the stream and the timestamps on the buffers indicate the\ntemporal order of the fields.\n\nTop and bottom fields are expected to alternate in this mode.\n\nCaps for this interlace mode must also carry a `format:Interlaced` caps feature\n(`GST_CAPS_FEATURE_FORMAT_INTERLACED`) to ensure backwards compatibility for\nthe new mode.\n\nThe frame rate in the caps still signals the *frame* rate, so the notional *field*\nrate will be twice the frame rate from the caps (see `GST_VIDEO_INFO_FIELD_RATE_N`).\n\nIn the same vein the width and height in the caps will indicate *frame*\ndimensions not field dimensions, meaning the height of the video data inside\nthe buffers (1 field) will be half of the height in the caps.\n```\n\n----------------------------------------\n\nTITLE: Pausing Playback in GstValidate Scenarios\nDESCRIPTION: The pause action sets the pipeline to PAUSED state with optional duration parameter to automatically resume playback after specified time.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_5\n\nLANGUAGE: validate-scenario\nCODE:\n```\npause,\n    [duration=(double or string (GstClockTime))],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Configuring appsrc in the source-setup callback\nDESCRIPTION: Implementation of the source-setup callback that configures the appsrc element created by playbin, setting audio caps, format, and connecting to need-data and enough-data signals.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/short-cutting-the-pipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n/* This function is called when playbin has created the appsrc element, so we have\n * a chance to configure it. */\nstatic void source_setup (GstElement *pipeline, GstElement *source, CustomData *data) {\n  GstAudioInfo info;\n  GstCaps *audio_caps;\n\n  g_print (\"Source has been created. Configuring.\\n\");\n  data->app_source = source;\n\n  /* Configure appsrc */\n  gst_audio_info_set_format (&info, GST_AUDIO_FORMAT_S16, SAMPLE_RATE, 1, NULL);\n  audio_caps = gst_audio_info_to_caps (&info);\n  g_object_set (source, \"caps\", audio_caps, \"format\", GST_FORMAT_TIME, NULL);\n  g_signal_connect (source, \"need-data\", G_CALLBACK (start_feed), data);\n  g_signal_connect (source, \"enough-data\", G_CALLBACK (stop_feed), data);\n  gst_caps_unref (audio_caps);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Native Libraries and Initializing Native Class in Android (Java)\nDESCRIPTION: This static initializer block is executed when the `Tutorial2` class is loaded. It loads the required native shared libraries (`gstreamer_android` and `tutorial-2`) using `System.loadLibrary`. It then calls the native method `nativeClassInit()` to perform initial setup in the native code layer, likely caching JNI method IDs for callbacks. This ensures native components are ready before any Activity instance is created.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nstatic {\n    System.loadLibrary(\"gstreamer_android\");\n    System.loadLibrary(\"tutorial-2\");\n    nativeClassInit();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JNI_OnLoad for GStreamer Android Library Initialization\nDESCRIPTION: Initializes the JNI library by setting up the Java VM reference, registering native methods, and creating thread-specific storage for JNI environment pointers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_27\n\nLANGUAGE: c\nCODE:\n```\n/* Library initializer */\njint JNI_OnLoad(JavaVM *vm, void *reserved) {\n  JNIEnv *env = NULL;\n\n  java_vm = vm;\n\n  if ((*vm)->GetEnv(vm, (void**) &env, JNI_VERSION_1_4) != JNI_OK) {\n    __android_log_print (ANDROID_LOG_ERROR, \"tutorial-2\", \"Could not retrieve JNIEnv\");\n    return 0;\n  }\n  jclass klass = (*env)->FindClass (env, \"org/freedesktop/gstreamer/tutorials/tutorial_2/Tutorial2\");\n  (*env)->RegisterNatives (env, klass, native_methods, G_N_ELEMENTS(native_methods));\n\n  pthread_key_create (&current_jni_env, detach_current_thread);\n\n  return JNI_VERSION_1_4;\n}\n```\n\n----------------------------------------\n\nTITLE: Building gst-python with Meson and Ninja - Shell\nDESCRIPTION: Configures, builds, and installs the gst-python library using Meson for project setup, Ninja for compilation, and Meson's install command. The sequence of commands sets up a dedicated build directory, compiles the project, and installs it to the default or specified prefix. These commands require that meson and ninja are installed, and the process assumes standard build tool conventions for Python projects integrating with system libraries.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-python/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeson setup builddir && ninja -C builddir\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeson install -C builddir\n```\n\n----------------------------------------\n\nTITLE: Adding a New Package with Cerbero-Uninstalled - Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the Cerbero command-line tool to create a new, empty package definition file (`my-app 1.0`). The command initializes the scaffolding for a new package in the `packages/` directory, preparing it for further editing. Prerequisites: Cerbero must be installed (with `cerbero-uninstalled` available), and proper permissions to write into the destination folder are required. Input parameters are the package name and version; it outputs a skeleton Python package file for further editing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/multiplatform-using-cerbero.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"./cerbero-uninstalled add-package my-app 1.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Native Module for Android NDK Build (Makefile)\nDESCRIPTION: This snippet provides a minimal Android.mk Makefile required for compiling a native C application into a shared library in an Android NDK project. It defines module properties including the output shared object name and source file(s), and uses standard NDK macros. No special dependencies are required except for the standard Android NDK toolchain. Inputs include the C source filename; output is a .so library placed in the respective build location. This is the initial auto-generated configuration before GStreamer integration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/for-android-development.md#2025-04-23_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nLOCAL_PATH := $(call my-dir)\\n\\ninclude $(CLEAR_VARS)\\n\\nLOCAL_MODULE    := NativeApplication\\nLOCAL_SRC_FILES := NativeApplication.c\\n\\ninclude $(BUILD_SHARED_LIBRARY)\n```\n\n----------------------------------------\n\nTITLE: Handling State Changes in GStreamer Bins with Live Sources\nDESCRIPTION: This code snippet explains how GStreamer bins handle state changes when they contain live sources. It demonstrates the use of a zero-timeout get_state() call to identify NO_PREROLL and ERROR elements before performing a blocking wait.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/live-source.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nWhen performing a `get_state()` on a bin with a non-zero timeout value,\nthe bin must be sure that there are no live sources in the pipeline\nbecause otherwise, `get_state()` would block on the sinks.\n\nA `GstBin` therefore always performs a zero-timeout `get_state()` on its\nelements to discover the `NO_PREROLL` (and `ERROR`) elements before\nperforming a blocking wait.\n```\n\n----------------------------------------\n\nTITLE: Validating Timeline Commit Action - Validate-Scenario, Plaintext\nDESCRIPTION: Represents a 'commit' action that records and finalizes current changes to the timeline using the GES API. Designed for GStreamer validate-scenario sequences, it optionally specifies when to execute via playback-time. No additional parameters are required except for the timing, and outputs are produced based on timeline state changes during validation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\ncommit,\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Building an Application with Cerbero using Bash\nDESCRIPTION: This command instructs Cerbero to execute the build process for the application defined by the 'my-app' recipe. Cerbero will fetch sources (if necessary), resolve and build dependencies, configure, compile, and install the application based on the instructions in `recipes/my-app.recipe`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/multiplatform-using-cerbero.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./cerbero-uninstalled build my-app\n```\n\n----------------------------------------\n\nTITLE: Running a Program Under gdb via libtool for GStreamer Development - Shell\nDESCRIPTION: This snippet describes how to use libtool's --mode=execute to launch gdb on a GStreamer binary, ensuring the correct shared library search paths are set in a development build environment. This is especially relevant when performing source-level debugging of GStreamer applications built with libtool. Replace '/path/to/gst-launch' with the full path to your GStreamer executable. Dependencies include libtool, gdb, and the built GStreamer binary to be debugged.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/developing.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nlibtool --mode=execute gdb /path/to/gst-launch\n```\n\n----------------------------------------\n\nTITLE: JNI Library Initialization for GStreamer Android Integration\nDESCRIPTION: Initializes the JNI library when loaded by the Java VM. It stores the JavaVM reference, registers native methods with the Java class, and creates a thread-local storage key for JNI environment references.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_32\n\nLANGUAGE: c\nCODE:\n```\n/* Library initializer */\njint JNI_OnLoad(JavaVM *vm, void *reserved) {\n  JNIEnv *env = NULL;\n\n  java_vm = vm;\n\n  if ((*vm)->GetEnv(vm, (void**) &env, JNI_VERSION_1_4) != JNI_OK) {\n    __android_log_print (ANDROID_LOG_ERROR, \"tutorial-4\", \"Could not retrieve JNIEnv\");\n    return 0;\n  }\n  jclass klass = (*env)->FindClass (env, \"com/gst_sdk_tutorials/tutorial_4/Tutorial4\");\n  (*env)->RegisterNatives (env, klass, native_methods, G_N_ELEMENTS(native_methods));\n\n  pthread_key_create (&current_jni_env, detach_current_thread);\n\n  return JNI_VERSION_1_4;\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Plain Interlaced Video Buffers in GStreamer\nDESCRIPTION: This snippet describes how to identify a plain interlaced video buffer in GStreamer and explains the meaning of various buffer flags.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/interlaced-video.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf the video info interlace mode is **\"interleaved\"**, then the buffer is\nplain interlaced.\n\n`GST_VIDEO_BUFFER_FLAG_TFF` indicates whether the top or bottom field\nis to be displayed first. The timestamp on the buffer corresponds to the\nfirst field.\n\n`GST_VIDEO_BUFFER_FLAG_RFF` indicates that the first field (indicated\nby the TFF flag) should be repeated. This is generally only used for\ntelecine purposes but as the telecine state was added long after the\ninterlaced state was added and defined, this flag remains valid for\nplain interlaced buffers.\n\n`GST_VIDEO_BUFFER_FLAG_ONEFIELD` means that only the field indicated\nthrough the TFF flag is to be used. The other field should be ignored.\n```\n\n----------------------------------------\n\nTITLE: Marking a GObject Property as Controllable in C\nDESCRIPTION: This C snippet illustrates how to flag a GObject property (e.g., 'freq') as controllable by adding the `GST_PARAM_CONTROLLABLE` flag during its definition using `g_object_class_install_property` in the element's `_class_init` function. This signals that the property's value can be dynamically adjusted over time by applications using the controller subsystem.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/dparams.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n  g_object_class_install_property (gobject_class, PROP_FREQ,\n      g_param_spec_double (\"freq\", \"Frequency\", \"Frequency of test signal\",\n          0.0, 20000.0, 440.0,\n          G_PARAM_READWRITE | GST_PARAM_CONTROLLABLE | G_PARAM_STATIC_STRINGS));\n\n```\n\n----------------------------------------\n\nTITLE: Generating GStreamer DOT Files Programmatically (C)\nDESCRIPTION: Describes the C macros `GST_DEBUG_BIN_TO_DOT_FILE()` and `GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS()`. These macros allow developers to programmatically generate `.dot` files representing a GStreamer Bin (like a pipeline) from within their C application code at specific points for debugging. The `_WITH_TS` version includes timestamps in the filename. Requires the GStreamer development libraries.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/debugging-tools.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nGST_DEBUG_BIN_TO_DOT_FILE()\n```\n\nLANGUAGE: c\nCODE:\n```\nGST_DEBUG_BIN_TO_DOT_FILE_WITH_TS()\n```\n\n----------------------------------------\n\nTITLE: Iterating Buffer Metadata\nDESCRIPTION: Shows how to iterate through different metadata structures in a buffer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/meta.md#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nGstMeta *current = NULL;\n\n/* passing NULL gives the first entry */\ncurrent = gst_buffer_meta_get_next (buffer, current);\n\n/* passing a GstMeta returns the next */\ncurrent = gst_buffer_meta_get_next (buffer, current);\n```\n\n----------------------------------------\n\nTITLE: GStreamer Function References\nDESCRIPTION: Core GStreamer functions referenced in the documentation for pad activation and mode control. These include functions for setting pad activity, pushing data, and pulling data ranges.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/activation.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngst_pad_push()\ngst_pad_pull_range()\ngst_pad_set_active()\nactivate()\nactivate_mode()\n```\n\n----------------------------------------\n\nTITLE: Generating and Outputting Test Stream to AJA Device with GStreamer (Shell)\nDESCRIPTION: This `gst-launch-1.0` pipeline generates a 1080p29.97 video test pattern (`videotestsrc`) and a 16-channel audio test tone (`audiotestsrc`). The streams are formatted (v210 video, S32LE audio), processed with time overlays and timecodes, combined using `ajasinkcombiner`, and sent to AJA channel 0 via `ajasink`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/sys/aja/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngst-launch-1.0 videotestsrc pattern=ball ! video/x-raw,format=v210,width=1920,height=1080,framerate=30000/1001,interlace-mode=progressive ! timeoverlay ! timecodestamper ! combiner.video \\\n    audiotestsrc freq=440 ! audio/x-raw,format=S32LE,rate=48000,channels=16 ! audiobuffersplit output-buffer-duration=1/30 ! combiner.audio \\\n    ajasinkcombiner name=combiner ! ajasink channel=0\n```\n\n----------------------------------------\n\nTITLE: Restoring Playback State on Android Activity Creation (Java)\nDESCRIPTION: Located within the `onCreate` method, this code checks if there is a saved instance state (`savedInstanceState`). If it exists (e.g., after an orientation change), it retrieves the previously saved `is_playing_desired` boolean value using the key \"playing\". Otherwise, it defaults `is_playing_desired` to false. This ensures the application attempts to restore the user's intended playback state when the Activity is recreated.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nif (savedInstanceState != null) {\n    is_playing_desired = savedInstanceState.getBoolean(\"playing\");\n    Log.i (\"GStreamer\", \"Activity created. Saved state is playing:\" + is_playing_desired);\n} else {\n    is_playing_desired = false;\n    Log.i (\"GStreamer\", \"Activity created. There is no saved state, playing: false\");\n}\n```\n\n----------------------------------------\n\nTITLE: Building GStreamer Examples with Meson\nDESCRIPTION: Commands to build the GStreamer examples using the Meson build system.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/webrtc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncd /path/to/gst-examples\nmeson _builddir\nninja -C _builddir\n```\n\n----------------------------------------\n\nTITLE: Updating the GTK Slider Position with Pipeline Position in C\nDESCRIPTION: This function updates a GTK slider position based on the current pipeline playback position. It blocks signal handlers during the update to prevent unwanted seek operations triggered by the slider's value-changed signal.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n  gtk_range_set_value (GTK_RANGE (data->slider), (gdouble)current / GST_SECOND);\n  /* Re-enable the signal */\n  g_signal_handler_unblock (data->slider, data->slider_update_signal_id);\n}\nreturn TRUE;\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Seeks in Objective-C for GStreamer iOS\nDESCRIPTION: This snippet shows how to implement delayed seeks in the setPosition method. It executes the seek immediately if the pipeline state allows, or schedules it for later execution.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_16\n\nLANGUAGE: Objective-C\nCODE:\n```\n-(void) setPosition:(NSInteger)milliseconds\n{\n    gint64 position = (gint64)(milliseconds * GST_MSECOND);\n    if (state >= GST_STATE_PAUSED) {\n        execute_seek(position, self);\n    } else {\n        GST_DEBUG (\"Scheduling seek to %\" GST_TIME_FORMAT \" for later\", GST_TIME_ARGS (position));\n        self->desired_position = position;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GStreamer Playback Logic with Qt UI in C++\nDESCRIPTION: This snippet implements the Player class, initializing the GStreamer pipeline, handling playback logic, and providing methods for interacting with media (play, pause, stop, setUri, volume and position control). It integrates GStreamer signals and bus message processing using Qt’s signal/slot architecture, and manages lifecycle and error states for robust video playback. Dependencies include Qt (QtCore, QTimer) and PyQt GStreamer bindings (QGst, QGlib). Input URIs are file paths or URLs, and all GStreamer property/query calls are wrapped for Qt UI responsiveness. Error handling and state signals ensure seamless operation constraints.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n#include \"player.h\"\n#include <QtCore/QDir>\n#include <QtCore/QUrl>\n#include <QGlib/Connect>\n#include <QGlib/Error>\n#include <QGst/Pipeline>\n#include <QGst/ElementFactory>\n#include <QGst/Bus>\n#include <QGst/Message>\n#include <QGst/Query>\n#include <QGst/ClockTime>\n#include <QGst/Event>\n#include <QGst/StreamVolume>\nPlayer::Player(QWidget *parent)\n    : QGst::Ui::VideoWidget(parent)\n{\n    //this timer is used to tell the ui to change its position slider & label\n    //every 100 ms, but only when the pipeline is playing\n    connect(&m_positionTimer, SIGNAL(timeout()), this, SIGNAL(positionChanged()));\n}\nPlayer::~Player()\n{\n    if (m_pipeline) {\n        m_pipeline->setState(QGst::StateNull);\n        stopPipelineWatch();\n    }\n}\nvoid Player::setUri(const QString & uri)\n{\n    QString realUri = uri;\n    //if uri is not a real uri, assume it is a file path\n    if (realUri.indexOf(\"://\") < 0) {\n        realUri = QUrl::fromLocalFile(realUri).toEncoded();\n    }\n    if (!m_pipeline) {\n        m_pipeline = QGst::ElementFactory::make(\"playbin\").dynamicCast<QGst::Pipeline>();\n        if (m_pipeline) {\n            //let the video widget watch the pipeline for new video sinks\n            watchPipeline(m_pipeline);\n            //watch the bus for messages\n            QGst::BusPtr bus = m_pipeline->bus();\n            bus->addSignalWatch();\n            QGlib::connect(bus, \"message\", this, &Player::onBusMessage);\n        } else {\n            qCritical() << \"Failed to create the pipeline\";\n        }\n    }\n    if (m_pipeline) {\n        m_pipeline->setProperty(\"uri\", realUri);\n    }\n}\nQTime Player::position() const\n{\n    if (m_pipeline) {\n        //here we query the pipeline about its position\n        //and we request that the result is returned in time format\n        QGst::PositionQueryPtr query = QGst::PositionQuery::create(QGst::FormatTime);\n        m_pipeline->query(query);\n        return QGst::ClockTime(query->position()).toTime();\n    } else {\n        return QTime(0,0);\n    }\n}\nvoid Player::setPosition(const QTime & pos)\n{\n    QGst::SeekEventPtr evt = QGst::SeekEvent::create(\n        1.0, QGst::FormatTime, QGst::SeekFlagFlush,\n        QGst::SeekTypeSet, QGst::ClockTime::fromTime(pos),\n        QGst::SeekTypeNone, QGst::ClockTime::None\n    );\n    m_pipeline->sendEvent(evt);\n}\nint Player::volume() const\n{\n    if (m_pipeline) {\n        QGst::StreamVolumePtr svp =\n            m_pipeline.dynamicCast<QGst::StreamVolume>();\n        if (svp) {\n            return svp->volume(QGst::StreamVolumeFormatCubic) * 10;\n        }\n    }\n    return 0;\n}\n\nvoid Player::setVolume(int volume)\n{\n    if (m_pipeline) {\n        QGst::StreamVolumePtr svp =\n            m_pipeline.dynamicCast<QGst::StreamVolume>();\n        if(svp) {\n            svp->setVolume((double)volume / 10, QGst::StreamVolumeFormatCubic);\n        }\n    }\n}\nQTime Player::length() const\n{\n    if (m_pipeline) {\n        //here we query the pipeline about the content's duration\n        //and we request that the result is returned in time format\n        QGst::DurationQueryPtr query = QGst::DurationQuery::create(QGst::FormatTime);\n        m_pipeline->query(query);\n        return QGst::ClockTime(query->duration()).toTime();\n    } else {\n        return QTime(0,0);\n    }\n}\nQGst::State Player::state() const\n{\n    return m_pipeline ? m_pipeline->currentState() : QGst::StateNull;\n}\nvoid Player::play()\n{\n    if (m_pipeline) {\n        m_pipeline->setState(QGst::StatePlaying);\n    }\n}\nvoid Player::pause()\n{\n    if (m_pipeline) {\n        m_pipeline->setState(QGst::StatePaused);\n    }\n}\nvoid Player::stop()\n{\n    if (m_pipeline) {\n        m_pipeline->setState(QGst::StateNull);\n        //once the pipeline stops, the bus is flushed so we will\n        //not receive any StateChangedMessage about this.\n        //so, to inform the ui, we have to emit this signal manually.\n        Q_EMIT stateChanged();\n    }\n}\nvoid Player::onBusMessage(const QGst::MessagePtr & message)\n{\n    switch (message->type()) {\n    case QGst::MessageEos: //End of stream. We reached the end of the file.\n        stop();\n        break;\n    case QGst::MessageError: //Some error occurred.\n        qCritical() << message.staticCast<QGst::ErrorMessage>()->error();\n        stop();\n        break;\n    case QGst::MessageStateChanged: //The element in message->source() has changed state\n        if (message->source() == m_pipeline) {\n            handlePipelineStateChange(message.staticCast<QGst::StateChangedMessage>());\n        }\n        break;\n    default:\n        break;\n    }\n}\nvoid Player::handlePipelineStateChange(const QGst::StateChangedMessagePtr & scm)\n{\n    switch (scm->newState()) {\n    case QGst::StatePlaying:\n        //start the timer when the pipeline starts playing\n        m_positionTimer.start(100);\n        break;\n    case QGst::StatePaused:\n        //stop the timer when the pipeline pauses\n        if(scm->oldState() == QGst::StatePlaying) {\n            m_positionTimer.stop();\n        }\n        break;\n    default:\n        break;\n    }\n    Q_EMIT stateChanged();\n}\n#include \"moc_player.cpp\"\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple GStreamer Presets Example\nDESCRIPTION: Example demonstrating how to set multiple presets (pass, profile, quality) for a GStreamer h264 encoder using the proposed extended GstPreset API with forward slash separator.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/encoding.txt#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ngst_preset_load_preset (h264enc, \"pass:1/profile:baseline/quality:high\");\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Function in C\nDESCRIPTION: Function to allocate new GstMemory instances using a specified allocator and parameters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/memory.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nGstMemory * gst_allocator_alloc (const GstAllocator * allocator,\n                                 gsize size, GstAllocationParams *params);\n```\n\n----------------------------------------\n\nTITLE: Adding GStreamer Support to Android NDK Project (Makefile)\nDESCRIPTION: This extended Android.mk Makefile snippet incorporates support for GStreamer in a native Android application build. In addition to the standard NDK module and source file setup, it specifies GStreamer as an extra shared library and links with the Android system library. The snippet configures macros for the GStreamer root path, defines required plugins and features (like HTTPS/TLS support), specifies extra GStreamer library dependencies, and concludes by including the GStreamer make fragment. Requires the GStreamer binary distribution for Android, as well as the standard NDK toolchain. Inputs include project source files and GStreamer configuration; output is a shared library containing linked GStreamer functionality. Limitation: proper environment variables (e.g., GSTREAMER_ROOT_ANDROID) must be set for the build to succeed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/for-android-development.md#2025-04-23_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\nLOCAL_PATH := $(call my-dir)\\n\\ninclude $(CLEAR_VARS)\\n\\nLOCAL_MODULE    := NativeApplication\\nLOCAL_SRC_FILES := NativeApplication.c\\nLOCAL_SHARED_LIBRARIES := gstreamer_android\\nLOCAL_LDLIBS := -landroid\\n\\ninclude $(BUILD_SHARED_LIBRARY)\\n\\nifndef GSTREAMER_ROOT\\nifndef GSTREAMER_ROOT_ANDROID\\n$(error GSTREAMER_ROOT_ANDROID is not defined!)\\nendif\\nGSTREAMER_ROOT            := $(GSTREAMER_ROOT_ANDROID)\\nendif\\n\\nGSTREAMER_NDK_BUILD_PATH  := $(GSTREAMER_ROOT)/share/gst-android/ndk-build/\\nGSTREAMER_PLUGINS         := coreelements ogg theora vorbis videoconvert audioconvert audioresample playback glimagesink soup opensles\\nG_IO_MODULES              := gnutls\\nGSTREAMER_EXTRA_DEPS      := gstreamer-video-1.0\\n\\ninclude $(GSTREAMER_NDK_BUILD_PATH)/gstreamer.mk\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio, Video and Subtitle Flags in GStreamer\nDESCRIPTION: Sets the necessary flags on playbin to enable audio, video, and subtitle (text) playback. The flags are retrieved, modified with bitwise operations, and set back to enable all three stream types.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/subtitle-management.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n/* Set flags to show Audio, Video and Subtitles */\ng_object_get (data.playbin, \"flags\", &flags, NULL);\nflags |= GST_PLAY_FLAG_VIDEO | GST_PLAY_FLAG_AUDIO | GST_PLAY_FLAG_TEXT;\ng_object_set (data.playbin, \"flags\", flags, NULL);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Workflow for libimagequant in C\nDESCRIPTION: This C code snippet demonstrates the fundamental steps for using the `libimagequant` library to quantize an RGBA image. It includes creating attribute and image objects, performing quantization, obtaining the remapped image data and palette, and finally freeing allocated resources. Assumes `bitmap`, `width`, `height`, and `bitmap_size` are defined elsewhere, representing the input RGBA image data and dimensions. Requires linking against the `libimagequant` library and including its header file (\"lib/libimagequant.h\").\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#include \"lib/libimagequant.h\"\n\nliq_attr *attr = liq_attr_create();\nliq_image *image = liq_image_create_rgba(attr, bitmap, width, height, 0);\nliq_result *res = liq_quantize_image(attr, image);\n\nliq_write_remapped_image(res, image, bitmap, bitmap_size);\nconst liq_palette *pal = liq_get_palette(res);\n\n// use image and palette here\n\nliq_attr_destroy(attr);\nliq_image_destroy(image);\nliq_result_destroy(res);\n```\n\n----------------------------------------\n\nTITLE: Including GStreamer Controller Headers in C\nDESCRIPTION: This snippet shows the required C preprocessor include directives to use the GStreamer core (`gst.h`) and the controller subsystem (`gstcontroller.h`) within an element's source file. These headers provide the necessary function prototypes and type definitions for implementing dynamic parameters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/dparams.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n...\n#include <gst/gst.h>\n#include <gst/controller/gstcontroller.h>\n...\n\n```\n\n----------------------------------------\n\nTITLE: Defining ID3v2 MLLT Frame Header Structure (plaintext)\nDESCRIPTION: Defines the header structure for the ID3v2 'MPEG location lookup table' frame (MLLT). It specifies the reference intervals ('MPEG frames between reference', 'Bytes between reference', 'Milliseconds between reference') and the number of bits allocated for deviation values ('Bits for bytes deviation', 'Bits for milliseconds dev.') within each subsequent reference entry. Only one \"MLLT\" frame is allowed per tag.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n   <Header for 'Location lookup table', ID: \"MLLT\">\n   MPEG frames between reference  $xx xx\n   Bytes between reference        $xx xx xx\n   Milliseconds between reference $xx xx xx\n   Bits for bytes deviation       $xx\n   Bits for milliseconds dev.     $xx\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Home Directory in MinGW Shell\nDESCRIPTION: Command to create a custom home directory in the MinGW environment when a Windows username contains spaces, setting it in the .profile configuration file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_14\n\nLANGUAGE: cmd\nCODE:\n```\n$ echo 'export HOME=/home/newdir' > ~/.profile\n```\n\n----------------------------------------\n\nTITLE: Documenting BGRA Packed Reverse RGB with Alpha Last Format (Markdown, Plaintext)\nDESCRIPTION: This section details the BGRA format, where pixel data is packed in the order blue, green, red, alpha. Presents block representation and tabular memory layout and offsets, which is part of reference material for graphics buffer manipulation or conversion routines involving alpha blending and BGRA data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |B0|G0|R0|A0| |B1|G1|R1|A1| ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: R\\n          depth:           8\\n          pstride:         4\\n          offset:          2\\n\\n        Component 1: G\\n          depth:           8\\n          pstride:         4\\n          offset:          1\\n\\n        Component 2: B\\n          depth            8\\n          pstride:         4\\n          offset:          0\\n\\n        Component 3: A\\n          depth            8\\n          pstride:         4\\n          offset:          3\\n\\n        Image\\n          default rstride: width * 4\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: GStreamer Video Transition Border Property Definition\nDESCRIPTION: Defines the border width property for video transitions. Uses unsigned integer (guint) as the value type.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/libs/GESTransitionClip-children-props.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### `border`\n\nThe border width\n\nValue type: #guint\n\nSee #GESVideoTransition:border\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pipeline EOS Method Call\nDESCRIPTION: Example showing how to send an End-of-Stream event to a GStreamer pipeline using the gst_element_send_event() function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/seqnums.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngst_element_send_event()\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pipeline: Custom Video Decoder with Queue to Fake Sink\nDESCRIPTION: This scenario demonstrates a pipeline with a custom video decoder, a queue, and a fake sink. It shows how buffer pools are negotiated and managed, especially when dynamically changing the sink element in the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/bufferpool.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n.. ! myvideodecoder ! queue ! fakesink\n```\n\n----------------------------------------\n\nTITLE: Stream Buffering Pipeline Structure\nDESCRIPTION: ASCII diagram showing the structure of a stream buffering pipeline with httpsrc, buffer, and demux elements. Shows how data flows through the pipeline components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/buffering.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      +---------+     +---------+     +-------+\n      | httpsrc |     | buffer  |     | demux |\n      |        src - sink      src - sink     ....\n      +---------+     +---------+     +-------+\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Pad Connections in GStreamer\nDESCRIPTION: ASCII diagram showing the connections between pads, ghost pads, and proxy pads in a GStreamer pipeline. It demonstrates the direction of state change and the relationships between different components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstghostpad.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n    +---+     +----+                             +----+       +----+\n    | A +-----+ B  |                             | C  |-------+ D  |\n    +---+     +---=+                             +=---+       +----+\n                +--=-----------------------------=-+\n                |  +=---+   +----+  +----+  +---=+ |\n                |  | a  +---+ b  ====  c +--+ d  | |\n                |  +----+   +----+  +----+  +----+ |\n                |                                  |\n                +----------------------------------+\n                state change goes from right to left\n       <-----------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Releasing Request Pads from GStreamer Tee Element\nDESCRIPTION: This code snippet shows how to properly release and unreference the request pads obtained from the Tee element when they are no longer needed, typically at the end of the program.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/multithreading-and-pad-availability.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n/* Release the request pads from the Tee, and unref them */\ngst_element_release_request_pad (tee, tee_audio_pad);\ngst_element_release_request_pad (tee, tee_video_pad);\ngst_object_unref (tee_audio_pad);\ngst_object_unref (tee_video_pad);\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame-by-Frame Stepping in GStreamer\nDESCRIPTION: This code handles frame stepping in video playback. It creates a Step Event that advances the video by one frame while maintaining the current playback rate. This is useful for precise video analysis.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/playback-speed.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ncase 'n':\n  if (data->video_sink == NULL) {\n    /* If we have not done so, obtain the sink through which we will send the step events */\n    g_object_get (data->pipeline, \"video-sink\", &data->video_sink, NULL);\n  }\n\n  gst_element_send_event (data->video_sink,\n      gst_event_new_step (GST_FORMAT_BUFFERS, 1, ABS (data->rate), TRUE, FALSE));\n  g_print (\"Stepping one frame\\n\");\n  break;\n```\n\n----------------------------------------\n\nTITLE: Cloning the GStreamer Monorepo using Git\nDESCRIPTION: Clones the main GStreamer Git repository from the official FreeDesktop GitLab instance using the `git clone` command. This repository contains the GStreamer source code, including the tutorial examples located in the `subprojects/gst-docs/examples/tutorials` subdirectory.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-linux.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://gitlab.freedesktop.org/gstreamer/gstreamer\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling GStreamer for Android Universal (Bootstrap and Build) - Shell\nDESCRIPTION: Bootstraps and builds GStreamer for the Android Universal target using a specific cross-compilation config file. The \\\"-c config/cross-android-universal.cbc\\\" argument specifies which cross file to use for environment preparation and final build. Both commands must be run for cross-targeted builds.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n# Bootstrap for Android Universal on Linux\\n$ ./cerbero-uninstalled -c config/cross-android-universal.cbc bootstrap\\n\\n# Build everything and package for Android Universal\\n$ ./cerbero-uninstalled -c config/cross-android-universal.cbc package gstreamer-1.0\\n```\n```\n\n----------------------------------------\n\nTITLE: Running Time Calculation for Segments\nDESCRIPTION: Formulas for calculating running time from buffer timestamps and segment information, handling both positive and negative playback rates.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/synchronisation.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nif (S.rate > 0.0)\n      B.running_time = (B.timestamp - (S.start + S.offset)) / ABS (S.rate) + S.base\n      =>\n      B.timestamp = (B.running_time - S.base) * ABS (S.rate) + S.start + S.offset\n    else\n      B.running_time = ((S.stop - S.offset) - B.timestamp) / ABS (S.rate) + S.base\n      =>\n      B.timestamp = S.stop - S.offset - ((B.running_time - S.base) * ABS (S.rate))\n```\n\n----------------------------------------\n\nTITLE: GStreamer Vulkan Wayland Version Template\nDESCRIPTION: Template syntax for obtaining the GStreamer Vulkan Wayland library version for build configuration. Used to specify the API version when linking against the library.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/vulkan-wayland/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngstreamer-vulkan-wayland-{{ gst_api_version.md }}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Controllable Property Values in C\nDESCRIPTION: This C code demonstrates calling `gst_object_sync_values(element, timestamp)` typically within an element's data processing loop. This function queries the controller subsystem for any scheduled changes to controllable properties up to the given `timestamp` and applies them to the element's GObject properties, effectively updating the element's state.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/dparams.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n    gst_object_sync_values(element,timestamp);\n\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pipeline: Custom Video Decoder with Queue to Custom Video Sink\nDESCRIPTION: This pipeline showcases how buffer pool negotiation and management work when changing video resolution. It demonstrates the process of negotiating new buffer pools and draining old ones when the video format changes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/bufferpool.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n.. ! myvideodecoder ! queue ! myvideosink\n```\n\n----------------------------------------\n\nTITLE: Buffer Processing Implementation\nDESCRIPTION: Implements the buffer handling logic in the MySink class to process incoming audio data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/using-appsink-appsrc-in-qt.md#2025-04-23_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n    virtual QGst::FlowReturn newBuffer()\n    {\n        m_src->pushBuffer(pullBuffer());\n        return QGst::FlowOk;\n    }\n```\n\n----------------------------------------\n\nTITLE: Running GStreamer Pipeline with gst-launch-1.0\nDESCRIPTION: Basic syntax for running the gst-launch-1.0 command to build and execute a GStreamer pipeline. The command accepts options and a pipeline description that defines the media processing workflow.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 [OPTIONS] PIPELINE-DESCRIPTION\n```\n\n----------------------------------------\n\nTITLE: Retrieving Color Balance Channels in GStreamer\nDESCRIPTION: Demonstrates how to get available color balance channels using the GStreamer API function gst_color_balance_list_channels()\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/color-balance.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ngst_color_balance_list_channels()\n```\n\n----------------------------------------\n\nTITLE: Running GStreamer Pipeline with gst-launch-1.0 (Bash)\nDESCRIPTION: Mentions `gst-launch-1.0` as a command-line tool that utilizes the `GST_DEBUG_DUMP_DOT_DIR` environment variable to generate `.dot` graph files during pipeline execution, specifically at each state change, aiding in debugging and understanding pipeline structure.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/debugging-tools.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0\n```\n\n----------------------------------------\n\nTITLE: Documenting RGBA Packed RGB with Alpha Last Format (Markdown, Plaintext)\nDESCRIPTION: This block documents the RGBA format, where each pixel contains red, green, blue and alpha, in that order, packed into 4 bytes. It details per-channel depth, stride, offset, and overall stride computation for pixel manipulation in graphics frameworks or GStreamer plugins requiring RGBA formats. It is essential for correct buffer processing in applications needing transparency.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |R0|G0|B0|A0| |R1|G1|B1|A1| ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: R\\n          depth:           8\\n          pstride:         4\\n          offset:          0\\n\\n        Component 1: G\\n          depth:           8\\n          pstride:         4\\n          offset:          1\\n\\n        Component 2: B\\n          depth            8\\n          pstride:         4\\n          offset:          2\\n\\n        Component 3: A\\n          depth            8\\n          pstride:         4\\n          offset:          3\\n\\n        Image\\n          default rstride: width * 4\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Implementing VideoViewController Header for iOS GStreamer Media Player\nDESCRIPTION: This Objective-C header file defines the VideoViewController class for an iOS media player. It includes UI elements like play/pause buttons, video container view, time slider, and time label. The class implements the GStreamerBackendDelegate protocol and provides methods for playback control and slider interactions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <UIKit/UIKit.h>\n#import \"GStreamerBackendDelegate.h\"\n\n@interface VideoViewController : UIViewController <GStreamerBackendDelegate> {\n    IBOutlet UILabel *message_label;\n    IBOutlet UIBarButtonItem *play_button;\n    IBOutlet UIBarButtonItem *pause_button;\n    IBOutlet UIView *video_view;\n    IBOutlet UIView *video_container_view;\n    IBOutlet NSLayoutConstraint *video_width_constraint;\n    IBOutlet NSLayoutConstraint *video_height_constraint;\n    IBOutlet UIToolbar *toolbar;\n    IBOutlet UITextField *time_label;\n    IBOutlet UISlider *time_slider;\n}\n\n@property (retain,nonatomic) NSString *uri;\n\n-(IBAction) play:(id)sender;\n-(IBAction) pause:(id)sender;\n-(IBAction) sliderValueChanged:(id)sender;\n-(IBAction) sliderTouchDown:(id)sender;\n-(IBAction) sliderTouchUp:(id)sender;\n\n/* From GStreamerBackendDelegate */\n-(void) gstreamerInitialized;\n-(void) gstreamerSetUIMessage:(NSString *)message;\n\n@end\n```\n\n----------------------------------------\n\nTITLE: emit-signal: GStreamer Validation Scenario Action\nDESCRIPTION: Emits a specified GObject signal to a target GstElement within the pipeline. Requires `signal-name` and `target-element-name`. Optional `params` (ValueArray) can provide signal arguments. Execution can be timed using `playback-time` or triggered by `on-message`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_24\n\nLANGUAGE: validate-scenario\nCODE:\n```\n``` validate-scenario\nemit-signal,\n    signal-name=(string),\n    target-element-name=(string),\n    [params=(ValueArray)],\n    [playback-time=(double,string)];\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Pad from a GstElement in C\nDESCRIPTION: This function retrieves a pad from a GstElement by its name. It searches through the list of pads to find a match.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstelement.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\npad = gst_element_get_pad(element, \"padname\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Seek Event in GStreamer\nDESCRIPTION: This snippet shows how to create a seek event in GStreamer using the gst_event_new_seek() function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/seeking.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngst_event_new_seek()\n```\n\n----------------------------------------\n\nTITLE: check-last-sample: GStreamer Validation Scenario Action\nDESCRIPTION: Checks properties of the last sample received by a declared Sink element, useful after seeks or commits. Optional parameters specify the sink (`sink-name` or `sink-factory-name`), expected properties like `checksum`, `sinkpad-caps`, or `timecode-frame-number`. Execution can be timed using `playback-time` or triggered by `on-message`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_30\n\nLANGUAGE: validate-scenario\nCODE:\n```\n``` validate-scenario\ncheck-last-sample,\n    [checksum=(string)],\n    [sink-factory-name=(string)],\n    [sink-name=(string)],\n    [sinkpad-caps=(string)],\n    [timecode-frame-number=(string)],\n    [playback-time=(double,string)];\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Y412_LE Packed 4:4:4:4 AYUV Format in GStreamer\nDESCRIPTION: Specifies the component structure for Y412_LE, a packed 4:4:4:4 AYUV format with 2 bytes per channel where color value is stored in MSB 12 bits (U-Y-V-A), little-endian. It details the depth, stride, and offset for Y, U, V, and A components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_51\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           12 LE\n          pstride:         8\n          default offset:  2\n\n        Component 1: U\n          depth:           12 LE\n          pstride:         8\n          offset:          0\n\n        Component 2: V\n          depth            12 LE\n          pstride:         8\n          offset:          4\n\n        Component 2: A\n          depth            12 LE\n          pstride:         8\n          offset:          6\n\n        Image\n          default rstride: width * 8\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Relocating GStreamer Binaries using osxrelocator.py Script\nDESCRIPTION: These commands demonstrate using the `osxrelocator.py` script to recursively modify binaries within specific directories of an application bundle (`MyApp.app`). It replaces the old, absolute GStreamer framework path (`/Library/Frameworks/GStreamer.framework/`) with a new path relative to the application executable (`@executable_path/../Frameworks/GStreamer.framework/`), enabling relocation. The `-r` flag likely indicates recursive operation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/mac-osx.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ osxrelocator.py MyApp.app/Contents/Frameworks/GStreamer.framework/Versions/Current/lib /Library/Frameworks/GStreamer.framework/ @executable_path/../Frameworks/GStreamer.framework/ -r\n$ osxrelocator.py MyApp.app/Contents/Frameworks/GStreamer.framework/Versions/Current/libexec /Library/Frameworks/GStreamer.framework/ @executable_path/../Frameworks/GStreamer.framework/ -r\n$ osxrelocator.py MyApp.app/Contents/Frameworks/GStreamer.framework/Versions/Current/bin /Library/Frameworks/GStreamer.framework/ @executable_path/../Frameworks/GStreamer.framework/ -r\n$ osxrelocator.py MyApp.app/Contents/MacOS /Library/Frameworks/GStreamer.framework/ @executable_path/../Frameworks/GStreamer.framework/ -r\n```\n\n----------------------------------------\n\nTITLE: Partial Pipeline Prerolling Architecture\nDESCRIPTION: ASCII diagram showing the structure of a partial pipeline with filesrc, demuxer, queues, and decoders for prerolling implementation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/probes.md#2025-04-23_snippet_6\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n    .---------.      .---------.                .----------.\n    | filesrc |      | demuxer |     .-----.    | decoder1 |\n    |        src -> sink      src1 ->|queue|-> sink       src\n    '---------'      |         |     '-----'    '----------' X\n                     |         |                .----------.\n                     |         |     .-----.    | decoder2 |\n                     |        src2 ->|queue|-> sink       src\n                     '---------'     '-----'    '----------' X\n```\n\n----------------------------------------\n\nTITLE: GStreamer Transcoder Library Version Reference\nDESCRIPTION: Reference to the GStreamer transcoder library version template, used for linking against the correct API version. This is used in build configurations to ensure proper library linkage.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/transcoder/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngstreamer-transcoder-{{ gst_api_version.md }}\n```\n\n----------------------------------------\n\nTITLE: Defining Progress Message Fields in GStreamer\nDESCRIPTION: Specifies the fields contained in a GStreamer PROGRESS message, including type, code, text, percent, and timeout. This structure allows for detailed reporting of asynchronous operations in the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/progress.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **`type`**, `GST_TYPE_PROGRESS_TYPE`: A set of types to define the type of progress\n    * `GST_PROGRESS_TYPE_START`: A new task is started in the background\n    * `GST_PROGRESS_TYPE_CONTINUE`: The previous tasks completed and a new one\n    continues. This is done so that the application can follow a set of\n    continuous tasks and react to COMPLETE only when the element completely\n    finished.\n    * `GST_PROGRESS_TYPE_CANCELED`: A task is canceled by the user.\n    * `GST_PROGRESS_TYPE_ERROR`: A task stopped because of an error. In case of\n    an error, an error message will have been posted before.\n    * `GST_PROGRESS_TYPE_COMPLETE`: A task completed successfully.\n\n- **`code`**, `G_TYPE_STRING`: A generic extensible string that can be used to\nprogrammatically determine the action that is in progress. Some standard\npredefined codes will be defined.\n\n- **`text`**, `G_TYPE_STRING`: A user visible string detailing the action.\n\n- **`percent`**, `G_TYPE_INT`: between 0 and 100 Progress of the action as\na percentage, the following values are allowed:\n    - `GST_PROGRESS_TYPE_START` always has a 0% value.\n    - `GST_PROGRESS_TYPE_CONTINUE` have a value between 0 and 100\n    - `GST_PROGRESS_TYPE_CANCELED`, `GST_PROGRESS_TYPE_ERROR` and\n    `GST_PROGRESS_TYPE_COMPLETE` always have a 100% value.\n\n- **`timeout`**, `G_TYPE_INT` in milliseconds: The timeout of the async\noperation. -1 if unknown/unlimited.. This field can be interesting to the\napplication when it wants to display some sort of progress indication.\n```\n\n----------------------------------------\n\nTITLE: Playing Video from VOB File with GStreamer\nDESCRIPTION: Demonstrates how to display the video portion of a VOB file (used on DVDs) using GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=flflfj.vob ! dvddemux ! mpegvideoparse ! mpeg2dec ! videoconvert ! sdlvideosink\n```\n\n----------------------------------------\n\nTITLE: Defining Cerbero Recipe Attributes in Python\nDESCRIPTION: Illustrates examples of required and optional attributes within a Cerbero Python recipe file (`.recipe`). These attributes configure metadata (name, version, licenses), dependencies (`deps`, `platform_deps`), source control (`remotes`, `commit`), build configuration (`config_sh`, `configure_options`), system library usage (`use_system_libs`), build/source types (`btype`, `stype`), and files to be packaged (`files_category`, `platform_files_category`). Requires understanding of Cerbero's enums like `License`, `Platform`, `BuildType`, and `SourceType` defined elsewhere in the Cerbero codebase.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/multiplatform-using-cerbero.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nname = 'my-app'\n```\n\nLANGUAGE: python\nCODE:\n```\nversion = '1.0'\n```\n\nLANGUAGE: python\nCODE:\n```\nlicenses = [License.LGPLv2Plus]\n```\n\nLANGUAGE: python\nCODE:\n```\ndeps = ['other', 'recipe', 'names']\n```\n\nLANGUAGE: python\nCODE:\n```\nplatform_deps = {Platform.LINUX: ['some-recipe'], Platform.WINDOWS: ['another-recipe']}\n```\n\nLANGUAGE: python\nCODE:\n```\nremotes = {'origin': '<git://somewhere>'}\n```\n\nLANGUAGE: python\nCODE:\n```\ncommit = 'my-app-branch'\n```\n\nLANGUAGE: python\nCODE:\n```\nconfig_sh = 'autoreconf -fiv && sh ./configure'\n```\n\nLANGUAGE: python\nCODE:\n```\nconfigure_options = '--enable-something'\n```\n\nLANGUAGE: python\nCODE:\n```\nuse_system_libs = True\n```\n\nLANGUAGE: python\nCODE:\n```\nbtype = BuildType.CUSTOM\n```\n\nLANGUAGE: python\nCODE:\n```\nstype = SourceType.CUSTOM\n```\n\nLANGUAGE: python\nCODE:\n```\nfiles_bins = ['some-binary']\n```\n\nLANGUAGE: python\nCODE:\n```\nfiles_libs = ['libsomelib']\n```\n\nLANGUAGE: python\nCODE:\n```\nfiles_devel = ['include/something']\n```\n\nLANGUAGE: python\nCODE:\n```\nfiles_python = ['site-packages/some/pythonfile%(pext)s']\n```\n\nLANGUAGE: python\nCODE:\n```\nfiles_lang = ['foo']\n```\n\nLANGUAGE: python\nCODE:\n```\nplatform_files_some_category = {Platform.LINUX: ['/some/file']}\n```\n\n----------------------------------------\n\nTITLE: Creating a Playbin Pipeline in Python\nDESCRIPTION: Code that creates a GStreamer pipeline in Python using the playbin element, which automatically handles media playback. This shows how to create elements and set properties in Python.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# Create the elements\nsource = Gst.ElementFactory.make(\"playbin\", \"source\")\nif not source:\n    sys.stderr.write(\" Unable to create source\\n\")\n    sys.exit(1)\n\n# Set the URI to play\nsource.set_property('uri', 'https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm')\n```\n\n----------------------------------------\n\nTITLE: Setting Pipeline State to Playing in C\nDESCRIPTION: Code that sets the GStreamer pipeline state to PLAYING, which starts the media playback. Every GStreamer element has an associated state that controls its operation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n/* Start playing */\ngst_element_set_state (pipeline, GST_STATE_PLAYING);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Pipeline Events in Python\nDESCRIPTION: Python code that waits for events on the GStreamer pipeline bus, such as errors or end-of-stream signals. Shows how to use timed_pop_filtered with Python GStreamer bindings.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Wait until error or EOS\nbus = source.get_bus()\nmsg = bus.timed_pop_filtered(\nGst.CLOCK_TIME_NONE,\nGst.MessageType.ERROR | Gst.MessageType.EOS\n)\n```\n\n----------------------------------------\n\nTITLE: Manually Compiling GStreamer C Code with Clang (Framework Path)\nDESCRIPTION: These shell commands demonstrate compiling and linking a simple GStreamer C application (`main.c`) directly using `clang` without `pkg-config`. The first command compiles the C source file, specifying the GStreamer header location using `-I`. The second command links the resulting object file, providing the library path (`-L`), the framework search path (`-F`), and explicitly linking against the GStreamer framework (`-framework GStreamer`).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-mac-osx.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Compile\n$ clang -c main.c -o main.o -I/Library/Frameworks/GStreamer.framework/Headers\n\n# Link\n$ clang -o main main.o -L/Library/Frameworks/GStreamer.framework/Libraries -F/Library/Frameworks -framework GStreamer\n```\n\n----------------------------------------\n\nTITLE: Integrating GStreamer Pipelines with Main Loops in 0.10 (C)\nDESCRIPTION: The function `gst_bin_iterate()` has been removed in GStreamer 0.10 because pipelines now manage their own internal threads for data processing. Applications should run a `GMainLoop` (or a toolkit-specific main loop like `gtk_main()`) and use the `GstBus` to receive and handle pipeline messages asynchronously, rather than manually iterating the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/porting.md#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\ngst_bin_iterate ()\n```\n\nLANGUAGE: C\nCODE:\n```\nGMainLoop\n```\n\nLANGUAGE: C\nCODE:\n```\ngtk_main ()\n```\n\n----------------------------------------\n\nTITLE: Building GStreamer LCEVC Decoder Plugin - Shell\nDESCRIPTION: This snippet demonstrates how to set up and build the lcevcdecoder GStreamer plugin using Meson and Ninja. It configures the build system with a specific pkg-config path pointing to the previously installed SDK and enables the lcevcdecoder plugin via the meson flag. Prerequisites: Meson, Ninja, GStreamer sources. Inputs: $BUILD_DIR, $INSTALL_DIR. Output: Compiled plugin in $BUILD_DIR. Assumes correct environment and directory names.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/lcevcdecoder/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd GStreaner\n$ meson setup $BUILD_DIR --pkg-config-path=$INSTALL_DIR/lib/pkgconfig -Dgst-plugins-bad:lcevcdecoder=enabled\n$ ninja -C $BUILD_DIR\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Meson and GStreamer Validate Launcher (Shell)\nDESCRIPTION: This snippet shows how to run GStreamer unit or functional tests using gst-validate-launcher. It requires gst-devtools to be built and installed. The input argument 'check.gst*' specifies which test suites to execute. The output is the console-rendered result of the specified tests, including pass/fail status and logs as needed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngst-validate-launcher check.gst*\n```\n\n----------------------------------------\n\nTITLE: Illustrating Analytics Pipeline Structure in ASCII Art\nDESCRIPTION: This ASCII art diagram shows the structure of a hypothetical analytics pipeline, including video input, pre-processing, inference, post-processing, and result visualization stages.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/machine-learning-analytics.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+---------+    +----------+    +---------------+    +----------------+\n| v4l2src |    | video    |    | onnxinference |    | tensor-decoder |\n|         |    |  convert |    |               |    |                |\n|        src-sink  scale src-sink1           src1-sink              src---\n|         |    |(pre-proc)|    | (analysis)    |    | (post-proc)    |   /\n+---------+    +----------+    +---------------+    +----------------+  /\n                                                                       /\n----------------------------------------------------------------------\n|  +-------------+    +------+\n|  | Analytic-   |    | sink |\n|  |  overlay    |    |      |\n-sink           src-sink     |\n   | (analysis   |    |      |\n   |  -results   |    +------+\n   |  -consumer) |\n   +-------------+\n```\n\n----------------------------------------\n\nTITLE: Implementing a Media Player Widget with UI and Playback Logic - C++\nDESCRIPTION: This 'mediaapp.cpp' C++ file implements the MediaApp class, providing all UI, event, and playback logic for the media player, utilizing QtWidgets, Qt signal-slot connections, and QGst APIs for media handling. Relies on proper Qt resource setup, connection to the Player class, and overall Qt application context. Handles user input, fullscreen toggling, slider and label synchronization, and instantiates all controls in code. Proper handling of Qt object lifecycles and the usage of GStreamer via QtGStreamer are required.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include \"mediaapp.h\"\\n#include \"player.h\"\\n#if (QT_VERSION >= QT_VERSION_CHECK(5, 0, 0))\\n#include <QtWidgets/QBoxLayout>\\n#include <QtWidgets/QFileDialog>\\n#include <QtWidgets/QToolButton>\\n#include <QtWidgets/QLabel>\\n#include <QtWidgets/QSlider>\\n#else\\n#include <QtGui/QBoxLayout>\\n#include <QtGui/QFileDialog>\\n#include <QtGui/QToolButton>\\n#include <QtGui/QLabel>\\n#include <QtGui/QSlider>\\n#include <QtGui/QMouseEvent>\\n#endif\\nMediaApp::MediaApp(QWidget *parent)\\n    : QWidget(parent)\\n{\\n    //create the player\\n    m_player = new Player(this);\\n    connect(m_player, SIGNAL(positionChanged()), this, SLOT(onPositionChanged()));\\n    connect(m_player, SIGNAL(stateChanged()), this, SLOT(onStateChanged()));\\n    //m_baseDir is used to remember the last directory that was used.\\n    //defaults to the current working directory\\n    m_baseDir = QLatin1String(\".\");\\n    //this timer (re-)hides the controls after a few seconds when we are in fullscreen mode\\n    m_fullScreenTimer.setSingleShot(true);\\n    connect(&m_fullScreenTimer, SIGNAL(timeout()), this, SLOT(hideControls()));\\n    //create the UI\\n    QVBoxLayout *appLayout = new QVBoxLayout;\\n    appLayout->setContentsMargins(0, 0, 0, 0);\\n    createUI(appLayout);\\n    setLayout(appLayout);\\n    onStateChanged(); //set the controls to their default state\\n    setWindowTitle(tr(\"QtGStreamer example player\"));\\n    resize(400, 400);\\n}\\nMediaApp::~MediaApp()\\n{\\n    delete m_player;\\n}\\nvoid MediaApp::openFile(const QString & fileName)\\n{\\n    m_baseDir = QFileInfo(fileName).path();\\n    m_player->stop();\\n    m_player->setUri(fileName);\\n    m_player->play();\\n}\\nvoid MediaApp::open()\\n{\\n    QString fileName = QFileDialog::getOpenFileName(this, tr(\"Open a Movie\"), m_baseDir);\\n    if (!fileName.isEmpty()) {\\n        openFile(fileName);\\n    }\\n}\\nvoid MediaApp::toggleFullScreen()\\n{\\n    if (isFullScreen()) {\\n        setMouseTracking(false);\\n        m_player->setMouseTracking(false);\\n        m_fullScreenTimer.stop();\\n        showControls();\\n        showNormal();\\n    } else {\\n        setMouseTracking(true);\\n        m_player->setMouseTracking(true);\\n        hideControls();\\n        showFullScreen();\\n    }\\n}\\nvoid MediaApp::onStateChanged()\\n{\\n    QGst::State newState = m_player->state();\\n    m_playButton->setEnabled(newState != QGst::StatePlaying);\\n    m_pauseButton->setEnabled(newState == QGst::StatePlaying);\\n    m_stopButton->setEnabled(newState != QGst::StateNull);\\n    m_positionSlider->setEnabled(newState != QGst::StateNull);\\n    m_volumeSlider->setEnabled(newState != QGst::StateNull);\\n    m_volumeLabel->setEnabled(newState != QGst::StateNull);\\n    m_volumeSlider->setValue(m_player->volume());\\n    //if we are in Null state, call onPositionChanged() to restore\\n    //the position of the slider and the text on the label\\n    if (newState == QGst::StateNull) {\\n        onPositionChanged();\\n    }\\n}\\n/* Called when the positionChanged() is received from the player */\\nvoid MediaApp::onPositionChanged()\\n{\\n    QTime length(0,0);\\n    QTime curpos(0,0);\\n    if (m_player->state() != QGst::StateReady &&\\n        m_player->state() != QGst::StateNull)\\n    {\\n        length = m_player->length();\\n        curpos = m_player->position();\\n    }\\n    m_positionLabel->setText(curpos.toString(\"hh:mm:ss.zzz\")\\n                                        + \"/\" +\\n                             length.toString(\"hh:mm:ss.zzz\"));\\n    if (length != QTime(0,0)) {\\n        m_positionSlider->setValue(curpos.msecsTo(QTime(0,0)) * 1000 / length.msecsTo(QTime(0,0)));\\n    } else {\\n        m_positionSlider->setValue(0);\\n    }\\n    if (curpos != QTime(0,0)) {\\n        m_positionLabel->setEnabled(true);\\n        m_positionSlider->setEnabled(true);\\n    }\\n}\\n/* Called when the user changes the slider's position */\\nvoid MediaApp::setPosition(int value)\\n{\\n    uint length = -m_player->length().msecsTo(QTime(0,0));\\n    if (length != 0 && value > 0) {\\n        QTime pos(0,0);\\n        pos = pos.addMSecs(length * (value / 1000.0));\\n        m_player->setPosition(pos);\\n    }\\n}\\nvoid MediaApp::showControls(bool show)\\n{\\n    m_openButton->setVisible(show);\\n    m_playButton->setVisible(show);\\n    m_pauseButton->setVisible(show);\\n    m_stopButton->setVisible(show);\\n    m_fullScreenButton->setVisible(show);\\n    m_positionSlider->setVisible(show);\\n    m_volumeSlider->setVisible(show);\\n    m_volumeLabel->setVisible(show);\\n    m_positionLabel->setVisible(show);\\n}\\nvoid MediaApp::mouseMoveEvent(QMouseEvent *event)\\n{\\n    Q_UNUSED(event);\\n    if (isFullScreen()) {\\n        showControls();\\n        m_fullScreenTimer.start(3000); //re-hide controls after 3s\\n    }\\n}\\nQToolButton *MediaApp::initButton(QStyle::StandardPixmap icon, const QString & tip,\\n                                  QObject *dstobj, const char *slot_method, QLayout *layout)\\n{\\n    QToolButton *button = new QToolButton;\\n    button->setIcon(style()->standardIcon(icon));\\n    button->setIconSize(QSize(36, 36));\\n    button->setToolTip(tip);\\n    connect(button, SIGNAL(clicked()), dstobj, slot_method);\\n    layout->addWidget(button);\\n    return button;\\n}\\nvoid MediaApp::createUI(QBoxLayout *appLayout)\\n{\\n    appLayout->addWidget(m_player);\\n    m_positionLabel = new QLabel();\\n    m_positionSlider = new QSlider(Qt::Horizontal);\\n    m_positionSlider->setTickPosition(QSlider::TicksBelow);\\n    m_positionSlider->setTickInterval(10);\\n    m_positionSlider->setMaximum(1000);\\n    connect(m_positionSlider, SIGNAL(sliderMoved(int)), this, SLOT(setPosition(int)));\\n    m_volumeSlider = new QSlider(Qt::Horizontal);\\n    m_volumeSlider->setTickPosition(QSlider::TicksLeft);\\n    m_volumeSlider->setTickInterval(2);\\n    m_volumeSlider->setMaximum(10);\\n    m_volumeSlider->setMaximumSize(64,32);\\n    connect(m_volumeSlider, SIGNAL(sliderMoved(int)), m_player, SLOT(setVolume(int)));\\n    QGridLayout *posLayout = new QGridLayout;\\n    posLayout->addWidget(m_positionLabel, 1, 0);\\n    posLayout->addWidget(m_positionSlider, 1, 1, 1, 2);\\n    appLayout->addLayout(posLayout);\\n    QHBoxLayout *btnLayout = new QHBoxLayout;\\n    btnLayout->addStretch();\\n    m_openButton = initButton(QStyle::SP_DialogOpenButton, tr(\"Open File\"),\\n                              this, SLOT(open()), btnLayout);\\n    m_playButton = initButton(QStyle::SP_MediaPlay, tr(\"Play\"),\\n                              m_player, SLOT(play()), btnLayout);\\n    m_pauseButton = initButton(QStyle::SP_MediaPause, tr(\"Pause\"),\\n                               m_player, SLOT(pause()), btnLayout);\\n    m_stopButton = initButton(QStyle::SP_MediaStop, tr(\"Stop\"),\\n                              m_player, SLOT(stop()), btnLayout);\\n    m_fullScreenButton = initButton(QStyle::SP_TitleBarMaxButton, tr(\"Fullscreen\"),\\n                                    this, SLOT(toggleFullScreen()), btnLayout);\\n    btnLayout->addStretch();\\n    m_volumeLabel = new QLabel();\\n    m_volumeLabel->setPixmap(\\n        style()->standardIcon(QStyle::SP_MediaVolume).pixmap(QSize(32, 32),\\n                QIcon::Normal, QIcon::On));\\n    btnLayout->addWidget(m_volumeLabel);\\n    btnLayout->addWidget(m_volumeSlider);\\n    appLayout->addLayout(btnLayout);\\n}\\n#include \"moc_mediaapp.cpp\"\n```\n\n----------------------------------------\n\nTITLE: Setting Pipeline State to Playing in Python\nDESCRIPTION: Code that sets the GStreamer pipeline state to PLAYING in Python, which starts the media playback. Shows how to handle state change return values for error checking.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Start playing\nret = source.set_state(Gst.State.PLAYING)\nif ret == Gst.StateChangeReturn.FAILURE:\n    sys.stderr.write(\" Unable to set the pipeline to the playing state.\\n\")\n    sys.exit(1)\n```\n\n----------------------------------------\n\nTITLE: Defining Tracer Event Classes in GStreamer (C)\nDESCRIPTION: Demonstrates how to define tracer event classes using gst_tracer_record_new(). This example creates a 'thread-rusage' event class with thread ID and CPU load information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nfmt = gst_tracer_record_new (\"thread-rusage.class\",\n    \"thread-id\", GST_TYPE_STRUCTURE, gst_structure_new (\"scope\",\n        \"type\", G_TYPE_GTYPE, G_TYPE_GUINT64,\n        \"related-to\", GST_TYPE_TRACER_VALUE_SCOPE, GST_TRACER_VALUE_SCOPE_THREAD,\n        NULL),\n    \"average-cpuload\", GST_TYPE_STRUCTURE, gst_structure_new (\"value\",\n        \"type\", G_TYPE_GTYPE, G_TYPE_UINT,\n        \"description\", G_TYPE_STRING, \"average cpu usage per thread\",\n        \"flags\", GST_TYPE_TRACER_VALUE_FLAGS, GST_TRACER_VALUE_FLAGS_AGGREGATED,\n        \"min\", G_TYPE_UINT, 0,\n        \"max\", G_TYPE_UINT, 100,\n        NULL),\n    NULL);\n```\n\n----------------------------------------\n\nTITLE: Defining Probe Types in GStreamer\nDESCRIPTION: Shows various probe type flags used to specify the kind of notifications desired when adding a probe to a GStreamer pad.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/pipeline-manipulation.md#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_BUFFER\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_PUSH\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_PULL\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_BUFFER_LIST\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_EVENT_UPSTREAM\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_EVENT_BOTH\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_EVENT_FLUSH\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_QUERY_DOWNSTREAM\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_QUERY_UPSTREAM\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_QUERY_BOTH\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_BLOCK\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_PAD_PROBE_TYPE_IDLE\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Cerbero Recipe using Bash\nDESCRIPTION: This command uses the `cerbero-uninstalled` script to create a basic skeleton recipe file for a new application named 'my-app' with version '1.0'. The generated file will be located at `recipes/my-app.recipe` and contains the minimum necessary structure for a Cerbero recipe.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/multiplatform-using-cerbero.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./cerbero-uninstalled add-recipe my-app 1.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Y42B Format in GStreamer\nDESCRIPTION: Defines the structure of the Y42B format, a planar 4:2:2 YUV format. It details the component depths, strides, offsets, and memory layout for Y, U, and V components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * height\n\n        Component 1: U\n          depth            8\n          pstride:         1\n          default offset:  size (component0)\n          default rstride: RU8 (width) / 2\n          default size:    rstride (component1) * height\n\n        Component 2: V\n          depth:           8\n          pstride:         1\n          default offset:  offset (component1) + size (component1)\n          default rstride: RU8 (width) / 2\n          default size:    rstride (component2) * height\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n```\n\n----------------------------------------\n\nTITLE: GStreamer Element Linking in gst-launch Syntax\nDESCRIPTION: Shows how to link elements in gst-launch syntax. The exclamation point is used to link elements, with optional pad specifications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/programs.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n... !sink ...\n```\n\n----------------------------------------\n\nTITLE: Creating Interpolation Control Source\nDESCRIPTION: Creates and configures a new GstInterpolationControlSource with linear interpolation mode.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/dparams.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ncsource = gst_interpolation_control_source_new ();\ng_object_set (csource, \"mode\", GST_INTERPOLATION_MODE_LINEAR, NULL);\n```\n\n----------------------------------------\n\nTITLE: Setting GStreamer Debug Level (Bash)\nDESCRIPTION: Mentions the `GST_DEBUG` environment variable used to control the verbosity and scope of GStreamer's debug logging output. It allows filtering messages by category and level, providing detailed information for debugging GStreamer applications and pipelines.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/debugging-tools.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nGST_DEBUG\n```\n\n----------------------------------------\n\nTITLE: Finalizing Native Resources in Android Activity onDestroy (Java)\nDESCRIPTION: This `onDestroy` method overrides the corresponding Activity lifecycle method. It calls the `nativeFinalize()` JNI method to signal the native code to clean up its resources, such as destroying the GStreamer pipeline, stopping threads, and freeing allocated memory. It then calls the superclass's `onDestroy` method. This is crucial for preventing resource leaks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprotected void onDestroy() {\n    nativeFinalize();\n    super.onDestroy();\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying v216 Format in GStreamer\nDESCRIPTION: Defines the structure of the v216 format, a packed 4:2:2 16-bit YUV format with Y0-U0-Y1-V1 order. It details the component depths, pixel stride, and memory offsets.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\n       |U0|Y0|V0|Y1| |U1|Y2|V1|Y3| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: Y\n          depth:           16 LE\n          pstride:         4\n          offset:          2\n\n        Component 1: U\n          depth            16 LE\n          pstride:         8\n          offset:          0\n\n        Component 2: V\n          depth:           16 LE\n          pstride:         8\n          offset:          4\n\n        Image\n          default rstride: RU8 (width * 2)\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous State Changes in GStreamer 0.10 (C)\nDESCRIPTION: State changes in GStreamer 0.10, particularly transitions involving READY to PAUSED, can be asynchronous (ASYNC). When calling `gst_element_set_state()`, a return value other than `GST_STATE_CHANGE_FAILURE` does not guarantee immediate success; it might indicate an ongoing asynchronous transition. `GST_STATE_CHANGE_SUCCESS` might not be returned immediately. To synchronously wait for a state change to complete, use `gst_element_get_state()` with a timeout of `GST_CLOCK_TIME_NONE`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/porting.md#2025-04-23_snippet_3\n\nLANGUAGE: C\nCODE:\n```\ngst_element_set_state ()\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_STATE_CHANGE_SUCCESS\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_STATE_CHANGE_FAILURE\n```\n\nLANGUAGE: C\nCODE:\n```\ngst_element_get_state ()\n```\n\nLANGUAGE: C\nCODE:\n```\nGST_CLOCK_TIME_NONE\n```\n\n----------------------------------------\n\nTITLE: Adding a Clip with Precise Timing Control\nDESCRIPTION: Command that adds a clip with specific inpoint, duration, and start time for precise timeline placement.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/ges-launch.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nges-launch-1.0 +clip /path/to/media inpoint=4.0 duration=2.0 start=4.0\n```\n\n----------------------------------------\n\nTITLE: Calculating Data Rate in GStreamer QoS\nDESCRIPTION: Formula for determining the current data rate of the upstream element based on processing time and buffer duration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/qos.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n      PT1   T1 - T0\nDR1 = --- = -------\n      D1      D1\n```\n\n----------------------------------------\n\nTITLE: Linking GStreamer Elements in C\nDESCRIPTION: Links the audioconvert, audioresample, and autoaudiosink elements in the pipeline. The source is not linked at this stage due to its dynamic nature.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/dynamic-pipelines.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nif (!gst_element_link_many (data.convert, data.resample, data.sink, NULL)) {\n  g_printerr (\"Elements could not be linked.\\n\");\n  gst_object_unref (data.pipeline);\n  return -1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GStreamer Seek Flag Combination: ACCURATE and KEY_UNIT\nDESCRIPTION: This snippet outlines the four possible combinations of the ACCURATE and KEY_UNIT flags in GStreamer seek operations, explaining the behavior for each combination in terms of segment start position, data sending, and position approximation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/seeking.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `ACCURATE` and `KEY_UNIT` combinations:\n```\n\n----------------------------------------\n\nTITLE: Including GStreamer Header with SDK Templates (C)\nDESCRIPTION: Shows the standard, preferred way to include the main GStreamer header file (`gst.h`) when using the GStreamer SDK Xcode templates or developing on traditional Linux environments. The templates configure the project settings (like header search paths) to allow this simpler include statement, promoting cross-platform code consistency.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/for-ios-development.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n```\n\n----------------------------------------\n\nTITLE: Documenting xBGR Sparse Reverse RGB Format Layout with Space First (Markdown, Plaintext)\nDESCRIPTION: This documentation describes the xBGR format, similar to xRGB but with blue and red channel order reversed. Provides a block diagram and explains per-channel offset and stride, used as a guide for constructing or reading pixel buffers with a space/unused byte first.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |X |B0|G0|R0| |X |B1|G1|R1| ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: R\\n          depth:           8\\n          pstride:         4\\n          offset:          3\\n\\n        Component 1: G\\n          depth:           8\\n          pstride:         4\\n          offset:          2\\n\\n        Component 2: B\\n          depth            8\\n          pstride:         4\\n          offset:          1\\n\\n        Image\\n          default rstride: width * 4\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Profile Selection UI Structure in Pseudocode\nDESCRIPTION: This snippet illustrates the proposed hierarchical structure for presenting profile selection to users in applications. It shows a series of combo boxes for category, device/site, and profile selection.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/encoding.md#2025-04-23_snippet_3\n\nLANGUAGE: pseudocode\nCODE:\n```\n[ Category ] # optional, depends on the application\n[ Device/Site/.. ] # optional, depends on the application\n[ Profile ]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Python\nDESCRIPTION: Shows the Python method for setting environment variables using the `os.environ` dictionary. This example demonstrates setting a variable 'VAR' to '/foo/var'. This approach can be used to configure necessary environment variables like `GST_PLUGIN_SYSTEM_PATH` for relocated GStreamer within a Python application.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/mac-osx.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nos.environ['VAR'] = '/foo/var'\n```\n\n----------------------------------------\n\nTITLE: Running Actions on Sub-Pipeline in GStreamer\nDESCRIPTION: Executes specified actions on a sub scenario/pipeline. Requires pipeline name and allows optional action specification and timing parameters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_37\n\nLANGUAGE: validate-scenario\nCODE:\n```\nrun-on-sub-pipeline,\n    pipeline-name=((string)),\n    [action=([structures])],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Setting Android NDK Root Environment Variable (Bash)\nDESCRIPTION: Exports the `ANDROID_NDK_ROOT` environment variable, setting its value to the path stored in the `ANDROID_NDK` variable (usually set by the Cerbero shell). This variable points to the location of the Android Native Development Kit, which is essential for building native Android code.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-good/ext/qt/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport ANDROID_NDK_ROOT=$ANDROID_NDK\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GStreamer Pipeline State Changes for Live Sources\nDESCRIPTION: This snippet illustrates how live sources behave during state changes in a GStreamer pipeline. It shows that live sources return NO_PREROLL when transitioning to the PAUSED state, indicating they cannot produce data while paused.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/live-source.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nA live source therefore only produces buffers in the `PLAYING` state. This\nhas implications for sinks waiting for a buffer to complete the preroll\nstate since such a buffer might never arrive.\n\nLive sources return `NO_PREROLL` when going to the `PAUSED` state to inform\nthe bin/pipeline that this element will not be able to produce data in\nthe `PAUSED` state. `NO_PREROLL` should be returned for both `READY→PAUSED`\nand `PLAYING→PAUSED`.\n```\n\n----------------------------------------\n\nTITLE: Implementing Periodic UI Refresh Function\nDESCRIPTION: Function that updates the UI elements based on the current state of the GStreamer pipeline. It queries the current playback position and duration, then updates the slider position accordingly.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n/* This function is called periodically to refresh the GUI */\nstatic gboolean refresh_ui (CustomData *data) {\n  gint64 current = -1;\n\n  /* We do not want to update anything unless we are in the PAUSED or PLAYING states */\n  if (data->state < GST_STATE_PAUSED)\n    return TRUE;\n\n```\n\n----------------------------------------\n\nTITLE: Same Caps In-Place Transform Flow\nDESCRIPTION: ASCII diagram showing the buffer flow for in-place transformation when caps are identical.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/element-transform.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n              sinkpad              transform               srcpad\n      chain()    |                    |                      |\n    ------------>|   handle_buffer()  |                      |\n                 |------------------->|                      |\n                 |                    |   [!writable]        |\n                 |                    |   alloc buffer       |\n                 |                  .-|                      |\n                 |  <transform_ip>  | |                      |\n                 |                  '>|                      |\n                 |                    |      pad_push()      |\n                 |                    |--------------------->|\n                 |                    |                      |\n```\n\n----------------------------------------\n\nTITLE: Basic GStreamer Pipeline Validation Examples\nDESCRIPTION: Examples of using gst-validate-1.0 for simple playback and transcoding pipeline validation\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/validate/docs/validate-usage.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Simple playback pipeline\ngst-validate-1.0 playbin uri=file:///path/to/some/media/file\n\n# Transcoding pipeline\ngst-validate-1.0 filesrc location=/root/Videos/big_buck_bunny_1080p_h264.mov ! \\\n      qtdemux name=d ! queue ! x264enc ! h264parse ! mpegtsmux name=m ! progressreport ! filesink location=/root/test.ts \\\n      d. ! queue ! faac ! m.\n```\n\n----------------------------------------\n\nTITLE: Implementing a GStreamer Filter Chain Function with Data Processing in C\nDESCRIPTION: This snippet shows a more advanced `_chain` function implementation (`gst_my_filter_chain`). It calls a separate function (`gst_my_filter_process_data`) to handle the actual data manipulation, takes ownership of the input buffer (`buf`) and unrefs it after processing. It checks the result of the processing function, signals an error (`GST_ELEMENT_ERROR`) if processing failed (returned NULL), and pushes the resulting output buffer (`outbuf`) downstream. This pattern separates data processing logic from the core GStreamer buffer handling.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/basics/chainfn.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic GstFlowReturn\ngst_my_filter_chain (GstPad    *pad,\n             GstObject *parent,\n             GstBuffer *buf)\n{\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n  GstBuffer *outbuf;\n\n  outbuf = gst_my_filter_process_data (filter, buf);\n  gst_buffer_unref (buf);\n  if (!outbuf) {\n    /* something went wrong - signal an error */\n    GST_ELEMENT_ERROR (GST_ELEMENT (filter), STREAM, FAILED, (NULL), (NULL));\n    return GST_FLOW_ERROR;\n  }\n\n  return gst_pad_push (filter->srcpad, outbuf);\n}\n```\n\n----------------------------------------\n\nTITLE: Server Certificate Generation and Launch\nDESCRIPTION: Commands to generate a self-signed certificate and start the WebSocket server for development purposes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/webrtc/signalling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ./generate_cert.sh\n$ ./simple_server.py\n```\n\n----------------------------------------\n\nTITLE: Querying a GStreamer Element with gst-inspect (Shell)\nDESCRIPTION: This command uses the `gst-inspect` tool to display detailed information about the GStreamer element named 'mad'. It requires GStreamer and the specific element to be installed. The output includes factory details, plugin information, pad templates, element properties, and more, similar to the example output provided for 'osssink'.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/programs.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngst-inspect mad\n\n```\n\n----------------------------------------\n\nTITLE: Looping Back AJA Input to Output on Same Card with GStreamer (Shell)\nDESCRIPTION: This `gst-launch-1.0` pipeline demonstrates capturing 1080p30 audio/video from AJA channel 1 (`ajasrc`), demuxing the streams (`ajasrcdemux`), queuing them, and then directly outputting them back to AJA channel 0 (`ajasink`) on the same card using `ajasinkcombiner`. The `reference-source=input-1` option likely helps synchronize the output.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/sys/aja/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngst-launch-1.0 ajasrc video-format=1080p-3000 channel=1 input-source=sdi-1 audio-system=2 ! ajasrcdemux name=d \\\n    d.video ! queue max-size-bytes=0 max-size-buffers=0 max-size-time=1000000000 ! c.video \\\n    d.audio ! queue max-size-bytes=0 max-size-buffers=0 max-size-time=1000000000 ! c.audio \\\n    ajasinkcombiner name=c ! ajasink channel=0 reference-source=input-1\n```\n\n----------------------------------------\n\nTITLE: Copy-on-Write Implementation\nDESCRIPTION: Implementation of copy-on-write mechanism for single-reffed relationships.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nLOCK (object1);\nobject2 = object1->pointer;\nobject2 = _copy_on_write (object2);\n... make modifications to object2 ...\nUNLOCK (object1);\n```\n\n----------------------------------------\n\nTITLE: Building gstqmlgl Plugin with qmake and MinGW make on Windows (Bash)\nDESCRIPTION: Runs `qmake` to generate Makefiles suitable for the MinGW environment, followed by `mingw32-make` (the MinGW version of `make`) to compile and link the `gstqmlgl` plugin. This is executed within the plugin's directory from a Qt MinGW developer command prompt after ensuring the `GSTREAMER_PATH` is correctly set in `qmlplugin.pro`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-good/ext/qt/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nqmake \nmingw32-make\n```\n\n----------------------------------------\n\nTITLE: Running Simple Playback Pipeline with GstValidate\nDESCRIPTION: Demonstrates how to use gst-validate to test a simple playback pipeline using the playbin element to play a media file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngst-validate-1.0 playbin uri=file:///path/to/some/media/file\n```\n\n----------------------------------------\n\nTITLE: Parsing Allocation Pool Query in GStreamer\nDESCRIPTION: C structure representing the pool configuration returned by the allocation query. Used with gst_query_parse_nth_allocation_pool() to extract pool details.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/bufferpool.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct {\n    GstBufferPool *pool;\n    guint          size;\n    guint          min_buffers;\n    guint          max_buffers;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Qt GStreamer Player Class Interface in C++\nDESCRIPTION: This snippet declares the Player class interface for a Qt widget-based video player utilizing GStreamer. It specifies the class’s core slots (play, pause, stop, setVolume), signals (positionChanged, stateChanged), and private helper methods for handling GStreamer bus messages and pipeline state changes. QGst and Qt types are leveraged, requiring both GStreamer Qt bindings and Qt’s core libraries as dependencies. The interface supports encapsulating playback control and communication into a reusable widget.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nQGst::State state() const;\n \npublic Q_SLOTS:\n    void play();\n    void pause();\n    void stop();\n    void setVolume(int volume);\n \nQ_SIGNALS:\n    void positionChanged();\n    void stateChanged();\n \nprivate:\n    void onBusMessage(const QGst::MessagePtr &message);\n    void handlePipelineStateChange(const QGst::StateChangedMessagePtr &scm);\n \n    QGst::PipelinePtr m_pipeline;\n    QTimer m_positionTimer;\n};\n \n#endif //PLAYER_H\n```\n\n----------------------------------------\n\nTITLE: Starting GStreamer Pipelines\nDESCRIPTION: Initiates playback by setting both pipelines to the Playing state.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/using-appsink-appsrc-in-qt.md#2025-04-23_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n /* start playing */\n    pipeline1->setState(QGst::StatePlaying);\n    pipeline2->setState(QGst::StatePlaying);\n```\n\n----------------------------------------\n\nTITLE: ARGB64_BE Format Specification in GStreamer\nDESCRIPTION: Defines the ARGB64_BE format with alpha channel first, using 16 bits per channel in big-endian byte order. Includes pixel layout diagram and detailed component specifications for R, G, B, and A channels with their respective depth, stride, and offset values.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_58\n\nLANGUAGE: text\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\n       |A0|R0|G0|B0| |A1|R1|G1|B1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           16 BE\n          pstride:         8\n          offset:          2\n\n        Component 1: G\n          depth            16 BE\n          pstride:         8\n          offset:          4\n\n        Component 2: B\n          depth:           16 BE\n          pstride:         8\n          offset:          6\n\n        Component 3: A\n          depth:           16 BE\n          pstride:         8\n          offset:          0\n\n        Image\n          default rstride: width * 8\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Printing Element-Wise Latency Statistics in GStreamer (Shell)\nDESCRIPTION: Configures the latency tracer with an element-level reporting flag to display processing latencies for each GStreamer pipeline element. The GST_TRACERS variable includes latency(flags=element); GST_DEBUG enables detailed output. Input is a representative audio pipeline; output is per-element latency logs. Requires the latency tracer and gst-launch-1.0.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nGST_DEBUG=\\\"GST_TRACER:7\\\" GST_TRACERS=\\\"latency(flags=element)\\\" gst-launch-1.0 \\\\\naudiotestsrc num-buffers=10 ! audioconvert ! volume volume=0.7 ! \\\\\nautoaudiosink\n```\n\n----------------------------------------\n\nTITLE: Retrieving Buffer Metadata\nDESCRIPTION: Demonstrates how to retrieve timing metadata from a buffer using the metadata info.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/meta.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nGstMetaTiming *timing;\n\ntiming = gst_buffer_get_meta (buffer, GST_META_TIMING_INFO);\n```\n\n----------------------------------------\n\nTITLE: Listing GStreamer pkg-config Libraries (Bash)\nDESCRIPTION: Demonstrates using `pkg-config` piped to `grep` to list all available GStreamer libraries installed on the system. This helps developers identify the correct library names needed to retrieve compiler and linker flags for building applications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/gst/building.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npkg-config --list-all | grep gstreamer\n```\n\n----------------------------------------\n\nTITLE: Defining NV12_64Z32 Planar 4:2:0 YUV Format in GStreamer\nDESCRIPTION: Specifies the component structure for NV12_64Z32, a planar 4:2:0 YUV format with interleaved UV plane in 64x32 tiles zigzag. It details the depth, stride, offset, and size calculations for Y, U, and V components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_46\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU128 (width)\n          default size:    rstride (component0) * RU32 (height)\n\n        Component 1: U\n          depth            8\n          pstride:         2\n          default offset:  size (component0)\n          default rstride: (y_tiles << 16) | x_tiles\n          default x_tiles: RU128 (width) >> tile_width\n          default y_tiles: RU32 (height) >> tile_height\n\n        Component 2: V\n          depth:           8\n          pstride:         2\n          default offset:  offset (component1) + 1\n          default rstride: (y_tiles << 16) | x_tiles\n          default x_tiles: RU128 (width) >> tile_width\n          default y_tiles: RU64 (height) >> (tile_height + 1)\n\n        Image\n          default size: RU128 (width) * (RU32 (height) + RU64 (height) / 2)\n          tile mode:    ZFLIPZ_2X2\n          tile width:   6\n          tile height:  5\n```\n\n----------------------------------------\n\nTITLE: Using gst_object_get_name Function in GStreamer C\nDESCRIPTION: Shows how to access an object's name using the gst_object_get_name function, which handles locking internally.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/MT-refcounting.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nname = gst_object_get_name (object);\n\n... use name ...\n\ng_free (name);\n```\n\n----------------------------------------\n\nTITLE: Defining GstStreamType Enum in C\nDESCRIPTION: Defines an enumeration for different types of streams in GStreamer, including unknown, audio, video, container, and text types.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-selection.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum {\n  GST_STREAM_TYPE_UNKNOWN   = 1 << 0,\n  GST_STREAM_TYPE_AUDIO     = 1 << 1,\n  GST_STREAM_TYPE_VIDEO     = 1 << 2,\n  GST_STREAM_TYPE_CONTAINER = 1 << 3,\n  GST_STREAM_TYPE_TEXT      = 1 << 4\n} GstStreamType;\n```\n\n----------------------------------------\n\nTITLE: Declaring GstStream Struct in C\nDESCRIPTION: Declares a struct for GstStream objects, which contain information about a possible data stream in GStreamer. The struct includes a stream_id field.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-selection.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct {\n\tconst gchar *stream_id;\n} GstStream;\n```\n\n----------------------------------------\n\nTITLE: Finalizing Native Surface and GStreamer State on Surface Destruction in C\nDESCRIPTION: This function, gst_native_surface_finalize, is called via JNI when the Android surface is about to be destroyed. It retrieves custom data, instructs the GStreamer video sink (if available) to stop using the window handle by setting it to NULL via gst_video_overlay_set_window_handle, transitions the pipeline to the READY state, releases the ANativeWindow reference using ANativeWindow_release, nullifies the stored window pointer, and marks GStreamer as uninitialized.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nstatic void gst_native_surface_finalize (JNIEnv *env, jobject thiz) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  GST_DEBUG (\"Releasing Native Window %p\", data->native_window);\n\n  if (data->video_sink) {\n    gst_video_overlay_set_window_handle (GST_VIDEO_OVERLAY (data->video_sink), (guintptr)NULL);\n    gst_element_set_state (data->pipeline, GST_STATE_READY);\n  }\n\n  ANativeWindow_release (data->native_window);\n  data->native_window = NULL;\n  data->initialized = FALSE;\n}\n```\n\n----------------------------------------\n\nTITLE: Including GStreamer Header without SDK Templates (C)\nDESCRIPTION: Illustrates how to include the main GStreamer header file (`gst.h`) in an iOS project when not utilizing the provided GStreamer SDK Xcode templates. This method requires specifying the Framework name ('GStreamer') in the include path, differing from standard Linux usage.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/for-ios-development.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <GStreamer/gst/gst.h>\n```\n\n----------------------------------------\n\nTITLE: Specifying GRAY8 Format in GStreamer\nDESCRIPTION: Defines the structure of the GRAY8 format, an 8-bit grayscale format. It details the component depth, stride, and memory layout. This format is also known as Y800.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           8\n          offset:          0\n          pstride:         1\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * height\n\n        Image\n          default size:    size (component0)\n```\n\n----------------------------------------\n\nTITLE: Listing and Using Cerbero Build Variants - Shell\nDESCRIPTION: Shows how to list available Cerbero build variants and how to enable one or more variants for building GStreamer. The \\\"-v variantname\\\" argument enables a feature set; multiple can be specified via comma separation or repeated flags. Variants add optional or platform-specific features and must be set before the build step.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled --list-variants\\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled -v variantname [-c ...] package gstreamer-1.0\\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled -v variantname1,variantname2 [-c ...] package gstreamer-1.0\\n$ ./cerbero-uninstalled -v variantname1 -v variantname2 [-c ...] package gstreamer-1.0\\n```\n```\n\n----------------------------------------\n\nTITLE: Manually Installing pre-commit Hooks (Bash)\nDESCRIPTION: Manually installs the pre-commit hooks defined in the repository's configuration (`.pre-commit-config.yaml`). This command sets up the hooks to run automatically before each `git commit`. Note that hooks are also installed automatically during the first `meson setup`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/contribute/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: EOS Command in GStreamer Validate Scenario\nDESCRIPTION: Sends an End-Of-Stream (EOS) event to the pipeline at specified playback time.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_8\n\nLANGUAGE: validate-scenario\nCODE:\n```\neos,\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Configuring Meson to Disable Rust Plugins (Shell)\nDESCRIPTION: This shell command demonstrates how to disable the building of Rust plugins when configuring the build with Meson, using the '-D' option to set the 'rs' parameter to 'disabled'. This is used when certain plugins are not needed or Rust dependencies are unavailable. The command expects a valid build directory and may only be used after Meson has initialized the build environment.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmeson -Drs=disabled <build-directory>\n```\n\n----------------------------------------\n\nTITLE: Calculating Processing Time in GStreamer QoS\nDESCRIPTION: Formula for calculating the time taken to generate a buffer using previous and current timestamps.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/qos.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPT1 = T1 - T0\n```\n\n----------------------------------------\n\nTITLE: Running Specific GStreamer Component Tests\nDESCRIPTION: Commands for running tests for specific GStreamer components like core or plugins-base.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-launcher.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-launcher check.gstreamer*\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-launcher check.gst-plugins-base\n```\n\n----------------------------------------\n\nTITLE: Seek Bar Position Update in Java\nDESCRIPTION: Updates the seek bar position and duration, along with the time display widget. Ignores updates while the user is dragging the seek bar.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void setCurrentPosition(final int position, final int duration) {\n    final SeekBar sb = (SeekBar) this.findViewById(R.id.seek_bar);\n    if (sb.isPressed()) return;\n    runOnUiThread (new Runnable() {\n      public void run() {\n        sb.setMax(duration);\n        sb.setProgress(position);\n        updateTimeWidget();\n      }\n    });\n    this.position = position;\n    this.duration = duration;\n}\n```\n\n----------------------------------------\n\nTITLE: Running GStreamer Playback with Auto-Plugging for LCEVC - Shell\nDESCRIPTION: This concise command leverages GStreamer's playbin element along with autoplugging to automatically select and chain the required decoders (including LCEVC, if present) for a media file. The URI parameter specifies the input file. Prerequisites: a GStreamer installation with playbin and the lcevcdec plugin. Output: Media is played back with automatic format detection. Limitation: file must be accessible via the specified URI.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/lcevcdecoder/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ gst-launch-1.0 playbin uri=file:///home/user/lcevc-sample.mp4\n```\n\n----------------------------------------\n\nTITLE: Running Transcoding Pipeline with GstValidate\nDESCRIPTION: Shows how to use gst-validate to test a transcoding pipeline that reads a media file, demuxes it, encodes the video with x264, and writes the output to a transport stream file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngst-validate-1.0 filesrc location=/media/file/location ! qtdemux name=d ! queue \\\n        ! x264enc ! h264parse ! mpegtsmux name=m ! progressreport \\\n        ! filesink location=/root/test.ts d. ! queue ! faac ! m.\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to Personal Fork\nDESCRIPTION: Example of pushing a branch to a personal GitLab fork with output showing merge request creation link\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/contribute/index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git push -u $GITLAB_USERNAME\nEnumerating objects: 4436, done.\nCounting objects: 100% (4436/4436), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (1161/1161), done.\nWriting objects: 100% (3616/3616), 1.47 MiB | 8.12 MiB/s, done.\nTotal 3616 (delta 2973), reused 3022 (delta 2443), pack-reused 0\nremote: Resolving deltas: 100% (2973/2973), completed with 704 local objects.\nremote:\nremote: To create a merge request for fix-xyz, visit:\nremote:   https://gitlab.freedesktop.org/$GITLAB_USERNAME/gstreamer/-/merge_requests/new?merge_request%5Bsource_branch%5D=fix-xyz\nremote:\nTo gitlab.freedesktop.org:$GITLAB_USERNAME/gstreamer.git\n * [new branch]            fix-xyz -> fix-xyz\nBranch 'fix-xyz' set up to track remote branch 'fix-xyz' from '$GITLAB_USERNAME' by rebasing.\n```\n\n----------------------------------------\n\nTITLE: Introspecting GStreamer Plugin Files using gst-inspect\nDESCRIPTION: This command demonstrates how to use gst-inspect to print auto-install information for a GStreamer plugin .so file. It's useful for packagers to understand the capabilities of a plugin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/missing-plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gst-inspect --print-plugin-auto-install-info /path/to/libgstfoo.so\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pipeline Structure Example\nDESCRIPTION: ASCII diagram showing a simple GStreamer pipeline with UDP source, depayloader, audio decoder and audio sink elements connected in sequence. Used to demonstrate streaming thread management.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-status.md#2025-04-23_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n.--------.    .-------.    .------.    .-------.\n| udpsrc |    | depay |    | adec |    | asink |\n|       src->sink    src->sink   src->sink     |\n'--------'    '-------'    '------'    '-------'\n```\n\n----------------------------------------\n\nTITLE: Packaging a Project Using Cerbero-Uninstalled - Bash\nDESCRIPTION: This snippet illustrates how to build the package and all dependencies using Cerbero. The command uses the previously created `.package` file (referred to as `your-package`) to invoke the build process, resulting in finalized distributable packages. Prerequisites include a correctly defined package file and a functioning Cerbero installation. The primary parameter specifies the package name; the build results are output to the working directory. Limitations: Errors can occur if dependencies are not configured correctly.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/multiplatform-using-cerbero.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"./cerbero-uninstalled package your-package\"\n```\n\n----------------------------------------\n\nTITLE: Setting Clip Alpha Property\nDESCRIPTION: Command that adds a clip and sets its transparency level to 30%.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/ges-launch.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nges-launch-1.0 +clip /path/to/media set-alpha 0.3\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Plugins and Dependencies\nDESCRIPTION: Defines the required GStreamer plugins for core functionality, codecs, and networking. Sets up additional dependencies including WebRTC, SDP, video components, and system libraries.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/webrtc/android/app/src/main/jni/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${GSTREAMER_ROOT}/share/cmake\")\n\nset(GSTREAMER_NDK_BUILD_PATH  \"${GSTREAMER_ROOT}/share/gst-android/ndk-build/\")\ninclude(\"${GSTREAMER_NDK_BUILD_PATH}/plugins.cmake\")\nset(GSTREAMER_PLUGINS_CORE_CUSTOM coreelements app audioconvert audiorate audioresample videorate videoconvertscale videotestsrc audiotestsrc volume autodetect)\nset(GSTREAMER_PLUGINS_CODECS_CUSTOM videoparsersbad vpx opus audioparsers opusparse androidmedia)\nset(GSTREAMER_PLUGINS_NET_CUSTOM soup tcp rtsp rtp rtpmanager udp srtp webrtc dtls nice)\nset(GSTREAMER_PLUGINS         ${GSTREAMER_PLUGINS_CORE_CUSTOM} ${GSTREAMER_PLUGINS_CODECS_CUSTOM} ${GSTREAMER_PLUGINS_NET_CUSTOM} ${GSTREAMER_PLUGINS_ENCODING} ${GSTREAMER_PLUGINS_SYS} ${GSTREAMER_PLUGINS_PLAYBACK})\nset(GStreamer_EXTRA_DEPS gstreamer-webrtc-1.0 gstreamer-sdp-1.0 gstreamer-video-1.0 libsoup-3.0 json-glib-1.0 glib-2.0)\nset(G_IO_MODULES openssl)\n```\n\n----------------------------------------\n\nTITLE: appsrc-eos: GStreamer Validation Scenario Action\nDESCRIPTION: Sends an End-Of-Stream (EOS) event to a specified `appsrc` element. Requires the `target-element-name`. Execution can be timed using `playback-time` or triggered by `on-message`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_26\n\nLANGUAGE: validate-scenario\nCODE:\n```\n``` validate-scenario\nappsrc-eos,\n    target-element-name=(string),\n    [playback-time=(double,string)];\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing GstPad Direction Property in C\nDESCRIPTION: Demonstrates how to safely access the 'direction' property of a GstPad object using the appropriate macro and locking mechanism.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/MT-refcounting.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nGST_OBJECT_LOCK (pad);\ndirection = GST_RPAD_DIRECTION (pad);\nGST_OBJECT_UNLOCK (pad);\n```\n\n----------------------------------------\n\nTITLE: GStreamer Clock Method Reference\nDESCRIPTION: Core clock method references used in GStreamer for time management and synchronization, including methods for creating clock IDs and handling notifications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/clocks.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n_get_time()\n_clock_new_single_shot_id()\n_clock_new_periodic_id()\ngst_clock_id_wait()\ngstclock_id_wait_async()\ngst_clock_id_unschedule()\n```\n\n----------------------------------------\n\nTITLE: Video Sink Current Position Calculation\nDESCRIPTION: Formula used by video sink to report current playback position based on clock time, base time, and segment time\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/segments.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ncurrent_position = clock_time - element->base_time + segment_time\n```\n\n----------------------------------------\n\nTITLE: Defining BGRA64_BE Format in GStreamer\nDESCRIPTION: Specifies the component structure for BGRA64_BE, a reverse RGB format with alpha channel last, 16 bits per channel, big-endian. It details the depth, stride, and offset for B, G, R, and A components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_56\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\n       |B0|G0|R0|A0| |B1|G1|R1|A1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           16 BE\n          pstride:         8\n          offset:          4\n\n        Component 1: G\n          depth            16 BE\n          pstride:         8\n          offset:          2\n\n        Component 2: B\n          depth:           16 BE\n          pstride:         8\n          offset:          0\n\n        Component 3: A\n          depth:           16 BE\n          pstride:         8\n          offset:          6\n\n        Image\n          default rstride: width * 8\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Visualizing HLS/DASH Upstream Selection with GStreamer decodebin3 (Initial)\nDESCRIPTION: This ASCII diagram illustrates a GStreamer pipeline configuration for HLS/DASH where `hlsdemux2` handles stream selection upstream. It shows the initial state where `hlsdemux2` outputs video and English audio streams to `decodebin3`, which contains internal elements like `parsebin`, `multiqueue`, and decoders.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-selection.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n  +-----------+               + decodebin3 -----------------------------+\n  | hlsdemux2 |               |                                         |\n  |           |               |             +------------+              |\n  |           +-   `video`   -+-[parsebin]--+ multiqueue +--[videodec]--[\n  |           +- `audio-eng` -+-[parsebin]--+------------+--[audiodec]--[\n  |           |               |                                         |\n  +-----------+               +-----------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom GstMeta Structure and API (GStreamer Meta, C)\nDESCRIPTION: This code creates a custom GstMeta structure named MyExampleMeta, registers its API type, and defines a convenience macro for accessing the metadata on a GstBuffer. Dependencies include gst/gst.h and the standard GType/GObject system. The struct includes an integer and a name string alongside the required GstMeta header. Intended for extending GStreamer buffer metadata, the snippet demonstrates proper pattern for introducing new custom meta types.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n\ntypedef struct _MyExampleMeta MyExampleMeta;\n\nstruct _MyExampleMeta {\n  GstMeta       meta;\n\n  gint          age;\n  gchar        *name;\n};\n\nGType my_example_meta_api_get_type (void);\n#define MY_EXAMPLE_META_API_TYPE (my_example_meta_api_get_type())\n\n#define gst_buffer_get_my_example_meta(b) \\\n  ((MyExampleMeta*)gst_buffer_get_meta((b),MY_EXAMPLE_META_API_TYPE))\n\n```\n\n----------------------------------------\n\nTITLE: Updating UI TextView from Native Code Callback via runOnUiThread (Java)\nDESCRIPTION: This `setMessage` method is designed to be called from native code to display status messages. Since the call originates from a non-UI thread, it uses `runOnUiThread` to safely update the `TextView` (identified by `R.id.textview_message`) on the main UI thread. The message string is passed as a `final` parameter to the `Runnable`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate void setMessage(final String message) {\n    final TextView tv = (TextView) this.findViewById(R.id.textview_message);\n    runOnUiThread (new Runnable() {\n      public void run() {\n      tv.setText(message);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RGBA64_BE Format in GStreamer\nDESCRIPTION: Specifies the component structure for RGBA64_BE, an RGB format with alpha channel last, 16 bits per channel, big-endian. It details the depth, stride, and offset for R, G, B, and A components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_54\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\n       |R0|G0|B0|A0| |R1|G1|B1|A1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           16 BE\n          pstride:         8\n          offset:          0\n\n        Component 1: G\n          depth            16 BE\n          pstride:         8\n          offset:          2\n\n        Component 2: B\n          depth:           16 BE\n          pstride:         8\n          offset:          4\n\n        Component 3: A\n          depth:           16 BE\n          pstride:         8\n          offset:          6\n\n        Image\n          default rstride: width * 8\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Managing Object References in GStreamer 0.10 (C)\nDESCRIPTION: In GStreamer 0.10, functions returning objects or properties (like `gst_element_get_pad()` or `gst_pad_get_name()`) return a new reference owned by the caller, unlike the constant reference in 0.8. This change enhances thread safety. Callers must now free or unreference these returned objects using appropriate functions like `g_free()` for strings or `gst_object_unref()` for GstObject derivatives. Using `g_object_ref()`/`g_object_unref()` directly on GstObjects is incorrect; use `gst_object_ref()`/`gst_object_unref()` instead.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/porting.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ngst_element_get_pad ()\n```\n\nLANGUAGE: C\nCODE:\n```\ngst_pad_get_name ()\n```\n\nLANGUAGE: C\nCODE:\n```\ngst_object_ref()\n```\n\nLANGUAGE: C\nCODE:\n```\ngst_object_unref()\n```\n\nLANGUAGE: C\nCODE:\n```\ng_object_ref\n```\n\nLANGUAGE: C\nCODE:\n```\ng_object_unref\n```\n\n----------------------------------------\n\nTITLE: Modifying Metadata Values\nDESCRIPTION: Shows how to modify timing metadata fields after obtaining a reference.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/meta.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\ntiming->timestamp = 0;\ntiming->duration = 20 * GST_MSECOND;\n```\n\n----------------------------------------\n\nTITLE: Starting and Using the GStreamer Development Environment (Shell)\nDESCRIPTION: These shell snippets demonstrate how to set up and enter the GStreamer development environment. The commands use the project'\\'s environment helper script (gst-env.py) or build tools (Ninja, Meson) to initialize the required build environment. Prerequisites include having Meson and Ninja installed and properly configured, and access to the gstreamer source repository. Inputs are executed in a shell with the appropriate project paths; outputs are newly initialized environments prepared for development. Some commands require the 'build' directory to be generated by Meson prior to use.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./gst-env.py\n```\n\nLANGUAGE: shell\nCODE:\n```\nninja -C build devenv\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeson devenv\n```\n\n----------------------------------------\n\nTITLE: Using Playbin for Easy Media Playback in GStreamer\nDESCRIPTION: Demonstrates the use of the playbin element for simplified media playback from various sources.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 playbin3 uri=file:///home/joe/foo.avi\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 playbin3 uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\n```\n\n----------------------------------------\n\nTITLE: Updating Playback Position Indicator\nDESCRIPTION: Queries and updates the current playback position, displaying it as either '>' or 'X' depending on buffering status.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/progressive-streaming.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nif (gst_element_query_position (data->pipeline, GST_FORMAT_TIME, &position) &&\n    GST_CLOCK_TIME_IS_VALID (position) &&\n    gst_element_query_duration (data->pipeline, GST_FORMAT_TIME, &duration) &&\n    GST_CLOCK_TIME_IS_VALID (duration)) {\n  i = (gint)(GRAPH_LENGTH * (double)position / (double)(duration + 1));\n  graph [i] = data->buffering_level < 100 ? 'X' : '>';\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Element Switching Pipeline\nDESCRIPTION: ASCII diagram depicting the pipeline structure for dynamically switching elements in a running pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/probes.md#2025-04-23_snippet_7\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n .----------.      .----------.      .----------.\n | element1 |      | element2 |      | element3 |\n...        src -> sink       src -> sink       ...\n '----------'      '----------'      '----------'\n                   .----------.\n                   | element4 |\n                  sink       src\n                   '----------'\n```\n\n----------------------------------------\n\nTITLE: Defining GstQueryBufferingRange Struct in GStreamer\nDESCRIPTION: This code snippet defines the GstQueryBufferingRange struct used in buffering queries. It contains start and stop positions for downloaded areas in a specific format.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/buffering.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct\n{\n  gint64 start;\n  gint64 stop;\n} GstQueryBufferingRange;\n```\n\n----------------------------------------\n\nTITLE: disable-plugin: GStreamer Validation Scenario Action\nDESCRIPTION: Disables a specified GStreamer plugin by name. Requires `plugin-name`. If `as-config` is true (default false), the action executes during scenario loading. Otherwise, execution can be timed using `playback-time` or triggered by `on-message`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_29\n\nLANGUAGE: validate-scenario\nCODE:\n```\n``` validate-scenario\ndisable-plugin,\n    plugin-name=(string),\n    [as-config=(boolean)],\n    [playback-time=(double,string)];\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies via pip (Shell)\nDESCRIPTION: This shell command utilizes Python 3's pip module to install packages specified in the `requirements.txt` file. The `-r requirements.txt` flag tells pip to install packages from the given file, and the `--user` flag installs them into the user's site-packages directory, avoiding the need for root permissions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-python/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install -r requirements.txt --user\n```\n\n----------------------------------------\n\nTITLE: Stop Command in GStreamer Validate Scenario\nDESCRIPTION: Stops the scenario execution by posting a 'request-state' message with NULL state. The application is responsible for stopping itself.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_7\n\nLANGUAGE: validate-scenario\nCODE:\n```\nstop,\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Enabling Documentation Build in Meson\nDESCRIPTION: Defines a Meson feature option 'doc' to control whether project documentation is built. Defaults to 'auto'. 'yield: true' likely propagates this setting to subprojects.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_18\n\nLANGUAGE: meson\nCODE:\n```\noption('doc', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable documentation.')\n```\n\n----------------------------------------\n\nTITLE: Buffer Size Transform Function Declaration\nDESCRIPTION: Function declaration for transform_size() that calculates buffer size transformations between pads with different caps. This is the preferred method for size transformation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/element-transform.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ntransform_size()\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Message Handler in Objective-C\nDESCRIPTION: Method to convert GStreamer C strings (UTF8) to NSString and display them through the UI delegate. Includes delegate existence checking for optional implementation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-running-pipeline.md#2025-04-23_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n-(void)setUIMessage:(gchar*) message\n{\n    NSString *string = [NSString stringWithUTF8String:message];\n    if(ui_delegate && [ui_delegate respondsToSelector:@selector(gstreamerSetUIMessage:)])\n    {\n        [ui_delegate gstreamerSetUIMessage:string];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Template Caps Example for DMA Buffer Source\nDESCRIPTION: Example showing static template capabilities for a source element that can enumerate DRM fourcc/modifier compositions at register time. Demonstrates format specifications including width, height, and various drm-format options.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/dmabuf.md#2025-04-23_snippet_2\n\nLANGUAGE: gstreamer\nCODE:\n```\nSRC template: 'src'\n    Availability: Always\n      Capabilities:\n        video/x-raw(memory:DMABuf)\n          width:  [ 16, 16384 ]\n          height: [ 16, 16384 ]\n          format: DMA_DRM\n          drm-format: { (string)NV12:0x0100000000000001, \\\n                        (string)YU12, (string)YV12, \\\n                        (string)YUYV:0x0100000000000002, \\\n                        (string)P010:0x0100000000000002, \\\n                        (string)AR24:0x0100000000000002, \\\n                        (string)AB24:0x0100000000000002, \\\n                        (string)AR39:0x0100000000000002, \\\n                        (string)AYUV:0x0100000000000002 }\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Storage System Dependencies on Linux (Shell)\nDESCRIPTION: This shell snippet uses apt-get to install essential system packages and libraries for building Google Cloud Storage C++ dependencies. Required libraries include cmake, libcurl, libgrpc++, and protobuf tooling. Inputs are OS package repositories; outputs are installed development dependencies for subsequent library builds. Requires sudo permissions, Debian-based Linux, and network connectivity.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/gs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install \\\n    cmake \\\n    libcurl3-gnutls-dev \\\n    libgrpc++-dev \\\n    libprotobuf-dev \\\n    protobuf-compiler-grpc \\\n    flex bison pkg-config \\\n    curl\n```\n\n----------------------------------------\n\nTITLE: Queuing URI for Asynchronous Discovery\nDESCRIPTION: Adds a URI to the discovery queue for asynchronous processing\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n/* Add a request to process asynchronously the URI passed through the command line */\nif (!gst_discoverer_discover_uri_async (data.discoverer, uri)) {\n  g_print (\"Failed to start discovering URI '%s'\\n\", uri);\n  g_object_unref (data.discoverer);\n  return -1;\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pull Mode API Call\nDESCRIPTION: Function call used to pull data from a pad in GStreamer's pull mode negotiation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/negotiation.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ngst_pad_pull_range()\n```\n\n----------------------------------------\n\nTITLE: GStreamer Media Check Command\nDESCRIPTION: Example of using gst-validate-media-check-1.0 for media file analysis\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/validate/docs/validate-usage.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-media-check-1.0 file://path/to/some/media/file\n```\n\n----------------------------------------\n\nTITLE: Building and Installing LCEVC Decoder SDK - Shell\nDESCRIPTION: This sequence of commands sets up a local build directory, configures the build system using CMake with the Ninja generator and custom install prefix, compiles the SDK, and installs it. It assumes the environment variables $BUILD_DIR and $INSTALL_DIR are set to valid local paths. Requires CMake and Ninja. Inputs: custom paths; Output: SDK installed to $INSTALL_DIR. Limitations: assumes compatible platform and toolchain are present.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/lcevcdecoder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir $BUILD_DIR\n$ cd $BUILD_DIR\n$ cmake  -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR ..\n$ cmake --build .\n$ cmake --install .\n```\n\n----------------------------------------\n\nTITLE: Defining GLib Debug Feature Option in Meson\nDESCRIPTION: Defines a Meson build option named 'glib_debug' of type 'feature'. It defaults to 'auto', yields its value for subprojects, and includes a description referencing further documentation. This option enables the GLib debugging infrastructure, useful during development.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_7\n\nLANGUAGE: meson\nCODE:\n```\noption('glib_debug', type : 'feature', value : 'auto', yield : true, description : 'Enable GLib debug infrastructure (see docs/macros.txt)')\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Peer Pad in GStreamer C\nDESCRIPTION: Shows how to correctly obtain and use a peer pad while managing its reference count and thread-safety.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/MT-refcounting.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nGST_OBJECT_LOCK (pad);\npeer = GST_RPAD_PEER (pad);\nif (peer)\n  gst_object_ref (GST_OBJECT (peer));\nGST_OBJECT_UNLOCK (pad);\n... use peer ...\n\nif (peer)\n  gst_object_unref (GST_OBJECT (peer));\n```\n\n----------------------------------------\n\nTITLE: Creating a GhostPad with a Target in C\nDESCRIPTION: This function creates a new GhostPad with a specified name and target pad. It sets up the internal structure and links the GhostPad to the target.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstghostpad.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngst_ghost_pad_new (char *name, GstPad *target)\n```\n\n----------------------------------------\n\nTITLE: Calculating Next Buffer Timestamp in GStreamer QoS\nDESCRIPTION: Mathematical derivation and final formula for predicting the next accurate buffer timestamp in the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/qos.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nB2 =  B1 + 2 * J1 + D1\n```\n\n----------------------------------------\n\nTITLE: Inspecting Dynamic Library Dependencies on macOS using otool\nDESCRIPTION: This command uses the `otool` utility with the `-L` flag to list the dependent dynamic libraries and their recorded paths for the specified GStreamer executable (`gst-launch-1.0`). This is used to illustrate how macOS records full paths, which can prevent relocation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/mac-osx.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ otool -L /Library/Frameworks/GStreamer.framework/Commands/gst-launch-1.0\n/Library/Frameworks/GStreamer.framework/Commands/gst-launch-1.0:\n /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 550.43.0)\n /Library/Frameworks/GStreamer.framework/Versions/0.10/x86/lib/libgstreamer-1.0.0.dylib (compatibility version 31.0.0, current version 31.0.0)\n /Library/Frameworks/GStreamer.framework/Versions/0.10/x86/lib/libxml2.2.dylib (compatibility version 10.0.0, current version 10.8.0)\n...\n```\n\n----------------------------------------\n\nTITLE: Editing GES Container Action Syntax with validate-scenario\nDESCRIPTION: Defines the syntax for editing a GES container (like a GESClip). This action allows repositioning, changing edit modes, specifying edges, and setting layer priorities. The timeline will be committed and flushed to apply the changes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_0\n\nLANGUAGE: validate-scenario\nCODE:\n```\nedit-container,\n    [playback-time=(double,string)],\n    container-name=(string),\n    position=(double or string),\n    [edit-mode=(string)],\n    [edge=(string)],\n    [new-layer-priority=(int)];\n```\n\n----------------------------------------\n\nTITLE: Building with Ninja and the -C Option (Shell)\nDESCRIPTION: This snippet demonstrates building the project from any directory using Ninja’s '-C' option to specify the build directory. It is useful for users who want to build without changing their working directory. Requires a previous Meson configuration and assumes ‘<\\/path\\/to\\/build_directory>’ is correct. All build artifacts are produced in the specified directory.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nninja -C </path/to/build_directory>\n```\n\n----------------------------------------\n\nTITLE: Updating GStreamer-Sharp to a New GStreamer Version\nDESCRIPTION: Commands to update GStreamer-Sharp to work with a new version of GStreamer by updating .gir files and regenerating code.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer-sharp/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nninja -C build update-all\n```\n\nLANGUAGE: bash\nCODE:\n```\nninja -C build gstreamer-sharp@@update-all\n```\n\n----------------------------------------\n\nTITLE: Enumerating Supported Audio Formats in GStreamer\nDESCRIPTION: This snippet lists all the supported audio format strings for the format property in GStreamer's audio/x-raw media type. It includes various PCM formats with different bit depths and endianness, as well as floating-point formats.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-audio-raw.md#2025-04-23_snippet_2\n\nLANGUAGE: plain text\nCODE:\n```\n## Formats\n\nThe following values can be used for the format string property.\n\n - \"S8\" 8-bit signed PCM audio\n - \"U8\" 8-bit unsigned PCM audio\n\n - \"S16LE\" 16-bit signed PCM audio\n - \"S16BE\" 16-bit signed PCM audio\n - \"U16LE\" 16-bit unsigned PCM audio\n - \"U16BE\" 16-bit unsigned PCM audio\n\n - \"S24\\_32LE\" 24-bit signed PCM audio packed into 32-bit\n - \"S24\\_32BE\" 24-bit signed PCM audio packed into 32-bit\n - \"U24\\_32LE\" 24-bit unsigned PCM audio packed into 32-bit\n - \"U24\\_32BE\" 24-bit unsigned PCM audio packed into 32-bit\n\n - \"S32LE\" 32-bit signed PCM audio\n - \"S32BE\" 32-bit signed PCM audio\n - \"U32LE\" 32-bit unsigned PCM audio\n - \"U32BE\" 32-bit unsigned PCM audio\n\n - \"S24LE\" 24-bit signed PCM audio\n - \"S24BE\" 24-bit signed PCM audio\n - \"U24LE\" 24-bit unsigned PCM audio\n - \"U24BE\" 24-bit unsigned PCM audio\n\n - \"S20LE\" 20-bit signed PCM audio\n - \"S20BE\" 20-bit signed PCM audio\n - \"U20LE\" 20-bit unsigned PCM audio\n - \"U20BE\" 20-bit unsigned PCM audio\n\n - \"S18LE\" 18-bit signed PCM audio\n - \"S18BE\" 18-bit signed PCM audio\n - \"U18LE\" 18-bit unsigned PCM audio\n - \"U18BE\" 18-bit unsigned PCM audio\n\n - \"F32LE\" 32-bit floating-point audio\n - \"F32BE\" 32-bit floating-point audio\n - \"F64LE\" 64-bit floating-point audio\n - \"F64BE\" 64-bit floating-point audio\n```\n\n----------------------------------------\n\nTITLE: Handling Window Creation and Notifications for GstVideoOverlay in C\nDESCRIPTION: Illustrates how a GStreamer element implementing `GstVideoOverlay` manages window creation and notification. It shows a function `gst_my_filter_window_create` which creates a window and notifies the application using `gst_video_overlay_got_window_handle`. It also shows how `gst_video_overlay_prepare_window_handle` is typically called within a sink CAPS event handler (`gst_my_filter_sink_set_caps`) before potentially creating or using a window handle.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/interfaces.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic MyFilterWindow *\ngst_my_filter_window_create (GstMyFilter *my_filter, gint width, gint height)\n{\n  MyFilterWindow *window = g_new (MyFilterWindow, 1);\n  ...\n  gst_video_overlay_got_window_handle (GST_VIDEO_OVERLAY (my_filter), window->win);\n}\n\n/* called from the event handler for CAPS events */\nstatic gboolean\ngst_my_filter_sink_set_caps (GstMyFilter *my_filter, GstCaps *caps)\n{\n  gint width, height;\n  gboolean ret;\n  ...\n  ret = gst_structure_get_int (structure, \"width\", &width);\n  ret &= gst_structure_get_int (structure, \"height\", &height);\n  if (!ret) return FALSE;\n\n  gst_video_overlay_prepare_window_handle (GST_VIDEO_OVERLAY (my_filter));\n\n  if (!my_filter->window)\n    my_filter->window = gst_my_filter_create_window (my_filter, width, height);\n\n  ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: GStreamer Mode Constants\nDESCRIPTION: Constants used to specify pad activation modes in GStreamer\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/activation.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#GST_PAD_MODE_PUSH\n#GST_PAD_MODE_PULL\n```\n\n----------------------------------------\n\nTITLE: GstObject Function Reference\nDESCRIPTION: Core function references for managing GstObject parent-child relationships\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstobject.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n_set_parent()`, `_get_parent()`, and `_unparent()\n```\n\n----------------------------------------\n\nTITLE: Implementing Push-mode Negotiation in GStreamer\nDESCRIPTION: This code snippet demonstrates a possible implementation of push-mode negotiation in GStreamer. It shows how to select and negotiate caps when an element wants to create a buffer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/negotiation.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n[element wants to create a buffer]\nif not format\n  # see what we can do\n  ourcaps = gst_pad_query_caps (srcpad)\n  # see what the peer can do filtered against our caps\n  candidates = gst_pad_peer_query_caps (srcpad, ourcaps)\n\n  foreach candidate in candidates\n    # make sure the caps is fixed\n    fixedcaps = gst_pad_fixate_caps (srcpad, candidate)\n\n    # see if the peer accepts it\n    if gst_pad_peer_accept_caps (srcpad, fixedcaps)\n      # store the caps as the negotiated caps, this will\n      # call the setcaps function on the pad\n      gst_pad_push_event (srcpad, gst_event_new_caps (fixedcaps))\n      break\n    endif\n  done\nendif\n```\n\n----------------------------------------\n\nTITLE: Defining GStreamer Text Format Types\nDESCRIPTION: Definition of text format types in GStreamer's media type system, specifying UTF-8 and Pango markup formats. The format property is mandatory and defined as a G_TYPE_STRING.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-text-raw.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**format**, `G_TYPE_STRING`: Mandatory. The format of the text. See the\\nFormats section for a list of valid format strings.\\n\\n- \"utf8\": plain timed utf8 text (formerly text/plain)\\n  Parsed timed text in utf8 format.\\n\\n- \"pango-markup\": plain timed utf8 text with pango markup\\n  (formerly text/x-pango-markup). Same as \"utf8\", but text embedded in an\\n  XML-style markup language for size, colour, emphasis, etc.\n```\n\n----------------------------------------\n\nTITLE: Configuring Expected Issues in GStreamer Validation YAML\nDESCRIPTION: Example configuration showing how to specify expected issues in GStreamer validation tests using GstStructure syntax. The example demonstrates declaring an expected issue for a scenario that hasn't ended properly.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/validate/gst/validate/doc/meta-expected-issues.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexpected-issues = {\n    \"expected-issue, issue-id=scenario::not-ended\",\n}\n```\n\n----------------------------------------\n\nTITLE: Building or Rebuilding a Single Recipe Only - Shell\nDESCRIPTION: Builds only the specified recipe (not its dependencies) or forces a rebuild if previously built. Use-case: rapid development/testing or debugging a single recipe.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled buildone <recipe_name>\\n```\n```\n\n----------------------------------------\n\nTITLE: Ripping CD Tracks to MP3 with GStreamer\nDESCRIPTION: Shows how to rip all tracks or a specific track from a CD and convert them to MP3 format.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 cdparanoiasrc mode=continuous ! audioconvert ! lamemp3enc ! mpegaudioparse ! xingmux ! id3v2mux ! filesink location=cd.mp3\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 cdparanoiasrc track=5 ! audioconvert ! lamemp3enc ! mpegaudioparse ! xingmux ! id3v2mux ! filesink location=track5.mp3\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 cdda://5 ! lamemp3enc vbr=new vbr-quality=6 ! xingmux ! id3v2mux ! filesink location=track5.mp3\n```\n\n----------------------------------------\n\nTITLE: Serializing GES Project Action Syntax\nDESCRIPTION: Defines the syntax for serializing a GES project to a specified URI. This allows saving the current state of an editing project to a file for later use.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_7\n\nLANGUAGE: validate-scenario\nCODE:\n```\nserialize-project,\n    [playback-time=(double,string)],\n    uri=(string);\n```\n\n----------------------------------------\n\nTITLE: Deprecated: Enabling GObject Cast Checks in Meson\nDESCRIPTION: Defines a deprecated Meson feature option 'gobject-cast-checks' for enabling runtime GObject cast checks. It's now superseded by 'glib_debug'. Kept for backward compatibility.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_22\n\nLANGUAGE: meson\nCODE:\n```\n# Deprecated, kept for backward compat\noption('gobject-cast-checks', type : 'feature', value : 'auto', yield : true,\n       description: 'Enable run-time GObject cast checks (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_debug')\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata Convenience Macro\nDESCRIPTION: Creates a convenience macro for simplified metadata access.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/meta.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#define gst_buffer_get_meta_timing(b) \\\n   ((GstMetaTiming *) gst_buffer_get_meta ((b), GST_META_TIMING_INFO)\n```\n\n----------------------------------------\n\nTITLE: Defining Media Width and Height in the View Controller Extension\nDESCRIPTION: Extension of the ViewController class that defines private properties for tracking the media dimensions that will be used for aspect ratio calculations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/video.md#2025-04-23_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n@interface ViewController () {\n    GStreamerBackend *gst_backend;\n    int media_width;\n    int media_height;\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Audio Output Plugin\nDESCRIPTION: Command to verify the installation of an audio output plugin (pulsesink example)\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/using.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngst-inspect-1.0 pulsesink\n```\n\n----------------------------------------\n\nTITLE: Installing GStreamer and Plugins on Fedora using dnf\nDESCRIPTION: Installs the GStreamer core library, development files, base tools, documentation, various plugin sets (base, good, ugly, bad-free) and their development files on Fedora distributions using the `dnf` package manager. Requires superuser (root) privileges.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-linux.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndnf install gstreamer1-devel gstreamer1-plugins-base-tools gstreamer1-doc gstreamer1-plugins-base-devel gstreamer1-plugins-good gstreamer1-plugins-good-extras gstreamer1-plugins-ugly gstreamer1-plugins-bad-free gstreamer1-plugins-bad-free-devel gstreamer1-plugins-bad-free-extras\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Layer Composited Timeline\nDESCRIPTION: Command that creates a timeline with two overlapping clips on different layers with alpha transparency.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/ges-launch.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nges-launch-1.0 +clip /path/to/media1 layer=1 set-alpha 0.9 +clip /path/to/media2 layer=0\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pipeline Example with DMA Buffer\nDESCRIPTION: Example pipeline showing connection between vapostproc and glupload elements using DMA buffer caps filter.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/dmabuf.md#2025-04-23_snippet_3\n\nLANGUAGE: gstreamer\nCODE:\n```\nvapostproc ! video/x-raw(memory:DMABuf) ! glupload\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a QtGStreamer Application - C++\nDESCRIPTION: This C++ 'main.cpp' file provides the program entry point, initializing both the Qt application and the QtGStreamer environment, then launching the MediaApp UI. It optionally auto-opens a media file passed via command-line. Relies on QtWidgets (QApplication), QtGStreamer (QGst::init), and the implementation of MediaApp. Key parameters are argc (argument count) and argv (argument vector), for application control and possible file opening. Returns Qt application exit code.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include \"mediaapp.h\"\\n#include <QtWidgets/QApplication>\\n#include <QGst/Init>\\nint main(int argc, char *argv[])\\n{\\n    QApplication app(argc, argv);\\n    QGst::init(&argc, &argv);\\n    MediaApp media;\\n    media.show();\\n    if (argc == 2) {\\n        media.openFile(argv[1]);\\n    }\\n    return app.exec();\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring License-Related and Core Build Feature Options (Python)\nDESCRIPTION: Implements feature options in Meson to control license constraints and core build attributes such as native language support, orc optimization, and build testing. The 'gpl' option must be enabled to build plugins that depend on GPL-licensed code. Options use type 'feature' and the 'yield' flag to propagate values during subproject configurations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-ugly/meson_options.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noption('gpl', type: 'feature', value: 'disabled', yield: true,\n  description: 'Allow build plugins that have GPL-licensed dependencies')\n\noption('nls', type : 'feature', value : 'auto', yield: true,\n       description : 'Enable native language support (translations)')\noption('orc', type : 'feature', value : 'auto', yield : true)\noption('tests', type : 'feature', value : 'auto', yield : true)\n```\n\n----------------------------------------\n\nTITLE: Calculating New In-Point after Trimming Start - Plaintext\nDESCRIPTION: Shows the mathematical formula for computing a child element's new in-point when trimming the start of a GES clip earlier on the timeline, maintaining temporal alignment of content. Assumes the existence of a function F mapping timeline deltas to internal times, and relates original and trimmed start/in-point positions. No programming dependencies are required as this is explanatory documentation, and the formula is subject to failure if the argument would exceed content bounds.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nnew-in-point = old-in-point - F (old-start - new-start)\n```\n\n----------------------------------------\n\nTITLE: GStreamer App Main Function\nDESCRIPTION: Main function that initializes and runs the GStreamer pipeline in a separate thread. Sets up the GLib main loop, creates pipeline, configures bus signals, and handles cleanup.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nstatic void *app_function (void *userdata) {\n  JavaVMAttachArgs args;\n  GstBus *bus;\n  CustomData *data = (CustomData *)userdata;\n  GSource *timeout_source;\n  GSource *bus_source;\n  GError *error = NULL;\n  guint flags;\n\n  data->context = g_main_context_new ();\n  g_main_context_push_thread_default(data->context);\n\n  data->pipeline = gst_parse_launch(\"playbin\", &error);\n  if (error) {\n    gchar *message = g_strdup_printf(\"Unable to build pipeline: %s\", error->message);\n    g_clear_error (&error);\n    set_ui_message(message, data);\n    g_free (message);\n    return NULL;\n  }\n\n  /* Pipeline setup and signal connection code omitted for brevity */\n\n  return NULL;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default GESEffectRegistry in C\nDESCRIPTION: This function returns a newly created GESEffectRegistry or the existing one, increasing its reference count. It's designed to be a singleton to ensure only one registry instance exists per application.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/effects.txt#2025-04-23_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nGESEffectRegistry *\nges_registry_get_default (void);\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Latency for Blocking Buffering in GStreamer (C)\nDESCRIPTION: This code shows how to calculate the maximum latency for an element with blocking buffering in a GStreamer pipeline, considering both upstream and element-specific maximum latencies.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/latency.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nif (upstream_max_latency == NONE || own_max_latency == NONE)\n  max_latency = NONE;\nelse\n  max_latency = upstream_max_latency + own_max_latency;\n```\n\n----------------------------------------\n\nTITLE: Playing MP3 Audio with GStreamer\nDESCRIPTION: Uses GStreamer to play an MP3 file using libmpg123-based plugin and outputs to PulseAudio or PipeWire.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=music.mp3 ! mpegaudioparse ! mpg123audiodec ! audioconvert ! audioresample ! pulsesink\n```\n\n----------------------------------------\n\nTITLE: Tracing Buffer Flow, Events and Messages at TRACE Level (Shell)\nDESCRIPTION: Enables detailed logging for GStreamer tracing and pipeline object types by setting multiple GST_DEBUG categories to TRACE (level 7) and activating the log tracer module. Requires the GStreamer core and tracer plugins. Input is a gst-launch-1.0 pipeline command; output is verbose trace logs including buffer/event/message handling at TRACE level, aiding in deep debugging or performance analysis.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nGST_DEBUG=\\\"GST_TRACER:7,GST_BUFFER*:7,GST_EVENT:7,GST_MESSAGE:7\\\" \\\\\nGST_TRACERS=log gst-launch-1.0 fakesrc num-buffers=10 ! fakesink\n```\n\n----------------------------------------\n\nTITLE: Copying GStreamer Framework to App Bundle\nDESCRIPTION: Command to copy the GStreamer framework into an application's Frameworks folder for private deployment.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/mac-osx.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp -r /Library/Frameworks/GStreamer.framework ~/MyApp.app/Contents/Frameworks\n```\n\n----------------------------------------\n\nTITLE: Validating Project Loading from Serialized Content - Validate-Scenario, Plaintext\nDESCRIPTION: Defines a 'load-project' scenario for initializing a GES project via full XML content, cleaning any previous timeline before loading. Used to automate and test project loading in GES, it takes an optional playback-time and a required serialized-content parameter expected to be in XGES format. Relies on GStreamer validate-scenario processing and correct XML formatting as input.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nload-project,\n    [playback-time=(double,string)],\n    serialized-content;\n```\n\n----------------------------------------\n\nTITLE: Documenting RGBx Packed RGB Format Layout (Markdown, Plaintext)\nDESCRIPTION: This documentation block describes the RGBx format where RGB data is packed into 32 bits with a spare/unused byte (positioned last). The component arrangement, per-channel bit depth, stride, and offset are detailed, aiding memory mapping, buffer parsing, or pixel manipulation in graphics or video pipelines requiring RGBx buffers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |R0|G0|B0|X | |R1|G1|B1|X | ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: R\\n          depth:           8\\n          pstride:         4\\n          offset:          0\\n\\n        Component 1: G\\n          depth:           8\\n          pstride:         4\\n          offset:          1\\n\\n        Component 2: B\\n          depth            8\\n          pstride:         4\\n          offset:          2\\n\\n        Image\\n          default rstride: width * 4\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Forcing Code Regeneration While Hacking\nDESCRIPTION: Command to force code regeneration when modifying the code generator or .metadata files in the GStreamer-Sharp project.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer-sharp/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nninja update-code\n```\n\n----------------------------------------\n\nTITLE: GStreamer C Integration with Android Surface\nDESCRIPTION: The C code header section for the GStreamer implementation on Android. It includes necessary imports for JNI, Android native window handling, and GStreamer video functionality.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <string.h>\n#include <stdint.h>\n#include <jni.h>\n#include <android/log.h>\n#include <android/native_window.h>\n#include <android/native_window_jni.h>\n#include <gst/gst.h>\n#include <gst/video/video.h>\n#include <pthread.h>\n\nGST_DEBUG_CATEGORY_STATIC (debug_category);\n#define GST_CAT_DEFAULT debug_category\n\n/*\n * These macros provide a way to store the native pointer to CustomData, which might be 32 or 64 bits, into\n * a jlong, which is always 64 bits, without warnings.\n */\n#if GLIB_SIZEOF_VOID_P == 8\n# define GET_CUSTOM_DATA(env, thiz, fieldID) (CustomData *)(*env)->GetLongField (env, thiz, fieldID)\n# define SET_CUSTOM_DATA(env, thiz, fieldID, data) (*env)->SetLongField (env, thiz, fieldID, (jlong)data)\n#else\n# define GET_CUSTOM_DATA(env, thiz, fieldID) (CustomData *)(jint)(*env)->GetLongField (env, thiz, fieldID)\n```\n\n----------------------------------------\n\nTITLE: Initializing JNI Environment for GStreamer Android Integration\nDESCRIPTION: Functions for registering the current thread with the Java VM, retrieving the JNI environment, and managing thread attachment and detachment. These are essential for JNI operations in a multi-threaded environment.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nstatic JNIEnv *attach_current_thread (void) {\n  JNIEnv *env;\n  JavaVMAttachArgs args;\n\n  GST_DEBUG (\"Attaching thread %p\", g_thread_self ());\n  args.version = JNI_VERSION_1_4;\n  args.name = NULL;\n  args.group = NULL;\n\n  if ((*java_vm)->AttachCurrentThread (java_vm, &env, &args) < 0) {\n    GST_ERROR (\"Failed to attach current thread\");\n    return NULL;\n  }\n\n  return env;\n}\n\nstatic void detach_current_thread (void *env) {\n  GST_DEBUG (\"Detaching thread %p\", g_thread_self ());\n  (*java_vm)->DetachCurrentThread (java_vm);\n}\n\nstatic JNIEnv *get_jni_env (void) {\n  JNIEnv *env;\n\n  if ((env = pthread_getspecific (current_jni_env)) == NULL) {\n    env = attach_current_thread ();\n    pthread_setspecific (current_jni_env, env);\n  }\n\n  return env;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GStreamerBackend in Objective-C\nDESCRIPTION: The init method sets up the GStreamerBackend instance, storing the UI delegate and starting the bus monitoring task asynchronously. It also initializes GStreamer debugging.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-running-pipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\n-(id) init:(id) uiDelegate\n{\n    if (self = [super init])\n    {\n        self->ui_delegate = uiDelegate;\n\n        GST_DEBUG_CATEGORY_INIT (debug_category, \"tutorial-2\", 0, \"iOS tutorial 2\");\n        gst_debug_set_threshold_for_name(\"tutorial-2\", GST_LEVEL_DEBUG);\n\n        /* Start the bus monitoring task */\n        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n            [self app_function];\n        });\n    }\n\n    return self;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Media Clip to Timeline\nDESCRIPTION: Basic command to add a media file to the timeline and play it from beginning to end.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/ges-launch.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nges-launch-1.0 +clip /path/to/media\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Analysis within Callback\nDESCRIPTION: Starts the `analyze_streams` function, which is called when the GStreamer pipeline reaches the PLAYING state. It declares local variables for tags and strings, then retrieves the number of video, audio, and text streams available in the media by querying the respective 'n-video', 'n-audio', and 'n-text' properties of the `playbin` element using `g_object_get`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n/* Extract some metadata from the streams and print it on the screen */\nstatic void analyze_streams (CustomData *data) {\n  gint i;\n  GstTagList *tags;\n  gchar *str;\n  guint rate;\n\n  /* Read some properties */\n  g_object_get (data->playbin, \"n-video\", &data->n_video, NULL);\n  g_object_get (data->playbin, \"n-audio\", &data->n_audio, NULL);\n  g_object_get (data->playbin, \"n-text\", &data->n_text, NULL);\n```\n\n----------------------------------------\n\nTITLE: GStreamer State Change Callback Handler\nDESCRIPTION: Callback function that handles GStreamer pipeline state changes and updates the UI accordingly. Handles transitions between Ready and Paused states and executes scheduled seeks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nstatic void state_changed_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  GstState old_state, new_state, pending_state;\n  gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n  if (GST_MESSAGE_SRC (msg) == GST_OBJECT (data->pipeline)) {\n    data->state = new_state;\n    gchar *message = g_strdup_printf(\"State changed to %s\", gst_element_state_get_name(new_state));\n    set_ui_message(message, data);\n    g_free (message);\n    if (old_state == GST_STATE_READY && new_state == GST_STATE_PAUSED) {\n      check_media_size(data);\n      if (GST_CLOCK_TIME_IS_VALID (data->desired_position))\n        execute_seek (data->desired_position, data);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Size Management Functions in C\nDESCRIPTION: Functions for retrieving and modifying memory size properties including offset and maximum size.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/memory.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ngsize gst_memory_get_sizes (GstMemory *mem, gsize *offset, gsize *maxsize);\n```\n\nLANGUAGE: c\nCODE:\n```\nvoid  gst_memory_resize (GstMemory *mem, gssize offset, gsize size);\n```\n\n----------------------------------------\n\nTITLE: Listing Packages Available for Building - Shell\nDESCRIPTION: Lists all packages supported by Cerbero for building. Useful for developers to determine buildable components. The environment must be correctly set up with Cerbero installed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled list-packages\\n```\n```\n\n----------------------------------------\n\nTITLE: Sink Pad Event Handling in GStreamer\nDESCRIPTION: Function call for sending events to sink pads. Calls the pad's event function and stores successful sticky events.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/events.md#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ngst_pad_send_event()\n```\n\n----------------------------------------\n\nTITLE: Example Cerbero Recipe Definition for Pitivi in Python\nDESCRIPTION: Provides a complete example of a Cerbero recipe class for the Pitivi video editor. It inherits from `recipe.Recipe` and defines attributes like name, version, license, dependencies (`deps`), source repository (`remotes`), build configuration (`config_sh`, `configure_options`), commit reference, and lists of files to be included in various package categories (`files_libs`, `files_bins`, `files_lang`, etc.). This demonstrates a practical application of the recipe attributes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/multiplatform-using-cerbero.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Recipe(recipe.Recipe):\n    name = 'pitivi'\n    version = '0.95'\n    licenses = [License.GPLv2Plus]\n    remotes = {'origin': 'git://git.gnome.org/pitivi'}\n    config_sh = 'sh ./autogen.sh --noconfigure && ./configure'\n    configure_options = \"--disable-help\"\n    commit = 'origin/master'\n    deps = ['gst-editing-services-1.0',\n            'gst-python-1.0',\n            'gst-libav-1.0',\n            'gst-plugins-bad-1.0',\n            'gst-plugins-ugly-1.0',\n            'gst-transcoder',\n            'numpy',\n            'matplotlib',\n            'gnome-icon-theme',\n            'gnome-icon-theme-symbolic',\n            'shared-mime-info'] # brings in gtk+\n\n    files_libs = ['libpitivi-1.0']\n    files_typelibs = [\n        'Pitivi-1.0',\n    ]\n    use_system_libs = True\n    files_bins = ['pitivi']\n    files_lang = ['pitivi']\n    files_pitivi = ['lib/pitivi/python/pitivi',\n                    'share/pitivi/',\n                    'share/applications/pitivi.desktop']\n```\n\n----------------------------------------\n\nTITLE: Generating Test Streams with GStreamer\nDESCRIPTION: Shows how to generate null streams, sine tones, and test patterns for diagnostic purposes using GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 -v fakesrc num-buffers=16 ! fakesink silent=false\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 audiotestsrc ! audioconvert ! audioresample ! osssink\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 videotestsrc ! ximagesink\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 videotestsrc ! xvimagesink\n```\n\n----------------------------------------\n\nTITLE: Setting Control Source in GStreamer\nDESCRIPTION: Command to add a GstControlSource to an element property for keyframe control.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_15\n\nLANGUAGE: validate-scenario\nCODE:\n```\nset-control-source,\n    [playback-time=(double,string)],\n    element-name=(string),\n    property-name=(string),\n    [binding-type=(string)],\n    [source-type=(string)],\n    [interpolation-mode=(string)];\n```\n\n----------------------------------------\n\nTITLE: Defining GstPlay Network Test Option in Meson\nDESCRIPTION: This Meson option definition controls whether GstPlay tests requiring network access are enabled during the build. It's a boolean option named 'gst_play_tests' and defaults to 'false'.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('gst_play_tests', type: 'boolean', value: false,\n       description: 'Enable GstPlay tests that need network access')\n```\n\n----------------------------------------\n\nTITLE: Defining GstTagCache Interface Functions in C\nDESCRIPTION: Defines two function prototypes for a GstTagCache interface. These functions allow loading and storing tag data associated with a URI in a cache.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/draft-tagreading.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGstTagList *gst_tag_cache_load_tag_data (GstTagCache *self, const gchar *uri);\ngst_tag_cache_store_tag_data (GstTagCache *self, const gchar *uri, GstTagList *tags);\n```\n\n----------------------------------------\n\nTITLE: Declaring Meson Build Option for External Library (Python)\nDESCRIPTION: Defines a string-type build option in Meson for specifying additional x264 library paths, allowing customization via a colon-separated list, e.g., to support 10-bit x264 builds. Requires Meson build system and is used to adjust library search paths during GStreamer compilation. The option accepts a colon-separated string and defaults to an empty value if unspecified.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-ugly/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\noption('x264_libraries', type : 'string', value : '',\n       description : 'Colon separated list of additional x264 library paths, e.g. for 10-bit version')\n```\n\n----------------------------------------\n\nTITLE: Safe Object Access in Single-Reffed Relations\nDESCRIPTION: Implementation showing how to safely access objects in a single-reffed relationship.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nLOCK (object1);\nobject2 = object1->pointer;\n_ref (object2);\nUNLOCK (object1);\n\n… use object2 …\n_unref (object2);\n```\n\n----------------------------------------\n\nTITLE: Compiling GStreamer C Code with Clang and pkg-config\nDESCRIPTION: These shell commands illustrate compiling and linking the sample GStreamer C application (`main.c`) using `pkg-config` to automatically retrieve necessary compiler and linker flags. It requires setting the `PKG_CONFIG_PATH` and `PATH` environment variables to point to the GStreamer framework's `pkg-config` tool and its configuration files. The `pkg-config --cflags gstreamer-1.0` and `pkg-config --libs gstreamer-1.0` commands provide the required flags to `clang`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-mac-osx.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Tell pkg-config where to find the .pc files\n$ export PKG_CONFIG_PATH=/Library/Frameworks/GStreamer.framework/Versions/1.0/lib/pkgconfig\n\n# We will use the pkg-config provided by the GStreamer.framework\n$ export PATH=/Library/Frameworks/GStreamer.framework/Versions/1.0/bin:$PATH\n\n# Compile\n$ clang -c main.c -o main.o `pkg-config --cflags gstreamer-1.0`\n\n# Link\n$ clang -o main main.o `pkg-config --libs gstreamer-1.0`\n```\n\n----------------------------------------\n\nTITLE: Setting GST_DEBUG with Wildcards and Named Levels - Bash\nDESCRIPTION: Demonstrates setting GST_DEBUG in Bash with wildcards for flexible matching of categories and use of named debug levels instead of numbers. Useful for enabling debug output for many elements at once (e.g., all audio-related or all outputs). Requires GStreamer and Bash; supports wildcards ('*') in category names and string log level names (INFO, LOG, etc.).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nGST_DEBUG=*sink:6,*audio*:6\n```\n\nLANGUAGE: bash\nCODE:\n```\nGST_DEBUG=*audio*:LOG\n```\n\n----------------------------------------\n\nTITLE: Adding Clips to GES Timeline Action Syntax\nDESCRIPTION: Defines the syntax for adding a new clip to a given layer in the GES timeline. Requires specifying clip properties including name, layer priority, asset ID, and clip type. Optionally supports setting start time, inpoint, and duration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_5\n\nLANGUAGE: validate-scenario\nCODE:\n```\nadd-clip,\n    [playback-time=(double,string)],\n    name=(string),\n    layer-priority=(int),\n    asset-id=(string),\n    type=(string),\n    [start=(double or string)],\n    [inpoint=(double or string)],\n    [duration=(double or string)];\n```\n\n----------------------------------------\n\nTITLE: Creating Ghost Pads in GStreamer Bins\nDESCRIPTION: This code creates ghost pads for a GStreamer bin. Ghost pads expose internal element pads on the bin's surface, allowing external connections. It obtains a pad from an internal element, creates a ghost pad linked to it, activates it, and adds it to the bin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/custom-playbin-sinks.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\npad = gst_element_get_static_pad (equalizer, \"sink\");\nghost_pad = gst_ghost_pad_new (\"sink\", pad);\ngst_pad_set_active (ghost_pad, TRUE);\ngst_element_add_pad (bin, ghost_pad);\ngst_object_unref (pad);\n```\n\n----------------------------------------\n\nTITLE: Raising a Warning When a Leak is Detected (Shell)\nDESCRIPTION: Activates the leaks tracer and runs a simple GStreamer video pipeline to detect and report memory/object leaks. GST_TRACERS=leaks instructs the core to log leaks, and warnings are raised if tracked objects are not destroyed at application exit. Ideal for identifying memory management issues. Outputs leak warnings based on resource lifetime analysis.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nGST_TRACERS=\\\"leaks\\\" gst-launch-1.0 videotestsrc num-buffers=10 ! \\\\\nfakesink\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing ONNX Runtime Source Bash Script (shell)\nDESCRIPTION: This shell snippet automates cloning the ONNX Runtime repository at tag v1.16.3 with all its submodules, and sets up a new build directory. It requires Git and a working Bash environment. The code expects the SRC_DIR and BUILD_DIR environment variables to define your source and build locations, and prepares the directory structure prior to compilation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/onnx/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd $SRC_DIR\\n$ git clone --recursive https://github.com/microsoft/onnxruntime.git && cd onnxruntime && git checkout -b v1.16.3 refs/tags/v1.16.3\\n$ mkdir $BUILD_DIR/onnxruntime && cd $BUILD_DIR/onnxruntime\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Child Properties in GES Elements Action Syntax\nDESCRIPTION: Defines the syntax for changing a child property of a GES object. This allows modifying specific properties of timeline elements by specifying the element name, property name, and the new value.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_8\n\nLANGUAGE: validate-scenario\nCODE:\n```\nset-child-property,\n    [playback-time=(double,string)],\n    element-name=(string),\n    property=(string),\n    value=(gvalue);\n```\n\n----------------------------------------\n\nTITLE: Creating Bins in GStreamer Pipeline with gst-launch Syntax\nDESCRIPTION: Demonstrates how to create bins (nested container elements) in a GStreamer pipeline using gst-launch syntax. Parentheses are used to group elements into a bin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/programs.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n( ... )\n```\n\n----------------------------------------\n\nTITLE: Setting Timed Value Properties using Control Bindings - GStreamer - validate-scenario\nDESCRIPTION: Configures property values on elements/pads at precise timestamps via GStreamer control binding infrastructure. Mandatory 'timestamp' specifies when to set properties; various optional parameters allow selection of binding type, interpolation, and playback-time. Properties are defined as element[.pad]::property=value. Intended to automate parameter curves or time-based changes in the pipeline during tests.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_18\n\nLANGUAGE: validate-scenario\nCODE:\n```\nset-timed-value-properties,\\n    timestamp=(string or float (GstClockTime)),\\n    [binding-type=(string)],\\n    [interpolation-mode=(string)],\\n    [source-type=(string)],\\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Specifying pkg-config File for GStreamer Base Plugins\nDESCRIPTION: Identifies the pkg-config file (`.pc`) used to retrieve compiler (`cflags`) and linker (`libs`) flags for the GStreamer base plugins. The `{{ gst_api_version.md }}` placeholder must be replaced with the actual GStreamer API version.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/docs/libs/video/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngstreamer-plugins-base-{{ gst_api_version.md }}.pc\n```\n\n----------------------------------------\n\nTITLE: Initializing GStreamerBackend Class in Objective-C\nDESCRIPTION: Defines the GStreamerBackend class interface and implementation, including instance variables for pipeline management and UI interaction. Sets up debug categories and initializes the backend with a UI delegate and video view.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/video.md#2025-04-23_snippet_4\n\nLANGUAGE: Objective-C\nCODE:\n```\n@interface GStreamerBackend()\n-(void)setUIMessage:(gchar*) message;\n-(void)app_function;\n-(void)check_initialization_complete;\n@end\n\n@implementation GStreamerBackend {\n    id ui_delegate;        /* Class that we use to interact with the user interface */\n    GstElement *pipeline;  /* The running pipeline */\n    GstElement *video_sink;/* The video sink element which receives VideoOverlay commands */\n    GMainContext *context; /* GLib context used to run the main loop */\n    GMainLoop *main_loop;  /* GLib main loop */\n    gboolean initialized;  /* To avoid informing the UI multiple times about the initialization */\n    UIView *ui_video_view; /* UIView that holds the video */\n}\n\n-(id) init:(id) uiDelegate videoView:(UIView *)video_view\n{\n    if (self = [super init])\n    {\n        self->ui_delegate = uiDelegate;\n        self->ui_video_view = video_view;\n\n        GST_DEBUG_CATEGORY_INIT (debug_category, \"tutorial-3\", 0, \"iOS tutorial 3\");\n        gst_debug_set_threshold_for_name(\"tutorial-3\", GST_LEVEL_DEBUG);\n\n        /* Start the bus monitoring task */\n        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n            [self app_function];\n        });\n    }\n\n    return self;\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer Synchronization Time Calculation\nDESCRIPTION: Formulas showing how to calculate the absolute time when a buffer should be played based on running time and base time.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/synchronisation.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nB.sync_time = B.running_time + base_time\n```\n\n----------------------------------------\n\nTITLE: Describing IYU1 Packed 4:1:1 YUV Format in Plaintext\nDESCRIPTION: The IYU1 format documentation details a packed 4:1:1 YUV arrangement with atypical bit-depth assignments (Y=8b, U/V=5b). The snippet describes offsets and strides for each component within this packed format, along with the overall image stride and buffer size formula. The intent is to enable correct buffer allocation and pixel parsing in GStreamer-based processing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_39\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+ +--+--+--+\n       |B0|G0|R0| |B1|G1|R1| ...\n       +--+--+--+ +--+--+--+\n\n        Component 0: Y\n          depth:           8\n          offset:          1\n          pstride:         2\n\n        Component 1: U\n          depth            5\n          offset:          0\n          pstride:         2\n\n        Component 2: V\n          depth:           5\n          offset:          4\n          pstride:         2\n\n        Image\n          default rstride: RU4 (RU4 (width) + RU4 (width) / 2)\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Copying pkg-config File using Shell\nDESCRIPTION: This command moves the manually created lcevc_eil.pc pkg-config metadata file into the /usr/local/lib/pkgconfig directory. This step enables downstream build tools to detect the LCEVC SDK using pkg-config. The -v flag reports the file operation result.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/lcevcencoder/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cp -v lcevc_eil.pc /usr/local/lib/pkgconfig\n```\n\n----------------------------------------\n\nTITLE: Android.mk Build Configuration\nDESCRIPTION: NDK build configuration file for GStreamer Android project. Specifies module properties, dependencies, and required GStreamer plugins.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE    := tutorial-2\nLOCAL_SRC_FILES := tutorial-2.c\nLOCAL_SHARED_LIBRARIES := gstreamer_android\nLOCAL_LDLIBS := -llog\ninclude $(BUILD_SHARED_LIBRARY)\n\nifndef GSTREAMER_ROOT\nifndef GSTREAMER_ROOT_ANDROID\n$(error GSTREAMER_ROOT_ANDROID is not defined!)\nendif\nGSTREAMER_ROOT        := $(GSTREAMER_ROOT_ANDROID)\nendif\nGSTREAMER_NDK_BUILD_PATH  := $(GSTREAMER_ROOT)/share/gst-android/ndk-build/\ninclude $(GSTREAMER_NDK_BUILD_PATH)/plugins.mk\nGSTREAMER_PLUGINS         := $(GSTREAMER_PLUGINS_CORE) $(GSTREAMER_PLUGINS_SYS)\ninclude $(GSTREAMER_NDK_BUILD_PATH)/gstreamer-1.0.mk\n```\n\n----------------------------------------\n\nTITLE: Applying Desired Playback State After GStreamer Initialization (Java)\nDESCRIPTION: Inside the `onGStreamerInitialized` callback (called from native code), this block checks the `is_playing_desired` flag (which reflects the user's last action or the restored state). It then calls either `nativePlay()` or `nativePause()` JNI methods accordingly to set the GStreamer pipeline to the correct state now that the native layer is confirmed to be ready.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Restore previous playing state\nif (is_playing_desired) {\n    nativePlay();\n} else {\n    nativePause();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GstMiniObject Structure in C\nDESCRIPTION: Example showing how to define a custom structure that inherits from GstMiniObject by including it as the first field.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/miniobject.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct {\n  GstMiniObject mini_object;\n\n  /* my fields */\n  ...\n} MyObject\n```\n\n----------------------------------------\n\nTITLE: Using GstIterator for Concurrent List Access in GStreamer C\nDESCRIPTION: Shows how to use GstIterator to safely iterate over a list in a concurrent environment, handling potential list modifications and rollbacks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/MT-refcounting.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nit = _get_iterator(object);\nwhile (!done) {\n    switch (gst_iterator_next (it, &item)) {\n    case GST_ITERATOR_OK:\n\n        ... use/change item here...\n\n        /* release item here */\n        gst_object_unref (item);\n    break;\n    case GST_ITERATOR_RESYNC:\n        /* handle rollback caused by concurrent modification\n    * of the list here */\n\n    ...rollback changes to items...\n\n    /* resync iterator to start again */\n    gst_iterator_resync (it);\n    break;\n    case GST_ITERATOR_DONE:\n    done = TRUE;\n    break;\n    }\n}\ngst_iterator_free (it);\n```\n\n----------------------------------------\n\nTITLE: Managing Git Remotes for GStreamer and Subprojects (Shell)\nDESCRIPTION: These shell code snippets illustrate how to add a new personal git remote to both the main gstreamer repository and a gstreamer subproject. Necessary dependencies include git installed in the shell environment and access to the target repositories. The first snippet adds a new remote to the main repository, while the second performs similar steps within a subproject directory. Both use 'git remote add' to register the remote and 'git fetch' to update its references. These commands require appropriate permissions and valid git URLs.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add personal git@gitlab.freedesktop.org:awesomehacker/gstreamer.git\ngit fetch\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd subprojects/gstreamer/\ngit remote add personal git@gitlab.freedesktop.org:awesomehacker/gstreamer.git\ngit fetch\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in Config\nDESCRIPTION: Example demonstrates how to set variables in the config file by using the set-vars parameter.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-config.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncore, set-vars=true, log-path=$(CONFIG_DIR/../log)\n```\n\n----------------------------------------\n\nTITLE: appsink-forward-to-appsrc: GStreamer Validation Scenario Action\nDESCRIPTION: Forwards samples and optionally EOS events from a specified `appsink` element (`sink`) to a specified `appsrc` element (`src`). Requires both `sink` and `src` names. The `forward-eos` parameter (default true) controls EOS forwarding. Execution can be timed using `playback-time` or triggered by `on-message`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_27\n\nLANGUAGE: validate-scenario\nCODE:\n```\n``` validate-scenario\nappsink-forward-to-appsrc,\n    sink=(string),\n    src=(string),\n    [forward-eos=(bool)],\n    [playback-time=(double,string)];\n```\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Google Cloud Storage C++ Libraries with CMake (Shell)\nDESCRIPTION: This comprehensive shell script block automates downloading, building, and installing several C++ dependencies for Google Cloud Storage interaction. It covers clone/extract, optional source patching, and CMake compilation steps for crc32c, abseil-cpp, nlohmann/json, and google-cloud-cpp. Prerequisites are Linux shell, required compilers, cmake, Ninja, installed system dependencies, and environment variables. Outputs are the built and installed libraries in defined directories for later development or deployment.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/gs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport cmake_prefix=/usr/local\n\nmkdir crc32c\ncd crc32c\ncurl -sSL https://github.com/google/crc32c/archive/1.1.2.tar.gz | \\\n    tar -xzf - --strip-components=1\ncmake -S . -B build \\\n    -GNinja \\\n    -DCMAKE_INSTALL_PREFIX:PATH=$cmake_prefix \\\n    -DCMAKE_INSTALL_LIBDIR:PATH=lib \\\n    -DBUILD_SHARED_LIBS=YES \\\n    -DCRC32C_USE_GLOG=NO \\\n    -DCRC32C_BUILD_TESTS=NO \\\n    -DCRC32C_BUILD_BENCHMARKS=NO\ncmake --build build --target install\ncd ..\n\nmkdir abseil-cpp\ncd abseil-cpp\ncurl -sSL https://github.com/abseil/abseil-cpp/archive/20220623.2.tar.gz | \\\n    tar -xzf - --strip-components=1 && \\\n    sed -i 's/^#define ABSL_OPTION_USE_\\(.*\\) 2/#define ABSL_OPTION_USE_\\1 0/' \"absl/base/options.h\"\ncmake -S . -B build \\\n    -GNinja \\\n    -DBUILD_TESTING=NO \\\n    -DCMAKE_INSTALL_PREFIX:PATH=$cmake_prefix \\\n    -DCMAKE_INSTALL_LIBDIR:PATH=lib \\\n    -DBUILD_SHARED_LIBS=YES\ncmake --build build --target install\ncd ..\n\n# Nlohman/json\nmkdir json\ncd json\ncurl -sSL https://github.com/nlohmann/json/archive/v3.10.4.tar.gz | \\\n    tar -xzf - --strip-components=1\ncmake \\\n      -DCMAKE_BUILD_TYPE=Release \\\n      -DBUILD_SHARED_LIBS=yes \\\n      -DJSON_BuildTests=OFF \\\n      -H. -Bcmake-out/nlohmann/json && \\\n    cmake --build cmake-out/nlohmann/json --target install -- -j ${NCPU} && \\\n    ldconfig\ncd ..\n\nmkdir google-cloud-cpp\ncd google-cloud-cpp\ncurl -sSL https://github.com/googleapis/google-cloud-cpp/archive/v2.6.0.tar.gz | \\\n   tar --strip-components=1 -zxf -\ncmake -S . -B build \\\n    -GNinja \\\n    -DCMAKE_BUILD_TYPE=Debug \\\n    -DCMAKE_CXX_STANDARD=14 \\\n    -DCMAKE_INSTALL_PREFIX:PATH=$cmake_prefix \\\n    -DCMAKE_INSTALL_LIBDIR:PATH=lib \\\n    -DBUILD_SHARED_LIBS=YES \\\n    -DBUILD_TESTING=NO \\\n    -DGOOGLE_CLOUD_CPP_ENABLE=storage\ncmake --build build --target install -- -v\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Adding a Video Effect to a Clip\nDESCRIPTION: Command that adds an aging TV effect to a media clip in the timeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/ges-launch.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nges-launch-1.0 +clip /path/to/media +effect \"agingtv\"\n```\n\n----------------------------------------\n\nTITLE: Removing Clips from GES Timeline Action Syntax\nDESCRIPTION: Defines the syntax for removing a clip from the GES timeline by specifying its name. This allows removing specific clips without affecting other timeline elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_6\n\nLANGUAGE: validate-scenario\nCODE:\n```\nremove-clip,\n    [playback-time=(double,string)],\n    name=(string);\n```\n\n----------------------------------------\n\nTITLE: Playing MP3 from SMB Server using GIO\nDESCRIPTION: Demonstrates how to use GIO to play an MP3 file located on an SMB server.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 giosrc location=smb://computer/music.mp3 ! mpegaudioparse ! mpg123audiodec ! audioconvert ! audioresample ! pulsesink\n```\n\n----------------------------------------\n\nTITLE: Documenting UYVY Packed YUV Format Layout (Markdown, Plaintext)\nDESCRIPTION: This code block describes the UYVY packed 4:2:2 YUV video format, illustrating the interleaving order with an ASCII block diagram and summarizing component depth, stride, and offset. Useful for developers implementing buffer read/write or conversion for the UYVY format in video playback or filtering. Stride and offset info enables precise memory access for each color channel.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |U0|Y0|V0|Y1| |U2|Y2|V2|Y3| ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: Y\\n          depth:           8\\n          pstride:         2\\n          offset:          1\\n\\n        Component 1: U\\n          depth:           8\\n          pstride:         4\\n          offset:          0\\n\\n        Component 2: V\\n          depth            8\\n          pstride:         4\\n          offset:          2\\n\\n        Image\\n          default rstride: RU4 (width * 2)\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Inspecting Executable Dependencies with otool (pkg-config Link)\nDESCRIPTION: This shell command uses `otool -L` to inspect the dynamic library dependencies of the `main` executable compiled using the `pkg-config` method. The output shows direct dependencies on specific GStreamer libraries (like `libgstreamer-1.0.0.dylib`) found via `@rpath`, rather than linking against the umbrella framework itself.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-mac-osx.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ otool -L main\nmain:\n        @rpath/libgstreamer-1.0.0.dylib (compatibility version 2101.0.0, current version 2101.0.0)\n        @rpath/libgobject-2.0.0.dylib (compatibility version 6201.0.0, current version 6201.6.0)\n        @rpath/libglib-2.0.0.dylib (compatibility version 6201.0.0, current version 6201.6.0)\n        @rpath/libintl.8.dylib (compatibility version 10.0.0, current version 10.5.0)\n        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.100.3)\n```\n\n----------------------------------------\n\nTITLE: Using 'capsfilter' Element for Filtering Capabilities in 0.10 (C)\nDESCRIPTION: In GStreamer 0.10, the concept of 'Filtered caps' from 0.8 is implemented using the dedicated `capsfilter` element within pipelines. While the element is used explicitly in code, the pipeline description syntax for `gst-launch` remains largely unchanged for simple filtering.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/porting.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ncapsfilter\n```\n\n----------------------------------------\n\nTITLE: Saving Desired Playback State in Android Activity (Java)\nDESCRIPTION: This `onSaveInstanceState` method overrides the standard Android Activity lifecycle method. It saves the current value of the `is_playing_desired` boolean variable into the `outState` Bundle using the key \"playing\". This ensures the desired state can be restored if the Activity is destroyed and recreated by the Android system (e.g., during configuration changes like screen rotation).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprotected void onSaveInstanceState (Bundle outState) {\n    Log.d (\"GStreamer\", \"Saving state, playing:\" + is_playing_desired);\n    outState.putBoolean(\"playing\", is_playing_desired);\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Leaks Tracer with Fast Backtraces in GStreamer (Shell)\nDESCRIPTION: Uses the leaks tracer to log references for all (mini)objects with reduced stack tracing detail. The `stack-traces-flags` parameter is set to 'fast', and reference tracking is enabled. Requires the appropriate GStreamer leaks tracer plugin. Input is the command to run; output is a trace log focusing on reference changes with basic backtraces, suitable for lower overhead monitoring.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nGST_TRACERS=leaks(stack-traces-flags=fast,check-refs=true) COMMAND\n```\n\n----------------------------------------\n\nTITLE: GstStructure API Changes in GStreamer 1.0\nDESCRIPTION: Shows renamed functions for creating GstStructure instances. The structure fields are now private and must be accessed through methods rather than directly.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ngst_structure_new_empty() /* Replaces gst_structure_empty_new() */\ngst_structure_new_id_empty() /* Replaces gst_structure_id_empty_new() */\ngst_structure_new_id() /* Replaces gst_structure_id_new() */\n```\n\n----------------------------------------\n\nTITLE: Handle GStreamer Buffering Messages in C\nDESCRIPTION: Implements the `buffering_cb` function, a GStreamer bus callback (`GstBusFunc`). It handles buffering messages, primarily for non-live streams. It parses the buffering percentage using `gst_message_parse_buffering`. If buffering is less than 100% and the pipeline is intended to be playing or paused, it sets the pipeline state to PAUSED and updates the UI with the buffering percentage. Once buffering reaches 100% (or if the target state is PLAYING), it attempts to set the pipeline state to PLAYING if that was the target state, or updates the UI message if the target was PAUSED.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_23\n\nLANGUAGE: c\nCODE:\n```\n/* Called when buffering messages are received. We inform the UI about the current buffering level and\n * keep the pipeline paused until 100% buffering is reached. At that point, set the desired state. */\nstatic void buffering_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  gint percent;\n\n  if (data->is_live)\n    return;\n\n  gst_message_parse_buffering (msg, &percent);\n  if (percent < 100 && data->target_state >= GST_STATE_PAUSED) {\n    gchar * message_string = g_strdup_printf (\"Buffering %d%%\", percent);\n    gst_element_set_state (data->pipeline, GST_STATE_PAUSED);\n    set_ui_message (message_string, data);\n    g_free (message_string);\n  } else if (data->target_state >= GST_STATE_PLAYING) {\n    gst_element_set_state (data->pipeline, GST_STATE_PLAYING);\n  } else if (data->target_state >= GST_STATE_PAUSED) {\n    set_ui_message (\"Buffering complete\", data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ID3v2 Frame Header Flags Bitmask (Text)\nDESCRIPTION: Shows the two-byte bitmask format for ID3v2 frame header flags. The first byte (`%0abc0000`) contains status flags (Tag alter preservation 'a', File alter preservation 'b', Read only 'c'), and the second byte (`%0h00kmnp`) contains format flags (Grouping identity 'h', Compression 'k', Encryption 'm', Unsynchronisation 'n'). Unused flags must be zero.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-structure.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n%0abc0000 %0h00kmnp\n```\n\n----------------------------------------\n\nTITLE: GStreamer Element Creation in gst-launch Syntax\nDESCRIPTION: Demonstrates the syntax for creating a GStreamer element in gst-launch. This example shows how to create an instance of the 'mad' MP3 decoding plugin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/programs.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n... mad ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up GLib Main Context\nDESCRIPTION: Code to create and configure a GLib main context for handling GStreamer operations in a separate thread.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-running-pipeline.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\ncontext = g_main_context_new ();\ng_main_context_push_thread_default(context);\n```\n\n----------------------------------------\n\nTITLE: Linking Instructions for GStreamer OpenCV Library\nDESCRIPTION: Instructions showing the library linking requirements for using OpenCV with GStreamer. The library requires flags from gstreamer-plugins-bad and a specific opencv library flag. Note that this API is marked as unstable.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/opencv/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Opencv Library\n\nThis library should be linked to by getting cflags and libs from\ngstreamer-plugins-bad-{{ gst_api_version.md }}.pc and adding\n-lgstopencv-{{ gst_api_version.md }} to the library flags.\n\n> NOTE: This library API is considered *unstable*\n```\n\n----------------------------------------\n\nTITLE: Connecting Player Signals to UI Slots in C++\nDESCRIPTION: Constructor for MediaApp that creates the Player object and connects its signals to UI update slots.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n//create the player\nm_player = new Player(this);\nconnect(m_player, SIGNAL(positionChanged()), this, SLOT(onPositionChanged()));\nconnect(m_player, SIGNAL(stateChanged()), this, SLOT(onStateChanged()));\n```\n\n----------------------------------------\n\nTITLE: Video Sink Render Time Calculation\nDESCRIPTION: Formula used by video sink to calculate render time for frame synchronization based on buffer timestamp, segment start time, and base time\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/segments.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nrender_time = BUFFER_TIMESTAMP - segment_start + element->base_time\n```\n\n----------------------------------------\n\nTITLE: Defining P012_BE Planar 4:2:0 YUV Format in GStreamer\nDESCRIPTION: Specifies the component structure for P012_BE, a planar 4:2:0 YUV format with interleaved UV plane, 2 bytes per channel where color data is stored in MSB 12 bits, big-endian. It details the depth, stride, offset, and size calculations for Y, U, and V components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_48\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           12 BE\n          pstride:         2\n          default offset:  0\n          default rstride: RU4 (width * 2)\n          default size:    rstride (component0) * RU2 (height)\n\n        Component 1: U\n          depth:           12 BE\n          pstride:         4\n          default offset:  size (component0)\n          default rstride: RU4 (width * 2)\n\n        Component 2: V\n          depth            12 BE\n          pstride:         4\n          default offset:  offset (component1) + 2\n          default rstride: RU4 (width * 2)\n\n        Image\n          default size: RU4 (width * 2) * RU2 (height) * 3 / 2\n```\n\n----------------------------------------\n\nTITLE: Building ONNX Runtime with Intel oneDNN and OpenCL Backend Bash Script (shell)\nDESCRIPTION: This shellscript configures ONNX Runtime for GPU acceleration using Intel oneDNN and OpenCL via the Khronos OpenCL SDK. It assumes prior installation of oneDNN, the OpenCL SDK, and system libraries, as described in the instructions. CMake is set to enable DNNL with OpenCL, and the custom OpenCL root directory is injected. As with other snippets, tests are disabled for quicker build performance.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/onnx/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncmake -Donnxruntime_BUILD_SHARED_LIB=ON -DBUILD_TESTING=OFF -Donnxruntime_BUILD_UNIT_TESTS=OFF -Donnxruntime_USE_DNNL=ON -Donnxruntime_DNNL_GPU_RUNTIME=ocl -Donnxruntime_DNNL_OPENCL_ROOT=$SRC_DIR/OpenCL-SDK/install  $SRC_DIR/onnxruntime/cmake && make -j$(nproc) && sudo make install\n```\n\n----------------------------------------\n\nTITLE: Handling GStreamer Pipeline State Changes and Errors in Objective-C\nDESCRIPTION: Implements callback functions for handling pipeline state changes and errors. These functions update the UI with relevant messages and handle pipeline state transitions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/video.md#2025-04-23_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\nstatic void error_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self)\n{\n    GError *err;\n    gchar *debug_info;\n    gchar *message_string;\n\n    gst_message_parse_error (msg, &err, &debug_info);\n    message_string = g_strdup_printf (\"Error received from element %s: %s\", GST_OBJECT_NAME (msg->src), err->message);\n    g_clear_error (&err);\n    g_free (debug_info);\n    [self setUIMessage:message_string];\n    g_free (message_string);\n    gst_element_set_state (self->pipeline, GST_STATE_NULL);\n}\n\nstatic void state_changed_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self)\n{\n    GstState old_state, new_state, pending_state;\n    gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n    /* Only pay attention to messages coming from the pipeline, not its children */\n    if (GST_MESSAGE_SRC (msg) == GST_OBJECT (self->pipeline)) {\n        gchar *message = g_strdup_printf(\"State changed to %s\", gst_element_state_get_name(new_state));\n        [self setUIMessage:message];\n        g_free (message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating UI with Playback Position in Qt\nDESCRIPTION: Function to update the UI with the current playback position and duration, updating a label and slider.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nvoid MediaApp::onPositionChanged()\n{\n    QTime length(0,0);\n    QTime curpos(0,0);\n    if (m_player->state() != QGst::StateReady &&\n        m_player->state() != QGst::StateNull)\n    {\n        length = m_player->length();\n        curpos = m_player->position();\n    }\n    m_positionLabel->setText(curpos.toString(\"hh:mm:ss.zzz\")\n                                        + \"/\" +\n                             length.toString(\"hh:mm:ss.zzz\"));\n    if (length != QTime(0,0)) {\n        m_positionSlider->setValue(curpos.msecsTo(QTime(0,0)) * 1000 / length.msecsTo(QTime(0,0)));\n    } else {\n        m_positionSlider->setValue(0);\n    }\n    if (curpos != QTime(0,0)) {\n        m_positionLabel->setEnabled(true);\n        m_positionSlider->setEnabled(true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Media Size Change Handler in Java\nDESCRIPTION: Handles media size changes by updating the GStreamerSurfaceView dimensions and requesting a layout update on the UI thread.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate void onMediaSizeChanged (int width, int height) {\n    Log.i (\"GStreamer\", \"Media size changed to \" + width + \"x\" + height);\n    final GStreamerSurfaceView gsv = (GStreamerSurfaceView) this.findViewById(R.id.surface_video);\n    gsv.media_width = width;\n    gsv.media_height = height;\n    runOnUiThread(new Runnable() {\n        public void run() {\n            gsv.requestLayout();\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Encryption Method Registration Frame in ID3v2\nDESCRIPTION: Defines the structure for the 'Encryption method registration' frame (ENCR) in ID3v2 tags. This frame registers methods used to encrypt other frames, identifying the owner and method symbol.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n<Header for 'Encryption method registration', ID: \"ENCR\">\nOwner identifier    <text string> $00\nMethod symbol       $xx\nEncryption data     <binary data>\n```\n\n----------------------------------------\n\nTITLE: Decodebin3 Pipeline Structure Example\nDESCRIPTION: ASCII diagram showing the structure of a decodebin3 pipeline handling multiple streams, including parsebin, demuxer, parser, multiqueue and decoder elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-selection.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n  +---------------------+\n  | parsebin            |\n  | ---------           | +-------------+\n  | | demux |--[parser]-+-| multiqueue  |--[videodec]---[\n]-+-|       |--[parser]-+-|             |\n  | |       |--[parser]-+-|             |--[audiodec]---[\n  | ---------           | +-------------+\n  +---------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Elements for Audio and Video Processing\nDESCRIPTION: This snippet configures the audio source and visualization elements. It sets the frequency of the audio test source and adjusts the shader and style of the wavescope visualizer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/multithreading-and-pad-availability.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* Configure elements */\ng_object_set (audio_source, \"freq\", 215.0f, NULL);\ng_object_set (visual, \"shader\", 0, \"style\", 1, NULL);\n```\n\n----------------------------------------\n\nTITLE: Configuring Meson Build Options (Shell)\nDESCRIPTION: These snippets show how to use Meson'\\'s 'configure' command to query and display configuration options, either for the project as a whole or for a specific existing build directory. The commands provide a listing of available options, their default or configured values, possible values, and descriptions. The environment requires Meson to be installed with access to the project source or an existing build directory. Inputs optionally specify a build directory argument for more detailed output.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmeson configure\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeson configure <build-directory>\n```\n\n----------------------------------------\n\nTITLE: Describing YVYU Packed YUV Format Block and Layout (Markdown, Plaintext)\nDESCRIPTION: This documentation snippet outlines the YVYU packed 4:2:2 YUV format, providing block diagram and table of component order, bit depth, per-component stride, and offset, which differs from YUY2 only in the order of U and V. It helps developers interpret or create video buffers in YVYU format, especially when switching between YUY2 and YVYU layouts.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |Y0|V0|Y1|U0| |Y2|V2|Y3|U2| ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: Y\\n          depth:           8\\n          pstride:         2\\n          offset:          0\\n\\n        Component 1: U\\n          depth:           8\\n          pstride:         4\\n          offset:          3\\n\\n        Component 2: V\\n          depth            8\\n          pstride:         4\\n          offset:          1\\n\\n        Image\\n          default rstride: RU4 (width * 2)\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Iterating Metadata in GESMetaContainer (C API)\nDESCRIPTION: API function for iterating over all metadata items in a GESMetaContainer using a callback function. This allows for custom processing of all metadata entries.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/metadata.txt#2025-04-23_snippet_3\n\nLANGUAGE: C\nCODE:\n```\ntypedef void\n(*GESMetaForeachFunc)                  (const GESMetaContainer *container,\n                                        const gchar *key,\n                                        const GValue *value,\n                                        gpointer user_data);\n\nvoid\nges_meta_container_foreach             (GESMetaContainer *container,\n                                        GESMetaForeachFunc func,\n                                        gpointer user_data);\n```\n\n----------------------------------------\n\nTITLE: GES Clip Internal Time Consistency under Start Trim - Plaintext\nDESCRIPTION: Outlines the calculation demonstrating that after trimming a clip's start time but properly updating in-point, the timeline-to-internal mapping for the original position is preserved. Expresses the logic in terms of function F and shows algebraic cancellation to justify GES's invariant. Used for conceptual correctness in editors; not code to be executed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nges_clip_get_internal_time_from_timeline_time (clip, child, old-start)\n = F (old-start - new-start) + new-in-point\n = F (old-start - new-start) + old-in-point - F (old-start - new-start)\n = old-in-point\n```\n\n----------------------------------------\n\nTITLE: Transcoding Media File to WebM with VP8 and Vorbis\nDESCRIPTION: Example command to transcode a media file to WebM container with VP8 video and Vorbis audio using gst-validate-transcoding.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-transcoding.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-transcoding-GST_API_VERSION file:///./file.ogg file:///.../transcoded.webm -o 'video/webm:video/x-vp8:audio/x-vorbis'\n```\n\n----------------------------------------\n\nTITLE: Removing Layers from GES Timeline Action Syntax\nDESCRIPTION: Defines the syntax for removing a layer from the current GES timeline by specifying its priority. Optionally allows enabling or disabling auto-transition on the new layer configuration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_4\n\nLANGUAGE: validate-scenario\nCODE:\n```\nremove-layer,\n    [playback-time=(double,string)],\n    priority,\n    [auto-transition=(boolean)];\n```\n\n----------------------------------------\n\nTITLE: Automatic Linking with Decodebin in GStreamer\nDESCRIPTION: Demonstrates how to use the decodebin3 element for automatic linking and playing various audio and video formats.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=musicfile ! decodebin3 ! audioconvert ! audioresample ! pulsesink\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=videofile ! decodebin name=decoder decoder. ! queue ! audioconvert ! audioresample ! pulsesink   decoder. !  videoconvert ! xvimagesink\n```\n\n----------------------------------------\n\nTITLE: Same Caps Passthrough Buffer Flow\nDESCRIPTION: ASCII diagram illustrating the buffer flow in passthrough mode when input and output caps are the same.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/element-transform.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n              sinkpad              transform               srcpad\n      chain()    |                    |                      |\n    ------------>|   handle_buffer()  |                      |\n                 |------------------->|      pad_push()      |\n                 |                    |--------------------->|\n                 |                    |                      |\n```\n\n----------------------------------------\n\nTITLE: Processing State Changes for Delayed Seeks in GStreamer\nDESCRIPTION: This code snippet from the state_changed_cb callback checks for scheduled seeks when transitioning from READY to PAUSED state and executes them when appropriate.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_38\n\nLANGUAGE: c\nCODE:\n```\nif (old_state == GST_STATE_READY && new_state == GST_STATE_PAUSED) {\n  /* By now the sink already knows the media size */\n  check_media_size(data);\n\n  /* If there was a scheduled seek, perform it now that we have moved to the Paused state */\n  if (GST_CLOCK_TIME_IS_VALID (data->desired_position))\n    execute_seek (data->desired_position, data);\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Video Overlay Composition Structures in C\nDESCRIPTION: This snippet defines the core data structures for video overlay composition, including GstVideoOverlayComposition and GstVideoOverlayRectangle. These structures represent collections of overlay rectangles and individual overlay rectangles respectively, with properties for positioning, dimensions, pixel format, and metadata.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/subtitle-overlays.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct GstVideoOverlayComposition\n{\n    guint                          num_rectangles;\n    GstVideoOverlayRectangle    ** rectangles;\n\n    /* lowest rectangle sequence number still used by the upstream\n     * overlay element. This way a renderer maintaining some kind of\n     * rectangles <-> surface cache can know when to free cached\n     * surfaces/rectangles. */\n    guint                          min_seq_num_used;\n\n    /* sequence number for the composition (same series as rectangles) */\n    guint                          seq_num;\n}\n\nstruct GstVideoOverlayRectangle\n{\n    /* Position on video frame and dimension of output rectangle in\n     * output frame terms (already adjusted for the PAR of the output\n     * frame). x/y can be negative (overlay will be clipped then) */\n    gint  x, y;\n    guint render_width, render_height;\n\n    /* Dimensions of overlay pixels */\n    guint width, height, stride;\n\n    /* This is the PAR of the overlay pixels */\n    guint par_n, par_d;\n\n    /* Format of pixels, GST_VIDEO_FORMAT_ARGB on big-endian systems,\n     * and BGRA on little-endian systems (i.e. pixels are treated as\n     * 32-bit values and alpha is always in the most-significant byte,\n     * and blue is in the least-significant byte).\n     *\n     * FIXME: does anyone actually use AYUV in practice? (we do\n     * in our utility function to blend on top of raw video)\n     * What about AYUV and endianness? Do we always have [A][Y][U][V]\n     * in memory? */\n    /* FIXME: maybe use our own enum? */\n    GstVideoFormat format;\n\n    /* Refcounted blob of memory, no caps or timestamps */\n    GstBuffer *pixels;\n\n    /* sequence number: useful for backends/renderers/sinks that want\n     * to maintain a cache of rectangles <-> surfaces. The value of\n     * the min_seq_num_used in the composition tells the renderer which\n     * rectangles have expired. */\n    guint      seq_num;\n\n    /* FIXME: we also need a (private) way to cache converted/scaled\n     * pixel blobs */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BGRA64_LE Format in GStreamer\nDESCRIPTION: Specifies the component structure for BGRA64_LE, a reverse RGB format with alpha channel last, 16 bits per channel, little-endian. It details the depth, stride, and offset for B, G, R, and A components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_55\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\n       |B0|G0|R0|A0| |B1|G1|R1|A1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           16 LE\n          pstride:         8\n          offset:          4\n\n        Component 1: G\n          depth            16 LE\n          pstride:         8\n          offset:          2\n\n        Component 2: B\n          depth:           16 LE\n          pstride:         8\n          offset:          0\n\n        Component 3: A\n          depth:           16 LE\n          pstride:         8\n          offset:          6\n\n        Image\n          default rstride: width * 8\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Select Streams Command in GStreamer Validate Scenario\nDESCRIPTION: Selects streams based on their indexes when next GST_STREAM_COLLECTION message appears on the bus.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_9\n\nLANGUAGE: validate-scenario\nCODE:\n```\nselect-streams,\n    indexes=([int]),\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchsafe Integer Conversion in ID3v2\nDESCRIPTION: This example demonstrates how to convert a regular integer (255) to a 16-bit synchsafe integer (383). Synchsafe integers keep the highest bit (bit 7) zeroed in each byte to prevent false synchronizations in ID3v2 tags.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-structure.txt#2025-04-23_snippet_5\n\nLANGUAGE: plain\nCODE:\n```\n255 (%11111111) encoded as a 16 bit synchsafe integer is 383\n(%00000001 01111111).\n```\n\n----------------------------------------\n\nTITLE: Play Command in GStreamer Validate Scenario\nDESCRIPTION: Sets the pipeline state to PLAYING. Can be executed at specific playback time or on message.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_6\n\nLANGUAGE: validate-scenario\nCODE:\n```\nplay,\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Secondary GStreamer Pipeline Setup\nDESCRIPTION: Configures the second pipeline that handles audio output through autoaudiosink.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/using-appsink-appsrc-in-qt.md#2025-04-23_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n    /* sink pipeline */\n    QString pipe2Descr = QString(\"appsrc name=\\\"mysrc\\\" caps=\\\"%1\\\" ! autoaudiosink\").arg(caps);\n    pipeline2 = QGst::Parse::launch(pipe2Descr).dynamicCast<QGst::Pipeline>();\n    m_src.setElement(pipeline2->getElementByName(\"mysrc\"));\n    QGlib::connect(pipeline2->bus(), \"message\", this, &Player::onBusMessage);\n    pipeline2->bus()->addSignalWatch();\n```\n\n----------------------------------------\n\nTITLE: Configuring NVIDIA Codec Plugin Options in Meson\nDESCRIPTION: Defines options for the NVIDIA codec (nvcodec) plugin, including CUDA kernel precompilation and GPU architecture selection for the nvcc compiler.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_15\n\nLANGUAGE: meson\nCODE:\n```\n# nvcodec plugin options\noption('nvcodec-cuda-precompile', type : 'feature', value : 'disabled', description : 'Enable CUDA kernel precompile')\noption('nvcodec-nvcc-arch', type : 'string', value : 'compute_52', description : 'GPU architectur for nvcc -arch option')\n```\n\n----------------------------------------\n\nTITLE: GStreamer Caps Query API Call\nDESCRIPTION: Function call used to query pad capabilities during negotiation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/negotiation.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ngst_pad_get_allowed_caps()\n```\n\n----------------------------------------\n\nTITLE: Describing GStreamer Video Metadata Structures\nDESCRIPTION: This snippet outlines two metadata structures used in GStreamer for video processing: GstVideoMeta and GstVideoCropMeta. GstVideoMeta describes video fields or frames with stride support and multiple memory regions, while GstVideoCropMeta contains information about the cropping region of the video.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Metadata\n\n - `GstVideoMeta` contains the description of one video field or frame. It\n   has stride support and support for having multiple memory regions per frame.\n   Multiple GstVideoMeta can be added to a buffer and can be identified with a\n   unique id. This id can be used to select fields in interlaced formats or\n   views in multiview formats.\n\n - `GstVideoCropMeta` contains the cropping region of the video.\n```\n\n----------------------------------------\n\nTITLE: Identifying Telecine Video Buffers in GStreamer\nDESCRIPTION: This snippet explains how to identify telecine video buffers in GStreamer and the meaning of various buffer flags in this context.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/interlaced-video.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nIf video info interlace mode is **\"mixed\"** then the buffers are in some\nform of telecine state.\n\nThe `TFF` and `ONEFIELD` flags have the same semantics as for the plain\ninterlaced state.\n\n`GST_VIDEO_BUFFER_FLAG_RFF` in the telecine state indicates that the\nbuffer contains only repeated fields that are present in other buffers\nand are as such unneeded. For example, in a sequence of three telecined\nframes, we might have:\n\n    AtAb AtBb BtBb\n\nIn this situation, we only need the first and third buffers as the\nsecond buffer contains fields present in the first and third.\n\nNote that the following state can have its second buffer identified\nusing the `ONEFIELD` flag (and `TFF` not set):\n\n    AtAb AtBb BtCb\n\nThe telecine state requires one additional flag to be able to identify\nprogressive buffers.\n\nThe presence of the `GST_VIDEO_BUFFER_FLAG_INTERLACED` means that the\nbuffer is an 'interlaced' or 'mixed' buffer that contains two fields\nthat, when combined with fields from adjacent buffers, allow\nreconstruction of progressive frames. The absence of the flag implies\nthe buffer containing two fields is a progressive frame.\n\nFor example in the following sequence, the third buffer would be mixed\n(yes, it is a strange pattern, but it can happen):\n\n    AtAb AtBb BtCb CtDb DtDb\n```\n\n----------------------------------------\n\nTITLE: Enabling GStreamer Plugins with External Dependencies (Meson)\nDESCRIPTION: Defines multiple Meson feature options (alsa, cdparanoia, libvisual, etc.) to enable or disable specific GStreamer plugins that rely on external libraries. Each option defaults to 'auto', enabling the plugin if its dependencies are found.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_14\n\nLANGUAGE: meson\nCODE:\n```\n# Feature options for plugins with external deps\noption('alsa', type : 'feature', value : 'auto', description : 'ALSA audio source/sink plugin')\noption('cdparanoia', type : 'feature', value : 'auto', description : 'cdparanoia plugin')\noption('libvisual', type : 'feature', value : 'auto', description : 'libvisual audio visualization plugin')\noption('ogg', type : 'feature', value : 'auto', description : 'ogg parser, muxer, demuxer plugin')\noption('opus', type : 'feature', value : 'auto', description : 'OPUS audio codec plugin')\noption('pango', type : 'feature', value : 'auto', description : 'Pango text rendering and overlay plugin')\noption('theora', type : 'feature', value : 'auto', description : 'Theora video parser and codec plugin')\noption('tremor', type : 'feature', value : 'auto', description : 'Integer Vorbis decoder plugin for devices without floating point')\noption('vorbis', type : 'feature', value : 'auto', description : 'Vorbis audio parser, tagger, and codec plugin')\noption('x11', type : 'feature', value : 'auto', description : 'X11 ximagesink plugin, and X11 support in libraries, plugins, examples')\noption('xshm', type : 'feature', value : 'auto', description : 'X11 shared memory support for X11 plugins')\noption('xvideo', type : 'feature', value : 'auto', description : 'X11 XVideo xvimagesink plugin')\noption('xi', type : 'feature', value : 'auto', description : 'X11 input extension for touch support in ximagesink')\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pipeline Configuration\nDESCRIPTION: Sets up the initial pipeline for audio processing, including file source, decoder, and audio conversion elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/using-appsink-appsrc-in-qt.md#2025-04-23_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n    const char *caps = \"audio/x-raw-int,channels=1,rate=8000,\"\n                       \"signed=(boolean)true,width=16,depth=16,endianness=1234\";\n \n    /* source pipeline */\n    QString pipe1Descr = QString(\"filesrc location=\\\"%1\\\" ! \"\n                                 \"decodebin2 ! \"\n                                 \"audioconvert ! \"\n                                 \"audioresample ! \"\n                                 \"appsink name=\\\"mysink\\\" caps=\\\"%2\\\"\").arg(argv[1], caps);\n    pipeline1 = QGst::Parse::launch(pipe1Descr).dynamicCast<QGst::Pipeline>();\n    m_sink.setElement(pipeline1->getElementByName(\"mysink\"));\n    QGlib::connect(pipeline1->bus(), \"message::error\", this, &Player::onBusMessage);\n    pipeline1->bus()->addSignalWatch();\n```\n\n----------------------------------------\n\nTITLE: Handling Time Slider Touch Down in GStreamer iOS App\nDESCRIPTION: Callback method triggered when user begins dragging the time slider. Pauses playback and sets dragging state.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n- (IBAction)sliderTouchDown:(id)sender {\n    [gst_backend pause];\n    dragging_slider = YES;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting volume Property for GStreamer Audio Test Source\nDESCRIPTION: Documents the 'volume' property for an audio test source in GStreamer. This property controls the volume of the generated test signal.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/libs/GESAudioTestSource-children-props.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#### `volume`\n\nVolume of test signal\n\nValue type: #gdouble\n\nSee #audiotestsrc:volume\n```\n\n----------------------------------------\n\nTITLE: Downstream Negotiation Flow ASCII Diagram\nDESCRIPTION: ASCII diagram showing the flow of downstream negotiation between sinkpad, transform, and srcpad components during caps event handling.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/element-transform.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n          sinkpad              transform               srcpad\nCAPS event   |                    |                      |\n------------>|  find_transform()  |                      |\n             |------------------->|                      |\n             |                    |       CAPS event     |\n             |                    |--------------------->|\n             | <configure caps> <-|                      |\n```\n\n----------------------------------------\n\nTITLE: Testing Basic GStreamer Pipeline\nDESCRIPTION: Command to test basic GStreamer functionality using fakesrc and fakesink plugins with verbose output\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/using.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 -v fakesrc silent=false num-buffers=3 ! fakesink silent=false\n```\n\n----------------------------------------\n\nTITLE: Using GStreamer-Sharp as a Meson Subproject\nDESCRIPTION: Meson configuration example demonstrating how to include GStreamer-Sharp as a subproject in another project, setting installation options and getting the dependency variable.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer-sharp/README.md#2025-04-23_snippet_2\n\nLANGUAGE: meson\nCODE:\n```\nsubproject('gstreamer-sharp', default_options: ['install=false'])\ngst_sharp = subproject('gstreamer-sharp')\ngst_sharp_dep = gst_sharp.get_variable('gst_sharp_dep')\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata in GESMetaContainer (C API)\nDESCRIPTION: API functions for setting various types of metadata in a GESMetaContainer. These functions allow setting boolean, integer, float, string, date, and other types of metadata.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/metadata.txt#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ngboolean\nges_meta_container_set_boolean     (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        gboolean value);\n\ngboolean\nges_meta_container_set_int         (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        gint value);\n\ngboolean\nges_meta_container_set_uint        (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        guint value);\n\ngboolean\nges_meta_container_set_int64       (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        gint64 value);\n\ngboolean\nges_meta_container_set_uint64      (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        guint64 value);\n\ngboolean\nges_meta_container_set_float       (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        gfloat value);\n\ngboolean\nges_meta_container_set_double      (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        gdouble value);\n\ngboolean\nges_meta_container_set_date        (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        const GDate* value);\n\ngboolean\nges_meta_container_set_date_time   (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        const GstDateTime* value);\n\ngboolean\nges_meta_container_set_string      (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        const gchar* value);\n\ngboolean\nges_meta_container_set_meta            (GESMetaContainer * container,\n                                        const gchar* meta_item,\n                                        const GValue *value);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Stream Buffering Pipeline in GStreamer\nDESCRIPTION: This code snippet demonstrates the structure of a GStreamer pipeline for stream buffering. It shows how httpsrc, buffer, and demux elements are connected to handle buffering from a slow network source.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/buffering.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n+---------+     +---------+     +-------+\n| httpsrc |     | buffer  |     | demux |\n|        src - sink      src - sink     ....\n+---------+     +---------+     +-------+\n```\n\n----------------------------------------\n\nTITLE: Drawing Invalid Pointer in ASCII Art\nDESCRIPTION: Convention for representing an invalid or unusable pointer in diagrams.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/conventions.md#2025-04-23_snippet_2\n\nLANGUAGE: ascii-art\nCODE:\n```\n*-//->\n```\n\n----------------------------------------\n\nTITLE: Playing Media Files with GStreamer\nDESCRIPTION: Various commands demonstrating different ways to play media files using GStreamer\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/using.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 playbin uri=file:///path/to/song.mp3\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-play-1.0 song.mp3\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=thesong.mp3 ! mpegaudioparse ! mpg123audiodec ! audioconvert ! pulsesink\n```\n\n----------------------------------------\n\nTITLE: Listing GstValidate Scenarios\nDESCRIPTION: Command to list all scenarios distributed with GstValidate, useful for exploring available pre-defined scenarios.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-scenarios.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-1.0 --list-scenarios\n```\n\n----------------------------------------\n\nTITLE: Audio/Video Pipeline ASCII Diagram\nDESCRIPTION: ASCII art showing a more complex audio/video pipeline configuration with demuxer splitting into separate audio and video paths.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/framestep.md#2025-04-23_snippet_1\n\nLANGUAGE: ascii-art\nCODE:\n```\n.-----.    .-------.              .------.    .-------.\n| src |    | demux |    .-----.   | vdec |    | vsink |\n|    src->sink    src1->|queue|->sink   src->sink     |\n'-----'    |       |    '-----'   '------'    '-------'\n           |       |              .------.    .-------.\n           |       |    .-----.   | adec |    | asink |\n           |      src2->|queue|->sink   src->sink     |\n           '-------'    '-----'   '------'    '-------'\n```\n\n----------------------------------------\n\nTITLE: Documenting BGRx Packed Reverse RGB Format Layout (Markdown, Plaintext)\nDESCRIPTION: This block documents the BGRx format, where channel order is reversed compared to RGBx (BGR) with the spare byte last. Per-channel depth, stride, offset, and overall layout are described, providing developers a memory map for buffer access in graphics or video output pipelines with BGRx requirements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |B0|G0|R0|X | |B1|G1|R1|X | ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: R\\n          depth:           8\\n          pstride:         4\\n          offset:          2\\n\\n        Component 1: G\\n          depth:           8\\n          pstride:         4\\n          offset:          1\\n\\n        Component 2: B\\n          depth            8\\n          pstride:         4\\n          offset:          0\\n\\n        Image\\n          default rstride: width * 4\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Copying Element in GStreamer\nDESCRIPTION: Command to copy an element with optional recursive copying and positioning.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_17\n\nLANGUAGE: validate-scenario\nCODE:\n```\ncopy-element,\n    [playback-time=(double,string)],\n    element-name=(string),\n    [recurse=(boolean)],\n    position=(string or float),\n    [paste-name=(string)];\n```\n\n----------------------------------------\n\nTITLE: Seek Bar Event Handlers in Java\nDESCRIPTION: Implements seek bar touch event handlers for controlling media playback position through user interaction.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic void onStartTrackingTouch(SeekBar sb) {\n    nativePause();\n}\n\npublic void onProgressChanged(SeekBar sb, int progress, boolean fromUser) {\n    if (fromUser == false) return;\n    desired_position = progress;\n    if (is_local_media) nativeSetPosition(desired_position);\n    updateTimeWidget();\n}\n\npublic void onStopTrackingTouch(SeekBar sb) {\n    if (!is_local_media) nativeSetPosition(desired_position);\n    if (is_playing_desired) nativePlay();\n}\n```\n\n----------------------------------------\n\nTITLE: Handle GStreamer Duration Change Messages in C\nDESCRIPTION: Implements the `duration_cb` function, a GStreamer bus callback (`GstBusFunc`). It is called when the duration of the media changes (e.g., during initial discovery or if it dynamically changes). It simply invalidates the cached duration by setting `data->duration` to `GST_CLOCK_TIME_NONE`, forcing a re-query during the next UI refresh.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_22\n\nLANGUAGE: c\nCODE:\n```\n/* Called when the duration of the media changes. Just mark it as unknown, so we re-query it in the next UI refresh. */\nstatic void duration_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  data->duration = GST_CLOCK_TIME_NONE;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fixed Colors to Image in C\nDESCRIPTION: Function to reserve a specific color in the output palette. The color is treated as if it was used in the image and marked as important. Must be called before image quantization and supports up to 256 colors.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_35\n\nLANGUAGE: c\nCODE:\n```\nliq_error liq_image_add_fixed_color(liq_image* img, liq_color color);\n```\n\n----------------------------------------\n\nTITLE: Setting Pipeline State - GStreamer - validate-scenario\nDESCRIPTION: Defines an action to transition the GStreamer pipeline into a specific state ('null', 'ready', 'paused', 'playing'). Mandatory parameter is the new state string, with optional 'playback-time' specifying when to execute. This snippet is used in test scenarios to control runtime behavior and synchronization within the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_16\n\nLANGUAGE: validate-scenario\nCODE:\n```\nset-state,\\n    state=(string),\\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Adding Asset to Timeline Layer in GStreamer\nDESCRIPTION: Creates a TimelineObject from an asset and adds it to the specified layer. Takes parameters for layer, asset, start time, inpoint time, and duration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/asset.txt#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nGESTimelineObject * ges_timeline_layer_add_asset   (GESTimelineLayer *layer,\n                                                       GESAssetTimelineObject *asset,\n                                                       GstClockTime start,\n                                                       GstClockTime inpoint,\n                                                       GstClockTime duration,\n```\n\n----------------------------------------\n\nTITLE: Enabling GLib Assertions in Meson\nDESCRIPTION: Defines a Meson boolean option 'glib_assert' to enable or disable GLib's assertion checks (g_assert). Defaults to true. Includes deprecated mappings for backward compatibility. 'yield: true' propagates the setting.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_20\n\nLANGUAGE: meson\nCODE:\n```\noption('glib_assert', type : 'boolean', value : true, yield : true, description : 'Enable GLib assertion (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Seeks in GstValidate Scenarios\nDESCRIPTION: The seek action allows seeking to specific positions in the media stream with customizable flags, rates, and timing. It supports seeking to relative positions based on stream duration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_3\n\nLANGUAGE: validate-scenario\nCODE:\n```\nseek,\n    flags=(string describing the GstSeekFlags to set),\n    start=(double or string (GstClockTime)),\n    [rate=(double)],\n    [start_type=(string)],\n    [stop=(double or string (GstClockTime))],\n    [stop_type=(string)],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Specifying v210 Format in GStreamer\nDESCRIPTION: Defines the structure of the v210 format, a packed 4:2:2 10-bit YUV format. This is a complex format with specific stride and size calculations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           10\n\n        Component 1: U\n          depth            10\n\n        Component 2: V\n          depth:           10\n\n        Image\n          default rstride: RU48 (width) * 128\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Destroying Unreffed Relationship with Object2 Reference\nDESCRIPTION: Shows the complex case of breaking an unreffed relationship when holding a reference to object2, including retry logic to handle concurrent modifications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nretry:\n  LOCK (object2);\n  object1 = _ref (object2->refpointer);\n  UNLOCK (object2);\n  .. things can change here ..\n  LOCK (object1);\n  LOCK (object2);\n  if (object1 == object2->refpointer) {\n    /* relation unchanged */\n    object1->refpointer->refpointer = NULL;\n    object1->refpointer = NULL;\n  }\n  else {\n    /* relation changed.. retry */\n    UNLOCK (object2);\n    UNLOCK (object1);\n    _unref (object1);\n    goto retry;\n  }\n  UNLOCK (object2);\n  UNLOCK (object1);\n  _unref (object1);\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenGL Integration and Plugin in Meson\nDESCRIPTION: Defines a Meson feature option 'gl' to enable or disable the OpenGL integration library and the core OpenGL plugin. It defaults to 'auto', enabling the feature if dependencies are met.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_9\n\nLANGUAGE: meson\nCODE:\n```\n# Feature option for opengl plugin and integration library\noption('gl', type : 'feature', value : 'auto', description : 'OpenGL integration library and OpenGL plugin')\n```\n\n----------------------------------------\n\nTITLE: Defining GStreamer Encoding Profile in XML\nDESCRIPTION: This XML snippet defines a detailed encoding profile for high-quality H264/AAC encoding on the Nokia N900. It includes stream profiles for both audio and video with specific format restrictions and presets.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/encoding.txt#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<gst-encoding-profile>\n  <name>Nokia N900/H264 HQ</name>\n  <description>\n    High Quality H264/AAC for the Nokia N900\n  </description>\n  <format>video/quicktime,variant=iso</format>\n  <streams>\n    <stream-profile>\n      <type>audio</type>\n      <format>audio/mpeg,mpegversion=4</format>\n      <preset>Quality High/Main</preset>\n      <restriction>audio/x-raw-int,channels=[1,2]</restriction>\n      <presence>1</presence>\n    </stream-profile>\n    <stream-profile>\n      <type>video</type>\n      <format>video/x-h264</format>\n      <preset>Profile Baseline/Quality High</preset>\n      <restriction>\n        video/x-raw-yuv,width=[16, 800],\\\n\theight=[16, 480],framerate=[1/1, 30000/1001]\n      </restriction>\n      <presence>1</presence>\n    </stream-profile>\n  </streams>\n  \n</gst-encoding-profile>\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit Tool using Pip (Bash)\nDESCRIPTION: Installs the `pre-commit` tool using the Python package installer `pip`. This is a prerequisite for setting up and using pre-commit hooks within the GStreamer development environment to enforce coding standards before committing code.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/contribute/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\n```\n\n----------------------------------------\n\nTITLE: Establishing Unreffed Relationship in GStreamer\nDESCRIPTION: Demonstrates how to establish an unreffed relationship between two objects while maintaining proper lock order to prevent deadlocks. Locks object1 first, then object2 to set mutual references.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nLOCK (object1);\nLOCK (object2);\nobject2->refpointer = object1;\nobject1->refpointer = object2;\nUNLOCK (object2);\nUNLOCK (object1);\n```\n\n----------------------------------------\n\nTITLE: Defining Y212_BE Packed 4:2:2 YUV Format in GStreamer\nDESCRIPTION: Specifies the component structure for Y212_BE, a packed 4:2:2 YUV format with 2 bytes per channel where color value is stored in MSB 12 bits (Y-U-Y-V), big-endian. It details the depth, stride, and offset for Y, U, and V components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_50\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           12 BE\n          pstride:         4\n          default offset:  0\n\n        Component 1: U\n          depth:           12 BE\n          pstride:         8\n          offset:          2\n\n        Component 2: V\n          depth            12 BE\n          pstride:         8\n          offset:          6\n        Image\n          default rstride: RU8 (width * 4)\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Testing textoverlay with Different Aspect Ratios using gst-launch-1.0 (Shell)\nDESCRIPTION: This shell script uses gst-launch-1.0 to create three separate GStreamer pipelines. Each pipeline generates a test video source with specific dimensions and pixel-aspect-ratio, overlays the text 'Hello' using the 'textoverlay' element with a fixed font size, and displays the result using 'xvimagesink'. The purpose is to test and observe how 'textoverlay' handles text rendering and potential distortion across different video aspect ratios, highlighting a potential issue (FIXME).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/subtitle-overlays.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngst-launch-1.0 \\\n   videotestsrc ! video/x-raw,width=640,height=480,pixel-aspect-ratio=1/1 \\\n     ! textoverlay text=Hello font-desc=72 ! xvimagesink \\\n   videotestsrc ! video/x-raw,width=320,height=480,pixel-aspect-ratio=2/1 \\\n     ! textoverlay text=Hello font-desc=72 ! xvimagesink \\\n   videotestsrc ! video/x-raw,width=640,height=240,pixel-aspect-ratio=1/2 \\\n     ! textoverlay text=Hello font-desc=72 ! xvimagesink\n```\n\n----------------------------------------\n\nTITLE: Streaming local file to video with GStreamer via Bash (Windows path format)\nDESCRIPTION: This bash command constructs a pipeline that reads a local WebM file with filesrc, decodes it with decodebin, and sends the output to autovideosink. The filesrc location parameter must be set to an accessible file; here a Windows-format path is used. All elements (filesrc, decodebin, autovideosink) are required and GStreamer must be properly installed; expected output is video playback.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ngst-launch-1.0 filesrc location=f:\\\\media\\\\sintel\\\\sintel_trailer-480p.webm ! decodebin ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Executing a Compiled GStreamer Tutorial Application\nDESCRIPTION: Runs the compiled GStreamer tutorial application named `basic-tutorial-1` from the current directory using the standard shell execution syntax `./<executable_name>`. This assumes the tutorial has been successfully compiled in the current directory.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-linux.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n./basic-tutorial-1\n```\n\n----------------------------------------\n\nTITLE: Getting Palette in libimagequant\nDESCRIPTION: Returns a pointer to the optimized palette for a quantized or remapped image. The palette is temporary and read-only, and must be copied before calling liq_result_destroy().\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nconst liq_palette *liq_get_palette(liq_result *result);\n```\n\n----------------------------------------\n\nTITLE: Defining GESAssetFileSource Method in C\nDESCRIPTION: API draft for the GESAssetFileSource subclass, which includes a method to retrieve stream information for file source assets.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/asset.txt#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nGstDiscovererStreamInfo *\nges_asset_file_source_get_stream_info (GESAssetFileSource *asset);\n```\n\n----------------------------------------\n\nTITLE: Runtime DRM Format Negotiation Example\nDESCRIPTION: Example of runtime DRM format capabilities negotiation between elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/dmabuf.md#2025-04-23_snippet_6\n\nLANGUAGE: gstreamer\nCODE:\n```\ndrm-format: { (string)NV12:0x0100000000000001, (string)BGRA }\n```\n\n----------------------------------------\n\nTITLE: Listing Components (Recipes) in Cerbero - Shell\nDESCRIPTION: Lists all available recipe components definable and buildable by Cerbero, allowing fine-grained builds or inspection of available building blocks. Requires Cerbero's scripting environment.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled list\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronised Lyrics Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of the SYLT frame used for synchronised lyrics in ID3v2 tags. Includes text encoding, language, time stamp format, content type, and descriptor, followed by the synchronized text and timestamps.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_10\n\nLANGUAGE: plain text\nCODE:\n```\n<Header for 'Synchronised lyrics/text', ID: \"SYLT\">\nText encoding        $xx\nLanguage             $xx xx xx\nTime stamp format    $xx\nContent type         $xx\nContent descriptor   <text string according to encoding> $00 (00)\n```\n\n----------------------------------------\n\nTITLE: Specifying GRAY16_BE Format in GStreamer\nDESCRIPTION: Defines the structure of the GRAY16_BE format, a 16-bit grayscale format with the most significant byte first. It details the component depth, stride, and memory layout.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           16\n          offset:          0\n          pstride:         2\n          default rstride: RU4 (width * 2)\n          default size:    rstride (component0) * height\n\n        Image\n          default size:    size (component0)\n```\n\n----------------------------------------\n\nTITLE: Destroying Unreffed Relationship with Both References\nDESCRIPTION: Illustrates how to break an unreffed relationship when holding references to both objects, with checks for valid linkage.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nLOCK (object1);\nLOCK (object2);\nif (object1->refpointer == object2) {\n  object2->refpointer = NULL;\n  object1->refpointer = NULL;\n}\nelse {\n  .. objects are not linked ..\n}\nUNLOCK (object2);\nUNLOCK (object1);\n```\n\n----------------------------------------\n\nTITLE: Checking Pad Capabilities\nDESCRIPTION: Action to verify the currently set capabilities on a specified pad, with options to compare using intersection or equality.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_34\n\nLANGUAGE: validate-scenario\nCODE:\n```\ncheck-current-pad-caps,\n    [comparison-type=(string in [intersect, equal])],\n    [expected-caps=(caps,structure)],\n    [pad=(string)],\n    [target-element-factory-name=(string)],\n    [target-element-klass=(string)],\n    [target-element-name=(string)],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Notifying State Changes in GStreamer Pipeline to UI (C)\nDESCRIPTION: Defines the 'state_changed_cb' callback that listens for GStreamer pipeline state changes, formats a message describing the new state, and posts it to the Java UI if the pipeline root element changed. Checks the message source to avoid redundant notifications for child elements. Relies on GStreamer message parsing and the set_ui_message implementation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nstatic void state_changed_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  GstState old_state, new_state, pending_state;\n  gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n  /* Only pay attention to messages coming from the pipeline, not its children */\n  if (GST_MESSAGE_SRC (msg) == GST_OBJECT (data->pipeline)) {\n    gchar *message = g_strdup_printf(\"State changed to %s\", gst_element_state_get_name(new_state));\n    set_ui_message(message, data);\n    g_free (message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Build Option in Meson for GStreamer\nDESCRIPTION: This snippet defines a Meson build option for controlling whether tests should be built. It uses the 'option' function to create a feature option named 'tests' with a default value of 'auto'. This allows users to enable, disable, or automatically determine test building during the configuration process.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('tests', type : 'feature', value : 'auto', yield : true, description: 'Build tests')\n```\n\n----------------------------------------\n\nTITLE: Adding Child to Container in GStreamer\nDESCRIPTION: Command to add a child element to a container. Can create new child from asset or add existing child by name.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_12\n\nLANGUAGE: validate-scenario\nCODE:\n```\ncontainer-add-child,\n    [playback-time=(double,string)],\n    container-name=(string),\n    [child-name=(string)],\n    asset-id=(string),\n    [child-type=(string)];\n```\n\n----------------------------------------\n\nTITLE: Configuring QtGStreamer Player Build with CMake - CMake\nDESCRIPTION: This CMake script sets up the build environment for the QtGStreamer-based media player, managing dependencies, compiler flags, automoc, include directories, definitions, source sets, and target libraries. It conditionally handles legacy automoc support, ensures all relevant Qt and GStreamer-related flags and includes are propagated, and defines an executable linking all necessary Qt libraries. Requires at least CMake 2.8.6, Qt, and QtGStreamer installed. Output is a native player executable; changes may be required for other platforms or library versions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (${CMAKE_VERSION} VERSION_LESS \"2.8.6\")\\n    find_package(Automoc4 REQUIRED)\\nelse()\\n    set(CMAKE_AUTOMOC TRUE)\\n    macro(automoc4_add_executable)\\n        add_executable(${ARGV})\\n    endmacro()\\nendif()\\ninclude_directories(${QTGSTREAMER_INCLUDES} ${CMAKE_CURRENT_BINARY_DIR} ${QT_QTWIDGETS_INCLUDE_DIRS})\\nadd_definitions(${QTGSTREAMER_DEFINITIONS})\\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${QTGSTREAMER_FLAGS}\")\\nset(player_SOURCES main.cpp player.cpp mediaapp.cpp)\\nautomoc4_add_executable(player ${player_SOURCES})\\ntarget_link_libraries(player ${QTGSTREAMER_UI_LIBRARIES} ${QT_QTOPENGL_LIBRARIES} ${QT_QTWIDGETS_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Documenting I420 Planar YUV Format Layout (Markdown, Plaintext)\nDESCRIPTION: This Markdown documentation block explains the I420 planar YUV 4:2:0 image format, detailing the bit depth, per-plane stride, offset, and size calculations for each component (Y, U, V) and the whole image. The explanations help implementers correctly interpret or generate I420 pixel buffers. No code dependencies; relevant only as a spec for component arrangement and memory mapping. Inputs/outputs are conceptual layouts, not actual data; it’s used for reference in image handling routines.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\\n          depth:           8\\n          pstride:         1\\n          default offset:  0\\n          default rstride: RU4 (width)\\n          default size:    rstride (component0) * RU2 (height)\\n\\n        Component 1: U\\n          depth:           8\\n          pstride:         1\\n          default offset:  size (component0)\\n          default rstride: RU4 (RU2 (width) / 2)\\n          default size:    rstride (component1) * RU2 (height) / 2\\n\\n        Component 2: V\\n          depth            8\\n          pstride:         1\\n          default offset:  offset (component1) + size (component1)\\n          default rstride: RU4 (RU2 (width) / 2)\\n          default size:    rstride (component2) * RU2 (height) / 2\\n\\n        Image\\n          default size: size (component0) +\\n                        size (component1) +\\n                        size (component2)\n```\n\n----------------------------------------\n\nTITLE: flush: GStreamer Validation Scenario Action\nDESCRIPTION: Sends FLUSH_START and FLUSH_STOP events downstream from the specified element, typically an `appsrc`. Requires `target-element-name`. The optional `reset-time` parameter (default TRUE) determines if the flush resets running time. Execution can be timed using `playback-time` or triggered by `on-message`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_28\n\nLANGUAGE: validate-scenario\nCODE:\n```\n``` validate-scenario\nflush,\n    target-element-name=(string),\n    [reset-time=(boolean)],\n    [playback-time=(double,string)];\n```\n```\n\n----------------------------------------\n\nTITLE: GStreamer Component Documentation\nDESCRIPTION: List of GStreamer RTP/RTSP components with descriptions including core elements like rtpbin, rtpjitterbuffer and base classes for RTP payloading/depayloading.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/rtp.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* rtpbin - high-level RTP component for sending/receiving with RTCP support\n* rtpjitterbuffer - controls network jitter, reorders packets, handles retransmission\n* rtpptdemux - detects new payload types in RTP streams\n* rtpssrcdemux - detects new SSRCs in RTP streams\n* GstRTPBaseDepayload - base class for RTP depayloaders\n* GstRTPBasePayload - base class for RTP payloaders\n* GstRTPBaseAudioPayload - base class for audio RTP payloaders\n```\n\n----------------------------------------\n\nTITLE: Enabling libpng Use in OpenGL Plugin (Meson)\nDESCRIPTION: Defines a Meson feature option 'gl-png' to control the use of libpng within the GStreamer OpenGL plugin, likely for texture handling involving PNG images. Defaults to 'auto'.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_12\n\nLANGUAGE: meson\nCODE:\n```\noption('gl-png', type : 'feature', value : 'auto', description : 'Use libpng in OpenGL plugin')\n```\n\n----------------------------------------\n\nTITLE: Removing Assets from GES Project Action Syntax\nDESCRIPTION: Defines the syntax for removing an asset from the current GES project. This operation requires specifying both the asset ID and type to be removed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_2\n\nLANGUAGE: validate-scenario\nCODE:\n```\nremove-asset,\n    [playback-time=(double,string)],\n    id,\n    type;\n```\n\n----------------------------------------\n\nTITLE: Documenting RGB Packed RGB Format Layout Without Alpha (Markdown, Plaintext)\nDESCRIPTION: This block shows the RGB format, where each pixel’s red, green, and blue channels are stored sequentially in memory without unused or alpha bytes. The block diagram and parameter table allow implementers to interpret or create RGB image buffers, specifying per-channel offset and stride details. This snippet is especially relevant for formats with 3 bytes per pixel, which differ from the 4-byte alpha-supported layouts.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+ +--+--+--+\\n       |R0|G0|B0| |R1|G1|B1| ...\\n       +--+--+--+ +--+--+--+\\n\\n        Component 0: R\\n          depth:           8\\n          pstride:         3\\n          offset:          0\n```\n\n----------------------------------------\n\nTITLE: Creating RGBA Image from Row Pointers in libimagequant\nDESCRIPTION: Creates an image object from an array of pointers to bitmap rows. Allows handling reversed rows, different stride values, or bitmap fragments. Rows array and bitmap content must not be modified until the image is freed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nliq_image *liq_image_create_rgba_rows(liq_attr *attr, void* rows[], int width, int height, double gamma);\n```\n\nLANGUAGE: c\nCODE:\n```\nunsigned char *bitmap = …;\nvoid *rows = malloc(height * sizeof(void*));\nint bytes_per_row = width * 4 + padding; // stride\nfor(int i=0; i < height; i++) {\n    rows[i] = bitmap + i * bytes_per_row;\n}\nliq_image *img = liq_image_create_rgba_rows(attr, rows, width, height, 0);\n// …\nliq_image_destroy(img);\nfree(rows);\n```\n\n----------------------------------------\n\nTITLE: Selecting OpenGL APIs in Meson\nDESCRIPTION: Defines a Meson build option 'gl_api' as an array type. It allows selecting which OpenGL APIs (opengl, gles2) to build against, with 'auto' as the default. Multiple values can be provided as a comma-separated list.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_3\n\nLANGUAGE: meson\nCODE:\n```\n# OpenGL integration library options\noption('gl_api', type : 'array', choices : ['opengl', 'gles2', 'auto'], value : ['auto'],\n       description : 'A comma separated list of opengl APIs to enable building against')\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Root Directory for Android in CMake\nDESCRIPTION: This snippet sets the GStreamer root directory based on the target Android ABI. It ensures the correct architecture-specific GStreamer libraries are used for the build.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/examples/tutorials/android/android-tutorial-3/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID_ABI STREQUAL \"armeabi\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm\")\nelseif(ANDROID_ABI STREQUAL \"armeabi-v7a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/armv7\")\nelseif(ANDROID_ABI STREQUAL \"arm64-v8a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm64\")\nelseif(ANDROID_ABI STREQUAL \"x86\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86\")\nelseif(ANDROID_ABI STREQUAL \"x86_64\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86_64\")\nelse()\n    message(FATAL_ERROR \"Target arch ABI not supported: ${ANDROID_ABI}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Tracer Values in GStreamer (C)\nDESCRIPTION: Demonstrates how to define optional tracer values, such as a buffer's presentation timestamp, which may not always be present.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n\"buffer-pts\", GST_TYPE_STRUCTURE, gst_structure_new (\"value\",\n    \"type\", G_TYPE_GTYPE, G_TYPE_UINT64,\n    \"description\", G_TYPE_STRING, \"presentation timestamp of the buffer in ns\",\n    \"flags\", GST_TYPE_TRACER_VALUE_FLAGS, GST_TRACER_VALUE_FLAGS_OPTIONAL,\n    \"min\", G_TYPE_UINT64, G_GUINT64_CONSTANT (0),\n    \"max\", G_TYPE_UINT64, G_MAXUINT64,\n    NULL),\n```\n\n----------------------------------------\n\nTITLE: NLE Stack Segment and Timestamp Value Table - Plaintext\nDESCRIPTION: A detailed table depicting how various segment and buffer timestamp values propagate through different pads and stages of an nle stack in GStreamer. It presents the logical relationships of values like seg.time, seg.start, and buffer.timestamp at every boundary of nlesource and nleoperation elements, indicating how they relate to seek positions and coordinate mappings. This table is vital for low-level implementers or those tracing pipeline timing behavior.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n           nlesrc       nlesrc       nleop        nleop        nleop\n           internal     external     external     internal     external\n           src pad      src pad      sink pad     src pad      src pad\n\nseg.time   i            s            0            g (0)        g (0) + s\n\nseg.start  i            i            i            g (i)        g (i)\n\nbuffer.    T            T            T            g (T)        g (T)\ntimestamp\n------------------------------------------------------------------------\nstream     T            T            T            g (T)        g (T)\ntime                    - i          - i          - g (i)      - g (i)\n                        + s                       + g (0)      + g (0)\n                                                               + s\n------------------------------------------------------------------------\nseek       T            T            T            g (T - i)    g (T - i)\ntime                    - i          - i                       + s\n                        + s\n```\n\n----------------------------------------\n\nTITLE: Visualizing a GStreamer Bin with Ghostpad\nDESCRIPTION: ASCII diagram depicting a GStreamer bin containing two elements. It shows how the sink pad of one element is ghostpadded to the bin, allowing external connections.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n +---------------------------+\n | bin                       |\n |    +--------+   +-------+ |\n |    |        |   |       | |\n |  /sink     src-sink     | |\nsink  +--------+   +-------+ |\n +---------------------------+\n```\n\n----------------------------------------\n\nTITLE: Reporting Latencies from Elements (Shell)\nDESCRIPTION: Tracing is focused on the reported (output) latency for each pipeline element using the latency tracer's reported flag. The pipeline configuration remains similar to the previous element latency queries but highlights reported latencies. Output is specific logs of reported latencies for each element.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nGST_DEBUG=\\\"GST_TRACER:7\\\" GST_TRACERS=\\\"latency(flags=reported)\\\" gst-launch-1.0 \\\\\naudiotestsrc num-buffers=10 ! audioconvert ! volume volume=0.7 ! \\\\\nautoaudiosink\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Quality in libimagequant\nDESCRIPTION: Returns the maximum quality bound previously set by liq_set_quality().\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nint liq_get_max_quality(liq_attr* attr);\n```\n\n----------------------------------------\n\nTITLE: Bootstrap/Package Staging for CI Setups - Shell\nDESCRIPTION: Splits bootstrapping and packaging into CI-friendly stages to allow caching and non-root package building. \\\"fetch-bootstrap\\\" and \\\"fetch-package\\\" download required resources and sources; system setup and toolchain/build-tool installation is controlled by command-line arguments for reproducible CI builds. Ensures clean, non-interactive build jobs follow only after environment preparation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled fetch-bootstrap\\n$ ./cerbero-uninstalled fetch-package gstreamer-1.0\\n# This will use \\\"sudo\\\"\\n$ ./cerbero-uninstalled bootstrap --system=yes --toolchains=no --build-tools=no --offline\\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled bootstrap --system=no --toolchains=yes --build-tools=yes --offline\\n# When building a non-tagged commit, this will update the git repos for all gstreamer recipes\\n$ ./cerbero-uninstalled fetch-package gstreamer-1.0\\n$ ./cerbero-uninstalled package gstreamer-1.0 --offline\\n```\n```\n\n----------------------------------------\n\nTITLE: Tracing Combined Pipeline, Element, and Reported Latencies in GStreamer (Shell)\nDESCRIPTION: Runs a multi-element audio pipeline and directs the latency tracer to report statistics for pipeline-level, per-element, and reported (output) latencies by supplying a flags list. The command demonstrates using a more complex audio path and tracer options aggregation. Outputs all available latency statistics for comprehensive analysis.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nGST_DEBUG=\\\"GST_TRACER:7\\\" \\\\\nGST_TRACERS=\\\"latency(flags=pipeline+element+reported)\\\" gst-launch-1.0 \\\\\nalsasrc num-buffers=20 ! flacenc ! identity ! \\\\\nfakesink\n```\n\n----------------------------------------\n\nTITLE: Starting GDB Debugging Session\nDESCRIPTION: Command to launch a GStreamer application within GDB for debugging purposes\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: gdb\nCODE:\n```\ngdb (gst-application)\n```\n\n----------------------------------------\n\nTITLE: Listing All Tests in a Custom Testsuite\nDESCRIPTION: Command to list all available tests in a custom testsuite without running them.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-launcher.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-launcher --testsuites-dir=/path/to/testsuite_folder/ testsuite -L\n```\n\n----------------------------------------\n\nTITLE: Generating and Plotting CPU Stats from GStreamer Playback (Shell)\nDESCRIPTION: Runs a GStreamer playback pipeline with CPU and stats tracers enabled, appending trace output to a log file. After execution, a plotting script processes the trace logs, generating PNG plots of timestamp and CPU load data, and opens them with eog. Requires /usr/bin/gst-play-1.0, the gst-plot-traces.sh plotting script, gnuplot, and eog. This supports quick, visual CPU utilization analysis for media playback pipelines.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nGST_DEBUG=\\\"GST_TRACER:7\\\" GST_TRACERS=\\\"stats;rusage\\\" \\\\\nGST_DEBUG_FILE=trace.log /usr/bin/gst-play-1.0 $HOME/Videos/movie.mp4 &&\n./scripts/gst-plot-traces.sh --format=png | gnuplot eog trace.log.*.png\n```\n\n----------------------------------------\n\nTITLE: Modifying the GStreamer Plugin Path for Cross-Compiled Environments (Shell)\nDESCRIPTION: This snippet shows how to use the gst-env.py script with the --sysroot option to remove the build host root filesystem path from GStreamer plugin paths during cross-compilation. This is useful when using a shared root filesystem (e.g., via NFS/SSHFS) between the build and target hosts. Requires the path to the rootfs created during the cross-compilation setup. The script must be run on the target machine after sharing the build output.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./gst-env.py --sysroot /path/to/rootfs-on-cross-compile-host\n```\n\n----------------------------------------\n\nTITLE: Running the GstValidate Default Testsuite\nDESCRIPTION: Command to run the default GstValidate testsuite which requires git-lfs for the media samples.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-launcher.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-launcher validate\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecated GLib and GObject Build Options for Backward Compatibility (Python)\nDESCRIPTION: Describes build options that are deprecated but still provided for backward compatibility with older build scripts. Options like 'gobject-cast-checks', 'glib-asserts', and 'glib-checks' are linked to newer options ('glib_debug', 'glib_assert', 'glib_checks') via the 'deprecated' attribute, allowing smooth transitions for package maintainers. These are set to 'feature' type with specific default values, advising on development versus stable builds.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-ugly/meson_options.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\noption('gobject-cast-checks', type : 'feature', value : 'auto', yield : true,\n       description: 'Enable run-time GObject cast checks (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_debug')\noption('glib-asserts', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib assertion (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_assert')\noption('glib-checks', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib checks such as API guards (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_checks')\n```\n\n----------------------------------------\n\nTITLE: Adding Audio-Only Clip\nDESCRIPTION: Command to add only the audio track from a media file using the track-types option.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/ges-launch.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nges-launch-1.0 --track-types=audio +clip /path/to/media\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in C\nDESCRIPTION: Illustrates the C function `putenv` used to set environment variables at runtime. This example shows the syntax for setting a variable named 'VAR' to the value '/foo/bar'. This method is suggested for setting variables like `GST_PLUGIN_SYSTEM_PATH` required by the relocated GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/mac-osx.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nputenv(\"VAR=/foo/bar\")\n```\n\n----------------------------------------\n\nTITLE: Activating and Handling Pad Scheduling Modes with GStreamer in C\nDESCRIPTION: These snippets demonstrate how to define and set pad activation functions in a GStreamer element, check upstream scheduling capabilities, and decide whether to activate a pad in push or pull mode. The code includes registration of the element type, setting custom activation callbacks, performing scheduling queries, and starting or stopping tasks according to the active scheduling mode. Dependencies include the GStreamer library and appropriate initialization macros. Key parameters involve the GstPad to activate, the requested scheduling mode, and an active flag for controlling task behavior. Inputs are pad and parent objects; outputs are boolean status results. All required GStreamer structures and constants (pads, queries, scheduling modes, functions) must be present. This pattern is required for elements that support both modes or that want to drive the pipeline in pull-mode.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/scheduling.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include \\\"filter.h\\\"\n#include <string.h>\n\nstatic gboolean gst_my_filter_activate      (GstPad      * pad,\n                                             GstObject   * parent);\nstatic gboolean gst_my_filter_activate_mode (GstPad      * pad,\n                                             GstObject   * parent,\n                                             GstPadMode    mode,\n                         gboolean      active);\nstatic void gst_my_filter_loop      (GstMyFilter * filter);\n\nG_DEFINE_TYPE (GstMyFilter, gst_my_filter, GST_TYPE_ELEMENT);\nGST_ELEMENT_REGISTER_DEFINE(my_filter, \\\"my-filter\\\", GST_RANK_NONE, GST_TYPE_MY_FILTER);\n\nstatic void\ngst_my_filter_init (GstMyFilter * filter)\n{\n\n[..]\n\n  gst_pad_set_activate_function (filter->sinkpad, gst_my_filter_activate);\n  gst_pad_set_activatemode_function (filter->sinkpad,\n      gst_my_filter_activate_mode);\n\n\n[..]\n}\n\n[..]\n\nstatic gboolean\ngst_my_filter_activate (GstPad * pad, GstObject * parent)\n{\n  GstQuery *query;\n  gboolean pull_mode;\n\n  /* first check what upstream scheduling is supported */\n  query = gst_query_new_scheduling ();\n\n  if (!gst_pad_peer_query (pad, query)) {\n    gst_query_unref (query);\n    goto activate_push;\n  }\n\n  /* see if pull-mode is supported */\n  pull_mode = gst_query_has_scheduling_mode_with_flags (query,\n      GST_PAD_MODE_PULL, GST_SCHEDULING_FLAG_SEEKABLE);\n  gst_query_unref (query);\n\n  if (!pull_mode)\n    goto activate_push;\n\n  /* now we can activate in pull-mode. GStreamer will also\n   * activate the upstream peer in pull-mode */\n  return gst_pad_activate_mode (pad, GST_PAD_MODE_PULL, TRUE);\n\nactivate_push:\n  {\n    /* something not right, we fallback to push-mode */\n    return gst_pad_activate_mode (pad, GST_PAD_MODE_PUSH, TRUE);\n  }\n}\n\nstatic gboolean\ngst_my_filter_activate_pull (GstPad    * pad,\n                 GstObject * parent,\n                 GstPadMode  mode,\n                 gboolean    active)\n{\n  gboolean res;\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  switch (mode) {\n    case GST_PAD_MODE_PUSH:\n      res = TRUE;\n      break;\n    case GST_PAD_MODE_PULL:\n      if (active) {\n        filter->offset = 0;\n        res = gst_pad_start_task (pad,\n            (GstTaskFunction) gst_my_filter_loop, filter, NULL);\n      } else {\n        res = gst_pad_stop_task (pad);\n      }\n      break;\n    default:\n      /* unknown scheduling mode */\n      res = FALSE;\n      break;\n  }\n  return res;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Silent GStreamer Installation to Custom Directory\nDESCRIPTION: Command to perform an unattended GStreamer installation to a specified directory using msiexec. Shows a progress dialog but requires no user interaction.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/windows.md#2025-04-23_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nmsiexec /passive INSTALLDIR=C:\\Desired\\Folder /i gstreamer-1.0-x86-1.8.1.msi\n```\n\n----------------------------------------\n\nTITLE: Adding Assets to GES Project Action Syntax\nDESCRIPTION: Defines the syntax for adding an asset to the current GES project. This allows integrating new media assets into the editing project by specifying the asset ID and type.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_1\n\nLANGUAGE: validate-scenario\nCODE:\n```\nadd-asset,\n    [playback-time=(double,string)],\n    id,\n    type;\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Cerbero Build Environment - Shell\nDESCRIPTION: Initializes the build environment by running the Cerbero bootstrap command via the \\\"cerbero-uninstalled\\\" script. Installs required build tools and dependencies using the package manager, and downloads toolchains where necessary. Requires Python 3.6+, Cerbero source code, and on Linux/macOS, sudo privileges. The command will configure the environment for subsequent builds.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled bootstrap\\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Ninja with pip on Windows\nDESCRIPTION: Use pip3 to install Ninja, which will download the compiled binary and place it in the Scripts directory of your Python installation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npip3 install ninja\n```\n\n----------------------------------------\n\nTITLE: Enabling GLib Debug Infrastructure in Meson\nDESCRIPTION: Defines a Meson feature option 'glib_debug' to enable GLib's debugging infrastructure, potentially including extra checks and logging. Defaults to 'auto'. 'yield: true' propagates the setting.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_19\n\nLANGUAGE: meson\nCODE:\n```\noption('glib_debug', type : 'feature', value : 'auto', yield : true, description : 'Enable GLib debug infrastructure (see docs/macros.txt)')\n```\n\n----------------------------------------\n\nTITLE: Describing A420 Planar 4:4:2:0 AYUV Layout in Plaintext\nDESCRIPTION: This snippet explains the storage structure for the A420 planar format, listing the four channels (Y, U, V, A), their depths and strides, and offset calculations for placing components consecutively in memory. Used in low-level buffer processing for AYUV data, it requires knowledge of each channel's size, input dimensions, and the generic stride computation rules. Outputs are guidance for buffer segmentation and minimum required buffer sizes per image.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_35\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * RU2 (height)\n\n        Component 1: U\n          depth            8\n          pstride:         1\n          default offset:  size (component0)\n          default rstride: RU4 (RU2 (width) / 2)\n          default size:    rstride (component1) * (RU2 (height) / 2)\n\n        Component 2: V\n          depth:           8\n          pstride:         1\n          default offset:  size (component0) + size (component1)\n          default rstride: RU4 (RU2 (width) / 2)\n          default size:    rstride (component2) * (RU2 (height) / 2)\n\n        Component 3: A\n          depth:           8\n          pstride:         1\n          default offset:  size (component0) + size (component1) +\n                           size (component2)\n          default rstride: RU4 (width)\n          default size:    rstride (component3) * RU2 (height)\n\n        Image\n          default size:    size (component0) +\n                           size (component1) +\n                           size (component2) +\n                           size (component3)\n```\n\n----------------------------------------\n\nTITLE: Setting Last Index Transparent in C\nDESCRIPTION: Configures the sorting of alpha colors in the palette. Non-zero values move the completely transparent color to the end of the palette.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nliq_set_last_index_transparent(liq_attr* attr, int is_last);\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Helper Script Path in Meson\nDESCRIPTION: Defines a Meson build option 'install_plugins_helper' of type string. This option allows specifying a path to a distribution-specific helper script that can be called to install missing GStreamer plugins. It defaults to an empty string.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_1\n\nLANGUAGE: meson\nCODE:\n```\noption('install_plugins_helper', type: 'string', value: '',\n       description: 'Path of distro helper script to call to install missing plugins')\n```\n\n----------------------------------------\n\nTITLE: Implementing GstVideoMeta Structure in C\nDESCRIPTION: Complex video metadata structure implementation with support for multiple planes, custom mapping methods, and video-specific properties.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/meta.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define GST_VIDEO_MAX_PLANES 4\n\nstruct GstVideoMeta {\n  GstMeta       meta;\n\n  GstBuffer         *buffer;\n\n  GstVideoFlags      flags;\n  GstVideoFormat     format;\n  guint              id\n  guint              width;\n  guint              height;\n\n  guint              n_planes;\n  gsize              offset[GST_VIDEO_MAX_PLANES];   /* offset in the buffer memory region of the\n                                                    * first pixel. */\n  gint               stride[GST_VIDEO_MAX_PLANES];   /* stride of the image lines. Can be negative when\n                                                    * the image is upside-down */\n\n  gpointer (*map)    (GstVideoMeta *meta, guint plane, gpointer * data, gint *stride,\n                      GstMapFlags flags);\n  gboolean (*unmap)  (GstVideoMeta *meta, guint plane, gpointer data);\n};\n\ngpointer gst_meta_video_map   (GstVideoMeta *meta, guint plane, gpointer * data,\n                               gint *stride, GstMapflags flags);\ngboolean gst_meta_video_unmap (GstVideoMeta *meta, guint plane, gpointer data);\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiview Frames to GL Textures in GStreamer\nDESCRIPTION: This code snippet describes the process of uploading raw multiview video frames to GL textures in GStreamer. It involves splitting packed frames into separate GL textures and attaching multiple GstGLMemory objects to the GstBuffer. The process is currently implemented in two render passes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stereo-multiview-video.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSplit packed frames into separate GL textures when uploading, and\nattach multiple `GstGLMemory` to the `GstBuffer`. The multiview-mode and\nmultiview-flags fields in the caps should change to reflect the conversion\nfrom one incoming `GstMemory` to multiple `GstGLMemory`, and change the\nwidth/height in the output info as needed.\n\nThis is (currently) targetted as 2 render passes - upload as normal\nto a single stereo-packed RGBA texture, and then unpack into 2\nsmaller textures, output with `GST_VIDEO_MULTIVIEW_MODE_SEPARATED`, as\n2 `GstGLMemory` attached to one buffer. We can optimise the upload later\nto go directly to 2 textures for common input formats.\n```\n\n----------------------------------------\n\nTITLE: Identifying Progressive Video Buffers in GStreamer\nDESCRIPTION: This snippet explains how to identify a progressive video buffer in GStreamer using the GstVideoInfo structure.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/interlaced-video.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIf the interlace mode in the video info corresponding to a buffer is\n**\"progressive\"**, then the buffer is progressive.\n```\n\n----------------------------------------\n\nTITLE: Specifying Text Encoding Byte Values for ID3v2 Frames (Text)\nDESCRIPTION: Lists the byte values used within applicable ID3v2 frames to indicate the character encoding of text strings. It covers ISO-8859-1 ($00, null-terminated), UTF-16 with BOM ($01, double-null terminated), UTF-16BE without BOM ($02, double-null terminated), and UTF-8 ($03, null-terminated).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-structure.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$00   ISO-8859-1 [ISO-8859-1]. Terminated with $00.\n$01   UTF-16 [UTF-16] encoded Unicode [UNICODE] with BOM. All\n      strings in the same frame SHALL have the same byteorder.\n      Terminated with $00 00.\n$02   UTF-16BE [UTF-16] encoded Unicode [UNICODE] without BOM.\n      Terminated with $00 00.\n$03   UTF-8 [UTF-8] encoded Unicode [UNICODE]. Terminated with $00.\n```\n\n----------------------------------------\n\nTITLE: Running GStreamer Pipeline with LCEVC Decoder - Shell\nDESCRIPTION: This command creates a GStreamer pipeline for playing back an MP4 file with LCEVC decoding. It assembles standard GStreamer elements for reading a file, demuxing, H.264 parsing and decoding, LCEVC decoding, and video display. Key parameters: the input file path after 'location='. Prerequisites: GStreamer with all necessary plugins including lcevcdec. Output: Window showing decoded video. Limitation: file must exist at the specified path.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/lcevcdecoder/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ gst-launch-1.0 filesrc location=/home/user/lcevc-sample.mp4 ! qtdemux ! h264parse ! openh264dec ! lcevcdec ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Setting URI for GStreamer Source Element in C\nDESCRIPTION: Sets the URI property of the uridecodebin element to specify the media file to be played.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/dynamic-pipelines.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ng_object_set (data.source, \"uri\", \"https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\", NULL);\n```\n\n----------------------------------------\n\nTITLE: GStreamer LFO Control Range Example\nDESCRIPTION: Example showing the current value ranges for LFO control sources.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/controller.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[-1.0 and 1.0]\n```\n\n----------------------------------------\n\nTITLE: Building libimagequant Library using Make (Unix)\nDESCRIPTION: This command compiles the `libimagequant` library on Unix-like systems using Make. It changes the current directory to `lib` and executes the Makefile found there, typically producing a static library file (e.g., `libimagequant.a`). Requires Make (or `gmake` on BSD) to be installed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake -C lib\n```\n\n----------------------------------------\n\nTITLE: Building an Individual Recipe and Dependencies - Shell\nDESCRIPTION: Builds a specified recipe from Cerbero, including all its dependencies. The placeholder \\\"<recipe_name>\\\" must be replaced with a valid recipe identifier. Outputs built artifacts per recipe; can be used iteratively for multiple targets.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled build <recipe_name>\\n```\n```\n\n----------------------------------------\n\nTITLE: Conceptualizing GStreamer Collections for Multi-Program MPEG-TS (Initial)\nDESCRIPTION: Conceptual diagram representing the initial hierarchy of `GstStreamCollection` objects for a multi-program MPEG-TS stream. `tsdemux` exposes a 'Programs' collection and initially outputs streams for 'BBC1'. `decodebin3` then creates a collection for the decoded BBC1 streams.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-selection.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n    [ Collection 1 ]         [ Collection 2     ]        [ Collection 3    ]\n    [  (tsdemux)   ]         [   (tsdemux)      ]        [ (decodebin)     ]\n    [ id:Programs  ]<-\\      [ id:BBC1          ]<-\\     [ id:BBC1-decoded ]\n    [ upstream:nil ]   \\-----[ upstream:Programs]   \\----[ upstream:BBC1   ]\n    [              ]         [                  ]        [                 ]\n    [ \"BBC1\" (C)   ]         [ id:\"bbcvideo\"(V) ]        [ id:\"bbcvideo\"(V)]\n    [ \"ITV\"  (C)   ]         [ id:\"bbcaudio\"(A) ]        [ id:\"bbcaudio\"(A)]\n    [ \"NBC\"  (C)   ]         [                  ]        [                 ]\n```\n\n----------------------------------------\n\nTITLE: Converting GStreamer Boolean Function to Qt Class Method\nDESCRIPTION: Example showing how a C-style GStreamer boolean function is converted to a Qt-style class method using proper namespace and camelCase naming conventions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/qt-gstreamer-vs-c-gstreamer.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngboolean gst_caps_is_emtpy(const GstCaps *caps);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace QGst {\n    class Caps {\n        bool isEmpty() const;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example GPL Exception Clause for GStreamer Compatibility\nDESCRIPTION: A sample exception clause that can be added to GPL-licensed applications to allow usage with non-GPL compatible GStreamer plugins. This example uses the Totem video player project as a reference.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/licensing.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe developers of the Totem video player hereby grants permission for non-GPL compatible GStreamer plugins to be used and distributed together with GStreamer and Totem. This permission is above and beyond the permissions granted by the GPL license by which Totem is covered. If you modify this code, you may extend this exception to your version of the code, but you are not obligated to do so. If you do not wish to do so, delete this exception statement from your version.\n```\n\n----------------------------------------\n\nTITLE: Timeline to Internal Time Translation\nDESCRIPTION: Formula for translating timeline time to internal source coordinate time\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nF (t - start) + in-point\n```\n\n----------------------------------------\n\nTITLE: Implementing Short-Term QoS Correction in GStreamer (C)\nDESCRIPTION: This C code snippet outlines an algorithm for performing short-term QoS corrections based on received QoS data. It retrieves the stored QoS values (proportion, timestamp, diff) under a lock. It then calculates an `earliest_time` threshold: if the previous buffer was late (`qos_diff > 0`), the threshold is `qos_timestamp + 2 * qos_diff + frame_duration`; otherwise, it's `qos_timestamp + qos_diff`. Buffers with timestamps earlier than `earliest_time` are considered likely to be too late and are candidates for dropping (`goto drop_buffer`).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/qos.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\n  [...]\n\n  GST_OBJECT_LOCK (dec);\n  qos_proportion = priv->qos_proportion;\n  qos_timestamp = priv->qos_timestamp;\n  qos_diff = priv->qos_diff;\n  GST_OBJECT_UNLOCK (dec);\n\n  /* calculate the earliest valid timestamp */\n  if (G_LIKELY (GST_CLOCK_TIME_IS_VALID (qos_timestamp))) {\n    if (G_UNLIKELY (qos_diff > 0)) {\n      earliest_time = qos_timestamp + 2 * qos_diff + frame_duration;\n    } else {\n      earliest_time = qos_timestamp + qos_diff;\n    }\n  } else {\n    earliest_time = GST_CLOCK_TIME_NONE;\n  }\n\n  /* compare earliest_time to running-time of next buffer */\n  if (earliest_time > timestamp)\n    goto drop_buffer;\n\n  [...]\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining GESAssetTimelineObject Method in C\nDESCRIPTION: API draft for the GESAssetTimelineObject subclass, which includes a method to get supported track types for a timeline object asset.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/asset.txt#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nGESTrackType\nges_asset_timeline_object_get_track_types (GESAssetTimelineObject *asset);\n```\n\n----------------------------------------\n\nTITLE: GStreamer Transcoding Validation Example\nDESCRIPTION: Example of using gst-validate-transcoding-1.0 for H264/AAC transcoding with validation\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/validate/docs/validate-usage.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-transcoding-1.0 -o 'video/quicktime,variant=iso:video/x-h264:audio/mpeg,mpegversion=4' \\\n      file://path/to/some/media/file file:///path/to/destination_h264_aac.qt\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom GstValidate Testsuite in Python\nDESCRIPTION: A comprehensive Python implementation of a custom GstValidate testsuite that configures test scenarios, media formats, generators, and blacklists for validation testing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-launcher.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nThe GstValidate custom testsuite\n\"\"\"\n\nimport os\nfrom launcher.baseclasses import MediaFormatCombination\nfrom launcher.apps.gstvalidate import *\nTEST_MANAGER = \"validate\"\n\nKNOWN_ISSUES = {}\n\ndef setup_tests(test_manager, options):\n    print(\"Setting up the custom testsuite\")\n    assets_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), \".\", \"samples_files\"))\n    options.add_paths(assets_dir)\n\n    # This step will register default data for the test manager:\n    # - scenarios such as `play_15s`, `reverse_playback` etc.\n    # - encoding formats such as \"mp4,h264,mp3\" etc.\n    # - blacklist such as dash.media_check.*\n    # - test generators:\n    #   - GstValidatePlaybinTestsGenerator\n    #   - GstValidateMediaCheckTestsGenerator\n    #   - GstValidateTranscodingTestsGenerator\n    # This 'defaults' can be found in 'gst-devtools/validate/launcher/apps/gstvalidate.py#register_defaults'\n    # test_manager.register_defaults()\n\n    # Add scenarios\n    scenarios = []\n    scenarios.append(\"play_15s\")\n    scenarios.append(\"seek_backward\")\n    test_manager.set_scenarios(scenarios)\n\n    # Add encoding formats used by the transcoding generator\n    test_manager.add_encoding_formats([\n            MediaFormatCombination(\"mp4\", \"mp3\", \"h264\"),])\n\n    # Add generators\n    # GstValidatePlaybinTestsGenerator needs at least one media file\n    test_manager.add_generators([GstValidateMediaCheckTestsGenerator(test_manager)])\n    # GstValidatePlaybinTestsGenerator needs at least one scenario\n    test_manager.add_generators([GstValidatePlaybinTestsGenerator(test_manager)])\n    # GstValidateTranscodingTestsGenerator needs at least one MediaFormatCombination\n    test_manager.add_generators([GstValidateTranscodingTestsGenerator(test_manager)])\n\n    # list of combo to blacklist tests. Here it blacklists all tests with playback.seek_backward\n    test_manager.set_default_blacklist([\n            (\"custom_testsuite.file.playback.seek_backward.*\",\n             \"Not supported by this testsuite.\"),])\n\n    # you can even pass known issues to bypass an existing error in your custom testsuite\n    test_manager.add_expected_issues(KNOWN_ISSUES)\n    return True\n```\n\n----------------------------------------\n\nTITLE: Example GStreamer 64-bit MSVC Runtime Installer Filename\nDESCRIPTION: This shows the typical filename pattern for the GStreamer runtime installer specific to the 64-bit MSVC toolchain. Users download this file to install the necessary components to run GStreamer applications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngstreamer-1.0-msvc-x86_64-{VERSION}.msi\n```\n\n----------------------------------------\n\nTITLE: Configuring D3D12 Plugin Options in Meson\nDESCRIPTION: Defines an option to enable or disable Windows Graphics Capture API support in the Direct3D 12 plugin for GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_11\n\nLANGUAGE: meson\nCODE:\n```\n# D3D12 plugin options\noption('d3d12-wgc', type : 'feature', value : 'auto', description : 'Windows Graphics Capture API support in d3d12 plugin')\n```\n\n----------------------------------------\n\nTITLE: Parsing Group Identification Registration Frame in ID3v2\nDESCRIPTION: Defines the structure for the 'Group ID registration' frame (GRID) in ID3v2 tags. This frame enables grouping of otherwise unrelated frames, particularly useful for frame signing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n<Header for 'Group ID registration', ID: \"GRID\">\nOwner identifier      <text string> $00\nGroup symbol          $xx\nGroup dependent data  <binary data>\n```\n\n----------------------------------------\n\nTITLE: Buffer Timestamp to Stream Time Conversion Formula - Plaintext\nDESCRIPTION: Provides the canonical formula for mapping a buffer timestamp within a segment to its corresponding GStreamer stream time as used by position queries, seeking, and control synchronization. The calculation depends on values from the GstSegment structure. This invariant is central to reasoning about control timelines and effect processing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n    stream-time = buffer.timestamp - seg.start + seg.time\n```\n\n----------------------------------------\n\nTITLE: Implementing GstMiniObject Free Function in C\nDESCRIPTION: Example of a free function implementation that handles cleanup and memory deallocation for the custom object.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/miniobject.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic void\n_my_object_free (MyObject *obj)\n{\n  /* other cleanup */\n  ...\n\n  g_free (obj);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Features and Enabling Specific Plugins\nDESCRIPTION: Command to disable all optional features and selectively enable specific plugins and tools.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmeson -Dauto_features=disabled -Dgstreamer:tools=enabled -Dbad=enabled -Dgst-plugins-bad:openh264=enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Build Features in Meson\nDESCRIPTION: Defines several common Meson feature options (examples, tests, tools, introspection, nls, orc, qt5) used across the GStreamer build. These control the inclusion of examples, tests, command-line tools, GObject introspection data, translations (NLS), ORC optimization, and Qt5 examples. The 'yield: true' suggests these options might influence subproject configurations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_15\n\nLANGUAGE: meson\nCODE:\n```\n# Common feature options\noption('examples', type : 'feature', value : 'auto', yield : true)\noption('tests', type : 'feature', value : 'auto', yield : true)\noption('tools', type : 'feature', value : 'auto', yield : true)\noption('introspection', type : 'feature', value : 'auto', yield : true, description : 'Generate gobject-introspection bindings')\noption('nls', type : 'feature', value : 'auto', yield: true, description : 'Enable native language support (translations)')\noption('orc', type : 'feature', value : 'auto', yield : true)\noption('qt5', type : 'feature', value : 'auto', yield : true, description : 'Qt5 QML examples')\n```\n\n----------------------------------------\n\nTITLE: Describing YUV9 Planar 4:1:0 YUV Layout in Plaintext\nDESCRIPTION: The YUV9 layout definition outlines three components (Y, U, V), their bit depths, and specifics for planar subsampling. The snippet lists stride calculations and offsets to support direct planar buffer parsing. It supports formats with heavy chroma subsampling, requiring careful size calculation for buffer management functions in GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_37\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * height\n\n        Component 1: U\n          depth            8\n          pstride:         1\n          default offset:  size (component0)\n          default rstride: RU4 (RU4 (width) / 4)\n          default size:    rstride (component1) * (RU4 (height) / 4)\n\n        Component 2: V\n          depth:           8\n          pstride:         1\n          default offset:  offset (component1) + size (component1)\n          default rstride: RU4 (RU4 (width) / 4)\n          default size:    rstride (component2) * (RU4 (height) / 4)\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Ownership for Image in C\nDESCRIPTION: Passes ownership of bitmap and/or rows memory to the liq_image object. Allows automatic memory management by the library.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_25\n\nLANGUAGE: c\nCODE:\n```\nliq_error liq_image_set_memory_ownership(liq_image *image, int ownership_flags);\n```\n\n----------------------------------------\n\nTITLE: Defining Introspection Feature Option in Meson\nDESCRIPTION: Defines a Meson build option named 'introspection' of type 'feature'. It defaults to 'auto', yields its value for subprojects, and includes a description. This option controls the generation of GObject Introspection bindings, which allow GStreamer libraries to be used from other languages.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_3\n\nLANGUAGE: meson\nCODE:\n```\noption('introspection', type : 'feature', value : 'auto', yield : true,\n       description : 'Generate gobject-introspection bindings')\n```\n\n----------------------------------------\n\nTITLE: Conceptualizing GStreamer Collections for Multi-Program MPEG-TS (After Switch)\nDESCRIPTION: Conceptual diagram showing the `GstStreamCollection` hierarchy after switching to the 'ITV' program in a multi-program MPEG-TS stream. `tsdemux` updates its collections and output pads, and `decodebin3` processes and exposes the decoded streams from ITV.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-selection.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n    [ Collection 1 ]         [ Collection 4     ]        [ Collection 5    ]\n    [  (tsdemux)   ]         [   (tsdemux)      ]        [ (decodebin)     ]\n    [ id:Programs  ]<-\\      [ id:ITV           ]<-\\     [ id:ITV-decoded  ]\n    [ upstream:nil ]   \\-----[ upstream:Programs]   \\----[ upstream:ITV    ]\n    [              ]         [                  ]        [                 ]\n    [ \"BBC1\" (C)   ]         [ id:\"itvvideo\"(V) ]        [ id:\"itvvideo\"(V)]\n    [ \"ITV\"  (C)   ]         [ id:\"itvaudio\"(A) ]        [ id:\"itvaudio\"(A)]\n    [ \"NBC\"  (C)   ]         [                  ]        [                 ]\n```\n\n----------------------------------------\n\nTITLE: Pipeline Structure for Video Seek Example\nDESCRIPTION: Simple GStreamer pipeline structure showing the elements involved in video seeking\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/segments.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfilesrc ! avidemux ! videodecoder ! videosink\n```\n\n----------------------------------------\n\nTITLE: Inspecting GStreamer Validate Action Types Using Command Line\nDESCRIPTION: Command to inspect and get details about specific action types in GStreamer validate, specifically showing how to query information about the appsrc-push action type.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-1.0 --inspect-action-type appsrc-push\n```\n\n----------------------------------------\n\nTITLE: JNI Native Method Registration for GStreamer Android Tutorial\nDESCRIPTION: Defines the mapping between Java method names and native C implementations. This array lists all the native methods available to the Java application with their corresponding signatures and function pointers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_31\n\nLANGUAGE: c\nCODE:\n```\n/* List of implemented native methods */\nstatic JNINativeMethod native_methods[] = {\n  { \"nativeInit\", \"()V\", (void *) gst_native_init},\n  { \"nativeFinalize\", \"()V\", (void *) gst_native_finalize},\n  { \"nativeSetUri\", \"(Ljava/lang/String;)V\", (void *) gst_native_set_uri},\n  { \"nativePlay\", \"()V\", (void *) gst_native_play},\n  { \"nativePause\", \"()V\", (void *) gst_native_pause},\n  { \"nativeSetPosition\", \"(I)V\", (void*) gst_native_set_position},\n  { \"nativeSurfaceInit\", \"(Ljava/lang/Object;)V\", (void *) gst_native_surface_init},\n  { \"nativeSurfaceFinalize\", \"()V\", (void *) gst_native_surface_finalize},\n  { \"nativeClassInit\", \"()Z\", (void *) gst_native_class_init}\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Output of GStreamer Plugin Introspection\nDESCRIPTION: This snippet shows a typical output from the gst-inspect command when run on a GStreamer plugin. It lists the capabilities and elements provided by the plugin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/missing-plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndecoder-audio/x-vorbis\nelement-vorbisdec\nelement-vorbisenc\nelement-vorbisparse\nelement-vorbistag\nencoder-audio/x-vorbis\n```\n\n----------------------------------------\n\nTITLE: LibFuzzer Function Signature Reference\nDESCRIPTION: Reference to the standard LibFuzzer function signature pattern used in the fuzzing targets.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/ci/fuzzing/README.txt#2025-04-23_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://llvm.org/docs/LibFuzzer.html\n```\n\n----------------------------------------\n\nTITLE: Selecting OpenGL Platforms in Meson\nDESCRIPTION: Defines a Meson build option 'gl_platform' as an array type. It enables selection of OpenGL platforms (like glx, egl, cgl, wgl, eagl) to build against, defaulting to 'auto'. Multiple platforms can be specified.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_4\n\nLANGUAGE: meson\nCODE:\n```\noption('gl_platform', type : 'array',\n       choices : ['glx', 'egl', 'cgl', 'wgl', 'eagl', 'auto'], value : ['auto'],\n       description : 'A comma separated list of opengl platforms to enable building against')\n```\n\n----------------------------------------\n\nTITLE: Describing YUY2 Packed YUV Format Block and Layout (Markdown, Plaintext)\nDESCRIPTION: This Markdown code block and accompanying table convey the pixel and component arrangement for YUY2, a packed 4:2:2 YUV format. The visual ASCII block denotes how Y, U, and V components are interleaved, and tabular component info provides per-component bit depth, stride, and offset for processing pixel buffers. It’s intended for reference when parsing buffers or mapping memory for video processing tasks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |Y0|U0|Y1|V0| |Y2|U2|Y3|V2| ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: Y\\n          depth:           8\\n          pstride:         2\\n          offset:          0\\n\\n        Component 1: U\\n          depth:           8\\n          offset:          1\\n          pstride:         4\\n\\n        Component 2: V\\n          depth            8\\n          offset:          3\\n          pstride:         4\\n\\n        Image\\n          default rstride: RU4 (width * 2)\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Documenting freq Property for GStreamer Audio Test Source\nDESCRIPTION: Describes the 'freq' property for an audio test source in GStreamer. It specifies the frequency of the test signal and notes that the sample rate must be at least twice the frequency.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/libs/GESAudioTestSource-children-props.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### `freq`\n\nFrequency of test signal. The sample rate needs to be at least 2 times higher.\n\nValue type: #gdouble\n\nSee #audiotestsrc:freq\n```\n\n----------------------------------------\n\nTITLE: Visual Studio Property Sheet Identifier for DDK Configuration\nDESCRIPTION: The identifier ('config') for a property sheet found within a Visual Studio project's Property Manager view. Editing this property sheet allows modification of user-specific settings like the DDK path.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nconfig\n```\n\n----------------------------------------\n\nTITLE: GstStreamCollection Function Prototypes in C\nDESCRIPTION: Declares function prototypes for creating and manipulating GstStreamCollection objects, which represent collections of streams in GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-selection.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstruct GstStreamCollection;\n\ngst_stream_collection_new(...);\ngst_stream_collection_add_stream(...);\ngst_stream_collection_get_size(...);\ngst_stream_collection_get_stream(...);\n\nGST_MESSAGE_STREAM_COLLECTION\ngst_message_new_stream_collection(...)\ngst_message_parse_stream_collection(...)\n\nGST_EVENT_STREAM_COLLECTION\ngst_event_new_stream_collection(...)\ngst_event_parse_stream_collection(...)\n```\n\n----------------------------------------\n\nTITLE: Defining ID3v2 WXXX Frame Structure (plaintext)\nDESCRIPTION: Describes the structure of the ID3v2 'User defined URL link frame' (WXXX). It includes a byte for the text encoding of the description, followed by a null-terminated description string (according to the specified encoding), and finally the actual URL as a text string (always encoded in ISO-8859-1). Multiple WXXX frames can exist in a tag, but each must have a unique description.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n   <Header for 'User defined URL link frame', ID: \"WXXX\">\n   Text encoding     $xx\n   Description       <text string according to encoding> $00 (00)\n   URL               <text string>\n```\n\n----------------------------------------\n\nTITLE: Declare Global Static Variables in C\nDESCRIPTION: Declares static global variables used throughout the file. These include handles for the GStreamer application thread, a thread-specific key for the JNI environment, the Java VM instance, and JNI field/method IDs for interacting with the Java application.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nstatic pthread_t gst_app_thread;\nstatic pthread_key_t current_jni_env;\nstatic JavaVM *java_vm;\nstatic jfieldID custom_data_field_id;\nstatic jmethodID set_message_method_id;\nstatic jmethodID set_current_position_method_id;\nstatic jmethodID on_gstreamer_initialized_method_id;\nstatic jmethodID on_media_size_changed_method_id;\n```\n\n----------------------------------------\n\nTITLE: Basic GStreamer Pipeline: Video Test Source to XV Image Sink\nDESCRIPTION: This snippet shows a simple GStreamer pipeline that connects a video test source to an XV image sink. It demonstrates the process of negotiating caps, allocating buffers, and managing the buffer pool between these elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/bufferpool.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nvideotestsrc ! xvimagesink\n```\n\n----------------------------------------\n\nTITLE: Setting Output Gamma in C\nDESCRIPTION: Sets gamma correction for generated palette and remapped image. Must be between 0 and 1.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_33\n\nLANGUAGE: c\nCODE:\n```\nliq_error liq_set_output_gamma(liq_result* res, double gamma);\n```\n\n----------------------------------------\n\nTITLE: Defining the ID3v2 Footer Structure (Text)\nDESCRIPTION: Describes the layout of the optional ID3v2 tag footer, which mirrors the header but uses \"3DI\" as the identifier. It includes version ($04 00), flags (%abcd0000), and size fields (4 * %0xxxxxxx), used for locating the tag from the end of a file. The size is a 32-bit synchsafe integer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-structure.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nID3v2 identifier           \"3DI\"\nID3v2 version              $04 00\nID3v2 flags                %abcd0000\nID3v2 size             4 * %0xxxxxxx\n```\n\n----------------------------------------\n\nTITLE: GStreamer Pipeline: Custom Video Decoder with Video Scale to Custom Video Sink\nDESCRIPTION: This scenario illustrates how a video sink can request a format change by sending a RECONFIGURE event upstream. It demonstrates the process of negotiating new formats and buffer pools in response to downstream requests.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/bufferpool.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n.. ! myvideodecoder ! videoscale ! myvideosink\n```\n\n----------------------------------------\n\nTITLE: Converting video and displaying using videoconvert in GStreamer via Bash\nDESCRIPTION: This bash command produces a test video using videotestsrc, converts its format using videoconvert to solve possible negotiation issues, and displays it. videoconvert is useful when output format is unknown or varies; ensure the element is present in the GStreamer distribution. Output is sent to autovideosink; this pipeline is robust for most test scenarios.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 videotestsrc ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: GStreamer Encoding Target and Profile XML Configuration\nDESCRIPTION: Example XML configuration showing how to define encoding targets and profiles for a Nokia N900 device, including video and audio stream specifications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/encoding.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<gst-encoding-target>\n      <name>Nokia N900</name>\n      <category>Consumer Device</category>\n      <profiles>\n        <profile>Nokia N900/H264 HQ</profile>\n        <profile>Nokia N900/MP3</profile>\n        <profile>Nokia N900/AAC</profile>\n      </profiles>\n    </gst-encoding-target>\n\n    <gst-encoding-profile>\n      <name>Nokia N900/H264 HQ</name>\n      <description>\n        High Quality H264/AAC for the Nokia N900\n      </description>\n      <format>video/quicktime,variant=iso</format>\n      <streams>\n        <stream-profile>\n          <type>audio</type>\n          <format>audio/mpeg,mpegversion=4</format>\n          <preset>Quality High/Main</preset>\n          <restriction>audio/x-raw,channels=[1,2]</restriction>\n          <presence>1</presence>\n        </stream-profile>\n        <stream-profile>\n          <type>video</type>\n          <format>video/x-h264</format>\n          <preset>Profile Baseline/Quality High</preset>\n          <restriction>\n            video/x-raw,width=[16, 800],\\\n\t    height=[16, 480],framerate=[1/1, 30000/1001]\n          </restriction>\n          <presence>1</presence>\n        </stream-profile>\n      </streams>\n    </gst-encoding-profile>\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Name with Manual Locking in GStreamer C\nDESCRIPTION: Illustrates how to safely access and copy an object's name using manual locking and memory management.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/MT-refcounting.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nGST_OBJECT_LOCK (object)\nname = g_strdup (GST_OBJECT_NAME (object));\nGST_OBJECT_UNLOCK (object)\n... use name ...\n\ng_free (name);\n```\n\n----------------------------------------\n\nTITLE: Conditional Orc Inclusion in C Source\nDESCRIPTION: This C code snippet shows how to conditionally include Orc headers and define a fallback for orc_memcpy when Orc is not available.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/orc-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#ifdef HAVE_ORC\n#include <orc/orc.h>\n#else\n#define orc_memcpy(a,b,c) memcpy(a,b,c)\n#endif\n```\n\n----------------------------------------\n\nTITLE: Listing GStreamer OpenGL Elements in Markdown\nDESCRIPTION: This code snippet presents a markdown-formatted list of GStreamer elements that use OpenGL. Each element is described with its name and primary function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/opengl.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n - `glimagesinkelement` - Display a video using OpenGL\n - `glcolorconvert` - Convert between diferent color spaces\n - `glviewconvert` - Convert between different stereo view formats\n - `gltransformation` - Perfom transformations in 3D space of the 2D video plane\n - `gleffects` - Various OpenGL effects\n - `glvideomixerelement` - Mix video using OpenGL (roughly equivalent to compositor)\n - `glcolorbalance` - Color balance filtering\n - `gltestsrc` - OpenGL equivalent to videotestsrc\n - `glshader` - Execute an arbitrary OpenGL shader\n - `gloverlay` - Overlay an image onto a video stream\n - `glupload` - Upload data into OpenGL\n - `gldownload` - Download data from OpenGL\n```\n\n----------------------------------------\n\nTITLE: Describing I420_10BE Planar 4:2:0 YUV, 10 bits/channel BE in Plaintext\nDESCRIPTION: The I420_10BE snippet describes a similar planar layout as I420_10LE but uses big-endian encoding for 10-bit values. It provides all component stride, offset, and size formulas necessary for correct buffer splitting. Inputs: width, height; output: layout required for BE interpretation and memory management.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_44\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           10 BE\n          pstride:         2\n          default offset:  0\n          default rstride: RU4 (width * 2)\n          default size:    rstride (component0) * RU2 (height)\n\n        Component 1: U\n          depth:           10 BE\n          pstride:         2\n          default offset:  size (component0)\n          default rstride: RU4 (width)\n          default size:    rstride (component1) * RU2 (height) / 2\n\n        Component 2: V\n          depth            10 BE\n          pstride:         2\n          default offset:  offset (component1) + size (component1)\n          default rstride: RU4 (width)\n          default size:    rstride (component2) * RU2 (height) / 2\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n```\n\n----------------------------------------\n\nTITLE: Compiling libimagequant Source Directly with a C Program using GCC\nDESCRIPTION: This command shows an alternative compilation method where the `libimagequant` source files (`lib/*.c`) are compiled directly along with the user's program (`yourprogram.c`) using GCC. It specifies the C99 standard (`-std=c99`), enables high optimization (`-O3`), and defines `NDEBUG` to disable assertions for a faster build. Requires GCC and the library source files located in the `lib/` subdirectory relative to the execution path.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcc -std=c99 -O3 -DNDEBUG lib/*.c yourprogram.c\n```\n\n----------------------------------------\n\nTITLE: Configuring Common GStreamer Build Features in Meson\nDESCRIPTION: Defines common build configuration options including documentation, examples, introspection, tests and tools. Each option is defined with a type, default value, and description.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\n# Common feature options\noption('doc', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable documentation.')\noption('examples', type : 'feature', value : 'auto', yield : true,\n       description : 'Build examples')\noption('introspection', type : 'feature', value : 'auto', yield : true,\n       description : 'Generate gobject-introspection bindings')\noption('tests', type : 'feature', value : 'auto', yield : true,\n       description : 'Build and enable unit tests')\noption('tools', type : 'feature', value : 'auto', yield : true,\n       description : 'Build ges-launch command line tool')\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Pads in a Pipeline\nDESCRIPTION: Demonstrates how to access specific element pads by name to extract only the video stream from a WebM file. This pipeline downloads a WebM file, demuxes it, and creates a new Matroska file containing only the video track.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/gstreamer-tools.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 souphttpsrc location=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm ! matroskademux name=d d.video_0 ! matroskamux ! filesink location=sintel_video.mkv\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Elements with Validate Config Structures\nDESCRIPTION: Example of using the configs parameter in meta action to set properties on GStreamer elements and define validation flow requirements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigs = {\n    # Set videotestsrc0 pattern value to `blue`\n    \"core, action=set-property, target-element-name=videotestsrc0, property-name=pattern, property-value=blue\",\n    \"$(validateflow), pad=sink1:sink, caps-properties={ width, height };\",\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Metadata Types for GStreamer Raw Audio\nDESCRIPTION: This snippet defines two metadata types used with raw audio in GStreamer: GstAudioMeta for describing buffer data layout, and GstAudioDownmixMeta for multichannel audio downmixing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-audio-raw.md#2025-04-23_snippet_1\n\nLANGUAGE: plain text\nCODE:\n```\n## Metadata\n\n - `GstAudioMeta`: Metadata that describes the layout of the data inside\n   the buffer. It is a requirement for buffers with non-interleaved layout\n   to have this metadata attached.\n\n - `GstAudioDownmixMeta`: A matrix for downmixing multichannel audio to a\n   lower numer of channels.\n```\n\n----------------------------------------\n\nTITLE: Configuring ISO Codes Usage in Meson\nDESCRIPTION: Defines a Meson feature option 'iso-codes' to control the usage of the iso-codes library within libgsttag for retrieving language names. The default value 'auto' enables it if the dependency is found.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_2\n\nLANGUAGE: meson\nCODE:\n```\noption('iso-codes', type : 'feature', value : 'auto',\n       description: 'Use iso-codes in libgsttag (for language names)')\n```\n\n----------------------------------------\n\nTITLE: Defining JNI Native Method Mappings in C\nDESCRIPTION: This static array defines the mapping between Java native methods and their corresponding C function implementations. Each entry specifies the Java method name, its JNI signature (parameter types and return type), and a function pointer to the C implementation. These mappings are used during JNI registration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nstatic JNINativeMethod native_methods[] = {\n  { \"nativeInit\", \"()V\", (void *) gst_native_init},\n  { \"nativeFinalize\", \"()V\", (void *) gst_native_finalize},\n  { \"nativePlay\", \"()V\", (void *) gst_native_play},\n  { \"nativePause\", \"()V\", (void *) gst_native_pause},\n  { \"nativeSurfaceInit\", \"(Ljava/lang/Object;)V\", (void *) gst_native_surface_init},\n  { \"nativeSurfaceFinalize\", \"()V\", (void *) gst_native_surface_finalize},\n  { \"nativeClassInit\", \"()Z\", (void *) gst_native_class_init}\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing GstMetaTiming Structure in C\nDESCRIPTION: Example implementation of timing metadata structure that extends GstMeta with timing-specific fields for decoding/presentation timestamps and duration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/meta.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct _GstMetaTiming {\n  GstMeta        meta;        /* common meta header */\n\n  GstClockTime   dts;         /* decoding timestamp */\n  GstClockTime   pts;         /* presentation timestamp */\n  GstClockTime   duration;    /* duration of the data */\n  GstClockTime   clock_rate;  /* clock rate for the above values */\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Meson with pip on Windows\nDESCRIPTION: Use pip3 to install Meson. This is the recommended method for installing Meson on Windows for GStreamer development.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npip3 install meson\n```\n\n----------------------------------------\n\nTITLE: Defining User Defined Text Information Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of a TXXX frame for custom text information in ID3v2 tags. The frame includes a header, text encoding byte, description field, and value field, allowing for custom metadata to be added to audio files.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n<Header for 'User defined text information frame', ID: \"TXXX\">\nText encoding    $xx\nDescription    <text string according to encoding> $00 (00)\nValue    <text string according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Feature Options\nDESCRIPTION: Defines feature options for GStreamer build including unit tests, backtrace generation, bash completion, and core tracers. These options control which additional features are enabled during the build.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/meson_options.txt#2025-04-23_snippet_3\n\nLANGUAGE: meson\nCODE:\n```\n# Feature options\noption('check', type : 'feature', value : 'auto', description : 'Build unit test libraries')\noption('libunwind', type : 'feature', value : 'auto', description : 'Use libunwind to generate backtraces')\noption('libdw', type : 'feature', value : 'auto', description : 'Use libdw to generate better backtraces from libunwind')\noption('dbghelp', type : 'feature', value : 'auto', description : 'Use dbghelp to generate backtraces')\noption('bash-completion', type : 'feature', value : 'auto', description : 'Install bash completion files')\noption('coretracers', type : 'feature', value : 'auto', description : 'Build coretracers plugin')\noption('gstreamer-static-full', type : 'boolean', value : false, description : 'Enable static support of gstreamer-full.')\n```\n\n----------------------------------------\n\nTITLE: Specifying NV21 Format in GStreamer\nDESCRIPTION: Defines the structure of the NV21 format, a planar 4:2:0 YUV format with interleaved VU plane. It details the component depths, strides, offsets, and memory layout.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * RU2 (height)\n\n        Component 1: U\n          depth            8\n          pstride:         2\n          default offset:  offset (component1) + 1\n          default rstride: RU4 (width)\n\n        Component 2: V\n          depth:           8\n          pstride:         2\n          default offset:  size (component0)\n          default rstride: RU4 (width)\n\n        Image\n          default size: RU4 (width) * RU2 (height) * 3 / 2\n```\n\n----------------------------------------\n\nTITLE: GStreamer VideoTestSrc Pattern Values\nDESCRIPTION: Enumeration of valid pattern types that can be generated by the videotestsrc element, including standard test patterns like SMPTE color bars, solid colors, and various geometric patterns.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/libs/GESVideoTestSource-children-props.md#2025-04-23_snippet_0\n\nLANGUAGE: gstreamer\nCODE:\n```\npattern=0   # SMPTE 100% color bars\npattern=1   # Random (television snow)\npattern=2   # 100% Black\npattern=3   # 100% White\npattern=4   # Red\npattern=5   # Green\npattern=6   # Blue\npattern=7   # Checkers 1px\npattern=8   # Checkers 2px\npattern=9   # Checkers 4px\npattern=10  # Checkers 8px\npattern=11  # Circular\npattern=12  # Blink\npattern=13  # SMPTE 75% color bars\npattern=14  # Zone plate\npattern=15  # Gamut checkers\npattern=16  # Chroma zone plate\npattern=17  # Solid color\npattern=18  # Moving ball\npattern=19  # SMPTE 100% color bars\npattern=20  # Bar\npattern=21  # Pinwheel\npattern=22  # Spokes\npattern=23  # Gradient\npattern=24  # Colors\n```\n\n----------------------------------------\n\nTITLE: Cloning the GStreamer Monorepo (Developer Access) with Git (Shell)\nDESCRIPTION: This snippet provides the SSH-based Git command for developers with push access to the GStreamer repository. After cloning, it places the user in the 'gstreamer' directory for further actions. Requires configured SSH keys for the specified domain and developer access rights.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@gitlab.freedesktop.org:gstreamer/gstreamer.git\\ncd gstreamer\n```\n\n----------------------------------------\n\nTITLE: Compiler Flag Addition for Deprecation Checking\nDESCRIPTION: Add this compiler flag to identify deprecated methods before porting to 1.0\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/porting-1.0.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n-DGST_DISABLE_DEPRECATED\n```\n\n----------------------------------------\n\nTITLE: Installing and Deploying GStreamer Android Tutorials via Gradle - Bash\nDESCRIPTION: These bash code snippets demonstrate how to build and deploy GStreamer-enabled Android tutorial applications using the gradle build system from the command line. The commands set required environment variables, ensure the correct toolchain location, and specify which project or subproject to build and install. The prerequisites include GStreamer prebuilt binaries (with gstAndroidRoot set properly), gradle, a configured Android NDK/SDK, and a connected Android device. Output includes deployment and installation of tutorial APKs to a target device.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/for-android-development.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd examples/tutorials/android\\n$ PATH=~/dev/android/tools/bin:~/dev/android/ndk-bundle:$PATH ANDROID_HOME=\\\"$HOME/dev/android/\\\" ./gradlew installDebug\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd examples/tutorials/android\\n$ GSTREAMER_ROOT_ANDROID=/path/to/gst-android-1.14/ PATH=~/dev/android/tools/bin:~/dev/android/ndk-bundle:$PATH ANDROID_HOME=\\\"$HOME/dev/android/\\\" ./gradlew :android-tutorial-1:installDebug\n```\n\n----------------------------------------\n\nTITLE: Define JNI Macro for Setting Custom Data in C\nDESCRIPTION: Defines a preprocessor macro `SET_CUSTOM_DATA` to simplify setting a long field (used for storing native pointers like `CustomData*`) on a Java object from C code using JNI. It calls the JNI function `SetLongField`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n# define SET_CUSTOM_DATA(env, thiz, fieldID, data) (*env)->SetLongField (env, thiz, fieldID, (jlong)(jint)data)\n```\n\n----------------------------------------\n\nTITLE: Playing Video from MPEG-2 File with GStreamer\nDESCRIPTION: Shows how to display only the video portion of an MPEG-2 file using GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=JB_FF9_TheGravityOfLove.mpg ! mpegdemux ! mpegvideoparse ! mpeg2dec ! videoconvert ! xvimagesink\n```\n\n----------------------------------------\n\nTITLE: Parsing Metadata Parameters in GStreamer\nDESCRIPTION: C structure representing metadata parameters returned by the allocation query. Used with gst_query_parse_nth_allocation_meta() to extract metadata details.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/bufferpool.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct {\n    GType api;\n    GstStructure *params;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Speed Setting in C\nDESCRIPTION: Returns the current speed setting for image processing algorithms.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nint liq_get_speed(liq_attr* attr);\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Commands to set up global Git configuration for user name and email\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/contribute/index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global user.name \"George S. Treamer\"\ngit config --global user.email \"george.s.treamer@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Building ONNX Runtime for CPU Backend Bash Script (shell)\nDESCRIPTION: This Bash code compiles and installs ONNX Runtime with CPU-only support. It disables tests for a faster build and creates shared libraries. CMake is invoked with the main onnxruntime CMake directory as source, followed by multi-core compilation and system installation. No GPU or special hardware dependencies are required; just standard CMake and make tools.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/onnx/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cmake -Donnxruntime_BUILD_SHARED_LIB=ON -DBUILD_TESTING=OFF -Donnxruntime_BUILD_UNIT_TESTS=OFF $SRC_DIR/onnxruntime/cmake && make -j$(nproc) && sudo make install\n```\n\n----------------------------------------\n\nTITLE: Referencing GStreamer Plugin Directory using Environment Variable\nDESCRIPTION: This snippet shows how to reference the default GStreamer plugin directory using the `GSTREAMER_ROOT_X86` environment variable in Windows command prompt syntax. This path is where plugins are initially found and can be pointed to by the `GST_PLUGIN_PATH` variable if the directory structure is changed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n%GSTREAMER_ROOT_X86%\\lib\\gstreamer-1.0\n```\n\n----------------------------------------\n\nTITLE: Single-Reffed Relationship Management\nDESCRIPTION: Implementation of establishing and managing single-reffed relationships between objects.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nLOCK (object1);\nif (object1->pointer)\n  _unref (object1->pointer);\nobject1->pointer = _ref (object2);\nUNLOCK (object1);\n```\n\n----------------------------------------\n\nTITLE: DMA Buffer Video Caps Example in GStreamer\nDESCRIPTION: Example of GStreamer caps configuration for DMABuf-backed video, showing required fields including format, dimensions, and DRM-specific parameters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/dmabuf.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvideo/x-raw(memory:DMABuf), \\\n                format=(string)DMA_DRM, \\\n                drm-format=(string)NV12:0x0x0100000000000001, \\\n                width=(int)1920, \\\n                height=(int)1080, \\\n                interlace-mode=(string)progressive, \\\n                multiview-mode=(string)mono, \\\n                multiview-flags=(GstVideoMultiviewFlagsSet)0:ffffffff:/right-view-first/left-flipped/left-flopped/right-flipped/right-flopped/half-aspect/mixed-mono, \\\n                pixel-aspect-ratio=(fraction)1/1, \\\n                framerate=(fraction)24/1, \\\n                colorimetry=(string)bt709\n```\n\n----------------------------------------\n\nTITLE: Setting Speed for Image Processing in C\nDESCRIPTION: Sets the speed level for image processing algorithms. Higher speeds reduce precision but increase performance. The default speed is 3, with a valid range of 1-10.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nliq_error liq_set_speed(liq_attr* attr, int speed);\n```\n\n----------------------------------------\n\nTITLE: Defining Y412_BE Packed 4:4:4:4 AYUV Format in GStreamer\nDESCRIPTION: Specifies the component structure for Y412_BE, a packed 4:4:4:4 AYUV format with 2 bytes per channel where color value is stored in MSB 12 bits (U-Y-V-A), big-endian. It details the depth, stride, and offset for Y, U, V, and A components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_52\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           12 BE\n          pstride:         8\n          default offset:  2\n\n        Component 1: U\n          depth:           12 BE\n          pstride:         8\n          offset:          0\n\n        Component 2: V\n          depth            12 BE\n          pstride:         8\n          offset:          4\n\n        Component 2: A\n          depth            12 BE\n          pstride:         8\n          offset:          6\n\n        Image\n          default rstride: width * 8\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Defining ID3v2 MLLT Frame Reference Data Structure (plaintext)\nDESCRIPTION: Defines the structure of the data included for each reference point within the ID3v2 MLLT frame, following the header. Each reference consists of a 'Deviation in bytes' value and a 'Deviation in milliseconds' value, represented using the number of bits specified in the 'Bits for bytes deviation' and 'Bits for milliseconds dev.' fields of the frame header, respectively.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n   Deviation in bytes         %xxx....\n   Deviation in milliseconds  %xxx.... \n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecated GStreamer Options\nDESCRIPTION: Defines deprecated options maintained for backward compatibility. These options have been replaced by newer equivalents but are kept to ensure existing build configurations continue to work.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/meson_options.txt#2025-04-23_snippet_6\n\nLANGUAGE: meson\nCODE:\n```\n# Deprecated, kept for backward compat\noption('gobject-cast-checks', type : 'feature', value : 'auto', yield : true,\n       description: 'Enable run-time GObject cast checks (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_debug')\noption('glib-asserts', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib assertion (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_assert')\noption('glib-checks', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib checks such as API guards (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_checks')\n```\n\n----------------------------------------\n\nTITLE: Switch Track Command in GStreamer Validate Scenario\nDESCRIPTION: Switches between audio, video, or text tracks using absolute or relative indexing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_10\n\nLANGUAGE: validate-scenario\nCODE:\n```\nswitch-track,\n    [index=(string: to switch track relatively\nint: To use the actual index to use)],\n    [type=(string)],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GstValidate Scenario with Multiple Seeks\nDESCRIPTION: A complete example of a .scenario file that performs three seek operations and then stops. It includes a meta structure with summary and additional information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-scenarios.md#2025-04-23_snippet_1\n\nLANGUAGE: gstreamer\nCODE:\n```\nmeta, summary=\"Seeks at 1.0 to 2.0 then at \\\n3.0 to 0.0 and then seeks at \\\n1.0 to 2.0 for 1.0 second (between 2.0 and 3.0).\", \\\nseek=true, duration=5.0, min-media-duration=4.0\nseek, playback-time=1.0, rate=1.0, start=2.0, flags=accurate+flush\nseek, playback-time=3.0, rate=1.0, start=0.0, flags=accurate+flush\nseek, playback-time=1.0, rate=1.0, start=2.0, stop=3.0, flags=accurate+flush\n```\n\n----------------------------------------\n\nTITLE: Opening Media File in GStreamer Player\nDESCRIPTION: Function to open a media file, stop any current playback, set the new URI, and start playing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nvoid MediaApp::openFile(const QString & fileName)\n{\n    m_baseDir = QFileInfo(fileName).path();\n    m_player->stop();\n    m_player->setUri(fileName);\n    m_player->play();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Cerbero Recipe with Options using Bash\nDESCRIPTION: Demonstrates an alternative way to create a new recipe using `cerbero-uninstalled add-recipe` by passing command-line options. This command pre-populates the generated `recipes/my-app.recipe` file with specific values for licenses, dependencies, the origin git remote URL, and the git commit to use.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/multiplatform-using-cerbero.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./cerbero-uninstalled add-recipe --licenses \"LGPL\" --deps \"glib\" --origin \"git://git.my-app.com\" --commit \"git-commit-to-use\" my-app 1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of the COMM frame used for comments in ID3v2 tags. Includes text encoding, language identifier, short content description, and the actual comment text.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_11\n\nLANGUAGE: plain text\nCODE:\n```\n<Header for 'Comment', ID: \"COMM\">\nText encoding          $xx\nLanguage               $xx xx xx\nShort content descrip. <text string according to encoding> $00 (00)\nThe actual text        <full text string according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Generating List of Element Classes in GStreamer Installation\nDESCRIPTION: This bash command generates a list of unique element classes used in a GStreamer installation by inspecting all elements and extracting their class information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/draft-klass.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-inspect-1.0 -a | grep -ho Klass.* | cut -c8- | sort | uniq\n```\n\n----------------------------------------\n\nTITLE: Listing GStreamer Plugins\nDESCRIPTION: Commands to list all installed plugins and inspect specific plugins\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/using.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngst-inspect-1.0\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-inspect-1.0 volume\n```\n\n----------------------------------------\n\nTITLE: GStreamer Video Transition Invert Property Definition\nDESCRIPTION: Defines the invert property for video transitions. Uses boolean (gboolean) to control whether the transition effect is inverted.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/libs/GESTransitionClip-children-props.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### `invert`\n\nWhether the transition is inverted\n\nValue type: #gboolean\n\nSee #GESVideoTransition:invert\n```\n\n----------------------------------------\n\nTITLE: Setting pkg-config Sysroot for Cross-Compilation (Bash)\nDESCRIPTION: Exports the `PKG_CONFIG_SYSROOT_DIR` environment variable, setting it to the root directory (`/`). This is often necessary during cross-compilation (e.g., for Android) to help `pkg-config` locate library metadata correctly relative to the system root.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-good/ext/qt/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PKG_CONFIG_SYSROOT_DIR=/\n```\n\n----------------------------------------\n\nTITLE: Removing Child from Container in GStreamer\nDESCRIPTION: Command to remove a child element from a specified container. Requires container name and child name.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_13\n\nLANGUAGE: validate-scenario\nCODE:\n```\ncontainer-remove-child,\n    [playback-time=(double,string)],\n    container-name=(string),\n    child-name=(string);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Build Directory with Meson (Shell)\nDESCRIPTION: This snippet shows the standard way to initialize a Meson build directory for the current project. It expects the 'meson' command line tool to be installed, and requires a source code directory (the current one) and a desired build directory. Outputs a configured build environment in the specified '<build_directory>' ready for building with Ninja.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmeson setup <build_directory>\n```\n\n----------------------------------------\n\nTITLE: Getting Effect List from GESEffectRegistry in C\nDESCRIPTION: This function returns a GList of GESEffectDescriptors from the given GESEffectRegistry. It's used to retrieve all effect descriptors available on the system.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/effects.txt#2025-04-23_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nGList *\nges_registry_get_effect_list (GESEffectRegistry *self);\n```\n\n----------------------------------------\n\nTITLE: Define GStreamer Playback Flags Enum in C\nDESCRIPTION: Defines an enumeration `GstPlayFlags` for GStreamer playbin flags. Currently, it includes `GST_PLAY_FLAG_TEXT` to enable subtitle output.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n/* playbin flags */\ntypedef enum {\n  GST_PLAY_FLAG_TEXT = (1 << 2)  /* We want subtitle output */\n} GstPlayFlags;\n```\n\n----------------------------------------\n\nTITLE: Setting Stream Awareness Flag in GStreamer Bin\nDESCRIPTION: Flag that allows elements within a GstBin to add and remove streams dynamically without requiring full pad readdition and no-more-pads emission.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-selection.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nGST_BIN_FLAG_STREAMS_AWARE\n```\n\n----------------------------------------\n\nTITLE: Setting Quality Range in libimagequant\nDESCRIPTION: Sets the quality range for quantization from minimum to maximum (0-100 scale, similar to JPEG quality). Quantization will use the lowest number of colors needed to achieve maximum quality. Returns error codes for invalid inputs.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nliq_error liq_set_quality(liq_attr* attr, int minimum, int maximum);\n```\n\nLANGUAGE: c\nCODE:\n```\nliq_attr *attr = liq_attr_create();\nliq_set_quality(attr, 50, 80); // use quality 80 if possible. Give up if quality drops below 50.\n```\n\n----------------------------------------\n\nTITLE: Defining gst-docs Build Options in Meson\nDESCRIPTION: This snippet defines several build options using the Meson build system's `option()` function, specifically for configuring the `gst-docs` tool. `built_subprojects` (string) tells `gst-docs` which subprojects' API documentation to include. `use_portal_index` (boolean) enables generation of an index suitable for integration into larger portals like gnome-portal. `fatal_warnings` (boolean) controls whether build warnings are treated as fatal errors.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\n# Special option to tell `gst-docs` what subprojects with\n# API documentation can be used.\noption('built_subprojects', type : 'string', value : '')\n# Special entry to make `gst-docs` usable as part of a bigger\n# portal (gnome-portal for example).\noption('use_portal_index', type : 'boolean', value : true)\noption('fatal_warnings', type : 'boolean', value : false)\n```\n\n----------------------------------------\n\nTITLE: Configuring a GstBufferPool in GStreamer\nDESCRIPTION: Code example showing how to configure a GstBufferPool in GStreamer by setting parameters like caps, buffer size, minimum and maximum buffers, and configuring the allocator to use.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/allocation.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n  GstStructure *config;\n\n[...]\n\n  /* get config structure */\n  config = gst_buffer_pool_get_config (pool);\n\n  /* set caps, size, minimum and maximum buffers in the pool */\n  gst_buffer_pool_config_set_params (config, caps, size, min, max);\n\n  /* configure allocator and parameters */\n  gst_buffer_pool_config_set_allocator (config, allocator, &params);\n\n  /* store the updated configuration again */\n  gst_buffer_pool_set_config (pool, config);\n\n[...]\n```\n\n----------------------------------------\n\nTITLE: GStreamer Environment Variable to Override Plugin Paths\nDESCRIPTION: The `GST_PLUGIN_SYSTEM_PATH` environment variable can be set to specify exact locations for GStreamer plugins, preventing GStreamer from searching the default system paths.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nGST_PLUGIN_SYSTEM_PATH\n```\n\n----------------------------------------\n\nTITLE: Updating UI Based on GStreamer Pipeline State\nDESCRIPTION: Function to update the UI elements based on the current state of the GStreamer pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nvoid MediaApp::onStateChanged()\n{\n    QGst::State newState = m_player->state();\n    m_playButton->setEnabled(newState != QGst::StatePlaying);\n    m_pauseButton->setEnabled(newState == QGst::StatePlaying);\n    m_stopButton->setEnabled(newState != QGst::StateNull);\n    m_positionSlider->setEnabled(newState != QGst::StateNull);\n    m_volumeSlider->setEnabled(newState != QGst::StateNull);\n    m_volumeLabel->setEnabled(newState != QGst::StateNull);\n    m_volumeSlider->setValue(m_player->volume());\n    //if we are in Null state, call onPositionChanged() to restore\n    //the position of the slider and the text on the label\n    if (newState == QGst::StateNull) {\n        onPositionChanged();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Volume Range Example\nDESCRIPTION: Example showing the volume property control range in GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/controller.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[0.0 to 4.0]\n```\n\n----------------------------------------\n\nTITLE: Creating Attribute Object in libimagequant\nDESCRIPTION: Creates an object to hold initial settings (attributes) for the library. Returns NULL if the library cannot run on the current machine. The object should be freed with liq_attr_destroy() when no longer needed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nliq_attr* liq_attr_create(void);\n```\n\n----------------------------------------\n\nTITLE: Defining RGBA64_LE Format in GStreamer\nDESCRIPTION: Specifies the component structure for RGBA64_LE, an RGB format with alpha channel last, 16 bits per channel, little-endian. It details the depth, stride, and offset for R, G, B, and A components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_53\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\n       |R0|G0|B0|A0| |R1|G1|B1|A1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           16 LE\n          pstride:         8\n          offset:          0\n\n        Component 1: G\n          depth            16 LE\n          pstride:         8\n          offset:          2\n\n        Component 2: B\n          depth:           16 LE\n          pstride:         8\n          offset:          4\n\n        Component 3: A\n          depth:           16 LE\n          pstride:         8\n          offset:          6\n\n        Image\n          default rstride: width * 8\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Parsing Ownership Frame in ID3v2\nDESCRIPTION: Defines the structure for the 'Ownership' frame (OWNE) in ID3v2 tags. This frame contains transaction information including price paid, currency, purchase date, and seller information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n<Header for 'Ownership frame', ID: \"OWNE\">\nText encoding     $xx\nPrice paid        <text string> $00\nDate of purch.    <text string>\nSeller            <text string according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Defining Package Origin String Option in Meson\nDESCRIPTION: Defines a Meson build option named 'package-origin' of type 'string'. It has a default value of 'Unknown package origin', yields its value for subprojects, and includes a description. This option sets a URL indicating the origin of the package, used within GStreamer plugins.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_5\n\nLANGUAGE: meson\nCODE:\n```\noption('package-origin', type : 'string',\n       value : 'Unknown package origin', yield : true,\n       description : 'package origin URL to use in plugins')\n```\n\n----------------------------------------\n\nTITLE: GstBaseSrc Push Mode Buffering Query Response\nDESCRIPTION: Default response values for a BUFFERING query when GstBaseSrc is in push mode. Specifies buffer settings and position information for streaming.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/buffering.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n\"buffer-percent\" = 100\n\"buffering-mode\" = \"stream\"\n\"avg-in-rate\" = -1\n\"avg-out-rate\" = -1\n\"buffering-left\" = 0\n\"format\" = a valid GST_TYPE_FORMAT\n\"start\" = current position\n\"stop\" = current position\n\"estimated-total\" = -1\n\"buffering-ranges\" = NULL\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Component Build Options in Meson\nDESCRIPTION: This meson configuration file defines various build options for GStreamer components including GstValidate, gst-dots-viewer, and common features like introspection, tests, and documentation. Each option specifies a type, default value, and description to guide users in configuring their GStreamer builds.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('validate', type : 'feature', value : 'auto',\n       description : 'Build GstValidate')\noption('dots_viewer', type : 'feature', value : 'auto',\n       description : 'Build gst-dots-viewer')\noption('cairo', type : 'feature', value : 'auto', description : 'Build GstValidateVideo')\noption('debug_viewer', type : 'feature', value : 'disabled',\n        description : 'Build GstDebugViewer (GPLv3+)')\n\n# Common feature options\noption('introspection', type : 'feature', value : 'auto', yield : true,\n       description : 'Generate gobject-introspection bindings')\noption('tests', type : 'feature', value : 'auto', yield : true,\n       description : 'Build and enable unit tests')\noption('nls', type : 'feature', value : 'auto', yield: true,\n       description : 'Enable native language support (translations)')\noption('doc', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable documentation.')\noption('tools', type : 'feature', value : 'auto', yield : true)\n```\n\n----------------------------------------\n\nTITLE: Specifying NV12 Format in GStreamer\nDESCRIPTION: Defines the structure of the NV12 format, a planar 4:2:0 YUV format with interleaved UV plane. It details the component depths, strides, offsets, and memory layout.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * RU2 (height)\n\n        Component 1: U\n          depth            8\n          pstride:         2\n          default offset:  size (component0)\n          default rstride: RU4 (width)\n\n        Component 2: V\n          depth:           8\n          pstride:         2\n          default offset:  offset (component1) + 1\n          default rstride: RU4 (width)\n\n        Image\n          default size: RU4 (width) * RU2 (height) * 3 / 2\n```\n\n----------------------------------------\n\nTITLE: Building GStreamer with Reduced Size (ABI Breaking) (Bash)\nDESCRIPTION: Shows how to use `make` with specific CFLAGS (`-DGST_REMOVE_DEPRECATED`, `-DGST_REMOVE_DISABLED`) to build GStreamer with deprecated functions and stubs for disabled subsystems removed. This reduces library size but breaks ABI compatibility, requiring recompilation of dependent code.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/gst/building.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake CFLAGS=\"-DGST_REMOVE_DEPRECATED -DGST_REMOVE_DISABLED\"\n```\n\n----------------------------------------\n\nTITLE: Audio Pipeline Structure Example\nDESCRIPTION: Simple GStreamer pipeline structure for WAV file playback\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/segments.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfilesrc ! wavparse ! alsasink\n```\n\n----------------------------------------\n\nTITLE: Async Element State Locking Implementation in C\nDESCRIPTION: Shows the asynchronous state locking pattern for element state transitions, including stream thread handling and state commitments.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/states.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nset_state(element)       change_state (element)     stream_thread      commit_state (element)\n\n    |                         |                          |                  |\n    |                         |                          |                  |\nSTATE_LOCK                    |                          |                  |\n    |                         |                          |                  |\n    |------------------------>|                          |                  |\n    |                         |                          |                  |\n    |                         |                          |                  |\n    |                         | (start_task)             |                  |\n    |                         |                          |                  |\n    |                         |                     STREAM_LOCK             |\n    |                         |                          |...               |\n    |<------------------------|                          |                  |\n    |     ASYNC                                     STREAM_UNLOCK           |\nSTATE_UNLOCK                                             |                  |\n    |                .....sync........               STATE_LOCK             |\n  ASYNC                                                  |----------------->|\n                                                         |                  |\n                                                         |                  |---> post_message()\n                                                         |                  |---> if (!final) change_state (next)\n                                                         |                  |     else SIGNAL\n                                                         |<-----------------|                                                     STATE_UNLOCK\n                                                         |\n                                                    STREAM_LOCK\n                                                         | ...\n                                                    STREAM_UNLOCK\n```\n\n----------------------------------------\n\nTITLE: Executing Cerbero Uninstalled Script for Command Overview - Bash\nDESCRIPTION: This Bash snippet demonstrates how to execute the 'cerbero-uninstalled' script without any parameters to display the list of available Cerbero build and management commands. The script must be located in the Cerbero installation directory. No dependencies beyond Cerbero itself are required. The expected output is a usage summary printed to the terminal; no arguments are required for this exploration step.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/multiplatform-using-cerbero.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n``` bash\\n./cerbero-uninstalled\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining URL Link Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of URL link frames in ID3v2 tags. These frames store web addresses related to the audio file, with a header identifying the specific type of URL and the URL string itself.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n<Header for 'URL link frame', ID: \"W000\" - \"WZZZ\", excluding \"WXXX\" described\nin 4.3.2.>\nURL <text string>\n```\n\n----------------------------------------\n\nTITLE: GStreamer Control Source Range Example\nDESCRIPTION: Example showing the expected value ranges for control sources in GStreamer's control system.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/controller.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[0.0 and 1.0]\n```\n\n----------------------------------------\n\nTITLE: Defining GESAsset Request Method in C\nDESCRIPTION: API draft for the main GESAsset class, including the ges_asset_request method for creating new assets asynchronously. This method is crucial for initializing assets based on extractable types and identifiers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/asset.txt#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ngboolean\nges_asset_request (GType extractable_type, GESAssetCreatedCallback callback,\n                    gpointer user_data, const gchar *id);\n```\n\n----------------------------------------\n\nTITLE: Specifying GRAY16_LE and Y16 Formats in GStreamer\nDESCRIPTION: Defines the structure of the GRAY16_LE and Y16 formats, 16-bit grayscale formats with the least significant byte first. It details the component depth, stride, and memory layout.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           16 LE\n          offset:          0\n          pstride:         2\n          default rstride: RU4 (width * 2)\n          default size:    rstride (component0) * height\n\n        Image\n          default size:    size (component0)\n```\n\n----------------------------------------\n\nTITLE: Adding a Package with Advanced Options Using Cerbero-Uninstalled - Bash\nDESCRIPTION: This bash command demonstrates how to add a new package with additional options, such as setting the license, codename, vendor, URL, file lists, dependencies, and includes. It exercises Cerbero's rich command-line interface to fully customize the generated package file attributes at creation time. Required dependencies: Cerbero installed and configured, and familiarity with available attribute values. Parameters specify all major metadata and package content selections, resulting in a comprehensive skeleton package file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/multiplatform-using-cerbero.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"./cerbero-uninstalled add-package my-app 1.0 --license \\\"LGPL\\\" --codename MyApp --vendor MyAppVendor --url \\\"http://www.my-app.com\\\" --files=my-app:bins:libs --files-devel=my-app:devel --platform-files=linux:my-app:linux_specific --platform-files-devel=linux:my-app:linux_specific_devel,windows:my-app:windows_specific_devel --deps base-system --includes gstreamer-core\"\n```\n\n----------------------------------------\n\nTITLE: Compiling GStreamer Hello World Application\nDESCRIPTION: Command line instructions for compiling the GStreamer hello world application using gcc with pkg-config to obtain the necessary compiler and linker flags.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/helloworld.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcc -Wall helloworld.c -o helloworld $(pkg-config --cflags --libs gstreamer-1.0)\n```\n\n----------------------------------------\n\nTITLE: Specifying RGB15 Format in GStreamer\nDESCRIPTION: Defines the structure of the RGB15 format, an RGB format with 5-5-5 bits per component. It details the component depths and pixel stride for R, G, and B components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+ +--+--+--+\n       |R0|G0|B0| |R1|G1|B1| ...\n       +--+--+--+ +--+--+--+\n\n        Component 0: R\n          depth:           5\n          pstride:         2\n\n        Component 1: G\n          depth            5\n          pstride:         2\n\n        Component 2: B\n          depth:           5\n          pstride:         2\n\n        Image\n          default rstride: RU4 (width * 2)\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Cranking GStreamer Test Clock\nDESCRIPTION: Action to crank the GStreamer test clock and optionally verify elapsed time and current clock time. Uses GstTestClock for driving the clock.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_31\n\nLANGUAGE: validate-scenario\nCODE:\n```\ncrank-clock,\n    [expected-elapsed-time=(GstClockTime)],\n    [expected-time=(GstClockTime)],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Playing AVI with External Subtitles using Playbin\nDESCRIPTION: Shows how to play an AVI movie with an external text subtitle stream using the playbin element.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 playbin3 uri=<file:///path/to/movie.avi> suburi=<file:///path/to/movie.srt>\n```\n\n----------------------------------------\n\nTITLE: GStreamer Audio Sink Class Hierarchy Diagram\nDESCRIPTION: ASCII diagram showing the inheritance hierarchy of GStreamer audio sink classes, including basesink, audiobasesink, and audiosink, along with their primary responsibilities.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/audiosinks.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+-----------+   - provide preroll, rendering, timing\n+ basesink  +   - caps nego\n+-----+-----+\n      |\n+-----V----------+   - manages ringbuffer\n+ audiobasesink  +   - manages scheduling (push/pull)\n+-----+----------+   - manages clock/query/seek\n      |              - manages scheduling of samples in the ringbuffer\n      |              - manages caps parsing\n      |\n+-----V------+   - default ringbuffer implementation with a GThread\n+ audiosink  +   - subclasses provide open/read/close methods\n+------------+\n```\n\n----------------------------------------\n\nTITLE: Defining ID3v2 Standard URL Link Frame Structure (plaintext)\nDESCRIPTION: Defines the general structure for standard ID3v2 URL link frames (identifiers W000-WZZZ, excluding WXXX). The frame body consists solely of the URL represented as a text string. Generally, only one frame of a specific type (e.g., WCOM, WOAR) is permitted per tag unless the frame description specifies otherwise.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n   <Header for 'URL link frame', ID: \"W000\" - \"WZZZ\", excluding \"WXXX\"\n   described in 4.3.2.>\n   URL              <text string>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Module Name in Meson\nDESCRIPTION: Defines a Meson build option 'opengl_module_name' of type string. It specifies the filename to be used by g_module_open for loading the libGL library, overriding the default 'libGL'.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_7\n\nLANGUAGE: meson\nCODE:\n```\noption('opengl_module_name', type : 'string', value : '',\n       description : 'The file to pass to g_module_open to open the libGL library (default: libGL)')\n```\n\n----------------------------------------\n\nTITLE: Configuring GES-Specific Build Options in Meson\nDESCRIPTION: Defines GES-specific build configuration options including bash completion, Python settings, XPTV formatter, and GstValidate integration. Includes Python interpreter and library path configurations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/meson_options.txt#2025-04-23_snippet_1\n\nLANGUAGE: meson\nCODE:\n```\n# GES options\noption('bash-completion', type : 'feature', value : 'auto',\n       description : 'Install bash completion files')\noption('pygi-overrides-dir', type : 'string', value : '',\n        description: 'Path to pygobject overrides directory')\noption('xptv', type : 'feature', value : 'auto',\n       description : 'Build the deprecated xptv formatter')\noption('python', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable python formatters.')\noption('python-exe', type : 'string', value: 'python3', yield: true,\n       description: 'Path or name of the Python interpreter to build for.')\noption('libpython-dir', type : 'string', value : '',\n        description: 'Path to find libpythonXX.so')\noption('validate', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable GstValidate integration.')\n```\n\n----------------------------------------\n\nTITLE: Declaring GESTrackParseLaunchEffect Constructor in C\nDESCRIPTION: This snippet declares a C function for creating a new GESTrackEffect from a gst-launch-like bin description. It's intended for testing purposes and provides a convenient way to create effects using a string description.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/effects.txt#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nGESTrackEffect *ges_track_parse_launch_effect_new (GESTrackEffect *effect,\n                                                   const gchar *bin_desc);\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Installation Detail String\nDESCRIPTION: Example format of a plugin installation detail string used by GStreamer's plugin installation system. The string contains fields like system identifier, version, application ID, and component description separated by pipe characters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/missing-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngstreamer|0.10|totem|Vorbis audio decoder|decoder-audio/x-vorbis\n```\n\n----------------------------------------\n\nTITLE: Installing LCEVC SDK Headers and Libraries via Shell\nDESCRIPTION: This shell snippet copies all header (*.h) files and shared library (*.so) files from the extracted SDK directories into the target installation directories of the system (here, /usr/local/include and /usr/local/lib). This step manually installs SDK components, which is required before configuring the build for GStreamer integration. The -v flag provides verbose output confirming the files that are copied.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/lcevcencoder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cp -v include/*.h /usr/local/include\\n$ cp -v *.so /usr/local/lib\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Posterization in C\nDESCRIPTION: Sets the minimum posterization level, ignoring least significant bits in all channels. Useful for optimizing images for specific display types.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nliq_set_min_posterization(liq_attr* attr, int bits);\n```\n\n----------------------------------------\n\nTITLE: Defining ID3v2 Frame Header Flags Structure\nDESCRIPTION: Specifies the bit structure for frame header flags that determine preservation, compression, encryption, and grouping behaviors for ID3v2 frames.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_6\n\nLANGUAGE: markup\nCODE:\n```\n  %abc00000 %ijk00000\n```\n\n----------------------------------------\n\nTITLE: Setting Package Name for Plugins in Meson\nDESCRIPTION: Defines a Meson string option 'package-name' used to embed a package name within GStreamer plugins. The 'yield: true' indicates this value might be passed down to subprojects.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_16\n\nLANGUAGE: meson\nCODE:\n```\n# Common options\noption('package-name', type : 'string', yield : true,\n       description : 'package name to use in plugins')\n```\n\n----------------------------------------\n\nTITLE: Specifying v308 Format in GStreamer\nDESCRIPTION: Defines the structure of the v308 format, a packed 4:4:4 YUV format. It details the component depths, pixel stride, and memory offsets for Y, U, and V components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+ +--+--+--+\n       |Y0|U0|V0| |Y1|U1|V1| ...\n       +--+--+--+ +--+--+--+\n\n        Component 0: Y\n          depth:           8\n          pstride:         3\n          offset:          0\n\n        Component 1: U\n          depth            8\n          pstride:         3\n          offset:          1\n\n        Component 2: V\n          depth:           8\n          pstride:         3\n          offset:          2\n\n        Image\n          default rstride: RU4 (width * 3)\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Including GStreamer Controller Headers\nDESCRIPTION: Required header includes for using GStreamer controller functionality in C applications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/dparams.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gst/gst.h>\n#include <gst/controller/gstinterpolationcontrolsource.h>\n#include <gst/controller/gstdirectcontrolbinding.h>\n...\n```\n\n----------------------------------------\n\nTITLE: Video Pipeline ASCII Diagram\nDESCRIPTION: ASCII art showing a simple video pipeline configuration with source, demuxer, queue, decoder and sink elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/framestep.md#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n.-----.    .-------.              .------.    .-------.\n| src |    | demux |    .-----.   | vdec |    | vsink |\n|    src->sink    src1->|queue|->sink   src->sink     |\n'-----'    '-------'    '-----'   '------'    '-------'\n```\n\n----------------------------------------\n\nTITLE: Setting Playbin Connection Speed Property\nDESCRIPTION: Sets the 'connection-speed' property of the `playbin` element using `g_object_set`. This property informs `playbin` about the network bandwidth (e.g., 56 kbps), which can influence stream selection decisions when multiple quality levels are available, particularly with streaming protocols.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n/* Set connection speed. This will affect some internal decisions of playbin */\ng_object_set (data.playbin, \"connection-speed\", 56, NULL);\n```\n\n----------------------------------------\n\nTITLE: Defining Relative Volume Adjustment Frame Format in ID3v2\nDESCRIPTION: Specifies the RVAD (Relative volume adjustment) frame format in ID3v2 tags, which allows for volume adjustments per channel to align audio files to a reference volume or for balance adjustment.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n  <Header for 'Relative volume adjustment', ID: \"RVAD\">\n  Increment/decrement             %00xxxxxx\n  Bits used for volume descr.     $xx\n  Relative volume change, right   $xx xx (xx ...)\n  Relative volume change, left    $xx xx (xx ...)\n  Peak volume right               $xx xx (xx ...)\n  Peak volume left                $xx xx (xx ...)\n```\n\n----------------------------------------\n\nTITLE: Destroying Unreffed Relationship with Object1 Reference\nDESCRIPTION: Demonstrates how to safely break an unreffed relationship when holding a reference to object1, maintaining proper lock order.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nLOCK (object1);\nLOCK (object2);\nobject1->refpointer->refpointer = NULL;\nobject1->refpointer = NULL;\nUNLOCK (object2);\nUNLOCK (object1);\n```\n\n----------------------------------------\n\nTITLE: Removing Extracted Assets from Timeline in GStreamer\nDESCRIPTION: Removes all assets in a timeline that were extracted from a specified asset. Returns a boolean indicating success or failure of the operation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/asset.txt#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ngboolean ges_timeline_layer_add_asset   (GESTimeline *timeline, GESAsset *asset);\n```\n\n----------------------------------------\n\nTITLE: GStreamer Metadata Container Function Prototypes\nDESCRIPTION: Declares three functions for working with GESMetaContainer: a callback function pointer type, a function to convert metadata to string format, and a function to parse metadata from a string.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/metadata.txt#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ngpointer user_data);\n\ngchar *\nges_meta_container_metas_to_string     (GESMetaContainer *container);\n\ngboolean\nges_meta_container_add_metas_from_string (GESMetaContainer *container,\n                                          const gchar *str);\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for GStreamer Build - Shell\nDESCRIPTION: This shell code snippet shows how to set the PKG_CONFIG_PATH environment variable prior to building GStreamer plugin modules. This step is critical when installing GStreamer from source to ensure the build system locates the correct pkgconfig files for dependency resolution. Users must replace the path as needed if their installation prefix differs from /usr/local. No additional dependencies beyond a POSIX-compliant shell are required. The command requires appropriate permissions and may need to be run in the same session used for building.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/getting.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig\n```\n\n----------------------------------------\n\nTITLE: Setting Track Restriction Caps in GStreamer\nDESCRIPTION: Command to set restriction caps on tracks of a specific type. Takes optional playback time, track type and caps parameters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_10\n\nLANGUAGE: validate-scenario\nCODE:\n```\nset-track-restriction-caps,\n    [playback-time=(double,string)],\n    track-type=(string),\n    caps=(string);\n```\n\n----------------------------------------\n\nTITLE: GStreamer Control Setup Function Style Example\nDESCRIPTION: Example of a proposed function-style syntax for control setup descriptions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/controller.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\ndirect(control-source=lfo(waveform=sine,offset=0.5))\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Build Options with Meson\nDESCRIPTION: This configuration file defines all available build options for the GStreamer project using Meson's option() syntax. It includes settings for GStreamer subprojects, language bindings, external dependencies, build features, and various customization options.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\n# GStreamer subprojects\noption('base', type : 'feature', value : 'enabled')\noption('good', type : 'feature', value : 'enabled')\noption('ugly', type : 'feature', value : 'enabled')\noption('bad', type : 'feature', value : 'enabled')\noption('libav', type : 'feature', value : 'auto')\noption('devtools', type : 'feature', value : 'auto')\noption('ges', type : 'feature', value : 'auto')\noption('rtsp_server', type : 'feature', value : 'auto')\noption('rs', type : 'feature', value : 'disabled')\noption('vaapi', type : 'feature', value : 'disabled')\noption('gst-examples', type : 'feature', value : 'auto', description : 'Build gst-examples subproject')\n# Bindings\noption('python', type : 'feature', value : 'auto')\noption('python-exe', type: 'string', value: 'python3', description: 'Path or name of the Python interpreter to build for')\noption('sharp', type : 'feature', value : 'disabled')\n# External subprojects\noption('tls', type : 'feature', value : 'auto', description : 'TLS support using glib-networking as a subproject')\noption('libnice', type : 'feature', value : 'auto', description: 'ICE support using libnice as a subproject')\noption('gtk', type: 'feature', value: 'disabled', description: 'Build GTK4 as a subproject')\n\n# Build for fuzzing\noption('oss_fuzz', type : 'feature', value : 'disabled',\n       description: 'Use fuzzing build environment')\n\n# Other options\noption('custom_subprojects', type : 'string', value : '', description : 'Comma-separated project names')\noption('gst-full', type: 'feature', value: 'auto', description: 'Enable the gstreamer-full library feature')\noption('gst-full-libraries', type : 'array', value : [],\n  description : '''List of libraries to expose in gstreamer-full's ABI. gstreamer, glib and gobject are always included.''')\noption('gst-full-version-script', type : 'string', value: 'data/misc/gstreamer-full-default.map',\n  description : 'path of the version script to be used by the linker, see https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html')\noption('gst-full-plugins', type : 'string', value : '*',\n  description : '''List of plugins to expose in gstreamer-full's ABI with the syntax plugin1;plugin2. By default '*' will export all plugins enabled by the build process.''')\noption('gst-full-elements', type : 'string', value : '',\n  description : '''List of elements to expose in gstreamer-full's ABI with the syntax plugin1;plugin2:element1,element2. By default '' will export all element of the enabled plugin.''')\noption('gst-full-typefind-functions', type : 'string', value : '',\n  description : '''List of typefind functions to expose in gstreamer-full's ABI with the syntax plugin:func1,func2. By default '' will export all typefind functions of the enabled plugin.''')\noption('gst-full-device-providers', type : 'string', value : '',\n  description : '''List of device providers to expose in gstreamer-full's ABI with the syntax plugin1:dp1;plugin2:dp1:dp2. By default '' will export all device provider of the enabled plugin.''')\noption('gst-full-dynamic-types', type : 'string', value : '',\n  description : '''List of dynamic types to expose in gstreamer-full's ABI with the syntax plugin:dt1,dt2. By default '' will export all device provider of the enabled plugin.''')\noption('gst-full-target-type', type : 'combo', value : 'shared_library', choices: ['static_library', 'shared_library'],\n  description : '''The type of library of gstreamer-full-1.0.''')\noption('orc-source', type: 'combo', choices: ['system', 'subproject', 'auto'], value: 'subproject')\noption('build-tools-source', type: 'combo', choices: ['system', 'subproject'], value: 'subproject')\noption('virtme_kernel_image', type: 'string', value: '', description: 'Path to a Linux kernel image to be used for virtme testing')\n\n# License-related feature options\noption('gpl', type: 'feature', value: 'disabled',\n  description: 'Allow build of plugins that have (A)GPL-licensed dependencies')\noption('gstreamer-full-license', type : 'string', value : 'unknown',\n       description : 'gstreamer-full license (default unknown)')\n\n# Common options specific to GStreamer, automatically inherited by subprojects.\noption('package-origin', type : 'string', value : 'Unknown package origin', yield : true,\n       description : 'package origin URL to use in plugins')\noption('package-name', type : 'string', yield : true,\n       description : 'package name to use in plugins')\noption('extra-checks', type : 'feature', value : 'enabled', description : 'Enable extra runtime checks')\noption('benchmarks', type : 'feature', value : 'auto')\noption('tools', type : 'feature', value : 'auto', yield : true, description : 'Build command line tools')\noption('orc', type : 'feature', value : 'auto', description : 'Optimized Inner Loop Runtime Compiler (SIMD)')\noption('qt5', type : 'feature', value : 'auto', description : 'Qt5 toolkit support')\noption('qt6', type : 'feature', value : 'auto', description : 'Qt6 toolkit support')\noption('webrtc', type : 'feature', value : 'auto', description : 'WebRTC support')\n\n# Common options shared by other projects, automatically inherited by subprojects.\noption('glib_debug', type : 'feature', value : 'auto', yield : true, description : 'Enable GLib debug infrastructure (see docs/macros.txt)')\noption('glib_assert', type : 'boolean', value : true, yield : true, description : 'Enable GLib assertion (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\noption('glib_checks', type : 'boolean', value : true, yield : true, description : 'Enable GLib checks such as API guards (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\noption('tests', type : 'feature', value : 'auto', description : 'Build tests')\noption('examples', type : 'feature', value : 'auto', description : 'Build examples')\noption('introspection', type : 'feature', value : 'auto', description : 'Generate introspection data')\noption('nls', type : 'feature', value : 'auto', description : 'Native language support (translations)')\noption('doc', type : 'feature', value : 'disabled', description : 'Generate API documentation with hotdoc')\noption('gtk_doc', type : 'feature', value : 'disabled', description : 'Generate API documentation with gtk-doc')\n\n# Deprecated, kept for backward compat\noption('gobject-cast-checks', type : 'feature', value : 'auto', yield : true,\n       description: 'Enable run-time GObject cast checks (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_debug')\noption('glib-asserts', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib assertion (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_assert')\noption('glib-checks', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib checks such as API guards (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_checks')\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Pipeline in GStreamer\nDESCRIPTION: Creates a new pipeline with optional scenario execution capabilities. Supports pipeline description, naming, and scenario specifications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_38\n\nLANGUAGE: validate-scenario\nCODE:\n```\ncreate-sub-pipeline,\n    desc=(string),\n    [name=((string))],\n    [scenario=({array of [structures]})],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Specifying the ID3v2 Tag Detection Pattern\nDESCRIPTION: Provides the byte pattern used to detect an ID3v2 tag at the beginning of a file. It checks for the 'ID3' identifier ($49 44 33), ensures version bytes (yy) are less than $FF, checks the flags byte (xx), and verifies the four size bytes (zz) are sync-safe (each less than $80, MSB is 0).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$49 44 33 yy yy xx zz zz zz zz\n```\n\n----------------------------------------\n\nTITLE: Illustrating Timeshifting Pipeline in GStreamer\nDESCRIPTION: This code snippet illustrates the structure of a GStreamer pipeline for timeshifting. It shows how httpsrc, buffer, and demux elements are connected, with the buffer element writing to a file-ringbuffer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/buffering.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n+---------+     +---------+     +-------+\n| httpsrc |     | buffer  |     | demux |\n|        src - sink      src - sink     ....\n+---------+     +----|----+     +-------+\n                     V\n              file-ringbuffer\n```\n\n----------------------------------------\n\nTITLE: GStreamer Scenario Execution Command\nDESCRIPTION: Command example for executing validation scenarios with gst-validate-1.0\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/validate/docs/validate-usage.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-1.0 playbin uri=file:///path/to/some/media/file --set-scenario=seek_forward\n```\n\n----------------------------------------\n\nTITLE: Set Rank Command in GStreamer Validate Scenario\nDESCRIPTION: Changes the ranking of plugin features at the beginning of pipeline execution.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_13\n\nLANGUAGE: validate-scenario\nCODE:\n```\nset-rank,\n    name=(string),\n    rank=(string, int);\n```\n\n----------------------------------------\n\nTITLE: Requesting Video Key Unit\nDESCRIPTION: Action to request a video key unit in either upstream or downstream direction with configurable parameters like headers, count and running time.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_32\n\nLANGUAGE: validate-scenario\nCODE:\n```\nvideo-request-key-unit,\n    direction=(string),\n    [all-headers=(boolean)],\n    [count=(int)],\n    [pad=(string)],\n    [running-time=(double or string)],\n    [srcpad=(string)],\n    [target-element-factory-name=(string)],\n    [target-element-klass=(string)],\n    [target-element-name=(string)],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Defining GLib Checks Boolean Option in Meson\nDESCRIPTION: Defines a Meson build option named 'glib_checks' of type 'boolean', defaulting to 'true'. It yields its value, provides a description referencing documentation, and marks older feature-type values ('enabled', 'disabled', 'auto') as deprecated in favor of boolean true/false. This option enables GLib runtime checks like API guards.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_9\n\nLANGUAGE: meson\nCODE:\n```\noption('glib_checks', type : 'boolean', value : true, yield : true, description : 'Enable GLib checks such as API guards (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Quantization Error in C\nDESCRIPTION: Returns the mean square error of quantization, taking into account alpha channel and gamma correction.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_27\n\nLANGUAGE: c\nCODE:\n```\ndouble liq_get_quantization_error(liq_result *result);\n```\n\n----------------------------------------\n\nTITLE: Setting Subtitles in GStreamer Playbin\nDESCRIPTION: Configures subtitle files for playbin pipelines. Supports relative path specification for subtitle files.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_41\n\nLANGUAGE: validate-scenario\nCODE:\n```\nset-subtitle,\n    subtitle-file=(string (A URI)),\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Setting Parent-Child Relationship in GStreamer\nDESCRIPTION: Implementation of parent-child relationship establishment in GStreamer. Handles reference counting and floating flag management.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nresult = _set_parent (child, parent);\nif (result) {\n  lock (parent);\n  ref_pointer = child;\n\n  1.  update other data structures .. unlock (parent);\n} else {\n\n  2.  child had parent ..\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GLib Checks (API Guards) in Meson\nDESCRIPTION: Defines a Meson boolean option 'glib_checks' to enable or disable GLib's runtime checks, such as API guards (g_return_if_fail). Defaults to true. Includes deprecated mappings. 'yield: true' propagates the setting.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_21\n\nLANGUAGE: meson\nCODE:\n```\noption('glib_checks', type : 'boolean', value : true, yield : true, description : 'Enable GLib checks such as API guards (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\n```\n\n----------------------------------------\n\nTITLE: Describing I420_10LE Planar 4:2:0 YUV, 10 bits/channel LE in Plaintext\nDESCRIPTION: This block documents the I420_10LE format, a planar YUV layout with each component at 10 bits (little-endian). It offers exact offset, stride, and planar size details for each component, which are essential for buffer handling when reading or writing high bit-depth YUV420 LE images. Inputs: width, height; output: buffer segmentation for each plane and total image.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_43\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           10 LE\n          pstride:         2\n          default offset:  0\n          default rstride: RU4 (width * 2)\n          default size:    rstride (component0) * RU2 (height)\n\n        Component 1: U\n          depth:           10 LE\n          pstride:         2\n          default offset:  size (component0)\n          default rstride: RU4 (width)\n          default size:    rstride (component1) * RU2 (height) / 2\n\n        Component 2: V\n          depth            10 LE\n          pstride:         2\n          default offset:  offset (component1) + size (component1)\n          default rstride: RU4 (width)\n          default size:    rstride (component2) * RU2 (height) / 2\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n```\n\n----------------------------------------\n\nTITLE: Checking Branch Status and Updating Merge Request\nDESCRIPTION: Commands for checking branch status, amending commits, and force pushing changes to update a merge request\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/contribute/index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ git status\nOn branch fix-xyz\nYour branch is up to date with '$GITLAB_USERNAME/fix-xyz'.\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   subprojects/gst-docs/markdown/contribute/index.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n$ git add subprojects/gst-docs/markdown/contribute/index.md\n$ git commit --amend\n\n$ git push --force-with-lease\n```\n\n----------------------------------------\n\nTITLE: Visualizing Simple MP3 Playback Pipeline Structure\nDESCRIPTION: ASCII art diagram showing a basic GStreamer pipeline with three elements: filesrc (source), mp3dec (decoder), and alsasink (audio sink). The elements are connected via source-sink pad links within a pipeline container.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: ascii-art\nCODE:\n```\n+-------------------------------------------+\n| pipeline                                  |\n| +---------+   +----------+   +----------+ |\n| | filesrc |   | mp3dec   |   | alsasink | |\n| |        src-sink       src-sink        | |\n| +---------+   +----------+   +----------+ |\n+-------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Declaring GESTrackMaterialEffect Constructor in C\nDESCRIPTION: This snippet declares a C function for creating a new GESTrackEffect from a GESEffect material. It provides a way to instantiate track effects based on predefined effect materials.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/effects.txt#2025-04-23_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nGESTrackEffect *ges_track_material_effect_new (GESTrackEffect *effect,\n                                               GESEffect *effect_material);\n```\n\n----------------------------------------\n\nTITLE: Defining the ID3v2.3.0 Extended Header Structure\nDESCRIPTION: Describes the optional ID3v2 extended header format that follows the main header if the corresponding flag is set. It includes the size of the extended header itself (4 bytes, excluding these size bytes), two bytes for extended flags, and the total size of padding (4 bytes) within the tag. The extended header content is subject to unsynchronisation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nExtended header size   $xx xx xx xx\nExtended Flags         $xx xx\nSize of padding        $xx xx xx xx\n```\n\n----------------------------------------\n\nTITLE: GStreamer Validation Preload Command\nDESCRIPTION: Example of using LD_PRELOAD to enable validation in existing applications\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/validate/docs/validate-usage.txt#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nLD_PRELOAD=path/to/libgstvalidatepreload.so yourapp ...\n```\n\n----------------------------------------\n\nTITLE: Defining GstValidate Scenario Metadata\nDESCRIPTION: The meta action type defines scenario metadata including configuration options like timing, error handling, and execution requirements. It's executed at the beginning of the pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_0\n\nLANGUAGE: validate-scenario\nCODE:\n```\nmeta,\n    [allow-errors=(boolean)],\n    [base-time=(double or string (GstClockTime))],\n    [configs=({GstStructure as string})],\n    [duration=(double, int)],\n    [expected-issues=({GstStructure as string})],\n    [handles-states=(boolean)],\n    [ignore-eos=(boolean)],\n    [is-config=(boolean)],\n    [max-dropped=(int)],\n    [max-latency=(double, int)],\n    [min-audio-track=(int)],\n    [min-media-duration=(double)],\n    [min-video-track=(int)],\n    [need-clock-sync=(boolean)],\n    [pipeline-name=(string)],\n    [reverse-playback=(boolean)],\n    [seek=(boolean)],\n    [start-time=(double or string (GstClockTime))],\n    [summary=(string)],\n    [use-system-clock=(bool)];\n```\n\n----------------------------------------\n\nTITLE: Defining Recommended Buffer Size Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the RBUF frame which suggests buffer sizes for streaming audio. This frame includes buffer size, a flag indicating if tags may be embedded in the audio stream, and an optional offset to the next tag.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n  <Header for 'Recommended buffer size', ID: \"RBUF\">\n  Buffer size             $xx xx xx\n  Embedded info flag      %0000000x\n  Offset to next tag      $xx xx xx xx\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer without Debug Subsystem (Bash)\nDESCRIPTION: Illustrates how to pass the `--disable-gst-debug` flag to the `configure` script. This option turns the GStreamer debugging subsystem into a non-functional stub, removing debug-related code and macro invocations from the compiled library and applications built against it.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/gst/building.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--disable-gst-debug\n```\n\n----------------------------------------\n\nTITLE: UI Message Setting in C\nDESCRIPTION: Function to send messages from C to Java UI thread. Handles string conversion between C and Java and proper JNI exception handling.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_34\n\nLANGUAGE: c\nCODE:\n```\nstatic void set_ui_message (const gchar *message, CustomData *data) {\n  JNIEnv *env = get_jni_env ();\n  GST_DEBUG (\"Setting message to: %s\", message);\n  jstring jmessage = (*env)->NewStringUTF(env, message);\n  (*env)->CallVoidMethod (env, data->app, set_message_method_id, jmessage);\n  if ((*env)->ExceptionCheck (env)) {\n    GST_ERROR (\"Failed to call Java method\");\n    (*env)->ExceptionClear (env);\n  }\n  (*env)->DeleteLocalRef (env, jmessage);\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Clips in GES Timeline Action Syntax\nDESCRIPTION: Defines the syntax for splitting a clip at a specified position. This operation divides a single clip into two separate clips at the given position, allowing more complex editing operations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_9\n\nLANGUAGE: validate-scenario\nCODE:\n```\nsplit-clip,\n    [playback-time=(double,string)],\n    clip-name=(string),\n    position=(double or string);\n```\n\n----------------------------------------\n\nTITLE: Specifying RGB16 Format in GStreamer\nDESCRIPTION: Defines the structure of the RGB16 format, an RGB format with 5-6-5 bits per component. It details the component depths and pixel stride for R, G, and B components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+ +--+--+--+\n       |R0|G0|B0| |R1|G1|B1| ...\n       +--+--+--+ +--+--+--+\n\n        Component 0: R\n          depth:           5\n          pstride:         2\n\n        Component 1: G\n          depth            6\n          pstride:         2\n\n        Component 2: B\n          depth:           5\n          pstride:         2\n\n        Image\n          default rstride: RU4 (width * 2)\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Configuring PTP Helper Options in GStreamer\nDESCRIPTION: Defines options for the PTP (Precision Time Protocol) helper utility including build control, user/group settings, and permission model. These settings control how the PTP helper is built and installed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/meson_options.txt#2025-04-23_snippet_1\n\nLANGUAGE: meson\nCODE:\n```\noption('ptp-helper', type: 'feature', description: 'Build gst-ptp-helper')\noption('ptp-helper-setuid-user', type : 'string',\n       description : 'User to switch to when installing gst-ptp-helper setuid root')\noption('ptp-helper-setuid-group', type : 'string',\n       description : 'Group to switch to when installing gst-ptp-helper setuid root')\noption('ptp-helper-permissions', type : 'combo',\n       choices : ['none', 'setuid-root', 'capabilities', 'auto'], value : 'auto')\n```\n\n----------------------------------------\n\nTITLE: set-debug-threshold: GStreamer Validation Scenario Action\nDESCRIPTION: Sets the GStreamer debug level threshold using a string format identical to the GST_DEBUG environment variable. Requires the `debug-threshold` parameter specifying the level. Optionally, `playback-time` or `on-message` can specify when the action executes, triggering on whichever occurs first if both are provided.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_23\n\nLANGUAGE: validate-scenario\nCODE:\n```\n``` validate-scenario\nset-debug-threshold,\n    debug-threshold=(string),\n    [playback-time=(double,string)];\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Unique File Identifier Frame Structure\nDESCRIPTION: Specifies the structure of the UFID frame which contains an owner identifier and a binary identifier used to uniquely identify audio files in databases.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_7\n\nLANGUAGE: markup\nCODE:\n```\n  <Header for 'Unique file identifier', ID: \"UFID\">\n  Owner identifier    <text string> $00\n  Identifier    <up to 64 bytes binary data>\n```\n\n----------------------------------------\n\nTITLE: Including Orc in GStreamer Makefile\nDESCRIPTION: This snippet shows how to include Orc in a GStreamer plugin's Makefile.am. It sets the ORC_BASE variable and includes the common Orc makefile.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/orc-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nORC_BASE=volume\ninclude $(top_srcdir)/common/orc.mk\n```\n\n----------------------------------------\n\nTITLE: Adding Layers to GES Timeline Action Syntax\nDESCRIPTION: Defines the syntax for adding a new layer to the current GES timeline. Optionally allows specifying the priority of the new layer, otherwise it will be appended to the timeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_3\n\nLANGUAGE: validate-scenario\nCODE:\n```\nadd-layer,\n    [playback-time=(double,string)],\n    [priority];\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Checks Locally with Hotdoc\nDESCRIPTION: Commands for setting up and running documentation validation locally to check for missing Since tags without waiting for CI. This workflow enables quick verification of documentation changes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/contribute/index.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Make sure you have hotdoc\npipx install hotdoc\n# Make sure you have a doc-enabled build\nrm -rf build && meson build -Dgpl=enabled -Ddoc=enabled && ninja -C build\n# Build the complete documentation once\nninja -C build/ subprojects/gst-docs/GStreamer-doc -v\n# Enter the devenv, hotdoc now finds the current devhelp2 files and\n# will not emit warnings about incorrect links\nninja -C build devenv\n# Go back to the toplevel directory\ncd ..\n# Build the exact documentation subproject you are interested in,\n# this is super fast, adapt command to your case\nhotdoc run --conf-file build/subprojects/gst-plugins-bad/docs/mpegts-doc.json --previous-symbol-index subprojects/gst-docs/symbols/symbol_index.json\n```\n\n----------------------------------------\n\nTITLE: GStreamer Video Orientation Values\nDESCRIPTION: Enumeration of video orientation options for rotating and flipping video content, including standard rotations and custom orientations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/libs/GESVideoTestSource-children-props.md#2025-04-23_snippet_1\n\nLANGUAGE: gstreamer\nCODE:\n```\nvideo-direction=0  # GST_VIDEO_ORIENTATION_IDENTITY\nvideo-direction=1  # GST_VIDEO_ORIENTATION_90R\nvideo-direction=2  # GST_VIDEO_ORIENTATION_180\nvideo-direction=3  # GST_VIDEO_ORIENTATION_90L\nvideo-direction=4  # GST_VIDEO_ORIENTATION_HORIZ\nvideo-direction=5  # GST_VIDEO_ORIENTATION_VERT\nvideo-direction=6  # GST_VIDEO_ORIENTATION_UL_LR\nvideo-direction=7  # GST_VIDEO_ORIENTATION_UR_LL\nvideo-direction=8  # GST_VIDEO_ORIENTATION_AUTO\nvideo-direction=9  # GST_VIDEO_ORIENTATION_CUSTOM\n```\n\n----------------------------------------\n\nTITLE: Injecting GTK Events in GStreamer\nDESCRIPTION: Injects GDK events into the GTK event system. Supports keyboard events, string input, and widget targeting.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_40\n\nLANGUAGE: validate-scenario\nCODE:\n```\ngtk-put-event,\n    [keys=(string)],\n    [string=(string)],\n    [type=(string)],\n    [widget-name=(string)],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Getting Metadata from GESMetaContainer (C API)\nDESCRIPTION: API functions for retrieving various types of metadata from a GESMetaContainer. These functions allow getting boolean, integer, float, string, date, and other types of metadata.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/metadata.txt#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\ngboolean\nges_meta_container_get_boolean     (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        gboolean* dest);\n\ngboolean\nges_meta_container_get_int         (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        gint* dest);\n\ngboolean\nges_meta_container_get_uint        (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        guint* dest);\n\ngboolean\nges_meta_container_get_int64       (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        gint64* dest);\n\ngboolean\nges_meta_container_get_uint64      (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        guint64* dest);\n\ngboolean\nges_meta_container_get_float       (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        gfloat* dest);\n\ngboolean\nges_meta_container_get_double      (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        gdouble* dest);\n\ngboolean\nges_meta_container_get_date        (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        GDate** dest);\n\ngboolean\nges_meta_container_get_date_time   (GESMetaContainer *container,\n                                        const gchar* meta_item,\n                                        GstDateTime** dest);\n\nconst gchar *\nges_meta_container_get_string      (GESMetaContainer * container,\n                                        const gchar * meta_item);\n\nconst GValue *\nges_meta_container_get_meta            (GESMetaContainer * container,\n                                        const gchar * key);\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecated GLib Debug Options in Meson\nDESCRIPTION: Defines deprecated GLib debugging options that are kept for backward compatibility. These options include cast checks, assertions, and API guards which have been replaced by newer options.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_23\n\nLANGUAGE: meson\nCODE:\n```\n# Deprecated, kept for backward compat\noption('gobject-cast-checks', type : 'feature', value : 'auto', yield : true,\n       description: 'Enable run-time GObject cast checks (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_debug')\noption('glib-asserts', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib assertion (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_assert')\noption('glib-checks', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib checks such as API guards (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_checks')\n```\n\n----------------------------------------\n\nTITLE: Defining ID3v2 ETCO Frame Event List Structure (plaintext)\nDESCRIPTION: Defines the format for individual key events listed within the ID3v2 ETCO frame, following the header. Each event entry consists of a byte indicating the 'Type of event' and a 'Time stamp' (whose size and unit depend on the 'Time stamp format' byte in the frame header). All events must be sorted chronologically.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n   Type of event   $xx\n   Time stamp      $xx (xx ...)\n```\n\n----------------------------------------\n\nTITLE: Setting GDB Arguments\nDESCRIPTION: Command to set command line arguments for the application being debugged in GDB\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: gdb\nCODE:\n```\nset args (the arguments to the application)\n```\n\n----------------------------------------\n\nTITLE: Running gst-validate-media-check with Expected Results in Bash\nDESCRIPTION: This command demonstrates how to use gst-validate-media-check to analyze a media file and compare the results against a reference file. It specifies the file to analyze and the expected results file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-media-check.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-media-check-GST_API_VERSION file:///./file.ogv --expected-results reference.media_info\n```\n\n----------------------------------------\n\nTITLE: Defining GESExtractable Interface Methods in C\nDESCRIPTION: API draft for the GESExtractable interface, which is responsible for managing the relationship between extractable objects and their assets. It includes methods for getting and setting assets, retrieving asset types, and handling asset IDs.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/asset.txt#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGESAsset *\nges_extractable_get_asset(GESExtractable *extractable);\n\nvoid\nges_extractable_set_asset (GESExtractable * self, GESAsset * asset)\n\nGType\nges_extractable_get_asset_type (GESExtractableClass *class)\n\nconst gchar *\nges_extractable_get_id (GESExtractable * self)\n\nGParameter *\nges_extractable_type_get_parameters_from_id (GType type, const gchar * id,\n    guint * n_params)\n\nGType\nges_extractable_type_get_asset_type (GType type)\n\ngchar *\nges_extractable_type_check_id (GType type, const gchar * id)\n```\n\n----------------------------------------\n\nTITLE: Generating Media Info Files for Local Media\nDESCRIPTION: Command to generate .media_info files for local media files, which are used by gst-validate-launcher for validation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-launcher.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-launcher --medias-paths /path/to/sample_files/ --generate-media-info\n```\n\n----------------------------------------\n\nTITLE: Wait Command in GStreamer Validate Scenario\nDESCRIPTION: Waits for signals, messages, or duration with various configuration options including property checks and non-blocking behavior.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_11\n\nLANGUAGE: validate-scenario\nCODE:\n```\nwait,\n    [check=(structure)],\n    [duration=(double or string (GstClockTime))],\n    [expected-values=(structure)],\n    [message-type=(string)],\n    [non-blocking=(string)],\n    [on-clock=(boolean)],\n    [property-name=(string)],\n    [property-value=(string)],\n    [signal-name=(string)],\n    [subpipeline-done=(string)],\n    [target-element-factory-name=(string)],\n    [target-element-name=(string)],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Defining Reverb Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the RVRB frame which contains audio reverb settings. This frame stores reverb parameters including delay times, bounce counts, feedback levels, and premix values for left and right channels.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n  <Header for 'Reverb', ID: \"RVRB\">\n  Reverb left (ms)                $xx xx\n  Reverb right (ms)               $xx xx\n  Reverb bounces, left            $xx\n  Reverb bounces, right           $xx\n  Reverb feedback, left to left   $xx\n  Reverb feedback, left to right  $xx\n  Reverb feedback, right to right $xx\n  Reverb feedback, right to left  $xx\n  Premix left to right            $xx\n  Premix right to left            $xx\n```\n\n----------------------------------------\n\nTITLE: Adding GStreamer Audio Library Linker Flag (Shell/Makefile)\nDESCRIPTION: This snippet shows the specific linker flag required to link against the GStreamer Audio Library. This flag should be added to the linker command line, typically appended to the output of `pkg-config --libs gstreamer-plugins-base-{{ gst_api_version.md }}`. The `{{ gst_api_version.md }}` placeholder must be replaced with the target GStreamer API version (e.g., 1.0).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/docs/libs/audio/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n-lgstaudio-{{ gst_api_version.md }}\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer and Qt5 Build Dependencies - CMake\nDESCRIPTION: This snippet configures the project's build system using CMake. It sets the minimum CMake version, verifies the presence of pkg-config, checks for required GStreamer modules, and finds the Qt5 components needed. It then defines source files and resources, applies include and link directories, creates an executable, and sets up the necessary Qt5 modules. Dependencies include CMake (3.3+), pkg-config, GStreamer 1.6+, Qt5Core, Qt5Widgets, Qt5Qml, and Qt5Quick. Key parameters are the versions and module names for the required packages, and the script expects the listed packages and files to be present in the build environment.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-good/tests/examples/qt/qmlsink/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.3)\n\ninclude(FindPkgConfig)\nif(!${PKG_CONFIG_FOUND})\n  MESSAGE(FATAL_ERROR \"pkg-config required. Please install it\")\n  return (\"Error - pkg-config not found\")\nendif()\n\npkg_check_modules(GSTREAMER gstreamer-1.0>=1.6 gstreamer-video-1.0>=1.6 REQUIRED)\n\nfind_package(Qt5Core REQUIRED)\nfind_package(Qt5Widgets REQUIRED)\nfind_package(Qt5Qml REQUIRED)\nfind_package(Qt5Quick REQUIRED)\n\nset (SRC_LIST main.cpp)\nqt5_add_resources(RESOURCES qmlsink.qrc)\nlink_directories(${GSTREAMER_LIBRARY_DIRS})\ninclude_directories (${GSTREAMER_INCLUDE_DIRS})\nadd_executable(qml-example ${SRC_LIST} ${RESOURCES})\ntarget_link_libraries (qml-example ${GSTREAMER_LIBRARIES})\nqt5_use_modules(qml-example Core Widgets Qml Quick)\n\n```\n\n----------------------------------------\n\nTITLE: Specifying BGR Format in GStreamer\nDESCRIPTION: Defines the structure of the BGR (Blue-Green-Red) format, including component depths, pixel stride, and memory offsets. This format is the reverse of standard RGB.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+ +--+--+--+\n       |B0|G0|R0| |B1|G1|R1| ...\n       +--+--+--+ +--+--+--+\n\n        Component 0: R\n          depth:           8\n          pstride:         3\n          offset:          2\n\n        Component 1: G\n          depth:           8\n          pstride:         3\n          offset:          1\n\n        Component 2: B\n          depth            8\n          pstride:         3\n          offset:          0\n\n        Image\n          default rstride: RU4 (width * 3)\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Options for GStreamer Components in Meson\nDESCRIPTION: Defines Meson build options for core GStreamer components including encoders, DRM, and various display systems. Each option is defined with a type, default value, and in some cases additional properties like yield or description.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer-vaapi/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('encoders', type : 'feature', value : 'auto')\noption('drm', type : 'feature', value : 'auto')\noption('x11', type : 'feature', value : 'auto')\noption('glx', type : 'feature', value : 'auto')\noption('wayland', type : 'feature', value : 'auto')\noption('egl', type : 'feature', value : 'auto')\n\n# Common feature options\noption('examples', type : 'feature', value : 'auto', yield : true)\noption('tests', type : 'feature', value : 'auto', yield : true)\noption('doc', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable documentation.')\noption('package-origin', type : 'string',\n       value : 'Unknown package origin',\n       yield : true, description : 'package origin URL to use in plugins')\n```\n\n----------------------------------------\n\nTITLE: Configuring GstValidate Core Functionality in YAML\nDESCRIPTION: Example YAML configuration for GstValidate core functionality, demonstrating how to set properties on elements and configure pipeline dumping based on issue levels.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-environment-variables.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncore, action=set-property, target-element-klass=Sink\n\ncore, action=dot-pipeline, report-level=issue\n```\n\n----------------------------------------\n\nTITLE: Defining Attached Picture Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the APIC frame which contains images related to the audio file. This frame includes image format, picture type, description, and the binary image data or a URL to an external image.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n  <Header for 'Attached picture', ID: \"APIC\">\n  Text encoding   $xx\n  MIME type       <text string> $00\n  Picture type    $xx\n  Description     <text string according to encoding> $00 (00)\n  Picture data    <binary data>\n```\n\n----------------------------------------\n\nTITLE: Creating Remote GStreamer Elements using Extended Factory API - C\nDESCRIPTION: This snippet proposes an extension to the standard GStreamer element factory API for creating elements on remote machines. The new function, gst_element_factory_make_remote, accepts a factory name, a name, and a pointer to GstRemoteFactory, enabling instantiation of pipeline elements across host boundaries. Dependencies include GStreamer and the definition or implementation of GstRemoteFactory. The function is intended for cases where element allocation and management occur on distributed hosts, with the expected input being element type, element name, and connection to a remote factory; output is a GstElement instance mapped remotely. This approach assumes availability of lookup methods (by hostname, IP, or zeroconf) for the remote factory handle.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/ensonic/distributed.txt#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nGstElement* gst_element_factory_make        (const gchar *factoryname,\n                                             const gchar *name);\n\nGstElement* gst_element_factory_make_remote (const gchar *factoryname,\n                                             const gchar *name,\n                                             GstRemoteFactory *remote);\n```\n\n----------------------------------------\n\nTITLE: Different Caps In-Place Transform Flow\nDESCRIPTION: ASCII diagram showing the buffer flow for in-place transformation with different input and output caps.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/element-transform.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n              sinkpad              transform               srcpad\n      chain()    |                    |                      |\n    ------------>|   handle_buffer()  |                      |\n                 |------------------->|                      |\n                 |                    | [!writable || !size] |\n                 |                    |     alloc buffer     |\n                 |                  .-|                      |\n                 |  <transform_ip>  | |                      |\n                 |                  '>|                      |\n                 |                    |      pad_push()      |\n                 |                    |--------------------->|\n                 |                    |                      |\n```\n\n----------------------------------------\n\nTITLE: VA-API Postprocessor Source Template\nDESCRIPTION: Source template capabilities for VA-API postprocessor element showing supported DRM formats and modifiers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/dmabuf.md#2025-04-23_snippet_4\n\nLANGUAGE: gstreamer\nCODE:\n```\nSRC template: 'src'\n    Availability: Always\n      Capabilities:\n        video/x-raw(memory:DMABuf)\n          width:  [ 16, 16384 ]\n          height: [ 16, 16384 ]\n          format: DMA_DRM\n          drm-format: { (string)NV12:0x0100000000000001, \\\n                        (string)NV12, (string)I420, (string)YV12, \\\n                        (string)BGRA:0x0100000000000002 }\n```\n\n----------------------------------------\n\nTITLE: Creating Git Branch and Commit\nDESCRIPTION: Basic Git commands for creating a new branch and committing changes with a properly formatted commit message\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/contribute/index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b fix-xyz\n\ngit commit path/to/file1.[ch]\n```\n\n----------------------------------------\n\nTITLE: New In-Point Calculation for Trimming\nDESCRIPTION: Formula for calculating new in-point when trimming clip start\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nnew-in-point = old-in-point + F (new-start - old-start)\n```\n\n----------------------------------------\n\nTITLE: Checking Pipeline Position\nDESCRIPTION: Action to verify the current position of the GStreamer pipeline against an expected position value.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_33\n\nLANGUAGE: validate-scenario\nCODE:\n```\ncheck-position,\n    expected-position=(GstClockTime),\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Defining GESProjectAsset Method in C\nDESCRIPTION: API draft for the GESProjectAsset subclass, which includes a method to list assets of a specified type within a project.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/asset.txt#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nges_asset_project_list_assets (GESAsset *project,\n```\n\n----------------------------------------\n\nTITLE: Object Locking Macros in GStreamer\nDESCRIPTION: Macros used for object locking and unlocking in GStreamer objects that extend from GstObject base class\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/MT-refcounting.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGST_OBJECT_LOCK();\nGST_OBJECT_UNLOCK();\n```\n\n----------------------------------------\n\nTITLE: GstObject Parent Reference Example\nDESCRIPTION: Code reference showing GstObject types that can be parented within GStreamer hierarchy\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstobject.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `GstObject`'s that can be parented: `GstElement` (inside a bin) `GstPad` (inside an element)\n```\n\n----------------------------------------\n\nTITLE: GstEvent API Changes in GStreamer 1.0\nDESCRIPTION: Shows renamed functions for GstEvent operations. Events are now boxed types derived from GstMiniObject, and the GstStructure is no longer part of the public API.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ngst_event_new_qos() /* Replaces gst_event_new_qos_full() */\ngst_event_parse_qos() /* Replaces gst_event_parse_qos_full() */\ngst_event_new_segment() /* Replaces gst_event_new_new_segment() */\ngst_event_parse_segment() /* Replaces gst_event_parse_new_segment() */\ngst_event_copy_segment() /* New function to fill a GstSegment structure */\ngst_event_new_flush_stop() /* Now takes a boolean parameter */\n```\n\n----------------------------------------\n\nTITLE: Position Synchronisation Frame Structure\nDESCRIPTION: Specifies the frame layout for position synchronization information, including timestamp format and position data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_31\n\nLANGUAGE: plain\nCODE:\n```\n<Head for 'Position synchronisation', ID: \"POSS\">\nTime stamp format   $xx\nPosition            $xx (xx ...)\n```\n\n----------------------------------------\n\nTITLE: Adding Orc Sources to GStreamer Plugin Build\nDESCRIPTION: This Makefile snippet demonstrates how to add the generated Orc sources to the plugin build process.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/orc-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nnodist_libgstvolume_la_SOURCES = $(ORC_SOURCES)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pull Dataflow Between Source and Sink Pads\nDESCRIPTION: ASCII diagram showing the detailed flow of pull operations between source and sink pads, including probe handling, flushing checks, and error conditions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/probes.md#2025-04-23_snippet_4\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n                srcpad                          sinkpad\n                  |                               |\n                  |                               | gst_pad_pull_range()\n                  |                               O<---------------------\n                  |                               O\n                  |                               O  flushing?\n                  |                               O  FLUSHING\n                  |                               O - - - - - - - - - - >\n                  |             do BLOCK probes <-O\n                  |                               O   no peer?\n                  |                               O  NOT_LINKED\n                  |                               O - - - - - - - - - - >\n                  |          gst_pad_get_range()  O\n                  O<------------------------------O\n                  O                               O\n                  O flushing?                     O\n                  O FLUSHING                      O\n                  O- - - - - - - - - - - - - - - >O\ndo BLOCK probes <-O                               O\n                  O                               O\n getrangefunc <---O                               O\n                  O  flow error?                  O\n                  O- - - - - - - - - - - - - - - >O\n                  O                               O\n do DATA probes <-O                               O\n                  O- - - - - - - - - - - - - - - >O\n                  |                               O\n                  |              do IDLE probes <-O\n                  |                               O   flow error?\n                  |                               O - - - - - - - - - - >\n                  |                               O\n                  |              do DATA probes <-O\n                  |                               O - - - - - - - - - - >\n                  |                               |\n```\n\n----------------------------------------\n\nTITLE: Describing I422_10LE Planar 4:2:2 YUV, 10 bits/channel LE in Plaintext\nDESCRIPTION: This entry gives the layout for I422_10LE, documenting stride, pitch, and offset for Y, U, and V planes at 10 bits each with little-endian storage. It allows implementers to partition memory buffers per channel for 4:2:2 subsampled images. Inputs: width and height; output: buffer division for channel access.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_45\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           10 LE\n          pstride:         2\n          default offset:  0\n          default rstride: RU4 (width * 2)\n          default size:    rstride (component0) * RU2 (height)\n\n        Component 1: U\n          depth:           10 LE\n          pstride:         2\n          default offset:  size (component0)\n          default rstride: RU4 (width)\n          default size:    rstride (component1) * RU2 (height)\n\n        Component 2: V\n          depth            10 LE\n          pstride:         2\n          default offset:  offset (component1) + size (component1)\n          default rstride: RU4 (width)\n          default size:    rstride (component2) * RU2 (height)\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n```\n\n----------------------------------------\n\nTITLE: GStreamer Cleanup in Python\nDESCRIPTION: Simple Python code that demonstrates proper cleanup of GStreamer resources. It sets the pipeline state to NULL, which ensures all resources allocated by the pipeline are freed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/hello-world.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# Free resources\nsource.set_state(Gst.State.NULL)\n```\n\n----------------------------------------\n\nTITLE: Setting Scenario Variables - GStreamer - validate-scenario\nDESCRIPTION: Allows definition of variables within test scenarios, enabling reuse for actions like checksum verification. Consists only of optional 'playback-time' parameter; variable assignments follow immediately after. Inputs are variable key-value pairs, and limitations include its scope as test context variables only.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_17\n\nLANGUAGE: validate-scenario\nCODE:\n```\nset-vars,\\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Defining ID3v2 Text Information Frame Format\nDESCRIPTION: Specifies the general format for all text information frames in ID3v2 tags. These frames begin with 'T' (except for TXXX) and include a header, text encoding byte, and the actual information text string.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n<Header for 'Text information frame', ID: \"T000\" - \"TZZZ\", excluding \"TXXX\"\ndescribed in 4.2.2.>\nText encoding    $xx\nInformation    <text string according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Implicit Threading and Buffering with 'queue' Element in 0.10 (C)\nDESCRIPTION: The `GstThread` object from GStreamer 0.8 has been removed in 0.10. GStreamer now manages threads internally for pipelines. To explicitly introduce thread boundaries and buffering between parts of a pipeline, applications should insert the `queue` element.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/porting.md#2025-04-23_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nGstThread\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nqueue\n```\n\n----------------------------------------\n\nTITLE: Dot Pipeline Command in GStreamer Validate Scenario\nDESCRIPTION: Generates a dot file visualization of the pipeline using the GST_DEBUG_BIN_TO_DOT_FILE functionality.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_12\n\nLANGUAGE: validate-scenario\nCODE:\n```\ndot-pipeline,\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Describing UYVP Packed 10-bit 4:2:2 YUV Layout in Plaintext\nDESCRIPTION: This plaintext snippet documents the UYVP pixel format, describing each of the format's components (Y, U, V) and their bit depths, stride calculations, and aggregate image size formula. There are no runtime dependencies, but its purpose is to guide developers on how video data should be laid out in memory when using UYVP in GStreamer pipelines. Inputs involve 'width' and 'height', and the output is a set of expected values for buffer arrangement.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_34\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           10\n\n        Component 1: U\n          depth            10\n\n        Component 2: V\n          depth:           10\n\n        Image\n          default rstride: RU4 (width * 2 * 5)\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Feature Options in GStreamer\nDESCRIPTION: Defines common build options that control the inclusion of examples, tests, benchmarks, tools, and other shared features. These options are yielded to subprojects for consistent build configuration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/meson_options.txt#2025-04-23_snippet_4\n\nLANGUAGE: meson\nCODE:\n```\n# Common feature options\noption('examples', type : 'feature', value : 'auto', yield : true)\noption('tests', type : 'feature', value : 'auto', yield : true)\noption('benchmarks', type : 'feature', value : 'auto', yield : true)\noption('tools', type : 'feature', value : 'auto', yield : true)\noption('introspection', type : 'feature', value : 'auto', yield : true, description : 'Generate gobject-introspection bindings')\noption('nls', type : 'feature', value : 'auto', yield: true, description : 'Enable native language support (translations)')\noption('extra-checks', type : 'feature', value : 'enabled', yield : true, description : 'Enable extra runtime checks')\n```\n\n----------------------------------------\n\nTITLE: Converting audio test tones with audioconvert in GStreamer via Bash\nDESCRIPTION: This example generates an audio test tone with audiotestsrc, converts it using audioconvert to ensure compatibility with system sinks, and plays it to autoaudiosink. audioconvert addresses format negotiation, supporting channel, sample format, and endianness changes. Required elements must be present; waveform type and output device are auto-selected.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 audiotestsrc ! audioconvert ! autoaudiosink\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Example for CUDA Critical Errors\nDESCRIPTION: Example showing how to set the GST_CUDA_CRITICAL_ERRORS environment variable to handle specific CUDA error codes (2 and 700) that will trigger process abortion when encountered.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/cuda/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGST_CUDA_CRITICAL_ERRORS=2,700\n```\n\n----------------------------------------\n\nTITLE: Ownership Frame Structure\nDESCRIPTION: Details the frame structure for ownership information, including price, date, and seller details.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_33\n\nLANGUAGE: plain\nCODE:\n```\n<Header for 'Ownership frame', ID: \"OWNE\">\nText encoding   $xx\nPrice paid     <text string> $00\nDate of purch.  <text string>\nSeller          <text string according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Properties in C\nDESCRIPTION: Getter functions for width, height, and gamma of the input image.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_34\n\nLANGUAGE: c\nCODE:\n```\nint liq_image_get_width(const liq_image *img);\nint liq_image_get_height(const liq_image *img);\ndouble liq_get_output_gamma(const liq_result *result);\n```\n\n----------------------------------------\n\nTITLE: Defining Y212_LE Packed 4:2:2 YUV Format in GStreamer\nDESCRIPTION: Specifies the component structure for Y212_LE, a packed 4:2:2 YUV format with 2 bytes per channel where color value is stored in MSB 12 bits (Y-U-Y-V), little-endian. It details the depth, stride, and offset for Y, U, and V components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_49\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           12 LE\n          pstride:         4\n          default offset:  0\n\n        Component 1: U\n          depth:           12 LE\n          pstride:         8\n          offset:          2\n\n        Component 2: V\n          depth            12 LE\n          pstride:         8\n          offset:          6\n        Image\n          default rstride: RU8 (width * 4)\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Testing Audio Playback\nDESCRIPTION: Command to test audio output by playing a test tone\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/using.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 audiotestsrc ! audioconvert ! audioresample ! pulsesink\n```\n\n----------------------------------------\n\nTITLE: Checking a Property by Name/Value on Target Element(s) - GStreamer - validate-scenario\nDESCRIPTION: Checks for a specific property value on one or more pipeline elements, filtered by name, class, or factory name. Mandatory parameters are 'property-name' and the expected 'property-value'; optional parameters control targeting and timing for the check. Used in validation stages to ensure that properties have expected values at given test points.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_22\n\nLANGUAGE: validate-scenario\nCODE:\n```\ncheck-property,\\n    property-name=(string),\\n    property-value=(The same type of @property-name),\\n    [target-element-factory-name=(string)],\\n    [target-element-klass=(string)],\\n    [target-element-name=(string)],\\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Defining Time Effect Function Constraints in GES\nDESCRIPTION: This code snippet defines the constraints for a time effect function 'f' in GES. It specifies the domain and range of the function, as well as important properties it must possess for full support in the system.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nf: [0, MAX] -> [0, G_MAXUINT64 - 1]\n```\n\n----------------------------------------\n\nTITLE: Simple GStreamer Pipeline Example\nDESCRIPTION: Example pipeline structure for fuzzing targets showing a basic configuration with appsrc, a test element, and fakesink with limited buffer count.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/ci/fuzzing/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: gstreamer\nCODE:\n```\nappsrc ! <some_element> ! fakesink num-buffers=<small>\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Issues in GstValidate Scenarios\nDESCRIPTION: Example of using the expected-issues parameter to define issues that are expected to happen during validation, allowing tests to pass despite known issues.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nexpected-issues = {\n    \"expected-issue, issue-id=scenario::not-ended\",\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting AYUV Packed 4:4:4 YUV with Alpha Format Layout (Markdown, Plaintext)\nDESCRIPTION: This block documents the AYUV packed 4:4:4 YUV format with alpha (transparency), showing channel arrangement in memory (A0|Y0|U0|V0...) and per-channel depth, stride, and offset information. It's intended to guide developers in properly reading or writing video buffers using this format for applications requiring transparency in addition to YUV color information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |A0|Y0|U0|V0| |A1|Y1|U1|V1| ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: Y\\n          depth:           8\\n          pstride:         4\\n          offset:          1\\n\\n        Component 1: U\\n          depth:           8\\n          pstride:         4\\n          offset:          2\\n\\n        Component 2: V\\n          depth            8\\n          pstride:         4\\n          offset:          3\\n\\n        Component 3: A\\n          depth            8\\n          pstride:         4\\n          offset:          0\\n\\n        Image\\n          default rstride: width * 4\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Describing YVU9 Planar 4:1:0 YUV Layout in Plaintext\nDESCRIPTION: This entry documents the YVU9 planar format, specifying the three planes (Y, U, V), all 8-bit, but with U/V order swapped relative to YUV9. Stride/offset calculations are provided, helping users structure video memory correct for image decoding or format conversion. The input is image dimensions; outputs denote how to split a buffer per component.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_38\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * height\n\n        Component 1: U\n          depth            8\n          pstride:         1\n          default offset:  offset (component2) + size (component2)\n          default rstride: RU4 (RU4 (width) / 4)\n          default size:    rstride (component1) * (RU4 (height) / 4)\n\n        Component 2: V\n          depth:           8\n          pstride:         1\n          default offset:  size (component0)\n          default rstride: RU4 (RU4 (width) / 4)\n          default size:    rstride (component2) * (RU4 (height) / 4)\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n```\n\n----------------------------------------\n\nTITLE: Deprecated: Enabling GLib Asserts (Feature Type) in Meson\nDESCRIPTION: Defines a deprecated Meson feature option 'glib-asserts' for enabling GLib assertions. It's now superseded by the boolean option 'glib_assert'. Kept for backward compatibility.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_23\n\nLANGUAGE: meson\nCODE:\n```\noption('glib-asserts', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib assertion (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_assert')\n```\n\n----------------------------------------\n\nTITLE: GStreamer Fakesink Debug Pipeline\nDESCRIPTION: Demonstrates using fakesink for debugging purposes, processing 1000 buffers from an audio test source without synchronization.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 audiotestsrc num-buffers=1000 ! fakesink sync=false\n```\n\n----------------------------------------\n\nTITLE: Listing GstValidate Action Types\nDESCRIPTION: Command to list all registered action types in GstValidate, providing details about available actions for scenario creation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-scenarios.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-1.0 --inspect-action-type\n```\n\n----------------------------------------\n\nTITLE: Implementing Unsynchronisation in ID3v2 Tags\nDESCRIPTION: This code pattern shows how to handle false synchronisations in ID3v2 tags. The pattern requires inserting a zeroed byte after the first false synchronisation byte to maintain compatibility with existing software and hardware.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-structure.txt#2025-04-23_snippet_6\n\nLANGUAGE: plain\nCODE:\n```\n%11111111 111xxxxx\n\nand should be replaced with:\n\n%11111111 00000000 111xxxxx\n```\n\n----------------------------------------\n\nTITLE: Using FLAC with GStreamer 1.0 Explicit Parser\nDESCRIPTION: Demonstrates the 1.0 approach which requires an explicit parser element before the decoder to handle the format parsing separately.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfilesrc ! flacparse ! flacdec ! audioconvert ! pulsesink\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for audioplot Plugin (Requirements)\nDESCRIPTION: This snippet lists the Python dependencies for the `audioplot` GStreamer plugin. It requires Matplotlib version 2.1.1 or higher for plotting audio data and numpy_ringbuffer version 0.2.1 or higher, likely for managing audio buffers efficiently.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-python/examples/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# audioplot plugin\nmatplotlib >= 2.1.1\nnumpy_ringbuffer >= 0.2.1\n```\n\n----------------------------------------\n\nTITLE: Running Python WebRTC SendRecv Example\nDESCRIPTION: Python command to run the WebRTC send/receive example. Requires websockets package and GStreamer version 1.14.2 or higher.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/webrtc/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npython3 -m pip install --user websockets\npython3 sendrecv/gst/webrtc_sendrecv.py ID\n```\n\n----------------------------------------\n\nTITLE: Defining ID3v2 TXXX Frame Structure (plaintext)\nDESCRIPTION: Describes the structure of the ID3v2 'User defined text information frame' (TXXX). It includes a byte for text encoding, followed by a null-terminated description string (according to the specified encoding), and finally the actual value as a text string (also according to the encoding). Multiple TXXX frames can exist in a tag, but each must have a unique description.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   <Header for 'User defined text information frame', ID: \"TXXX\">\n   Text encoding     $xx\n   Description       <text string according to encoding> $00 (00)\n   Value             <text string according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Defining Tests Feature Option in Meson\nDESCRIPTION: Defines a Meson build option named 'tests' of type 'feature'. It defaults to 'auto', yields its value for subprojects, and has a description. This option controls whether the unit tests for the GStreamer project are built and enabled.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_2\n\nLANGUAGE: meson\nCODE:\n```\noption('tests', type : 'feature', value : 'auto', yield : true,\n       description : 'Build and enable unit tests')\n```\n\n----------------------------------------\n\nTITLE: Linking BaseCamerabinSrc Library Template\nDESCRIPTION: Template showing the library name format using gst_api_version variable. Used for linking against the BaseCamerabinSrc library in GStreamer plugins-bad package.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/basecamerabinsrc/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngstreamer-plugins-bad-{{ gst_api_version.md }}.pc\n```\n\nLANGUAGE: markdown\nCODE:\n```\n-lgstbasecamerabinsrc-{{ gst_api_version.md }}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Time Coordinate Transformations in GES Elements\nDESCRIPTION: This diagram illustrates the time coordinate transformations between different GES elements (source, operation, and time effect) in a timeline. It shows how coordinates are transformed upwards and downwards through the element stack.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntime                                        coordinate             coordinate\ncoords                  object              transformation         transformation\nused                                        upwards                downwards\n______________________________________________________________________________________\n\n            |        source (1)         |\nint. src    |---------------------------|\n            |                           |   + in-point-1           - in-point-1\nex. src     '==========================='\n                                            - start-1 + start-2    + start-1 - start-2\nex. sink    .===========================.\n            |                           |   - in-point-2           + in-point-2\nint. sink   |---------------------------|\n            |       operation (2)       |   identity ()            identity ()\nint. src    |---------------------------|\n            |                           |   + in-point-2           - in-point-2\nex. src     '==========================='\n                                            - start-2 + start-3    + start-2 - start-3\nex. sink    .===========================.\n            |                           |   - 0                    + 0\nint. sink   |---------------------------|\n            |     time effect (3)       |   f ()                   f^-1 ()\nint. src    |---------------------------|\n            |                           |   + 0                    - 0\nex. src     '==========================='\n                                            - start-3              + start-3\ntimeline    +++++++++++++++++++++++++++++\n                      timeline\n```\n\n----------------------------------------\n\nTITLE: Logging Tracer Events in GStreamer (C)\nDESCRIPTION: Shows how to log tracer events using the previously defined event classes. This example logs a thread-rusage event with thread ID and average CPU load.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ngst_tracer_record_log (fmt, (guint64) (guintptr) thread_id, avg_cpuload);\n```\n\n----------------------------------------\n\nTITLE: Defining Popularimeter (POPM) Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the POPM frame used to rate the quality of an audio file. The frame includes the user's email address, a rating byte (1-255, where 255 is best), and a play counter that expands as needed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_18\n\nLANGUAGE: Binary\nCODE:\n```\n<Header for 'Popularimeter', ID: \"POPM\">\nEmail to user   <text string> $00\nRating          $xx\nCounter         $xx xx xx xx (xx ...)\n```\n\n----------------------------------------\n\nTITLE: Specifying IYU2 Format in GStreamer\nDESCRIPTION: Defines the structure of the IYU2 format, a packed 4:4:4 YUV format with U-Y-V order. It details the component depths, pixel stride, and memory offsets for Y, U, and V components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+ +--+--+--+\n       |U0|Y0|V0| |U1|Y1|V1| ...\n       +--+--+--+ +--+--+--+\n\n        Component 0: Y\n          depth:           8\n          pstride:         3\n          offset:          1\n\n        Component 1: U\n          depth            8\n          pstride:         3\n          offset:          0\n\n        Component 2: V\n          depth:           8\n          pstride:         3\n          offset:          2\n\n        Image\n          default rstride: RU4 (width * 3)\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Using Decodebin for Automatic Stream Detection\nDESCRIPTION: Commands showing how to use decodebin for automatic media stream detection and decoding\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/using.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=thesong.mp3 ! decodebin ! audioconvert ! pulsesink\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=my-random-media-file.mpeg ! decodebin ! pulsesink\n```\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=my-random-media-file.mpeg ! decodebin ! videoconvert ! xvimagesink\n```\n\n----------------------------------------\n\nTITLE: Wiping All Build Output and Artifacts - Shell\nDESCRIPTION: Deletes all build output and resets Cerbero's build environment back to the initial state. Use when a full rebuild is required or to troubleshoot pervasive build issues. Outputs are completely cleared after execution. No parameters required.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled wipe\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining GStreamer Core Configuration Options in Meson\nDESCRIPTION: Defines basic configuration options for GStreamer core functionality like debug, parsing, registry, and tracers. These options control which core features are enabled during the build process.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('gst_debug', type : 'boolean', value : true)\noption('gst_parse', type : 'boolean', value : true,\n       description: 'Enable pipeline string parser')\noption('registry', type : 'boolean', value : true)\noption('tracer_hooks', type : 'boolean', value : true, description: 'Enable tracer usage')\n```\n\n----------------------------------------\n\nTITLE: Adding Asset Operation to Timeline Object in GStreamer\nDESCRIPTION: Adds an operation (GESTrackObject) to a GESTimelineObject with specified priority. The asset must have GES_TYPE_TRACK_OPERATION as extractable_type.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/asset.txt#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nGESTrackObject\nges_timeline_object_add_asset (GESTimelineObject *object,\n                                  GESAsset *asset,\n                                  guint32 priority);\n```\n\n----------------------------------------\n\nTITLE: Defining GstPadQueryFunction in C for GStreamer Query Implementation\nDESCRIPTION: This code snippet defines the GstPadQueryFunction, which is a method used to perform queries on a GStreamer pad. It takes a pad, parent object, and query as parameters, and returns a boolean indicating success or failure of the query.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/query.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngboolean                (*GstPadQueryFunction)          (GstPad    *pad,\n                                                                 GstObject *parent,\n                                                                 GstQuery  *query);\n```\n\n----------------------------------------\n\nTITLE: Drawing Pad Links in ASCII Art\nDESCRIPTION: Convention for showing connections between element pads in GStreamer diagrams.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/conventions.md#2025-04-23_snippet_4\n\nLANGUAGE: ascii-art\nCODE:\n```\n-----+    +---\n     |    |\n    src--sink\n-----+    +---\n```\n\n----------------------------------------\n\nTITLE: Getting Library Version in C\nDESCRIPTION: Function that returns the integer version number of the library. Corresponds to LIQ_VERSION constant, with a human-readable version available in LIQ_VERSION_STRING.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_36\n\nLANGUAGE: c\nCODE:\n```\nint liq_version();\n```\n\n----------------------------------------\n\nTITLE: Rebasing Branch from Old Module\nDESCRIPTION: Example showing how to use the rebase script to move branches from old module repositories to the new monorepo structure.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/mono-repository.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/rebase-branch-from-old-module.py https://gitlab.freedesktop.org/user/gst-plugins-bad my_wip_dev_branch\n```\n\n----------------------------------------\n\nTITLE: Describing r210 Packed 4:4:4 RGB, 10 bits/channel in Plaintext\nDESCRIPTION: This snippet specifies the layout for the 'r210' packed format, using 10 bits for each R, G, and B component in a row-packed scheme. It describes per-channel pitch within the packed group and stride/size calculations for buffer allocation. The inputs required are width and height, and the output guides decoding and memory arrangement.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_42\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+ +--+--+--+\n       |R0|G0|B0| |R1|G1|B1| ...\n       +--+--+--+ +--+--+--+\n\n        Component 0: R\n          depth:           10\n          pstride:         4\n\n        Component 1: G\n          depth            10\n          pstride:         4\n\n        Component 2: B\n          depth:           10\n          pstride:         4\n\n        Image\n          default rstride: width * 4\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Relationship Methods in GStreamer\nDESCRIPTION: Core method calls for managing parent-child relationships between GStreamer objects, including setting parents and handling object ownership\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/MT-refcounting.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n_object_set_parent();\n_object_unparent();\n_ref();\n_sink();\n```\n\n----------------------------------------\n\nTITLE: Constant-Rate Effect Stream-Time Mapping - Plaintext\nDESCRIPTION: Illustrates a simplification for time effects with constant speed (rate), showing how stream time at the output is linearly related to input time with scaling by rate 'r'. Demonstrates that under constant-rate transformations, seeking and stream-time semantics match, preserving expected editing behavior.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\ng (t) = r * t\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nstream-time = r * T - r * i + r * 0 + s\n            = g (T - i) + s\n            = seek-time\n```\n\n----------------------------------------\n\nTITLE: Defining Package Name String Option in Meson\nDESCRIPTION: Defines a Meson build option named 'package-name' of type 'string'. It yields its value for use in subprojects and has a description. This option allows specifying a custom package name to be used within GStreamer plugins, potentially for identification or metadata purposes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_4\n\nLANGUAGE: meson\nCODE:\n```\n# Common options\noption('package-name', type : 'string', yield : true,\n       description : 'package name to use in plugins')\n```\n\n----------------------------------------\n\nTITLE: GStreamer Capsfilter Pipeline Example\nDESCRIPTION: Shows how to use capsfilter to enforce grayscale format on video output using GRAY8 format specification.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 videotestsrc ! video/x-raw, format=GRAY8 ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Describing AYUV64 Packed 4:4:4 YUV with Alpha, 16 bits/channel in Plaintext\nDESCRIPTION: This documentation snippet presents the AYUV64 format, similar to ARGB64 but with YUV color order (A, Y, U, V). It lists bit depths, per-component offsets, and pointers for calculating row stride and total image buffer size for high bit-depth video manipulation. Inputs are width and height; use cases include memory alignment during imaging operations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_41\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\n       |A0|Y0|U0|V0| |A1|Y1|U1|V1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: Y\n          depth:           16\n          pstride:         8\n          offset:          2\n\n        Component 1: U\n          depth            16\n          pstride:         8\n          offset:          4\n\n        Component 2: V\n          depth:           16\n          pstride:         8\n          offset:          6\n\n        Component 3: A\n          depth:           16\n          pstride:         8\n          offset:          0\n\n        Image\n          default rstride: width * 8\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Setting Action Property via Config\nDESCRIPTION: Example shows how to execute a set-property action through GST_VALIDATE_CONFIG to change the videotestsrc pattern to blue.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-config.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGST_VALIDATE_CONFIG=\"core, action=set-property, target-element-name=\\\"videotestsrc0\\\", property-name=pattern, property-value=blue\" gst-validate-1.0 videotestsrc ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Defining Linked Information (LINK) Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the LINK frame used to link information from another ID3v2 tag that might reside in another file. The frame includes a frame identifier, URL field, and additional ID data if needed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_21\n\nLANGUAGE: Binary\nCODE:\n```\n<Header for 'Linked information', ID: \"LINK\">\nFrame identifier        $xx xx xx xx\nURL                     <text string> $00\nID and additional data  <text string(s)>\n```\n\n----------------------------------------\n\nTITLE: Using GStreamer 1.0 Decodebin for Automatic Media Handling\nDESCRIPTION: Shows the recommended approach using decodebin which automatically handles format detection and adds necessary parser elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfilesrc ! decodebin ! audioconvert ! pulsesink\n```\n\n----------------------------------------\n\nTITLE: Extracting LCEVC Encoder SDK Package using Shell\nDESCRIPTION: This shell snippet demonstrates how to extract a downloaded encoder_sdk.tar.gz archive in the Downloads directory. It assumes the user has downloaded the correct pre-built SDK package for their system and needs to unpack its contents for further installation steps. The tar command extracts files in the current working directory, which should contain the SDK archive.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/lcevcencoder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd Downloads\\n$ tar xvf encoder_sdk.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Calculating Frame Data from Offset in ID3v2\nDESCRIPTION: Algorithm for calculating the frame data fraction (Fi) based on offset (Oi), total length (L), and bit precision (b). This formula converts a byte position to a fractional position in the data stream.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_32\n\nLANGUAGE: math\nCODE:\n```\nFi = Oi/L * 2^b    (rounded down to the nearest integer)\n```\n\n----------------------------------------\n\nTITLE: Running GStreamer WebRTC Validation Tests\nDESCRIPTION: Command to execute GStreamer WebRTC validation tests using gst-validate-launcher. Requires setting environment variables for apps directory, scenarios path, and test suites directory locations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/webrtc/check/validate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGST_VALIDATE_APPS_DIR=/path/to/gst-examples/webrtc/check/validate/apps/ GST_VALIDATE_SCENARIOS_PATH=/path/to/gst-examples/webrtc/check/validate/scenarios/ gst-validate-launcher --testsuites-dir /path/to/gst-examples/webrtc/check/validate/testsuites/ webrtc\n```\n\n----------------------------------------\n\nTITLE: Manually Registering a GStreamer Interface in C\nDESCRIPTION: Demonstrates the manual registration of a GStreamer interface (`GstSomeInterface`) for a custom element (`GstMyFilter`). It uses `g_type_register_static` for the element type and `g_type_add_interface_static` within the element's `get_type` function to associate the interface. An initialization function (`gst_my_filter_some_interface_init`) is declared and associated via `GInterfaceInfo`, where virtual function pointers would typically be set.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/interfaces.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic void gst_my_filter_some_interface_init   (GstSomeInterface *iface);\n\nGType\ngst_my_filter_get_type (void)\n{\n  static GType my_filter_type = 0;\n\n  if (!my_filter_type) {\n    static const GTypeInfo my_filter_info = {\n      sizeof (GstMyFilterClass),\n      NULL,\n      NULL,\n      (GClassInitFunc) gst_my_filter_class_init,\n      NULL,\n      NULL,\n      sizeof (GstMyFilter),\n      0,\n      (GInstanceInitFunc) gst_my_filter_init\n    };\n    static const GInterfaceInfo some_interface_info = {\n      (GInterfaceInitFunc) gst_my_filter_some_interface_init,\n      NULL,\n      NULL\n    };\n\n    my_filter_type =\n    g_type_register_static (GST_TYPE_ELEMENT,\n                \"GstMyFilter\",\n                &my_filter_info, 0);\n    g_type_add_interface_static (my_filter_type,\n                 GST_TYPE_SOME_INTERFACE,\n                                 &some_interface_info);\n  }\n\n  return my_filter_type;\n}\n\nstatic void\ngst_my_filter_some_interface_init (GstSomeInterface *iface)\n{\n  /* here, you would set virtual function pointers in the interface */\n}\n\n```\n\n----------------------------------------\n\nTITLE: GStreamer Bad Audio Library Version Reference\nDESCRIPTION: Template reference for the GStreamer Bad Audio library version in pkg-config file name. Used for getting compilation flags and library linking information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/audio/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngstreamer-bad-audio{{ gst_api_version.md }}.pc\n```\n\n----------------------------------------\n\nTITLE: Defining TrackObject and TimelineObject Properties in GStreamer\nDESCRIPTION: Lists the basic properties shared by TrackObject and TimelineObject, which are used for positioning and timing in the GStreamer timeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/random/mapping.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTrackObject/TimelineObject basic properties (hereafter position):\n start\n duration\n in-point\n priority\n```\n\n----------------------------------------\n\nTITLE: Deriving a Custom Sink Element Using GObject Macro in C\nDESCRIPTION: This C code snippet demonstrates how to define a new GStreamer sink element by subclassing GstBaseSink using the G_DEFINE_TYPE macro. The example shows the class initialization function where key virtual function pointers (such as set_caps and render) are assigned. Dependencies include the GStreamer and GObject libraries. Implementers must supply actual logic for the set_caps and render functions; inputs are provided via caps negotiation and data buffers, and the output is processed by the sink. Derived elements should only have a single sinkpad, as required by GstBaseSink.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/element-types/base-classes.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nG_DEFINE_TYPE (GstMySink, gst_my_sink, GST_TYPE_BASE_SINK);\n\n[..]\n\nstatic void\ngst_my_sink_class_init (GstMySinkClass * klass)\n{\n  klass->set_caps = [..];\n  klass->render = [..];\n[..]\n}\n\n```\n\n----------------------------------------\n\nTITLE: ABGR64_BE Format Specification in GStreamer\nDESCRIPTION: Defines the ABGR64_BE format with alpha channel first and reverse RGB order, using 16 bits per channel in big-endian byte order. Includes pixel layout and detailed component specifications with their respective depth, stride, and offset values.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_60\n\nLANGUAGE: text\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\n       |A0|B0|G0|R0| |A1|B1|G1|R1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           16 BE\n          pstride:         8\n          offset:          6\n\n        Component 1: G\n          depth            16 BE\n          pstride:         8\n          offset:          4\n\n        Component 2: B\n          depth:           16 BE\n          pstride:         8\n          offset:          2\n\n        Component 3: A\n          depth:           16 BE\n          pstride:         8\n          offset:          0\n\n        Image\n          default rstride: width * 8\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Setting up GStreamer Plugins and Dependencies in CMake\nDESCRIPTION: This snippet configures the GStreamer plugins and additional dependencies required for the project. It includes core, system, and effects plugins, as well as video and GObject libraries.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/examples/tutorials/android/android-tutorial-3/jni/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(GSTREAMER_NDK_BUILD_PATH  \"${GSTREAMER_ROOT}/share/gst-android/ndk-build/\")\ninclude(\"${GSTREAMER_NDK_BUILD_PATH}/plugins.cmake\")\nset(GSTREAMER_PLUGINS         ${GSTREAMER_PLUGINS_CORE} ${GSTREAMER_PLUGINS_SYS} ${GSTREAMER_PLUGINS_EFFECTS})\nset(GStreamer_EXTRA_DEPS gstreamer-video-1.0 gobject-2.0)\nfind_library(ANDROID_LIB android REQUIRED)\nfind_library(LOG_LIB log REQUIRED)\nfind_package(GStreamerMobile COMPONENTS ${GSTREAMER_PLUGINS} fonts REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Colors in libimagequant\nDESCRIPTION: Returns the maximum color value previously set by liq_set_max_colors().\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nint liq_get_max_colors(liq_attr* attr);\n```\n\n----------------------------------------\n\nTITLE: Running Docker Images for GStreamer CI\nDESCRIPTION: Command to run a Docker image interactively for testing GStreamer CI issues. This allows developers to create an environment identical to the CI runner.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/ci/README.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it fedora:2022-12-10.0-main\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Options for GStreamer Internal Plugins in Meson\nDESCRIPTION: Defines multiple Meson feature options for various GStreamer plugins that typically do not have external dependencies (e.g., 'accurip', 'adpcmdec', 'aiff', 'audiofxbad'). Each option defaults to 'auto', meaning Meson will try to build the feature if possible, unless explicitly enabled or disabled.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_1\n\nLANGUAGE: meson\nCODE:\n```\n# Feature options for plugins without external deps\noption('accurip', type : 'feature', value : 'auto')\noption('adpcmdec', type : 'feature', value : 'auto')\noption('adpcmenc', type : 'feature', value : 'auto')\noption('aiff', type : 'feature', value : 'auto')\noption('asfmux', type : 'feature', value : 'auto')\noption('audiobuffersplit', type : 'feature', value : 'auto')\noption('audiofxbad', type : 'feature', value : 'auto')\noption('audiolatency', type : 'feature', value : 'auto')\noption('audiomixmatrix', type : 'feature', value : 'auto')\noption('audiovisualizers', type : 'feature', value : 'auto')\noption('autoconvert', type : 'feature', value : 'auto')\noption('bayer', type : 'feature', value : 'auto')\noption('camerabin2', type : 'feature', value : 'auto')\noption('codecalpha', type : 'feature', value : 'auto')\noption('codectimestamper', type : 'feature', value : 'auto')\noption('coloreffects', type : 'feature', value : 'auto')\noption('debugutils', type : 'feature', value : 'auto')\noption('dvbsubenc', type : 'feature', value : 'auto')\noption('dvbsuboverlay', type : 'feature', value : 'auto')\noption('dvdspu', type : 'feature', value : 'auto')\noption('faceoverlay', type : 'feature', value : 'auto')\noption('festival', type : 'feature', value : 'auto')\noption('fieldanalysis', type : 'feature', value : 'auto')\noption('freeverb', type : 'feature', value : 'auto')\noption('frei0r', type : 'feature', value : 'auto')\noption('gaudieffects', type : 'feature', value : 'auto')\noption('gdp', type : 'feature', value : 'auto')\noption('geometrictransform', type : 'feature', value : 'auto')\noption('id3tag', type : 'feature', value : 'auto')\noption('insertbin', type : 'feature', value : 'auto')\noption('inter', type : 'feature', value : 'auto')\noption('interlace', type : 'feature', value : 'auto')\noption('ivfparse', type : 'feature', value : 'auto')\noption('ivtc', type : 'feature', value : 'auto')\noption('jp2kdecimator', type : 'feature', value : 'auto')\noption('jpegformat', type : 'feature', value : 'auto')\noption('lcevcdecoder', type : 'feature', value : 'auto')\noption('lcevcencoder', type : 'feature', value : 'auto')\noption('librfb', type : 'feature', value : 'auto')\noption('midi', type : 'feature', value : 'auto')\noption('mpegdemux', type : 'feature', value : 'auto')\noption('mpegpsmux', type : 'feature', value : 'auto')\noption('mpegtsdemux', type : 'feature', value : 'auto')\noption('mpegtsmux', type : 'feature', value : 'auto')\noption('mse', type : 'feature', value : 'auto')\noption('mxf', type : 'feature', value : 'auto')\noption('netsim', type : 'feature', value : 'auto')\noption('onvif', type : 'feature', value : 'auto')\noption('pcapparse', type : 'feature', value : 'auto')\noption('pnm', type : 'feature', value : 'auto')\noption('proxy', type : 'feature', value : 'auto')\noption('rawparse', type : 'feature', value : 'auto')\noption('removesilence', type : 'feature', value : 'auto')\noption('rist', type : 'feature', value : 'auto')\noption('rtmp2', type : 'feature', value : 'auto')\noption('rtp', type : 'feature', value : 'auto')\noption('sdp', type : 'feature', value : 'auto')\noption('segmentclip', type : 'feature', value : 'auto')\noption('siren', type : 'feature', value : 'auto')\noption('smooth', type : 'feature', value : 'auto')\noption('speed', type : 'feature', value : 'auto')\noption('subenc', type : 'feature', value : 'auto')\noption('switchbin', type : 'feature', value : 'auto')\noption('tensordecoders', type : 'feature', value : 'auto')\noption('timecode', type : 'feature', value : 'auto')\noption('unixfd', type : 'feature', value : 'auto')\noption('videofilters', type : 'feature', value : 'auto')\noption('videoframe_audiolevel', type : 'feature', value : 'auto')\noption('videoparsers', type : 'feature', value : 'auto')\noption('videosignal', type : 'feature', value : 'auto')\noption('vmnc', type : 'feature', value : 'auto')\noption('y4m', type : 'feature', value : 'auto')\n```\n\n----------------------------------------\n\nTITLE: Installing GStreamer Dependencies on Ubuntu 18.04\nDESCRIPTION: Command to install required GStreamer packages and development dependencies on Ubuntu 18.04.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/webrtc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsudo apt-get install -y gstreamer1.0-tools gstreamer1.0-nice gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-plugins-good libgstreamer1.0-dev git libglib2.0-dev libgstreamer-plugins-bad1.0-dev libsoup2.4-dev libjson-glib-dev\n```\n\n----------------------------------------\n\nTITLE: Buffer Operations in GStreamer 1.0\nDESCRIPTION: Shows replacements for removed buffer functions. gst_buffer_copy_into() replaces metadata copying functions, and gst_buffer_copy_region() replaces sub-buffer creation functions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ngst_buffer_copy_into() /* Replaces gst_buffer_copy_metadata() */\ngst_buffer_copy_region() /* Replaces gst_buffer_create_sub() */\ngst_buffer_resize() /* Change buffer size and update metadata */\ngst_buffer_new_and_alloc() /* Replaces gst_buffer_try_new_and_alloc() */\ngst_buffer_append() /* Renamed from gst_buffer_join() */\n```\n\n----------------------------------------\n\nTITLE: Stack Coordinates Visualization\nDESCRIPTION: ASCII art showing three stacks with their relative coordinates and timing relationships\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: ascii-art\nCODE:\n```\n                          |      (1)      |            |    (1)    |\n                          |---------------|            |-----------|\n                          |               |            |           |\n                          '===============.            '==========='\n                          0           (s1-s2+d1)   (s1-s2+d1)      d2\n\n 0        (s2-s1)      (s2-s1)           d1\n .===========.            .===============.\n |           |            |               |\n |-----------|            |---------------|\n |    (2)    |            |      (2)      |\n |-----------|            |---------------|\n |           |            |               |\n '==========='            '==============='\n 0        (s2-s1)      (s2-s1)           d1\n\n +++++++++++++            +++++++++++++++++            +++++++++++++\ns1          s2           s2            (s1+d1)      (s1+d1)     (s2+d2)\n```\n\n----------------------------------------\n\nTITLE: Remapping Image to Palette in libimagequant\nDESCRIPTION: Remaps the image to palette and writes pixels to the given buffer (1 byte per pixel). The buffer must be large enough to fit the entire image. For best results, get the palette after remapping as it's improved during this process.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nliq_error liq_write_remapped_image(liq_result *result, liq_image *input_image, void *buffer, size_t buffer_size);\n```\n\nLANGUAGE: c\nCODE:\n```\nint buffer_size = width*height;\nchar *buffer = malloc(buffer_size);\nif (LIQ_OK == liq_write_remapped_image(result, input_image, buffer, buffer_size)) {\n    liq_palette *pal = liq_get_palette(result);\n    // save image\n}\n```\n\n----------------------------------------\n\nTITLE: Media URI Handling in Java\nDESCRIPTION: Sets the media URI and tracks whether it's a local or remote file. This affects seeking behavior and functionality offered to the user.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate void setMediaUri() {\n    nativeSetUri (mediaUri);\n    is_local_media = mediaUri.startsWith(\"file://\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recommended Buffer Size (RBUF) Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the RBUF frame used to recommend buffer size for streaming audio applications. The frame includes buffer size, embedded info flag, and an optional offset to the next tag.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_19\n\nLANGUAGE: Binary\nCODE:\n```\n<Header for 'Recommended buffer size', ID: \"RBUF\">\nBuffer size               $xx xx xx\nEmbedded info flag        %0000000x\nOffset to next tag        $xx xx xx xx\n```\n\n----------------------------------------\n\nTITLE: Time Effect Coordinate Visualization\nDESCRIPTION: ASCII art illustrating how time effect changes coordinate relationships\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: ascii-art\nCODE:\n```\n                          |      (1)      |            |    (1)    |\n                          |---------------|            |-----------|\n                          |               |            |           |\n                          '===============.            '==========='\n                      f(s2-s1)          f(d1)      (s1-s2+d1)      d2\n                      -(s2-s1)         -(s2-s1)\n\nf(0)     f(s2-s1)     f(s2-s1)          f(d1)\n .===========.            .===============.\n |           |            |               |\n |-----------|            |---------------|\n |    (2)    |            |      (2)      |\n |-----------|            |---------------|\n |           |            |               |\n '==========='            '==============='\n 0        (s2-s1)      (s2-s1)           d1\n\n +++++++++++++            +++++++++++++++++            +++++++++++++\ns1          s2           s2            (s1+d1)      (s1+d1)     (s2+d2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecated GStreamer Build Options in Meson\nDESCRIPTION: Defines backward compatibility build options for GStreamer's Meson build system. These deprecated options configure GObject cast checks, GLib assertions, and GLib API guards with their default values, while yielding to newer option names.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-good/meson_options.txt#2025-04-23_snippet_1\n\nLANGUAGE: meson\nCODE:\n```\n# Deprecated, kept for backward compat\noption('gobject-cast-checks', type : 'feature', value : 'auto', yield : true,\n       description: 'Enable run-time GObject cast checks (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_debug')\noption('glib-asserts', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib assertion (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_assert')\noption('glib-checks', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib checks such as API guards (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_checks')\n```\n\n----------------------------------------\n\nTITLE: Running gst-dots-viewer with Cargo\nDESCRIPTION: Command to start gst-dots-viewer using Cargo, which launches a web server that monitors a directory for GStreamer dot files and serves them as a webpage.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/dots-viewer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Plugin Feature Ranks in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the 'features-rank' field to override GstPluginFeature ranks. It shows setting a mandatory feature 'glvideomixer' with a high rank and an optional feature with a rank of 0.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/validate/gst/validate/doc/meta-features-rank.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfeatures-rank = {\n  [mandatory, glvideomixer=9999],\n  [optional, someoptionalfeature=0],\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Unsynchronised Lyrics Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of the USLT frame used for unsynchronised lyrics or text transcription in ID3v2 tags. Includes text encoding, language identifier, content descriptor, and the actual lyrics text.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_9\n\nLANGUAGE: plain text\nCODE:\n```\n<Header for 'Unsynchronised lyrics/text transcription', ID: \"USLT\">\nText encoding        $xx\nLanguage             $xx xx xx\nContent descriptor   <text string according to encoding> $00 (00)\nLyrics/text          <full text string according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Feature Options in Meson\nDESCRIPTION: Defines common feature options for GStreamer including examples, tools, tests, introspection, translations, Orc optimization, and runtime checks. Most options default to 'auto' which enables conditional compilation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_21\n\nLANGUAGE: meson\nCODE:\n```\n# Common feature options\noption('examples', type : 'feature', value : 'auto', yield : true)\noption('tools', type : 'feature', value : 'auto', yield : true)\noption('tests', type : 'feature', value : 'auto', yield : true)\noption('introspection', type : 'feature', value : 'auto', yield : true, description : 'Generate gobject-introspection bindings')\noption('nls', type : 'feature', value : 'auto', yield: true, description : 'Enable native language support (translations)')\noption('orc', type : 'feature', value : 'auto', yield : true)\noption('extra-checks', type : 'feature', value : 'enabled', yield : true, description : 'Enable extra runtime checks')\n```\n\n----------------------------------------\n\nTITLE: Defining SCTP Build Options in Meson\nDESCRIPTION: This snippet defines several boolean options using the Meson build system's `option()` function. These options control the compilation of SCTP-related features: `sctp_invariants` enables runtime checks, `sctp_debug` includes debug information, `sctp_inet` and `sctp_inet6` enable support for IPv4 and IPv6 respectively, and `sctp_build_programs` controls whether example programs are built. Each option has a default value and a description.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/sctp/usrsctp/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('sctp_invariants', type: 'boolean', value: false,\n    description: 'Add runtime checks')\noption('sctp_debug', type: 'boolean', value: false,\n    description: 'Provide debug information')\noption('sctp_inet', type: 'boolean', value: true,\n    description: 'Support IPv4')\noption('sctp_inet6', type: 'boolean', value: true,\n    description: 'Support IPv6')\noption('sctp_build_programs', type: 'boolean', value: true,\n    description: 'Build example programs')\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific GStreamer Plugins\nDESCRIPTION: Example command showing how to enable specific plugins (Qt5) during GStreamer build configuration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeson -Dgood=enabled -Dgst-plugins-good:qt5=enabled builddir\n```\n\n----------------------------------------\n\nTITLE: Updating GStreamer Subprojects\nDESCRIPTION: Command to update all subprojects when wrap files are updated in the GStreamer build system.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeson subprojects update\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Setting for TimelineObject in GStreamer\nDESCRIPTION: Pseudocode for setting properties on a TimelineObject, which then propagates changes to its child TrackObjects if they are locked.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/random/mapping.txt#2025-04-23_snippet_2\n\nLANGUAGE: pseudocode\nCODE:\n```\nTimelineObject set_property(P,V)\n   ignore_notifies = TRUE\n   parent.P = V\n   foreach child in trackobjects:\n     if child.is_locked():\n        child.set_property(P, parent.P + mapping(child).P_offset)\n   ignore_notifies = FALSE\n```\n\n----------------------------------------\n\nTITLE: Invalid TOC Structure Example\nDESCRIPTION: ASCII diagram demonstrating an invalid TOC structure where edition and chapter entries are incorrectly mixed at the same hierarchy level.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/toc.md#2025-04-23_snippet_1\n\nLANGUAGE: ascii\nCODE:\n```\n-------  TOC  -------\n         /  \\\n edition1    chapter1\n |\n -chapter1\n -chapter2\n```\n\n----------------------------------------\n\nTITLE: Initiating Native Code Initialization from Android Activity (Java)\nDESCRIPTION: This single line, typically called near the end of `onCreate` after UI setup, invokes the `nativeInit()` JNI method. This call triggers the initialization process in the native code layer, which usually involves setting up the GStreamer pipeline, creating necessary threads, and starting the main loop. The UI buttons are usually disabled until the native code signals completion via `onGStreamerInitialized`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nnativeInit();\n```\n\n----------------------------------------\n\nTITLE: Specifying BGR15 Format in GStreamer\nDESCRIPTION: Defines the structure of the BGR15 format, a reverse RGB format with 5-5-5 bits per component. It details the component depths and pixel stride for B, G, and R components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+ +--+--+--+\n       |B0|G0|R0| |B1|G1|R1| ...\n       +--+--+--+ +--+--+--+\n\n        Component 0: R\n          depth:           5\n          pstride:         2\n\n        Component 1: G\n          depth            5\n          pstride:         2\n\n        Component 2: B\n          depth:           5\n          pstride:         2\n\n        Image\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata Info Accessor\nDESCRIPTION: Defines function declarations and macros for accessing metadata timing information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/meta.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nGstMetaInfo * gst_meta_timing_get_info();\n#define GST_META_TIMING_INFO  (gst_meta_timing_get_info())\n```\n\n----------------------------------------\n\nTITLE: GStreamer Core Visual Studio Property Sheet Filename\nDESCRIPTION: This is the filename of the main GStreamer property sheet for Visual Studio. Adding this sheet to a project automatically configures include paths, library paths, and linker dependencies for the core GStreamer library.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\ngstreamer-1.0.props\n```\n\n----------------------------------------\n\nTITLE: Listing GDB Thread Information\nDESCRIPTION: Command to display information about all threads in a multi-threaded GStreamer application during debugging\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: gdb\nCODE:\n```\ninfo threads\n```\n\n----------------------------------------\n\nTITLE: Configuring Multimedia Plugin Options in Meson Build System\nDESCRIPTION: Defines various plugin options for the GStreamer multimedia framework using Meson's option() function. Each option specifies a plugin or feature that can be enabled/disabled during build configuration with associated descriptions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_5\n\nLANGUAGE: meson\nCODE:\n```\noption('uvch264', type : 'feature', value : 'auto', description : 'UVC compliant H.264 camera source plugin')\noption('va', type : 'feature', value : 'auto', description: 'VA-API new plugin')\noption('voaacenc', type : 'feature', value : 'auto', description : 'AAC audio encoder plugin')\noption('voamrwbenc', type : 'feature', value : 'auto', description : 'AMR-WB audio encoder plugin')\noption('wasapi', type : 'feature', value : 'auto', description : 'Windows Audio Session API source/sink plugin')\noption('wasapi2', type : 'feature', value : 'auto', description : 'Windows Audio Session API source/sink plugin with WinRT API')\noption('webview2', type : 'feature', value : 'auto', description : 'WebView2 plugin')\noption('webp', type : 'feature', value : 'auto', description : 'WebP image codec plugin')\noption('webrtc', type : 'feature', value : 'auto', yield: true, description : 'WebRTC audio/video network bin plugin')\noption('webrtcdsp', type : 'feature', value : 'auto', description : 'Plugin with various audio filters provided by the WebRTC audio processing library')\noption('wildmidi', type : 'feature', value : 'auto', description : 'WildMidi midi soft synth plugin')\noption('wic', type : 'feature', value : 'auto', description : 'Windows Imaging Component plugin')\noption('win32ipc', type : 'feature', value : 'auto', description : 'Windows IPC plugin')\noption('winks', type : 'feature', value : 'auto', description : 'Windows Kernel Streaming video source plugin')\noption('winscreencap', type : 'feature', value : 'auto', description : 'Windows Screen Capture video source plugin')\noption('x265', type : 'feature', value : 'auto', description : 'HEVC/H.265 video encoder plugin (GPL - only built if gpl option is also enabled!)')\noption('zbar', type : 'feature', value : 'auto', description : 'Barcode image scanner plugin using zbar library')\noption('zxing', type : 'feature', value : 'auto', description : 'Barcode image scanner plugin using zxing-cpp library')\noption('wpe', type : 'feature', value : 'auto', description : 'WPE Web browser plugin')\noption(\n  'wpe_api',\n  type: 'combo',\n  value: 'auto',\n  choices: ['auto', '1.0', '1.1', '2.0'],\n  description: 'WPE WebKit API to target (1.0 = soup2, 1.1/2.0 = soup3)'\n)\n```\n\n----------------------------------------\n\nTITLE: Starting gst-dots-viewer Server\nDESCRIPTION: Command to start the gst-dots-viewer server with default parameters, making it accessible at http://localhost:3000 where it will display GStreamer pipeline visualizations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/dots-viewer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngst-dots-viewer\n```\n\n----------------------------------------\n\nTITLE: GstCaps API Changes in GStreamer 1.0\nDESCRIPTION: Shows renamed macros and functions that now take ownership of their arguments for GstCaps operations. GstCaps is now a boxed type derived from GstMiniObject.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nGST_VIDEO_CAPS_MAKE(xxx) /* Replaces GST_VIDEO_CAPS_xxx */\ncaps = gst_caps_normalize(caps) /* Now takes ownership of caps */\ncaps = gst_caps_simplify(caps) /* Now takes ownership of caps */\ncaps = gst_caps_merge(caps, caps2) /* Now takes ownership of both arguments */\ncaps = gst_caps_merge_structure(caps, st) /* Now takes ownership of arguments */\ncaps = gst_caps_truncate(caps) /* Now takes ownership of caps */\ngst_caps_merge() /* Replaces gst_caps_union(), but takes ownership */\n```\n\n----------------------------------------\n\nTITLE: Initializing GstMiniObject Constructor in C\nDESCRIPTION: Implementation of a constructor method that allocates memory for the structure and initializes the miniobject with copy and free function callbacks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/miniobject.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nMyObject *\nmy_object_new()\n{\n  MyObject *res = g_new (MyObject, 1);\n\n  gst_mini_object_init (GST_MINI_OBJECT_CAST (res), 0,\n        MY_TYPE_OBJECT,\n        (GstMiniObjectCopyFunction) _my_object_copy,\n        (GstMiniObjectDisposeFunction) NULL,\n        (GstMiniObjectFreeFunction) _my_object_free);\n\n    /* other init */\n    .....\n\n  return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Internal to Timeline Time Translation\nDESCRIPTION: Formula for translating internal time to timeline time using inverse function\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nF^-1 (t - in-point) + start\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header for GStreamer Video Library\nDESCRIPTION: Markdown heading and note indicating that the GStreamer video library API is unstable and should be used with caution.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/video/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Video helpers and baseclasses\n\n> NOTE: This library API is considered *unstable*\n```\n\n----------------------------------------\n\nTITLE: Creating GStreamer Buffer\nDESCRIPTION: Creates a new GStreamer buffer using the standard buffer creation function.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/meta.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ngst_buffer_new ();\n```\n\n----------------------------------------\n\nTITLE: Defining Equalisation Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of the EQU2 frame used for equalisation settings in ID3v2 tags. Includes interpolation method, identification string, and frequency/volume adjustment point pairs.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_13\n\nLANGUAGE: plain text\nCODE:\n```\n<Header of 'Equalisation (2)', ID: \"EQU2\">\nInterpolation method  $xx\nIdentification        <text string> $00\n```\n\n----------------------------------------\n\nTITLE: Application-specific GStreamer Capability Requests\nDESCRIPTION: This snippet shows the format of capability requests that applications will make to the installer. It demonstrates how applications always request a specific version, unlike the more general output from gst-inspect.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/missing-plugins.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndecoder-audio/mpeg, mpegversion=(int)2\ndecoder-audio/mpeg, mpegversion=(int)4\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Images for GStreamer CI\nDESCRIPTION: Commands for pulling Docker images used in GStreamer CI jobs. The example shows how to identify the image URL from job logs and pull the specific image used in the CI pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/ci/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry.freedesktop.org/ocrete/gstreamer/amd64/fedora:2022-12-10.0-main\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA Library Options in Meson\nDESCRIPTION: Defines options for CUDA library support, including NVMM (NVIDIA Multimedia) integration and custom include paths for NVMM support in the CUDA library.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_8\n\nLANGUAGE: meson\nCODE:\n```\n# CUDA library options\noption('cuda-nvmm', type : 'feature', value : 'auto', description : 'Enable NVMM support in cuda library')\noption('cuda-nvmm-include-path', type : 'string', value : '', description : 'Include path for NVMM support in cuda library')\n```\n\n----------------------------------------\n\nTITLE: Example GStreamer 64-bit MSVC Development Installer Filename\nDESCRIPTION: This shows the typical filename pattern for the GStreamer development files installer specific to the 64-bit MSVC toolchain. This installer contains additional headers and libraries required for building GStreamer applications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngstreamer-1.0-devel-msvc-x86_64-{VERSION}.msi\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building GStreamer LCEVC Encoder Plugin with Meson and Ninja\nDESCRIPTION: This snippet sets up the build environment for the GStreamer lcevcencoder plugin using the Meson build system with the appropriate pkg-config path and build feature flags, followed by building the project with Ninja. $BUILD_DIR and $INSTALL_DIR refer to the build and install directories, which should be set by the user. The '-Dgst-plugins-bad:lcevcencoder=enabled' Meson flag enables the experimental lcevcencoder plugin during the build.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/lcevcencoder/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cd GStreaner\\n$ meson setup $BUILD_DIR --pkg-config-path=$INSTALL_DIR/lib/pkgconfig -Dgst-plugins-bad:lcevcencoder=enabled\\n$ ninja -C $BUILD_DIR\n```\n\n----------------------------------------\n\nTITLE: Complex Output Example from GStreamer Plugin Introspection\nDESCRIPTION: This snippet demonstrates a more complex output from the gst-inspect command, specifically for the faad element. It shows how version information can be included in the capability string.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/missing-plugins.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndecoder-audio/mpeg, mpegversion=(int){ 2, 4 }\n```\n\n----------------------------------------\n\nTITLE: Drawing GStreamer Element in ASCII Art\nDESCRIPTION: Standard representation of a GStreamer element showing name and sink/source ports.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/conventions.md#2025-04-23_snippet_3\n\nLANGUAGE: ascii-art\nCODE:\n```\n +----------+\n | name     |\nsink       src\n +----------+\n```\n\n----------------------------------------\n\nTITLE: Configuring NVIDIA DeepStream Wrapper Plugin Options in Meson\nDESCRIPTION: Defines options to specify paths to the NVIDIA DeepStream SDK include and library directories for the nvdswrapper plugin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_17\n\nLANGUAGE: meson\nCODE:\n```\n# nvdswrapper plugin options\noption('nvds-include-path', type: 'string', value : '',\n       description : 'DeepStream SDK include directory')\noption('nvds-lib-path', type: 'string', value : '',\n       description : 'DeepStream SDK library directory')\n```\n\n----------------------------------------\n\nTITLE: Setting up MinGW/Wine cross-compilation environment\nDESCRIPTION: Configure and build GStreamer using Meson for MinGW/Wine cross-compilation. This sets up the build directory, configures the project with cross-compilation options, and installs it in a Wine prefix.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nBUILDDIR=$PWD/winebuild/\nexport WINEPREFIX=$BUILDDIR/wine-prefix/ && mkdir -p $WINEPREFIX\n# Setting the prefix is mandatory as it is used to setup symlinks within the development environment\nmeson/meson.py $BUILDDIR --cross-file meson/cross/linux-mingw-w64-64bit.txt -Dgst-plugins-bad:vulkan=disabled -Dorc:gtk_doc=disabled --prefix=$BUILDDIR/wininstall/ -Djson-glib:gtk_doc=disabled\nmeson/meson.py install -C $BUILDDIR/\n```\n\n----------------------------------------\n\nTITLE: Installing MinGW and Wine on Fedora for cross-compilation\nDESCRIPTION: Install the necessary packages for MinGW-based cross-compilation and Wine on Fedora x64.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install mingw64-gcc mingw64-gcc-c++ mingw64-pkg-config mingw64-winpthreads wine\n```\n\n----------------------------------------\n\nTITLE: Configuring D3D11 Plugin Options in Meson\nDESCRIPTION: Defines options for Direct3D 11 plugin including SIMD math support, HLSL shader precompilation, and Windows Graphics Capture API integration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_10\n\nLANGUAGE: meson\nCODE:\n```\n# D3D11 plugin options\noption('d3d11-math', type : 'feature', value : 'auto', description : 'Enable DirectX SIMD Math support')\noption('d3d11-hlsl-precompile', type : 'feature', value : 'auto', description : 'Enable buildtime HLSL compile for d3d11 library/plugin')\noption('d3d11-wgc', type : 'feature', value : 'auto', description : 'Windows Graphics Capture API support in d3d11 plugin')\n```\n\n----------------------------------------\n\nTITLE: Handling Property Notifications for TimelineObject in GStreamer\nDESCRIPTION: Pseudocode for handling 'notify' signals from child TrackObjects, updating offsets or propagating changes back to the TimelineObject.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/random/mapping.txt#2025-04-23_snippet_3\n\nLANGUAGE: pseudocode\nCODE:\n```\nTimelineObject child 'notify::P' handler:\n   if ignore_notifies:\n      return\n   if not child.is_locked():\n     mapping(child).P_offset = timeline.P - child.P\n   else:\n     TimelineObject.set_property(P, child value + mapping(child).P_offset)\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Android Build with Vulkan Support\nDESCRIPTION: CMake configuration script that sets up build parameters for a GStreamer Android project with Vulkan support. It determines architecture-specific paths, configures required GStreamer plugins including Vulkan and Android media, and sets up library dependencies and visibility settings.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/vulkan/android/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18.1)\n\nproject(\"android-vulkan-1\" LANGUAGES C CXX)\n\nif(NOT DEFINED GSTREAMER_ROOT_ANDROID)\n    message(FATAL_ERROR \"GSTREAMER_ROOT_ANDROID is not defined!\")\nendif()\n\nif(ANDROID_ABI STREQUAL \"armeabi\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm\")\nelseif(ANDROID_ABI STREQUAL \"armeabi-v7a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/armv7\")\nelseif(ANDROID_ABI STREQUAL \"arm64-v8a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm64\")\nelseif(ANDROID_ABI STREQUAL \"x86\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86\")\nelseif(ANDROID_ABI STREQUAL \"x86_64\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86_64\")\nelse()\n    message(FATAL_ERROR \"Target arch ABI not supported: ${ANDROID_ABI}\")\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH \"${GSTREAMER_ROOT}/share/cmake\")\n\nset(GSTREAMER_NDK_BUILD_PATH  \"${GSTREAMER_ROOT}/share/gst-android/ndk-build/\")\ninclude(\"${GSTREAMER_NDK_BUILD_PATH}/plugins.cmake\")\nset(GSTREAMER_PLUGINS         ${GSTREAMER_PLUGINS_CORE} ${GSTREAMER_PLUGINS_SYS} ${GSTREAMER_PLUGINS_EFFECTS} vulkan androidmedia)\nset(GStreamer_EXTRA_DEPS gstreamer-video-1.0 gobject-2.0)\nfind_library(ANDROID_LIB android REQUIRED)\nfind_library(LOG_LIB log REQUIRED)\nfind_package(GStreamerMobile COMPONENTS ${GSTREAMER_PLUGINS} fonts ca_certificates REQUIRED)\n\nadd_library(vulkan-1 SHARED vulkan-1.c dummy.cpp)\ntarget_link_libraries(vulkan-1\n    PUBLIC\n        GStreamer::mobile\n        ${ANDROID_LIB}\n        ${LOG_LIB}\n)\nset_target_properties(vulkan-1\n    PROPERTIES\n        C_VISIBILITY_PRESET hidden\n        CXX_VISIBILITY_PRESET hidden\n)\n```\n\n----------------------------------------\n\nTITLE: Linking GStreamer Bitstream Parser Library Template\nDESCRIPTION: Template showing the dynamic version-based linking format for the GStreamer bitstream parsing library, using gst_api_version variable substitution.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/codecparsers/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-lgstcodeparsers-{{ gst_api_version.md }}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Initialization Snippet\nDESCRIPTION: Initializes the GStreamer framework with command line arguments.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/using-appsink-appsrc-in-qt.md#2025-04-23_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n    QGst::init(&argc, &argv);\n```\n\n----------------------------------------\n\nTITLE: Installing Shared GStreamer from DMG Package\nDESCRIPTION: Script to mount a GStreamer disk image, install the package system-wide using the installer tool, then cleanup by detaching the mounted image and removing the installer file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/mac-osx.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhdiutil attach $INSTALL_PATH/gstreamer-1.0-1.8.1-x86_64-packages.dmg\ncd /Volumes/gstreamer-1.0-1.8.1-x86_64/\ninstaller -pkg gstreamer-1.0-1.8.1-x86_64.pkg -target \"/\"\nhdiutil detach /Volumes/gstreamer-1.0-1.8.1-x86_64/\nrm $INSTALL_PATH/gstreamer-1.0-1.8.1-x86_64-packages.dmg\n```\n\n----------------------------------------\n\nTITLE: Configuring AJA Plugin Options in Meson\nDESCRIPTION: Defines path options for the AJA NTV2 headers and library, allowing users to specify custom include and library directories for the AJA plugin during build configuration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_7\n\nLANGUAGE: meson\nCODE:\n```\n# AJA plugin options\noption('aja-include-dir', type : 'string', value : '',\n  description : 'Directory where AJA NTV2 headers are located')\noption('aja-lib-dir', type : 'string', value : '',\n  description : 'Directory where AJA NTV2 library is located')\n```\n\n----------------------------------------\n\nTITLE: Defining Meson Build Options for GStreamer Python Bindings\nDESCRIPTION: This Meson configuration snippet defines several build options for the GStreamer Python bindings. It includes options to specify the PyGObject overrides directory ('pygi-overrides-dir'), the directory containing the Python library ('libpython-dir'), the Python interpreter executable ('python-exe', with a deprecated 'python' alias), and feature toggles for building tests ('tests') and the plugin itself ('plugin'). These options allow customization of the build process based on the system environment and user requirements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-python/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('pygi-overrides-dir', type : 'string', value : '',\n        description: 'Path to pygobject overrides directory')\noption('libpython-dir', type : 'string', value : '',\n        description: 'Path to find libpythonXX.so')\noption('python', type : 'string', deprecated: 'python-exe')\noption('python-exe', type : 'string', value : 'python3', yield: true,\n       description: 'Path or name of the Python interpreter to build for.')\noption('tests', type : 'feature', value : 'auto', yield : true)\noption('plugin', type : 'feature', value : 'auto')\n```\n\n----------------------------------------\n\nTITLE: Creating RGBA Image Object in libimagequant\nDESCRIPTION: Creates an image object from a contiguous RGBA bitmap for quantization and remapping. The bitmap must not be modified or freed until the image object is freed. Gamma parameter affects color allocation in the palette.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nliq_image *liq_image_create_rgba(liq_attr *attr, void* bitmap, int width, int height, double gamma);\n```\n\n----------------------------------------\n\nTITLE: Defining Mapping Structure for TrackObject in GStreamer\nDESCRIPTION: Defines a structure for mapping between TimelineObject and TrackObject properties, including offsets for various timing and positioning attributes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/random/mapping.txt#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nMapping {\n   GESTrackObject *object;\n   gint64 start_offset;\n   gint64 duration_offset;\n   gint64 inpoint_offset;\n   gint32 priority_offset;\n   /* Track ??? */\n }\n```\n\n----------------------------------------\n\nTITLE: Creating a View Controller Interface for iOS GStreamer Application\nDESCRIPTION: Defines the ViewController interface with a UILabel outlet that will display the GStreamer version. The label is declared as an IBOutlet for connection with the storyboard interface.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/link-against-gstreamer.md#2025-04-23_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import <UIKit/UIKit.h>\n\n@interface ViewController : UIViewController {\n    IBOutlet UILabel *label;\n}\n\n@property (retain,nonatomic) UILabel *label;\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Compiling the GStreamer Tutorial on Linux\nDESCRIPTION: This command compiles the `playback-tutorial-2.c` source file on a Linux system using GCC. It utilizes `pkg-config` to automatically retrieve the necessary compiler flags (`--cflags`) and linker flags (`--libs`) for the GStreamer 1.0 library (`gstreamer-1.0`). The compiled executable will be named `playback-tutorial-2`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/subtitle-management.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcc playback-tutorial-2.c -o playback-tutorial-2 `pkg-config --cflags --libs gstreamer-1.0`\n```\n\n----------------------------------------\n\nTITLE: Defining General Encapsulated Object Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the GEOB frame which can store any type of file within an ID3 tag. This frame includes text encoding, MIME type, filename, content description, and the binary object data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n  <Header for 'General encapsulated object', ID: \"GEOB\">\n  Text encoding           $xx\n  MIME type               <text string> $00\n  Filename                <text string according to encoding> $00 (00)\n  Content description     $00 (00)\n  Encapsulated object     <binary data>\n```\n\n----------------------------------------\n\nTITLE: Defining ID3v2 ETCO Frame Header Structure (plaintext)\nDESCRIPTION: Defines the header structure for the ID3v2 'Event timing codes' frame (ETCO). It consists of a single byte specifying the timestamp format used for the events within the frame: $01 indicates absolute time in MPEG frames (32-bit), and $02 indicates absolute time in milliseconds (32-bit).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n   <Header for 'Event timing codes', ID: \"ETCO\">\n   Time stamp format    $xx\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Note\nDESCRIPTION: Simple markdown header and note warning about API instability\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/tools/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Useful elements\n\n> NOTE: This library API is considered *unstable*\n```\n\n----------------------------------------\n\nTITLE: GStreamer Fixed Caps API Call\nDESCRIPTION: Function call used to set fixed capabilities on a pad.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/negotiation.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ngst_pad_use_fixed_caps()\n```\n\n----------------------------------------\n\nTITLE: Running a Sample GStreamer Pipeline for LCEVC Encoding via Shell\nDESCRIPTION: This shell command executes a GStreamer pipeline using gst-launch-1.0 to generate a test video source, encode it with the LCEVC H264 encoder, parse and multiplex the result, and write it to an MP4 file. Key parameters include pattern=ball (video test source), 1920x1080 resolution, I420 pixel format, 25 fps, and encoding options for superfast preset and zerolatency tuning. The pipeline demonstrates successful installation and use of the lcevcencoder plugin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/lcevcencoder/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ gst-launch-1.0 videotestsrc pattern=ball num-buffers=1024 ! video/x-raw,width=1920,height=1080,format=I420,framerate=25/1 ! lcevch264enc plugin-name=\\\"x264\\\" plugin-props=\\\"preset=superfast;tune=zerolatency\\\" ! h264parse ! mp4mux ! filesink location=lcevc-sample.mp4\n```\n\n----------------------------------------\n\nTITLE: Real-time MIDI Input Pipeline in GStreamer\nDESCRIPTION: Example pipeline command for real-time MIDI processing, capturing MIDI input from ALSA, processing through amSynth synthesizer, and outputting to ALSA audio sink. This pipeline would handle live MIDI input with low latency.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/uraeus/gstreamer_and_midi.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nalsamidisrc ! amSynth ! alsasink\n```\n\n----------------------------------------\n\nTITLE: Describing ARGB64 RGB with Alpha Channel, 16 bits/channel in Plaintext\nDESCRIPTION: This block documents the ARGB64 packed format, indicating order and offsets for each component (A, R, G, B), all at 16 bits each, for high-fidelity image data. Stride and offset calculations are given directly, allowing for correct buffer size computation. The inputs are width and height; output is the minimum buffer required for a full image and per-channel access parameters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_40\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\n       |A0|R0|G0|B0| |A1|R1|G1|B1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           16\n          pstride:         8\n          offset:          2\n\n        Component 1: G\n          depth            16\n          pstride:         8\n          offset:          4\n\n        Component 2: B\n          depth:           16\n          pstride:         8\n          offset:          6\n\n        Component 3: A\n          depth:           16\n          pstride:         8\n          offset:          0\n\n        Image\n          default rstride: width * 8\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Defining the ID3v2.3.0 Frame Header Structure\nDESCRIPTION: Outlines the mandatory 10-byte structure for each ID3v2 frame header within the tag body. It consists of a 4-character Frame ID (using capital A-Z and 0-9), a 4-byte size descriptor indicating the frame's content size (excluding this 10-byte header), and 2 bytes for frame-specific status and format flags.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nFrame ID       $xx xx xx xx (four characters)\nSize           $xx xx xx xx\nFlags          $xx xx\n```\n\n----------------------------------------\n\nTITLE: Cloning GStreamer Repository for CI Testing\nDESCRIPTION: Commands to clone the GStreamer repository for reproducing CI issues. This example shows how to clone the main branch where issues might occur.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/ci/README.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitlab.freedesktop.org/gstreamer/gstreamer.git\ncd gstreamer\n```\n\n----------------------------------------\n\nTITLE: Defining Position Synchronisation (POSS) Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the POSS frame used to indicate the time offset from the first frame in an audio stream. The frame includes a time stamp format byte and a position field.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_22\n\nLANGUAGE: Binary\nCODE:\n```\n<Head for 'Position synchronisation', ID: \"POSS\">\nTime stamp format         $xx\nPosition                  $xx (xx ...)\n```\n\n----------------------------------------\n\nTITLE: Entering Cerbero Build Shell for Target Platform (Bash)\nDESCRIPTION: Command to launch the Cerbero interactive shell, configured for a specific target platform using its configuration file (`.cbc`). This environment provides the necessary tools and variables for cross-compiling GStreamer and its plugins like `gstqmlgl`. Replace `<target platform config>` with the actual configuration file name.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-good/ext/qt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./cerbero-uninstalled -c config/<target platform config>.cbc shell\n```\n\n----------------------------------------\n\nTITLE: Implementing a GStreamer Media Backend — Objective-C\nDESCRIPTION: Defines the GStreamerBackend class to encapsulate GStreamer operations, interact with a delegate, handle pipeline states, manage playback (play, pause, seek), and propagate UI messages. Requires gstreamer libraries (gst/gst.h, gst/video/video.h), an Objective-C runtime (iOS), and a delegate adhering to a protocol for UI updates. Inputs include UI references and streaming URIs, while outputs are pipeline state transitions, UI messages, and error notifications. Constraints include seek throttling and pausing for buffering or errors.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_9\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import \"GStreamerBackend.h\"\n\n#include <gst/gst.h>\n#include <gst/video/video.h>\n\nGST_DEBUG_CATEGORY_STATIC (debug_category);\n#define GST_CAT_DEFAULT debug_category\n\n/* Do not allow seeks to be performed closer than this distance. It is visually useless, and will probably\n * confuse some demuxers. */\n#define SEEK_MIN_DELAY (500 * GST_MSECOND)\n\n@interface GStreamerBackend()\n-(void)setUIMessage:(gchar*) message;\n-(void)app_function;\n-(void)check_initialization_complete;\n@end\n\n@implementation GStreamerBackend {\n    id ui_delegate;              /* Class that we use to interact with the user interface */\n    GstElement *pipeline;        /* The running pipeline */\n    GstElement *video_sink;      /* The video sink element which receives VideoOverlay commands */\n    GMainContext *context;       /* GLib context used to run the main loop */\n    GMainLoop *main_loop;        /* GLib main loop */\n    gboolean initialized;        /* To avoid informing the UI multiple times about the initialization */\n    UIView *ui_video_view;       /* UIView that holds the video */\n    GstState state;              /* Current pipeline state */\n    GstState target_state;       /* Desired pipeline state, to be set once buffering is complete */\n    gint64 duration;             /* Cached clip duration */\n    gint64 desired_position;     /* Position to seek to, once the pipeline is running */\n    GstClockTime last_seek_time; /* For seeking overflow prevention (throttling) */\n    gboolean is_live;            /* Live streams do not use buffering */\n}\n\n/*\n * Interface methods\n */\n\n-(id) init:(id) uiDelegate videoView:(UIView *)video_view\n{\n    if (self = [super init])\n    {\n        self->ui_delegate = uiDelegate;\n        self->ui_video_view = video_view;\n        self->duration = GST_CLOCK_TIME_NONE;\n\n        GST_DEBUG_CATEGORY_INIT (debug_category, \"tutorial-4\", 0, \"iOS tutorial 4\");\n        gst_debug_set_threshold_for_name(\"tutorial-4\", GST_LEVEL_DEBUG);\n\n        /* Start the bus monitoring task */\n        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n            [self app_function];\n        });\n    }\n\n    return self;\n}\n\n-(void) deinit\n{\n    if (main_loop) {\n        g_main_loop_quit(main_loop);\n    }\n}\n\n-(void) play\n{\n    target_state = GST_STATE_PLAYING;\n    is_live = (gst_element_set_state (pipeline, GST_STATE_PLAYING) == GST_STATE_CHANGE_NO_PREROLL);\n}\n\n-(void) pause\n{\n    target_state = GST_STATE_PAUSED;\n    is_live = (gst_element_set_state (pipeline, GST_STATE_PAUSED) == GST_STATE_CHANGE_NO_PREROLL);\n}\n\n-(void) setUri:(NSString*)uri\n{\n    const char *char_uri = [uri UTF8String];\n    g_object_set(pipeline, \"uri\", char_uri, NULL);\n    GST_DEBUG (\"URI set to %s\", char_uri);\n}\n\n-(void) setPosition:(NSInteger)milliseconds\n{\n    gint64 position = (gint64)(milliseconds * GST_MSECOND);\n    if (state >= GST_STATE_PAUSED) {\n        execute_seek(position, self);\n    } else {\n        GST_DEBUG (\"Scheduling seek to %\" GST_TIME_FORMAT \" for later\", GST_TIME_ARGS (position));\n        self->desired_position = position;\n    }\n}\n\n/*\n * Private methods\n */\n\n/* Change the message on the UI through the UI delegate */\n-(void)setUIMessage:(gchar*) message\n{\n    NSString *string = [NSString stringWithUTF8String:message];\n    if(ui_delegate && [ui_delegate respondsToSelector:@selector(gstreamerSetUIMessage:)])\n    {\n        [ui_delegate gstreamerSetUIMessage:string];\n    }\n}\n\n/* Tell the application what is the current position and clip duration */\n-(void) setCurrentUIPosition:(gint)pos duration:(gint)dur\n{\n    if(ui_delegate && [ui_delegate respondsToSelector:@selector(setCurrentPosition:duration:)])\n    {\n        [ui_delegate setCurrentPosition:pos duration:dur];\n    }\n}\n\n/* If we have pipeline and it is running, query the current position and clip duration and inform\n * the application */\nstatic gboolean refresh_ui (GStreamerBackend *self) {\n    gint64 position;\n\n    /* We do not want to update anything unless we have a working pipeline in the PAUSED or PLAYING state */\n    if (!self || !self->pipeline || self->state < GST_STATE_PAUSED)\n        return TRUE;\n\n    /* If we didn't know it yet, query the stream duration */\n    if (!GST_CLOCK_TIME_IS_VALID (self->duration)) {\n        gst_element_query_duration (self->pipeline, GST_FORMAT_TIME, &self->duration);\n    }\n\n    if (gst_element_query_position (self->pipeline, GST_FORMAT_TIME, &position)) {\n        /* The UI expects these values in milliseconds, and GStreamer provides nanoseconds */\n        [self setCurrentUIPosition:position / GST_MSECOND duration:self->duration / GST_MSECOND];\n    }\n    return TRUE;\n}\n\n/* Forward declaration for the delayed seek callback */\nstatic gboolean delayed_seek_cb (GStreamerBackend *self);\n\n/* Perform seek, if we are not too close to the previous seek. Otherwise, schedule the seek for\n * some time in the future. */\nstatic void execute_seek (gint64 position, GStreamerBackend *self) {\n    gint64 diff;\n\n    if (position == GST_CLOCK_TIME_NONE)\n        return;\n\n    diff = gst_util_get_timestamp () - self->last_seek_time;\n\n    if (GST_CLOCK_TIME_IS_VALID (self->last_seek_time) && diff < SEEK_MIN_DELAY) {\n        /* The previous seek was too close, delay this one */\n        GSource *timeout_source;\n\n        if (self->desired_position == GST_CLOCK_TIME_NONE) {\n            /* There was no previous seek scheduled. Setup a timer for some time in the future */\n            timeout_source = g_timeout_source_new ((SEEK_MIN_DELAY - diff) / GST_MSECOND);\n            g_source_set_callback (timeout_source, (GSourceFunc)delayed_seek_cb, (__bridge void *)self, NULL);\n            g_source_attach (timeout_source, self->context);\n            g_source_unref (timeout_source);\n        }\n        /* Update the desired seek position. If multiple requests are received before it is time\n         * to perform a seek, only the last one is remembered. */\n        self->desired_position = position;\n        GST_DEBUG (\"Throttling seek to %\" GST_TIME_FORMAT \", will be in %\" GST_TIME_FORMAT,\n                   GST_TIME_ARGS (position), GST_TIME_ARGS (SEEK_MIN_DELAY - diff));\n    } else {\n        /* Perform the seek now */\n        GST_DEBUG (\"Seeking to %\" GST_TIME_FORMAT, GST_TIME_ARGS (position));\n        self->last_seek_time = gst_util_get_timestamp ();\n        gst_element_seek_simple (self->pipeline, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT, position);\n        self->desired_position = GST_CLOCK_TIME_NONE;\n    }\n}\n\n/* Delayed seek callback. This gets called by the timer setup in the above function. */\nstatic gboolean delayed_seek_cb (GStreamerBackend *self) {\n    GST_DEBUG (\"Doing delayed seek to %\" GST_TIME_FORMAT, GST_TIME_ARGS (self->desired_position));\n    execute_seek (self->desired_position, self);\n    return FALSE;\n}\n\n/* Retrieve errors from the bus and show them on the UI */\nstatic void error_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self)\n{\n    GError *err;\n    gchar *debug_info;\n    gchar *message_string;\n\n    gst_message_parse_error (msg, &err, &debug_info);\n    message_string = g_strdup_printf (\"Error received from element %s: %s\", GST_OBJECT_NAME (msg->src), err->message);\n    g_clear_error (&err);\n    g_free (debug_info);\n    [self setUIMessage:message_string];\n    g_free (message_string);\n    gst_element_set_state (self->pipeline, GST_STATE_NULL);\n}\n\n/* Called when the End Of the Stream is reached. Just move to the beginning of the media and pause. */\nstatic void eos_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self) {\n    self->target_state = GST_STATE_PAUSED;\n    self->is_live = (gst_element_set_state (self->pipeline, GST_STATE_PAUSED) == GST_STATE_CHANGE_NO_PREROLL);\n    execute_seek (0, self);\n}\n\n/* Called when the duration of the media changes. Just mark it as unknown, so we re-query it in the next UI refresh. */\nstatic void duration_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self) {\n    self->duration = GST_CLOCK_TIME_NONE;\n}\n\n/* Called when buffering messages are received. We inform the UI about the current buffering level and\n * keep the pipeline paused until 100% buffering is reached. At that point, set the desired state. */\nstatic void buffering_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self) {\n    gint percent;\n\n    if (self->is_live)\n        return;\n\n    gst_message_parse_buffering (msg, &percent);\n    if (percent < 100 && self->target_state >= GST_STATE_PAUSED) {\n        gchar * message_string = g_strdup_printf (\"Buffering %d%%\", percent);\n        gst_element_set_state (self->pipeline, GST_STATE_PAUSED);\n        [self setUIMessage:message_string];\n        g_free (message_string);\n    } else if (self->target_state >= GST_STATE_PLAYING) {\n        gst_element_set_state (self->pipeline, GST_STATE_PLAYING);\n    } else if (self->target_state >= GST_STATE_PAUSED) {\n        [self setUIMessage:\"Buffering complete\"];\n    }\n}\n\n/* Called when the clock is lost */\nstatic void clock_lost_cb (GstBus *bus, GstMessage *msg, GStreamerBackend *self) {\n    if (self->target_state >= GST_STATE_PLAYING) {\n        gst_element_set_state (self->pipeline, GST_STATE_PAUSED);\n        gst_element_set_state (self->pipeline, GST_STATE_PLAYING);\n    }\n}\n\n/* Retrieve the video sink's Caps and tell the application about the media size */\nstatic void check_media_size (GStreamerBackend *self) {\n    GstElement *video_sink;\n    GstPad *video_sink_pad;\n    GstCaps *caps;\n    GstVideoInfo info;\n\n    /* Retrieve the Caps at the entrance of the video sink */\n    g_object_get (self->pipeline, \"video-sink\", &video_sink, NULL);\n\n```\n\n----------------------------------------\n\nTITLE: Warning Note in Markdown\nDESCRIPTION: Markdown note indicating the unstable status of the library API\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/mse/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> NOTE: This library API is considered *unstable*\n```\n\n----------------------------------------\n\nTITLE: Cloning the gst-build Meta-Builder for Stable Branches (Shell)\nDESCRIPTION: This snippet is intended for users who wish to build or develop against older stable GStreamer branches (e.g., 1.16 or 1.18). It shows how to clone the gst-build meta-builder from GitLab over HTTPS and enter the project directory. It requires Git and access to the internet and will produce a local copy of the 'gst-build' repository.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://gitlab.freedesktop.org/gstreamer/gst-build.git\\ncd gst-build\n```\n\n----------------------------------------\n\nTITLE: Declaring a QWidget-Based Media Player Application Class - C++\nDESCRIPTION: This header file ('mediaapp.h') declares the MediaApp class derived from QWidget, responsible for the media player's graphical interface and logic. It defines all members, slots, signals, and helper methods needed to present and manage playback controls. Dependencies include QtCore, QtWidgets and forward declarations for custom types like Player. Expected integration is as the application's main window. Key members include function slots for playback actions, UI initialization, and mouse events.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#ifndef MEDIAAPP_H\\n#define MEDIAAPP_H\\n#include <QtCore/QTimer>\\n#include <QtWidgets/QWidget>\\n#include <QtWidgets/QStyle>\\nclass Player;\\nclass QBoxLayout;\\nclass QLabel;\\nclass QSlider;\\nclass QToolButton;\\nclass QTimer;\\nclass MediaApp : public QWidget\\n{\\n    Q_OBJECT\\npublic:\\n    MediaApp(QWidget *parent = 0);\\n    ~MediaApp();\\n    void openFile(const QString & fileName);\\nprivate Q_SLOTS:\\n    void open();\\n    void toggleFullScreen();\\n    void onStateChanged();\\n    void onPositionChanged();\\n    void setPosition(int position);\\n    void showControls(bool show = true);\\n    void hideControls() { showControls(false); }\\nprotected:\\n    void mouseMoveEvent(QMouseEvent *event);\\nprivate:\\n    QToolButton *initButton(QStyle::StandardPixmap icon, const QString & tip,\\n                            QObject *dstobj, const char *slot_method, QLayout *layout);\\n    void createUI(QBoxLayout *appLayout);\\n    QString m_baseDir;\\n    Player *m_player;\\n    QToolButton *m_openButton;\\n    QToolButton *m_fullScreenButton;\\n    QToolButton *m_playButton;\\n    QToolButton *m_pauseButton;\\n    QToolButton *m_stopButton;\\n    QSlider *m_positionSlider;\\n    QSlider *m_volumeSlider;\\n    QLabel *m_positionLabel;\\n    QLabel *m_volumeLabel;\\n    QTimer m_fullScreenTimer;\\n};\\n#endif\n```\n\n----------------------------------------\n\nTITLE: Package Config Command for GStreamer Controller\nDESCRIPTION: Command to get compiler and linker flags for the gstreamer-controller library.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/dparams.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npkg-config --libs --cflags gstreamer-controller-1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Intel Quick Sync Video Plugin Options in Meson\nDESCRIPTION: Defines an option to specify the directory for libmfx runtime modules on Linux systems for the Quick Sync Video (QSV) plugin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_18\n\nLANGUAGE: meson\nCODE:\n```\n# QSV plugin options\noption('mfx-modules-dir', type: 'string', value : '',\n       description : 'libmfx runtime module dir, linux only')\n```\n\n----------------------------------------\n\nTITLE: Defining Tests Configuration Option in Meson Build\nDESCRIPTION: Configures the 'tests' option for a Meson build system with a type of 'feature', default value of 'auto', and setting 'yield' to true. This option likely controls whether tests should be built and run as part of the build process.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer-sharp/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('tests', type : 'feature', value : 'auto', yield : true)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Colors in libimagequant\nDESCRIPTION: Specifies the maximum number of colors to use in the palette. Default is 256. Returns LIQ_VALUE_OUT_OF_RANGE if the number is outside 2-256 range.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nliq_error liq_set_max_colors(liq_attr* attr, int colors);\n```\n\n----------------------------------------\n\nTITLE: Clock Selection Algorithm in GstPipeline\nDESCRIPTION: Explains the default clock selection algorithm used by GstPipeline when transitioning to the PLAYING state. It details the priority order for clock selection and mentions application-specific methods for influencing the selection process.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstpipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- If the application selected a clock, use that clock. (see below)\n\n- Use the clock of the most upstream element that can provide one.\nThis selection is performed by iterating the element starting from\nthe sinks going upstream.\n  - since this selection procedure happens in the `PAUSED` → `PLAYING`\n    state change, all the sinks are prerolled and we can thus be\n    sure that each sink is linked to some upstream element.\n  - in the case of a live pipeline (`NO_PREROLL`), the sink will not\n    yet be prerolled and the selection process will select the clock\n    of a more upstream element.\n\n- Use `GstSystemClock`, this only happens when no element provides a\nusable clock.\n```\n\n----------------------------------------\n\nTITLE: Documenting mute Property for GStreamer Volume Control\nDESCRIPTION: Documents the 'mute' property for a volume control element in GStreamer. This boolean property allows muting of the audio channel.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/libs/GESAudioTestSource-children-props.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### `mute`\n\nmute channel\n\nValue type: #gboolean\n\nSee #volume:mute\n```\n\n----------------------------------------\n\nTITLE: Building GStreamer-Sharp with Meson\nDESCRIPTION: Command to build the GStreamer-Sharp project using Meson build system, creating a build directory and compiling with Ninja.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer-sharp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeson build && ninja -C build/\n```\n\n----------------------------------------\n\nTITLE: Unit Size Calculation Function Declaration\nDESCRIPTION: Function declaration for get_unit_size() used when input and output sizes have a fixed multiplier relationship. Optimized for performance with internal caching.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/element-transform.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nget_unit_size()\n```\n\n----------------------------------------\n\nTITLE: Terms of Use Frame Structure\nDESCRIPTION: Defines the frame structure for terms of use information, including text encoding, language, and actual text content.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_32\n\nLANGUAGE: plain\nCODE:\n```\n<Header for 'Terms of use frame', ID: \"USER\">\nText encoding   $xx\nLanguage        $xx xx xx\nThe actual text <text string according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Destroying Single-Reffed Relationship\nDESCRIPTION: Implementation showing how to safely destroy a single-reffed relationship between objects.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nLOCK (object1);\n_unref (object1->pointer);\nobject1->pointer = NULL;\nUNLOCK (object1);\n```\n\n----------------------------------------\n\nTITLE: Parsing Commercial Frame in ID3v2\nDESCRIPTION: Defines the structure for the 'Commercial' frame (COMR) in ID3v2 tags. This complex frame bundles information about commercial offers, including pricing, validity periods, seller details, and optional seller logo.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n<Header for 'Commercial frame', ID: \"COMR\">\nText encoding      $xx\nPrice string       <text string> $00\nValid until        <text string>\nContact URL        <text string> $00\nReceived as        $xx\nName of seller     <text string according to encoding> $00 (00)\nDescription        <text string according to encoding> $00 (00)\nPicture MIME type  <string> $00\nSeller logo        <binary data>\n```\n\n----------------------------------------\n\nTITLE: Miscellaneous GStreamer 1.0 API Changes\nDESCRIPTION: Shows various other API changes across GstClock, GstSegment, GstAdapter and other GStreamer components. Includes renamed functions and changed behavior.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\ngst_clock_id_wait_async() /* Replaces gst_clock_id_wait_async_full() */\ngst_segment_do_seek() /* Replaces gst_segment_set_seek() */\ngst_task_new() /* Replaces gst_task_create() */\ngst_adapter_map() /* Replaces gst_adapter_peek() */\ngst_adapter_unmap() /* Must be called after mapping adapter data */\ngst_adapter_prev_pts() /* Replaces part of gst_adapter_prev_timestamp() */\ngst_adapter_prev_dts() /* Replaces part of gst_adapter_prev_timestamp() */\n```\n\n----------------------------------------\n\nTITLE: Defining OpenCV Feature Option in Meson\nDESCRIPTION: Defines a Meson feature option 'opencv' to control the inclusion of support for the OpenCV computer vision library. This feature requires external dependencies and defaults to 'auto', letting Meson determine if it can be built.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_2\n\nLANGUAGE: meson\nCODE:\n```\n# Feature options for libraries that need external deps\noption('opencv', type : 'feature', value : 'auto', description : 'OpenCV computer vision library support')\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffer Frequency Check in YAML\nDESCRIPTION: YAML configuration example for checking the minimum buffer frequency of a v4l2src element, ensuring it produces at least 60 frames per second.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-environment-variables.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncore,min-buffer-frequency=60,target-element-factory-name=v4l2src\n```\n\n----------------------------------------\n\nTITLE: Defining ARGB64_LE Format in GStreamer\nDESCRIPTION: Specifies the component structure for ARGB64_LE, an RGB format with alpha channel first, 16 bits per channel, little-endian. It details the depth, stride, and offset for A, R, G, and B components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_57\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\n       |A0|R0|G0|B0| |A1|R1|G1|B1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           16 LE\n          pstride:         8\n          offset:          2\n\n        Component 1: G\n          depth            16 LE\n          pstride:         8\n          offset:          4\n\n        Component 2: B\n          depth:           16 LE\n          pstride:         8\n          offset:          6\n\n        Component 3: A\n          depth:           16 LE\n          pstride:         8\n          offset:          0\n\n        Image\n          default rstride: width * 8\n```\n\n----------------------------------------\n\nTITLE: Defining Involved People List Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of the IPLS frame in ID3v2 tags, which lists people involved in creating the audio file. The frame includes a header, text encoding byte, and a series of paired strings indicating the involvement and the name of the person.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n<Header for 'Involved people list', ID: \"IPLS\">\nText encoding    $xx\nPeople list strings    <text strings according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Handling Media URI Setup and Initialization in GStreamer iOS App\nDESCRIPTION: This snippet shows how the VideoViewController initializes the media URI and determines if it's local or remote media. This affects seeking behavior, as local media allows for smoother scrubbing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n-(void) gstreamerInitialized\n{\n    dispatch_async(dispatch_get_main_queue(), ^{\n        play_button.enabled = TRUE;\n        pause_button.enabled = TRUE;\n        message_label.text = @\"Ready\";\n        [gst_backend setUri:uri];\n        is_local_media = [uri hasPrefix:@\"file://\"];\n        is_playing_desired = NO;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Video Source Pad Capabilities in GStreamer\nDESCRIPTION: This code snippet displays the template capabilities for a video source pad. It shows how the pad can output raw video with various dimensions, framerates, and a list of supported YUV formats.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-formats-and-pad-capabilities.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSRC template: 'src'\n  Availability: Always\n  Capabilities:\n    video/x-raw\n                width: [ 1, 2147483647 ]\n               height: [ 1, 2147483647 ]\n            framerate: [ 0/1, 2147483647/1 ]\n               format: { I420, NV12, NV21, YV12, YUY2, Y42B, Y444, YUV9, YVU9, Y41B, Y800, Y8, GREY, Y16 , UYVY, YVYU, IYU1, v308, AYUV, A420 }\n```\n\n----------------------------------------\n\nTITLE: Configuring HLS Plugin Options in Meson\nDESCRIPTION: Defines options for the HTTP Live Streaming (HLS) plugin, including enabling/disabling the plugin and selecting the crypto library to use (nettle, libgcrypt, or openssl).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_12\n\nLANGUAGE: meson\nCODE:\n```\n# HLS plugin options\noption('hls', type : 'feature', value : 'auto', description : 'HTTP Live Streaming plugin')\noption('hls-crypto', type : 'combo', value : 'auto', choices : ['auto', 'nettle', 'libgcrypt', 'openssl'],\n       description: 'Crypto library to use for HLS plugin')\n```\n\n----------------------------------------\n\nTITLE: Calculating Offset from Frame Data in ID3v2\nDESCRIPTION: Algorithm for calculating the offset (Oi) from frame data (Fi), bit precision (b), and total length (L). This formula converts a fractional position back to a byte position in the data stream.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_33\n\nLANGUAGE: math\nCODE:\n```\nOi = (Fi/2^b)*L    (rounded up to the nearest integer)\n```\n\n----------------------------------------\n\nTITLE: Installing Meson Build System using pip3\nDESCRIPTION: Command to install the Meson build system using Python's pip package manager. Installs to user's local directory.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install --user meson\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Note Format\nDESCRIPTION: Simple markdown formatting showing the library title and an important note about API stability status.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/player/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Player Library\n\n> NOTE: This library API is considered *unstable*\n```\n\n----------------------------------------\n\nTITLE: Enabling Internal GStreamer Plugins (Meson)\nDESCRIPTION: Defines multiple Meson feature options (adder, app, audioconvert, etc.) to individually enable or disable core GStreamer plugins that have no external dependencies. All default to 'auto', typically meaning enabled.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_13\n\nLANGUAGE: meson\nCODE:\n```\n# Feature options for plugins with no external deps\noption('adder', type : 'feature', value : 'auto')\noption('app', type : 'feature', value : 'auto')\noption('audioconvert', type : 'feature', value : 'auto')\noption('audiomixer', type : 'feature', value : 'auto')\noption('audiorate', type : 'feature', value : 'auto')\noption('audioresample', type : 'feature', value : 'auto')\noption('audiotestsrc', type : 'feature', value : 'auto')\noption('compositor', type : 'feature', value : 'auto')\noption('debugutils', type : 'feature', value : 'auto')\noption('drm', type : 'feature', value : 'auto')\noption('dsd', type : 'feature', value : 'auto')\noption('encoding', type : 'feature', value : 'auto')\noption('gio', type : 'feature', value : 'auto')\noption('gio-typefinder', type : 'feature', value : 'auto')\noption('overlaycomposition', type : 'feature', value : 'auto')\noption('pbtypes', type : 'feature', value : 'auto')\noption('playback', type : 'feature', value : 'auto')\noption('rawparse', type : 'feature', value : 'auto')\noption('subparse', type : 'feature', value : 'auto')\noption('tcp', type : 'feature', value : 'auto')\noption('typefind', type : 'feature', value : 'auto')\noption('videoconvertscale', type : 'feature', value : 'auto')\noption('videorate', type : 'feature', value : 'auto')\noption('videotestsrc', type : 'feature', value : 'auto')\noption('volume', type : 'feature', value : 'auto')\n```\n\n----------------------------------------\n\nTITLE: Capturing and Displaying AJA Input with GStreamer (Shell)\nDESCRIPTION: This `gst-launch-1.0` pipeline demonstrates capturing 1080p30 audio and video from an AJA device using `ajasrc` and `ajasrcdemux`. The separated video and audio streams are then queued, converted using `videoconvert`, `audioconvert`, and `audioresample`, and finally rendered locally with `autovideosink` and `autoaudiosink`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/sys/aja/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngst-launch-1.0 ajasrc video-format=1080p-3000 ! ajasrcdemux name=d \\\n    d.video ! queue max-size-bytes=0 max-size-buffers=0 max-size-time=1000000000 ! videoconvert ! autovideosink \\\n    d.audio ! queue max-size-bytes=0 max-size-buffers=0 max-size-time=1000000000 ! audioconvert ! audioresample ! autoaudiosink\n```\n\n----------------------------------------\n\nTITLE: Example URI Handler Missing Plugin\nDESCRIPTION: Example of a missing URI handler for RTSP protocol\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/missing-plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrtsp://some.camera/stream1\n```\n\n----------------------------------------\n\nTITLE: Defining the CRC Data Structure in Extended Header\nDESCRIPTION: Specifies the format for the optional 4-byte CRC-32 data appended to the extended header when the 'CRC data present' flag is set in the extended flags. The CRC is calculated on the collective frame data (located between the extended header and the padding) *before* any unsynchronisation is applied.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nTotal frame CRC    $xx xx xx xx\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Android Build Environment with CMake\nDESCRIPTION: This CMake script configures the build environment for a GStreamer Android tutorial. It checks for the required GStreamer Android root directory, determines the appropriate architecture-specific GStreamer path, sets up module paths, includes plugin configurations, and defines the build target with necessary linking options.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/examples/tutorials/android/android-tutorial-2/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18.1)\n\nproject(\"android-tutorial-2\" LANGUAGES C CXX)\n\nif(NOT DEFINED GSTREAMER_ROOT_ANDROID)\n    message(FATAL_ERROR \"GSTREAMER_ROOT_ANDROID is not defined!\")\nendif()\n\nif(ANDROID_ABI STREQUAL \"armeabi\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm\")\nelseif(ANDROID_ABI STREQUAL \"armeabi-v7a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/armv7\")\nelseif(ANDROID_ABI STREQUAL \"arm64-v8a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm64\")\nelseif(ANDROID_ABI STREQUAL \"x86\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86\")\nelseif(ANDROID_ABI STREQUAL \"x86_64\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86_64\")\nelse()\n    message(FATAL_ERROR \"Target arch ABI not supported: ${ANDROID_ABI}\")\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH \"${GSTREAMER_ROOT}/share/cmake\")\n\nset(GSTREAMER_NDK_BUILD_PATH  \"${GSTREAMER_ROOT}/share/gst-android/ndk-build/\")\ninclude(\"${GSTREAMER_NDK_BUILD_PATH}/plugins.cmake\")\nset(GSTREAMER_PLUGINS         ${GSTREAMER_PLUGINS_CORE} ${GSTREAMER_PLUGINS_SYS})\nfind_library(LOG_LIB log REQUIRED)\nfind_package(GStreamerMobile COMPONENTS ${GSTREAMER_PLUGINS} fonts REQUIRED)\n\nadd_library(tutorial-2 SHARED tutorial-2.c dummy.cpp)\ntarget_link_libraries(tutorial-2\n    PUBLIC\n        GStreamer::mobile\n        ${LOG_LIB}\n)\nset_target_properties(tutorial-2\n    PROPERTIES\n        C_VISIBILITY_PRESET hidden\n        CXX_VISIBILITY_PRESET hidden\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Attribute with Custom Allocator in C\nDESCRIPTION: Creates a liq_attr object using custom malloc and free functions for memory allocation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_31\n\nLANGUAGE: c\nCODE:\n```\nliq_attr* liq_attr_create_with_allocator(void* (*malloc)(size_t), void (*free)(void*));\n```\n\n----------------------------------------\n\nTITLE: Room-Based Client Connection Example\nDESCRIPTION: Commands showing how to run two room-based clients that connect to the same room and exchange SDP messages for WebRTC connection establishment.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/webrtc/signalling/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./room-client.py --room 123\nOur uid is 'ws-test-client-bdb5b9'\nGot ROOM_OK for room '123'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ./room-client.py --room 123\nOur uid is 'ws-test-client-78b59a'\nGot ROOM_OK for room '123'\nSending offer to 'ws-test-client-bdb5b9'\nSent: ROOM_PEER_MSG ws-test-client-bdb5b9 {\"sdp\": \"initial sdp\"}\nGot answer from 'ws-test-client-bdb5b9': {\"sdp\": \"reply sdp\"}\n```\n\n----------------------------------------\n\nTITLE: Path to GStreamer Visual Studio Property Sheets\nDESCRIPTION: This shows the path, using the `GSTREAMER_ROOT_X86` environment variable, to the directory containing the Visual Studio property sheets (`.props` files) provided with the GStreamer installation. These files simplify project configuration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n%GSTREAMER_ROOT_X86%\\share\\vs\\2010\\libs\n```\n\n----------------------------------------\n\nTITLE: Ungrouping Container in GStreamer\nDESCRIPTION: Command to ungroup children of a container with optional recursive ungrouping.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_14\n\nLANGUAGE: validate-scenario\nCODE:\n```\nungroup-container,\n    [playback-time=(double,string)],\n    container-name=(string),\n    [recursive=(boolean)];\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronized Lyrics Frame Format in ID3v2\nDESCRIPTION: Specifies the SYLT (Synchronized lyrics/text) frame format in ID3v2 tags, which allows lyrics, events, or other textual information to be synchronized with the audio using timestamps for each syllable or text segment.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n  <Header for 'Synchronised lyrics/text', ID: \"SYLT\">\n  Text encoding       $xx\n  Language            $xx xx xx\n  Time stamp format   $xx\n  Content type        $xx\n  Content descriptor  <text string according to encoding> $00 (00)\n```\n\n----------------------------------------\n\nTITLE: Parsing Terms of Use Frame in ID3v2\nDESCRIPTION: Defines the structure for the 'Terms of use' frame (USER) in ID3v2 tags. This frame contains text describing the terms of use and ownership of the audio file, with support for different languages and text encodings.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n<Header for 'Terms of use frame', ID: \"USER\">\nText encoding        $xx\nLanguage             $xx xx xx\nThe actual text      <text string according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Using FLAC with GStreamer 0.10 Approach\nDESCRIPTION: Shows the old way of playing FLAC files in GStreamer 0.10, which didn't require an explicit parser element.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nfilesrc ! flacdec ! audioconvert ! pulsesink\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Package and Documentation Options in Meson\nDESCRIPTION: Defines general GStreamer options for package naming, origin URL, documentation generation, and GLib debugging infrastructure. These options control build-wide behavior and metadata.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_22\n\nLANGUAGE: meson\nCODE:\n```\n# Common options\noption('package-name', type : 'string', yield : true,\n       description : 'package name to use in plugins')\noption('package-origin', type : 'string', value : 'Unknown package origin', yield : true,\n       description : 'package origin URL to use in plugins')\noption('doc', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable documentation.')\noption('glib_debug', type : 'feature', value : 'auto', yield : true, description : 'Enable GLib debug infrastructure (see docs/macros.txt)')\noption('glib_assert', type : 'boolean', value : true, yield : true, description : 'Enable GLib assertion (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\noption('glib_checks', type : 'boolean', value : true, yield : true, description : 'Enable GLib checks such as API guards (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\n```\n\n----------------------------------------\n\nTITLE: GObject Introspection Index Identifier\nDESCRIPTION: A simple text identifier marking the GObject introspection index location. This appears to be a placeholder or marker file used by the build system or documentation tools.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/analytics/sitemap.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngi-index\n```\n\n----------------------------------------\n\nTITLE: Running External Command\nDESCRIPTION: Action to execute an external command with specified arguments and optional environment variables.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_35\n\nLANGUAGE: validate-scenario\nCODE:\n```\nrun-command,\n    argv=((string){array,}),\n    [env=(structure)],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Setting Dithering Level in libimagequant\nDESCRIPTION: Enables/disables dithering in remapped images. Dithering level must be between 0-1 (inclusive). Level 0 enables fast non-dithered remapping, otherwise Floyd-Steinberg error diffusion is used.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nliq_error liq_set_dithering_level(liq_result *res, float dither_level);\n```\n\n----------------------------------------\n\nTITLE: Encryption Method Registration Frame\nDESCRIPTION: Defines the frame structure for registering encryption methods, including owner identifier and method symbol.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_35\n\nLANGUAGE: plain\nCODE:\n```\n<Header for 'Encryption method registration', ID: \"ENCR\">\nOwner identifier    <text string> $00\nMethod symbol       $xx\nEncryption data     <binary data>\n```\n\n----------------------------------------\n\nTITLE: Defining the ID3v2 Extended Header Flags Format\nDESCRIPTION: Details the format of the 2-byte extended flags field within the optional extended header. Currently, only the most significant bit (bit 15, denoted by 'x') is defined; if set, it indicates the presence of 4 bytes of CRC-32 data appended to the extended header.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n%x0000000 00000000\n```\n\n----------------------------------------\n\nTITLE: Player Constructor Initialization\nDESCRIPTION: Shows the initialization of the Player class with sink configuration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/using-appsink-appsrc-in-qt.md#2025-04-23_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nPlayer::Player(int argc, char **argv)\n    : QCoreApplication(argc, argv), m_sink(&m_src)\n```\n\n----------------------------------------\n\nTITLE: Defining Location Lookup Table Frame Format in ID3v2\nDESCRIPTION: Specifies the format of the MLLT (Location lookup table) frame in ID3v2 tags, which contains reference data for MPEG frames, bytes, and milliseconds between reference points, along with deviation data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n  <Header for 'Location lookup table', ID: \"MLLT\">\n  MPEG frames between reference   $xx xx\n  Bytes between reference         $xx xx xx\n  Milliseconds between reference  $xx xx xx\n  Bits for bytes deviation        $xx\n  Bits for milliseconds dev.      $xx\n\nThen for every reference the following data is included;\n\n  Deviation in bytes         %xxx....\n  Deviation in milliseconds  %xxx....\n```\n\n----------------------------------------\n\nTITLE: Adding Personal Fork Remote in Git\nDESCRIPTION: Git commands for adding a personal fork as a remote to the local GStreamer repository clone and verifying the connection.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/contribute/index.md#2025-04-23_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit remote add $GITLAB_USERNAME git@gitlab.freedesktop.org:$GITLAB_USERNAME/gstreamer.git\n```\n\nLANGUAGE: git\nCODE:\n```\ngit fetch $GITLAB_USERNAME\n```\n\n----------------------------------------\n\nTITLE: Defining P012_LE Planar 4:2:0 YUV Format in GStreamer\nDESCRIPTION: Specifies the component structure for P012_LE, a planar 4:2:0 YUV format with interleaved UV plane, 2 bytes per channel where color data is stored in MSB 12 bits, little-endian. It details the depth, stride, offset, and size calculations for Y, U, and V components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_47\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           12 LE\n          pstride:         2\n          default offset:  0\n          default rstride: RU4 (width * 2)\n          default size:    rstride (component0) * RU2 (height)\n\n        Component 1: U\n          depth:           12 LE\n          pstride:         4\n          default offset:  size (component0)\n          default rstride: RU4 (width * 2)\n\n        Component 2: V\n          depth            12 LE\n          pstride:         4\n          default offset:  offset (component1) + 2\n          default rstride: RU4 (width * 2)\n\n        Image\n          default size: RU4 (width * 2) * RU2 (height) * 3 / 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Plugin Options in Meson\nDESCRIPTION: Defines options for platform-specific plugins including Magic Leap, Video4Linux, UVC gadget, and iSAC. These options control whether the respective plugins will be built during compilation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_6\n\nLANGUAGE: meson\nCODE:\n```\noption('magicleap', type : 'feature', value : 'auto', description : 'Magic Leap platform support')\noption('v4l2codecs', type : 'feature', value : 'auto', description : 'Video4Linux Stateless CODECs support')\noption('uvcgadget', type : 'feature', value : 'auto', description : 'uvc video gadget plugin')\noption('isac', type : 'feature', value : 'auto', description : 'iSAC plugin')\n```\n\n----------------------------------------\n\nTITLE: GStreamer Core Library DLL Filename\nDESCRIPTION: This is the filename of the main GStreamer core library DLL. GStreamer can locate its plugins relative to the directory containing this file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ngstreamer-1.0-0.dll\n```\n\n----------------------------------------\n\nTITLE: Documenting volume Property for GStreamer Volume Control\nDESCRIPTION: Describes the 'volume' property for a volume control element in GStreamer. It specifies the volume factor, where 1.0 represents 100% volume.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/libs/GESAudioTestSource-children-props.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#### `volume`\n\nvolume factor, 1.0=100%\n\nValue type: #gdouble\n\nSee #volume:volume\n```\n\n----------------------------------------\n\nTITLE: Parsing Audio Seek Point Index Frame in ID3v2\nDESCRIPTION: Defines the structure for the 'Seek Point Index' frame (ASPI) in ID3v2 tags. This frame assists with seeking in variable bitrate audio files by providing a list of seek points within the audio data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n<Header for 'Seek Point Index', ID: \"ASPI\">\nIndexed data start (S)         $xx xx xx xx\nIndexed data length (L)        $xx xx xx xx\nNumber of index points (N)     $xx xx\nBits per index point (b)       $xx\n```\n\n----------------------------------------\n\nTITLE: Defining Music CD Identifier Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of the MCDI frame in ID3v2 tags, which stores the CD Table of Contents (TOC) for identifying the original CD. The frame contains binary data representing the CD's track information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n<Header for 'Music CD identifier', ID: \"MCDI\">\nCD TOC <binary data>\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking Commits Using Git with Subtree Strategy (Shell)\nDESCRIPTION: This shell command demonstrates how to cherry-pick a commit from the upstream GStreamer mono repository while resolving path conflicts resulting from the project's new monorepo structure. The 'subtree' strategy in git is used to properly remap file paths when the subtree organization does not match the target repository's structure. This approach is useful when backporting changes from the mono repository to older (<= 1.18) repositories with differing layouts. Requires Git installed and the relevant repositories cloned locally. The key parameter is <commit>, the SHA or reference of the commit(s) to cherry-pick. The ellipsis (...) denotes that multiple commits or options may follow as needed. The output is the application of the specified commit(s) to the current branch, potentially with conflict resolution required if changes collide.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/mono-repository.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ git cherry-pick <commit> ... --strategy=subtree\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronised Tempo Codes Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of the SYTC frame used for synchronised tempo codes in ID3v2 tags. Includes the time stamp format where $01 represents absolute time using MPEG frames as unit and $02 represents absolute time using milliseconds.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_8\n\nLANGUAGE: plain text\nCODE:\n```\n<Header for 'Synchronised tempo codes', ID: \"SYTC\">\nTime stamp format   $xx\nTempo data          <binary data>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android GStreamer Project with CMake\nDESCRIPTION: Complete CMake configuration for building GStreamer Tutorial 5 on Android. Sets up architecture-specific paths, includes necessary GStreamer plugins and dependencies, and configures the build target with appropriate linking and visibility settings.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/examples/tutorials/android/android-tutorial-5/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18.1)\n\nproject(\"android-tutorial-5\" LANGUAGES C CXX)\n\nif(NOT DEFINED GSTREAMER_ROOT_ANDROID)\n    message(FATAL_ERROR \"GSTREAMER_ROOT_ANDROID is not defined!\")\nendif()\n\nif(ANDROID_ABI STREQUAL \"armeabi\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm\")\nelseif(ANDROID_ABI STREQUAL \"armeabi-v7a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/armv7\")\nelseif(ANDROID_ABI STREQUAL \"arm64-v8a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm64\")\nelseif(ANDROID_ABI STREQUAL \"x86\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86\")\nelseif(ANDROID_ABI STREQUAL \"x86_64\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86_64\")\nelse()\n    message(FATAL_ERROR \"Target arch ABI not supported: ${ANDROID_ABI}\")\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH \"${GSTREAMER_ROOT}/share/cmake\")\n\nset(GSTREAMER_NDK_BUILD_PATH  \"${GSTREAMER_ROOT}/share/gst-android/ndk-build/\")\ninclude(\"${GSTREAMER_NDK_BUILD_PATH}/plugins.cmake\")\nset(GSTREAMER_PLUGINS         ${GSTREAMER_PLUGINS_CORE} ${GSTREAMER_PLUGINS_PLAYBACK} ${GSTREAMER_PLUGINS_CODECS} ${GSTREAMER_PLUGINS_NET} ${GSTREAMER_PLUGINS_SYS})\nset(GStreamer_EXTRA_DEPS gstreamer-video-1.0)\nset(G_IO_MODULES openssl)\nfind_library(ANDROID_LIB android REQUIRED)\nfind_library(LOG_LIB log REQUIRED)\nfind_package(GStreamerMobile COMPONENTS ${GSTREAMER_PLUGINS} fonts ca_certificates REQUIRED)\n\nadd_library(tutorial-5 SHARED tutorial-5.c dummy.cpp)\ntarget_link_libraries(tutorial-5\n    PUBLIC\n        GStreamer::mobile\n        ${ANDROID_LIB}\n        ${LOG_LIB}\n)\nset_target_properties(tutorial-5\n    PROPERTIES\n        C_VISIBILITY_PRESET hidden\n        CXX_VISIBILITY_PRESET hidden\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Valid ISO 8601 Timestamp Formats for ID3v2 (Text)\nDESCRIPTION: Illustrates the valid timestamp formats based on a subset of ISO 8601 used in ID3v2 tags. It shows the most precise format `yyyy-MM-ddTHH:mm:ss` and examples of reduced precision formats (yyyy, yyyy-MM, yyyy-MM-dd, yyyy-MM-ddTHH, yyyy-MM-ddTHH:mm). All timestamps are UTC.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-structure.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nyyyy-MM-ddTHH:mm:ss (year, \"-\", month, \"-\", day, \"T\", hour (out of\n24), \":\", minutes, \":\", seconds)\n```\n\nLANGUAGE: text\nCODE:\n```\nyyyy, yyyy-MM, yyyy-MM-dd, yyyy-MM-ddTHH, yyyy-MM-ddTHH:mm and\nyyyy-MM-ddTHH:mm:ss\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling or Packaging for Windows/MinGW/MSVC/UWP Targets - Shell\nDESCRIPTION: Illustrates various ways to cross-compile or package GStreamer for different Windows architectures and toolchains by specifying config and variant parameters. Each command targets a specific architecture and optionally a toolchain (MinGW, MSVC, or UWP) using the respective -c (config file) and -v (variant) flags. Output consists of packages for the respective targets.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n# Target MinGW 32-bit\\n$ ./cerbero-uninstalled -c config/win32.cbc package gstreamer-1.0\\n\\n# Target MSVC 64-bit\\n$ ./cerbero-uninstalled -c config/win64.cbc -v visualstudio package gstreamer-1.0\\n\\n# Target UWP, x86_64\\n$ ./cerbero-uninstalled -c config/win64.cbc -v uwp package gstreamer-1.0\\n\\n# Target UWP, Cross ARM64\\n$ ./cerbero-uninstalled -c config/cross-win-arm64.cbc -v uwp package gstreamer-1.0\\n\\n# Target UWP, All Supported Arches\\n$ ./cerbero-uninstalled -c config/cross-uwp-universal.cbc package gstreamer-1.0\\n```\n```\n\n----------------------------------------\n\nTITLE: Destroying Objects in libimagequant\nDESCRIPTION: Releases memory owned by the given objects. Objects must not be used anymore after being freed. Freeing liq_result also frees any liq_palette obtained from it.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nvoid liq_attr_destroy(liq_attr *);\nvoid liq_image_destroy(liq_image *);\nvoid liq_result_destroy(liq_result *);\n```\n\n----------------------------------------\n\nTITLE: Configuring License-Related Options in Meson\nDESCRIPTION: Defines an option to control whether plugins with (A)GPL-licensed dependencies should be built, with the default value set to 'disabled' to avoid license complications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_20\n\nLANGUAGE: meson\nCODE:\n```\n# License-related feature options\noption('gpl', type: 'feature', value: 'disabled', yield: true,\n  description: 'Allow build plugins that have (A)GPL-licensed dependencies')\n```\n\n----------------------------------------\n\nTITLE: GStreamer Control Setup Launch Style Example\nDESCRIPTION: Example of a proposed gst-launch style syntax for control setup descriptions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/controller.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nlfo wave=sine offset=0.5 \\! direct .control-source\n```\n\n----------------------------------------\n\nTITLE: Defining Popularimeter Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the POPM frame which contains user ratings and play counts for an audio file. This frame includes an email address to identify the user, a rating value from 1-255, and a play counter.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n  <Header for 'Popularimeter', ID: \"POPM\">\n  Email to user   <text string> $00\n  Rating          $xx\n  Counter         $xx xx xx xx (xx ...)\n```\n\n----------------------------------------\n\nTITLE: Defining ID3v2 MCDI Frame Structure (plaintext)\nDESCRIPTION: Defines the structure for the ID3v2 'Music CD identifier' frame (MCDI). The frame body contains a binary dump of the CD's Table of Contents (TOC). Using this frame requires the presence of a valid \"TRCK\" frame. Only one \"MCDI\" frame is allowed per tag.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n   <Header for 'Music CD identifier', ID: \"MCDI\">\n   CD TOC                <binary data>\n```\n\n----------------------------------------\n\nTITLE: Documenting ABGR Packed Reverse RGB with Alpha First Format (Markdown, Plaintext)\nDESCRIPTION: This code snippet covers the ABGR image format, where alpha comes first followed by blue, green, and red. The layout description (diagram and channel offsets) is used by developers when implementing pixel manipulation or conversion routines for formats needing alpha and BGR channel order.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |A0|R0|G0|B0| |A1|R1|G1|B1| ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: R\\n          depth:           8\\n          pstride:         4\\n          offset:          1\\n\\n        Component 1: G\\n          depth:           8\\n          pstride:         4\\n          offset:          2\\n\\n        Component 2: B\\n          depth            8\\n          pstride:         4\\n          offset:          3\\n\\n        Component 3: A\\n          depth            8\\n          pstride:         4\\n          offset:          0\\n\\n        Image\\n          default rstride: width * 4\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Android Player Library in CMake\nDESCRIPTION: This snippet sets up the GStreamer Android player library build. It defines the library target, links necessary dependencies, and sets visibility properties for the compiled library.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/playback/player/android/app/src/main/jni/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(gstplayer SHARED player.c dummy.cpp)\ntarget_link_libraries(gstplayer\n    PUBLIC\n        GStreamer::mobile\n        ${ANDROID_LIB}\n        ${LOG_LIB}\n)\nset_target_properties(gstplayer\n    PROPERTIES\n        C_VISIBILITY_PRESET hidden\n        CXX_VISIBILITY_PRESET hidden\n)\n```\n\n----------------------------------------\n\nTITLE: Describing GstValidate Plugin System in Markdown\nDESCRIPTION: A simple markdown header and description explaining that GstValidate offers a plugin system to extend checks and add new functionality.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/plugins/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GstValidate plugins\n\nGstValidate offers a plugin system to extend the checks and add new functionnality\n```\n\n----------------------------------------\n\nTITLE: Validating Removal of a Keyframe - Validate-Scenario, Plaintext\nDESCRIPTION: Defines a 'remove-keyframe' action for GES, specifying the necessary parameters to remove a keyframe from a particular element and property at the given timestamp. Intended for use with GStreamer Editing Services validation scenarios, it requires explicit element and property identification, and optionally allows scheduled execution via playback-time. Inputs include element-name, property-name, and timestamp; outputs are dictated by the GES scenario execution. Relies on the validate-scenario infrastructure and GES objects.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nremove-keyframe,\n    [playback-time=(double,string)],\n    element-name=(string),\n    property-name=(string),\n    timestamp=(string or float);\n```\n\n----------------------------------------\n\nTITLE: Listing ID3v1 Genre Codes\nDESCRIPTION: A comprehensive list of genre codes defined in ID3v1, including both original and Winamp extension genres. Each genre is associated with a numeric code.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_38\n\nLANGUAGE: Plain Text\nCODE:\n```\n   0. Blues\n    1. Classic Rock\n    2. Country\n    3. Dance\n    4. Disco\n    5. Funk\n    6. Grunge\n    7. Hip-Hop\n    8. Jazz\n    9. Metal\n   10. New Age\n   11. Oldies\n   12. Other\n   13. Pop\n   14. R&B\n   15. Rap\n   16. Reggae\n   17. Rock\n   18. Techno\n   19. Industrial\n   20. Alternative\n   21. Ska\n   22. Death Metal\n   23. Pranks\n   24. Soundtrack\n   25. Euro-Techno\n   26. Ambient\n   27. Trip-Hop\n   28. Vocal\n   29. Jazz+Funk\n   30. Fusion\n   31. Trance\n   32. Classical\n   33. Instrumental\n   34. Acid\n   35. House\n   36. Game\n   37. Sound Clip\n   38. Gospel\n   39. Noise\n   40. AlternRock\n   41. Bass\n   42. Soul\n   43. Punk\n   44. Space\n   45. Meditative\n   46. Instrumental Pop\n   47. Instrumental Rock\n   48. Ethnic\n   49. Gothic\n   50. Darkwave\n   51. Techno-Industrial\n   52. Electronic\n   53. Pop-Folk\n   54. Eurodance\n   55. Dream\n   56. Southern Rock\n   57. Comedy\n   58. Cult\n   59. Gangsta\n   60. Top 40\n   61. Christian Rap\n   62. Pop/Funk\n   63. Jungle\n   64. Native American\n   65. Cabaret\n   66. New Wave\n   67. Psychedelic\n   68. Rave\n   69. Showtunes\n   70. Trailer\n   71. Lo-Fi\n   72. Tribal\n   73. Acid Punk\n   74. Acid Jazz\n   75. Polka\n   76. Retro\n   77. Musical\n   78. Rock & Roll\n   79. Hard Rock\n\nThe following genres are Winamp extensions\n\n   80. Folk\n   81. Folk-Rock\n   82. National Folk\n   83. Swing\n   84. Fast Fusion\n   85. Bebob\n   86. Latin\n   87. Revival\n   88. Celtic\n   89. Bluegrass\n   90. Avantgarde\n   91. Gothic Rock\n   92. Progressive Rock\n   93. Psychedelic Rock\n   94. Symphonic Rock\n   95. Slow Rock\n   96. Big Band\n   97. Chorus\n   98. Easy Listening\n   99. Acoustic\n  100. Humour\n  101. Speech\n  102. Chanson\n  103. Opera\n  104. Chamber Music\n  105. Sonata\n  106. Symphony\n  107. Booty Bass\n  108. Primus\n  109. Porn Groove\n  110. Satire\n  111. Slow Jam\n  112. Club\n  113. Tango\n  114. Samba\n  115. Folklore\n  116. Ballad\n  117. Power Ballad\n  118. Rhythmic Soul\n  119. Freestyle\n  120. Duet\n  121. Punk Rock\n  122. Drum Solo\n  123. A capella\n  124. Euro-House\n  125. Dance Hall\n```\n\n----------------------------------------\n\nTITLE: Defining Play Counter Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the PCNT frame which tracks the number of times an audio file has been played. The counter is at least 32-bits long and expands when needed.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n  <Header for 'Play counter', ID: \"PCNT\">\n  Counter         $xx xx xx xx (xx ...)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables\nDESCRIPTION: Shows how to set global variables that can be used across both configs and scenarios.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-config.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nset-globals, TESTSUITE_ROOT_DIR=$(CONFIG_DIR)\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Dependency Feature Options in Meson\nDESCRIPTION: Defines Meson feature options ('drm', 'udev', 'wayland', 'x11') to control the inclusion of support for specific optional libraries within certain GStreamer plugins (e.g., libdrm in GstVA, gudev in VA-API, Wayland/X11 in Vulkan/GL/rfb). These default to 'auto'.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_3\n\nLANGUAGE: meson\nCODE:\n```\n# Feature options for optional deps in plugins\noption('drm', type : 'feature', value : 'auto', description: 'libdrm support in the GstVA library')\noption('udev', type : 'feature', value : 'auto', description: 'gudev support in the new VA-API plugin')\noption('wayland', type : 'feature', value : 'auto', description : 'Wayland plugin/library, support in the Vulkan plugin')\noption('x11', type : 'feature', value : 'auto', description : 'X11 support in Vulkan, GL and rfb plugins')\n```\n\n----------------------------------------\n\nTITLE: Time Widget Update in Java\nDESCRIPTION: Updates the text view displaying current playback position and duration in HH:mm:ss format.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void updateTimeWidget () {\n    final TextView tv = (TextView) this.findViewById(R.id.textview_time);\n    final SeekBar sb = (SeekBar) this.findViewById(R.id.seek_bar);\n    final int pos = sb.getProgress();\n    SimpleDateFormat df = new SimpleDateFormat(\"HH:mm:ss\");\n    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final String message = df.format(new Date (pos)) + \" / \" + df.format(new Date (duration));\n    tv.setText(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Documentation Pre-commit Hook for GStreamer\nDESCRIPTION: Shell command to enable a pre-commit hook that validates documentation, including checking for missing Since tags and up-to-date plugin caches before committing changes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/contribute/index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nGST_ENABLE_DOC_PRE_COMMIT_HOOK=1 git commit\n```\n\n----------------------------------------\n\nTITLE: Documenting ARGB Packed RGB with Alpha First Format (Markdown, Plaintext)\nDESCRIPTION: This snippet explains the ARGB format, with alpha channel stored first, followed by red, green, and blue bytes per pixel. It provides a diagram and table of channel order and memory layout, enabling image readers/writers to properly interpret or generate ARGB buffers for graphics with alpha support.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\\n       |A0|R0|G0|B0| |A1|R1|G1|B1| ...\\n       +--+--+--+--+ +--+--+--+--+\\n\\n        Component 0: R\\n          depth:           8\\n          pstride:         4\\n          offset:          1\\n\\n        Component 1: G\\n          depth:           8\\n          pstride:         4\\n          offset:          2\\n\\n        Component 2: B\\n          depth            8\\n          pstride:         4\\n          offset:          3\\n\\n        Component 3: A\\n          depth            8\\n          pstride:         4\\n          offset:          0\\n\\n        Image\\n          default rstride: width * 4\\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Configuring SCTP Plugin Options in Meson\nDESCRIPTION: Defines an option to control whether the SCTP plugin should use the bundled usrsctp library or the system one, with the default set to 'enabled' (use bundled library).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_13\n\nLANGUAGE: meson\nCODE:\n```\n# SCTP plugin options\noption('sctp-internal-usrsctp', type: 'feature', value : 'enabled',\n       description: 'Whether to use the bundled usrsctp library or the system one')\n```\n\n----------------------------------------\n\nTITLE: Installing GStreamer Runtime Package on Windows\nDESCRIPTION: Command to launch the GStreamer runtime installer with default settings using msiexec. This brings up the standard installation dialog.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/windows.md#2025-04-23_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nmsiexec /i gstreamer-1.0-x86-1.8.1.msi\n```\n\n----------------------------------------\n\nTITLE: Group Identification Registration Frame\nDESCRIPTION: Specifies the frame structure for group identification registration, including owner and group information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_36\n\nLANGUAGE: plain\nCODE:\n```\n<Header for 'Group ID registration', ID: \"GRID\">\nOwner identifier     <text string> $00\nGroup symbol         $xx\nGroup dependent data <binary data>\n```\n\n----------------------------------------\n\nTITLE: Defining Event Timing Codes Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of the ETCO frame in ID3v2 tags, which provides synchronization points for key events in audio. The frame includes a timestamp format byte and a list of event types paired with their timestamps.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n<Header for 'Event timing codes', ID: \"ETCO\">\nTime stamp format    $xx\n```\n\n----------------------------------------\n\nTITLE: Visual Studio Project Template for GStreamer\nDESCRIPTION: The name ('GStreamer Project') of a project template available in Visual Studio after GStreamer integration. This template creates a new project with pre-configured settings for GStreamer development, including necessary property sheets, but still requires DDK setup for correct runtime linking.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nGStreamer Project\n```\n\n----------------------------------------\n\nTITLE: Defining Attached Picture (APIC) Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the APIC frame used to store images related to audio files. The frame includes text encoding information, MIME type, picture type (e.g., cover art, icon), description, and the actual binary picture data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_15\n\nLANGUAGE: Binary\nCODE:\n```\n<Header for 'Attached picture', ID: \"APIC\">\nText encoding      $xx\nMIME type          <text string> $00\nPicture type       $xx\nDescription        <text string according to encoding> $00 (00)\nPicture data       <binary data>\n```\n\n----------------------------------------\n\nTITLE: Defining Picture Type Constants for APIC Frame in ID3v2\nDESCRIPTION: Lists the standardized picture type values used in the APIC frame. Each value (from $00 to $14) represents a specific type of image such as cover art, artist photo, or icon.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n  $00     Other\n  $01     32x32 pixels 'file icon' (PNG only)\n  $02     Other file icon\n  $03     Cover (front)\n  $04     Cover (back)\n  $05     Leaflet page\n  $06     Media (e.g. label side of CD)\n  $07     Lead artist/lead performer/soloist\n  $08     Artist/performer\n  $09     Conductor\n  $0A     Band/Orchestra\n  $0B     Composer\n  $0C     Lyricist/text writer\n  $0D     Recording Location\n  $0E     During recording\n  $0F     During performance\n  $10     Movie/video screen capture\n  $11     A bright coloured fish\n  $12     Illustration\n  $13     Band/artist logotype\n  $14     Publisher/Studio logotype\n```\n\n----------------------------------------\n\nTITLE: Building GStreamer with Visual Studio Support\nDESCRIPTION: Command to run cerbero-uninstalled with the visualstudio variant enabled to build GStreamer packages using Visual Studio instead of MinGW.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ python ./cerbero-uninstalled -v visualstudio package gstreamer-1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Common GStreamer Package Options\nDESCRIPTION: Defines options related to package metadata, documentation, and GLib debug infrastructure. These settings affect how GStreamer is packaged and what debug features are available.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/meson_options.txt#2025-04-23_snippet_5\n\nLANGUAGE: meson\nCODE:\n```\n# Common options\noption('package-name', type : 'string', yield : true,\n       description : 'package name to use in plugins')\noption('package-origin', type : 'string', value : 'Unknown package origin', yield : true,\n       description : 'package origin URL to use in plugins')\noption('doc', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable documentation.')\noption('glib_debug', type : 'feature', value : 'auto', yield : true, description : 'Enable GLib debug infrastructure (see docs/macros.txt)')\noption('glib_assert', type : 'boolean', value : true, yield : true, description : 'Enable GLib assertion (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\noption('glib_checks', type : 'boolean', value : true, yield : true, description : 'Enable GLib checks such as API guards (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring NVIDIA Compression Plugin Options in Meson\nDESCRIPTION: Defines an option to specify the path to the NVIDIA Compression (nvCOMP) SDK root directory for the nvcomp plugin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_16\n\nLANGUAGE: meson\nCODE:\n```\n# nvCOMP plugin options\noption('nvcomp-sdk-path', type: 'string', value : '',\n       description : 'nvCOMP SDK root directory')\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronized Tempo Codes Frame Format in ID3v2\nDESCRIPTION: Specifies the SYTC (Synchronized tempo codes) frame format in ID3v2 tags, which provides accurate tempo information in BPM with timestamps to indicate tempo changes throughout a music piece.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n  <Header for 'Synchronised tempo codes', ID: \"SYTC\">\n  Time stamp format    $xx\n  Tempo data           <binary data>\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Resample Format in Meson\nDESCRIPTION: Defines a Meson build option named 'audioresample_format' to control the internal format used by the audioresample element. It's a combo box type, allowing selection between 'int', 'float', or 'auto' (default).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('audioresample_format', type : 'combo',\n       choices : ['int', 'float', 'auto'], value : 'auto')\n```\n\n----------------------------------------\n\nTITLE: Accessing GStreamer C Objects from Qt Wrapper\nDESCRIPTION: Demonstrates how to access the underlying C GStreamer objects from their QtGStreamer wrappers using type casting.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/qt-gstreamer-vs-c-gstreamer.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nElementPtr qgstElement = QGst::ElementFactory::make(\"playbin\");\nGstElement* gstElement = GST_ELEMENT(qgstElement);\n```\n\n----------------------------------------\n\nTITLE: Setting Package Origin URL for Plugins in Meson\nDESCRIPTION: Defines a Meson string option 'package-origin' to specify a URL indicating the origin of the package, embedded within GStreamer plugins. Defaults to 'Unknown package origin'. 'yield: true' suggests it affects subprojects.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_17\n\nLANGUAGE: meson\nCODE:\n```\noption('package-origin', type : 'string', value : 'Unknown package origin', yield : true,\n       description : 'package origin URL to use in plugins')\n```\n\n----------------------------------------\n\nTITLE: Building ONNX Runtime with CUDA Backend Bash Script (shell)\nDESCRIPTION: This snippet configures, builds, and installs ONNX Runtime with CUDA GPU backend enabled. It requires the CUDA and cuDNN libraries installed in standard locations, and sets CUDA-relevant CMake flags for proper GPU support. The compiler and architecture are set for native GPU builds, while testing and unit tests remain disabled.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/onnx/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncmake -Donnxruntime_BUILD_SHARED_LIB=ON -DBUILD_TESTING=OFF -Donnxruntime_BUILD_UNIT_TESTS=OFF -Donnxruntime_USE_CUDA=ON -Donnxruntime_CUDA_HOME=/usr/local/cuda -Donnxruntime_CUDNN_HOME=/usr/local/cuda -DCMAKE_CUDA_ARCHITECTURES=native -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc $SRC_DIR/onnxruntime/cmake && make -j$(nproc) && sudo make install\n```\n\n----------------------------------------\n\nTITLE: Default GStreamer Plugin Search Paths on Windows\nDESCRIPTION: This lists the default locations where GStreamer searches for its plugins at runtime. It includes the user's home directory, the standard installation library path, a path relative to the core GStreamer DLL, and any paths specified in the `GST_PLUGIN_PATH` environment variable.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n%HOMEDRIVE%%HOMEPATH%/.gstreamer-1.0/plugins\nC:\\gstreamer\\1.0\\x86\\lib\\gstreamer-1.0\n<location of gstreamer-1.0-0.dll>\\..\\lib\\gstreamer-1.0\n%GST_PLUGIN_PATH%\n```\n\n----------------------------------------\n\nTITLE: Checking for Missing GStreamer Plugin\nDESCRIPTION: Command to verify if a specific GStreamer plugin is installed on the system using gst-inspect-1.0 utility\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-inspect-1.0 (plug-in)\n```\n\n----------------------------------------\n\nTITLE: Describing RGB8P 8-bit Paletted RGB Layout in Plaintext\nDESCRIPTION: This snippet details the memory organization of the RGB8P paletted format, indicating how pixel indices reference a palette of 32-bit color entries. Each component's pitch, stride, and storage size are specified, facilitating buffer allocation and reading. Required parameters are width and height; outputs clarify the size and offset structure for image processing routines.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_36\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: INDEX\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * height\n\n        Component 1: PALETTE\n          depth            32\n          pstride:         4\n          default offset:  size (component0)\n          rstride:         4\n          size:            256 * 4\n\n        Image\n          default size:    size (component0) + size (component1)\n```\n\n----------------------------------------\n\nTITLE: Selecting OpenGL Window Systems in Meson\nDESCRIPTION: Defines a Meson build option 'gl_winsys' as an array type. This option configures which OpenGL window systems (e.g., x11, wayland, win32, cocoa, android) GStreamer should support, defaulting to 'auto'. Multiple systems can be enabled.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_5\n\nLANGUAGE: meson\nCODE:\n```\noption('gl_winsys', type : 'array',\n       choices : ['x11', 'wayland', 'win32', 'winrt', 'cocoa', 'dispmanx', 'egl', 'surfaceless', 'viv-fb', 'gbm', 'android', 'auto'], value : ['auto'],\n       description : 'A comma separated list of opengl windows systems to enable building against. Supported values are x11, wayland, win32, winrt, cocoa, dispmanx, egl, viv-fb, gbm, and android')\n```\n\n----------------------------------------\n\nTITLE: Running Cross Compilation with Meson for Windows\nDESCRIPTION: Command for using Meson to cross compile GStreamer with a specified cross file for Windows. This demonstrates the basic syntax for invoking the cross compilation process.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/data/machine-files/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeson --cross-file data/cross-files/mingw_w64_x86-64.txt builddir\n```\n\n----------------------------------------\n\nTITLE: Linking GStreamer Elements with Always Pads\nDESCRIPTION: This code adds all elements to the pipeline and links those with Always Pads. It uses gst_bin_add_many() to add elements and gst_element_link_many() to link compatible elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/multithreading-and-pad-availability.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n/* Link all elements that can be automatically linked because they have \"Always\" pads */\ngst_bin_add_many (GST_BIN (pipeline), audio_source, tee, audio_queue, audio_convert, audio_sink,\n    video_queue, visual, video_convert, video_sink, NULL);\nif (gst_element_link_many (audio_source, tee, NULL) != TRUE ||\n    gst_element_link_many (audio_queue, audio_convert, audio_sink, NULL) != TRUE ||\n    gst_element_link_many (video_queue, visual, video_convert, video_sink, NULL) != TRUE) {\n  g_printerr (\"Elements could not be linked.\\n\");\n  gst_object_unref (pipeline);\n  return -1;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Renamed GstElement Signals in GStreamer 0.10 (C)\nDESCRIPTION: Two commonly used signals on `GstElement` have been renamed in GStreamer 0.10. The `new-pad` signal is now `pad-added`, and the `state-change` signal is now `state-changed`. Applications porting from 0.8 need to update their signal connection handlers to use the new names.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/porting.md#2025-04-23_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n\"new-pad\"\n```\n\nLANGUAGE: C\nCODE:\n```\n\"state-change\"\n```\n\nLANGUAGE: C\nCODE:\n```\n\"pad-added\"\n```\n\nLANGUAGE: C\nCODE:\n```\n\"state-changed\"\n```\n\n----------------------------------------\n\nTITLE: Private Frame Structure\nDESCRIPTION: Details the frame structure for private data, including owner identifier and custom binary data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_37\n\nLANGUAGE: plain\nCODE:\n```\n<Header for 'Private frame', ID: \"PRIV\">\nOwner identifier        <text string> $00\nThe private data        <binary data>\n```\n\n----------------------------------------\n\nTITLE: Implementing View Controller for GStreamer iOS Application\nDESCRIPTION: Implements the ViewController that instantiates the GStreamerBackend class and displays the GStreamer version in the UI label. Shows how to integrate GStreamer functionality into an iOS application's lifecycle.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/link-against-gstreamer.md#2025-04-23_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import \"ViewController.h\"\n#import \"GStreamerBackend.h\"\n\n@interface ViewController () {\n    GStreamerBackend *gst_backend;\n}\n\n@end\n\n@implementation ViewController\n\n@synthesize label;\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    gst_backend = [[GStreamerBackend alloc] init];\n\n    label.text = [NSString stringWithFormat:@\"Welcome to %@!\", [gst_backend getGStreamerVersion]];\n}\n\n- (void)didReceiveMemoryWarning\n{\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Defining Reverb Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of the RVRB frame used for reverb settings in ID3v2 tags. Includes delay times, bounce counts, feedback values, and premix settings for both left and right channels.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_14\n\nLANGUAGE: plain text\nCODE:\n```\n<Header for 'Reverb', ID: \"RVRB\">\nReverb left (ms)                 $xx xx\nReverb right (ms)                $xx xx\nReverb bounces, left             $xx\nReverb bounces, right            $xx\nReverb feedback, left to left    $xx\nReverb feedback, left to right   $xx\nReverb feedback, right to right  $xx\nReverb feedback, right to left   $xx\nPremix left to right             $xx\nPremix right to left             $xx\n```\n\n----------------------------------------\n\nTITLE: Playing WAV Audio with GStreamer\nDESCRIPTION: Shows how to play a WAV file containing raw PCM audio data using GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=music.wav ! wavparse ! audioconvert ! audioresample ! pulsesink\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimum Opacity Setting in C\nDESCRIPTION: Returns the current minimum opacity threshold setting.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nint liq_get_min_opacity(liq_attr* attr);\n```\n\n----------------------------------------\n\nTITLE: Running Meson with Visual Studio environment on Windows\nDESCRIPTION: Force Meson to use the Visual Studio environment when setting up the build directory. This is useful when other compilers are present on the system.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmeson setup --vsenv builddir\n```\n\n----------------------------------------\n\nTITLE: Building GStreamer WebRTC Library\nDESCRIPTION: Configures the build target for the GStreamer WebRTC shared library. Links against required Android and GStreamer dependencies and sets visibility properties for symbols.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/webrtc/android/app/src/main/jni/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_library(ANDROID_LIB android REQUIRED)\nfind_library(LOG_LIB log REQUIRED)\nfind_package(GStreamerMobile COMPONENTS ${GSTREAMER_PLUGINS} fonts ca_certificates REQUIRED)\n\nadd_library(gstwebrtc SHARED webrtc.c dummy.cpp)\ntarget_link_libraries(gstwebrtc\n    PUBLIC\n        GStreamer::mobile\n        ${ANDROID_LIB}\n        ${LOG_LIB}\n)\nset_target_properties(gstwebrtc\n    PROPERTIES\n        C_VISIBILITY_PRESET hidden\n        CXX_VISIBILITY_PRESET hidden\n)\n```\n\n----------------------------------------\n\nTITLE: Adding GStreamer Video Library Linker Flag\nDESCRIPTION: Specifies the linker flag (`-l`) required to link against the GStreamer video library (`gstvideo`). This flag should be added to the linker command in addition to the flags obtained from pkg-config. The `{{ gst_api_version.md }}` placeholder needs to be replaced with the target GStreamer API version.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/docs/libs/video/index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-lgstvideo-{{ gst_api_version.md }}\n```\n\n----------------------------------------\n\nTITLE: Valid TOC Structure Example\nDESCRIPTION: ASCII diagram showing a valid TOC tree structure with editions and chapters properly organized in hierarchy.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/toc.md#2025-04-23_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n-------  TOC  -------\n         /  \\\n edition1    edition2\n |           |\n -chapter1   -chapter3\n -chapter2\n```\n\n----------------------------------------\n\nTITLE: Creating pkg-config File for LCEVC Encoder SDK (INI Format)\nDESCRIPTION: This code block provides the contents for manually creating a lcevc_eil.pc file for pkg-config integration. The file defines environment variables, library location, compiler flags, versioning, and linking options required for other programs to detect and use the LCEVC EIL library during build processes. Place this file in the appropriate pkg-config directory (e.g., /usr/local/lib/pkgconfig) for build-time detection.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/lcevcencoder/README.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nprefix=/usr/local\\nincludedir=${prefix}/include\\nlibdir=${prefix}/lib\\n\\nName: lcevc_eil\\nDescription: LCEVC Encoder EIL library\\nVersion: 3.11.3\\nLibs: -L${libdir} -llcevc_eil\\nCflags: -I${includedir}\n```\n\n----------------------------------------\n\nTITLE: Defining rtspclientsink Feature Option in Meson\nDESCRIPTION: Defines a Meson build option named 'rtspclientsink' of type 'feature'. Its default value is 'auto', allowing the build system to automatically enable or disable it based on detected dependencies or other criteria. This option likely controls the inclusion of the RTSP client sink element.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\n# Feature options for plugins with no external deps\noption('rtspclientsink', type : 'feature', value : 'auto')\n```\n\n----------------------------------------\n\nTITLE: Documenting YV12 Planar YUV Format Layout (Markdown, Plaintext)\nDESCRIPTION: This snippet provides the memory layout details for the YV12 planar YUV 4:2:0 image format, which is nearly identical to I420 but with the U and V planes swapped. It specifies component bit depths, strides, offsets, and overall image size calculation for correct buffer manipulation. It’s a reference for image parser and writer implementations, ensuring compliance with YV12 conventions when handling planar YUV data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\\n          depth:           8\\n          pstride:         1\\n          default offset:  0\\n          default rstride: RU4 (width)\\n          default size:    rstride (component0) * RU2 (height)\\n\\n        Component 1: U\\n          depth            8\\n          pstride:         1\\n          default offset:  offset (component2) + size (component2)\\n          default rstride: RU4 (RU2 (width) / 2)\\n          default size:    rstride (component1) * RU2 (height) / 2\\n\\n        Component 2: V\\n          depth:           8\\n          pstride:         1\\n          default offset:  size (component0)\\n          default rstride: RU4 (RU2 (width) / 2)\\n          default size:    rstride (component2) * RU2 (height) / 2\\n\\n        Image\\n          default size: size (component0) +\\n                        size (component1) +\\n                        size (component2)\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated GLib Checks Option in Meson\nDESCRIPTION: Defines a deprecated Meson build option named 'glib-checks' of type 'feature'. It defaults to 'enabled', yields its value, and provides a description. It is explicitly marked as deprecated in favor of the 'glib_checks' option. This option previously controlled GLib runtime checks like API guards.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_12\n\nLANGUAGE: meson\nCODE:\n```\noption('glib-checks', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib checks such as API guards (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_checks')\n```\n\n----------------------------------------\n\nTITLE: Configuring Vulkan Integration Options in Meson\nDESCRIPTION: Defines options for Vulkan integration in GStreamer, including the Vulkan integration library, video sink plugin, Vulkan Video Extensions for encoding/decoding, and windowing system support.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_19\n\nLANGUAGE: meson\nCODE:\n```\n# Vulkan integration library and plugin options\noption('vulkan', type: 'feature', value: 'auto', description: 'Vulkan integration library and video sink plugin')\noption('vulkan-video', type: 'feature', value: 'auto', description: 'Whether to use Vulkan Video Extensions for encoding/decoding')\noption('vulkan-windowing', type : 'array',\n       choices : ['x11', 'wayland', 'auto'], value : ['auto'],\n       description : 'A comma separated list of Vulkan windowing systems to enable. Non-Linux platforms are auto-detected.')\n```\n\n----------------------------------------\n\nTITLE: Parent Reference Management\nDESCRIPTION: Implementation showing how to safely obtain and release parent references with proper locking.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nLOCK (child);\nparent = _ref (child->parent);\nUNLOCK (child);\n\n.. use parent ..\n\n_unref (parent);\n```\n\n----------------------------------------\n\nTITLE: Calculating Buffer Exit Time in GStreamer QoS\nDESCRIPTION: Formula for determining when a buffer leaves the sink after synchronization, handling both on-time and late buffers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/qos.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nT2 = B1 + (J1 < 0 ? 0 : J1)\n```\n\n----------------------------------------\n\nTITLE: Handle GStreamer Error Messages in C\nDESCRIPTION: Implements the `error_cb` function, a GStreamer bus callback (`GstBusFunc`). It's called when an error message is posted on the bus. It parses the error message using `gst_message_parse_error`, formats a user-friendly error string including the element name and error details, sends this string to the UI using `set_ui_message`, sets the pipeline's target state to NULL, and attempts to set the pipeline state to NULL to stop playback.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n/* Retrieve errors from the bus and show them on the UI */\nstatic void error_cb (GstBus *bus, GstMessage *msg, CustomData *data) {\n  GError *err;\n  gchar *debug_info;\n  gchar *message_string;\n\n  gst_message_parse_error (msg, &err, &debug_info);\n  message_string = g_strdup_printf (\"Error received from element %s: %s\", GST_OBJECT_NAME (msg->src), err->message);\n  g_clear_error (&err);\n  g_free (debug_info);\n  set_ui_message (message_string, data);\n  g_free (message_string);\n  data->target_state = GST_STATE_NULL;\n  gst_element_set_state (data->pipeline, GST_STATE_NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Posting Messages to Java UI from Native Code (C)\nDESCRIPTION: The function 'set_ui_message' obtains a per-thread JNI environment, creates a new Java string from the provided C message, and calls a Java method to update UI text. It safely checks for Java exceptions and clears them after reporting errors, ensuring synchronization between native-side GStreamer events and the Java application's interface. This function depends on the global method ID and correct CustomData context.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nstatic void set_ui_message (const gchar *message, CustomData *data) {\n  JNIEnv *env = get_jni_env ();\n  GST_DEBUG (\"Setting message to: %s\", message);\n  jstring jmessage = (*env)->NewStringUTF(env, message);\n  (*env)->CallVoidMethod (env, data->app, set_message_method_id, jmessage);\n  if ((*env)->ExceptionCheck (env)) {\n    GST_ERROR (\"Failed to call Java method\");\n    (*env)->ExceptionClear (env);\n  }\n  (*env)->DeleteLocalRef (env, jmessage);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Graphene Use in OpenGL Plugin (Meson)\nDESCRIPTION: Defines a Meson feature option 'gl-graphene' to control whether the Graphene library is used within the GStreamer OpenGL plugin. Defaults to 'auto', enabling if Graphene is found.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_10\n\nLANGUAGE: meson\nCODE:\n```\noption('gl-graphene', type : 'feature', value : 'auto', description : 'Use Graphene in OpenGL plugin')\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Build Options in Meson\nDESCRIPTION: Defines build configuration options for GStreamer including package name, origin URL, documentation generation, and test execution settings. These options can be customized during the build configuration phase.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-libav/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('package-name', type : 'string', yield : true,\n       description : 'package name to use in plugins')\noption('package-origin', type : 'string',\n       value : 'Unknown package origin', yield : true,\n       description : 'package origin URL to use in plugins')\noption('doc', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable documentation.')\noption('tests', type : 'feature', value : 'auto', yield : true)\n```\n\n----------------------------------------\n\nTITLE: Augmenting CustomData Structure for Video Sink and Native Window in C\nDESCRIPTION: This snippet shows additions to the CustomData structure. It adds a pointer `video_sink` to store the GStreamer video sink element that implements the VideoOverlay interface, and a pointer `native_window` to hold the Android ANativeWindow handle where the video will be rendered.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nGstElement *video_sink; /* The video sink element which receives VideoOverlay commands */\nANativeWindow *native_window; /* The Android native window where video will be rendered */\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring the Tutorial-3 Library Target in CMake\nDESCRIPTION: This snippet defines the tutorial-3 shared library target, links it with the necessary libraries, and sets its visibility properties. It includes the main tutorial-3.c file and a dummy.cpp file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/examples/tutorials/android/android-tutorial-3/jni/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(tutorial-3 SHARED tutorial-3.c dummy.cpp)\ntarget_link_libraries(tutorial-3\n    PUBLIC\n        GStreamer::mobile\n        ${ANDROID_LIB}\n        ${LOG_LIB}\n)\nset_target_properties(tutorial-3\n    PROPERTIES\n        C_VISIBILITY_PRESET hidden\n        CXX_VISIBILITY_PRESET hidden\n)\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to GStreamer Tutorial Examples\nDESCRIPTION: Navigates the command-line shell into the directory containing the GStreamer tutorial source code (`gstreamer/subprojects/gst-docs/examples/tutorials/`) using the `cd` command. This assumes the GStreamer repository was previously cloned into a directory named `gstreamer`. This is a prerequisite step before compiling the tutorial examples.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-linux.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd gstreamer/subprojects/gst-docs/examples/tutorials/\n```\n\n----------------------------------------\n\nTITLE: Checking GStreamer Framework Version Link\nDESCRIPTION: Example showing how to inspect the symbolic link for the current version of the GStreamer framework.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/mac-osx.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -l Frameworks/GStreamer.framework/Version/Current\nlrwxr-xr-x 1 fluendo staff 21 Jun 5 18:46 Frameworks/GStreamer.framework/Versions/Current -> ../Versions/0.10/x86\n```\n\n----------------------------------------\n\nTITLE: Parsing Private Frame in ID3v2\nDESCRIPTION: Defines the structure for the 'Private' frame (PRIV) in ID3v2 tags. This frame contains software-specific data that doesn't fit in other frames, with an owner identifier and arbitrary binary data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n<Header for 'Private frame', ID: \"PRIV\">\nOwner identifier      <text string> $00\nThe private data      <binary data>\n```\n\n----------------------------------------\n\nTITLE: Moving Specific Merge Request with URL\nDESCRIPTION: Command demonstrating how to move a single specific merge request by providing its URL to the migration script.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/mono-repository.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGITLAB_API_TOKEN=zytXYboB5yi3uggRpBM6 ./scripts/move_mrs_to_monorepo.py -mr https://gitlab.freedesktop.org/gstreamer/gst-plugins-base/-/merge_requests/1277\n```\n\n----------------------------------------\n\nTITLE: Moving Merge Requests to Monorepo with API Token\nDESCRIPTION: Example command showing how to run the merge request migration script with a GitLab API token to move existing merge requests to the new monorepo.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/mono-repository.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGITLAB_API_TOKEN=edEFoqK3tATMj-XD6pY_ ./scripts/move_mrs_to_monorepo.py\n```\n\n----------------------------------------\n\nTITLE: Legacy GStreamer Documentation Sitemap in Markdown\nDESCRIPTION: Original sitemap showing the documentation structure with main sections for installation, tutorials, deployment guides, reference docs and other information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/TODO.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n        Installing the SDK\n            Installing on Linux\n            Installing on Mac OS X\n            Installing on Windows\n            Installing for Android development\n            Installing for iOS development\n            Building from source using Cerbero\n        Tutorials\n            Basic tutorials\n            Playback tutorials\n            Android tutorials\n            iOS tutorials\n            Table of Concepts\n            Upcoming tutorials\n        Deploying your application\n            Mac OS X deployment\n            Windows deployment\n            Multiplatform deployment using Cerbero\n        GStreamer reference\n            gst-inspect\n            gst-launch\n        Legal information\n        Frequently Asked Questions\n        Contact\n```\n\n----------------------------------------\n\nTITLE: Session-Based Client Connection Example\nDESCRIPTION: Commands demonstrating how to run two session-based clients, where one client initiates a connection and the other connects to it using the first client's UID.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/webrtc/signalling/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ./session-client.py\nOur uid is 'ws-test-client-8f63b9'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ./session-client.py --call ws-test-client-8f63b9\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimum Posterization Setting in C\nDESCRIPTION: Returns the current minimum posterization level setting.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nint liq_get_min_posterization(liq_attr* attr);\n```\n\n----------------------------------------\n\nTITLE: Property Sheet File Storing Custom DDK Path\nDESCRIPTION: The filename ('config.props') of the Visual Studio property sheet where modifications made through the Property Manager, such as setting the 'WINDOWS_DRIVER_KIT' user macro to a custom DDK path, are saved.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nconfig.props\n```\n\n----------------------------------------\n\nTITLE: Visual Studio User Macro for DDK Path\nDESCRIPTION: The name of a user macro defined within Visual Studio project property sheets (like 'config.props'). This macro should be set to the root installation path of the Windows Driver Kit (DDK) if it's not installed in the default location.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nWINDOWS_DRIVER_KIT\n```\n\n----------------------------------------\n\nTITLE: Unparenting Implementation\nDESCRIPTION: Implementation of the unparent operation showing how to safely remove parent-child relationships.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nLOCK (child);\nif (child->parent != NULL) {\n  child->parent = NULL;\n  UNLOCK (child);\n  _signal (PARENT_UNSET, child, parent);\n\n  _unref (child);\n} else {\n  UNLOCK (child);\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Data Feed Stop Callback\nDESCRIPTION: Callback function that stops data feeding when appsrc has enough data. Removes the idle handler when the pipeline buffer is full.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/short-cutting-the-pipeline.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstatic void stop_feed (GstElement *source, CustomData *data) {\n  if (data->sourceid != 0) {\n    g_print (\"Stop feeding\\n\");\n    g_source_remove (data->sourceid);\n    data->sourceid = 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Options for Plugins With External Dependencies (Python)\nDESCRIPTION: Sets up build options of type 'feature' (with value 'auto') for plugins requiring external libraries, each accompanied by descriptive documentation. Plugins like 'a52dec', 'cdio', 'dvdread', 'mpeg2dec', 'sidplay', and 'x264' will only be built if their respective dependencies and licensing (e.g., GPL) requirements are met. Each option provides information about associated libraries and the circumstances needed for enabling the plugin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-ugly/meson_options.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\noption('a52dec', type : 'feature', value : 'auto', description : 'Dolby Digital (AC-3) audio decoder plugin based on liba52 (GPL - only built if gpl option is also enabled!)')\noption('cdio', type : 'feature', value : 'auto', description : 'CD audio source plugin based on libcdio (GPL - only built if gpl option is also enabled!)')\noption('dvdread', type : 'feature', value : 'auto', description : 'DVD video source plugin based on libdvdread (GPL - only built if gpl option is also enabled!)')\noption('mpeg2dec', type : 'feature', value : 'auto', description : 'MPEG 2 video decoder plugin based on libmpeg2 (GPL - only built if gpl option is also enabled!)')\noption('sidplay', type : 'feature', value : 'auto', description : 'Commodore 64 audio decoder plugin based on libsidplay (GPL - only built if gpl option is also enabled!)')\noption('x264', type : 'feature', value : 'auto', description : 'H.264 video encoder plugin based on libx264 (GPL - only built if gpl option is also enabled!)')\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Arguments for GstValidate Test\nDESCRIPTION: Example showing how to configure the arguments for the gst-validate tool in a .validatetest file. This includes specifying the pipeline description and additional command-line parameters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-test-file.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# This is the default tool so it is not mandatory for the `gst-validate` tool\ntool = \"gst-validate-$(gst_api_version)\",\nargs = {\n    # pipeline description\n    videotestrc num-buffers=2 ! $(videosink),\n    # Random extra argument\n    --set-media-info $(test-dir)/some.media_info\n}\n```\n\n----------------------------------------\n\nTITLE: Packaging GStreamer using Cerbero - Shell\nDESCRIPTION: Uses the Cerbero tool to build and package all components of the GStreamer multimedia framework into distribution-specific packages. Inputs include the configured Cerbero environment and desired target (default is the current platform). Output packages are placed in the Cerbero source directory. Requires previous successful bootstrap.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ./cerbero-uninstalled package gstreamer-1.0\\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning Cerbero Repository - Shell\nDESCRIPTION: Clones the Cerbero build aggregator's Git repository using git. This is the initial step for acquiring Cerbero's source code in order to build GStreamer and related packages. No dependencies except for having Git installed; the output is a new \\\"cerbero\\\" directory containing the build scripts.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ git clone https://gitlab.freedesktop.org/gstreamer/cerbero\\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing Seek Frame in ID3v2\nDESCRIPTION: Defines the structure for the 'Seek' frame (SEEK) in ID3v2 tags. This frame indicates where other tags in a file or stream can be found, providing the minimum offset to the next tag.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n<Header for 'Seek frame', ID: \"SEEK\">\nMinimum offset to next tag       $xx xx xx xx\n```\n\n----------------------------------------\n\nTITLE: Using gst-inspect-1.0 with audiotestsrc Element\nDESCRIPTION: Example command showing how to use gst-inspect-1.0 to get detailed information about the audiotestsrc element in GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-inspect.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-inspect-1.0 audiotestsrc\n```\n\n----------------------------------------\n\nTITLE: Specifying NumPy Dependency for audioplot and py_audiotestsrc Plugins (Requirements)\nDESCRIPTION: This snippet indicates that both the `audioplot` and `py_audiotestsrc` GStreamer plugins depend on the NumPy library, requiring version 1.14.5 or greater. NumPy provides fundamental tools for numerical computation, essential for audio signal processing in these plugins.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-python/examples/requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# audioplot and py_audiotestsrc plugins\nnumpy >= 1.14.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Options for Plugins Without External Dependencies (Python)\nDESCRIPTION: Declares Meson build options of type 'feature' set to 'auto' for plugins that do not require external dependencies, such as 'asfdemux', 'dvdlpcmdec', 'dvdsub', and 'realmedia'. Meson uses these options to determine whether to include each plugin in the build. These options do not require additional prerequisites and provide a convenient toggle for developers.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-ugly/meson_options.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noption('asfdemux', type : 'feature', value : 'auto')\noption('dvdlpcmdec', type : 'feature', value : 'auto')\noption('dvdsub', type : 'feature', value : 'auto')\noption('realmedia', type : 'feature', value : 'auto')\n```\n\n----------------------------------------\n\nTITLE: Inspecting Executable Dependencies with otool (Framework Link)\nDESCRIPTION: This shell command utilizes the `otool -L` utility to display the dynamic shared libraries that the `main` executable depends on. This specific example checks the executable created by linking directly against the GStreamer framework, verifying it points to `GStreamer.framework` via `@rpath`.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-mac-osx.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ otool -L main\nmain:\n        @rpath/GStreamer.framework/Versions/1.0/lib/GStreamer (compatibility version 0.0.0, current version 0.0.0)\n        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.100.3)\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Root Directory for Android ABI in CMake\nDESCRIPTION: This snippet determines the GStreamer root directory based on the Android ABI. It sets the GSTREAMER_ROOT variable to the appropriate path for the target architecture.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/playback/player/android/app/src/main/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID_ABI STREQUAL \"armeabi\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm\")\nelseif(ANDROID_ABI STREQUAL \"armeabi-v7a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/armv7\")\nelseif(ANDROID_ABI STREQUAL \"arm64-v8a\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/arm64\")\nelseif(ANDROID_ABI STREQUAL \"x86\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86\")\nelseif(ANDROID_ABI STREQUAL \"x86_64\")\n    set(GSTREAMER_ROOT \"${GSTREAMER_ROOT_ANDROID}/x86_64\")\nelse()\n    message(FATAL_ERROR \"Target arch ABI not supported: ${ANDROID_ABI}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Common Build Options and GLib Debugging Features (Python)\nDESCRIPTION: Provides Meson options for package metadata, documentation enablement, and GLib debug infrastructure. Includes toggles for GLib assertions and checks, with options for deprecation metadata for backward compatibility. Options can be set to booleans or features, and are used to control debug and runtime safety in GLib components. Deprecated options map to their replacements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-ugly/meson_options.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\noption('package-name', type : 'string', yield : true,\n       description : 'package name to use in plugins')\noption('package-origin', type : 'string', value : 'Unknown package origin', yield: true,\n       description : 'package origin URL to use in plugins')\noption('doc', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable documentation.')\noption('glib_debug', type : 'feature', value : 'auto', yield : true, description : 'Enable GLib debug infrastructure (see docs/macros.txt)')\noption('glib_assert', type : 'boolean', value : true, yield : true, description : 'Enable GLib assertion (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\noption('glib_checks', type : 'boolean', value : true, yield : true, description : 'Enable GLib checks such as API guards (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\n```\n\n----------------------------------------\n\nTITLE: Bypassing pre-commit Hooks during Git Commit (Bash)\nDESCRIPTION: Creates a Git commit while skipping the execution of any configured pre-commit or commit-msg hooks using the `--no-verify` flag. This is generally discouraged as the Continuous Integration (CI) system will still perform these checks later.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/contribute/index.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --no-verify\n```\n\n----------------------------------------\n\nTITLE: Configuring GstPushSrc for Time-Based Seeking in C\nDESCRIPTION: This snippet shows how to configure a GstPushSrc-derived element for time-based seeking. It sets the format of the base source to GST_FORMAT_TIME, which is necessary for proper seeking functionality.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/trickmodes.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngst_base_src_set_format (src, GST_FORMAT_TIME);\n```\n\n----------------------------------------\n\nTITLE: Using Unreffed Relationship in GStreamer\nDESCRIPTION: Shows how to safely access and use an object in an unreffed relationship by acquiring the appropriate lock, referencing the object, and properly cleaning up afterwards.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/relations.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nLOCK (object1);\nobject2 = _ref (object1->refpointer);\nUNLOCK (object1);\n\n.. use object2 ..\n_unref (object2);\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Feature Option in Meson\nDESCRIPTION: Defines a Meson build option named 'doc' of type 'feature'. It defaults to 'auto', yields its value for subprojects, and has a description. This option controls whether the project documentation should be built.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_6\n\nLANGUAGE: meson\nCODE:\n```\noption('doc', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable documentation.')\n```\n\n----------------------------------------\n\nTITLE: Setting Log Callback in C\nDESCRIPTION: Sets up a callback function to be called when the library reports work progress or errors.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nvoid liq_set_log_callback(liq_attr*, liq_log_callback_function*, void *user_info);\n```\n\nLANGUAGE: c\nCODE:\n```\nvoid log_callback_function(const liq_attr*, const char *message, void *user_info) {}\n```\n\n----------------------------------------\n\nTITLE: Finding Memory Allocation Patterns in GStreamer Source Code with Shell Commands\nDESCRIPTION: A series of shell commands that search the GStreamer codebase to count occurrences of different memory allocation functions. The results show that potentially unsafe allocation functions (g_malloc, g_new) are used extensively while safer alternatives (g_try_malloc, g_try_new) are rarely used, which could lead to crashes on embedded platforms.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/ensonic/embedded.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ find . -name \"*.c\" -exec grep \"g_malloc\" {} \\; | wc -l\n190\n$ find . -name \"*.c\" -exec grep \"g_try_malloc\" {} \\; | wc -l\n0\n$ find . -name \"*.c\" -exec grep \"g_new\" {} \\; | wc -l\n398\n$ find . -name \"*.c\" -exec grep \"g_try_new\" {} \\; | wc -l\n3\n```\n\n----------------------------------------\n\nTITLE: JNI Environment Retrieval in C\nDESCRIPTION: Function to get the JNI environment for the current thread. If not already attached, it attaches the thread and stores the environment in thread-local storage.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_32\n\nLANGUAGE: c\nCODE:\n```\nstatic JNIEnv *get_jni_env (void) {\n  JNIEnv *env;\n  if ((env = pthread_getspecific (current_jni_env)) == NULL) {\n    env = attach_current_thread ();\n    pthread_setspecific (current_jni_env, env);\n  }\n  return env;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Defined URL Link Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of a WXXX frame for custom URL links in ID3v2 tags. The frame includes a header, text encoding byte, description field, and the URL string, which is always encoded in ISO-8859-1.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n<Header for 'User defined URL link frame', ID: \"WXXX\">\nText encoding    $xx\nDescription    <text string according to encoding> $00 (00)\nURL    <text string>\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated GLib Asserts Option in Meson\nDESCRIPTION: Defines a deprecated Meson build option named 'glib-asserts' of type 'feature'. It defaults to 'enabled', yields its value, and provides a description. It is explicitly marked as deprecated in favor of the 'glib_assert' option. This option previously controlled GLib assertions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_11\n\nLANGUAGE: meson\nCODE:\n```\noption('glib-asserts', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib assertion (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_assert')\n```\n\n----------------------------------------\n\nTITLE: Location of GStreamer VS Property Sheets\nDESCRIPTION: Specifies the directory containing the GStreamer property sheets (x86.props, x86_64.props) relative to the GStreamer installation root environment variable (%GSTREAMER_ROOT_X86%). This path is specific to Visual Studio 2010.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n%GSTREAMER_ROOT_X86%\\share\\vs\\2010\\msvc\n```\n\n----------------------------------------\n\nTITLE: Deprecated: Enabling GLib Checks (Feature Type) in Meson\nDESCRIPTION: Defines a deprecated Meson feature option 'glib-checks' for enabling GLib checks like API guards. It's now superseded by the boolean option 'glib_checks'. Kept for backward compatibility.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_24\n\nLANGUAGE: meson\nCODE:\n```\noption('glib-checks', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib checks such as API guards (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_checks')\n```\n\n----------------------------------------\n\nTITLE: Timeshift Buffering Pipeline Structure\nDESCRIPTION: ASCII diagram showing the timeshift buffering pipeline structure with a file ringbuffer for cached streaming data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/advanced/buffering.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      +---------+     +---------+     +-------+\n      | httpsrc |     | buffer  |     | demux |\n      |        src - sink      src - sink     ....\n      +---------+     +----|----+     +-------+\n                           V\n                       file-ringbuffer\n\n```\n\n----------------------------------------\n\nTITLE: Acquiring Buffer from GStreamer Bufferpool\nDESCRIPTION: Function call to acquire a buffer from a GStreamer bufferpool. Returns a writable buffer with a reference to the pool.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/bufferpool.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nres = gst_buffer_pool_acquire_buffer (pool, &buffer, &params);\n```\n\n----------------------------------------\n\nTITLE: Getting Minimum Quality in libimagequant\nDESCRIPTION: Returns the minimum quality bound previously set by liq_set_quality().\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nint liq_get_min_quality(liq_attr* attr);\n```\n\n----------------------------------------\n\nTITLE: Inspecting GStreamer Plugin License using gst-inspect-1.0\nDESCRIPTION: This shell command utilizes the `gst-inspect-1.0` tool to retrieve and display detailed information about a specific GStreamer plugin. The primary context provided is using this command to check the 'License' field within the output to determine the effective license of the plugin. The placeholder `<plugin name>` must be substituted with the actual name of the plugin to be inspected. Requires GStreamer core utilities to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/general.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngst-inspect-1.0 <plugin name>\n```\n\n----------------------------------------\n\nTITLE: Building Full GStreamer API Documentation (Bash)\nDESCRIPTION: Commands to build the complete GStreamer API documentation using the multi-repo build system. Includes steps to build and open the generated HTML documentation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeson build/\n./gst-env ninja -C build subprojects/gst-docs/GStreamer-doc\n```\n\nLANGUAGE: bash\nCODE:\n```\ngio open build/subprojects/gst-docs/GStreamer-doc/html/index.html\n```\n\nLANGUAGE: bash\nCODE:\n```\nninja -C build gst-docs@@release\n```\n\n----------------------------------------\n\nTITLE: Defining Equalisation Frame Format in ID3v2\nDESCRIPTION: Specifies the EQUA (Equalisation) frame format in ID3v2 tags, which allows users to predefine an equalization curve within the audio file, with adjustment bits and frequency information for each band.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n  <Header of 'Equalisation', ID: \"EQUA\">\n  Adjustment bits $xx\n```\n\n----------------------------------------\n\nTITLE: Printing Pipeline Statistics On Exit (Shell)\nDESCRIPTION: Configures GStreamer to collect runtime statistics and resource usage during pipeline execution, saving logs to a file, and then post-processes the log with the gst-stats tool. `GST_DEBUG` and `GST_TRACERS` activate stats and rusage tracers, and `GST_DEBUG_FILE` specifies an output logger. Requires gst-launch-1.0 and gst-stats-1.0 tools with tracing plugins enabled. Output is a human-readable statistical summary from the generated trace.log file.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nGST_DEBUG=\\\"GST_TRACER:7\\\" GST_TRACERS=\\\"stats;rusage\\\" \\\\\nGST_DEBUG_FILE=trace.log gst-launch-1.0 fakesrc num-buffers=10 \\\\\nsizetype=fixed ! queue ! fakesink && gst-stats-1.0 trace.log\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Image with Callback in C\nDESCRIPTION: Creates an image object using a callback function to read image data. Allows for on-the-fly conversion of images not in RGBA color space.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_24\n\nLANGUAGE: c\nCODE:\n```\nliq_image *liq_image_create_custom(liq_attr *attr, liq_image_get_rgba_row_callback *row_callback, void *user_info, int width, int height, double gamma);\n```\n\nLANGUAGE: c\nCODE:\n```\nvoid image_get_rgba_row_callback(liq_color row_out[], int row_index, int width, void *user_info) {\n    for(int column_index=0; column_index < width; column_index++) {\n        row_out[column_index] = /* generate pixel at (row_index, column_index) */;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running GStreamer Player App on Android Device\nDESCRIPTION: This command uses ADB to launch the GStreamer player app on an Android device and play a specific video file from a URL.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/playback/player/android/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ adb shell am start -n org.freedesktop.gstreamer.play/.Play http://ftp.nluug.nl/pub/graphics/blender/demo/movies/Sintel.2010.720p.mkv\n```\n\n----------------------------------------\n\nTITLE: Setting Inpoint When Adding a Clip\nDESCRIPTION: Command to add a clip with a specific inpoint, playing from 4 seconds into the media until the end.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/ges-launch.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nges-launch-1.0 +clip /path/to/media inpoint=4.0\n```\n\n----------------------------------------\n\nTITLE: Linking GStreamer Vulkan Library Note\nDESCRIPTION: Documentation note explaining how to link against the GStreamer Vulkan library using version-specific flags and libraries. The API is explicitly marked as unstable for developer awareness.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/vulkan/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Vulkan Library\n\nThis library should be linked to by getting cflags and libs from\ngstreamer-vulkan-{{ gst_api_version.md }}\n\n> NOTE: This library API is considered *unstable*\n```\n\n----------------------------------------\n\nTITLE: Visualizing HLS/DASH Upstream Selection with GStreamer decodebin3 (After Switch)\nDESCRIPTION: This ASCII diagram shows the GStreamer pipeline state after an upstream stream switch (e.g., selecting Korean audio) in an HLS/DASH scenario. `hlsdemux2` now outputs the video and Korean audio streams (`audio-kor`) to the same `decodebin3` input pads for processing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/stream-selection.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n  +-----------+               + decodebin3 -----------------------------+\n  | hlsdemux2 |               |                                         |\n  |           |               |             +------------+              |\n  |           +-   `video`   -+-[parsebin]--+ multiqueue +--[videodec]--[\n  |           +- `audio-kor` -+-[parsebin]--+------------+--[audiodec]--[\n  |           |               |                                         |\n  +-----------+               +-----------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Updating Color Balance Channel Values in GStreamer\nDESCRIPTION: A function that modifies a specific color balance channel's value by a percentage of its range. It first locates the requested channel, then increases or decreases its value while ensuring it stays within the valid range.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/color-balance.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* Process a color balance command */\nstatic void update_color_channel (const gchar *channel_name, gboolean increase, GstColorBalance *cb) {\n  gdouble step;\n  gint value;\n  GstColorBalanceChannel *channel = NULL;\n  const GList *channels, *l;\n\n  /* Retrieve the list of channels and locate the requested one */\n  channels = gst_color_balance_list_channels (cb);\n  for (l = channels; l != NULL; l = l->next) {\n    GstColorBalanceChannel *tmp = (GstColorBalanceChannel *)l->data;\n\n    if (g_strrstr (tmp->label, channel_name)) {\n      channel = tmp;\n      break;\n    }\n  }\n  if (!channel)\n    return;\n\n  /* Change the channel's value */\n  step = 0.1 * (channel->max_value - channel->min_value);\n  value = gst_color_balance_get_value (cb, channel);\n  if (increase) {\n    value = (gint)(value + step);\n    if (value > channel->max_value)\n      value = channel->max_value;\n  } else {\n    value = (gint)(value - step);\n    if (value < channel->min_value)\n      value = channel->min_value;\n  }\n  gst_color_balance_set_value (cb, channel, value);\n}\n```\n\n----------------------------------------\n\nTITLE: Corrupting Socket Receive in GStreamer\nDESCRIPTION: Simulates socket receive corruption for testing purposes. Requires errno and port specification with optional corruption frequency.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_39\n\nLANGUAGE: validate-scenario\nCODE:\n```\ncorrupt-socket-recv,\n    errno=(string),\n    port=(int),\n    [times=(int)],\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Cloning Meson repository for cross-compilation setup\nDESCRIPTION: Clone the Meson repository to use its predefined cross-compilation files for MinGW/Wine setup.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/mesonbuild/meson.git\n```\n\n----------------------------------------\n\nTITLE: Linked Information Frame Structure\nDESCRIPTION: Defines the frame structure for linked information, including frame identifier, URL and additional data fields.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_30\n\nLANGUAGE: plain\nCODE:\n```\nFrame identifier        $xx xx xx\nURL                     <text string> $00\nID and additional data  <text string(s)>\n```\n\n----------------------------------------\n\nTITLE: Processing Buffering Ranges\nDESCRIPTION: Retrieves and processes buffering ranges to generate a visual representation of download progress using dashes in a text-based UI.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/progressive-streaming.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nn_ranges = gst_query_get_n_buffering_ranges (query);\nfor (range = 0; range < n_ranges; range++) {\n  gint64 start, stop;\n  gst_query_parse_nth_buffering_range (query, range, &start, &stop);\n  start = start * GRAPH_LENGTH / (stop - start);\n  stop = stop * GRAPH_LENGTH / (stop - start);\n  for (i = (gint)start; i < stop; i++)\n    graph [i] = '-';\n}\n```\n\n----------------------------------------\n\nTITLE: GstQuery API Changes in GStreamer 1.0\nDESCRIPTION: Shows renamed functions for GstQuery operations. Queries are now boxed types derived from GstMiniObject, with changes to format handling and parameter passing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ngst_query_new_custom() /* Replaces gst_query_new_application() */\ngst_query_parse_n_formats() /* Replaces gst_query_parse_formats_length() */\ngst_query_parse_nth_format() /* Replaces gst_query_parse_formats_nth() */\ngst_pad_query_position() /* No longer uses inout parameter for format */\ngst_pad_query_duration() /* No longer uses inout parameter for format */\ngst_pad_query_convert() /* No longer uses inout parameter for format */\n```\n\n----------------------------------------\n\nTITLE: Play Library Status Note\nDESCRIPTION: Markdown header and note indicating the library name and unstable API status.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/play/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Play Library\n\n> NOTE: This library API is considered *unstable*\n```\n\n----------------------------------------\n\nTITLE: Finalizing Native Surface and GStreamer State in C\nDESCRIPTION: This function, gst_native_surface_finalize, is called via JNI when the Android surface associated with the native window is destroyed. It retrieves the custom data, tells the GStreamer video sink to release the window handle by setting it to NULL, sets the pipeline state back to READY to stop rendering, releases the ANativeWindow reference, and marks GStreamer as uninitialized.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/video.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstatic void gst_native_surface_finalize (JNIEnv *env, jobject thiz) {\n  CustomData *data = GET_CUSTOM_DATA (env, thiz, custom_data_field_id);\n  if (!data) return;\n  GST_DEBUG (\"Releasing Native Window %p\", data->native_window);\n\n  if (data->video_sink) {\n    gst_video_overlay_set_window_handle (GST_VIDEO_OVERLAY (data->video_sink), (guintptr)NULL);\n    gst_element_set_state (data->pipeline, GST_STATE_READY);\n  }\n\n  ANativeWindow_release (data->native_window);\n  data->native_window = NULL;\n  data->initialized = FALSE;\n}\n```\n\n----------------------------------------\n\nTITLE: Suggested Order for Element Klass Definition in GStreamer\nDESCRIPTION: This snippet outlines the suggested order for defining element classes in GStreamer, combining functional, media type, and extra feature categories.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/draft-klass.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n<functional>[/<media type>]*[/<extra...>]*\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Redirect Configuration\nDESCRIPTION: YAML frontmatter block that defines a redirect from the current page to 'gst-validate-flow.md'. This is commonly used in static site generators to handle page redirections.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/plugins/validateflow.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nredirect: gst-validate-flow.md\n...\n```\n\n----------------------------------------\n\nTITLE: Defining a GStreamer Core Codecs Package - Python\nDESCRIPTION: This Python snippet provides a practical example of how to define a package using Cerbero's packaging system. The `Package` class extends Cerbero's package base class, specifying all required and optional attributes, including name, descriptions, version, URL, license, vendor, dependencies, and file lists for runtime, development, and different supported platforms. Dependencies include the Cerbero build system and predefined enums and base classes (like `package.Package`, `License`, and `Platform`). Key parameters: lists such as `files` and `files_devel` determine which binaries and supporting files are bundled; platform-specific files are handled in `platform_files`. Inputs are the various attributes set in the class; outputs are the package artifacts Cerbero produces for distribution. Limitations: This is a template—actual usage may require class customization.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/multiplatform-using-cerbero.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"class Package(package.Package):\\n\\n    name = 'gstreamer-1.0-codecs'\\n    shortdesc = 'GStreamer 1.0 codecs'\\n    longdesc = 'GStreamer 1.0 codecs'\\n    version = '1.9.0.1'\\n    url = \\\"http://gstreamer.freedesktop.org\\\"\\n    license = License.LGPL\\n    vendor = 'GStreamer Project'\\n    org = 'org.freedesktop.gstreamer'\\n    uuid = 'a2e545d5-7819-4636-9e86-3660542f08e5'\\n    deps = ['gstreamer-1.0-core', 'base-crypto']\\n\\n    files = ['flac:libs', 'libkate:libs', 'libdv:libs',\\n            'libogg:libs', 'schroedinger:libs', 'speex:libs',\\n            'libtheora:libs', 'wavpack:libs', 'libvpx:libs',\\n            'taglib:libs', 'opus:libs', 'libvorbis:libs',\\n            'openjpeg:libs', 'openh264:libs', 'spandsp:libs',\\n            'gst-plugins-base-1.0:plugins_codecs',\\n            'gst-plugins-good-1.0:plugins_codecs',\\n            'gst-plugins-bad-1.0:plugins_codecs',\\n            'gst-plugins-ugly-1.0:plugins_codecs']\\n    files_devel = ['gst-plugins-base-1.0-static:plugins_codecs_devel',\\n            'gst-plugins-good-1.0-static:plugins_codecs_devel',\\n            'gst-plugins-bad-1.0-static:plugins_codecs_devel',\\n            'gst-plugins-ugly-1.0-static:plugins_codecs_devel',\\n            'gst-plugins-bad-1.0-static:codecs_devel']\\n    platform_files = {\\n            Platform.ANDROID: ['tremor:libs'],\\n            Platform.IOS: ['tremor:libs']\\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Linking a C Program with libimagequant using GCC (Unix)\nDESCRIPTION: This command demonstrates how to compile and link a C program (`yourprogram.c`) against the pre-compiled `libimagequant.a` static library using GCC. The user needs to replace `/path/to/lib/libimagequant.a` with the actual path to the built library file. Requires GCC and the compiled library.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcc yourprogram.c /path/to/lib/libimagequant.a\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Qt GStreamer Project\nDESCRIPTION: CMake configuration file that sets up the build environment for a Qt GStreamer application. Finds required packages and sets up compilation flags and dependencies.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/using-appsink-appsrc-in-qt.md#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qtgst-example-appsink-src)\nfind_package(QtGStreamer REQUIRED)\nfind_package(Qt4 REQUIRED)\ninclude_directories(${QTGSTREAMER_INCLUDES} ${QT_QTCORE_INCLUDE_DIRS})\nadd_definitions(${QTGSTREAMER_DEFINITIONS})\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${QTGSTREAMER_FLAGS}\")\nadd_executable(appsink-src main.cpp)\ntarget_link_libraries(appsink-src ${QTGSTREAMER_UTILS_LIBRARIES} ${QT_QTCORE_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: DXVA Library Documentation in Markdown\nDESCRIPTION: Documentation header for DXVA library explaining its purpose and stability status.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/dxva/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# DXVA library\n\nThis library consists of baseclasses for DXVA (DirectX Video Acceleration) decoders.\n\n> NOTE: This library API is considered *unstable*\n```\n\n----------------------------------------\n\nTITLE: Visualizing a GStreamer Ogg Demuxer Element\nDESCRIPTION: ASCII diagram showing the structure of an ogg demuxer element in GStreamer. It illustrates a single sink pad for input and two source pads for output.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n +-----------+\n | oggdemux  |\n |          src0\nsink        src1\n +-----------+\n```\n\n----------------------------------------\n\nTITLE: ABGR64_LE Format Specification in GStreamer\nDESCRIPTION: Defines the ABGR64_LE format with alpha channel first and reverse RGB order, using 16 bits per channel in little-endian byte order. Includes pixel layout and component specifications with their respective depth, stride, and offset values.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_59\n\nLANGUAGE: text\nCODE:\n```\n       +--+--+--+--+ +--+--+--+--+\n       |A0|B0|G0|R0| |A1|B1|G1|R1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           16 LE\n          pstride:         8\n          offset:          6\n\n        Component 1: G\n          depth            16 LE\n          pstride:         8\n          offset:          4\n\n        Component 2: B\n          depth:           16 LE\n          pstride:         8\n          offset:          2\n\n        Component 3: A\n          depth:           16 LE\n          pstride:         8\n          offset:          0\n\n        Image\n          default rstride: width * 8\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Moving All Merge Requests\nDESCRIPTION: Command to run the migration script without parameters to interactively move all merge requests belonging to the user.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/mono-repository.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGITLAB_API_TOKEN=zytXYboB5yi3uggRpBM6 ./scripts/move_mrs_to_monorepo.py\n```\n\n----------------------------------------\n\nTITLE: Checking Pipeline Initialization and Notifying Java Layer (C)\nDESCRIPTION: Implements 'check_initialization_complete', checking if all requirements (esp. non-null main_loop and not yet initialized) are met, then notifies the Java layer via a callback. Handles any Java exceptions and updates the CustomData's initialized flag. Useful for synchronizing UI with the completion of native pipeline setup.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nstatic void check_initialization_complete (CustomData *data) {\n  JNIEnv *env = get_jni_env ();\n  if (!data->initialized && data->main_loop) {\n    GST_DEBUG (\"Initialization complete, notifying application. main_loop:%p\", data->main_loop);\n    (*env)->CallVoidMethod (env, data->app, on_gstreamer_initialized_method_id);\n    if ((*env)->ExceptionCheck (env)) {\n      GST_ERROR (\"Failed to call Java method\");\n      (*env)->ExceptionClear (env);\n    }\n    data->initialized = TRUE;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header for GStreamer Analytics Library\nDESCRIPTION: Documentation header indicating this is an analytics metadata library with a stability warning note.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/analytics/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Analytics metadata library\n\n> NOTE: This library API is considered *unstable*\n```\n\n----------------------------------------\n\nTITLE: Logging GStreamer Initialization Completion in Android (Java)\nDESCRIPTION: This is the beginning of the `onGStreamerInitialized` method, which is designed to be called back from the native code once the GStreamer pipeline and main loop are ready. This specific line logs a message indicating that GStreamer initialization is complete and that the Activity is now restoring the desired playback state based on the `is_playing_desired` flag.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate void onGStreamerInitialized () {\n    Log.i (\"GStreamer\", \"Gst initialized. Restoring state, playing:\" + is_playing_desired);\n```\n\n----------------------------------------\n\nTITLE: Writing Remapped Image Rows in C\nDESCRIPTION: Writes a remapped image to row pointers, with each pixel represented by 1 byte. Useful for efficient image data manipulation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_26\n\nLANGUAGE: c\nCODE:\n```\nliq_error liq_write_remapped_image_rows(liq_result *result, liq_image *input_image, unsigned char **row_pointers);\n```\n\n----------------------------------------\n\nTITLE: GstBus Pipeline States\nDESCRIPTION: GStreamer pipeline state transitions involving READY and NULL states that affect bus message handling, particularly regarding message flushing behavior.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstbus.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nREADY\nNULL\n```\n\n----------------------------------------\n\nTITLE: Creating the Android Activity class with GStreamer integration in Java\nDESCRIPTION: The main Activity class that initializes GStreamer, loads the native libraries, and calls a native method to retrieve GStreamer version information. It demonstrates the Java side of the JNI bridge to access GStreamer functionality.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/link-against-gstreamer.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.freedesktop.gstreamer.tutorials.tutorial_1;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport org.freedesktop.gstreamer.GStreamer;\n\npublic class Tutorial1 extends Activity {\n    private native String nativeGetGStreamerInfo();\n\n    // Called when the activity is first created.\n    @Override\n    public void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n\n        try {\n            GStreamer.init(this);\n        } catch (Exception e) {\n            Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();\n            finish();\n            return;\n        }\n\n        setContentView(R.layout.main);\n\n        TextView tv = (TextView)findViewById(R.id.textview_info);\n        tv.setText(\"Welcome to \" + nativeGetGStreamerInfo() + \" !\");\n    }\n\n    static {\n        System.loadLibrary(\"gstreamer_android\");\n        System.loadLibrary(\"tutorial-1\");\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: GstObject Name Management Functions\nDESCRIPTION: Function references for managing object names and prefixes in GstObject\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/gstobject.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nset_name()`, `gst_element_add_pad()`/`gst_bin_add_element()`, `gst_object_set_name()\n```\n\n----------------------------------------\n\nTITLE: GStreamer Identity Element Pipeline\nDESCRIPTION: Shows the usage of identity element with buffer dropping probability for diagnostic purposes in an audio pipeline.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 audiotestsrc ! identity drop-probability=0.1 ! audioconvert ! autoaudiosink\n```\n\n----------------------------------------\n\nTITLE: Parsing Signature Frame in ID3v2\nDESCRIPTION: Defines the structure for the 'Signature' frame (SIGN) in ID3v2 tags. This frame enables a group of frames to be signed with a digital signature for verification purposes.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n<Header for 'Signature frame', ID: \"SIGN\">\nGroup symbol      $xx\nSignature         <binary data>\n```\n\n----------------------------------------\n\nTITLE: Illustrating GStreamer Metadata Flow\nDESCRIPTION: This ASCII diagram illustrates the flow of metadata in GStreamer, showing how tag events are passed from demuxers to downstream elements and how applications interact with muxers using the GstTagSetter interface.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/draft-metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n +----------+\n | demux    |\nsink       src --> GstEvent(tag) over GstPad to downstream element\n +----------+\n\n           method call over GstTagSetter interface from application\n                                                          |\n                                                          v\n                                                    +----------+\n                                                    | mux      |\nGstEvent(tag) over GstPad from upstream element --> sink       src\n                                                    +----------+\n```\n\n----------------------------------------\n\nTITLE: Cloning LCEVC Decoder SDK Repository - Shell\nDESCRIPTION: This snippet provides commands to locally clone the V-Nova LCEVC Decoder SDK repository and change into its directory, which is a prerequisite for building the decoder SDK and GStreamer plugin. No external dependencies beyond Git are needed for cloning. The repository URL is specified, and the user is navigated into the source folder. Inputs: none; Output: LCEVCdec source code in a local directory.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/ext/lcevcdecoder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/v-novaltd/LCEVCdec.git\n$ cd LCEVCdec\n```\n\n----------------------------------------\n\nTITLE: Configuring Media SDK Plugin Options in Meson\nDESCRIPTION: Defines an option to select which Media Framework eXtensions (MFX) API to build against - Intel Media SDK (MSDK), oneVPL, or automatic selection.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_14\n\nLANGUAGE: meson\nCODE:\n```\n# MSDK plugin options\noption('mfx_api', type : 'combo', choices : ['MSDK', 'oneVPL', 'auto'], value : 'auto',\n       description : 'Select MFX API to build against')\n```\n\n----------------------------------------\n\nTITLE: Specifying Y41B Format in GStreamer\nDESCRIPTION: Defines the structure of the Y41B format, a planar 4:1:1 YUV format. It details the component depths, strides, offsets, and memory layout for Y, U, and V components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * height\n\n        Component 1: U\n          depth            8\n          pstride:         1\n          default offset:  size (component0)\n          default rstride: RU16 (width) / 4\n          default size:    rstride (component1) * height\n\n        Component 2: V\n          depth:           8\n          pstride:         1\n          default offset:  offset (component1) + size (component1)\n          default rstride: RU16 (width) / 4\n          default size:    rstride (component2) * height\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n```\n\n----------------------------------------\n\nTITLE: Defining Audio Encryption (AENC) Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the AENC frame used to indicate if the audio stream is encrypted. The frame includes an owner identifier URL, preview start/length information, and optional binary encryption data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_20\n\nLANGUAGE: Binary\nCODE:\n```\n<Header for 'Audio encryption', ID: \"AENC\">\nOwner identifier   <text string> $00\nPreview start      $xx xx\nPreview length     $xx xx\nEncryption info    <binary data>\n```\n\n----------------------------------------\n\nTITLE: Specifying Y444 Format in GStreamer\nDESCRIPTION: Defines the structure of the Y444 format, a planar 4:4:4 YUV format. It details the component depths, strides, offsets, and memory layout for Y, U, and V components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * height\n\n        Component 1: U\n          depth            8\n          pstride:         1\n          default offset:  size (component0)\n          default rstride: RU4 (width)\n          default size:    rstride (component1) * height\n\n        Component 2: V\n          depth:           8\n          pstride:         1\n          default offset:  offset (component1) + size (component1)\n          default rstride: RU4 (width)\n          default size:    rstride (component2) * height\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n```\n\n----------------------------------------\n\nTITLE: Managing Color Balance Values in GStreamer\nDESCRIPTION: Shows how to get and set color balance channel values using GStreamer's color balance interface functions\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/color-balance.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ngst_color_balance_get_value()\ngst_color_balance_set_value()\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Hardware Accelerated Decoding Elements in GStreamer\nDESCRIPTION: This function allows enabling or disabling specific hardware-accelerated decoder elements by modifying their rank in the GStreamer registry. Setting an element's rank to PRIMARY+1 makes it preferred over other elements, while setting it to NONE prevents it from being auto-selected.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/hardware-accelerated-video-decoding.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic void enable_factory (const gchar *name, gboolean enable) {\n    GstRegistry *registry = NULL;\n    GstElementFactory *factory = NULL;\n\n    registry = gst_registry_get_default ();\n    if (!registry) return;\n\n    factory = gst_element_factory_find (name);\n    if (!factory) return;\n\n    if (enable) {\n        gst_plugin_feature_set_rank (GST_PLUGIN_FEATURE (factory), GST_RANK_PRIMARY + 1);\n    }\n    else {\n        gst_plugin_feature_set_rank (GST_PLUGIN_FEATURE (factory), GST_RANK_NONE);\n    }\n\n    gst_registry_add_feature (registry, GST_PLUGIN_FEATURE (factory));\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Android GStreamer Pipeline with JNI Bindings\nDESCRIPTION: Setup code for a GStreamer pipeline on Android including necessary header includes, debug category definition, and custom data handling macros for 32/64-bit compatibility.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n#include <string.h>\n#include <jni.h>\n#include <android/log.h>\n#include <gst/gst.h>\n#include <pthread.h>\n\nGST_DEBUG_CATEGORY_STATIC (debug_category);\n#define GST_CAT_DEFAULT debug_category\n\n/*\n * These macros provide a way to store the native pointer to CustomData, which might be 32 or 64 bits, into\n * a jlong, which is always 64 bits, without warnings.\n */\n#if GLIB_SIZEOF_VOID_P == 8\n# define GET_CUSTOM_DATA(env, thiz, fieldID) (CustomData *)(*env)->GetLongField (env, thiz, fieldID)\n# define SET_CUSTOM_DATA(env, thiz, fieldID, data) (*env)->SetLongField (env, thiz, fieldID, (jlong)data)\n#else\n# define GET_CUSTOM_DATA(env, thiz, fieldID) (CustomData *)(jint)(*env)->GetLongField (env, thiz, fieldID)\n```\n\n----------------------------------------\n\nTITLE: Configuring D3D HLSL Precompilation in Meson\nDESCRIPTION: Defines an option to enable or disable build-time HLSL (High-Level Shading Language) compilation for Direct3D 11/12 libraries and plugins.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_9\n\nLANGUAGE: meson\nCODE:\n```\n# D3D11/D3D12 HLSL library options\noption('d3d-hlsl-precompile', type : 'feature', value : 'auto', description : 'Enable buildtime HLSL compile for d3d11/d3d12 library/plugin')\n```\n\n----------------------------------------\n\nTITLE: GL Upload Sink Template\nDESCRIPTION: Sink template capabilities for GL upload element without static drm-format specification.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/dmabuf.md#2025-04-23_snippet_5\n\nLANGUAGE: gstreamer\nCODE:\n```\nSINK template: 'sink'\n    Availability: Always\n      Capabilities:\n        video/x-raw(memory:DMABuf)\n          width:  [ 1, 2147483647 ]\n          height: [ 1, 2147483647 ]\n          format: DMA_DRM\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Qt GStreamer Media Player\nDESCRIPTION: CMake configuration file that sets up the build environment for a Qt GStreamer media player example. It defines the project name and finds the required QtGStreamer package.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/for-later/basic-media-player.md#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qtgst-example-player)\nfind_package(QtGStreamer REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Setting Qt Path Environment Variable (Bash)\nDESCRIPTION: Exports the `PATH` environment variable, prepending the path to the Qt installation's `bin` directory. This ensures that tools like `qmake` from the specified Qt version and platform can be found and executed by the build system. Replace placeholders `<version>` and `<platform>` with actual values.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-good/ext/qt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=/path/to/Qt/<version>/<platform>/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Identifying pkg-config File for GStreamer OpenGL EGL Library\nDESCRIPTION: Specifies the name of the pkg-config (.pc) file used to retrieve compiler (cflags) and linker (libs) flags for the GStreamer OpenGL EGL library. The `{{ gst_api_version.md }}` placeholder should be replaced with the actual GStreamer API version (e.g., 1.0). This file is essential for integrating the library into build systems.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/docs/libs/gl-egl/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngstreamer-gl-egl-{{ gst_api_version.md }}.pc\n```\n\n----------------------------------------\n\nTITLE: Implementing viewDidLayoutSubviews for Aspect Ratio Maintenance\nDESCRIPTION: Method that recalculates the video view size whenever layout changes occur, ensuring the correct aspect ratio is maintained while maximizing either width or height depending on the container's dimensions.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/video.md#2025-04-23_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (void)viewDidLayoutSubviews\n{\n    CGFloat view_width = video_container_view.bounds.size.width;\n    CGFloat view_height = video_container_view.bounds.size.height;\n\n    CGFloat correct_height = view_width * media_height / media_width;\n    CGFloat correct_width = view_height * media_width / media_height;\n\n    if (correct_height < view_height) {\n        video_height_constraint.constant = correct_height;\n        video_width_constraint.constant = view_width;\n    } else {\n        video_width_constraint.constant = correct_width;\n        video_height_constraint.constant = view_height;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Plugin Build Options with Meson\nDESCRIPTION: This snippet defines configuration options for GStreamer plugins that depend on external libraries. Each option uses Meson's option() function to specify the plugin name, type (feature), default value ('auto'), and a description of the plugin's functionality.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/meson_options.txt#2025-04-23_snippet_4\n\nLANGUAGE: meson\nCODE:\n```\n# Feature options for plugins that need external deps\noption('aes', type : 'feature', value : 'auto', description : 'AES encryption/decryption plugin')\noption('aja', type : 'feature', value : 'auto', description : 'AJA audio/video source/sink plugin')\noption('aom', type : 'feature', value : 'auto', description : 'AOM AV1 video codec plugin')\noption('avtp', type : 'feature', value : 'auto', description : 'Audio/Video Transport Protocol (AVTP) plugin')\noption('amfcodec', type : 'feature', value : 'auto', description : 'AMD AMF codec plugin')\noption('analyticsoverlay', type: 'feature', value : 'auto')\noption('androidmedia', type : 'feature', value : 'auto', description : 'Video capture and codec plugins for Android')\noption('applemedia', type : 'feature', value : 'auto', description : 'Video capture and codec access plugins for macOS and iOS')\noption('asio', type : 'feature', value : 'auto', description : 'Steinberg Audio Streaming Input Output (ASIO) plugin')\noption('assrender', type : 'feature', value : 'auto', description : 'ASS/SSA subtitle renderer plugin')\noption('bluez', type : 'feature', value : 'auto', description : 'Bluetooth audio A2DP/AVDTP sink, AVDTP source plugin')\noption('bs2b', type : 'feature', value : 'auto', description : 'Bauer stereophonic-to-binaural audio plugin')\noption('bz2', type : 'feature', value : 'auto', description : 'bz2 stream encoder and decoder plugin')\noption('chromaprint', type : 'feature', value : 'auto', description : 'Chromaprint fingerprint audio plugin')\noption('closedcaption', type : 'feature', value : 'auto', description : 'Closed caption extractor, decoder, and overlay plugin')\noption('codec2json', type : 'feature', value : 'auto')\noption('colormanagement', type : 'feature', value : 'auto', description : 'Color management correction plugin')\noption('curl', type : 'feature', value : 'auto', description : 'cURL network source and sink plugin')\noption('curl-ssh2', type : 'feature', value : 'auto', description : 'cURL network source and sink plugin libssh2 support')\noption('d3dvideosink', type : 'feature', value : 'auto', description : 'Direct3D video sink plugin')\noption('d3d11', type : 'feature', value : 'auto', description : 'Direct3D11 plugin')\noption('d3d12', type : 'feature', value : 'auto', description : 'Direct3D12 plugin')\noption('dash', type : 'feature', value : 'auto', description : 'DASH demuxer plugin')\noption('dc1394', type : 'feature', value : 'auto', description : 'libdc1394 IIDC camera source plugin')\noption('decklink', type : 'feature', value : 'auto', description : 'DeckLink audio/video source/sink plugin')\noption('directfb', type : 'feature', value : 'auto', description : 'DirectFB video sink plugin')\noption('directsound', type : 'feature', value : 'auto', description : 'Directsound audio source plugin')\noption('directshow', type : 'feature', value : 'auto', description : 'Directshow audio/video plugins')\noption('dtls', type : 'feature', value : 'auto', description : 'DTLS encoder and decoder plugin')\noption('dts', type : 'feature', value : 'auto', description : 'DTS audio decoder plugin (GPL - only built if gpl option is also enabled!)')\noption('dvb', type : 'feature', value : 'auto', description : 'DVB video bin and source plugin')\noption('dwrite', type : 'feature', value : 'auto', description : 'DirectWrite plugin')\noption('faac', type : 'feature', value : 'auto', description : 'Free AAC audio encoder plugin')\noption('faad', type : 'feature', value : 'auto', description : 'Free AAC audio decoder plugin (GPL - only built if gpl option is also enabled!)')\noption('fbdev', type : 'feature', value : 'auto', description : 'Framebuffer video sink plugin')\noption('fdkaac', type : 'feature', value : 'auto', description : 'Fraunhofer AAC audio codec plugin')\noption('flite', type : 'feature', value : 'auto', description : 'Flite speech synthesizer source plugin')\noption('fluidsynth', type : 'feature', value : 'auto', description : 'Fluidsynth MIDI decoder plugin')\noption('gl', type : 'feature', value : 'auto', description : 'GStreamer OpenGL integration support (used by various plugins)')\noption('gme', type : 'feature', value : 'auto', description : 'libgme gaming console music file decoder plugin')\noption('gs', type : 'feature', value : 'auto', description : 'Google Cloud Storage source and sink plugin')\noption('gsm', type : 'feature', value : 'auto', description : 'GSM encoder/decoder plugin')\noption('gtk3', type : 'feature', value : 'auto', description : 'GTK+ video sink plugin')\noption('ipcpipeline', type : 'feature', value : 'auto', description : 'Inter-process communication plugin')\noption('iqa', type : 'feature', value : 'auto', description : 'Image quality assessment plugin (AGPL - only built if gpl option is also enabled!)')\noption('kms', type : 'feature', value : 'auto', description : 'KMS video sink plugin')\noption('ladspa', type : 'feature', value : 'auto', description : 'LADSPA plugin bridge')\noption('ladspa-rdf', type : 'feature', value : 'auto', description : 'LADSPA plugin bridge RDF support')\noption('lc3', type : 'feature', value : 'auto', description : 'LC3 (Bluetooth) LE audio codec plugin')\noption('ldac', type : 'feature', value : 'auto', description : 'LDAC bluetooth audio codec plugin')\noption('libde265', type : 'feature', value : 'auto', description : 'HEVC/H.265 video decoder plugin')\noption('openaptx', type : 'feature', value : 'auto', description : 'Open Source implementation of Audio Processing Technology codec (aptX) plugin')\noption('lv2', type : 'feature', value : 'auto', description : 'LV2 audio plugin bridge')\noption('mediafoundation', type : 'feature', value : 'auto', description : 'Microsoft Media Foundation plugin')\noption('microdns', type : 'feature', value : 'auto', description : 'libmicrodns-based device provider')\noption('modplug', type : 'feature', value : 'auto', description : 'ModPlug audio decoder plugin')\noption('mpeg2enc', type : 'feature', value : 'auto', description : 'mpeg2enc video encoder plugin (GPL - only built if gpl option is also enabled!)')\noption('mplex', type : 'feature', value : 'auto', description : 'mplex audio/video multiplexer plugin (GPL - only built if gpl option is also enabled!)')\noption('msdk', type : 'feature', value : 'auto', description : 'Intel Media SDK video encoder/decoder plugin')\noption('musepack', type : 'feature', value : 'auto', description : 'libmpcdec Musepack decoder plugin')\noption('neon', type : 'feature', value : 'auto', description : 'NEON HTTP source plugin')\noption('nvcomp', type : 'feature', value : 'auto', description : 'NVIDIA nvCOMP compression/decompression plugin')\noption('nvcodec', type : 'feature', value : 'auto', description : 'NVIDIA GPU codec plugin')\noption('nvdswrapper', type : 'feature', value : 'auto', description : 'NVIDIA DeepStream SDK wrapper plugin')\noption('onnx', type : 'feature', value : 'auto', description : 'ONNX neural network plugin')\noption('openal', type : 'feature', value : 'auto', description : 'OpenAL plugin')\noption('openexr', type : 'feature', value : 'auto', description : 'OpenEXR plugin')\noption('openh264', type : 'feature', value : 'auto', description : 'H.264 video codec plugin')\noption('openjpeg', type : 'feature', value : 'auto', description : 'JPEG2000 image codec plugin')\noption('openmpt', type : 'feature', value : 'auto', description : 'OpenMPT module music library plugin')\noption('openni2', type : 'feature', value : 'auto', description : 'OpenNI2 library plugin')\noption('opensles', type : 'feature', value : 'auto', description : 'OpenSL ES audio source/sink plugin')\noption('opus', type : 'feature', value : 'auto', description : 'OPUS audio parser plugin')\noption('qroverlay', type : 'feature', value : 'auto', description : 'Element to set random data on a qroverlay')\noption('qsv', type : 'feature', value : 'auto', description : 'Intel Quick Sync Video plugin')\noption('qt6d3d11', type : 'feature', value : 'auto', description : 'Qt6 Direct3D11 plugin')\noption('resindvd', type : 'feature', value : 'auto', description : 'Resin DVD playback plugin (GPL - only built if gpl option is also enabled!)')\noption('rsvg', type : 'feature', value : 'auto', description : 'SVG overlayer and image decoder plugin')\noption('rtmp', type : 'feature', value : 'auto', description : 'RTMP video network source and sink plugin')\noption('sbc', type : 'feature', value : 'auto', description : 'SBC bluetooth audio codec plugin')\noption('sctp', type : 'feature', value : 'auto', description : 'SCTP plugin')\noption('shm', type : 'feature', value : 'auto', description : 'Shared memory source/sink plugin')\noption('smoothstreaming', type : 'feature', value : 'auto', description : 'Microsoft Smooth Streaming demuxer plugin')\noption('sndfile', type : 'feature', value : 'auto', description : 'libsndfile plugin')\noption('soundtouch', type : 'feature', value : 'auto', description : 'Audio pitch controller & BPM detection plugin')\noption('spandsp', type : 'feature', value : 'auto', description : 'Packet loss concealment audio plugin')\noption('srt', type : 'feature', value : 'auto', description : 'Secure, Reliable, Transport client/server network source/sink plugin')\noption('srtp', type : 'feature', value : 'auto', description : 'Secure RTP codec plugin')\noption('svtav1', type : 'feature', value : 'auto', description : 'Scalable Video Technology for AV1 plugin')\noption('svthevcenc', type : 'feature', value : 'auto', description : 'Scalable Video Technology for HEVC encoder plugin')\noption('svtjpegxs', type : 'feature', value : 'auto', description : 'Scalable Video Technology for JPEG-XS plugin')\noption('teletext', type : 'feature', value : 'auto', description : 'Teletext plugin')\noption('tinyalsa', type : 'feature', value : 'auto', description : 'TinyALSA plugin')\noption('transcode', type : 'feature', value : 'auto', description : 'Transcode plugin')\noption('ttml', type : 'feature', value : 'auto', description : 'TTML subtitle parser and renderer plugin')\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Setting for TrackObject in GStreamer\nDESCRIPTION: Pseudocode for setting properties on a TrackObject, which updates the local property and emits a notification.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/random/mapping.txt#2025-04-23_snippet_4\n\nLANGUAGE: pseudocode\nCODE:\n```\nTrackObject set_property(P, V)\n   update the property locally (P = V)\n   emit 'notify::P' signal\n```\n\n----------------------------------------\n\nTITLE: Updated Pad Template Format\nDESCRIPTION: Example of the new pad template naming convention that uses unsigned integers\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/porting-1.0.md#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nsrc%u\nsrc_%u\n```\n\n----------------------------------------\n\nTITLE: Constructing Simple GStreamer Pipeline with gst-launch\nDESCRIPTION: Demonstrates how to use gst-launch to create a basic audio playback pipeline. It reads an MP3 file, decodes it, and plays it through the OSS audio sink.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/programs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch filesrc location=hello.mp3 ! mad ! audioresample ! osssink\n```\n\n----------------------------------------\n\nTITLE: Handling State Change Messages in GStreamer (C)\nDESCRIPTION: This code snippet shows how to handle state change messages in a GStreamer pipeline. It parses the state change message, prints the old and new states, and then prints the current capabilities of the sink element's pad.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-formats-and-pad-capabilities.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ncase GST_MESSAGE_STATE_CHANGED:\n  /* We are only interested in state-changed messages from the pipeline */\n  if (GST_MESSAGE_SRC (msg) == GST_OBJECT (pipeline)) {\n    GstState old_state, new_state, pending_state;\n    gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);\n    g_print (\"\\nPipeline state changed from %s to %s:\\n\",\n        gst_element_state_get_name (old_state), gst_element_state_get_name (new_state));\n    /* Print the current capabilities of the sink element */\n    print_pad_capabilities (sink, \"sink\");\n  }\n  break;\n```\n\n----------------------------------------\n\nTITLE: Specifying BGR16 Format in GStreamer\nDESCRIPTION: Defines the structure of the BGR16 format, a reverse RGB format with 5-6-5 bits per component. It details the component depths and pixel stride for B, G, and R components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/mediatype-video-raw.md#2025-04-23_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\n       +--+--+--+ +--+--+--+\n       |B0|G0|R0| |B1|G1|R1| ...\n       +--+--+--+ +--+--+--+\n\n        Component 0: R\n          depth:           5\n          pstride:         2\n\n        Component 1: G\n          depth            6\n          pstride:         2\n\n        Component 2: B\n          depth:           5\n          pstride:         2\n\n        Image\n          default rstride: RU4 (width * 2)\n          default size:    rstride (image) * height\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Validate Test with YAML\nDESCRIPTION: This snippet demonstrates how to set up the 'configs' field in a GStreamer Validate test file. It shows two configuration examples: setting a property for a specific element and defining caps properties for a pad. The configs are specified as an array of GstStructure syntax strings.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/validate/gst/validate/doc/meta-configs.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigs = {\n    # Set videotestsrc0 pattern value to `blue`\n    \"core, action=set-property, target-element-name=videotestsrc0, property-name=pattern, property-value=blue\",\n    \"$(validateflow), pad=sink1:sink, caps-properties={ width, height };\",\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring CustomData Structure for Callbacks (C)\nDESCRIPTION: This repeated snippet re-declares the CustomData structure, used as a shared container for native references required across callbacks and throughout the application's lifecycle. Its fields are intended for easy and safe sharing of resources between C and Java layers, leveraging GStreamer and JNI.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_25\n\nLANGUAGE: c\nCODE:\n```\n/* Structure to contain all our information, so we can pass it to callbacks */\n```\n\n----------------------------------------\n\nTITLE: Registering Signal Handlers for Tag Updates\nDESCRIPTION: Setting up signal handlers for tag changes in the playbin element. This enables the application to respond when new metadata appears on the stream, such as video, audio, or text tags.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n  /* Connect to interesting signals in playbin */\n  g_signal_connect (G_OBJECT (data.playbin), \"video-tags-changed\", (GCallback) tags_cb, &data);\n  g_signal_connect (G_OBJECT (data.playbin), \"audio-tags-changed\", (GCallback) tags_cb, &data);\n  g_signal_connect (G_OBJECT (data.playbin), \"text-tags-changed\", (GCallback) tags_cb, &data);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GLESv2 Module Name in Meson\nDESCRIPTION: Defines a Meson build option 'gles2_module_name' of type string. It specifies the filename to be used by g_module_open for loading the libGLESv2 library, overriding the default 'libGLESv2'.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_8\n\nLANGUAGE: meson\nCODE:\n```\noption('gles2_module_name', type : 'string', value : '',\n       description : 'The file to pass to g_module_open to open the libGLESv2 library (default: libGLESv2)')\n```\n\n----------------------------------------\n\nTITLE: Enabling libjpeg Use in OpenGL Plugin (Meson)\nDESCRIPTION: Defines a Meson feature option 'gl-jpeg' to control the use of libjpeg within the GStreamer OpenGL plugin, likely for texture handling or hardware-accelerated decoding/encoding. Defaults to 'auto'.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_11\n\nLANGUAGE: meson\nCODE:\n```\noption('gl-jpeg', type : 'feature', value : 'auto', description : 'Use libjpeg in OpenGL plugin')\n```\n\n----------------------------------------\n\nTITLE: Integrating with GConf using Elements in GStreamer 0.10 (C)\nDESCRIPTION: GStreamer 0.10 replaces the `libgstgconf-0.10.la` library with dedicated elements for GConf integration. Applications should use the `gconfvideosink` and `gconfaudiosink` elements, which handle GConf interactions and support live updates without requiring direct library linking.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/porting.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ngconfvideosink\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ngconfaudiosink\n```\n\n----------------------------------------\n\nTITLE: Checking GStreamer Initialization Completion\nDESCRIPTION: Method that verifies if GStreamer initialization is complete and notifies the UI delegate. It checks if the initialized flag is false and the main loop exists before calling the delegate's gstreamerInitialized method.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_12\n\nLANGUAGE: Objective-C\nCODE:\n```\n/* Check if all conditions are met to report GStreamer as initialized.\n * These conditions will change depending on the application */\n-(void) check_initialization_complete\n{\n    if (!initialized && main_loop) {\n        GST_DEBUG (\"Initialization complete, notifying application.\");\n        if (ui_delegate && [ui_delegate respondsToSelector:@selector(gstreamerInitialized)])\n        {\n            [ui_delegate gstreamerInitialized];\n        }\n        initialized = TRUE;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Element and Pad Properties - GStreamer - validate-scenario\nDESCRIPTION: Specifies an action to set properties on elements or pads within the GStreamer pipeline at a specific playback-time. Accepts property definitions using the element[.pad]::property-name syntax. Intended for use in scenarios to configure or alter runtime parameters for elements under test in a controlled fashion.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_20\n\nLANGUAGE: validate-scenario\nCODE:\n```\nset-properties,\\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Empty JavaScript Block in GStreamer Project\nDESCRIPTION: An empty JavaScript code block that appears to be a placeholder in the GStreamer project documentation. No actual code implementation is provided.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/templates/JS.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: GStreamer Core Library File Naming Pattern (Plaintext)\nDESCRIPTION: This pattern represents the filename format for the GStreamer core shared library. The `{{ gst_api_version.md }}` placeholder is intended to be replaced with the specific GStreamer API version (e.g., 1.0) during the build or installation process. This library contains essential GStreamer services.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/gst/gi-index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlibgstreamer-{{ gst_api_version.md }}.so\n```\n\n----------------------------------------\n\nTITLE: Defining Audio Encryption Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the AENC frame which indicates if and how the audio is encrypted. This frame contains owner identifier, preview start/length information, and optional encryption data.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n  <Header for 'Audio encryption', ID: \"AENC\">\n  Owner identifier        <text string> $00\n  Preview start           $xx xx\n  Preview length          $xx xx\n  Encryption info         <binary data>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream Information from Playbin in C\nDESCRIPTION: This code snippet demonstrates how to query the number of audio, video, and text streams in the media file using GStreamer's g_object_get function on the playbin element.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/playbin-usage.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Get the number of audio and video streams */\ng_object_get (playbin, \"n-video\", &n_video, \"n-audio\", &n_audio, \"n-text\", &n_text, NULL);\ng_print (\"Number of video streams: %d\\n\", n_video);\ng_print (\"Number of audio streams: %d\\n\", n_audio);\ng_print (\"Number of text streams: %d\\n\", n_text);\n```\n\n----------------------------------------\n\nTITLE: Querying a GStreamer Plugin with gst-inspect (Shell)\nDESCRIPTION: This command utilizes `gst-inspect` to retrieve information about the GStreamer plugin named 'gstelements'. It requires GStreamer and the specified plugin to be installed. The output typically lists the elements provided by the plugin and other plugin-specific details.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/programs.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngst-inspect gstelements\n\n```\n\n----------------------------------------\n\nTITLE: Library Build Configuration Example\nDESCRIPTION: Shows how to link against the MPEG-TS helper library using pkg-config flags and adding the library to link flags.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/mpegts/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngstreamer-plugins-bad-{{ gst_api_version.md }}.pc and adding\\n-lgstmpegts-{{ gst_api_version.md }}\n```\n\n----------------------------------------\n\nTITLE: Defining Comments Frame Format in ID3v2\nDESCRIPTION: Specifies the COMM (Comment) frame format in ID3v2 tags, which allows for general text information that doesn't fit into other frame types, including encoding, language, and content descriptor information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n  <Header for 'Comment', ID: \"COMM\">\n  Text encoding           $xx\n  Language                $xx xx xx\n  Short content descrip.  <text string according to encoding> $00 (00)\n  The actual text         <full text string according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Setting Ring Buffer Size Limit\nDESCRIPTION: Optional configuration to limit the downloaded file size by setting maximum ring buffer size.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/progressive-streaming.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/* Uncomment this line to limit the amount of downloaded data */\n/* g_object_set (pipeline, \"ring-buffer-max-size\", (guint64)4000000, NULL); */\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation in GStreamer\nDESCRIPTION: Shows the use of GLib's GSlice allocator for optimized memory management in GStreamer applications.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/introduction/motivation.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nGSlice\n```\n\n----------------------------------------\n\nTITLE: Quantizing Image in libimagequant\nDESCRIPTION: Performs color quantization (palette generation) based on attribute settings and image pixels. Returns NULL if quantization fails due to quality limits.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nliq_result *liq_quantize_image(liq_attr *attr, liq_image *input_image);\n```\n\n----------------------------------------\n\nTITLE: Setting ORC Debug Options in Bash\nDESCRIPTION: Example of setting ORC_CODE environment variable for debugging Orc-generated code. The 'debug' option enables debuggers to create useful backtraces, while 'backup' or 'emulate' options can be used when suspecting incorrect code generation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/gst/running.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nORC_CODE=debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nORC_CODE=backup\n```\n\nLANGUAGE: bash\nCODE:\n```\nORC_CODE=emulate\n```\n\nLANGUAGE: bash\nCODE:\n```\nORC_CODE=backup,debug\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Presets for GStreamer Element in C\nDESCRIPTION: This snippet demonstrates the proposed extension to the GstPreset API, allowing multiple presets to be set for a GStreamer element using a single string with a separator. It sets pass, profile, and quality presets for an h264 encoder.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/encoding.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ngst_preset_load_preset(h264enc, \"pass:1/profile:baseline/quality:high\")\n```\n\n----------------------------------------\n\nTITLE: Defining the ID3v2.3.0 Main Header Structure\nDESCRIPTION: Specifies the 10-byte structure of the main ID3v2.3.0 tag header located at the beginning of the file. It includes the 'ID3' file identifier, the version number ($03 00 for v2.3.0), flags (indicating unsynchronisation, extended header presence, experimental status), and the total tag size (excluding the 10-byte header) encoded in 4 sync-safe bytes (28 bits usable).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nID3v2/file identifier   \"ID3\"\nID3v2 version           $03 00\nID3v2 flags             %abc00000\nID3v2 size              4 * %0xxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Building GStreamer on Windows with GNU Make and Microsoft Compiler\nDESCRIPTION: Instructions for building GStreamer on Windows using GNU make and the free Microsoft compiler. Requires setting up the environment, Platform SDK, and various dependencies like GLib, libxml2, libintl, and libiconv.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/integration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Required GNU tools (from http://gnuwin32.sourceforge.net/)\n# - GNU flex (tested with 2.5.4)\n# - GNU bison (tested with 1.35)\n\n# From http://www.mingw.org/\n# - GNU make (tested with 3.80)\n\n# Setup environment variables for command-line use\n# Install Platform SDK for Windows\n# Install dependencies: GLib, libxml2, libintl, libiconv\n\n# Use Makefile with GNU make and free Microsoft compiler\n```\n\n----------------------------------------\n\nTITLE: Displaying C and Python Language Indicators using HTML and CSS\nDESCRIPTION: This HTML snippet defines a `div` element that utilizes CSS classes, specifically `gi-symbol-c` and `gi-symbol-python`, to visually represent symbols or indicators for the C and Python programming languages. It depends on corresponding CSS rules defined elsewhere to render the actual visual representation. The context `/gstreamer/gstreamer` implies this is likely part of a documentation or UI system for the GStreamer project.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/templates/C+PY_FALLBACK.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"gi-symbol-c gi-symbol-python\">\n```\n\n----------------------------------------\n\nTITLE: Setting Log Flush Callback in C\nDESCRIPTION: Sets up a callback function to be called after the last log callback, useful for flushing buffers and freeing resources.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_30\n\nLANGUAGE: c\nCODE:\n```\nvoid liq_set_log_flush_callback(liq_attr*, liq_log_flush_callback_function*, void *user_info);\n```\n\nLANGUAGE: c\nCODE:\n```\nvoid log_flush_callback_function(const liq_attr*, void *user_info) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Translations in NLE Object Pads\nDESCRIPTION: These code snippets show the time translation formulas used by NLE object source and sink pads. They demonstrate how internal and external time coordinates are converted.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntime-out = time-in + start - in-point\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ntime-out = time-in - start + in-point\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ntime-down\n = time-up + start-up - in-point-up - start-down + in-point-down\n```\n\n----------------------------------------\n\nTITLE: Handling Time Slider Touch Release in GStreamer iOS App\nDESCRIPTION: Processes the completion of time slider interaction. Handles seeking for remote media and restores playback state.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/ios/a-basic-media-player.md#2025-04-23_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\n- (IBAction)sliderTouchUp:(id)sender {\n    dragging_slider = NO;\n    // If this is a remote file, scrub seeking is probably not going to work smoothly enough.\n    // Therefore, perform only the seek when the slider is released.\n    if (!is_local_media)\n        [gst_backend setPosition:time_slider.value];\n    if (is_playing_desired)\n        [gst_backend play];\n}\n```\n\n----------------------------------------\n\nTITLE: GStreamer Tee Pipeline with Audio and Video Output\nDESCRIPTION: Demonstrates splitting an audio test source into two branches - one for audio output and another for visualization using wavescope.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/handy-elements.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 audiotestsrc ! tee name=t ! queue ! audioconvert ! autoaudiosink t. ! queue ! wavescope ! videoconvert ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Setting GStreamer Plugin Feature Ranks\nDESCRIPTION: Example of using GST_PLUGIN_FEATURE_RANK environment variable to adjust the rank of specific plugin features. This allows prioritizing certain plugins over others using numerical values or predefined rank constants.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/gst/running.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGST_PLUGIN_FEATURE_RANK=foo:PRIMARY,bar:primary,foobar:128\n```\n\n----------------------------------------\n\nTITLE: Enabling Qt5 Support with Cerbero\nDESCRIPTION: Command to export the QMAKE environment variable and run cerbero-uninstalled with the qt5 variant to build a GStreamer package with Qt5 QML plugin support.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-cerbero.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ export QMAKE='/path/to/Qt5.12.0/5.12.0/<target>/bin/qmake'\n$ ./cerbero-uninstalled -v qt5 [-c ...] package gstreamer-1.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Low-Level GStreamer APIs in Markdown\nDESCRIPTION: This markdown snippet provides a warning about the usage of low-level APIs in GStreamer. It advises users to carefully consider their need for these APIs and to check other documentation first.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/low_level.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Low level APIs\n\nThose APIs should usually not be used unless you know\nwhat you are doing, check other parts of the documentation\nbefore deciding you should use one of those.\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in GstValidate Test Files\nDESCRIPTION: Example of using the set-globals structure to define global variables that can be referenced throughout the .validatetest file. This allows for creating relocatable test cases by parameterizing file paths.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-test-file.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nset-globals, media_dir=$(test_dir)/../../media\n```\n\n----------------------------------------\n\nTITLE: GstBufferList API Changes in GStreamer 1.0\nDESCRIPTION: Shows the simplified API for GstBufferList, which is now a direct array of buffers. Iterator functionality has been replaced with direct access methods.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ngst_buffer_list_new_sized() /* Replaces gst_buffer_list_sized_new() */\ngst_buffer_list_length() /* Replaces gst_buffer_list_len() */\ngst_buffer_list_get() /* Get buffer at specific index */\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated GObject Cast Checks Option in Meson\nDESCRIPTION: Defines a deprecated Meson build option named 'gobject-cast-checks' of type 'feature'. It defaults to 'auto', yields its value, and provides a description explaining its behavior based on release type. It is explicitly marked as deprecated in favor of the 'glib_debug' option. This option controlled runtime GObject cast checks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_10\n\nLANGUAGE: meson\nCODE:\n```\n# Deprecated, kept for backward compat\noption('gobject-cast-checks', type : 'feature', value : 'auto', yield : true,\n       description: 'Enable run-time GObject cast checks (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_debug')\n```\n\n----------------------------------------\n\nTITLE: Setting GStreamer Element Properties in gst-launch Syntax\nDESCRIPTION: Illustrates how to set properties on GStreamer elements in gst-launch syntax. Properties are specified using name-value pairs separated by an equals sign.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/appendix/programs.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n... location=\"http://gstreamer.net\" ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Initialization Check for GStreamer Android Application\nDESCRIPTION: Checks if the native components are initialized and notifies the Java application when initialization is complete. This establishes the C-to-Java communication pathway.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/a-running-pipeline.md#2025-04-23_snippet_31\n\nLANGUAGE: c\nCODE:\n```\nstatic void check_initialization_complete (CustomData *data) {\n  JNIEnv *env = get_jni_env ();\n  if (!data->initialized && data->main_loop) {\n    GST_DEBUG (\"Initialization complete, notifying application. main_loop:%p\", data->main_loop);\n    (*env)->CallVoidMethod (env, data->app, on_gstreamer_initialized_method_id);\n    if ((*env)->ExceptionCheck (env)) {\n      GST_ERROR (\"Failed to call Java method\");\n      (*env)->ExceptionClear (env);\n    }\n    data->initialized = TRUE;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Duration-Based Seeking in GstValidate\nDESCRIPTION: Example seek action that uses variables like duration to perform a relative seek, seeking at 5 seconds or 1/8 of duration to position 10 seconds or 2/8 of duration.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_4\n\nLANGUAGE: validate-scenario\nCODE:\n```\nseek, playback-time=\"min(5.0, (duration/8))\", start=\"min(10, 2*(duration/8))\", flags=accurate+flush\n```\n\n----------------------------------------\n\nTITLE: Implementing Autoplug Factories Callback in GStreamer\nDESCRIPTION: This code snippet shows the function signature for the 'autoplug-factories' signal callback in GstDecodeBin. It allows the application to provide a custom list of element factories for autoplugging.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/decodebin.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nGValueArray user_function (GstElement* decodebin, GstPad* pad, GstCaps* caps);\n```\n\n----------------------------------------\n\nTITLE: Setting GLib Memory Allocation for Debugging\nDESCRIPTION: Example of setting G_SLICE environment variable for use with valgrind or when debugging memory leaks in GStreamer applications. This forces GLib to use malloc() for all allocations for better memory tracking.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/gst/running.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nG_SLICE=always-malloc\n```\n\n----------------------------------------\n\nTITLE: Default Windows DDK Installation Path\nDESCRIPTION: The default installation directory for the Windows Device Driver Kit (DDK) Version 7.1.0. This path is referenced when configuring Visual Studio projects to find DDK build environments.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\WinDDK\\7600.16385.1\n```\n\n----------------------------------------\n\nTITLE: Same Caps Copy Transform Flow\nDESCRIPTION: ASCII diagram depicting the buffer flow for copy transformation with identical caps.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/element-transform.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n              sinkpad              transform               srcpad\n      chain()    |                    |                      |\n    ------------>|   handle_buffer()  |                      |\n                 |------------------->|                      |\n                 |                    |     alloc buffer     |\n                 |                  .-|                      |\n                 |     <transform>  | |                      |\n                 |                  '>|                      |\n                 |                    |      pad_push()      |\n                 |                    |--------------------->|\n                 |                    |                      |\n```\n\n----------------------------------------\n\nTITLE: Defining Examples Feature Option in Meson\nDESCRIPTION: Defines a Meson build option named 'examples' of type 'feature'. It defaults to 'auto', yields its value (making it available to subprojects), and includes a description. This option controls whether the example code accompanying the GStreamer project is built.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_1\n\nLANGUAGE: meson\nCODE:\n```\n# Common feature options\noption('examples', type : 'feature', value : 'auto', yield : true,\n       description : 'Build the examples')\n```\n\n----------------------------------------\n\nTITLE: Defining Relative Volume Adjustment Frame Structure in ID3v2\nDESCRIPTION: Specifies the structure of the RVA2 frame used for relative volume adjustment in ID3v2 tags. Includes an identification string followed by channel-specific data including channel type, volume adjustment, and peak volume information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_12\n\nLANGUAGE: plain text\nCODE:\n```\n<Header for 'Relative volume adjustment (2)', ID: \"RVA2\">\nIdentification          <text string> $00\n```\n\n----------------------------------------\n\nTITLE: Detach Current Thread from JVM using JNI in C\nDESCRIPTION: Implements the `detach_current_thread` function, which detaches the calling C thread from the Java Virtual Machine (JVM) using the JNI `DetachCurrentThread` function. This should be called before a JNI-attached thread exits.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/android/media-player.md#2025-04-23_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n/* Unregister this thread from the VM */\nstatic void detach_current_thread (void *env) {\n  GST_DEBUG (\"Detaching thread %p\", g_thread_self ());\n  (*java_vm)->DetachCurrentThread (java_vm);\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Profile Serialization Examples\nDESCRIPTION: Examples of serialized encoding profiles for different container and codec combinations.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-transcoding.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvideo/quicktime,variant=iso:video/x-h264:audio/mpeg,mpegversion=1,layer=3\n```\n\nLANGUAGE: bash\nCODE:\n```\napplication/ogg:video/x-theora:audio/x-vorbis\n```\n\nLANGUAGE: bash\nCODE:\n```\nvideo/mpegts:video/x-h264:audio/x-ac3\n```\n\n----------------------------------------\n\nTITLE: Displaying GStreamer Configure Options (Bash)\nDESCRIPTION: Shows the command to display help information for the GStreamer `configure` script, listing available standard and GStreamer-specific build options provided by GNU autoconf.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/gst/building.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./configure --help\n```\n\n----------------------------------------\n\nTITLE: Timeline Source and Operation Layout Visualization\nDESCRIPTION: ASCII art diagram showing the layout of source and operation elements in a timeline stack\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: ascii-art\nCODE:\n```\n            |        source (1)         |\n            |----------------------------|\n            |                           |\n            '==========================='\n\n.===========================.\n|                           |\n|----------------------------|\n|       operation (2)       |\n|----------------------------|\n|                           |\n'==========================='\n\n+++++++++++++++++++++++++++++++++++++++++\n              timeline\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Opacity in C\nDESCRIPTION: Sets the minimum opacity threshold. Alpha values higher than this will be rounded to opaque. Useful for compatibility with Internet Explorer 6.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nliq_error liq_set_min_opacity(liq_attr* attr, int min);\n```\n\n----------------------------------------\n\nTITLE: Setting Element Asset in GStreamer\nDESCRIPTION: Command to set an asset on a timeline element. Requires element name and asset ID, with optional playback timing.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/ges-validate-action-types.md#2025-04-23_snippet_11\n\nLANGUAGE: validate-scenario\nCODE:\n```\nelement-set-asset,\n    [playback-time=(double,string)],\n    element-name=(string),\n    asset-id=(string);\n```\n\n----------------------------------------\n\nTITLE: Drawing Object Pointer in ASCII Art\nDESCRIPTION: Convention for showing a pointer to an object using ASCII art notation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/conventions.md#2025-04-23_snippet_1\n\nLANGUAGE: ascii-art\nCODE:\n```\n     +-----+\n*--->|     |\n     +-----+\n```\n\n----------------------------------------\n\nTITLE: Defining Play Counter (PCNT) Frame Structure in ID3v2\nDESCRIPTION: Specifies the binary structure of the PCNT frame used to count how many times an audio file has been played. The frame includes a counter field that is at least 32-bits long and expands as needed when the counter reaches its limit.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.4.0-frames.txt#2025-04-23_snippet_17\n\nLANGUAGE: Binary\nCODE:\n```\n<Header for 'Play counter', ID: \"PCNT\">\nCounter        $xx xx xx xx (xx ...)\n```\n\n----------------------------------------\n\nTITLE: GstCodecs Library Status Notice\nDESCRIPTION: A markdown notice indicating that the GstCodecs library API is considered unstable and subject to change.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/codecs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GstCodecs\n\n> NOTE: This library API is considered *unstable*\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Tracers with Environment Variables\nDESCRIPTION: Demonstrates how to enable and configure GStreamer tracers using environment variables. This allows selecting specific tracer plugins and passing parameters to them.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/tracing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGST_TRACERS='leaks(filters=\"GstEvent,GstMessage\",stack-traces-flags=none);latency(flags=pipeline+element+reported)'\n```\n\n----------------------------------------\n\nTITLE: Setting GLib Debug Options in Bash\nDESCRIPTION: Example of setting G_DEBUG environment variable to abort on critical warnings, making it easier to identify and debug assertion failures in GStreamer programs.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/gst/running.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nG_DEBUG=fatal_warnings\n```\n\n----------------------------------------\n\nTITLE: Element Klass String Format in GStreamer\nDESCRIPTION: This snippet defines the string format for element class definitions in GStreamer. It consists of an unordered list of keywords separated by '/' characters.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/draft-klass.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<keyword>['/'<keyword]*\n```\n\n----------------------------------------\n\nTITLE: Drawing Object Box in ASCII Art\nDESCRIPTION: Convention for drawing basic objects as rectangular boxes in documentation diagrams.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/conventions.md#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n+------+\n|      |\n+------+\n```\n\n----------------------------------------\n\nTITLE: Defining Unsynchronized Lyrics Frame Format in ID3v2\nDESCRIPTION: Specifies the USLT (Unsynchronized lyrics/text transcription) frame format in ID3v2 tags, which contains song lyrics or text transcriptions with language and content descriptor information.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/gst-libs/gst/tag/id3v2.3.0.txt#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n  <Header for 'Unsynchronised lyrics/text transcription', ID: \"USLT\">\n  Text encoding       $xx\n  Language            $xx xx xx\n  Content descriptor  <text string according to encoding> $00 (00)\n  Lyrics/text         <full text string according to encoding>\n```\n\n----------------------------------------\n\nTITLE: Referencing GStreamer Vulkan Version\nDESCRIPTION: Template reference to the GStreamer API version used for build configuration. This is used to determine the correct version of gstreamer-vulkan to link against.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/docs/libs/vulkan-xcb/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngstreamer-vulkan-{{ gst_api_version.md }}\n```\n\n----------------------------------------\n\nTITLE: Running All pre-commit Hooks Manually (Bash)\nDESCRIPTION: Executes all configured pre-commit hooks against every file in the repository. The `--show-diff-on-failure` flag ensures that any discrepancies or changes made by the hooks are displayed, aiding in manual verification and correction of coding style or formatting issues.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/contribute/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npre-commit run --all-files --show-diff-on-failure\n```\n\n----------------------------------------\n\nTITLE: Initializing Buffering Query\nDESCRIPTION: Creates and executes a new buffering query to check pipeline download status using GStreamer query mechanisms.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/progressive-streaming.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean refresh_ui (CustomData *data) {\n  GstQuery *query;\n  gboolean result;\n  query = gst_query_new_buffering (GST_FORMAT_PERCENT);\n  result = gst_element_query (data->pipeline, query);\n```\n\n----------------------------------------\n\nTITLE: Installing GLib Timer for UI Refresh\nDESCRIPTION: Sets up a periodic timer callback to refresh the UI every second using GLib's timeout functionality.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/progressive-streaming.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Register a function that GLib will call every second */\ng_timeout_add_seconds (1, (GSourceFunc)refresh_ui, &data);\n```\n\n----------------------------------------\n\nTITLE: Installing SSL Certificates on macOS\nDESCRIPTION: Command to install SSL certificates when using official Python installer on macOS to prevent certificate verification failures.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/Applications/Python\\ 3.*/Install\\ Certificates.command\n```\n\n----------------------------------------\n\nTITLE: Copying Attribute Object in C\nDESCRIPTION: Creates an independent copy of a liq_attr object. The copy should be freed using liq_attr_destroy().\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_32\n\nLANGUAGE: c\nCODE:\n```\nliq_attr* liq_attr_copy(liq_attr *orig);\n```\n\n----------------------------------------\n\nTITLE: Remove Feature Command in GStreamer Validate Scenario\nDESCRIPTION: Removes plugin features or plugins from the registry at the beginning of pipeline execution.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_14\n\nLANGUAGE: validate-scenario\nCODE:\n```\nremove-feature,\n    name=(string);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Quantization Quality in C\nDESCRIPTION: Returns the quantization error as a quality value in the 0-100 range, compatible with liq_set_quality().\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-bad/gst/dvbsubenc/libimagequant/README.md#2025-04-23_snippet_28\n\nLANGUAGE: c\nCODE:\n```\ndouble liq_get_quantization_quality(liq_result *result);\n```\n\n----------------------------------------\n\nTITLE: GStreamer Design Documents Header\nDESCRIPTION: Markdown header and introductory text explaining the purpose of GStreamer design documentation collection.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/additional/design/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GStreamer design documents\n\nThis section gathers the various GStreamer design documents.\nThese documents are the technical documents that have been produce while\ndeveloping or refactoring parts of the GStreamer design to explain the\nproblems and the design solutions we came up to solve them.\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic MIDI Processing Pipeline in GStreamer\nDESCRIPTION: Example pipeline command for reading a MIDI file, parsing it, processing through amSynth synthesizer, and outputting to OSS sink. The midiparse element converts MIDI file data to timestamped MIDI buffers that can be processed by the synthesizer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/uraeus/gstreamer_and_midi.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfilesrc location=foo.mid ! midiparse ! amSynth ! osssink\n```\n\n----------------------------------------\n\nTITLE: Time Coordinate Translation Function\nDESCRIPTION: Mathematical formula showing how to compose multiple time effect functions\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/time_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nF(t) = f_n (f_n-1 ( ... f_1 (t)...))\n```\n\n----------------------------------------\n\nTITLE: Specifying Pillow Dependency for py_videomixer Plugin (Requirements)\nDESCRIPTION: This snippet specifies that the `py_videomixer` GStreamer plugin requires the Python Pillow library to be installed with a version of 5.1.0 or higher. Pillow is typically used for image processing tasks.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-python/examples/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# py_videomixer plugin\nPillow >= 5.1.0\n```\n\n----------------------------------------\n\nTITLE: Environment Variable for 64-bit GStreamer Installation Root\nDESCRIPTION: The `GSTREAMER_ROOT_X86_64` environment variable points to the root directory of the 64-bit GStreamer installation. This is used, particularly in Visual Studio, when targeting 64-bit platforms.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nGSTREAMER_ROOT_X86_64\n```\n\n----------------------------------------\n\nTITLE: Viewing GStreamer Logs on Android Device\nDESCRIPTION: This command uses ADB to view GStreamer-related logs from the Android device in real-time.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/playback/player/android/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ adb logcat | egrep '(gst)'\n```\n\n----------------------------------------\n\nTITLE: Displaying Buffering Status\nDESCRIPTION: Shows or hides the buffering percentage based on current buffering level.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/playback/progressive-streaming.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nif (data->buffering_level < 100) {\n  g_print (\" Buffering: %3d%%\", data->buffering_level);\n} else {\n  g_print (\"                \");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the GStreamer Controller Library in C\nDESCRIPTION: This C code demonstrates how to initialize the GStreamer controller library using `gst_controller_init(NULL, NULL)` within the plugin's `plugin_init` function. This step ensures the controller subsystem is ready for use by elements within the plugin.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/dparams.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n  static gboolean\n  plugin_init (GstPlugin *plugin)\n  {\n    ...\n    /* initialize library */\n    gst_controller_init (NULL, NULL);\n    ...\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Regenerating GStreamer Plugin Cache (Bash)\nDESCRIPTION: Commands to regenerate the gst_plugins_cache.json file after adding a new plugin. Includes commands for both single-module and mono-repo builds.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nninja -C <build-dir> docs/gst_plugins_cache.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nninja -C <build-dir> plugins_doc_caches\n```\n\n----------------------------------------\n\nTITLE: Defining GStreamer Plugin and Feature Build Options in Meson\nDESCRIPTION: This Meson script defines various build options for the GStreamer project. It uses the `option()` function to declare features, boolean flags, string values, and choice-based configurations. These options control the inclusion of plugins based on internal features (e.g., `alpha`, `avi`, `isomp4`), external library dependencies (e.g., `aalib`, `cairo`, `flac`, `qt5`), specific hardware support (e.g., `rpicamsrc`, `v4l2`), and general build configurations (e.g., `tests`, `doc`, `nls`, `orc`). Most options default to 'auto', allowing Meson to detect availability, but can be explicitly enabled or disabled.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-good/meson_options.txt#2025-04-23_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\n# Feature options for plugins without external deps\noption('alpha', type : 'feature', value : 'auto')\noption('apetag', type : 'feature', value : 'auto')\noption('audiofx', type : 'feature', value : 'auto')\noption('audioparsers', type : 'feature', value : 'auto')\noption('auparse', type : 'feature', value : 'auto')\noption('autodetect', type : 'feature', value : 'auto')\noption('avi', type : 'feature', value : 'auto')\noption('cutter', type : 'feature', value : 'auto')\noption('debugutils', type : 'feature', value : 'auto')\noption('deinterlace', type : 'feature', value : 'auto')\noption('dtmf', type : 'feature', value : 'auto')\noption('effectv', type : 'feature', value : 'auto')\noption('equalizer', type : 'feature', value : 'auto')\noption('flv', type : 'feature', value : 'auto')\noption('flx', type : 'feature', value : 'auto')\noption('goom', type : 'feature', value : 'auto')\noption('goom2k1', type : 'feature', value : 'auto')\noption('icydemux', type : 'feature', value : 'auto')\noption('id3demux', type : 'feature', value : 'auto')\noption('imagefreeze', type : 'feature', value : 'auto')\noption('interleave', type : 'feature', value : 'auto')\noption('isomp4', type : 'feature', value : 'auto')\noption('law', type : 'feature', value : 'auto')\noption('level', type : 'feature', value : 'auto')\noption('matroska', type : 'feature', value : 'auto')\noption('monoscope', type : 'feature', value : 'auto')\noption('multifile', type : 'feature', value : 'auto')\noption('multipart', type : 'feature', value : 'auto')\noption('replaygain', type : 'feature', value : 'auto')\noption('rtp', type : 'feature', value : 'auto')\noption('rtpmanager', type : 'feature', value : 'auto')\noption('rtsp', type : 'feature', value : 'auto')\noption('shapewipe', type : 'feature', value : 'auto')\noption('smpte', type : 'feature', value : 'auto')\noption('spectrum', type : 'feature', value : 'auto')\noption('udp', type : 'feature', value : 'auto')\noption('videobox', type : 'feature', value : 'auto')\noption('videocrop', type : 'feature', value : 'auto')\noption('videofilter', type : 'feature', value : 'auto')\noption('videomixer', type : 'feature', value : 'auto')\noption('wavenc', type : 'feature', value : 'auto')\noption('wavparse', type : 'feature', value : 'auto')\noption('xingmux', type : 'feature', value : 'auto')\noption('y4m', type : 'feature', value : 'auto')\n\n# Feature options for plugins with external deps\noption('adaptivedemux2', type : 'feature', value : 'auto', description : '2nd generation adaptive demuxer plugin')\noption('aalib', type : 'feature', value : 'auto', description : 'aalib text console video sink plugin')\noption('amrnb', type : 'feature', value : 'auto', description : 'Adaptive Multi-Rate Narrow-Band audio codec plugin')\noption('amrwbdec', type : 'feature', value : 'auto', description : 'Adaptive Multi-Rate Wide-Band audio decoder plugin')\noption('bz2', type : 'feature', value : 'auto', description : 'libbz2 support in the matroska plugin')\noption('cairo', type : 'feature', value : 'auto', description : 'Cairo overlay plugin')\noption('directsound', type : 'feature', value : 'auto', description : 'Directsound audio source/sink plugin')\noption('dv', type : 'feature', value : 'auto', description : 'Digital video decoder and demuxer plugin')\noption('dv1394', type : 'feature', value : 'auto', description : 'Digital IEEE1394 interface video source plugin')\noption('flac', type : 'feature', value : 'auto', description : 'FLAC audio codec plugin')\noption('gdk-pixbuf', type : 'feature', value : 'auto', description : 'gdk-pixbuf image decoder, overlay, and sink plugin')\noption('gtk3', type : 'feature', value : 'auto', description : 'GTK+ video sink plugin')\noption('jack', type : 'feature', value : 'auto', description : 'JACK audio source/sink plugin')\noption('jpeg', type : 'feature', value : 'auto', description : 'JPEG image codec plugin')\noption('lame', type : 'feature', value : 'auto', description : 'LAME mp3 audio encoder plugin')\noption('libcaca', type : 'feature', value : 'auto', description : 'libcaca text console video sink plugin')\noption('mpg123', type : 'feature', value : 'auto', description : 'mpg123 mp3 audio decoder plugin')\noption('oss', type : 'feature', value : 'auto', description : 'OSS audio source/sink plugin')\noption('oss4', type : 'feature', value : 'auto', description : 'OSSv4 audio source/sink plugin')\noption('osxaudio', type : 'feature', value : 'auto', description : 'macOS/iOS CoreAudio source/sink plugin')\noption('osxvideo', type : 'feature', value : 'auto', description : 'macOS Cocoa video sink plugin')\noption('png', type : 'feature', value : 'auto', description : 'PNG image codec plugin')\noption('pulse', type : 'feature', value : 'auto', description : 'Pulseaudio audio source/sink plugin')\noption('shout2', type : 'feature', value : 'auto', description : 'Shout-casting network sink plugin based on libshout2')\noption('speex', type : 'feature', value : 'auto', description : 'Speex audio codec plugin')\noption('taglib', type : 'feature', value : 'auto', description : 'Tag-writing plugin based on taglib')\noption('twolame', type : 'feature', value : 'auto', description : 'twolame mp2 audio encoder plugin')\noption('vpx', type : 'feature', value : 'auto', description : 'VP8 and VP9 video codec plugin')\noption('waveform', type : 'feature', value : 'auto', description : 'Windows waveform audio sink plugin')\noption('wavpack', type : 'feature', value : 'auto', description : 'Wavpack audio codec plugin')\n\n# HLS plugin options\noption('hls-crypto', type : 'combo', value : 'auto', choices : ['auto', 'nettle', 'libgcrypt', 'openssl'],\n       description: 'Crypto library to use for HLS plugin')\n\n# rpicamsrc plugin options\noption('rpicamsrc', type : 'feature', value : 'auto', description : 'Raspberry Pi camera module plugin')\noption('rpi-header-dir', type : 'string', value : '/opt/vc/include', description : 'Directory where VideoCore/MMAL headers and bcm_host.h can be found')\noption('rpi-lib-dir', type : 'string', value : '/opt/vc/lib', description : 'Directory where VideoCore/MMAL libraries can be found')\n\n# soup plugin options\noption('soup', type : 'feature', value : 'auto', description : 'libsoup HTTP client source/sink plugin')\noption('soup-lookup-dep', type : 'boolean', value : false,\n       description : 'Lookup libsoup dep at build time even when building a shared plugin')\noption('soup-version', type : 'combo', value : 'auto', choices : ['auto', '2', '3'],\n       description: 'Force a specific libsoup version if linking to it (N/A for shared builds on Linux)')\n\n# Qt plugin options\noption('qt-method', type: 'combo', value: 'auto', choices: ['auto', 'pkg-config', 'qmake'],\n       description: 'Method to use to find Qt')\noption('qt-egl', type: 'feature', value: 'auto', description: 'EGLFS support in the Qt plugins')\noption('qt-wayland', type: 'feature', value: 'auto', description: 'Wayland support in the Qt plugins')\noption('qt-x11', type: 'feature', value: 'auto', description: 'X11 support in the Qt plugins')\noption('qt5', type : 'feature', value : 'auto', yield : true, description : 'Qt5 QML video sink plugin')\noption('qt6', type : 'feature', value : 'auto', yield : true, description : 'Qt6 QML video sink plugin')\n\n# ximagesrc plugin options\noption('ximagesrc', type : 'feature', value : 'auto', description : 'X11 ximagesrc plugin')\noption('ximagesrc-xshm', type : 'feature', value : 'auto', description : 'X11 ximagesrc plugin (XSHM support)')\noption('ximagesrc-xfixes', type : 'feature', value : 'auto', description : 'X11 ximagesrc plugin (XFixes support)')\noption('ximagesrc-xdamage', type : 'feature', value : 'auto', description : 'X11 ximagesrc plugin (XDamage support)')\noption('ximagesrc-navigation', type : 'feature', value : 'auto', description : 'X11 ximagesrc plugin (Navigation support)')\n\n# v4l2 plugin options\noption('v4l2', type : 'feature', value : 'auto', description : 'Build video4linux2 source/sink plugin')\noption('v4l2-probe', type : 'boolean', value : true, description : 'Probe v4l2 devices when the v4l2 plugin is loaded')\noption('v4l2-libv4l2', type : 'feature', value : 'auto', description : 'Use libv4l2 for some obscure format conversions')\noption('v4l2-gudev', type : 'feature', value : 'auto', description : 'Use libgudev for probing v4l2 devices')\n\n# Common feature options\noption('examples', type : 'feature', value : 'auto', yield : true)\noption('tests', type : 'feature', value : 'auto', yield : true)\noption('nls', type : 'feature', value : 'auto', yield: true, description : 'Enable native language support (translations)')\noption('orc', type : 'feature', value : 'auto', yield : true)\noption('asm', type : 'feature', value : 'auto', yield : true)\n\n# Common options\noption('package-name', type : 'string', yield : true,\n       description : 'package name to use in plugins')\noption('package-origin', type : 'string', value : 'Unknown package origin', yield : true,\n       description : 'package origin URL to use in plugins')\noption('doc', type : 'feature', value : 'auto', yield: true,\n       description: 'Enable documentation.')\noption('glib_debug', type : 'feature', value : 'auto', yield : true, description : 'Enable GLib debug infrastructure (see docs/macros.txt)')\noption('glib_assert', type : 'boolean', value : true, yield : true, description : 'Enable GLib assertion (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\noption('glib_checks', type : 'boolean', value : true, yield : true, description : 'Enable GLib checks such as API guards (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\n\n```\n\n----------------------------------------\n\nTITLE: Example GStreamer Binary Path for System PATH Variable\nDESCRIPTION: This provides a concrete example path to the GStreamer 64-bit MSVC binary directory, assuming a default installation location. This specific path would be added to the system's PATH environment variable.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\gstreamer\\1.0\\msvc_x86_64\\bin\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration header that disables subpage rendering for this document.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrender-subpages: false\n```\n\n----------------------------------------\n\nTITLE: Building gstqmlgl Plugin with qmake and make (Bash)\nDESCRIPTION: Executes `qmake` in the current directory (`.`) to generate Makefiles based on the Qt project file (`.pro`), followed by `make` to compile and link the `gstqmlgl` plugin. This assumes the necessary build environment (compiler, Qt tools, GStreamer headers/libs) has been set up, typically within the Cerbero shell.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-good/ext/qt/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqmake .\nmake\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for GStreamer-Sharp on Debian-based Systems\nDESCRIPTION: Command to install the required .NET/mono development packages on Debian-based Linux distributions, specifically mono-mcs and mono-devel.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer-sharp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install mono-mcs mono-devel\n```\n\n----------------------------------------\n\nTITLE: Running Java WebRTC SendRecv Example\nDESCRIPTION: Commands to build and run the Java WebRTC send/receive example using Gradle.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/webrtc/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncd sendrecv/gst-java\n./gradlew build\njava -jar build/libs/gst-java.jar --peer-id=ID\n```\n\n----------------------------------------\n\nTITLE: Building GStreamer Documentation Portal with Meson (Bash)\nDESCRIPTION: Commands to build the GStreamer documentation portal without API documentation using Meson and Ninja. Includes steps to build and open the generated HTML documentation.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeson build\nninja -C build/ GStreamer-doc\n```\n\nLANGUAGE: bash\nCODE:\n```\ngio open build/GStreamer-doc/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Generating Stream Info Files for Remote Media\nDESCRIPTION: Command to generate .stream_info files for remote media streams using gst-validate-media-check.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-launcher.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-media-check-GST_API_VERSION http://someonlinestream.com/thestream \\\n                  --output-file /path/to/testsuite_folder/sample_files/thestream.stream_info\n```\n\n----------------------------------------\n\nTITLE: Defining GLib Assert Boolean Option in Meson\nDESCRIPTION: Defines a Meson build option named 'glib_assert' of type 'boolean', defaulting to 'true'. It yields its value, provides a description referencing documentation, and marks older feature-type values ('enabled', 'disabled', 'auto') as deprecated in favor of boolean true/false. This option controls whether GLib assertions are enabled.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-rtsp-server/meson_options.txt#2025-04-23_snippet_8\n\nLANGUAGE: meson\nCODE:\n```\noption('glib_assert', type : 'boolean', value : true, yield : true, description : 'Enable GLib assertion (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\n```\n\n----------------------------------------\n\nTITLE: Running GStreamer tools under Wine\nDESCRIPTION: After setting up binfmt to use Wine for Windows binaries, you can run GStreamer tools under Wine using the .exe extension.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ngst-launch-1.0.exe videotestsrc ! glimagesink\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Android GStreamer Player App using Gradle\nDESCRIPTION: This command builds and deploys the GStreamer player app to an Android device. It sets necessary environment variables and uses Gradle to install the debug version of the app.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-examples/playback/player/android/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ GSTREAMER_ROOT_ANDROID=/path/to/gst-android-1.14/ PATH=~/dev/android/tools/bin:~/dev/android/ndk-bundle:$PATH ANDROID_HOME=\"$HOME/dev/android/\" ./gradlew installDebug\n```\n\n----------------------------------------\n\nTITLE: GStreamer Visual Studio Property Sheets for Runtime Configuration\nDESCRIPTION: Names of Visual Studio property sheets provided with GStreamer for 32-bit (x86.props) and 64-bit (x86_64.props) builds. Adding these to a project configures it to use the system C Runtime (MSVCRT.DLL) via the DDK.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nx86.props\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nx86_64.props\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Testsuite with gst-validate-launcher\nDESCRIPTION: Command to run a custom testsuite using gst-validate-launcher by specifying the testsuites directory.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-launcher.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngst-validate-launcher --testsuites-dir=/path/to/testsuite_folder/ testsuite\n```\n\n----------------------------------------\n\nTITLE: Setting a Property by Name/Value on Target Element(s) - GStreamer - validate-scenario\nDESCRIPTION: Sets a property on a single or multiple elements in the pipeline, filtered by element name, class, or factory name. Requires 'property-name' and 'property-value', with optional parameters for targeting, timing, and instance matching (on-all-instances). 'playback-time' can be given to delay assignment for synchronization. Used to precisely set runtime attributes during controlled test runs.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate-action-types.md#2025-04-23_snippet_21\n\nLANGUAGE: validate-scenario\nCODE:\n```\nset-property,\\n    property-name=(string),\\n    property-value=(The same type of @property-name),\\n    [on-all-instances=(boolean)],\\n    [target-element-factory-name=(string)],\\n    [target-element-klass=(string)],\\n    [target-element-name=(string)],\\n    [playback-time=(double,string)];\n```\n\n----------------------------------------\n\nTITLE: Referencing GStreamer Binary Directory using Environment Variable\nDESCRIPTION: This snippet shows how to reference the GStreamer binary directory (containing DLLs) using the `GSTREAMER_ROOT_X86` environment variable in Windows command prompt syntax. This path needs to be added to the system's PATH variable for applications to find GStreamer libraries at runtime.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/on-windows.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n%GSTREAMER_ROOT_X86%\\bin\n```\n\n----------------------------------------\n\nTITLE: Setting GStreamer Debug Environment Variable in Shell\nDESCRIPTION: Sets the GST_DEBUG environment variable to display validation issues as they are detected in the GStreamer debug log.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/docs/gst-validate.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGST_DEBUG=validate:2\n```\n\n----------------------------------------\n\nTITLE: Using Buffer Mapping Functions in GStreamer 1.0\nDESCRIPTION: Demonstrates the replacement for GST_BUFFER_DATA() and related macros using the new mapping API. These functions allow access to buffer data with specified access modes while handling memory management automatically.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/random/porting-to-1.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngst_buffer_map() /* Used to access buffer data with specific access mode */\ngst_buffer_unmap() /* Must be called after mapping to release resources */\ngst_buffer_get_size() /* Get buffer size without mapping */\ngst_buffer_is_writable() /* Check if buffer can be modified */\ngst_buffer_make_writable() /* Create writable buffer copy if needed */\n```\n\n----------------------------------------\n\nTITLE: Stopping GstDiscoverer\nDESCRIPTION: Stops the discoverer process when analysis is complete\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/media-information-gathering.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/* Stop the discoverer process */\ngst_discoverer_stop (data.discoverer);\n```\n\n----------------------------------------\n\nTITLE: Running GStreamer Pipeline with dots Tracer\nDESCRIPTION: Command to run a GStreamer pipeline with the dots tracer enabled, which configures pipeline-snapshot for visualization and sets up parameters for proper dot file generation and websocket communication.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-devtools/dots-viewer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nGST_TRACERS=dots gst-launch-1.0 videotestsrc ! webrtcsink run-signalling-server=true0\n```\n\n----------------------------------------\n\nTITLE: Compiling Programs with GStreamer and GTK+ 3 Using pkg-config - Shell\nDESCRIPTION: This shell snippet is used to compile and link a C program that depends on both GStreamer and GTK+ 3.0. By passing both 'gstreamer-1.0' and 'gtk+-3.0' to pkg-config, it retrieves all flags necessary for building applications with these dependencies. It assumes the presence of libtool, GStreamer, GTK+ 3.0 development files, and pkg-config on the system. Substitute \"myprog.c\" and \"myprog\" to match your source and output binary as needed. This results in an executable that links with both frameworks on Unix/Linux.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/frequently-asked-questions/developing.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ libtool --mode=link gcc `pkg-config --cflags --libs gstreamer-1.0 gtk+-3.0` -o myprog myprog.c\n```\n\n----------------------------------------\n\nTITLE: Standard GStreamer Build Sequence on UNIX (Bash)\nDESCRIPTION: Demonstrates the standard command sequence (`./configure`, `make`, `make install`) used to compile and install the GStreamer library on UNIX-like systems leveraging the GNU build system (autoconf, automake, libtool).\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/docs/gst/building.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./configure\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dynamic Library Install Name on macOS using otool\nDESCRIPTION: This command utilizes `otool` with the `-D` flag to display the 'install name' of a specific GStreamer dynamic library (`libgstreamer-1.0.dylib`). The install name is the path recorded within other binaries that link against this library, determining where the dynamic linker will search for it.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/deploying/mac-osx.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ otool -D /Library/Frameworks/GStreamer.framework/Libraries/libgstreamer-1.0.dylib\n/Library/Frameworks/GStreamer.framework/Libraries/libgstreamer-1.0.dylib:\n/Library/Frameworks/GStreamer.framework/Versions/0.10/x86/lib/libgstreamer-1.0.0.dylib\n```\n\n----------------------------------------\n\nTITLE: Compiling GStreamer Application with Libtool\nDESCRIPTION: Alternative compilation command using libtool for GStreamer development environment.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/application-development/basics/helloworld.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlibtool --mode=link gcc -Wall helloworld.c -o helloworld $(pkg-config --cflags --libs gstreamer-1.0)\n```\n\n----------------------------------------\n\nTITLE: Playing Ogg Vorbis Audio with GStreamer\nDESCRIPTION: Demonstrates how to play an Ogg Vorbis format file using GStreamer elements.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/gst-launch.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 filesrc location=music.ogg ! oggdemux ! vorbisdec ! audioconvert ! audioresample ! pulsesink\n```\n\n----------------------------------------\n\nTITLE: Configuring EGL Module Name in Meson\nDESCRIPTION: Defines a Meson build option 'egl_module_name' of type string. It specifies the filename to be used by g_module_open for loading the libEGL library, overriding the default 'libEGL'.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-plugins-base/meson_options.txt#2025-04-23_snippet_6\n\nLANGUAGE: meson\nCODE:\n```\noption('egl_module_name', type : 'string', value : '',\n       description : 'The file to pass to g_module_open to open the libEGL library (default: libEGL)')\n```\n\n----------------------------------------\n\nTITLE: Documenting GStreamer Base Classes in Markdown\nDESCRIPTION: This snippet provides a header for documenting GStreamer base classes. It uses a Markdown heading to indicate the topic of base classes in GStreamer, which are fundamental building blocks for plugin development.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/base-classes.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Base classes\n```\n\n----------------------------------------\n\nTITLE: Configuring GStreamer Memory and Processing Options\nDESCRIPTION: Defines options related to memory handling, option parsing, and object poisoning. These settings affect runtime behavior and memory alignment in GStreamer.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gstreamer/meson_options.txt#2025-04-23_snippet_2\n\nLANGUAGE: meson\nCODE:\n```\noption('option-parsing', type : 'boolean', value : true,\n       description: 'Enable command line option parsing')\noption('poisoning', type : 'boolean', value : false, description : 'Enable poisoning of deallocated objects')\noption('memory-alignment', type: 'combo',\n       choices : ['1', '2', '4', '8', '16', '32', '64', '128', '256', '512', '1024', '2048', '4096', '8192', 'malloc', 'pagesize'],\n       value: 'malloc')\n```\n\n----------------------------------------\n\nTITLE: Cloning the GStreamer Monorepo with Git (Shell)\nDESCRIPTION: This snippet demonstrates how to clone the GStreamer monorepository from GitLab using HTTPS and change into the project directory. It assumes that Git is installed and network access to the repository is available. The code is intended for users who wish to work on the current development version of GStreamer; the output is a new 'gstreamer' directory containing all source files.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/installing/building-from-source-using-meson.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://gitlab.freedesktop.org/gstreamer/gstreamer.git\\ncd gstreamer\n```\n\n----------------------------------------\n\nTITLE: Adding Effect with Custom Property\nDESCRIPTION: Command that adds an aging TV effect and disables the dust property of the effect.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tools/ges-launch.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nges-launch-1.0 +clip /path/to/media +effect \"agingtv\" set-dusts false\n```\n\n----------------------------------------\n\nTITLE: Declaring GESTrackObject API for Child Property Management in C\nDESCRIPTION: This snippet declares C functions for listing, getting, and setting child properties of GstElements contained within a GESTrackObject. It also includes a function to retrieve the associated GESMaterial.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-editing-services/docs/design/effects.txt#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nGParamSpec **\nges_track_object_list_children_properties (GESTrackObject *object);\n\nvoid ges_track_object_set_child_property (GESTrackObject *object,\n                                          const gchar *property_name,\n                                          GValue * value);\n\nvoid ges_track_object_get_child_property (GESTrackObject *object,\n                                            const gchar *property_name,\n                                            GValue * value);\n\nGESMaterial *ges_track_object_get_material (GESTrackObject *object);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom GStreamer Tag in C\nDESCRIPTION: This C code snippet shows how to register a custom metadata tag within a GStreamer element's class_init function using `gst_tag_register`. It defines the tag name ('my_tag_name'), its type (G_TYPE_STRING), and provides descriptive names. This registration makes the tag known to the GStreamer core.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/plugin-development/advanced/tagging.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic void\ngst_my_filter_class_init (GstMyFilterClass *klass)\n{\n[..]\n  gst_tag_register (\"my_tag_name\", GST_TAG_FLAG_META,\n            G_TYPE_STRING,\n            _(\"my own tag\"),\n            _(\"a tag that is specific to my own element\"),\n            NULL);\n[..]\n}\n```\n\n----------------------------------------\n\nTITLE: Building GStreamer Core\nDESCRIPTION: Commands to setup and compile GStreamer using Meson build system. Creates a build directory and compiles all components.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeson setup builddir\nmeson compile -C builddir\n```\n\n----------------------------------------\n\nTITLE: Handling Window Close Event\nDESCRIPTION: Callback function for when the main window is closed. It stops the playback and quits the GTK+ main loop, effectively terminating the application.\nSOURCE: https://github.com/gstreamer/gstreamer/blob/main/subprojects/gst-docs/markdown/tutorials/basic/toolkit-integration.md#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n/* This function is called when the main window is closed */\nstatic void delete_event_cb (GtkWidget *widget, GdkEvent *event, CustomData *data) {\n  stop_cb (NULL, data);\n  gtk_main_quit ();\n}\n\n```"
  }
]