[
  {
    "owner": "sendbird",
    "repo": "sendbird-uikit-react-native",
    "content": "TITLE: Creating Sendbird UIKit Screens in React Native with TypeScript\nDESCRIPTION: This snippet shows how to create screens for group channel list, channel creation, and individual channels using Sendbird UIKit fragments. It demonstrates the usage of React Navigation hooks and Sendbird UIKit hooks for navigation and channel management.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigation, useRoute } from '@react-navigation/native';\n\nimport { useGroupChannel } from '@sendbird/uikit-chat-hooks';\nimport {\n  createGroupChannelCreateFragment,\n  createGroupChannelFragment,\n  createGroupChannelListFragment,\n} from '@sendbird/uikit-react-native';\n\nconst GroupChannelListFragment = createGroupChannelListFragment();\nconst GroupChannelCreateFragment = createGroupChannelCreateFragment();\nconst GroupChannelFragment = createGroupChannelFragment();\n\nconst GroupChannelListScreen = () => {\n  const navigation = useNavigation<any>();\n  return (\n    <GroupChannelListFragment\n      onPressCreateChannel={(channelType) => {\n        // Navigate to GroupChannelCreate function.\n        navigation.navigate('GroupChannelCreate', { channelType });\n      }}\n      onPressChannel={(channel) => {\n        // Navigate to GroupChannel function.\n        navigation.navigate('GroupChannel', { channelUrl: channel.url });\n      }}\n    />\n  );\n};\n\nconst GroupChannelCreateScreen = () => {\n  const navigation = useNavigation<any>();\n\n  return (\n    <GroupChannelCreateFragment\n      onCreateChannel={async (channel) => {\n        // Navigate to GroupChannel function.\n        navigation.replace('GroupChannel', { channelUrl: channel.url });\n      }}\n      onPressHeaderLeft={() => {\n        // Go back to the previous screen.\n        navigation.goBack();\n      }}\n    />\n  );\n};\n\nconst GroupChannelScreen = () => {\n  const navigation = useNavigation<any>();\n  const { params } = useRoute<any>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <GroupChannelFragment\n      channel={channel}\n      onChannelDeleted={() => {\n        // Navigate to GroupChannelList function.\n        navigation.navigate('GroupChannelList');\n      }}\n      onPressHeaderLeft={() => {\n        // Go back to the previous screen.\n        navigation.goBack();\n      }}\n      onPressHeaderRight={() => {\n        // Navigate to GroupChannelSettings function.\n        navigation.navigate('GroupChannelSettings', { channelUrl: params.channelUrl });\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up React Navigation with Sendbird UIKit in React Native\nDESCRIPTION: This snippet demonstrates how to set up React Navigation with Sendbird UIKit components. It includes a sign-in screen, navigation structure, and the main app component wrapped in SendbirdUIKitContainer. It also shows how to use Sendbird hooks for user authentication and connection management.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nimport { SendbirdUIKitContainer, useConnection, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nconst RootStack = createNativeStackNavigator();\nconst SignInScreen = () => {\n  const { connect } = useConnection();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Pressable\n        style={{\n          width: 120,\n          height: 30,\n          backgroundColor: '#742DDD',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n        onPress={() => connect('USER_ID', { nickname: 'NICKNAME' })}\n      >\n        <Text>{'Sign in'}</Text>\n      </Pressable>\n    </View>\n  );\n};\n\nconst Navigation = () => {\n  const { currentUser } = useSendbirdChat();\n\n  return (\n    <NavigationContainer>\n      <RootStack.Navigator screenOptions={{ headerShown: false }}>\n        {!currentUser ? (\n          <RootStack.Screen name={'SignIn'} component={SignInScreen} />\n        ) : (\n          <>\n            <RootStack.Screen name={'GroupChannelList'} component={GroupChannelListScreen} />\n            <RootStack.Screen name={'GroupChannelCreate'} component={GroupChannelCreateScreen} />\n            <RootStack.Screen name={'GroupChannel'} component={GroupChannelScreen} />\n          </>\n        )}\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nconst App = () => {\n  return (\n    <SendbirdUIKitContainer\n      appId={APP_ID}\n      platformServices={{\n        file: FileService,\n        notification: NotificationService,\n        clipboard: ClipboardService,\n        media: MediaService,\n        recorder: RecorderService,\n        player: PlayerService,\n      }}\n    >\n      <Navigation />\n    </SendbirdUIKitContainer>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating SendbirdUIKitContainer with Platform Services - React Native - TSX\nDESCRIPTION: Demonstrates setting up SendbirdUIKitContainer in a React Native app, providing App ID and specifying chatOptions for local storage using MMKV. Platform services (file, notification, clipboard, media, recorder, player) are passed as props, enabling full platform feature integration. Requires all services to be implemented and initialized prior to passing. Returns rendered UIKit container.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  return (\n    <SendbirdUIKitContainer\n      appId={'APP_ID'}\n      chatOptions={{\n        localCacheStorage: MMKV,\n      }}\n      platformServices={{\n        file: FileService,\n        notification: NotificationService,\n        clipboard: ClipboardService,\n        media: MediaService,\n        recorder: RecorderService,\n        player: PlayerService,\n      }}\n    >\n      {/* ... */}\n    </SendbirdUIKitContainer>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Constructing Platform Services with Native Modules - React Native - TypeScript\nDESCRIPTION: Defines and initializes a platformServices object using multiple helper functions and native modules. Each service (clipboard, notification, file, media, player, recorder) is constructed with the corresponding native implementation. Dependencies include a variety of native React Native modules (Clipboard, CameraRoll, RNFBMessaging, etc). The constructed object is used as a prop for SendbirdUIKitContainer.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport Clipboard from '@react-native-clipboard/clipboard';\nimport { CameraRoll } from '@react-native-camera-roll/camera-roll';\nimport RNFBMessaging from '@react-native-firebase/messaging';\nimport Video from 'react-native-video';\nimport * as DocumentPicker from '@react-native-documents/picker';\nimport * as FileAccess from 'react-native-file-access';\nimport * as ImagePicker from 'react-native-image-picker';\nimport * as Permissions from 'react-native-permissions';\nimport * as CreateThumbnail from 'react-native-create-thumbnail';\nimport * as ImageResizer from '@bam.tech/react-native-image-resizer';\nimport * as AudioRecorderPlayer from 'react-native-audio-recorder-player';\n\nconst nativePlatformServices = {\n  clipboard: createNativeClipboardService(Clipboard),\n  notification: createNativeNotificationService({\n    messagingModule: RNFBMessaging,\n    permissionModule: Permissions,\n  }),\n  file: createNativeFileService({\n    imagePickerModule: ImagePicker,\n    documentPickerModule: DocumentPicker,\n    permissionModule: Permissions,\n    fsModule: FileAccess,\n    mediaLibraryModule: CameraRoll,\n  }),\n  media: createNativeMediaService({\n    VideoComponent: Video,\n    thumbnailModule: CreateThumbnail,\n    imageResizerModule: ImageResizer,\n  }),\n  player: createNativePlayerService({\n    audioRecorderModule: AudioRecorderPlayer,\n    permissionModule: Permissions,\n  }),\n  recorder: createNativeRecorderService({\n    audioRecorderModule: AudioRecorderPlayer,\n    permissionModule: Permissions,\n  }),\n};\n\n```\n\n----------------------------------------\n\nTITLE: Constructing Platform Services with Expo Modules - React Native - TypeScript\nDESCRIPTION: Illustrates assembling Expo-based platform services with helper functions for Sendbird UIKit in React Native. Imports all required Expo modules, then creates the expoPlatformServices object by initializing clipboard, notification, file, media, player, and recorder helpers with their respective modules. Pass the object to the UIKit container.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport * as ExpoClipboard from 'expo-clipboard';\nimport * as ExpoDocumentPicker from 'expo-document-picker';\nimport * as ExpoFS from 'expo-file-system';\nimport * as ExpoImagePicker from 'expo-image-picker';\nimport * as ExpoMediaLibrary from 'expo-media-library';\nimport * as ExpoNotifications from 'expo-notifications';\nimport * as ExpoAV from 'expo-av';\nimport * as ExpoVideoThumbnail from 'expo-video-thumbnails';\nimport * as ExpoImageManipulator from 'expo-image-manipulator';\n\nconst expoPlatformServices = {\n  clipboard: createExpoClipboardService(ExpoClipboard),\n  notification: createExpoNotificationService(ExpoNotifications),\n  file: createExpoFileService({\n    fsModule: ExpoFS,\n    imagePickerModule: ExpoImagePicker,\n    mediaLibraryModule: ExpoMediaLibrary,\n    documentPickerModule: ExpoDocumentPicker,\n  }),\n  media: createExpoMediaService({\n    avModule: ExpoAV,\n    thumbnailModule: ExpoVideoThumbnail,\n    imageManipulator: ExpoImageManipulator,\n    fsModule: ExpoFS,\n  }),\n  player: createExpoPlayerService({\n    avModule: ExpoAV,\n  }),\n  recorder: createExpoRecorderService({\n    avModule: ExpoAV,\n  }),\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Cache with MMKV - Sendbird UIKit - React Native - TSX\nDESCRIPTION: Demonstrates using MMKV for local caching with SendbirdUIKitContainer. Instantiates an MMKV object and passes it to the chatOptions prop. Enhances performance for storing chat data; MMKV must be installed and linked prior.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MMKV } from 'react-native-mmkv';\n\nimport { SendbirdUIKitContainer } from '@sendbird/uikit-react-native';\n\nconst mmkv = new MMKV();\nconst App = () => {\n  return <SendbirdUIKitContainer chatOptions={{ localCacheStorage: mmkv }}>{/* ... */}</SendbirdUIKitContainer>;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Installing Sendbird UIKit and Peer Dependencies - React Native - Shell\nDESCRIPTION: Installs Sendbird UIKit for React Native along with required peer dependencies using npm. Packages include chat SDK, date utilities, safe-area context, network info, and local storage (MMKV). Ensure you're in the project root before running. For RN < 0.71, install @sendbird/react-native-scrollview-enhancer as well.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @sendbird/uikit-react-native \\\n            @sendbird/chat \\\n            date-fns \\\n            react-native-safe-area-context \\\n            @react-native-community/netinfo \\\n            react-native-mmkv\n\n```\n\n----------------------------------------\n\nTITLE: Installing Node Modules for UIKit with Yarn - Shell Script\nDESCRIPTION: This shell command installs all required node modules for the React-Native UIKit project using Yarn package manager. Yarn v1 is a prerequisite. The command resolves dependencies as listed in the project's package.json, preparing the development environment. It should be executed from the repository root.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for Sample App Native Modules - Shell Script\nDESCRIPTION: This shell command links and installs any required native iOS modules for the sample app using a custom Yarn script ('sample:pod-install'). This command should be run from the project root, and requires CocoaPods and Yarn to be installed. It automates native dependency integration for iOS builds.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn sample:pod-install\n```\n\n----------------------------------------\n\nTITLE: Running Sample App on Android - Shell Script\nDESCRIPTION: Runs the sample chat application on an Android emulator or device. This command invokes the custom 'sample:android' Yarn script, which builds and launches the app. Prerequisites include Android Studio and an emulator or connected device, as well as all dependencies installed beforehand.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn sample:android\n```\n\n----------------------------------------\n\nTITLE: Running Sample App on iOS - Shell Script\nDESCRIPTION: Runs the sample chat application on an iOS simulator or device using Yarn. This invokes the 'sample:ios' custom Yarn script, building and deploying the app using XCode and required native dependencies. XCode and CocoaPods must be set up on the system.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn sample:ios\n```\n\n----------------------------------------\n\nTITLE: Sample App Sendbird App ID Environment Setup - TypeScript\nDESCRIPTION: Defines and exports a constant app ID for Sendbird integration within the sample app's environment configuration file (env.ts). The exported APP_ID is used by the application to authenticate and connect to Sendbird services. No external dependencies except TypeScript are required, but a valid app ID (string) is necessary for connecting to your Sendbird instance.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const APP_ID = '2D7B4CDB-932F-4082-9B09-A1153792DC8D';\n```\n\n----------------------------------------\n\nTITLE: Creating New Key Function Domain in UIKit - Shell Script\nDESCRIPTION: This shell command invokes a Yarn workspace script to generate new key function files (domains) within the UIKit source. When run, it prompts for a domain name in lower camel case (e.g., groupChannel) and automatically scaffolds files in the appropriate source directory. Dependent on Yarn workspaces and project-specific codegen tooling.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn workspace @sendbird/uikit-react-native run create-domain\n```\n\n----------------------------------------\n\nTITLE: Installing Native Helper Dependencies for React Native CLI - Shell\nDESCRIPTION: Installs various native helper modules required for implementing platform services in React Native apps with UIKit. Includes modules for video, permissions, file access, image/document picking, notification, and media processing. After installation, run npx pod-install for iOS linking.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-native-video \\\n            react-native-permissions \\\n            react-native-file-access \\\n            react-native-image-picker \\\n            react-native-document-picker \\\n            react-native-create-thumbnail \\\n            react-native-audio-recorder-player \\\n            @react-native-clipboard/clipboard \\\n            @react-native-camera-roll/camera-roll \\\n            @react-native-firebase/app \\\n            @react-native-firebase/messaging \\\n            @bam.tech/react-native-image-resizer\n\nnpx pod-install\n\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Helper Dependencies for Expo CLI - Shell\nDESCRIPTION: Installs relevant Expo packages needed to implement platform services in Sendbird UIKit using the Expo CLI. This includes clipboard, notifications, media, AV, file system, and image manipulation helpers. Run in project root. No pod installation needed for Expo workflow.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nexpo install expo-image-picker \\\n             expo-document-picker \\\n             expo-media-library \\\n             expo-file-system \\\n             expo-clipboard \\\n             expo-notifications \\\n             expo-av \\\n             expo-video-thumbnails \\\n             expo-image-manipulator\n\n```\n\n----------------------------------------\n\nTITLE: Installing MMKV for Local Caching - React Native - Shell\nDESCRIPTION: Installs react-native-mmkv for local storage and caching in the React Native app, then links native code with CocoaPods for iOS. Required to enable offline and optimized chat data storage for Sendbird UIKit.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm i react-native-mmkv\nnpx pod-install\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Application Permissions - AndroidManifest - XML\nDESCRIPTION: Specifies required Android permissions in the manifest for features like voice, camera, attachments, and notifications. Place this XML block inside android/app/src/main/AndroidManifest.xml. Adjust package and permission lines as needed for your project and Android version constraints.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.your.app\">\n\n    <!-- Permissions for voice message -->\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n\n    <!-- Permissions for attachments -->\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" android:maxSdkVersion=\"32\" />\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" android:maxSdkVersion=\"28\" />\n    <uses-permission android:name=\"android.permission.CAMERA\" />\n\n    <!-- Permissions for notifications (Android 13+) -->\n    <uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\" />\n\n</manifest>\n\n```\n\n----------------------------------------\n\nTITLE: Linking Native Modules with Pod Installation - React Native - Shell\nDESCRIPTION: Links native dependencies for iOS using CocoaPods with the pod-install script via npx. This ensures all native modules are properly included in the iOS build. Prerequisite: Run after installing dependencies for iOS projects.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx pod-install\n\n```\n\n----------------------------------------\n\nTITLE: Installing Sendbird UIKit Requisite Packages via npm - Shell Script\nDESCRIPTION: Installs the core @sendbird/uikit-react-native-foundation package and its direct dependency react-native-safe-area-context. Requires Node.js and npm to be installed. This command should be run in your React Native project directory. Upon completion, both packages will be added to your project's node_modules and package.json.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native-foundation/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @sendbird/uikit-react-native-foundation react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Installing Optional react-native-fast-image Dependency - Shell Script\nDESCRIPTION: Optionally adds react-native-fast-image for improved image rendering in place of the default Image component. This command requires npm and assumes you want enhanced image loading and caching. It should be run in your project directory and will add fast-image to your dependencies without removing the standard image functionality.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native-foundation/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i react-native-fast-image\n```\n\n----------------------------------------\n\nTITLE: Installing Sendbird UIKit Utils with NPM - Shell\nDESCRIPTION: This shell snippet demonstrates how to install the @sendbird/uikit-utils package via npm. It assumes npm is already installed in the project environment. This utility package is a dependency for Sendbird UIKit for React Native, and the command adds it to the current project. No additional parameters are needed, and if used outside the intended context, support is not guaranteed.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-utils/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @sendbird/uikit-utils\n```\n\n----------------------------------------\n\nTITLE: Installing Sendbird UIKit Chat Hooks Dependencies with NPM (Shell)\nDESCRIPTION: This shell snippet demonstrates how to install the @sendbird/uikit-chat-hooks and @sendbird/chat packages via npm for integrating Sendbird chat features in a React Native environment. No additional prerequisites beyond Node.js and npm are required. Executes installation by fetching and adding the specified dependencies to the project, intended for projects that use UIKit for React-Native.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-chat-hooks/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @sendbird/uikit-chat-hooks @sendbird/chat\n```\n\n----------------------------------------\n\nTITLE: Installing Node Modules with Yarn\nDESCRIPTION: Command to install required node modules for the project using Yarn package manager.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/sample/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Native Pod Dependencies\nDESCRIPTION: Command to install and link native iOS pod dependencies using pod-install.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/sample/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Running Android Application\nDESCRIPTION: Command to start the React Native application on Android platform.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/sample/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Running iOS Application\nDESCRIPTION: Command to start the React Native application on iOS platform.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/sample/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Sendbird App ID\nDESCRIPTION: TypeScript configuration for setting up the Sendbird application ID in the environment file.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/sample/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const APP_ID = '2D7B4CDB-932F-4082-9B09-A1153792DC8D';\n```\n\n----------------------------------------\n\nTITLE: Adding/Removing Dependencies to Packages and Root - Shell Script\nDESCRIPTION: Provides command templates for adding or removing dependencies to a specific workspace package or the root. Uses Yarn workspace management features, allowing scoped installation or removal of packages. Requires Yarn v1 workspaces setup. Parameters like '@sendbird/package' and 'package-name' must be replaced per use case.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Add dependency to specific workspace package\nyarn workspace @sendbird/package add package-name\n# Remove dependency from specific workspace package\nyarn workspace @sendbird/package remove package-name\n\n# Add dependency to root\nyarn -W add package-name\n```\n\n----------------------------------------\n\nTITLE: Bumping Monorepo Versions - Lerna/Yarn Shell Script\nDESCRIPTION: Commands to increment (major, minor, patch) package versions across the monorepo using Lerna or custom Yarn scripts. Options like --no-git-tag-version and --no-private control git tagging and handling of private packages, respectively. Lerna must be present in dev dependencies. Accepts the target release type as a parameter.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nlerna version {major|minor|patch} [--no-git-tag-version] [--no-private]\n\n# or\n\nyarn bump:{major|minor|patch}\n```\n\n----------------------------------------\n\nTITLE: Building the Project - Shell Script\nDESCRIPTION: Executes the build process for the Sendbird UIKit React-Native project using Yarn. Compiles all packages and prepares build artifacts. Should be run from the project root after ensuring all dependencies are installed. No additional parameters required.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests - Shell Script\nDESCRIPTION: Includes commands for running unit tests and build tests across the codebase. Uses Yarn scripts ('test' for unit tests, 'test:build' for build integration tests). Ensures code correctness and build process integrity. Jest or a similar test runner should be configured as a dependency.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# Unit test\nyarn test\n\n# Build test\nyarn test:build\n```\n\n----------------------------------------\n\nTITLE: Linting and Code Formatting - Shell Script\nDESCRIPTION: Commands for checking and fixing project-wide code formatting using Yarn scripts ('lint' and 'fix'). Helps maintain consistent code style and can auto-correct simple format issues. Prerequisites include configured linter and formatter (e.g., ESLint, Prettier) as dev dependencies.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n# Check formatting\nyarn lint\n\n# Fix formatting\nyarn fix\n```\n\n----------------------------------------\n\nTITLE: Initializing New React Native Project with TypeScript Template - React Native - Shell\nDESCRIPTION: Initializes a new React Native project named 'ChatApp' with the TypeScript template using the React Native CLI. This command scaffolds the boilerplate files, structuring the project for immediate development in TypeScript. Prerequisite: Ensure npx and Node.js are installed before running; the argument --template ensures TypeScript support.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx react-native init ChatApp --template=react-native-template-typescript\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Branch with Git - Bash\nDESCRIPTION: This snippet demonstrates how to create a new release branch using git in bash. The release branch name follows the 'release/X.Y.Z' naming convention, where X.Y.Z represents the release version number. This prepares the repository for isolated release-specific changes.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/RELEASE_GUIDE.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b release/X.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Release Changes with Git - Bash\nDESCRIPTION: This snippet shows the commands to stage all changes, commit them with a meaningful message, and push the release branch to the remote repository using git in bash. Proper commit messages (here: 'chore: update changelog draft') help with release automation and changelog generation. It assumes an active release branch and requires remote access permissions.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/RELEASE_GUIDE.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"chore: update changelog draft\"\ngit push origin release/X.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools via Shell Script\nDESCRIPTION: Installs the latest Xcode command line tools using the xcode-select utility. This command is a prerequisite for iOS development on macOS, ensuring all subsequent build or deployment tasks have the required system dependencies present. Executing this script will prompt for installation if the tools are not yet installed.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/sample/ios/fastlane/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Deploying iOS Build to TestFlight with Fastlane using Shell Script\nDESCRIPTION: Executes the Fastlane lane \"deploy\" for the iOS platform, with optional bundler integration, to automate building and uploading the app to TestFlight. Requires Fastlane and its dependencies to be installed. Parameters are handled by the Fastlane configuration; input is the command invocation, and the output is a TestFlight build deployment.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/sample/ios/fastlane/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools using Shell Script\nDESCRIPTION: This snippet shows how to install the latest version of Xcode command line tools using a shell command. No external package dependencies are required beyond having macOS with terminal access. Run this command prior to Fastlane installation to ensure all OS-level development tools are available. The command triggers a system installer for developer tools; it requires appropriate permissions and an internet connection.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/sample/android/fastlane/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Android Build with Fastlane Shell Command\nDESCRIPTION: This snippet illustrates running a shell command to deploy an Android build to Firebase distribution using Fastlane. If 'bundle exec' is included, it ensures the correct Ruby environment is used. This command assumes Fastlane is correctly installed and configured within the project, and that requisite authentication and Firebase configuration are completed. The output is a distributed Android build, typically sent to testers or stakeholders via Firebase App Distribution. Ensure all environment variables and credentials are properly set before executing.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/sample/android/fastlane/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android deploy\n\n```\n\n----------------------------------------\n\nTITLE: Adding Guard to useGroupChannelListWithQuery Initialization\nDESCRIPTION: This commit adds a guard condition to the initialization of useGroupChannelListWithQuery hook to prevent potential errors.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-chat-hooks/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n5ec16d927dd1381bb9c2c8cdafc8f7b614cdded5\n```\n\n----------------------------------------\n\nTITLE: Fixing Incorrect Condition in Chat Hooks\nDESCRIPTION: This commit corrects a wrong if condition in the chat hooks, improving the logic flow.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-chat-hooks/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n4f93e6c5fde4e4e3c26b214934d9c115f3ce452b\n```\n\n----------------------------------------\n\nTITLE: Enhancing PubSub Functionality in Utils\nDESCRIPTION: This commit improves the publish-subscribe (PubSub) functionality in the utils module, enhancing event handling and communication.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-chat-hooks/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n2006249e34777293b04dd06f9186cf1436298c6e\n```\n\n----------------------------------------\n\nTITLE: Implementing Channel Menu in Group Channel List\nDESCRIPTION: This feature adds a channel menu to the group channel list, providing more options and functionality for channel management.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-chat-hooks/CHANGELOG.md#_snippet_3\n\nLANGUAGE: React Native\nCODE:\n```\ndebb6d8144c598eb50a124daa5d49641d4bbf1f1\n```\n\n----------------------------------------\n\nTITLE: Implementing Send Message and File Pick Flow\nDESCRIPTION: This feature implements the flow for sending messages and picking files, enhancing the messaging capabilities of the UIKit.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-chat-hooks/CHANGELOG.md#_snippet_4\n\nLANGUAGE: React Native\nCODE:\n```\n2cc40f895b59764bd74e8f27513ebb7131721ca1\n```\n\n----------------------------------------\n\nTITLE: Version Updates Changelog Entry\nDESCRIPTION: A markdown formatted changelog entry documenting RTL support features and bug fixes in version 3.8.0\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native-foundation/CHANGELOG.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- apply direction to text ui layout ([09f0bef])\n- apply rtl support to open channel fragments ([ed9b5b5])\n- apply rtl to channel preview component ([1e1e930])\n- apply rtl to icon component ([56c2793])\n- change left to start and right to end in styles ([6ffb896])\n- support rtl to text and text input ([ee4a0c8])\n\n### Bug Fixes\n\n- apply LRM,RLM properly for mention direction ([7c7a751])\n- ensure text aligns center regardless of RTL setting ([89401bb])\n```\n\n----------------------------------------\n\nTITLE: Git Commit - Reaction UI Color\nDESCRIPTION: Commit hash adding reaction UI color to the foundation package\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native-foundation/CHANGELOG.md#_snippet_1\n\nLANGUAGE: git\nCODE:\n```\n5b272e57bbec5ece4bbcdaecb88fddd5ec3759f4\n```\n\n----------------------------------------\n\nTITLE: Git Commit - Profile Card UI\nDESCRIPTION: Commit hash adding profile card UI components to the foundation package\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native-foundation/CHANGELOG.md#_snippet_2\n\nLANGUAGE: git\nCODE:\n```\n472f02f064cbad416661cf49e90c4c9509eb1a4c\n```\n\n----------------------------------------\n\nTITLE: Git Commit - Toast Position Fix\nDESCRIPTION: Commit hash fixing position of toast when keyboard is up on iOS\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native-foundation/CHANGELOG.md#_snippet_3\n\nLANGUAGE: git\nCODE:\n```\nbc98b4f417fc2e784276148078ca02156ef0fb14\n```\n\n----------------------------------------\n\nTITLE: (Deprecated) Using AsyncStorage for Local Caching - Sendbird UIKit - React Native - TSX\nDESCRIPTION: Provides an alternative, deprecated example of using AsyncStorage for SendbirdUIKitContainer caching. Imports AsyncStorage and assigns it to chatOptions.localCacheStorage. MMKV is recommended moving forward for better performance and future compatibility.\nSOURCE: https://github.com/sendbird/sendbird-uikit-react-native/blob/main/packages/uikit-react-native/README.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AsyncStorage } from '@react-native-async-storage/async-storage';\n\nimport { SendbirdUIKitContainer } from '@sendbird/uikit-react-native';\n\nconst App = () => {\n  return <SendbirdUIKitContainer chatOptions={{ localCacheStorage: AsyncStorage }}>{/* ... */}</SendbirdUIKitContainer>;\n};\n\n```"
  }
]