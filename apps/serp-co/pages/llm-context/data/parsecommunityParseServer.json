[
  {
    "owner": "parse-community",
    "repo": "parse-server",
    "content": "TITLE: Integrating Parse Server with Express.js\nDESCRIPTION: JavaScript code showing how to create a Parse Server instance and mount it on an Express application. This example demonstrates server initialization, configuration, and starting the Express server.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst express = require('express');\nconst ParseServer = require('parse-server').ParseServer;\nconst app = express();\n\nconst server = new ParseServer({\n  databaseURI: 'mongodb://localhost:27017/dev', // Connection string for your MongoDB database\n  cloud: './cloud/main.js', // Path to your Cloud Code\n  appId: 'myAppId',\n  masterKey: 'myMasterKey', // Keep this key secret!\n  fileKey: 'optionalFileKey',\n  serverURL: 'http://localhost:1337/parse' // Don't forget to change to https if needed\n});\n\n// Start server\nawait server.start();\n\n// Serve the Parse API on the /parse URL prefix\napp.use('/parse', server.app);\n\napp.listen(1337, function() {\n  console.log('parse-server-example running on port 1337.');\n});\n```\n\n----------------------------------------\n\nTITLE: Running Parse Server as a Docker Container\nDESCRIPTION: Command to run Parse Server in a Docker container linked to a MongoDB instance with volume mounting for configuration and port mapping.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name my-parse-server -v config-vol:/parse-server/config -p 1337:1337 --link my-mongo:mongo -d parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://mongo/test\n```\n\n----------------------------------------\n\nTITLE: Installing Parse Server Locally using npm\nDESCRIPTION: Commands to install Parse Server globally via npm, start a MongoDB instance, and run Parse Server with basic configuration parameters.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g parse-server mongodb-runner\n$ mongodb-runner start\n$ parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://localhost/test\n```\n\n----------------------------------------\n\nTITLE: Implementing Parse Server with GraphQL in Express.js\nDESCRIPTION: JavaScript code to set up Parse Server with GraphQL API in an Express.js application, including configuration for both REST and GraphQL endpoints.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst express = require('express');\nconst { ParseServer, ParseGraphQLServer } = require('parse-server');\n\nconst app = express();\n\nconst parseServer = new ParseServer({\n  databaseURI: 'mongodb://localhost:27017/test',\n  appId: 'APPLICATION_ID',\n  masterKey: 'MASTER_KEY',\n  serverURL: 'http://localhost:1337/parse',\n  publicServerURL: 'http://localhost:1337/parse'\n});\n\nconst parseGraphQLServer = new ParseGraphQLServer(\n  parseServer,\n  {\n    graphQLPath: '/graphql',\n    playgroundPath: '/playground'\n  }\n);\n\napp.use('/parse', parseServer.app); // (Optional) Mounts the REST API\nparseGraphQLServer.applyGraphQL(app); // Mounts the GraphQL API\nparseGraphQLServer.applyPlayground(app); // (Optional) Mounts the GraphQL Playground - do NOT use in Production\n\nawait parseServer.start();\napp.listen(1337, function() {\n  console.log('REST API running on http://localhost:1337/parse');\n  console.log('GraphQL API running on http://localhost:1337/graphql');\n  console.log('GraphQL Playground running on http://localhost:1337/playground');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Verification in Parse Server\nDESCRIPTION: Configuration example for setting up email verification in Parse Server using a mail adapter. Includes settings for verification token validity and email adapter configuration.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = ParseServer({\n  ...otherOptions,\n\n  // Enable email verification\n  verifyUserEmails: true,\n\n  // Set email verification token validity to 2 hours\n  emailVerifyTokenValidityDuration: 2 * 60 * 60,\n\n  // Set email adapter\n  emailAdapter: {\n    module: 'example-mail-adapter',\n    options: {\n      // Additional adapter options\n      ...mailAdapterOptions\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Parse Server Docker Image with GraphQL\nDESCRIPTION: Docker command to run Parse Server with GraphQL support, linking it to a MongoDB container and exposing the necessary ports.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name my-parse-server --link my-mongo:mongo -v config-vol:/parse-server/config -p 1337:1337 -d parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://mongo/test --publicServerURL http://localhost:1337/parse --mountGraphQL --mountPlayground\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Routes in Parse Server\nDESCRIPTION: Example of creating custom routes in Parse Server with page handling and custom logic implementation.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new ParseServer({\n  ...otherOptions,\n\n  pages: {\n    enableRouter: true,\n    customRoutes: [{\n      method: 'GET',\n      path: 'custom_route',\n      handler: async request => {\n        // custom logic\n        // ...\n        // then, depending on the outcome, return a HTML file as response\n        return { file: 'custom_page.html' };\n      }\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parse Server 6 Asynchronous Initialization\nDESCRIPTION: New initialization process for Parse Server 6 requiring async startup before mounting the express middleware.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/6.0.0.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. Import Parse Server\nconst ParseServer = require('parse-server');\n\n// 2. Create a Parse Server instance\nconst server = new ParseServer(config);\n\n// 3. Start up Parse Server asynchronously\nawait server.start();\n\n// 4. Mount express middleware\napp.use(\"/parse\", server.app);\n```\n\n----------------------------------------\n\nTITLE: Setting Password and Account Policy in Parse Server\nDESCRIPTION: Configuration for implementing password and account security policies including account lockout rules and password complexity requirements.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = ParseServer({\n  ...otherOptions,\n\n  // The account lock policy\n  accountLockout: {\n    // Lock the account for 5 minutes.\n    duration: 5,\n    // Lock an account after 3 failed log-in attempts\n    threshold: 3,\n    // Unlock the account after a successful password reset\n    unlockOnPasswordReset: true,\n  },\n\n  // The password policy\n  passwordPolicy: {\n    // Enforce a password of at least 8 characters which contain at least 1 lower case, 1 upper case and 1 digit\n    validatorPattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/,\n    // Do not allow the username as part of the password\n    doNotAllowUsername: true,\n    // Do not allow to re-use the last 5 passwords when setting a new password\n    maxPasswordHistory: 5,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables with Parse Server\nDESCRIPTION: Example of configuring Parse Server using environment variables including port configuration.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nPORT\nPARSE_SERVER_APPLICATION_ID\nPARSE_SERVER_MASTER_KEY\nPARSE_SERVER_DATABASE_URI\nPARSE_SERVER_URL\nPARSE_SERVER_CLOUD\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ PORT=8080 parse-server --appId APPLICATION_ID --masterKey MASTER_KEY\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cloud Function for a GraphQL Query in Parse Server\nDESCRIPTION: Defines a Parse Cloud function named 'hello' that returns a simple string. This function will be resolved when the GraphQL query 'hello' is executed.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nParse.Cloud.define('hello', async () => {\n  return 'Hello world!';\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Cloud Code Triggers beforeLogin and afterLogin in JavaScript\nDESCRIPTION: This enhancement adds context to the Cloud Code Triggers beforeLogin and afterLogin, providing more information during the login process.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeLogin(async (request) => { /* context available in request */ });\nParse.Cloud.afterLogin(async (request) => { /* context available in request */ });\n```\n\n----------------------------------------\n\nTITLE: Executing a Custom GraphQL Query with Parse Server\nDESCRIPTION: Shows how to execute the custom 'hello' query using GraphQL Playground. This query requests the result of the hello Cloud function.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_35\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hello\n}\n```\n\n----------------------------------------\n\nTITLE: Parse Cloud Code File Trigger Syntax\nDESCRIPTION: Updated syntax for Cloud Code file triggers that aligns with object trigger syntax.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_alpha.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeDelete(Parse.File, (request) => {\n  // File trigger logic\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Object Creation Mutation\nDESCRIPTION: GraphQL mutation to create a new object in the GameScore class with player name, score, and cheat mode fields, returning all object fields including system fields.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateGameScore {\n  createGameScore(\n    fields: {\n      playerName: \"Sean Plott\"\n      score: 1337\n      cheatMode: false\n    }\n  ) {\n    id\n    updatedAt\n    createdAt\n    playerName\n    score\n    cheatMode\n    ACL\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Parse Server with Docker\nDESCRIPTION: Commands to clone the Parse Server repository, build a Docker image, and run a MongoDB container for the database backend.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/parse-community/parse-server\n$ cd parse-server\n$ docker build --tag parse-server .\n$ docker run --name my-mongo -d mongo\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fetching Objects\nDESCRIPTION: GraphQL query to retrieve all objects from the GameScore class, returning the complete object data including system and custom fields.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\nquery GameScores {\n  gameScores {\n    results {\n      id\n      updatedAt\n      createdAt\n      playerName\n      score\n      cheatMode\n      ACL\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cloud Code File Trigger Syntax in JavaScript\nDESCRIPTION: The syntax for Cloud Code file triggers has been updated to align with object trigger syntax. This example shows the new syntax for the beforeDeleteFile trigger.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_beta.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nParse.Cloud.beforeDelete(Parse.File, (request) => {})\n```\n\n----------------------------------------\n\nTITLE: Accessing Parse Server Config in Cloud Code\nDESCRIPTION: New feature allowing access to Parse Server configuration in Cloud Code via Parse.Server property. Introduced in version 5.3.0-alpha.32.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_alpha.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Server\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Pages in Parse Server\nDESCRIPTION: Configuration for customizing default pages and redirecting users to custom URLs for various system actions.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = ParseServer({\n  ...otherOptions,\n\n  customPages: {\n    passwordResetSuccess: \"http://yourapp.com/passwordResetSuccess\",\n    verifyEmailSuccess: \"http://yourapp.com/verifyEmailSuccess\",\n    parseFrameURL: \"http://yourapp.com/parseFrameURL\",\n    linkSendSuccess: \"http://yourapp.com/linkSendSuccess\",\n    linkSendFail: \"http://yourapp.com/linkSendFail\",\n    invalidLink: \"http://yourapp.com/invalidLink\",\n    invalidVerificationLink: \"http://yourapp.com/invalidVerificationLink\",\n    choosePassword: \"http://yourapp.com/choosePassword\"\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Parse Server Multiple Origins Configuration\nDESCRIPTION: Configuration to allow multiple origins for Access-Control-Allow-Origin header.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncorsOrigin: ['http://localhost:1337', 'https://example.com']\n```\n\n----------------------------------------\n\nTITLE: Running Parse GraphQL API via CLI\nDESCRIPTION: Commands to install dependencies, start MongoDB, and run Parse Server with GraphQL capabilities using the command line interface.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g parse-server mongodb-runner\n$ mongodb-runner start\n$ parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://localhost/test --publicServerURL http://localhost:1337/parse --mountGraphQL --mountPlayground\n```\n\n----------------------------------------\n\nTITLE: Creating User Session with Installation ID in Parse Server JavaScript\nDESCRIPTION: Shows how to create a user session by passing an installation ID during signup in cloud code when experimental direct access is enabled.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n{installationId: \"xxx-xxx\"}\n```\n\n----------------------------------------\n\nTITLE: Running Parse Server with Custom GraphQL Schema\nDESCRIPTION: Command to start Parse Server with a custom GraphQL schema defined in a schema.graphql file, along with cloud code for resolving custom operations.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n$ parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://localhost/test --publicServerURL http://localhost:1337/parse --cloud ./cloud/main.js --graphQLSchema ./cloud/schema.graphql --mountGraphQL --mountPlayground\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Direct Access in Parse Server JavaScript\nDESCRIPTION: Demonstrates how to enable experimental direct access feature to create user sessions with an installation ID during signup in cloud code.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nPARSE_SERVER_ENABLE_EXPERIMENTAL_DIRECT_ACCESS\n```\n\n----------------------------------------\n\nTITLE: GraphQL Health Check Query\nDESCRIPTION: GraphQL query to check the health status of the Parse GraphQL API, which should return a boolean health indicator.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\nquery Health {\n  health\n}\n```\n\n----------------------------------------\n\nTITLE: Running Parse GraphQL API with Docker\nDESCRIPTION: Commands to clone the Parse Server repository, build a Docker image, and run MongoDB and Parse Server containers with GraphQL support.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/parse-community/parse-server\n$ cd parse-server\n$ docker build --tag parse-server .\n$ docker run --name my-mongo -d mongo\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Function Placeholders in Parse Server\nDESCRIPTION: Example of configuring dynamic function placeholders in Parse Server. This shows how to use an async function to generate placeholder values dynamically, with access to parameters like locale.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new ParseServer({\n  ...otherOptions,\n\n  pages: {\n    enableRouter: true,\n    placeholders: async (params) => {\n      const value = await doSomething(params.locale);\n      return {\n        exampleKey: value\n      };\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Class Creation Mutation\nDESCRIPTION: GraphQL mutation to create a new class in Parse Server with string, number, and boolean fields, returning the class name and schema field types.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateClass {\n  createClass(\n    name: \"GameScore\"\n    schemaFields: {\n      addStrings: [{ name: \"playerName\" }]\n      addNumbers: [{ name: \"score\" }]\n      addBooleans: [{ name: \"cheatMode\" }]\n    }\n  ) {\n    name\n    schemaFields {\n      name\n      __typename\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom GraphQL Query Schema in Parse Server\nDESCRIPTION: Extends the GraphQL schema with a custom query named 'hello' that returns a String. The @resolve directive connects this query to a Parse Cloud function implementation.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_33\n\nLANGUAGE: graphql\nCODE:\n```\n# schema.graphql\nextend type Query {\n  hello: String! @resolve\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response from a Parse Server GraphQL Query\nDESCRIPTION: Shows the expected JSON response format when executing the 'hello' GraphQL query. The response includes a data object containing the result returned by the Cloud function.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"hello\": \"Hello world!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Authentication in Parse Server JavaScript\nDESCRIPTION: Shows how to configure Facebook authentication by specifying app IDs in the auth options. This replaces the deprecated facebookAppIds option.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nauth: { facebook: { appIds: [\"AAAAAAAAA\" ] } }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Object Creation Response\nDESCRIPTION: Example JSON response from the createGameScore mutation showing the created object with its ID, timestamps, and custom field values.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"createGameScore\": {\n      \"id\": \"XN75D94OBD\",\n      \"updatedAt\": \"2019-09-17T06:50:26.357Z\",\n      \"createdAt\": \"2019-09-17T06:50:26.357Z\",\n      \"playerName\": \"Sean Plott\",\n      \"score\": 1337,\n      \"cheatMode\": false,\n      \"ACL\": null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cloud Code File Trigger Syntax in JavaScript\nDESCRIPTION: This change aligns the Cloud Code file trigger syntax with object trigger syntax, updating the way file triggers are defined.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeDelete(Parse.File, (request) => { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Configuring Idempotency Enforcement in Parse Server\nDESCRIPTION: Configuration example for enabling the experimental idempotency enforcement feature in Parse Server. This setup enforces idempotency for all request paths with a TTL of 120 seconds for request IDs.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet api = new ParseServer({\n    idempotencyOptions: {\n        paths: [\".*\"],       // enforce for all requests\n        ttl: 120             // keep request IDs for 120s\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parse Cloud HTTP Request Deprecation\nDESCRIPTION: Deprecated Parse.Cloud.httpRequest method removed in version 6.0.0-alpha.3, requiring switch to third-party HTTP request libraries.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_alpha.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.httpRequest\n```\n\n----------------------------------------\n\nTITLE: Parse User Email Verification Handler\nDESCRIPTION: Updated handler for email verification with additional context parameters including installationId and IP.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_alpha.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nverifyUserEmails: (object, { installationId, ip, resendRequest }) => {\n  // Email verification logic\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Localization in Parse Server\nDESCRIPTION: JavaScript configuration for enabling page localization in Parse Server. This enables the router and localization features needed for serving localized pages based on the client's requested locale.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new ParseServer({\n  ...otherOptions,\n\n  pages: {\n    enableRouter: true,\n    enableLocalization: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Dynamic Placeholders in Parse Server\nDESCRIPTION: Example of configuring static dynamic placeholders in Parse Server. This demonstrates how to define custom placeholders that can be used in pages, independent of localization.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new ParseServer({\n  ...otherOptions,\n\n  pages: {\n    enableRouter: true,\n    placeholders: {\n      exampleKey: 'exampleValue'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parse Server for Page Localization\nDESCRIPTION: Configuration example for enabling localization in Parse Server. It shows how to set up the router, enable localization, specify the path to the JSON resource, and set a fallback locale.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new ParseServer({\n  ...otherOptions,\n\n  pages: {\n    enableRouter: true,\n    enableLocalization: true,\n    localizationJsonPath: './private/localization.json',\n    localizationFallbackLocale: 'en'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parse Server File Extension Restrictions\nDESCRIPTION: Configuration to restrict file uploads by extension, defaulting to exclude HTML files for security.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfileUpload: {\n  fileExtensions: ['^[^hH][^tT][^mM][^lL]?$']\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parse Server Version Property\nDESCRIPTION: Addition of Parse.Server.version property to determine current version of Parse Server in Cloud Code.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Server.version\n```\n\n----------------------------------------\n\nTITLE: Postgres Script for Cleaning Expired Idempotency Records\nDESCRIPTION: Bash script that calls a PostgreSQL function to delete expired idempotency records. This script needs to be scheduled as a cron job to maintain the idempotency feature when using PostgreSQL.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nset -e\npsql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" --dbname \"$POSTGRES_DB\" <<-EOSQL\n    SELECT idempotency_delete_expired_records();\nEOSQL\n\nexec \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Adding Parse.User Parameter to verifyUserEmails and preventLoginWithUnverifiedEmail in JavaScript\nDESCRIPTION: This feature adds Parse.User as a function parameter to the Parse Server options verifyUserEmails and preventLoginWithUnverifiedEmail on login.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nverifyUserEmails: function(user) { /* ... */ },\npreventLoginWithUnverifiedEmail: function(user) { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Adding $setOnInsert Operator to Parse.Server.database.update in JavaScript\nDESCRIPTION: This feature adds the $setOnInsert operator to the Parse.Server.database.update method, allowing for more flexible database updates.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Server.database.update({ $setOnInsert: { field: value } })\n```\n\n----------------------------------------\n\nTITLE: GraphQL Class Creation Response\nDESCRIPTION: Example JSON response from the createClass mutation showing the created GameScore class with its schema fields including default fields like objectId, dates, and ACL.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"createClass\": {\n      \"name\": \"GameScore\",\n      \"schemaFields\": [\n        {\n          \"name\": \"objectId\",\n          \"__typename\": \"SchemaStringField\"\n        },\n        {\n          \"name\": \"updatedAt\",\n          \"__typename\": \"SchemaDateField\"\n        },\n        {\n          \"name\": \"createdAt\",\n          \"__typename\": \"SchemaDateField\"\n        },\n        {\n          \"name\": \"playerName\",\n          \"__typename\": \"SchemaStringField\"\n        },\n        {\n          \"name\": \"score\",\n          \"__typename\": \"SchemaNumberField\"\n        },\n        {\n          \"name\": \"cheatMode\",\n          \"__typename\": \"SchemaBooleanField\"\n        },\n        {\n          \"name\": \"ACL\",\n          \"__typename\": \"SchemaACLField\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Localization with Custom URLs\nDESCRIPTION: Extended configuration example showing how to enable page localization while also defining custom URLs for specific pages like password reset. This demonstrates the combined use of multiple page-related features.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new ParseServer({\n  ...otherOptions,\n\n  pages: {\n    enableRouter: true,\n    enableLocalization: true,\n    customUrls: {\n      passwordReset: 'https://example.com/page.html'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response\nDESCRIPTION: Example JSON response from the gameScores query showing a list of GameScore objects with their complete data.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"gameScores\": {\n      \"results\": [\n        {\n          \"id\": \"XN75D94OBD\",\n          \"updatedAt\": \"2019-09-17T06:50:26.357Z\",\n          \"createdAt\": \"2019-09-17T06:50:26.357Z\",\n          \"playerName\": \"Sean Plott\",\n          \"score\": 1337,\n          \"cheatMode\": false,\n          \"ACL\": null\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Resource for Parse Server Page Localization\nDESCRIPTION: Example of a JSON resource file for localization in Parse Server. It demonstrates the structure for multiple languages and locales, following the i18next syntax.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"en\": {               // resource for language `en` (English)\n    \"translation\": {\n      \"greeting\": \"Hello!\"\n    }\n  },\n  \"de\": {               // resource for language `de` (German)\n    \"translation\": {\n      \"greeting\": \"Hallo!\"\n    }\n  }\n  \"de-AT\": {            // resource for locale `de-AT` (Austrian German)\n    \"translation\": {\n      \"greeting\": \"Servus!\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Directory for Parse Server Page Localization\nDESCRIPTION: Example directory structure for implementing localization in Parse Server pages. It shows the placement of HTML files with placeholders and the JSON resource file containing translations.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nroot/\n├── public/                  // pages base path\n│   ├── example.html         // the page containing placeholders\n├── private/                 // folder outside of public scope\n│   └── translations.json    // JSON resource file\n```\n\n----------------------------------------\n\nTITLE: Cron Job for Postgres Idempotency Maintenance\nDESCRIPTION: Example cron job configuration that runs the idempotency cleanup script every 2 minutes to maintain database performance by removing expired records.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n2 * * * * /root/parse_idempotency_delete_expired_records.sh >/dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Throwing Parse Error Example\nDESCRIPTION: Examples demonstrating how to properly throw Parse Errors with descriptive messages using error codes from Parse.Error.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Parse.Error(Parse.Error.EXAMPLE_ERROR_CODE, 'Example error message.');\n\nthrow new Parse.Error(Parse.Error.FILE_SAVE_ERROR, 'The file could not be saved because it exceeded the maximum allowed file size.');\nthrow new Parse.Error(Parse.Error.FILE_SAVE_ERROR, 'The file could not be saved because the file format was incorrect.');\n```\n\n----------------------------------------\n\nTITLE: Parse Server Health Check Response Format\nDESCRIPTION: JSON response format returned by the Parse Server health check endpoint (/parse/health). This shows the structure of the health status response.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"ok\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Health Check Response\nDESCRIPTION: Example JSON response from the health check query showing a successful health check result.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/README.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"health\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NodeJS Error Handling on Uncaught Exceptions\nDESCRIPTION: New error handling behavior where Node process exits with code 1 on uncaught exceptions, allowing for custom exception handling.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_alpha.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.on('uncaughtException', (err) => {\n  // Process now exits with code 1\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Cloud Code Error Handling for Login/Logout Triggers\nDESCRIPTION: Code change showing error handling in afterLogin and afterLogout Cloud Code triggers. Error handling changed from server crash to rejected promise in version 6.0.0.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_alpha.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.on('unhandledRejection', ...)\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Parse Server Version in Cloud Code\nDESCRIPTION: A new property has been added to access the current version of Parse Server within Cloud Code. This can be useful for version-specific logic or debugging.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_beta.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(Parse.Server.version);\n```\n\n----------------------------------------\n\nTITLE: Parse Server 6 Import Statement Examples\nDESCRIPTION: Updated import syntax for Parse Server 6 showing unified import methods that both return a Parse Server instance.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/6.0.0.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Both return a Parse Server instance\nconst ParseServer = require('parse-server');\nconst { ParseServer } = require('parse-server');\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Parse Server Repository (Shell)\nDESCRIPTION: Instructions for forking, cloning, and setting up the Parse Server project on a local machine. This includes installing dependencies and launching Visual Studio Code.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/parse-community/parse-server\n$ cd parse-server # go into the clone directory\n$ npm install # install all the node dependencies\n$ code . # launch vscode\n$ npm run watch # run babel watching for local file changes\n```\n\n----------------------------------------\n\nTITLE: Parse Server 5 Initialization Example\nDESCRIPTION: Legacy initialization process for Parse Server 5 showing synchronous middleware mounting.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/6.0.0.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. Import Parse Server\nconst { ParseServer } = require('parse-server');\n\n// 2. Create a Parse Server instance as express middleware\nconst server = new ParseServer(config);\n\n// 3. Mount express middleware\napp.use(\"/parse\", server);\n```\n\n----------------------------------------\n\nTITLE: Creating Security Check Group in JavaScript\nDESCRIPTION: Example showing how to create a new security check group class with multiple checks. Demonstrates implementing setName() and setChecks() methods with passing and failing check examples.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass CheckGroupNewCategory extends CheckGroup {\n  setName() {\n    return 'House';\n  }\n  setChecks() {\n    return [\n      new Check({\n        title: 'Door locked',\n        warning: 'Anyone can enter your house.',\n        solution: 'Lock the door.',\n        check: () => {    \n          return;     // Example of a passing check\n        }\n      }),\n      new Check({\n        title: 'Camera online',\n        warning: 'Security camera is offline.',\n        solution: 'Check the camera.',\n        check: async () => {  \n          throw 1;     // Example of a failing check\n        }\n      }),\n    ];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Security Check Group Export\nDESCRIPTION: Example of exporting a new security check group to make it available in the CheckGroups collector.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default as CheckGroupNewCategory } from './CheckGroupNewCategory';\n```\n\n----------------------------------------\n\nTITLE: Running Test Coverage for Parse Server Project\nDESCRIPTION: Command to obtain the test coverage of the Parse Server project. This helps ensure that new pull requests increase test coverage.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run coverage\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Specific File in Parse Server\nDESCRIPTION: Command to run tests for a specific file in the Parse Server project. This is useful when working on changes to a particular file.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test spec/MyFile.spec.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Protocol for Node 14 Compatibility\nDESCRIPTION: Command to configure git to use HTTPS protocol instead of SSH to resolve dependency resolution issues when installing Parse Server on Node 14.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/6.0.0.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo git config --system url.\"https://github\".insteadOf \"ssh://git@github\"\n```\n\n----------------------------------------\n\nTITLE: Linting Parse Server Code\nDESCRIPTION: Command to lint the Parse Server code. This ensures that the code meets the project's style guidelines and won't be rejected by the CI.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Running Parse Server Tests with PostgreSQL\nDESCRIPTION: Command to run Parse Server tests against a PostgreSQL database. This is important for changes that may affect object storage or retrieval.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPARSE_SERVER_TEST_DB=postgres PARSE_SERVER_TEST_DATABASE_URI=postgres://postgres:password@localhost:5432/parse_server_postgres_adapter_test_database npm run testonly\n```\n\n----------------------------------------\n\nTITLE: Installing git in Docker for Parse Server\nDESCRIPTION: A Docker command to install git dependency in Alpine Linux, necessary since git is no longer included in the Parse Server Docker image.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_beta.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRUN apk --no-cache add git\n```\n\n----------------------------------------\n\nTITLE: Launching PostgreSQL with PostGIS for Parse Server Testing\nDESCRIPTION: Docker command to launch a PostgreSQL instance with PostGIS for testing Parse Server. This sets up the necessary database and extensions.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name parse-postgres -p 5432:5432 -e POSTGRES_PASSWORD=password --rm postgis/postgis:17-3.5-alpine && sleep 20 && docker exec -it parse-postgres psql -U postgres -c 'CREATE DATABASE parse_server_postgres_adapter_test_database;' && docker exec -it parse-postgres psql -U postgres -c 'CREATE EXTENSION pgcrypto; CREATE EXTENSION postgis;' -d parse_server_postgres_adapter_test_database && docker exec -it parse-postgres psql -U postgres -c 'CREATE EXTENSION postgis_topology;' -d parse_server_postgres_adapter_test_database\n```\n\n----------------------------------------\n\nTITLE: Parse Server 5 Import Statement Examples\nDESCRIPTION: Legacy import syntax for Parse Server 5 showing two different ways to import the server instance and express middleware.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/6.0.0.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns a Parse Server instance\nconst ParseServer = require('parse-server');\n\n// Returns a Parse Server express middleware\nconst { ParseServer } = require('parse-server');\n```\n\n----------------------------------------\n\nTITLE: Stopping PostgreSQL Docker Container for Parse Server\nDESCRIPTION: Command to stop the PostgreSQL Docker container used for Parse Server testing.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop parse-postgres\n```\n\n----------------------------------------\n\nTITLE: Formatting a Breaking Change Commit Message in Markdown\nDESCRIPTION: Example of how to properly format a commit message that contains a breaking change. This format ensures the breaking change is clearly identified for changelog generation and will trigger a major version increment in repositories with release automation.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n```\nfix: remove handle from door\n\nBREAKING CHANGE: You cannot open the door anymore by using a handle. See the [#migration guide](http://example.com) for more details.\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Git in Docker Container Example\nDESCRIPTION: Example command to install git dependency in a Docker container. This is necessary because the Parse Server Docker image no longer contains git as a transitive dependency.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_9\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN apk --no-cache add git\n```\n\n----------------------------------------\n\nTITLE: Defining Parse Server Dependency Using Git Reference\nDESCRIPTION: Example of how to define a Parse Server dependency using a Git reference to a specific version tag. This approach was mentioned in relation to a security incident where incorrect version tags were pushed to the repository.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\"parse-server\": \"git@github.com:parse-community/parse-server.git#4.9.3\"\n```\n\n----------------------------------------\n\nTITLE: Reverting Node Engine Update\nDESCRIPTION: Reversion of a previous change to Node.js engine requirement\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_beta.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nf235412c1b6c2b173b7531f285429ea7214b56a2\n```\n\n----------------------------------------\n\nTITLE: Version Headers in Markdown\nDESCRIPTION: Semantic version headers with links to GitHub comparison views\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [8.1.0](https://github.com/parse-community/parse-server/compare/8.0.2...8.1.0) (2025-04-04)\n```\n\n----------------------------------------\n\nTITLE: Node Version Requirement\nDESCRIPTION: Node.js version requirement change for Parse Server, setting minimum version to 12.22.10\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_beta.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n5ace99d542a11e422af46d9fd6b1d3d2513b34cf\n```\n\n----------------------------------------\n\nTITLE: Commit Reference in Markdown\nDESCRIPTION: GitHub issue and commit reference formatting\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n([#9634](https://github.com/parse-community/parse-server/issues/9634)) ([aed918d](https://github.com/parse-community/parse-server/commit/aed918d3109e739f7231d481b5f48c68fc01cf04))\n```\n\n----------------------------------------\n\nTITLE: Deprecated File Trigger Syntax in Parse Server\nDESCRIPTION: Example of the deprecated syntax for beforeSaveFile trigger. This syntax is being replaced with a more consistent approach that matches the class trigger pattern.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_alpha.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeSaveFile((request) => {})\n```\n\n----------------------------------------\n\nTITLE: Formatting a Revert Commit Message in Markdown\nDESCRIPTION: Example of how to properly format a commit message when reverting a previous commit. The message should use the 'revert:' prefix followed by the header of the reverted commit, and include the hash of the commit being reverted in the body.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n```\nrevert: fix: remove handle from door\n\nThis reverts commit 1234567890abcdef.\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Shell Script Interpreter Declaration\nDESCRIPTION: Change in script interpreter declaration from /bin/sh to /bin/bash for better shell compatibility.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_release.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n```\n\n----------------------------------------\n\nTITLE: Version Number Change\nDESCRIPTION: Git commit hash showing version increment for Parse Server.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_beta.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nf88aa2a62a533e5344d1c13dd38c5a0b283a480a\n```\n\n----------------------------------------\n\nTITLE: Using File Trigger with New Syntax in Parse Server\nDESCRIPTION: Example of the new file trigger syntax which aligns with class trigger usage. The old syntax for file triggers has been deprecated in favor of this new consistent approach.\nSOURCE: https://github.com/parse-community/parse-server/blob/alpha/changelogs/CHANGELOG_alpha.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeSave(Parse.File, (request) => {})\n```"
  }
]