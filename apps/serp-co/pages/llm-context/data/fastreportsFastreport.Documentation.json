[
  {
    "owner": "fastreports",
    "repo": "fastreport.documentation",
    "content": "TITLE: Loading and Displaying a Fast Report in C#\nDESCRIPTION: This code snippet demonstrates how to create a Report instance, load a report file (.frx), register a dataset, and display the report. The using statement ensures proper disposal of resources.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/UsingReport.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (Report report = new Report())\n{\n  report.Load(\"report1.frx\");\n  report.RegisterData(dataSet1, \"NorthWind\");\n  report.Show();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Report from a File in FastReport using C#\nDESCRIPTION: Loads a report from a .FRX file using the Load method of the Report object. This is the simplest way to load a previously saved report.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/StoringLoadingReport.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nreport1.Load(\"filename.frx\");\n```\n\n----------------------------------------\n\nTITLE: Filtering Data Using Parameters in FastReport\nDESCRIPTION: Demonstrates how to use a parameter to filter data in a FastReport band. This example filters employees based on an EmployeeID parameter.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ReportParameters.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[Employees.EmployeeID] == [EmployeeID]\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete FastReport Report in C#\nDESCRIPTION: This code demonstrates how to programmatically create a FastReport report from scratch. It shows the process of registering data, creating page structure with various bands (title, group header/footer, data band), adding text objects with proper formatting, implementing grouping by first letter of product name, and adding a count total. The resulting report displays products grouped alphabetically.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/CreatingReportUsingCode.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nReport report = new Report();\n// register the \"Products\" table\nreport.RegisterData(dataSet1.Tables[\"Products\"], \"Products\");\n// enable it to use in a report\nreport.GetDataSource(\"Products\").Enabled = true;\n// create A4 page with all margins set to 1cm\nReportPage page1 = new ReportPage();\npage1.Name = \"Page1\";\nreport.Pages.Add(page1);\n// create ReportTitle band\npage1.ReportTitle = new ReportTitleBand();\npage1.ReportTitle.Name = \"ReportTitle1\";\n// set its height to 1.5cm\npage1.ReportTitle.Height = Units.Centimeters * 1.5f;\n// create group header\nGroupHeaderBand group1 = new GroupHeaderBand();\ngroup1.Name = \"GroupHeader1\";\ngroup1.Height = Units.Centimeters * 1;\n// set group condition\ngroup1.Condition = \"[Products.ProductName].Substring(0, 1)\";\n// add group to the page.Bands collection\npage1.Bands.Add(group1);\n// create group footer\ngroup1.GroupFooter = new GroupFooterBand();\ngroup1.GroupFooter.Name = \"GroupFooter1\";\ngroup1.GroupFooter.Height = Units.Centimeters * 1;\n// create DataBand\nDataBand data1 = new DataBand();\ndata1.Name = \"Data1\";\ndata1.Height = Units.Centimeters * 0.5f;\n// set data source\ndata1.DataSource = report.GetDataSource(\"Products\");\n// connect databand to a group\ngroup1.Data = data1;\n// create \"Text\" objects\n// report title\nTextObject text1 = new TextObject();\ntext1.Name = \"Text1\";\n// set bounds\ntext1.Bounds = new RectangleF(0, 0, \nUnits.Centimeters * 19, Units.Centimeters * 1);\n// set text\ntext1.Text = \"PRODUCTS\";\n// set appearance\ntext1.HorzAlign = HorzAlign.Center;\ntext1.Font = new Font(\"Tahoma\", 14, FontStyle.Bold);\n// add it to ReportTitle\npage1.ReportTitle.Objects.Add(text1);\n// group\nTextObject text2 = new TextObject();\ntext2.Name = \"Text2\";\ntext2.Bounds = new RectangleF(0, 0, \nUnits.Centimeters * 2, Units.Centimeters * 1);\ntext2.Text = \"[[Products.ProductName].Substring(0, 1)]\";\ntext2.Font = new Font(\"Tahoma\", 10, FontStyle.Bold);\n// add it to GroupHeader\ngroup1.Objects.Add(text2);\n// data band\nTextObject text3 = new TextObject();\ntext3.Name = \"Text3\";\ntext3.Bounds = new RectangleF(0, 0, \nUnits.Centimeters * 10, Units.Centimeters * 0.5f);\ntext3.Text = \"[Products.ProductName]\";\ntext3.Font = new Font(\"Tahoma\", 8);\n// add it to DataBand\ndata1.Objects.Add(text3);\n// group footer\nTextObject text4 = new TextObject();\ntext4.Name = \"Text4\";\ntext4.Bounds = new RectangleF(0, 0, \nUnits.Centimeters * 10, Units.Centimeters * 0.5f);\ntext4.Text = \"Count: [CountOfProducts]\";\ntext4.Font = new Font(\"Tahoma\", 8, FontStyle.Bold);\n// add it to GroupFooter\ngroup1.GroupFooter.Objects.Add(text4);\n// add a total\nTotal groupTotal = new Total();\ngroupTotal.Name = \"CountOfProducts\";\ngroupTotal.TotalType = TotalType.Count;\ngroupTotal.Evaluator = data1;\ngroupTotal.PrintOn = group1.Footer;\n// add it to report totals\nreport.Dictionary.Totals.Add(groupTotal);\n// run the report\nreport.Prepare();\n...\n```\n\n----------------------------------------\n\nTITLE: Adding FastReport.Web Dependency in ASP.NET Core\nDESCRIPTION: This snippet shows how to add the FastReport.Web package as a dependency in an ASP.NET Core project using a PackageReference in the project file.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/WebReport.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"FastReport.Web\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Loading a Report from a Stream in FastReport using C#\nDESCRIPTION: Loads a report from a stream using the overloaded version of the Load method. This approach is useful when storing reports in a database as a blob-stream.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/StoringLoadingReport.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nreport1.Load(stream);\n```\n\n----------------------------------------\n\nTITLE: Registering a Dataset in FastReport (C#)\nDESCRIPTION: This code demonstrates how to load a report and register a dataset with it. The RegisterData method connects the dataset to the report under the name 'NorthWind'.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/RegisteringData.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nreport1 = new Report();\nreport1.Load(\"report.frx\");\nreport1.RegisterData(dataSet1, \"NorthWind\");\n```\n\n----------------------------------------\n\nTITLE: Setting Connection String Directly in C#\nDESCRIPTION: This snippet demonstrates how to set a connection string directly on the Connection object of a FastReport report after loading it but before running it.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/PassingOwnConnectionString.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nreport1.Load(...);\n// do it after loading the report, before running it\n// assume we have one connection in the report\nreport1.Dictionary.Connections[0].ConnectionString = my_connection_string;\nreport1.Show();\n```\n\n----------------------------------------\n\nTITLE: Exporting Report to Multiple Streams in C#\nDESCRIPTION: Demonstrates how to export a report to multiple streams, handling generated files and streams separately, useful for web applications or when direct file system access isn't available.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Exporting.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n            // Creatint the Report object\n            using (Report report = new Report())\n            {\n                // Loading a report\n                report.Load(\"report.frx\");\n                // Preparing a report\n                report.Prepare();\n\n                // Creating the HTML export\n                using (HTMLExport html = new HTMLExport())\n                {\n                    // Choose the Jpeg pictures\n                    html.ImageFormat = ImageFormat.Jpeg;\n                    // We need the saving in multiple streams\n                    html.SaveStreams = true;\n                    // Exporting with fake null stream object, html export will keep all files inside\n                    report.Export(html, (Stream)null);\n                    // Checking for the exporting\n                    if (html.GeneratedFiles.Count > 0)\n                    {\n                        // Loop for generated files \n                        for (int i = 0; i < html.GeneratedFiles.Count; i++)\n                        {\n                            // We have several streams, let's save it in files\n                            using (FileStream file = new FileStream(\"export_path/\" + html.GeneratedFiles[i], FileMode.Create))\n                            {\n                                // You need reset the internal stream position\n                                html.GeneratedStreams[i].Position = 0;\n                                // Saving a stream in the file\n                                html.GeneratedStreams[i].CopyTo(file);\n                            }                             \n                        }\n                    }\n                }\n            }\n```\n\n----------------------------------------\n\nTITLE: Creating and Loading a WebReport in Controller\nDESCRIPTION: This snippet demonstrates how to create a WebReport object and load a report file (.frx) in an ASP.NET MVC controller action method.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/WebReport.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic IActionResult Index()\n{\n    var webReport = new WebReport();\n    webReport.Report.Load(\"path/to/report.frx\");\n\n    return View(webReport);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Handler in C# for FastReport\nDESCRIPTION: This snippet demonstrates how to create an event handler for a Text object's BeforePrint event. The event is triggered before the text object is printed and can be used to modify the object's properties or content.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Script.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void Text2_BeforePrint(object sender, EventArgs e)\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FastReport via NuGet Package Manager\nDESCRIPTION: Commands for installing FastReport packages using the NuGet package manager. This installs both the core library and web components.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/CompilationInstallation.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package FastReport.OpenSource\nInstall-Package FastReport.OpenSource.Web\n```\n\n----------------------------------------\n\nTITLE: Directly Referencing Report Objects in C#\nDESCRIPTION: This snippet demonstrates how to directly reference and modify a report object when working with a report as a class. It changes the font of the 'Text1' object in a SimpleListReport.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ReferenceReportObject.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSimpleListReport report = new SimpleListReport();\nreport.Text1.Font = new Font(\"Arial\", 12);\n```\n\n----------------------------------------\n\nTITLE: Appending Multiple Reports in FastReport using C#\nDESCRIPTION: This code demonstrates how to load and prepare multiple reports while appending them together. The example loads two reports sequentially, with the second report being appended to the first one using the Prepare(true) method.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/RunningReport.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nreport1.Load(\"report1.frx\");\nreport1.Prepare();\nreport1.Load(\"report2.frx\");\nreport1.Prepare(true);\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Parameter Example\nDESCRIPTION: Demonstrates a basic SQL query using a parameter for filtering DVD titles in MS SQL database. The parameter is denoted by @param1 following MS SQL parameter syntax.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/QueryParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from DVDs\nwhere Title = @param1\n```\n\n----------------------------------------\n\nTITLE: Registering FastReport.Web in ASP.NET Core Startup\nDESCRIPTION: This code shows how to register FastReport.Web middleware in the Configure method of the Startup class in an ASP.NET Core application.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/WebReport.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    ...\n    app.UseFastReport();\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Measurement Units in FastReport Scripts\nDESCRIPTION: This snippet demonstrates how to convert between pixels (the native unit of FastReport) and centimeters using the Units class. It shows retrieving a height in pixels, converting to centimeters, and setting a height using centimeter values.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Script.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nfloat heightInPixels = Text1.Height;\nfloat heightInCM = heightInPixels / Units.Centimeters;\nText1.Height = Units.Centimeters * 5; // 5см\n```\n\n----------------------------------------\n\nTITLE: Modifying SQL Query for a TableDataSource in FastReport using C#\nDESCRIPTION: This code demonstrates how to find a specific table data source by its alias and change its SQL query at runtime. This should be done after loading the report but before executing it. The example shows how to set a new SQL command for a table named 'MyTable'.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/PassingCustomSQL.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing FastReport.Data;\n...\nreport1.Load(...); \n// do it after loading the report, before running it\n// find the table by its alias\nTableDataSource table = report1.GetDataSource(\"MyTable\") as TableDataSource;\ntable.SelectCommand = \"new SQL text\";\nreport1.Show();\n```\n\n----------------------------------------\n\nTITLE: Using FindObject Method to Reference Report Objects in C#\nDESCRIPTION: This example shows how to use the FindObject method of the Report object to get a reference to a specific object. It finds the 'Text1' object and changes its font.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ReferenceReportObject.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTextObject text1 = report1.FindObject(\"Text1\") as TextObject;\ntext1.Font = new Font(\"Arial\", 12);\n```\n\n----------------------------------------\n\nTITLE: Setting Parameter Values in C# for FastReport\nDESCRIPTION: Shows how to load a report and set a parameter value programmatically using C# before preparing the report.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ReportParameters.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nreport1.Load(\"report.frx\");\nreport1.SetParameterValue(\"MyParam\", 10);\nreport1.Prepare();\n```\n\n----------------------------------------\n\nTITLE: .NET Function Usage in C#\nDESCRIPTION: Example demonstrating how to use .NET built-in functions.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMath.Max(5, 10)\n```\n\n----------------------------------------\n\nTITLE: Setting Report Parameter Value in C#\nDESCRIPTION: Demonstrates how to programmatically set a report parameter value using C#. This code shows the method for passing values to report parameters that are linked to query parameters.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/QueryParameters.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nreport1.SetParameterValue(\"MyReportParameter\", 10);\n```\n\n----------------------------------------\n\nTITLE: Creating Root-Level Report Outline in C#\nDESCRIPTION: Shows how to create an outline structure with items at the root level using OutlineRoot method.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Script.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nEngine.AddOutline(\"Item1\");\nEngine.AddOutline(\"Item2\");\nEngine.AddOutline(\"Item3\");\nEngine.OutlineRoot();\nEngine.AddOutline(\"Item4\");\n```\n\n----------------------------------------\n\nTITLE: Passing Connection String via Parameter in C#\nDESCRIPTION: This snippet illustrates how to pass a connection string to a FastReport report using a custom parameter named 'MyParameter'.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/PassingOwnConnectionString.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nreport1.SetParameterValue(\"MyParameter\", my_connection_string);\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Parameters in FastReport C#\nDESCRIPTION: Shows how to refer to nested parameters by indicating the parent parameter name followed by a period and then the child parameter name.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Script.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nReport.GetParameterValue(\"ParentParameter.ChildParameter\")\n```\n\n----------------------------------------\n\nTITLE: Exporting Report to HTML Format in C#\nDESCRIPTION: Shows HTML export configuration with embedded pictures, single page output, and various HTML-specific options like layers and navigation settings.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Exporting.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing FastReport;\nusing FastReport.Utils;\nusing FastReport.Export.Html;\n            ...\n            // Export in HTML\n            HTMLExport html = new HTMLExport();\n            // We need embedded pictures inside html\n            html.EmbedPictures = true;\n            // Enable all report pages in one html file\n            html.SinglePage = true;\n            // We don't need a subfolder for pictures and additional files\n            html.SubFolder = false;\n            // Enable layered HTML\n            html.Layers = true;\n            // Turn off the toolbar with navigation\n            html.Navigator = false;\n            // Save the report in html\n            report.Export(html, \"report.html\");\n```\n\n----------------------------------------\n\nTITLE: Exporting Report to JPEG Format in C#\nDESCRIPTION: Shows how to create a report, load it from a file, set parameters, and export it to JPEG format. Includes configuration for image quality, resolution, and file separation options.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Exporting.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing FastReport;\nusing FastReport.Utils;\nusing FastReport.Export.Image;\n            ...\n            // Create new Report \n            Report report = new Report();\n            // Load report from file\n            report.Load(\"report.frx\");\n            // Set the parameter\n            report.SetParameterValue(\"MYPARAMETER\", 1024);\n            // Prepare the report\n            report.Prepare();\n            // Export in Jpeg\n            ImageExport image = new ImageExport();\n            image.ImageFormat = ImageExportFormat.Jpeg;\n            // Set up the quality\n            image.JpegQuality = 90;\n            // Decrease a resolution\n            image.Resolution = 72;\n            // We need all pages in one big single file\n            image.SeparateFiles = false;\n            report.Export(image, \"report.jpg\");\n```\n\n----------------------------------------\n\nTITLE: Creating Report Outline Structure in C#\nDESCRIPTION: Demonstrates how to programmatically create a hierarchical outline structure in a report using AddOutline, OutlineUp, and OutlineRoot methods.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Script.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nEngine.AddOutline(\"Item1\");\nEngine.AddOutline(\"Item2\");\nEngine.AddOutline(\"Item3\");\nEngine.OutlineUp();\nEngine.AddOutline(\"Item4\");\n```\n\n----------------------------------------\n\nTITLE: Configuring WebReport with FastReport Online Designer\nDESCRIPTION: This C# code demonstrates how to configure a WebReport object to use the FastReport Online Designer, including setting modes, paths, and callbacks.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/WebReport.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic IActionResult Index()\n{\n    var webReport = new WebReport();\n    webReport.Report.Load(Server.MapPath(\"~/App_Data/report.frx\"));\n    // Enable code editor in the Report Designer\n    webReport.Mode = WebReportMode.Design;\n    // Disable editing of script code\n    webReport.DesignScriptCode = false;\n    // Set a path to the Report Designer\n    webReport.DesignerPath = \"/WebReportDesigner/index.html\";\n    // Set a path to the Designer Save Callback\n    webReport.DesignerSaveCallBack = \"~/Home/SaveDesignedReport\";\n    // Set a ID for using it in Callback\n    webReport.ID = \"DesignReport\";   \n    return View(webReport);\n}\n\n....\n\n[HttpPost]\n// Call-back for save the designed report \npublic ActionResult SaveDesignedReport(string reportID, string reportUUID)\n{\n    ViewBag.Message = String.Format(\"Confirmed {0} {1}\", reportID, reportUUID);\n    if (reportID == \"DesignReport\")\n    {\n        // Do something with designed report, for example\n        Stream reportForSave = Request.InputStream;\n        string pathToSave = Server.MapPath(\"~/App_Data/DesignedReports/test.frx\");\n        using (FileStream file = new FileStream(pathToSave, FileMode.Create))\n        {\n            reportForSave.CopyTo(file);\n        }\n    }\n    return View();\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source Column Reference Format\nDESCRIPTION: Example showing the format for referencing data source columns.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n[DataSource.Column]\n```\n\n----------------------------------------\n\nTITLE: Referencing Data Sources in FastReport using C#\nDESCRIPTION: This snippet demonstrates how to reference a data source defined in a report using the GetDataSource method. It takes the data source's alias as a parameter.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ReferenceReportObject.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nDataSourceBase ds = report1.GetDataSource(\"Products\");\n```\n\n----------------------------------------\n\nTITLE: System Variable Reference in C#\nDESCRIPTION: Example of using system variables in expressions.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Page] + 1\n```\n\n----------------------------------------\n\nTITLE: Accessing Data Column Values in FastReport\nDESCRIPTION: Examples of accessing data column values using GetColumnValue method, including simple and related data source references.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Script.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nstring productName = (string)Report.GetColumnValue(\"Products.Name\");\nstring categoryName = (string)Report.GetColumnValue(\"Products.Categories.CategoryName\");\n```\n\n----------------------------------------\n\nTITLE: Employee Data Reference Example\nDESCRIPTION: Example of referencing specific employee data columns.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n[Employees.FirstName]\n```\n\n----------------------------------------\n\nTITLE: Referencing Report Objects in C# Scripts\nDESCRIPTION: This example shows how to reference a report object by its name and access its properties. In this case, the height of the Text1 object is retrieved as a float value in pixels.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Script.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nfloat height = Text1.Height;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Report Parameter Values in FastReport C#\nDESCRIPTION: Demonstrates how to access report parameter values using the GetParameterValue method. The retrieved parameter needs to be cast to the appropriate data type as defined in the parameter's DataType property.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Script.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nint myParam = (int)Report.GetParameterValue(\"MyParameter\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Report Object Types in Markdown Table\nDESCRIPTION: A markdown table listing all the available report objects in FastReport with their descriptions. This includes simple objects like TextObject and PictureObject, as well as more complex objects like TableObject and MatrixObject.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ReportObjects.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description |\n|:-|:-|\n| `TextObject` | Displays one or several text lines. |\n| `PictureObject` | Displays a picture. |\n| `LineObject` | Displays a line. A line can be vertical, horizontal or diagonal. |\n| `ShapeObject` | Displays one of the geometrical shapes - rectangle, ellipse, triangle and others. |\n| `BarcodeObject` | Displays a barcode. |\n| `CheckBoxObject` | Displays a checkbox which can have two states - \"Enabled\" or \"Disabled\". |\n| `TableObject` | Displays a table containing rows, columns and  cells. |\n| `MatrixObject` | Displays a matrix (also known as \"Cross-tab\"). |\n| `ZipCodeObject` | Displays a zip code. |\n| `CellularTextObject` | Displays each character of a text in its individual cell. |\n| `PolyLineObject` | Displays a composite line. |\n| `PolygonObject` | Displays a polygon shape. |\n| `LinearGauge` | Displays a linear gauge. |\n| `SimpleGauge` | Displays a simple gauge. |\n| `RadialGauge` | Displays a radial gauge. |\n| `SimpleProgressGauge` | Displays a simple progress gauge. |\n```\n\n----------------------------------------\n\nTITLE: FastReport Total Functions Reference\nDESCRIPTION: Reference table showing the available total functions in FastReport and their descriptions. Includes Sum, Min, Max, Average, and Count functions.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Totals.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Description |\n|:-|:-|\n| `Sum` | Calculates the sum of the expression. |\n| `Min` | Calculates the minimum value of the expression. |\n| `Max` | Calculates the maximum value of the expression. |\n| `Average` | Calculates the average value of the expression. |\n| `Count` | Returns the number of rows. |\n```\n\n----------------------------------------\n\nTITLE: Documenting Common Object Properties in Markdown Table\nDESCRIPTION: A markdown table that describes common properties shared by all report objects inherited from the ReportComponentBase class. This includes properties for positioning, layout, appearance, and interactive features.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ReportObjects.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description |\n|:-|:-|\n| `Left`, `Top`, `Width`, `Height` | A report object, as a rule, is a rectangle. It has coordinates (properties `Left`, `Top`) and size (properties `Width`, `Height`). |\n| `Anchor` | This property determines how the object will be changing its position and/or its size when the container on which it is laying grows or shrinks. By using Anchor, it can be done in such a way that, the object expands or moves synchronously with container. Read more about this property in the \"Dynamic layout\" chapter. |\n| `Dock` | This property determines on which side of the container the object will be docked. Read more about this property in the \"Dynamic layout\" chapter. |\n| `Border`, `Fill` | These properties control the object's border and fill. They can be changed using the \"Border and Fill\" toolbar. |\n| `CanGrow`, `CanShrink` | These properties allow fitting the height of the object in such a way that it fits the whole text. Read more about this property in the \"Dynamic layout\" chapter. |\n| `ShiftMode` | An object, whose property is enabled, will be moving up and down, if the object above on can either grow or shrink. Read more about this property in the \"Dynamic layout\" chapter. |\n| `GrowToBottom` | An object, whose property is enabled, will be stretched to the bottom of a band. Read more about this property in the \"Dynamic layout\" chapter. |\n| `CanBreak` | Objects \"Text\" and \"Rich Text\" have this property. It determines whether the object's contents can be broken into parts. |\n| `PrintOn` | This property determines on which pages the object can be printed. Read more about this property in the \"Booklet-type report\" chapter. |\n| `Cursor` | This property determines the type of mouse cursor when it is located over an object. The property works only in the preview window. |\n| `Visible` | This property determines whether the object will be displayed in the report. Invisible object is never displayed in the preview window and is never printed on the printer as well. |\n| `Printable` | This property determines whether the object will be printed on the printer. If this property is disabled, then the object will be visible in the preview window but it will not be printed. |\n| `Hyperlink` | This property makes it possible to make the report object interactive. Read more about this property in the \"Interactive reports\" chapter. |\n| `Bookmark` | This property is used together with the `Hyperlink` property. It can contain any expression. The expression will be calculated when the report will be working, and its value will be used as bookmark's name.\n| `Restrictions` | This property restricts certain operations, such as moving, resizing, deleting the object. |\n| `Style` | You can assign the style name to this property. When this is done, the object will become like it has been indicated in the style. If the parameters of the style changes, the appearance of the object changes as well. |\n```\n\n----------------------------------------\n\nTITLE: Displaying System Variables Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing all available system variables in FastReport along with their descriptions. It includes variables for date, page numbers, row counts, and hierarchical report information.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/SystemVariables.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Description |\n|:-|:-|\n| `Date` | Date and time of the report's start. |\n| `Page` | Current page number. |\n| `TotalPages` | Total number of pages in the report. To use this variable, you need to enable the report's double pass. You can do this in \"Report\\|Properties...\" menu. |\n| `PageN` | Page number in the form: \"Page N\". |\n| `PageNofM` | Page number in the form: \"Page N of M\". | \n| `Row#` | Data row number inside the group. This value is reset at the start of a new group. |\n| `AbsRow#` | Absolute number of data row. This value is never reset at the start of a new group. |\n| `Page#` | Current page number. If you join several prepared reports into one package, this variable will return current page number in a package. This variable is actually a macro. It value is substituted when the component is viewed in the preview window. That means you cannot use it in an expression. |\n| `TotalPages#` | Total number of pages in the report. If you join several prepared reports into one package, this variable will return the number of pages in a package. You don't need to use double pass to get the correct value. This variable is actually a macro. It value is substituted when the component is viewed in the preview window. That means you cannot use it in an expression. |\n| `HierarchyLevel` | Current level of hierarchy in a hierarchical report. The top level is equal to 1. |\n| `HierarchyRow#` | Full row number like \"1.2.1\" in a hierarchical report. |\n```\n\n----------------------------------------\n\nTITLE: Accessing Report Settings in FastReport\nDESCRIPTION: Access and configure default report settings using the FastReport.Utils.Config.ReportSettings property. This property provides access to various report configuration options such as the default script language setting for new reports.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ConfiguringEnvironment.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nFastReport.Utils.Config.ReportSettings\n```\n\n----------------------------------------\n\nTITLE: Compiling FastReport Source Code for Windows\nDESCRIPTION: Instructions for cloning the FastReport repository and building it on Windows. This process creates a NuGet package in the fr_nuget directory.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/CompilationInstallation.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# for windows users\ngit clone https://github.com/FastReports/FastReport.git\ncd FastReport\nTools\\pack.bat\n```\n\n----------------------------------------\n\nTITLE: Defining Data Source and Column Aliases in FastReport\nDESCRIPTION: Example showing how to create aliases for a data source and its column. The example renames CATEGORY_TABLE to Categories and PROD_ID to Product ID.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Data.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCATEGORY_TABLE --> Categories\nPROD_ID --> Product ID\n```\n\n----------------------------------------\n\nTITLE: Compiling FastReport Source Code for Linux\nDESCRIPTION: Instructions for cloning the FastReport repository and building it on Linux. This process makes the pack.sh script executable and runs it to create a NuGet package in the fr_nuget directory.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/CompilationInstallation.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# for linux users\ngit clone https://github.com/FastReports/FastReport.git\ncd FastReport\nchmod 777 Tools/pack.sh && ./Tools/pack.sh\n```\n\n----------------------------------------\n\nTITLE: Referencing Parameters in FastReport Expressions\nDESCRIPTION: Demonstrates how to reference regular and nested parameters in FastReport expressions. Parameters are accessed using square brackets.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ReportParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[Parameter name]\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n[Parent parameter.Child parameter]\n```\n\n----------------------------------------\n\nTITLE: Accessing System Variables and Totals in FastReport\nDESCRIPTION: Shows how to access system variables and total values using GetVariableValue and GetTotalValue methods.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Script.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nDateTime date = (DateTime)Report.GetVariableValue(\"Date\");\nfloat sales = Report.GetTotalValue(\"TotalSales\");\nfloat tax = Report.GetTotalValue(\"TotalSales\") * 0.2f;\n```\n\n----------------------------------------\n\nTITLE: Enumerating Data Source Rows in FastReport\nDESCRIPTION: Demonstrates how to iterate through data source rows using GetDataSource method and data source operations.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Script.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nDataSourceBase ds = Report.GetDataSource(\"Products\");\nds.Init();\nwhile (ds.HasMoreRows)\n{\n  string productName = (string)Report.GetColumnValue(\"Products.Name\");\n  // do something with it...\n  // ...\n  ds.Next();\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering WebReport in Razor View\nDESCRIPTION: This HTML/Razor code shows how to render a WebReport object in an ASP.NET MVC view by using the Model.Render() method.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/WebReport.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n@model FastReport.Web.WebReport\n\n<div>\n    @await Model.Render()\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Function Definition in C#\nDESCRIPTION: Example of defining a custom function in application code.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Demo\n{\n  public static class MyFunctions\n  {\n    public static string Func1()\n    {\n      return \"Hello!\";\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Showing a Report from a C# Class in FastReport\nDESCRIPTION: Creates an instance of a report class and displays it. This approach is used when the report is saved as a C#/VB.NET class, which allows for debugging and use in medium trust environments.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/StoringLoadingReport.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSimpleListReport report = new SimpleListReport();\nreport.Show();\n```\n\n----------------------------------------\n\nTITLE: Type Conversion in Expressions\nDESCRIPTION: Example showing proper type conversion in expressions.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[Employees.FirstName] + \" \" + [Employees.Age].ToString()\n```\n\n----------------------------------------\n\nTITLE: Related Data Source Reference\nDESCRIPTION: Example showing how to reference related data source columns.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n[Products.Categories.CategoryName]\n```\n\n----------------------------------------\n\nTITLE: Custom Function Usage in C#\nDESCRIPTION: Example showing how to use custom defined functions in reports.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nDemo.MyFunctions.Func1()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple View for Designer Callback\nDESCRIPTION: This HTML/Razor code shows how to create a simple view for the SaveDesignedReport callback that displays a message from ViewBag.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/WebReport.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h2>@ViewBag.Message</h2>\n```\n\n----------------------------------------\n\nTITLE: SetParameterValue Method Declaration in FastReport\nDESCRIPTION: Provides the method signature for setting parameter values in FastReport, including how to specify nested parameters.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ReportParameters.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic void SetParameterValue(string complexName, object value)\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"ParentParameter.ChildParameter\"\n```\n\n----------------------------------------\n\nTITLE: Setting Report Parameter Values in FastReport C#\nDESCRIPTION: Demonstrates how to modify a parameter value using the SetParameterValue method, which takes the parameter name and the new value as arguments.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Script.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nReport.SetParameterValue(\"MyParameter\", 10);\n```\n\n----------------------------------------\n\nTITLE: String Concatenation with Data Columns\nDESCRIPTION: Example of concatenating multiple data columns.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n[Employees.FirstName] + \" \" + [Employees.LastName]\n```\n\n----------------------------------------\n\nTITLE: Setting Connection String Expression in FastReport Designer\nDESCRIPTION: This code snippet shows how to set the ConnectionStringExpression property in the FastReport Designer to use a report parameter for the connection string.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/PassingOwnConnectionString.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[MyParameter]\n```\n\n----------------------------------------\n\nTITLE: Default .NET Assembly References\nDESCRIPTION: List of default .NET assemblies available in FastReport expressions.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nSystem.dll\nSystem.Drawing.dll\nSystem.Windows.Forms.dll\nSystem.Data.dll\nSystem.Xml.dll\n```\n\n----------------------------------------\n\nTITLE: Nested Property Reference in C#\nDESCRIPTION: Example showing how to access nested report properties.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nReport.ReportInfo.Name\n```\n\n----------------------------------------\n\nTITLE: Report Property Reference in C#\nDESCRIPTION: Example demonstrating how to access report file properties.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nReport.FileName\n```\n\n----------------------------------------\n\nTITLE: Parameter Expression Reference\nDESCRIPTION: Shows how to reference a report parameter within a query parameter expression. This syntax is used to link report parameters to query parameters.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/QueryParameters.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[MyReportParameter]\n```\n\n----------------------------------------\n\nTITLE: Using String Parameter Methods in FastReport Expressions\nDESCRIPTION: Shows how to use methods on string-type parameters within FastReport expressions.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ReportParameters.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[StringParameter].Substring(0, 2)\n```\n\n----------------------------------------\n\nTITLE: Referencing Data Column Using Alias in FastReport\nDESCRIPTION: Demonstrates the syntax for referring to a data column using its alias in FastReport expressions.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Data.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[Categories.Product ID]\n```\n\n----------------------------------------\n\nTITLE: Object Reference Expression in C#\nDESCRIPTION: Example showing how to reference report object properties.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nText1.Height\n```\n\n----------------------------------------\n\nTITLE: Setting Default Script Language in FastReport\nDESCRIPTION: Configure the default script language that will be used for newly created reports in FastReport. This property allows you to specify which programming language should be used by default for report scripts.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ConfiguringEnvironment.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLanguage DefaultLanguage\n```\n\n----------------------------------------\n\nTITLE: Exporting Report to PNG Format in C#\nDESCRIPTION: Demonstrates PNG export configuration with higher resolution and separate files for each page option enabled.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Exporting.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n            // Export in PNG\n            ImageExport image = new ImageExport();\n            image.ImageFormat = ImageExportFormat.Png;\n            // Increase a resolution\n            image.Resolution = 300;\n            // We need separate file for each report page, they will be numbered: report.png, report.2.png, report.3.png, etc.\n            image.SeparateFiles = true;\n            report.Export(image, \"report.png\");\n```\n\n----------------------------------------\n\nTITLE: Basic Expression Example in C#\nDESCRIPTION: Simple arithmetic expression example showing basic syntax.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/Expressions.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n2 + 2\n```\n\n----------------------------------------\n\nTITLE: Defining FastReport Template Structure in XML\nDESCRIPTION: This XML snippet demonstrates the structure of a FastReport template file. It includes report configuration, data dictionary, report page layout, and various report objects such as text fields, picture objects, and data bands. The template is designed for a simple list report of employees.\nSOURCE: https://github.com/fastreports/fastreport.documentation/blob/master/ReportTemplateFileStructure.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Report ScriptLanguage=\"CSharp\" TextQuality=\"Regular\" ReportInfo.Name=\"Simple List\" ReportInfo.Author=\"Fast Reports Inc\" ReportInfo.Description=\"Demonstrates simple list report. To create it:&#13;&#10;- go to &quot;Data&quot; menu and select &quot;Choose Report Data...&quot; item to select datasource;&#13;&#10;- go to &quot;Report|Configure Bands...&quot; menu to create the band structure;&#13;&#10;- return to the report page, doubleclick the data band to show its editor;&#13;&#10;- choose the datasource;&#13;&#10;- drag data from the Data Dictionary window to the band.\" ReportInfo.Created=\"01/17/2008 03:05:57\" ReportInfo.Modified=\"07/26/2018 12:14:37\" ReportInfo.CreatorVersion=\"1.0.0.0\">\n  <Dictionary>\n    <TableDataSource Name=\"Employees\" ReferenceName=\"NorthWind.Employees\" DataType=\"System.Int32\" Enabled=\"true\">\n      <Column Name=\"EmployeeID\" DataType=\"System.Int32\"/>\n      <Column Name=\"LastName\" DataType=\"System.String\"/>\n      <Column Name=\"FirstName\" DataType=\"System.String\"/>\n      <Column Name=\"Title\" DataType=\"System.String\"/>\n      <Column Name=\"TitleOfCourtesy\" DataType=\"System.String\"/>\n      <Column Name=\"BirthDate\" DataType=\"System.DateTime\"/>\n      <Column Name=\"HireDate\" DataType=\"System.DateTime\"/>\n      <Column Name=\"Address\" DataType=\"System.String\"/>\n      <Column Name=\"City\" DataType=\"System.String\"/>\n      <Column Name=\"Region\" DataType=\"System.String\"/>\n      <Column Name=\"PostalCode\" DataType=\"System.String\"/>\n      <Column Name=\"Country\" DataType=\"System.String\"/>\n      <Column Name=\"HomePhone\" DataType=\"System.String\"/>\n      <Column Name=\"Extension\" DataType=\"System.String\"/>\n      <Column Name=\"Photo\" DataType=\"System.Byte[]\" BindableControl=\"Picture\"/>\n      <Column Name=\"Notes\" DataType=\"System.String\"/>\n      <Column Name=\"ReportsTo\" DataType=\"System.Int32\"/>\n    </TableDataSource>\n  </Dictionary>\n  <ReportPage Name=\"Page1\">\n    <ReportTitleBand Name=\"ReportTitle1\" Width=\"718.2\" Height=\"75.6\" CanGrow=\"true\">\n      <TextObject Name=\"Text1\" Top=\"47.25\" Width=\"718.2\" Height=\"28.35\" Text=\"EMPLOYEES\" HorzAlign=\"Center\" VertAlign=\"Center\" Font=\"Tahoma, 14pt, style=Bold\"/>\n      <TextObject Name=\"Text11\" Width=\"718.2\" Height=\"28.35\" Anchor=\"Top, Left, Right\" Fill.Color=\"WhiteSmoke\" CanGrow=\"true\" CanShrink=\"true\" Text=\"[Report.ReportInfo.Description]&#13;&#10;\" Padding=\"4, 4, 4, 4\" Font=\"Tahoma, 8pt\"/>\n      <ChildBand Name=\"Child2\" Top=\"79.6\" Width=\"718.2\" Height=\"18.9\"/>\n    </ReportTitleBand>\n    <DataBand Name=\"Data1\" Top=\"102.5\" Width=\"718.2\" Height=\"219.24\" Border.Lines=\"All\" Border.Color=\"Maroon\" CanGrow=\"true\" DataSource=\"Employees\">\n      <TextObject Name=\"Text3\" Left=\"9.45\" Top=\"66.15\" Width=\"103.95\" Height=\"18.9\" Text=\"Birth date:\" VertAlign=\"Center\" Font=\"Tahoma, 9pt, style=Bold\"/>\n      <TextObject Name=\"Text4\" Left=\"113.4\" Top=\"66.15\" Width=\"453.6\" Height=\"18.9\" Text=\"[Employees.BirthDate]\" Format=\"Date\" Format.Format=\"D\" VertAlign=\"Center\" Font=\"Tahoma, 9pt\"/>\n      <TextObject Name=\"Text5\" Left=\"9.45\" Top=\"103.95\" Width=\"103.95\" Height=\"18.9\" Text=\"Address:\" VertAlign=\"Center\" Font=\"Tahoma, 9pt, style=Bold\"/>\n      <TextObject Name=\"Text6\" Left=\"113.4\" Top=\"103.95\" Width=\"453.6\" Height=\"18.9\" CanGrow=\"true\" Text=\"[Employees.Address]\" VertAlign=\"Center\" Font=\"Tahoma, 9pt\"/>\n      <TextObject Name=\"Text7\" Left=\"9.45\" Top=\"122.85\" Width=\"103.95\" Height=\"18.9\" Text=\"Phone:\" VertAlign=\"Center\" Font=\"Tahoma, 9pt, style=Bold\"/>\n      <TextObject Name=\"Text8\" Left=\"113.4\" Top=\"122.85\" Width=\"453.6\" Height=\"18.9\" Text=\"[Employees.HomePhone]\" VertAlign=\"Center\" Font=\"Tahoma, 9pt\"/>\n      <TextObject Name=\"Text9\" Left=\"113.4\" Top=\"151.2\" Width=\"453.6\" Height=\"56.7\" CanGrow=\"true\" CanShrink=\"true\" Text=\"[Employees.Notes]\" Padding=\"2, 0, 2, 10\" HorzAlign=\"Justify\" Font=\"Tahoma, 9pt\"/>\n      <PictureObject Name=\"Picture1\" Left=\"576.45\" Top=\"47.25\" Width=\"132.3\" Height=\"162.54\" Border.Lines=\"All\" Border.Color=\"Maroon\" CanGrow=\"true\" CanShrink=\"true\" DataColumn=\"Employees.Photo\"/>\n      <TextObject Name=\"Text13\" Left=\"113.4\" Top=\"47.25\" Width=\"453.6\" Height=\"18.9\" Text=\"[Employees.HireDate]\" Format=\"Date\" Format.Format=\"d\" VertAlign=\"Center\" Font=\"Tahoma, 9pt\"/>\n      <TextObject Name=\"Text14\" Left=\"113.4\" Top=\"85.05\" Width=\"453.6\" Height=\"18.9\" Text=\"[Employees.City]\" VertAlign=\"Center\" Font=\"Tahoma, 9pt\"/>\n      <TextObject Name=\"Text15\" Left=\"9.45\" Top=\"47.25\" Width=\"103.95\" Height=\"18.9\" Text=\"Hire date:\" VertAlign=\"Center\" Font=\"Tahoma, 9pt, style=Bold\"/>\n      <TextObject Name=\"Text16\" Left=\"9.45\" Top=\"85.05\" Width=\"103.95\" Height=\"18.9\" Text=\"City:\" VertAlign=\"Center\" Font=\"Tahoma, 9pt, style=Bold\"/>\n      <TextObject Name=\"Text17\" Left=\"9.45\" Top=\"151.2\" Width=\"103.95\" Height=\"18.9\" Text=\"Notes:\" Font=\"Tahoma, 9pt, style=Bold\"/>\n      <TextObject Name=\"Text2\" Width=\"718.2\" Height=\"37.8\" Border.Lines=\"All\" Border.Color=\"Maroon\" Fill=\"LinearGradient\" Fill.StartColor=\"IndianRed\" Fill.EndColor=\"Maroon\" Fill.Angle=\"90\" Fill.Focus=\"0.52\" Fill.Contrast=\"1\" Text=\"[Employees.FirstName] [Employees.LastName]\" Padding=\"10, 0, 2, 0\" VertAlign=\"Center\" Font=\"Tahoma, 12pt, style=Bold\" TextFill.Color=\"White\"/>\n      <ChildBand Name=\"Child1\" Top=\"325.74\" Width=\"718.2\" Height=\"18.9\"/>\n      <Sort>\n        <Sort Expression=\"[Employees.FirstName]\"/>\n        <Sort Expression=\"[Employees.LastName]\"/>\n      </Sort>\n    </DataBand>\n    <PageFooterBand Name=\"PageFooter1\" Top=\"348.64\" Width=\"718.2\" Height=\"28.35\" Fill.Color=\"WhiteSmoke\" CanGrow=\"true\">\n      <TextObject Name=\"Text10\" Left=\"614.25\" Width=\"94.5\" Height=\"28.35\" Text=\"[PageN]\" HorzAlign=\"Right\" VertAlign=\"Center\" Font=\"Tahoma, 8pt\"/>\n      <TextObject Name=\"Text12\" Left=\"9.45\" Width=\"217.35\" Height=\"28.35\" Cursor=\"Hand\" Hyperlink.Value=\"https://www.fast-report.com/en/product/fast-report-net/\" Text=\"Generated by FastReport .NET\" VertAlign=\"Center\" Font=\"Tahoma, 8pt, style=Underline\" TextFill.Color=\"Blue\"/>\n    </PageFooterBand>\n  </ReportPage>\n</Report>\n```"
  }
]