[
  {
    "owner": "discoveryjs",
    "repo": "discovery",
    "content": "TITLE: Embedding Discovery.js App in HTML and Connecting via JavaScript\nDESCRIPTION: This snippet demonstrates how to embed a Discovery.js app in an iframe and connect to it using the connectToEmbedApp function. It includes setup for handling app ready and destroy events.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/docs/embed.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe id=\"discovery-iframe\" src=\"http://any.origin/discovery-model.html\"></iframe>\n<script type=\"module\">\n    import { connectToEmbedApp } from \"@discoveryjs/discovery/dist/discovery-embed.js\";\n    \n    const disconnect = connectToEmbedApp(document.getElementById('discovery-iframe'), (app) => {\n        // do something when app is connected and ready\n\n        return () => {\n            // do something on app destroy (unload)\n        };\n    });\n\n    // stop any communication \n    disconnect()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Upload Data Feature in Discovery.js\nDESCRIPTION: How to customize the upload data feature in Discovery.js by specifying custom settings for both App and Widget instances, including configuration options for file accept types and drag & drop functionality.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/docs/upload.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { App, Widget, upload, navButtons } from '@discoveryjs/discovery';\n\n// App\nconst myapp = new App({ upload: { /* options */ } }); // or the same as for Widget via \"extensions\" option\n\n// Widget\nconst myapp = new Widget({\n    extensions: [\n        upload.setup({ /* options */ })\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Discovery.js App with Pre-init and App Ready Callbacks\nDESCRIPTION: This JavaScript snippet shows how to use connectToEmbedApp with both pre-init and app ready callbacks. It allows handling the app's preloader phase and the fully loaded app state separately.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/docs/embed.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connectToEmbedApp } from \"@discoveryjs/discovery/dist/discovery-embed.js\";\n    \nconst disconnect = connectToEmbedApp(iframe,\n    (embedPpreinit) => {\n        // do something when app's preloader is connected and ready\n\n        return () => {\n            // do something on preloader destroy\n        };\n    },\n    (embedApp) => {\n        // do something when app is connected and ready\n\n        return () => {\n            // do something on app destroy (unload)\n        };\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Upload Data Feature with Default Settings in Discovery.js\nDESCRIPTION: This snippet demonstrates how to enable the upload data feature with default settings for both App and Widget instances in Discovery.js applications.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/docs/upload.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { App, Widget, upload, navButtons } from '@discoveryjs/discovery';\n\n// App\nconst myapp = new App({ upload: true }); // or the same as for Widget via \"extensions\" option\n\n// Widget\nconst myapp = new Widget({\n    extensions: [\n        upload,\n        navButtons.uploadFile\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing Host Location with Embedded Discovery.js App\nDESCRIPTION: This JavaScript snippet shows how to synchronize the host page's location with the embedded Discovery.js app. It demonstrates the recommended order of API calls for location state synchronization.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/docs/embed.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connectToEmbedApp } from \"@discoveryjs/discovery/dist/discovery-embed.js\";\n    \nconst disconnect = connectToEmbedApp(iframe, (embedApp) => {\n    // ... any other setup\n\n    // recomended order of API calls to sync location state with embed app\n    embedApp.setRouterPreventLocationUpdate(true);\n    embedApp.setPageHash(location.hash);\n    embedApp.setLocationSync(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Resource Object Structure Example in JavaScript\nDESCRIPTION: Example demonstrating the structure of a resource object used in Discovery.js data loading configuration. Shows typical properties including type, name, encoding, and timestamp information.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/docs/load-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: 'url',\n  name: 'http://example.com/data.json'\n  encoding: 'json',\n  createdAt: '2023-04-01T12:00:00Z',\n}\n```\n\n----------------------------------------\n\nTITLE: Using Upload Actions in Discovery.js Templates\nDESCRIPTION: Example of how to use the upload-related actions in Discovery.js templates. Shows how to create buttons for resetting data, loading data, and displaying supported file types.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/docs/upload.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[\n    {\n        view: 'button',\n        onClick: '=#.actions.unloadData',\n        content: 'text:\"Reset data\"'\n    },\n    {\n        view: 'button',\n        onClick: '=#.actions.uploadFile',\n        content: 'text:\"Load data\"'\n    },\n\n    'h2:\"Supported file extensions & mime types\"',\n    'ul:#.actions.uploadFile | fileExtensions + mimeTypes'\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Embed Feature in Discovery.js App and ViewModel\nDESCRIPTION: This JavaScript code demonstrates how to enable the embed feature in a Discovery.js App or ViewModel, which is necessary for communication with the host page.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/docs/embed.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { App, ViewModel, embed } from '@discoveryjs/discovery';\n\n// App\nconst myapp = new App({ embed: true }); // or the same as for ViewModel\n\n// ViewModel\nconst myapp = new ViewModel({\n    extensions: [\n        embed\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Encodings in Discovery.js\nDESCRIPTION: Defines the TypeScript type for encoding configurations in Discovery.js. The type includes required properties like name and test, along with conditional properties based on whether streaming is supported.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/docs/encodings.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Encoding = {\n    name: string;\n    test(chunk: Uint8Array): boolean;\n} & ({\n    streaming: true;\n    decode(iterator: AsyncIterableIterator<Uint8Array>): Promise<any>;\n} | {\n    streaming: false;\n    decode(payload: Uint8Array): any;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Encoding Example for Discovery.js App\nDESCRIPTION: Demonstrates the implementation of a simple custom encoding that counts lines in a text payload. The example initializes a new App with a custom encoding configuration that always applies and decodes text by splitting it into lines and counting them.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/docs/encodings.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew App({\n    encodings: [\n        {\n            name: 'lines/counter',\n            test: () => true, // Always applicable\n            streaming: false,\n            decode: (payload) => new TextDecoder().decode(payload).split('\\n').length\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Pages with New Configuration Pattern in Discovery.js\nDESCRIPTION: Shows the new signature for defining pages in Discovery.js, allowing all options to be specified in a single configuration object, while maintaining backward compatibility with the old signature.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// new signature\ndiscovery.page.define('example', { render: [/* ... */], ...restOptions });\n// old signature remains compatible\ndiscovery.page.define('example', [/* ... */], { /* options */ });\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Prepare with Work Title Updates in Discovery.js\nDESCRIPTION: Example showing how to use the new setWorkTitle method in the prepare context API to display progress information during different phases of preparation.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function async prepare(input, { setWorkTitle }) {\n    await setWorkTitle('phase 1');\n    // ...\n    await setWorkTitle('phase 2');\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Styles with Media Queries in Discovery.js App\nDESCRIPTION: Example of configuring inline styles with media queries in the App constructor. This demonstrates how to add responsive styles that only apply at specific screen sizes.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew App({\n    styles: [\n        { type: 'style', content: '...', media: 'all and (max-width: 1000px)' }\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Class Names with Query Expressions in Discovery.js Views\nDESCRIPTION: Example showing how to use query expressions for dynamic class names in view configurations. The expression starts with an equals sign to indicate it should be evaluated as a query.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{ view: 'block', className: '=query' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Source View with Tooltips in Discovery.js\nDESCRIPTION: Example of configuring the source view with tooltips for references. This shows how to add interactive elements to source code displays by defining reference ranges and their associated tooltips.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsource:{ refs: [{ range: [1, 4], tooltip: \"struct\" }] }\n```\n\n----------------------------------------\n\nTITLE: Defining RenderListOptions Type in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type for options used in the ViewModel#view.renderList() method. It specifies the structure for limit, moreContainer, and onSliceRender properties.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RenderListOptions = {\n    limit: number | false;\n    moreContainer: HTMLElement;\n    onSliceRender: (restCount: number, offset: number, limit: number, totalCount: number) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Discovery.js Changelog Entry Beta.45\nDESCRIPTION: Changelog entry documenting fixes for localStorage, darkmode settings and modelfree mode.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0-beta.45 (21-10-2020)\n\n- Fixed crash when `localStorage` is not available (e.g. due CSP restrictions)\n- Fixed `darkmode` and `darkmodePersistent` settings for `App` to use defaults when coresponding values in options are `undefined`\n- Fixes for modelfree and dark mode\n```\n\n----------------------------------------\n\nTITLE: Discovery.js Changelog Entry Beta.44\nDESCRIPTION: Changelog entry listing improvements to text-match view, badge views, and dark mode functionality.\nSOURCE: https://github.com/discoveryjs/discovery/blob/master/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0-beta.44 (21-10-2020)\n\n- Added option to control localStorage usage for darkmode state\n- Fixed dark mode switching in editor's hint popups\n- `text-match` view\n    - Added support for a string as match pattern\n    - Removed requirement for parentheses in regexp patterns\n- `badge` views\n    - Added `hint` data option to show tooltip with a hint\n```"
  }
]