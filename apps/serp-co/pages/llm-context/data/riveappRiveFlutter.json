[
  {
    "owner": "rive-app",
    "repo": "rive-flutter",
    "content": "TITLE: Setting Up Flutter Dependencies in CMake\nDESCRIPTION: Links the Flutter application against required Flutter libraries and sets up include directories for header files. These are essential for building a Windows Flutter application.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Installation and Bundling for Flutter App - CMake\nDESCRIPTION: Specifies installation logic, ensuring all runtime binaries, Flutter ICU and library files, plugin libraries, and asset bundles are copied to the expected locations next to the executable. Employs CMake install and file directives to handle placing dependencies and fully refreshing asset directories on each build to avoid stale files. Inputs are build artifacts and Flutter resources, outputs are a fully bundled and runnable application directory. Limitation: Assumes correct values for all referenced variables and paths pre-exist at configure time.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types and Standard Settings - CMake - CMake\nDESCRIPTION: Sets up project-wide build types (Debug, Profile, Release), applies modern CMake policies, and defines a function for standardizing compilation settings across targets, including C++ standard enforcement, warning levels, exception handling, and preprocessor definitions. Dependencies are basic CMake 3.14+ and a C++ toolchain. The key parameter is the TARGET for APPLY_STANDARD_SETTINGS; outputs include consistent build configurations and compilation flags as needed for typical Flutter native integration.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\nadd_definitions(-DUNICODE -D_UNICODE)\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Android NDK Version and SDK for Rive C++ Runtime Integration - Gradle\nDESCRIPTION: This snippet demonstrates how to customize an Android app's build.gradle file to specify the compileSdkVersion and ndkVersion, both critical for successfully building the native \"rive_text.so\" library required by Rive's runtime for text features. Dependencies include the Android Gradle Plugin, a compatible version of the Android NDK (27.2.12479018), and a minimum compileSdkVersion of 31. The parameters \"compileSdkVersion\" and \"ndkVersion\" dictate the Android platform version and NDK toolchain; other standard Gradle configuration keys are implied. Expected outcome is a functional build environment for integrating Rive's C++ components, with output of the necessary native shared object file. Limitations: This configuration assumes a modern NDK and may be incompatible with older Android build systems.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/platform_considerations.md#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nandroid {\n  compileSdkVersion 31\n  ndkVersion \"27.2.12479018\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Tool Backend Custom Command\nDESCRIPTION: Defines a custom command that executes the Flutter tool's backend script (`tool_backend.bat`). This command is responsible for generating essential build artifacts like the Flutter library DLL, headers, and C++ wrapper sources. It specifies these artifacts as outputs and uses a 'phony' output to ensure the command runs on every build configuration, passing the target platform and build configuration type as arguments.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Flutter and Plugins into CMake Build - CMake\nDESCRIPTION: Adds Flutter engine, toolchain, runner, and plugin build rules into the CMake application build process by referencing subdirectories and including generated plugin setup. Main dependencies are the presence of the generated Flutter CMake scripts and the corresponding source directories. The implementation ensures all relevant Flutter application pieces, including plugins, are built and linked, and expects required Flutter-managed resources to be present. Output is a properly configured build system prepared for Flutter desktop integration.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assemble Custom Target\nDESCRIPTION: Defines a custom target named `flutter_assemble`. This target doesn't build anything directly but serves as a dependency hook. It depends on the output files generated by the `add_custom_command` (Flutter library, headers, wrapper sources). Other targets that need these artifacts (like the wrapper libraries) depend on `flutter_assemble`, ensuring the Flutter tool backend command runs before they are built.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Plugin Wrapper Library\nDESCRIPTION: Defines a STATIC library `flutter_wrapper_plugin` built from the core and plugin-specific C++ wrapper sources. It applies standard settings, sets properties for position-independent code and hidden visibility, links against the `flutter` interface library, includes the wrapper's public headers, and depends on the `flutter_assemble` target.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting Flutter Build Artifact Paths\nDESCRIPTION: Sets variables pointing to key Flutter build artifacts: the main Flutter library DLL (`flutter_windows.dll`), the ICU data file (`icudtl.dat`), the project's build directory, and the Ahead-of-Time (AOT) compiled application library (`app.so`). These variables are exported to the parent CMake scope for use in installation steps or by the main application build.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Application Wrapper Library\nDESCRIPTION: Defines a STATIC library `flutter_wrapper_app` built from the core and application-specific C++ wrapper sources. It applies standard settings, links against the `flutter` interface library, includes the wrapper's public headers, and depends on the `flutter_assemble` target. This library is typically used by the main application executable (runner).\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Interface Library\nDESCRIPTION: Defines an INTERFACE library named `flutter`. This library doesn't compile sources itself but specifies usage requirements for targets that link against it: it includes the `EPHEMERAL_DIR` for header lookup and links against the actual Flutter library (`flutter_windows.dll.lib`). It also depends on the `flutter_assemble` target to ensure Flutter artifacts are built first.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Source Files\nDESCRIPTION: Defines lists (`CPP_WRAPPER_SOURCES_CORE`, `CPP_WRAPPER_SOURCES_PLUGIN`, `CPP_WRAPPER_SOURCES_APP`) containing the C++ source file names for the core, plugin-specific, and application-specific parts of the Flutter C++ wrapper. The `WRAPPER_ROOT` path is prepended to each file name.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App with Skia Renderer (Bash)\nDESCRIPTION: Executes a Flutter application using the `--no-enable-impeller` flag to explicitly use the Skia rendering engine instead of Impeller. This command is useful for troubleshooting potential rendering or performance discrepancies observed with Rive animations when Impeller is the default renderer (e.g., on iOS in Flutter v3.10+). Requires the Flutter SDK to be installed.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter run --no-enable-impeller\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to the location of the C++ client wrapper source code within the ephemeral directory. This wrapper facilitates communication between the Dart code and the native Windows platform.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list `FLUTTER_LIBRARY_HEADERS` containing the names of essential Flutter header files and then prepends the `EPHEMERAL_DIR` path to each header file name in the list.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Version Compile Definitions in CMake\nDESCRIPTION: Adds preprocessor definitions for the Flutter application version information, making version components available to the C++ code at compile time.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Ephemeral Directory\nDESCRIPTION: Specifies the minimum required version of CMake (3.14) and defines the `EPHEMERAL_DIR` variable to point to the 'ephemeral' subdirectory, which contains files generated by the Flutter tool.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: Provides a default value ('windows-x64') for the `FLUTTER_TARGET_PLATFORM` variable if it hasn't been defined previously (e.g., by older versions of the Flutter tool).\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Windows Executable in CMake\nDESCRIPTION: Configures a Windows-specific executable for a Flutter application, specifying source files including Flutter window implementation, main entry point, utilities, and Windows-specific code.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Rive Flutter Example\nDESCRIPTION: These commands navigate to the example directory, install dependencies using `flutter pub get`, and then run the application using `flutter run`. Flutter must be installed to execute these commands.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd rive-flutter/example\nflutter pub get\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Generated Configuration\nDESCRIPTION: Includes a CMake file (`generated_config.cmake`) located in the `EPHEMERAL_DIR`. This file is generated by the Flutter tool and provides necessary build configurations.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros in CMake\nDESCRIPTION: Disables Windows min/max macros that could collide with C++ standard library functions, preventing naming conflicts during compilation.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Cloning Rive Flutter Repository\nDESCRIPTION: This command clones the Rive Flutter repository from GitHub. This is the first step in setting up the example application.\nSOURCE: https://github.com/rive-app/rive-flutter/blob/master/example/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rive-app/rive-flutter\n```"
  }
]