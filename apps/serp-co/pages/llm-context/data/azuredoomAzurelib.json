[
  {
    "owner": "azuredoom",
    "repo": "azurelib",
    "content": "TITLE: Creating Custom Entity Animator in Java with AzureLib\nDESCRIPTION: Implementation of a custom entity animator class that extends AzEntityAnimator. Handles animation controller registration and animation file location management.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/entities/entities.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntityAnimator extends AzEntityAnimator<ExampleEntity> {\n    private static final ResourceLocation ANIMATIONS = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"animations/entity/example_entity.animation.json\"\n    );\n\n    @Override\n    public void registerControllers(AzAnimationControllerContainer<ExampleEntity> animationControllerContainer) {\n        animationControllerContainer.add(\n            AzAnimationController.builder(this, \"base_controller\")\n                .build()\n        );\n    }\n\n    @Override\n    public @NotNull ResourceLocation getAnimationLocation(ExampleEntity animatable) {\n        return ANIMATIONS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Player-like Limb Animations in AzureLib\nDESCRIPTION: This example shows a complete implementation of the setCustomAnimations method to animate a Creeper entity's limbs in a player-like walking motion. It retrieves bones for all limbs and applies mathematical transformations based on the entity's walk animation.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/animating_in_code.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void setCustomAnimations(Creeper animatable, float partialTicks) {\n        super.setCustomAnimations(animatable, partialTicks);\n        AzBoneCache boneCache = this.context().boneCache();\n        Optional<AzBone> leftArm = boneCache.getBakedModel().getBone(\"left_Arm\");\n        Optional<AzBone> rightArm = boneCache.getBakedModel().getBone(\"right_Arm\");\n        Optional<AzBone> leftLeg = boneCache.getBakedModel().getBone(\"left_Leg\");\n        Optional<AzBone> rightLeg = boneCache.getBakedModel().getBone(\"right_Leg\");\n\n        if (leftArm.isPresent())\n            leftArm.get().setRotX(\n                Mth.cos(animatable.walkAnimation.position(partialTicks) * 0.6662F + 3.1415927F) * 2.0F * animatable.walkAnimation.speed() * 0.5F);\n        if (rightArm.isPresent())\n            rightArm.get().setRotX(\n                Mth.cos(animatable.walkAnimation.position(partialTicks) * 0.6662F + 3.1415927F) * -2.0F * animatable.walkAnimation.speed() * 0.5F);\n        if (leftLeg.isPresent())\n            leftLeg.get().setRotX(\n                Mth.cos(animatable.walkAnimation.position(partialTicks) * 0.6662F + 3.1415927F) * 2.0F * animatable.walkAnimation.speed() * 0.5F);\n        if (rightLeg.isPresent())\n            rightLeg.get().setRotX(\n                Mth.cos(animatable.walkAnimation.position(partialTicks) * 0.6662F) * 1.4F * animatable.walkAnimation.speed() * 0.5F);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom AzBlockAnimator for Block Entity Animation\nDESCRIPTION: This class extends AzBlockAnimator to handle animation controllers and provide animation file locations. It defines where animations are stored and registers controllers that determine animation behavior.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/blockentities/blockentities.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleBEAnimator extends AzBlockAnimator<ExampleBE> {\n    private static final ResourceLocation ANIMATIONS = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"animations/item/examplebe.animation.json\"\n    );\n\n    @Override\n    public void registerControllers(AzAnimationControllerContainer<ExampleBE> animationControllerContainer) {\n        animationControllerContainer.add(\n            AzAnimationController.builder(this, \"base_controller\")\n                .build()\n        );\n    }\n\n    @Override\n    public @NotNull ResourceLocation getAnimationLocation(ExampleBE animatable) {\n        return ANIMATIONS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Renderer with Default AzLayers in Java\nDESCRIPTION: This code demonstrates how to create a custom entity renderer that utilizes multiple default AzLayers. The example shows implementation of AzArmorLayer for armor rendering, AzAutoGlowingLayer for glowing effects, and AzBlockAndItemLayer for rendering held items, all configured through the AzEntityRendererConfig builder.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_azlayers.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MarauderRenderer extends AzEntityRenderer<MarauderEntity> {\n\n    public MarauderRenderer(EntityRendererProvider.Context context) {\n        super(\n            AzEntityRendererConfig.<MarauderEntity>builder(MODEL, TEXTURE)\n                .addRenderLayer(new AzArmorLayer<>()) // Adds the armor rendering layer\n                .addRenderLayer(new AzAutoGlowingLayer<>()) // Adds the glowing texture layer\n                .addRenderLayer(new AzBlockAndItemLayer<>()) // Adds the block and item rendering layer\n                .build(),\n            context\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Renderer in Java using AzEntityRendererConfig\nDESCRIPTION: Example implementation of an entity renderer using AzEntityRendererConfig, showing configuration for death animations, custom rotations, render layers, and scaling options.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azrenderer_config.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntityRenderer extends AzEntityRenderer<ExampleEntity> {\n    private static final ResourceLocation MODEL = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID, \"geo/entity/exampleentity.geo.json\"\n    );\n    private static final ResourceLocation TEXTURE = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID, \"textures/entity/exampleentity.png\"\n    );\n\n    public ExampleEntityRenderer() {\n        super(\n            AzEntityRendererConfig.<ExampleEntity>builder(MODEL, TEXTURE)\n                .setAnimatorProvider(ExampleEntityAnimator::new) // Custom animator\n                .setDeathMaxRotation(180F) // Custom death rotation\n                .addRenderLayer(new CustomEntityRenderLayer()) // Add render layers\n                .setPrerenderEntry(context -> {\n                    // Insert code you want to run here\n                    return context;\n                }) // Pre-render hook\n                .setPostRenderEntry(context -> {\n                    // Insert code you want to run here\n                    return context;\n                }) // Post-render hook\n                .setScale(0.8F, 0.8F) // Scaling options\n                .build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Renderer with AzureLib\nDESCRIPTION: Implementation of a custom entity renderer that connects the model, texture, and animations together.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/entities/entities.mdx#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntityRenderer extends AzEntityRenderer<ExampleEntity> {\n    private static final ResourceLocation GEO = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"geo/entity/example_entity.geo.json\"\n    );\n\n    private static final ResourceLocation TEX = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"textures/entity/example_entity.png\"\n    );\n\n    public ExampleEntityRenderer() {\n        super(\n            AzBlockEntityRendererConfig.<ExampleEntity>builder(GEO, TEX)\n                .setAnimatorProvider(ExampleEntityAnimator::new).build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Armor Renderer in Java using AzArmorRendererConfig\nDESCRIPTION: Example implementation of an armor renderer using AzArmorRendererConfig with full configuration options including custom animations, bone providers, render types, hooks, and scaling.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azrenderer_config.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmorRenderer extends AzArmorRenderer {\n\n    private static final ResourceLocation MODEL = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID, \"geo/armor/examplearmor.geo.json\"\n    );\n    private static final ResourceLocation TEXTURE = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID, \"textures/armor/examplearmor.png\"\n    );\n\n    public ExampleArmorRenderer() {\n        super(\n            AzArmorRendererConfig.builder(MODEL, TEXTURE)\n                .setAnimatorProvider(CustomArmorAnimator::new) // Custom animations\n                .setBoneProvider(new CustomArmorBoneProvider()) // Bone provider for skeleton animations\n                .setRenderType(RenderType.entityTranslucent(TEXTURE)) // Translucent rendering\n                .setPrerenderEntry(context -> {\n                    // Insert code you want to run here\n                    return context;\n                }) // Pre-render hook\n                .setPostRenderEntry(context -> {\n                    // Insert code you want to run here\n                    return context;\n                }) // Post-render hook\n                 setScale(1.0F, 1.0F) // Scaling\n                .build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Logic in Entity Tick Method\nDESCRIPTION: Implementation of the tick method to handle different animation states based on entity conditions.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/entities/entities.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void tick() {\n        super.tick();\n        moveAnalysis.update();\n\n        if (this.level().isClientSide) {\n            var isMovingOnGround = moveAnalysis.isMovingHorizontally() && onGround();\n            Runnable animationRunner;\n            if (!this.isAlive()) {\n                animationRunner = animationDispatcher::death;\n            } else if (isMovingOnGround) {\n                if (this.isAggressive()) {\n                    animationRunner = animationDispatcher::run;\n                } else {\n                    animationRunner = animationDispatcher::walk;\n                }\n            } else {\n                animationRunner = animationDispatcher::idle;\n            }\n            animationRunner.run();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Dispatcher for AzureLib 3.x\nDESCRIPTION: Shows how to create a dedicated animation dispatcher class that handles animation triggers through commands. This is the recommended approach for managing animations in the new version.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/entities.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntityDispatcher {\n    private static final AzCommand IDLE_COMMAND = AzCommand.create(\n        \"base_controller\",\n        \"idle\",\n        AzPlayBehaviors.LOOP\n    );\n\n    private final ExampleEntity example_entity;\n\n    public DoomHunterAnimationDispatcher(ExampleEntity animatable) {\n        this.example_entity = animatable;\n    }\n\n    public void idle() {\n        IDLE_COMMAND.sendForEntity(example_entity);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Entity Class with Animation Integration\nDESCRIPTION: Implementation of the main entity class that integrates the animation dispatcher and movement analysis functionality.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/entities/entities.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntity extends Entity {\n    public final ExampleEntityDispatcher dispatcher;\n\n    public final MoveAnalysis moveAnalysis;\n\n    public ExampleEntity(EntityType<? extends Entity> entityType, Level level) {\n        super(entityType, level);\n        this.dispatcher = new ExampleEntityDispatcher(this);\n        this.moveAnalysis = new MoveAnalysis(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Block Entity Renderer with AzureLib\nDESCRIPTION: This renderer connects the block entity with its geometry file, texture, and animator. It extends AzBlockEntityRenderer and configures how the block entity will be displayed in-game, including its 3D model and animations.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/blockentities/blockentities.mdx#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleBERenderer extends AzBlockEntityRenderer<ExampleBE> {\n    private static final ResourceLocation GEO = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"geo/block/examplebe.geo.json\"\n    );\n\n    private static final ResourceLocation TEX = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"textures/block/examplebe.png\"\n    );\n\n    public ExampleBERenderer() {\n        super(\n            AzBlockEntityRendererConfig.<ExampleBE>builder(GEO, TEX)\n                .setAnimatorProvider(ExampleBEAnimator::new).build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom AzItemAnimator for Armor in Java\nDESCRIPTION: Defines a custom animator class that extends AzItemAnimator to handle animation controllers and provide the animation file location for armor items. This class is responsible for registering animation controllers and specifying the JSON animation file path.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/armor/armor.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmorAnimator extends AzItemAnimator {\n    private static final ResourceLocation ANIMATIONS = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"animations/item/examplearmor.animation.json\"\n    );\n\n    @Override\n    public void registerControllers(AzAnimationControllerContainer<ItemStack> animationControllerContainer) {\n        animationControllerContainer.add(\n            AzAnimationController.builder(this, \"base_controller\")\n                .build()\n        );\n    }\n\n    @Override\n    public @NotNull ResourceLocation getAnimationLocation(ItemStack animatable) {\n        return ANIMATIONS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Dispatcher in BlockEntity Class\nDESCRIPTION: This snippet shows how to integrate the Animation Dispatcher into a BlockEntity class. The dispatcher is initialized in the constructor and can be accessed throughout the class to trigger animations.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/blockentities/blockentities.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleBE extends BlockEntity {\n    // This is your class where you will setup the AzCommands/Animations you wish to play\n    public final ExampleBEDispatcher dispatcher;\n\n    public ExampleBE(BlockPos pos, BlockState blockState) {\n        super(YourEntityTypes.EXAMPLE_BE, pos, blockState);\n        // Create the instance of the class here to use later.\n        this.dispatcher = new ExampleBEDispatcher();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom AzItemAnimator for Item Animation in Java\nDESCRIPTION: Extends AzItemAnimator to handle registration of animation controllers and provide animation file locations. This class serves as the foundation for item animations by defining the animation source and controllers.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/items/items.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItemAnimator extends AzItemAnimator {\n    private static final ResourceLocation ANIMATIONS = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"animations/item/exampleitem.animation.json\"\n    );\n\n    @Override\n    public void registerControllers(AzAnimationControllerContainer<ItemStack> animationControllerContainer) {\n        animationControllerContainer.add(\n            AzAnimationController.builder(this, \"base_controller\")\n                .build()\n        );\n    }\n\n    @Override\n    public @NotNull ResourceLocation getAnimationLocation(ItemStack animatable) {\n        return ANIMATIONS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Entity Renderer in Java using AzBlockEntityRendererConfig\nDESCRIPTION: Example implementation of a block entity renderer using AzBlockEntityRendererConfig, demonstrating configuration options for animations, render layers, hooks, and scaling.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azrenderer_config.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleBERenderer extends AzBlockEntityRenderer<ExampleBE> {\n    private static final ResourceLocation MODEL = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID, \"geo/block/examplebe.geo.json\"\n    );\n    private static final ResourceLocation TEXTURE = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID, \"textures/block/examplebe.png\"\n    );\n\n    public ExampleBERenderer() {\n        super(\n            AzBlockEntityRendererConfig.<ExampleBE>builder(MODEL, TEXTURE)\n                .setAnimatorProvider(ExampleBEAnimator::new) // Custom animator\n                .addRenderLayer(new CustomBlockRenderLayer()) // Add render layers\n                .setPrerenderEntry(context -> {\n                    // Insert code you want to run here\n                    return context;\n                }) // Pre-render hook\n                .setPostRenderEntry(context -> {\n                    // Insert code you want to run here\n                    return context;\n                }) // Post-render hook\n                .setScale(1.0F, 1.0F) // Scaling\n                .build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Animation Dispatcher in Custom Item Class\nDESCRIPTION: Demonstrates how to integrate the Animation Dispatcher into a custom Item class. This allows the item to access animation controls and manage animation states.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/items/items.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItem extends Item {\n    // This is your class where you will setup the AzCommands/Animations you wish to play\n    public final ExampleItemDispatcher dispatcher;\n\n    public ExampleItem(Properties properties) {\n        super(properties);\n        // Create the instance of the class here to use later.\n        this.dispatcher = new ExampleItemDispatcher();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending AzCommand to a Block Entity in Java\nDESCRIPTION: Sends an AzCommand to a BlockEntity which dispatches the animation to all clients tracking the relevant chunk.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azcommands_101.mdx#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nidleCommand.sendForBlockEntity(myBlockEntity);\n```\n\n----------------------------------------\n\nTITLE: Sending AzCommand to an Entity in Java\nDESCRIPTION: Triggers an animation on an entity by sending the AzCommand using the sendForEntity method. The command handles proper dispatch for client or server side.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azcommands_101.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nwalkCommand.sendForEntity(myEntity);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Item Renderer with AzureLib\nDESCRIPTION: Implements a custom renderer for the animated item, connecting the 3D model, texture, and animator. This renderer class handles how the item is displayed in-game with its animations.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/items/items.mdx#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItemRenderer extends AzItemRenderer {\n    private static final ResourceLocation GEO = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"geo/item/exampleitem.geo.json\"\n    );\n\n    private static final ResourceLocation TEX = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"textures/item/exampleitem.png\"\n    );\n\n    public ExampleItemRenderer() {\n        super(\n            AzItemRendererConfig.builder(GEO, TEX)\n                .setAnimatorProvider(ExampleItemAnimator::new).build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Armor Bone Provider in Java\nDESCRIPTION: This code snippet demonstrates how to create a custom ExampeArmorBoneProvider class that extends AzDefaultArmorBoneProvider. It overrides methods to map custom bone names for left and right boots and legs.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/armor/bone_provider.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampeArmorBoneProvider extends AzDefaultArmorBoneProvider {\n\n    @Override\n    public AzBone getLeftBootBone(AzBakedModel model) {\n        return model.getBone(\"renamedLeftBoot\").orElse(null);\n    }\n\n    @Override\n    public AzBone getLeftLegBone(AzBakedModel model) {\n        return model.getBone(\"renamedLeftLeg\").orElse(null);\n    }\n\n    @Override\n    public AzBone getRightBootBone(AzBakedModel model) {\n        return model.getBone(\"renamedRightBoot\").orElse(null);\n    }\n\n    @Override\n    public AzBone getRightLegBone(AzBakedModel model) {\n        return model.getBone(\"renamedRightLeg\").orElse(null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating AzAutoGlowingLayer with Entity Renderer in Java\nDESCRIPTION: This code snippet demonstrates how to add the AzAutoGlowingLayer to a custom entity renderer to enable automatic texture glowing. It shows the proper setup of resource locations for the model and texture, followed by incorporation of the glow layer in the renderer's construction.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_glowlayer.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntityRenderer extends AzEntityRenderer<ExampleEntity> {\n    private static final ResourceLocation MODEL_LOCATION =\n        ResourceLocation.fromNamespaceAndPath(\"yourmodid\", \"geo/example_model.geo.json\");\n\n    private static final ResourceLocation TEXTURE_LOCATION =\n        ResourceLocation.fromNamespaceAndPath(\"yourmodid\", \"textures/entity/example_model.png\");\n\n    public ExampleEntityRenderer(EntityRendererProvider.Context context) {\n        super(\n            AzEntityRendererConfig.<ExampleEntity>builder(MODEL_LOCATION, TEXTURE_LOCATION)\n                .addRenderLayer(new AzAutoGlowingLayer<>()) // Add the auto glow layer\n                .build(), context\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Animation Dispatcher for Block Entities\nDESCRIPTION: This optional but recommended class helps store animation commands that can be called from other classes. It centralizes animation control logic and provides methods to trigger specific animations.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/blockentities/blockentities.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleBEDispatcher {\n    private static final AzCommand SPINNING_COMMAND = AzCommand.create(\n        \"base_controller\",\n        \"spinning\",\n        AzPlayBehaviors.LOOP\n    );\n\n    public void spin(BlockEntity entity) {\n        SPINNING_COMMAND.sendForItem(entity, itemStack);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Dispatcher in Java with AzureLib\nDESCRIPTION: Creation of an animation dispatcher class that manages animation commands and their execution for different entity states.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/entities/entities.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntityDispatcher {\n    private static final AzCommand IDLE_COMMAND = AzCommand.create(\n        \"base_controller\",\n        \"idle\",\n        AzPlayBehaviors.LOOP\n    );\n\n    private static final AzCommand WALK_COMMAND = AzCommand.create(\n        \"base_controller\",\n        \"walking\",\n        AzPlayBehaviors.LOOP\n    );\n\n    private static final AzCommand RUN_COMMAND = AzCommand.create(\n        \"base_controller\",\n        \"running\",\n        AzPlayBehaviors.LOOP\n    );\n\n    private static final AzCommand DEATH_COMMAND = AzCommand.create(\n        \"base_controller\",\n        \"death\",\n        AzPlayBehaviors.HOLD_ON_LAST_FRAME\n    );\n\n    private final ExampleEntity example_entity;\n\n    public DoomHunterAnimationDispatcher(ExampleEntity animatable) {\n        this.example_entity = animatable;\n    }\n\n    public void idle() {\n        IDLE_COMMAND.sendForEntity(example_entity);\n    }\n\n    public void walk() {\n        WALK_COMMAND.sendForEntity(example_entity);\n    }\n\n    public void run() {\n        RUN_COMMAND.sendForEntity(example_entity);\n    }\n\n    public void death() {\n        DEATH_COMMAND.sendForEntity(example_entity);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Armor Renderer for Custom Armor in Java\nDESCRIPTION: Defines an armor renderer class that connects the armor with its geometry file, texture file, and animator. This renderer is responsible for how the armor is visually displayed in the game.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/armor/armor.mdx#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmorRenderer extends AzArmorRenderer {\n    private static final ResourceLocation GEO = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"geo/item/examplearmor.geo.json\"\n    );\n\n    private static final ResourceLocation TEX = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"textures/item/examplearmor.png\"\n    );\n\n    public ExampleArmorRenderer() {\n        super(\n            AzArmorRendererConfig.builder(GEO, TEX)\n                .setAnimatorProvider(ExampleArmorAnimator::new)\n                .build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Entity Renderers from AzureLib 2.x to 3.x\nDESCRIPTION: Demonstrates how to update entity renderers to use the new AzEntityRenderer class. The new approach requires explicit specification of model and texture resources along with registering the animator.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/entities.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntityRenderer extends GeoEntityRenderer<ExampleEntity> {\n    public ExampleEntityRenderer() {\n        super(new DefaultedEntityGeoModel<>(ResourceLocation.fromNamespaceAndPath(\n            YOUR_MOD_ID, \"example_entity\"\n        )));\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntityRenderer extends AzEntityRenderer<ExampleEntity> {\n    private static final ResourceLocation GEO = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"geo/entity/example_entity.geo.json\"\n    );\n\n    private static final ResourceLocation TEX = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"textures/entity/example_entity.png\"\n    );\n\n    public ExampleEntityRenderer() {\n        super(\n            AzBlockEntityRendererConfig.<ExampleEntity>builder(GEO, TEX)\n                .setAnimatorProvider(ExampleEntityAnimator::new).build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Dispatcher for Armor Animations in Java\nDESCRIPTION: Implements an animation dispatcher class that stores animation commands to be called from other classes. This utility class helps organize and trigger different animations for the armor items using AzCommand.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/armor/armor.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmorDispatcher {\n    private static final AzCommand EQUIP_COMMAND = AzCommand.create(\n        \"base_controller\",\n        \"equipping\",\n        AzPlayBehaviors.PLAY_ONCE\n    );\n\n    private static final AzCommand IDLE_COMMAND = AzCommand.create(\n        \"base_controller\",\n        \"idle\",\n        AzPlayBehaviors.LOOP\n    );\n\n    public void equip(Entity entity, ItemStack itemStack) {\n        EQUIP_COMMAND.sendForItem(entity, itemStack);\n    }\n\n    public void idle(Entity entity, ItemStack itemStack) {\n        IDLE_COMMAND.sendForItem(entity, itemStack);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Animation Controllers from AzureLib 2.x to 3.x\nDESCRIPTION: Shows how animation controller registration has changed from being directly in the entity class to a separate animator class. The new approach uses dedicated animator classes and resource location references.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/entities.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    private static final RawAnimation IDLE = RawAnimation.begin().thenLoop(\"idle\");\n\n    @Override\n    public void registerControllers(AnimatableManager.ControllerRegistrar controllers) {\n        controllers.add(\n            new AnimationController<>(this, \"base_controller\", 0,\n                state -> state.setAndContinue(IDLE))\n        );\n    }\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntityAnimator extends AzEntityAnimator<ExampleEntity> {\n    private static final ResourceLocation ANIMATIONS = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"animations/entity/example_entity.animation.json\"\n    );\n\n    @Override\n    public void registerControllers(AzAnimationControllerContainer<ExampleEntity> animationControllerContainer) {\n        animationControllerContainer.add(\n            AzAnimationController.builder(this, \"base_controller\")\n                .build()\n        );\n    }\n\n    @Override\n    public @NotNull ResourceLocation getAnimationLocation(ExampleEntity animatable) {\n        return ANIMATIONS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Animation Dispatcher for AzureLib Items\nDESCRIPTION: Creates an Animation Dispatcher class to store animation commands that can be called from other classes. This helps organize animation triggers and provides a clean API for animation control.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/items/items.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItemDispatcher {\n    private static final AzCommand FIRING_COMMAND = AzCommand.create(\"base_controller\", \"firing\", AzPlayBehaviors.PLAY_ONCE);\n\n    public void firing(Entity entity, ItemStack itemStack) {\n        FIRING_COMMAND.sendForItem(entity, itemStack);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Armor Renderer in Java\nDESCRIPTION: Shows how to register the custom armor renderer using AzArmorRendererRegistry. This registration should be done in the client initialization phase of the mod setup process.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/armor/armor.mdx#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nAzArmorRendererRegistry.register(ExampleArmorRenderer::new, YourItemRegistry.YOUR_ARMOR_HELMET,\n                YourItemRegistry.YOUR_ARMOR_CHESTPLATE,\n                YourItemRegistry.YOUR_ARMOR_LEGGINGS,\n                YourItemRegistry.YOUR_ARMOR_BOOTS);\n```\n\n----------------------------------------\n\nTITLE: Implementing AzArmorRenderer for Static Armor in Java\nDESCRIPTION: This code snippet demonstrates how to create a custom armor renderer class by extending AzArmorRenderer. It defines the geometry and texture file locations and configures the renderer using AzArmorRendererConfig.builder.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/armor/static_armor.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmorRenderer extends AzArmorRenderer {\n    private static final ResourceLocation GEO = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"geo/item/examplearmor.geo.json\"\n    );\n\n    private static final ResourceLocation TEX = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"textures/item/examplearmor.png\"\n    );\n\n    public ExampleArmorRenderer() {\n        super(AzArmorRendererConfig.builder(GEO, TEX).build());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Armor for Animation Triggering in Java\nDESCRIPTION: Demonstrates how to register armor items with AzIdentityRegistry to ensure proper animation triggering. This registration should be done in the common initialization phase of the mod setup process.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/armor/armor.mdx#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nAzIdentityRegistry.register(YourItemRegistry.YOUR_ARMOR_HELMET,\n                YourItemRegistry.YOUR_ARMOR_CHESTPLATE,\n                YourItemRegistry.YOUR_ARMOR_LEGGINGS,\n                YourItemRegistry.YOUR_ARMOR_BOOTS);\n```\n\n----------------------------------------\n\nTITLE: Creating AzCommand with Custom Play Behavior in Java\nDESCRIPTION: Creates an AzCommand with a loop behavior instead of the default play-once behavior.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azcommands_101.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nAzCommand idleCommand = AzCommand.create(\"Idle\", \"IDLE_ANIMATION\", AzPlayBehaviors.LOOP);\n```\n\n----------------------------------------\n\nTITLE: Integrating Animation Dispatcher in ArmorItem Class in Java\nDESCRIPTION: Shows how to define the ExampleArmorDispatcher within an ArmorItem class. This integration allows the armor to use the animation dispatcher to trigger different animations as needed.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/armor/armor.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmor extends ArmorItem {\n    // This is your class where you will setup the AzCommands/Animations you wish to play\n    public final ExampleArmorDispatcher dispatcher;\n\n    public ExampleArmor(Type type) {\n        super(ArmorMaterials.NETHERITE, type, new Properties());\n        // Create the instance of the class here to use later.\n        this.dispatcher = new ExampleArmorDispatcher();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering 3D Armor Item Renderer for GUI Display in AzureLib\nDESCRIPTION: This snippet demonstrates how to register a 3D item renderer for armor pieces, allowing them to display as 3D models in the GUI instead of flat 2D textures. The registration should be called during client initialization.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/misc.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nAzItemRendererRegistry.register(CustomHelmetItemRenderer::new, YourItemRegistry.YOUR_ARMOR_HELMET);\n```\n\n----------------------------------------\n\nTITLE: Triggering Animations in BlockEntity Tick Method\nDESCRIPTION: This tick method is registered to the Block class's getTicker method and handles animation triggers. It checks if the code is running client-side before triggering animations through the dispatcher.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/blockentities/blockentities.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    public static void tick(\n        Level level,\n        BlockPos pos,\n        BlockState state,\n        ExampleBE blockEntity\n    ) {\n        if (blockEntity.level != null && level.isClientSide()) {\n            // This is where you now trigger an animation to play\n            blockEntity.animationDispatcher.spin(blockEntity);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Item Renderer in AzureLib\nDESCRIPTION: This code defines an ExampleItemRenderer class that extends AzItemRenderer. It specifies the paths to the geometry file (3D model) and texture file, then initializes the renderer with these resources using AzItemRendererConfig.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/items/static_items.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItemRenderer extends AzItemRenderer {\n    private static final ResourceLocation GEO = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"geo/item/exampleitem.geo.json\"\n    );\n\n    private static final ResourceLocation TEX = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"textures/item/exampleitem.png\"\n    );\n\n    public ExampleItemRenderer() {\n        super(\n            AzItemRendererConfig.builder(GEO, TEX).build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending AzCommand to an Item/Armor in Java\nDESCRIPTION: Animates an item by sending an AzCommand with sendForItem method. Requires the item stack to have a registered UUID.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azcommands_101.mdx#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ncombinedCommand.sendForItem(myEntity, myItemStack);\n```\n\n----------------------------------------\n\nTITLE: Triggering Item Animations in Event Methods\nDESCRIPTION: Shows how to trigger animations within item event methods like onUseTick. This example demonstrates playing the 'firing' animation when a player uses the item.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/items/items.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void onUseTick(Level level, LivingEntity livingEntity, ItemStack stack, int remainingUseDuration) {\n        super.onUseTick(level, livingEntity, stack, remainingUseDuration);\n        if (livingEntity instanceof Player player && !level.isClientSide()) {\n            // This is where you now trigger an animation to play\n            dispatcher.firing(player, stack);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Armor Renderer with AzureLib in Java\nDESCRIPTION: This code snippet shows how to register the custom armor renderer with AzureLib's registry system. It links the renderer to specific armor items and should be called in the client initialization event for the respective mod loader (Fabric, Neoforge, or Forge).\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/armor/static_armor.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nAzArmorRendererRegistry.register(ExampleArmorRenderer::new, YourItemRegistry.YOUR_ARMOR_HELMET,\n                YourItemRegistry.YOUR_ARMOR_CHESTPLATE,\n                YourItemRegistry.YOUR_ARMOR_LEGGINGS,\n                YourItemRegistry.YOUR_ARMOR_BOOTS);\n```\n\n----------------------------------------\n\nTITLE: Implementing preRender Method in AzRenderLayer Interface in Java\nDESCRIPTION: This method is called before the base model is rendered and is used for pre-render manipulations such as modifying bone visibility or applying transformations to the model.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/creating_custom_layers.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nvoid preRender(AzRendererPipelineContext<T> context)\n```\n\n----------------------------------------\n\nTITLE: Registering an Item Renderer in AzureLib\nDESCRIPTION: This code registers the custom item renderer with AzureLib's registry system. It associates the renderer with a specific item, allowing the game to use the renderer when displaying that item. This should be called during client initialization.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/items/static_items.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nAzItemRendererRegistry.register(ExampleItemRenderer::new, YourItemRegistry.YOUR_ITEM);\n```\n\n----------------------------------------\n\nTITLE: Registering Item for Animation Triggering with AzIdentityRegistry\nDESCRIPTION: Demonstrates registering an item with AzIdentityRegistry to ensure proper animation triggering. This is a crucial step for the animation system to function correctly with the item.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/items/items.mdx#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nAzIdentityRegistry.register(YourItemRegistry.YOUR_ITEM, ...);\n```\n\n----------------------------------------\n\nTITLE: Initializing Entity Renderer with Block and Item Layer\nDESCRIPTION: Sets up a basic entity renderer class with AzureLib and adds the Block and Item Layer rendering capability.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_blockitem_layer.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntityRenderer extends AzEntityRenderer<ExampleEntity> {\n    private static final ResourceLocation MODEL_LOCATION =\n        ResourceLocation.fromNamespaceAndPath(\"yourmodid\", \"geo/example_model.geo.json\");\n\n    private static final ResourceLocation TEXTURE_LOCATION =\n        ResourceLocation.fromNamespaceAndPath(\"yourmodid\", \"textures/entity/example_model.png\");\n\n    public ExampleEntityRenderer(EntityRendererProvider.Context context) {\n        super(\n                AzEntityRendererConfig.<ExampleEntity>builder(MODEL_LOCATION, TEXTURE_LOCATION)\n                        .addRenderLayer(new AzBlockAndItemLayer<ExampleEntity>() {\n                            // Override methods here\n                        })\n                        .build(),\n                context\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Item Renderer with AzureLib Registry\nDESCRIPTION: Shows how to register the custom item renderer with AzItemRendererRegistry. This step connects the renderer to the specific item instance for client-side rendering.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/items/items.mdx#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nAzItemRendererRegistry.register(ExampleItemRenderer::new, YourItemRegistry.YOUR_ITEM);\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Bones in Armor Rendering with AzureLib\nDESCRIPTION: This code demonstrates how to create a conditional bone in an armor renderer by overriding the createPipeline method and defining a custom bone in the AzArmorBoneContext. The example adds a 'newArmorBone' that can be conditionally displayed.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/misc.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    protected AzArmorRendererPipeline createPipeline(AzRendererConfig config) {\n        return new AzArmorRendererPipeline(config, this){\n            @Override\n            protected AzRendererPipelineContext<ItemStack> createContext(AzRendererPipeline<ItemStack> rendererPipeline) {\n                return  new AzArmorRendererPipelineContext(rendererPipeline){\n                    @Override\n                    public AzArmorBoneContext boneContext() {\n                        return new AzArmorBoneContext(){\n                            // Your Conditional Bone\n                            protected AzBone armorLeggingTorsoBone;\n\n                            // Your Conditional Bone name from the model\n                            public AzBone getArmorLeggingTorsoBone(AzBakedModel model) {\n                                return model.getBone(\"newArmorBone\").orElse(null);\n                            }\n\n                            @Override\n                            public void grabRelevantBones(AzBakedModel model, AzArmorBoneProvider boneProvider) {\n                                super.grabRelevantBones(model, boneProvider);\n                                this.armorLeggingTorsoBone = this.getArmorLeggingTorsoBone(model) ;\n                            }\n                        };\n                    }\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Controlling Bone Visibility Based on Equipped Armor Slots in AzureLib\nDESCRIPTION: This code extends the conditional bone implementation by overriding the applyBoneVisibilityBySlot method to control when specific bones are visible. It hides the conditional bone by default and only makes it visible when leggings are equipped.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/misc.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    protected AzArmorRendererPipeline createPipeline(AzRendererConfig config) {\n        return new AzArmorRendererPipeline(config, this){\n            @Override\n            protected AzRendererPipelineContext<ItemStack> createContext(AzRendererPipeline<ItemStack> rendererPipeline) {\n                return  new AzArmorRendererPipelineContext(rendererPipeline){\n                    @Override\n                    public AzArmorBoneContext boneContext() {\n                        return new AzArmorBoneContext(){\n                            protected AzBone armorLeggingTorsoBone;\n\n                            public AzBone getArmorLeggingTorsoBone(AzBakedModel model) {\n                                return model.getBone(\"newArmorBone\").orElse(null);\n                            }\n\n                            @Override\n                            public void grabRelevantBones(AzBakedModel model, AzArmorBoneProvider boneProvider) {\n                                super.grabRelevantBones(model, boneProvider);\n                                this.armorLeggingTorsoBone = this.getArmorLeggingTorsoBone(model) ;\n                            }\n\n                            @Override\n                            public void applyBoneVisibilityBySlot(EquipmentSlot currentSlot) {\n                                setAllVisible(false);\n\n                                // Hide the legging torso bone initially\n                                this.setBoneVisible(this.armorLeggingTorsoBone, false);\n\n                                switch (currentSlot) {\n                                    case HEAD -> setBoneVisible(this.head, true);\n                                    case CHEST -> {\n                                        setBoneVisible(this.body, true);\n                                        setBoneVisible(this.rightArm, true);\n                                        setBoneVisible(this.leftArm, true);\n                                    }\n                                    case LEGS -> {\n                                        // Make the legging torso bone visible when the legging armor is equiped\n                                        this.setBoneVisible(this.armorLeggingTorsoBone, true);\n                                        setBoneVisible(this.rightLeg, true);\n                                        setBoneVisible(this.leftLeg, true);\n                                    }\n                                    case FEET -> {\n                                        setBoneVisible(this.rightBoot, true);\n                                        setBoneVisible(this.leftBoot, true);\n                                    }\n                                    case MAINHAND, OFFHAND -> { /* NO-OP */ }\n                                }\n                            }\n                        };\n                    }\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing Bones from Bone Cache in AzureLib\nDESCRIPTION: This snippet demonstrates how to override the setCustomAnimations method and retrieve a specific bone from the bone cache for manipulation. It shows the basic setup needed before applying animations to bones.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/animating_in_code.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void setCustomAnimations(Creeper animatable, float partialTicks) {\n        super.setCustomAnimations(animatable, partialTicks);\n        AzBoneCache boneCache = this.context().boneCache();\n        Optional<AzBone> leftArm = boneCache.getBakedModel().getBone(\"your_bones_name\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Triggering Equipment Animation When Swapping Armor in Java\nDESCRIPTION: Overrides the swapWithEquipmentSlot method to trigger an equip animation when the player puts on the armor. This example shows how to use the dispatcher to send animation commands at specific moments.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/armor/armor.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public @NotNull InteractionResultHolder<ItemStack> swapWithEquipmentSlot(\n        Item item,\n        Level level,\n        Player player,\n        InteractionHand hand\n    ) {\n        var result = super.swapWithEquipmentSlot(item, level, player, hand);\n\n        if (!level.isClientSide) {\n            var slot = getEquipmentSlot();\n            var itemStack = player.getItemBySlot(slot);\n            // This is where you now trigger an animation to play\n            dispatcher.equip(player, itemStack);\n        }\n\n        return result;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Stack Bone Mapping\nDESCRIPTION: Associates specific bones with item stacks from entity equipment slots.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_blockitem_layer.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic ItemStack itemStackForBone(AzBone bone, ExampleEntity animatable) {\n    return switch (bone.getName()) {\n        case \"rightHandBone\" -> animatable.getItemBySlot(EquipmentSlot.MAINHAND);\n        case \"leftHandBone\" -> animatable.getItemBySlot(EquipmentSlot.OFFHAND);\n        default -> null;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Idle Animation for Armor in Inventory in Java\nDESCRIPTION: Implements an inventoryTick method to trigger idle animations for armor items when they are in the player's inventory. This ensures continuous animations for worn armor pieces.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/armor/armor.mdx#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void inventoryTick(ItemStack stack, Level level, Entity entity, int slotId, boolean isSelected) {\n        if (!level.isClientSide && entity instanceof Player player ) {\n            player.getArmorSlots().forEach(wornArmor -> {\n                if (wornArmor != null && wornArmor.is(YourItemRegistry.YOUR_ARMOR_CHESTPLATE)) {\n                    dispatcher.serverIdleArmor(player, wornArmor);\n                }\n            });\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Transformations to Armor in Java\nDESCRIPTION: Demonstrates how to override the prepModelPartForRender method to apply custom transformations like translation and scaling to armor pieces before rendering.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_armor_layer.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void prepModelPartForRender(AzRendererPipelineContext<ExampleEntity> context, AzBone bone, ModelPart sourcePart) {\n    context.poseStack().translate(0.0F, 0.2F, 0.0F);\n    context.poseStack().scale(1.2F, 1.2F, 1.2F);\n    super.prepModelPartForRender(context, bone, sourcePart);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Config Class with @Config Annotation in Java\nDESCRIPTION: Demonstrates how to create a config class using the @Config annotation where the id parameter should match your mod's ID. This is the foundation for setting up configuration in AzureLib.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/config_api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Config(id = \"yourmodid\")\npublic class ModConfig {\n    // Configuration fields will be defined here\n}\n```\n\n----------------------------------------\n\nTITLE: Block Entity Class Implementation Comparison\nDESCRIPTION: Shows the difference between AzureLib 2.x and 3.x block entity implementation. In 3.x, you no longer need to implement a Geo interface or register controllers directly in the block entity class. Instead, you create a separate dispatcher class.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/blockentities.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleBE extends BlockEntity implements GeoBlockEntity {\n    // Geckolib used GeckoLibUtil\n    private final AnimatableInstanceCache cache = AzureLibUtil.createInstanceCache(this);\n\n    public ExampleBE(BlockPos pos, BlockState blockState) {\n        super(YourEntityTypes.EXAMPLE_BE, pos, blockState);\n    }\n\n    @Override\n    public void registerControllers(AnimatableManager.ControllerRegistrar controllers) {\n        // Where you registered your Controllers and such\n    }\n\n    @Override\n    public AnimatableInstanceCache getAnimatableInstanceCache() {\n        return cache;\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleBE extends BlockEntity {\n    // This is your class where you will setup the AzCommands/Animations you wish to play\n    public final ExampleBEDispatcher dispatcher;\n\n    public ExampleBE(BlockPos pos, BlockState blockState) {\n        super(YourEntityTypes.EXAMPLE_BE, pos, blockState);\n        // Create the instance of the class here to use later.\n        this.dispatcher = new ExampleBEDispatcher();\n    }\n\n    public static void tick(\n        Level level,\n        BlockPos pos,\n        BlockState state,\n        ExampleBE blockEntity\n    ) {\n        if (blockEntity.level != null && level.isClientSide()) {\n            // This is where you now trigger an animation to play\n            blockEntity.animationDispatcher.spin(blockEntity);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Entity Renderer Implementation\nDESCRIPTION: Full implementation example showing all components working together in a single renderer class.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_blockitem_layer.mdx#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntityRenderer extends AzEntityRenderer<ExampleEntity> {\n    private static final ResourceLocation MODEL_LOCATION =\n        ResourceLocation.fromNamespaceAndPath(\"yourmodid\", \"geo/example_model.geo.json\");\n\n    private static final ResourceLocation TEXTURE_LOCATION =\n        ResourceLocation.fromNamespaceAndPath(\"yourmodid\", \"textures/entity/example_model.png\");\n\n    public ExampleEntityRenderer(EntityRendererProvider.Context context) {\n        super(\n                AzEntityRendererConfig.<ExampleEntity>builder(MODEL_LOCATION, TEXTURE_LOCATION)\n                        .addRenderLayer(new AzBlockAndItemLayer<ExampleEntity>() {\n\n                            @Override\n                            public ItemStack itemStackForBone(AzBone bone, ExampleEntity animatable) {\n                                return switch (bone.getName()) {\n                                    case \"rightHandBone\" -> animatable.getItemBySlot(EquipmentSlot.MAINHAND);\n                                    case \"leftHandBone\" -> animatable.getItemBySlot(EquipmentSlot.OFFHAND);\n                                    default -> null;\n                                };\n                            }\n\n                            @Override\n                            protected ItemDisplayContext getTransformTypeForStack(AzBone bone, ItemStack stack, ExampleEntity animatable) {\n                                return switch (bone.getName()) {\n                                    case \"rightHandBone\" -> ItemDisplayContext.THIRD_PERSON_RIGHT_HAND;\n                                    case \"leftHandBone\" -> ItemDisplayContext.THIRD_PERSON_LEFT_HAND;\n                                    default -> ItemDisplayContext.THIRD_PERSON_RIGHT_HAND;\n                                };\n                            }\n\n                            @Override\n                            protected void renderItemForBone(AzRendererPipelineContext<ExampleEntity> context, AzBone bone, ItemStack itemStack, ExampleEntity animatable) {\n                                context.poseStack().mulPose(Axis.XP.rotationDegrees(270));\n                                context.poseStack().translate(0.0D, 0.1D, -0.1D);\n                                super.renderItemForBone(context, bone, itemStack, animatable);\n                            }\n                        })\n                        .build(),\n                context\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Skull Block Rendering as Armor in Java\nDESCRIPTION: Shows how to override the renderSkullAsArmor method to customize the rendering of skull blocks (e.g., player heads) as armor, including positioning and scaling adjustments.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_armor_layer.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void renderSkullAsArmor(AzRendererPipelineContext<ExampleEntity> context, AzBone bone, ItemStack stack, AbstractSkullBlock skullBlock) {\n    context.poseStack().scale(1.5F, 1.5F, 1.5F); // Make the skull larger\n    context.poseStack().translate(0.0D, 0.25D, 0.0D); // Adjust position\n    super.renderSkullAsArmor(context, bone, stack, skullBlock);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Configurable Fields with Various Data Types in Java\nDESCRIPTION: Shows how to define various configurable fields including primitives, arrays, enums, and nested objects. Each field is annotated with @Configurable and can have default values assigned.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/config_api.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Config(id = MyMod.MOD_ID)\npublic class ModConfig {\n\n    @Configurable\n    public boolean myBoolean = true;\n\n    @Configurable\n    public int myInt = 3;\n\n    @Configurable\n    public int[] myIntArray = {30, 20, 10, 5};\n\n    @Configurable\n    public CustomEnum myEnum = CustomEnum.SOME_VALUE;\n\n    @Configurable\n    public NestedObject myNest = new NestedObject();\n\n    public static class NestedObject {\n        @Configurable\n        public double myDouble = 3.14159265359;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Display Context\nDESCRIPTION: Defines the display context for items based on bone positions.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_blockitem_layer.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected ItemDisplayContext getTransformTypeForStack(AzBone bone, ItemStack stack, ExampleEntity animatable) {\n    return switch (bone.getName()) {\n        case \"rightHandBone\" -> ItemDisplayContext.THIRD_PERSON_RIGHT_HAND;\n        case \"leftHandBone\" -> ItemDisplayContext.THIRD_PERSON_LEFT_HAND;\n        default -> ItemDisplayContext.NONE;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Sound Keyframe Handlers in AzureLib\nDESCRIPTION: Demonstrates how to register sound keyframe handlers in an animation controller. The example shows playing a local sound when a 'walk' keyframe is triggered, with configurable position, sound type, volume, and pitch.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/effectkeyframes/adding_keyframes.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void registerControllers(AzAnimationControllerContainer<Entity> animationControllerContainer) {\n        animationControllerContainer.add(\n            AzAnimationController.builder(this, \"base_controller\")\n                .setKeyframeCallbacks(\n                    AzKeyframeCallbacks.<Entity>builder()\n                        .setSoundKeyframeHandler(\n                            event -> {\n                                if (event.getKeyframeData().getSound().equals(\"walk\")) {\n                                    event.getAnimatable()\n                                        .level()\n                                        .playLocalSound(\n                                            event.getAnimatable().getX(),\n                                            event.getAnimatable().getY(),\n                                            event.getAnimatable().getZ(),\n                                            SoundEvents.METAL_STEP,\n                                            SoundSource.HOSTILE,\n                                            1.0F, // volume\n                                            1.0F, // pitch\n                                            true // Should have distance delay\n                                        );\n                                }\n                            }\n                        )\n                        .build()\n                )\n                .build()\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Instruction Keyframe Handlers in AzureLib\nDESCRIPTION: Demonstrates how to implement custom instruction keyframe handlers in an animation controller. This allows for executing custom code when specific keyframes are triggered during animation.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/effectkeyframes/adding_keyframes.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void registerControllers(AzAnimationControllerContainer<Entity> animationControllerContainer) {\n        animationControllerContainer.add(\n                AzAnimationController.builder(this, \"base_controller\")\n                        .setKeyframeCallbacks(\n                                AzKeyframeCallbacks.<Entity>builder()\n                                        .setCustomInstructionKeyframeHandler(\n                                                event -> {\n                                                    if (event.getKeyframeData().getInstructions().equals(\"walk\")) {\n                                                        // Do your custom instructions here\n                                                    }\n                                                }\n                                        )\n                                        .build()\n                        )\n                        .build()\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering Particle Keyframe Handlers in AzureLib\nDESCRIPTION: Shows implementation of particle keyframe handlers in an animation controller. The example demonstrates spawning bubble particles at an entity's location when a 'walk' keyframe is triggered.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/effectkeyframes/adding_keyframes.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void registerControllers(AzAnimationControllerContainer<Entity> animationControllerContainer) {\n        animationControllerContainer.add(\n                AzAnimationController.builder(this, \"base_controller\")\n                        .setKeyframeCallbacks(\n                                AzKeyframeCallbacks.<Entity>builder()\n                                        .setParticleKeyframeHandler(\n                                                event -> {\n                                                    if (event.getKeyframeData().getEffect().equals(\"walk\")) {\n                                                        event.getAnimatable()\n                                                                .level()\n                                                                .addParticle(\n                                                                        ParticleTypes.BUBBLE,\n                                                                        false, // boolean if particle should always render or not\n                                                                        event.getAnimatable().getX(),\n                                                                        event.getAnimatable().getY(),\n                                                                        event.getAnimatable().getZ(),\n                                                                        0, // x axis speed\n                                                                        0, // y axis speed\n                                                                        0 // z axis speed\n                                                                );\n                                                    }\n                                                }\n                                        )\n                                        .build()\n                        )\n                        .build()\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Modern AzCommand Implementation with MoveAnalysis in Java\nDESCRIPTION: Demonstrates the new approach using AzCommand with MoveAnalysis for entity animation. This approach dispatches animations dynamically based on entity state without needing to manage AnimationController states directly.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azcommands_101.mdx#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntity extends Monster {\n    private final AzCommand idleCommand = AzCommand.create(\"Idle\", \"IDLE_ANIMATION\", AzPlayBehaviors.LOOP);\n    private final AzCommand walkCommand = AzCommand.create(\"Walk\", \"WALK_ANIMATION\");\n    private final MoveAnalysis moveAnalysis;\n\n    public ExampleEntity(EntityType<? extends Monster> entityType, Level level) {\n        super(entityType, level);\n        this.moveAnalysis = new MoveAnalysis(this);\n    }\n\n    @Override\n    public void tick() {\n        super.tick(); // Update base entity behavior\n        moveAnalysis.update(); // Analyze the entity's movement state\n\n        if (this.level().isClientSide) { // Only execute animation logic on the client\n            boolean isMovingOnGround = moveAnalysis.isMovingHorizontally() && onGround();\n\n            if (isMovingOnGround) {\n                walkCommand.sendForEntity(this); // Send the walk animation if moving\n            } else {\n                idleCommand.sendForEntity(this); // Otherwise, send the idle animation\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Animation MCMeta Configuration\nDESCRIPTION: Basic JSON configuration file structure for enabling texture animation in AzureLib. The .mcmeta file must be placed alongside the texture file with the same name plus .mcmeta extension.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_animated_textures.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animation\": {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AzArmorLayer to Entity Renderer in Java\nDESCRIPTION: Demonstrates how to add the AzArmorLayer to an entity renderer configuration. This setup allows for automatic rendering of armor and head equipment on the entity model.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_armor_layer.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport mod.azure.azurelib.rewrite.render.layer.AzArmorLayer;\n\npublic class ExampleEntityRenderer extends AzEntityRenderer<ExampleEntity> {\n    private static final ResourceLocation MODEL_LOCATION =\n        ResourceLocation.fromNamespaceAndPath(\"yourmodid\", \"geo/example_model.geo.json\");\n\n    private static final ResourceLocation TEXTURE_LOCATION =\n        ResourceLocation.fromNamespaceAndPath(\"yourmodid\", \"textures/entity/example_model.png\");\n\n    public ExampleEntityRenderer(EntityRendererProvider.Context context) {\n        super(\n                AzEntityRendererConfig.<ExampleEntity>builder(MODEL_LOCATION, TEXTURE_LOCATION)\n                        .addRenderLayer(new AzArmorLayer<>() {\n                            // Override methods here\n                        }) // Add the armor layer\n                        .build(),\n                context\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renderer Implementation - AzureLib 2.x vs 3.x\nDESCRIPTION: Illustrates the changes in renderer implementation between versions, showing the new configuration-based approach in 3.x.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/items.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItemRenderer<D extends ArmorItem> extends GeoItemRenderer<ExampleItem> {\n    public ExampleItemRenderer() {\n        super(new DefaultedItemGeoModel<>(ResourceLocation.fromNamespaceAndPath(\n            YOUR_MOD_ID, \"exampleitem\"\n        )));\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItemRenderer extends AzItemRenderer {\n    private static final ResourceLocation GEO = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"geo/item/exampleitem.geo.json\"\n    );\n\n    private static final ResourceLocation TEX = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"textures/item/exampleitem.png\"\n    );\n\n    public ExampleItemRenderer() {\n        super(\n            AzItemRendererConfig.builder(GEO, TEX)\n                .setAnimatorProvider(ExampleItemAnimator::new).build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Armor Items for Bones in Java\nDESCRIPTION: Shows how to override the getArmorItemForBone method to customize which armor items are rendered for specific bones based on their names and corresponding equipment slots.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_armor_layer.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected ItemStack getArmorItemForBone(AzRendererPipelineContext<ExampleEntity> context, AzBone bone) {\n    return switch (bone.getName()) {\n        case \"helmetBone\" -> context.animatable().getItemBySlot(EquipmentSlot.HEAD);\n        case \"chestPlateBone\" -> context.animatable().getItemBySlot(EquipmentSlot.CHEST);\n        case \"leggingsBone\" -> context.animatable().getItemBySlot(EquipmentSlot.LEGS);\n        case \"bootsBone\" -> context.animatable().getItemBySlot(EquipmentSlot.FEET);\n        default -> null;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Controller Implementation - AzureLib 2.x vs 3.x\nDESCRIPTION: Demonstrates the changes in animation controller implementation and registration between versions.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/items.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate static final RawAnimation FIRING_ANIMATION = RawAnimation.begin().thenLoop(\"firing\");\n\n@Override\npublic void registerControllers(AnimatableManager.ControllerRegistrar controllers) {\n    controllers.add(\n        new AnimationController<>(this, \"base_controller\", 0,\n            state -> PlayState.CONTINUE).triggerableAnim(\n                \"firing\",\n                FIRING_ANIMATION\n        )\n    );\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItemAnimator extends AzItemAnimator {\n    private static final ResourceLocation ANIMATIONS = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"animations/item/exampleitem.animation.json\"\n    );\n\n    @Override\n    public void registerControllers(AzAnimationControllerContainer<ItemStack> animationControllerContainer) {\n        animationControllerContainer.add(\n            AzAnimationController.builder(this, \"base_controller\")\n                .build()\n        );\n    }\n\n    @Override\n    public @NotNull ResourceLocation getAnimationLocation(ItemStack animatable) {\n        return ANIMATIONS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Item Class Implementation - AzureLib 2.x vs 3.x\nDESCRIPTION: Shows the changes in item class implementation between versions. 2.x requires GeoItem interface implementation while 3.x uses a dispatcher pattern for animations.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/items.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItem extends Item implements GeoItem {\n    private final AnimatableInstanceCache cache = AzureLibUtil.createInstanceCache(this);\n\n    public ExampleItem(Properties properties) {\n        super(properties);\n    }\n\n    @Override\n    public void createRenderer(Consumer<RenderProvider> consumer) {\n        // Where you registered your Renderer\n    }\n\n    @Override\n    public void registerControllers(AnimatableManager.ControllerRegistrar controllers) {\n        // Where you registered your Controllers and such\n    }\n\n    @Override\n    public AnimatableInstanceCache getAnimatableInstanceCache() {\n        return cache;\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItem extends Item {\n    public final ExampleItemDispatcher dispatcher;\n\n    public ExampleItem(Properties properties) {\n        super(properties);\n        this.dispatcher = new ExampleItemDispatcher();\n    }\n\n    @Override\n    public void onUseTick(Level level, LivingEntity livingEntity, ItemStack stack, int remainingUseDuration) {\n        super.onUseTick(level, livingEntity, stack, remainingUseDuration);\n        if (livingEntity instanceof Player player && !level.isClientSide()) {\n            dispatcher.firing(player, stack);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Renderer in Java using AzItemRendererConfig\nDESCRIPTION: Example implementation of an item renderer using AzItemRendererConfig, featuring GUI lighting, offset handling, render layers, and various customization options.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azrenderer_config.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItemRenderer extends AzItemRenderer {\n    private static final ResourceLocation MODEL = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID, \"geo/item/exampleitem.geo.json\"\n    );\n    private static final ResourceLocation TEXTURE = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID, \"textures/item/exampleitem.png\"\n    );\n\n    public ExampleItemRenderer() {\n        super(\n            AzItemRendererConfig.builder(MODEL, TEXTURE)\n                .setAnimatorProvider(ExampleItemAnimator::new) // Custom animator\n                .useEntityGuiLighting() // Enable GUI lighting\n                .useNewOffset(true) // Use new offset for BlockBench 4.11+\n                .addRenderLayer(new CustomItemRenderLayer()) // Add render layers\n                .setPrerenderEntry(context -> {\n                    // Insert code you want to run here\n                    return context;\n                }) // Pre-render hook\n                .setPostRenderEntry(context -> {\n                    // Insert code you want to run here\n                    return context;\n                }) // Post-render hook\n                .setScale(1.0F, 1.0F) // Scaling options\n                .build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Armor Item Class in AzureLib 3.x\nDESCRIPTION: Demonstrates the new armor item implementation in AzureLib 3.x using a dispatcher pattern for animation handling.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/armor.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmor extends ArmorItem {\n    public final ExampleArmorDispatcher dispatcher;\n\n    public ExampleArmor(Type type) {\n        super(ArmorMaterials.NETHERITE, type, new Properties());\n        this.dispatcher = new ExampleArmorDispatcher();\n    }\n\n    @Override\n    public @NotNull InteractionResultHolder<ItemStack> swapWithEquipmentSlot(\n        Item item,\n        Level level,\n        Player player,\n        InteractionHand hand\n    ) {\n        var result = super.swapWithEquipmentSlot(item, level, player, hand);\n\n        if (!level.isClientSide) {\n            var slot = getEquipmentSlot();\n            var itemStack = player.getItemBySlot(slot);\n            dispatcher.equip(player, itemStack);\n        }\n\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic AzCommand in Java\nDESCRIPTION: Creates a basic AzCommand with default play-once behavior, specifying the controller name and animation name.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azcommands_101.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAzCommand walkCommand = AzCommand.create(\"Walk\", \"WALK_ANIMATION\");\n```\n\n----------------------------------------\n\nTITLE: Animation Implementation in AzureLib 3.x\nDESCRIPTION: Demonstrates the new animation system in AzureLib 3.x using dedicated animator classes and animation controllers.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/armor.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmorAnimator extends AzItemAnimator {\n    private static final ResourceLocation ANIMATIONS = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"animations/item/examplearmor.animation.json\"\n    );\n\n    @Override\n    public void registerControllers(AzAnimationControllerContainer<ItemStack> animationControllerContainer) {\n        animationControllerContainer.add(\n            AzAnimationController.builder(this, \"base_controller\")\n                .build()\n        );\n    }\n\n    @Override\n    public @NotNull ResourceLocation getAnimationLocation(ItemStack animatable) {\n        return ANIMATIONS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple AzCommands in Java\nDESCRIPTION: Combines multiple AzCommands into a single unified command using the compose method, allowing simultaneous animation control across multiple controllers.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azcommands_101.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nAzCommand combinedCommand = AzCommand.compose(walkCommand, idleCommand);\n```\n\n----------------------------------------\n\nTITLE: Animation Implementation in AzureLib 2.x/Geckolib\nDESCRIPTION: Shows how animations were implemented in AzureLib 2.x/Geckolib using animation controllers.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/armor.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n    private static final RawAnimation EQUIP_ANIMATION = RawAnimation.begin().thenLoop(\"equipping\");\n\n    @Override\n    public void registerControllers(AnimatableManager.ControllerRegistrar controllers) {\n        controllers.add(\n            new AnimationController<>(this, \"base_controller\", 0,\n                state -> PlayState.CONTINUE).triggerableAnim(\n                    \"equipping\",\n                    EQUIP_ANIMATION\n            )\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Converting Entity Classes from AzureLib 2.x to 3.x\nDESCRIPTION: Demonstrates how to update entity implementations from the older interface-based approach to the new dispatcher system. In 3.x, entities no longer implement GeoEntity and instead use a dedicated dispatcher class for animation control.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/entities.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntity extends Entity implements GeoEntity  {\n    // Geckolib used GeckoLibUtil\n    private final AnimatableInstanceCache cache = AzureLibUtil.createInstanceCache(this);\n\n    public ExampleEntity(EntityType<? extends Entity> entityType, Level level) {\n        super(entityType, level);\n    }\n\n    @Override\n    public void registerControllers(AnimatableManager.ControllerRegistrar controllers) {\n        // Where you registered your Controllers and such\n    }\n\n    @Override\n    public AnimatableInstanceCache getAnimatableInstanceCache() {\n        return cache;\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleEntity extends Entity {\n    // This is your class where you will setup the AzCommands/Animations you wish to play\n    public final ExampleEntityDispatcher dispatcher;\n\n    public ExampleEntity(EntityType<? extends Entity> entityType, Level level) {\n        super(entityType, level);\n        // Create the instance of the class here to use later.\n        this.dispatcher = new ExampleEntityDispatcher(this);\n    }\n\n    @Override\n    public void tick() {\n        super.tick();\n\n        if (this.level().isClientSide) {\n            animationDispatcher.idle();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renderer Implementation in AzureLib 2.x/Geckolib\nDESCRIPTION: Shows the implementation of armor renderer in AzureLib 2.x/Geckolib.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/armor.mdx#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmorRenderer<D extends ArmorItem> extends GeoArmorRenderer<ExampleArmor> {\n    public ExampleArmorRenderer() {\n        super(new DefaultedItemGeoModel<>(ResourceLocation.fromNamespaceAndPath(\n            YOUR_MOD_ID, \"examplearmor\"\n        )));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Dispatcher Implementation\nDESCRIPTION: Shows how to implement an animation dispatcher class in AzureLib 3.x. This class is responsible for creating and sending animation commands to trigger animations for the block entity.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/blockentities.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleBEDispatcher {\n    private static final AzCommand SPINNING_COMMAND = AzCommand.create(\n        \"base_controller\",\n        \"spinning\",\n        AzPlayBehaviors.LOOP\n    );\n\n    public void spin(BlockEntity entity) {\n        SPINNING_COMMAND.sendForItem(entity, itemStack);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renderer Registration in AzureLib 2.x/Geckolib\nDESCRIPTION: Shows how renderers were registered in AzureLib 2.x/Geckolib using the createRenderer method.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/armor.mdx#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void createRenderer(Consumer<RenderProvider> consumer) {\n        consumer.accept(new RenderProvider() {\n            private ExampleArmorRenderer<ExampleArmor> renderer;\n\n            @Override\n            public HumanoidModel<LivingEntity> getHumanoidArmorModel(\n                LivingEntity livingEntity,\n                ItemStack itemStack,\n                EquipmentSlot equipmentSlot,\n                HumanoidModel<LivingEntity> original\n            ) {\n                if (renderer == null) {\n                    renderer = new ExampleArmorRenderer<ExampleArmor>();\n                }\n                renderer.prepForRender(livingEntity, itemStack, equipmentSlot, original);\n                return this.renderer;\n            }\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Animation Controller Registration Comparison\nDESCRIPTION: Demonstrates how animation controllers are registered in AzureLib 2.x versus 3.x. In 3.x, animations are handled in a dedicated animator class that extends AzBlockAnimator, separating animation logic from the block entity.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/blockentities.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    private static final RawAnimation SPINNING = RawAnimation.begin().thenLoop(\"spinning\");\n\n    @Override\n    public void registerControllers(AnimatableManager.ControllerRegistrar controllers) {\n        controllers.add(\n            new AnimationController<>(this, \"base_controller\", 0,\n                state -> PlayState.CONTINUE).triggerableAnim(\n                    \"spinning\",\n                    SPINNING\n            )\n        );\n    }\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleBEAnimator extends AzBlockAnimator<ExampleBE> {\n    private static final ResourceLocation ANIMATIONS = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"animations/item/examplebe.animation.json\"\n    );\n\n    @Override\n    public void registerControllers(AzAnimationControllerContainer<ExampleBE> animationControllerContainer) {\n        animationControllerContainer.add(\n            AzAnimationController.builder(this, \"base_controller\")\n                .build()\n        );\n    }\n\n    @Override\n    public @NotNull ResourceLocation getAnimationLocation(ExampleBE animatable) {\n        return ANIMATIONS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional AnimationController Implementation in Java\nDESCRIPTION: Shows the old approach for animation control using AnimationController, which requires manual state management to switch between animations based on entity state.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/misc/azcommands_101.mdx#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void registerControllers(AnimatableManager.ControllerRegistrar controllers) {\n    controllers.add(new AnimationController<>(this, \"Walk\", 5, state -> {\n        if (state.isMoving()) {\n            return state.setAndContinue(WALK_ANIMATION);\n        }\n        return state.setAndContinue(IDLE_ANIMATION);\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Dispatcher Implementation\nDESCRIPTION: Shows the implementation of an animation dispatcher class for handling animation triggers in AzureLib 3.x.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/armor.mdx#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmorDispatcher {\n    private static final AzCommand EQUIP_COMMAND = AzCommand.create(\n        \"base_controller\",\n        \"equipping\",\n        AzPlayBehaviors.LOOP\n    );\n\n    public void equip(Entity entity, ItemStack itemStack) {\n        EQUIP_COMMAND.sendForItem(entity, itemStack);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Config in NeoForge/Forge Mod Constructor\nDESCRIPTION: Demonstrates how to register the config class in a NeoForge/Forge mod constructor. The code creates a static config instance and registers it with AzureLibMod, specifying JSON as the format.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/config_api.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static ModConfig config;\n\npublic YourMod() {\n    config = AzureLibMod.registerConfig(ModConfig.class,\n        //you can use .json or .yaml formats\n        ConfigFormats.json()).getConfigInstance();\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Dispatcher Implementation - AzureLib 3.x\nDESCRIPTION: Shows the new animation dispatcher pattern implementation in AzureLib 3.x for handling animation triggers.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/items.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleItemDispatcher {\n    private static final AzCommand FIRING_COMMAND = AzCommand.create(\"base_controller\", \"firing\", AzPlayBehaviors.PLAY_ONCE);\n\n    public void firing(Entity entity, ItemStack itemStack) {\n        FIRING_COMMAND.sendForItem(entity, itemStack);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Config Values in Mod Code\nDESCRIPTION: Demonstrates how to access configuration values from your mod code. This simple example shows how to reference a config value through the static config instance.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/config_api.mdx#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic void someMethod() {\n    MyMod.config.configvalue;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing render Method in AzRenderLayer Interface in Java\nDESCRIPTION: The main rendering logic method for custom layers. It's called after the base model is rendered but before supplementary rendering and is where custom visual elements are defined and rendered.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/creating_custom_layers.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid render(AzRendererPipelineContext<T> context)\n```\n\n----------------------------------------\n\nTITLE: Adding AzureLib Dependency for Architectury Forge 1.20.1\nDESCRIPTION: Adds AzureLib as a deobfuscated mod implementation dependency specifically for Architectury-based Forge projects on Minecraft 1.20.1.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/_homepage.mdx#2025-04-19_snippet_5\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n\tmodImplementation fg.deobf(\"mod.azure.azurelib:azurelib-forge-MCVERSION:MODVERSION\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing renderForBone Method in AzRenderLayer Interface in Java\nDESCRIPTION: This method is called once for each bone in the model, allowing rendering of additional elements tied to specific bones. It's computationally expensive and should be used judiciously.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/creating_custom_layers.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nvoid renderForBone(AzRendererPipelineContext<T> context, AzBone bone)\n```\n\n----------------------------------------\n\nTITLE: Adding AzureLib Dependency for Forge (1.20.1 and lower)\nDESCRIPTION: Adds AzureLib as a deobfuscated implementation dependency specifically for Forge modloader projects on Minecraft 1.20.1 and earlier versions.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/_homepage.mdx#2025-04-19_snippet_4\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n\timplementation fg.deobf(\"mod.azure.azurelib:azurelib-forge-MCVERSION:MODVERSION\")\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Item Rendering Transformations\nDESCRIPTION: Applies specific transformations to items before rendering them on bones.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_blockitem_layer.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void renderItemForBone(AzRendererPipelineContext<ExampleEntity> context, AzBone bone, ItemStack itemStack, ExampleEntity animatable) {\n    context.poseStack().mulPose(Axis.XP.rotationDegrees(270));\n    context.poseStack().translate(0.0D, 0.1D, -0.1D);\n    super.renderItemForBone(context, bone, itemStack, animatable);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AzureLib Common Dependency for 1.20.1+\nDESCRIPTION: Adds AzureLib common module as a compile-only dependency for projects targeting Minecraft 1.20.1 or newer versions.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/_homepage.mdx#2025-04-19_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n\tcompileOnly \"mod.azure.azurelib:azurelib-common-MCVERSION:MODVERSION\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Rendering for Bones\nDESCRIPTION: Configures block state rendering with appropriate scaling and positioning.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_blockitem_layer.mdx#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void renderBlockForBone(AzRendererPipelineContext<ExampleEntity> context, AzBone bone, BlockState blockState, ExampleEntity animatable) {\n    context.poseStack().pushPose();\n    context.poseStack().translate(-0.25f, -0.25f, -0.25f);\n    context.poseStack().scale(0.5f, 0.5f, 0.5f);\n    super.renderBlockForBone(context, bone, blockState, animatable);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AzureLib Dependency for Fabric/Quilt\nDESCRIPTION: Adds AzureLib as a mod implementation dependency specifically for Fabric or Quilt modloader projects.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/_homepage.mdx#2025-04-19_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n\tmodImplementation \"mod.azure.azurelib:azurelib-fabric-MCVERSION:MODVERSION\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Use Case for Custom Armor and Skull Rendering in Java\nDESCRIPTION: Provides an example implementation of getArmorItemForBone and renderSkullAsArmor methods for a scenario where a custom animated model requires specific armor rendering on certain bones, including dynamic skull block rendering.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/layers/adding_armor_layer.mdx#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected ItemStack getArmorItemForBone(AzRendererPipelineContext<ExampleEntity> context, AzBone bone) {\n    return switch (bone.getName()) {\n        case \"helmetBone\" -> context.animatable().getItemBySlot(EquipmentSlot.HEAD);\n        case \"chestPlateBone\" -> context.animatable().getItemBySlot(EquipmentSlot.CHEST);\n        default -> null;\n    };\n}\n\n@Override\nprotected void renderSkullAsArmor(AzRendererPipelineContext<ExampleEntity> context, AzBone bone, ItemStack stack, AbstractSkullBlock skullBlock) {\n    context.poseStack().scale(1.2F, 1.2F, 1.2F);\n    context.poseStack().translate(0.0D, 0.4D, 0.0D);\n    super.renderSkullAsArmor(context, bone, stack, skullBlock);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Callbacks for Configuration Values in Java\nDESCRIPTION: Shows how to use @ValueUpdateCallback to link a configuration field to a custom method for validation or additional behaviors when the value changes.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/advanced_config_options.mdx#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Configurable\n@ValueUpdateCallback(method = \"onValueChange\")\npublic int customRange = 10;\n\npublic void onValueChange(int value, IValidationHandler validationHandler) {\n    if (value < 0) {\n        validationHandler.invalidate(\"Value must be positive!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repository for AzureLib in Gradle\nDESCRIPTION: Adds the AzureDoom Mods maven repository to your Gradle build configuration to access AzureLib dependencies.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/_homepage.mdx#2025-04-19_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nrepositories {\n\tmaven {\n\t\tname = \"AzureDoom Mods\"\n\t\turl = \"https://maven.azuredoom.com/mods\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Array Size in Configuration in Java\nDESCRIPTION: Demonstrates the use of @FixedSize annotation to lock an array's size to its default value in the configuration.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/advanced_config_options.mdx#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Configurable\n@FixedSize\npublic int[] fixedArray = {1, 2, 3};\n```\n\n----------------------------------------\n\nTITLE: Adding AzureLib Dependency for NeoForge\nDESCRIPTION: Adds AzureLib as an implementation dependency specifically for NeoForge modloader projects.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/_homepage.mdx#2025-04-19_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n\timplementation \"mod.azure.azurelib:azurelib-neo-MCVERSION:MODVERSION\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to Configuration Values in Java\nDESCRIPTION: Demonstrates the use of @Comment annotation to add a description to a configurable value, which will be visible on hover in GUIs or in the configuration file.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/advanced_config_options.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Configurable\n@Comment(\"This value controls whether vanilla mechanics are used.\")\npublic boolean useVanillaMechanics = true;\n```\n\n----------------------------------------\n\nTITLE: Adding AzureLib Dependency to build.gradle\nDESCRIPTION: This Gradle configuration adds the AzureLib repository and dependencies for different Minecraft mod platforms. It includes options for common, Fabric/Quilt, and NeoForge implementations.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/README.md#2025-04-19_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nrepositories {\n        // The Maven with the mods source\n        maven {url 'https://maven.azuredoom.com/mods'}\n}\n\ndependencies {\n\n        //Common 1.20.1+ Latest Only\n       compileOnly \"mod.azure.azurelib:azurelib-common-MCVERSION:MODVERSION\"\n\t   \n        //Fabric or Quilt\n       modImplementation \"mod.azure.azurelib:azurelib-fabric-MCVERSION:MODVERSION\"\n\t\t\n        //NeoForge\n       implementation \"mod.azure.azurelib:azurelib-neo-MCVERSION:MODVERSION\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Ranges for Floating-Point Values in Java\nDESCRIPTION: Demonstrates the use of @DecimalRange annotation to specify a valid range for floating-point or double values and their arrays.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/advanced_config_options.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configurable\n@DecimalRange(min = 0.0, max = 1.0)\npublic double spawnRate = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Block Entity Renderer Implementation Comparison\nDESCRIPTION: Compares the renderer implementation between AzureLib 2.x and 3.x. The 3.x version uses a builder pattern to configure the renderer and explicitly specifies the model and texture locations, along with the animator provider.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/blockentities.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleBERenderer extends GeoBlockRenderer<ExampleBE> {\n    public ExampleBERenderer() {\n        super(new DefaultedBlockGeoModel<>(ResourceLocation.fromNamespaceAndPath(\n            YOUR_MOD_ID, \"examplebe\"\n        )));\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleBERenderer extends AzBlockEntityRenderer<ExampleBE> {\n    private static final ResourceLocation GEO = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"geo/block/examplebe.geo.json\"\n    );\n\n    private static final ResourceLocation TEX = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"textures/block/examplebe.png\"\n    );\n\n    public ExampleBERenderer() {\n        super(\n            AzBlockEntityRendererConfig.<ExampleBE>builder(GEO, TEX)\n                .setAnimatorProvider(ExampleBEAnimator::new).build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Color Preview for String Values in GUI in Java\nDESCRIPTION: Shows how to use @Gui.ColorValue annotation to add a color preview for string values in the configuration GUI.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/advanced_config_options.mdx#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Configurable\n@Gui.ColorValue(isARGB = true)\npublic String colorCode = \"#FFFFFF\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Armor Item Class in AzureLib 2.x/Geckolib\nDESCRIPTION: Shows the implementation of an armor item class using AzureLib 2.x/Geckolib, including animation cache setup and required interface implementations.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/armor.mdx#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmor extends ArmorItem implements GeoItem {\n    private final AnimatableInstanceCache cache = AzureLibUtil.createInstanceCache(this);\n\n    public ExampleArmor(Type type) {\n        super(ArmorMaterials.NETHERITE, type, new Properties());\n    }\n\n    @Override\n    public void createRenderer(Consumer<RenderProvider> consumer) {\n        // Where you registered your Renderer\n    }\n\n    @Override\n    public void registerControllers(AnimatableManager.ControllerRegistrar controllers) {\n        // Where you registered your Controllers and such\n    }\n\n    @Override\n    public AnimatableInstanceCache getAnimatableInstanceCache() {\n        return cache;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating String Values with Regular Expressions in Java\nDESCRIPTION: Shows how to use the @StringPattern annotation to validate string values against a regular expression and provide an error message for invalid inputs.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/advanced_config_options.mdx#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Configurable\n@StringPattern(value = \"^[a-zA-Z0-9_]+$\", errorDescriptor = \"String must be alphanumeric.\")\npublic String username = \"DefaultUser\";\n```\n\n----------------------------------------\n\nTITLE: Renderer Implementation in AzureLib 3.x\nDESCRIPTION: Demonstrates the new renderer implementation in AzureLib 3.x with explicit resource locations and animator provider.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/armor.mdx#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleArmorRenderer extends AzArmorRenderer {\n    private static final ResourceLocation GEO = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"geo/item/examplearmor.geo.json\"\n    );\n\n    private static final ResourceLocation TEX = ResourceLocation.fromNamespaceAndPath(\n        YOUR_MOD_ID,\n        \"textures/item/examplearmor.png\"\n    );\n\n    public ExampleArmorRenderer() {\n        super(\n            AzArmorRendererConfig.builder(GEO, TEX)\n                .setAnimatorProvider(ExampleArmorAnimator::new)\n                .build()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Numeric Ranges for Integer Values in Java\nDESCRIPTION: Illustrates the use of @Range annotation to specify a valid numeric range for integer or long values and their arrays.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/advanced_config_options.mdx#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configurable\n@Range(min = 0, max = 100)\npublic int maxPlayers = 20;\n```\n\n----------------------------------------\n\nTITLE: Renderer Registration in AzureLib 3.x\nDESCRIPTION: Shows the simplified renderer registration process in AzureLib 3.x using the AzArmorRendererRegistry.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/armor.mdx#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nAzArmorRendererRegistry.register(ExampleArmorRenderer::new, YourItemRegistry.YOUR_ARMOR_HELMET,\n                YourItemRegistry.YOUR_ARMOR_CHESTPLATE,\n                YourItemRegistry.YOUR_ARMOR_LEGGINGS,\n                YourItemRegistry.YOUR_ARMOR_BOOTS);\n```\n\n----------------------------------------\n\nTITLE: Identity Registration in AzureLib 3.x\nDESCRIPTION: Shows how to register armor identities for proper animation trigger functionality in AzureLib 3.x.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/armor.mdx#2025-04-19_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nAzIdentityRegistry.register(YourItemRegistry.YOUR_ARMOR_HELMET,\n                YourItemRegistry.YOUR_ARMOR_CHESTPLATE,\n                YourItemRegistry.YOUR_ARMOR_LEGGINGS,\n                YourItemRegistry.YOUR_ARMOR_BOOTS);\n```\n\n----------------------------------------\n\nTITLE: Registration Implementation - AzureLib 2.x vs 3.x\nDESCRIPTION: Shows the simplified registration process in 3.x compared to 2.x, including the new identity registry requirement.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/updating/items.mdx#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void createRenderer(Consumer<RenderProvider> consumer) {\n    consumer.accept(new RenderProvider() {\n        private ExampleItemRenderer renderer = null;\n\n        @Override\n        public BlockEntityWithoutLevelRenderer getCustomRenderer() {\n            this.renderer = new ExampleItemRenderer();\n            return this.renderer;\n        }\n    });\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nAzItemRendererRegistry.register(ExampleItemRenderer::new, YourItemRegistry.YOUR_ITEM);\n\nAzIdentityRegistry.register(YourItemRegistry.YOUR_ITEM, ...);\n```\n\n----------------------------------------\n\nTITLE: Registering Config in Fabric Mod Initializer\nDESCRIPTION: Shows how to register the config class in a Fabric mod's onInitialize method. Similar to the Forge version, it creates a static config instance and registers it with AzureLibMod.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/config_api.mdx#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static ModConfig config;\n\n@Override\npublic void onInitialize() {\n    config = AzureLibMod.registerConfig(ModConfig.class,\n        //you can use .json or .yaml formats\n        ConfigFormats.json()).getConfigInstance();\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Configuration Values Between Client and Server in Java\nDESCRIPTION: Shows how to use the @Synchronized annotation to ensure a configuration value is synchronized between client and server when a client joins.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/advanced_config_options.mdx#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configurable\n@Synchronized\npublic boolean syncFeatureToggle = true;\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Number Format for GUI Display in Java\nDESCRIPTION: Demonstrates the use of @Gui.NumberFormat annotation to specify a custom number format for floats and doubles in the GUI.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/advanced_config_options.mdx#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Configurable\n@Gui.NumberFormat(\"0.00\")\npublic float roundedValue = 3.14f;\n```\n\n----------------------------------------\n\nTITLE: Setting Character Limit for Text Fields in Configuration GUI in Java\nDESCRIPTION: Illustrates the use of @Gui.CharacterLimit annotation to set a maximum character length for text fields in the configuration GUI.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/configs/advanced_config_options.mdx#2025-04-19_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Configurable\n@Gui.CharacterLimit(16)\npublic String playerName = \"DefaultName\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixin Refmaps for Forge Gradle\nDESCRIPTION: Adds required properties to the client run configuration in Forge Gradle to enable Mixin reference maps, which are necessary for AzureLib to function properly.\nSOURCE: https://github.com/azuredoom/azurelib/blob/1.21.1/docs/azurelib/_homepage.mdx#2025-04-19_snippet_6\n\nLANGUAGE: gradle\nCODE:\n```\nruns {\n\tclient {\n\t\t// Add these two lines\n\t\tproperty 'mixin.env.remapRefMap', 'true'\n\t\tproperty 'mixin.env.refMapRemappingFile', \"${projectDir}/build/createSrgToMcp/output.srg\"\n\n\t\t// The rest of the code that was already here\n\t\t// ...\n\t}\n}\n```"
  }
]