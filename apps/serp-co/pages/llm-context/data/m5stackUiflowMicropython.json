[
  {
    "owner": "m5stack",
    "repo": "uiflow-micropython",
    "content": "TITLE: Publishing Messages to MQTT Topics\nDESCRIPTION: Method to publish a message to an MQTT topic with optional retain flag and quality of service level.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.default.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nMQTTClient.publish(topic, msg, retain=False, qos=0)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading Angle Unit in MicroPython\nDESCRIPTION: This example demonstrates how to import necessary modules, initialize the M5Stack device, create an Angle unit object connected to pins 8 and 9, and continuously read both the voltage and rotation value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/angle.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport M5\nfrom M5 import *\nfrom unit import *\n\nM5.begin()\n\nangle_0 = Angle((8,9))\n\nwhile True:\n    print(angle_0.get_voltage())\n    print(angle_0.get_value())\n```\n\n----------------------------------------\n\nTITLE: Building UIFlow MicroPython Firmware\nDESCRIPTION: Commands to clone the UIFlow MicroPython repository and build the firmware using make commands. The build process includes initializing submodules, applying patches, and building required components like littlefs and mpy-cross.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/m5stack/uiflow_micropython\ncd uiflow_micropython/m5stack\nmake submodules\nmake patch\nmake littlefs\nmake mpy-cross\nmake flash_all\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading IMU Pro Unit Sensors in MicroPython\nDESCRIPTION: This snippet demonstrates how to initialize the IMU Pro Unit and continuously read data from its various sensors. It sets up an I2C connection, creates an IMUProUnit object, and then enters a loop to print accelerometer, gyroscope, magnetometer, compass, attitude, temperature, and pressure readings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/imupro.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import IMUProUnit\nimport time\n\ni2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\nimupro_0 = IMUProUnit(i2c0)\n\nwhile True:\n    print((str('Acc:') + str((imupro_0.get_accelerometer()))))\n    print((str('Gryo:') + str((imupro_0.get_gyroscope()))))\n    print((str('Magneto:') + str((imupro_0.get_magnetometer()))))\n    print((str('Compass:') + str((imupro_0.get_compass()))))\n    print((str('Attitude') + str((imupro_0.get_attitude()))))\n    print((str('Temperature') + str((imupro_0.get_temperature()))))\n    print((str('Pressure:') + str((imupro_0.get_pressure()))))\n    time.sleep_ms(100)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Time Module in MicroPython\nDESCRIPTION: This snippet demonstrates how to import and use various functions from the time module in MicroPython. It includes examples of getting the current time, setting timezones, and using sleep functions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/time.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\n# Get and set timezone\nprint(time.timezone())\ntime.timezone('Asia/Shanghai')\n\n# Get current time\nprint(time.gmtime())\nprint(time.localtime())\n\n# Convert time tuple to seconds\nseconds = time.mktime((2023, 5, 1, 12, 0, 0, 0, 0))\nprint(seconds)\n\n# Sleep functions\ntime.sleep(1)  # sleep for 1 second\ntime.sleep_ms(500)  # sleep for 500 milliseconds\ntime.sleep_us(10000)  # sleep for 10000 microseconds\n\n# Get ticks\nstart = time.ticks_ms()\n# Do some work\nend = time.ticks_ms()\nduration = time.ticks_diff(end, start)\nprint(f\"Operation took {duration} milliseconds\")\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up IR Receive Event Handlers\nDESCRIPTION: Configures an event handler that triggers when an infrared signal is received, allowing for custom processing procedures.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ir.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nIRUnit.rx_event()\n```\n\n----------------------------------------\n\nTITLE: Connecting to WiFi Network in MicroPython\nDESCRIPTION: Connects to a specified wireless network using the provided SSID and key. Optionally restricts connection to a specific access point using BSSID.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/wlan.sta.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nWLAN.connect(ssid=None, key=None, *, bssid=None)\n```\n\n----------------------------------------\n\nTITLE: Creating MQTT Client with SSL Support in MicroPython\nDESCRIPTION: Constructor for creating an MQTTClient object with various connection parameters including optional SSL support. This allows for establishing secure MQTT connections with broker authentication.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.default.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\numqtt.MQTTClient(client_id, server, port=0, user=None, password=None, keepalive=0, ssl=False, ssl_params={})\n```\n\n----------------------------------------\n\nTITLE: Initializing UDP Client Socket in MicroPython\nDESCRIPTION: Creates a UDP socket and connects to a server. This snippet demonstrates how to set up a basic UDP client connection.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.client.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport socket\n\nudpc = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudpc.connect(('192.168.8.236', 8000))\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using MQTT Unit in MicroPython\nDESCRIPTION: This snippet demonstrates how to initialize the MQTT Unit, set up a client, subscribe to a topic, and handle incoming messages in a loop. It showcases basic MQTT functionality including connecting, subscribing, and checking for messages.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/mqtt.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import MQTTUnit\nimport time\n\ndef mqtt_0_SubTopic_event(data):\n    global mqtt_0\n    print(data[0])\n    print(data[1])\n\nmqtt_0 = MQTTUnit(port=(18, 17))\n\nmqtt_0.set_client('m5-mqtt-2024', 'mqtt.m5stack.com', 1883, '', '', 120)\nmqtt_0.set_subscribe('SubTopic', mqtt_0_SubTopic_event, 0)\nmqtt_0.set_connect()\n\nwhile True:\n    mqtt_0.check_msg()\n    time.sleep_ms(50)\n```\n\n----------------------------------------\n\nTITLE: Initializing ModbusRTUSlave in MicroPython\nDESCRIPTION: Example of creating and using a ModbusRTUSlave object in MicroPython. It demonstrates setting up the slave, adding registers, and handling Modbus requests.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom machine import UART\nfrom modbus import ModbusRTUSlave\n\n# Initialize UART\nuart = UART(1, baudrate=9600, tx=21, rx=22)\n\n# Create ModbusRTUSlave instance\nslave = ModbusRTUSlave(uart, device_address=1)\n\n# Add some registers\nslave.add_holding_register(0, 123)\nslave.add_coil(0, True)\n\n# Start the slave\nslave.start()\n\n# Main loop\nwhile True:\n    slave.tick()\n    # Your main code here\n```\n\n----------------------------------------\n\nTITLE: Initializing UART in MicroPython\nDESCRIPTION: This snippet demonstrates how to import and initialize a UART object with specific parameters in MicroPython.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hadrware import UART\n\nuart1 = UART(1, baudrate=115200, bits=8, parity=None, stop=1, tx=9, rx=10)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Connecting NB-IoT2 Unit with MQTT in MicroPython\nDESCRIPTION: This example demonstrates how to initialize the NB-IoT2 Unit, connect to a network, configure an MQTT server, subscribe to a topic, and poll for messages. The code waits for GPRS network connectivity before establishing an MQTT connection.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/nbiot2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import NBIOT2Unit\nimport time\n\ndef nbiot2_0_SubTopic_event(_topic, _msg):\n    print(_topic)\n    print(_msg)\n\nnnbiot2_0 = NBIOT2Unit(2, port=(18, 17))\nwhile not (nbiot2_0.get_gprs_network_status()):\n    time.sleep(2)\nnbiot2_0.mqtt_server_configure('mqtt.m5stack.com', 1883, 'm5-mqtt-2024', '', '', 120)\nnbiot2_0.mqtt_subscribe_topic('SubTopic', nbiot2_0_SubTopic_event, 0)\n\nwhile True:\n    nbiot2_0.mqtt_polling_loop()\n```\n\n----------------------------------------\n\nTITLE: Checking WLAN Connection Status in MicroPython\nDESCRIPTION: Returns the current status of the wireless connection. When called without arguments, it returns the network link status. With an argument, it retrieves specific status parameters like RSSI.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/wlan.sta.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWLAN.status([param])\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request with requests2.get()\nDESCRIPTION: Function to send a GET request. It takes a URL and optional keyword arguments, returning a Response object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/requests2.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrequests2.get(url, **kw)\n```\n\n----------------------------------------\n\nTITLE: Pin Constructor for GPIO Access in MicroPython\nDESCRIPTION: Creates a Pin object to access GPIO pins with specified mode and pull configuration. Supports various modes including input and output configurations, as well as pull-up and pull-down resistor settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/pin.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPin(id, mode=-1, pull=-1)\n```\n\n----------------------------------------\n\nTITLE: Verifying WLAN Connection in MicroPython\nDESCRIPTION: Checks if the WLAN interface is connected to a WiFi access point and has a valid IP address in STA mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/wlan.sta.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWLAN.isconnected()\n```\n\n----------------------------------------\n\nTITLE: Button Event Handling Example in MicroPython\nDESCRIPTION: Demonstrates button event handling with callbacks for click and hold states, including screen setup and continuous updates.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/button.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\n\ndef btnPWR_wasClicked_event(state):\n    global label0\n    label0.setText('clicked')\n\ndef btnPWR_wasHold_event(state):\n    global label0\n    label0.setText('hold')\n\nM5.begin()\nWidgets.fillScreen(0x222222)\nlabel0 = Widgets.Label(\"Text\", 58, 43, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu24)\n\nBtnPWR.setCallback(type=BtnPWR.CB_TYPE.WAS_CLICKED, cb=btnPWR_wasClicked_event)\nBtnPWR.setCallback(type=BtnPWR.CB_TYPE.WAS_HOLD, cb=btnPWR_wasHold_event)\n\nwhile True:\n    M5.update()\n```\n\n----------------------------------------\n\nTITLE: Drawing Various Shapes and Text on M5Stack Display with MicroPython\nDESCRIPTION: This example demonstrates how to use various Display functions to draw shapes, text, and images on an M5Stack device. It includes setting rotation, drawing circles, rectangles, lines, and more.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/display.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport M5\nfrom M5 import Display\nimport random\nimport time\n\nM5.begin()\n\nprint(\"rotation: \", Display.getRotation())\nprint(\"color depth: \", Display.getColorDepth())\nprint(\"w: %d, h: %d\"%(Display.width(), Display.height()))\n\nDisplay.setRotation(1)\nDisplay.clear(0)\nDisplay.setTextColor(fgcolor=0x0000FF, bgcolor=0)\nDisplay.setFont(M5.Lcd.FONTS.EFontCN24)\nDisplay.setCursor(220, 3)\nDisplay.print(\"你好\",color=0xFF0000)\n\nDisplay.drawImage(\"res/img/uiflow.jpg\", 0, 0)\nDisplay.drawJpg(\"res/img/default.jpg\", 60, 0)\n\nDisplay.drawQR(\"Hello\", 220, 40, 100)\n\nDisplay.drawCircle(30, 80, 20, 0x0000FF)\nDisplay.fillCircle(80, 80, 20, 0x0000FF)\n\nDisplay.drawEllipse(60, 140, 50, 30, 0x00FF00)\nDisplay.fillEllipse(60, 140, 30, 20, 0xFFFF00)\n\nDisplay.drawLine(x0=115, y0=10, x1=115, y1=60, color=0xFF0000)\n\nDisplay.drawRect(125, 10, 40, 30, 0xFF0000)\nDisplay.fillRect(125, 50, 40, 30, 0x00FF00)\n\nDisplay.drawRoundRect(120, 90, 50, 40, 10, 0xFF0000)\nDisplay.fillRoundRect(125, 95, 40, 30, 10, 0x00FF00)\n\nDisplay.drawTriangle(135, 150, 110, 190, 160, 190, 0x00FF00)\nDisplay.fillTriangle(145, 150, 170, 190, 190, 150, 0x0000FF)\n\nDisplay.drawArc(10, 180, 40, 45, 0, 90, 0xFFFF00)\nDisplay.fillArc(20, 190, 40, 45, 0, 90, 0x00FFFF)\n\nDisplay.drawEllipseArc(200, 150, 30, 35, 20, 25, 0, 90, 0x00FF0F)\nDisplay.fillEllipseArc(200, 170, 30, 35, 20, 25, 0, 90, 0x00FFF0)\n```\n\n----------------------------------------\n\nTITLE: Event Scheduling with Ticks Difference in MicroPython\nDESCRIPTION: Shows how to schedule events using ticks_diff() with handling for early, on-time, and late execution scenarios. Includes handling of negative ticks differences for overdue events.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/time.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# This code snippet is not optimized\nnow = time.ticks_ms()\nscheduled_time = task.scheduled_time()\nif ticks_diff(scheduled_time, now) > 0:\n    print(\"Too early, let's nap\")\n    sleep_ms(ticks_diff(scheduled_time, now))\n    task.run()\nelif ticks_diff(scheduled_time, now) == 0:\n    print(\"Right at time!\")\n    task.run()\nelif ticks_diff(scheduled_time, now) < 0:\n    print(\"Oops, running late, tell task to run faster!\")\n    task.run(run_faster=true)\n```\n\n----------------------------------------\n\nTITLE: Implementing M5-ESPNOW Communication in MicroPython\nDESCRIPTION: This snippet demonstrates how to set up and use M5-ESPNOW for wireless communication between ESP32 devices. It includes initializing the M5ESPNow object, setting up a receive callback, adding a peer, and sending random data periodically.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/m5espnow.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom m5espnow import *\nimport time\nimport random\n\ndef espnow_recv_callback(espnow_obj):\n    espnow_mac, espnow_data = espnow_obj.recv_data()\n    print(espnow_mac)\n    print(espnow_data)\n\nespnow_0 = M5ESPNow(0)\nespnow_0.set_irq_callback(espnow_recv_callback)\nespnow_0.set_add_peer('xxxxxxxxxxxx', 1, 0, False)\n\nwhile True:\n    espnow_0.send_data(1, random.randint(1000000, 9999999))\n    time.sleep(2)\n```\n\n----------------------------------------\n\nTITLE: Scanning for Available WiFi Networks in MicroPython\nDESCRIPTION: Scans for available wireless networks, including hidden networks if the WLAN interface allows. Returns a list of tuples with information about WiFi access points.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/wlan.sta.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nWLAN.scan()\n```\n\n----------------------------------------\n\nTITLE: Implementing BLE Client in MicroPython using M5BLE\nDESCRIPTION: This snippet demonstrates how to create a BLE client using the M5BLE library. It sets up service UUIDs, defines connection callbacks, and implements a loop for writing to and reading from BLE services.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/m5ble.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# client\nfrom m5ble import M5BLE\n\nUUID_SERVICE1 = \"6E400011-B5A3-F393-E0A9-E50E24DCCA9E\"\nUUID_SERVICE1_WR = \"6E400012-B5A3-F393-E0A9-E50E24DCCA9E\"\nUUID_SERVICE1_RD = \"6E400013-B5A3-F393-E0A9-E50E24DCCA9E\"\n\nUUID_SERVICE2 = \"6E400021-B5A3-F393-E0A9-E50E24DCCA9E\"\nUUID_SERVICE2_WR = \"6E400022-B5A3-F393-E0A9-E50E24DCCA9E\"\nUUID_SERVICE2_RD = \"6E400023-B5A3-F393-E0A9-E50E24DCCA9E\"\n\nconnected = False\ndef on_connected(client):\n    global connected\n    print(client._service_handle_map)\n    connected = True\n    ble.client.set_mtu(128)\n\ndef on_disconnected(client, conn_handle, addr_type, addr):\n    global connected\n    connected = False\n\nble = M5BLE.Device(verbose=True)\nble.client.scan(target_name_prefix=\"M5\")\nble.client.on_connected(on_connected)\n\ntry:\n    while True:\n        if connected:\n            ble.client.write(\"Hello Service 1\", UUID_SERVICE1_WR, UUID_SERVICE1)\n            ble.client.write(\"Hello Service 2\", UUID_SERVICE2_WR, UUID_SERVICE2)\n            time.sleep(0.1)\n            print(ble.client.read(UUID_SERVICE1_RD, UUID_SERVICE1))\n            print(ble.client.read(UUID_SERVICE2_RD, UUID_SERVICE2))\n        time.sleep(1)\nexcept KeyboardInterrupt:\n    gc.collect()\n    print(\"\\nExiting...\")\n```\n\n----------------------------------------\n\nTITLE: Setting up ESP-IDF Environment for UIFlow MicroPython\nDESCRIPTION: Commands to clone the ESP-IDF repository at version 5.2.2, initialize submodules, and set up the build environment for UIFlow MicroPython development.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir uiflow_workspace && cd uiflow_workspace\ngit clone -b v5.2.2 https://github.com/espressif/esp-idf.git\ngit -C esp-idf submodule update --init --recursive\n./esp-idf/install.sh\n. ./esp-idf/export.sh\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Weight I2C Unit in MicroPython\nDESCRIPTION: This example demonstrates how to initialize a Weight I2C Unit and get weight measurements. It creates an I2C connection on pins 1 and 2, initializes the Weight I2C Unit, and retrieves both raw ADC values and weight values in grams.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/weight_i2c.rst#2025-04-21_snippet_0\n\nLANGUAGE: micropython\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import WEIGHT_I2CUnit\nimport time\n\ni2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\nweight_i2c0 = WEIGHT_I2CUnit(i2c0)\nprint(weight_i2c_0.get_adc_raw)\nprint(weight_i2c_0.get_weight_float)\ntime.sleep_ms(100)\n```\n\n----------------------------------------\n\nTITLE: Complete MicroPython Example for HMI Module with Core2\nDESCRIPTION: A complete working example that demonstrates the functionality of the HMI Module with an M5Stack Core2. It initializes the UI with widgets, sets up the HMI module, and implements a loop that reads button states, controls LEDs, and handles rotary encoder input.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/hmi.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom module import HMIModule\nimport time\n\n\ntitle0 = None\nlabel0 = None\nlabel1 = None\nlabel2 = None\nlabel3 = None\nlabel4 = None\nlabel5 = None\nlabel6 = None\nhmi_0 = None\n\n\nled_a_state = None\nled_b_state = None\nbtn_a_state = None\nbtn_b_state = None\n\n\ndef setup():\n    global title0, label0, label1, label2, label3, label4, label5, label6, hmi_0, led_a_state, led_b_state, btn_a_state, btn_b_state\n\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n    title0 = Widgets.Title(\"HMI Core2 Test\", 3, 0xffffff, 0x0000FF, Widgets.FONTS.DejaVu18)\n    label0 = Widgets.Label(\"Btn enc:\", 0, 81, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n    label1 = Widgets.Label(\"Btn A:\", 0, 129, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n    label2 = Widgets.Label(\"Btn B:\", 0, 176, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n    label3 = Widgets.Label(\"Rotary:\", 0, 37, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n    label4 = Widgets.Label(\"LED A:\", 173, 106, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n    label5 = Widgets.Label(\"LED B:\", 173, 164, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n    label6 = Widgets.Label(\"Rotary Inc:\", 173, 41, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n\n    hmi_0 = HMIModule(address=0x41)\n    hmi_0.set_rotary_value(0)\n\n\ndef loop():\n    global title0, label0, label1, label2, label3, label4, label5, label6, hmi_0, led_a_state, led_b_state, btn_a_state, btn_b_state\n    M5.update()\n    led_a_state = hmi_0.get_led_state(1)\n    led_b_state = hmi_0.get_led_state(2)\n    btn_a_state = hmi_0.get_button_status(2)\n    btn_b_state = hmi_0.get_button_status(3)\n    label0.setText(str((str('Rotary:') + str((hmi_0.get_button_status(1))))))\n    label1.setText(str((str('Btn A:') + str(btn_a_state))))\n    label2.setText(str((str('Btn B:') + str(btn_b_state))))\n    label4.setText(str((str('LED A:') + str(led_a_state))))\n    label5.setText(str((str('LED B:') + str(led_b_state))))\n    label3.setText(str((str('Enc:') + str((hmi_0.get_rotary_value())))))\n    if hmi_0.get_button_status(1):\n        label6.setText(str((str('Rotary Inc:') + str((hmi_0.get_rotary_increments())))))\n    elif btn_a_state:\n        led_a_state = not led_a_state\n        hmi_0.set_led_state(1, led_a_state)\n    elif btn_b_state:\n        led_b_state = not led_b_state\n        hmi_0.set_led_state(2, led_b_state)\n        hmi_0.reset_rotary_value()\n    time.sleep_ms(200)\n\n\nif __name__ == '__main__':\n    try:\n        setup()\n        while True:\n            loop()\n    except (Exception, KeyboardInterrupt) as e:\n        try:\n            from utility import print_error_msg\n            print_error_msg(e)\n        except ImportError:\n            print(\"please update to latest firmware\")\n```\n\n----------------------------------------\n\nTITLE: Implementing CardKB Unit Callback in MicroPython\nDESCRIPTION: Example code demonstrating how to use the CardKB Unit with a callback function to handle key press events. The callback function is triggered when a key is pressed, and the code shows initialization, callback setup, and continuous updating of key status.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/cardkb.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cardkb_unit import CardKBUnit\n\ndef cb(key):\n    print(key)\n\ncardkb = CardKBUnit(i2c)\ncardkb.set_callback(cb)\nwhile True:\n    cardkb.tick()\n```\n\n----------------------------------------\n\nTITLE: UART Constant Definitions in MicroPython\nDESCRIPTION: Definition of UART constants for flow control, operating modes, and interrupt trigger sources. These constants are used to configure UART behavior and interrupt handling across different microcontroller platforms.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nUART.RTS\nUART.CTS\n\nUART.MODE_UART\nUART.MODE_RS485_HALF_DUPLEX\nUART.MODE_IRDA\nUART.MODE_RS485_COLLISION_DETECT\nUART.MODE_RS485_APP_CTRL\n\nUART.IRQ_RXIDLE\nUART.IRQ_RX\nUART.IRQ_TXIDLE\nUART.IRQ_BREAK\n```\n\n----------------------------------------\n\nTITLE: Playing WAV Data from File in MicroPython\nDESCRIPTION: Method for playing WAV format audio data from a file. It allows specifying the file path, number of repetitions, selecting a specific audio channel, and controlling whether to wait for previous audio playback to finish before starting the new output.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/speaker.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSpeaker.playWavFile(path: str[, repeat: int[, channel: int[, stop_current_sound: bool]]]) -> None\n```\n\n----------------------------------------\n\nTITLE: Implementing BLE Server in MicroPython using M5BLE\nDESCRIPTION: This snippet shows how to create a BLE server using the M5BLE library. It sets up services and characteristics, defines a receive callback, and starts the BLE server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/m5ble.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# server\nfrom m5ble import M5BLE\n\nUUID_SERVICE1 = \"6E400011-B5A3-F393-E0A9-E50E24DCCA9E\"\nUUID_SERVICE1_WR = \"6E400012-B5A3-F393-E0A9-E50E24DCCA9E\"\nUUID_SERVICE1_RD = \"6E400013-B5A3-F393-E0A9-E50E24DCCA9E\"\n\nUUID_SERVICE2 = \"6E400021-B5A3-F393-E0A9-E50E24DCCA9E\"\nUUID_SERVICE2_WR = \"6E400022-B5A3-F393-E0A9-E50E24DCCA9E\"\nUUID_SERVICE2_RD = \"6E400023-B5A3-F393-E0A9-E50E24DCCA9E\"\n\ndef onReceive(server, client):\n    print(\"onReceive\")\n    if client.any(UUID_SERVICE1_WR):\n        client.write(client.read(UUID_SERVICE1_WR), UUID_SERVICE1_RD)\n    if client.any(UUID_SERVICE2_WR):\n        client.write(client.read(UUID_SERVICE2_WR), UUID_SERVICE2_RD)\n\nble = M5BLE.Device(verbose=True)\nble.server.add_service(UUID_SERVICE1, [\n    ble.server.create_characteristic(UUID_SERVICE1_RD, notify=True, read=True),\n    ble.server.create_characteristic(UUID_SERVICE1_WR, write=True),\n])\nble.server.add_service(UUID_SERVICE2, [\n    ble.server.create_characteristic(UUID_SERVICE2_RD, notify=True, read=True),\n    ble.server.create_characteristic(UUID_SERVICE2_WR, write=True),\n])\nble.server.start()\nble.server.on_receive(onReceive)\nwhile True:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using NCIR Temperature Sensor in MicroPython\nDESCRIPTION: A complete example demonstrating how to initialize an NCIR unit and read both ambient and object temperatures. The code sets up the I2C connection and performs temperature readings using the NCIRUnit class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/ncir.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import *\n\ni2c0 = None\nncir_0 = None\n\ndef setup():\n    global i2c0, ncir_0\n\n    i2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\n    ncir_0 = NCIRUnit(i2c0)\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n\n    print(ncir_0.get_ambient_temperature())\n    print(ncir_0.get_object_temperature())\n```\n\n----------------------------------------\n\nTITLE: Receiving Data with LoRaE220-433 Unit in MicroPython\nDESCRIPTION: Example code demonstrating how to set up a LoRaE220-433 Unit to receive data in non-blocking mode. The code defines a callback function that prints received data and RSSI value, then initializes the unit with appropriate pins.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lora_e220_433.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import LoRaE220433Unit\n\ndef lorae220433_0_receive_event(received_data, rssi):\n    print(received_data.decode())\n    print(rssi)\n\nlorae220433_0 = LoRaE220433Unit(1, (13, 14))\nlorae220433_0.receive_none_block(lorae220433_0_receive_event)\n```\n\n----------------------------------------\n\nTITLE: Controlling USB Module GPIO pins in MicroPython\nDESCRIPTION: This example demonstrates how to control the 5 output pins and read from the 5 input pins of the USB Module. It shows switching high and low levels on outputs and reading input pin states.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/usb.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# USB Module GPIO Example\nfrom m5stack import *\nfrom m5stack_ui import *\nfrom uiflow import *\nfrom module import usb_module\n\nscreen = M5Screen()\nscreen.clean_screen()\nscreen.set_screen_bg_color(0xFFFFFF)\n\n# Initialize the USB module with default CS pin (1) and INT pin (10)\nmodule_usb = usb_module.USBModule()\n\n# Wait for the module to initialize\nwait(0.5)\n\n# GPIO output example\nprint(\"GPIO output example\")\n\n# Set output pin 1 to high level\nmodule_usb.write_gpout(1, 1)\nwait(1)\n\n# Set output pin 1 to low level\nmodule_usb.write_gpout(1, 0)\nwait(1)\n\n# GPIO input example\nprint(\"GPIO input example\")\n\nwhile True:\n    # Read and print the level of input pin 1\n    pin1_level = module_usb.read_gpin(1)\n    print(\"Input Pin 1 Level:\", pin1_level)\n    \n    # Poll module data\n    module_usb.poll_data()\n    wait(0.2)\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP GET Request in MicroPython\nDESCRIPTION: Example of using the requests2 module to send a GET request in MicroPython. This snippet demonstrates the basic usage of the module for making network requests.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/requests2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/softwave/http/cores3_http_get_example.py\n    :language: python\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Client and Connecting to Server in MicroPython\nDESCRIPTION: This snippet demonstrates how to create a socket object and establish a connection to a TCP server. It uses the socket module to create a TCP socket and connect to a server at the specified IP address and port.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.client.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport socket\n\ntcpc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ntcpc.connect(('192.168.8.236', 8001))\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading Data from ENV Units in MicroPython\nDESCRIPTION: This snippet demonstrates how to initialize three different types of ENV units and read temperature, humidity, and pressure data from them. It uses the I2C interface for communication and supports all three versions of the ENV sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/env.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport M5\nfrom M5 import *\nfrom unit import *\n\nM5.begin()\n\ni2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\n\nenv_0 = ENVUnit(i2c=i2c0, type=1) # ENVUnit\nenv2_0 = ENVUnit(i2c=i2c0, type=2) # ENVUnit II\nenv3_0 = ENVUnit(i2c=i2c0, type=3) # ENVUnit III\n\nprint(env_0.read_temperature())\nprint(env_0.read_humidity())\nprint(env_0.read_pressure())\n```\n\n----------------------------------------\n\nTITLE: DAC Value Setting Methods\nDESCRIPTION: Methods for setting DAC values in different formats including raw 12-bit values, 16-bit values, normalized floating-point values, and voltage values. Includes EEPROM saving functionality.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dac.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef set_value(self, value: int) -> None\ndef set_voltage(self, voltage: float) -> None\ndef set_raw_value(self, value: int) -> None\ndef set_normalized_value(self, value: float) -> None\ndef save_to_eeprom(self) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using LlmModule for Voice Assistant in MicroPython\nDESCRIPTION: This example demonstrates how to initialize the LlmModule, set up a voice assistant, and register callbacks for keyword detection, ASR data input, and LLM data input. The code also shows how to continuously update the module to process incoming data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/llm.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom module import LlmModule\n\ndef on_keyword_detected():\n    print(\"[Keyword] detected\")\n\ndef on_asr_data_input(data: str, finish: bool, index: int):\n    print(f\"[ASR data] {data}\")\n\ndef on_llm_data_input(data: str, finish: bool, index: int):\n    print(f\"[LLM data] {data}\")\n\nmodule_llm = LlmModule()\nmodule_llm.begin_voice_assistant()\n\nmodule_llm.set_voice_assistant_on_keyword_detected_callback(on_keyword_detected)\nmodule_llm.set_voice_assistant_on_asr_data_input_callback(on_asr_data_input)\nmodule_llm.set_voice_assistant_on_llm_data_input_callback(on_llm_data_input)\n\nwhile True:\n    module_llm.update()\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a TCP Socket in MicroPython\nDESCRIPTION: This code demonstrates how to write data to a TCP socket using the write method. Similar to send, it can accept both bytes and string data, but attempts to write all data at once.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.client.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntcpc.write(b'Hello, World!')\ntcpc.write('Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Sending Network Requests with requests2.request()\nDESCRIPTION: Function to send a network request using various HTTP methods. It supports optional data, JSON, and headers parameters. The function blocks until the response data is returned.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/requests2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrequests2.request(method, url, data=None, json=None, headers={})\n```\n\n----------------------------------------\n\nTITLE: Constructing ModbusRTUSlave Object\nDESCRIPTION: Constructor for the ModbusRTUSlave class. It initializes a Modbus RTU slave with the specified UART, device address, and optional parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmodbus.ModbusRTUSlave(uart, device_address: int=1, context=None, ignore_unit_id: bool=False, verbose: bool=False)\n```\n\n----------------------------------------\n\nTITLE: Recording Audio to File in MicroPython\nDESCRIPTION: Records audio from microphone to a file with specified URI and duration. Supports both local flash storage and SD card, with WAV and AMR format options.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.recorder.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRecorder.record(uri: str, time: int, sync=True)\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying PNG Image from File Data\nDESCRIPTION: Reads PNG image data from a file and displays it on the screen. This approach opens the file in binary mode, reads the data directly, and then closes the file after drawing, placing the image at position (0,100).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/display.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimg = open(\"res/img/uiflow.png\", \"b\")\nimg.seek(0)\nDisplay.drawPng(img.read(), 0, 100)\nimg.close()\n```\n\n----------------------------------------\n\nTITLE: Initializing WLAN STA Interface in MicroPython\nDESCRIPTION: Creates a WLAN network interface object for the station (client) mode, which connects to upstream WiFi access points.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/wlan.sta.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWLAN(interface_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using QRCode Unit with MicroPython\nDESCRIPTION: Example showing how to initialize a QRCode Unit, set up event callbacks, and implement continuous scanning in MicroPython. Uses I2C communication and implements event-based QR code detection.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/qrcode.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import QRCodeUnit\nfrom hardware import *\n\ndef qrcode_0_event(qrdata):\n    print(qrdata)\n\ni2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\nqrcode_0 = QRCodeUnit(0, i2c0, 0x21)\nqrcode_0.set_event_cb(qrcode_0_event)\nqrcode_0.set_trigger_mode(1)\n\nwhile True:\n    qrcode_0.event_poll_loop()\n    time.sleep_ms(25)\n```\n\n----------------------------------------\n\nTITLE: Sending Data to a TCP Socket in MicroPython\nDESCRIPTION: This snippet shows how to send data to a connected TCP socket. The send method can accept either bytes or string data and returns the number of bytes sent.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.client.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntcpc.send(b'Hello, World!')\ntcpc.send('Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using LoRa Module with MicroPython\nDESCRIPTION: This example demonstrates how to initialize the LoRa module for different M5Stack devices and perform basic communication operations. It shows how to send messages, receive data directly, and set up an interrupt-based callback for asynchronous reception.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom module import LoraModule\nlora = LoraModule(pin_irq=35, pin_rst=13) # basic\nlora = LoraModule(pin_irq=35, pin_rst=25) # core2\nlora = LoraModule(pin_irq=10, pin_rst=5) # cores3\nlora.send(\"Hello, LoRa!\")\n\nprint(lora.recv())\n\ndef callback(received_data):\n    global lora\n    print(received_data)\n    lora.start_recv()\nlora.set_irq_callback(callback)\nlora.start_recv()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using PLUS Module in MicroPython\nDESCRIPTION: This snippet demonstrates how to initialize and use the PLUS Module in a MicroPython program. It sets up a UI, initializes the PLUS Module, and continuously updates the display with rotary and button information.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/plus.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom module import PLUSModule\n\ntitle0 = None\nlabel2 = None\nlabel0 = None\nlabel1 = None\nplus_0 = None\n\nbtn_state = None\nlast_btn_state = None\n\ndef setup():\n    global title0, label2, label0, label1, plus_0, btn_state, last_btn_state\n\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n    title0 = Widgets.Title(\"PLUS Core2 Test\", 3, 0xffffff, 0x0000FF, Widgets.FONTS.DejaVu18)\n    label2 = Widgets.Label(\"Btn rotray:\", 1, 166, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n    label0 = Widgets.Label(\"Rotary:\", 1, 60, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n    label1 = Widgets.Label(\"Rotary Inc:\", 1, 111, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n\n    plus_0 = PLUSModule(address=0x62)\n    plus_0.set_rotary_value(0)\n\ndef loop():\n    global title0, label2, label0, label1, plus_0, btn_state, last_btn_state\n    M5.update()\n    btn_state = plus_0.get_button_status()\n    label0.setText(str((str('Rotary:') + str((plus_0.get_rotary_value())))))\n    label2.setText(str((str('Btn rotray:') + str(btn_state))))\n    if btn_state and btn_state != last_btn_state:\n        label1.setText(str((str('Rotary Inc:') + str((plus_0.get_rotary_increments())))))\n    last_btn_state = btn_state\n\nif __name__ == '__main__':\n    try:\n        setup()\n        while True:\n            loop()\n    except (Exception, KeyboardInterrupt) as e:\n        try:\n            from utility import print_error_msg\n            print_error_msg(e)\n        except ImportError:\n            print(\"please update to latest firmware\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Sending Data with LoRaE220 Unit in MicroPython\nDESCRIPTION: This snippet demonstrates how to initialize the LoRaE220 unit and send data periodically. It uses pins 33 and 32 for communication and sends a 'hello' message every second.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lora_e220.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import LoRaE220JPUnit\nimport time\n\nlorae220_0 = LoRaE220JPUnit((33, 32))\n\nwhile True:\n    lorae220_0.send(0xFFFF, 0, bytes([0x68, 0x65, 0x6C, 0x6C, 0x6F]))\n    time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Initializing AtomicQRCode2Base Object\nDESCRIPTION: Creates an instance of AtomicQRCode2Base with specified UART parameters and pins\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom base import AtomicQRCode2Base\n\nbase_qrcode2 = AtomicQRCode2Base(id = 1, tx = 6, rx = 5, trig = 7)\n```\n\n----------------------------------------\n\nTITLE: Setting Up M5ESPNow Receive Callback in MicroPython\nDESCRIPTION: This code snippet shows how to set up a callback function for receiving M5-ESPNOW messages. The callback function is called when a message is received, and it prints the sender's MAC address and the received data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/m5espnow.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef espnow_recv_callback(espnow_obj):\n    espnow_mac, espnow_data = espnow_obj.recv_data()\n    print(espnow_mac, espnow_data)\n\nM5ESPNow.set_irq_callback(espnow_recv_callback)\n```\n\n----------------------------------------\n\nTITLE: Initializing ADC Object in MicroPython\nDESCRIPTION: Creates an ADC object for a specified pin with optional attenuation. Attenuation settings allow for measuring different voltage ranges.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/adc.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nADC(pin, *, atten)\n```\n\n----------------------------------------\n\nTITLE: Locking Memory Bank in UHFRFIDUnit (MicroPython)\nDESCRIPTION: This method locks different memory banks of a UHFRFID tag. It allows setting lock status for kill, access, EPC, TID, and user memory banks. The method takes lock status parameters and an access password.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.lock_mem_bank(kill_lock: int = 0b00, access_lock: int = 0b00, epc_lock: int = 0b00, tid_lock: int = 0b00, user_lock: int = 0b00, access: str = \"00000000\") -> bool\n```\n\n----------------------------------------\n\nTITLE: Sending Data to Specific Address using UDP Socket in MicroPython\nDESCRIPTION: This code demonstrates how to send data to a specific address using a UDP socket in MicroPython. It sends a string message to the specified IP address and port.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.server.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nudps.sendto(\"hello\", (\"192.168.8.8\", 8000))\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Modbus Register Values\nDESCRIPTION: Methods to get and set values for various types of Modbus registers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.get_coil(register: int) -> bool\nModbusRTUSlave.get_discrete_input(register: int) -> bool\nModbusRTUSlave.get_holding_register(register: int) -> int\nModbusRTUSlave.get_input_register(register: int) -> int\n\nModbusRTUSlave.set_coil(register: int, value: bool) -> None\nModbusRTUSlave.set_discrete_input(register: int, value: bool) -> None\nModbusRTUSlave.set_holding_register(register: int, value: int) -> None\nModbusRTUSlave.set_input_register(register: int, value: int) -> None\n\nModbusRTUSlave.set_multi_coils(register: int, value: list) -> None\nModbusRTUSlave.set_multi_discrete_input(register: int, value: list) -> None\nModbusRTUSlave.set_multi_holding_register(register: int, value: list) -> None\nModbusRTUSlave.set_multi_input_register(register: int, value: list) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing RS232Module Class in MicroPython\nDESCRIPTION: Constructor for creating an RS232Module object with configurable parameters including baudrate, bits, parity, and stop bits. Allows setting up UART communication with specified parameters and optional hardware flow control.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/rs232.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nRS232Module(id, baudrate=9600, bits=8, parity=None, stop=1, *, ...)\n```\n\n----------------------------------------\n\nTITLE: Initializing CAN in Loopback Mode\nDESCRIPTION: Example demonstrating how to initialize a CAN bus in loopback mode, send a message with ID 123, and receive a message. This example doesn't require a physical CAN transceiver.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/can.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom m5can import CAN\ncan = CAN(1, CAN.LOOPBACK, 1, 2)\ncan.send('message!', 123)   # send a message with id 123\ncan.recv(0)                # receive message\n```\n\n----------------------------------------\n\nTITLE: Transmitting Data with LoRaE220-433 Unit in MicroPython\nDESCRIPTION: Example code showing how to initialize the LoRaE220-433 Unit and continuously send messages. The code imports required modules, creates a LoRaE220433Unit instance, and sends 'Hello M5' to address 0x9999 every second.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lora_e220_433.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import LoRaE220433Unit\nimport time\n\nlorae220433_0 = LoRaE220433Unit(1, (18, 17))\n\nwhile True:\n    lorae220433_0.send(0x9999, 0, 'Hello M5')\n    time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Color Measurement Methods\nDESCRIPTION: Collection of methods for reading various color measurements including RGB values, HSV values, color temperature, and lux.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/color.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nget_lux() -> float\nget_color_temperature() -> float\nget_color_rgb_bytes() -> tuple\nget_color_r() -> int\nget_color_g() -> int\nget_color_b() -> int\nget_color_h() -> int\nget_color_s() -> float\nget_color_v() -> float\n```\n\n----------------------------------------\n\nTITLE: Initializing and Controlling Servos8 HAT with MicroPython\nDESCRIPTION: Example demonstrating how to initialize the Servos8 HAT, control servo angles, and manage power. Uses I2C communication with address 0x36 and controls all 8 servo channels.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/servo8.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom hat import Servos8Hat\ni2c0 = I2C(0, scl=Pin(26), sda=Pin(0), freq=100000)\nservo = Servos8Hat(i2c0, 0x36)\nservo.power_on()\nfor i in range(1, 9):\nservo.write_servo_angle(i, 90)\nservo.power_off()\n```\n\n----------------------------------------\n\nTITLE: Creating and Binding UDP Socket in MicroPython\nDESCRIPTION: This snippet demonstrates how to create a UDP socket and bind it to an address using MicroPython. It initializes a socket object and binds it to all available interfaces on port 8000.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.server.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport socket\n\nudps = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudps.bind(('0.0.0.0', 8000))\n```\n\n----------------------------------------\n\nTITLE: IMU Sensor Methods Implementation\nDESCRIPTION: Core IMU class methods for retrieving sensor data. Includes getAccel(), getGyro(), and getMag() methods that return tuples of x, y, z values from the respective sensors. Requires M5.begin() initialization and M5.update() in the main loop.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/imu.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef getAccel() -> tuple[float, float, float]\ndef getGyro() -> tuple[float, float, float]\ndef getMag() -> tuple[float, float, float]\n```\n\n----------------------------------------\n\nTITLE: Initializing CO2LUnit in MicroPython\nDESCRIPTION: Constructor for the CO2LUnit class. It initializes the CO2L Unit with the I2C interface and address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit(i2c, address)\n```\n\n----------------------------------------\n\nTITLE: Initializing ModbusTCPClient in MicroPython\nDESCRIPTION: Creates a ModbusTCPClient object with specified host, port, and verbose mode. This constructor sets up the client for Modbus TCP communication.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.client.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodbus.ModbusTCPClient(host: str, port: int=502, verbose: bool=False)\n```\n\n----------------------------------------\n\nTITLE: Creating Object Detector Instance\nDESCRIPTION: Examples of creating object detector instances for human face and pedestrian detection\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/dl.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndetector = dl.ObjectDetector(dl.model.HUMAN_FACE_DETECT)\ndetector = dl.ObjectDetector(dl.model.PEDESTRIAN_DETECT)\n```\n\n----------------------------------------\n\nTITLE: Accepting Client Connections\nDESCRIPTION: Accepts incoming client connections and returns client socket and address information.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.server.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient_socket, addr = tcps.accept()\nprint('Connected by', addr)\n```\n\n----------------------------------------\n\nTITLE: Getting Distance from ToF Unit in MicroPython\nDESCRIPTION: Method to get distance measured by the ToF Unit in centimeters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nToFUnit.get_distance() -> float\n```\n\n----------------------------------------\n\nTITLE: Subscribing to MQTT Topics with Callback Handler\nDESCRIPTION: Method to subscribe to an MQTT topic with a callback handler function that is called when messages are received on the topic.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.default.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nMQTTClient.subscribe(topic, handler, qos=0)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Joystick2Unit in MicroPython\nDESCRIPTION: Example showing how to initialize the Joystick2Unit, read ADC values, check button status, control RGB LED, and configure deadzone settings. This demonstrates the basic functionality of the joystick unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/joystick2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import Joystick2Unit\nfrom hardware import *\ni2c = I2C(1, scl=22, sda=21)\njoystick = Joystick2Unit(i2c)\njoystick.read_adc_value()\njoystick.read_button_status()\njoystick.set_rgb_led(255, 0, 0)\njoystick.get_rgb_led()\njoystick.set_deadzone_position(200, 200)\nwhile True:\n    joystick.read_axis_position()\n```\n\n----------------------------------------\n\nTITLE: Setting External Port Power Output in MicroPython\nDESCRIPTION: Controls the power output mode of external ports. When enabled, ports are in output mode; when disabled, they're in input mode. The port parameter is optional and only valid for M5Stack Station.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPower.setExtOutput(enable: bool, port: int=0xFF) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Watchdog Timer in MicroPython\nDESCRIPTION: This snippet demonstrates how to create a WDT object, start it with a specified timeout, and feed it periodically to prevent system resets. The timeout is set in milliseconds, and once started, the WDT cannot be stopped or reconfigured.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/wdt.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass WDT:\n    def __init__(self, id=0, timeout=5000):\n        # Create a WDT object and start it\n        # The timeout must be given in milliseconds\n        pass\n\n    def feed(self):\n        # Feed the WDT to prevent it from resetting the system\n        pass\n```\n\n----------------------------------------\n\nTITLE: Setting Up Non-Blocking Data Reception\nDESCRIPTION: Method to start non-blocking reception of data from the Zigbee network, using a callback function that is triggered when data is received.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.receive_none_block(receive_callback)\n```\n\n----------------------------------------\n\nTITLE: Receiving Data with Address from UDP Socket in MicroPython\nDESCRIPTION: This snippet shows how to receive data along with the sender's address from a UDP socket in MicroPython. It returns a tuple containing the data and the address of the sender.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.server.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata, address = udps.recvfrom(1024)\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Reading Discrete Inputs with ModbusRTUMaster in MicroPython\nDESCRIPTION: Method for reading discrete inputs from a Modbus slave device, returning a list of boolean values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.master.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUMaster.read_discrete_inputs(address, register, quantity, timeout: int=2000) -> list\n```\n\n----------------------------------------\n\nTITLE: Finding QR Codes in an Image using code_scanner Module\nDESCRIPTION: Method that performs QR code recognition on an input image and returns a QRCode instance. It takes an image.Image object as input and returns an image.qrcode object that can be used to access the QR code's payload and type.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/code_scanner.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfind_qrcodes(img: image.Image) -> image.qrcode\n```\n\n----------------------------------------\n\nTITLE: Initializing LoRaSx1262Module in MicroPython\nDESCRIPTION: Code to create and initialize a LoRaSx1262Module object with specific pin configurations and communication parameters. This allows setting up a LoRa communication module using the SX1262 chip.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora_sx1262.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom module import LoRaSx1262Module\n\nlora868v12_0 = LoRaSx1262Module(5, 1, 10, 2, 868000, '250', 8, 8, 12, 0x12, 10)\n```\n\n----------------------------------------\n\nTITLE: Reading Data from M5BLE Connected Client (Python)\nDESCRIPTION: This method reads data from a connected BLE device. It requires the UUID of the characteristic and optionally the number of bytes to read. If no size is specified, it reads all available bytes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/m5ble.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconnected_client_handle.read(uuid, sz=None)\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Modbus Registers\nDESCRIPTION: Methods to add and remove various types of Modbus registers (coils, discrete inputs, holding registers, input registers).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.add_coil(register: int, value: bool) -> None\nModbusRTUSlave.add_discrete_input(register: int, value: bool) -> None\nModbusRTUSlave.add_holding_register(register: int, value: int) -> None\nModbusRTUSlave.add_input_register(register: int, value: int) -> None\n\nModbusRTUSlave.remove_coil(register: int) -> None\nModbusRTUSlave.remove_discrete_input(register: int) -> None\nModbusRTUSlave.remove_holding_register(register: int) -> None\nModbusRTUSlave.remove_input_register(register: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing Audio Recorder in MicroPython\nDESCRIPTION: Creates a Recorder object with specified sample rate, bit depth, and stereo settings. Sample rate can range from 8000-96000 Hz.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.recorder.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naudio.Recorder(sample=8000, bits=16, stereo=False)\n```\n\n----------------------------------------\n\nTITLE: Playing Raw Audio Data with Player.play_raw() in MicroPython\nDESCRIPTION: Plays raw audio data with configurable sample rate, stereo/mono setting, bit depth, position, volume, and synchronous mode options.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.player.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPlayer.play_raw(data, sample=16000, stereo=False, bits=16, pos=0, volume=-1, sync=True)\n```\n\n----------------------------------------\n\nTITLE: CoreS3 Microphone Example in MicroPython\nDESCRIPTION: A complete example showing how to use the microphone on a CoreS3 device. This example appears to be referenced in the documentation but the actual code snippet is not visible in the provided content.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/mic.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Note: This is a reference to an external file 'cores3_mic_example.py'\n# The actual code is not present in the provided documentation\n```\n\n----------------------------------------\n\nTITLE: Transmitting IR Signals Using NEC Protocol in MicroPython\nDESCRIPTION: Transmits an infrared signal with the specified command and data using the NEC protocol. This method allows M5Stack devices to control external devices like TVs, air conditioners, or other IR-controlled appliances.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/ir.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nIR.tx(cmd, data)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using OP90 Unit with MicroPython\nDESCRIPTION: This example demonstrates how to initialize and use an OP90 Unit with M5Stack hardware. It shows importing necessary modules, setting up I2C communication, creating an OP90 Unit object, getting values from the unit, and resetting its counter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/op90.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nimport time\nfrom unit import *\n\ni2c0 = None\nop90_0 = None\n\ndef setup():\n    global i2c0, op90_0\n\n    i2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\n    op90_0 = OPUnit((8, 9), type=1)\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n\n    print(op90_0.get_value)\n    time.sleep(1)\n    print(op90_0.count_value)\n    time.sleep(1)\n    op90_0.count_reset()\n    time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Dual_Button Unit in MicroPython\nDESCRIPTION: This example demonstrates how to set up and use a Dual_Button unit with M5Stack devices. It imports necessary modules, initializes the dual button on pins 36 and 26, and checks if a button is being held.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/dualbutton.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import *\n\n\ndual_button_0_blue = None\ndual_button_0_red = None\n\ndef setup():\n    global dual_button_0_blue, dual_button_0_red\n\n    dual_button_0_blue, dual_button_0_red = DualButton((36, 26))\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n\n    print(dual_button_0_blue.isHolding())\n```\n\n----------------------------------------\n\nTITLE: Initializing UART Parameters in MicroPython\nDESCRIPTION: This code shows how to initialize or reinitialize UART parameters using the init() method.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuart1.init(baudrate=115200, bits=8, parity=None, stop=1, tx=9, rx=10)\n```\n\n----------------------------------------\n\nTITLE: Initializing DAC Unit Class in MicroPython\nDESCRIPTION: Constructor for DACUnit class that initializes a DAC unit with specified I2C connection, address, and voltage parameters. Allows configuration of supply voltage (vdd) and output voltage (vout).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dac.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDACUnit(i2c: I2C, address: int = 0x60, vdd: float = 5.0, vout: float = 3.3)\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple Registers to Modbus Server in MicroPython\nDESCRIPTION: Writes multiple registers to the Modbus server. Specifies slave address, start register, list of integer values to write, and timeout. Returns the count of written registers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.client.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPClient.write_multiple_registers(address: int, register: int, values: list, timeout: int=2000) -> int\n```\n\n----------------------------------------\n\nTITLE: Handling MQTT Subscription Events in MicroPython\nDESCRIPTION: This code snippet shows how to define a handler function for MQTT subscription events. It prints the topic and message content when a subscribed message is received.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/mqtt.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef mqtt_0_SubTopic_event(data):\n    print(\"topic:\", data[0])\n    print(\"msg:\", data[1])\n```\n\n----------------------------------------\n\nTITLE: Initializing Module4In8Out Class in Python\nDESCRIPTION: Constructor for the Module4In8Out class that initializes the I2C connection with the 4In8Out module. It accepts an address parameter that can be an integer, list, or tuple representing the I2C address of the module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/4in8out.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nModule4In8Out(address)\n```\n\n----------------------------------------\n\nTITLE: Creating Image Widget in MicroPython\nDESCRIPTION: Constructor for creating an Image widget object. Accepts file path, x/y coordinates, and optional parent object. Supports BMP, JPG, and PNG image formats.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/image.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWidgets.Image(str: file, x: int, y: int, parent)\n```\n\n----------------------------------------\n\nTITLE: Reading Input Registers from Modbus Server in MicroPython\nDESCRIPTION: Reads input registers from the Modbus server. Specifies slave address, start register, quantity of registers to read, and timeout. Returns a list of integer values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.client.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPClient.read_input_registers(address, register, quantity, timeout: int=2000) -> list\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using OP180 Unit in MicroPython\nDESCRIPTION: This snippet demonstrates how to initialize the OP180 Unit, get its value, retrieve the count value, and reset the count. It uses the OPUnit class from the unit module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/op180.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nimport time\nfrom unit import *\n\nop180_0 = None\n\ndef setup():\n    global op180_0\n\n    op180_0 = OPUnit((8, 9), type=1)\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n\n    print(op180_0.get_value)\n    time.sleep(1)\n    print(op180_0.count_value)\n    time.sleep(1)\n    op180_0.count_reset()\n    time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Initializing IR Module for M5Stack Devices in MicroPython\nDESCRIPTION: Creates an instance of the IR class to initialize the infrared functionality on supported M5Stack devices. The constructor automatically configures the appropriate pins based on the detected board type.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/ir.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nIR()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Controlling ODrive Module in MicroPython\nDESCRIPTION: This snippet demonstrates how to import and initialize the ODriveModule, set voltage, velocity, current, control mode, and position. It showcases basic usage of the module's key functions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/odrive.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom module import ODriveModule\ndrive = ODriveModule(port=(13,5))\ndrive.get_vbus_voltage()\ndrive.set_velocity(10)\ndrive.set_current(5)\ndrive.set_control_mode(ODriveModule.CONTROL_MODE_POSITION_CONTROL)\ndrive.set_position(1000)\n```\n\n----------------------------------------\n\nTITLE: Getting Battery Voltage in MicroPython\nDESCRIPTION: Returns the current battery voltage in millivolts.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nPower.getBatteryVoltage() -> int\n```\n\n----------------------------------------\n\nTITLE: Blocking Wait for MQTT Messages\nDESCRIPTION: Method to wait for and process incoming MQTT messages in a blocking manner. Should be called periodically in a loop when subscribed to topics.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.default.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nMQTTClient.wait_msg()\n```\n\n----------------------------------------\n\nTITLE: LTE Network Configuration\nDESCRIPTION: Retrieves network interface parameters including IP address, subnet mask, gateway and DNS server\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lte.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncomlte_0.ifconfig()\ncomlte_0.ifconfig()[0] # IP address\ncomlte_0.ifconfig()[1] # network\ncomlte_0.ifconfig()[2] # gateway\ncomlte_0.ifconfig()[3] # DNS server\n```\n\n----------------------------------------\n\nTITLE: Writing Single Coil to Modbus Server in MicroPython\nDESCRIPTION: Writes a single coil to the Modbus server. Specifies slave address, register, boolean value to write, and timeout. Returns the written value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.client.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPClient.write_single_coil(address, register, value, timeout: int=2000) -> bool\n```\n\n----------------------------------------\n\nTITLE: IMU Type Constants Definition\nDESCRIPTION: Constants defining different IMU sensor types supported by the system. These include NULL, UNKNOWN, SH200Q, MPU6050, MPU6886, MPU9250, and BMI270 sensors.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/imu.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nIMU_TYPE.NULL\nIMU_TYPE.UNKNOWN\nIMU_TYPE.SH200Q\nIMU_TYPE.MPU6050\nIMU_TYPE.MPU6886\nIMU_TYPE.MPU9250\nIMU_TYPE.BMI270\n```\n\n----------------------------------------\n\nTITLE: Getting Acceleration Values with MicroPython\nDESCRIPTION: Example demonstrating how to read acceleration data from the Accel Unit using MicroPython. The code shows integration with M5Stack hardware to display acceleration values on screen.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/accel.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unit import Unit\nfrom m5stack import *\n\n# Create accel unit instance\naccel_0 = Unit.get(Unit.ACCEL)\n\n# Main program loop\nwhile True:\n    # Get acceleration values\n    x = accel_0.get_x()\n    y = accel_0.get_y()\n    z = accel_0.get_z()\n    \n    # Display values on screen\n    print('X:', x, 'Y:', y, 'Z:', z)\n    \n    # Brief delay\n    wait_ms(100)\n```\n\n----------------------------------------\n\nTITLE: TFCard mounting with MicroPython\nDESCRIPTION: Example code demonstrating how to read/create directories using the Atomic TFCard Base in MicroPython. The code would read files in the /sd directory after mounting the TF card.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/tfcard.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom base import AtomicTFCardBase\nbase_tfcard = AtomicTFCardBase(slot=3, width=1, sck=7, miso=8, mosi=6, freq=20000000)\n```\n\n----------------------------------------\n\nTITLE: Initializing CAN Unit with Advanced Configuration\nDESCRIPTION: Advanced constructor for CANUnit that provides detailed control over CAN bus timing parameters. Includes options for prescaler, SJW (resynchronisation jump width), bit timing segments (BS1, BS2), and triple sampling configuration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/can.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCANUnit(tx, rx, mode, prescaler=32, sjw=3, bs1=15, bs2=4, triple_sampling=False)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Weight I2C Unit in Micropython\nDESCRIPTION: This snippet demonstrates how to initialize the Weight I2C Unit and use its basic functions in Micropython. It sets up the I2C connection, creates a WEIGHT_I2CUnit object, and retrieves raw ADC and weight values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/weight_i2c.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import WEIGHT_I2CUnit\nimport time\n\ni2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\nweight_i2c0 = WEIGHT_I2CUnit(i2c0)\nprint(weight_i2c_0.get_adc_raw)\nprint(weight_i2c_0.get_weight_float)\ntime.sleep_ms(100)\n```\n\n----------------------------------------\n\nTITLE: Reading a Line from UART in MicroPython\nDESCRIPTION: This snippet demonstrates how to read a line ending with a newline character from the UART bus.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(uart1.readline())\n```\n\n----------------------------------------\n\nTITLE: Controlling Fan v1.1 Module with MicroPython\nDESCRIPTION: This code demonstrates how to initialize a Fan v1.1 module, configure its settings, and create an interactive touch-based control. It shows how to set fan status, adjust PWM frequency and duty cycle, and display real-time information on the screen.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/fan.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/module/fan/fan_cores3_example.py\n        :language: python\n        :linenos:\n```\n\n----------------------------------------\n\nTITLE: Initializing Digital Input in MicroPython\nDESCRIPTION: Creates a digital input object with a specified ID between 1-8. This allows interfacing with digital input pins on the hardware.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/plcio.digitalinput.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hadrware import DigitalInput\n\nin1 = DigitalInput(1)\n```\n\n----------------------------------------\n\nTITLE: Setting GPS Work Mode in MicroPython\nDESCRIPTION: Sets the working mode of the GPS module. The mode parameter is defined by the GPS module specifications.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/gps_v11.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nGPSV11Unit.set_work_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Initializing TVOC Unit with MicroPython\nDESCRIPTION: Example script demonstrating how to use the TVOCUnit with MicroPython on a Cores3 device.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tvoc.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/unit/tvoc/tvoc_cores3_example.py\n        :language: python\n        :linenos:\n```\n\n----------------------------------------\n\nTITLE: Reading Data from RFID Card Block\nDESCRIPTION: Method to read data from a specific block address on the RFID card. The block_addr parameter specifies which memory block to read from.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rfid.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nRFIDUnit.read(block_addr)\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on MiniOLED Unit with MicroPython\nDESCRIPTION: This MicroPython code snippet demonstrates how to display the text \"Mini\" on the MiniOLED Unit screen. It utilizes the MiniOLEDUnit class to initialize and control the display.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/minioled.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unit import MiniOLEDUnit\nfrom m5stack import *\n\n# Init MiniOLED Unit\noled = MiniOLEDUnit()\n\n# Clear display\noled.fill(0)\n\n# Set font\noled.font(oled.FONT_DejaVu18)\n\n# Draw text\noled.text(\"Mini\", 0, 0)\n\n# Show on display\noled.show()\n```\n\n----------------------------------------\n\nTITLE: Calibrating HX711 Sensor with Known Weight\nDESCRIPTION: Method to calibrate the scale using a known weight, establishing the scaling factor for accurate measurements. Requires a known weight parameter for reference.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/weight.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nWEIGHTUnit.set_calibrate_scale(weight)\n```\n\n----------------------------------------\n\nTITLE: Capturing USB Mouse Input with USB Module in MicroPython\nDESCRIPTION: This example shows how to implement a USB host to capture mouse input. It reads mouse button states, cursor movement, and wheel scrolling from a connected USB mouse.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/usb.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# USB Mouse Example\nfrom m5stack import *\nfrom m5stack_ui import *\nfrom uiflow import *\nfrom module import usb_module\n\nscreen = M5Screen()\nscreen.clean_screen()\nscreen.set_screen_bg_color(0xFFFFFF)\n\n# Create label widgets for displaying mouse data\nlabel_title = M5Label('USB Mouse Test', x=20, y=10, color=0x000, font=FONT_MONT_14, parent=None)\nlabel_btn = M5Label('Mouse Button:', x=20, y=50, color=0x000, font=FONT_MONT_14, parent=None)\nlabel_move = M5Label('Mouse Movement:', x=20, y=90, color=0x000, font=FONT_MONT_14, parent=None)\nlabel_wheel = M5Label('Mouse Wheel:', x=20, y=130, color=0x000, font=FONT_MONT_14, parent=None)\n\n# Initialize the USB module\nmodule_usb = usb_module.USBModule()\n\ndef show_mouse_button_states():\n    btn_text = 'Mouse Button: '\n    if module_usb.is_left_btn_pressed():\n        btn_text += 'Left '\n    if module_usb.is_right_btn_pressed():\n        btn_text += 'Right '\n    if module_usb.is_middle_btn_pressed():\n        btn_text += 'Middle '\n    if module_usb.is_back_btn_pressed():\n        btn_text += 'Back '\n    if module_usb.is_forward_btn_pressed():\n        btn_text += 'Forward '\n    label_btn.set_text(btn_text)\n\nwhile True:\n    # Poll data from the USB module\n    module_usb.poll_data()\n    \n    # Check and display mouse button states\n    show_mouse_button_states()\n    \n    # Read and display mouse movement\n    move = module_usb.read_mouse_move()\n    label_move.set_text('Mouse Movement: X=%d, Y=%d' % (move[0], move[1]))\n    \n    # Read and display mouse wheel movement\n    wheel = module_usb.read_wheel_move()\n    label_wheel.set_text('Mouse Wheel: %d' % wheel)\n    \n    wait_ms(50)\n```\n\n----------------------------------------\n\nTITLE: Powering Off the Device in MicroPython\nDESCRIPTION: Turns off all power to the device.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPower.powerOff()\n```\n\n----------------------------------------\n\nTITLE: Drawing Test Example in MicroPython for CoreS3\nDESCRIPTION: This snippet demonstrates how to use the image module for drawing on the CoreS3 Controller. It includes importing necessary modules, setting up the display, and drawing various shapes and text.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/image.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/advanced/image/cores3_example_draw_test.py\n    :language: python\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Sending P2P Data with Timeout\nDESCRIPTION: Method to send P2P data with specified payload and timeout. Payload must be 2-500 characters of hexadecimal values, representing 1-256 bytes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lorawan_rui3.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nLoRaWAN_X.send_p2p_data(payload, timeout, to_hex=False)\n```\n\n----------------------------------------\n\nTITLE: Reading Holding Registers from Modbus Server in MicroPython\nDESCRIPTION: Reads holding registers from the Modbus server. Specifies slave address, start register, quantity of registers to read, and timeout. Returns a list of integer values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.client.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPClient.read_holding_registers(address, register, quantity, timeout: int=2000) -> list\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple Coils with ModbusRTUMaster in MicroPython\nDESCRIPTION: Method for writing values to multiple coils on a Modbus slave device, returning the count of written coils.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.master.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUMaster.write_multiple_coils(address, register, values, timeout: int=2000) -> int\n```\n\n----------------------------------------\n\nTITLE: Implementing NB-IoT MQTT Connection in MicroPython\nDESCRIPTION: This example demonstrates how to initialize an NB-IoT Unit, connect to a MQTT server, subscribe to a topic, and handle incoming messages.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/nbiot.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import NBIOTUnit\nimport time\n\ndef nbiot_0_SubTopic_event(_topic, _msg):\n    print(_topic)\n    print(_msg)\n\nnbiot_0 = NBIOTUnit(port=(18, 17))\nwhile not (nbiot_0.get_gprs_network_status()):\n    time.sleep(2)\nnbiot_0.mqtt_server_connect('mqtt.m5stack.com', 1883, 'm5-mqtt-2024', '', '', 120)\nnbiot_0.mqtt_subscribe_topic('SubTopic', nbiot_0_SubTopic_event, 0)\n\nwhile True:\n    nbiot_0.mqtt_polling_loop()\n```\n\n----------------------------------------\n\nTITLE: Connecting to MQTT Server with Session Management\nDESCRIPTION: Method to connect to an MQTT server with optional clean session support. Returns True if connection uses a persistent session stored on the server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.default.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMQTTClient.connect(clean_session=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading IMU Unit Data in MicroPython\nDESCRIPTION: A complete example showing how to initialize the IMU Unit, set acceleration and gyroscope units, and continuously read and print accelerometer, gyroscope and attitude data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/imu.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import IMUUnit\nimport time\n\ni2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\nimu_0 = IMUUnit(i2c0)\nimu_0.set_accel_unit(1)\nimu_0.set_gyro_unit(1)\n\nwhile True:\n    print((str('Acc:') + str((imu_0.get_accelerometer()))))\n    print((str('Gryo:') + str((imu_0.get_gyroscope()))))\n    print((str('Attitude') + str((imu_0.get_attitude()))))\n    time.sleep_ms(100)\n```\n\n----------------------------------------\n\nTITLE: Checking UART Transmission Status in MicroPython\nDESCRIPTION: This snippet demonstrates how to check if all data has been sent or if no data transfer is happening on the UART bus.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprint(uart1.txdone())\n```\n\n----------------------------------------\n\nTITLE: MicroPython Example for PM2.5 Module with M5Stack Core2\nDESCRIPTION: Example demonstrating how to use the PM2.5 Module with a Core2 device. Referenced as an external file in the documentation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pm25.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This is a reference to an external example file\n# Located at: ../../../examples/module/pm25/pm25_core2_example.py\n```\n\n----------------------------------------\n\nTITLE: Initializing GNSSModule in Micropython\nDESCRIPTION: Constructor for the GNSSModule class that initializes communication with the GNSS module. Requires UART controller ID, RX and TX pins, and address parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GNSSModule\n    def __init__(id, rx, tx, address):\n        # initialize Function.\n        # :param int id: UART controllers id, the range is 0 to 2.\n        # :param int rx: UART rx pin.\n        # :param int tx: UART tx pin.\n        # :param int address:\n```\n\n----------------------------------------\n\nTITLE: Displaying Text on Glass2 Unit using MicroPython\nDESCRIPTION: This MicroPython example demonstrates how to initialize and use the Glass2 Unit to display text on the screen. It shows the implementation for displaying the text 'GLASS2' on the transparent OLED display.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/glass2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/unit/glass2/cores3_glass2_example.py\n        :language: python\n        :linenos:\n```\n\n----------------------------------------\n\nTITLE: Initializing ScalesUnit Class in MicroPython\nDESCRIPTION: Constructor for the ScalesUnit class that initializes the device with I2C communication. It accepts an I2C instance and an optional I2C address for the scales unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/scales.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nScalesUnit(i2c, address)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a BLE UART Server\nDESCRIPTION: Method to establish a connection with a BLE UART server using a device name and optional timeout parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.client.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTClient.connect(name, timeout=2000)\n```\n\n----------------------------------------\n\nTITLE: Accessing M5 Module Functions in MicroPython\nDESCRIPTION: This snippet shows the available functions and objects in the m5 module, including hardware control and display manipulation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/cmodules/m5unified/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nm5.begin()  # Initialize M5 hardware\nm5.update()  # Update M5 state\nm5.getBoard()  # Get current board type\n\n# Access buttons\nm5.btnA\nm5.btnB\nm5.btnC\nm5.btnPWR\nm5.btnEXT\n\n# Access display and other components\nm5.lcd\nm5.user_lcd\nm5.speaker\nm5.power\n```\n\n----------------------------------------\n\nTITLE: Initializing RS485 UART Communication\nDESCRIPTION: Initialize the UART bus with specified baud rate, bits, parity and stop bits for RS485 communication.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs485.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrs485_0.init(baudrate=115200, bits=8, parity=None, stop=1)\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying PNG Image from File Path\nDESCRIPTION: Loads a PNG image from a specified file path and displays it on the screen at the given coordinates. This example displays the UIFlow logo PNG from the resources directory at position (0,0).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/display.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDisplay.drawPng(\"res/img/uiflow.png\", 0, 0)\n```\n\n----------------------------------------\n\nTITLE: JPG Encode Method Implementation in Python\nDESCRIPTION: Method to encode an RGB565 format image to JPG format with configurable quality. Takes an image.Image object and returns a JPEG formatted image.Image instance.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/jpg.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nencode(img: image.Image, quality=60) -> image.Image\n```\n\n----------------------------------------\n\nTITLE: Using ASR Unit with MicroPython for Speech Recognition\nDESCRIPTION: This example demonstrates how to use the ASR Unit to detect voice commands, retrieve command words and numbers, and trigger events when specific phrases are detected. The code sets up the ASR unit, listens for speech input, and performs actions based on the recognized commands.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/asr.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/unit/asr/asr_cores3_example.py\n        :language: python\n        :linenos:\n```\n\n----------------------------------------\n\nTITLE: Initializing SpeakerBase for Various M5Stack Devices\nDESCRIPTION: Examples of initializing the SpeakerBase class for different M5Stack device models using different pin configurations. Shows setup for both Atom S3 series and standard Atom devices.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/speaker.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom base import SpeakerBase\n\n# atoms3 lite / atoms3 / atoms3r / atoms3r-cam / atoms3-ext\nspk = SpeakerBase(1, 5, 39, 38)\n\n# atom lite / atom matrix / atom echo\nspk = SpeakerBase(1, 22, 21, 25)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Controlling RGB Unit with MicroPython\nDESCRIPTION: This code demonstrates how to initialize an RGB Unit with 3 LEDs and control its brightness and colors. It shows setting the overall brightness to 80%, filling all LEDs with red color, and then setting a specific LED (index 0) to a green color.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/rgb.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport M5\nfrom M5 import *\nfrom unit import *\n\nM5.begin()\nrgb_0 = RGB((36, 26), 3)\nWidgets.fillScreen(0x222222)\n\nrgb_0.set_brightness(80)\nrgb_0.fill_color(0xff0000)\nrgb_0.set_color(0, 0x33ff33)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sleep Cycle for TimerPWR Unit\nDESCRIPTION: Method to configure a repeating sleep cycle. Sets the time before sleep and the duration of sleep using hours, minutes, and seconds parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.sleep_cycle(whours, wmintues, wseconds, shours, smintues, sseconds)\n```\n\n----------------------------------------\n\nTITLE: Initializing TCP Server Socket\nDESCRIPTION: Creates a TCP socket, binds it to an address, and starts listening for connections. Configures basic server setup with specified backlog.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.server.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport socket\n\ntcps = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ntcps.bind(('0.0.0.0', 8001))\ntcps.listen(5)\n```\n\n----------------------------------------\n\nTITLE: Setting Event Callbacks for ButtonUnit\nDESCRIPTION: Method to set a callback function for a specified button event type (such as WAS_CLICKED or WAS_DOUBLECLICKED). The callback function will be executed when the specified event occurs.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/button.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nButtonUnit.setCallback(type, cb)\n```\n\n----------------------------------------\n\nTITLE: Initializing DDS Unit in MicroPython\nDESCRIPTION: Example of how to initialize and use the DDS Unit in MicroPython. It demonstrates setting frequency, phase, and output mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom m5stack import *\nfrom m5stack_ui import *\nfrom uiflow import *\nfrom unit import DDSUnit\n\nscreen = M5Screen()\nscreen.clean_screen()\nscreen.set_screen_bg_color(0x111111)\n\ni2c = None\ndds0 = None\n\ndef button_a_wasPressed():\n  global i2c, dds0\n  dds0.set_freq(0, 1000)\n  dds0.set_phase(0, 0)\n  dds0.set_mode(DDSUnit.WAVE_SINE)\n  dds0.output()\n  pass\n\ndef button_b_wasPressed():\n  global i2c, dds0\n  dds0.set_freq(0, 10000)\n  dds0.set_phase(0, 90)\n  dds0.set_mode(DDSUnit.WAVE_TRIANGLE)\n  dds0.output()\n  pass\n\ndef button_c_wasPressed():\n  global i2c, dds0\n  dds0.set_freq(0, 100000)\n  dds0.set_phase(0, 180)\n  dds0.set_mode(DDSUnit.WAVE_SQUARE)\n  dds0.output()\n  pass\n\nscreen.pressed(button_a_wasPressed)\nscreen.pressed(button_b_wasPressed)\nscreen.pressed(button_c_wasPressed)\n\ni2c = i2c0\ndds0 = DDSUnit(i2c)\n\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from LoRaSx1262Module\nDESCRIPTION: Code to receive data packets from the LoRa module. Returns None if timeout occurs or returns a RxPacket instance containing the received data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora_sx1262.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata = lora868v12_0.recv()\n```\n\n----------------------------------------\n\nTITLE: Initializing GPSModule in MicroPython\nDESCRIPTION: Constructor for the GPSModule class that initializes the GPS module with specified UART parameters. It requires the UART controller ID (0-2) and pin configurations for RX and TX.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nGPSModule(id, rx, tx)\n```\n\n----------------------------------------\n\nTITLE: Initializing UART Communication with RS232\nDESCRIPTION: Sets up UART communication with specified baud rate, bits, parity, and stop bits parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs232.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrs232_0.init(baudrate=115200, bits=8, parity=None, stop=1)\n```\n\n----------------------------------------\n\nTITLE: Setting Protocol Format for QR Code Scanner\nDESCRIPTION: Configures the data protocol format used by the QR code scanner when transmitting decoded data. Various formats are available, from no protocol to complex formats with length fields, barcode counts, and CRC checksums.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_protocol_format(mode)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using MiniScaleUnit in MicroPython\nDESCRIPTION: This snippet demonstrates how to import necessary modules, initialize the I2C interface, create a MiniScaleUnit object, set the LED color, and print the weight measurement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nimport time\nfrom unit import MiniScaleUnit\n\ni2c = I2C(0, scl=Pin(1), sda=Pin(2), freq=400000)\nscale = MiniScaleUnit(i2c)\nscale.setLed(255, 0, 0)\nprint(miniscale.weight)\n```\n\n----------------------------------------\n\nTITLE: Initializing BLE UART Server in MicroPython\nDESCRIPTION: Constructor for creating a BLE UART server instance with configurable name, receive buffer size, and verbose output options.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.server.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbleuart.BLEUARTServer(name=\"\", rxbuf=100, verbose=False)\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Colors in MicroPython\nDESCRIPTION: This snippet demonstrates the predefined color constants available in the UIFlow MicroPython environment for use with drawing functions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/cmodules/m5unified/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nBLACK = 0x0000\nNAVY = 128\nDARKGREEN = 32768\nDARKCYAN = 32896\nMAROON = 8388608\nPURPLE = 8388736\nOLIVE = 8421376\nLIGHTGREY = 12632256\nDARKGREY = 8421504\nBLUE = 255\nGREEN = 65280\nCYAN = 65535\nRED = 16711680\nMAGENTA = 16711935\nYELLOW = 16776960\nWHITE = 16777215\nORANGE = 16753920\nGREENYELLOW = 11403055\nPINK = 16761035\n\n# Example usage:\nm5.lcd.fillScreen(BLUE)\nm5.lcd.setTextColor(WHITE)\n```\n\n----------------------------------------\n\nTITLE: LoRaWAN Network Configuration Methods\nDESCRIPTION: Core methods for setting and getting network configuration parameters including network ID, join modes, and confirmation settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lorawan_rui3.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef set_network_id(id):\n    \"\"\"Sets the network ID.\"\"\"\n    pass\n\ndef get_network_id():\n    \"\"\"Retrieves the network ID.\"\"\"\n    pass\n\ndef get_mc_root_key():\n    \"\"\"Retrieves the multicast root key.\"\"\"\n    pass\n\ndef get_confirm_mode():\n    \"\"\"Retrieves the confirmation mode.\"\"\"\n    pass\n\ndef set_confirm_mode(mode):\n    \"\"\"Sets the confirmation mode.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Drawing Images with MicroPython on Atomic Display Base\nDESCRIPTION: Example code demonstrating how to display images on the Atomic Display Base screen using MicroPython.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/display.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Example code reference: atoms3_draw_image_example.py\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using DualKmeter Module in MicroPython\nDESCRIPTION: This snippet demonstrates how to import, initialize, and use the DualKmeter Module in a MicroPython environment. It continuously checks if the module is ready and prints the thermocouple temperature in Celsius.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dualkmeter.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom module import DualKmeterModule\n\nM5.begin()\nkm_0 = DualKmeterModule(address=0x11)\nwhile True:\n    if km_0.is_ready():\n        print(km_0.get_thermocouple_temperature(scale=km_0.CELSIUS))\n```\n\n----------------------------------------\n\nTITLE: Initializing PwrCAN Module in MicroPython\nDESCRIPTION: Constructor for PwrCAN Module that initializes CAN bus communication with configurable parameters including ID, mode, pins, and timing settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pwrcan.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPwrCANModule(id, mode, tx, rx, prescaler=32, sjw=3, bs1=15, bs2=4, triple_sampling=False)\n```\n\n----------------------------------------\n\nTITLE: Memory-Efficient CAN Message Reception\nDESCRIPTION: Example showing how to receive CAN messages without allocating heap memory by reusing list and bytearray objects. This pattern is useful for embedded systems with limited memory resources.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/can.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbuf = bytearray(8)\nlst = [0, 0, 0, 0, memoryview(buf)]\n# No heap memory is allocated in the following call\ncan.recv(0, lst)\n```\n\n----------------------------------------\n\nTITLE: Color Format Methods\nDESCRIPTION: Methods for retrieving color values in different formats including raw RGB, 565 format, and combined integer format.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/color.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nget_color() -> int\nget_color565() -> int\nget_color_raw() -> tuple\n```\n\n----------------------------------------\n\nTITLE: Setting Event Callbacks for TimerPWR Unit\nDESCRIPTION: Method to register callback functions for different events such as USB insertion/removal, button presses/releases, and charging status changes. Takes an event type and a callback function as parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.set_callback(event, callback)\n```\n\n----------------------------------------\n\nTITLE: Reading Holding Registers with ModbusRTUMaster in MicroPython\nDESCRIPTION: Method for reading holding registers from a Modbus slave device, returning a list of register values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.master.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUMaster.read_holding_registers(address, register, quantity, timeout: int=2000) -> list\n```\n\n----------------------------------------\n\nTITLE: Recording and Playing Voice with PDM Unit in MicroPython\nDESCRIPTION: This example demonstrates how to record and play voice using the PDM Unit with M5Stack. It imports the necessary modules and uses the PDMUnit class to capture and playback audio.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/pdm.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# The code snippet is referenced but not directly included in the text. According to the documentation, it would be found in ../../../examples/unit/pdm/pdm_cores3_example.py\n```\n\n----------------------------------------\n\nTITLE: Drawing Circle Method Implementation\nDESCRIPTION: This method draws a circle on the image. It allows specifying position, radius, color, thickness, and fill option. It returns the image object for method chaining.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/image.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndraw_circle(x:int, y:int, radius:int, color:Optional[int,Tuple[int,int,int]]=None, thickness=1, fill=False) -> Image\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading AIN4 4-20mA Module in MicroPython\nDESCRIPTION: A complete example demonstrating how to initialize the AIN4 Module, set up the UI, calibrate all four channels to 20mA, and continuously read current values from each channel. The example includes proper error handling and UI display of readings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/ain4.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom module import AIN4Module\n\ntitle0 = None\nlabel0 = None\nlabel1 = None\nlabel2 = None\nlabel3 = None\nain4_20ma_0 = None\n\ndef setup():\n    global title0, label0, label1, label2, label3, ain4_20ma_0\n\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n    title0 = Widgets.Title(\"AIN 4-20mA Module Test\", 3, 0xffffff, 0x0000FF, Widgets.FONTS.DejaVu18)\n    label0 = Widgets.Label(\"CH1 Current:\", 1, 60, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n    label1 = Widgets.Label(\"CH2 Current:\", 1, 96, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n    label2 = Widgets.Label(\"CH3 Current:\", 1, 131, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n    label3 = Widgets.Label(\"CH4 Current:\", 1, 164, 1.0, 0xffffff, 0x222222, Widgets.FONTS.DejaVu18)\n\n    ain4_20ma_0 = AIN4Module(address=0x55)\n    ain4_20ma_0.set_cal_current(1, 20)\n    ain4_20ma_0.set_cal_current(2, 20)\n    ain4_20ma_0.set_cal_current(3, 20)\n    ain4_20ma_0.set_cal_current(4, 20)\n\ndef loop():\n    global title0, label0, label1, label2, label3, ain4_20ma_0\n    M5.update()\n    label0.setText(str((str('CH1 Current:') + str((ain4_20ma_0.get_current_value(1))))))\n    label1.setText(str((str('CH2 Current:') + str((ain4_20ma_0.get_current_value(2))))))\n    label2.setText(str((str('CH3 Current:') + str((ain4_20ma_0.get_current_value(3))))))\n    label3.setText(str((str('CH4 Current:') + str((ain4_20ma_0.get_current_value(4))))))\n\nif __name__ == '__main__':\n    try:\n        setup()\n        while True:\n            loop()\n    except (Exception, KeyboardInterrupt) as e:\n        try:\n            from utility import print_error_msg\n            print_error_msg(e)\n        except ImportError:\n            print(\"please update to latest firmware\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Vibrator Unit in MicroPython\nDESCRIPTION: Example showing how to instantiate and use a Vibrator Unit in MicroPython. The example likely demonstrates initialization, controlling vibration parameters, and turning off the vibrator.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/vibrator.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Referenced from ../../../examples/unit/vibrator/core_vibrator_example.py\n```\n\n----------------------------------------\n\nTITLE: DMX512 Communication Initialization Method\nDESCRIPTION: Method to initialize DMX512 communication with specified operating mode. Sets up the communication parameters and prepares the unit for data transfer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dmx.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef dmx_init(self, mode) -> None:\n    # mode: Operating mode (1 for Master, 2 for Slave)\n```\n\n----------------------------------------\n\nTITLE: LoraModule.set_irq_callback Method\nDESCRIPTION: Sets a callback function to be called when data is received in asynchronous mode. The callback function should accept one argument, which is the received data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nLoraModule.set_irq_callback(callback)\n```\n\n----------------------------------------\n\nTITLE: Receiving Data in Non-Blocking Mode with LoRaE220JPUnit in MicroPython\nDESCRIPTION: Method to set up non-blocking data reception. It takes a callback function that will be called when data is received. Available in working modes 0, 1, and 2.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lora_e220.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLoRaE220JPUnit.receive_none_block(receive_callback: function) -> None\n```\n\n----------------------------------------\n\nTITLE: Drawing QR Code in MicroPython with Display Module\nDESCRIPTION: Generates and displays a QR code with the specified content at given coordinates with a defined width. This example creates a QR code containing 'Hello' text and displays it at position (0,0) with a width of 200 pixels.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/display.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDisplay.drawQR(\"Hello\", 0, 0, 200)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Button State Transitions\nDESCRIPTION: Method to monitor button state transitions based on its pin state and trigger appropriate callback handlers. This should be called regularly to process button events.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/button.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nButtonUnit.tick(pin)\n```\n\n----------------------------------------\n\nTITLE: Reading Coils with ModbusRTUMaster in MicroPython\nDESCRIPTION: Method for reading coils from a Modbus slave device, returning a list of boolean values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.master.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUMaster.read_coils(address, register, quantity, timeout: int=2000) -> list\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading DLight Sensor in Micropython\nDESCRIPTION: Example code that initializes the I2C bus, creates a DLight object, and prints the light intensity measured by the sensor. The code sets up an I2C connection on pins 1 and 2 with a frequency of 100kHz.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/dlight.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import *\n\ni2c0 = None\ndlight_0 = None\n\ndef setup():\n    global i2c0, dlight_0\n\n    i2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\n    dlight_0 = DLight(i2c0)\n    print(dlight_0.get_lux())\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n```\n\n----------------------------------------\n\nTITLE: Heart Rate Monitoring and ECG Waveform Display in MicroPython\nDESCRIPTION: This code demonstrates real-time heart rate monitoring and ECG waveform display using the ECG Module. It continuously plots the ECG waveform and calculates heart rate data once the signal stabilizes. The example includes electrode placement instructions and measurement precautions for accurate readings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/ecg.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/module/ecg/cores3_ecg_module_base_example.py\n    :language: python\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Recording Audio into Buffer in MicroPython\nDESCRIPTION: Records audio data directly into a provided buffer with specified audio parameters. Useful for processing audio data in memory rather than writing to a file.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.recorder.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nRecorder.record_into(buf, sample=8000, bits=16, stereo=False, sync=True)\n```\n\n----------------------------------------\n\nTITLE: Getting GPS Data in MicroPython\nDESCRIPTION: Various methods to retrieve GPS data such as time, date, latitude, longitude, altitude, and satellite information.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/gps_v11.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nGPSV11Unit.get_gps_time()\nGPSV11Unit.get_gps_date()\nGPSV11Unit.get_latitude()\nGPSV11Unit.get_longitude()\nGPSV11Unit.get_altitude()\nGPSV11Unit.get_satellite_num()\n```\n\n----------------------------------------\n\nTITLE: Reading Raw ADC Value in MicroPython\nDESCRIPTION: Returns the raw ADC value based on the resolution of the ADC block, typically in the range of 0-4095 for 12-bit resolution.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/adc.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nADC.read()\n```\n\n----------------------------------------\n\nTITLE: Initializing ZigbeeUnit Class in MicroPython\nDESCRIPTION: Constructor for creating a Zigbee unit object with specified ID, port, and verbosity settings. The ID parameter identifies the unit, port specifies the connection points, and verbose controls logging output.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit(id: Literal[0, 1, 2], port: list | tuple, verbose: bool=True)\n```\n\n----------------------------------------\n\nTITLE: Light Sleep Mode in MicroPython\nDESCRIPTION: Puts the ESP32 into light sleep mode. Can specify the wake-up time in microseconds and whether to wake up at all.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nPower.lightSleep(micro_seconds: int=0, wakeup: bool=True)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to UART in MicroPython\nDESCRIPTION: This code shows how to write a buffer of bytes to the UART bus using the write() method.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nuart1.write('1234!')\n```\n\n----------------------------------------\n\nTITLE: Initializing ThermalUnit in MicroPython\nDESCRIPTION: Creates a ThermalUnit object with an I2C interface. Requires an I2C object and optionally accepts an I2C address which defaults to 0x33.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/thermal.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nThermalUnit(i2c, address: int = 0x33)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using NeoFlash Hat with MicroPython\nDESCRIPTION: This example demonstrates how to initialize the NeoFlash Hat and set individual pixel colors. It imports required modules, creates a NeoFlash Hat instance on pin 26, and sets the first two pixels to red and green colors.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/neoflash.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom hat import NeoFlashHat\nneoflash = NeoFlashHat((26, 0))\nneoflash.set_pixel(0, 0, 0xFF0000)\nneoflash.set_pixel(1, 0, 0x00FF00)\n```\n\n----------------------------------------\n\nTITLE: Light Control Methods in MicroPython\nDESCRIPTION: Methods for controlling light states including on, off, and toggle functionality. Can target specific devices by address or control all devices.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gateway_h2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nh2_switch_endpoint.on(addr)\nh2_switch_endpoint.on()\n\nh2_switch_endpoint.off(addr)\nh2_switch_endpoint.off()\n\nh2_switch_endpoint.toggle(addr)\nh2_switch_endpoint.toggle()\n```\n\n----------------------------------------\n\nTITLE: Configuring RS485 Parameters in MicroPython\nDESCRIPTION: Method to initialize or reconfigure UART bus settings for RS485 communication with detailed parameters for hardware flow control and line inversion.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pwrcan.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPwrCANModuleRS485.init(baudrate=9600, bits=8, parity=None, stop=1, *, ...)\n```\n\n----------------------------------------\n\nTITLE: Implementing CAN, RS485, and I2C Communication with Commu Module in MicroPython\nDESCRIPTION: This snippet demonstrates how to use the Commu Module for receiving and sending data via CAN, RS485, and I2C protocols. It includes setup and communication examples for each protocol.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/commu.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom m5stack import *\nfrom m5stack_ui import *\nfrom uiflow import *\nfrom module import commu\n\nscreen = M5Screen()\nscreen.clean_screen()\nscreen.set_screen_bg_color(0xFFFFFF)\n\ncommu0 = commu.get(proto=\"can\")\ncommu1 = commu.get(proto=\"rs485\")\ncommu2 = commu.get(proto=\"i2c\")\n\n# CAN\ncommu0.set_baudrate(500000)\ncommu0.rx_callback(lambda msg: print(\"CAN:\", msg))\ncommu0.send(0x100, b\"Hello\")\n\n# RS485\ncommu1.rx_callback(lambda msg: print(\"RS485:\", msg))\ncommu1.write(b\"Hello\")\n\n# I2C\ncommu2.scan()\ncommu2.writeto(0x68, b\"Hello\")\ndata = commu2.readfrom(0x68, 5)\nprint(\"I2C:\", data)\n\nwhile True:\n    wait_ms(2)\n```\n\n----------------------------------------\n\nTITLE: Configuring P2P Communication Parameters\nDESCRIPTION: Method to set comprehensive P2P LoRa parameters including frequency, spreading factor, bandwidth, code rate, preamble length, and transmit power.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lorawan_rui3.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nLoRaWAN_X.set_p2p_parameters(frequency, spreading_factor, bandwidth, code_rate, preamble_length, tx_power)\n```\n\n----------------------------------------\n\nTITLE: Sending G-code Commands to GRBL Module\nDESCRIPTION: Method to send G-code commands to the GRBL module for controlling stepper motors. G-code is a common language for CNC machine control.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.g_code(command)\n```\n\n----------------------------------------\n\nTITLE: Setting Zigbee Module Parameters\nDESCRIPTION: Method to configure comprehensive settings for the Zigbee module including device type, PAN ID, channel, transfer mode, addressing, and encryption. This configures both the module and node characteristics in a single call.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.set_module_param(device_type: int, pan_id: int, channel: int, transfer_mode: int, custom_address: int, ant_type: int, encryption_enable=ENCRYPTION_ENABLE, encryption_key=b'\\x11\\x12\\x13\\x14', node_type=DEVICE_TYPE_ROUTER, node_ant_type=ANT_TYPRE_ON_BOARD, node_transfer_mode=TRANSFER_MODE_PASS_THROUGH, node_custom_address=0x0066,)\n```\n\n----------------------------------------\n\nTITLE: Initializing ATOMEchoBase for Various M5Stack Atom Devices in MicroPython\nDESCRIPTION: This snippet demonstrates how to initialize the ATOMEchoBase class for different M5Stack Atom devices. It includes setup for Atom Echo, Atom Lite, Atom Matrix, AtomS3, AtomS3 Lite, AtomS3R, AtomS3R-CAM, and AtomS3R-Ext. The code shows I2C and I2S pin configurations for each device.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/echo.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hardware import I2C\nfrom hardware import Pin\nfrom base import ATOMEchoBase\n\n# atom echo\ni2c1 = I2C(1, scl=Pin(21), sda=Pin(25), freq=100000)\necho = ATOMEchoBase(i2c1, address=0x18, i2s_port=1, sample_rate=44100, i2s_sck=33, i2s_ws=19, i2s_di=23, i2s_do=22)\n\n# atom lite\ni2c1 = I2C(1, scl=Pin(21), sda=Pin(25), freq=100000)\necho = ATOMEchoBase(i2c1, address=0x18, i2s_port=1, sample_rate=44100, i2s_sck=33, i2s_ws=19, i2s_di=23, i2s_do=22)\n\n# atom matrix\ni2c1 = I2C(1, scl=Pin(21), sda=Pin(25), freq=100000)\necho = ATOMEchoBase(i2c1, address=0x18, i2s_port=1, sample_rate=44100, i2s_sck=33, i2s_ws=19, i2s_di=23, i2s_do=22)\n\n# atoms3 / atoms3 lite\ni2c1 = I2C(1, scl=Pin(39), sda=Pin(38), freq=100000)\necho = ATOMEchoBase(i2c1, address=0x18, i2s_port=1, sample_rate=44100, i2s_sck=8, i2s_ws=6, i2s_di=7, i2s_do=5)\n\n# atoms3r / atoms3r-cam / atoms3-ext\ni2c1 = I2C(1, scl=Pin(39), sda=Pin(38), freq=100000)\necho = ATOMEchoBase(i2c1, address=0x18, i2s_port=1, sample_rate=44100, i2s_sck=8, i2s_ws=6, i2s_di=7, i2s_do=5)\n\necho.speaker.tone(2000, 1000)\necho.speaker.playWavFile('res/audio/66.wav')\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Canvas in MicroPython Display Module\nDESCRIPTION: Creates a new canvas with specified width, height, and color depth, then draws an image on it and pushes it to the display. This example demonstrates creating a 100x100 canvas with 16-bit color depth for displaying a JPG image.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/display.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nw1 = Display.newCanvas(w=100, h=100, bpp=16)\nw1.drawImage(\"res/img/uiflow.jpg\", 80, 0)\nw1.push(30, 0)\n```\n\n----------------------------------------\n\nTITLE: Capturing USB Keyboard Input with USB Module in MicroPython\nDESCRIPTION: This example demonstrates implementing a USB host to capture keyboard input. It reads key presses and modifier keys (Ctrl, Shift, Alt, Win) from a connected USB keyboard.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/usb.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# USB Keyboard Example\nfrom m5stack import *\nfrom m5stack_ui import *\nfrom uiflow import *\nfrom module import usb_module\n\nscreen = M5Screen()\nscreen.clean_screen()\nscreen.set_screen_bg_color(0xFFFFFF)\n\n# Create labels for displaying keyboard data\nlabel_title = M5Label('USB Keyboard Test', x=20, y=10, color=0x000, font=FONT_MONT_14, parent=None)\nlabel_keys = M5Label('Keys:', x=20, y=50, color=0x000, font=FONT_MONT_14, parent=None)\nlabel_modifier = M5Label('Modifier Keys:', x=20, y=90, color=0x000, font=FONT_MONT_14, parent=None)\n\n# Initialize the USB module\nmodule_usb = usb_module.USBModule()\n\ndef show_keyboard_modifier(modifier):\n    modifier_text = 'Modifier Keys: '\n    if modifier & 0x01:\n        modifier_text += 'L-Ctrl '\n    if modifier & 0x02:\n        modifier_text += 'L-Shift '\n    if modifier & 0x04:\n        modifier_text += 'L-Alt '\n    if modifier & 0x08:\n        modifier_text += 'L-Win '\n    if modifier & 0x10:\n        modifier_text += 'R-Ctrl '\n    if modifier & 0x20:\n        modifier_text += 'R-Shift '\n    if modifier & 0x40:\n        modifier_text += 'R-Alt '\n    if modifier & 0x80:\n        modifier_text += 'R-Win '\n    label_modifier.set_text(modifier_text)\n\nwhile True:\n    # Poll data from the USB module\n    module_usb.poll_data()\n    \n    # Read and display keyboard input\n    keys = module_usb.read_kb_input(convert=True)\n    label_keys.set_text('Keys: %s' % str(keys))\n    \n    # Read and display modifier keys\n    modifier = module_usb.read_kb_modifier()\n    show_keyboard_modifier(modifier)\n    \n    wait_ms(50)\n```\n\n----------------------------------------\n\nTITLE: Getting Voltage Reading Method\nDESCRIPTION: Method to retrieve the measured voltage from the ADC V1.1 Unit. Returns voltage value rounded to two decimal places.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc_v11.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_voltage(self):\n```\n\n----------------------------------------\n\nTITLE: CAN Communication Implementation in MicroPython\nDESCRIPTION: Example code demonstrating how to receive and send data using the Atom CAN Base. The code shows core CAN communication functionality.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_can.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Code reference mentioned in documentation but not directly shown in text\n# Extended from base.atom_can.ATOMCANBase\n```\n\n----------------------------------------\n\nTITLE: Generating Audio Tones with Player.play_tone() in MicroPython\nDESCRIPTION: Plays a tone with specified frequency, duration, volume level, and synchronous mode setting.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.player.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPlayer.play_tone(freq, time, volume=-1, sync=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Zigbee Module Parameters\nDESCRIPTION: Method to configure various Zigbee module parameters including device type, PAN ID, channel, transfer mode, custom address, and encryption settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/zigbee.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nZigbeeModule.set_module_param(device_type: int, pan_id: int, channel: int, transfer_mode: int, custom_address: int, ant_type: int, encryption_enable=ENCRYPTION_ENABLE, encryption_key=b'\\x11\\x12\\x13\\x14', node_type=DEVICE_TYPE_ROUTER, node_ant_type=ANT_TYPRE_ON_BOARD, node_transfer_mode=TRANSFER_MODE_PASS_THROUGH, node_custom_address=0x0066)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Value in mA from AIN4-20mA Unit\nDESCRIPTION: Method that retrieves the processed current value in milliamperes (mA) from the AIN 4-20mA Unit. Returns a float representing the measured current.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ain4.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nAIN4_20MAUnit.get_current_value() -> float\n```\n\n----------------------------------------\n\nTITLE: LoraModule.start_recv Method\nDESCRIPTION: Starts asynchronous reception mode, configuring the module to trigger an interrupt when data is received. Used with set_irq_callback for event-driven communications.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLoraModule.start_recv()\n```\n\n----------------------------------------\n\nTITLE: Setting FSK Frequency Deviation for P2P Communication\nDESCRIPTION: Method to set the frequency deviation for P2P FSK communication. Accepts deviation values between 600 to 200000 Hz.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lorawan_rui3.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLoRaWAN_X.set_p2p_fsk_frequency_deviation(deviation)\n```\n\n----------------------------------------\n\nTITLE: Play Buzzer Once Method\nDESCRIPTION: Method to play the buzzer once with specified frequency (100-10000Hz), duty cycle (0-100), and duration (0-10000ms).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/buzzer.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBuzzerUnit.once(freq=10, duty=50, duration=50)\n```\n\n----------------------------------------\n\nTITLE: Controlling Motor Speed with Atomic HDriver Base in MicroPython\nDESCRIPTION: This code demonstrates motor speed control using the Atomic HDriver Base. It changes the motor speed from low to high, high to low, and then reverses the direction, repeating the speed changes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/hdriver.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/base/hdriver/atoms3r_hdriver_base_example.py\n    :language: python\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ATOMSocketBase in MicroPython\nDESCRIPTION: Demonstrates initialization and basic usage of ATOMSocketBase including measuring voltage, current, power and energy. Shows how to control the relay and receive data in non-blocking mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/base/atom_socket.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom machine import I2C\nfrom base import ATOMSocketBase\n\natomsocket = ATOMSocketBase(1, (22, 33), 23) # 对于ATOM Lite\natomsocket = ATOMSocketBase(1, (5, 8), 7) # 对于ATOM S3\n# 获取数据\nprint(atomsocket.get_data()) # 输出 (230.4192, 0.02074951, 0.8106091, 0.0)\natomsocket.set_relay(True)   # 打开继电器\natomsocket.set_relay(False)  # 关闭继电器\n# 读取各项指标\nprint(\"电压:\", atomsocket.get_voltage(), \"V\")\nprint(\"电流:\", atomsocket.get_current(), \"A\")\nprint(\"功率:\", atomsocket.get_power(), \"W\")\nprint(\"功率因数:\", atomsocket.get_power_factor())\nprint(\"累计电量:\", atomsocket.get_kwh(), \"kWh\")\n# 非阻塞模式接收数据\ndef callback(voltage, current, power, kwh):\n    print(voltage, current, power, kwh)\natomsocket.receive_none_block(callback)\n# 停止接收数据\natomsocket.stop_receive_data()\n```\n\n----------------------------------------\n\nTITLE: Sending Point-to-Point Transmission\nDESCRIPTION: Method to send data to a specific Zigbee module using its address for point-to-point communication.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/zigbee.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nZigbeeModule.p2p_transmission(address: int, data: bytes)\n```\n\n----------------------------------------\n\nTITLE: Initializing QRCode Module in MicroPython\nDESCRIPTION: Creates a QRCodeModule object by specifying the UART id and pin configuration. This is the initial setup required before using any QRCode scanner functions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom module import ModuleQRCode\n\nmodule_qrcode = ModuleQRCode(id = 1, tx = 17, rx = 18)\n```\n\n----------------------------------------\n\nTITLE: Creating a ModbusRTUMaster instance in MicroPython\nDESCRIPTION: Constructor for creating a ModbusRTUMaster object with optional UART object and verbose mode parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.master.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodbus.ModbusRTUMaster(uart=None, verbose: bool = False)\n```\n\n----------------------------------------\n\nTITLE: Writing SSL Certificate File in MicroPython\nDESCRIPTION: This function writes the contents of an SSL certificate to a file on the device's filesystem. It takes the certificate content as a string and the desired filename as parameters. The function uses a context manager to ensure proper file handling.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/fs/user/certificate/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef write_cert(cert_str, filename):\n    with open(filename, 'w') as f:\n        f.write(cert_str)\n```\n\n----------------------------------------\n\nTITLE: Creating an EncoderUnit Instance in MicroPython\nDESCRIPTION: Constructor for creating an EncoderUnit object with an I2C interface. The default I2C address is 0x40, but can be customized as needed.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEncoderUnit(i2c, address: int | list | tuple = 0x40)\n```\n\n----------------------------------------\n\nTITLE: Accessing Predefined Fonts in MicroPython\nDESCRIPTION: This snippet shows how to access the predefined font objects available in the UIFlow MicroPython environment for use with the M5GFX drawing functions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/cmodules/m5unified/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nFONT_ASCII7\nFONT_DejaVu9\nFONT_DejaVu12\nFONT_DejaVu18\nFONT_DejaVu24\nFONT_DejaVu40\nFONT_DejaVu56\nFONT_DejaVu72\nFONT_EFontCN24\nFONT_EFontJA24\nFONT_EFontKR24\n\n# Example usage:\nm5.lcd.setFont(FONT_DejaVu24)\n```\n\n----------------------------------------\n\nTITLE: Reading Analog Value from Reflective IR Unit in MicroPython\nDESCRIPTION: Reads and returns the ADC (analog-to-digital converter) value from the Reflective IR Unit. The returned integer value ranges from 0 to 65535.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/reflective_ir.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nReflectiveIRUnit.get_analog_value() -> int\n```\n\n----------------------------------------\n\nTITLE: Initializing Camera in MicroPython for M5Stack UIFlow\nDESCRIPTION: Initializes the camera sensor with specified pixel format and frame size. Supports RGB565 format and various frame sizes like QQVGA, QCIF, HQVGA, FRAME_240X240, and QVGA.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/camera.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncamera.init(pixformat, framesize)\n```\n\n----------------------------------------\n\nTITLE: Initializing UART Configuration in RS232Module\nDESCRIPTION: Method to initialize or reconfigure UART bus with parameters including baudrate, data bits, parity, stop bits, and optional hardware flow control settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/rs232.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRS232Module.init(baudrate=9600, bits=8, parity=None, stop=1, *, ...)\n```\n\n----------------------------------------\n\nTITLE: LTE PPP Connection Initialization\nDESCRIPTION: Establishes PPP connection with optional authentication parameters including username and password\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lte.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncomlte_0.connect(authmode=AUTH_NONE, username=\"\", password=\"\")\ncomlte_0.connect()\n```\n\n----------------------------------------\n\nTITLE: Comparing Fingerprint with User ID in FingerUnit Python\nDESCRIPTION: Method to compare the currently collected fingerprint with a specified user ID. Returns True if matched, False otherwise.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.compare_id(id: int, timeout: int=5000) -> bool\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Kmeter Unit in MicroPython\nDESCRIPTION: This snippet demonstrates how to initialize the Kmeter Unit and use it to continuously read thermocouple and internal temperatures. It sets up the I2C connection, creates a KMeterUnit object, and prints temperature readings in a loop.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/kmeter.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import KMeterUnit\nimport time\n\ni2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\nkmeter_0 = KMeterUnit(i2c0, 0x66)\nprint(kmeter_0.get_firmware_version())\nwhile True:\n    print(kmeter_0.get_thermocouple_temperature(kmeter_0.CELSIUS))\n    print(kmeter_0.get_internal_temperature(kmeter_0.CELSIUS))\n    time.sleep_ms(250)\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from Socket\nDESCRIPTION: Receives data from the connected socket with specified buffer size.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.server.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata = tcps.recv(1024)\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Sensor Configuration Methods\nDESCRIPTION: Methods for configuring sensor parameters including activation state, integration time, gain, and glass attenuation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/color.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nget_active() -> bool\nset_active(val)\nget_integration_time() -> float\nset_integration_time(val)\nget_gain() -> int\nset_gain(val)\nget_glass_attenuation()\nset_glass_attenuation(value)\n```\n\n----------------------------------------\n\nTITLE: Setting Motor Speed\nDESCRIPTION: Sets the speed for left and right motors with values between -1023 and 1023.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/bala2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmodule_bala2_0.set_motor_speed(left, right)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ID Unit\nDESCRIPTION: Example showing how to initialize and use basic ID Unit functionality including SHA256 hashing, key generation and random number generation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/id.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import IDUnit\n\ni2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\nid_0 = IDUnit(i2c0)\nprint(id_0.get_sha256_hash('Hello M5', 1))\nprint(id_0.get_generate_key(0, False))\nprint(id_0.randrange(500, 1000, 5))\n```\n\n----------------------------------------\n\nTITLE: Button and LED Controls for HMIModule\nDESCRIPTION: Methods for getting button status and controlling the LED states on the HMI module. Includes functions to get button state, get LED state, and set LED state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/hmi.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. method:: HMIModule.get_button_status(btn_num) -> int\n\n    Get the state of a specific button.\n\n    :param int btn_num: : Button number (1 to 3).\n\n\n.. method:: HMIModule.get_led_state(led_num) -> int\n\n    Get the state of a specific LED.\n\n    :param int led_num: : LED number (1 to 2).\n\n\n.. method:: HMIModule.set_led_state(led_num, state)\n\n    Set the state of a specific LED.\n\n    :param int led_num: : LED number (1 to 2).\n    :param int state: : The state to set for the LED.\n```\n\n----------------------------------------\n\nTITLE: Setting PIR Callback Method\nDESCRIPTION: Polling method that should be placed in a loop function to constantly check for PIR sensor events. Used to set up a callback for motion detection events.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/pir.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPIR.set_callback()\n```\n\n----------------------------------------\n\nTITLE: LoraModule.send Method\nDESCRIPTION: Sends a data packet through the LoRa module. Returns a timestamp when transmission is completed. Optional tx_at_ms parameter allows scheduled transmission at a specific time.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLoraModule.send(packet, tx_at_ms)\n```\n\n----------------------------------------\n\nTITLE: LED Control Methods\nDESCRIPTION: Methods for controlling LED brightness, colors, and display modes in both system and user modes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/byteswitch.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef set_led_brightness(self, num, brightness):\n\ndef set_led_color(self, num, color, led_show_mode, btn_is_pressed):\n\ndef get_led_color(self, num, led_show_mode, btn_is_pressed) -> int:\n```\n\n----------------------------------------\n\nTITLE: Data Reading Methods\nDESCRIPTION: Collection of methods for reading various electrical measurements including voltage, current, power (active and apparent), power factor, and kWh consumption. Available in both string and byte formats.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ac_measure.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_voltage_str(self):\n\ndef get_current_str(self):\n\ndef get_active_power_str(self):\n\ndef get_apparent_power_str(self):\n\ndef get_power_factor_str(self):\n\ndef get_kwh_str(self):\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using MQTTPoE Unit in MicroPython\nDESCRIPTION: This snippet demonstrates how to initialize the MQTTPoE Unit, set up an MQTT client, subscribe to a topic, and continuously check for messages. It includes error handling and a callback function for received messages.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/mqttpoe.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import MQTTPoEUnit\nimport time\n\ndef mqtt_0_SubTopic_event(data):\n    global mqttpoe_0\n    print(data[0])\n    print(data[1])\n\nmqttpoe_0 = MQTTPoEUnit(port=(18, 17))\n\nmqttpoe_0.set_client('m5-mqtt-2024', 'mqtt.m5stack.com', 1883, '', '', 120)\nmqttpoe_0.set_subscribe('SubTopic', mqtt_0_SubTopic_event, 0)\nmqttpoe_0.set_connect()\n\nwhile True:\n    mqttpoe_0.check_msg()\n    time.sleep_ms(50)\n```\n\n----------------------------------------\n\nTITLE: Writing Single Register to Modbus Server in MicroPython\nDESCRIPTION: Writes a single register to the Modbus server. Specifies slave address, register, integer value to write, and timeout. Returns the written value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.client.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPClient.write_single_register(address, register, value, timeout: int=2000) -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Callback for TMOSUnit Events in MicroPython\nDESCRIPTION: This method sets a callback function for different triggers in the TMOSUnit, such as motion detection or presence detection.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nTMOSUnit.set_callback(self, handler, trigger: Literal[0, 1, 2, 3, 4, 5])\n```\n\n----------------------------------------\n\nTITLE: Adding User Info to FingerUnit in Python\nDESCRIPTION: Method to register a new user with provided information. Takes user ID, permissions, and characteristics as parameters. Returns True if successful, False otherwise.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.add_user_info(id, permissions, characteristic, timeout: int=5000) -> bool\n```\n\n----------------------------------------\n\nTITLE: Initializing ModbusTCPServer\nDESCRIPTION: Constructor for creating a ModbusTCPServer object with hostname/IP, port, and verbose mode settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.server.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodbus.ModbusTCPServer(host: str, port: int=502, verbose: bool=False)\n```\n\n----------------------------------------\n\nTITLE: Creating an IRUnit Instance in MicroPython\nDESCRIPTION: Creates an IRUnit object with specified port pins for receiving and transmitting IR signals. The port parameter is a tuple containing the receive pin and transmit pin values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ir.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nIRUnit(port)\n```\n\n----------------------------------------\n\nTITLE: Initializing Ultrasonic Sensor with MicroPython\nDESCRIPTION: Sets up an Ultrasonic sensor using I2C communication protocol. The code initializes the I2C bus on pins 1 (SCL) and 2 (SDA) with a frequency of 100kHz, creates an ultrasonic sensor object, and sets up the M5Stack display.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ultrasonic.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import *\n\ni2c0 = None\nultrasonic_0 = None\n\ndef setup():\n    global i2c0, ultrasonic_0\n\n    i2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\n    ultrasonic_0 = ULTRASONIC_I2C(i2c0)\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n```\n\n----------------------------------------\n\nTITLE: Time Function in MicroPython\nDESCRIPTION: The time() function returns the number of seconds since the Epoch or a port-specific reference point. It highlights differences between MicroPython and CPython implementations, especially for embedded systems without battery-backed RTC.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/software/time.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntime()\n```\n\n----------------------------------------\n\nTITLE: Initializing JoystickHat Class in MicroPython\nDESCRIPTION: Creates a new instance of the JoystickHat class. It requires an I2C bus and optionally an I2C address (default is 0x38).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joystick.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nJoystickHat(i2c, address: int | list | tuple = 0x38)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to UDP Socket in MicroPython\nDESCRIPTION: This snippet shows how to write data to a UDP socket using the write() method in MicroPython. It attempts to write all data to the socket, which may not be possible with non-blocking sockets.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.server.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nudps.write(b'Hello, World!')\nudps.write('Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Setting ADC Resolution in MicroPython\nDESCRIPTION: Sets the resolution of the ADC in bits. Supports 9, 10, 11, and 12-bit resolutions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/adc.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nADC.width(bits)\n```\n\n----------------------------------------\n\nTITLE: Drawing String Method Implementation\nDESCRIPTION: This method draws text on the image. It allows specifying position, text content, color, and scale. It returns the image object for method chaining.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/image.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndraw_string(x:int, y:int, text:str, color:Optional[int,Tuple[int,int,int]]=None, scale=1) -> Image\n```\n\n----------------------------------------\n\nTITLE: Sending Data with LoRaSx1262Module\nDESCRIPTION: Code to send data packets via the LoRa module. Returns a timestamp indicating when the data packet was successfully sent.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora_sx1262.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlora868v12_0.send()\n```\n\n----------------------------------------\n\nTITLE: Configuring IP-level Network Parameters in MicroPython\nDESCRIPTION: Gets or sets IP-level network interface parameters including IP address, subnet mask, gateway, and DNS server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/wlan.sta.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nWLAN.ifconfig([(ip, subnet, gateway, dns)])\n```\n\n----------------------------------------\n\nTITLE: Initializing ButtonUnit Class in MicroPython\nDESCRIPTION: Constructor for the ButtonUnit class that initializes a Button instance with specified pin, active-low configuration, and pull-up resistor state. Parameters include the GPIO pin number, active-low setting (default True), and pull-up resistor state (default True).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/button.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nButtonUnit(pin_num, active_low, pullup_active)\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle Method Implementation\nDESCRIPTION: This method draws a rectangle on the image. It allows specifying position, size, color, thickness, and fill option. It returns the image object for method chaining.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/image.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndraw_rectangle(x:int, y:int, w:int, h:int, color:Optional[int,Tuple[int,int,int]]=None, thickness=1, fill=False) -> Image\n```\n\n----------------------------------------\n\nTITLE: Writing Data to UDP Socket in MicroPython\nDESCRIPTION: Writes a buffer of bytes to the UDP socket. This method attempts to write all data to the socket, which may not be possible with a non-blocking socket.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.client.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nudpc.write(b'Hello, World!')\nudpc.write('Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Checking Data Readiness for CO2L Unit in MicroPython\nDESCRIPTION: Method to check if the data (temperature, humidity, CO2) is ready from the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.is_data_ready()\n```\n\n----------------------------------------\n\nTITLE: Executing Callbacks for TMOSUnit Events in MicroPython\nDESCRIPTION: This method checks the status of the TMOSUnit and executes the corresponding callback functions based on the event flags. It should be called periodically to poll the sensor status.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nTMOSUnit.tick_callback(self)\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on Glass Unit Display using MicroPython\nDESCRIPTION: This example demonstrates how to display the text 'GLASS' on the Glass Unit screen using MicroPython. It utilizes the GlassUnit class which inherits from the Display class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/glass.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This code is a placeholder as the actual code is not provided in the input text.\n# The example would typically include initializing the GlassUnit and using its methods to display text.\n```\n\n----------------------------------------\n\nTITLE: Initializing Motor Parameters\nDESCRIPTION: Method to initialize motor parameters including step values for each axis and acceleration settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.init(x_step, y_step, z_step, acc)\n```\n\n----------------------------------------\n\nTITLE: DMX512 Write Data Method\nDESCRIPTION: Method to update data for a specified DMX channel. Accepts channel number (1-512) and data value (0-255). Data is queued for transmission in the next update cycle.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dmx.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef write_data(self, channel, data) -> None:\n    # channel: DMX channel number (1-512)\n    # data: Data value to be sent (0-255)\n```\n\n----------------------------------------\n\nTITLE: Getting Heart Rate Measurement\nDESCRIPTION: Method to retrieve the current heart rate reading from the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit.get_heart_rate()\n```\n\n----------------------------------------\n\nTITLE: ModbusTCPServer Multi-Value Operations\nDESCRIPTION: Methods for setting multiple values at once for coils, discrete inputs, and registers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.server.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPServer.set_multi_coils(register: int, value: list)\nModbusTCPServer.set_multi_discrete_input(register: int, value: list)\nModbusTCPServer.set_multi_holding_register(register: int, value: list)\nModbusTCPServer.set_multi_input_register(register: int, value: list)\n```\n\n----------------------------------------\n\nTITLE: LED Control Methods\nDESCRIPTION: Methods for controlling the RGB LEDs associated with each encoder. Provides functionality to set individual LED colors or configure a range of LEDs.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder8.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef set_led_rgb(self, channel=1, rgb=0):\n    # Set LED RGB color\n\ndef set_led_rgb_from(self, begin=0, end=0, rgb=0):\n    # Set RGB color for range of LEDs\n```\n\n----------------------------------------\n\nTITLE: Motor Speed Control Methods in RollerBase\nDESCRIPTION: Methods for controlling motor speed, including setting/getting target speed, maximum current limits, and PID parameters. These functions provide precise control over the motor's rotational speed.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef set_motor_speed(speed) -> None:\n    \n    Set the motor speed and max current setting.\n\n    :param int speed: The speed value to set.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_speed() -> int:\n    \n    Get the motor speed and max current setting.\n\n    :return: The current motor speed.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_speed_max_current(current) -> None:\n    \n    Set the motor speed and max current setting.\n\n    :param int current: The max current value to set.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_speed_max_current() -> int:\n    \n    Get the motor speed and max current setting.\n\n    :return: The current max current setting.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_speed_readback() -> float:\n    \n    Get the motor speed readback.\n\n    :return: The readback value of the motor speed.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_motor_speed_pid(p, i, d) -> None:\n    \n    Set the motor speed PID.\n\n    :param float p: Proportional gain.\n    :param float i: Integral gain.\n    :param float d: Derivative gain.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_speed_pid() -> tuple:\n    \n    Get the motor speed PID.\n\n    :return: A tuple containing the PID values.\n```\n\n----------------------------------------\n\nTITLE: Key State Methods\nDESCRIPTION: Methods for checking various key states including pressed, released, held, clicked, and double-clicked states.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/key.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nget_key_state() -> int\nisHolding()\nisPressed()\nisReleased()\nwasClicked()\nwasDoubleClicked()\nwasHold()\nwasPressed()\nwasReleased()\nwasSingleClicked()\n```\n\n----------------------------------------\n\nTITLE: MIDI Message Control Methods\nDESCRIPTION: Collection of methods for sending MIDI messages including note on/off, instrument changes, and control parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/midi.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef set_note_on(channel, pitch, velocity)\ndef set_note_off(channel, pitch)\ndef set_instrument(bank, channel, value)\ndef set_drums_instrument(drum_pitch, velocity)\ndef set_pitch_bend(channel, value)\ndef set_pitch_bend_range(channel, value)\ndef midi_reset()\ndef set_channel_volume(channel, level)\ndef set_all_notes_off(channel)\n```\n\n----------------------------------------\n\nTITLE: Deinitializing GPS Unit in MicroPython\nDESCRIPTION: Stops any running tasks and releases resources associated with the GPS unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/gps_v11.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nGPSV11Unit.deinit()\n```\n\n----------------------------------------\n\nTITLE: LoRaWAN Network Join Operations\nDESCRIPTION: Methods for managing network join operations including configuration, state management, and network joining process.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lorawan_rui3.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef set_join_config(state, auto_join, retry_interval, max_retry, timeout):\n    \"\"\"Configures the join parameters for LoRa.\"\"\"\n    pass\n\ndef join_network(timeout):\n    \"\"\"Joins the LoRa network using predefined join parameters.\"\"\"\n    pass\n\ndef get_join_mode():\n    \"\"\"Retrieves the current join mode.\"\"\"\n    pass\n\ndef set_join_mode(mode):\n    \"\"\"Sets the join mode for the LoRa module.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Stopping Audio Playback with Player.stop() in MicroPython\nDESCRIPTION: Completely stops the audio playback.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.player.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nPlayer.stop()\n```\n\n----------------------------------------\n\nTITLE: Timer Sleep and Scheduled Wake in MicroPython\nDESCRIPTION: Sets the device to sleep and schedules a timed wake-up. Multiple overloaded versions allow for different timing specifications from simple seconds to complex date/time scheduling.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nPower.timerSleep(seconds) -> None\nPower.timerSleep(minutes, hours) -> None\nPower.timerSleep(minutes, hours, date, weekDay) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing CatchUnit in MicroPython\nDESCRIPTION: Constructor for the CatchUnit class that initializes a servo-driven gripper. It takes a port tuple parameter to specify which port the Servo is connected to.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/catch.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nCatchUnit(port: tuple)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Controlling RGB Unit with MicroPython\nDESCRIPTION: Example showing how to import the RGB unit module, initialize it with pins 36 and 26 for 3 LEDs, set brightness, fill all LEDs with one color, and set an individual LED to a different color.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rgb.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport M5\nfrom M5 import *\nfrom unit import *\n\nM5.begin()\nrgb_0 = RGB((36, 26), 3)\nWidgets.fillScreen(0x222222)\n\nrgb_0.set_brightness(80)\nrgb_0.fill_color(0xff0000)\nrgb_0.set_color(0, 0x33ff33)\n```\n\n----------------------------------------\n\nTITLE: Initializing FlashLightUnit in MicroPython\nDESCRIPTION: Constructor for initializing the FlashLightUnit. It takes a port parameter which consists of two pins: adc pin and pump pin.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/flash_light.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFlashLightUnit(port)\n```\n\n----------------------------------------\n\nTITLE: Checking Battery Charging Status in MicroPython\nDESCRIPTION: Returns whether the battery is currently charging (True) or not (False).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nPower.isCharging() -> bool\n```\n\n----------------------------------------\n\nTITLE: Initializing GPS V1.1 Unit in MicroPython\nDESCRIPTION: Creates an instance of the GPSV11Unit class with a specific UART id and port for communication with the GPS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/gps_v11.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nGPSV11Unit(id, port)\n```\n\n----------------------------------------\n\nTITLE: JPG Decode Method Implementation in Python\nDESCRIPTION: Method to decode a JPEG format image back to RGB565 format. Takes a JPEG formatted image.Image object and returns an RGB565 formatted image.Image instance.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/jpg.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndecode(img_jpg: image.Image) -> image.Image\n```\n\n----------------------------------------\n\nTITLE: Creating an ImagePlus Widget in MicroPython\nDESCRIPTION: Constructor example for creating an ImagePlus object that displays a remote image with optional periodic updates. It specifies the image URL, position coordinates, update settings, and default image to display if the fetch fails.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/image+.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nImagePlus(url, x, y, enable, period, default_img=\"res/img/default.jpg\", parent=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring General Network Parameters in MicroPython\nDESCRIPTION: Gets or sets general network interface parameters beyond standard IP configuration, including network-specific and hardware-specific parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/wlan.sta.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nWLAN.config('param')\nWLAN.config(param=value, ...)\n```\n\n----------------------------------------\n\nTITLE: Setting State of SSR Unit in MicroPython\nDESCRIPTION: Method to set the state of the Solid-State Relay explicitly. The state parameter determines whether the relay should be on or off.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ssr.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSSRUnit.set_state(state)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Miniscale Unit in MicroPython\nDESCRIPTION: This example demonstrates how to initialize a Miniscale unit over I2C, set its LED color, and read the weight value. It imports the necessary modules, configures the I2C connection, and creates a MiniScaleUnit instance.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/miniscale.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nimport time\nfrom unit import MiniScaleUnit\n\ni2c = I2C(0, scl=Pin(1), sda=Pin(2), freq=400000)\nscale = MiniScaleUnit(i2c)\nscale.setLed(255, 0, 0)\nprint(miniscale.weight)\n```\n\n----------------------------------------\n\nTITLE: Creating Hall Effect Unit in MicroPython\nDESCRIPTION: Instantiates a HallEffectUnit object by specifying the port to which the unit is connected. The port is provided as a tuple corresponding to the labeled port on the unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/hall_effect.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nHallEffectUnit(port: tuple)\n```\n\n----------------------------------------\n\nTITLE: Getting SpO2 Measurement\nDESCRIPTION: Method to retrieve the current blood oxygen saturation (SpO2) reading from the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit.get_spo2()\n```\n\n----------------------------------------\n\nTITLE: LoRaWAN Network Parameters Configuration\nDESCRIPTION: Methods for configuring various network parameters including adaptive rate, node class, duty cycle, and transmission settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lorawan_rui3.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef set_data_rate(rate):\n    \"\"\"Sets the data rate for communication.\"\"\"\n    pass\n\ndef set_tx_power(power):\n    \"\"\"Sets the transmit power.\"\"\"\n    pass\n\ndef set_network_link_state(state):\n    \"\"\"Sets the network link state for the device.\"\"\"\n    pass\n\ndef set_listen_before_talk(state):\n    \"\"\"Sets the Listen Before Talk (LBT) state.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Drawing Text with MicroPython on Atomic Display Base\nDESCRIPTION: Example code showing how to display text 'M5Stack' on the Atomic Display Base screen using MicroPython.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/display.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Example code reference: atoms3_draw_text_example.py\n```\n\n----------------------------------------\n\nTITLE: Configuring LoRaE220JPUnit Parameters in MicroPython\nDESCRIPTION: Method to set up various parameters of the LoRaE220 module, including address, channel, encryption key, data rate, and transmission power. Only available in working mode 3.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lora_e220.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLoRaE220JPUnit.setup(own_address=0, own_channel=0, encryption_key=0x2333, air_data_rate=LoRaE220JPUnit.BW500K_SF5, subpacket_size=LoRaE220JPUnit.SUBPACKET_200_BYTE, rssi_ambient_noise_flag=LoRaE220JPUnit.RSSI_AMBIENT_NOISE_DISABLE, transmitting_power=LoRaE220JPUnit.TX_POWER_13dBm, rssi_byte_flag=LoRaE220JPUnit.RSSI_BYTE_DISABLE, transmission_method_type=LoRaE220JPUnit.UART_TT_MODE, wor_cycle=LoRaE220JPUnit.WOR_2000MS) -> bool\n```\n\n----------------------------------------\n\nTITLE: Constructing RGB Object in MicroPython\nDESCRIPTION: Constructor for creating an RGB object with port pin numbers and the number of RGB LEDs to control.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rgb.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRGB(port, number)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from ATOMSocketBase\nDESCRIPTION: Method to retrieve voltage, current, power, and total energy data from the ATOM Socket. It returns a tuple of measurements or None if a timeout occurs.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase.get_data(timeout=3000) -> tuple\n```\n\n----------------------------------------\n\nTITLE: Initializing CAN Unit with Basic Configuration\nDESCRIPTION: Constructor for creating a CANUnit object with basic configuration options including port, mode and baudrate settings. The mode can be set to NORMAL, NO_ACKNOWLEDGE, or LISTEN_ONLY.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/can.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nCANUnit(port, mode, baudrate=125000)\n```\n\n----------------------------------------\n\nTITLE: Creating Running Color Effect in PuzzleUnit\nDESCRIPTION: Creates a running color effect on a range of LEDs from begin to end. This method produces an animated color sequence across the specified LED range.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/puzzle.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nPuzzleUnit.set_color_running_from(board_num, begin, end, rgb, per_delay)\n```\n\n----------------------------------------\n\nTITLE: Getting Humidity Method\nDESCRIPTION: Method to retrieve the current humidity measurement from the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/envpro.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nENVPROUnit.get_humidity()\n```\n\n----------------------------------------\n\nTITLE: Controlling Motor Rotation in StepMotorDriverModule\nDESCRIPTION: Method to control the rotation or stopping of a specific motor. It takes the motor ID and desired state as parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule.motor_control(motor_id, state)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Data to All Zigbee Modules\nDESCRIPTION: Method to broadcast data to all Zigbee modules in the network. Takes a bytes parameter containing the data to broadcast.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.broadcast(data: bytes)\n```\n\n----------------------------------------\n\nTITLE: Initializing RCA Display Module in MicroPython\nDESCRIPTION: Code demonstrates two methods of initializing the RCA display module - a simple version and a detailed configuration version. The module supports audio output through PCM5102APWR and video output via ESP32 DAC with resolution up to 864x576 for PAL signals.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/module/rca_module.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport M5\ndisplay = M5.addDisplay(None, 0, {\"module_rca\":{\"enabled\":True}}) # 添加RCA模块\n```\n\nLANGUAGE: python\nCODE:\n```\ndisplay = M5.addDisplay(None, 0, {\n\t\"module_rca\":{\n\t\t\"enabled\":True,\n\t\t\"width\": 216,\n\t\t\"height\": 144,\n\t\t\"output_width\": 0,\n\t\t\"output_height\": 0,\n\t\t\"signal_type\": 0, # NTSC=0, NTSC_J=1, PAL=2, PAL_M=3, PAL_N=4\n\t\t\"use_psram\": 0,\n\t\t\"pin_dac\": 26,\n\t\t\"output_level\": 0,\n\t}\n})\ndisplay.clear(0xffffff) # 清屏\n```\n\n----------------------------------------\n\nTITLE: Initializing GPSV2Module in MicroPython\nDESCRIPTION: Constructor for initializing the GPS V2.0 module with UART communication parameters. It requires specifying the UART ID (0, 1, or 2) and the RX/TX pins for communication with the module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module(id, rx, tx)\n```\n\n----------------------------------------\n\nTITLE: Setting Frequency and Phase for DDS Unit in MicroPython\nDESCRIPTION: Method to set both frequency and phase of the DDS. It takes frequency and phase indices, frequency in Hz, and phase in degrees.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit.set_freq_phase(f_index: int = 0, freq: int = 1000, p_index: int = 0, phase: int = 0) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Motor Speed in MicroPython\nDESCRIPTION: Sets the speed of a motor connected to a specified channel on the Motion Base.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/motion.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmotion.set_motor_speed()\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping ModbusRTUSlave\nDESCRIPTION: Methods to start and stop the Modbus RTU slave operation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.start() -> None\nModbusRTUSlave.stop() -> None\n```\n\n----------------------------------------\n\nTITLE: Balance Car Control\nDESCRIPTION: Starts and stops the balance control system of the car.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/bala2.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmodule_bala2_0.start()\nmodule_bala2_0.stop()\n```\n\n----------------------------------------\n\nTITLE: Putting FingerUnit to Sleep in Python\nDESCRIPTION: Method to put the FPC1020A fingerprint module into sleep mode. After calling this method, the module will not respond to any messages.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.sleep() -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Up Digital Input Interrupts in MicroPython\nDESCRIPTION: Configures interrupt handling for digital input pins with custom handler function and trigger modes (falling or rising edge).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/plcio.digitalinput.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef handler(pin):\n    print('interrupt triggered')\n\nin1.irq(handler, DigitalInput.IRQ_FALLING)\n```\n\n----------------------------------------\n\nTITLE: Refreshing TMOSUnit State\nDESCRIPTION: Method to retrieve the current status of the TMOSUnit, including presence detection, motion detection, and ambient temperature shock detection. Returns the TMOSUnit instance with updated status flags.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.refresh_state() -> self\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using TMOS Unit in MicroPython\nDESCRIPTION: This snippet demonstrates how to set up and use the TMOS Unit in MicroPython. It includes initializing the unit, setting up callbacks for various events, and updating the UI based on sensor data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import TMOSUnit\nfrom hardware import *\n\n# ... (variable declarations)\n\ndef setup():\n    global title0, label0, title1, title2, TMOSTest, label1, label2, label3, i2c0, tmos_0\n\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n    # ... (widget setup)\n\n    i2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\n    title0.setText(\"TMOS Test\")\n    tmos_0 = TMOSUnit(i2c0, 0x5A)\n    tmos_0.set_callback(tmos_0_presence_detect_event, tmos_0.PRESENCE_DETECT)\n    tmos_0.set_callback(tmos_0_motion_detect_event, tmos_0.MOTION_DETECT)\n    tmos_0.set_callback(tmos_0_presence_not_detected_event, tmos_0.PRESENCE_NOT_DETECTED)\n    tmos_0.set_callback(tmos_0_motion_not_detected_event, tmos_0.MOTION_NOT_DETECTED)\n    # ... (label setup)\n    print(tmos_0.get_gain_mode())\n\ndef loop():\n    global title0, label0, title1, title2, TMOSTest, label1, label2, label3, i2c0, tmos_0\n    M5.update()\n    tmos_0.tick_callback()\n\nif __name__ == \"__main__\":\n    try:\n        setup()\n        while True:\n            loop()\n    except (Exception, KeyboardInterrupt) as e:\n        try:\n            from utility import print_error_msg\n            print_error_msg(e)\n        except ImportError:\n            print(\"please update to latest firmware\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Speaker in UIFlow2 MicroPython\nDESCRIPTION: Example of how to configure Speaker properties using the config method in UIFlow2 MicroPython. Shows both reading and setting configuration parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/hardware/speaker.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSpeaker.config(\"pin_data_in\")\n\nSpeaker.config(pin_data_in=1)\n```\n\n----------------------------------------\n\nTITLE: Setting Label Visibility in MicroPython\nDESCRIPTION: Method to set the visibility of a Label object. When visible is True, the Label content will be displayed, otherwise it will be hidden.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/label.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nLabel.setVisible(visible: bool)\n```\n\n----------------------------------------\n\nTITLE: Receiving P2P Data with Timeout\nDESCRIPTION: Method to receive P2P LoRa data packets with specified timeout. Returns RSSI, SNR, and Payload if data is received.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lorawan_rui3.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nLoRaWAN_X.get_p2p_receive_data(timeout=500, to_str=False)\n```\n\n----------------------------------------\n\nTITLE: Setting Volume Level with Player.set_vol() in MicroPython\nDESCRIPTION: Sets the volume level of the audio player on a scale from 0 to 100.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.player.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nPlayer.set_vol(volume)\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple Coils to Modbus Server in MicroPython\nDESCRIPTION: Writes multiple coils to the Modbus server. Specifies slave address, start register, list of boolean values to write, and timeout. Returns the count of written coils.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.client.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPClient.write_multiple_coils(address, register, values, timeout: int=2000) -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Callback Function for Reflective IR Unit in MicroPython\nDESCRIPTION: Sets a callback function that will be called when the specified event occurs. The trigger parameter determines which events will activate the callback, with options for detection or non-detection events.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/reflective_ir.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nReflectiveIRUnit.set_callback(handler, trigger=ReflectiveIRUnit.EVENT_DETECTED | ReflectiveIRUnit.EVENT_NOT_DETECTED) -> None\n```\n\n----------------------------------------\n\nTITLE: LCD Unit Text Display Example in MicroPython\nDESCRIPTION: MicroPython example code demonstrating how to display text on the LCD Unit's screen. The LCD Unit is a 1.14 inch color LCD with 135x240 resolution supporting RGB666 display, controlled via I2C communication at address 0x3E.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lcd.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unit import LCDUnit\n\n# Initialize LCD Unit\nlcd = LCDUnit()\n\n# Display text on screen\nlcd.text(\"LCD\")\n```\n\n----------------------------------------\n\nTITLE: UART Echo Example in MicroPython\nDESCRIPTION: This example demonstrates how to utilize UART interfaces by echoing back any data received on the configured UART.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Code content not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Performing Point-to-Point Data Transmission\nDESCRIPTION: Method to send data to a specific Zigbee module using its custom address. Requires the address of the target device and the bytes to transmit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.p2p_transmission(address: int, data: bytes)\n```\n\n----------------------------------------\n\nTITLE: Reading QR Code Data\nDESCRIPTION: Reads the decoded QR code data. Returns the scanned data as bytes, or None if no data has been received.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.read()\n```\n\n----------------------------------------\n\nTITLE: Updating TimerPWR Unit Status\nDESCRIPTION: Method that should be called in the main loop to update the status of the TimerPWR Unit and process any pending events.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.tick()\n```\n\n----------------------------------------\n\nTITLE: Creating Running Light Effect for NECO Unit in MicroPython\nDESCRIPTION: Method to create a running light effect by setting and clearing colors for a range of LEDs sequentially.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/neco.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nNECOUnit.set_color_running_from(begin, end, rgb, per_delay)\n```\n\n----------------------------------------\n\nTITLE: Setting Match Level for FingerUnit in Python\nDESCRIPTION: Method to set the match level for fingerprint comparison. Takes a level parameter between 0 and 9, with higher values for stricter comparison. Returns the newly set level.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.set_match_level(level: int) -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Latitude from GPS Module\nDESCRIPTION: Method to retrieve the current latitude from the GPS module. Returns latitude in degrees minutes format (ddmm.mmmmmN/S) as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.get_latitude()\n```\n\n----------------------------------------\n\nTITLE: Setting Relay State in Relay2Module\nDESCRIPTION: Method to set the state of a specific relay. Takes the relay number (1 or 2) and a boolean state (True to turn on, False to turn off).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/relay_2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRelay2Module.set_relay_state(num, state)\n```\n\n----------------------------------------\n\nTITLE: Motor Position Control Methods in RollerBase\nDESCRIPTION: Methods for controlling motor position, including target position, maximum current during positioning, and position PID parameters. These functions enable precise control of the motor's angular position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef set_motor_position(position) -> None:\n    \n    Set the motor position and max current setting.\n\n    :param int position: The position value to set.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_position() -> int:\n    \n    Get the motor position and max current setting.\n\n    :return: The current motor position.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_position_max_current(current) -> None:\n    \n    Set the motor position and max current setting.\n\n    :param int current: The max current value to set.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_position_max_current() -> int:\n    \n    Get the motor position and max current setting.\n\n    :return: The current max current setting.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_position_readback() -> float:\n    \n    Get the motor position readback.\n\n    :return: The readback value of the motor position.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_position_pid() -> tuple:\n    \n    Get the motor position PID.\n\n    :return: A tuple containing the PID values for position.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_motor_position_pid(p, i, d) -> None:\n    \n    Set the motor position PID.\n\n    :param float p: Proportional gain.\n    :param float i: Integral gain.\n    :param float d: Derivative gain.\n```\n\n----------------------------------------\n\nTITLE: Setting Entire Screen with Color List in PuzzleUnit\nDESCRIPTION: Sets the screen of a specific board with a list of colors. This method allows for complex color patterns to be applied to an entire PuzzleUnit board at once.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/puzzle.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nPuzzleUnit.set_screen(board_num, color_list)\n```\n\n----------------------------------------\n\nTITLE: Face Recognition ID Management APIs\nDESCRIPTION: Methods for managing face recognition IDs including enrollment, deletion and counting\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/dl.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nHumanFaceRecognizer.clear_id()\nHumanFaceRecognizer.enroll_id(img: image:Image, keypoint: tuple) -> bool\nHumanFaceRecognizer.delete_id([id])\nHumanFaceRecognizer.enrolled_id_num() -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Voltage for Both Channels - Python\nDESCRIPTION: Sets the output voltage for both channels simultaneously. Each voltage can range from 0.0 to the maximum (5V or 10V).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dac2.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDAC2Unit.setVoltageBoth(voltage0, voltage1)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to DMX Channel in Python\nDESCRIPTION: Method to update data for a specified DMX channel. Data is sent on the next update cycle.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dmx.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDMX512Module.write_data(channel, data)\n```\n\n----------------------------------------\n\nTITLE: Getting Decimal Latitude from GPS Module\nDESCRIPTION: Method to retrieve the current latitude in decimal format from the GPS module. Returns latitude decimal value (dd.dddd) as a float.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.get_latitude_decimal()\n```\n\n----------------------------------------\n\nTITLE: Outputting DDS Signal in MicroPython\nDESCRIPTION: Method to output the DDS signal using specified frequency and phase register indices.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit.output(f_index: int = 0, p_index: int = 0) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Servo Angle in GoPlus2Module\nDESCRIPTION: Method to set the angle of a specified servo (numbered 1-4) to a value between 0 and 180 degrees.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/goplus2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nGoPlus2Module.set_servo_angle(servo_num, angle) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing GRBLModule in Python\nDESCRIPTION: Constructor for initializing the GRBLModule with a specified I2C address. This creates an instance of the GRBLModule class for communication with the GRBL hardware.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule(address)\n```\n\n----------------------------------------\n\nTITLE: Getting Match Level from FingerUnit in Python\nDESCRIPTION: Method to get the current match level for fingerprint comparison. Returns an integer between 0 and 9, with higher values indicating stricter comparison.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.get_match_level() -> int\n```\n\n----------------------------------------\n\nTITLE: DigiClock Unit Display Control Methods\nDESCRIPTION: Collection of methods for controlling the DigiClock display, including clearing the display, setting brightness, and writing data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/digi_clock.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDigiClockUnit.clear() -> None\n```\n\nLANGUAGE: python\nCODE:\n```\nDigiClockUnit.set_brightness(brightness: int) -> None\n```\n\nLANGUAGE: python\nCODE:\n```\nDigiClockUnit.set_raw(data: int, index: int) -> None\n```\n\nLANGUAGE: python\nCODE:\n```\nDigiClockUnit.set_char(char: str, index: int) -> None\n```\n\nLANGUAGE: python\nCODE:\n```\nDigiClockUnit.set_string(string: str) -> None\n```\n\nLANGUAGE: python\nCODE:\n```\nDigiClockUnit.get_fw_version() -> int\n```\n\n----------------------------------------\n\nTITLE: DAC Value Retrieval Methods\nDESCRIPTION: Methods for getting DAC values in different formats including raw 12-bit values, 16-bit values, normalized floating-point values, and voltage values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dac.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_value(self) -> int\ndef get_voltage(self) -> float\ndef get_raw_value(self) -> int\ndef get_normalized_value(self) -> float\n```\n\n----------------------------------------\n\nTITLE: Importing MQTT Client in UIFlow2\nDESCRIPTION: Demonstrates how to import the default MQTTClient class used in UIFlow2.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom umqtt import MQTTClient\n```\n\n----------------------------------------\n\nTITLE: Playing Audio with Speaker in UIFlow2 MicroPython\nDESCRIPTION: Examples of playing tones and audio files using the Speaker class in UIFlow2 MicroPython.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/hardware/speaker.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSpeaker.end()\n```\n\n----------------------------------------\n\nTITLE: Setting Oversampling Rate Method for Environmental Parameters\nDESCRIPTION: Method to set the oversampling rate for a specified environmental parameter (temperature, pressure, or humidity).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/envpro.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nENVPROUnit.set_over_sampling_rate(env, rate)\n```\n\n----------------------------------------\n\nTITLE: Initializing UltrasoundIO Unit Class\nDESCRIPTION: Constructor for the UltrasoundIOUnit class that initializes an ultrasonic sensor. Takes port pins for trigger and echo, and an optional timeout parameter in microseconds.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ultrasonic_io.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UltrasoundIOUnit:\n    def __init__(self, port, echo_timeout_us=1000000):\n```\n\n----------------------------------------\n\nTITLE: Image Format Method Implementation\nDESCRIPTION: This method returns the format of the image. It is part of the image.Image class and can be used in both MicroPython and UIFlow2.0.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/image.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nformat() -> int\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Recorder Settings in MicroPython\nDESCRIPTION: Updates the configuration of the recorder with new sample rate, bit depth, and stereo settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.recorder.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nRecorder.config(sample=8000, bits=16, stereo=False) -> bool\n```\n\n----------------------------------------\n\nTITLE: Recognition Result Access Methods\nDESCRIPTION: Methods to access face recognition results including similarity score and face ID\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/dl.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nRecognitionResult.similarity() -> float\nRecognitionResult.id() -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Button Callback\nDESCRIPTION: Method to set a callback function that executes when the button is pressed\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dualbutton.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDual_Button.setCallback()\n```\n\n----------------------------------------\n\nTITLE: Reading RS485 Data\nDESCRIPTION: Read data from the UART buffer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs485.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata = rs485_0.read()\n```\n\n----------------------------------------\n\nTITLE: Playing Vibration Effect Once in MicroPython\nDESCRIPTION: Method to play a haptic effect once on the motor with customizable frequency, duty cycle, and duration parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/vibrator.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nVibratorUnit.once(freq=10, duty=50, duration=50) -> None\n```\n\n----------------------------------------\n\nTITLE: Distance Measurement Method\nDESCRIPTION: Method to calculate target distance based on echo response time. Accepts a mode parameter to specify output units (1 for millimeters, 2 for centimeters).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ultrasonic_io.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_target_distance(self, mode):\n```\n\n----------------------------------------\n\nTITLE: Initializing ENVPROUnit Class in MicroPython\nDESCRIPTION: Constructor for the ENVPROUnit class that initializes the sensor with an I2C interface and optional address (defaults to 0x77).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/envpro.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nENVPROUnit(i2c, address)\n```\n\n----------------------------------------\n\nTITLE: Getting Longitude from GPS Module\nDESCRIPTION: Method to retrieve the current longitude from the GPS module. Returns longitude in degrees minutes format (ddmm.mmmmmE/W) as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.get_longitude()\n```\n\n----------------------------------------\n\nTITLE: Transmitting Data with LaserTX Unit in Python\nDESCRIPTION: Method to transmit data through UART. This is used to send information via the laser transmitter when in UART mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/laser_tx.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef write(self, payload):\n    # Transmit data through UART\n    pass\n```\n\n----------------------------------------\n\nTITLE: Receiving Data in Blocking Mode with LoRaE220JPUnit in MicroPython\nDESCRIPTION: Method to receive data using a blocking approach. It takes an optional timeout parameter in milliseconds. Available in working modes 0, 1, and 2.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lora_e220.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nLoRaE220JPUnit.receive(timeout=1000) -> tuple[bytes, int]\n```\n\n----------------------------------------\n\nTITLE: LTE Module Network Activation\nDESCRIPTION: Methods to activate/deactivate the LTE network interface and query its current state\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lte.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncomlte_0.active(True)\ncomlte_0.active(False)\ncomlte_0.active()\n```\n\n----------------------------------------\n\nTITLE: Selecting Active RFID Card\nDESCRIPTION: Method to select the currently active RFID card for further operations such as reading or writing.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rfid.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nRFIDUnit.picc_select_card()\n```\n\n----------------------------------------\n\nTITLE: HeartHat Data Reading Methods in MicroPython\nDESCRIPTION: Methods for reading various sensor data including heart rate, SpO2, IR and red values from the MAX30102 sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/heart.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nHeartHat.get_heart_rate()\n```\n\nLANGUAGE: python\nCODE:\n```\nHeartHat.get_spo2()\n```\n\nLANGUAGE: python\nCODE:\n```\nHeartHat.get_ir()\n```\n\nLANGUAGE: python\nCODE:\n```\nHeartHat.get_red()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latitude from GPS V2.0 Module\nDESCRIPTION: Method to get the current latitude position from the GPS module as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_latitude()\n```\n\n----------------------------------------\n\nTITLE: Setting Frequency for DDS Unit in MicroPython\nDESCRIPTION: Method to set the frequency of the DDS. It takes an index (0 or 1) and the frequency in Hz.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit.set_freq(index: int = 0, freq: int = 1000) -> None\n```\n\n----------------------------------------\n\nTITLE: Getting Scaled Weight from HX711 Sensor\nDESCRIPTION: Method to retrieve the calibrated weight value from the HX711 sensor with scaling applied based on previous calibration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/weight.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWEIGHTUnit.get_scale_weight()\n```\n\n----------------------------------------\n\nTITLE: Getting Decimal Longitude from GPS Module\nDESCRIPTION: Method to retrieve the current longitude in decimal format from the GPS module. Returns longitude decimal value (dd.dddd) as a float.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.get_longitude_decimal()\n```\n\n----------------------------------------\n\nTITLE: Setting Socket Blocking Mode\nDESCRIPTION: Configures socket blocking behavior, allowing for blocking or non-blocking operations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.server.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntcps.setblocking(True)\ntcps.setblocking(False)\n```\n\n----------------------------------------\n\nTITLE: Setting Trigger Mode for QRCode Module\nDESCRIPTION: Configures the triggering mode for the QRCode scanner. Options include Key, Continuous, Auto, Pulse, and Motion Sensing modes, each with different behavior patterns.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_trigger_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Checking Available Characters on UART in MicroPython\nDESCRIPTION: This code shows how to check the number of characters available for reading on the UART bus.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(uart1.any())\n```\n\n----------------------------------------\n\nTITLE: Initializing HMIModule Class in MicroPython\nDESCRIPTION: Constructor method for the HMIModule class that initializes an I2C connection with the HMI module at the specified address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/hmi.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass HMIModule\n\nConstructors\n------------\n\n.. class:: HMIModule(address)\n\n    Init I2C Module HMI I2C Address.\n\n    :param int|list|tuple address: I2C address of the HMIModule.\n```\n\n----------------------------------------\n\nTITLE: Getting Version Info from FingerUnit in Python\nDESCRIPTION: Method to get the version information of the FPC1020A fingerprint module. Returns a string containing the version information.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.get_version() -> str\n```\n\n----------------------------------------\n\nTITLE: Controlling Motors and Reading Encoder Values with MicroPython\nDESCRIPTION: This code demonstrates how to control motors and read encoder values using the 4EncoderMotor Module in MicroPython. The example is referenced from the encoder4motor_core2_example.py file.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/encoder4_motor.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Code would be here, but it's only referenced in the document via:\n# .. literalinclude:: ../../../examples/module/encoder4_motor/encoder4motor_core2_example.py\n#        :language: python\n#        :linenos:\n```\n\n----------------------------------------\n\nTITLE: Reading Ambient Light Sensor Data with ALS Class\nDESCRIPTION: The ALS.getLightSensorData() method reads the ambient light sensor value from the built-in sensor in compatible M5Stack devices. This method returns an integer value representing the ambient light level. It requires M5.begin() to be called before usage and M5.update() in the main loop.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/als.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nALS.getLightSensorData() -> int\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Socket\nDESCRIPTION: Reads available data from the socket using read() method.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.server.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = tcps.read()\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Initializing ColorUnit Class in MicroPython\nDESCRIPTION: Constructor for initializing the ColorUnit sensor with I2C interface. Takes I2C bus instance and optional address parameter defaulting to 0x29.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/color.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nColorUnit(i2c, address=_TCS3472_DEFAULT_ADDR)\n```\n\n----------------------------------------\n\nTITLE: Initializing CO2Unit in MicroPython\nDESCRIPTION: Example showing how to initialize and use the CO2Unit to measure CO2, temperature, and humidity in MicroPython. The snippet demonstrates the basic workflow of creating a CO2Unit instance, starting periodic measurement, and retrieving sensor data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/unit/co2/co2_cores3_example.py\n        :language: python\n        :linenos:\n```\n\n----------------------------------------\n\nTITLE: Using M5GFX Drawing Functions in MicroPython\nDESCRIPTION: This snippet demonstrates the available low-level M5GFX drawing functions that can be accessed through m5.lcd for creating graphics on the display.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/cmodules/m5unified/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nm5.lcd.height()  # Get display height\nm5.lcd.width()  # Get display width\nm5.lcd.setRotation(rotation)  # Set display rotation\nm5.lcd.setFont(font)  # Set text font\nm5.lcd.setTextColor(color)  # Set text color\nm5.lcd.clear()  # Clear the display\nm5.lcd.fillScreen(color)  # Fill screen with color\nm5.lcd.drawPixel(x, y, color)  # Draw a pixel\nm5.lcd.drawLine(x0, y0, x1, y1, color)  # Draw a line\nm5.lcd.drawRect(x, y, w, h, color)  # Draw a rectangle\nm5.lcd.fillRect(x, y, w, h, color)  # Fill a rectangle\nm5.lcd.drawCircle(x, y, r, color)  # Draw a circle\nm5.lcd.fillCircle(x, y, r, color)  # Fill a circle\nm5.lcd.print(text)  # Print text on the display\nm5.lcd.drawQR(text, x, y, width, version)  # Draw a QR code\n```\n\n----------------------------------------\n\nTITLE: Getting Object Temperature\nDESCRIPTION: Method to measure and return the temperature of the object being targeted by the NCIR sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ncir.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nncir.get_object_temperature()\n```\n\n----------------------------------------\n\nTITLE: LoRaWAN868 Module Constructor\nDESCRIPTION: Initialize a LoRaWAN868Module instance with specified UART ID, port pins, and frequency band.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lorawan868.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass LoRaWAN868Module:\n    def __init__(self, id, port, band):\n        # Initialize the LoRaWANModule\n        # id: UART ID\n        # port: tuple of (rx, tx) pins\n        # band: frequency for LoRa communication\n```\n\n----------------------------------------\n\nTITLE: I2C Address Configuration Methods\nDESCRIPTION: Methods for managing I2C address configuration and device initialization. Includes functions to set/change I2C address and check device availability.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder8.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef init_i2c_address(self, slave_addr):\n    # Set I2C address\n\ndef available(self):\n    # Check device availability\n\ndef set_i2c_address(self, addr=0x41):\n    # Set new I2C address\n```\n\n----------------------------------------\n\nTITLE: Loading Speaker Example in MicroPython\nDESCRIPTION: This snippet shows an example of using the Speaker class in MicroPython with a CoreS3 device.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/speaker.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/hardware/speaker/cores3_speaker_example.py\n        :language: python\n        :linenos:\n```\n\n----------------------------------------\n\nTITLE: Triggering Vibration Effect in MicroPython\nDESCRIPTION: This method plays a haptic effect once on the motor. It allows setting the frequency, duty cycle, and duration of the vibration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/vibrator.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nVibratorHAT.once(freq=10, duty=50, duration=50)\n```\n\n----------------------------------------\n\nTITLE: Creating a JoystickUnit Instance in MicroPython\nDESCRIPTION: Constructor for initializing a JoystickUnit instance with the specified I2C bus and address. The default I2C address is 0x38.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/joystick.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nJoystickUnit(i2c, address: int | list | tuple = 0x38)\n```\n\n----------------------------------------\n\nTITLE: Importing Robust MQTT Client\nDESCRIPTION: Illustrates how to import the MQTTClient class from the umqtt.robust module for MQTT with automatic reconnection support.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom umqtt.robust import MQTTClient\n```\n\n----------------------------------------\n\nTITLE: Reading Coils from Modbus Server in MicroPython\nDESCRIPTION: Reads coils from the Modbus server. Specifies slave address, start register, quantity of coils to read, and timeout. Returns a list of boolean values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.client.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPClient.read_coils(address, register, quantity, timeout: int=2000) -> list\n```\n\n----------------------------------------\n\nTITLE: Getting Temperature Method\nDESCRIPTION: Method to retrieve the current temperature measurement from the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/envpro.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nENVPROUnit.get_temperature()\n```\n\n----------------------------------------\n\nTITLE: Reading Data from LaserRXUnit UART in Python\nDESCRIPTION: This method reads data from the UART interface of the LaserRXUnit. It can read a specified number of bytes or all available data if no byte count is provided.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/laser_rx.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLaserRXUnit.read(byte)\n```\n\n----------------------------------------\n\nTITLE: Motor Protection Configuration Methods in RollerBase\nDESCRIPTION: Methods for configuring motor protection features including over-range protection, jam protection, and error handling. These methods help prevent motor damage in abnormal conditions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef set_motor_over_range_protect_state(state) -> None:\n    \n    Set the motor over range protection state.\n\n    :param int state: Protection state value (1 to enable, 0 to disable).\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_over_range_protect_state() -> bool:\n    \n    Get the motor over range protection status.\n\n    :return: True if protection is enabled, False otherwise.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef remove_motor_jam_protect() -> None:\n    \n    Set the motor jam release protection.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_motor_jam_protect_state(state) -> None:\n    \n    Set the motor jam protection enable/disable.\n\n    :param int state: Protection state value (1 to enable, 0 to disable).\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_jam_protect_state() -> bool:\n    \n    Get the motor jam protection status.\n\n    :return: True if jam protection is enabled, False otherwise.\n```\n\n----------------------------------------\n\nTITLE: Resetting TMOSUnit Algorithm\nDESCRIPTION: Method to reset the algorithm, which must be executed when modifying thresholds, hysteresis, or other detection parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.reset_algo() -> None\n```\n\n----------------------------------------\n\nTITLE: Reading Humidity with ENVHat in MicroPython\nDESCRIPTION: Method to read the relative humidity value from the ENV sensor. Returns a floating point value in percent relative humidity (%RH).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/env.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nENVHat.read_humidity()\n```\n\n----------------------------------------\n\nTITLE: Getting Longitude\nDESCRIPTION: Method to retrieve the current longitude in degrees minutes format (ddmm.mmmmmE/W) from the GNSS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef get_longitude():\n    # get longitude.\n    # :return (str): longitude, using degrees minutes format (ddmm.mmmmmE/W).\n```\n\n----------------------------------------\n\nTITLE: Setting Zigbee Custom Address\nDESCRIPTION: Method to set a custom address for the Zigbee module, which is used for targeted communications in the network.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.set_custom_address(custom_address: int)\n```\n\n----------------------------------------\n\nTITLE: Receiving Data with RF433R Unit in MicroPython\nDESCRIPTION: This code snippet demonstrates how to receive data using the RF433R Unit. It sets up the RF433R Unit on port A and continuously checks for received data, printing it when available.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rf433r.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom m5stack import *\nfrom m5stack_ui import *\nfrom uiflow import *\nfrom unit import rf433r\n\nscreen = M5Screen()\nscreen.clean_screen()\nscreen.set_screen_bg_color(0xFFFFFF)\n\nrf433r_0 = rf433r.RF433RUnit(port='A')\n\nwhile True:\n    if rf433r_0.available():\n        print(rf433r_0.read())\n    wait_ms(2)\n```\n\n----------------------------------------\n\nTITLE: Setting Positioning Light Mode in QR Code Scanner\nDESCRIPTION: Configures the positioning light mode for the QR code scanner. Options include turning the light off, keeping it on during decoding, or making it flash during the decoding process.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_pos_light_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Stopping Non-Blocking Data Reception in Python\nDESCRIPTION: Method to stop the non-blocking data reception task.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dmx.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nDMX512.stop_receive()\n```\n\n----------------------------------------\n\nTITLE: Stopping Zigbee Data Reception\nDESCRIPTION: Method to stop the reception of data from the Zigbee network, canceling the previous receive_none_block operation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.stop_receive()\n```\n\n----------------------------------------\n\nTITLE: Waking Up All RFID Cards\nDESCRIPTION: Method to wake up all RFID cards that are within the reading range of the RFID unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rfid.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nRFIDUnit.wakeup_all()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading Ultrasonic Sensor with M5Stack in MicroPython\nDESCRIPTION: This code demonstrates how to set up and use an Ultrasonic Unit with M5Stack. It initializes the I2C communication on pins 1 and 2, creates an ultrasonic sensor object, and sets up the M5Stack display with a gray background.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/ultrasonic.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import *\n\ni2c0 = None\nultrasonic_0 = None\n\ndef setup():\n    global i2c0, ultrasonic_0\n\n    i2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\n    ultrasonic_0 = ULTRASONIC_I2C(i2c0)\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n```\n\n----------------------------------------\n\nTITLE: Reading RFID Card UID\nDESCRIPTION: Method to read the unique identifier (UID) of an RFID card if one is available in the reading field.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rfid.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRFIDUnit.read_card_uid()\n```\n\n----------------------------------------\n\nTITLE: ADC Voltage Reading Method\nDESCRIPTION: Gets the voltage value from the ADC. Converts raw ADC reading to voltage.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nADCUnit.get_voltage()\n```\n\n----------------------------------------\n\nTITLE: Reading Raw ADC Value\nDESCRIPTION: Method to obtain the raw unprocessed value from the ADC.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc_v11.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_adc_raw_value(self):\n```\n\n----------------------------------------\n\nTITLE: Sending MIDI Note On Messages\nDESCRIPTION: Method to send a MIDI Note On message to the specified channel with pitch and velocity parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_note_on(channel, pitch, velocity)\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Automatic Self-Calibration for CO2L Unit in MicroPython\nDESCRIPTION: Method to enable or disable automatic self-calibration (ASC) for the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.set_calibration_enabled(enabled)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to RFID Card Block\nDESCRIPTION: Method to write data to a specific block on the RFID card. Takes block_addr parameter for the destination block and buffer parameter containing the data to write.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rfid.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nRFIDUnit.write(block_addr, buffer)\n```\n\n----------------------------------------\n\nTITLE: Getting Pixel Temperature from ThermalUnit in MicroPython\nDESCRIPTION: Retrieves the temperature at a specific pixel coordinate from the thermal unit. Requires x and y coordinates as integers and returns a float value representing the temperature.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/thermal.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nthermal_unit.get_pixel_temperature(x: int, y: int) -> float\n```\n\n----------------------------------------\n\nTITLE: LoRaWAN Communication Example in MicroPython\nDESCRIPTION: This code snippet demonstrates how to receive and send data using the Atom DTU LoRaWAN Base. It includes the full example code for setting up LoRaWAN communication.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/dtu_lorawan.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/base/dtu_lorawan/atoms3r_dtu_lorawan_example.py\n    :language: python\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Starting Non-Blocking Data Reception in Python\nDESCRIPTION: Method to start non-blocking data reception for specified channels with associated callbacks.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dmx.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nDMX512.receive_none_block()\n```\n\n----------------------------------------\n\nTITLE: Setting ADC Gain Configuration\nDESCRIPTION: Method to configure the gain settings for the ADC. Takes a gain value parameter to set the amplification level.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc_v11.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef set_gain(self, gain):\n```\n\n----------------------------------------\n\nTITLE: Initializing RollerCANUnit Class in Python\nDESCRIPTION: Constructor for the RollerCANUnit class that initializes a RollerCAN motor controller object based on the specified communication mode. Takes parameters for bus instance, address, and mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass RollerCANUnit(bus, address, mode):\n\n    Initialize the RollerCANUnit object based on communication mode.\n\n    :param bus: The I2C/CAN bus instance.\n    :param address: The motor's CAN address. Defaults to _ROLLERCAN_CAN_ADDR.\n    :param mode: The RollerCAN communication mode.\n```\n\n----------------------------------------\n\nTITLE: DMX512 Channel Event Attachment\nDESCRIPTION: Method to attach a callback function to a specific DMX channel for event handling. Allows monitoring of channel value changes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dmx.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef attach_channel(self, channel, callback) -> None:\n    # channel: DMX channel number (1-512)\n    # callback: Function to be called when data changes\n```\n\n----------------------------------------\n\nTITLE: Initializing CardKBHat in MicroPython\nDESCRIPTION: Creates a CardKBHat object with specified I2C interface and address. The default address is 0x5F. This class inherits from CardKBUnit class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/cardkb.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CardKBHat(i2c: I2C, address: int | list | tuple = 0x5F)\n```\n\n----------------------------------------\n\nTITLE: Setting Motor Speed in GoPlus2Module\nDESCRIPTION: Method to set the speed of a specified motor (1 or 2), with negative values for reverse direction.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/goplus2.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nGoPlus2Module.set_motor_speed(motor_num, speed) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing UHF-RFID Unit in MicroPython\nDESCRIPTION: Constructor for creating a UHF-RFID unit object. It takes an ID, port, and optional verbose parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit(id: Literal[0, 1, 2], port: list | tuple, verbose: bool = False)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to M5BLE Connected Client (Python)\nDESCRIPTION: This method writes data to a connected BLE device. It requires the data to be written and the UUID of the characteristic.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/m5ble.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconnected_client_handle.write(data, uuid)\n```\n\n----------------------------------------\n\nTITLE: Sending Data with LoRaE220JPUnit in MicroPython\nDESCRIPTION: Method to send data to a specified target address and channel. It takes the target address, channel, and data as parameters. Available in working modes 0 and 1.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lora_e220.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nLoRaE220JPUnit.send(target_address: int, target_channel: int, send_data: bytes | str) -> bool\n```\n\n----------------------------------------\n\nTITLE: Initializing DualKmeter Module\nDESCRIPTION: This snippet shows how to create a DualKmeterModule object. The address parameter accepts values from 0x11 to 0x20.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dualkmeter.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDualKmeterModule(address=0x11)\n```\n\n----------------------------------------\n\nTITLE: Updating Temperature Buffer in ThermalUnit with MicroPython\nDESCRIPTION: Updates the temperature buffer with fresh readings from the thermal unit. Returns the temperature buffer as bytes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/thermal.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nthermal_unit.update_temperature_buffer() -> bytes\n```\n\n----------------------------------------\n\nTITLE: Getting Minimum Temperature from ThermalUnit in MicroPython\nDESCRIPTION: Retrieves the minimum temperature reading from the thermal unit. Returns a float value representing the temperature.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/thermal.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nthermal_unit.get_min_temperature\n```\n\n----------------------------------------\n\nTITLE: Getting Raw X-Axis Value from Joystick in MicroPython\nDESCRIPTION: Retrieves the raw x-axis value from the joystick. Returns an integer representing the x-axis position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joystick.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nJoystickHat.get_x_raw() -> int\n```\n\n----------------------------------------\n\nTITLE: System Information and Configuration Methods for HMIModule\nDESCRIPTION: Methods to get firmware version and manage I2C communication settings for the HMI module, including getting and setting the I2C address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/hmi.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. method:: HMIModule.get_firmware_version() -> int\n\n    Get the firmware version of the HMI module.\n\n\n.. method:: HMIModule.get_i2c_address() -> int\n\n    Get the current I2C address of the HMI module.\n\n\n.. method:: HMIModule.set_i2c_address(addr)\n\n    Set a new I2C address for the HMI module.\n\n    :param int addr: : The new I2C address to set.\n```\n\n----------------------------------------\n\nTITLE: Managing UHF-RFID Unit Sleep Mode in MicroPython\nDESCRIPTION: Methods to put the UHF-RFID unit into sleep mode, wake it up, and configure automatic sleep settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.sleep() -> bool\n```\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.wake() -> bool\n```\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.set_automatic_sleep_time(min: int) -> bool\n```\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.disable_automatic_sleep() -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Decode Delay for QRCode Module\nDESCRIPTION: Sets the delay between decode attempts in milliseconds. Setting this to 0 enables continuous decoding until a successful scan occurs.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_decode_delay(delay_ms)\n```\n\n----------------------------------------\n\nTITLE: Reading Data from UART\nDESCRIPTION: Reads data from the UART buffer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs232.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata = rs232_0.read()\n```\n\n----------------------------------------\n\nTITLE: Setting Tare Weight for HX711 Sensor\nDESCRIPTION: Method to set the current weight as the tare value (zero reference point), allowing for net weight measurements.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/weight.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWEIGHTUnit.set_tare()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Controlling Servo Hat in MicroPython\nDESCRIPTION: This snippet demonstrates how to import necessary modules, initialize the Servo Hat, and control its position using duty cycle and percentage methods.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/servo.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom hat import ServoHat\nservo = ServoHat((26, 0))\nservo.set_duty(100)\nservo.set_percent(50)\n```\n\n----------------------------------------\n\nTITLE: Comparing Fingerprint with All Users in FingerUnit Python\nDESCRIPTION: Method to compare the currently collected fingerprint with all registered users. Returns the matched user ID if found, or -1 if not found or unsuccessful.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.compare_finger(timeout: int=5000) -> int\n```\n\n----------------------------------------\n\nTITLE: QRCode Event Handler Implementation\nDESCRIPTION: Example of a callback function implementation for handling QR code scan events. The function receives scanned QR code data as a parameter and prints it.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/qrcode.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef qrcode_0_event(_qrdata):\n    print(_qrdata)\n    pass\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting RDM Parameter Values in C\nDESCRIPTION: Demonstrates how to get and set the value of an RDM parameter (DMX start address). Parameters with GET support have corresponding rdm_get_ functions, while those with SET support have rdm_set_ functions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_32\n\nLANGUAGE: c\nCODE:\n```\nuint16_t dmx_start_address;\nif (rdm_get_dmx_start_address(DMX_NUM_1, &dmx_start_address) == 0) {\n  printf(\"An error occurred getting the DMX start address.\\n\");\n}\n\ndmx_start_address = 123;\nif (!rdm_set_dmx_start_address(DMX_NUM_1, dmx_start_address)) {\n  printf(\"An error occurred setting the DMX start address.\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from WiFi Network in MicroPython\nDESCRIPTION: Disconnects from the currently connected wireless network.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/wlan.sta.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nWLAN.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone for GPS Module\nDESCRIPTION: Method to set the timezone value for the GPS module, which affects time calculations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.set_time_zone(value)\n```\n\n----------------------------------------\n\nTITLE: Unlocking Motors\nDESCRIPTION: Method to unlock the motors, allowing them to be controlled and moved.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.unlock()\n```\n\n----------------------------------------\n\nTITLE: Performing Factory Reset for CO2L Unit in MicroPython\nDESCRIPTION: Method to reset all configuration settings stored in the EEPROM and erase the FRC and ASC algorithm history.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.set_factory_reset()\n```\n\n----------------------------------------\n\nTITLE: Receiving Data with LoRaE220 Unit in MicroPython\nDESCRIPTION: This example shows how to set up the LoRaE220 unit to receive data in non-blocking mode. It defines a callback function that prints received data and initializes the unit with pins 15 and 13.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lora_e220.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nfrom unit import LoRaE220JPUnit\n\ndef lorae220_0_receive_event(received_data, rssi):\n    print(received_data)\n\nlorae220_0 = LoRaE220JPUnit((15, 13))\nlorae220_0.receiveNoneBlock(lorae220_0_receive_event)\n```\n\n----------------------------------------\n\nTITLE: Receiving DMX/RDM Packets and Sending Responses in C\nDESCRIPTION: Demonstrates how to receive DMX/RDM packets and send appropriate responses. This is the basic pattern required for implementing an RDM responder that follows the protocol specification.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_28\n\nLANGUAGE: c\nCODE:\n```\ndmx_packet_t packet;\nif (dmx_receive(DMX_NUM_1, &packet, DMX_TIMEOUT_TICK)) {\n  if (packet.is_rdm) {\n    rdm_send_response(DMX_NUM_1);  // Only sends responses to relevant requests\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LoRaWAN Data Communication Methods\nDESCRIPTION: Methods for handling data transmission and reception including sending data through specific ports and managing long data transmissions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lorawan_rui3.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef send_data(port, data, timeout):\n    \"\"\"Sends data through a specific port.\"\"\"\n    pass\n\ndef send_long_data(port, ack, data, timeout):\n    \"\"\"Sends long data through a specific port with optional acknowledgment.\"\"\"\n    pass\n\ndef get_last_receive():\n    \"\"\"Retrieves the data from the last received message.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Mapping Parameters for Y-axis in Joystick2Unit\nDESCRIPTION: Shows how to configure the joystick's Y-axis mapping parameters. This maps the raw ADC values to a specified range with support for deadzone configuration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/joystick2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSet the mapping parameters of the Y-axis.\n\nADC Raw     0                                                    65536\n            |------------------------------------------------------|\nMapped    -4096                   0           0                   4096\n            |---------------------|-dead zone-|--------------------|\n      adc_neg_min        adc_neg_max        adc_pos_min         adc_pos_max\n```\n\n----------------------------------------\n\nTITLE: Drawing Image from Buffer in MicroPython\nDESCRIPTION: Opens an image file, seeks to the beginning, and draws the image content on the display. This example demonstrates how to read an image from a file and display it using the drawImage method.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/display.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimg = open(img_path)\nimg.seek(0)\ndrawImage(img.read())\n```\n\n----------------------------------------\n\nTITLE: DMX512 Read Data Method\nDESCRIPTION: Method to read data from a specified DMX channel in Slave mode. Returns the current value for the specified channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dmx.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef read_data(self, channel) -> int:\n    # channel: DMX channel number (1-512)\n```\n\n----------------------------------------\n\nTITLE: Setting IIR Filter Coefficient Method\nDESCRIPTION: Method to set the IIR (Infinite Impulse Response) filter coefficient for the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/envpro.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nENVPROUnit.set_iir_filter_coefficient(value)\n```\n\n----------------------------------------\n\nTITLE: Initializing StepMotorDriverModule in MicroPython\nDESCRIPTION: Constructor for the StepMotorDriverModule class. It initializes the module with the specified I2C address and pin configurations for step and direction control.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule(address, step_pin, dir_pin)\n```\n\n----------------------------------------\n\nTITLE: Setting Hall Effect Callback Function\nDESCRIPTION: Configures a callback function to be executed when the Hall Effect sensor detects a change. The trigger parameter determines which events will trigger the callback, defaulting to both active and negative events.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/hall_effect.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nHallEffectUnit.set_callback(handler, trigger=HallEffectUnit.IRQ_ACTIVE | HallEffectUnit.IRQ_NEGATIVE)\n```\n\n----------------------------------------\n\nTITLE: Closing RFID Card Communication\nDESCRIPTION: Method to halt the PICC (Proximity Integrated Circuit Card) and stop the encrypted communication session with the RFID card.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rfid.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nRFIDUnit.close()\n```\n\n----------------------------------------\n\nTITLE: Setting Battery Charge Current in MicroPython\nDESCRIPTION: Sets the maximum current for battery charging. The range is 0-2000 milliamps.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nPower.setChargeCurrent(max_mA: int) -> None\n```\n\n----------------------------------------\n\nTITLE: ADC Unit Constructor\nDESCRIPTION: Creates an ADC Unit object with an I2C port parameter. This constructor initializes the ADC unit for reading analog values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nADCUnit(i2c0)\n```\n\n----------------------------------------\n\nTITLE: Setting Regular Keys for USB Keyboard\nDESCRIPTION: Example of how to set regular keys using the set_keys method. This method allows specifying up to 6 key values at a time using standard HID key codes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/device/keyboard.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nKeyboard.set_keys(k0=0, k1=0, k2=0, k3=0, k4=0, k5=0)\n```\n\n----------------------------------------\n\nTITLE: Task Scheduling with Time Ticks in MicroPython\nDESCRIPTION: This snippet demonstrates task scheduling based on time ticks. It checks the current time against a scheduled time and executes the task accordingly, with different behaviors for early, on-time, and late execution.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/software/time.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# This code snippet is not optimized\nnow = time.ticks_ms()\nscheduled_time = task.scheduled_time()\nif ticks_diff(scheduled_time, now) > 0:\n    print(\"Too early, let's nap\")\n    sleep_ms(ticks_diff(scheduled_time, now))\n    task.run()\nelif ticks_diff(scheduled_time, now) == 0:\n    print(\"Right at time!\")\n    task.run()\nelif ticks_diff(scheduled_time, now) < 0:\n    print(\"Oops, running late, tell task to run faster!\")\n    task.run(run_faster=true)\n```\n\n----------------------------------------\n\nTITLE: Getting Time Data\nDESCRIPTION: Method to retrieve the current time in hh:mm:ss format from the GNSS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef get_time():\n    # get time.\n    # :return (str): time(hh:mm:ss)\n```\n\n----------------------------------------\n\nTITLE: Reading Button Status from Joystick\nDESCRIPTION: Method to get the current button status from the joystick unit. Returns a boolean value indicating whether the button is pressed.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/joystick.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nJoystickUnit.get_button_status() -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Magnetometer Data\nDESCRIPTION: Method that returns the magnetometer measurements for X, Y, and Z axes in microteslas (uT) as a tuple of float values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_magnetometer():\n    # Get the tuple of x, y, and z values of the magnetometer and magnetometer vector in uT.\n    # :return (tuple): magnetometer tuple (float, float, float)\n```\n\n----------------------------------------\n\nTITLE: Getting Temperature Data from PM2.5 Module\nDESCRIPTION: Method to retrieve the environmental temperature data from the PM2.5 Module with SHT20 or SHT30 sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pm25.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nPM25Module.get_temperature()\n```\n\n----------------------------------------\n\nTITLE: Retrieving GPS Data using ATOMGPSBase class\nDESCRIPTION: API class definition for ATOMGPSBase that provides functionality to interact with the ATOM GPS module. The class contains methods for obtaining GPS data from the hardware.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_gps.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ATOMGPSBase:\n    \"\"\"API class for interacting with ATOM GPS Base module\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Getting NXP EAS Alarm Code (MicroPython)\nDESCRIPTION: This method retrieves the EAS (Electronic Article Surveillance) alarm code from an NXP UHFRFID tag. It returns the alarm code as a hexadecimal string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.nxp_eas_alarm() -> str\n```\n\n----------------------------------------\n\nTITLE: Updating UWB Unit Status in MicroPython\nDESCRIPTION: Method to refresh the distance measurements and update the anchor status in the UWB unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit.update()\n```\n\n----------------------------------------\n\nTITLE: Getting Firmware Version in Relay2Module\nDESCRIPTION: Method to retrieve the firmware version of the Relay2 Module. Returns an integer representing the firmware version.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/relay_2.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nRelay2Module.get_firmware_version()\n```\n\n----------------------------------------\n\nTITLE: Getting User List from FingerUnit in Python\nDESCRIPTION: Method to get a list of all registered users in the fingerprint module. Returns a list of user IDs.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.get_user_list() -> list\n```\n\n----------------------------------------\n\nTITLE: Setting IRQ Callback for LoRaSx1262Module\nDESCRIPTION: Code to set the interrupt callback function that will be executed when the LoRa module's IRQ is triggered. This is essential for handling received data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora_sx1262.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlora868v12_0.set_irq_callback()\n```\n\n----------------------------------------\n\nTITLE: Controlling Servo Position with Servo2Module in MicroPython\nDESCRIPTION: This example demonstrates how to import and use the Servo2Module to control servo position. It initializes the module, sets the position of servo at channel 0 to 90 degrees, and then releases the servo.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/servo2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom module import Servo2Module\nservo = Servo2Module()\nservo.position(0, degrees=90)\nservo.release()\n```\n\n----------------------------------------\n\nTITLE: Taring the MiniScaleUnit Sensor\nDESCRIPTION: Method to tare (zero) the scale, setting the current weight as the new zero point.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.tare()\n```\n\n----------------------------------------\n\nTITLE: Getting QR Code Type from image.QRCode Instance\nDESCRIPTION: Method of the image.QRCode class that returns the type of the QR code as a string. This is used after finding a QR code with the find_qrcodes function.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/code_scanner.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntype_name() -> str\n```\n\n----------------------------------------\n\nTITLE: Saving Settings to EEPROM for CO2L Unit in MicroPython\nDESCRIPTION: Method to save temperature offset, altitude offset, and self-calibration enable settings to EEPROM.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.save_to_eeprom()\n```\n\n----------------------------------------\n\nTITLE: Get Button Status Method - MicroPython\nDESCRIPTION: Returns the current status of the rotary encoder button as a boolean value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/scroll.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nScrollUnit.get_button_status() -> bool\n```\n\n----------------------------------------\n\nTITLE: Initializing AIN4_20MAUnit Class in Python\nDESCRIPTION: Constructor for the AIN4_20MAUnit class that initializes the I2C port and address for communication with the AIN 4-20mA Unit. Takes an I2C object and the device's I2C address as parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ain4.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAIN4_20MAUnit(i2c, address)\n```\n\n----------------------------------------\n\nTITLE: Getting Gas Resistance Method\nDESCRIPTION: Method to retrieve the current gas resistance measurement from the sensor, which relates to VOC detection.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/envpro.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nENVPROUnit.get_gas_resistance()\n```\n\n----------------------------------------\n\nTITLE: Setting Speed PID Target in Bala2.0 Module (Python)\nDESCRIPTION: Sets the target value for the speed loop PID controller in the Bala2.0 module. The speed parameter determines the target speed for the motor control system.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/bala2.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmodule_bala2_0.set_speed_pid_target(speed)\n```\n\n----------------------------------------\n\nTITLE: LoraModule Power Management Methods\nDESCRIPTION: Methods for managing the LoRa module's power state, including standby mode, sleep mode, and IRQ status checking. These help optimize power consumption in battery-powered applications.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nLoraModule.standby()\nLoraModule.sleep()\nLoraModule.irq_triggered()\n```\n\n----------------------------------------\n\nTITLE: Creating an Audio Player Instance in MicroPython\nDESCRIPTION: Creates a new audio Player object with an optional state_callback that will be invoked when the player state changes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.player.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naudio.Player([state_callback])\n```\n\n----------------------------------------\n\nTITLE: Waiting for Motors to Become Idle\nDESCRIPTION: Method that blocks execution until the motors reach an idle state, useful for synchronizing operations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.wait_idle()\n```\n\n----------------------------------------\n\nTITLE: Getting Rotary Value in MicroPython\nDESCRIPTION: Method to get the rotation value of the Rotary object. Returns an integer value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_encoder.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMiniEncoderCHat.get_rotary_value() -> int\n```\n\n----------------------------------------\n\nTITLE: Creating DLight HAT Object in MicroPython\nDESCRIPTION: Constructor for creating a DLightHat object. It requires an I2C object and accepts an optional address parameter which defaults to 0x23.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/dlight.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDLightHat(i2c, address: int = 0x23)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Custom Driver\nDESCRIPTION: Demonstrates how to import and utilize the custom test driver in a MicroPython application. Shows the basic usage pattern for custom drivers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/fs/user/libs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom test import test\n\nt = test()\nt.test()\n```\n\n----------------------------------------\n\nTITLE: Getting NXP Config Word (MicroPython)\nDESCRIPTION: This method retrieves the configuration word from an NXP UHFRFID tag. It takes an optional access password and returns the config word as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.get_nxp_config_word(password: str = \"00000000\") -> int\n```\n\n----------------------------------------\n\nTITLE: Initializing Bala2 Module in MicroPython\nDESCRIPTION: Creates a Bala2Module object with specified timer ID for balance control program.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/bala2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom module import Bala2Module\n\nmodule_bala2_0 = Bala2Module(timer_id = 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Servo Angle in MicroPython\nDESCRIPTION: Sets the angle of a servo connected to a specified channel on the Motion Base.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/motion.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmotion.set_servo_angle()\n```\n\n----------------------------------------\n\nTITLE: Enabling Battery Charging in MicroPython\nDESCRIPTION: Enables or disables battery charging functionality.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nPower.setBatteryCharge(enable: bool) -> None\n```\n\n----------------------------------------\n\nTITLE: Displaying Text on RCA Unit Screen using MicroPython\nDESCRIPTION: This MicroPython example demonstrates how to display the text 'RCA' on the screen of the RCA Unit. It utilizes the RCAUnit class, which inherits from the Display class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rca.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom m5stack import *\nfrom m5stack_ui import *\nfrom uiflow import *\nfrom unit import rca\n\nscreen = M5Screen()\nscreen.clean_screen()\nscreen.set_screen_bg_color(0x111111)\n\nrca_0 = rca.RCAUnit()\n\nrca_0.text(\"RCA\", 160, 120, rca_0.FONTS.DejaVu40, rca_0.COLOR_WHITE, rca_0.COLOR_BLACK)\n```\n\n----------------------------------------\n\nTITLE: Monitoring GPS Data in Background\nDESCRIPTION: Internal method that continuously monitors the GPS data and decodes incoming NMEA sentences.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module._monitor()\n```\n\n----------------------------------------\n\nTITLE: Flushing RS485 Buffer\nDESCRIPTION: Wait until all data has been sent from the buffer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs485.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrs485_0.flush()\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone from GPS Module\nDESCRIPTION: Method to retrieve the current timezone setting from the GPS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.get_time_zone()\n```\n\n----------------------------------------\n\nTITLE: Starting Low Power Periodic Measurement for CO2L Unit in MicroPython\nDESCRIPTION: Method to set the sensor into low power working mode, with about 30 seconds per measurement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.set_start_low_periodic_measurement()\n```\n\n----------------------------------------\n\nTITLE: Setting the Update Period for Image Refresh\nDESCRIPTION: Method to configure how frequently the ImagePlus widget should fetch and update the remote image, specified in milliseconds.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/image+.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nImagePlus.set_update_period(period: int)\n```\n\n----------------------------------------\n\nTITLE: Getting Longitude in Decimal Format\nDESCRIPTION: Method to retrieve the current longitude in decimal degrees format (dd.dddd) from the GNSS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef get_longitude_decimal():\n    # get longitude decimal.\n    # :return (float): longitude decimal(dd.dddd).\n```\n\n----------------------------------------\n\nTITLE: Checking Transmission Status\nDESCRIPTION: Checks whether all data has been sent or no data transfer is happening.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs232.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nstatus = rs232_0.txdone()\n```\n\n----------------------------------------\n\nTITLE: Setting Single LED Color on Specific Board in PuzzleUnit\nDESCRIPTION: Sets the color of a single LED on a specific board. This method provides precise control over individual LEDs across multiple PuzzleUnit boards.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/puzzle.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPuzzleUnit.set_color(board_num, index, rgb)\n```\n\n----------------------------------------\n\nTITLE: Setting All Relay States in Relay2Module\nDESCRIPTION: Method to set the state of both relays simultaneously. Takes a boolean state (True to turn on both relays, False to turn off both relays).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/relay_2.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nRelay2Module.set_all_relay_state(state)\n```\n\n----------------------------------------\n\nTITLE: Configuring ADC Sample Rate\nDESCRIPTION: Method to set the ADC sampling rate. Supports rates of 8, 16, 32, and 128 samples per second with corresponding resolution levels.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc_v11.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef set_sample_rate(self, rate):\n```\n\n----------------------------------------\n\nTITLE: Reading Data into Buffer from UART in MicroPython\nDESCRIPTION: This code shows how to read data from UART into a specified buffer using the readinto() method.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbuf = bytearray(10)\nuart1.readinto(buf)\n```\n\n----------------------------------------\n\nTITLE: Getting Voltage Measurement from ATOMSocketBase\nDESCRIPTION: Method to retrieve the voltage measurement from the ATOM Socket. It returns a float value representing the voltage.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase.get_voltage() -> float\n```\n\n----------------------------------------\n\nTITLE: Getting Latitude\nDESCRIPTION: Method to retrieve the current latitude in degrees minutes format (ddmm.mmmmmN/S) from the GNSS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef get_latitude():\n    # get latitude.\n    # :return (str): latitude, using degrees minutes format (ddmm.mmmmmN/S).\n```\n\n----------------------------------------\n\nTITLE: Initializing Servo Hat in MicroPython\nDESCRIPTION: This snippet shows the constructor for the ServoHat class, which initializes the Servo Hat with a specified port.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/servo.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nServoHat(port: tuple)\n```\n\n----------------------------------------\n\nTITLE: Getting Battery Current in MicroPython\nDESCRIPTION: Returns the current being drawn from or supplied to the battery in milliamps.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nPower.getBatteryCurrent() -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Color Range for NECO Unit LEDs in MicroPython\nDESCRIPTION: Method to set the color for a range of LEDs from a begin index to an end index with a specified color and delay.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/neco.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nNECOUnit.set_color_from(begin, end, rgb, per_delay)\n```\n\n----------------------------------------\n\nTITLE: Setting Voltage for a Channel - Python\nDESCRIPTION: Sets the output voltage for a specific channel or both channels. Voltage can range from 0.0 to the maximum (5V or 10V). Channel options are Dac2.CHANNEL_0, Dac2.CHANNEL_1, or Dac2.CHANNEL_BOTH.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dac2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDAC2Unit.setVoltage(voltage, channel=Dac2.CHANNEL_BOTH)\n```\n\n----------------------------------------\n\nTITLE: Initializing NBIOTModule Class in Python\nDESCRIPTION: Constructor for creating an NBIOTModule object using UART communication. It requires specifying a UART ID (0, 1, or 2) and the TX/RX pins for communication with the NB-IoT module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/nbiot.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nNBIOTModule(id: Literal[0, 1, 2], tx: int, rx: int)\n```\n\n----------------------------------------\n\nTITLE: Status Reading Methods\nDESCRIPTION: Methods for reading various status information from the device including button states, switch status, and device information.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder8.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_button_status(self, channel=1):\n    # Get button status\n\ndef get_switch_status(self):\n    # Get switch status\n\ndef get_device_status(self, mode=0xFE):\n    # Get device information\n```\n\n----------------------------------------\n\nTITLE: Creating a Label Widget in MicroPython\nDESCRIPTION: Constructor for creating a Label object to display text on screen. Parameters include text content, position, size, colors, font, and parent container.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/label.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWidgets.Label(text: str, x: int, y: int, text_sz: float, text_c: int=0xFFFFFF, bg_c: int=0x000000, font=None, parent=None)\n```\n\n----------------------------------------\n\nTITLE: Initializing DMX Communication in Python\nDESCRIPTION: Method to initialize DMX512 communication with UART pins and mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dmx.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDMX512Module.dmx_init(mode)\n```\n\n----------------------------------------\n\nTITLE: Reading Discrete Inputs from Modbus Server in MicroPython\nDESCRIPTION: Reads discrete inputs from the Modbus server. Specifies slave address, start register, quantity of inputs to read, and timeout. Returns a list of boolean values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.client.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPClient.read_discrete_inputs(address, register, quantity, timeout: int=2000) -> list\n```\n\n----------------------------------------\n\nTITLE: Getting Pressure from BPS Unit\nDESCRIPTION: Method to retrieve the atmospheric pressure value in pascals from the BMP280 or QMP6988 sensor. The valid range is between 300 hPa and 1100 hPa.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/bps.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nBPSUnit.get_pressure()\n```\n\n----------------------------------------\n\nTITLE: Setting Same Code Interval for QRCode Module\nDESCRIPTION: Configures the minimum interval in milliseconds before the scanner will recognize the same QR code again, preventing rapid duplicate scans of the same code.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_same_code_interval(interval_ms)\n```\n\n----------------------------------------\n\nTITLE: Controlling Vibration Motor in MicroPython\nDESCRIPTION: Controls the intensity of the vibration motor. The level parameter ranges from 0 (off) to 255 (maximum intensity).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nPower.setVibration(level: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Driver Class in Python for UIFlow MicroPython\nDESCRIPTION: This snippet demonstrates how to create a simple custom driver class named 'test' with an initialization method and a test method. The driver is designed to be placed in the /flash/libs folder for use in UIFlow MicroPython projects.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/fs/user/libs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass test():\n\n    def __init__(self):\n        print(\"test class\")\n\n    def test(self):\n        print(\"test function\")\n```\n\n----------------------------------------\n\nTITLE: Initializing DCSSRUnit in MicroPython\nDESCRIPTION: Creates a DCSSRUnit object by specifying an I2C bus or Modbus and an optional slave address. The default address is 0x50 for I2C mode and 0x04 for Modbus mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dcssr.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDCSSRUnit(bus, address=0x50)\n```\n\n----------------------------------------\n\nTITLE: Setting Load State on 4In8Out Module\nDESCRIPTION: Method to set the state of a specific load on the 4In8Out module. It takes a load number (1-8) and a state value as parameters, allowing control of each individual output.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/4in8out.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nModule4In8Out.set_load_state(load_num, state) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing GoPlus2Module in MicroPython\nDESCRIPTION: Constructor for initializing the GoPlus2Module with an optional I2C address parameter (defaults to 0x38).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/goplus2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nGoPlus2Module(address)\n```\n\n----------------------------------------\n\nTITLE: Setting Battery Charge Voltage in MicroPython\nDESCRIPTION: Sets the maximum voltage for battery charging. The range is 4100-4600 millivolts.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nPower.setChargeVoltage(max_mV: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Polling with Timeout in MicroPython\nDESCRIPTION: Demonstrates how to implement a polling mechanism with a timeout using ticks_diff(). The code waits for a GPIO pin to be asserted with a 500us timeout limit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/time.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Wait for GPIO pin to be asserted, but at most 500us\nstart = time.ticks_us()\nwhile pin.value() == 0:\n    if time.ticks_diff(time.ticks_us(), start) > 500:\n        raise TimeoutError\n```\n\n----------------------------------------\n\nTITLE: Getting Time Zone from GPS V2.0 Module\nDESCRIPTION: Method to get the current time zone offset configured on the GPS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_time_zone()\n```\n\n----------------------------------------\n\nTITLE: Resetting UWB Unit in MicroPython\nDESCRIPTION: Method to reset the UWB unit to its default state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit.reset()\n```\n\n----------------------------------------\n\nTITLE: Getting Speed from GPS Module\nDESCRIPTION: Method to retrieve the current speed from the GPS module. Takes a parameter to specify the unit (0 for km/h, 1 for knot/h) and returns the speed as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.get_speed(type)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Timeout with ticks_diff()\nDESCRIPTION: Example showing how to implement a polling loop with a timeout using ticks_diff() to measure elapsed time, raising a TimeoutError if a GPIO pin is not asserted within 500μs.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/software/time.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Wait for GPIO pin to be asserted, but at most 500us\nstart = time.ticks_us()\nwhile pin.value() == 0:\n    if time.ticks_diff(time.ticks_us(), start) > 500:\n        raise TimeoutError\n```\n\n----------------------------------------\n\nTITLE: Retrieving Altitude from GPS V2.0 Module\nDESCRIPTION: Method to get the current altitude from the GPS module as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_altitude()\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time from GPS Module\nDESCRIPTION: Method to retrieve the current time from the GPS module. Returns time in the format 'hh:mm:ss' as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.get_time()\n```\n\n----------------------------------------\n\nTITLE: Getting Speed Data\nDESCRIPTION: Method to retrieve the current speed in either km/h or knots from the GNSS module, with a parameter to select the unit type.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef get_speed(type):\n    # get speed.\n    # :return (str): speed.\n    # :param int type: speed type, 0 km/h, 1 knot/h\n    #     Options:\n    #     - ``km/h``: 0\n    #     - ``knot/h``: 1\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Pin Values in MicroPython\nDESCRIPTION: Method to set or get the value of a GPIO pin. When called with a value parameter, it sets the pin state; when called without parameters, it returns the current pin state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/pin.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPin.value([value])\n```\n\n----------------------------------------\n\nTITLE: Getting Relay State in MicroPython\nDESCRIPTION: Method to retrieve the current state of a specific relay in the unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay4.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nRelay4Unit.get_relay_state(n: int) -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Rotary Increments in MicroPython\nDESCRIPTION: Retrieves the rotation increment of the Rotary object as an integer. This method helps determine the direction of rotation and cannot be used simultaneously with get_rotary_value().\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/rotary.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nRotary.get_rotary_increments() -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Turn Speed for Bala2.0 Module (Python)\nDESCRIPTION: Sets the turning speed for the Bala2.0 robot by controlling the offset between left and right motors. The speed parameter determines the differential speed between motors for turning.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/bala2.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmodule_bala2_0.set_turn_speed(speed)\n```\n\n----------------------------------------\n\nTITLE: Setting PPS Output Current\nDESCRIPTION: Sets the output current of the PPS between 0.0A and 5.0A.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.set_output_current(current: float)\n```\n\n----------------------------------------\n\nTITLE: Calculating Power Factor in ATOMSocketBase\nDESCRIPTION: Method to calculate the power factor of the ATOM Socket. It returns a float value representing the power factor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase.get_power_factor() -> float\n```\n\n----------------------------------------\n\nTITLE: Saving Data to Flash on TimerPWR Unit\nDESCRIPTION: Method to save the current configuration data to the flash memory of the TimerPWR Unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.save_data_to_flash()\n```\n\n----------------------------------------\n\nTITLE: Setting Wake-up Trigger for TimerPWR Unit\nDESCRIPTION: Method to configure what can trigger the unit to wake up. Options include ALL, TIMER, BUTTON, or NONE, referenced through constants like timerpwrunit_0.TRIG_ALL.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.set_wakeup_trigger(trigger)\n```\n\n----------------------------------------\n\nTITLE: Initializing ToF Unit in MicroPython\nDESCRIPTION: Constructor to create a ToF Unit object. Requires an I2C object and accepts optional parameters for I2C address and I/O timeout in milliseconds.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nToFUnit(i2c: I2C, address: int = 0x29, io_timeout_ms: int = 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Relay State in MicroPython\nDESCRIPTION: Method to set the state of a specific relay in the unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay4.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nRelay4Unit.set_relay_state(n: int, state: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Getting Servo Angle in MicroPython\nDESCRIPTION: Retrieves the current angle of a servo connected to a specified channel on the Motion Base.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/motion.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmotion.get_servo_angle()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading KmeterISO Unit Temperature in MicroPython\nDESCRIPTION: This example demonstrates how to initialize a KmeterISO Unit on I2C bus 0 with address 0x66, then continuously read and print thermocouple and internal temperatures when data is ready. The code checks for measurement readiness before reading temperature values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/kmeter_iso.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import KMeterISOUnit\nimport time\n\nM5.begin()\ni2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\nkmeter_iso_0 = KMeterISOUnit(i2c0, 0x66)\nwhile True:\n    if kmeteriso_0.is_ready():\n        print(kmeteriso_0.get_thermocouple_temperature(0))\n        print(kmeteriso_0.get_internal_temperature(0))\n    time.sleep_ms(250)\n```\n\n----------------------------------------\n\nTITLE: Getting Temperature Buffer from ThermalUnit in MicroPython\nDESCRIPTION: Retrieves the complete temperature buffer from the thermal unit. Returns a list containing all temperature readings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/thermal.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nthermal_unit.get_temperature_buffer() -> list\n```\n\n----------------------------------------\n\nTITLE: Setting Refresh Rate for ThermalUnit in MicroPython\nDESCRIPTION: Sets the refresh rate for the thermal unit. Requires a rate parameter in Hz as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/thermal.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nthermal_unit.set_refresh_rate(rate: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Getting User Characteristics from FingerUnit in Python\nDESCRIPTION: Method to get the fingerprint characteristics of a specific user. Returns bytes containing the characteristics if successful, None otherwise.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.get_user_characteristics(id: int) -> Union[bytes, None]\n```\n\n----------------------------------------\n\nTITLE: Creating an Earth Object in MicroPython\nDESCRIPTION: Constructor for initializing an Earth object to interface with the M5Stack EARTH Unit soil moisture sensor. It requires specifying the port number to which the EARTH Unit is connected.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/earth.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEarth(port)\n```\n\n----------------------------------------\n\nTITLE: Setting Average Filter Level on MiniScaleUnit\nDESCRIPTION: Method to set the level of the average filter on the MiniScaleUnit sensor. The level ranges from 0 to 50, with higher values providing smoother results but increased latency.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.set_average_filter_level(level)\n```\n\n----------------------------------------\n\nTITLE: Creating MiniScaleUnit Object\nDESCRIPTION: Constructor for the MiniScaleUnit class. It takes an I2C object as a parameter to initialize the sensor communication.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit(i2c0)\n```\n\n----------------------------------------\n\nTITLE: Getting Button Status from Joystick in MicroPython\nDESCRIPTION: Retrieves the current status of the joystick button. Returns a boolean value indicating whether the button is pressed or not.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joystick.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nJoystickHat.get_button_status() -> bool\n```\n\n----------------------------------------\n\nTITLE: Checking Charging Status of TimerPWR Unit\nDESCRIPTION: Method to check if the battery is currently charging. Returns True if charging, False otherwise.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.is_charging()\n```\n\n----------------------------------------\n\nTITLE: Playing WAV Data from Memory Buffer in MicroPython\nDESCRIPTION: Method for playing WAV format audio data from a memory buffer. It allows configuring the number of repetitions, selecting a specific audio channel, and controlling whether to wait for previous audio playback to finish before starting the new output.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/speaker.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSpeaker.playWav(wav_data: buffer[, repeat: int[, channel: int[, stop_current_sound: bool]]]) -> None\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Measurement Output in MicroPython\nDESCRIPTION: Method to enable or disable the measurement output of the UWB unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit.set_measurement(enable)\n```\n\n----------------------------------------\n\nTITLE: Setting LED State in MicroPython\nDESCRIPTION: Method to set the state of a specific LED indicator on the relay unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay4.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nRelay4Unit.set_led_state(n: int, state: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing Relay Object in MicroPython\nDESCRIPTION: Creates a Relay object with a specified ID. The ID range is 1-4.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/plcio.relay.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hadrware import Relay\n\nrelay = Relay(1)\n```\n\n----------------------------------------\n\nTITLE: ExtEncoder Unit Constructor Definition\nDESCRIPTION: Creates an ExtEncoder Unit object with specified I2C connection and address. The default address is 0x59. Can accept address as integer, list, or tuple.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/extencoder.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nExtEncoderUnit(i2c, address: int | list | tuple = 0x59)\n```\n\n----------------------------------------\n\nTITLE: Configuring One-Time Sleep for TimerPWR Unit\nDESCRIPTION: Method to configure a one-time sleep cycle. Sets the time before sleep and the duration of sleep using hours, minutes, and seconds parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.sleep_once(whours, wmintues, wseconds, shours, smintues, sseconds)\n```\n\n----------------------------------------\n\nTITLE: Getting Red Light Value\nDESCRIPTION: Method to retrieve the red light reading from the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit.get_red()\n```\n\n----------------------------------------\n\nTITLE: Setting Modifier Keys for USB Keyboard\nDESCRIPTION: Example of how to set modifier keys (e.g., Ctrl, Alt, Shift) using the set_modifiers method. This method allows specifying the state of various modifier keys.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/device/keyboard.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nKeyboard.set_modifiers(right_gui=False, right_alt=False, right_shift=False, right_ctrl=False, \\\n                   left_gui=False, left_alt=False, left_shift=False, left_ctrl=False)\n```\n\n----------------------------------------\n\nTITLE: Setting Presence Detection Threshold in TMOSUnit\nDESCRIPTION: Method to set the presence threshold for the presence detection algorithm. Accepts a threshold value between 0x0 and 0x7FFF and returns whether the setting was successful.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_presence_threshold(val) -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Speed PID Target from Bala2.0 Module (Python)\nDESCRIPTION: Retrieves the current target value of the speed loop PID controller from the Bala2.0 module. Returns the speed target as a float value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/bala2.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmodule_bala2_0.get_speed_pid_target()\n```\n\n----------------------------------------\n\nTITLE: Getting Weight Measurement in Grams\nDESCRIPTION: Method to get the weight measurement in grams from the MiniScaleUnit sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.weight\n```\n\n----------------------------------------\n\nTITLE: Configuring ADSR Envelope\nDESCRIPTION: Method to set the Attack, Decay, and Release parameters of an ADSR envelope for a specific MIDI channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_envelope(channel, attack, decay, release)\n```\n\n----------------------------------------\n\nTITLE: Setting Random Colors on Random LEDs in PuzzleUnit\nDESCRIPTION: Sets a random color to each LED within the specified range. This method creates a colorful, randomized pattern on the PuzzleUnit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/puzzle.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nPuzzleUnit.set_random_color_random_led_from(board_num, begin, end)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using BPS Unit in MicroPython\nDESCRIPTION: Example showing how to initialize the BPS Unit over I2C and continuously read temperature, pressure, and altitude measurements. The code demonstrates the basic usage pattern of the BPSUnit class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/bps.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nfrom unit import BPSUnit\nimport time\n\ni2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\nbps_0 = BPSUnit(i2c0)\n\nwhile True:\n    print((str('Temperature: ') + str((bps_0.get_temperature()))))\n    print((str('Pressure: ') + str((bps_0.get_pressure()))))\n    print((str('Altitude: ') + str((bps_0.get_altitude()))))\n    time.sleep(0.5)\n```\n\n----------------------------------------\n\nTITLE: Initializing FingerUnit Class in Python\nDESCRIPTION: Constructor for creating a FingerUnit object. It takes an optional ID parameter for UART selection and an optional port parameter for specifying UART pin numbers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit(id: Literal[0, 1, 2] = 1, port: list | tuple = None)\n```\n\n----------------------------------------\n\nTITLE: AIN4Module Constructor Definition in MicroPython\nDESCRIPTION: Constructor for the AIN4Module class that initializes the module with an I2C address. The address parameter can be an integer, list, or tuple specifying the I2C address of the AIN4 module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/ain4.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAIN4Module(address)\n```\n\n----------------------------------------\n\nTITLE: Setting Zigbee Channel\nDESCRIPTION: Method to set the communication channel for the Zigbee module, with allowed values ranging from 11 to 26.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.set_channel(channel: int)\n```\n\n----------------------------------------\n\nTITLE: Initializing MiniEncoderCHat in MicroPython\nDESCRIPTION: Constructor for creating a MiniEncoderCHat object. It requires an I2C object and optionally an I2C address (default is 0x42).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_encoder.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMiniEncoderCHat(i2c, address: int | list | tuple = 0x42)\n```\n\n----------------------------------------\n\nTITLE: Turning On Relay in MicroPython\nDESCRIPTION: Activates the relay using the on() method.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/plcio.relay.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrelay.on()\n```\n\n----------------------------------------\n\nTITLE: Buzzer Unit Class Constructor\nDESCRIPTION: Creates a new BuzzerUnit object with a specified port number. The port parameter determines which pin will be used to control the buzzer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/buzzer.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nBuzzerUnit(port)\n```\n\n----------------------------------------\n\nTITLE: Setting Mapping Parameters for X-axis in Joystick2Unit\nDESCRIPTION: Shows how to configure the joystick's X-axis mapping parameters. This maps the raw ADC values to a specified range with support for deadzone configuration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/joystick2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSet the mapping parameters of the X-axis.\n\nADC Raw     0                                                    65536\n            |------------------------------------------------------|\nMapped    -4096                   0           0                   4096\n            |---------------------|-dead zone-|--------------------|\n      adc_neg_min        adc_neg_max        adc_pos_min         adc_pos_max\n```\n\n----------------------------------------\n\nTITLE: Send Data Example with RF433T Unit\nDESCRIPTION: Example program demonstrating how to send data using the RF433T Unit in communication with RF433R Unit. Shows basic implementation of RF433T transmission functionality.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rf433t.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unit import Unit\nfrom m5stack import *\n\nrf433t_0 = Unit.get(Unit.RF433T, unit.PORTA)\n\nwhile True:\n    rf433t_0.send(\"Hello World\")\n    wait_ms(2000)\n```\n\n----------------------------------------\n\nTITLE: Getting Voltage from FaderUnit in MicroPython\nDESCRIPTION: Method to read the voltage value from the Fader unit. Returns a float representing the current voltage reading.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/fader.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nFaderUnit.get_voltage() -> float\n```\n\n----------------------------------------\n\nTITLE: Initializing Motion Base with MicroPython\nDESCRIPTION: Creates a Motion object by initializing the I2C interface and connecting to the Motion Base at the specified address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/motion.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom base import Motion\nfrom machine import I2C\n\ni2c0 = I2C(0, scl=Pin(39), sda=Pin(38), freq=100000)\nmotion = Motion(i2c0, 0x38)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Date and Time from GPS V2.0 Module\nDESCRIPTION: Method to get the combined GPS date and time. Returns a list of strings in [year, month, day, hour, minute, second] format.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_gps_date_time()\n```\n\n----------------------------------------\n\nTITLE: Reading Line from RS485\nDESCRIPTION: Read a line ending in newline character from UART interface.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs485.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nline = rs485_0.readline()\n```\n\n----------------------------------------\n\nTITLE: Setting LED Color on MiniScaleUnit\nDESCRIPTION: Method to set the RGB LED color on the MiniScaleUnit sensor. Takes red, green, and blue values as parameters, each ranging from 0 to 255.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.set_led(r, g, b)\n```\n\n----------------------------------------\n\nTITLE: Calibrating MiniScaleUnit Sensor\nDESCRIPTION: Method to calibrate the MiniScaleUnit sensor using two known weights and their corresponding ADC values. This involves resetting the sensor, getting the zero point ADC value, then measuring a known weight to establish the scale.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.calibration(weight1_g, weight1_adc, weight2_g, weight2_adc)\n```\n\n----------------------------------------\n\nTITLE: Setting Duty Cycle for CatchUnit in MicroPython\nDESCRIPTION: Method to set the duty cycle of the servo. The duty cycle can range from 20 to 54, which controls the position of the servo motor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/catch.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCatchUnit.set_duty(duty: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Rotation in Widgets Module\nDESCRIPTION: Sets the rotation angle of the display. Accepts only specific values: 0 (Portrait), 1 (Landscape), 2 (Inverse Portrait), or 3 (Inverse Landscape).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWidgets.setRotation(rotation: int)\n```\n\n----------------------------------------\n\nTITLE: LoraModule.recv Method\nDESCRIPTION: Receives a data packet from the LoRa module. Can be configured with timeout, expected packet length, and packet reuse options. Returns an RxPacket instance or None on timeout.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLoraModule.recv(timeout_ms, rx_length, rx_packet)\n```\n\n----------------------------------------\n\nTITLE: Getting Battery Current from TimerPWR Unit\nDESCRIPTION: Method to retrieve the battery current. Returns the current in milliamperes as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.get_battery_current()\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple Registers with ModbusRTUMaster in MicroPython\nDESCRIPTION: Method for writing values to multiple holding registers on a Modbus slave device, returning the count of written registers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.master.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUMaster.write_multiple_registers(address: int, register: int, values: list, timeout: int=2000) -> int\n```\n\n----------------------------------------\n\nTITLE: Checking Recording Status in MicroPython\nDESCRIPTION: Checks if the recorder is currently recording audio, returning a boolean value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.recorder.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nRecorder.is_recording() -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting OLED Backlight Status on TimerPWR Unit\nDESCRIPTION: Method to enable or disable the OLED backlight. Takes a boolean parameter where True enables and False disables the backlight.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.set_oled_backlight_status(enable)\n```\n\n----------------------------------------\n\nTITLE: Setting Microstep in StepMotorDriverModule\nDESCRIPTION: Method to set the microstep value for the motor. It takes a step parameter which can be one of the predefined constants.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule.set_microstep(step)\n```\n\n----------------------------------------\n\nTITLE: Creating ENVHat Object in MicroPython\nDESCRIPTION: Constructor for initializing an ENVHat object with the specified I2C interface and sensor type. The type parameter specifies which ENV sensor version is being used (1 for ENV, 2 for ENV II, 3 for ENV III).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/env.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nENVHat(i2c: Union[I2C, PAHUBHat], type: Literal[1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Resuming Audio Playback with Player.resume() in MicroPython\nDESCRIPTION: Resumes audio playback after it has been paused.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.player.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPlayer.resume()\n```\n\n----------------------------------------\n\nTITLE: Creating PIR Object Constructor in Python\nDESCRIPTION: Creates a PIR (Passive Infrared) sensor object with specified I2C pins. This constructor initializes the PIR sensor for motion detection functionality.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/pir.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPIR(IO1,IO2)\n```\n\n----------------------------------------\n\nTITLE: Setting I2C Address in Relay2Module\nDESCRIPTION: Method to set a new I2C address for the Relay2 Module. The address parameter must be within the range 0x08 to 0x77.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/relay_2.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nRelay2Module.set_i2c_address(addr)\n```\n\n----------------------------------------\n\nTITLE: Pressing Uppercase 'A' on USB Keyboard\nDESCRIPTION: Example showing how to press and release the uppercase 'A' key by combining modifier (Shift) and regular key presses.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/device/keyboard.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nKeyboard.set_modifiers(right_shift=True)\nKeyboard.set_keys(k0=KeyCode.A)\nKeyboard.send_report()\nKeyboard.set_modifiers(right_shift=False)\nKeyboard.set_keys(k0=0)\nKeyboard.send_report()\n```\n\n----------------------------------------\n\nTITLE: Resetting TMOSUnit\nDESCRIPTION: Method to reset TMOSUnit, including restarting OTP memory content and resetting algorithms.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.reset() -> None\n```\n\n----------------------------------------\n\nTITLE: Getting Digital Input in GoPlus2Module\nDESCRIPTION: Method to read the digital input value from a specified pin (numbered 1-3), returning an integer (0 or 1).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/goplus2.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nGoPlus2Module.get_digital_input(pin_num) -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Positioning Light Mode in QR Code Reader\nDESCRIPTION: This method configures the positioning light mode. It accepts an integer parameter 'mode' with options for light off, light on during decoding, and light flash during decoding.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.set_pos_light_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using OP90 Unit in MicroPython\nDESCRIPTION: This snippet demonstrates how to initialize and use the OP90 Unit in MicroPython. It sets up I2C communication, creates an OPUnit object, and performs basic operations like getting values and resetting the count.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/op90.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\nimport time\nfrom unit import *\n\ni2c0 = None\nop90_0 = None\n\ndef setup():\n    global i2c0, op90_0\n\n    i2c0 = I2C(0, scl=Pin(1), sda=Pin(2), freq=100000)\n    op90_0 = OPUnit((8, 9), type=1)\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n\n    print(op90_0.get_value)\n    time.sleep(1)\n    print(op90_0.count_value)\n    time.sleep(1)\n    op90_0.count_reset()\n    time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Setting Motor Operation Mode\nDESCRIPTION: Method to set the operating mode of the motor to either absolute or relative positioning using predefined constants.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.set_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Initializing BPSUnit with I2C\nDESCRIPTION: Constructor for the BPSUnit class that takes an I2C object as a parameter. This is used to establish communication with the BMP280 or QMP6988 sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/bps.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBPSUnit(i2c)\n```\n\n----------------------------------------\n\nTITLE: Initializing JoyC Hat in MicroPython\nDESCRIPTION: Creates a new instance of the JoyCHat class with an I2C bus and optional address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joyc.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nJoyCHat(i2c, address: int | list | tuple = 0x38)\n```\n\n----------------------------------------\n\nTITLE: Setting Zigbee PAN ID\nDESCRIPTION: Method to set the Personal Area Network ID for the Zigbee module, which is a 16-bit value that identifies the network.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.set_pan_id(pan_id: int)\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Light Brightness in QR Code Reader\nDESCRIPTION: This method sets the brightness of the fill light. It takes an integer parameter 'brightness' with a range of 0 to 100.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.set_fill_light_brightness(brightness)\n```\n\n----------------------------------------\n\nTITLE: Enabling Hall Effect Interrupt\nDESCRIPTION: Enables the interrupt functionality of the Hall Effect sensor to detect changes in the magnetic field.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/hall_effect.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nHallEffectUnit.enable_irq()\n```\n\n----------------------------------------\n\nTITLE: Setting ADC Attenuation in MicroPython\nDESCRIPTION: Equivalent to initializing the ADC with a specific attenuation setting. Allows for measuring different voltage ranges.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/adc.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nADC.atten(atten)\n```\n\n----------------------------------------\n\nTITLE: Setting Color Saturation for NECO Unit LEDs in MicroPython\nDESCRIPTION: Method to set the color saturation for a range of LEDs with a specified color and saturation level.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/neco.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nNECOUnit.set_color_saturation_from(begin, end, rgb, per_delay)\n```\n\n----------------------------------------\n\nTITLE: Initializing ADC Hat in MicroPython\nDESCRIPTION: Creates an instance of the ADC Hat by specifying an I2C bus and optional I2C address. The default address is 0x48. This constructor sets up communication with the ADC Hat hardware.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/adc.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nADCHat(i2c, address: int = 0x48)\n```\n\n----------------------------------------\n\nTITLE: Getting Antenna State from GPS V2.0 Module\nDESCRIPTION: Method to check the current state of the GPS antenna.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_antenna_state()\n```\n\n----------------------------------------\n\nTITLE: Trigger and Echo Method\nDESCRIPTION: Method to send a trigger pulse and wait for the echo response from the ultrasonic sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ultrasonic_io.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef tx_pulse_rx_echo(self):\n```\n\n----------------------------------------\n\nTITLE: Setting Sensor Altitude for CO2L Unit in MicroPython\nDESCRIPTION: Method to set the altitude value of the measurement location in meters above sea level. Must be between 0 and 65535 meters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.set_sensor_altitude(height)\n```\n\n----------------------------------------\n\nTITLE: Calculating Altitude from BPS Unit\nDESCRIPTION: Method to estimate altitude in meters based on atmospheric pressure differences. It uses the standard sea-level pressure of 1013.25 hPa as a reference.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/bps.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nBPSUnit.get_altitude()\n```\n\n----------------------------------------\n\nTITLE: Setting Tuning Parameters\nDESCRIPTION: Method to configure fine and coarse tuning values for a specific MIDI channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_tuning(channel, fine, coarse)\n```\n\n----------------------------------------\n\nTITLE: Closing Connection to M5BLE Connected Client (Python)\nDESCRIPTION: This method disconnects the link with a connected BLE client.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/m5ble.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconnected_client_handle.close()\n```\n\n----------------------------------------\n\nTITLE: Initializing PM2.5 Module in MicroPython\nDESCRIPTION: Constructor for initializing the PM2.5 Module using UART communication.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pm25.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPM25Module()\n```\n\n----------------------------------------\n\nTITLE: Calculating Previous Ticks Value with ticks_add()\nDESCRIPTION: Example of using ticks_add() to find what the ticks value was 100ms ago, demonstrating how to perform negative time offsets with the ticks system.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/software/time.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Find out what ticks value there was 100ms ago\nprint(ticks_add(time.ticks_ms(), -100))\n```\n\n----------------------------------------\n\nTITLE: ModbusTCPServer Register Management Methods\nDESCRIPTION: Methods for adding and removing coils, discrete inputs, holding registers, and input registers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.server.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPServer.add_coil(register: int, value: bool)\nModbusTCPServer.add_discrete_input(register: int, value: bool)\nModbusTCPServer.add_holding_register(register: int, value: int)\nModbusTCPServer.add_input_register(register: int, value: int)\nModbusTCPServer.remove_coil(register: int)\nModbusTCPServer.remove_discrete_input(register: int)\nModbusTCPServer.remove_holding_register(register: int)\nModbusTCPServer.remove_input_register(register: int)\n```\n\n----------------------------------------\n\nTITLE: Reading PPS Input Voltage\nDESCRIPTION: Returns the input voltage to the PPS module as a float value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.read_input_voltage() -> float\n```\n\n----------------------------------------\n\nTITLE: Checking Button Hold State in ButtonUnit\nDESCRIPTION: Method to check if the button is currently being held down, returning a boolean value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/button.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nButtonUnit.isHolding()\n```\n\n----------------------------------------\n\nTITLE: Initializing PPSModule in MicroPython\nDESCRIPTION: Creates a PPS object to interact with the programmable power supply with an optional I2C address parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPPSModule(addr=0x35)\n```\n\n----------------------------------------\n\nTITLE: Resetting Rotary Encoder Value in MicroPython\nDESCRIPTION: Method to reset the rotation value of the Encoder Unit to its default state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nEncoderUnit.reset_rotary_value() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting PPS Output State\nDESCRIPTION: Enables or disables the PPS output based on a boolean parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.set_output(enable: bool)\n```\n\n----------------------------------------\n\nTITLE: Setting Relay Status in MicroPython\nDESCRIPTION: Method to set the relay status directly by passing True or False.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nRealyUnit.set_status()\n```\n\n----------------------------------------\n\nTITLE: Getting Range from ToF Unit in Millimeters\nDESCRIPTION: Method to get distance measured by the ToF Unit in millimeters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nToFUnit.get_range() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Rotary Encoder Increments in MicroPython\nDESCRIPTION: Method to retrieve the rotation increment of the Encoder Unit, which can be used to determine the direction of rotation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nEncoderUnit.get_rotary_increments() -> int\n```\n\n----------------------------------------\n\nTITLE: Switch State Methods\nDESCRIPTION: Methods for reading the state of individual switches and all switches as a byte value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/byteswitch.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_byte_switch_state(self) -> int:\n\ndef get_switch_state(self, num) -> bool:\n```\n\n----------------------------------------\n\nTITLE: Configuring UHF-RFID Unit TX Power in MicroPython\nDESCRIPTION: Method to set the transmission power of the UHF-RFID unit. Power range is from -7dBm to 30dBm.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.set_tx_power(power: int) -> bool\n```\n\n----------------------------------------\n\nTITLE: Reading Data from UDP Socket in MicroPython\nDESCRIPTION: This code demonstrates how to read data from a UDP socket using the read() method in MicroPython. It reads available data and prints it.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.server.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = udps.read()\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Getting Rotary Encoder Value in MicroPython\nDESCRIPTION: Method to retrieve the current rotation value of the Encoder Unit as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nEncoderUnit.get_rotary_value() -> int\n```\n\n----------------------------------------\n\nTITLE: Capturing Fingerprint Characteristics in FingerUnit Python\nDESCRIPTION: Method to capture the characteristics of a fingerprint. Returns bytes containing the characteristics if successful, None otherwise.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.capture_characteristic(timeout: int=5000) -> bytes\n```\n\n----------------------------------------\n\nTITLE: Getting Grove Current from TimerPWR Unit\nDESCRIPTION: Method to retrieve the Grove current. Returns the current in milliamperes as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.get_grove_current()\n```\n\n----------------------------------------\n\nTITLE: Initializing KeyUnit in MicroPython\nDESCRIPTION: Constructor for initializing a KeyUnit instance with specified port pins for key input and LED control.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/key.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nKeyUnit(port: tuple)\n```\n\n----------------------------------------\n\nTITLE: Getting Zigbee Custom Address\nDESCRIPTION: Method to retrieve the current custom address assigned to the Zigbee module. Returns an integer value representing the address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.get_custom_address() -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Output Data Rate for TMOS Sensor\nDESCRIPTION: Method to set the output data rate (ODR) of the TMOS sensor. Options range from power-down mode (off) to 30Hz, with various rates in between.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_tmos_odr(val) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Control Bytes for DDS Unit in MicroPython\nDESCRIPTION: Method to set the control bytes of the DDS. It allows selection of frequency and phase registers, and control of MCLK, DAC, and reset.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit.set_ctrl(f_index_sel: int = 0, p_index_sel: int = 0, disable_mclk=False, disable_dac=False, reset=False) -> None\n```\n\n----------------------------------------\n\nTITLE: Light Unit Class Constructor\nDESCRIPTION: Creates a Light sensor object by initializing digital and analog output pins. The constructor takes IO1 and IO2 parameters to define the pin configuration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/light.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nLight(IO1, IO2)\n```\n\n----------------------------------------\n\nTITLE: Getting Raw ADC Value from AIN4-20mA Unit\nDESCRIPTION: Method that retrieves the raw ADC value from the AIN 4-20mA Unit as a 12-bit integer. This represents the unprocessed analog-to-digital converter reading.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ain4.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAIN4_20MAUnit.get_adc_raw_value() -> int\n```\n\n----------------------------------------\n\nTITLE: Button State Polling\nDESCRIPTION: Polling method to be placed in the loop function for continuous monitoring of button states\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dualbutton.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDual_Button.tick()\n```\n\n----------------------------------------\n\nTITLE: Setting Entire Screen Color in PuzzleUnit\nDESCRIPTION: Sets the entire screen or area to a specific RGB color. This method applies the given color to all LEDs in the PuzzleUnit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/puzzle.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPuzzleUnit.fill_color(color)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mic Parameters in MicroPython\nDESCRIPTION: Demonstrates how to get or set Mic parameters using the config method. This can be used to configure properties like pin assignments, sample rate, and filtering options.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/mic.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMic.config(\"pin_data_in\")  # Read a property\nMic.config(pin_data_in=1)  # Set a property\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Time from GPS V2.0 Module\nDESCRIPTION: Method to get the current GPS time. Returns a list of strings in [hour, minute, second] format.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_gps_time()\n```\n\n----------------------------------------\n\nTITLE: Setting Device Mode and ID in MicroPython\nDESCRIPTION: Method to configure the UWB unit's mode (Anchor or Tag) and device ID.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit.set_device_mode(mode, id)\n```\n\n----------------------------------------\n\nTITLE: Decoding RMC Sentence from GPS V2.0 Module\nDESCRIPTION: Internal method to decode the RMC NMEA sentence to extract GPS time, latitude, longitude, speed, course, and date.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module._decode_rmc(data)\n```\n\n----------------------------------------\n\nTITLE: Reading Current in MicroPython\nDESCRIPTION: Reads the current (in amperes) from the Motion Base v1.1 using the INA226 component.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/motion.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmotion.read_current()\n```\n\n----------------------------------------\n\nTITLE: Reading Atmospheric Pressure with ENVHat in MicroPython\nDESCRIPTION: Method to read the atmospheric pressure value from the ENV sensor. Returns a floating point value in Pascals (Pa).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/env.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nENVHat.read_pressure()\n```\n\n----------------------------------------\n\nTITLE: Checking GPS Location Validity\nDESCRIPTION: Method to check if the current GPS location is valid. Returns a boolean value where true indicates a valid location has been found and false indicates no valid location.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.is_locate_valid()\n```\n\n----------------------------------------\n\nTITLE: Getting Ambient Temperature\nDESCRIPTION: Method to retrieve the ambient temperature reading from the NCIR sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ncir.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nncir.get_ambient_temperature()\n```\n\n----------------------------------------\n\nTITLE: Setting UHF-RFID Unit Working Region in MicroPython\nDESCRIPTION: Method to set the working region for the UHF-RFID unit. Supports various region options like China, USA, Europe, and Korea.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.set_working_region(region: int) -> bool\n```\n\n----------------------------------------\n\nTITLE: Starting Periodic Measurement for CO2L Unit in MicroPython\nDESCRIPTION: Method to set the sensor into working mode, which takes about 5 seconds per measurement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.set_start_periodic_measurement()\n```\n\n----------------------------------------\n\nTITLE: Setting All LED Colors in MicroPython\nDESCRIPTION: Method to set the color of all LEDs on the Encoder Unit. Takes an RGB color value (0x000000 - 0xFFFFFF).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nEncoderUnit.fill_color(rgb: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting MIDI Channel Volume\nDESCRIPTION: Method to control the volume level for a specific MIDI channel with a value from 0 to 100.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_channel_volume(channel, level)\n```\n\n----------------------------------------\n\nTITLE: Getting Signal Rate Limit in ToF Unit\nDESCRIPTION: Method to get the current signal rate limit of the ToF Unit. This affects the minimum signal rate required for a valid measurement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nToFUnit.get_signal_rate_limit() -> float\n```\n\n----------------------------------------\n\nTITLE: Getting Processed X-Axis Value from Joystick in MicroPython\nDESCRIPTION: Retrieves the processed x-axis value from the joystick. Returns an integer representing the x-axis position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joystick.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nJoystickHat.get_x() -> int\n```\n\n----------------------------------------\n\nTITLE: Configuring Low Pass Filter on MiniScaleUnit\nDESCRIPTION: Method to enable or disable the low pass filter on the MiniScaleUnit sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.set_low_pass_filter(enable)\n```\n\n----------------------------------------\n\nTITLE: Setting HeartUnit LED Current\nDESCRIPTION: Method to set the LED current of the HeartUnit. Supports various current levels from 0mA to a maximum of 50mA.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit.set_led_current(led_current)\n```\n\n----------------------------------------\n\nTITLE: Getting Measurement Timing Budget in ToF Unit\nDESCRIPTION: Method to get the current measurement timing budget in microseconds. This setting affects the measurement accuracy and power consumption.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nToFUnit.get_measurement_timing_budget() -> int\n```\n\n----------------------------------------\n\nTITLE: Checking Continuous Mode Status in ToF Unit\nDESCRIPTION: Method to check if the ToF Unit is operating in continuous measurement mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nToFUnit.is_continuous_mode() -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Light Brightness in QR Code Scanner\nDESCRIPTION: Controls the brightness level of the fill light on the QR code scanner module. The brightness parameter accepts values from 0 to 100, where 0 is off and 100 is maximum brightness.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_fill_light_brightness(brightness)\n```\n\n----------------------------------------\n\nTITLE: Controlling MIDI Pitch Bend\nDESCRIPTION: Method to send a MIDI Pitch Bend message to the specified channel with a value from 0 to 16383.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_pitch_bend(channel, value)\n```\n\n----------------------------------------\n\nTITLE: Setting Zigbee Antenna Type\nDESCRIPTION: Method to set the antenna type used by the Zigbee module, affecting transmission characteristics and range.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.set_ant_type(ant_type: int)\n```\n\n----------------------------------------\n\nTITLE: Adding User to FingerUnit in Python\nDESCRIPTION: Method to add a new user to the fingerprint module. It requires a user ID and permission level. Returns the user ID if successful, or -1 if unsuccessful.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.add_user(id: int, permission: Literal[1, 2, 3]) -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Count Value from OP180 in MicroPython\nDESCRIPTION: This method retrieves the count value from the OP180 unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/op180.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nOP180.count_value()\n```\n\n----------------------------------------\n\nTITLE: Getting Power Measurement from ATOMSocketBase\nDESCRIPTION: Method to retrieve the power measurement from the ATOM Socket. It returns a float value representing the power.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase.get_power() -> float\n```\n\n----------------------------------------\n\nTITLE: Resetting MIDI System\nDESCRIPTION: Method to send a MIDI System Exclusive Reset command to initialize all parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.midi_reset()\n```\n\n----------------------------------------\n\nTITLE: Initializing HeartHat Sensor Class in MicroPython\nDESCRIPTION: Constructor for initializing a HeartHat sensor instance. Takes I2C port and address as parameters to establish communication with the MAX30102 sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/heart.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nHeartHat(i2c, address)\n```\n\n----------------------------------------\n\nTITLE: Setting Servo Pulse Width in GoPlus2Module\nDESCRIPTION: Method to set the pulse width for a specified servo (numbered 1-4) in microseconds.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/goplus2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nGoPlus2Module.set_servo_pulse_width(servo_num, pulse_width) -> None\n```\n\n----------------------------------------\n\nTITLE: HeartHat Configuration Methods in MicroPython\nDESCRIPTION: Methods for configuring sensor parameters including mode, LED current, pulse width, and sampling rate. Each method accepts specific enumerated values for configuration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/heart.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nHeartHat.set_mode(mode)\n```\n\nLANGUAGE: python\nCODE:\n```\nHeartHat.set_led_current(led_current)\n```\n\nLANGUAGE: python\nCODE:\n```\nHeartHat.set_pulse_width(pulse_width)\n```\n\nLANGUAGE: python\nCODE:\n```\nHeartHat.set_sampling_rate(sampling_rate)\n```\n\n----------------------------------------\n\nTITLE: Getting Course Direction from GPS Module\nDESCRIPTION: Method to retrieve the current course direction from the GPS module. Returns the course in degrees as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.get_course()\n```\n\n----------------------------------------\n\nTITLE: Setting Color Range with Delay in PuzzleUnit\nDESCRIPTION: Sets color on a range of LEDs starting from a specified board and range, with a delay between each LED. This method allows for animated color changes across multiple LEDs.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/puzzle.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPuzzleUnit.set_color_from(board_num, begin, end, rgb, per_delay)\n```\n\n----------------------------------------\n\nTITLE: Setting Individual LED Color in PuzzleUnit\nDESCRIPTION: Sets the color of a specific pixel or LED. This method allows individual control of LEDs in the PuzzleUnit array.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/puzzle.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPuzzleUnit.set_color(index, color)\n```\n\n----------------------------------------\n\nTITLE: CAN Baudrate Configuration Methods in RollerBase\nDESCRIPTION: Methods for configuring the CAN bus baudrate. These functions allow setting and retrieving the communication speed for the CAN interface.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef set_can_baudrate(bps) -> None:\n\n    Set the can baudrate.\n\n    :param int bps: Baud rate value.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_can_baudrate() -> int:\n\n    Get the can baudrate.\n\n    :return: The current can baudrate.\n```\n\n----------------------------------------\n\nTITLE: Reading PPS MCU Temperature\nDESCRIPTION: Returns the microcontroller temperature of the PPS module as a float value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.read_mcu_temperature() -> float\n```\n\n----------------------------------------\n\nTITLE: Activating/Deactivating WLAN Interface in MicroPython\nDESCRIPTION: Activates or deactivates the network interface. If called without arguments, it queries the current state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/wlan.sta.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWLAN.active([is_active])\n```\n\n----------------------------------------\n\nTITLE: Getting Distance to Anchor in MicroPython\nDESCRIPTION: Method to retrieve the distance between the tag and a specified anchor ID (0-3). Returns the distance in meters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit.get_distance(index)\n```\n\n----------------------------------------\n\nTITLE: Setting Clamp Percentage for CatchUnit in MicroPython\nDESCRIPTION: Method to set the clamping percentage of the gripper. The percentage can range from 0 to 100, providing a more intuitive control of the gripper position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/catch.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCatchUnit.set_clamp_percent(percent: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Flashing Light with FlashLightUnit in MicroPython\nDESCRIPTION: Method to flash the light with specified brightness and duration. It allows setting the brightness level, flash duration, and whether to turn off the light after flashing.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/flash_light.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nFlashLightUnit.flash(brightness: int, time: int, turn_off=False) -> None\n```\n\n----------------------------------------\n\nTITLE: Getting Raw X-Axis Value from MiniJoyHat\nDESCRIPTION: Returns the raw x-axis value from the joystick as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_joy.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMiniJoyHat.get_x_raw() -> int\n```\n\n----------------------------------------\n\nTITLE: SCD40 Class Constructor\nDESCRIPTION: Initializes the SCD40 sensor interface with I2C communication. Sets up the basic configuration for sensor operation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/scd40.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SCD40():\n    \"\"\"Initialize the SCD40 with the I2C interface and address.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Values Between Ranges\nDESCRIPTION: Utility method to map a value from one numeric range to another, commonly used for converting input values to MIDI parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.map(x, in_min, in_max, out_min, out_max)\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Y-Axis Value in MicroPython\nDESCRIPTION: Retrieves the raw y-axis value from the specified channel (0 or 1) of the JoyC Hat.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joyc.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nJoyCHat.get_y_raw(channel: int = 0) -> int\n```\n\n----------------------------------------\n\nTITLE: Setting HeartUnit Sampling Rate\nDESCRIPTION: Method to set the sampling rate of the HeartUnit. Supports rates from 50Hz to 1000Hz.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit.set_sampling_rate(sampling_rate)\n```\n\n----------------------------------------\n\nTITLE: Initializing ACMeasure Unit Class in MicroPython\nDESCRIPTION: Constructor for initializing an AC Measure unit with I2C communication. Takes an I2C interface object and address parameter, with default address set to 0x42.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ac_measure.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ACMeasureUnit:\n    def __init__(self, i2c, address=0x42):\n```\n\n----------------------------------------\n\nTITLE: Checking Data Ready Status in ToF Unit\nDESCRIPTION: Method to check if the ToF Unit has data ready to be read.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nToFUnit.get_data_ready() -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone for GPS V2.0 Module\nDESCRIPTION: Method to set the time zone offset for the GPS time calculations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.set_time_zone(value)\n```\n\n----------------------------------------\n\nTITLE: Button Mode Configuration Methods in RollerBase\nDESCRIPTION: Methods for configuring button behavior for mode changes. These functions allow enabling or disabling mode changes via physical buttons on the device.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef set_button_change_mode(state) -> None:\n    \n    Set the button change mode.\n\n    :param int state: Change mode state value (1 to enable, 0 to disable).\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_button_change_mode() -> int:\n    \n    Get the button change mode.\n\n    :return: The current button change mode value.\n```\n\n----------------------------------------\n\nTITLE: Managing GPS Time Zone in MicroPython\nDESCRIPTION: Methods to set and get the time zone offset for the GPS time.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/gps_v11.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nGPSV11Unit.set_time_zone(value)\nGPSV11Unit.get_time_zone()\n```\n\n----------------------------------------\n\nTITLE: Getting Raw X-Axis Value from Joystick\nDESCRIPTION: Method to retrieve the raw x-axis value from the joystick unit. Returns an integer representing the position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/joystick.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nJoystickUnit.get_x_raw() -> int\n```\n\n----------------------------------------\n\nTITLE: Reading Firmware Version in MicroPython\nDESCRIPTION: Method to get the firmware version of the device. Returns a string value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_encoder.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nMiniEncoderCHat.read_fw_version() -> str\n```\n\n----------------------------------------\n\nTITLE: Starting QR Code Decoding\nDESCRIPTION: Initiates the QR code decoding process. In Continuous Mode, this starts decoding until stopped by a subsequent call to stop_decode().\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.start_decode()\n```\n\n----------------------------------------\n\nTITLE: Displaying Text on OLED Unit with MicroPython\nDESCRIPTION: This example demonstrates how to use MicroPython to display the text 'OLED' on the OLED Unit screen. The code is referenced from the cores3_oled_example.py file.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/oled.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# ../../../examples/unit/oled/cores3_oled_example.py\n```\n\n----------------------------------------\n\nTITLE: Getting Voltage from WateringUnit in MicroPython\nDESCRIPTION: Method to get the voltage of the soil moisture sensor. Returns a float value representing the voltage.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/watering.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWateringUnit.get_voltage() -> float\n```\n\n----------------------------------------\n\nTITLE: Getting Button Status in MicroPython\nDESCRIPTION: Retrieves the button status from the specified channel (0 or 1) of the JoyC Hat. Returns True if pressed, False otherwise.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joyc.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nJoyCHat.get_button_status(channel: int = 0) -> bool\n```\n\n----------------------------------------\n\nTITLE: Initializing SynthUnit in MicroPython\nDESCRIPTION: Constructor for initializing a MIDI unit with specified UART ID and port pins for communication with a synth device.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit(id, port)\n```\n\n----------------------------------------\n\nTITLE: Reading Raw ADC Value from WateringUnit in MicroPython\nDESCRIPTION: Method to read the raw value from the ADC of the soil moisture sensor. Returns an integer representing the raw ADC value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/watering.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWateringUnit.get_raw() -> int\n```\n\n----------------------------------------\n\nTITLE: Checking Motor Idle State\nDESCRIPTION: Method to check if the motors are in an idle state. Returns a boolean value indicating the idle state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.get_idle_state()\n```\n\n----------------------------------------\n\nTITLE: Getting Altitude Method\nDESCRIPTION: Method to calculate and retrieve the altitude based on pressure readings. Note that this calculation uses the difference between barometric pressure and sea level pressure.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/envpro.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nENVPROUnit.get_altitude()\n```\n\n----------------------------------------\n\nTITLE: Getting Time Zone\nDESCRIPTION: Method to retrieve the currently set timezone value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef get_time_zone():\n    # get timezone function.\n    # :return (int): timezone value\n```\n\n----------------------------------------\n\nTITLE: Creating a BLEUARTClient Instance in MicroPython\nDESCRIPTION: Constructor for creating a BLE UART client with customizable name, receive buffer size, and verbose output settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.client.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbleuart.BLEUARTClient(name=\"\", rxbuf=100, verbose=False)\n```\n\n----------------------------------------\n\nTITLE: ADC Data Rate Setter\nDESCRIPTION: Sets the data acquisition rate for the ADC.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nADCUnit.data_rate()\n```\n\n----------------------------------------\n\nTITLE: Initializing DigiClock Unit Class in Python\nDESCRIPTION: Constructor for DigiClock Unit that initializes the display with I2C communication. Takes I2C port and address (defaulting to 0x30) as parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/digi_clock.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDigiClockUnit(i2c: I2C, address: int | list | tuple = 0x30)\n```\n\n----------------------------------------\n\nTITLE: Selecting Frequency Register for DDS Unit in MicroPython\nDESCRIPTION: Method to select the frequency register of the DDS. It takes an index (0 or 1) as an argument.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit.select_freq_reg(index: int = 0) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle Widget in MicroPython\nDESCRIPTION: Constructor for creating a Circle object with parameters for position, radius, and colors.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/circle.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWidgets.Circle(x: int, y: int, r: int, fg_color: int=0xffffff, bg_color: int=0xffffff)\n```\n\n----------------------------------------\n\nTITLE: Checking HX711 Sensor Readiness\nDESCRIPTION: Method to check if the HX711 sensor is ready to provide data, useful for ensuring reliable readings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/weight.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nWEIGHTUnit.is_ready_wait()\n```\n\n----------------------------------------\n\nTITLE: Reading Temperature with ENVHat in MicroPython\nDESCRIPTION: Method to read the temperature value from the ENV sensor. Returns a floating point value in degrees Celsius (°C).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/env.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nENVHat.read_temperature()\n```\n\n----------------------------------------\n\nTITLE: Roller485 RS485 Communication Example\nDESCRIPTION: Example showing RS485 communication with a Roller485 motor controller.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/roller485.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n[Code reference to ../../../examples/unit/roller485/roller485_485_fire_example.py]\n```\n\n----------------------------------------\n\nTITLE: Creating DAC2Hat Class Instance in MicroPython\nDESCRIPTION: Constructor for creating a DAC2 Hat object with an I2C interface. It accepts the I2C object and an optional I2C address parameter (default is 0x59).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/dac2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDAC2Hat(i2c, address: int | list | tuple = 0x59)\n```\n\n----------------------------------------\n\nTITLE: Reading RS485 Data into Buffer\nDESCRIPTION: Read bytes into a specified buffer with optional maximum bytes parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs485.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = bytearray(10)\nnum_bytes = rs485_0.readinto(data)\nnum_bytes = rs485_0.readinto(data, 5)\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone\nDESCRIPTION: Method to set the timezone value for adjusting GNSS time data to local time.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef set_time_zone(value):\n    # set timezone function.\n    # :param int value: timezone value\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Cycle Sleep for TimerPWR Unit\nDESCRIPTION: Method to enable or disable the cycle sleep functionality. Takes a boolean parameter where True enables and False disables cycle sleep.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.set_cycle_sleep(enable)\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Y-Axis Value from Joystick in MicroPython\nDESCRIPTION: Retrieves the raw y-axis value from the joystick. Returns an integer representing the y-axis position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joystick.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nJoystickHat.get_y_raw() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Gyroscope Data\nDESCRIPTION: Method that returns the gyroscope measurements for X, Y, and Z axes in radians per second as a tuple of float values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_gyroscope():\n    # Get the tuple of x, y, and z values of the gyroscope and gyroscope vector in rad/sec.\n    # :return (tuple): gyroscope tuple (float, float, float)\n```\n\n----------------------------------------\n\nTITLE: Getting Block Data Update Status\nDESCRIPTION: Method to get the current status of the block data update feature for temperature register data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.get_block_data_update() -> bool\n```\n\n----------------------------------------\n\nTITLE: Initializing WEIGHTUnit Class in MicroPython\nDESCRIPTION: Constructor for the WEIGHTUnit class that initializes the HX711 weight sensor with specified port pins. Takes a tuple containing data and clock pin numbers as parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/weight.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWEIGHTUnit(port)\n```\n\n----------------------------------------\n\nTITLE: Analog Value Reading Method\nDESCRIPTION: Method to read the analog value from the light sensor. Returns a value between 0-65535.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/light.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLight.get_analog_value()\n```\n\n----------------------------------------\n\nTITLE: Initializing DMX512Unit Class in MicroPython\nDESCRIPTION: Constructor for DMX512Unit class that initializes DMX512 communication with specified UART ID and port pins. Supports master/slave mode configuration with electrical isolation protection.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dmx.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DMX512Unit:\n    def __init__(self, id, port, mode = DMX_MASTER):\n        # id: UART device ID (DMX port id)\n        # port: UART TX and RX pins\n        # mode: Operating mode (1 for Master, 2 for Slave)\n```\n\n----------------------------------------\n\nTITLE: Transmitting IR Signal in MicroPython\nDESCRIPTION: This method demonstrates how to transmit an IR signal to a specific address using the tx() method of the IR object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/ir.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nir.tx()\n```\n\n----------------------------------------\n\nTITLE: Reading Scaled ADC Value in MicroPython\nDESCRIPTION: Takes an analog reading and returns an integer in the range 0-65535, scaling the raw ADC value to the full 16-bit range.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/adc.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nADC.read_u16()\n```\n\n----------------------------------------\n\nTITLE: Getting Switch Value from 4In8Out Module\nDESCRIPTION: Method to get the current value of a specific switch on the 4In8Out module. It takes a switch number (1-4) as parameter and returns a boolean value representing the switch state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/4in8out.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nModule4In8Out.get_switch_value(switch_num) -> bool\n```\n\n----------------------------------------\n\nTITLE: Reading a Line from LaserRXUnit UART in Python\nDESCRIPTION: This method reads a single line of data from the UART interface of the LaserRXUnit. It's useful for reading formatted or delimited data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/laser_rx.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLaserRXUnit.readline()\n```\n\n----------------------------------------\n\nTITLE: Setting Color for a Specific RGB LED\nDESCRIPTION: Method to set the color of a specific RGB LED by index using a 3-byte RGB888 color value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rgb.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nRGB.set_color(i, c: int)\n```\n\n----------------------------------------\n\nTITLE: Setting Low-Pass Filter for Ambient Temperature Shock Detection\nDESCRIPTION: Method to set the low-pass filter configuration for ambient temperature shock detection. Accepts configuration values for filter bandwidth from ODR/9 to ODR/800.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_lpf_a_t_bandwidth(val) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating a MiniJoyHat Instance in Python\nDESCRIPTION: Initializes a new MiniJoyHat object with the specified I2C bus and address. The default I2C address is 0x38.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_joy.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMiniJoyHat(i2c, address: int | list | tuple = 0x38)\n```\n\n----------------------------------------\n\nTITLE: Setting Low-Pass Filter for Presence Detection\nDESCRIPTION: Method to set the low-pass filter configuration for presence detection. Accepts configuration values for filter bandwidth from ODR/9 to ODR/800.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_lpf_p_bandwidth(val) -> None\n```\n\n----------------------------------------\n\nTITLE: Adding Checksum to GPS Message\nDESCRIPTION: Internal method to add checksum to messages for communication with the GPS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module._add_checksum(message)\n```\n\n----------------------------------------\n\nTITLE: ModbusTCPServer Control Methods\nDESCRIPTION: Core methods for starting and stopping the Modbus TCP server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.server.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPServer.start()\nModbusTCPServer.stop()\n```\n\n----------------------------------------\n\nTITLE: Calibrating the EARTH Unit in MicroPython\nDESCRIPTION: Method to calibrate the EARTH soil moisture sensor by setting the maximum and minimum voltage values (0-3300 mV). This improves the accuracy of humidity readings based on the specific soil conditions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/earth.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nEARTH.set_calibrate()\n```\n\n----------------------------------------\n\nTITLE: Deinitializing DMX512 Module in Python\nDESCRIPTION: Method to deinitialize the DMX512 module and stop ongoing operations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dmx.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDMX512Module.deinit()\n```\n\n----------------------------------------\n\nTITLE: Reset Rotary Value Method - MicroPython\nDESCRIPTION: Resets the rotation value of the ScrollUnit to its default state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/scroll.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nScrollUnit.reset_rotary_value() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Continuous Decode Delay for QRCode Module\nDESCRIPTION: Configures the delay between continuous decoding attempts in Motion Sensing Mode. The delay is specified in units of 100ms, and setting to 0 enables continuous decoding until timeout.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_continuous_decode_delay(delay_ms)\n```\n\n----------------------------------------\n\nTITLE: Reading Digital Value from Reflective IR Unit in MicroPython\nDESCRIPTION: Reads and returns the digital value from the Reflective IR Unit. The returned integer value is either 0 or 1, indicating detection status.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/reflective_ir.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nReflectiveIRUnit.get_digital_value() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting External Port Power Output Status in MicroPython\nDESCRIPTION: Returns the current power output state of the external ports. Returns True if ports are in output mode and False if they're in input mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPower.getExtOutput() -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Vibration Duty Cycle in MicroPython\nDESCRIPTION: Method to set the vibration duty cycle of the Vibrator Unit. The duty parameter ranges from 0 to 100, representing the corresponding percentage.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/vibrator.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nVibratorUnit.set_duty(freq) -> None\n```\n\n----------------------------------------\n\nTITLE: Reading Digital Input Value in MicroPython\nDESCRIPTION: Gets the current value of a digital input pin as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/plcio.digitalinput.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nin1.value()\n```\n\n----------------------------------------\n\nTITLE: Closing UDP Socket Connection in MicroPython\nDESCRIPTION: This snippet shows how to close a UDP socket connection in MicroPython. It's important to close the socket when it's no longer needed to free up system resources.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.server.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nudps.close()\n```\n\n----------------------------------------\n\nTITLE: Writing Data to BLEUARTClient\nDESCRIPTION: Method to send data to the connected BLE UART server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.client.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTClient.write(data: bytes)\n```\n\n----------------------------------------\n\nTITLE: Initializing DAC Hat in MicroPython\nDESCRIPTION: Example code for using the DAC Hat with M5Stack StickC Plus 2. This snippet demonstrates how to set up and use the DAC Hat in a MicroPython environment.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/dac.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/hat/dac/stickc_plus2_dac_example.py\n    :language: python\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Sending Break Condition\nDESCRIPTION: Sends a break condition on the UART bus.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs232.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrs232_0.sendbreak()\n```\n\n----------------------------------------\n\nTITLE: BLEUARTClient IRQ Handler\nDESCRIPTION: Interrupt request handler method for the BLE UART client.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.client.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTClient.irq()\n```\n\n----------------------------------------\n\nTITLE: Setting Trigger Decode Delay for QRCode Module\nDESCRIPTION: Sets the delay in milliseconds between re-entering scene change detection and starting recognition again after detecting a change in Motion Sensing Mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_trigger_decode_delay(delay_ms)\n```\n\n----------------------------------------\n\nTITLE: Reading Voltage in MicroPython\nDESCRIPTION: Reads the current voltage (in volts) from the Motion Base v1.1 using the INA226 component.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/motion.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmotion.read_voltage()\n```\n\n----------------------------------------\n\nTITLE: Disabling Interrupt Request for Reflective IR Unit in MicroPython\nDESCRIPTION: Disables the obstacle detection event interrupt for the Reflective IR Unit. This stops the unit from generating events when obstacles are detected.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/reflective_ir.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nReflectiveIRUnit.disable_irq() -> None\n```\n\n----------------------------------------\n\nTITLE: Updating LED Brightness Based on ADC Value in MicroPython\nDESCRIPTION: Method to update the LED brightness based on the current ADC value from the Fader unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/fader.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nFaderUnit.update_brightness() -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing ZigbeeModule Class\nDESCRIPTION: Constructor for creating a new Zigbee unit instance. Takes ID, port configuration, and verbose logging flag as parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/zigbee.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nZigbeeModule(id: Literal[0, 1, 2], port: list | tuple, verbose: bool=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing Vibrator HAT in MicroPython\nDESCRIPTION: This snippet demonstrates how to create a VibratorHAT object in MicroPython. It's the starting point for using the Vibrator HAT functionality.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/vibrator.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nVibratorHAT()\n```\n\n----------------------------------------\n\nTITLE: Checking RS485 Transmission Status\nDESCRIPTION: Check if data transmission is complete or ongoing.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs485.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nstatus = rs485_0.txdone()\n```\n\n----------------------------------------\n\nTITLE: Getting I2C Address from 4In8Out Module\nDESCRIPTION: Method to get the current I2C address of the 4In8Out module. Returns an integer value representing the module's I2C address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/4in8out.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nModule4In8Out.get_i2c_address() -> int\n```\n\n----------------------------------------\n\nTITLE: Reading PPS UID\nDESCRIPTION: Returns the unique identifier (UID) of the PPS module as a bytearray.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.read_uid() -> bytearray\n```\n\n----------------------------------------\n\nTITLE: Accessing Rotary Encoder Value in HMIModule\nDESCRIPTION: Methods related to getting, setting, and resetting the rotary encoder value from the HMI module, as well as retrieving the rotary increments value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/hmi.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. method:: HMIModule.get_rotary_value() -> int\n\n    Get the current value of the rotary.\n\n\n.. method:: HMIModule.set_rotary_value(value)\n\n    Set the rotary value.\n\n    :param int value: rotary value(-2147483648-2147483647).\n\n\n.. method:: HMIModule.reset_rotary_value()\n\n    Reset the rotary value.\n\n\n.. method:: HMIModule.get_rotary_increments() -> int\n\n    Get the increment value of the rotary.\n```\n\n----------------------------------------\n\nTITLE: Getting Impinj Monza QT_MEM Status (MicroPython)\nDESCRIPTION: This method retrieves the QT_MEM status of an Impinj Monza UHFRFID tag. It takes parameters for persistence and access password. The method returns the QT_MEM status as a boolean.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.get_impinj_monza_qt_mem(persistence, password: str = \"00000000\") -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Pressure Method\nDESCRIPTION: Method to retrieve the current atmospheric pressure measurement from the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/envpro.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nENVPROUnit.get_pressure()\n```\n\n----------------------------------------\n\nTITLE: Initializing ATOMSocketBase in MicroPython\nDESCRIPTION: Constructor for the ATOMSocketBase class. It initializes the ATOM Socket with the specified ID, port, and relay pin.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase(_id: Literal[0, 1, 2], port: list | tuple, relay: int = 23)\n```\n\n----------------------------------------\n\nTITLE: KmeterISOUnit Class Constructor\nDESCRIPTION: Constructor for the KmeterISOUnit class, requiring an I2C object and optional device address (defaults to 0x66). This initializes communication with the KmeterISO Unit hardware.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/kmeter_iso.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nKmeterISOUnit(i2c, address=0x66)\n```\n\n----------------------------------------\n\nTITLE: Setting Low-Pass Filter for Presence and Motion Detection\nDESCRIPTION: Method to set the low-pass filter configuration for combined presence and motion detection. Accepts configuration values for filter bandwidth from ODR/9 to ODR/800.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_lpf_p_m_bandwidth(val) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing DLight Unit with I2C\nDESCRIPTION: Constructor for creating a DLight object using I2C communication. Takes an I2C object and optional address parameter that defaults to 0x23.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dlight.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDLightUnit(i2c, address: int = 0x23)\n```\n\n----------------------------------------\n\nTITLE: Getting Pressure Data\nDESCRIPTION: Method that returns the atmospheric pressure value in pascals from the BMP280 sensor, with a range of 300 to 1100 hPa.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef get_pressure():\n    # Get the pressure value in pascals from the BMP280 sensor.\n    # :return (float): range is 300 ~ 1100 hPa.\n```\n\n----------------------------------------\n\nTITLE: Quick Output Configuration for DDS Unit in MicroPython\nDESCRIPTION: Method to quickly set the output mode, frequency, and phase of the DDS in one call.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit.quick_output(mode: int = WAVE_SINE, freq: int = 1000, phase: int = 0) -> None\n```\n\n----------------------------------------\n\nTITLE: Reading Voltage from EARTH Unit in MicroPython\nDESCRIPTION: Method to read the voltage value in millivolts from the EARTH soil moisture sensor. Returns an integer value ranging from 0 to 3300 mV.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/earth.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nEARTH.get_voltage_mv()\n```\n\n----------------------------------------\n\nTITLE: Enabling Interrupt Request for Reflective IR Unit in MicroPython\nDESCRIPTION: Enables the obstacle detection event interrupt for the Reflective IR Unit. This allows the unit to generate events when obstacles are detected.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/reflective_ir.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nReflectiveIRUnit.enable_irq() -> None\n```\n\n----------------------------------------\n\nTITLE: Checking Holding State in LimitUnit\nDESCRIPTION: Method to check if the limit is currently being held in the LimitUnit class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/limit.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLimitUnit.isHolding()\n```\n\n----------------------------------------\n\nTITLE: Managing P2P Channel Activity\nDESCRIPTION: Methods to get and set P2P channel activity state. The state can be enabled (1) or disabled (0).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lorawan_rui3.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nLoRaWAN_X.get_p2p_channel_activity()\nLoRaWAN_X.set_p2p_channel_activity(state)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Firmware Version from TimerPWR Unit\nDESCRIPTION: Method to get the firmware version of the TimerPWR Unit. Returns the version as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.get_firmware_version()\n```\n\n----------------------------------------\n\nTITLE: Getting USB Port Power Output Status in MicroPython\nDESCRIPTION: Returns the current power output state of the main USB port. Returns True if the port is in output mode and False if it's in input mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPower.getUsbOutput() -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Battery Voltage from TimerPWR Unit\nDESCRIPTION: Method to retrieve the battery voltage. Returns the voltage in millivolts as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.get_battery_voltage()\n```\n\n----------------------------------------\n\nTITLE: Locking Motors\nDESCRIPTION: Method to lock the motors, preventing them from moving or being controlled manually.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.lock()\n```\n\n----------------------------------------\n\nTITLE: Checking Connection Status in BLEUARTClient\nDESCRIPTION: Method to verify if the BLE UART client is currently connected to a server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.client.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTClient.is_connected()\n```\n\n----------------------------------------\n\nTITLE: Stopping Data Reception in ATOMSocketBase\nDESCRIPTION: Method to stop receiving data from the ATOM Socket. It doesn't return any value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase.stop_receive_data() -> None\n```\n\n----------------------------------------\n\nTITLE: Checking Available Data in BLE UART Buffer\nDESCRIPTION: Method to check the number of bytes available in the receive buffer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.server.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTServer.any() -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Pin to Low Level in MicroPython\nDESCRIPTION: Method to set a GPIO pin to low level (0). This is a convenience function equivalent to setting value to 0.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/pin.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPin.off() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting NXP Read Protection (MicroPython)\nDESCRIPTION: This method sets or resets the read protection for an NXP UHFRFID tag. It takes a parameter to set or reset protection and an optional access password. The method returns a boolean indicating success or failure.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.nxp_read_protect(set: int, password: str = \"00000000\") -> bool\n```\n\n----------------------------------------\n\nTITLE: Writing Servo Pulse in MicroPython\nDESCRIPTION: Sets the pulse width of a servo connected to a specified channel on the Motion Base.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/motion.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmotion.write_servo_pulse()\n```\n\n----------------------------------------\n\nTITLE: Refreshing PM2.5 Module Data\nDESCRIPTION: Method to refresh the data readings from the PM2.5 Module. The module must be in the appropriate mode (Active: 1, Passive: 0).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pm25.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPM25Module.refresh_data()\n```\n\n----------------------------------------\n\nTITLE: Pausing Audio Playback with Player.pause() in MicroPython\nDESCRIPTION: Pauses the current audio playback.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.player.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPlayer.pause()\n```\n\n----------------------------------------\n\nTITLE: MIDI Unit Class Constructor\nDESCRIPTION: Initializes a MIDI unit instance using UART communication. Takes UART ID and port pins as parameters for configuration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/midi.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMIDIUnit(id, port)\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on RCA Display with MicroPython\nDESCRIPTION: This MicroPython snippet demonstrates how to display the text 'RCA' on the screen using the RCA Module. It provides a basic example of text rendering functionality.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/rca.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Setting PM2.5 Module Operation Mode\nDESCRIPTION: Method to set the operation mode of the PM2.5 Module. Use 1 for Active mode or 0 for Passive mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pm25.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPM25Module.set_module_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Initializing ADC V1.1 Unit Class in MicroPython\nDESCRIPTION: Constructor for initializing the ADC V1.1 Unit with an I2C or PAHUBUnit interface. Takes an I2C instance as parameter for communication setup.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc_v11.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ADCV11Unit:\n    def __init__(self, i2c):\n```\n\n----------------------------------------\n\nTITLE: Filling Screen Color in MicroPython\nDESCRIPTION: Fills the screen of the JoyC Hat with a color.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joyc.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nJoyCHat.fill_color() -> None\n```\n\n----------------------------------------\n\nTITLE: Unlocking Alarm State\nDESCRIPTION: Method to clear an alarm state, which may occur after errors or emergency stops.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.unlock_alarm_state()\n```\n\n----------------------------------------\n\nTITLE: ADC Operating Mode Setter\nDESCRIPTION: Sets the ADC working mode between single read or continuous read.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nADCUnit.operating_mode()\n```\n\n----------------------------------------\n\nTITLE: Writing Data to UART\nDESCRIPTION: Writes data to the UART interface.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs232.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrs232_0.write(b'Hello')\n```\n\n----------------------------------------\n\nTITLE: Setting Color for All RGB LEDs\nDESCRIPTION: Method to set the same color for all RGB LEDs in the unit. The color is specified as a 3-byte RGB888 value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/rgb.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nRGB.fill_color(c: int)\n```\n\n----------------------------------------\n\nTITLE: Getting Raw X-Axis Value in MicroPython\nDESCRIPTION: Retrieves the raw x-axis value from the specified channel (0 or 1) of the JoyC Hat.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joyc.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nJoyCHat.get_x_raw(channel: int = 0) -> int\n```\n\n----------------------------------------\n\nTITLE: Sending IR Signals with IRUnit\nDESCRIPTION: Sends an infrared signal value to a specified address using the IR transmitter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ir.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nIRUnit.tx()\n```\n\n----------------------------------------\n\nTITLE: Getting USB Voltage from TimerPWR Unit\nDESCRIPTION: Method to retrieve the USB voltage. Returns the voltage in millivolts as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.get_usb_voltage()\n```\n\n----------------------------------------\n\nTITLE: Reading Angle Voltage Method\nDESCRIPTION: The get_voltage method reads the current voltage value from an Angle sensor and returns it as a floating-point number.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/angle.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAngle.get_voltage()\n```\n\n----------------------------------------\n\nTITLE: Reading PPS Module ID\nDESCRIPTION: Returns the module ID as an integer value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.read_module_id() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Zigbee Short Address\nDESCRIPTION: Method to retrieve the short address of the Zigbee module, which is an internally assigned network address. Returns an integer value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.get_short_address() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Current Measurement from ATOMSocketBase\nDESCRIPTION: Method to retrieve the current measurement from the ATOM Socket. It returns a float value representing the current.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase.get_current() -> float\n```\n\n----------------------------------------\n\nTITLE: Setting Digital Output in GoPlus2Module\nDESCRIPTION: Method to set the digital output value (0 or 1) for a specified pin (numbered 1-3).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/goplus2.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nGoPlus2Module.set_digital_output(pin_num, value) -> None\n```\n\n----------------------------------------\n\nTITLE: Getting USB Current from TimerPWR Unit\nDESCRIPTION: Method to retrieve the USB current. Returns the current in milliamperes as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.get_usb_current()\n```\n\n----------------------------------------\n\nTITLE: Setting Motor Direction in StepMotorDriverModule\nDESCRIPTION: Method to set the rotation direction for a specific motor. It takes the motor ID and direction value as parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule.set_motor_direction(motor_id, direction)\n```\n\n----------------------------------------\n\nTITLE: Reading Input Registers with ModbusRTUMaster in MicroPython\nDESCRIPTION: Method for reading input registers from a Modbus slave device, returning a list of register values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.master.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUMaster.read_input_registers(address, register, quantity, timeout: int=2000) -> list\n```\n\n----------------------------------------\n\nTITLE: Reconnecting to MQTT Server\nDESCRIPTION: Method to disconnect and reconnect to an MQTT server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.default.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMQTTClient.reconnect()\n```\n\n----------------------------------------\n\nTITLE: Setting Presence Hysteresis in TMOSUnit\nDESCRIPTION: Method to set the hysteresis value for the presence detection algorithm. Accepts a hysteresis value between 0x0 and 0xFF.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_presence_hysteresis(val)\n```\n\n----------------------------------------\n\nTITLE: Displaying Text on Display Module in MicroPython\nDESCRIPTION: This MicroPython example initializes and uses the Display Module to show the text 'Display' on the screen.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/display.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom m5stack import M5Stack\nfrom module import display\n\n# Initialize M5Stack\nm5 = M5Stack()\n\n# Initialize DisplayModule\ndisplay_module = display.DisplayModule()\n\n# Set text color and background color\ndisplay_module.set_text_color(display_module.WHITE, display_module.BLACK)\n\n# Set text size\ndisplay_module.set_text_size(4)\n\n# Fill screen with black color\ndisplay_module.fill_screen(display_module.BLACK)\n\n# Draw text at position (10, 100)\ndisplay_module.draw_string(10, 100, \"Display\")\n\n```\n\n----------------------------------------\n\nTITLE: Reading Input Registers Event Constant\nDESCRIPTION: Modbus function code 4 constant for reading input registers operation\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.WRITE_SINGLE_COIL_EVENT\n```\n\n----------------------------------------\n\nTITLE: Disabling Hall Effect Interrupt\nDESCRIPTION: Disables the interrupt functionality of the Hall Effect sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/hall_effect.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nHallEffectUnit.disable_irq()\n```\n\n----------------------------------------\n\nTITLE: Updating ADC Configuration\nDESCRIPTION: Method to apply current settings to the ADC configuration register.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc_v11.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef set_config(self):\n```\n\n----------------------------------------\n\nTITLE: Setting All Drums to Default\nDESCRIPTION: Method to send a System Exclusive message that resets all drum sounds on channel 10 to their default values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_all_drums()\n```\n\n----------------------------------------\n\nTITLE: Setting Ambient Temperature Shock Threshold in TMOSUnit\nDESCRIPTION: Method to set the ambient temperature shock threshold for the shock detection algorithm. Accepts a threshold value between 0x0 and 0x7FFF and returns whether the setting was successful.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_tambient_shock_threshold(val) -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Processed X-Axis Value from MiniJoyHat\nDESCRIPTION: Returns the processed x-axis value from the joystick as an integer, which may include calibration or normalization.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_joy.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMiniJoyHat.get_x() -> int\n```\n\n----------------------------------------\n\nTITLE: Swapping Y-Axis Direction in MicroPython\nDESCRIPTION: Swaps the y-axis direction of the JoyC Hat. The swap parameter determines whether to enable or disable the swap.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joyc.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nJoyCHat.swap_y(swap: bool = True) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing DualButton Class in MicroPython\nDESCRIPTION: Constructor for creating a DualButton object that takes two IO pins as parameters for defining the two keys\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dualbutton.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDualButton(IO1, IO2)\n```\n\n----------------------------------------\n\nTITLE: Initializing FaderUnit Class in MicroPython\nDESCRIPTION: Constructor for the FaderUnit class that initializes the Fader unit. It takes a tuple parameter representing the port connection, where port[0] is the ADC pin and port[1] is the LEDs pin.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/fader.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFaderUnit(port: tuple)\n```\n\n----------------------------------------\n\nTITLE: Getting Relay Status in MicroPython\nDESCRIPTION: Retrieves the current status of the relay as a boolean value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/plcio.relay.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrelay.get_status()\n```\n\n----------------------------------------\n\nTITLE: Setting Measurement Timing Budget in ToF Unit\nDESCRIPTION: Method to set the measurement timing budget in microseconds. Higher values typically result in more accurate measurements but increase power consumption.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nToFUnit.set_measurement_timing_budget(budget_us: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing PuzzleUnit in MicroPython\nDESCRIPTION: Creates a PuzzleUnit object with specified port and number of LED boards. This constructor initializes the WS2812 LED strip for controlling the RGB LED array.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/puzzle.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPuzzleUnit(port, led_board_count)\n```\n\n----------------------------------------\n\nTITLE: Checking TMOSUnit Connection Status\nDESCRIPTION: Method to check whether the TMOSUnit is connected to the device.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.is_connected() -> None\n```\n\n----------------------------------------\n\nTITLE: Flushing UART Buffer\nDESCRIPTION: Waits until all data has been sent from the buffer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs232.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrs232_0.flush()\n```\n\n----------------------------------------\n\nTITLE: Creating WEIGHT_I2CUnit Object in Micropython\nDESCRIPTION: This snippet shows the constructor for the WEIGHT_I2CUnit class. It creates a WEIGHT_I2CUnit object using an I2C port and an optional I2C address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/weight_i2c.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWEIGHT_I2CUnit(i2c0, 0x26)\n```\n\n----------------------------------------\n\nTITLE: Setting RGB Brightness Method\nDESCRIPTION: Method to set the brightness of all RGB LEDs. The brightness value ranges from 0 to 100.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/rgb.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRGB.set_brightness(br: int)\n```\n\n----------------------------------------\n\nTITLE: Initializing DMX512Module in Python\nDESCRIPTION: Constructor for the DMX512Module class. It initializes the module with a specified UART ID and operating mode (master or slave).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dmx.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDMX512Module(id, mode = DMX_MASTER)\n```\n\n----------------------------------------\n\nTITLE: Setting LED Color in MicroPython\nDESCRIPTION: Method to set the color of the LED. Takes an integer parameter representing the RGB color (0x000000 - 0xFFFFFF).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_encoder.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nMiniEncoderCHat.fill_color(rgb: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Reading Data from BLEUARTClient\nDESCRIPTION: Method to read a specified number of bytes from the receive buffer, or all available data if size is not specified.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.client.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTClient.read(sz=None) -> bytes\n```\n\n----------------------------------------\n\nTITLE: ADC Operating Mode Getter\nDESCRIPTION: Gets the current working mode of the ADC (Single read or continuous read).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nADCUnit.get_operating_mode()\n```\n\n----------------------------------------\n\nTITLE: Setting Grove Output Status on TimerPWR Unit\nDESCRIPTION: Method to enable or disable the Grove output. Takes a boolean parameter where True enables and False disables the output.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.set_grove_output_status(enable)\n```\n\n----------------------------------------\n\nTITLE: Sending Ping to MQTT Server\nDESCRIPTION: Method to ping the MQTT server to maintain the connection. The response is processed automatically by wait_msg().\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.default.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nMQTTClient.ping()\n```\n\n----------------------------------------\n\nTITLE: Setting Add Mode for FingerUnit in Python\nDESCRIPTION: Method to set the add mode of the fingerprint module. It takes a mode parameter (0 for no-repeat, 1 for repeat) and returns the newly set mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.set_add_mode(mode: int) -> int\n```\n\n----------------------------------------\n\nTITLE: Get Rotary Value Method - MicroPython\nDESCRIPTION: Retrieves the current rotation value of the ScrollUnit as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/scroll.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nScrollUnit.get_rotary_value() -> int\n```\n\n----------------------------------------\n\nTITLE: Enabling PIR Interrupt Request Method\nDESCRIPTION: Method to enable the human detection interrupt function on the PIR sensor. Activates the motion detection capability.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/pir.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPIR.enable_irq()\n```\n\n----------------------------------------\n\nTITLE: Setting Master Volume\nDESCRIPTION: Method to control the master volume for all channels using a System Exclusive message with a value from 0 to 100.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_master_volume(level)\n```\n\n----------------------------------------\n\nTITLE: Resetting Motor in StepMotorDriverModule\nDESCRIPTION: Method to reset a specific motor. It takes the motor ID and desired state as parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule.reset_motor(motor_id, state)\n```\n\n----------------------------------------\n\nTITLE: Writing a Single Coil with ModbusRTUMaster in MicroPython\nDESCRIPTION: Method for writing a value to a single coil on a Modbus slave device, returning the written value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.master.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUMaster.write_single_coil(address, register, value, timeout: int=2000) -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Label Text Content in MicroPython\nDESCRIPTION: Method to set the text content of a Label object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/label.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nLabel.setText(text: str)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Modbus Server in MicroPython\nDESCRIPTION: Closes the connection to the Modbus server. This method should be called when Modbus operations are complete.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.client.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPClient.disconnect() -> None\n```\n\n----------------------------------------\n\nTITLE: Monitoring LimitUnit State Transitions\nDESCRIPTION: Method to monitor the state transitions of a limit based on its pin state and trigger appropriate handlers in the LimitUnit class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/limit.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLimitUnit.tick(pin)\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Colors in MicroPython\nDESCRIPTION: Method to set the foreground and background colors of a Circle object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/circle.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWidgets.setColor(fg_color: int=0xffffff, bg_color: int=0x000000)\n```\n\n----------------------------------------\n\nTITLE: Starting Continuous Mode in ToF Unit\nDESCRIPTION: Method to start continuous measurement mode in the ToF Unit. In this mode, the sensor continuously takes measurements without needing to be triggered.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nToFUnit.start_continuous() -> None\n```\n\n----------------------------------------\n\nTITLE: Deleting All Users from FingerUnit in Python\nDESCRIPTION: Method to delete all users from the fingerprint module. Returns True if successful, False otherwise.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.delete_all_user() -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Motor PWM Frequency in StepMotorDriverModule\nDESCRIPTION: Method to set the PWM frequency for a specific motor. It takes the motor ID and frequency value as parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule.set_motor_pwm_freq(motor_id, freq)\n```\n\n----------------------------------------\n\nTITLE: Setting Sleep Trigger for TimerPWR Unit\nDESCRIPTION: Method to configure what can trigger the unit to sleep. Options include ALL, TIMER, BUTTON, I2C, or NONE, referenced through constants like timerpwrunit_0.TRIG_ALL.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.set_sleep_trigger(trigger)\n```\n\n----------------------------------------\n\nTITLE: Creating an Angle Object Constructor\nDESCRIPTION: The Angle class constructor that initializes an Angle sensor object. It takes a port parameter which specifies the pins the sensor is connected to.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/angle.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAngle(port)\n```\n\n----------------------------------------\n\nTITLE: Creating a UWB Unit Object in MicroPython\nDESCRIPTION: Constructor for creating a UWB unit object with specified parameters including UART ID, port, device mode, device ID, and verbose output option.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit(id, port, device_mode, device_id, verbose)\n```\n\n----------------------------------------\n\nTITLE: Getting Button Status in MicroPython\nDESCRIPTION: Method to retrieve the current status of the rotary encoder button, returning a boolean value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nEncoderUnit.get_button_status() -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting I2C Address in ToF Unit\nDESCRIPTION: Method to change the I2C address of the ToF Unit. This is useful when multiple ToF Units are used on the same I2C bus.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nToFUnit.set_address(new_address: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Set Buzzer Frequency Method\nDESCRIPTION: Sets the frequency of the buzzer vibration. Accepts frequency values between 100 and 10000Hz.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/buzzer.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nBuzzerUnit.set_freq(freq: int)\n```\n\n----------------------------------------\n\nTITLE: Turning Off Pump in WateringUnit MicroPython\nDESCRIPTION: Method to turn off the water pump in the Watering Unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/watering.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nWateringUnit.off() -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing WateringUnit in MicroPython\nDESCRIPTION: Constructor for the WateringUnit class. It initializes the Watering Unit with the specified port, where port[0] is the ADC pin and port[1] is the pump pin.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/watering.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWateringUnit(port: tuple) -> None\n```\n\n----------------------------------------\n\nTITLE: Turning On Pump in WateringUnit MicroPython\nDESCRIPTION: Method to turn on the water pump in the Watering Unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/watering.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWateringUnit.on() -> None\n```\n\n----------------------------------------\n\nTITLE: Direction Control for Atomic Stepmotor Base in MicroPython\nDESCRIPTION: This code demonstrates motor direction control for the Atomic Stepmotor Base. It toggles the rotation direction when the screen button is pressed. The code uses the AtomicStepmotorBase class to control the stepper motor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/stepmotor.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/base/stepmotor/atoms3r_stepmotor_direction_control_example.py\n    :language: python\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Adjusting Color Saturation for NECO Unit in MicroPython\nDESCRIPTION: Method to adjust the color saturation of an RGB color. Returns the new color with adjusted saturation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/neco.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nNECOUnit.color_saturation(rgb, saturation)\n```\n\n----------------------------------------\n\nTITLE: Reading Encoder Values\nDESCRIPTION: Returns a tuple containing left and right encoder values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/bala2.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmodule_bala2_0.get_encoder_value()\n```\n\n----------------------------------------\n\nTITLE: Initializing KmeterUnit Class in MicroPython\nDESCRIPTION: This snippet shows the constructor for the KmeterUnit class. It takes an I2C object and an address as parameters to initialize the Kmeter Unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/kmeter.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass KmeterUnit\n----------------\n\nConstructors\n------------\n\n.. class:: KmeterUnit(i2c, address)\n\n    :param object i2c: the I2C object.\n    :param int address: 0x08 ~ 0x77.\n```\n\n----------------------------------------\n\nTITLE: Reading Data from UART in MicroPython\nDESCRIPTION: This snippet demonstrates how to read data from the UART bus using the read() method.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(uart1.read())\n```\n\n----------------------------------------\n\nTITLE: Getting User Capacity of FingerUnit in Python\nDESCRIPTION: Method to get the maximum number of users that can be registered in the fingerprint module. Returns the capacity if successful, or -1 if unsuccessful.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.get_user_capacity() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Count Value from OPUnit in MicroPython\nDESCRIPTION: This snippet demonstrates how to get the count value from an OPUnit object in MicroPython.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/op90.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nOPUnit.count_value()\n```\n\n----------------------------------------\n\nTITLE: Getting Average Sample Number for Object Temperature\nDESCRIPTION: Method to get the current number of samples being averaged for the object temperature measurement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.get_avg_tobj_num() -> int\n```\n\n----------------------------------------\n\nTITLE: Get Rotary Status Method - MicroPython\nDESCRIPTION: Gets the current rotation status of the ScrollUnit. Returns a boolean value indicating the rotation state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/scroll.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nScrollUnit.get_rotary_status() -> bool\n```\n\n----------------------------------------\n\nTITLE: Creating a ReflectiveIRUnit Instance in MicroPython\nDESCRIPTION: Creates a ReflectiveIRUnit object by specifying the port to which the unit is connected. This constructor initializes the connection to the Reflective IR Unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/reflective_ir.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nReflectiveIRUnit(port: tuple)\n```\n\n----------------------------------------\n\nTITLE: Setting Pitch Bend Range\nDESCRIPTION: Method to configure the pitch bend range in semitones for a specified MIDI channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_pitch_bend_range(channel, value)\n```\n\n----------------------------------------\n\nTITLE: Setting Pan Position\nDESCRIPTION: Method to control the stereo pan position for a specific MIDI channel with a value from 0 to 127.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_pan(channel, value)\n```\n\n----------------------------------------\n\nTITLE: LVGL Display Buffer Flushing for Custom User Panel\nDESCRIPTION: Implements a display buffer flushing function for a custom user panel. It calculates the width and height of the area to flush, sets the address window on the panel, and writes pixel data from the LVGL color buffer to the display.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/mpy_lvgl.txt#2025-04-21_snippet_2\n\nLANGUAGE: C/C++\nCODE:\n```\nvoid user_lvgl_flush(void *_disp_drv, const lv_area_t *area, lv_color_t *color_p) {\n    lv_disp_drv_t *disp_drv = (lv_disp_drv_t*)_disp_drv;\n\n    int w = (area->x2 - area->x1 + 1);\n    int h = (area->y2 - area->y1 + 1);\n\n    user_panel.startWrite();\n    user_panel.setAddrWindow(area->x1, area->y1, w, h);\n    user_panel.writePixels((lgfx::rgb565_t *)&color_p->full, w * h);\n    user_panel.endWrite();\n    lv_disp_flush_ready((lv_disp_drv_t *)disp_drv);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking IRQ Trigger Status in LoRaSx1262Module\nDESCRIPTION: Code to check if an interrupt service routine has been triggered since the last send or receive operation started.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora_sx1262.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlora868v12_0.irq_triggered()\n```\n\n----------------------------------------\n\nTITLE: Configuring DMX Timing Parameters\nDESCRIPTION: Functions to set DMX baud rate, break length, and mark-after-break (MAB) length. These settings only affect sending DMX/RDM data and values are clamped to stay within DMX specifications.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\ndmx_set_baud_rate(DMX_NUM_1, DMX_BAUD_RATE);     // Set DMX baud rate.\ndmx_set_break_len(DMX_NUM_1, DMX_BREAK_LEN_US);  // Set DMX break length.\ndmx_set_mab_len(DMX_NUM_1, DMX_MAB_LEN_US);      // Set DMX MAB length.\n```\n\n----------------------------------------\n\nTITLE: Calculating Inspecting Power in ATOMSocketBase\nDESCRIPTION: Method to calculate the inspecting power of the ATOM Socket. It returns a float value representing the inspecting power.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase.get_inspecting_power() -> float\n```\n\n----------------------------------------\n\nTITLE: Creating PCM Buffer for Audio Recording in MicroPython\nDESCRIPTION: Creates a buffer to store audio data in PCM format. The buffer size is calculated based on sample rate, bit depth, and recording duration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.recorder.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRecorder.create_pcm_buf(time) -> bytearray\n```\n\n----------------------------------------\n\nTITLE: Setting Startup Tone for QR Code Scanner\nDESCRIPTION: Configures the audible feedback when the QR code scanner starts up. Options include disabling the tone completely, playing 4 beeps, or playing 2 beeps.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_startup_tone(mode)\n```\n\n----------------------------------------\n\nTITLE: Calculating CRC16 Checksum for QR Code Scanner Protocol\nDESCRIPTION: Reference implementation for calculating the CRC16 checksum used in some QR code scanner protocol formats. This function processes input data bytes and returns a 16-bit CRC value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef crc16_calc(data: bytes) -> int:\n    ca_crc = 0\n    for byte in data:\n        for i in range(7, -1, -1):  \n            if ca_crc & 0x8000:\n                ca_crc = (ca_crc << 1) ^ 0x18005\n            else:\n                ca_crc <<= 1\n            if (byte & (1 << i)) != 0:\n                ca_crc ^= 0x18005\n    return ca_crc & 0xFFFF\n```\n\n----------------------------------------\n\nTITLE: Getting Device ID in MicroPython\nDESCRIPTION: Method to retrieve the current device ID of the UWB unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit.get_device_id()\n```\n\n----------------------------------------\n\nTITLE: Reading Digital Value from EARTH Unit in MicroPython\nDESCRIPTION: Method to read the digital value from the EARTH soil moisture sensor. Returns either 0 or 1, indicating dry or moist soil conditions based on a threshold.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/earth.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nEARTH.get_digital_value()\n```\n\n----------------------------------------\n\nTITLE: LED Control Methods\nDESCRIPTION: Methods for controlling the RGB LED including color and brightness settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/key.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nset_color(color: int) -> None\nset_brightness(br: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Turning Off Vibrator Unit in MicroPython\nDESCRIPTION: Method to turn off the vibrator motor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/vibrator.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nVibratorUnit.turn_off() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting HeartUnit Detection Mode\nDESCRIPTION: Method to set the detection mode of the HeartUnit. Supports heart rate only or heart rate with SpO2 measurement modes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit.set_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Setting Trigger Timeout for QRCode Module\nDESCRIPTION: Configures the maximum time in milliseconds that the scanner will attempt to decode before automatically stopping. This provides an automatic cutoff for scanning operations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_trigger_timeout(timeout_ms)\n```\n\n----------------------------------------\n\nTITLE: Getting Accumulated Energy in ATOMSocketBase\nDESCRIPTION: Method to retrieve the accumulated energy measurement in KWh from the ATOM Socket. It returns a float value representing the total energy.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase.get_kwh() -> float\n```\n\n----------------------------------------\n\nTITLE: Reading Power in MicroPython\nDESCRIPTION: Reads the power consumption (in watts) from the Motion Base v1.1 using the INA226 component.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/motion.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmotion.read_power()\n```\n\n----------------------------------------\n\nTITLE: Sending HEAD Request with requests2.head()\nDESCRIPTION: Function to send a HEAD request. It takes a URL and optional keyword arguments, returning a Response object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/requests2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrequests2.head(url, **kw)\n```\n\n----------------------------------------\n\nTITLE: Initializing LaserTX Unit in Python\nDESCRIPTION: Constructor for initializing the LaserTX Unit with specified port, communication mode, and UART ID. It sets up the basic configuration for the laser transmitter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/laser_tx.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass LaserTXUnit:\n    def __init__(self, port, mode, id):\n        # Initialize the LaserTXUnit\n        pass\n```\n\n----------------------------------------\n\nTITLE: ExtEncoder Unit Method Definitions\nDESCRIPTION: Collection of methods available for the ExtEncoder Unit including rotation status, value management, perimeter settings, pulse configuration, and firmware operations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/extencoder.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_rotary_status() -> bool\ndef get_rotary_value() -> int\ndef get_rotary_increments() -> int\ndef reset_rotary_value() -> None\ndef set_rotary_value(new_value: int) -> None\ndef get_perimeter() -> int\ndef set_perimeter(perimeter: int) -> None\ndef get_pulse() -> int\ndef set_pulse(pulse: int) -> None\ndef get_zero_mode() -> int\ndef set_zero_mode(mode: int) -> None\ndef get_meter_value() -> int\ndef get_zero_pulse_value() -> int\ndef set_zero_pulse_value(value: int) -> None\ndef get_firmware_version() -> int\ndef set_address(address) -> int\n```\n\n----------------------------------------\n\nTITLE: Reading PPS Output Voltage\nDESCRIPTION: Returns the current output voltage as a float value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.read_output_voltage() -> float\n```\n\n----------------------------------------\n\nTITLE: HeartHat Sensor Control Methods in MicroPython\nDESCRIPTION: Core methods for controlling the HeartHat sensor including start, stop, and deinitialize operations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/heart.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nHeartHat.stop()\n```\n\nLANGUAGE: python\nCODE:\n```\nHeartHat.start()\n```\n\nLANGUAGE: python\nCODE:\n```\nHeartHat.deinit()\n```\n\n----------------------------------------\n\nTITLE: Reading Available Characters from RS232Module\nDESCRIPTION: Method to check number of characters available for reading without blocking. Returns 0 if no characters available or positive number if characters present.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/rs232.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npoll = select.poll()\npoll.register(uart, select.POLLIN)\npoll.poll(timeout)\n```\n\n----------------------------------------\n\nTITLE: Setting Sleep Mode for DDS Unit in MicroPython\nDESCRIPTION: Method to set the sleep mode of the DDS. It takes a mode constant as an argument to control power saving.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit.set_sleep_mode(mode: int = SLEEP_MODE_1) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Relay Value in MicroPython\nDESCRIPTION: Sets the relay value to 1 (on) and then retrieves the current value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/plcio.relay.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrelay.value(1)\nrelay.value()\n```\n\n----------------------------------------\n\nTITLE: Setting Grove2GroveUnit State in Python\nDESCRIPTION: Method to set the state of the grove. It takes an integer 'state' as a parameter and doesn't return anything.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/grove2grove.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nGrove2GroveUnit.set_en(state: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Getting Processed Y-Axis Value from MiniJoyHat\nDESCRIPTION: Returns the processed y-axis value from the joystick as an integer, which may include calibration or normalization.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_joy.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nMiniJoyHat.get_y() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Horizontal Mirror Mode Status for Camera in MicroPython for M5Stack UIFlow\nDESCRIPTION: Returns whether horizontal mirror mode is enabled for the camera.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/camera.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncamera.get_hmirror()\n```\n\n----------------------------------------\n\nTITLE: Setting Random Colors for Random LEDs in NECO Unit\nDESCRIPTION: Method to set random colors to random LEDs within a specified range on the NECO Unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/neco.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nNECOUnit.set_random_color_random_led_from(begin, end)\n```\n\n----------------------------------------\n\nTITLE: Setting HX711 Sensor Channel\nDESCRIPTION: Method to set the active channel for the HX711 sensor. Takes an integer parameter specifying the channel (1, 2, or 3).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/weight.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nWEIGHTUnit.set_channel(chan)\n```\n\n----------------------------------------\n\nTITLE: Setting All Relays State in MicroPython\nDESCRIPTION: Method to set the state of all relays in the unit simultaneously.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay4.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nRelay4Unit.set_relay_all(state: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Checking Available Data in BLEUARTClient\nDESCRIPTION: Method that returns the number of bytes available in the receive buffer for reading.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.client.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTClient.any() -> int\n```\n\n----------------------------------------\n\nTITLE: Reading DMX Sniffer Data\nDESCRIPTION: Example of reading timing metadata from the DMX sniffer after receiving a packet. Provides break and mark-after-break timing information.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_15\n\nLANGUAGE: c\nCODE:\n```\ndmx_packet_t packet;\nif (dmx_receive(DMX_NUM_1, &packet, DMX_TIMEOUT_TICK)) {\n  dmx_metadata_t metadata;\n  if (dmx_sniffer_get_data(DMX_NUM_1, &metadata, DMX_TIMEOUT_TICK)) {\n    printf(\"The DMX break length was: %i\\n\", metadata.break_len);\n    printf(\"The DMX mark-after-break length was: %i\\n\", metadata.mab_len);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Color for Specific RGB LED\nDESCRIPTION: Method to set the color of a specific RGB LED by its index. Requires both the LED index and a 3-byte RGB888 color value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/rgb.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nRGB.set_color(i, c: int)\n```\n\n----------------------------------------\n\nTITLE: Setting Relay State in ATOMSocketBase\nDESCRIPTION: Method to set the state of the ATOM Socket's relay. It takes a boolean parameter to turn the relay on or off.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase.set_relay(state: bool) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing UART for LaserTX Unit in Python\nDESCRIPTION: Method to initialize UART communication with specified parameters such as baud rate, data bits, parity, and stop bits. This sets up the communication protocol for the laser transmitter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/laser_tx.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef init_uart(self, baudrate=115200, bits=8, parity=None, stop=1):\n    # Initialize UART communication\n    pass\n```\n\n----------------------------------------\n\nTITLE: Getting Satellite Count from GPS Module\nDESCRIPTION: Method to get the number of satellites currently visible to the GPS module. Returns the count as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.get_satellite_num()\n```\n\n----------------------------------------\n\nTITLE: Importing USB Device Module in MicroPython\nDESCRIPTION: Reference to the usb.device module in MicroPython that provides USB device functionality for M5Stack devices.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/device/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: usb.device\n```\n\n----------------------------------------\n\nTITLE: Getting User Info from FingerUnit in Python\nDESCRIPTION: Method to get information about a specific user. Returns a tuple containing user ID and permission if successful, None otherwise.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.get_user_info(id: int) -> Union[tuple, None]\n```\n\n----------------------------------------\n\nTITLE: Disabling PIR Interrupt Request Method\nDESCRIPTION: Method to disable the human detection interrupt function on the PIR sensor. Deactivates the motion detection capability.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/pir.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPIR.disable_irq()\n```\n\n----------------------------------------\n\nTITLE: Initializing LoRaE220JPUnit in MicroPython\nDESCRIPTION: Constructor for creating a LoRaE220JPUnit object. It takes a tuple of UART pins (tx_pin, rx_pin) and an optional UART port ID.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lora_e220.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLoRaE220JPUnit(port, port_id=1)\n```\n\n----------------------------------------\n\nTITLE: Initializing LimitUnit in MicroPython\nDESCRIPTION: Constructor for the LimitUnit class. It initializes a Limit instance with the specified pin, active-low configuration, and pull-up resistor state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/limit.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nLimitUnit(pin_num, active_low, pullup_active)\n```\n\n----------------------------------------\n\nTITLE: Configuring Equalizer Settings\nDESCRIPTION: Method to set a comprehensive equalizer with multiple bands and frequencies for a specific MIDI channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_equalizer(channel, lowband, medlowband, medhighband, highband, lowfreq, medlowfreq, medhighfreq, highfreq)\n```\n\n----------------------------------------\n\nTITLE: Setting Relay Status in MicroPython\nDESCRIPTION: Sets the status of the relay to True (on).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/plcio.relay.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrelay.set_status(True)\n```\n\n----------------------------------------\n\nTITLE: Setting Case Conversion in QR Code Reader\nDESCRIPTION: This method sets the case conversion for decoded data. It takes an integer parameter 'mode' to keep original data, convert to uppercase, or convert to lowercase.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.set_case_conversion(mode)\n```\n\n----------------------------------------\n\nTITLE: Setting HeartUnit Pulse Width\nDESCRIPTION: Method to set the pulse width of the HeartUnit. Supports pulse widths of 200us, 400us, 800us, and 1600us with corresponding ADC resolutions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit.set_pulse_width(pulse_width)\n```\n\n----------------------------------------\n\nTITLE: Initializing Grove2GroveUnit in Python\nDESCRIPTION: Constructor for initializing the Grove2GroveUnit. It takes a tuple 'port' as a parameter, where port[0] is the ADC pin and port[1] is the grove pin.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/grove2grove.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nGrove2GroveUnit(port: tuple)\n```\n\n----------------------------------------\n\nTITLE: Hall Effect Interrupt Constants\nDESCRIPTION: Constants used to set the trigger mode for Hall Effect sensor interrupts. IRQ_ACTIVE triggers on active state, while IRQ_NEGATIVE triggers on negative state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/hall_effect.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nHallEffectUnit.IRQ_ACTIVE\nHallEffectUnit.IRQ_NEGATIVE\n```\n\n----------------------------------------\n\nTITLE: Initializing ScrollUnit - MicroPython Constructor\nDESCRIPTION: Creates a ScrollUnit object that interfaces with the hardware via I2C. Takes an I2C object and optional address parameter defaulting to 0x40.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/scroll.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nScrollUnit(i2c, address: int | list | tuple = 0x40)\n```\n\n----------------------------------------\n\nTITLE: Turning On Relay in MicroPython\nDESCRIPTION: Method to turn on the relay switch.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRealyUnit.on()\n```\n\n----------------------------------------\n\nTITLE: Setting LoRaSx1262Module to Sleep Mode\nDESCRIPTION: Code to put the LoRa module into deep sleep mode for maximum power savings during periods of inactivity.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora_sx1262.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlora868v12_0.sleep()\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Y-Axis Value from MiniJoyHat\nDESCRIPTION: Returns the raw y-axis value from the joystick as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_joy.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMiniJoyHat.get_y_raw() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting PIR Detection Status Method\nDESCRIPTION: Method to retrieve the current detection status from the PIR sensor. Returns whether motion is currently detected.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/pir.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPIR.get_status()\n```\n\n----------------------------------------\n\nTITLE: Getting Altitude from GPS Module\nDESCRIPTION: Method to retrieve the current altitude as detected by the GPS module. Returns the altitude in meters as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.get_altitude()\n```\n\n----------------------------------------\n\nTITLE: Setting Brightness for NECO Unit LEDs\nDESCRIPTION: Method to set the brightness level for the entire NECO Unit strip.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/neco.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nNECOUnit.set_brightness(br)\n```\n\n----------------------------------------\n\nTITLE: Initializing NECO Unit in MicroPython\nDESCRIPTION: Constructor for the NECOUnit class. It initializes the unit with a specific port, LED count, and button configuration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/neco.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nNECOUnit(port, number, active_low)\n```\n\n----------------------------------------\n\nTITLE: Sending Specific Number of DMX Slots in C\nDESCRIPTION: This snippet shows how to send a specific number of DMX slots using the dmx_send_num() function. This allows for more control over the amount of data sent.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nconst int num_bytes_to_send = 96;\ndmx_send_num(DMX_NUM_1, num_bytes_to_send);\n```\n\n----------------------------------------\n\nTITLE: Getting I2C Address of AIN4-20mA Unit\nDESCRIPTION: Method that retrieves the current I2C address of the AIN 4-20mA Unit. Returns the address as a string in hexadecimal format.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ain4.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nAIN4_20MAUnit.get_i2c_address() -> str\n```\n\n----------------------------------------\n\nTITLE: Sending RDM Discovery Response in C\nDESCRIPTION: This snippet demonstrates how to send an RDM discovery response packet. It shows that when sending RDM data, the DMX driver automatically adjusts its behavior to meet RDM timing requirements.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_22\n\nLANGUAGE: c\nCODE:\n```\n// This is a hard-coded discovery response packet.\nconst uint8_t discovery_response[] = {\n  0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xaa, 0xaf, 0x55, 0xea, 0xf5, 0xba, \n  0x57, 0xbb, 0xdd, 0xbf, 0x55, 0xba, 0xdf, 0xaa, 0x5d, 0xbb, 0x7d \n};\ndmx_write(DMX_NUM_1, discovery_response, sizeof(discovery_response));\n\n// This function will not send a DMX break or mark-after-break \ndmx_send(DMX_NUM_1);\n```\n\n----------------------------------------\n\nTITLE: Stopping HeartUnit Sensor\nDESCRIPTION: Method to stop the HeartUnit sensor operation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit.stop()\n```\n\n----------------------------------------\n\nTITLE: Setting Pump State in WateringUnit MicroPython\nDESCRIPTION: Method to set the state of the water pump in the Watering Unit. Takes an integer parameter to determine the pump state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/watering.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nWateringUnit.set_pump(state: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Swapping Y-Axis Direction in MiniJoyHat\nDESCRIPTION: Controls whether the y-axis direction is inverted. Takes a boolean parameter to enable or disable swapping.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_joy.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nMiniJoyHat.swap_y(swap: bool = True) -> None\n```\n\n----------------------------------------\n\nTITLE: Configuring DMX Driver with Custom Settings in C\nDESCRIPTION: This code snippet shows how to configure the DMX driver with custom settings. It sets various parameters in the dmx_config_t struct and then installs the driver using these custom configurations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\ndmx_config_t config = {\n  .interrupt_flags = DMX_INTR_FLAGS_DEFAULT,\n  .root_device_parameter_count = 32,\n  .sub_device_parameter_count = 0,\n  .model_id = 0,\n  .product_category = RDM_PRODUCT_CATEGORY_FIXTURE,\n  .software_version_id = ESP_DMX_VERSION_ID,\n  .software_version_label = ESP_DMX_VERSION_LABEL,\n  .queue_size_max = 32\n};\ndmx_driver_install(DMX_NUM_1, &config, personalities, personality_count);\n```\n\n----------------------------------------\n\nTITLE: Getting User Permission from FingerUnit in Python\nDESCRIPTION: Method to get the permission level of a specific user. Returns the permission level if successful, or -1 if unsuccessful.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.get_user_permission(id: int) -> int\n```\n\n----------------------------------------\n\nTITLE: Flushing the GRBL Command Buffer\nDESCRIPTION: Method to clear the command buffer for the GRBL module, ensuring no pending commands remain.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.flush()\n```\n\n----------------------------------------\n\nTITLE: Getting Current from Grove2GroveUnit in Python\nDESCRIPTION: Method to get the current of the sensor. It returns a float value representing the current.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/grove2grove.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nGrove2GroveUnit.get_current() -> float\n```\n\n----------------------------------------\n\nTITLE: Stopping Non-Blocking Data Reception with LoRaE220JPUnit in MicroPython\nDESCRIPTION: Method to stop receiving data in non-blocking mode. Available in working modes 0, 1, and 2.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lora_e220.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nLoRaE220JPUnit.stop_receive() -> None\n```\n\n----------------------------------------\n\nTITLE: Sending RDM_PID_DISC_UN_MUTE Request in C\nDESCRIPTION: Demonstrates how to send an RDM_PID_DISC_UN_MUTE request using the rdm_send_disc_un_mute() function. It shows handling of broadcast UIDs and explains why the response is not processed in this case.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_27\n\nLANGUAGE: c\nCODE:\n```\nrdm_uid_t dest_uid = RDM_UID_BROADCAST_ALL;\nrdm_ack_t ack;\n\nrdm_disc_mute_t mute;  // Stores the response parameter data.\n\nrdm_send_disc_un_mute(DMX_NUM_1, &dest_uid, &mute, &ack);\nif (ack.size > 0) {\n  /* This code will never run because the RDM controller does not receive a\n    response from RDM responders when the destination UID is a broadcast UID.\n    Therefore its return value can be ignored and the function can be passed\n    NULL instead of an rdm_ack_t pointer or an rdm_disc_mute_t pointer. */\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Relay Status in Relay2Module\nDESCRIPTION: Method to get the current status of a specific relay. Takes the relay number (1 or 2) and returns a boolean indicating whether the relay is on (True) or off (False).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/relay_2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRelay2Module.get_relay_status(num)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vibrato Effects\nDESCRIPTION: Method to set vibrato parameters including rate, depth, and delay for a specific MIDI channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_vibrate(channel, rate, depth, delay)\n```\n\n----------------------------------------\n\nTITLE: Getting Satellite Count from GPS V2.0 Module\nDESCRIPTION: Method to get the number of satellites currently being used for positioning.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_satellite_num()\n```\n\n----------------------------------------\n\nTITLE: Initializing ODriveModule Class in Python\nDESCRIPTION: This code defines the constructor for the ODriveModule class, which initializes the module with an ID and port. It's used to create an instance of the ODrive controller.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/odrive.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ODriveModule\n------------------\n\nConstructors\n------------\n\n.. class:: ODriveModule(id, port)\n\n    Initialize the ODriveModule.\n\n    :param int id: \n    :param  port: \n```\n\n----------------------------------------\n\nTITLE: Broadcasting Data to All Zigbee Modules\nDESCRIPTION: Method to broadcast data to all Zigbee modules in the network.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/zigbee.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nZigbeeModule.broadcast(data: bytes)\n```\n\n----------------------------------------\n\nTITLE: Getting IR Value\nDESCRIPTION: Method to retrieve the infrared light reading from the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit.get_ir()\n```\n\n----------------------------------------\n\nTITLE: RollerBase Base Class Definition in Python\nDESCRIPTION: Base class definition for the RollerBase which implements common functionality for RollerCAN motor control. This class provides the foundation for motor configuration and control methods.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass RollerBase()\n```\n\n----------------------------------------\n\nTITLE: Reading UHF-RFID Tag EPC Code in MicroPython\nDESCRIPTION: Method to retrieve the EPC code of a UHF-RFID tag. Returns an empty string if no tag is found.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.inventory() -> str\n```\n\n----------------------------------------\n\nTITLE: Sending DELETE Request with requests2.delete()\nDESCRIPTION: Function to send a DELETE request. It takes a URL and optional keyword arguments, returning a Response object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/requests2.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrequests2.delete(url, **kw)\n```\n\n----------------------------------------\n\nTITLE: Configuring Reverb Effects\nDESCRIPTION: Method to set reverb parameters including program, level, and delay feedback for a specific MIDI channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_reverb(channel, program, level, delayfeedback)\n```\n\n----------------------------------------\n\nTITLE: Reading Humidity Percentage from EARTH Unit in MicroPython\nDESCRIPTION: Method to read the humidity value as a percentage from the EARTH soil moisture sensor. Returns a floating-point value ranging from 0.0 to 1.0, representing 0% to 100% soil moisture.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/earth.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nEARTH.humidity()\n```\n\n----------------------------------------\n\nTITLE: Writing Raw MIDI Commands\nDESCRIPTION: Low-level method to send custom MIDI command bytes directly to the UART interface for advanced control.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.cmd_write(cmd)\n```\n\n----------------------------------------\n\nTITLE: Checking Available Bytes\nDESCRIPTION: Returns the number of characters that can be read without blocking.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs232.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrs232_0.any()\n```\n\n----------------------------------------\n\nTITLE: Getting Rotary Value in MicroPython\nDESCRIPTION: Retrieves the current rotation value of the Rotary object as an integer. This cannot be used simultaneously with get_rotary_increments().\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/rotary.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRotary.get_rotary_value() -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Phase for DDS Unit in MicroPython\nDESCRIPTION: Method to set the phase of the DDS. It takes an index (0 or 1) and the phase in degrees.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit.set_phase(index: int = 0, phase: int = 0) -> None\n```\n\n----------------------------------------\n\nTITLE: Retrieving Longitude from GPS V2.0 Module\nDESCRIPTION: Method to get the current longitude position from the GPS module as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_longitude()\n```\n\n----------------------------------------\n\nTITLE: Setting Vibration Frequency in MicroPython\nDESCRIPTION: Method to set the vibration frequency of the Vibrator Unit. The frequency parameter ranges from 10 to 55Hz.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/vibrator.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nVibratorUnit.set_freq(freq)\n```\n\n----------------------------------------\n\nTITLE: SCD40 CRC Checking Methods\nDESCRIPTION: Methods for performing CRC-8 checksum verification on sensor data to ensure data integrity during communication.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/scd40.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef check_crc(buf):\n    \"\"\"Check the CRC of the received data to ensure it is correct.\n    :param bytearray buf: The buffer of bytes to check the CRC.\n    \"\"\"\n\ndef crc8(buffer):\n    \"\"\"Calculate the CRC-8 checksum for a given buffer.\n    :param bytearray buffer: The buffer of bytes to calculate the CRC for.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Writing DMX Slots with Offset and Individual Slot Writing in C\nDESCRIPTION: This code demonstrates how to write DMX slots with an offset using dmx_write_offset() and how to write individual DMX slots using dmx_write_slot(). It provides more granular control over DMX data writing.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nuint8_t data[DMX_PACKET_SIZE] = { 0, 1, 2, 3 };\n\n// Write slots 10 through 17 (inclusive)\nconst int offset = 10;\nconst size_t size = 7;\ndmx_write_offset(DMX_NUM_1, offset, data, size);\n\n// Set slot number 5 to value 127.\nconst int slot_num = 5;\nconst uint8_t value = 127;\ndmx_write_slot(DMX_NUM_1, slot_num, value);\n\n// Don't forget to call dmx_send()!\n```\n\n----------------------------------------\n\nTITLE: Roller485 RS485 to I2C Bridge Example\nDESCRIPTION: Example demonstrating RS485 to I2C bridging functionality of the Roller485 unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/roller485.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[Code reference to ../../../examples/unit/roller485/roller485_485toi2c_fire_example.py]\n```\n\n----------------------------------------\n\nTITLE: Sending RDM_PID_DISC_UNIQUE_BRANCH Request in C\nDESCRIPTION: Illustrates how to send an RDM_PID_DISC_UNIQUE_BRANCH request using the rdm_send_disc_unique_branch() function. It includes handling of different response types and error checking.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_26\n\nLANGUAGE: c\nCODE:\n```\nrdm_ack_t ack;\n\n// Define the address space within which devices will be discovered.\nconst rdm_disc_unique_branch_t branch = {\n  .upper_bound = RDM_UID_MAX,\n  .lower_bound = 0  // Set to 0000:00000000\n};\n\nrdm_send_disc_unique_branch(DMX_NUM_1, &branch, &ack);\nif (ack.size > 0) {\n  // Got a response!\n  if (ack.type == RDM_RESPONSE_TYPE_ACK) {\n    // Only one device was found - print its UID.\n    printf(\"Found the UID \" UIDSTR \".\\n\", UID2STR(ack.src_uid));\n  } else if (ack.type == RDM_RESPONSE_TYPE_INVALID) {\n    // The checksum was invalid indicating a data collision occurred.\n    printf(\"Multiple devices detected within this address space!\\n\");\n\n    // Branch the address space here...\n\n  }\n} else {\n  // No response was received - stop searching this address space.\n  printf(\"No RDM devices were discovered in this address space.\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Relay Mode in MicroPython\nDESCRIPTION: Method to set the operation mode of the relay to either asynchronous or synchronous.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay4.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRelay4Unit.set_mode(mode: int)\n```\n\n----------------------------------------\n\nTITLE: Applying Color Saturation Effect in PuzzleUnit\nDESCRIPTION: Gradually changes the color saturation from begin to end on a range of LEDs. This method creates a smooth transition effect across multiple LEDs.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/puzzle.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nPuzzleUnit.set_color_saturation_from(board_num, begin, end, rgb_color, per_delay)\n```\n\n----------------------------------------\n\nTITLE: LoraModule Class Constructor\nDESCRIPTION: Initializes the LoRa module with specified pin configurations and radio parameters. Parameters include pin assignments, frequency band, spreading factor, bandwidth, coding rate, preamble length, and output power settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLoraModule(pin_cs, pin_irq, pin_rst, freq_band, sf, bw, coding_rate, preamble_len, output_power)\n```\n\n----------------------------------------\n\nTITLE: Managing DMX Personalities in C\nDESCRIPTION: This code demonstrates how to work with DMX personalities, including getting and setting the current personality, retrieving personality descriptions, and footprint sizes. It uses various DMX-related functions to manage these parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nconst uint8_t personality_count = dmx_get_personality_count(DMX_NUM_1);\nuint8_t current_personality = dmx_get_current_personality(DMX_NUM_1);\nif (current_personality < personality_count) {\n  // Increment the personality.\n  current_personality++;\n  /* It is ok if current_personality == personality_count because personalities\n    start at 1, not 0! */\n\n  // Get and print the new personality description and footprint.\n  const char *desc = dmx_get_personality_description(DMX_NUM_1, \n                                                     current_personality);\n  uint16_t footprint = dmx_get_footprint(DMX_NUM_1, current_personality);\n  printf(\"Setting the current personality to %i: '%s'\\n\", current_personality,\n         desc);\n  printf(\"Personality %i has a footprint of %i\\n\", current_personality,\n         footprint);\n  \n  dmx_set_current_personality(DMX_NUM_1, current_personality);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing NCIRHat Class in MicroPython\nDESCRIPTION: Creates an NCIRHat object for interfacing with the NCIR Hat. It requires an I2C object and optionally accepts an I2C address (default 0x5A).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/ncir.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass NCIRHat(i2c, address: int = 0x5A)\n```\n\n----------------------------------------\n\nTITLE: Getting Course Data\nDESCRIPTION: Method to retrieve the current course (heading) in degrees from the GNSS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef get_course():\n    # get course.\n    # :return (str): course unit is °.\n```\n\n----------------------------------------\n\nTITLE: Getting Processed Y-Axis Value from Joystick in MicroPython\nDESCRIPTION: Retrieves the processed y-axis value from the joystick. Returns an integer representing the y-axis position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joystick.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nJoystickHat.get_y() -> int\n```\n\n----------------------------------------\n\nTITLE: MIDI Utility Methods\nDESCRIPTION: Utility methods for MIDI operations including command writing and value mapping.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/midi.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef cmd_write(cmd)\ndef map(x, in_min, in_max, out_min, out_max)\n```\n\n----------------------------------------\n\nTITLE: Caution Against Long Operations Before RDM Response in C\nDESCRIPTION: Shows a pattern to avoid - performing lengthy operations between receiving a packet and sending an RDM response. This could violate the RDM timing requirements of responding within 3ms.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_29\n\nLANGUAGE: c\nCODE:\n```\ndmx_packet_t packet;\nif (dmx_receive(DMX_NUM_1, &packet, DMX_TIMEOUT_TICK)) {\n\n  // Caution! Printing log messages may take too long!\n  printf(\"A DMX packet has been received!\");\n\n  if (packet.is_rdm) {\n    rdm_send_response(DMX_NUM_1);  // Only sends responses to relevant requests\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Scale Tuning\nDESCRIPTION: Method to customize the tuning values for each of the 12 notes in the scale on a specific MIDI channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_scale_tuning(channel, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)\n```\n\n----------------------------------------\n\nTITLE: Checking Button Status on MiniJoyHat\nDESCRIPTION: Returns the current button status (pressed or not pressed) as a boolean value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_joy.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nMiniJoyHat.get_button_status() -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting PM2.5 Module Power State\nDESCRIPTION: Method to retrieve the current power state of the PM2.5 Module. Returns a boolean indicating whether the module is powered on.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pm25.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPM25Module.get_module_power() -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Rotary Encoder Value in MicroPython\nDESCRIPTION: Method to set the rotation value of the Encoder Unit to a specified integer value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nEncoderUnit.set_rotary_value(new_value: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Writing Memory Bank in UHFRFIDUnit (MicroPython)\nDESCRIPTION: This method writes data to a specified memory bank of a UHFRFID tag. It takes parameters for the bank type, offset, data to write, and access password. The data is provided as a hexadecimal string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.write_mem_bank(bank: int, offset: int, data: str, access_password: str = \"00000000\")\n```\n\n----------------------------------------\n\nTITLE: Setting Color for Specific LED on FaderUnit in MicroPython\nDESCRIPTION: Method to set the color of a specific RGB lamp bead on the Fader unit. Takes the lamp bead index and a 3-byte RGB888 color value as parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/fader.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nFaderUnit.set_color(i, c: int)\n```\n\n----------------------------------------\n\nTITLE: Setting Drum Instruments on Channel 10\nDESCRIPTION: Method to play a drum sound on MIDI channel 10 with specified pitch and velocity parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_drums_instrument(drum_pitch, velocity)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Modbus Server in MicroPython\nDESCRIPTION: Establishes a connection to the Modbus server. This method should be called before performing any Modbus operations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.client.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPClient.connect() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Pin to High Level in MicroPython\nDESCRIPTION: Method to set a GPIO pin to high level (1). This is a convenience function equivalent to setting value to 1.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/pin.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPin.on() -> None\n```\n\n----------------------------------------\n\nTITLE: Turning On Grove2GroveUnit in Python\nDESCRIPTION: Method to turn on the grove. It doesn't take any parameters and doesn't return anything.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/grove2grove.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nGrove2GroveUnit.on() -> None\n```\n\n----------------------------------------\n\nTITLE: Checking Motor Lock State\nDESCRIPTION: Method to check if the motors are in a locked state. Returns a boolean value indicating the lock state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.get_lock_state()\n```\n\n----------------------------------------\n\nTITLE: Getting Timestamp from GPS V2.0 Module\nDESCRIPTION: Method to get the current GPS time as a timestamp value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_timestamp()\n```\n\n----------------------------------------\n\nTITLE: Getting GPS V2.0 Module Work Mode\nDESCRIPTION: Method to retrieve the current working mode of the GPS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_work_mode()\n```\n\n----------------------------------------\n\nTITLE: Initializing Vibrator Unit in MicroPython\nDESCRIPTION: Constructor for creating a VibratorUnit object with an optional port parameter. The port parameter specifies where the Vibrator Unit is connected.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/vibrator.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nVibratorUnit(port: tuple = (26, 0))\n```\n\n----------------------------------------\n\nTITLE: Sending PATCH Request with requests2.patch()\nDESCRIPTION: Function to send a PATCH request. It takes a URL and optional keyword arguments, returning a Response object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/requests2.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrequests2.patch(url, **kw)\n```\n\n----------------------------------------\n\nTITLE: Defining System Module Documentation Structure in ReStructuredText\nDESCRIPTION: This snippet outlines the structure of the system module documentation using ReStructuredText directives. It includes a reference file and defines a table of contents for various submodules.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nSystem\n======\n\n.. include:: ../refs/system.ref\n\n.. toctree::\n    :maxdepth: 1\n\n    audio.rst\n    bleuart.rst\n    m5ble.rst\n    power.rst\n    time.rst\n    m5espnow.rst\n    wlan.sta.rst\n    wlan.ap.rst\n```\n\n----------------------------------------\n\nTITLE: Class Attribute Template in Python\nDESCRIPTION: Template showing class attribute implementation with pass statement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/contribute/template.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npass\n```\n\n----------------------------------------\n\nTITLE: Getting Digital Input Status in MicroPython\nDESCRIPTION: Retrieves the current status of a digital input pin as a boolean value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/plcio.digitalinput.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nin1.get_status()\n```\n\n----------------------------------------\n\nTITLE: Coefficient Management Methods\nDESCRIPTION: Methods for getting and setting voltage and current coefficients, including functionality to save these coefficients to flash memory.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ac_measure.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_voltage_coeff(self):\n\ndef set_voltage_coeff(self, value):\n\ndef get_current_coeff(self):\n\ndef set_current_coeff(self, value):\n\ndef set_save_coeff(self):\n```\n\n----------------------------------------\n\nTITLE: Setting I2C Address for AIN4-20mA Unit\nDESCRIPTION: Method to change the I2C address of the AIN 4-20mA Unit. Takes an integer parameter 'addr' which must be between 0x08 and 0x77, representing the new I2C address to set.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ain4.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nAIN4_20MAUnit.set_i2c_address(addr)\n```\n\n----------------------------------------\n\nTITLE: Initializing PLUSModule Class in Python\nDESCRIPTION: This snippet shows the constructor for the PLUSModule class. It initializes the PLUS Module with a specified I2C address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/plus.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PLUSModule:\n    def __init__(self, address):\n        # Init I2C Module PLUS I2C Address.\n        pass\n```\n\n----------------------------------------\n\nTITLE: Registering an RDM Parameter with a Callback in C\nDESCRIPTION: Shows how to register an RDM parameter (software version label) with a custom callback function. This allows the application to be notified when specific RDM requests are received.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_31\n\nLANGUAGE: c\nCODE:\n```\nvoid *context = NULL;  // Context not needed for the above callback \nconst char *new_software_label = \"My Custom Software\";\nif (rdm_register_software_version_label(DMX_NUM_1, new_software_label, \n                                        custom_callback, context)) {\n  printf(\"A new software version label has been registered!\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Face Recognition Method API\nDESCRIPTION: Method definition for face recognition functionality returning RecognitionResult\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/dl.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nHumanFaceRecognizer.recognize(img: image:Image, keypoint: tuple) -> RecognitionResult\n```\n\n----------------------------------------\n\nTITLE: Setting Gyroscope Calibration Offsets\nDESCRIPTION: Method to manually set calibration offset values for the gyroscope on all three axes (X, Y, Z).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef set_gyro_offsets(x, y, z):\n    # Set the manual gyro calibrations offsets value.\n    # :param  x: gyro calibrations offsets value of X-axis\n    # :param  y: gyro calibrations offsets value of Y-axis\n    # :param  z: gyro calibrations offsets value of Z-axis\n```\n\n----------------------------------------\n\nTITLE: Setting LaserTX Unit State in Python\nDESCRIPTION: Method to set the laser state to either on or off using PIN_MODE. This provides a boolean control for the laser emission.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/laser_tx.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef value(self, x):\n    # Set laser state\n    pass\n```\n\n----------------------------------------\n\nTITLE: MQTT Callback Function Pattern for NB-IoT in MicroPython\nDESCRIPTION: Example of a callback function that gets triggered when a message is received on a subscribed MQTT topic. It prints both the topic and message content.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/nbiot.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef nbiot_0_xxxxxxxx_event(_topic, _msg):\n    print(\"topic:\", _topic)\n    print(\"msg:\", _msg)\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple Coils Event Constant\nDESCRIPTION: Modbus function code 15 constant for writing to multiple coils operation\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.WRITE_MULTIPLE_HOLDING_REGISTERS_EVENT\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Date from GPS V2.0 Module\nDESCRIPTION: Method to get the current GPS date. Returns a list of strings in [day, month, year] format.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_gps_date()\n```\n\n----------------------------------------\n\nTITLE: Setting DAC Output Voltage Range - Python\nDESCRIPTION: Sets the output voltage range of the DAC. The range can be either DAC2Unit.RANGE_5V or DAC2Unit.RANGE_10V.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dac2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDAC2Unit.setDACOutputVoltageRange(_range)\n```\n\n----------------------------------------\n\nTITLE: Swapping X-Axis Direction of Joystick in MicroPython\nDESCRIPTION: Swaps the x-axis direction of the joystick. Takes a boolean parameter to enable or disable swapping.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joystick.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nJoystickHat.swap_x(swap: bool = True) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Up Non-Blocking Data Reception\nDESCRIPTION: Method to configure asynchronous data reception with a callback function for handling received data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/zigbee.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nZigbeeModule.receive_none_block(receive_callback)\n```\n\n----------------------------------------\n\nTITLE: Setting Power Off Time for TimerPWR Unit\nDESCRIPTION: Method to set the power off time. Takes hours, minutes, and seconds as parameters to specify when the unit should power off.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.set_power_off_time(hours, mintues, seconds)\n```\n\n----------------------------------------\n\nTITLE: Getting Rotary Encoder Status in MicroPython\nDESCRIPTION: Method to retrieve the rotation status of the Encoder Unit, returning a boolean value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nEncoderUnit.get_rotary_status() -> bool\n```\n\n----------------------------------------\n\nTITLE: LoraModule Constants Definition\nDESCRIPTION: Constants for specifying the LoRa frequency band options (433MHz or 868MHz) and valid bandwidth settings. These are used during module initialization to configure the radio parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nLoraModule.LORA_433\nLoraModule.LORA_868\nLoraModule.BANDWIDTHS\n```\n\n----------------------------------------\n\nTITLE: Motor Output State Control Methods in RollerBase\nDESCRIPTION: Methods for controlling and reading the motor output state. set_motor_output_state() enables or disables motor output, while get_motor_output_state() returns the current state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef set_motor_output_state(ctrl) -> None:\n    \n    Set the motor output state.\n\n    :param int ctrl: Control value for the motor output.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_output_state() -> bool:\n    \n    Get the motor output status.\n\n    :return: True if the motor output is active, False otherwise.\n```\n\n----------------------------------------\n\nTITLE: Creating DAC2Unit Instance - Python\nDESCRIPTION: Creates a DAC2Unit object for interfacing with a GP8413 15-bit Digital to Analog Converter. Requires an I2C port and optionally an I2C address (defaults to 0x59).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dac2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDAC2Unit(i2c0, addr)\n```\n\n----------------------------------------\n\nTITLE: Turning Off All Notes on a Channel\nDESCRIPTION: Method to send a MIDI Control Change message that turns off all active notes on the specified channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_all_notes_off(channel)\n```\n\n----------------------------------------\n\nTITLE: Starting Receive Mode in LoRaSx1262Module\nDESCRIPTION: Code to initiate the data reception process for the LoRa module. This method must be called after setting up the IRQ callback to begin listening for incoming transmissions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora_sx1262.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlora868v12_0.start_recv()\n```\n\n----------------------------------------\n\nTITLE: Resuming Audio Recording in MicroPython\nDESCRIPTION: Resumes a previously paused audio recording session.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.recorder.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nRecorder.resume()\n```\n\n----------------------------------------\n\nTITLE: Checking Available RS485 Data\nDESCRIPTION: Check number of characters available to read without blocking.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs485.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrs485_0.any()\n```\n\n----------------------------------------\n\nTITLE: Setting PIR Callback in MicroPython\nDESCRIPTION: Sets up a polling method to continuously check the PIR sensor status. This should be placed in a loop function.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/pir.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPIRHat.set_callback()\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Brightness in Widgets Module\nDESCRIPTION: Sets the backlight brightness of the monitor. The brightness parameter accepts values from 0 to 255.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWidgets.setBrightness(brightness: int)\n```\n\n----------------------------------------\n\nTITLE: Getting Object Temperature from NCIR Sensor\nDESCRIPTION: Method to retrieve the temperature of an object being measured by the NCIR sensor. Returns the non-contact infrared temperature reading of the target object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/ncir.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nncir.get_object_temperature()\n```\n\n----------------------------------------\n\nTITLE: Creating a RelayUnit Object in MicroPython\nDESCRIPTION: Constructor for creating a RelayUnit object that controls a relay switch. Requires specification of the IO pin for controlling the relay.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nRelayUnit(io)\n```\n\n----------------------------------------\n\nTITLE: Configuring Modulation Wheel Parameters\nDESCRIPTION: Method to set comprehensive modulation wheel parameters affecting pitch, cutoff, amplitude, and other modulation aspects for a channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_mod_wheel(channel, pitch, tvtcutoff, amplitude, rate, pitchdepth, tvfdepth, tvadepth)\n```\n\n----------------------------------------\n\nTITLE: Initializing TimerPWR Unit in MicroPython\nDESCRIPTION: Constructor for creating a TimerPWR object with I2C communication. Requires an I2C object and accepts an optional address parameter which defaults to 0x56.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit(i2c, address)\n```\n\n----------------------------------------\n\nTITLE: Setting Accelerometer Range\nDESCRIPTION: Method to configure the accelerometer's scale range with options for ±2g, ±4g, ±8g and ±16g sensitivity levels.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef set_accel_range(accel_scale):\n    # Set the accelerometer scale range.\n    # :param  accel_scale: scale range of ±2g, ±4g, ±8g and ±16g.\n    #     Options:\n    #     - ``2``: 2\n    #     - ``4``: 4\n    #     - ``8``: 8\n    #     - ``16``: 16\n```\n\n----------------------------------------\n\nTITLE: Controlling Image Visibility\nDESCRIPTION: Method to toggle the visibility of the Image widget using a boolean parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/image.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nImage.setVisible(visible: bool)\n```\n\n----------------------------------------\n\nTITLE: Creating OPUnit Object in MicroPython\nDESCRIPTION: This snippet shows how to create an OPUnit object in MicroPython. The constructor takes an 'io' parameter which represents the detection pin.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/op90.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nOPUnit(io)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Tree Structure\nDESCRIPTION: Sphinx documentation toctree directive listing all available controller documentation pages in a hierarchical structure with maxdepth of 1.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/controllers/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    cores3.rst\n    atoms3.rst\n    atoms3-lite.rst\n    atoms3u.rst\n    stamps3.rst\n    cardputer.rst\n    coreink.rst\n    airq.rst\n    paper.rst\n    dinmeter.rst\n```\n\n----------------------------------------\n\nTITLE: Detection Result Access Methods\nDESCRIPTION: Methods to access detection results including bounding box coordinates and keypoints\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/dl.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDetectionResult.bbox() -> tuple(x, y, w, h)\nDetectionResult.x() -> int\nDetectionResult.y() -> int\nDetectionResult.w() -> int\nDetectionResult.h() -> int\nDetectionResult.category() -> int\nDetectionResult.keypoint() -> tuple\n```\n\n----------------------------------------\n\nTITLE: Configuring DLight Measurement Mode\nDESCRIPTION: Method to configure the sensor's measurement mode (continuous/single) and resolution settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dlight.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDLightUnit.configure()\n```\n\n----------------------------------------\n\nTITLE: Adjusting LED Brightness in PuzzleUnit\nDESCRIPTION: Adjusts the brightness of all LEDs based on the given percentage. This method allows global brightness control for the PuzzleUnit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/puzzle.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPuzzleUnit.set_brightness(br)\n```\n\n----------------------------------------\n\nTITLE: Setting Color for Single LED in NECO Unit\nDESCRIPTION: Method to set the color of a single LED at a specified index on the NECO Unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/neco.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nNECOUnit.set_color(i, c)\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for M5Stack Controller Documentation\nDESCRIPTION: This reStructuredText (RST) code creates a table of contents for M5Stack controller documentation. It defines a section titled 'Controllers' and uses the toctree directive to list all the controller documentation files that should be included in the documentation structure.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/controllers/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nControllers\n============\n\n.. toctree::\n\n    cores3.rst\n    atoms3.rst\n    atoms3-lite.rst\n    atoms3u.rst\n    stamps3.rst\n    cardputer.rst\n    coreink.rst\n    airq.rst\n    paper.rst\n    dinmeter.rst\n```\n\n----------------------------------------\n\nTITLE: Resetting Count Value of OPUnit in MicroPython\nDESCRIPTION: This snippet shows how to reset the meter value of an OPUnit object in MicroPython.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/op90.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nOPUnit.count_reset()\n```\n\n----------------------------------------\n\nTITLE: Stopping QR Code Decoding\nDESCRIPTION: Stops the QR code decoding process\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.stop_decode()\n```\n\n----------------------------------------\n\nTITLE: Setting PPS Output Voltage\nDESCRIPTION: Sets the output voltage of the PPS between 0.0 and 30.0 volts.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.set_output_voltage(voltage: float)\n```\n\n----------------------------------------\n\nTITLE: Checking UWB Unit Connection in MicroPython\nDESCRIPTION: Method to verify if the UWB unit is properly connected to the M5Stack device.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit.isconnected()\n```\n\n----------------------------------------\n\nTITLE: RGB LED Control Methods in RollerBase\nDESCRIPTION: Methods for controlling RGB LED settings, including brightness, color, and mode. These functions allow customizing the visual feedback provided by the device's integrated LEDs.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef set_rgb_brightness(bright) -> None:\n    \n    Set RGB brightness.\n\n    :param int bright: Brightness value.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_rgb_brightness() -> int:\n    \n    Get RGB brightness.\n\n    :return: The current RGB brightness value.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_rgb_color(rgb) -> None:\n    \n    Set the system RGB color.\n\n    :param int rgb: The RGB color value, where the format is 0xRRGGBB.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_rgb_color() -> tuple:\n    \n    Get the system RGB color.\n\n    :return: The RGB color as a tuple (R, G, B).\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_rgb_mode(mode) -> None:\n    \n    Set the system RGB mode.\n\n    :param int mode: The RGB mode value.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_rgb_mode() -> int:\n    \n    Get the system RGB mode.\n\n    :return: The current RGB mode value.\n```\n\n----------------------------------------\n\nTITLE: Setting Trigger Mode\nDESCRIPTION: Configures the trigger mode for QR code scanning\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.set_trigger_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Setting PPS I2C Address\nDESCRIPTION: Sets a new I2C address for the PPS device. The new address is provided as an integer parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.set_i2c_address(new_address: int)\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from a TCP Socket in MicroPython\nDESCRIPTION: This code demonstrates how to receive data from a connected TCP socket. The recv method takes a buffer size parameter that specifies the maximum amount of data to be received at once.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.client.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = tcpc.recv(1024)\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Getting Specific PM Data from PM2.5 Module\nDESCRIPTION: Method to retrieve specific particulate matter data from the PM2.5 Module. The data_num parameter specifies which type of data to retrieve, from standard PM concentrations to particle counts of specific sizes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pm25.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nPM25Module.get_pm_data(data_num)\n```\n\n----------------------------------------\n\nTITLE: Reading Analog Value from EARTH Unit in MicroPython\nDESCRIPTION: Method to read the analog value captured by the EARTH soil moisture sensor. Returns an integer value ranging from 0 to 65535, representing the soil moisture level.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/earth.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nEARTH.get_analog_value()\n```\n\n----------------------------------------\n\nTITLE: Starting HeartUnit Sensor\nDESCRIPTION: Method to start the HeartUnit sensor operation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit.start()\n```\n\n----------------------------------------\n\nTITLE: Device Configuration Methods\nDESCRIPTION: Methods for configuring device settings including I2C address, IRQ functionality, and flash storage.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/byteswitch.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef set_i2c_address(self, new_addr):\n\ndef get_firmware_version(self) -> int:\n\ndef save_to_flash(self):\n```\n\n----------------------------------------\n\nTITLE: Setting Gyroscope Range\nDESCRIPTION: Method to configure the gyroscope's scale range with options for different degrees per second sensitivity levels.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef set_gyro_range(gyro_scale):\n    # Set the gyroscope scale range.\n    # :param  gyro_scale: \n    #     Options:\n    #     - ``125``: 125\n    #     - ``250``: 250\n    #     - ``500``: 500\n    #     - ``1000``: 1000\n    #     - ``2000``: 2000\n```\n\n----------------------------------------\n\nTITLE: Retrieving Button Status from TimerPWR Unit\nDESCRIPTION: Method to get the status of a specified button (A or B). Returns True if the button is pressed, False otherwise.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.get_button_status(btn)\n```\n\n----------------------------------------\n\nTITLE: Setting Tone-Voltage Filter (TVF)\nDESCRIPTION: Method to configure the cutoff frequency and resonance for a tone-voltage filter on a specific MIDI channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_tvf(channel, cutoff, resonance)\n```\n\n----------------------------------------\n\nTITLE: Referencing USB Device Documentation in reStructuredText\nDESCRIPTION: This reStructuredText directive creates a table of contents that links to the 'device/index.rst' file with a depth of 1, organizing the USB device documentation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    device/index.rst\n```\n\n----------------------------------------\n\nTITLE: Checking Data Availability in M5BLE Connected Client (Python)\nDESCRIPTION: This method checks for data availability for reading on a connected client. It returns the byte size of the buffer if data is available. It requires the UUID of the characteristic.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/m5ble.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconnected_client_handle.any(uuid)\n```\n\n----------------------------------------\n\nTITLE: Creating OP180 Object in MicroPython\nDESCRIPTION: This snippet shows the constructor for the OP180 class. It takes an 'io' parameter which represents the detection pin.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/op180.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nOP180(io)\n```\n\n----------------------------------------\n\nTITLE: Initializing Rotary Class in MicroPython\nDESCRIPTION: Creates a Rotary object to interface with the rotary encoder on M5Stack devices. This constructor initializes the rotary encoder functionality.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/rotary.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nRotary()\n```\n\n----------------------------------------\n\nTITLE: Including ESP32 Common CMake Configuration for M5Stack UIFlow\nDESCRIPTION: This snippet includes the ESP32 common CMake configuration file. It uses a relative path from the current list directory instead of the commented-out port directory path.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/main_esp32/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# include(${MICROPY_PORT_DIR}/esp32_common.cmake)\ninclude(${CMAKE_CURRENT_LIST_DIR}/../esp32_common.cmake)\n```\n\n----------------------------------------\n\nTITLE: ADC Gain Setter\nDESCRIPTION: Sets the gain multiple for reading ADC data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nADCUnit.gain()\n```\n\n----------------------------------------\n\nTITLE: Creating NCIRUnit Instance\nDESCRIPTION: Constructor for initializing an NCIRUnit object with I2C communication. Requires an I2C interface parameter for initialization.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ncir.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nNCIRUnit(i2c)\n```\n\n----------------------------------------\n\nTITLE: Getting Low-Pass Filter Configuration for Motion Detection\nDESCRIPTION: Method to get the current low-pass filter configuration used for motion detection. Returns the filter bandwidth setting.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.get_lpf_m_bandwidth() -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Ambient Temperature Shock Hysteresis in TMOSUnit\nDESCRIPTION: Method to set the hysteresis value for the ambient temperature shock detection algorithm. Accepts a hysteresis value between 0x0 and 0xFF.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_tambient_shock_hysteresis(val)\n```\n\n----------------------------------------\n\nTITLE: Setting EMA Filter Alpha on MiniScaleUnit\nDESCRIPTION: Method to set the alpha value for the Exponential Moving Average (EMA) filter on the MiniScaleUnit sensor. The alpha value ranges from 0 to 99, with smaller values providing smoother results but increased latency.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.set_ema_filter_alpha(alpha)\n```\n\n----------------------------------------\n\nTITLE: Initializing RFIDUnit Class in Micropython\nDESCRIPTION: Constructor for the RFIDUnit class that takes an I2C interface instance and an optional address parameter. The default I2C address is 0x28.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rfid.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nRFIDUnit(i2c, address)\n```\n\n----------------------------------------\n\nTITLE: Sending Break Condition on UART in MicroPython\nDESCRIPTION: This snippet demonstrates how to send a break condition on the UART bus.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nuart1.sendbreak()\n```\n\n----------------------------------------\n\nTITLE: Getting PPS I2C Address\nDESCRIPTION: Returns the current I2C address of the PPS device as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.get_i2c_address() -> int\n```\n\n----------------------------------------\n\nTITLE: Deleting User from FingerUnit in Python\nDESCRIPTION: Method to delete a user from the fingerprint module. It takes a user ID as a parameter and returns the deleted user ID if successful, or -1 if unsuccessful.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.delete_user(id: int) -> int\n```\n\n----------------------------------------\n\nTITLE: Set Buzzer Duty Cycle Method\nDESCRIPTION: Sets the duty cycle of the buzzer vibration. Accepts values between 0 and 100 percent.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/buzzer.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nBuzzerUnit.set_duty(duty: int)\n```\n\n----------------------------------------\n\nTITLE: Positioning Motors to Specific Coordinates\nDESCRIPTION: Method to turn motors to specific positions with defined speed. Position values of 1.6 represent a complete 360° rotation for each axis.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.turn(x, y, z, speed)\n```\n\n----------------------------------------\n\nTITLE: Setting RGB LED Color on MiniScaleUnit\nDESCRIPTION: Method to set the RGB LED color on the Miniscale unit. It accepts red, green, and blue values between 0-255.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/miniscale.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.setLed(r, g, b)\n```\n\n----------------------------------------\n\nTITLE: Swapping Y-Axis Direction on Joystick\nDESCRIPTION: Method to swap the y-axis direction of the joystick. Takes a boolean parameter to enable or disable swapping.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/joystick.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nJoystickUnit.swap_y(swap: bool = True) -> None\n```\n\n----------------------------------------\n\nTITLE: Swapping Y-Axis Direction of Joystick in MicroPython\nDESCRIPTION: Swaps the y-axis direction of the joystick. Takes a boolean parameter to enable or disable swapping.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joystick.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nJoystickHat.swap_y(swap: bool = True) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Color for All RGB LEDs\nDESCRIPTION: Method to set the same color for all RGB LEDs using a 3-byte RGB888 color value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rgb.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nRGB.fill_color(c: int)\n```\n\n----------------------------------------\n\nTITLE: Checking Location Validity\nDESCRIPTION: Method to check if the current location data from the GNSS module is valid. Returns a boolean value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef is_locate_valid():\n    # get locate status.\n    # :return (bool): locate status, true is locate, false is not locate.\n```\n\n----------------------------------------\n\nTITLE: Managing DMX Start Address in C\nDESCRIPTION: This snippet shows how to get and set the DMX start address using dmx_get_start_address() and dmx_set_start_address(). It also demonstrates how to ensure the address stays within valid bounds.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n// Get the DMX start address and increment it by one\nuint16_t dmx_start_address = dmx_get_start_address(DMX_NUM_1);\ndmx_start_address++;\nif (dmx_start_address >= DMX_PACKET_SIZE_MAX) {\n  dmx_start_address = 1;  // Ensure DMX start address is within bounds\n}\ndmx_set_start_address(DMX_NUM_1, dmx_start_address);\n```\n\n----------------------------------------\n\nTITLE: Turning On SSR Unit in MicroPython\nDESCRIPTION: Method to turn on the Solid-State Relay, which will allow AC power to flow through the connected circuit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ssr.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSSRUnit.on()\n```\n\n----------------------------------------\n\nTITLE: Setting Servo Angle\nDESCRIPTION: Controls servo position (1-4) and angle (0-180 degrees).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/bala2.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmodule_bala2_0.set_servo_angle(pos, angle)\n```\n\n----------------------------------------\n\nTITLE: Performing Self-Test for CO2L Unit in MicroPython\nDESCRIPTION: Method to perform a self-test on the sensor, which can take up to 10 seconds.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.set_self_test()\n```\n\n----------------------------------------\n\nTITLE: Setting ADC Operating Mode\nDESCRIPTION: Method to configure the ADC operating mode. Allows switching between continuous and single conversion modes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc_v11.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef set_mode(self, mode):\n```\n\n----------------------------------------\n\nTITLE: Encoder Counter Management Methods\nDESCRIPTION: Methods for reading and manipulating encoder counter values. Includes functions to get, set, and reset counter values for specific channels.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder8.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_counter_value(self, channel=1):\n    # Get counter value\n\ndef set_counter_value(self, channel=1, value=0):\n    # Set counter value\n\ndef reset_counter_value(self, channel=1):\n    # Reset counter value\n```\n\n----------------------------------------\n\nTITLE: Creating TOC Structure for HAT Modules in RST Format\nDESCRIPTION: This RST (reStructuredText) code defines a table of contents structure for M5Stack HAT module documentation. It lists all available HAT module documentation pages that are part of the UIFlow MicroPython ecosystem.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nHAT\n===\n\n.. toctree::\n    :maxdepth: 1\n\n    adc.rst\n    cardkb.rst\n    dac.rst\n    dac2.rst\n    dlight.rst\n    env.rst\n    finger.rst\n    heart.rst\n    joyc.rst\n    joystick.rst\n    mini_encoder.rst\n    mini_joy.rst\n    ncir.rst\n    neoflash.rst\n    pir.rst\n    servo.rst\n    servo8.rst\n    speaker.rst\n    speaker2.rst\n    thermal.rst\n    tof.rst\n    vibrator.rst\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Unit Modules in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents using reStructuredText syntax. It lists all the available Unit modules as separate .rst files, organized with a maximum depth of 1.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nUnit\n====\n\n.. toctree::\n    :maxdepth: 1\n\n    ac_measure.rst\n    accel.rst\n    acssr.rst\n    adc.rst\n    adc_v11.rst\n    ain4.rst\n    angle.rst\n    angle8.rst\n    asr.rst\n    bps.rst\n    button.rst\n    buzzer.rst\n    bytebutton.rst\n    byteswitch.rst\n    can.rst\n    cardkb.rst\n    catch.rst\n    co2.rst\n    co2l.rst\n    color.rst\n    dac.rst\n    dac2.rst\n    dcssr.rst\n    dds.rst\n    digi_clock.rst\n    dlight.rst\n    dmx.rst\n    dualbutton.rst\n    earth.rst\n    encoder.rst\n    encoder8.rst\n    env.rst\n    envpro.rst\n    extencoder.rst\n    extio.rst\n    extio2.rst\n    fader.rst\n    finger.rst\n    flash_light.rst\n    glass.rst\n    glass2.rst\n    gps_v11.rst\n    grove2grove.rst\n    hall_effect.rst\n    heart.rst\n    id.rst\n    imu.rst\n    imupro.rst\n    ir.rst\n    joystick.rst\n    joystick2.rst\n    key.rst\n    kmeter_iso.rst\n    kmeter.rst\n    laser_rx.rst\n    laser_tx.rst\n    lcd.rst\n    light.rst\n    limit.rst\n    lora_e220.rst\n    lora_e220_433.rst\n    lorawan_rui3.rst\n    midi.rst\n    minioled.rst\n    miniscale.rst\n    mqtt.rst\n    mqttpoe.rst\n    nbiot.rst\n    nbiot2.rst\n    ncir.rst\n    neco.rst\n    oled.rst\n    op90.rst\n    op180.rst\n    pdm.rst\n    pir.rst\n    puzzle.rst\n    qrcode.rst\n    rca.rst\n    reflective_ir.rst\n    relay.rst\n    relay4.rst\n    rf433r.rst\n    rf433t.rst\n    rfid.rst\n    rgb.rst\n    roller485.rst\n    rollercan.rst\n    scales.rst\n    scroll.rst\n    ssr.rst\n    synth.rst\n    thermal.rst\n    timerpwr.rst\n    tmos.rst\n    tof.rst\n    tvoc.rst\n    uhf_rfid.rst\n    ultrasonic.rst\n    ultrasonic_io.rst\n    uwb.rst\n    vibrator.rst\n    watering.rst\n    weight.rst\n    weight_i2c.rst\n    zigbee.rst\n```\n\n----------------------------------------\n\nTITLE: Getting Audio RMS Level in MicroPython\nDESCRIPTION: Returns the root mean square (RMS) of the audio data in decibels (dB), which provides a measure of audio signal power.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.recorder.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nRecorder.rms() -> float\n```\n\n----------------------------------------\n\nTITLE: Resetting Count Value of OP180 in MicroPython\nDESCRIPTION: This method resets the meter value of the OP180 unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/op180.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nOP108.count_reset()\n```\n\n----------------------------------------\n\nTITLE: Configuring SDCard Interface for M5Stack Devices\nDESCRIPTION: Examples of initializing the SDCard class for different M5Stack devices using SPI interface. Demonstrates configuration for both Atom and AtomS3 series devices with specific pin assignments.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/speaker.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hardware import sdcard\n\n# atoms lite / atom martrix / atom echo: SPI2\nsd = sdcard.SDCard(slot=3, width=1, sck=23, miso=33, mosi=19, cs=None, freq=20000000)\n\n# atoms3 / atoms3 lite / atoms3r / atoms3r-cam / atoms3-ext: SPI2\nsd = SDCard(slot=3, width=1, sck=7, miso=8, mosi=6, cs=None, freq=20000000)\n```\n\n----------------------------------------\n\nTITLE: Setting Accelerometer and Gyroscope Output Data Rate\nDESCRIPTION: Method to set the output data rate for the accelerometer and gyroscope sensors. Accepts parameters for both sensors with various frequency options.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef set_accel_gyro_odr(accel_odr, gyro_odr):\n    # Set the accelerometer and gyroscope output data rate.\n    # :param  accel_odr: range of 0.78 Hz … 1.6 kHz.\n    #     Options:\n    #     - ``25``: 25\n    #     - ``50``: 50\n    #     - ``100``: 100\n    #     - ``200``: 200\n    #     - ``400``: 400\n    #     - ``800``: 800\n    #     - ``1600``: 1600\n    #     - ``0.78``: 0.78\n    #     - ``1.5``: 1.5\n    #     - ``3.1``: 3.1\n    #     - ``6.25``: 6.25\n    #     - ``12.5``: 12.5\n    # :param  gyro_odr: range of 25 Hz … 6.4 kHz.\n    #     Options:\n    #     - ``25``: 25\n    #     - ``50``: 50\n    #     - ``100``: 100\n    #     - ``200``: 200\n    #     - ``400``: 400\n    #     - ``800``: 800\n    #     - ``1600``: 1600\n    #     - ``3200``: 3200\n```\n\n----------------------------------------\n\nTITLE: Getting Power Key State in MicroPython\nDESCRIPTION: Returns the current state of the power key/button press.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nPower.getKeyState() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Low-Pass Filter Configuration for Presence Detection\nDESCRIPTION: Method to get the current low-pass filter configuration used for presence detection. Returns the filter bandwidth setting.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.get_lpf_p_bandwidth() -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Average Sample Number for Object Temperature\nDESCRIPTION: Method to set the number of samples to average for the object's temperature measurement. Different settings affect the RMS noise level, with options ranging from 2 to 2048 samples.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_avg_tobj_num(val) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Temperature Offset for CO2L Unit in MicroPython\nDESCRIPTION: Method to set the maximum value of 374°C temperature offset for the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.set_temperature_offset(offset)\n```\n\n----------------------------------------\n\nTITLE: ADC Data Rate Getter\nDESCRIPTION: Gets the current data read rate of the ADC.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nADCUnit.get_data_rate()\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Mirror Mode for Camera in MicroPython for M5Stack UIFlow\nDESCRIPTION: Enables or disables horizontal mirror mode for the camera. Default is enabled (True).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/camera.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncamera.set_hmirror(enable)\n```\n\n----------------------------------------\n\nTITLE: IDUnit Constructor Implementation\nDESCRIPTION: Creates an IDUnit object using an I2C interface. Requires an initialized I2C object as parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/id.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass IDUnit:\n    def __init__(self, i2c):\n```\n\n----------------------------------------\n\nTITLE: Calibrating the MiniScaleUnit Sensor\nDESCRIPTION: Method to calibrate the Miniscale sensor using two weight points. It requires weight values in grams and their corresponding ADC readings to establish a calibration curve.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/miniscale.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.calibration(weight1_g, weight1_adc, weight2_g, weight2_adc)\n```\n\n----------------------------------------\n\nTITLE: Setting Color for All LEDs on FaderUnit in MicroPython\nDESCRIPTION: Method to set the same color for all RGB lamp beads on the Fader unit. The color parameter is a 3-byte RGB888 value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/fader.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nFaderUnit.fill_color(c: int)\n```\n\n----------------------------------------\n\nTITLE: Deinitializing UART in MicroPython\nDESCRIPTION: This snippet demonstrates how to turn off the UART bus using the deinit() method.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nuart1.deinit()\n```\n\n----------------------------------------\n\nTITLE: Initializing Relay2Module in MicroPython\nDESCRIPTION: Constructor for the Relay2Module class that initializes the module with a specified I2C address. The address parameter can be an integer, list, or tuple representing the I2C address of the module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/relay_2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nRelay2Module(address)\n```\n\n----------------------------------------\n\nTITLE: Getting Oversampling Rate Method for Environmental Parameters\nDESCRIPTION: Method to retrieve the oversampling rate for a specified environmental parameter (temperature, pressure, or humidity).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/envpro.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nENVPROUnit.get_over_sampling_rate(env)\n```\n\n----------------------------------------\n\nTITLE: Performing Simple RDM Device Discovery in C\nDESCRIPTION: Shows how to use the rdm_discover_devices_simple() function to perform RDM device discovery. It demonstrates storing discovered UIDs in an array and handling the return value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_25\n\nLANGUAGE: c\nCODE:\n```\nconst int array_size = 10;\nrdm_uid_t uids[array_size];\n\n// This function blocks and may take some time to complete!\nint num_uids = rdm_discover_devices_simple(DMX_NUM_1, uids, array_size);\n\nprintf(\"Discovery found %i UIDs!\\n\", num_uids);\n```\n\n----------------------------------------\n\nTITLE: Turning Off Relay in MicroPython\nDESCRIPTION: Deactivates the relay using the off() method.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/plcio.relay.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrelay.off()\n```\n\n----------------------------------------\n\nTITLE: Getting Analog Input in GoPlus2Module\nDESCRIPTION: Method to read the analog input value from a specified pin (numbered 1-3), returning an integer value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/goplus2.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nGoPlus2Module.get_analog_input(pin_num) -> int\n```\n\n----------------------------------------\n\nTITLE: Attaching Callback to DMX Channel in Python\nDESCRIPTION: Method to attach a callback function to a specified DMX channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dmx.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nDMX512Module.attach_channel(channel, callback)\n```\n\n----------------------------------------\n\nTITLE: Initializing HeartUnit in Python\nDESCRIPTION: Constructor for initializing the HeartUnit with I2C port and address parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit(i2c, address)\n```\n\n----------------------------------------\n\nTITLE: Setting Ambient Pressure for CO2L Unit in MicroPython\nDESCRIPTION: Method to set the ambient pressure in hPa at any time to adjust CO2 calculations. The ambient pressure is constrained to the range [0, 65535].\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.set_ambient_pressure(ambient_pressure)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files for M5Stack UIFlow-MicroPython Component\nDESCRIPTION: Uses glob expressions to collect all relevant source files for the component from M5GFX and M5Unified libraries, including platform-specific implementations, fonts, panel drivers, and utility functions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB SRCS\n    M5GFX/src/*.cpp\n    M5GFX/src/lgfx/Fonts/efont/*.c\n    M5GFX/src/lgfx/Fonts/IPA/*.c\n    M5GFX/src/lgfx/utility/*.c\n    M5GFX/src/lgfx/v1/*.cpp\n    M5GFX/src/lgfx/v1/misc/*.cpp\n    M5GFX/src/lgfx/v1/panel/*.cpp\n    M5GFX/src/lgfx/v1/platforms/esp32/*.cpp\n    M5GFX/src/lgfx/v1/platforms/esp32c3/*.cpp\n    M5GFX/src/lgfx/v1/touch/*.cpp\n    M5Unified/src/*.cpp\n    M5Unified/src/utility/*.cpp\n    M5Unified/src/utility/imu/*.cpp\n    *.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Motor Status and Error Handling Methods in RollerBase\nDESCRIPTION: Methods for retrieving motor status information and error codes. These functions help with diagnosing issues and monitoring the motor's current operational state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_status() -> int:\n    \n    Get the motor status.\n\n    :return: The current status of the motor.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_error_code() -> int:\n    \n    Get the motor error code.\n\n    :return: The current error code of the motor.\n```\n\n----------------------------------------\n\nTITLE: Setting One-Shot Data Collection Mode\nDESCRIPTION: Method to set the state of one-time data collection for the TMOS sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_tmos_one_shot(val) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating Light Object in MicroPython\nDESCRIPTION: This snippet shows the constructor for the Light class. It initializes a Light object with two IO pins for digital and analog output.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/light.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLight(IO1,IO2)\n```\n\n----------------------------------------\n\nTITLE: Setting Block Data Update for Temperature Registers\nDESCRIPTION: Method to enable or disable the object temperature and ambient temperature register data update functionality.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_block_data_update(val) -> None\n```\n\n----------------------------------------\n\nTITLE: Getting PIN_MODE Input Value from LaserRXUnit in Python\nDESCRIPTION: This method retrieves the current value of the input pin when the LaserRXUnit is operating in PIN_MODE. It returns either 0 or 1.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/laser_rx.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nLaserRXUnit.value()\n```\n\n----------------------------------------\n\nTITLE: Setting Trigger Pin Value for QRCode Module\nDESCRIPTION: Sets the value of the trigger pin. Use 0 for low level or 1 for high level. This is particularly important in Pulse Mode operation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_trig(value)\n```\n\n----------------------------------------\n\nTITLE: Setting Impinj Monza QT_SR Status (MicroPython)\nDESCRIPTION: This method sets the QT_SR status of an Impinj Monza UHFRFID tag. It takes parameters for the desired QT_SR status, persistence, and access password. The method returns a boolean indicating success or failure.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.set_impinj_monza_qt_sr(qt_sr: bool, persistence: int, password: str = \"00000000\") -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting LED Brightness for FaderUnit in MicroPython\nDESCRIPTION: Method to set the brightness of all RGB lamp beads on the Fader unit. The brightness value should be in the range 0-100.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/fader.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nFaderUnit.set_brightness(br: int)\n```\n\n----------------------------------------\n\nTITLE: Initializing FingerHat Class in Python\nDESCRIPTION: Constructor for the FingerHat class. It creates a FingerHat object with specified UART ID and port. The ID parameter can be 0, 1, or 2, and the port parameter is a list or tuple of UART pin numbers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/finger.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FingerHat(id: Literal[0, 1, 2] = 2, port: list | tuple = None)\n```\n\n----------------------------------------\n\nTITLE: Getting Rotary Status in MicroPython\nDESCRIPTION: Method to get the rotation status of the Rotary object. Returns a boolean value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_encoder.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMiniEncoderCHat.get_rotary_status() -> bool\n```\n\n----------------------------------------\n\nTITLE: Capturing Snapshot with Camera in MicroPython for M5Stack UIFlow\nDESCRIPTION: Captures a single frame from the camera and returns an image.Image object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/camera.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncamera.snapshot()\n```\n\n----------------------------------------\n\nTITLE: Setting Work Mode for GPS V2.0 Module\nDESCRIPTION: Method to set the working mode of the GPS module. The mode parameter defines the operational configuration of the GPS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.set_work_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Checking Button Hold Status\nDESCRIPTION: Method to check if buttons are being held down\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dualbutton.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDual_Button.isHolding()\n```\n\n----------------------------------------\n\nTITLE: Reading Memory Bank in UHFRFIDUnit (MicroPython)\nDESCRIPTION: This method reads data from a specified memory bank of a UHFRFID tag. It takes parameters for the bank type, offset, length, and access password. The method returns the read data as a hexadecimal string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.read_mem_bank(bank: int, offset: int, length: int, access_password: str = \"00000000\") -> str\n```\n\n----------------------------------------\n\nTITLE: Setting Average Filter Level on MiniScaleUnit\nDESCRIPTION: Method to set the level of the average filter. A higher level produces smoother results but increases latency, with values ranging from 0 to 50.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/miniscale.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.setAverageFilterLevel(level)\n```\n\n----------------------------------------\n\nTITLE: Getting Hall Effect Sensor Status\nDESCRIPTION: Retrieves the current status of the Hall Effect sensor to detect magnetic fields.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/hall_effect.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nHallEffectUnit.get_status()\n```\n\n----------------------------------------\n\nTITLE: Reading Data from BLE UART Buffer\nDESCRIPTION: Method to read data from the receive buffer with optional size parameter. Returns bytes of data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.server.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTServer.read(sz=None) -> bytes\n```\n\n----------------------------------------\n\nTITLE: Initializing Encoder8 Unit in Python\nDESCRIPTION: Constructor for initializing the Encoder8 Unit with I2C interface and address settings. Requires I2C interface or PAHUBUnit instance and optional address parameter (default 0x59).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder8.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Encoder8Unit:\n    def __init__(self, i2c, slave_addr, address=0x59):\n```\n\n----------------------------------------\n\nTITLE: Configuring DMX Sniffer for Timing Analysis\nDESCRIPTION: Setup and usage of the DMX sniffer feature for measuring break and mark-after-break timings. Requires GPIO ISR service installation and minimum 160MHz CPU clock speed.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_14\n\nLANGUAGE: c\nCODE:\n```\ngpio_install_isr_service(DMX_SNIFFER_INTR_FLAGS_DEFAULT);\n\nconst int sniffer_pin = 4; // Lowest exposed pin on the Feather breakout board.\ndmx_sniffer_enable(DMX_NUM_1, sniffer_pin);\n```\n\n----------------------------------------\n\nTITLE: Registering DMX Reading Component in ESP-IDF\nDESCRIPTION: This CMake snippet registers a DMX reading component for the ESP-IDF build system. It specifies 'ESPIDF_DMXRead.c' as the source file to be compiled and doesn't include any additional include directories.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/examples/ESPIDF_DMXRead/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n    SRCS \"ESPIDF_DMXRead.c\"\n    INCLUDE_DIRS \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Inputting Text via USB Keyboard\nDESCRIPTION: Examples of how to input text using the input method, which accepts both string input and KeyCode values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/device/keyboard.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nKeyboard.input(\"Hello M5\")\nKeyboard.input(KeyCode.A)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to BLE UART Server\nDESCRIPTION: Method to write bytes of data to the BLE UART server for transmission.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.server.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTServer.write(data: bytes)\n```\n\n----------------------------------------\n\nTITLE: Resetting DDS Unit in MicroPython\nDESCRIPTION: Method to reset the DDS unit to its initial state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit.reset() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting MQTT Last Will Message\nDESCRIPTION: Method to set an MQTT last will message that will be published by the broker if the client disconnects unexpectedly. Must be called before connect().\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.default.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nMQTTClient.set_last_will(topic, msg, retain=False, qos=0)\n```\n\n----------------------------------------\n\nTITLE: Getting Average Filter Level on MiniScaleUnit\nDESCRIPTION: Method to retrieve the current level of the average filter on the MiniScaleUnit sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.get_average_filter_level\n```\n\n----------------------------------------\n\nTITLE: Setting Socket Options for UDP in MicroPython\nDESCRIPTION: This code demonstrates how to set socket options for a UDP socket in MicroPython. It shows how to enable or disable address reuse using the SO_REUSEADDR option.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.server.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nudps.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 0)\nudps.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Low-Pass Filter for Motion Detection\nDESCRIPTION: Method to set the low-pass filter configuration for motion detection only. Accepts configuration values for filter bandwidth from ODR/9 to ODR/800.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_lpf_m_bandwidth(val) -> None\n```\n\n----------------------------------------\n\nTITLE: Handling IR Receive Events in MicroPython\nDESCRIPTION: This method shows how to set up an event handler for when an IR signal is received using the rx_event() method of the IR object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/ir.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nir.rx_event()\n```\n\n----------------------------------------\n\nTITLE: Writing Data to RS485\nDESCRIPTION: Write bytes data to the UART interface.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs485.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrs485_0.write(b'Hello')\n```\n\n----------------------------------------\n\nTITLE: Getting Firmware Version of AIN4-20mA Unit\nDESCRIPTION: Method that retrieves the firmware version of the AIN 4-20mA Unit. Returns an integer representing the current firmware version installed on the unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ain4.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nAIN4_20MAUnit.get_firmware_version() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Low-Pass Filter Configuration for Ambient Temperature Shock Detection\nDESCRIPTION: Method to get the current low-pass filter configuration used for ambient temperature shock detection. Returns the filter bandwidth setting.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.get_lpf_a_t_bandwidth() -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Measurement Interval in MicroPython\nDESCRIPTION: Method to configure how frequently the UWB unit takes distance measurements.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit.set_measurement_interval(interval)\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Light Mode in QR Code Reader\nDESCRIPTION: This method sets the fill light mode for the QR code reader. It accepts an integer parameter 'mode' with options for light off, light on, and light on during decoding.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.set_fill_light_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Fill Color Method - MicroPython\nDESCRIPTION: Sets the LED color using an RGB value in hexadecimal format from 0x000000 to 0xFFFFFF.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/scroll.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nScrollUnit.fill_color(rgb: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating Mouse Object in MicroPython\nDESCRIPTION: Example of how to create a Mouse object from the usb.device.mouse module and use it to simulate mouse actions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/device/mouse.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Creating Mouse object\nmouse = usb.device.mouse.Mouse()\n```\n\n----------------------------------------\n\nTITLE: Initializing TMOSUnit\nDESCRIPTION: Method to initialize the TMOSUnit sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.begin() -> None\n```\n\n----------------------------------------\n\nTITLE: Stopping Periodic Measurement for CO2L Unit in MicroPython\nDESCRIPTION: Method to stop the measurement mode for the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.set_stop_periodic_measurement()\n```\n\n----------------------------------------\n\nTITLE: Decoding GGA Sentence from GPS V2.0 Module\nDESCRIPTION: Internal method to decode the GGA NMEA sentence to extract GPS quality, number of satellites, and altitude.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module._decode_gga(data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardware Documentation Structure in RST\nDESCRIPTION: Sphinx documentation toctree directive that organizes hardware module documentation files with maxdepth of 1 level.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    adc.rst\n    als.rst\n    button.rst\n    can.rst\n    display.rst\n    imu.rst\n    ir.rst\n    mic.rst\n    pin.rst\n    plcio.rst\n    pwr485.rst\n    rotary.rst\n    scd40.rst\n    sen55.rst\n    speaker.rst\n    uart.rst\n    wdt.rst\n```\n\n----------------------------------------\n\nTITLE: Setting Vibration Duty Cycle in MicroPython\nDESCRIPTION: This method sets the vibration duty cycle of the motor. The duty cycle range is from 0 to 100, representing the corresponding percentage.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/vibrator.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nVibratorHAT.set_duty(freq)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from MQTT Server\nDESCRIPTION: Method to disconnect from an MQTT server and release resources.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.default.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMQTTClient.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Initializing ThermalHat Class in MicroPython\nDESCRIPTION: Creates a ThermalHat object using the I2C interface. The I2C address defaults to 0x33 but can be specified if different.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/thermal.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nThermalHat(i2c, address: int = 0x33)\n```\n\n----------------------------------------\n\nTITLE: LTE Connection Status Check\nDESCRIPTION: Checks if PPP link is connected and active\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lte.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncomlte_0.isconnected()\n```\n\n----------------------------------------\n\nTITLE: Setting Signal Rate Limit in ToF Unit\nDESCRIPTION: Method to set the signal rate limit of the ToF Unit. This determines the minimum signal rate required for a valid measurement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nToFUnit.set_signal_rate_limit(val: float) -> None\n```\n\n----------------------------------------\n\nTITLE: Stopping QR Code Decoding\nDESCRIPTION: Stops the QR code decoding process that was previously started. This is typically used in Continuous Mode to halt the scanning operation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.stop_decode()\n```\n\n----------------------------------------\n\nTITLE: Roller485Unit Class Constructor\nDESCRIPTION: Constructor for initializing a Roller485Unit object with bus, address and mode parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/roller485.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Roller485Unit(bus, address, mode):\\n    \"\"\"Initialize the Roller485Unit object based on communication mode.\\n    :param bus: The I2C/RS485 bus instance\\n    :param address: The motor's RS485 address\\n    :param mode: The Roller485 communication mode\\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Label Colors in MicroPython\nDESCRIPTION: Method to set the text font color and background color of a Label object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/label.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLabel.setColor(text_c:int, bg_c: int=-1)\n```\n\n----------------------------------------\n\nTITLE: Setting Blocking Mode on a TCP Socket in MicroPython\nDESCRIPTION: This snippet shows how to set the blocking mode of a TCP socket. When a socket is in blocking mode, operations wait until completed, while in non-blocking mode, operations return immediately.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.client.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntcpc.setblocking(True)\ntcpc.setblocking(False)\n```\n\n----------------------------------------\n\nTITLE: Reading Line from UART\nDESCRIPTION: Reads a line ending in a newline character from UART.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs232.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nline = rs232_0.readline()\n```\n\n----------------------------------------\n\nTITLE: Image Size Method Implementation\nDESCRIPTION: This method returns the size of the image in bytes. It is part of the image.Image class and can be used in both MicroPython and UIFlow2.0.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/image.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsize() -> int\n```\n\n----------------------------------------\n\nTITLE: Enabling PPS Output\nDESCRIPTION: Method to enable the PPS output without parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.enable_output()\n```\n\n----------------------------------------\n\nTITLE: Getting OLED Backlight Status from TimerPWR Unit\nDESCRIPTION: Method to check if the OLED backlight is enabled. Returns True if enabled, False if disabled.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.get_oled_backlight_status()\n```\n\n----------------------------------------\n\nTITLE: Setting Image Position\nDESCRIPTION: Method to set the position of the Image widget by specifying x and y coordinates on the display.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/image.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImage.setCursor(x: int, y: int)\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Weight from HX711 Sensor\nDESCRIPTION: Method to read the raw weight value directly from the HX711 sensor without scaling or calibration applied.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/weight.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWEIGHTUnit.get_raw_weight()\n```\n\n----------------------------------------\n\nTITLE: Initializing SSR Unit in MicroPython\nDESCRIPTION: Constructor for initializing the SSR Unit by specifying the port to which it is connected. The port parameter represents the control pin used to communicate with the SSR.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ssr.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSSRUnit(port)\n```\n\n----------------------------------------\n\nTITLE: Deinitialize Buzzer Method\nDESCRIPTION: Deinitializes the buzzer unit, releasing any resources used by the device.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/buzzer.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nBuzzerUnit.deint()\n```\n\n----------------------------------------\n\nTITLE: Deep Sleep Mode in MicroPython\nDESCRIPTION: Puts the ESP32 into deep sleep mode. Can specify the wake-up time in microseconds and whether to wake up at all.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nPower.deepSleep(micro_seconds: int=0, wakeup: bool=True)\n```\n\n----------------------------------------\n\nTITLE: Getting Course Over Ground from GPS V2.0 Module\nDESCRIPTION: Method to get the current course over ground (COG) in degrees.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_corse_over_ground()\n```\n\n----------------------------------------\n\nTITLE: Constructing TMOSUnit Object in MicroPython\nDESCRIPTION: This snippet shows how to create a TMOSUnit object using the constructor. It requires an I2C object and an optional I2C address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTMOSUnit(i2c0, address)\n```\n\n----------------------------------------\n\nTITLE: CRC16 Calculation Function for QR Code Protocol\nDESCRIPTION: This function calculates the CRC16 checksum for the QR code protocol. It takes a bytes object as input and returns a 16-bit integer CRC value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef crc16_calc(data: bytes) -> int:\n    ca_crc = 0\n    for byte in data:\n        for i in range(7, -1, -1):  \n            if ca_crc & 0x8000:\n                ca_crc = (ca_crc << 1) ^ 0x18005\n            else:\n                ca_crc <<= 1\n            if (byte & (1 << i)) != 0:\n                ca_crc ^= 0x18005\n    return ca_crc & 0xFFFF\n```\n\n----------------------------------------\n\nTITLE: Initializing DDS Unit Class in MicroPython\nDESCRIPTION: Constructor for the DDSUnit class. It initializes the DDS Unit with the specified I2C bus and address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit(i2c: I2C, address: int | list | tuple = 0x31)\n```\n\n----------------------------------------\n\nTITLE: Releasing Operation with CatchUnit in MicroPython\nDESCRIPTION: Method that triggers the gripper to release or open. This controls the servo to move to the release position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/catch.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCatchUnit.release() -> None\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Tree Structure\nDESCRIPTION: ReStructuredText toctree directive that defines the documentation structure for unit modules. Sets maximum depth to 1 and lists all available unit documentation files.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    env.rst\n    angle.rst\n    dac2.rst\n    rgb.rst\n    earth.rst\n    adc.rst\n    ir.rst\n    dualbutton.rst\n    light.rst\n    dlight.rst\n    ultrasonic.rst\n    pir.rst\n    ncir.rst\n    relay.rst\n    op90.rst\n    op180.rst\n    lora_e220.rst\n```\n\n----------------------------------------\n\nTITLE: Sending Break Condition on RS485\nDESCRIPTION: Send a break condition by driving the bus low for extended duration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs485.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrs485_0.sendbreak()\n```\n\n----------------------------------------\n\nTITLE: Sending Data to UDP Socket in MicroPython\nDESCRIPTION: This snippet shows how to send data to a connected UDP socket in MicroPython. It can send both bytes and string data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.server.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nudps.send(b'Hello, World!')\nudps.send('Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Resistance Value Reading Method\nDESCRIPTION: Method to get the resistance value from the light sensor. Returns an integer representing the ohm value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/light.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLight.get_ohm()\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Connected Clients in M5BLE Device Server (Python)\nDESCRIPTION: This method retrieves a list of all connected clients from the M5BLE Device server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/m5ble.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nM5BLE.Device.server.get_clients()\n```\n\n----------------------------------------\n\nTITLE: Getting Current Date from GPS Module\nDESCRIPTION: Method to retrieve the current date from the GPS module. Returns date in the format 'dd/mm/yy' as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gps.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nGPSModule.get_date()\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Light Mode for QRCode Module\nDESCRIPTION: Controls the fill light behavior of the QRCode scanner. Options include always off, always on, or on only during decoding to provide optimal lighting conditions for scanning.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_fill_light_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Setting Power State for QRCode Module\nDESCRIPTION: Controls the power state of the QRCode module. Setting enable to True powers on the module, while False powers it off.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_power(enable)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Position Quality from GPS V2.0 Module\nDESCRIPTION: Method to get the quality indicator of the GPS position fix.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_pos_quality()\n```\n\n----------------------------------------\n\nTITLE: Sending Data via UDP Socket in MicroPython\nDESCRIPTION: Sends data to the connected UDP socket. This method can be used to send both bytes and string data to the server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.client.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nudpc.send(b'Hello, World!')\nudpc.send('Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Register Access Methods\nDESCRIPTION: Low-level methods for direct register access including reading and writing register data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder8.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef read_reg_data(self, reg, num):\n    # Read register data\n\ndef write_reg_data(self, reg, byte_lst):\n    # Write register data\n\ndef deinit(self):\n    # Deinitialize device\n```\n\n----------------------------------------\n\nTITLE: Setting Socket Timeout\nDESCRIPTION: Sets timeout duration for blocking socket operations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.server.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntcps.settimeout(5)\ntcps.settimeout(None)\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Periodic Image Updates\nDESCRIPTION: Method to enable or disable the automatic periodic updates of the remote image by setting a boolean flag.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/image+.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nImagePlus.set_update_enable(enable: bool)\n```\n\n----------------------------------------\n\nTITLE: Getting IIR Filter Coefficient Method\nDESCRIPTION: Method to retrieve the current IIR (Infinite Impulse Response) filter coefficient used by the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/envpro.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nENVPROUnit.get_iir_filter_coefficient()\n```\n\n----------------------------------------\n\nTITLE: Getting Average Sample Number for Ambient Temperature\nDESCRIPTION: Method to get the current number of samples being averaged for the ambient temperature measurement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.get_avg_tamb_num() -> int\n```\n\n----------------------------------------\n\nTITLE: Creating Weight I2C Unit Object\nDESCRIPTION: Constructor for the WEIGHT_I2CUnit class. It initializes a new Weight I2C Unit object with the specified I2C port and address. The default I2C address is 0x26.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/weight_i2c.rst#2025-04-21_snippet_1\n\nLANGUAGE: micropython\nCODE:\n```\nWEIGHT_I2CUnit(i2c0, 0x26)\n```\n\n----------------------------------------\n\nTITLE: Initializing PwrCAN RS485 in MicroPython\nDESCRIPTION: Constructor for PwrCAN RS485 that sets up UART communication with configurable baudrate, bits, parity and stop bits.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pwrcan.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPwrCANModuleRS485(id, baudrate=9600, bits=8, parity=None, stop=1, *, ...)\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Position in MicroPython\nDESCRIPTION: Method to set the position of a Circle object using X and Y coordinates.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/circle.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWidgets.setCursor(x: int, y: int)\n```\n\n----------------------------------------\n\nTITLE: Playing Audio Files with Player.play() in MicroPython\nDESCRIPTION: Plays audio files from local storage (flash/SD card) or URLs. Supports parameters for starting position, volume control, synchronous playback, and SSL verification.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.player.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPlayer.play(uri, pos=0, volume=-1, sync=True, verify=None)\n```\n\n----------------------------------------\n\nTITLE: Pausing Audio Recording in MicroPython\nDESCRIPTION: Pauses the current audio recording session, allowing it to be resumed later.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.recorder.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nRecorder.pause()\n```\n\n----------------------------------------\n\nTITLE: Getting Device Mode in MicroPython\nDESCRIPTION: Method to retrieve the current operational mode of the UWB unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit.get_device_mode()\n```\n\n----------------------------------------\n\nTITLE: Setting Output Mode for DDS Unit in MicroPython\nDESCRIPTION: Method to set the output mode of the DDS. It takes a mode constant as an argument to select the waveform type.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit.set_mode(mode) -> None\n```\n\n----------------------------------------\n\nTITLE: Managing ModbusRTUSlave Operation\nDESCRIPTION: Methods for managing the ModbusRTUSlave operation, including the tick function and setting callbacks for specific function codes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.tick() -> None\nModbusRTUSlave.set_callback(func_code: int, handler) -> None\n```\n\n----------------------------------------\n\nTITLE: Configuring libffi Component for ESP32 Platforms in CMake\nDESCRIPTION: This CMake configuration detects the target ESP32 platform and configures the libffi component appropriately. It selects different source files and include directories based on whether the target uses Xtensa architecture (ESP32, ESP32-S3) or RISC-V architecture (ESP32-C3, ESP32-C6), then registers the component with ESP-IDF.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/libffi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_build_get_property(target IDF_TARGET)\n\nif(target STREQUAL \"esp32\" OR target STREQUAL \"esp32s3\")\n    set(srcs\n        \"libffi/src/prep_cif.c\"\n        \"libffi/src/types.c\"\n        \"libffi/src/xtensa/ffi.c\"\n        \"libffi/src/xtensa/sysv.S\"\n    )\n    set(include_dirs libffi/include libffi/include/xtensa)\nelseif(target STREQUAL \"esp32c3\" OR target STREQUAL \"esp32c6\")\n    set(srcs\n        \"libffi/src/prep_cif.c\"\n        \"libffi/src/types.c\"\n        \"libffi/src/riscv/ffi.cpp\"\n        \"libffi/src/riscv/sysv.S\"\n    )\n    set(include_dirs libffi/include libffi/include/riscv)\nendif()\n\nidf_component_register(SRCS \"${srcs}\"\n                    INCLUDE_DIRS \"${include_dirs}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Decode Success Beep for QR Code Scanner\nDESCRIPTION: Configures the audible feedback when the QR code scanner successfully decodes a code. The count parameter determines how many beeps are played (0, 1, or 2).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_decode_success_beep(count)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connected Client in M5BLE Device Server (Python)\nDESCRIPTION: This method retrieves a connected client from the M5BLE Device server. It takes an index parameter to specify which client to retrieve.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/m5ble.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nM5BLE.Device.server.get_client(index)\n```\n\n----------------------------------------\n\nTITLE: Non-Blocking Data Reception in ATOMSocketBase\nDESCRIPTION: Method to receive data from the ATOM Socket in non-blocking mode. It takes a callback function to handle the received data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase.receive_none_block(receive_callback) -> None\n```\n\n----------------------------------------\n\nTITLE: I2C Address Configuration Method\nDESCRIPTION: Method to initialize the I2C slave address for the AC Measure unit. The address must be between 1 and 127.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ac_measure.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef init_i2c_address(self, slave_addr):\n```\n\n----------------------------------------\n\nTITLE: Setting Different Code Interval for QRCode Module\nDESCRIPTION: Sets the minimum interval in milliseconds before the scanner will recognize a different QR code after scanning one, controlling the rate of successive different code scans.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_diff_code_interval(interval_ms)\n```\n\n----------------------------------------\n\nTITLE: Setting Zigbee Transfer Mode\nDESCRIPTION: Method to set the data transfer mode for the Zigbee module, controlling how data is processed and forwarded within the network.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.set_transfer_mode(transfer_mode: int)\n```\n\n----------------------------------------\n\nTITLE: Changing Image Source\nDESCRIPTION: Method to change the displayed image by providing a new file path.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/image.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nImage.setImage(str: file)\n```\n\n----------------------------------------\n\nTITLE: Reading a Line from a TCP Socket in MicroPython\nDESCRIPTION: This code demonstrates how to read a line of text from a TCP socket. The readline method reads characters until it encounters a newline character.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.client.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = tcpc.readline()\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Initializing GatewayH2 Module in MicroPython\nDESCRIPTION: Creates a GatewayH2Module object by specifying UART id, TX pin, and RX pin for communication.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gateway_h2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom module import GatewayH2Module\n\nmodule_gateway_h2 = GatewayH2Module(id = 1, tx = 10, rx = 17)\n```\n\n----------------------------------------\n\nTITLE: Object Detection Method API\nDESCRIPTION: Method definition for object detection inference returning DetectionResult\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/dl.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nObjectDetector.infer(img: image.Image) -> DetectionResult\n```\n\n----------------------------------------\n\nTITLE: Setting PM2.5 Module Power State\nDESCRIPTION: Method to control the power state of the PM2.5 Module. Pass True to enable power or False to disable it.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pm25.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPM25Module.set_module_power(state)\n```\n\n----------------------------------------\n\nTITLE: Decoding TXT Sentence from GPS V2.0 Module\nDESCRIPTION: Internal method to decode the TXT NMEA sentence to extract antenna state information.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module._decode_txt(data)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Messages from GRBL Module\nDESCRIPTION: Method to get messages from the GRBL module. Returns a string containing the message information.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.get_message()\n```\n\n----------------------------------------\n\nTITLE: Checking Zigbee Connection Status\nDESCRIPTION: Method to check if the Zigbee module is currently connected to a Zigbee network. Returns a boolean value indicating connection status.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.isconnected() -> bool\n```\n\n----------------------------------------\n\nTITLE: Initializing ByteSwitch Unit Class\nDESCRIPTION: Constructor for initializing the ByteSwitchUnit with I2C communication interface and address configuration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/byteswitch.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ByteSwitchUnit:\n    def __init__(self, i2c, address=0x46):\n```\n\n----------------------------------------\n\nTITLE: Initializing LaserRXUnit in Python\nDESCRIPTION: This snippet demonstrates how to initialize the LaserRXUnit class with specified port, mode, and UART ID. It sets up the basic configuration for the laser receiver.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/laser_rx.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nLaserRXUnit(port, mode, id)\n```\n\n----------------------------------------\n\nTITLE: Getting Add Mode for FingerUnit in Python\nDESCRIPTION: Method to retrieve the current add mode of the fingerprint module. It returns 0 for no-repeat mode and 1 for repeat mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.get_add_mode() -> int\n```\n\n----------------------------------------\n\nTITLE: Reading Calibrated Voltage in MicroPython\nDESCRIPTION: Returns a calibrated input voltage in microvolts, using known ADC characteristics and eFuse values. Provides millivolt resolution within the ADC's linear range.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/adc.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nADC.read_uv()\n```\n\n----------------------------------------\n\nTITLE: Getting Light Lux Value\nDESCRIPTION: Method to read the current light lux value from the DLight sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dlight.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDLightUnit.get_lux()\n```\n\n----------------------------------------\n\nTITLE: Setting Motion Sensitivity for QRCode Module\nDESCRIPTION: Adjusts the sensitivity level for scene change detection in Motion Sensing Mode. Ranges from 1-5, with higher levels being more sensitive to changes in the visual field.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_motion_sensitivity(level)\n```\n\n----------------------------------------\n\nTITLE: Stopping Continuous Mode in ToF Unit\nDESCRIPTION: Method to stop continuous measurement mode in the ToF Unit. This returns the sensor to single-shot measurement mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tof.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nToFUnit.stop_continuous() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Label Position in MicroPython\nDESCRIPTION: Method to set the starting X and Y coordinates of a Label object on screen.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/label.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLabel.setCursor(x: int, y: int)\n```\n\n----------------------------------------\n\nTITLE: Getting Processed Y-Axis Value from Joystick\nDESCRIPTION: Method to retrieve the processed y-axis value from the joystick unit. Returns an integer representing the position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/joystick.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nJoystickUnit.get_y() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Impinj Monza QT_SR Status (MicroPython)\nDESCRIPTION: This method retrieves the QT_SR status of an Impinj Monza UHFRFID tag. It takes parameters for persistence (volatile or non-volatile memory) and access password. The method returns the QT_SR status as a boolean.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.get_impinj_monza_qt_sr(persistence, password: str = \"00000000\") -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Power On Time for TimerPWR Unit\nDESCRIPTION: Method to set the power on time. Takes hours, minutes, and seconds as parameters to specify when the unit should power on.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.set_power_on_time(hours, mintues, seconds)\n```\n\n----------------------------------------\n\nTITLE: Internal GPS Data Processing in MicroPython\nDESCRIPTION: Internal methods for processing GPS data, including checksum calculation and decoding of NMEA sentences.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/gps_v11.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nGPSV11Unit._add_checksum(message)\nGPSV11Unit._decode_gga(data)\nGPSV11Unit._decode_rmc(data)\nGPSV11Unit._decode_txt(data)\nGPSV11Unit._monitor()\n```\n\n----------------------------------------\n\nTITLE: Getting Servo Pulse in MicroPython\nDESCRIPTION: Retrieves the current pulse width of a servo connected to a specified channel on the Motion Base.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/motion.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmotion.get_servo_pulse()\n```\n\n----------------------------------------\n\nTITLE: Retrieving QR Code Payload from image.QRCode Instance\nDESCRIPTION: Method of the image.QRCode class that returns the payload string contained in the QR code. This is used after finding a QR code with the find_qrcodes function.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/code_scanner.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npayload() -> str\n```\n\n----------------------------------------\n\nTITLE: Getting Low Pass Filter Status on MiniScaleUnit\nDESCRIPTION: Method to retrieve the current status of the low pass filter (enabled or disabled) on the MiniScaleUnit sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.get_low_pass_filter\n```\n\n----------------------------------------\n\nTITLE: Setting Case Conversion for QR Code Scanner\nDESCRIPTION: Configures how the QR code scanner handles letter case in decoded data. Options include maintaining the original case, converting all text to uppercase, or converting all text to lowercase.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_case_conversion(mode)\n```\n\n----------------------------------------\n\nTITLE: Changing NXP EAS Status (MicroPython)\nDESCRIPTION: This method changes the EAS (Electronic Article Surveillance) status of an NXP UHFRFID tag. It takes a parameter to set or reset EAS and an optional access password. The method returns a boolean indicating success or failure.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.nxp_change_eas(set: int, password: str = \"00000000\") -> bool\n```\n\n----------------------------------------\n\nTITLE: Turning Off Relay in MicroPython\nDESCRIPTION: Method to turn off the relay switch.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nRealyUnit.off()\n```\n\n----------------------------------------\n\nTITLE: Setting I2C Address in MicroPython\nDESCRIPTION: Method to set the I2C address of the device. Does not return a value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_encoder.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nMiniEncoderCHat.set_address(address) -> None\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from UDP Socket in MicroPython\nDESCRIPTION: This code demonstrates how to receive data from a UDP socket in MicroPython. It receives up to 1024 bytes of data and prints it.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.server.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = udps.recv(1024)\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Swapping X-Axis Direction in MiniJoyHat\nDESCRIPTION: Controls whether the x-axis direction is inverted. Takes a boolean parameter to enable or disable swapping.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_joy.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nMiniJoyHat.swap_x(swap: bool = True) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Socket Options for UDP Client in MicroPython\nDESCRIPTION: Sets the value of a given socket option. This example demonstrates how to set the SO_REUSEADDR option for the UDP socket.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.client.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nudpc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 0)\nudpc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n```\n\n----------------------------------------\n\nTITLE: Setting I2C Address in StepMotorDriverModule\nDESCRIPTION: Method to set a new I2C address for the StepMotorDriverModule. It takes the new address as a parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule.set_i2c_address(new_address)\n```\n\n----------------------------------------\n\nTITLE: Reading DMX Data and Handling RDM Requests\nDESCRIPTION: Shows how to receive DMX packets, read data from the driver buffer, and optionally process RDM requests. This code illustrates the basic receive loop pattern for a DMX responder.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ndmx_packet_t packet;\nwhile (true) {\n  int size = dmx_receive(dmx_num, &packet, DMX_TIMEOUT_TICK);\n  if (size > 0) {\n    dmx_read(dmx_num, data, size);\n\n    // Optionally handle RDM requests\n    if (packet.is_rdm) {\n      rdm_send_response(dmx_num);\n    }\n\n    // Process data here...\n  }\n\n  // Do other work here...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Vertical Flip Mode Status for Camera in MicroPython for M5Stack UIFlow\nDESCRIPTION: Returns whether vertical flip mode is enabled for the camera.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/camera.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncamera.get_vflip()\n```\n\n----------------------------------------\n\nTITLE: Setting Duty Cycle for Servo Hat in MicroPython\nDESCRIPTION: This method sets the duty cycle for the Servo Hat. The duty cycle can range from 26 to 127.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/servo.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nServoHat.set_duty(duty: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing UART Communication for LaserRXUnit in Python\nDESCRIPTION: This method initializes UART communication with specified parameters such as baudrate, data bits, parity, and stop bits. It's used to set up the communication protocol for the laser receiver.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/laser_rx.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLaserRXUnit.init_uart(baudrate, bits, parity, stop)\n```\n\n----------------------------------------\n\nTITLE: Reading PPS Data Update Flag\nDESCRIPTION: Returns the data update flag as an integer value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.read_data_update_flag() -> int\n```\n\n----------------------------------------\n\nTITLE: Resetting Rotary Value in MicroPython\nDESCRIPTION: Resets the rotation value of the Rotary object to its default. This method does not return any value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/rotary.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nRotary.reset_rotary_value() -> None\n```\n\n----------------------------------------\n\nTITLE: Reading PSU Running Mode\nDESCRIPTION: Returns the current running mode of the power supply unit as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.read_psu_running_mode() -> int\n```\n\n----------------------------------------\n\nTITLE: Setting Startup Tone in QR Code Reader\nDESCRIPTION: This method sets the startup tone for the QR code reader. It takes an integer parameter 'mode' to disable the tone, play 4 beeps, or play 2 beeps.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.set_startup_tone(mode)\n```\n\n----------------------------------------\n\nTITLE: Getting Processed X-Axis Value from Joystick\nDESCRIPTION: Method to retrieve the processed x-axis value from the joystick unit. Returns an integer representing the position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/joystick.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nJoystickUnit.get_x() -> int\n```\n\n----------------------------------------\n\nTITLE: MQTT Topic Subscription Callback Function in MicroPython\nDESCRIPTION: Definition of a callback function for MQTT subscriptions. This function is triggered when a message is received on a subscribed topic, printing both the topic name and message content.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/nbiot2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef nbiot2_0_xxxxxxxx_event(_topic, _msg):\n    print(\"topic:\", _topic)\n    print(\"msg:\", _msg)\n```\n\n----------------------------------------\n\nTITLE: Requesting Air Data from PM2.5 Module\nDESCRIPTION: Method to request the latest air quality data from the PM2.5 Module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pm25.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nPM25Module.request_air_data()\n```\n\n----------------------------------------\n\nTITLE: Getting Limit Switch States in StepMotorDriverModule\nDESCRIPTION: Method to retrieve the states of all limit switches.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule.get_all_limit_switch_state()\n```\n\n----------------------------------------\n\nTITLE: Setting EMA Filter Alpha Value on MiniScaleUnit\nDESCRIPTION: Method to set the alpha value for the Exponential Moving Average (EMA) filter. Values range from 0 to 99, with smaller values providing smoother results but more latency. EMA is more sensitive to data changes than the average filter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/miniscale.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.setEMAFilterAlpha(alpha)\n```\n\n----------------------------------------\n\nTITLE: Adding MicroPython Generic GC Helper to Source Library\nDESCRIPTION: Appends the generic garbage collection helper source file to the MicroPython source library list. This file provides basic memory management functionality for the MicroPython runtime.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/main_esp32c3/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND MICROPY_SOURCE_LIB ${MICROPY_DIR}/shared/runtime/gchelper_generic.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Zigbee Device Type\nDESCRIPTION: Method to set only the device type of the Zigbee module, determining its role in the network hierarchy.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/zigbee.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nZigbeeUnit.set_device_type(device_type: int)\n```\n\n----------------------------------------\n\nTITLE: Drawing Line Method Implementation\nDESCRIPTION: This method draws a line from (x0, y0) to (x1, y1) on the image. It allows specifying color and thickness. It returns the image object for method chaining.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/image.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndraw_line(x0:int, y0:int, x1:int, y1:int, color:Optional[int,Tuple[int,int,int]]=None, thickness=1) -> Image\n```\n\n----------------------------------------\n\nTITLE: Constructing DACHat Object in MicroPython\nDESCRIPTION: Constructor for the DACHat class. It initializes a DAC Hat object with specified I2C connection, address, and voltage parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/dac.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. class:: DACHat(i2c: I2C, address: int = 0x60, vdd: float = 5.0, vout: float = 3.3)\n\n    Create a DAC Hat object.\n\n    :param i2c: I2C object\n    :param address: I2C address of the DAC Hat\n    :param vdd: VDD voltage of the DAC Hat\n    :param vout: VOUT voltage of the DAC Hat\n```\n\n----------------------------------------\n\nTITLE: Setting Same Code No Delay Mode for QRCode Module\nDESCRIPTION: Enables or disables non-delay output for repeated scans of the same code. When enabled, the scanner can immediately report the same code without waiting for the interval timeout.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_same_code_no_delay(enable)\n```\n\n----------------------------------------\n\nTITLE: Closing a TCP Socket Connection in MicroPython\nDESCRIPTION: This snippet shows how to properly close a TCP socket connection when it's no longer needed. Closing connections is important to free up system resources.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.client.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntcpc.close()\n```\n\n----------------------------------------\n\nTITLE: Deinitializing GPS V2.0 Module\nDESCRIPTION: Method to deinitialize the GPS module, stopping any running tasks and releasing resources.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.deinit()\n```\n\n----------------------------------------\n\nTITLE: Nanosecond-precision Time Function in MicroPython\nDESCRIPTION: The time_ns() function returns nanoseconds since the Epoch as an integer. It's similar to time() but provides nanosecond precision, usually returning a big integer that may allocate on the heap.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/software/time.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntime_ns()\n```\n\n----------------------------------------\n\nTITLE: Deinitializing Servo Hat in MicroPython\nDESCRIPTION: This method deinitializes the Servo Hat, releasing any resources it was using.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/servo.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nServoHat.deinit()\n```\n\n----------------------------------------\n\nTITLE: DMX Device Control Functions (device.h)\nDESCRIPTION: Functions for managing DMX device addressing and personalities\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/keywords.txt#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ndmx_get_start_address\ndmx_set_start_address\ndmx_get_current_personality\ndmx_set_current_personality\ndmx_get_personality_count\ndmx_get_footprint\ndmx_get_personality_description\n```\n\n----------------------------------------\n\nTITLE: Set Rotary Value Method - MicroPython\nDESCRIPTION: Sets the rotation value of the ScrollUnit to a specified integer value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/scroll.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nScrollUnit.set_rotary_value(new_value: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Clamping Percentage for Servo Hat in MicroPython\nDESCRIPTION: This method sets the clamping percentage for the Servo Hat. The percentage can range from 0 to 100.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/servo.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nServoHat.set_percent(percent: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Turning Off Grove2GroveUnit in Python\nDESCRIPTION: Method to turn off the grove. It doesn't take any parameters and doesn't return anything.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/grove2grove.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nGrove2GroveUnit.off() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Radius in MicroPython\nDESCRIPTION: Method to set the radius of a Circle object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/circle.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWidgets.setRadius(radius: int)\n```\n\n----------------------------------------\n\nTITLE: Initializing PIR Hat in MicroPython\nDESCRIPTION: Creates a PIRHat object with a specified GPIO port. This is the constructor for the PIRHat class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/pir.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPIRHat(port)\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout on a TCP Socket in MicroPython\nDESCRIPTION: This code demonstrates how to set a timeout on blocking socket operations. This allows operations to raise an exception if they don't complete within the specified time period.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.client.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntcpc.settimeout(5)\ntcpc.settimeout(None)\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Temperature from ThermalUnit in MicroPython\nDESCRIPTION: Retrieves the maximum temperature reading from the thermal unit. Returns a float value representing the temperature.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/thermal.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nthermal_unit.get_max_temperature\n```\n\n----------------------------------------\n\nTITLE: Getting Load State from 4In8Out Module\nDESCRIPTION: Method to retrieve the current state of a specific load/LED on the 4In8Out module. It accepts a load number (1-8) as parameter and returns a boolean value representing the load state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/4in8out.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nModule4In8Out.get_load_state(load_num) -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Compass Heading\nDESCRIPTION: Method that returns the compass heading in degrees from 0 to 360, calculated from the magnetometer data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef get_compass():\n    # Get the compass heading value is in range of 0º ~ 360º.\n    # :return (float): range is 0 to 360 degree\n```\n\n----------------------------------------\n\nTITLE: Deinitializing BLE UART Server\nDESCRIPTION: Method to deinitialize and clean up the BLE UART server resources.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.server.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTServer.deinit()\n```\n\n----------------------------------------\n\nTITLE: Getting Rotary Status in MicroPython\nDESCRIPTION: Retrieves the rotation status of the Rotary object as a boolean value. Used to determine if the rotary encoder is currently active.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/rotary.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRotary.get_rotary_status() -> bool\n```\n\n----------------------------------------\n\nTITLE: Finding TICKS_MAX Value for the Current Port\nDESCRIPTION: Example demonstrating how to find the TICKS_MAX value used by the current MicroPython port by using ticks_add() with a negative offset from zero.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/software/time.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Find out TICKS_MAX used by this port\nprint(ticks_add(0, -1))\n```\n\n----------------------------------------\n\nTITLE: Setting Callback for LimitUnit Events\nDESCRIPTION: Method to set a callback function for a specified limit event type in the LimitUnit class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/limit.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLimitUnit.setCallback(type, cb)\n```\n\n----------------------------------------\n\nTITLE: Getting Fault IO State in StepMotorDriverModule\nDESCRIPTION: Method to retrieve the fault IO state for a specific motor. It takes the motor ID as a parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule.get_fault_io_state(motor_id)\n```\n\n----------------------------------------\n\nTITLE: Getting User Count from FingerUnit in Python\nDESCRIPTION: Method to get the count of registered users in the fingerprint module. Returns the number of users if successful, or -1 if unsuccessful.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/finger.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nFingerUnit.get_user_count() -> int\n```\n\n----------------------------------------\n\nTITLE: Defining MicroPython Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the table of contents for MicroPython documentation using reStructuredText syntax. It includes various sections and subsections, organized hierarchically with a maximum depth of 2 levels.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    get-started/index.rst\n    library/index.rst\n    controllers/index.rst\n    widgets/index.rst\n    software/index.rst\n    hardware/index.rst\n    advanced/index.rst\n    module/index.rst\n    unit/index.rst\n    base/index.rst\n    advanced/index.rst\n    quick-reference/index.rst\n    COPYRIGHT.rst\n```\n\n----------------------------------------\n\nTITLE: Getting Firmware Version from 4In8Out Module\nDESCRIPTION: Method to retrieve the firmware version of the 4In8Out module. It returns an integer representing the current firmware version.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/4in8out.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nModule4In8Out.get_firmware_version() -> int\n```\n\n----------------------------------------\n\nTITLE: Stopping Audio Recording in MicroPython\nDESCRIPTION: Stops the current audio recording session completely.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.recorder.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nRecorder.stop()\n```\n\n----------------------------------------\n\nTITLE: Interrupt Handling Methods\nDESCRIPTION: Methods for managing sensor interrupts including reading and clearing interrupt status, and configuring persistence cycles.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/color.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nread_interrupt() -> bool\nclear_interrupt()\nget_cycles()\nset_cycles(val)\nget_min_value()\nset_min_value(val)\nget_max_value()\nset_max_value(val)\n```\n\n----------------------------------------\n\nTITLE: Getting Refresh Rate from ThermalUnit in MicroPython\nDESCRIPTION: Retrieves the current refresh rate of the thermal unit. Returns a float value representing the refresh rate.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/thermal.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nthermal_unit.get_refresh_rate\n```\n\n----------------------------------------\n\nTITLE: Closing TCP Server Connection\nDESCRIPTION: Closes the TCP server socket connection to free up system resources.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.server.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntcps.close()\n```\n\n----------------------------------------\n\nTITLE: Creating IR Object in MicroPython\nDESCRIPTION: This snippet shows how to create an IR object using the IR class constructor. It takes two parameters for the receive and transmit pin definitions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/ir.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nIR(IO1,IO2)\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Background Color in Widgets Module\nDESCRIPTION: Sets the background color of the monitor using RGB888 color code format.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWidgets.fillScreen(color: int)\n```\n\n----------------------------------------\n\nTITLE: Registering DMX and RDM Component in ESP-IDF\nDESCRIPTION: This snippet registers a component for the ESP-IDF build system, including all the source files for DMX and RDM implementation. It specifies include directories and required dependencies such as driver, esp_timer, esp_common, esp_hw_support, and nvs_flash.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n  SRCS \n       # DMX driver HAL\n       \"src/dmx/hal/uart.c\" \"src/dmx/hal/timer.c\" \"src/dmx/hal/nvs.c\"\n       \"src/dmx/hal/gpio.c\"\n       \n       # DMX driver and sniffer\n       \"src/dmx/service.c\" \"src/dmx/driver.c\"\n       \"src/dmx/io.c\" \"src/dmx/device.c\" \"src/dmx/parameter.c\"\n       \"src/dmx/sniffer.c\" \n\n       # RDM driver\n       \"src/rdm/driver.c\"\n       \n       # RDM controller\n       \"src/rdm/controller/discovery.c\" \"src/rdm/controller/product_info.c\"\n       \"src/rdm/controller/device_control.c\" \"src/rdm/controller/dmx_setup.c\"\n       \"src/rdm/controller/utils.c\"\n       \n       # RDM responder\n       \"src/rdm/responder.c\" \"src/rdm/responder/discovery.c\"\n       \"src/rdm/responder/product_info.c\" \"src/rdm/responder/rdm_info.c\"\n       \"src/rdm/responder/device_control.c\" \"src/rdm/responder/queue_status.c\"\n       \"src/rdm/responder/dmx_setup.c\" \"src/rdm/responder/sensor_parameter.c\"\n       \"src/rdm/responder/power_lamp.c\" \"src/rdm/responder/utils.c\"\n  INCLUDE_DIRS \"src\"\n  REQUIRES driver esp_timer esp_common esp_hw_support nvs_flash\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Rotary Value in MicroPython\nDESCRIPTION: Sets the rotation value of the Rotary object to a specified value. This method does not return any value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/rotary.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nRotary.set_rotary_value() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Vibration Frequency in MicroPython\nDESCRIPTION: This method sets the vibration frequency of the motor. The frequency range is from 10 to 55 Hz.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/vibrator.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nVibratorHAT.set_freq(freq)\n```\n\n----------------------------------------\n\nTITLE: Setting Label Font in MicroPython\nDESCRIPTION: Method to set the font set of a Label object. Uses built-in fonts available in Widgets.FONTS.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/label.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLabel.setFont(font)\n```\n\n----------------------------------------\n\nTITLE: Pressing Lowercase 'a' on USB Keyboard\nDESCRIPTION: Example demonstrating how to press and release the lowercase 'a' key using the set_keys and send_report methods.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/device/keyboard.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nKeyboard.set_keys(k0=KeyCode.A)\nKeyboard.send_report()\nKeyboard.set_keys(k0=0)\nKeyboard.send_report()\n```\n\n----------------------------------------\n\nTITLE: Sending Data Through Socket\nDESCRIPTION: Sends data through the connected socket, supporting both bytes and string data types.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.server.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntcps.send(b'Hello, World!')\ntcps.send('Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Setting Motor State in StepMotorDriverModule\nDESCRIPTION: Method to enable or disable the motor. It takes a boolean state parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule.set_motor_state(state)\n```\n\n----------------------------------------\n\nTITLE: Closing UDP Client Socket in MicroPython\nDESCRIPTION: Closes the UDP socket connection. This should be called when the client is done communicating.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.client.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nudpc.close()\n```\n\n----------------------------------------\n\nTITLE: Getting Y-Axis Value in MicroPython\nDESCRIPTION: Retrieves the y-axis value from the specified channel (0 or 1) of the JoyC Hat.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joyc.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nJoyCHat.get_y(channel: int = 0) -> int\n```\n\n----------------------------------------\n\nTITLE: SCD40 Response Reading Method\nDESCRIPTION: Method to read responses from the SCD40 sensor after sending commands. Specifies number of bytes to read from the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/scd40.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef read_response(num):\n    \"\"\"Read the sensor's response.\n    :param int num: The number of bytes to read from the sensor.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Registering DMX Write Component for ESP-IDF\nDESCRIPTION: Registers the ESPIDF_DMXWrite.c source file as an ESP-IDF component. Configures the component without any additional include directories.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/examples/ESPIDF_DMXWrite/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRCS \"ESPIDF_DMXWrite.c\"\n    INCLUDE_DIRS \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Anchor Status Callback in MicroPython\nDESCRIPTION: Method to register a callback function that will be triggered when an anchor's status changes (online/offline).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit.set_callback(anchor, event, callback)\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Limit Switch State in StepMotorDriverModule\nDESCRIPTION: Method to get the state of a specific limit switch. It takes the switch ID as a parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule.get_limit_switch_state(switch_id)\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents\nDESCRIPTION: RST markup for defining a table of contents structure that links to a template file with a maximum depth of 3 levels\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/contribute/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 3\n\n    template.rst\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Visibility in MicroPython\nDESCRIPTION: Method to set the visibility of a Circle object using a boolean parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/circle.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nWidgets.setVisible(visible: bool)\n```\n\n----------------------------------------\n\nTITLE: Flushing UART Buffer in MicroPython\nDESCRIPTION: This code shows how to wait until all data has been sent on the UART bus using the flush() method.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/uart.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nuart1.flush()\n```\n\n----------------------------------------\n\nTITLE: Setting Protocol Format in QR Code Reader\nDESCRIPTION: This method configures the protocol format for the QR code reader. It accepts an integer parameter 'mode' to set various formats including no protocol and different data structures with CRC.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.set_protocol_format(mode)\n```\n\n----------------------------------------\n\nTITLE: Setting Rotary Value in MicroPython\nDESCRIPTION: Method to set the rotation value of the Rotary object. Takes an integer parameter to adjust the current value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_encoder.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nMiniEncoderCHat.set_rotary_value(new_value: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Configuring and Registering ESP-IDF Component\nDESCRIPTION: CMake configuration that sets up include directories, collects C source files, specifies nvs_flash as a dependency, registers the component, and disables format warnings during compilation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/uiflow_utility/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(COMPONENT_ADD_INCLUDEDIRS\n    .\n)\n\nfile(GLOB SRCS\n    *.c\n)\n\nset(COMPONENT_SRCS ${SRCS})\nset(COMPONENT_REQUIRES nvs_flash)\n\n\nregister_component()\ntarget_compile_options(${COMPONENT_LIB} PRIVATE \"-Wno-format\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Deadline with ticks_add() and ticks_diff()\nDESCRIPTION: Example showing how to calculate a deadline for an operation and test for it using ticks_add() to set the deadline and ticks_diff() to check if the deadline has passed.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/software/time.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Calculate deadline for operation and test for it\ndeadline = ticks_add(time.ticks_ms(), 200)\nwhile ticks_diff(deadline, time.ticks_ms()) > 0:\n    do_a_little_of_something()\n```\n\n----------------------------------------\n\nTITLE: Setting MicroPython Directory Path in CMake for M5Stack UIFlow\nDESCRIPTION: This snippet checks if the MICROPY_DIR variable is not set, and if so, sets it to the parent directory of the project, assuming it contains the micropython folder. It uses CMake's get_filename_component function to resolve the absolute path.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/main_esp32/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT MICROPY_DIR)\n    get_filename_component(MICROPY_DIR ${PROJECT_DIR}/../micropython/ ABSOLUTE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting UWB Unit Firmware Version in MicroPython\nDESCRIPTION: Method to retrieve the firmware version installed on the UWB unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uwb.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nUWBUnit.get_version()\n```\n\n----------------------------------------\n\nTITLE: Turning Off Vibrator Motor in MicroPython\nDESCRIPTION: This method turns off the vibrator motor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/vibrator.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nVibratorHAT.turn_off()\n```\n\n----------------------------------------\n\nTITLE: Getting Attitude Data\nDESCRIPTION: Method that returns the attitude angles (yaw, pitch, and roll) in degrees as a tuple of float values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef get_attitude():\n    # Get the attitude angles as yaw, pitch, and roll in degrees.\n    # :return (tuple): tuple of yaw, pitch, and roll (float, float, float)\n```\n\n----------------------------------------\n\nTITLE: Class Property Template in Python\nDESCRIPTION: Template showing class property implementation with pass statement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/contribute/template.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npass\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple Holding Registers Event Constant\nDESCRIPTION: Modbus function code 16 constant for writing to multiple holding registers operation\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.WRITE_MULTIPLE_HOLDING_REGISTERS_EVENT\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with requests2.post()\nDESCRIPTION: Function to send a POST request. It takes a URL and optional keyword arguments, returning a Response object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/requests2.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrequests2.post(url, **kw)\n```\n\n----------------------------------------\n\nTITLE: Getting Midpoint Temperature from ThermalUnit in MicroPython\nDESCRIPTION: Retrieves the midpoint temperature reading from the thermal unit. Returns a float value representing the temperature.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/thermal.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nthermal_unit.get_midpoint_temperature\n```\n\n----------------------------------------\n\nTITLE: Setting LoRaSx1262Module to Standby Mode\nDESCRIPTION: Code to put the LoRa module into standby mode to reduce power consumption while maintaining a relatively quick response time.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lora_sx1262.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlora868v12_0.standby()\n```\n\n----------------------------------------\n\nTITLE: Getting Relay Status in MicroPython\nDESCRIPTION: Method to retrieve the current status of the relay switch.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRelayUnit.get_status()\n```\n\n----------------------------------------\n\nTITLE: Mouse Button Click Implementation\nDESCRIPTION: Example demonstrating how to simulate a mouse button press and release action with the Mouse class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/device/mouse.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nset_buttons(left=True)  # press\nsend_report()\nset_buttons(left=False) # release\nsend_report()\n```\n\n----------------------------------------\n\nTITLE: Reading PPS Output Current\nDESCRIPTION: Returns the current output current as a float value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.read_output_current() -> float\n```\n\n----------------------------------------\n\nTITLE: Defining LittleFS VFS Structure in C++ for MicroPython\nDESCRIPTION: Defines the structure for a LittleFS v2 virtual filesystem object in MicroPython. This structure contains metadata about the filesystem instance including blockdev details, configuration, and current directory.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/cmodules/m5unified/mpy_m5lfs2.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef struct _mp_obj_vfs_lfs2_t {\n    mp_obj_base_t base;\n    mp_vfs_blockdev_t blockdev;\n    bool enable_mtime;\n    vstr_t cur_dir;\n    struct lfs2_config config;\n    lfs2_t lfs;\n} mp_obj_vfs_lfs2_t;\n```\n\n----------------------------------------\n\nTITLE: Reading DMX Packets Synchronously\nDESCRIPTION: Example of synchronous DMX packet reading with timeout handling and error checking. Uses dmx_receive() to wait for new packets and dmx_read() to copy data into a buffer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nuint8_t data[DMX_PACKET_SIZE];\n\ndmx_packet_t packet;\nif (dmx_receive(DMX_NUM_1, &packet, DMX_TIMEOUT_TICK)) {\n\n  // Check that no errors occurred.\n  if (packet.err == DMX_OK) {\n    dmx_read(DMX_NUM_1, data, packet.size);\n  } else {\n    printf(\"An error occurred receiving DMX!\");\n  }\n\n} else {\n  printf(\"Timed out waiting for DMX.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching Callback from DMX Channel in Python\nDESCRIPTION: Method to detach the callback function from a specified DMX channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dmx.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nDMX512Module.detach_channel(channel)\n```\n\n----------------------------------------\n\nTITLE: Event Callback Setup\nDESCRIPTION: Method for setting up event callbacks for different key actions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/key.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsetCallback(type:Callback_Type, cb)\n```\n\n----------------------------------------\n\nTITLE: Configuring UIFlow MicroPython Component Build in CMake\nDESCRIPTION: Sets up component build configuration including include paths, source files, dependencies and compiler options. Requires M5Unified and M5GFX components and disables format warnings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/components/BOX3GFX/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(COMPONENT_ADD_INCLUDEDIRS\n    .\n)\n\nfile(GLOB SRCS\n    *.cpp\n)\n\nset(COMPONENT_SRCS ${SRCS})\nset(COMPONENT_REQUIRES M5Unified M5GFX)\n\n\nregister_component()\ntarget_compile_options(${COMPONENT_LIB} PRIVATE \"-Wno-format\")\n```\n\n----------------------------------------\n\nTITLE: Setting I2C Address for MiniJoyHat\nDESCRIPTION: Changes the I2C address of the MiniJoyHat. The address must be between 0x01 and 0x7F.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_joy.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nMiniJoyHat.set_i2c_address(address: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Device Management Methods\nDESCRIPTION: Utility methods for device management including checking data readiness, bootloader control, and device status retrieval.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ac_measure.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_data_ready(self):\n\ndef set_jump_bootloader(self):\n\ndef get_device_status(self, mode):\n\ndef set_i2c_address(self, addr):\n```\n\n----------------------------------------\n\nTITLE: Setting Trigger Pin Value\nDESCRIPTION: Sets the trigger pin value to either high (1) or low (0) level\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.set_trig(value)\n```\n\n----------------------------------------\n\nTITLE: Getting Grove Output Status from TimerPWR Unit\nDESCRIPTION: Method to check if the Grove output is enabled. Returns True if enabled, False if disabled.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.get_grove_output_status()\n```\n\n----------------------------------------\n\nTITLE: Implementing LFS2Wrapper Class for DataWrapper Extension\nDESCRIPTION: Declares a LFS2Wrapper class that extends the m5gfx::DataWrapper to provide LittleFS filesystem functionality. It includes method declarations for file operations and initializes transaction requirements.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/cmodules/m5unified/mpy_m5lfs2.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct LFS2Wrapper : public m5gfx::DataWrapper\n{\n    LFS2Wrapper() : DataWrapper()\n    {\n        need_transaction = true;\n    }\n\n    bool open(const char *path) override {\n        return open(path, LFS2_O_RDWR | LFS2_O_CREAT);\n    }\n\n    bool open(const char *path, int flag) {\n        const char *full_path;\n        struct lfs2_info _finfo;\n        mp_vfs_mount_t *_fm = mp_vfs_lookup_path(path, &full_path);\n        if (_fm == MP_VFS_NONE || _fm == MP_VFS_ROOT) {\n            if (_fm == MP_VFS_NONE) {\n                mp_printf(&mp_plat_print, \"file <%s> was not found\\r\\n\", path);\n            }\n            if (_fm == MP_VFS_ROOT) {\n                mp_printf(&mp_plat_print, \"file path is invalid\\r\\n\");\n            }\n            return false;\n        }\n        _fp = &((mp_obj_vfs_lfs2_t *)MP_OBJ_TO_PTR(_fm->obj))->lfs;\n        enum lfs2_error res = (lfs2_error)lfs2_stat(_fp, full_path, &_finfo);\n        if (res != LFS2_ERR_OK) {\n            mp_printf(&mp_plat_print, \"%s\\r\\n\", strerror(res));\n            return false;\n        }\n        _file = (lfs2_file_t *)malloc(1 * sizeof(lfs2_file_t));\n        memset(&_fcfg, 0, sizeof(lfs2_file_config));\n        _fcfg.buffer = malloc(_fp->cfg->cache_size * sizeof(uint8_t));\n        return (lfs2_file_opencfg(_fp, _file, full_path, flag,\n                &_fcfg) == LFS2_ERR_OK) ? true: false;\n    }\n\n    int read(uint8_t *buf, uint32_t len) override {\n        return lfs2_file_read(_fp, _file, (char *)buf, len);\n    }\n    void skip(int32_t offset) override {\n        lfs2_file_seek(_fp, _file, offset, LFS2_SEEK_CUR);\n    }\n    bool seek(uint32_t offset) override {\n        return lfs2_file_seek(_fp, _file, offset, LFS2_SEEK_SET);\n    }\n    bool seek(uint32_t offset, int origin) {\n        return lfs2_file_seek(_fp, _file, offset, origin);\n    }\n    void close() override {\n        if (_fp) {\n            lfs2_file_close(_fp, _file);\n        }\n        if (_file) {\n            free(_file);\n        }\n        if (_fcfg.buffer) {\n            free(_fcfg.buffer);\n        }\n    }\n    int32_t tell(void) override {\n        return lfs2_file_tell(_fp, _file);\n    }\n\nprotected:\n    lfs2_t *_fp = nullptr;\n    lfs2_file_t *_file = nullptr;\n    struct lfs2_file_config _fcfg;\n};\n```\n\n----------------------------------------\n\nTITLE: Image Height Method Implementation\nDESCRIPTION: This method returns the height of the image in pixels. It is part of the image.Image class and can be used in both MicroPython and UIFlow2.0.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/image.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nheight() -> int\n```\n\n----------------------------------------\n\nTITLE: Including Reference for M5Paper Controllers in RST\nDESCRIPTION: This RST directive includes a reference file for M5Paper controllers, likely containing additional documentation or specifications.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/controllers/paper.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../refs/controllers.paper.ref\n```\n\n----------------------------------------\n\nTITLE: Static Method Template in Python\nDESCRIPTION: Template showing static method implementation with pass statement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/contribute/template.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npass\n```\n\n----------------------------------------\n\nTITLE: Setting MicroPython Directory Path in CMake for UIFlow\nDESCRIPTION: Conditionally sets the path to the base MicroPython directory if not already defined. This ensures the build system can locate the necessary MicroPython source files.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/main_esp32c3/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT MICROPY_DIR)\n    get_filename_component(MICROPY_DIR ${PROJECT_DIR}/../micropython/ ABSOLUTE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Reading Holding Registers Event Constant\nDESCRIPTION: Modbus function code 3 constant for reading holding registers operation\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.READ_INPUT_REGISTERS_EVENT\n```\n\n----------------------------------------\n\nTITLE: Calibrating Bala2 Sensor\nDESCRIPTION: Calibrates the Bala2 module sensors.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/bala2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmodule_bala2_0.calibrate()\n```\n\n----------------------------------------\n\nTITLE: Configuring Board and SDK Settings\nDESCRIPTION: Handles board configuration validation, SDK configuration file management, and sets up build variants. Includes logic for combining multiple SDK configuration files.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT MICROPY_BOARD)\n    set(MICROPY_BOARD M5STACK_AtomS3)\nendif()\n\nif(NOT MICROPY_BOARD_DIR)\n    set(MICROPY_BOARD_DIR ${CMAKE_CURRENT_LIST_DIR}/boards/${MICROPY_BOARD})\nendif()\nif(NOT EXISTS ${MICROPY_BOARD_DIR}/mpconfigboard.cmake)\n    message(FATAL_ERROR \"Invalid MICROPY_BOARD specified: ${MICROPY_BOARD}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing Simple MQTT Client\nDESCRIPTION: Shows how to import the MQTTClient class from the umqtt.simple module for basic MQTT functionality.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom umqtt.simple import MQTTClient\n```\n\n----------------------------------------\n\nTITLE: Getting Execution Time for G-code Commands\nDESCRIPTION: Method to estimate the execution time of a G-code command. Returns an integer representing the estimated time.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.get_code_time(code)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for UIFlow MicroPython Base\nDESCRIPTION: This snippet defines a table of contents (toc) for the base components of UIFlow MicroPython. It sets the maximum depth to 1 and includes a reference to the atom_socket.rst file.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/base/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    atom_socket.rst\n```\n\n----------------------------------------\n\nTITLE: Disabling PPS Output\nDESCRIPTION: Method to disable the PPS output without parameters.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pps.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPPSModule.disable_output()\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-IDF Component for RDM Discovery in C\nDESCRIPTION: This code snippet registers an ESP-IDF component for RDM Discovery. It specifies the source file 'ESPIDF_RDMDiscovery.c' and sets an empty include directory. This is typically used in the CMakeLists.txt file of an ESP-IDF project component.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/examples/ESPIDF_RDMDiscovery/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nidf_component_register(\n    SRCS \"ESPIDF_RDMDiscovery.c\"\n    INCLUDE_DIRS \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Filling NECO Unit with Specific Color (Alternative Method)\nDESCRIPTION: Alternative method to fill the entire NECO Unit strip with a specified color.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/neco.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nNECOUnit.fill_color(c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for ADF Component in CMake\nDESCRIPTION: Defines a list of include directories for the ADF component, covering various audio-related modules, drivers, and services. Some entries are commented out, possibly for customization or debugging purposes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/boards/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(\n    includes\n        ${ADF_BOARD_DIR}/\n        # ${ADF_BOARD_CODEC_INC}\n        include\n        ${ADF_COMPS}/audio_board/include\n        ${ADF_COMPS}/audio_hal/include\n        ${ADF_COMPS}/audio_hal/driver/include\n        ${ADF_COMPS}/audio_stream/include\n        ${ADF_COMPS}/audio_stream/lib/gzip/include\n        ${ADF_COMPS}/audio_stream/lib/hls/include\n        ${ADF_COMPS}/esp_peripherals/include\n        ${ADF_COMPS}/esp_peripherals/driver/i2c_bus\n        ${ADF_COMPS}/display_service/include\n        ${ADF_COMPS}/esp_dispatcher/include\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Battery Level in MicroPython\nDESCRIPTION: Returns the remaining battery power as a percentage between 0-100.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nPower.getBatteryLevel() -> int\n```\n\n----------------------------------------\n\nTITLE: Flashing MicroPython Firmware to ESP32C6 Board\nDESCRIPTION: Command to write the MicroPython firmware to an ESP32C6 board starting at address 0x0. This uses esptool.py with specific parameters for baud rate and compression to install the firmware.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/boards/M5STACK_NanoC6/deploy_nanoc6.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nesptool.py --chip esp32c6 --port /dev/ttyUSB0 --baud 460800 write_flash -z 0x0 M5STACK_NANOC6-20240602-v1.24.0.bin\n```\n\n----------------------------------------\n\nTITLE: Setting NXP Config Word (MicroPython)\nDESCRIPTION: This method sets the configuration word for an NXP UHFRFID tag. It takes the new config word and an optional access password. The method returns a boolean indicating success or failure.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.set_nxp_config_word(config_word: int, password: str = \"00000000\") -> bool\n```\n\n----------------------------------------\n\nTITLE: Sending PUT Request with requests2.put()\nDESCRIPTION: Function to send a PUT request. It takes a URL and optional keyword arguments, returning a Response object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/requests2.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrequests2.put(url, **kw)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Volume Level with Player.get_vol() in MicroPython\nDESCRIPTION: Returns the current volume level of the audio player.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.player.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nPlayer.get_vol()\n```\n\n----------------------------------------\n\nTITLE: Turn Off Buzzer Method\nDESCRIPTION: Stops the buzzer by turning it off.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/buzzer.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nBuzzerUnit.turn_off()\n```\n\n----------------------------------------\n\nTITLE: Synchronous DMX Data Writing in C\nDESCRIPTION: This code shows how to write DMX data synchronously by waiting for the previous packet to finish sending before writing new data. It uses dmx_wait_sent() to ensure synchronous operation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nuint8_t data[DMX_PACKET_SIZE] = { 0, 1, 2, 3 };\n\nwhile (true) {\n  // Send the DMX packet.\n  dmx_send(DMX_NUM_1);\n\n  // Process the next DMX packet (while the previous is being sent) here.\n  for (int i = 1; i < DMX_PACKET_SIZE; i++) {\n    data[i]++;  // Increment the value of each slot, excluding the start code.\n  }\n\n  // Wait until the packet is finished being sent before proceeding.\n  dmx_wait_sent(DMX_NUM_1, DMX_TIMEOUT_TICK);\n\n  // Now write the packet synchronously!\n  dmx_write(DMX_NUM_1, data, DMX_PACKET_SIZE);\n}\n```\n\n----------------------------------------\n\nTITLE: Roller485 I2C Communication Example\nDESCRIPTION: Example demonstrating I2C communication with a Roller485 motor controller.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/roller485.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[Code reference to ../../../examples/unit/roller485/roller485_i2c_fire_example.py]\n```\n\n----------------------------------------\n\nTITLE: Class Method Template in Python\nDESCRIPTION: Template showing class method implementation with pass statement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/contribute/template.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npass\n```\n\n----------------------------------------\n\nTITLE: Resetting Button Count in ButtonUnit\nDESCRIPTION: Method to reset the internal count value of button presses to zero.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/button.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nButtonUnit.count_reset()\n```\n\n----------------------------------------\n\nTITLE: Getting Latitude in Decimal Format\nDESCRIPTION: Method to retrieve the current latitude in decimal degrees format (dd.dddd) from the GNSS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef get_latitude_decimal():\n    # get latitude decimal.\n    # :return (float): latitude decimal(dd.dddd).\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Light Mode in QR Code Scanner\nDESCRIPTION: Sets the fill light mode for the QR code scanner module. The mode parameter determines the behavior of the fill light during scanning operations.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/qrcode.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nmodule_qrcode.set_fill_light_mode(mode)\n```\n\n----------------------------------------\n\nTITLE: Installing DMX Driver with Personalities in C\nDESCRIPTION: This snippet demonstrates how to install the DMX driver with default configuration and multiple DMX personalities. It defines an array of personalities and installs the driver using the dmx_driver_install function.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ndmx_config_t config = DMX_CONFIG_DEFAULT;\ndmx_personality_t personalities[] = {\n  {1, \"Single-channel Mode\"},  // Single-address DMX personality\n  {3, \"RGB\"},                  // Three-address RGB mode\n  {4, \"RGBW\"},                 // Four-address RGBW personality\n  {7, \"RGBW with Macros\"}      // RGBW with three additional macro parameters\n};\nconst int personality_count = 4;\ndmx_driver_install(DMX_NUM_1, &config, personalities, personality_count);\n```\n\n----------------------------------------\n\nTITLE: Setting Brightness for RGB LEDs\nDESCRIPTION: Method to set the brightness level of all RGB LEDs in the range of 0-100.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rgb.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRGB.set_brightness(br: int)\n```\n\n----------------------------------------\n\nTITLE: Getting I2C Address in Relay2Module\nDESCRIPTION: Method to get the current I2C address of the Relay2 Module. Returns an integer representing the I2C address.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/relay_2.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nRelay2Module.get_i2c_address()\n```\n\n----------------------------------------\n\nTITLE: Filling NECO Unit with Specific Color in MicroPython\nDESCRIPTION: Method to fill the entire NECO Unit strip with a specified color.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/neco.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nNECOUnit.fill(v)\n```\n\n----------------------------------------\n\nTITLE: Writing DMX Data to the Bus\nDESCRIPTION: Demonstrates how to write data to the DMX buffer, send it to the DMX bus, and wait until the packet is fully transmitted. This code shows the basic transmit loop pattern for a DMX controller.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nuint8_t data[DMX_PACKET_SIZE] = {0};\n\nwhile (true) {\n  // Write to the packet and send it.\n  dmx_write(dmx_num, data, DMX_PACKET_SIZE);\n  dmx_send(dmx_num);\n  \n  // Do work here...\n\n  // Block until the packet is finished sending.\n  dmx_wait_sent(dmx_num, DMX_TIMEOUT_TICK);\n}\n```\n\n----------------------------------------\n\nTITLE: Reinitializing CO2L Unit in MicroPython\nDESCRIPTION: Method to reinitialize the sensor by reloading user settings from EEPROM.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.reinit()\n```\n\n----------------------------------------\n\nTITLE: RDM Broadcast UID Example\nDESCRIPTION: Example of RDM broadcast UID format for targeting all devices from a specific manufacturer (05e0).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n05e0:ffffffff\n```\n\n----------------------------------------\n\nTITLE: Reading Coils Event Constant\nDESCRIPTION: Modbus function code 1 constant for reading coils operation\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.READ_DISCRETE_INPUTS_EVENT\n```\n\n----------------------------------------\n\nTITLE: Enabling TinyUSB Support and Including ESP32 Common CMake File\nDESCRIPTION: Enables TinyUSB support for the project and includes the ESP32 common CMake file. This sets up additional configuration for the ESP32 platform.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/main_esp32s3/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(MICROPY_PY_TINYUSB ON)\n\n# include(${MICROPY_PORT_DIR}/esp32_common.cmake)\ninclude(${CMAKE_CURRENT_LIST_DIR}/../esp32_common.cmake)\n```\n\n----------------------------------------\n\nTITLE: Writing Single Coil Event Constant\nDESCRIPTION: Modbus function code 5 constant for writing to a single coil operation\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.WRITE_SINGLE_HOLDING_REGISTER_EVENT\n```\n\n----------------------------------------\n\nTITLE: Speaker2 Hat Class Definition\nDESCRIPTION: Class definition for Speaker2Hat that inherits from the Speaker class. Provides audio playback functionality for the Speaker2 Hat hardware.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/speaker2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Speaker2Hat(Speaker):\n    # Members and methods inherited from Speaker class\n    # See hardware.Speaker.Methods for details\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket Options\nDESCRIPTION: Sets specific socket options like address reuse at the specified level.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.server.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntcps.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 0)\ntcps.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n```\n\n----------------------------------------\n\nTITLE: Reflective IR Unit Event Constants in MicroPython\nDESCRIPTION: Constants that define the event types for the Reflective IR Unit. These are used with the set_callback method to specify which events should trigger the callback function.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/reflective_ir.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nReflectiveIRUnit.EVENT_DETECTED\nReflectiveIRUnit.EVENT_NOT_DETECTED\n```\n\n----------------------------------------\n\nTITLE: Getting Audio Volume Level in MicroPython\nDESCRIPTION: Returns the current volume level of the audio data on a scale of 0-100.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.recorder.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nRecorder.volume() -> int\n```\n\n----------------------------------------\n\nTITLE: Reading DMX Data with Offset\nDESCRIPTION: Shows how to read a specific portion of DMX data using dmx_read_offset(). Useful for devices that only need to process a subset of the DMX packet.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nconst int size = 12;   // The size of this device's DMX footprint.\nconst int offset = 5;  // The start address of this device.\nuint8_t data[size];\n\n// Read slots 5 through 17. Returns the number of slots that were read.\nint num_slots_read = dmx_read_offset(DMX_NUM_1, offset, data, size);\n```\n\n----------------------------------------\n\nTITLE: MicroPython Example for NCIR Hat with StickC Plus 2\nDESCRIPTION: A complete example demonstrating the usage of NCIR Hat with StickC Plus 2. The code is referenced from an external file.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/ncir.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Content of ../../../examples/hat/ncir/stickc_plus2_ncir_example.py\n# (Actual code not provided in the given text)\n```\n\n----------------------------------------\n\nTITLE: Class Constant Template in Python\nDESCRIPTION: Template showing class constant implementation with pass statement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/contribute/template.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npass\n```\n\n----------------------------------------\n\nTITLE: ULTRASONIC_I2C Class Constructor in MicroPython\nDESCRIPTION: Documentation of the ULTRASONIC_I2C class constructor which creates an instance of the ultrasonic sensor interface. It requires an I2C port as a parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/ultrasonic.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nULTRASONIC_I2C(PORT)\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Flip Mode for Camera in MicroPython for M5Stack UIFlow\nDESCRIPTION: Enables or disables vertical flip mode for the camera. Default is disabled (False).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/camera.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncamera.set_vflip(enable)\n```\n\n----------------------------------------\n\nTITLE: Disabling and Reenabling DMX Driver in C\nDESCRIPTION: This snippet demonstrates how to properly disable the DMX driver before performing operations that disable cache, and then reenabling it afterwards. This is necessary to prevent data corruption when the driver is not placed in IRAM.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_34\n\nLANGUAGE: c\nCODE:\n```\n// Disable the DMX driver if it isn't already\nif (dmx_driver_is_enabled(DMX_NUM_1)) {\n  dmx_driver_disable(DMX_NUM_1);\n}\n\n// Read from or write to flash memory (or otherwise disable the cache) here...\n\ndmx_driver_enable(DMX_NUM_1);\n```\n\n----------------------------------------\n\nTITLE: Disabling PIR Interrupt in MicroPython\nDESCRIPTION: Disables the human detection function of the PIR sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/pir.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPIRHat.disable_irq()\n```\n\n----------------------------------------\n\nTITLE: Configuring User Panel with MicroPython in C++\nDESCRIPTION: Defines a function for creating a new user panel object with various configuration options. It uses the mp_obj_t type from MicroPython and supports a wide range of parameters for panel and touch setup.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/mpy_user_lcd.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nmp_obj_t user_panel_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *all_args) {\n    /* *FORMAT-OFF* */\n    enum {\n        ARG_panel, ARG_touch,\n        // panel commom setting\n        ARG_w, ARG_h, ARG_ox, ARG_oy, ARG_invert, ARG_rgb,\n        // spi display panel setting\n        ARG_spi_host, ARG_spi_freq, ARG_sclk, ARG_mosi, ARG_miso,\n        ARG_dc, ARG_cs, ARG_rst, ARG_busy,\n        // i2c display panel setting\n        ARG_i2c_host, ARG_i2c_addr, ARG_i2c_freq, ARG_sda, ARG_scl,\n        // backlight setting\n        ARG_bl, ARG_bl_invert, ARG_bl_pwm_freq, ARG_bl_pwm_chn,\n        // touch setting\n        ARG_tp_i2c_host, ARG_tp_i2c_addr, ARG_tp_i2c_freq,\n        ARG_tp_w, ARG_tp_h, ARG_tp_ox, ARG_tp_oy,\n        ARG_tp_sda, ARG_tp_scl, ARG_tp_int,\n    };\n\n    static const mp_arg_t allowed_args[] = {\n        { MP_QSTR_panel,       MP_ARG_INT | MP_ARG_REQUIRED, {.u_int = PANEL_UNKNOWN } },\n        { MP_QSTR_touch,       MP_ARG_INT                  , {.u_int = TP_UNKNOWN } },\n        // ... (other argument definitions)\n    };\n    // ... (function body would follow)\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping X-Axis Direction in MicroPython\nDESCRIPTION: Swaps the x-axis direction of the JoyC Hat. The swap parameter determines whether to enable or disable the swap.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joyc.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nJoyCHat.swap_x(swap: bool = True) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting ImagePlus Visibility\nDESCRIPTION: Method to control whether the ImagePlus widget is visible or hidden on the display.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/image+.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nImagePlus.setVisible(visible: bool)\n```\n\n----------------------------------------\n\nTITLE: Implementing LFS2Wrapper Class for File Operations in C++\nDESCRIPTION: This class extends m5gfx::DataWrapper to provide LittleFS2-specific file operations. It includes methods for opening, reading, seeking, and closing files within the LittleFS2 filesystem.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/mpy_m5lfs2.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct LFS2Wrapper : public m5gfx::DataWrapper\n{\n    LFS2Wrapper() : DataWrapper()\n    {\n        need_transaction = true;\n    }\n\n    bool open(const char *path) override {\n        return open(path, LFS2_O_RDWR | LFS2_O_CREAT);\n    }\n\n    bool open(const char *path, int flag) {\n        const char *full_path;\n        struct lfs2_info _finfo;\n        mp_vfs_mount_t *_fm = mp_vfs_lookup_path(path, &full_path);\n        if (_fm == MP_VFS_NONE || _fm == MP_VFS_ROOT) {\n            if (_fm == MP_VFS_NONE) {\n                mp_printf(&mp_plat_print, \"file <%s> was not found\\r\\n\", path);\n            }\n            if (_fm == MP_VFS_ROOT) {\n                mp_printf(&mp_plat_print, \"file path is invalid\\r\\n\");\n            }\n            return false;\n        }\n        _fp = &((mp_obj_vfs_lfs2_t *)MP_OBJ_TO_PTR(_fm->obj))->lfs;\n        enum lfs2_error res = (lfs2_error)lfs2_stat(_fp, full_path, &_finfo);\n        if (res != LFS2_ERR_OK) {\n            mp_printf(&mp_plat_print, \"%s\\r\\n\", strerror(res));\n            return false;\n        }\n        _file = (lfs2_file_t *)malloc(1 * sizeof(lfs2_file_t));\n        memset(&_fcfg, 0, sizeof(lfs2_file_config));\n        _fcfg.buffer = malloc(_fp->cfg->cache_size * sizeof(uint8_t));\n        return (lfs2_file_opencfg(_fp, _file, full_path, flag,\n                &_fcfg) == LFS2_ERR_OK) ? true: false;\n    }\n\n    int read(uint8_t *buf, uint32_t len) override {\n        return lfs2_file_read(_fp, _file, (char *)buf, len);\n    }\n    void skip(int32_t offset) override {\n        lfs2_file_seek(_fp, _file, offset, LFS2_SEEK_CUR);\n    }\n    bool seek(uint32_t offset) override {\n        return lfs2_file_seek(_fp, _file, offset, LFS2_SEEK_SET);\n    }\n    bool seek(uint32_t offset, int origin) {\n        return lfs2_file_seek(_fp, _file, offset, origin);\n    }\n    void close() override {\n        if (_fp) {\n            lfs2_file_close(_fp, _file);\n        }\n        if (_file) {\n            free(_file);\n        }\n        if (_fcfg.buffer) {\n            free(_fcfg.buffer);\n        }\n    }\n    int32_t tell(void) override {\n        return lfs2_file_tell(_fp, _file);\n    }\n\nprotected:\n    lfs2_t *_fp = nullptr;\n    lfs2_file_t *_file = nullptr;\n    struct lfs2_file_config _fcfg;\n};\n```\n\n----------------------------------------\n\nTITLE: Deinitializing Vibrator Motor in MicroPython\nDESCRIPTION: This method deinitializes the vibrator motor, releasing any resources it might be using.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/vibrator.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nVibratorHAT.deint()\n```\n\n----------------------------------------\n\nTITLE: Reading Discrete Inputs Event Constant\nDESCRIPTION: Modbus function code 2 constant for reading discrete inputs operation\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.READ_HOLDING_REGISTERS_EVENT\n```\n\n----------------------------------------\n\nTITLE: PID Control Parameters\nDESCRIPTION: Sets and gets PID control parameters for angle and speed control loops.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/bala2.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmodule_bala2_0.set_angle_pid(kp, ki, kd)\nmodule_bala2_0.set_speed_pid(kp, ki, kd)\n```\n\n----------------------------------------\n\nTITLE: Getting Firmware Version of MiniJoyHat\nDESCRIPTION: Retrieves the firmware version of the MiniJoyHat as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_joy.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nMiniJoyHat.get_firmware_version() -> str\n```\n\n----------------------------------------\n\nTITLE: RDM UID Format Example\nDESCRIPTION: Example showing RDM Unique ID format with manufacturer ID and device ID separated by colon. The sample shows a device with manufacturer ID 0xabcd and device ID 0x12345678.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nabcd:12345678\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Python Driver Class\nDESCRIPTION: Example of creating a basic test driver class with initialization and test methods. The class provides a simple structure for implementing custom drivers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/fs/user/libs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass test():\n\n    def __init__(self):\n        print(\"test class\")\n\n    def test(self):\n        print(\"test function\")\n```\n\n----------------------------------------\n\nTITLE: LVGL Display Buffer Flushing for M5Stack Display\nDESCRIPTION: Implements the display buffer flushing function for LVGL on M5Stack devices. It retrieves the display index from user data, accesses the corresponding display through M5.getDisplay(), and writes pixel data to the screen within the specified area.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/mpy_lvgl.txt#2025-04-21_snippet_0\n\nLANGUAGE: C/C++\nCODE:\n```\nvoid gfx_lvgl_flush(void *_disp_drv, const lv_area_t *area, lv_color_t *color_p) {\n    lv_disp_drv_t *disp_drv = (lv_disp_drv_t*)_disp_drv;\n\n    int idx = mp_obj_get_int(mp_obj_dict_get(disp_drv->user_data, MP_OBJ_NEW_QSTR(MP_QSTR_display_index)));\n    LovyanGFX *lvgl_gfx = (LovyanGFX *)&(M5.getDisplay(idx));\n    if (lvgl_gfx == nullptr) {\n        return;\n    }\n\n    int w = (area->x2 - area->x1 + 1);\n    int h = (area->y2 - area->y1 + 1);\n\n    lvgl_gfx->startWrite();\n    lvgl_gfx->setAddrWindow(area->x1, area->y1, w, h);\n    lvgl_gfx->writePixels((lgfx::rgb565_t *)&color_p->full, w * h);\n    lvgl_gfx->endWrite();\n    lv_disp_flush_ready(disp_drv);\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data into Buffer\nDESCRIPTION: Reads bytes into a specified buffer with optional size limit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs232.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = bytearray(10)\nnum_bytes = rs232_0.readinto(data)\nnum_bytes = rs232_0.readinto(data, 5)\n```\n\n----------------------------------------\n\nTITLE: RDM Controller Functions (rdm headers)\nDESCRIPTION: Remote Device Management protocol implementation including device discovery and control\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/keywords.txt#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nrdm_send_get_identify_device\nrdm_send_set_identify_device\nrdm_send_disc_unique_branch\nrdm_send_disc_mute\nrdm_send_disc_un_mute\nrdm_discover_with_callback\nrdm_discover_devices_simple\nrdm_send_get_dmx_start_address\nrdm_send_set_dmx_start_address\nrdm_send_get_device_info\nrdm_send_get_software_version_label\n```\n\n----------------------------------------\n\nTITLE: Getting Grove Voltage from TimerPWR Unit\nDESCRIPTION: Method to retrieve the Grove voltage. Returns the voltage in millivolts as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/timerpwr.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nTimerPWRUnit.get_grove_voltage()\n```\n\n----------------------------------------\n\nTITLE: Enabling PIR Interrupt in MicroPython\nDESCRIPTION: Enables the human detection function of the PIR sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/pir.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPIRHat.enable_irq()\n```\n\n----------------------------------------\n\nTITLE: Setting Specific LED Color in MicroPython\nDESCRIPTION: Method to set the color of a specific LED on the Encoder Unit. Requires an index (1 or 2) and an RGB color value (0x000000 - 0xFFFFFF).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/encoder.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nEncoderUnit.set_color(index, rgb: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Required Dependencies Based on ESP-IDF Version\nDESCRIPTION: Conditionally sets the required dependencies based on the ESP-IDF version. For ESP-IDF 5.0 and later, it uses updated component names and includes target-specific dependencies. For earlier versions, it uses the legacy component names.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(COMPONENT_SRCS ${SRCS})\nif (IDF_VERSION_MAJOR GREATER_EQUAL 5)\n    set(COMPONENT_REQUIRES esp_adc nvs_flash efuse driver esp_timer epdiy main_${IDF_TARGET})\nelse()\n    set(COMPONENT_REQUIRES esp_adc_cal nvs_flash efuse main)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Closing BLEUARTClient Connection\nDESCRIPTION: Method to close the connection to the BLE UART server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.client.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTClient.close()\n```\n\n----------------------------------------\n\nTITLE: Example of MQTT Subscription Callback Handler\nDESCRIPTION: Example function that handles received MQTT messages, extracting the topic and message content.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.default.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef on_sub_cb(data):\n    print(\"topic:\", data[0])\n    print(\"msg:\", data[1])\n```\n\n----------------------------------------\n\nTITLE: Registering ESPIDF_RDMSensor Component for ESP-IDF Build System\nDESCRIPTION: This snippet registers a component named RDMSensor for the ESP-IDF build system. It specifies that the component consists of one source file (ESPIDF_RDMSensor.c) and doesn't declare any additional include directories, meaning it relies on the default include paths.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/examples/ESPIDF_RDMSensor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRCS \"ESPIDF_RDMSensor.c\"\n    INCLUDE_DIRS \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ADF Component with ESP-IDF Build System in CMake\nDESCRIPTION: Uses the idf_component_register command to register the ADF component with the ESP-IDF build system, specifying source files, include directories, and required dependencies.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/boards/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n    SRCS\n        \"${srcs}\"\n    INCLUDE_DIRS\n        \"${includes}\"\n    REQUIRES\n        audio_pipeline\n        audio_sal\n        driver\n        esp-adf-libs\n        esp_http_client\n        esp_lcd\n        esp_codec_dev\n)\n```\n\n----------------------------------------\n\nTITLE: Writing and Sending DMX Data in C\nDESCRIPTION: This snippet demonstrates how to write DMX data to the driver and send it out on the DMX bus. It uses the dmx_write() function to write the data and dmx_send() to transmit it.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nuint8_t data[DMX_PACKET_SIZE] = { 0, 1, 2, 3 };\n\n// Write the packet and send it out on the DMX bus.\nconst int num_bytes_to_write = DMX_PACKET_SIZE;\ndmx_write(DMX_NUM_1, data, num_bytes_to_write);\ndmx_send(DMX_NUM_1,);\n```\n\n----------------------------------------\n\nTITLE: Deinitializing UART Communication\nDESCRIPTION: Turns off the UART bus and releases resources.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs232.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrs232_0.deinit()\n```\n\n----------------------------------------\n\nTITLE: Get Bootloader Version Method - MicroPython\nDESCRIPTION: Returns the bootloader version of the ScrollUnit as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/scroll.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nScrollUnit.get_bootloader_version() -> str\n```\n\n----------------------------------------\n\nTITLE: DMX Core Headers (esp_dmx.h)\nDESCRIPTION: Core DMX protocol version definitions and default configuration flags\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/keywords.txt#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nESP_DMX_VERSION_MAJOR\nESP_DMX_VERSION_MINOR\nESP_DMX_VERSION_PATCH\nESP_DMX_VERSION_ID\nESP_DMX_VERSION_LABEL\nDMX_INTR_FLAGS_DEFAULT\nDMX_CONFIG_DEFAULT\n```\n\n----------------------------------------\n\nTITLE: Registering Component and Setting Compiler Options\nDESCRIPTION: Registers the component with the ESP-IDF build system and applies specific compiler options and definitions. It disables certain warnings that might occur during compilation and defines board-specific identifiers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nregister_component()\ntarget_compile_options(${COMPONENT_LIB} PRIVATE \"-Wno-format\")\ntarget_compile_options(${COMPONENT_LIB} PRIVATE \"-Wno-array-bounds\")\ntarget_compile_definitions(${COMPONENT_LIB} PRIVATE BOARD_ID=${BOARD_ID})\ntarget_compile_definitions(${COMPONENT_LIB} PRIVATE M5GFX_BOARD=${BOARD_ID})\n```\n\n----------------------------------------\n\nTITLE: Image Width Method Implementation\nDESCRIPTION: This method returns the width of the image in pixels. It is part of the image.Image class and can be used in both MicroPython and UIFlow2.0.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/image.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidth() -> int\n```\n\n----------------------------------------\n\nTITLE: LVGL Touch Input Handling for M5Stack\nDESCRIPTION: Implements touch input reading for LVGL on M5Stack devices. It checks if there's an active touch event, and if so, retrieves the touch coordinates and reports them to LVGL as a pressed state. Otherwise, it reports a released state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/mpy_lvgl.txt#2025-04-21_snippet_1\n\nLANGUAGE: C/C++\nCODE:\n```\nbool gfx_lvgl_touch_read(lv_indev_drv_t *indev_drv, lv_indev_data_t *data) {\n    M5.update();\n\n    if (!M5.Touch.getCount()) {\n        data->point = (lv_point_t) { 0, 0 };\n        data->state = LV_INDEV_STATE_RELEASED;\n        return false;\n    }\n\n    auto tp = M5.Touch.getTouchPointRaw(1);\n    data->point = (lv_point_t) { tp.x, tp.y };\n    data->state = LV_INDEV_STATE_PRESSED;\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ESPIDF_RDMController Component with ESP-IDF\nDESCRIPTION: This CMake code registers a component named 'ESPIDF_RDMController' with the ESP-IDF build system. It specifies a single source file 'ESPIDF_RDMController.c' to be compiled, with no additional include directories specified.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/examples/ESPIDF_RDMController/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRCS \"ESPIDF_RDMController.c\"\n    INCLUDE_DIRS \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying File System Directory Structure for UIFlow MicroPython\nDESCRIPTION: Tree structure showing the organization of system resource files, including common resources and board-specific directories for different M5Stack boards like ATOMS3 and CORES3.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/fs/system/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── README.md  ----> this file\n├── common     ----> common resource for all board\n├── atoms3     ----> resource for atoms3 board\n├── cores3     ----> resource for cores3 board\n└── ...        ----> others board...\n```\n\n----------------------------------------\n\nTITLE: Setting Up LVGL and Component Integration\nDESCRIPTION: Configures LVGL graphics library integration and sets up additional components including camera module support for specific board types.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_WITH_LVGL)\n    idf_build_set_property(LV_MICROPYTHON 1)\n    idf_build_component(${CMAKE_SOURCE_DIR}/components/lv_bindings/lvgl)\n    idf_build_set_property(COMPILE_DEFINITIONS \"-DLV_KCONFIG_IGNORE\" APPEND)\n    separate_arguments(LV_CFLAGS_ENV UNIX_COMMAND $ENV{LV_CFLAGS})\n    list(APPEND LV_CFLAGS ${LV_CFLAGS_ENV})\n    idf_build_set_property(COMPILE_DEFINITIONS \"${LV_CFLAGS}\" APPEND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Playback Position with Player.pos() in MicroPython\nDESCRIPTION: Returns the current playback position in bytes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/audio.player.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nPlayer.pos()\n```\n\n----------------------------------------\n\nTITLE: Retrieving GRBL Module Status\nDESCRIPTION: Method to get the current status of the GRBL module. Returns a string with the status information.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.get_status()\n```\n\n----------------------------------------\n\nTITLE: Creating an RDM Parameter Callback Function in C\nDESCRIPTION: Demonstrates how to implement a callback function that will be executed when a specific RDM parameter request is received. The callback provides access to the request and response headers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_30\n\nLANGUAGE: c\nCODE:\n```\nvoid custom_callback(dmx_port_t dmx_num, rdm_header_t *request,\n                     rdm_header_t *response, void *context) {\n  if (request->pid == RDM_PID_SOFTWARE_VERSION_LABEL) {\n    printf(\"A RDM_PID_SOFTWARE_VERSION_LABEL request was received!\\n\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for ADF Component in CMake\nDESCRIPTION: Sets up a list of source files for the ADF component, including various audio-related modules and streams. Some entries are commented out, possibly for customization or debugging purposes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/boards/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(\n    srcs\n        ${ADF_BOARD_INIT_SRC}\n        # ${ADF_BOARD_CODEC_SRC}\n        # ${ADF_BOARD_DIR}/board_pins_config.c\n        ${ADF_COMPS}/audio_hal/audio_hal.c\n        ${ADF_COMPS}/audio_hal/audio_volume.c\n        ${ADF_COMPS}/audio_stream/http_stream.c\n        ${ADF_COMPS}/audio_stream/i2s_stream_idf5.c\n        # ${ADF_COMPS}/audio_stream/i2s_stream.c\n        ${ADF_COMPS}/audio_stream/raw_stream.c\n        ${ADF_COMPS}/audio_stream/http_playlist.c\n        ${ADF_COMPS}/audio_stream/lib/gzip/gzip_miniz.c\n        ${ADF_COMPS}/audio_stream/lib/hls/hls_parse.c\n        ${ADF_COMPS}/audio_stream/lib/hls/hls_playlist.c\n        ${ADF_COMPS}/audio_stream/lib/hls/join_path.c\n        ${ADF_COMPS}/audio_stream/lib/hls/line_reader.c\n        ${ADF_COMPS}/esp_peripherals/driver/i2c_bus/i2c_bus.c\n)\n```\n\n----------------------------------------\n\nTITLE: Sending RDM GET and SET Requests in C\nDESCRIPTION: Demonstrates how to send RDM GET and SET requests using the library functions. It shows getting device info and setting DMX start address, including handling of response data and error checking.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_24\n\nLANGUAGE: c\nCODE:\n```\nrdm_uid_t dest_uid = {0x05e0, 0x44c06fbf};  // The destination UID\nrdm_sub_device_t sub_device = RDM_SUB_DEVICE_ROOT;\nrdm_ack_t ack;  // Stores response information\n\nrdm_device_info_t device_info;  // Stores the response parameter data.\nif (rdm_send_get_device_info(DMX_NUM_1, &dest_uid, sub_device, &device_info,\n                             &ack)) {\n  printf(\"Successfully received device info from \" UIDSTR \"!\\n\",\n          UID2STR(ack.src_uid));\n}\n\nconst uint16_t new_address = 123;  // The new RDM_PID_DMX_START_ADDRESS to send.\nif (rdm_send_set_dmx_start_address(DMX_NUM_1, &dest_uid, sub_device, \n                                   new_address, &ack)) {\n  printf(\"Device \" UIDSTR \" has been set to DMX address %i.\\n\",\n          UID2STR(dest_uid), new_address);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Resistance Value from Light Unit in MicroPython\nDESCRIPTION: This method retrieves the resistance value (in ohms) from the Light Unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/light.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLight.get_ohm()\n```\n\n----------------------------------------\n\nTITLE: Getting EMA Filter Alpha on MiniScaleUnit\nDESCRIPTION: Method to retrieve the current alpha value of the Exponential Moving Average (EMA) filter on the MiniScaleUnit sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.get_ema_filter_alpha\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for UIFlow MicroPython in Bash\nDESCRIPTION: This code snippet shows the directory structure of the UIFlow MicroPython project, with annotations explaining the purpose of each file. The structure includes the main boot file, flashbdev.py, inisetup.py, and board-specific startup scripts for different M5Stack hardware models.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/modules/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── README.md          ---->  this file\n├── _boot.py           ---->  system boot script, user can\\'t change this\n├── flashbdev.py\n├── inisetup.py\n└── startup            ---->  different board startup scripts\n    ├── __init__.py\n    ├── atoms3.py\n    ├── cores3.py\n    └── stamps3.py\n```\n\n----------------------------------------\n\nTITLE: Setting MicroPython Directory Path and Including ESP32 Common CMake Configuration\nDESCRIPTION: This snippet sets the MICROPY_DIR variable if it's not already defined, calculating the absolute path to the MicroPython directory. It then includes the ESP32 common CMake file needed for the build configuration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/main_esp32s2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Set location of base MicroPython directory.\nif(NOT MICROPY_DIR)\n    get_filename_component(MICROPY_DIR ${PROJECT_DIR}/../micropython/ ABSOLUTE)\nendif()\n\n# include(${MICROPY_PORT_DIR}/esp32_common.cmake)\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../esp32_common.cmake)\n```\n\n----------------------------------------\n\nTITLE: Deinitializing HeartUnit\nDESCRIPTION: Method to deinitialize the HeartUnit, releasing resources.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/heart.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nHeartUnit.deinit()\n```\n\n----------------------------------------\n\nTITLE: Setting USB Port Power Output in MicroPython\nDESCRIPTION: Controls the power output mode of the main USB port. When enabled, the USB port is in output mode; when disabled, it's in input mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPower.setUsbOutput(enable: bool) -> None\n```\n\n----------------------------------------\n\nTITLE: Controlling LaserTX Unit On/Off in Python\nDESCRIPTION: Methods to turn the laser on and off when using PIN_MODE. These provide direct control over the laser emission.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/laser_tx.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef on(self):\n    # Turn on the laser\n    pass\n\ndef off(self):\n    # Turn off the laser\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Table of Contents\nDESCRIPTION: Creates a table of contents tree structure using reStructuredText directives. Includes configuration for maximum depth and lists child document references.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/quick-reference/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    get-started.rst\n    usb-mode.rst\n```\n\n----------------------------------------\n\nTITLE: ADC Gain Getter\nDESCRIPTION: Gets the current gain multiple of the ADC readings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nADCUnit.get_gain()\n```\n\n----------------------------------------\n\nTITLE: Handling DMX Packet Errors in C\nDESCRIPTION: Demonstrates comprehensive error handling when receiving DMX packets. This example shows how to detect and respond to various error conditions including timeouts, malformed packets, UART overflow, and packet size mismatches.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_33\n\nLANGUAGE: c\nCODE:\n```\nuint8_t data[DMX_PACKET_SIZE];\n\nint num_slots = DMX_PACKET_SIZE;\ndmx_packet_t packet;\nwhile (true) {\n  if (dmx_receive_num(DMX_NUM_1, &packet, num_slots, DMX_TIMEOUT_TICK)) {\n    switch (packet.err) {\n      case DMX_OK:\n        printf(\"Received packet with start code: %02X and size: %i.\\n\",\n          packet.sc, packet.size);\n        // Data is OK. Now read the packet into the buffer.\n        dmx_read(DMX_NUM_1, data, packet.size);\n        break;\n      \n      case DMX_ERR_TIMEOUT:\n        printf(\"The driver timed out waiting for the packet.\\n\");\n        /* If the provided timeout was less than DMX_TIMEOUT_TICK, it may be\n          worthwhile to call dmx_receive() again to see if the packet could be\n          received. */\n        break;\n\n      case DMX_ERR_IMPROPER_SLOT:\n        printf(\"Received malformed byte at slot %i.\\n\", packet.size);\n        /* A slot in the packet is malformed. Data can be recovered up until \n          packet.size. */\n        break;\n\n      case DMX_ERR_UART_OVERFLOW:\n        printf(\"The DMX port overflowed.\\n\");\n        /* The ESP32 UART overflowed. This could occur if the DMX ISR is being\n          constantly preempted. */\n        break;\n      \n      case DMX_ERR_NOT_ENOUGH_SLOTS:\n        printf(\"DMX packet size is too small. %i expected, %i received.\\n\",\n               num_slots, packet.size);\n        /* The packet was smaller than expected. This only occurs when receiving\n          DMX data. This error will not occur when receiving RDM packets.*/\n        num_slots = packet.size;  // Update expected packet size\n        break;\n    }\n  } else {\n    printf(\"Lost DMX signal.\\n\");\n    // A packet hasn't been received in DMX_TIMEOUT_TICK ticks.\n\n    // Handle packet timeout here...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Rotary Increments Method - MicroPython\nDESCRIPTION: Gets the rotation increment value which can be used to determine the direction of rotation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/scroll.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nScrollUnit.get_rotary_increments() -> int\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Components and Linker Options\nDESCRIPTION: Sets up additional project components and configures linker options for panic handler and LWIP memory pool allocators.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND EXTRA_COMPONENT_DIRS \n    main_${IDF_TARGET}\n)\n\nidf_build_set_property(LINK_OPTIONS \"-Wl,--wrap=esp_panic_handler\" APPEND)\nidf_build_set_property(LINK_OPTIONS \"-Wl,--wrap=memp_malloc\" APPEND)\nidf_build_set_property(LINK_OPTIONS \"-Wl,--wrap=memp_free\" APPEND)\n\nproject(micropython)\n```\n\n----------------------------------------\n\nTITLE: Resetting Rotary Value in MicroPython\nDESCRIPTION: Method to reset the rotation value of the Rotary object. Does not return a value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_encoder.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nMiniEncoderCHat.reset_rotary_value() -> None\n```\n\n----------------------------------------\n\nTITLE: ModbusTCPServer Value Access Methods\nDESCRIPTION: Methods for getting and setting values of coils, discrete inputs, and registers.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.tcp.server.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nModbusTCPServer.get_coil(register: int) -> bool\nModbusTCPServer.get_discrete_input(register: int) -> bool\nModbusTCPServer.get_holding_register(register: int) -> int\nModbusTCPServer.get_input_register(register: int) -> int\nModbusTCPServer.set_coil(register: int, value: bool)\nModbusTCPServer.set_discrete_input(register: int, value: bool)\nModbusTCPServer.set_holding_register(register: int, value: int)\nModbusTCPServer.set_input_register(register: int, value: int)\n```\n\n----------------------------------------\n\nTITLE: Setting MicroPython Directory Path in CMake for UIFlow Project\nDESCRIPTION: Conditionally sets the MICROPY_DIR variable to point to the base MicroPython directory if not already defined. This ensures the build system knows where to find the MicroPython source code.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/main_esp32c6/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT MICROPY_DIR)\n    get_filename_component(MICROPY_DIR ${PROJECT_DIR}/../micropython/ ABSOLUTE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Processing Display Panel Configuration in MicroPython C Extension\nDESCRIPTION: This code parses MicroPython arguments for display panel configuration, sets up SPI or I2C display interfaces based on panel type, and initializes the panel. It handles backlight configuration, panel-specific parameters (like dimensions, offsets), and communication bus settings, then returns a configured graphics object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/mpy_user_lcd.txt#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/* *FORMAT-ON* */\nmp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];\nmp_arg_parse_all_kw_array(n_args, n_kw, all_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);\n\nuint8_t panel_type = args[ARG_panel].u_int;\n\nif (panel_type == PANEL_UNKNOWN) {\n    mp_raise_msg_varg(&mp_type_TypeError, MP_ERROR_TEXT(\"No display panel type specified\"));\n    return mp_const_none;\n}\n\n// user backlight config\nif (args[ARG_bl].u_int != -1) {\n    user_panel.user_backlight_setup(args[ARG_bl].u_int, args[ARG_bl_invert].u_bool,\n        args[ARG_bl_pwm_freq].u_int, args[ARG_bl_pwm_chn].u_int);\n}\n\n// user display panel config\nif (panel_type < SPI_PANEL_TYPE_MAX) {\n    // spi display interface, lcd, eink ...\n    user_panel.user_spi_panel_setup(\n        (user_panel_t)panel_type, args[ARG_w].u_int, args[ARG_h].u_int,\n        args[ARG_ox].u_int, args[ARG_oy].u_int,\n        args[ARG_invert].u_bool, args[ARG_rgb].u_bool,\n        args[ARG_spi_host].u_int, args[ARG_spi_freq].u_int,\n        args[ARG_sclk].u_int, args[ARG_mosi].u_int,\n        args[ARG_miso].u_int, args[ARG_dc].u_int,\n        args[ARG_cs].u_int, args[ARG_rst].u_int,\n        args[ARG_busy].u_int);\n} else if ((panel_type > SPI_PANEL_TYPE_MAX) && (panel_type < I2C_PANEL_TYPE_MAX)) {\n    // i2c display interface, oled ...\n    user_panel.user_i2c_panel_setup((user_panel_t)panel_type, args[ARG_w].u_int,\n        args[ARG_h].u_int, args[ARG_ox].u_int,\n        args[ARG_oy].u_int, args[ARG_i2c_host].u_int,\n        args[ARG_i2c_addr].u_int, args[ARG_i2c_freq].u_int,\n        args[ARG_sda].u_int, args[ARG_scl].u_int);\n}\n\nuint8_t tp_type = args[ARG_touch].u_int;\n\n// TODO:\n// user touch panel config\nif (tp_type != TP_UNKNOWN) {\n\n}\n\n// initialization\nuser_panel.init();\n\ngfx_obj_t *self = mp_obj_malloc(gfx_obj_t, &m5_user_display);\nself->gfx = &(user_panel);\n\nreturn MP_OBJ_FROM_PTR(self);\n```\n\n----------------------------------------\n\nTITLE: Resetting MiniScaleUnit Sensor\nDESCRIPTION: Method to reset the MiniScaleUnit sensor to its default state.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.reset\n```\n\n----------------------------------------\n\nTITLE: Deinitializing CatchUnit in MicroPython\nDESCRIPTION: Method to deinitialize the Servo, freeing up resources when the gripper is no longer needed.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/catch.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nCatchUnit.deinit() -> None\n```\n\n----------------------------------------\n\nTITLE: Listing USB Device Sub-modules in Documentation\nDESCRIPTION: Documentation directive that lists available USB device sub-modules (mouse and keyboard) with links to their respective documentation pages.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/device/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    mouse.rst\n    keyboard.rst\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Hardware Documentation\nDESCRIPTION: A reStructuredText table of contents directive that lists the hardware-related documentation pages, with maxdepth set to 1 level deep.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/hardware/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    button.rst\n    imu.rst\n    mic.rst\n    power.rst\n    rotary.rst\n    speaker.rst\n    m5ble.rst\n    display.rst\n```\n\n----------------------------------------\n\nTITLE: Setting DMX Communication Pins in C\nDESCRIPTION: This snippet demonstrates how to set the physical GPIO pins for DMX communication. It uses the dmx_set_pin function to configure the TX, RX, and RTS pins, using DMX_PIN_NO_CHANGE for pins that should remain unchanged.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n// Set TX: GPIO16 (port 2 default), RX: GPIO17 (port 2 default), RTS: GPIO21.\ndmx_set_pin(DMX_NUM_1, DMX_PIN_NO_CHANGE, DMX_PIN_NO_CHANGE, 21);\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files and Include Directories for ESP32 ADF in CMake\nDESCRIPTION: This snippet defines source files and include directories for the ESP32 Audio Development Framework. It includes various audio-related components and streams.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/boards/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(IDF_TARGET STREQUAL \"esp32\" OR IDF_TARGET STREQUAL \"esp32s3\")\nset(\n    srcs\n        ${ADF_BOARD_INIT_SRC}\n        ${ADF_COMPS}/audio_hal/audio_hal.c\n        ${ADF_COMPS}/audio_hal/audio_volume.c\n        ${ADF_COMPS}/audio_stream/http_stream.c\n        ${ADF_COMPS}/audio_stream/i2s_stream_idf5.c\n        ${ADF_COMPS}/audio_stream/raw_stream.c\n        ${ADF_COMPS}/audio_stream/http_playlist.c\n        ${ADF_COMPS}/audio_stream/lib/gzip/gzip_miniz.c\n        ${ADF_COMPS}/audio_stream/lib/hls/hls_parse.c\n        ${ADF_COMPS}/audio_stream/lib/hls/hls_playlist.c\n        ${ADF_COMPS}/audio_stream/lib/hls/join_path.c\n        ${ADF_COMPS}/audio_stream/lib/hls/line_reader.c\n        ${ADF_COMPS}/esp_peripherals/driver/i2c_bus/i2c_bus.c\n)\n\nset(\n    includes\n        ${ADF_BOARD_DIR}/\n        include\n        ${ADF_COMPS}/audio_board/include\n        ${ADF_COMPS}/audio_hal/include\n        ${ADF_COMPS}/audio_hal/driver/include\n        ${ADF_COMPS}/audio_stream/include\n        ${ADF_COMPS}/audio_stream/lib/gzip/include\n        ${ADF_COMPS}/audio_stream/lib/hls/include\n        ${ADF_COMPS}/esp_peripherals/include\n        ${ADF_COMPS}/esp_peripherals/driver/i2c_bus\n        ${ADF_COMPS}/display_service/include\n        ${ADF_COMPS}/esp_dispatcher/include\n)\n```\n\n----------------------------------------\n\nTITLE: Forcing Calibration for CO2L Unit in MicroPython\nDESCRIPTION: Method to force the sensor to recalibrate with a given current CO2 level.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/co2l.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nCO2LUnit.set_force_calibration(target_co2)\n```\n\n----------------------------------------\n\nTITLE: Getting Firmware Version in StepMotorDriverModule\nDESCRIPTION: Method to retrieve the firmware version of the StepMotorDriverModule.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/step_motor_driver.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nStepMotorDriverModule.get_firmware_version()\n```\n\n----------------------------------------\n\nTITLE: Getting X-Axis Value in MicroPython\nDESCRIPTION: Retrieves the x-axis value from the specified channel (0 or 1) of the JoyC Hat.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/joyc.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nJoyCHat.get_x(channel: int = 0) -> int\n```\n\n----------------------------------------\n\nTITLE: Deinitializing Vibrator Unit in MicroPython\nDESCRIPTION: Method to deinitialize the vibrator motor, releasing any resources used by the object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/vibrator.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nVibratorUnit.deint() -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Rotary Encoder in MicroPython for M5Stack\nDESCRIPTION: This snippet demonstrates how to initialize and use the Rotary class in MicroPython. It sets up a label to display the rotary value, handles button events, and updates the display based on rotary encoder changes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/hardware/rotary.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom hardware import *\n\nlabel0 = None\nrotary = None\n\ndef btnA_wasClicked_event(state):\n    global label0, rotary\n    rotary.reset_rotary_value()\n    label0.setText(str(rotary.get_rotary_value()))\n\ndef setup():\n    global label0, rotary\n\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n    label0 = Widgets.Label(\"0\", 96, 80, 1.0, 0xffa000, 0x222222, Widgets.FONTS.DejaVu72)\n\n    BtnA.setCallback(type=BtnA.CB_TYPE.WAS_CLICKED, cb=btnA_wasClicked_event)\n\n    rotary = Rotary()\n\ndef loop():\n    global label0, rotary\n    M5.update()\n    if rotary.get_rotary_status():\n        label0.setText(str(rotary.get_rotary_value()))\n\nif __name__ == '__main__':\n    try:\n        setup()\n        while True:\n            loop()\n    except (Exception, KeyboardInterrupt) as e:\n        try:\n            from utility import print_error_msg\n            print_error_msg(e)\n        except ImportError:\n            print(\"please update to latest firmware\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Component Registration for ESP32S3 Target in CMake\nDESCRIPTION: Registers the boot_hooks.c source file as a component only if the target platform is ESP32S3. This conditional inclusion ensures the bootloader hooks are only added for the appropriate target.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/bootloader_components/boot_hooks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"$ENV{IDF_TARGET}\" STREQUAL \"esp32s3\")\nidf_component_register(SRCS \"boot_hooks.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Custom Driver in UIFlow MicroPython\nDESCRIPTION: This code snippet shows how to import the custom 'test' driver created earlier and use it in a UIFlow MicroPython application. It demonstrates instantiating the test class and calling its test method.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/fs/user/libs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom test import test\n\nt = test()\nt.test()\n```\n\n----------------------------------------\n\nTITLE: Motor Current Control Methods in RollerBase\nDESCRIPTION: Methods for configuring and monitoring motor current, including setting maximum current limits and reading actual current consumption. These functions help prevent overload conditions and monitor power usage.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef set_motor_max_current(current) -> None:\n    \n    Set the motor max current.\n\n    :param int current: The maximum current for the motor, multiplied by 100 before sending.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_max_current() -> int:\n    \n    Get the motor max current.\n\n    :return: The motor max current, divided by 100 after reading.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_current_readback() -> float:\n    \n    Get the motor current readback.\n\n    :return: The motor current readback value, divided by 100 after reading.\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Dependencies for UIFlow MicroPython Project\nDESCRIPTION: This requirements file specifies the Python packages needed to generate documentation for the UIFlow MicroPython project. It includes Sphinx documentation generator along with extensions for ReadTheDocs theme, Markdown support, Jupyter notebook integration, and other documentation enhancements.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbreathe==4.35.0\nSphinx==7.4.7\nsphinx-rtd-theme==2.0.0\nrecommonmark==0.7.1\nsphinx_markdown_tables==0.0.17\nnbsphinx==0.9.5\nsphinx-copybutton==0.5.2\nsphinx-intl==2.2.0\n```\n\n----------------------------------------\n\nTITLE: Turning Off SSR Unit in MicroPython\nDESCRIPTION: Method to turn off the Solid-State Relay, which will stop AC power from flowing through the connected circuit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ssr.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSSRUnit.off()\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Socket\nDESCRIPTION: Writes data buffer to socket, attempting to write all data at once.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.server.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntcps.write(b'Hello, World!')\ntcps.write('Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Setting up M5Stack MicroPython Build Environment in CMake\nDESCRIPTION: This CMake configuration file sets up the environment for building MicroPython on ESP32 for M5Stack devices. It configures compiler flags, handles board selection, processes configuration files, and includes necessary components like M5Unified, camera drivers, and other utilities.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# SPDX-FileCopyrightText: 2024 M5Stack Technology CO LTD\n#\n# SPDX-License-Identifier: MIT\n\n# Top-level cmake file for building MicroPython on ESP32.\n\ncmake_minimum_required(VERSION 3.12)\n\nset(CMAKE_C_FLAGS \"-Wno-unused-variable -Wno-unused-but-set-variable\")\nset(CMAKE_CXX_FLAGS \"-Wno-unused-variable -Wno-unused-but-set-variable -Wno-pmf-conversions -Wno-error=narrowing\")\n\n# Set the location of this port's directory.\nset(MICROPY_PORT_DIR ${CMAKE_SOURCE_DIR}/../micropython/ports/esp32)\n\n# Retrieve IDF version\ninclude($ENV{IDF_PATH}/tools/cmake/version.cmake)\nset(IDF_VERSION \"${IDF_VERSION_MAJOR}.${IDF_VERSION_MINOR}.${IDF_VERSION_PATCH}\")\n\n# Set the board if it's not already set.\nif(NOT MICROPY_BOARD)\n    set(MICROPY_BOARD M5STACK_4MB)\nendif()\n\n# Set the board directory and check that it exists.\nif(NOT MICROPY_BOARD_DIR)\n    set(MICROPY_BOARD_DIR ${CMAKE_CURRENT_LIST_DIR}/boards/${MICROPY_BOARD})\nendif()\nif(NOT EXISTS ${MICROPY_BOARD_DIR}/mpconfigboard.cmake)\n    message(FATAL_ERROR \"Invalid MICROPY_BOARD specified: ${MICROPY_BOARD}\")\nendif()\n\n# If a board variant is specified, check that it exists.\nif(MICROPY_BOARD_VARIANT)\n    if(NOT EXISTS ${MICROPY_BOARD_DIR}/mpconfigvariant_${MICROPY_BOARD_VARIANT}.cmake)\n        message(FATAL_ERROR \"Invalid MICROPY_BOARD_VARIANT specified: ${MICROPY_BOARD_VARIANT}\")\n    endif()\nendif()\n\n# Define the output sdkconfig so it goes in the build directory.\nset(SDKCONFIG ${CMAKE_BINARY_DIR}/sdkconfig)\n\n# Save the manifest file set from the cmake command line.\nset(MICROPY_USER_FROZEN_MANIFEST ${MICROPY_FROZEN_MANIFEST})\n\n# Specific options for IDF v5.2 and later\nset(SDKCONFIG_IDF_VERSION_SPECIFIC \"\")\nif (IDF_VERSION VERSION_GREATER_EQUAL \"5.2.0\")\n    set(SDKCONFIG_IDF_VERSION_SPECIFIC boards/sdkconfig.idf52)\nendif()\n\n# Include board config; this is expected to set (among other options):\n# - SDKCONFIG_DEFAULTS\n# - IDF_TARGET\ninclude(${MICROPY_BOARD_DIR}/mpconfigboard.cmake)\nif(NOT MICROPY_BOARD_VARIANT)\n    include(${MICROPY_BOARD_DIR}/mpconfigvariant.cmake OPTIONAL)\nelse()\n    include(${MICROPY_BOARD_DIR}/mpconfigvariant_${MICROPY_BOARD_VARIANT}.cmake)\nendif()\n\n# Set the frozen manifest file. Note if MICROPY_FROZEN_MANIFEST is set from the cmake\n# command line, then it will override the default and any manifest set by the board.\nif (MICROPY_USER_FROZEN_MANIFEST)\n    set(MICROPY_FROZEN_MANIFEST ${MICROPY_USER_FROZEN_MANIFEST})\nelseif (NOT MICROPY_FROZEN_MANIFEST)\n    set(MICROPY_FROZEN_MANIFEST ${CMAKE_CURRENT_LIST_DIR}/boards/manifest.py)\nendif()\n\n# Concatenate all sdkconfig files into a combined one for the IDF to use.\nfile(WRITE ${CMAKE_BINARY_DIR}/sdkconfig.combined.in \"\")\nforeach(SDKCONFIG_DEFAULT ${SDKCONFIG_DEFAULTS})\n    file(READ ${SDKCONFIG_DEFAULT} CONTENTS)\n    file(APPEND ${CMAKE_BINARY_DIR}/sdkconfig.combined.in \"${CONTENTS}\")\nendforeach()\nconfigure_file(${CMAKE_BINARY_DIR}/sdkconfig.combined.in ${CMAKE_BINARY_DIR}/sdkconfig.combined COPYONLY)\nset(SDKCONFIG_DEFAULTS ${CMAKE_BINARY_DIR}/sdkconfig.combined)\n\nif(BUILD_WITH_LVGL)\n    # Include LVGL component, ignore KCONFIG\n    idf_build_set_property(LV_MICROPYTHON 1)\n    idf_build_component(${CMAKE_SOURCE_DIR}/components/lv_bindings/lvgl)\n    idf_build_set_property(COMPILE_DEFINITIONS \"-DLV_KCONFIG_IGNORE\" APPEND)\n    separate_arguments(LV_CFLAGS_ENV UNIX_COMMAND $ENV{LV_CFLAGS})\n    list(APPEND LV_CFLAGS ${LV_CFLAGS_ENV})\n    idf_build_set_property(COMPILE_DEFINITIONS \"${LV_CFLAGS}\" APPEND)\nendif()\n\n# Include main IDF cmake file.\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\n\n# Set the location of the main component for the project (one per target).\nlist(APPEND EXTRA_COMPONENT_DIRS main_${IDF_TARGET})\nlist(APPEND EXTRA_COMPONENT_DIRS ../m5stack/components/esp32-camera)\nlist(APPEND EXTRA_COMPONENT_DIRS ../m5stack/components/libffi)\n# list(APPEND EXTRA_COMPONENT_DIRS ../m5stack/components/lv_bindings)\nlist(APPEND EXTRA_COMPONENT_DIRS ../m5stack/components/M5Unified/M5GFX)\nlist(APPEND EXTRA_COMPONENT_DIRS ../m5stack/components/M5Unified/M5Unified)\nlist(APPEND EXTRA_COMPONENT_DIRS ./components/BOX3GFX)\nlist(APPEND EXTRA_COMPONENT_DIRS ../m5stack/components/uiflow_utility)\n# list(APPEND EXTRA_COMPONENT_DIRS ./boards)\n\n# Enable the panic handler wrapper\nidf_build_set_property(LINK_OPTIONS \"-Wl,--wrap=esp_panic_handler\" APPEND)\n\n# Patch LWIP memory pool allocators (see lwip_patch.c)\nidf_build_set_property(LINK_OPTIONS \"-Wl,--wrap=memp_malloc\" APPEND)\nidf_build_set_property(LINK_OPTIONS \"-Wl,--wrap=memp_free\" APPEND)\n\n# Define the project.\nproject(micropython)\n```\n\n----------------------------------------\n\nTITLE: Adding MicroPython Source Files and RISC-V Component for ESP32 Build\nDESCRIPTION: Appends the generic garbage collection helper source file to the MicroPython library sources and adds the RISC-V component to the ESP-IDF components list. These are necessary for building MicroPython on RISC-V based ESP32 processors.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/main_esp32c6/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND MICROPY_SOURCE_LIB ${MICROPY_DIR}/shared/runtime/gchelper_generic.c)\nlist(APPEND IDF_COMPONENTS riscv)\n```\n\n----------------------------------------\n\nTITLE: Getting Rotary Increments in MicroPython\nDESCRIPTION: Method to get the rotation increment of the Rotary object. Can be used to determine the direction of rotation. Returns an integer value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_encoder.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMiniEncoderCHat.get_rotary_increments() -> int\n```\n\n----------------------------------------\n\nTITLE: Creating RGB Object Constructor\nDESCRIPTION: Constructor for creating an RGB object that controls RGB LEDs. It requires port pin numbers and the number of LEDs to control.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/rgb.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRGB(port, number)\n```\n\n----------------------------------------\n\nTITLE: Receiving RDM Packets in C\nDESCRIPTION: This code shows how to receive RDM packets using the dmx_receive() function. It demonstrates that the function behaves contextually when receiving RDM packets, potentially timing out more quickly than with DMX packets.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_23\n\nLANGUAGE: c\nCODE:\n```\n// This is a hard-coded GET DEVICE_INFO request.\nconst uint8_t get_device_info[] = {\n  0xcc, 0x01, 0x18, 0x3b, 0x10, 0x44, 0xc0, 0x6f, 0xbf, 0x05, 0xe0, 0x12, 0x99,\n  0x15, 0x9a, 0x14, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x60, 0x00, 0x06, 0x38\n};\ndmx_write(DMX_NUM_1, get_device_info, sizeof(get_device_info));\ndmx_send(DMX_NUM_1, sizeof(get_device_info));\n\ndmx_packet_t packet;\n\n// This function will unblock early because it is expecting a reply!\ndmx_receive(DMX_NUM_1, &packet, DMX_TIMEOUT_TICK);  // Unblocks in 3ms\n```\n\n----------------------------------------\n\nTITLE: Displaying UIFlow MicroPython Library Directory Structure in Shell\nDESCRIPTION: This shell code snippet shows the directory structure of the UIFlow MicroPython library project. It includes the main README file, and directories for common drivers, built-in hardware, HATs, modules, and units, each with their own __init__.py file.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/libs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n├── README.md        ----> this file\n├── driver           ----> common drivers\n│   ├── __init__.py\n    └── ...\n├── hardware         ----> builtin hradware\n│   ├── __init__.py\n    └── ...\n├── hat              ----> HAT\n│   ├── __init__.py\n    └── ...\n├── module           ----> Module\n│   ├── __init__.py\n    └── ...\n└── unit             ----> UNIT\n    ├── __init__.py\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Basic Function Template in Python\nDESCRIPTION: Template showing basic function implementation with pass statement.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/contribute/template.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npass\n```\n\n----------------------------------------\n\nTITLE: Updating LED Colors Based on ADC Value in MicroPython\nDESCRIPTION: Method to update the LED colors based on the current ADC value from the Fader unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/fader.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nFaderUnit.update_color() -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Power LED Brightness in MicroPython\nDESCRIPTION: Controls the brightness of the power LED. The brightness parameter ranges from 0 (off) to 255 (maximum brightness).\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPower.setLed(brightness=255) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating Switch Endpoint in MicroPython\nDESCRIPTION: Creates a switch endpoint object for controlling Zigbee light nodes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gateway_h2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nh2_switch_endpoint = module_gateway_h2.create_switch_endpoint()\n```\n\n----------------------------------------\n\nTITLE: Writing Single Holding Register Event Constant\nDESCRIPTION: Modbus function code 6 constant for writing to a single holding register operation\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.slave.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUSlave.WRITE_MULTIPLE_COILS_EVENT\n```\n\n----------------------------------------\n\nTITLE: Digital Value Reading Method\nDESCRIPTION: Method to read the digital value from the light sensor through the configured pins.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/light.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLight.get_digital_value()\n```\n\n----------------------------------------\n\nTITLE: Motor ID Configuration Methods in RollerBase\nDESCRIPTION: Methods for setting and getting the motor ID. These functions allow assigning a unique identifier to the motor for addressing in multi-motor systems.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef set_motor_id(id) -> None:\n    \n    Set the motor ID.\n\n    :param int id: The ID to assign to the motor.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_id() -> int:\n    \n    Get the motor ID.\n\n    :return: The current motor ID.\n```\n\n----------------------------------------\n\nTITLE: Getting Raw ADC Readout from MiniScaleUnit\nDESCRIPTION: Method to retrieve the raw ADC (Analog-to-Digital Converter) readout from the MiniScaleUnit sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.adc\n```\n\n----------------------------------------\n\nTITLE: Initializing USB Keyboard in MicroPython\nDESCRIPTION: Example code demonstrating how to use the USB keyboard module in MicroPython. This snippet shows the basic setup and usage of the Keyboard class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/device/keyboard.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Example code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: DMX Driver Interface (driver.h)\nDESCRIPTION: Core driver functions for DMX communication including installation, configuration, and data transfer\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/keywords.txt#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ndmx_driver_install\ndmx_driver_delete\ndmx_driver_disable\ndmx_driver_enable\ndmx_driver_is_installed\ndmx_driver_is_enabled\ndmx_set_pin\ndmx_get_baud_rate\ndmx_set_baud_rate\ndmx_get_break_len\ndmx_set_break_len\ndmx_get_mab_len\ndmx_set_mab_len\ndmx_read_offset\ndmx_read\ndmx_read_slot\ndmx_write_offset\ndmx_write\ndmx_write_slot\ndmx_receive_num\ndmx_receive\ndmx_send_num\ndmx_send\ndmx_wait_sent\n```\n\n----------------------------------------\n\nTITLE: MicroPython Example for M5StickC Plus2 Thermal Hat\nDESCRIPTION: A complete example demonstrating the usage of the Thermal Hat with M5StickC Plus2. The code is referenced from an external file.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/thermal.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/hat/thermal/stickc_plus2_thermal_example.py\n    :language: python\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Declaring RDM Data Types in C\nDESCRIPTION: This snippet declares various data types used in the RDM protocol, including enums for product categories, data types, and sensor types.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/keywords.txt#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\ntypedef uint16_t rdm_pid_t;\ntypedef uint16_t rdm_sub_device_t;\ntypedef uint8_t rdm_cc_t;\ntypedef uint8_t rdm_response_type_t;\ntypedef uint8_t rdm_nr_t;\ntypedef uint8_t rdm_status_t;\n\ntypedef enum {\n    RDM_PRODUCT_CATEGORY_NOT_DECLARED = 0x0000,\n    RDM_PRODUCT_CATEGORY_FIXTURE = 0x0100,\n    RDM_PRODUCT_CATEGORY_FIXTURE_ACCESSORY = 0x0200,\n    RDM_PRODUCT_CATEGORY_PROJECTOR = 0x0300,\n    // ... other categories ...\n    RDM_PRODUCT_CATEGORY_OTHER = 0x7000\n} rdm_product_category_t;\n\ntypedef enum {\n    RDM_DS_NOT_DEFINED = 0x00,\n    RDM_DS_BIT_FIELD = 0x01,\n    RDM_DS_ASCII = 0x02,\n    // ... other data types ...\n    RDM_DS_SIGNED_DWORD = 0x09\n} rdm_ds_t;\n```\n\n----------------------------------------\n\nTITLE: Defining RDM Structs in C\nDESCRIPTION: This snippet defines various structs used in RDM messages, including the header, device info, and sensor definitions.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/keywords.txt#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    uint8_t manufacturer_id[2];\n    uint8_t device_id[4];\n} rdm_uid_t;\n\ntypedef struct {\n    uint8_t sub_start_code;\n    uint8_t message_length;\n    rdm_cc_t command_class;\n    uint8_t param_id[2];\n    uint8_t param_data_length;\n    uint8_t param_data[RDM_PD_SIZE_MAX];\n} rdm_header_t;\n\ntypedef struct {\n    rdm_product_category_t category;\n    uint16_t dmx_footprint;\n    uint16_t current_personality;\n    uint16_t personality_count;\n    uint16_t dmx_start_address;\n    uint16_t sub_device_count;\n    uint8_t sensor_count;\n} rdm_device_info_t;\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from UDP Socket in MicroPython\nDESCRIPTION: Receives data from the UDP socket with a specified buffer size. This method is used to read incoming messages from the server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.client.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = udpc.recv(1024)\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Including ESP32 Common CMake Configuration\nDESCRIPTION: Includes the ESP32 common CMake configuration file which contains shared build settings for ESP32 targets. The commented line shows an alternative path that was replaced with the current implementation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/main_esp32c6/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# include(${MICROPY_PORT_DIR}/esp32_common.cmake)\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../esp32_common.cmake)\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Tree Structure for UIFlow MicroPython\nDESCRIPTION: Shows the hierarchical directory structure of a UIFlow MicroPython project, including main directories for apps, libraries, and resources with their respective file locations and purposes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/fs/user/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n├── README.md           ----> this file\n├── apps                ----> user app scripts\n│   └── helloworld.py\n├── boot.py             ----> secondary boot file\n├── libs                ----> libraries\n│   ├── README.md\n│   └── __init__.py\n├── main.py             ----> main file\n└── res                 ----> resource files\n    ├── font            ----> font files\n    │   └── README.md\n    └── img             ----> image files\n        ├── README.md\n        ├── default.jpg\n        ├── default.png\n        ├── uiflow.bmp\n        ├── uiflow.jpg\n        └── uiflow.png\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Erasing Flash Memory on ESP32C6 Board\nDESCRIPTION: Command to completely erase the flash memory of an ESP32C6 device before installing MicroPython for the first time. This uses esptool.py to communicate with the board.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/boards/M5STACK_NanoC6/deploy_nanoc6.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nesptool.py --chip esp32c6 --port /dev/ttyUSB0 erase_flash\n```\n\n----------------------------------------\n\nTITLE: Getting Temperature from BPS Unit\nDESCRIPTION: Method to retrieve the temperature value in degrees Celsius from the BMP280 or QMP6988 sensor. The valid range is between -40°C and +85°C.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/bps.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nBPSUnit.get_temperature()\n```\n\n----------------------------------------\n\nTITLE: Configuring Chorus Effects\nDESCRIPTION: Method to set chorus effect parameters including program, level, feedback, and delay for a specific MIDI channel.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_chorus(channel, program, level, feedback, chorusdelay)\n```\n\n----------------------------------------\n\nTITLE: Getting Data Ready Status from TMOSUnit in MicroPython\nDESCRIPTION: This method retrieves the data update status of TMOSUnit for various parameters like ambient temperature, object temperature, and motion detection.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTMOSUnit.get_data_ready() -> bool\n```\n\n----------------------------------------\n\nTITLE: Controlling Low-Pass Filter on MiniScaleUnit\nDESCRIPTION: Method to enable or disable the low-pass filter on the Miniscale unit. The filter smooths weight readings by reducing high-frequency noise.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/miniscale.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.setLowPassFilter(enable)\n```\n\n----------------------------------------\n\nTITLE: Setting MicroPython and ESP32 Port Directories in CMake\nDESCRIPTION: Configures the base MicroPython directory and ESP32 port directory for the project. It uses conditional statements to set these directories if they haven't been defined already.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/main_esp32s3/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set location of base MicroPython directory.\nif(NOT MICROPY_DIR)\n    get_filename_component(MICROPY_DIR ${PROJECT_DIR}/../micropython/ ABSOLUTE)\nendif()\n\n# Set location of the ESP32 port directory.\nif(NOT MICROPY_PORT_DIR)\n    get_filename_component(MICROPY_PORT_DIR ${CMAKE_CURRENT_LIST_DIR}/.. ABSOLUTE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing DMX Driver on ESP32\nDESCRIPTION: Sets up the DMX driver by configuring the DMX port with default settings, declaring DMX personalities, installing the driver, and setting the communication pins. This is the essential first step for using the esp_dmx library.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst dmx_port_t dmx_num = DMX_NUM_1;\n\n// First, use the default DMX configuration...\ndmx_config_t config = DMX_CONFIG_DEFAULT;\n\n// ...declare the driver's DMX personalities...\nconst int personality_count = 1;\ndmx_personality_t personalities[] = {\n  {1, \"Default Personality\"}\n};\n\n// ...install the DMX driver...\ndmx_driver_install(dmx_num, &config, personalities, personality_count);\n\n// ...and then set the communication pins!\nconst int tx_pin = 17;\nconst int rx_pin = 16;\nconst int rts_pin = 21;\ndmx_set_pin(dmx_num, tx_pin, rx_pin, rts_pin);\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for M5Stack UIFlow-MicroPython Component\nDESCRIPTION: Defines the component's include directories for the M5Unified and M5GFX libraries. This allows other components to include and access the component's header files.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(COMPONENT_ADD_INCLUDEDIRS\n    M5Unified/src\n    M5GFX/src/\n    .\n)\n```\n\n----------------------------------------\n\nTITLE: Deinitializing BLEUARTClient\nDESCRIPTION: Method to completely deinitialize the BLE UART client and free resources.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.client.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTClient.deinit()\n```\n\n----------------------------------------\n\nTITLE: Checking for New RFID Card Presence\nDESCRIPTION: Method to check if a new RFID card is present in the reading field. Returns a boolean indicating card presence.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rfid.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRFIDUnit.is_new_card_present()\n```\n\n----------------------------------------\n\nTITLE: Getting Low-Pass Filter Configuration for Presence and Motion Detection\nDESCRIPTION: Method to get the current low-pass filter configuration used for presence and motion detection. Returns the filter bandwidth setting.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.get_lpf_p_m_bandwidth() -> int\n```\n\n----------------------------------------\n\nTITLE: Initializing User_GFX Class for Display and Touch Configuration in C++\nDESCRIPTION: Defines the User_GFX class with methods for setting up backlight, SPI panels, I2C panels, and touch interfaces. It supports various panel types and configurations through flexible parameter settings.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/mpy_user_lcd.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass User_GFX: public lgfx::LGFX_Device {\n    lgfx::ITouch *_user_touch_instance;\n    lgfx::Panel_Device *_user_panel_instance;\n\n    lgfx::Light_PWM _light_instance;\n    lgfx::Bus_SPI _spi_bus_instance;\n    lgfx::Bus_I2C _i2c_bus_instance;\n\npublic:\n    User_GFX(void) {\n\n    };\n\n    void user_backlight_setup(int16_t pin_bl = -1, bool bl_invert = false,\n        uint32_t bl_pwm_freq = 0, uint8_t bl_pwm_channel = 0) {\n        // ... (backlight setup code)\n    }\n\n    void user_spi_panel_setup(user_panel_t panel_type, int16_t width, int16_t height,\n        int16_t offset_x, int16_t offset_y, bool invert, bool rgb_order,\n        uint8_t spi_host, uint32_t spi_freq = 40, int16_t pin_sclk = -1,\n        int16_t pin_mosi = -1, int16_t pin_miso = -1, int16_t pin_dc = -1,\n        int16_t pin_cs = -1, int16_t pin_rst = -1, int16_t pin_busy = -1) {\n        // ... (SPI panel setup code)\n    }\n\n    void user_i2c_panel_setup(user_panel_t panel_type, int16_t width, int16_t height,\n        int16_t offset_x, int16_t offset_y, uint8_t i2c_host,\n        uint8_t i2c_addr, uint32_t i2c_freq = 400, int16_t pin_sda = -1,\n        int16_t pin_scl = -1) {\n        // ... (I2C panel setup code)\n    }\n\n    void user_i2c_touch_setup(void) {\n        // _user_panel_instance.setTouch();\n    }\n};\n\nUser_GFX user_panel;\n```\n\n----------------------------------------\n\nTITLE: SCD40 Command Writing Method\nDESCRIPTION: Method to write commands to the SCD40 sensor. Takes a command and optional value parameter for sensor configuration and control.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hardware/scd40.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef write_cmd(cmd_wr, value):\n    \"\"\"Write a command to the sensor.\n    :param int cmd_wr: The command to write to the sensor.\n    :param int value: The value to send with the command, if any.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Average Sample Number for Ambient Temperature\nDESCRIPTION: Method to set the number of samples to average for the ambient temperature measurement. Options range from 1 to 8 samples.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.set_avg_tamb_num(val) -> None\n```\n\n----------------------------------------\n\nTITLE: Checking Data Availability in LaserRXUnit UART Buffer in Python\nDESCRIPTION: This method checks if there is any data available in the UART buffer of the LaserRXUnit. It returns a boolean value indicating data presence.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/laser_rx.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLaserRXUnit.any()\n```\n\n----------------------------------------\n\nTITLE: Getting Output Data Rate of TMOS Sensor\nDESCRIPTION: Method to get the current output data rate setting of the TMOS sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.get_tmos_odr() -> int\n```\n\n----------------------------------------\n\nTITLE: Writing a Single Register with ModbusRTUMaster in MicroPython\nDESCRIPTION: Method for writing a value to a single holding register on a Modbus slave device, returning the written value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/modbus.rtu.master.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nModbusRTUMaster.write_single_register(address, register, value, timeout: int=2000) -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Y-Axis Value from Joystick\nDESCRIPTION: Method to retrieve the raw y-axis value from the joystick unit. Returns an integer representing the position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/joystick.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nJoystickUnit.get_y_raw() -> int\n```\n\n----------------------------------------\n\nTITLE: Resetting Count in LimitUnit\nDESCRIPTION: Method to reset the count value to zero in the LimitUnit class.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/limit.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLimitUnit.count_reset()\n```\n\n----------------------------------------\n\nTITLE: Getting One-Shot Data Collection Status\nDESCRIPTION: Method to get the current status of the one-time data collection feature.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/tmos.rst#2025-04-21_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nTMOSUnit.get_tmos_one_shot() -> bool\n```\n\n----------------------------------------\n\nTITLE: Reading Button State of MiniScaleUnit\nDESCRIPTION: Method to retrieve the current state of the button on the MiniScaleUnit sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/miniscale.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit.button\n```\n\n----------------------------------------\n\nTITLE: Getting Relay Mode in MicroPython\nDESCRIPTION: Method to retrieve the current operation mode of the relay unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay4.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRelay4Unit.get_mode() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Power Factor from ATOMSocketBase\nDESCRIPTION: Method to retrieve the power factor from the ATOM Socket. It returns an integer value representing the power factor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/atom_socket.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nATOMSocketBase.get_pf() -> int\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Structure for UIFlow MicroPython in RST\nDESCRIPTION: A reStructuredText (RST) configuration that creates a table of contents tree for the UIFlow MicroPython software documentation. It defines a maxdepth of 1 and includes references to time.rst and umqtt.rst documentation files.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/software/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    time.rst\n    umqtt.rst\n```\n\n----------------------------------------\n\nTITLE: Defining UiFlow2 Documentation Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines the table of contents for UiFlow2 documentation using reStructuredText syntax. It sets up a hierarchical structure with a maximum depth of 3 levels and includes various documentation sections.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 3\n\n    get-started/index.rst\n    library/index.rst\n    controllers/index.rst\n    system/index.rst\n    widgets/index.rst\n    software/index.rst\n    hardware/index.rst\n    module/index.rst\n    units/index.rst\n    hats/index.rst\n    base/index.rst\n    advanced/index.rst\n    quick-reference/index.rst\n    contribute/index.rst\n    COPYRIGHT.rst\n```\n\n----------------------------------------\n\nTITLE: Rotation Control for Atomic Stepmotor Base in MicroPython\nDESCRIPTION: This code demonstrates continuous rotation control for the Atomic Stepmotor Base. It rotates the motor for multiple turns in one direction, then reverses for multiple turns, and repeats the cycle after a 2-second pause. The code uses the AtomicStepmotorBase class to control the stepper motor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/stepmotor.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/base/stepmotor/atoms3r_stepmotor_rotate_control_example.py\n    :language: python\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Setting Magnetometer Output Data Rate\nDESCRIPTION: Method to set the output data rate for the magnetometer sensor with various frequency options from 2Hz to 30Hz.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef set_magnet_odr(magnet_odr):\n    # :param  magnet_odr: \n    #     Options:\n    #     - ``2``: 2\n    #     - ``6``: 6\n    #     - ``8``: 8\n    #     - ``10``: 10\n    #     - ``15``: 15\n    #     - ``20``: 20\n    #     - ``25``: 25\n    #     - ``30``: 30\n```\n\n----------------------------------------\n\nTITLE: Getting LED State in MicroPython\nDESCRIPTION: Method to get the current state of a specific LED indicator on the relay unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay4.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nRelay4Unit.get_led_state(n: int) -> int\n```\n\n----------------------------------------\n\nTITLE: Positioning the ImagePlus Widget\nDESCRIPTION: Method to set the position coordinates of the ImagePlus object on the display, by specifying x and y coordinates.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/image+.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nImagePlus.setCursor(x: int, y: int)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading Light Unit in MicroPython\nDESCRIPTION: This snippet demonstrates how to import necessary modules, initialize the Light Unit, and read its analog value. It sets up the M5Stack device and displays the light sensor reading.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/light.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import *\n\n\nlight_0 = None\n\n\ndef setup():\nglobal light_0\n\nlight_0 = Light((8,9))\nM5.begin()\nWidgets.fillScreen(0x222222)\n\nprint(light_0.get_analog_value())\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using IR Unit in MicroPython\nDESCRIPTION: This snippet demonstrates how to import necessary modules, initialize the IR Unit, and set up a basic M5Stack application. It creates an IR object, sends a signal, and sets up the M5Stack display.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/ir.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom unit import *\n\nir_0 = None\n\ndef setup():\n    global ir_0\n\n    ir_0 = IR((36, 26))\n    ir_0.tx(0, 0)\n    M5.begin()\n    Widgets.fillScreen(0x222222)\n```\n\n----------------------------------------\n\nTITLE: Including ESP32 Common CMake Configuration\nDESCRIPTION: Includes the ESP32 common CMake configuration file which contains shared build settings for ESP32-based devices. The commented line shows the original inclusion path, while the active line uses a relative path from the current source directory.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/main_esp32c3/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# include(${MICROPY_PORT_DIR}/esp32_common.cmake)\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/../esp32_common.cmake)\n```\n\n----------------------------------------\n\nTITLE: Initializing Relay4Unit in MicroPython\nDESCRIPTION: Constructor for initializing a Relay4Unit object with an I2C interface and optional address parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/relay4.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nRelay4Unit(i2c: I2C, address: int | list | tuple = 0x26)\n```\n\n----------------------------------------\n\nTITLE: Getting Satellite Count\nDESCRIPTION: Method to retrieve the number of satellites currently being tracked by the GNSS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef get_satellite_num():\n    # get satellite numbers.\n    # :return (str): satellite numbers value.\n```\n\n----------------------------------------\n\nTITLE: Validating Fetched Image\nDESCRIPTION: Method to check if the image fetched from the remote URL is valid. Returns a boolean value indicating validity.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/image+.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nImagePlus.is_valid_image() -> bool\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Settings for ESP32 MicroPython\nDESCRIPTION: Sets up initial CMake configuration including compiler flags, board settings, and SDK requirements. Defines basic build parameters and validates board configuration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\n\nset(CMAKE_C_FLAGS \"-Wno-unused-variable -Wno-unused-but-set-variable\")\nset(CMAKE_CXX_FLAGS \"-Wno-unused-variable -Wno-unused-but-set-variable -Wno-pmf-conversions -Wno-error=narrowing\")\n\nset(MICROPY_PORT_DIR ${CMAKE_SOURCE_DIR}/../micropython/ports/esp32)\n\ninclude($ENV{IDF_PATH}/tools/cmake/version.cmake)\nset(IDF_VERSION \"${IDF_VERSION_MAJOR}.${IDF_VERSION_MINOR}.${IDF_VERSION_PATCH}\")\n```\n\n----------------------------------------\n\nTITLE: Defining RDM Protocol Constants in C\nDESCRIPTION: This snippet defines various constants used in the RDM protocol, including maximum values, command classes, and parameter IDs.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/keywords.txt#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#define RDM_ASCII_SIZE_MAX 32\n#define RDM_PD_SIZE_MAX 231\n#define RDM_SENSOR_NUM_MAX 255\n\n#define RDM_SUB_DEVICE_ROOT 0\n#define RDM_SUB_DEVICE_MAX 512\n#define RDM_SUB_DEVICE_ALL 0xffff\n\n#define RDM_CC_DISC_COMMAND 0x10\n#define RDM_CC_DISC_COMMAND_RESPONSE 0x11\n#define RDM_CC_GET_COMMAND 0x20\n#define RDM_CC_GET_COMMAND_RESPONSE 0x21\n#define RDM_CC_SET_COMMAND 0x30\n#define RDM_CC_SET_COMMAND_RESPONSE 0x31\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes a maxdepth setting and lists multiple .rst files representing different modules in the project.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    4in8out.rst\n    ain4.rst\n    bala2.rst\n    commu.rst\n    display.rst\n    dmx.rst\n    dualkmeter.rst\n    ecg.rst\n    encoder4_motor.rst\n    fan.rst\n    gateway_h2.rst\n    gnss.rst\n    gps.rst\n    gpsv2.rst\n    grbl.rst\n    goplus2.rst\n    hmi.rst\n    llm.rst\n    lora.rst\n    lora_sx1262.rst\n    lorawan868.rst\n    lte.rst\n    nbiot.rst\n    odrive.rst\n    plus.rst\n    pm25.rst\n    pps.rst\n    pwrcan.rst\n    qrcode.rst\n    rca.rst\n    relay_2.rst\n    rs232.rst\n    servo2.rst\n    step_motor_driver.rst\n    usb.rst\n    zigbee.rst\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading Angle Sensor in MicroPython\nDESCRIPTION: This example demonstrates how to initialize an Angle sensor on specified pins and continuously read both voltage and angle values. The sensor is connected to pins 8 and 9, and the code prints both raw voltage readings and processed angle values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/angle.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport M5\nfrom M5 import *\nfrom unit import *\n\nM5.begin()\n\nangle_0 = Angle((8,9))\n\nwhile True:\n    print(angle_0.get_voltage())\n    print(angle_0.get_value())\n```\n\n----------------------------------------\n\nTITLE: Importing USB Device Module in MicroPython\nDESCRIPTION: This code snippet shows how to import the USB 'device' module in MicroPython. The 'currentmodule' directive indicates that the code examples will be referencing components from the 'usb' module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/usb/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: usb\n```\n\n----------------------------------------\n\nTITLE: Setting Label Text Size in MicroPython\nDESCRIPTION: Method to set the text font size of a Label object.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/widgets/label.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLabel.setSize(text_sz: float)\n```\n\n----------------------------------------\n\nTITLE: Getting Speed Over Ground from GPS V2.0 Module\nDESCRIPTION: Method to get the current speed over ground (SOG) in knots.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gpsv2.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nGPSV2Module.get_speed_over_ground()\n```\n\n----------------------------------------\n\nTITLE: Importing MQTT Client in MicroPython\nDESCRIPTION: Shows different ways to import the MQTTClient class from the umqtt module. Demonstrates importing the default client, simple client, and robust client variants.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/software/umqtt.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# uiflow2默认使用这个类\nfrom umqtt import MQTTClient\n\n# 如果想要使用 `umqtt.default` module ，请通过这种方式。\nfrom umqtt.simple import MQTTClient\n\n# 如果想要使用 `umqtt.robust` module ，请通过这种方式。\nfrom umqtt.robust import MQTTClient\n```\n\n----------------------------------------\n\nTITLE: Getting Accelerometer Data\nDESCRIPTION: Method that returns the accelerometer measurements for X, Y, and Z axes in gravity units (9.81m/s^2) as a tuple of float values.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef get_accelerometer():\n    # Get the tuple of x, y, and z values of the accelerometer and acceleration vector in gravity units (9.81m/s^2).\n    # :return (tuple): accelerometer tuple (float, float, float)\n```\n\n----------------------------------------\n\nTITLE: Initializing ToFHat Class in MicroPython\nDESCRIPTION: Constructor for the ToFHat class. It creates an instance of the ToF Hat sensor, specifying the I2C interface, device address, and communication timeout.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/tof.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ToFHat(i2c: I2C, address: int = 0x29, io_timeout_ms: int = 0)\n```\n\n----------------------------------------\n\nTITLE: Getting Button Status in MicroPython\nDESCRIPTION: Method to get the current status of the rotary encoder keys. Returns a boolean value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/mini_encoder.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nMiniEncoderCHat.get_button_status() -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Humidity Data from PM2.5 Module\nDESCRIPTION: Method to retrieve the environmental humidity data from the PM2.5 Module with SHT20 or SHT30 sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/pm25.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nPM25Module.get_humidity()\n```\n\n----------------------------------------\n\nTITLE: MIDI Effect Control Methods\nDESCRIPTION: Methods for controlling various MIDI effects including reverb, chorus, equalization, and modulation.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/midi.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef set_reverb(channel, program, level, delayfeedback)\ndef set_chorus(channel, program, level, feedback, chorusdelay)\ndef set_pan(channel, value)\ndef set_equalizer(channel, lowband, medlowband, medhighband, highband, lowfreq, medlowfreq, medhighfreq, highfreq)\ndef set_vibrate(channel, rate, depth, delay)\ndef set_tvf(channel, cutoff, resonance)\ndef set_envelope(channel, attack, decay, release)\n```\n\n----------------------------------------\n\nTITLE: Getting Temperature Data\nDESCRIPTION: Method that returns the temperature value in degrees Celsius from the BMP280 sensor, with a range of -40°C to +85°C.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef get_temperature():\n    # Get the temperature value in degrees celsius from the BMP280 sensor.\n    # :return (float): range is -40 ~ +85 °C.\n```\n\n----------------------------------------\n\nTITLE: Setting Same Code No Delay in QR Code Reader\nDESCRIPTION: This method configures whether to enable non-delay output for the same code. It takes a boolean parameter 'enable' where True enables and False disables the feature.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.set_same_code_no_delay(enable)\n```\n\n----------------------------------------\n\nTITLE: Closing BLE UART Server Connection\nDESCRIPTION: Method to close the BLE UART server connection.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/bleuart.server.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nBLEUARTServer.close()\n```\n\n----------------------------------------\n\nTITLE: Initializing SpeakerHat Class\nDESCRIPTION: Class definition for instantiating a SpeakerHat object. The class inherits from M5.Speaker and provides audio output functionality.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/speaker.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SpeakerHat(*args, **kwargs):\n```\n\n----------------------------------------\n\nTITLE: Configuring MicroPython Directory Paths and Build Options\nDESCRIPTION: Sets up the base MicroPython directory path, ESP32 port directory path, and enables TinyUSB support. The script uses conditional checks to set directory paths if not already defined and includes the ESP32 common CMake configuration.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/main_esp32s3/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Set location of base MicroPython directory.\nif(NOT MICROPY_DIR)\n    get_filename_component(MICROPY_DIR ${PROJECT_DIR}/../micropython/ ABSOLUTE)\nendif()\n\n# Set location of the ESP32 port directory.\nif(NOT MICROPY_PORT_DIR)\n    get_filename_component(MICROPY_PORT_DIR ${CMAKE_CURRENT_LIST_DIR}/.. ABSOLUTE)\nendif()\n\nset(MICROPY_PY_TINYUSB ON)\n\n# include(${MICROPY_PORT_DIR}/esp32_common.cmake)\ninclude(${CMAKE_CURRENT_LIST_DIR}/../esp32_common.cmake)\n```\n\n----------------------------------------\n\nTITLE: PORT Class Constants in MicroPython\nDESCRIPTION: Constants defining different ports available on M5Stack devices for use with power control methods.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/system/power.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nPORT.A     # Port A\nPORT.B1    # Port B1\nPORT.B2    # Port B2\nPORT.C1    # Port C1\nPORT.C2    # Port C2\nPORT.USB   # USB Port\nPORT.HAT   # HAT Port\nPORT.ALL   # All Ports\n```\n\n----------------------------------------\n\nTITLE: Creating an NCIRUnit Object with I2C\nDESCRIPTION: Constructor for the NCIRUnit class that initializes the temperature sensor with an I2C interface. Requires a configured I2C object as parameter.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/ncir.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nNCIRUnit(i2c)\n```\n\n----------------------------------------\n\nTITLE: LoRaE220433Unit Receive Callback Function Definition\nDESCRIPTION: Example callback function definition for the LoRaE220433Unit's non-blocking receive mode. The function takes two parameters: the received data as bytes and the RSSI signal strength as an integer.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/lora_e220_433.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef receive_callback(data: bytes, rssi: int)\n```\n\n----------------------------------------\n\nTITLE: LoRaWAN868 Module Constants Definition\nDESCRIPTION: Constants defining supported frequency bands and operating modes for the LoRaWAN868 module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/lorawan868.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Band frequencies\nBAND_470 = 470\nBAND_868 = 868\nBAND_915 = 915\n\n# Operating modes\nMODE_LORA = \"LORA\"\nMODE_LORAWAN = \"LORAWAN\"\n```\n\n----------------------------------------\n\nTITLE: Getting PIR Detection Status in MicroPython\nDESCRIPTION: Retrieves the current detection status of the PIR sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/hats/pir.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPIRHat.get_status()\n```\n\n----------------------------------------\n\nTITLE: DMX Start Code Example\nDESCRIPTION: Example of standard DMX null start code used to indicate packet type to fixtures. Without this code (0x00), fixtures will not respond to DMX packets.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_3\n\nLANGUAGE: hex\nCODE:\n```\n0x00\n```\n\n----------------------------------------\n\nTITLE: Clamping Operation with CatchUnit in MicroPython\nDESCRIPTION: Method that triggers the gripper to clamp or close. This controls the servo to move to the clamping position.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/catch.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCatchUnit.clamp() -> None\n```\n\n----------------------------------------\n\nTITLE: Registering ESP32 ADF Component in CMake\nDESCRIPTION: This snippet registers the ESP32 Audio Development Framework component with CMake, specifying source files, include directories, and required dependencies.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/boards/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n    SRCS\n        \"${srcs}\"\n    INCLUDE_DIRS\n        \"${includes}\"\n    REQUIRES\n        audio_pipeline\n        audio_sal\n        driver\n        esp-adf-libs\n        esp_http_client\n        esp_lcd\n        esp_codec_dev\n)\n\nmessage(STATUS \"boards/CMakeLists.txt: EXTRA_COMPONENT_DIRS=${EXTRA_COMPONENT_DIRS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Starting QR Code Decoding\nDESCRIPTION: Initiates the QR code decoding process\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.start_decode()\n```\n\n----------------------------------------\n\nTITLE: Reading Raw ADC Value from FaderUnit in MicroPython\nDESCRIPTION: Method to read the raw ADC value from the Fader unit. Returns an integer in the range of 0 to 65535.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/fader.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nFaderUnit.get_raw() -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Ambient Temperature from NCIR Sensor\nDESCRIPTION: Method to retrieve the ambient temperature from the NCIR sensor. Returns the current environmental temperature value.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/ncir.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nncir.get_ambient_temperature()\n```\n\n----------------------------------------\n\nTITLE: Getting Date Data\nDESCRIPTION: Method to retrieve the current date in dd/mm/yy format from the GNSS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef get_date():\n    # get date.\n    # :return (str): date(dd/mm/yy)\n```\n\n----------------------------------------\n\nTITLE: Logging Extra Component Directories in CMake\nDESCRIPTION: Outputs a status message displaying the value of EXTRA_COMPONENT_DIRS, which is useful for debugging and verifying the component setup.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/boards/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS \"boards/CMakeLists.txt: EXTRA_COMPONENT_DIRS=${EXTRA_COMPONENT_DIRS}\")\n```\n\n----------------------------------------\n\nTITLE: Sending MIDI Note Off Messages\nDESCRIPTION: Method to send a MIDI Note Off message to the specified channel for a given pitch.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_note_off(channel, pitch)\n```\n\n----------------------------------------\n\nTITLE: Reading Angle Rotation Value Method\nDESCRIPTION: The get_value method reads the current rotation value from an Angle sensor and returns an integer in the range of 0-65535.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/angle.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nAngle.get_value()\n```\n\n----------------------------------------\n\nTITLE: Controlling Speaker Volume in UIFlow2 MicroPython\nDESCRIPTION: Examples of setting and getting speaker volume using various methods in UIFlow2 MicroPython.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/hardware/speaker.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSpeaker.getVolumePercentage(0.5) # 50%\n\nSpeaker.setAllChannelVolume(128)\n```\n\n----------------------------------------\n\nTITLE: ADC Value Reading Method\nDESCRIPTION: Gets the original 16-bit value read by the ADC. Returns raw ADC reading.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/adc.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nADCUnit.get_value()\n```\n\n----------------------------------------\n\nTITLE: Setting I2C Address for 4In8Out Module\nDESCRIPTION: Method to change the I2C address of the 4In8Out module. It takes a new address value as parameter and updates the module's I2C address accordingly.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/4in8out.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nModule4In8Out.set_i2c_address(addr) -> None\n```\n\n----------------------------------------\n\nTITLE: Get Firmware Version Method - MicroPython\nDESCRIPTION: Returns the firmware version of the ScrollUnit as a string.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/scroll.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nScrollUnit.get_firmware_version() -> str\n```\n\n----------------------------------------\n\nTITLE: Non-blocking Check for MQTT Messages\nDESCRIPTION: Method to check for pending MQTT messages without blocking. Processes messages if available and returns immediately otherwise.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/umqtt.default.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nMQTTClient.check_msg(attempts=2)\n```\n\n----------------------------------------\n\nTITLE: Swapping X-Axis Direction on Joystick\nDESCRIPTION: Method to swap the x-axis direction of the joystick. Takes a boolean parameter to enable or disable swapping.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/joystick.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nJoystickUnit.swap_x(swap: bool = True) -> None\n```\n\n----------------------------------------\n\nTITLE: Selecting Phase Register for DDS Unit in MicroPython\nDESCRIPTION: Method to select the phase register of the DDS. It takes an index (0 or 1) as an argument.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/dds.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nDDSUnit.select_phase_reg(index: int = 0) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating a MiniScaleUnit Object\nDESCRIPTION: Constructor for creating a MiniScaleUnit object. It requires an I2C port for communication with the sensor.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/miniscale.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMiniScaleUnit(i2c0)\n```\n\n----------------------------------------\n\nTITLE: Getting Analog Value from Light Unit in MicroPython\nDESCRIPTION: This method retrieves the analog value (0-65535) from the Light Unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/light.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLight.get_analog_value()\n```\n\n----------------------------------------\n\nTITLE: Registering DMX Sniffer Component in ESP-IDF\nDESCRIPTION: Registers a DMX sniffer component in ESP-IDF build system by specifying the source file 'ESPIDF_DMXSniffer.c' without any additional include directories.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/examples/ESPIDF_DMXSniffer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRCS \"ESPIDF_DMXSniffer.c\"\n    INCLUDE_DIRS \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Digital Value from Light Unit in MicroPython\nDESCRIPTION: This method retrieves the digital value (0 or 1) from the Light Unit.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/zh_CN/unit/light.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLight.get_digital_value()\n```\n\n----------------------------------------\n\nTITLE: Getting Motor Speed in MicroPython\nDESCRIPTION: Retrieves the current speed of a motor connected to a specified channel on the Motion Base.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/motion.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmotion.get_motor_speed()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for LittleFS2 Project\nDESCRIPTION: This CMake script sets up the build configuration for the LittleFS2 project. It defines the minimum required CMake version, sets the project name, includes the necessary mbed-littlefs headers, collects source files from the littlefs directory, and creates an executable target named 'littlefs2'.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/tools/littlefs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required (VERSION 3.16)\n\nproject(littlefs2)\n\ninclude_directories(mbed-littlefs)\naux_source_directory(mbed-littlefs/littlefs DIR_SRCS)\n\nadd_executable(littlefs2 littlefs2.c ${DIR_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Setting Calibration Current for AIN4-20mA Unit\nDESCRIPTION: Method to set the calibration current for the AIN 4-20mA Unit. Takes a parameter 'val' which must be between 4 and 20 mA to calibrate the current sensing capability.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/ain4.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAIN4_20MAUnit.set_cal_current(val)\n```\n\n----------------------------------------\n\nTITLE: Deinitializing RS485 UART Communication\nDESCRIPTION: Turn off the UART bus and release resources.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/rs485.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrs485_0.deinit()\n```\n\n----------------------------------------\n\nTITLE: Changing MIDI Instruments\nDESCRIPTION: Method to change the program (instrument) on a specified MIDI channel with bank selection.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/synth.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSynthUnit.set_instrument(bank, channel, value)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-IDF RDM Responder Component\nDESCRIPTION: Registers an ESP-IDF component for the RDM Responder by specifying the source file and include directories. The component consists of a single C source file 'ESPIDF_RDMResponder.c' with no additional include directories.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/examples/ESPIDF_RDMResponder/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n    SRCS \"ESPIDF_RDMResponder.c\"\n    INCLUDE_DIRS \"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Data from DMX Channel in Python\nDESCRIPTION: Method to read data from a specified DMX channel in Slave mode.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dmx.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nDMX512Module.read_data(channel)\n```\n\n----------------------------------------\n\nTITLE: Clearing DMX Buffer in Python\nDESCRIPTION: Method to clear the DMX buffer and reset the data.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/dmx.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDMX512Module.clear_buffer()\n```\n\n----------------------------------------\n\nTITLE: Setting Decode Success Beep in QR Code Reader\nDESCRIPTION: This method configures the beep sound on successful decoding. It accepts an integer parameter 'count' to set no prompt sound, play once, or play twice.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.set_decode_success_beep(count)\n```\n\n----------------------------------------\n\nTITLE: Reading Single DMX Slot\nDESCRIPTION: Example of reading a single DMX slot value using dmx_read_slot(). Returns -1 on error or the slot value on success.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nconst int slot_num = 0;  // The slot to read. Slot 0 is the DMX start code!\n\n// Read slot 0. Returns the value of the desired slot or -1 on error.\nint value = dmx_read_slot(DMX_NUM_1, slot_num);\n```\n\n----------------------------------------\n\nTITLE: Setting Impinj Monza QT_MEM Status (MicroPython)\nDESCRIPTION: This method sets the QT_MEM status of an Impinj Monza UHFRFID tag. It takes parameters for the desired QT_MEM status, persistence, and access password. The method returns a boolean indicating success or failure.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/uhf_rfid.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nUHFRFIDUnit.set_impinj_monza_qt_mem(qt_mem: bool, persistence: int, password: str = \"00000000\") -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Altitude Data\nDESCRIPTION: Method to retrieve the current altitude in meters as determined by the GNSS module.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/gnss.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef get_altitude():\n    # get altitude.\n    # :return (str): altitude unit is meter.\n```\n\n----------------------------------------\n\nTITLE: Displaying Freeze Module Directory Structure in UIFlow MicroPython\nDESCRIPTION: Shows the directory structure of the freeze module in the UIFlow MicroPython project. It displays the main files including the system boot script, flashbdev.py, inisetup.py, and startup scripts for different M5Stack boards.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/modules/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── README.md          ---->  this file\n├── _boot.py           ---->  system boot script, user can\\'t change this\n├── flashbdev.py\n├── inisetup.py\n└── startup            ---->  different board startup scripts\n    ├── __init__.py\n    ├── atoms3.py\n    ├── cores3.py\n    └── stamps3.py\n```\n\n----------------------------------------\n\nTITLE: Image Bytearray Method Implementation\nDESCRIPTION: This method returns a bytearray object that points to the image data for byte-level read/write access. It is part of the image.Image class and can be used in both MicroPython and UIFlow2.0.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/image.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbytearray() -> bytearray\n```\n\n----------------------------------------\n\nTITLE: Reading Data from a TCP Socket in MicroPython\nDESCRIPTION: This snippet shows how to read data from a TCP socket using the read method. This is an alternative to the recv method for receiving data from the socket.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/tcp.client.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata = tcpc.read()\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Displaying UIFlow MicroPython File System Structure in Bash\nDESCRIPTION: This bash code snippet illustrates the directory structure of the UIFlow MicroPython project. It shows the main README file, a common resources folder, and separate folders for different M5Stack board types like Atom S3 and Core S3.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/third-party/fs/system/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── README.md  ----> this file\n├── common     ----> common resource for all board\n├── atoms3     ----> resource for atoms3 board\n├── cores3     ----> resource for cores3 board\n└── ...        ----> others board...\n```\n\n----------------------------------------\n\nTITLE: Reading QR Code Data\nDESCRIPTION: Reads decoded QR code data, returns None if no data is available\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/base/qrcode2.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbase_qrcode2.read()\n```\n\n----------------------------------------\n\nTITLE: Reading Data from UDP Socket in MicroPython\nDESCRIPTION: Reads data from the UDP socket without specifying a buffer size. This is an alternative method to receive data from the server.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/udp.client.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata = udpc.read()\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Layout for UIFlow MicroPython\nDESCRIPTION: Tree view representation of the project's file system structure showing the organization of app scripts, boot files, libraries, and resource directories including fonts and images.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/fs/user/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n├── README.md           ----> this file\n├── apps                ----> user app scripts\n│   └── helloworld.py\n├── boot.py             ----> secondary boot file\n├── libs                ----> libraries\n│   ├── README.md\n│   └── __init__.py\n├── main.py             ----> main file\n└── res                 ----> resource files\n    ├── font            ----> font files\n    │   └── README.md\n    └── img             ----> image files\n        ├── README.md\n        ├── default.jpg\n        ├── default.png\n        ├── uiflow.bmp\n        ├── uiflow.jpg\n        └── uiflow.png\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Motor Mode Configuration Methods in RollerBase\nDESCRIPTION: Methods for setting and getting the motor operation mode. set_motor_mode() configures the motor's operational mode, while get_motor_mode() retrieves the current mode setting.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/units/rollercan.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef set_motor_mode(mode) -> None:\n    \n    Set the motor mode.\n\n    :param int mode: The mode to set for the motor.\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_motor_mode() -> int:\n    \n    Get the motor mode.\n\n    :return: The current motor mode.\n```\n\n----------------------------------------\n\nTITLE: Structuring Advanced Documentation with reStructuredText\nDESCRIPTION: This snippet defines the structure for advanced documentation in the UIFlow MicroPython project. It includes a title, a reference inclusion, and a table of contents with links to various advanced feature pages.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/advanced/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nAdvanced\n=========\n\n.. include:: ../refs/advanced.ref\n\n.. toctree::\n    :maxdepth: 1\n\n    usb/index.rst\n    camera.rst\n    code_scanner.rst\n    dl.rst\n    image.rst\n    jpg.rst\n```\n\n----------------------------------------\n\nTITLE: Creating LittleFS2 Filesystem Image Using Command Line Tool\nDESCRIPTION: Command to create a filesystem image using littlefs2 tool. Takes input files from a specified directory, creates an output binary file with verbose output, and sets the filesystem size to 0x14e000 bytes.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/tools/littlefs/prebuilt/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./littlefs2 -c -v -i /path/to/files_in -o /path/to/fs.bin -s 0x14e000 # size\n```\n\n----------------------------------------\n\nTITLE: Receiving Specific Number of DMX Slots\nDESCRIPTION: Demonstrates using dmx_receive_num() to receive a specified number of DMX slots before returning. This is useful when expecting a specific packet size.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/esp_dmx/README.md#2025-04-21_snippet_11\n\nLANGUAGE: c\nCODE:\n```\ndmx_packet_t packet;\nint num_slots_to_receive = 96;\ndmx_receive_num(DMX_NUM_1, &packet, num_slots_to_receive, DMX_TIMEOUT_TICK);\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the software documentation using reStructuredText directives. It includes an external reference file and sets up a table of contents for various software modules.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/software/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nSoftware\n=========\n\n.. include:: ../refs/software.ref\n\n.. toctree::\n    :maxdepth: 1\n\n    modbus.rst\n    requests2.rst\n    umqtt.rst\n    tcp.rst\n    udp.rst\n```\n\n----------------------------------------\n\nTITLE: README Header for UIFlow MicroPython Tests\nDESCRIPTION: Simple markdown header identifying this as a test code repository for UIFlow MicroPython\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# uiflow-micropython test code\n```\n\n----------------------------------------\n\nTITLE: GRBL Module Constants for Motor Modes\nDESCRIPTION: Constants defining the available motor operation modes: absolute and relative positioning.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/docs/en/module/grbl.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nGRBLModule.MODE_ABSOLUTE\nGRBLModule.MODE_RELATIVE\n```\n\n----------------------------------------\n\nTITLE: Defining LittleFS2 VFS Structure in C++\nDESCRIPTION: This snippet defines the structure for a LittleFS2 virtual filesystem object. It includes the base object, blockdev, configuration settings, and the LittleFS2 instance.\nSOURCE: https://github.com/m5stack/uiflow-micropython/blob/master/m5stack/components/M5Unified/mpy_m5lfs2.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef struct _mp_obj_vfs_lfs2_t {\n    mp_obj_base_t base;\n    mp_vfs_blockdev_t blockdev;\n    bool enable_mtime;\n    vstr_t cur_dir;\n    struct lfs2_config config;\n    lfs2_t lfs;\n} mp_obj_vfs_lfs2_t;\n```"
  }
]