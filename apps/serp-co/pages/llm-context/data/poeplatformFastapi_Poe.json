[
  {
    "owner": "poe-platform",
    "repo": "fastapi_poe",
    "content": "TITLE: Creating a Basic Echo Bot with fastapi_poe in Python\nDESCRIPTION: Defines a simple Poe bot named 'EchoBot' by inheriting from 'fastapi_poe.PoeBot'. It implements the 'get_response' asynchronous method to yield the content of the last user message back as a partial response. The script also demonstrates how to run this bot using 'fastapi_poe.run', allowing connections without an access key for development purposes.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fastapi_poe as fp\n\nclass EchoBot(fp.PoeBot):\n    async def get_response(self, request: fp.QueryRequest):\n        last_message = request.query[-1].content\n        yield fp.PartialResponse(text=last_message)\n\nif __name__ == \"__main__\":\n    fp.run(EchoBot(), allow_without_key=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing get_response in fastapi_poe PoeBot Class (Python)\nDESCRIPTION: This Python code snippet demonstrates overriding the asynchronous `get_response` method within a `PoeBot` subclass. It takes a `QueryRequest` object, accesses the content of the last message in the query list (`request.query[-1].content`), and asynchronously yields a `PartialResponse` containing that text. This serves as a basic example of how a Poe bot, built with `fastapi_poe`, generates a response to user input. It requires the `fastapi_poe` library (aliased as `fp`) and utilizes its `QueryRequest` and `PartialResponse` types.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def get_response(self, request: fp.QueryRequest) -> AsyncIterable[fp.PartialResponse]:\n    last_message = request.query[-1].content\n    yield fp.PartialResponse(text=last_message)\n```\n\n----------------------------------------\n\nTITLE: Running a fastapi_poe Bot with Authentication in Python\nDESCRIPTION: Illustrates how to run a Poe bot (e.g., 'EchoBot') with authentication enabled using the 'fastapi_poe' library. The 'fp.run' function is called with the bot instance and an 'access_key' parameter, ensuring that incoming requests from Poe servers are validated against the provided key configured in the bot settings.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    fp.run(EchoBot(), access_key=<key>)\n```\n\n----------------------------------------\n\nTITLE: Serving a Poe Bot with FastAPI in Python\nDESCRIPTION: This function exposes a Poe bot as a FastAPI app for local development or testing. It leverages parameters identical to make_app and is intended for integration into a FastAPI service, providing local serving capability for bots. No explicit return; suitable for running locally with the standard FastAPI development server. Requires FastAPI and associated dependencies.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n## `fp.run`\n\nServe a poe bot using a FastAPI app. This function should be used when you are running the\nbot locally. The parameters are the same as they are for `make_app`.\n\n#### Returns: `None`\n\n```\n\n----------------------------------------\n\nTITLE: Defining Query Request Parameters Schema in Python\nDESCRIPTION: Defines the QueryRequest data structure used for Poe bot queries, specifying the required fields (chat history, user, conversation, message IDs, etc.) and optional model control (temperature, system prompt skipping, logit bias, etc.). Required for tracking user, message, and chat state across API flows. Ensures sufficient context for routing, personalization, and model configuration.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n## `fp.QueryRequest`\n\nRequest parameters for a query request.\n#### Fields:\n- `query` (`list[ProtocolMessage]`): list of message representing the current state of the chat.\n- `user_id` (`Identifier`): an anonymized identifier representing a user. This is persistent\nfor subsequent requests from that user.\n- `conversation_id` (`Identifier`): an identifier representing a chat. This is\npersistent for subsequent request for that chat.\n- `message_id` (`Identifier`): an identifier representing a message.\n- `access_key` (`str = \"<missing>\"`): contains the access key defined when you created your bot\non Poe.\n- `temperature` (`float | None = None`): Temperature input to be used for model inference.\n- `skip_system_prompt` (`bool = False`): Whether to use any system prompting or not.\n- `logit_bias` (`dict[str, float] = {}`)\n- `stop_sequences` (`list[str] = []`)\n- `language_code` (`str = \"en\"`): BCP 47 language code of the user's client.\n- `bot_query_id` (`str = \"\"`): an identifier representing a bot query.\n\n```\n\n----------------------------------------\n\nTITLE: Partial Bot Response Representation for Poe in Python\nDESCRIPTION: Documents PartialResponse, which packages an incremental text segment (token) and additional presentation flags (suggested reply, replace response), and optional arbitrary data. This is yielded by PoeBot responders for partial delivery and OpenAI function calling, facilitating streamed responses with token-by-token granularity.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n## `fp.PartialResponse`\n\nRepresentation of a (possibly partial) response from a bot. Yield this in\n`PoeBot.get_response` or `PoeBot.get_response_with_context` to communicate your response to Poe.\n\n#### Fields:\n- `text` (`str`): The actual text you want to display to the user. Note that this should solely\nbe the text in the next token since Poe will automatically concatenate all tokens before\ndisplaying the response to the user.\n- `data` (`Optional[dict[str, Any]]`): Used to send arbitrary json data to Poe. This is\ncurrently only used for OpenAI function calling.\n- `is_suggested_reply` (`bool = False`): Setting this to true will create a suggested reply with\nthe provided text value.\n- `is_replace_response` (`bool = False`): Setting this to true will clear out the previously\ndisplayed text to the user and replace it with the provided text value.\n\n```\n\n----------------------------------------\n\nTITLE: Representing a Poe Protocol Message Schema in Python\nDESCRIPTION: Describes a ProtocolMessage which carries role (system/user/bot), contents, metadata, feedback, and optional sender info. Used for chatting/interacting with bots in the Poe protocol, capturing metadata such as timestamps and attachments. Serves as the canonical message unit for all Poe bot interactions.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n## `fp.ProtocolMessage`\n\nA message as used in the Poe protocol.\n#### Fields:\n- `role` (`Literal[\"system\", \"user\", \"bot\"]`)\n- `sender_id` (`Optional[str]`)\n- `content` (`str`)\n- `content_type` (`ContentType=\"text/markdown\"`)\n- `timestamp` (`int = 0`)\n- `message_id` (`str = \"\"`)\n- `feedback` (`list[MessageFeedback] = []`)\n- `attachments` (`list[Attachment] = []`)\n- `metadata` (`Optional[str] = None`)\n\n```\n\n----------------------------------------\n\nTITLE: Invoking a Poe Bot and Retrieving Response in Python\nDESCRIPTION: The get_bot_response function enables scripts or shells to send a sequence of ProtocolMessages to another Poe bot and retrieve its response. Supports OpenAI function calling via optional tool definitions, adjustable generation parameters like temperature, logit bias, and stop sequences, as well as session and endpoint URL overrides. Returns asynchronous bot responses with rich configuration options; designed for both direct interaction and custom integrations.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n## `fp.get_bot_response`\n\nUse this function to invoke another Poe bot from your shell.\n\n#### Parameters:\n- `messages` (`list[ProtocolMessage]`): A list of messages representing your conversation.\n- `bot_name` (`str`): The bot that you want to invoke.\n- `api_key` (`str`): Your Poe API key. Available at [poe.com/api_key](https://poe.com/api_key)\n- `tools` (`Optional[list[ToolDefinition]] = None`): An list of ToolDefinition objects\ndescribing the functions you have. This is used for OpenAI function calling.\n- `tool_executables` (`Optional[list[Callable]] = None`): An list of functions corresponding\nto the ToolDefinitions. This is used for OpenAI function calling.\n- `temperature` (`Optional[float] = None`): The temperature to use for the bot.\n- `skip_system_prompt` (`Optional[bool] = None`): Whether to skip the system prompt.\n- `logit_bias` (`Optional[dict[str, float]] = None`): The logit bias to use for the bot.\n- `stop_sequences` (`Optional[list[str]] = None`): The stop sequences to use for the bot.\n- `base_url` (`str = \"https://api.poe.com/bot/\"`): The base URL to use for the bot. This is\nmainly for internal testing and is not expected to be changed.\n- `session` (`Optional[httpx.AsyncClient] = None`): The session to use for the bot.\n\n```\n\n----------------------------------------\n\nTITLE: Querying Poe Bots via Bot Query API in Python\nDESCRIPTION: This function defines the entry point for making inference requests to other Poe bots, possibly for response chaining or meta-bot scenarios. It processes a QueryRequest along with the target bot's name and optional tool definitions, supporting OpenAI function calling. When provided an API key, responses are charged accordingly. Inputs include user identity, session info, and optional tools/functions. Returns streaming bot responses for prompt processing.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n## `fp.stream_request`\n\nThe Entry point for the Bot Query API. This API allows you to use other bots on Poe for\ninference in response to a user message. For more details, checkout:\nhttps://creator.poe.com/docs/server-bots-functional-guides#accessing-other-bots-on-poe\n\n#### Parameters:\n- `request` (`QueryRequest`): A QueryRequest object representing a query from Poe. This object\nalso includes information needed to identify the user for compute point usage.\n- `bot_name` (`str`): The bot you want to invoke.\n- `api_key` (`str = \"\"`): Your Poe API key, available at poe.com/api_key. You will need\nthis in case you are trying to use this function from a script/shell. Note that if an `api_key`\nis provided, compute points will be charged on the account corresponding to the `api_key`.\n- tools: (`Optional[list[ToolDefinition]] = None`): An list of ToolDefinition objects describing\nthe functions you have. This is used for OpenAI function calling.\n- tool_executables: (`Optional[list[Callable]] = None`): An list of functions corresponding\nto the ToolDefinitions. This is used for OpenAI function calling.\n\n```\n\n----------------------------------------\n\nTITLE: Providing Bot Settings Response Schema in Poe Platform (Python)\nDESCRIPTION: Defines SettingsResponse object to structure configuration returned by the bot, covering cross-bot dependencies, attachment options, onboarding/introduction messages, and miscellaneous behavioral flags (image comprehension, alternation enforcement, etc.). Supports both user-configurable and protocol-mandated constraints.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n## `fp.SettingsResponse`\n\nAn object representing your bot's response to a settings object.\n#### Fields:\n- `server_bot_dependencies` (`dict[str, int] = {}`): Information about other bots that your bot\nuses. This is used to facilitate the Bot Query API.\n- `allow_attachments` (`bool = False`): Whether to allow users to upload attachments to your\nbot.\n- `introduction_message` (`str = \"\"`): The introduction message to display to the users of your\nbot.\n- `expand_text_attachments` (`bool = True`): Whether to request parsed content/descriptions from\ntext attachments with the query request. This content is sent through the new parsed_content\nfield in the attachment dictionary. This change makes enabling file uploads much simpler.\n- `enable_image_comprehension` (`bool = False`): Similar to `expand_text_attachments` but for\nimages.\n- `enforce_author_role_alternation` (`bool = False`): If enabled, Poe will concatenate messages\nso that they follow role alternation, which is a requirement for certain LLM providers like\nAnthropic.\n - `enable_multi_bot_chat_prompting` (`bool = False`): If enabled, Poe will combine previous bot\n messages if there is a multibot context.\n\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAI Tool Function Call Definition in Python\nDESCRIPTION: This snippet lays out the `ToolDefinition` object, representing the schema for tools made available to function-calling models like OpenAI's. The object includes a type string and a reference to a `FunctionDefinition` (which must be detailed elsewhere). It acts as a payload describing available external functions.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n## `fp.ToolDefinition`\n\nAn object representing a tool definition used for OpenAI function calling.\n#### Fields:\n- `type` (`str`)\n- `function` (`FunctionDefinition`): Look at the source code for a detailed description\nof what this means.\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Call Definition Object for OpenAI Function Calling in Python\nDESCRIPTION: This code details the `ToolCallDefinition` object, which models a tool call structure returned by a model using OpenAI function calling. It houses a unique ID, type string, and refers to a `FunctionDefinition`. All fields must be present and the function component should follow the definition provided in the code base.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n## `fp.ToolCallDefinition`\n\nAn object representing a tool call. This is returned as a response by the model when using\nOpenAI function calling.\n#### Fields:\n- `id` (`str`)\n- `type` (`str`)\n- `function` (`FunctionDefinition`): Look at the source code for a detailed description\nof what this means.\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Result Object for OpenAI Function Calling in Python\nDESCRIPTION: This snippet specifies the `ToolResultDefinition` object, used to deliver function results as part of OpenAI function-calling sequences. Fields include the actor role, function name, tool call ID, and content payload, all as strings. Intended for passing structured outputs to the model in the last step of the invocation cycle.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n## `fp.ToolResultDefinition`\n\nAn object representing a function result. This is passed to the model in the last step\nwhen using OpenAI function calling.\n#### Fields:\n- `role` (`str`)\n- `name` (`str`)\n- `tool_call_id` (`str`)\n- `content` (`str`)\n```\n\n----------------------------------------\n\nTITLE: Synchronous Poe Bot Response Generator in Python\nDESCRIPTION: Wraps async generator get_bot_response to provide synchronous partial response handling. Ideal for consumers who need blocking, stepwise responses (e.g., in scripts or synchronous apps), while still supporting advanced settings like generation parameters, tooling, endpoint and session overrides. Returns synchronous iterables; for async/streaming integrations, use get_bot_response directly.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n## `fp.get_bot_response_sync`\n\nThis function wraps the async generator `fp.get_bot_response` and returns\npartial responses synchronously.\n\nFor asynchronous streaming, or integration into an existing event loop, use\n`fp.get_bot_response` directly.\n\n#### Parameters:\n- `messages` (`list[ProtocolMessage]`): A list of messages representing your conversation.\n- `bot_name` (`str`): The bot that you want to invoke.\n- `api_key` (`str`): Your Poe API key. This is available at: [poe.com/api_key](https://poe.com/api_key)\n- `tools` (`Optional[list[ToolDefinition]] = None`): An list of ToolDefinition objects\ndescribing the functions you have. This is used for OpenAI function calling.\n- `tool_executables` (`Optional[list[Callable]] = None`): An list of functions corresponding\nto the ToolDefinitions. This is used for OpenAI function calling.\n- `temperature` (`Optional[float] = None`): The temperature to use for the bot.\n- `skip_system_prompt` (`Optional[bool] = None`): Whether to skip the system prompt.\n- `logit_bias` (`Optional[dict[str, float]] = None`): The logit bias to use for the bot.\n- `stop_sequences` (`Optional[list[str]] = None`): The stop sequences to use for the bot.\n- `base_url` (`str = \"https://api.poe.com/bot/\"`): The base URL to use for the bot. This is\nmainly for internal testing and is not expected to be changed.\n- `session` (`Optional[httpx.AsyncClient] = None`): The session to use for the bot.\n\n```\n\n----------------------------------------\n\nTITLE: Concatenating Final Poe Bot Responses in Python\nDESCRIPTION: This helper collects all partial tokens/responses from a streamed bot reply and returns the concatenated final response. Designed for the Bot Query API flow; it takes a QueryRequest and bot name, and can accept an API key for authentication and billing. Ensures complete message is returned (as a single string or object) after all tokens are received.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n## `fp.get_final_response`\n\nA helper function for the bot query API that waits for all the tokens and concatenates the full\nresponse before returning.\n\n#### Parameters:\n- `request` (`QueryRequest`): A QueryRequest object representing a query from Poe. This object\nalso includes information needed to identify the user for compute point usage.\n- `bot_name` (`str`): The bot you want to invoke.\n- `api_key` (`str = \"\"`): Your Poe API key, available at poe.com/api_key. You will need this in\ncase you are trying to use this function from a script/shell. Note that if an `api_key` is\nprovided, compute points will be charged on the account corresponding to the `api_key`.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Attachment Object for Protocol Messages in Python\nDESCRIPTION: This block describes the `Attachment` object, representing supplemental data included within Poe protocol messages. The object specifies a URL, MIME content type, an optional name, and an optional string for parsed content, requiring inputs for these fields. It assumes standard types and may include nullable values for `parsed_content`.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n## `fp.Attachment`\n\nAttachment included in a protocol message.\n#### Fields:\n- `url` (`str`)\n- `content_type` (`str`)\n- `name` (`str`)\n- `parsed_content` (`Optional[str] = None`)\n```\n\n----------------------------------------\n\nTITLE: Handling Attachment Uploads for Poe Bots in Python\nDESCRIPTION: Defines the schema for AttachmentUploadResponse, which describes the result of uploading a message attachment. Returns attachment URL, MIME type, and any inline reference for consumption. Enables bots to provide users with upload confirmation and reference for inline/attachment usage.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n## `fp.AttachmentUploadResponse`\n\nThe result of a post_message_attachment request.\n#### Fields:\n- `attachment_url` (`Optional[str]`): The URL of the attachment.\n- `mime_type` (`Optional[str]`): The MIME type of the attachment.\n- `inline_ref` (`Optional[str]`): The inline reference of the attachment.\nif post_message_attachment is called with is_inline=False, this will be None.\n\n```\n\n----------------------------------------\n\nTITLE: Returning Data Attachment Responses for Poe Bots in Python\nDESCRIPTION: DataResponse documents how to attach arbitrary metadata or data payloads to a bot response for later retrieval within a single chat session. Only the final DataResponse is considered. Useful for extending bot memory/state or passing data objects between interactions.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n## `fp.DataResponse`\n\nA response that contains arbitrary data to attach to the bot response.\nThis data can be retrieved in later requests to the bot within the same chat.\nNote that only the final DataResponse object in the stream will be attached to the bot response.\n\n#### Fields:\n- `metadata` (`str`): String of data to attach to the bot response.\n\n```\n\n----------------------------------------\n\nTITLE: Server Meta Events Communication for Poe Bots in Python\nDESCRIPTION: Captures MetaResponse object, which can be yielded to update meta state or suggested replies to users, triggering UI or session state changes. Supports both content type and configuration for attachment settings. Crucial for server-initiated client state management and programmable UX updates.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n## `fp.MetaResponse`\n\nSimilar to `Partial Response`. Yield this to communicate `meta` events from server bots.\n\n#### Fields:\n- `suggested_replies` (`bool = False`): Whether or not to enable suggested replies.\n- `content_type` (`ContentType = \"text/markdown\"`): Used to describe the format of the response.\nThe currently supported values are `text/plain` and `text/markdown`.\n- `refetch_settings` (`bool = False`): Used to trigger a settings fetch request from Poe. A more\nrobust way to trigger this is documented at:\nhttps://creator.poe.com/docs/server-bots-functional-guides#updating-bot-settings\n\n```\n\n----------------------------------------\n\nTITLE: Bot Error Response Communication in Poe Platform (Python)\nDESCRIPTION: Defines ErrorResponse object for signaling bot errors during streaming. Carries a retry flag and optional error_type (enum/class) to indicate to clients if retrying is allowed and what error occurred. Enables standardized error handling and feedback protocol integration.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n## `fp.ErrorResponse`\n\nSimilar to `PartialResponse`. Yield this to communicate errors from your bot.\n\n#### Fields:\n- `allow_retry` (`bool = False`): Whether or not to allow a user to retry on error.\n- `error_type` (`Optional[ErrorType] = None`): An enum indicating what error to display.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Report Error Request Schema using Python\nDESCRIPTION: This code documents the `ReportErrorRequest` data structure for submitting error reports through the Poe protocol. It expects a string message detailing the error and a metadata dictionary for additional context. Inputs are the `message` string and a dictionary, with all fields required for proper error reporting.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n## `fp.ReportErrorRequest`\n\nRequest parameters for a report_error request.\n#### Fields:\n- `message` (`str`)\n- `metadata` (`dict[str, Any]`)\n```\n\n----------------------------------------\n\nTITLE: Defining Report Feedback Request Schema using Python\nDESCRIPTION: This snippet outlines the structure of the `ReportFeedbackRequest` used for reporting feedback within the Poe protocol. It specifies that the request should include identifiers for the message, user, and conversation, along with a feedback type enumerated by `FeedbackType`. Required dependencies include the definitions of `Identifier` and `FeedbackType`. Inputs are these four fields and the object acts as a standard payload container.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n## `fp.ReportFeedbackRequest`\n\nRequest parameters for a report_feedback request.\n#### Fields:\n- `message_id` (`Identifier`)\n- `user_id` (`Identifier`)\n- `conversation_id` (`Identifier`)\n- `feedback_type` (`FeedbackType`)\n```\n\n----------------------------------------\n\nTITLE: Defining Report Reaction Request Schema using Python\nDESCRIPTION: This snippet presents the `ReportReactionRequest` object, which captures feedback in the form of user reactions in the Poe protocol. The request includes identifiers for the relevant message, user, and conversation, as well as a string specifying the reaction. It assumes the existence of `Identifier` types, and all fields are expected as input parameters.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n## `fp.ReportReactionRequest`\n\nRequest parameters for a report_reaction request.\n#### Fields:\n- `message_id` (`Identifier`)\n- `user_id` (`Identifier`)\n- `conversation_id` (`Identifier`)\n- `reaction` (`str`)\n```\n\n----------------------------------------\n\nTITLE: Defining Message Feedback Object in Python\nDESCRIPTION: This snippet defines the `MessageFeedback` object used to encapsulate feedback on messages within the Poe protocol. It includes a feedback type (an enumeration) and an optional reason string. The object requires both fields as input and is used to transport structured feedback data.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n## `fp.MessageFeedback`\n\nFeedback for a message as used in the Poe protocol.\n#### Fields:\n- `type` (`FeedbackType`)\n- `reason` (`Optional[str]`)\n```\n\n----------------------------------------\n\nTITLE: Initiating a Bot Settings Request in Poe Platform (Python)\nDESCRIPTION: Documents SettingsRequest, an empty schema for making a bot settings fetch request. While currently containing no fields, it's prepared for future expansion and is used to trigger bot configuration refresh/updates.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/docs/api_reference.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n## `fp.SettingsRequest`\n\nRequest parameters for a settings request. Currently, this contains no fields but this\nmight get updated in the future.\n\n```\n\n----------------------------------------\n\nTITLE: Running Pre-commit Hooks for CI Checks - Shell\nDESCRIPTION: These commands demonstrate how to locally install and run pre-commit hooks to ensure code formatting and checks conform to the project's continuous integration standards. Prerequisites include having Python and pip installed, with pre-commit specified as the required package. 'pip install pre-commit' installs the tool, while 'pre-commit run --all' runs all defined hooks on the current codebase and 'pre-commit install' sets up the hook to execute automatically before every commit. Outputs will include a summary of all code quality checks. Limitations: Only applicable in environments with Python and pip available.\nSOURCE: https://github.com/poe-platform/fastapi_poe/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install pre-commit\n```\n\nLANGUAGE: Shell\nCODE:\n```\npre-commit run --all\n```\n\nLANGUAGE: Shell\nCODE:\n```\npre-commit install\n```"
  }
]