[
  {
    "owner": "retejs",
    "repo": "retejs.org",
    "content": "TITLE: Initializing Rete.js Editor with React Integration\nDESCRIPTION: This code snippet sets up a basic Rete.js editor with React integration. It creates an editor instance, adds two nodes with connections, and applies various plugins including the React renderer.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/1.basic/1.react.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoot } from \"react-dom/client\";\nimport { NodeEditor, GetSchemes, ClassicPreset } from \"rete\";\nimport { AreaPlugin, AreaExtensions } from \"rete-area-plugin\";\nimport {\n  ReactPlugin,\n  ReactArea2D,\n  Presets as ReactPresets\n} from \"rete-react-plugin\";\n\ntype Schemes = GetSchemes<\n  ClassicPreset.Node,\n  ClassicPreset.Connection<ClassicPreset.Node, ClassicPreset.Node>\n>;\ntype AreaExtra = ReactArea2D<Schemes>;\n\nconst socket = new ClassicPreset.Socket(\"socket\");\n\nclass Node extends ClassicPreset.Node {\n  width = 180;\n  height = 120;\n}\n\nclass Connection<\n  A extends Node,\n  B extends Node\n> extends ClassicPreset.Connection<A, B> {}\n\nasync function createEditor(container: HTMLElement) {\n  const editor = new NodeEditor<Schemes>();\n  const area = new AreaPlugin<Schemes, AreaExtra>(container);\n  const reactRender = new ReactPlugin<Schemes, AreaExtra>({ createRoot });\n\n  AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {\n    accumulating: AreaExtensions.accumulateOnCtrl()\n  });\n\n  const render = reactRender.render;\n  const socket = new ClassicPreset.Socket(\"socket\");\n\n  reactRender.addPreset(ReactPresets.classic.setup());\n\n  editor.use(area);\n  area.use(reactRender);\n\n  const a = new Node(\"A\");\n  a.addControl(\n    \"a\",\n    new ClassicPreset.InputControl(\"text\", { initial: \"A\" })\n  );\n  a.addOutput(\"a\", new ClassicPreset.Output(socket));\n  await editor.addNode(a);\n\n  const b = new Node(\"B\");\n  b.addControl(\n    \"b\",\n    new ClassicPreset.InputControl(\"text\", { initial: \"B\" })\n  );\n  b.addInput(\"b\", new ClassicPreset.Input(socket));\n  await editor.addNode(b);\n\n  await editor.addConnection(new Connection(a, \"a\", b, \"b\"));\n\n  await area.translate(a.id, { x: 0, y: 0 });\n  await area.translate(b.id, { x: 270, y: 0 });\n\n  AreaExtensions.zoomAt(area, editor.getNodes());\n\n  return {\n    destroy: () => area.destroy()\n  };\n}\n\nexport default createEditor;\n```\n\n----------------------------------------\n\nTITLE: Initializing Rete.js Editor with Vue.js Integration\nDESCRIPTION: This code snippet sets up a basic Rete.js editor with Vue.js integration. It creates an area, adds two nodes with input controls, connects them, and applies custom styling. The editor uses rete-vue-plugin for rendering and supports node selection.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/1.basic/2.vue.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEditor, BaseSchemes } from 'rete'\nimport { AreaPlugin, AreaExtensions } from 'rete-area-plugin'\nimport { VuePlugin, Presets, VueArea2D } from 'rete-vue-plugin'\n\ntype Schemes = BaseSchemes\n\nexport async function createEditorExample(container: HTMLElement) {\n  const socket = new Presets.classic.Socket('socket')\n\n  const editor = await createEditor<Schemes>()\n  const area = new AreaPlugin<Schemes>(container)\n  const vue = new VuePlugin<Schemes>()\n\n  AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {\n    accumulating: AreaExtensions.accumulateOnCtrl()\n  })\n\n  editor.use(area)\n  area.use(vue)\n\n  const a = new Presets.classic.Node('A')\n  a.addControl(\n    'a',\n    new Presets.classic.InputControl('text', { initial: 'A' })\n  )\n  a.addOutput('a', new Presets.classic.Output(socket))\n  await editor.addNode(a)\n\n  const b = new Presets.classic.Node('B')\n  b.addControl(\n    'b',\n    new Presets.classic.InputControl('text', { initial: 'B' })\n  )\n  b.addInput('b', new Presets.classic.Input(socket))\n  await editor.addNode(b)\n\n  await editor.addConnection(new Presets.classic.Connection(a, 'a', b, 'b'))\n\n  await area.translate(a.id, { x: 0, y: 0 })\n  await area.translate(b.id, { x: 270, y: 0 })\n\n  setTimeout(() => {\n    AreaExtensions.zoomAt(area, editor.getNodes())\n  }, 10)\n\n  return {\n    destroy: () => area.destroy()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Secondary Node and Connection\nDESCRIPTION: Creation of a second node and establishing connection between nodes\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/1.basic.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst nodeB = new ClassicPreset.Node(\"B\");\nnodeB.addControl(\"b\", new ClassicPreset.InputControl(\"text\", {}));\nnodeB.addInput(\"b\", new ClassicPreset.Input(socket));\nawait editor.addNode(nodeB);\n\nawait editor.addConnection(new ClassicPreset.Connection(nodeA, \"a\", nodeB, \"b\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Dataflow Processing with Rete.js Engine in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement dataflow processing using the DataflowEngine from rete-engine. It shows the creation of a custom Node class with a data method, connecting the engine to the editor, and fetching node data.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/5.engine.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClassicPreset } from 'rete-engine'\nimport { DataflowEngine } from 'rete-engine'\n\nconst { Node, Socket } = ClassicPreset\n\nclass NodeAdd extends Node<{ left: Socket, right: Socket }, { value: Socket }, { }> {\n\n  constructor() {\n    // init controls and ports\n  }\n\n  // mandatory method\n  data(inputs: { left?: number[], right?: number[] }): { value: number } {\n    const left = inputs.left[0] || 0\n    const right = inputs.right[0] || 0\n\n  return {\n      value: left + right\n    }\n  }\n}\n\nconst engine = new DataflowEngine<Schemes>()\n\neditor.use(engine)\n\nconst nodeOutput = await engine.fetch(resultNode.id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Editor Types and Instance\nDESCRIPTION: Setup of TypeScript types and creation of the NodeEditor instance with classic preset schemes\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/1.basic.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeEditor, GetSchemes, ClassicPreset } from \"rete\";\n\ntype Schemes = GetSchemes<\n  ClassicPreset.Node,\n  ClassicPreset.Connection<ClassicPreset.Node, ClassicPreset.Node>\n>;\n\nconst editor = new NodeEditor<Schemes>();\n```\n\n----------------------------------------\n\nTITLE: Importing Classic Data Structure Presets in Rete.js\nDESCRIPTION: Demonstrates how to import and destructure the classic preset components including Node, Connection, Socket, Input, Output, and Control classes from Rete.js core package.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/2.presets.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClassicPreset } from 'rete';\n\nconst { Node, Connection, Socket, Input, Output, Control } = ClassicPreset\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dataflow and Control Flow Engines in Rete.js\nDESCRIPTION: Initialize and configure both DataflowEngine and ControlFlowEngine instances with the NodeEditor. This setup defines which inputs and outputs are used for data flow versus control flow based on socket names.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/3.hybrid.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeEditor } from \"rete\";\nimport { DataflowEngine, ControlFlowEngine } from \"rete-engine\";\n\nconst editor = new NodeEditor<Schemes>();\nconst dataflow = new DataflowEngine<Schemes>(({ inputs, outputs }) => {\n  return {\n    inputs: () => Object.keys(inputs).filter((name) => name !== \"exec\"),\n    outputs: () => Object.keys(outputs).filter((name) => name !== \"exec\")\n  };\n});\nconst controlflow = new ControlFlowEngine<Schemes>(() => {\n  return {\n    inputs: () => [\"exec\"],\n    outputs: () => [\"exec\"]\n  };\n});\n\neditor.use(dataflow);\neditor.use(controlflow);\n```\n\n----------------------------------------\n\nTITLE: Implementing Control Flow Processing with Rete.js Engine in TypeScript\nDESCRIPTION: This snippet shows how to implement control flow processing using the ControlFlowEngine from rete-engine. It includes the creation of a Log node with an execute method, connecting the engine to the editor, and executing the flow.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/5.engine.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ControlFlowEngine } from 'rete-engine'\n\nconst { Node, Socket } = ClassicPreset\n\nclass Log extends Node<{ enter: Socket }, { out: Socket }, {}> {\n  constructor() {\n    // init ports\n  }\n\n  // mandatory method\n  execute(input: 'enter', forward: (output: 'out') => void) {\n    console.log('log something')\n    forward('out')\n  }\n}\n\n\nconst engine = new ControlFlowEngine<Schemes>()\n\neditor.use(engine)\n\nengine.execute(startNode.id)\n```\n\n----------------------------------------\n\nTITLE: Installing Rete Kit CLI Tool\nDESCRIPTION: Global installation command for the Rete Kit CLI tool using npm.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/20.development/3.rete-kit.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g rete-kit\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Position\nDESCRIPTION: Translating node position to prevent overlap\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/1.basic.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait area.translate(nodeB.id, { x: 270, y: 0 });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Node Editor Components with Lit\nDESCRIPTION: Example showcasing the implementation of custom nodes, sockets, and connections using Lit framework in Rete.js. The code demonstrates how to customize editor components and add a grid-like gradient background using JS and CSS.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/3.customization/5.lit.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n:example{id=\"rete-js-v2-lit-js-customization-gw7gzk\" module=\"/src/editor.ts\"}\n```\n\n----------------------------------------\n\nTITLE: Using ControlFlow and Dataflow Classes Directly in Rete.js Engine with TypeScript\nDESCRIPTION: This snippet shows how to use the ControlFlow and Dataflow classes directly for more precise control over graph processing. It demonstrates adding nodes to both control and dataflow instances with custom execution and data handling logic.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/5.engine.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ControlFlow, Dataflow } from 'rete-engine'\n\nconst control = new ControlFlow(editor)\nconst dataflow = new Dataflow(editor)\n\ncontrol.add(startNode, {\n  inputs: () => [],\n  outputs: () => ['exec'],\n  async execute(input, forward) {\n    const inputs = await dataflow.fetchInputs(startNode.id)\n\n    forward('exec')\n  }\n})\ndataflow.add(startNode, {\n  inputs: () => ['data'],\n  outputs: () => ['data'],\n  data(fetchInputs) {\n    const inputs = await fetchInputs()\n    const data = {\n      data: inputs.data[0] // forward input data (assuming there is only one input connection to port \"data\")\n    }\n\n    return data\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Node Editor with React Components\nDESCRIPTION: TypeScript module demonstrating custom node editor implementation with React.js components. Shows configuration of custom nodes, sockets, and connections with dynamic parameters. Includes grid-like gradient background implementation.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/3.customization/1.react.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/editor.ts\n// Code not provided in the input text\n```\n\n----------------------------------------\n\nTITLE: Installing Rete.js via NPM\nDESCRIPTION: Command to install Rete.js core and essential plugins for React implementation using NPM package manager.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/2.getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete rete-area-plugin rete-connection-plugin rete-render-utils rete-react-plugin react react-dom\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Connections in Rete.js with Custom Connection and AreaExtensions.selector\nDESCRIPTION: This code snippet demonstrates how to create selectable connections in a Rete.js node editor by implementing a custom connection component and integrating it with AreaExtensions.selector. It includes the setup of the editor with necessary plugins and the implementation of connection selection functionality.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/10.selectable-connections.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n:example{id=\"rete-js-v2-selectable-connections-cfetvh\" module=\"/src/editor.tsx\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Rete.js Editor with Svelte Integration\nDESCRIPTION: This code snippet sets up a basic Rete.js editor with Svelte integration. It creates an editor with two nodes, each having an input control. The nodes are connected, and their positions are manually set. The example uses rete-svelte-plugin for rendering and includes node selection functionality.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/1.basic/4.svelte.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEditor, BaseSchemes } from 'rete';\nimport { AreaPlugin, AreaExtensions } from 'rete-area-plugin';\nimport { SveltePlugin, Presets, SvelteArea2D } from 'rete-svelte-plugin';\n\ntype Schemes = BaseSchemes;\n\ntype AreaExtra = SvelteArea2D<Schemes>;\n\nexport async function createEditorSimple(container: HTMLElement) {\n  const editor = await createEditor<Schemes, AreaExtra>();\n  const area = new AreaPlugin<Schemes, AreaExtra>(container);\n  const render = new SveltePlugin<Schemes, AreaExtra>();\n\n  render.addPreset(Presets.classic.setup());\n\n  editor.use(area);\n  area.use(render);\n\n  const a = await editor.addNode({\n    id: 'a',\n    label: 'A',\n    inputs: { in: new ClassicPreset.Input(socket, 'Input') },\n    outputs: { out: new ClassicPreset.Output(socket, 'Output') }\n  });\n\n  const b = await editor.addNode({\n    id: 'b',\n    label: 'B',\n    inputs: { in: new ClassicPreset.Input(socket, 'Input value') },\n    outputs: { out: new ClassicPreset.Output(socket, 'Output') }\n  });\n\n  await editor.addConnection(new ClassicPreset.Connection(a, 'out', b, 'in'));\n\n  await area.translate(a.id, { x: 0, y: 0 });\n  await area.translate(b.id, { x: 270, y: 0 });\n\n  AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {\n    accumulating: AreaExtensions.accumulateOnCtrl()\n  });\n\n  AreaExtensions.simpleNodesOrder(area);\n\n  editor.addPipe(context => {\n    if (context.type === 'nodecreated') {\n      console.log('node created', context.data);\n    }\n    return context;\n  });\n\n  return {\n    destroy: () => area.destroy()\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dock Menu in Rete.js\nDESCRIPTION: Demonstrates how to set up and customize a dock menu in a Rete.js node editor. The dock menu provides a list of nodes that users can add to the editor through clicking or dragging. The menu placement and node properties can be customized.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/12.dock.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDock } from \"rete-dock-plugin\";\n\n// dock configuration\narea.use(createDock({\n  container: document.querySelector(\".dock\"),\n  plugins: [arrange, connection, reactRender],\n  nodes: [createAddNode, createNumberNode]\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Node for Nested Graph Processing in TypeScript\nDESCRIPTION: Defines the ModuleNode class that serves as a portal to a nested graph. It can dynamically load a module by path, synchronize its ports with the Input/Output nodes in the nested graph, and execute the nested graph when data is requested.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.modules.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ModuleNode {\n  module: null | Module<Schemes> = null;\n\n  constructor(path: string) {\n    super(\"Module\");\n\n    this.setModule(path);\n  }\n\n  public async setModule(path: string) {\n    this.module = findModule(path);\n\n    await removeNodeConnections(this.id);\n\n    if (this.module) {\n      const { inputs, outputs } = this.module.getPorts();\n\n      syncPorts(this, inputs, outputs);\n    } else {\n      syncPorts(this, [], []);\n    }\n  }\n\n  async data(inputs: Record<string, any>) {\n    const data = await this.module?.exec(inputs);\n\n    return data || {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Interaction in Rete.js\nDESCRIPTION: Sets up the ConnectionPlugin which enables users to create and delete connections through interaction, using the classic preset setup.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/3.editor.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BidirectFlow, ConnectionPlugin, Presets as ConnectionPresets } from 'rete-connection-plugin'\n\nconst connection = new ConnectionPlugin<Schemes, AreaExtra>()\n\nconnection.addPreset(ConnectionPresets.classic.setup())\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Rete.js Editor Using Lit Integration\nDESCRIPTION: This code demonstrates how to create a basic Rete.js editor with two connected nodes using the Lit renderer plugin. The editor features nodes with input fields, manual positioning, and selection capability that brings nodes to the front when selected.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/1.basic/5.lit.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeEditor, GetSchemes, ClassicPreset } from 'rete'\nimport { AreaPlugin, AreaExtensions } from 'rete-area-plugin'\nimport { LitPlugin, Presets as LitPresets } from 'rete-lit-plugin'\n\ntype Schemes = GetSchemes<\n  ClassicPreset.Node,\n  ClassicPreset.Connection<ClassicPreset.Node, ClassicPreset.Node>\n>\n\nconst socket = new ClassicPreset.Socket('socket')\n\nasync function createEditor(container: HTMLElement) {\n  const editor = new NodeEditor<Schemes>()\n  const area = new AreaPlugin<Schemes>(container)\n  const connection = new ClassicPreset.Connection<\n    ClassicPreset.Node,\n    ClassicPreset.Node\n  >()\n  const litRender = new LitPlugin<Schemes>()\n\n  litRender.addPreset(LitPresets.classic.setup())\n\n  editor.use(area)\n  area.use(litRender)\n\n  AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {\n    accumulating: AreaExtensions.accumulateOnCtrl()\n  })\n\n  const a = new ClassicPreset.Node('A')\n  a.addControl(\n    'a',\n    new ClassicPreset.InputControl('text', { initial: 'hello' })\n  )\n  a.addOutput('a', new ClassicPreset.Output(socket))\n\n  const b = new ClassicPreset.Node('B')\n  b.addControl(\n    'b',\n    new ClassicPreset.InputControl('text', { initial: 'world' })\n  )\n  b.addInput('b', new ClassicPreset.Input(socket))\n\n  await editor.addNode(a)\n  await editor.addNode(b)\n  await editor.addConnection(new ClassicPreset.Connection(a, 'a', b, 'b'))\n\n  await area.translate(a.id, { x: 0, y: 0 })\n  await area.translate(b.id, { x: 300, y: 0 })\n\n  AreaExtensions.simpleNodesOrder(area)\n\n  // prevent zooming on double click\n  area.container.addEventListener('dblclick', e => e.stopPropagation())\n\n  return {\n    destroy: () => {\n      area.destroy()\n    }\n  }\n}\n\nexport default createEditor\n```\n\n----------------------------------------\n\nTITLE: Adding Node Selection Capability\nDESCRIPTION: Implementing selectable nodes functionality with ctrl-click accumulation\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/1.basic.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nAreaExtensions.selectableNodes(area, AreaExtensions.selector(), {\n  accumulating: AreaExtensions.accumulateOnCtrl()\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Control Flow in Rete.js with TypeScript\nDESCRIPTION: Demonstrates how to configure nodes with execute methods that dynamically control flow through output ports. The engine.execute method initiates the execution from a specified starting node, with subsequent nodes executed based on the control flow logic.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/7.processing/15.control-flow.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClassicPreset as Classic, GetSchemes, NodeEditor } from \"rete\"\nimport { AreaPlugin, AreaExtensions } from \"rete-area-plugin\"\nimport { ConnectionPlugin } from \"rete-connection-plugin\"\nimport { EnginePlugin, Engine } from \"rete-engine\"\n\ntype Node = NumberNode | AddNode\ntype Conn = Connection<Node, Node>\ntype Schemes = GetSchemes<Node, Conn>\n\nclass Connection<A extends Node, B extends Node> extends Classic.Connection<A, B> { }\n\nclass NumberNode extends Classic.Node {\n  width = 180\n  height = 120\n\n  constructor(initial: number) {\n    super(\"Number\")\n    this.addOutput(\"value\", new Classic.Output(socket, \"Number\"))\n    this.addControl(\n      \"value\",\n      new Classic.InputControl(\"number\", { initial })\n    )\n  }\n\n  async execute() {\n    const value = (this.controls[\"value\"] as Classic.InputControl<\"number\">).value\n\n    return { value }\n  }\n\n  data() {\n    return {\n      value: (this.controls[\"value\"] as Classic.InputControl<\"number\">).value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NoDrag Component for Interactive Elements\nDESCRIPTION: Example showing how to use the NoDrag component to prevent the area from intercepting events on interactive elements.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Drag } from \"rete-react-plugin\";\n\n<Drag.NoDrag>\n  <button>\n    {props.data.label}\n  </button>\n</Drag.NoDrag>\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Communication in TypeScript\nDESCRIPTION: Demonstrates creation of parent and child scopes with signal logging functionality. Shows how signals propagate between scopes and how to set up basic pipes for signal handling.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/1.plugin-system.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scope } from 'rete';\n\nconst parentScope = new Scope<number>('parent'); // number is produced type\nconst childScope = new Scope<string, [number]>('child'); // [number] is expected types of parent chain\n\nparentScope.addPipe((context) => { // add pipe to parent scope\n  console.log('parent', context); // number\n\n  return context;\n});\n\nchildScope.addPipe((context) => { // add pipe to child scope\n  console.log('child', context); // string | number\n\n  return context;\n});\n\nparentScope.use(childScope); // forward all signals to child scope\n\nconst returnedNumber = await parentScope.emit(1); // can emit number\nconst returnedString = await childScope.emit('a'); // can emit string\n```\n\n----------------------------------------\n\nTITLE: Installing Rete React Plugin Dependencies\nDESCRIPTION: Command to install the core dependencies required for using the rete-react-plugin, including the plugin itself, render utilities, and styled-components.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-react-plugin rete-render-utils styled-components\n```\n\n----------------------------------------\n\nTITLE: Handling Element Selection and Translation in Rete.js\nDESCRIPTION: This code demonstrates how to mark an element as picked for interaction and how to translate selected elements. It ensures that only the directly interacted element triggers movement of other selected elements.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/0.index.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nselector.pick({ id, label })\n\nif (selector.isPicked({ id, label })) selector.translate(dx, dy)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Node Editor with Angular in Rete.js\nDESCRIPTION: This TypeScript module exports an Angular component that creates a customized Rete.js node editor with custom nodes, sockets, and connections. It includes a gradient background and demonstrates how to adapt editor elements to specific use cases.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/3.customization/3.angular.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core'\nimport { NodeEditor, GetSchemes, ClassicPreset } from 'rete'\nimport { AreaPlugin, AreaExtensions } from 'rete-area-plugin'\nimport {\n  ConnectionPlugin,\n  Presets as ConnectionPresets\n} from 'rete-connection-plugin'\nimport { AngularPlugin, Presets, AngularArea2D } from 'rete-angular-plugin/16'\n\ntype Schemes = GetSchemes<\n  ClassicPreset.Node,\n  ClassicPreset.Connection<ClassicPreset.Node, ClassicPreset.Node>\n>\ntype AreaExtra = AngularArea2D<Schemes>\n\n@Component({\n  selector: 'rete',\n  standalone: true,\n  imports: [Presets.classic.setup()],\n  template: '<div #rete class=\"rete\"></div>'\n})\nexport class ReteComponent implements OnInit {\n  @ViewChild('rete') container!: ElementRef\n\n  async ngOnInit() {\n    const socket = new ClassicPreset.Socket('socket')\n    const editor = new NodeEditor<Schemes>()\n    const area = new AreaPlugin<Schemes, AreaExtra>(container.nativeElement)\n    const connection = new ConnectionPlugin<Schemes, AreaExtra>()\n    const render = new AngularPlugin<Schemes, AreaExtra>({ area })\n\n    AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {\n      accumulating: AreaExtensions.accumulateOnCtrl()\n    })\n\n    render.addPreset(Presets.classic.setup())\n\n    connection.addPreset(ConnectionPresets.classic.setup())\n\n    // background with grid\n    const background = 'radial-gradient(#04619f 2px, transparent 0)'\n    const size = '40px 40px'\n    const position = '-20px -20px'\n    const backgroundPosition = `${position}, ${position}, ${position}, ${position}`\n    const backgroundSize = `${size}, ${size}, ${size}, ${size}`\n\n    container.nativeElement.style.background = background\n    container.nativeElement.style.backgroundSize = backgroundSize\n    container.nativeElement.style.backgroundPosition = backgroundPosition\n\n    editor.use(area)\n    area.use(connection)\n    area.use(render)\n\n    AreaExtensions.simpleNodesOrder(area)\n    AreaExtensions.showInputControl(area)\n\n    // Custom connection\n    connection.addPreset(ConnectionPresets.classic.setup({\n      create({ x, y }) {\n        return {\n          element: document.createElement('div'),\n          start: { x, y },\n          end: { x, y }\n        }\n      },\n      update(element, { start, end }) {\n        // create line block between the points\n        const dx = end.x - start.x\n        const dy = end.y - start.y\n        const angle = Math.atan2(dy, dx)\n        const distance = Math.sqrt(dx * dx + dy * dy)\n\n        element.style.position = 'absolute'\n        element.style.width = distance + 'px'\n        element.style.transformOrigin = '0 0'\n        element.style.transform = `rotate(${angle}rad)`\n        element.style.left = start.x + 'px'\n        element.style.top = start.y + 'px'\n\n        // style\n        element.style.background = 'linear-gradient(to right, coral, yellow)'\n        element.style.opacity = '0.7'\n        element.style.height = '4px'\n      }\n    }))\n\n    // Custom node\n    render.addPreset(Presets.classic.setup({\n      // customize the appearance of ClassicPreset.Node\n      node(data) {\n        const backgroundColor = data.selected\n          ? 'linear-gradient(to right, #bbf, #aaf)'\n          : 'linear-gradient(to right, #999, #777)'\n\n        data.payload.title = 'Customize it!'\n\n        data.element.style.borderRadius = '10px'\n        data.element.style.backgroundColor = backgroundColor\n\n        return data\n      },\n      // customize the appearance of socket\n      socket({ payload }) {\n        const element = document.createElement('div')\n\n        element.style.width = '24px'\n        element.style.height = '24px'\n        element.style.borderRadius = '12px'\n        element.style.background = 'linear-gradient(to right, #ffb01e, #ff1e1e)'\n        element.style.cursor = 'crosshair'\n\n        return { element }\n      }\n    }))\n\n    const a = new ClassicPreset.Node('A')\n    a.addOutput('a', new ClassicPreset.Output(socket))\n    a.addInput('a', new ClassicPreset.Input(socket))\n    await editor.addNode(a)\n\n    const b = new ClassicPreset.Node('B')\n    b.addOutput('a', new ClassicPreset.Output(socket))\n    b.addInput('a', new ClassicPreset.Input(socket))\n    await editor.addNode(b)\n\n    await area.translate(a.id, { x: 115, y: 138 })\n    await area.translate(b.id, { x: 446, y: 295 })\n\n    await editor.addConnection(new ClassicPreset.Connection(a, 'a', b, 'a'))\n\n    AreaExtensions.zoomAt(area, editor.getNodes())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting the Dock Plugin with Classic Preset in Rete.js\nDESCRIPTION: Code to initialize the DockPlugin with a classic preset that enables adding nodes to the editor by dragging their previews. The setup includes configuration for area, size, and scale properties.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/11.dock-menu.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DockPlugin, DockPresets } from \"rete-dock-plugin\";\n\nconst dock = new DockPlugin<Schemes>();\n\ndock.addPreset(DockPresets.classic.setup({ area, size: 100, scale: 0.6 }));\n\narea.use(dock);\n```\n\n----------------------------------------\n\nTITLE: Executing Dataflow Processing and Managing Cache\nDESCRIPTION: Shows how to fetch computed results from nodes and reset the cache when input values change to ensure fresh calculations.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/1.dataflow.md#2025-04-20_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst result = await engine.fetch(sum.id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Rete.js Editor with Angular Integration\nDESCRIPTION: This code snippet initializes a Rete.js editor with Angular integration. It sets up the editor, creates nodes with input controls, establishes connections, and configures the rendering using rete-angular-plugin.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/1.basic/3.angular.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEditor, NodeEditor } from 'rete'\nimport { AreaPlugin, AreaExtensions } from 'rete-area-plugin'\nimport { ConnectionPlugin, Presets as ConnectionPresets } from 'rete-connection-plugin'\n\nimport { AngularPlugin, AngularArea2D, Presets as AngularPresets } from 'rete-angular-plugin'\n\nimport { DataflowEngine } from 'rete-engine'\n\ntype Schemes = {\n  node: { inputs: { input: number }, outputs: { output: number } }\n  conn: { data: { text: string } }\n}\ntype AreaExtra = AngularArea2D<Schemes>\n\nexport async function createEditorAngular(container: HTMLElement) {\n  const socket = AngularPresets.classic.socket\n\n  const editor = await createEditor<Schemes, AreaExtra>()\n  const area = new AreaPlugin<Schemes, AreaExtra>(container)\n  const connection = new ConnectionPlugin<Schemes, AreaExtra>()\n  const render = new AngularPlugin<Schemes, AreaExtra>({\n    inports: AngularPresets.classic.inports,\n    outports: AngularPresets.classic.outports,\n    controls: AngularPresets.classic.controls\n  })\n  const engine = new DataflowEngine<Schemes>()\n\n  AreaExtensions.selectableNodes(area, AngularPresets.classic.selectable)\n\n  editor.use(area)\n  area.use(connection)\n  area.use(render)\n\n  AreaExtensions.simpleNodesOrder(area)\n\n  editor.addPipe(context => {\n    if (context.type === 'connectioncreate') {\n      console.log('connection created', context.data)\n    }\n    return context\n  })\n\n  connection.addPreset(ConnectionPresets.classic.setup())\n\n  const a = await editor.addNode({\n    id: 'a',\n    label: 'A',\n    inputs: { input: {} },\n    outputs: { output: {} },\n    position: [0, 0]\n  })\n  const b = await editor.addNode({\n    id: 'b',\n    label: 'B',\n    inputs: { input: {} },\n    outputs: { output: {} },\n    position: [300, 0]\n  })\n\n  await editor.addConnection({\n    source: a.id,\n    sourceOutput: 'output',\n    target: b.id,\n    targetInput: 'input'\n  })\n\n  await area.translate(a.id, { x: 0, y: 0 })\n  await area.translate(b.id, { x: 300, y: 0 })\n\n  AreaExtensions.zoomAt(area, editor.getNodes())\n\n  return {\n    destroy: () => area.destroy()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useRete Hook for React Applications\nDESCRIPTION: React component example using the useRete hook to bind a Rete editor to a DOM element, simplifying editor initialization and cleanup.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRete } from 'rete-react-plugin';\n\nfunction App() {\n  const [ref, editor] = useRete(createEditor)\n\n  return <div ref={ref} className=\"rete\"></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dataflow Processing with Rete.js Engine in TypeScript\nDESCRIPTION: Creates a data processing pipeline where data flows from left to right through nodes using rete-engine. Each node has a data method that processes incoming data from input sockets and provides output that can be fetched using the engine.fetch method.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/7.processing/14.dataflow.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoot, RefObject, useEffect, useRef, useState } from \"react\";\nimport { createEditor, Editor } from \"./editor\";\n\nfunction App() {\n  const [loaded, setLoaded] = useState(false);\n  const host = useRef<HTMLElement>(null);\n  const editorRef = useRef<Editor>();\n\n  useEffect(() => {\n    if (host.current && !editorRef.current) {\n      const editor = createEditor(host.current);\n      \n      editorRef.current = editor;\n      setLoaded(true);\n      \n      return () => editor.destroy();\n    }\n  }, []);\n\n  return (\n    <div className=\"editor\">\n      <div ref={host as RefObject<HTMLDivElement>} className=\"container\"></div>\n      {loaded && <Controls editor={editorRef.current as Editor} />}\n    </div>\n  );\n}\n\nfunction Controls(props: { editor: Editor }) {\n  const { editor } = props;\n  const [outputs, setOutputs] = useState<any>({});\n  const [error, setError] = useState<string>();\n\n  return (\n    <div className=\"controls\">\n      <div className=\"panel\">\n        <button\n          className=\"run\"\n          onClick={async () => {\n            try {\n              const nodes = editor.getNodes();\n              const output = nodes[nodes.length - 1];\n\n              if (!output) {\n                setError(\"Error: no nodes\");\n                return;\n              }\n              const res = await editor.process(output.id);\n\n              setOutputs(res);\n              setError(undefined);\n            } catch (e) {\n              const msg = (e as Error).message;\n\n              setError(`Error: ${msg}`);\n              setOutputs({});\n            }\n          }}\n        >\n          ▶\n        </button>\n        <div className=\"params\">\n          <div className=\"param\">\n            <label>Output</label>\n            <div className=\"output\">\n              {error ? (\n                <span className=\"error\">{error}</span>\n              ) : (\n                <span>{JSON.stringify(outputs)}</span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst root = createRoot(document.getElementById(\"root\") as HTMLElement);\n\nroot.render(<App />);\n\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installation of core Rete.js packages and React dependencies using npm\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/1.basic.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete rete-area-plugin rete-connection-plugin rete-react-plugin rete-render-utils styled-components react@18 react-dom@18\n```\n\n----------------------------------------\n\nTITLE: Connecting React Plugin with Rete.js Area\nDESCRIPTION: TypeScript code to initialize and connect the React plugin with a Rete.js area, including setting up the classic preset for rendering.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoot } from \"react-dom/client\";\nimport { AreaPlugin } from \"rete-area-plugin\";\nimport { ReactPlugin, Presets, ReactArea2D } from \"rete-react-plugin\";\n\ntype AreaExtra = ReactArea2D<Schemes>;\n\n// ....\n\nconst render = new ReactPlugin<Schemes, AreaExtra>({ createRoot });\n\nrender.addPreset(Presets.classic.setup());\n\narea.use(render);\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Validation in Rete.js with TypeScript\nDESCRIPTION: This code demonstrates how to validate node creation by preventing an EndNode from being added until a BeginNode exists in the editor. It uses the editor's pipe system to intercept 'nodecreate' messages and conditionally block them.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/9.validation.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\neditor.addPipe(context => {\n  if (context.type === 'nodecreate') {\n    if (context.data instanceof EndNode) {\n      const hasBeginNode = editor.getNodes().some(n => n instanceof BeginNode)\n\n      if (!hasBeginNode) {\n        alert('cannot add EndNode until BeginNode is added')\n        return\n      }\n    }\n  }\n  return context\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Control to a Rete.js Node\nDESCRIPTION: TypeScript code demonstrating how to add a control to a Rete.js node using ClassicPreset.InputControl.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnode.addControl('my-control', new ClassicPreset.InputControl(\"number\", {\n  initial: 0,\n  readonly: false,\n  change(value) { }\n}))\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Context Menu Preset\nDESCRIPTION: Advanced example defining a custom menu structure with custom handlers and nested submenus, offering greater flexibility than the built-in classic preset.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.context-menu.md#2025-04-20_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst contextMenu = new ContextMenuPlugin<Schemes>({\n  items(context, plugin) {\n    if (context === 'root') {\n      return {\n        searchBar: false,\n        list: [\n          { label: 'Custom', key: '1', handler: () => console.log('Custom') },\n          {\n            label: 'Collection', key: '1', handler: () => null,\n            subitems: [\n              { label: 'Subitem', key: '1', handler: () => console.log('Subitem') }\n            ]\n          }\n        ]\n      }\n    }\n    return {\n      searchBar: false,\n      list: []\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Node\nDESCRIPTION: Creation of a node with a control and output port using ClassicPreset components\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/1.basic.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst socket = new ClassicPreset.Socket(\"socket\");\n\nconst nodeA = new ClassicPreset.Node(\"A\");\nnodeA.addControl(\"a\", new ClassicPreset.InputControl(\"text\", {}));\nnodeA.addOutput(\"a\", new ClassicPreset.Output(socket));\nawait editor.addNode(nodeA);\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Arrangement with Elk.js in Rete.js\nDESCRIPTION: This example demonstrates how to set up automated node arrangement in a Rete.js project using the Elk.js library. It shows the configuration of the arrangement plugin that calculates optimal node positions based on their connections and applies these positions with animations.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/8.arrange.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n:example{id=\"rete-js-v2-arrange-layout-nodes-ri75lp\" module=\"/src/editor.ts\"}\n```\n\n----------------------------------------\n\nTITLE: Combining Dataflow and Control Flow in Rete.js Engine with TypeScript\nDESCRIPTION: This snippet demonstrates how to combine dataflow and control flow approaches in Rete.js engine. It shows the creation of separate engines for control flow and dataflow, filtering ports based on their names.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/5.engine.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst controlflow = new ControlFlowEngine<Schemes>(node => {\n  return {\n    inputs: () => ['exec'],\n    outputs: () => ['exec']\n  }\n})\nconst dataflow = new DataflowEngine<Schemes>(({ inputs, outputs }) => {\n  return {\n    inputs: () => Object.keys(inputs).filter(name => name !== 'exec'),\n    outputs: () => Object.keys(outputs).filter(name => name !== 'exec')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Context Menu with Styled Components\nDESCRIPTION: Example showing how to customize the context menu components using styled-components to modify their appearance.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport styled from \"styled-components\";\n\nconst { Menu, Common, Search, Item, Subitems } = Presets.contextMenu\n\nconst CustomMenu = styled(Menu)`\n  width: 320px;\n`\nconst CustomItem = styled(Item)`\n  background: grey;\n`\n\nrender.addPreset(Presets.contextMenu.setup({\n  customize: {\n    main: () => CustomMenu,\n    item: () => CustomItem,\n    common: () => Common,\n    search: () => Search,\n    subitems: () => Subitems\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Controls with Lit in Rete.js\nDESCRIPTION: This code demonstrates the implementation of a Rete.js editor with Lit renderer, featuring both built-in input controls and custom controls. It shows how to create a button control that sets random values and a radial progress indicator that synchronizes with an input field.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/2.controls/5.lit.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeEditor, GetSchemes, ClassicPreset } from 'rete';\nimport { Area } from 'rete-area-plugin';\nimport { LitPlugin, Presets as LitPresets } from 'rete-lit-plugin';\nimport { ContextMenuPlugin, Presets as ContextMenuPresets } from 'rete-context-menu-plugin';\nimport { DataflowEngine } from 'rete-engine';\nimport { css, html, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\ntype Schemes = GetSchemes<ClassicPreset.Node, ClassicPreset.Connection<ClassicPreset.Node, ClassicPreset.Node>>;\ntype AreaExtra = Area<Schemes>;\n\n@customElement('radial-progress')\nclass RadialProgress extends LitElement {\n  @property() progress = 0;\n\n  static styles = css`\n    :host {\n      display: inline-block;\n      width: 50px;\n      height: 50px;\n    }\n    svg {\n      transform: rotate(-90deg);\n    }\n    circle {\n      stroke-dashoffset: 0;\n      stroke-width: 10%;\n      fill: none;\n    }\n    .bg {\n      stroke: #dcdcdc;\n    }\n    .progress {\n      stroke: #0fa00a;\n      stroke-dasharray: 100 100;\n      stroke-dashoffset: calc(100 - var(--progress));\n      transition: stroke-dashoffset 0.3s ease;\n    }\n    text {\n      fill: #000;\n      font-size: 1.2rem;\n      text-anchor: middle;\n      dominant-baseline: middle;\n    }\n  `;\n\n  render() {\n    return html`\n      <svg style=\"--progress: ${this.progress}\" viewBox=\"0 0 100 100\">\n        <circle class=\"bg\" r=\"45\" cx=\"50\" cy=\"50\" />\n        <circle class=\"progress\" r=\"45\" cx=\"50\" cy=\"50\" />\n      </svg>\n    `;\n  }\n}\n\nclass ButtonControl extends ClassicPreset.Control {\n  label = '';\n  private clicked?: (control: this) => void;\n\n  constructor(\n    label: string,\n    public readonly onClick: () => void\n  ) {\n    super();\n    this.label = label;\n  }\n\n  setValue(value: string): void {}\n}\n\nclass ProgressControl extends ClassicPreset.Control {\n  public progress: number = 0;\n\n  setValue(progress: number): void {\n    if (progress === this.progress) return;\n    this.progress = progress;\n\n    if (this.updated) this.updated();\n  }\n}\n\nfunction createEditor() {\n  const container = document.querySelector('#rete') as HTMLElement;\n  const editor = new NodeEditor<Schemes>();\n  const area = new Area<Schemes>();\n  const dataflow = new DataflowEngine<Schemes>();\n  const litRender = new LitPlugin<Schemes, AreaExtra>();\n  const contextMenu = new ContextMenuPlugin<Schemes>({});\n  const InputControl = ClassicPreset.Control;\n\n  class NumberNode extends ClassicPreset.Node {\n    inputControl: ClassicPreset.Control;\n    buttonControl: ButtonControl;\n    progressControl: ProgressControl;\n\n    constructor() {\n      super('Number');\n      this.inputControl = new InputControl('number', { initial: 0 });\n      this.buttonControl = new ButtonControl('Random', () => {\n        const value = Math.random().toFixed(2);\n        this.inputControl.setValue(value);\n        this.progressControl.setValue(Number(value) * 100);\n      });\n      this.progressControl = new ProgressControl();\n\n      this.addOutput('value', new ClassicPreset.Output(ClassicPreset.Socket.Float));\n      this.addControl('input', this.inputControl);\n      this.addControl('button', this.buttonControl);\n      this.addControl('progress', this.progressControl);\n\n      this.inputControl.on('change', (value: any) => {\n        this.progressControl.setValue(Number(value) * 100);\n      });\n    }\n\n    data() {\n      const value = Number(this.inputControl.value);\n      return {\n        value\n      };\n    }\n  }\n\n  class DisplayNode extends ClassicPreset.Node {\n    inputControl: ClassicPreset.Control;\n\n    constructor() {\n      super('Display');\n      this.inputControl = new InputControl('display', { readonly: true });\n\n      this.addInput('value', new ClassicPreset.Input(ClassicPreset.Socket.Float));\n      this.addControl('value', this.inputControl);\n    }\n  }\n\n  litRender.addPreset(LitPresets.classic.setup({\n    customize: {\n      control(data) {\n        if (data.payload instanceof ButtonControl) {\n          return {\n            render: () => html`\n              <button @click=${data.payload.onClick}>\n                ${data.payload.label}\n              </button>\n            `,\n            unmount: () => {}\n          }\n        } else if (data.payload instanceof ProgressControl) {\n          return {\n            render: () => html`\n              <radial-progress .progress=${data.payload.progress}></radial-progress>\n            `,\n            unmount: () => {}\n          }\n        }\n      }\n    }\n  }));\n\n  contextMenu.addPreset(ContextMenuPresets.classic.setup());\n  area.use(litRender);\n  area.use(contextMenu);\n  editor.use(dataflow);\n\n  editor.addPipe((context) => {\n    dataflow.createNode(context);\n    return context;\n  });\n\n  const number = new NumberNode();\n  const display = new DisplayNode();\n\n  editor.addNode(number);\n  editor.addNode(display);\n\n  editor.addConnection(new ClassicPreset.Connection(number, 'value', display, 'value'));\n\n  area.translate(number, { x: 50, y: 150 });\n  area.translate(display, { x: 350, y: 150 });\n\n  area.mount(container);\n\n  return {\n    destroy: () => area.destroy()\n  };\n}\n\nexport default createEditor;\n```\n\n----------------------------------------\n\nTITLE: Setting up Interactive Connections\nDESCRIPTION: Adding connection plugin for interactive node connections\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/1.basic.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectionPlugin, Presets as ConnectionPresets } from \"rete-connection-plugin\"\n\nconst connection = new ConnectionPlugin<Schemes, AreaExtra>();\n\nconnection.addPreset(ConnectionPresets.classic.setup())\n\narea.use(connection);\n```\n\n----------------------------------------\n\nTITLE: Combining React and Vue Rendering Plugins\nDESCRIPTION: Shows how to combine multiple rendering frameworks (React.js and Vue.js) in the same application, with conditional rendering based on node types. Includes TypeScript support and framework-specific configurations.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/6.integration.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReactArea2D, ReactPlugin, Presets as ReactPresets } from 'rete-react-plugin'\nimport { VueArea2D, VuePlugin, Presets as VuePresets } from 'rete-vue-plugin'\n\ntype AreaExtra =\n  | ReactArea2D<Schemes>\n  | VueArea2D<Schemes>\n\nconst reactPlugin = new ReactPlugin<Schemes, AreaExtra>()\nconst vuePlugin = new VuePlugin<Schemes, AreaExtra>()\n\nreactPlugin.addPreset(ReactPresets.classic.setup({ customize: {\n  node(data) {\n    if (data.payload instanceof AddNode) return null // prevent rendering of AddNode by React.js\n    return ReactPresets.classic.Node\n  }\n} }))\nvuePlugin.addPreset(VuePresets.classic.setup({ customize: {\n  node() {\n    return VuePresets.classic.Node // render all nodes that weren't rendered by previously used render plugin\n  }\n} }))\n\n// order matters\narea.use(reactPlugin)\narea.use(vuePlugin)\n```\n\n----------------------------------------\n\nTITLE: Translating the Editor Area in Rete.js\nDESCRIPTION: Code examples for changing the position of the editor area. Includes methods for absolute positioning, relative positioning, and position changes with zoom factor consideration.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait area.area.translate(100, 20)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { x, y } = area.area.transform\nawait area.area.translate(x + 100, y + 20)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { k } = area.area.transform\n\nawait area.area.translate(100 * k, 20 * k)\n```\n\n----------------------------------------\n\nTITLE: Customizing Sockets in Rete.js\nDESCRIPTION: TypeScript code showing how to customize sockets in Rete.js using a custom Vue.js component.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport CustomSocket from './CustomSocket.vue'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    socket() {\n      return CustomSocket\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Type Safety in Plugin System\nDESCRIPTION: Demonstrates TypeScript's static typing for ensuring signal compatibility between parent and child plugins.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/1.plugin-system.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scope } from 'rete';\n\nconst parentScope = new Scope<number>('parent');\nconst childScope = new Scope<string, [number | boolean]>('child');\n\nparentScope.use(childScope); // Type 'boolean' is not assignable to type 'string | number'.ts(2345)\n```\n\n----------------------------------------\n\nTITLE: Defining Log Node Class in TypeScript\nDESCRIPTION: Creates a Log node class that logs a message and passes control to outgoing nodes via the 'exec' port. It includes input and output sockets and an execute method.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/2.control-flow.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst socket = new ClassicPreset.Socket(\"socket\");\n\nclass Log extends ClassicPreset.Node {\n  constructor(public message: string) {\n    super(\"Log\");\n\n    this.addInput(\"exec\", new ClassicPreset.Input(socket, \"Exec\", true));\n    this.addOutput(\"exec\", new ClassicPreset.Output(socket, \"Exec\"));\n  }\n\n  execute(input: \"exec\", forward: (output: \"exec\") => void) {\n    console.log(this.message);\n    forward(\"exec\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Rete.js Editor with Comments Plugin in TypeScript\nDESCRIPTION: This code snippet sets up a Rete.js editor with the comments plugin. It creates an area plugin, initializes the editor with necessary plugins including comments, and adds sample nodes and comments to demonstrate functionality.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/17.comments.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoot, useRete } from 'rete-react-plugin'\nimport { AreaPlugin, Presets as AreaPresets } from 'rete-area-plugin'\nimport { CommentPlugin, Presets as CommentPresets } from 'rete-comment-plugin'\n\nconst socket = new Rete.Socket('socket')\n\nclass Node extends Rete.Node {\n  constructor(socket: Rete.Socket) {\n    super('Node')\n    this.addInput('port', new Rete.Input(socket))\n    this.addOutput('port', new Rete.Output(socket))\n  }\n}\n\nexport async function createEditor(container: HTMLElement) {\n  const editor = new Rete.NodeEditor()\n  const area = new AreaPlugin(container)\n  const comment = new CommentPlugin()\n\n  AreaPresets.setup(area)\n  CommentPresets.classic.setup(comment)\n\n  editor.use(area)\n  area.use(comment)\n\n  const node1 = new Node(socket)\n  const node2 = new Node(socket)\n  const node3 = new Node(socket)\n\n  node1.position = { x: 0, y: 200 }\n  node2.position = { x: 300, y: 0 }\n  node3.position = { x: 300, y: 200 }\n\n  await editor.addNode(node1)\n  await editor.addNode(node2)\n  await editor.addNode(node3)\n\n  await editor.addConnection(new Rete.Connection(node1.outputs.get('port'), node3.inputs.get('port')))\n\n  await comment.addFrame('Frame title', { x: -50, y: -50, width: 550, height: 420 })\n  await comment.addInline(node2, 'Inline comment')\n\n  return {\n    destroy: () => area.destroy()\n  }\n}\n\nexport function App() {\n  const [container, setContainer] = useState(null)\n  const render = useCallback((el: HTMLElement) => setContainer(el), [])\n\n  useRete(container, createEditor)\n\n  return <div ref={render} style={{ height: '100%', width: '100%' }} />\n}\n\ncreateRoot(App)\n```\n\n----------------------------------------\n\nTITLE: Defining Delay Node and Connection Classes in TypeScript\nDESCRIPTION: Creates a Delay node class that passes control after a specified timeout, and defines Connection and type definitions for nodes and connections.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/2.control-flow.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Delay extends ClassicPreset.Node {\n  constructor(private seconds: number) {\n    super(\"Delay\");\n    this.addInput(\"exec\", new ClassicPreset.Input(socket, \"Exec\", true));\n    this.addOutput(\"exec\", new ClassicPreset.Output(socket, \"Exec\"));\n  }\n\n  execute(input: \"exec\" | undefined, forward: (output: \"exec\") => void) {\n    setTimeout(() => forward(\"exec\"), seconds * 1000)\n  }\n}\n\nclass Connection<A extends NodeProps, B extends NodeProps> extends ClassicPreset.Connection<A, B> {}\n\ntype NodeProps = Start | Log | Delay;\ntype ConnProps =\n  | Connection<Start, Log>\n  | Connection<Delay, Log>\n  | Connection<Log, Delay>\n  | Connection<Log, Log>\n  | Connection<Delay, Delay>;\ntype Schemes = GetSchemes<NodeProps, ConnProps>;\n```\n\n----------------------------------------\n\nTITLE: Configuring React Rendering Presets in Rete.js\nDESCRIPTION: Shows how to set up React-specific rendering presets for classic nodes and context menu using the rete-react-plugin. Requires createRoot implementation for React integration.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/2.presets.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReactPlugin, Presets as ReactPresets } from 'rete-react-plugin'\n\nconst reactPlugin = new ReactPlugin<Schemes, AreaExtra>({ createRoot })\n\nreactPlugin.addPreset(ReactPresets.classic.setup())\nreactPlugin.addPreset(ReactPresets.contextMenu.setup())\n```\n\n----------------------------------------\n\nTITLE: Connecting the Context Menu Plugin\nDESCRIPTION: Implementation of the context menu plugin with classic preset, defining available node types and handlers for creating them when selected from the menu.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.context-menu.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { ContextMenuExtra, ContextMenuPlugin, Presets as ContextMenuPresets } from \"rete-context-menu-plugin\";\n\ntype AreaExtra = ReactArea2D<Schemes> | ContextMenuExtra;\n\nconst contextMenu = new ContextMenuPlugin<Schemes>({\n  items: ContextMenuPresets.classic.setup([\n    [\"NodeA\", () => new NodeA(socket)],\n    [\"NodeB\", () => new NodeB(socket)]\n  ])\n});\n\narea.use(contextMenu);\n```\n\n----------------------------------------\n\nTITLE: Custom Socket Position Calculation in TypeScript\nDESCRIPTION: Demonstrates how to implement a custom socket position calculation by extending BaseSocketPosition.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.connections.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSocketPosition } from 'rete-render-utils'\n\ntype Position = { x: number, y: number }\ntype Side = 'input' | 'output'\n\nexport class ComputedSocketPosition<S extends Schemes, K> extends BaseSocketPosition<S, K> {\n  async calculatePosition(nodeId: string, side: Side, key: string): Promise<Position | null> {\n    if (!this.area) return null\n\n    return {\n      x: side === 'input' ? 0 : getNodeWith(nodeId)\n      y: 0\n    }\n  }\n}\n\nrender.addPreset(Presets.classic.setup({\n  socketPositionWatcher: new ComputedSocketPosition()\n}))\n```\n\n----------------------------------------\n\nTITLE: Customizing Node Styles with Styled Components\nDESCRIPTION: Example of extending the default node component with custom styles using styled-components, including conditional styling for selected nodes.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Presets } from \"rete-react-plugin\";\nimport { css } from \"styled-components\";\n\nconst myStyles = css<{ selected?: boolean }>`\n  background: white;\n  ${(props) => props.selected && css`\n    border-color: red;\n  `}\n`;\n\nfunction StyledNode(props: { data: Schemes['Node'] }) {\n  return <Presets.classic.Node styles={() => myStyles} {...props} />;\n}\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    node() {\n      return StyledNode\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Importing and Using rete-structures in TypeScript\nDESCRIPTION: Shows how to import and initialize the structures utility with a NodeEditor instance, providing access to advanced graph operations.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { structures } from 'rete-structures'\n\nconst graph = structures(editor)\n\ngraph.nodes()\ngraph.connections()\n```\n\n----------------------------------------\n\nTITLE: Initializing NodeEditor with BaseSchemes in TypeScript\nDESCRIPTION: Creates a new NodeEditor instance using the BaseSchemes type for basic node and connection management. This is the starting point for working with the graph data structure in Rete.js.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeEditor, BaseSchemes, getUID } from 'rete'\n\nconst editor = new NodeEditor<BaseSchemes>()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Controls with React.js in Rete.js\nDESCRIPTION: This code demonstrates how to create custom controls including a button and radial progress indicator in Rete.js with React.js. The example shows control synchronization where the button sets a random value and the progress indicator displays the current value state.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/2.controls/1.react.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClassicPreset, GetSchemes, NodeEditor } from \"rete\";\nimport { AreaExtensions, AreaPlugin } from \"rete-area-plugin\";\nimport {\n  ReactArea2D,\n  ReactPlugin,\n  ReactArea2DProps,\n  Presets as ReactPresets\n} from \"rete-react-plugin\";\nimport { createRoot } from \"react-dom/client\";\nimport { useState, useEffect } from 'react';\n\ntype Node = ClassicPreset.Node;\ntype Connection<N extends Node> = ClassicPreset.Connection<N, N>;\ntype Controls = {number: ClassicPreset.InputControl<\"number\">}\n\ntype Schemes = GetSchemes<Node, Connection<Node>, Controls>;\n\nfunction RadialProgressControl(props: { value: number | null }) {\n  const progress = props.value || 0;\n  const normalizedProgress = Math.min(Math.max(0, progress), 100) / 100;\n  const radius = 40;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDashoffset = circumference * (1 - normalizedProgress);\n\n  const progressColor = `hsl(${normalizedProgress * 120}, 80%, 50%)`;\n\n  return (\n    <div style={{ position: 'relative', width: '100px', height: '100px', margin: '0 auto' }}>\n      <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\">\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r={radius}\n          fill=\"transparent\"\n          stroke=\"#e6e6e6\"\n          strokeWidth=\"8\"\n        />\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r={radius}\n          fill=\"transparent\"\n          stroke={progressColor}\n          strokeWidth=\"8\"\n          strokeDasharray={circumference}\n          strokeDashoffset={strokeDashoffset}\n          strokeLinecap=\"round\"\n          transform=\"rotate(-90 50 50)\"\n        />\n        <text x=\"50\" y=\"55\" textAnchor=\"middle\" fontSize=\"16\" fill=\"#333\">\n          {Math.round(normalizedProgress * 100)}%\n        </text>\n      </svg>\n    </div>\n  );\n}\n\nfunction ButtonControl(props: { emit: (value: number) => void }) {\n  return (\n    <button\n      style={{\n        borderRadius: '4px',\n        padding: '6px 12px',\n        backgroundColor: '#4CAF50',\n        color: 'white',\n        border: 'none',\n        cursor: 'pointer',\n        fontSize: '14px',\n        fontWeight: 'bold',\n        boxShadow: '0 2px 4px rgba(0,0,0,0.2)',\n        transition: 'background-color 0.3s',\n        margin: '10px auto',\n        display: 'block'\n      }}\n      onClick={() => props.emit(Math.random() * 100)}\n    >\n      Random Value\n    </button>\n  );\n}\n\nclass NumberNode extends ClassicPreset.Node {\n  width = 180;\n  height = 270;\n  \n  constructor(position: { x: number; y: number }) {\n    super('Number');\n    this.position = position;\n      \n    const control = new ClassicPreset.InputControl('number', {\n      initial: 0,\n      change: (val) => {\n        control.value = Math.min(Math.max(0, val), 100);\n        this.update();\n      }\n    });\n    this.addControl('number', control);\n  }\n}\n\nfunction PreviewNode(props: { \n  node: NumberNode\n  bindSocket: ReactArea2DProps[\"bindSocket\"]\n  bindControl: ReactArea2DProps[\"bindControl\"],\n  controls: ReactArea2DProps[\"controls\"]\n}) {\n  const { node, bindSocket, bindControl, controls } = props;\n  const [value, setValue] = useState<number | null>(null);\n  const control = controls.get('number');\n  \n  const emitValue = (value: number) => {\n    if (control) {\n      const input = control.component.props as any;\n      input.onChange(value);\n    }\n  }\n  \n  useEffect(() => {\n    const onChange = () => {\n      if (control) {\n        const input = control.component.props as any;\n        setValue(input.value);\n      }\n    }\n    onChange();\n    node.update = onChange;\n    \n    return () => {\n      node.update = () => {};\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"node-header\">{node.label}</div>\n      <div style={{ padding: '15px' }}>\n        <div className=\"control\">\n          {controls.get('number') && controls.get('number')?.component}\n        </div>\n        <RadialProgressControl value={value} />\n        <ButtonControl emit={emitValue} />\n      </div>\n    </>\n  );\n}\n\nexport async function createEditor(container: HTMLElement) {\n  const editor = new NodeEditor<Schemes>();\n  const area = new AreaPlugin<Schemes, ReactArea2D<Schemes>>(container);\n  const reactRender = new ReactPlugin<Schemes, ReactArea2D<Schemes>>();\n\n  reactRender.addPreset(ReactPresets.classic.setup({\n    customize: {\n      node: (data) => {\n        if (data.payload instanceof NumberNode) {\n          return PreviewNode\n        }\n      }\n    }\n  }));\n\n  AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {\n    accumulating: AreaExtensions.accumulateOnCtrl()\n  })\n  \n  editor.addPipe(context => {\n    if (context.type === 'nodecreated') {\n      const node = context.data\n      if (node instanceof NumberNode) {\n        requestAnimationFrame(() => editor.trigger({type: 'process' }))\n      }\n    }\n    return context\n  })\n\n  const render = reactRender.createRoot(createRoot);\n\n  area.use(render);\n\n  AreaExtensions.simpleNodesOrder(area);\n\n  const node = new NumberNode({ x: 0, y: 0 });\n\n  await editor.addNode(node);\n\n  AreaExtensions.zoomAt(area, editor.getNodes());\n\n  return {\n    destroy: () => area.destroy()\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Finding Incoming Nodes Using rete-structures in TypeScript\nDESCRIPTION: Gets nodes that directly connect to a selected node, useful for identifying immediate dependencies or inputs to a node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).incomers(selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Connecting Dataflow Engine to the Node Editor\nDESCRIPTION: Initializes the NodeEditor and DataflowEngine components and connects them together to enable data processing capabilities.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/1.dataflow.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { DataflowEngine } from \"rete-engine\";\nimport { NodeEditor } from \"rete\";\n\nconst editor = new NodeEditor<Schemes>();\nconst engine = new DataflowEngine<Schemes>();\n\neditor.use(engine);\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Connection Component in React\nDESCRIPTION: Implements a React component that renders the custom connection with selectable functionality and click handling.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/1.connections.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Svg\n  onPointerDown={(e: PointerEvent) => e.stopPropagation()}\n  onClick={props.click}\n>\n  <HoverPath d={path} />\n  <Path selected={props.data.selected} d={path} />\n</Svg>\n```\n\n----------------------------------------\n\nTITLE: Preparing Node Classes with Defined Dimensions for Minimap\nDESCRIPTION: Define Node and Connection classes with explicit width and height properties required for the minimap to correctly display node dimensions.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/10.minimap.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Node extends ClassicPreset.Node {\n  width = 190;\n  height = 120;\n}\nclass Connection<N extends Node> extends ClassicPreset.Connection<N, N> {}\n\ntype Schemes = GetSchemes<Node, Connection<Node>>;\n```\n\n----------------------------------------\n\nTITLE: Adding Node Previews to the Dock Menu in Rete.js\nDESCRIPTION: Example showing how to add node previews to the dock menu by specifying functions that return node instances. These functions are called when nodes are added to the dock or dragged to the editor.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/11.dock-menu.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndock.add(() => new NodeA());\ndock.add(() => new NodeB());\n```\n\n----------------------------------------\n\nTITLE: Finding Leaf Nodes Using rete-structures in TypeScript\nDESCRIPTION: Identifies leaf nodes (nodes without outgoing connections) in the graph using the structures utility, which is useful for finding end points in a workflow.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).leaves()\n```\n\n----------------------------------------\n\nTITLE: Importing Nodes from JSON in Rete.js\nDESCRIPTION: Code example showing how to recreate node instances from imported JSON data, including initializing node properties and adding them to the editor.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/9.import-export.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const { id, label, inputs, outputs, controls } of data.nodes) {\n  const node = new ClassicPreset.Node(label);\n\n  node.id = id;\n\n  /// ... inputs\n  /// ... controls\n  /// ... outputs\n\n  await editor.addNode(node)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Node Classes for Dataflow Processing in TypeScript\nDESCRIPTION: Creates the basic structure for processing nodes in a dataflow system, including a NumberNode that outputs a value and an AddNode that processes two inputs. Includes type definitions for connections and schemes.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/1.dataflow.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst socket = new ClassicPreset.Socket(\"socket\");\n\nclass NumberNode extends ClassicPreset.Node {\n  constructor(public value: number) {\n    super(\"Number\");\n    this.addOutput(\"value\", new ClassicPreset.Output(socket, \"Number\"));\n  }\n\n  data(): { value: number } {\n    return { value: this.value };\n  }\n}\n\nclass AddNode extends ClassicPreset.Node {\n  constructor() {\n    super(\"Add\");\n    this.addInput(\"left\", new ClassicPreset.Input(socket, \"Left\"));\n    this.addInput(\"right\", new ClassicPreset.Input(socket, \"Right\"));\n    this.addOutput(\"value\", new ClassicPreset.Output(socket, \"Number\"));\n  }\n\n  data(inputs: { left?: number[]; right?: number[] }): { value: number } {\n    const { left, right } = inputs;\n    const value = (left && left[0] || 0) + (right && right[0] || 0)\n\n    return { value };\n  }\n}\n\nclass Connection<\n  A extends Node,\n  B extends Node\n> extends ClassicPreset.Connection<A, B> {}\n\ntype Node = NumberNode | AddNode;\ntype ConnProps = Connection<NumberNode, AddNode> | Connection<AddNode, AddNode>;\ntype Schemes = GetSchemes<Node, ConnProps>;\n```\n\n----------------------------------------\n\nTITLE: Customizing User-Created Connection in TypeScript\nDESCRIPTION: Demonstrates how to customize the process of adding user-created connections using the makeConnection option.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.connections.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSourceTarget } from 'rete-connection-plugin'\n\nconnection.addPreset(() => new ClassicFlow({\n  makeConnection(from, to, context) {\n    const [source, target] = getSourceTarget(from, to) || [null, null];\n    const { editor } = context;\n\n    if (source && target) {\n      editor.addConnection(\n        new MyConnection(\n          editor.getNode(source.nodeId),\n          source.key,\n          editor.getNode(target.nodeId),\n          target.key\n        )\n      );\n      return true; // ensure that the connection has been successfully added\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Connecting Editor with Control Flow Engine in TypeScript\nDESCRIPTION: Initializes the NodeEditor and ControlFlowEngine, then connects them using the 'use' method.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/2.control-flow.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ControlFlowEngine } from \"rete-engine\";\nimport { NodeEditor } from \"rete\";\n\nconst editor = new NodeEditor<Schemes>();\nconst engine = new ControlFlowEngine<Schemes>();\n\neditor.use(engine);\n```\n\n----------------------------------------\n\nTITLE: Adding Classic Connection Preset in TypeScript\nDESCRIPTION: Demonstrates how to add the classic connection preset, allowing users to create connections by clicking on input/output sockets.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.connections.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.addPreset(ConnectionPresets.classic.setup())\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Socket Components\nDESCRIPTION: Example of replacing the default socket component with a custom implementation, referencing an external CustomSocket component.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomSocket } from './CustomSocket'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    socket() {\n      return CustomSocket\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Initializing Selectable Nodes in Rete.js\nDESCRIPTION: This snippet demonstrates how to enable node selection using the selectableNodes extension. It allows users to select multiple nodes by holding the Ctrl key.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/0.index.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst selector = AreaExtensions.selector()\nconst accumulating = AreaExtensions.accumulateOnCtrl()\n\nAreaExtensions.selectableNodes(area, selector, { accumulating });\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes and Connections to NodeEditor in TypeScript\nDESCRIPTION: Creates nodes with unique IDs and establishes a connection between them within the NodeEditor. This shows how to build the basic graph structure in Rete.js.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = { id: getUID() }\nconst b = { id: getUID() }\nconst connection = { id: getUID(), source: a.id, target: b.id }\n\nawait editor.addNode(a)\nawait editor.addNode(b)\nawait editor.addConnection(connection)\n```\n\n----------------------------------------\n\nTITLE: Finding Root Nodes with rete-structures\nDESCRIPTION: Uses rete-structures to find all root nodes in the graph - nodes that have no incoming connections.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).roots()\n```\n\n----------------------------------------\n\nTITLE: Basic Graph Import in Rete.js\nDESCRIPTION: Simple approach to importing nodes in the same order they appear in the imported data, suitable for basic graph structures.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/9.import-export.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst graph = /// loaded JSON-valid object from DB\n\nfor (const node of graph.nodes) {\n  await editor.addNode(node)\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Applying Custom Node Components in Lit\nDESCRIPTION: Implementation showing how to use different node components based on node properties. It applies a custom component only to nodes with a specific label, while using the default component for others.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/5.lit.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    node(context) {\n      if (context.payload.label === \"Custom\") {\n        return ({ emit }) => html`<custom-node .data=${context.payload} .emit=${emit}></custom-node>`;\n      }\n      return ({ emit }) => html`<rete-node .data=${context.payload} .emit=${emit}></rete-node>`;\n    }\n  }\n}))\n\nawait editor.addNode(new ClassicPreset.Node('White'))\n```\n\n----------------------------------------\n\nTITLE: Auto-Arranging Nodes in Rete.js v1 vs v2\nDESCRIPTION: Compares node auto-arrangement implementation between versions. Version 2 provides more advanced functionality using the elkjs package through the auto-arrange plugin.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nimport AutoArrangePlugin from 'rete-auto-arrange-plugin';\n\neditor.use(AutoArrangePlugin, {});\n\neditor.trigger('arrange');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nimport { AutoArrangePlugin, Presets as ArrangePresets } from \"rete-auto-arrange-plugin\";\n\nconst arrange = new AutoArrangePlugin<Schemes>();\n\narrange.addPreset(ArrangePresets.classic.setup());\n\narea.use(arrange);\n\nawait arrange.layout()\n```\n\n----------------------------------------\n\nTITLE: Resetting the Dataflow Engine Cache\nDESCRIPTION: Demonstrates how to reset the engine's cache for all nodes or for specific nodes when input values change to ensure fresh calculations.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/1.dataflow.md#2025-04-20_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nengine.reset() // reset all nodes\n// or specific nodes\nengine.reset(a.id)\nengine.reset(b.id)\n```\n\n----------------------------------------\n\nTITLE: Creating and Connecting Nodes in a Dataflow Graph\nDESCRIPTION: Demonstrates how to instantiate nodes with initial values and establish connections between them to create a simple addition processing flow.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/1.dataflow.md#2025-04-20_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst a = new NumberNode(1);\nconst b = new NumberNode(1);\nconst sum = new AddNode();\n\nconst con1 = new Connection(a, \"value\", c, \"left\");\nconst con2 = new Connection(b, \"value\", c, \"right\");\n\nawait editor.addNode(a);\nawait editor.addNode(b);\nawait editor.addNode(sum);\n\nawait editor.addConnection(con1);\nawait editor.addConnection(con2);\n```\n\n----------------------------------------\n\nTITLE: Customizing All Nodes in Rete.js with Vue.js\nDESCRIPTION: TypeScript code demonstrating how to customize all nodes in Rete.js using a custom Vue.js component.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport CustomNode from './CustomNode.vue'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    node() {\n      return CustomNode\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Initializing NodeEditor with Base Scheme in TypeScript\nDESCRIPTION: Initializes a new NodeEditor instance using the BaseSchemes type without additional fields. This is the starting point for working with Rete.js data structures.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeEditor, BaseSchemes, getUID } from 'rete'\n\nconst editor = new NodeEditor<BaseSchemes>()\n```\n\n----------------------------------------\n\nTITLE: Finding Predecessor Nodes Using rete-structures in TypeScript\nDESCRIPTION: Recursively finds all incoming nodes and their incoming nodes, tracing the complete input lineage of a selected node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).predecessors(selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Handling Parent-Child Relationships During Graph Import\nDESCRIPTION: Advanced technique for importing nodes with parent-child relationships, ensuring parents are imported before their children using a recursive approach.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/9.import-export.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function importForParent(nodes, parent = undefined) {\n  const nodes = nodes.filter(node => node.parent === parent)\n\n  for (const node of nodes) {\n    await editor.addNode(node)\n    await importForParent(nodes, node.id)\n  }\n}\n\nconst graph = /// loaded JSON-valid object from DB\n\nawait importForParent(graph.nodes)\n```\n\n----------------------------------------\n\nTITLE: Customizing Sockets with a Custom Component in Lit\nDESCRIPTION: Implementation showing how to replace the default socket component with a custom one. It defines and registers a custom element for sockets and configures the renderer to use it for all sockets.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/5.lit.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomSocketElement } from './CustomSocket'\n\ncustomElements.define(\"custom-socket\", CustomSocketElement);\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    socket(context) {\n      return () => html`<custom-socket .data=${context.payload}></custom-socket>`;\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Adding Input Controls to Nodes\nDESCRIPTION: Example of adding number/text input controls to a node using ClassicPreset\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/3.angular.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnode.addControl('my-control', new ClassicPreset.InputControl(\"number\", {\n  initial: 0,\n  readonly: false,\n  change(value) { }\n}))\n```\n\n----------------------------------------\n\nTITLE: Setting up React Area Rendering\nDESCRIPTION: Configuration of area plugin and React renderer with classic preset setup\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/1.basic.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoot } from \"react-dom/client\";\nimport { AreaPlugin } from \"rete-area-plugin\";\nimport { ReactPlugin, Presets, ReactArea2D } from \"rete-react-plugin\";\n\ntype AreaExtra = ReactArea2D<Schemes>;\n\nconst area = new AreaPlugin<Schemes, AreaExtra>(container);\nconst render = new ReactPlugin<Schemes, AreaExtra>({ createRoot });\n\nrender.addPreset(Presets.classic.setup());\n\neditor.use(area);\narea.use(render);\n```\n\n----------------------------------------\n\nTITLE: Implementing Execute Method for Control Flow in Rete.js v2\nDESCRIPTION: Demonstrates how to implement the execute method for control flow in version 2. This method defines how control signals are processed and forwarded through the node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nexecute(input: 'exec', forward: (output: 'exec') => void) {\n  forward('exec')\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating SmoothZoom Handler in Retejs Editor\nDESCRIPTION: Code snippet showing how to create and set a custom SmoothZoom handler for a Retejs area. The handler includes parameters for zoom intensity, animation duration, and easing function.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/8.smooth-zoom.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\narea.area.setZoomHandler(new SmoothZoom(0.5, 200, \"cubicBezier(.45,.91,.49,.98)\", area));\n```\n\n----------------------------------------\n\nTITLE: Installing Rete.js Dataflow Dependencies\nDESCRIPTION: Command for installing the core Rete.js library and the engine module needed for implementing dataflow functionality.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/1.dataflow.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete rete-engine\n```\n\n----------------------------------------\n\nTITLE: Creating Difference of Graphs with rete-structures\nDESCRIPTION: Uses the difference operation to subtract a selected node from the graph, resulting in a new graph without that node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).difference({ nodes: [selectedNode], connections: [] })\n```\n\n----------------------------------------\n\nTITLE: Output Data Retrieval from Nested Graph in TypeScript\nDESCRIPTION: Defines the retrieveOutputs function that collects output data from Output nodes in the nested graph. It uses the engine's fetchInputs method to get data from each Output node's connections and returns an object with keys corresponding to Output node keys.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.modules.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function retrieveOutputs(nodes: Schemes[\"Node\"][], engine: DataflowEngine<Schemes>) {\n  const outputNodes = nodes.filter(node => node instanceof OutputNode);\n\n // can be processed concurrently\n  const outputs = await Promise.all(outputNodes.map(async node => {\n    const data = await engine.fetchInputs(node.id);\n\n    // we consider only the data from the first connection as there can be at most one input connection\n    return [node.key, data.value[0]] as const;\n  }));\n\n  return Object.fromEntries(outputs);\n}\n```\n\n----------------------------------------\n\nTITLE: Using 3D-Specific Area Extensions\nDESCRIPTION: Implementing extensions specific to the 3D area plugin, including geometry forms for comments and reroutes, plus a lookAt function as an alternative to the standard zoomAt.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Area3DExtensions } from 'rete-area-3d-plugin'\n\nArea3DExtensions.forms.comment(area) // creates geometry for comments plugin\nArea3DExtensions.forms.reroute(area) // creates geometry for reroute plugin\n\nArea3DExtensions.lookAt(area, editor.getNodes()) // alternative to zoomAt from rete-area-plugin\n```\n\n----------------------------------------\n\nTITLE: Initializing rete-structures with NodeEditor\nDESCRIPTION: Shows how to import and initialize the structures utility with a NodeEditor instance, providing access to advanced graph operations.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { structures } from 'rete-structures'\n\nconst graph = structures(editor)\n\ngraph.nodes()\ngraph.connections()\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes with ClassicPreset in Rete.js\nDESCRIPTION: Demonstrates how to create and add a node to the editor using ClassicPreset, including adding an output port to the node with a socket and title.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/3.editor.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClassicPreset } from 'rete'\n\nconst node = new ClassicPreset.Node('Label')\n\nnode.addOutput('output', new ClassicPreset.Output(socket, 'Title'))\n\nawait editor.addNode(node)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Editors in a Single 3D Scene\nDESCRIPTION: Code showing how to create multiple editors in a single 3D scene by creating a main Area3DPlugin instance and sharing it with other editors.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst mainEditor = new NodeEditor<Schemes>();\nconst mainArea = new Area3DPlugin<Schemes, AreaExtra>(container)\n\nmainEditor.use(mainArea)\n\nconst secondaryEditor = new NodeEditor<Schemes>();\nconst secondaryArea = mainArea.share()\n\nsecondaryEditor.use(secondaryArea)\n```\n\n----------------------------------------\n\nTITLE: Creating a Node Editor with Valid JSON Objects in TypeScript\nDESCRIPTION: Example of creating a basic node editor with nodes that are valid JSON objects, making them easy to export and import.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/9.import-export.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeEditor, BaseSchemes, getUID } from 'rete'\n\nconst editor = new NodeEditor<BaseSchemes>()\n\nconst node = { id: getUID(), label: 'Label' }\n\nawait editor.addNode(node)\n```\n\n----------------------------------------\n\nTITLE: Executing the Control Flow in TypeScript\nDESCRIPTION: Initiates the execution of the control flow starting from the first Log node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/2.control-flow.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nengine.execute(log1.id);\n```\n\n----------------------------------------\n\nTITLE: Creating Intersection of Graphs with rete-structures\nDESCRIPTION: Applies the intersection operation between a graph and a selected node, resulting in a new graph containing only the selected node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).intersection({ nodes: [selectedNode], connections: [] })\n```\n\n----------------------------------------\n\nTITLE: Setting Up AreaPlugin for Visualization in Rete.js\nDESCRIPTION: Creates a 2D area for visualizing the editor on the DOM using the AreaPlugin, which handles zooming, dragging, and serves as an entry point for other plugins.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/3.editor.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AreaPlugin } from 'rete-area-plugin'\n\nconst area = new AreaPlugin<Schemes, AreaExtra>(container) // container is HTMLElement where the area will be inserted\n```\n\n----------------------------------------\n\nTITLE: Input Data Injection for Nested Graph in TypeScript\nDESCRIPTION: Defines the injectInputs function that transfers input data from the Module node to the Input nodes in the nested graph. It filters for Input nodes and assigns values from the inputData object based on matching keys.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.modules.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction injectInputs(nodes: Schemes[\"Node\"][], inputData: Record<string, any>) {\n    const inputNodes = nodes.filter(node => node instanceof InputNode);\n\n    inputNodes.forEach((node) => {\n      // keep in mind that there may be no input connections, and we assume there's a maximum of one connection possible\n      node.value = inputData[node.key] && inputData[node.key][0];\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Finding Predecessors for a Node with rete-structures\nDESCRIPTION: Recursively finds all incoming nodes for the selected node, including not only direct incomers but also their incomers, and so on.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).predecessors(selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Elements to Rete.js Editor Area\nDESCRIPTION: This snippet demonstrates how to add custom elements to the Rete.js editor area and optionally make them draggable.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst area = new AreaPlugin(container)\n\narea.content.add(element)\n\narea.content.remove(element)\n\nconst dragHandler = new Drag()\n\ndragHandler.initialize(element, { /* getters */ }, { /* events */ })\n```\n\n----------------------------------------\n\nTITLE: Making Reroute Pins Selectable in Rete.js\nDESCRIPTION: Implementation of selectable pins functionality using RerouteExtensions. Configures selection, accumulation behaviors, and pointer events to enable selecting and manipulating reroute pins.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/13.reroute.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RerouteExtensions } from \"rete-connection-reroute-plugin\";\n\nconst selector = AreaExtensions.selector();\nconst accumulating = AreaExtensions.accumulateOnCtrl();\n\nAreaExtensions.selectableNodes(area, selector, { accumulating });\nRerouteExtensions.selectablePins(reroutePlugin, selector, accumulating);\n\nrender.addPreset(Presets.reroute.setup({\n  pointerdown(id) {\n    reroutePlugin.unselect(id);\n    reroutePlugin.select(id);\n  },\n  // keep contextMenu and translate from the code above\n}));\n```\n\n----------------------------------------\n\nTITLE: Finding Incoming and Outgoing Nodes\nDESCRIPTION: Uses the incoming and outgoing connections to retrieve the connected nodes. It maps the source nodes from incoming connections and target nodes from outgoing connections.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst incomers = incomingConnections.map(connection => editor.getNode(connection.source))\nconst outgoers = outgoingConnections.map(connection => editor.getNode(connection.target))\n```\n\n----------------------------------------\n\nTITLE: Adding Input Controls to Rete.js Nodes\nDESCRIPTION: Code showing how to add built-in number or text input controls to a Rete.js node using the ClassicPreset.InputControl.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnode.addControl('my-control', new ClassicPreset.InputControl(\"number\", {\n  initial: 0,\n  readonly: false,\n  change(value) { }\n}))\n```\n\n----------------------------------------\n\nTITLE: Creating Union of Graphs with rete-structures\nDESCRIPTION: Demonstrates using the union operation to combine a graph with a selected node. When the node is already in the graph, the result remains the same graph.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).union({ nodes: [selectedNode], connections: [] })\n```\n\n----------------------------------------\n\nTITLE: Customizing All Node Appearances with Svelte\nDESCRIPTION: TypeScript code showing how to completely customize the appearance of all nodes in a Rete.js editor by providing a custom Svelte component for node rendering.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/4.svelte.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport CustomNode from './CustomNode.svelte'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    node() {\n      return CustomNode\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection-Specific Path Types in Rete.js\nDESCRIPTION: Advanced implementation that allows specifying different curve types for individual connections. The example extends the Connection class with a curve property and uses different curve types (monotoneX, linear) for specific connections.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/12.connection-path.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { curveStep, curveMonotoneX, curveLinear, CurveFactory } from \"d3-shape\";\n\nclass Connection extends ClassicPreset.Connection<\n  ClassicPreset.Node,\n  ClassicPreset.Node\n> {\n  curve?: CurveFactory;\n}\n\nconst pathPlugin = new ConnectionPathPlugin<Schemes, Area2D<Schemes>>({\n  curve: (connection) => connection.curve || curveStep\n});\n\nconst monotoneConnection = new Connection(a, \"port\", b, \"port\");\nconst linearConnection = new Connection(a, \"port\", b, \"port\");\n\nmonotoneConnection.curve = curveMonotoneX;\nlinearConnection.curve = curveLinear;\n```\n\n----------------------------------------\n\nTITLE: Finding Leaf Nodes with rete-structures\nDESCRIPTION: Uses rete-structures to find all leaf nodes in the graph - nodes that have no outgoing connections.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).leaves()\n```\n\n----------------------------------------\n\nTITLE: Initializing NodeEditor in Rete.js\nDESCRIPTION: Creates a new NodeEditor instance with TypeScript type inference using BaseSchemes, which provides basic node and connection structures with mandatory id fields.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/3.editor.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeEditor, BaseSchemes } from 'rete'\n\ntype Schemes = BaseSchemes // has Node { id: string } and Connection { id: string, source: string, target: string }\n\nconst editor = new NodeEditor<Schemes>()\n```\n\n----------------------------------------\n\nTITLE: Executing the Hybrid Flow Graph\nDESCRIPTION: Trigger the execution of the graph starting from the Start node. This initiates the control flow which then accesses data as needed, demonstrating the hybrid nature of the engine.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/3.hybrid.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nengine.execute(start.id);\n```\n\n----------------------------------------\n\nTITLE: Implementing Fully Custom Node Components\nDESCRIPTION: Example of replacing the default node component with a completely custom implementation, referencing an external CustomNode component.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomNode } from './CustomNode'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    node() {\n      return CustomNode\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Finding Successors for a Node with rete-structures\nDESCRIPTION: Recursively finds all outgoing nodes for the selected node, including not only direct outgoers but also their outgoers, and so on.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).successors(selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Finding Parent Nodes Using rete-structures in TypeScript\nDESCRIPTION: Retrieves the parent node(s) of a selected node, useful for navigating up in hierarchical graph structures.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).parents((n) => n.id === selectedNodeId);\n```\n\n----------------------------------------\n\nTITLE: Initializing Area3DPlugin for Node Editor\nDESCRIPTION: TypeScript code to initialize the Area3DPlugin, replacing the standard Area2DPlugin from the basic guide. Defines type for area extras required for proper TypeScript support.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Area3D, Area3DPlugin } from 'rete-area-3d-plugin';\n\ntype AreaExtra =\n  | Area3D<Schemes>\n\nconst area = new Area3DPlugin<Schemes, AreaExtra>(container);\n\neditor.use(area);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom History Actions\nDESCRIPTION: Example of implementing a custom history action and adding it to the history stack.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/14.undo-redo.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyAction implements HistoryAction {\n  undo(): void | Promise<void> {\n    // undo action\n  }\n  redo(): void | Promise<void> {\n    // redo action\n  }\n}\n\nconst history = new HistoryPlugin<Schemes, HistoryActions<Schemes> | MyAction>();\n\nconst myAction = new MyAction()\n\nhistory.add(myAction)\n```\n\n----------------------------------------\n\nTITLE: Finding Outgoers for a Node with rete-structures\nDESCRIPTION: Retrieves all nodes that the selected node has direct connections to, specifically those that are targets of connections originating from the selected node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).outgoers(selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Rendering Reroute Pins with Framework Presets\nDESCRIPTION: Configuration for rendering reroute pins using presets from various frontend frameworks (React, Vue, Angular, Svelte, or Lit). Includes setup for context menu and translation functionality.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/13.reroute.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Presets } from \"rete-react-plugin\"; // or  rete-vue-plugin, rete-angular-plugin, rete-svelte-plugin, @retejs/lit-plugin\n\nrender.addPreset(Presets.reroute.setup({\n  contextMenu(id) {\n    reroutePlugin.remove(id);\n  },\n  translate(id, dx, dy) {\n    reroutePlugin.translate(id, dx, dy);\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring React Rendering in Rete.js\nDESCRIPTION: Sets up rendering using React with the ReactPlugin, including presets for classic elements, context menu, and minimap functionality.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/3.editor.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReactArea2D, ReactPlugin, Presets as ReactPresets } from 'rete-react-plugin'\nimport { MinimapExtra } from 'rete-minimap-plugin'\nimport { ContextMenuExtra } from 'rete-context-menu-plugin'\n\ntype AreaExtra =\n  | ReactArea2D<Schemes>\n  | ContextMenuExtra\n  | MinimapExtra\n\nconst reactPlugin = new ReactPlugin<Schemes, AreaExtra>()\n\nreactPlugin.addPreset(ReactPresets.classic.setup())\nreactPlugin.addPreset(ReactPresets.contextMenu.setup())\nreactPlugin.addPreset(ReactPresets.minimap.setup())\n\narea.use(reactPlugin)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Connection Components\nDESCRIPTION: Code for replacing the default connection component with a custom implementation, referencing an external CustomConnection component.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomConnection } from './CustomConnection'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    connection() {\n      return CustomConnection\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Validation in Rete.js with TypeScript\nDESCRIPTION: This code shows how to prevent incompatible connections from being created by intercepting 'connectioncreate' messages. It uses a custom validation function to determine if the connection should be allowed.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/9.validation.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\neditor.addPipe((context) => {\n  if (context.type === \"connectioncreate\") {\n    if (!canCreateConnection(editor, context.data)) {\n      alert(\"Sockets are not compatible\");\n      return;\n    }\n  }\n  return context;\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Sibling Nodes Using rete-structures in TypeScript\nDESCRIPTION: Retrieves nodes that share the same parent as the selected node, useful for finding related nodes at the same hierarchy level.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).siblings((n) => n.id === selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Connecting Svelte Plugin to Rete.js\nDESCRIPTION: TypeScript code that demonstrates how to initialize and connect the Svelte plugin to a Rete.js area. It imports necessary components and sets up the classic preset for rendering.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/4.svelte.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AreaPlugin } from \"rete-area-plugin\";\nimport { SveltePlugin, Presets, SvelteArea2D } from \"rete-svelte-plugin/5\"; // or \"rete-svelte-plugin\" for older versions\n\ntype AreaExtra = SvelteArea2D<Schemes>;\n\n// ....\n\nconst render = new SveltePlugin<Schemes, AreaExtra>();\n\nrender.addPreset(Presets.classic.setup());\n\narea.use(render);\n```\n\n----------------------------------------\n\nTITLE: Connecting the Reroute Plugin to Rete.js\nDESCRIPTION: Code to initialize and connect the ReroutePlugin to the renderer. Defines the necessary type extensions and integrates the plugin with the rendering system.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/13.reroute.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReroutePlugin, RerouteExtra } from \"rete-connection-reroute-plugin\";\n\ntype AreaExtra =\n  | Area2D<Schemes> // this type is mandatory\n  | ReactArea2D<Schemes>\n  | RerouteExtra;\n\nconst reroutePlugin = new ReroutePlugin<Schemes>();\n\nrender.use(reroutePlugin)\n```\n\n----------------------------------------\n\nTITLE: Filtering Nodes and Connections Using rete-structures in TypeScript\nDESCRIPTION: Applies custom filtering to both nodes and connections, demonstrating how to extract specific parts of a graph based on criteria.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).filter(Boolean, ({ source, target }) => source === selectedNodeId || target === selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Filtering Nodes and Connections with rete-structures\nDESCRIPTION: Applies a filter to both nodes and connections, keeping only those where the connection's source or target matches the selected node ID.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).filter(Boolean, ({ source, target }) => source === selectedNodeId || target === selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Updating Node Relationships in Rete.js\nDESCRIPTION: Shows how to dynamically change parent-child relationships between nodes after they've been added to the editor.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.scopes.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// previously parent1.id was assigned\nnode1.parent = undefined;\nawait scopes.update(parent1.id)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Button Component with LitElement\nDESCRIPTION: Implementation of a CustomButton class that extends LitElement. The component renders a button with event handling that prevents event propagation to the area and executes the provided onClick callback.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/5.lit.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CustomButton extends LitElement {\n  static get properties() {\n    return {\n      data: { type: Object },\n    };\n  }\n\n  declare data: object;\n\n  render() {\n    return html`\n      <button\n        @pointerdown=${(e: MouseEvent) => e.stopPropagation()}\n        @doubleclick=${(e: MouseEvent) => e.stopPropagation()}\n        @click=${this.data.onClick}\n      >${this.data.label}</button>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Selectable Elements in Rete.js\nDESCRIPTION: This snippet illustrates how to add custom elements to the selector in Rete.js. It defines the element's behavior when selected, translated, or unselected.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/0.index.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst id = 'element-id'\nconst label = 'element-type'\n\nselector.add({\n  id,\n  label,\n  translate(dx, dy) {\n    // change position of current element by dx,dy\n  },\n  unselect() {\n    // triggered when removed from selector\n    // here you can trigger styles updating\n  },\n}, accumulating.active())\n```\n\n----------------------------------------\n\nTITLE: Finding Child Nodes Using rete-structures in TypeScript\nDESCRIPTION: Retrieves direct child nodes of a selected parent node, useful for working with hierarchical graph structures.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).children((n) => n.id === selectedNodeId);\n```\n\n----------------------------------------\n\nTITLE: Connecting Auto-arrange Plugin\nDESCRIPTION: Setup code for initializing and connecting the auto-arrange plugin with classic preset configuration.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.arrange.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoArrangePlugin, Presets as ArrangePresets } from \"rete-auto-arrange-plugin\";\n\nconst arrange = new AutoArrangePlugin<Schemes>();\n\narrange.addPreset(ArrangePresets.classic.setup());\n\narea.use(arrange);\n```\n\n----------------------------------------\n\nTITLE: Finding All Ancestors of a Node with rete-structures\nDESCRIPTION: Recursively retrieves all ancestors of the selected node, including parents, grandparents, and previous generations in the hierarchy.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).ancestors((n) => n.id === selectedNodeId);\n```\n\n----------------------------------------\n\nTITLE: Creating Output Node for Module System in TypeScript\nDESCRIPTION: Defines the OutputNode class that serves as an exit point for data from a module. It includes a key property for association with the Module node's output port and a data method that returns an empty object since data is fetched through connections.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.modules.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class OutputNode extends ClassicPreset.Node {\n  constructor(public key: string) {\n    super(\"Output\");\n\n    this.addInput(\"value\", new ClassicPreset.Input(socket, \"Number\"));\n  }\n\n  data() {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Input Node for Module System in TypeScript\nDESCRIPTION: Defines the InputNode class that serves as an entry point for data into a module. It includes a key property for association with the Module node's input port and a value property to store injected input data.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.modules.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class InputNode extends ClassicPreset.Node {\n  public value = null;\n\n  constructor(public key: string) {\n    super(\"Input\");\n\n    this.addOutput(\"value\", new ClassicPreset.Output(socket, \"Number\"));\n  }\n\n  data() {\n    return { value: this.value };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Socket Appearance with Svelte\nDESCRIPTION: TypeScript code demonstrating how to provide a custom Svelte component for rendering sockets in a Rete.js editor, allowing for customized input/output connection points.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/4.svelte.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport CustomSocket from './CustomSocket.svelte'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    socket() {\n      return CustomSocket\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Controls with Rete.js\nDESCRIPTION: TypeScript module implementing Angular controls in Rete.js. Sets up a button for random value generation and a radial progress indicator that synchronizes with an input field value.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/2.controls/3.angular.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeEditor, GetSchemes, ClassicPreset } from 'rete';\nimport { AreaPlugin, AreaExtensions } from 'rete-area-plugin';\nimport {\n  ConnectionPlugin,\n  Presets as ConnectionPresets\n} from 'rete-connection-plugin';\nimport { AngularPlugin, Presets, AngularArea2D } from 'rete-angular-plugin/16';\n\ntype Schemes = GetSchemes<\n  ClassicPreset.Node,\n  ClassicPreset.Connection<ClassicPreset.Node, ClassicPreset.Node>\n>;\ntype AreaExtra = AngularArea2D<Schemes>;\n\nexport async function createEditor(container: HTMLElement) {\n  const editor = new NodeEditor<Schemes>();\n  const area = new AreaPlugin<Schemes, AreaExtra>(container);\n  const connection = new ConnectionPlugin<Schemes, AreaExtra>();\n  const render = new AngularPlugin<Schemes, AreaExtra>();\n\n  AreaExtensions.selectableNodes(area, AreaExtensions.selector({}));\n\n  connection.addPreset(ConnectionPresets.classic.setup());\n\n  render.addPreset(Presets.classic.setup());\n  render.addPreset(Presets.contextMenu.setup());\n\n  editor.use(area);\n  area.use(connection);\n  area.use(render);\n\n  const a = new ClassicPreset.Node('A');\n  a.addControl(\n    'string',\n    new ClassicPreset.InputControl('text', { initial: '10' })\n  );\n  a.addControl(\n    'button',\n    new ClassicPreset.ButtonControl('random', () => {\n      const value = Math.random().toFixed(2);\n      const input = a.controls.string as ClassicPreset.InputControl<'text'>;\n\n      input.setValue(value);\n    })\n  );\n  a.addControl(\n    'progress',\n    new ClassicPreset.InputControl('progress', { initial: '0.5' })\n  );\n\n  await editor.addNode(a);\n\n  const output = area.nodeViews.get(a.id)?.element as HTMLElement;\n\n  output.style.background = 'linear-gradient(#5d6670, #5d6670)';\n\n  return {\n    destroy: () => editor.destroy()\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Start Node Class for Control Flow\nDESCRIPTION: Create a Start node class that implements both execute method for control flow and data method for dataflow. This node is designed to initiate the execution flow and passes control forward without modifying data.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/3.hybrid.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst socket = new ClassicPreset.Socket(\"socket\");\n\nclass Start extends ClassicPreset.Node {\n  constructor() {\n    super(\"Start\");\n    this.addOutput(\"exec\", new ClassicPreset.Output(socket, \"Exec\"));\n  }\n\n  execute(_: never, forward: (output: \"exec\") => void) {\n    forward(\"exec\");\n  }\n\n  data() {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Parent Node Size in Rete.js\nDESCRIPTION: Demonstrates how to customize the size of parent nodes using the ScopesPlugin options.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.scopes.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = new ScopesPlugin<Schemes>({\n  size: (nodeId, size) => ({ width: size.width, height: 100 })\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Rete CLI Configuration\nDESCRIPTION: Advanced configuration for Rete CLI with multiple entries, Babel plugins/presets, and Rollup plugins. This example shows how to create separate build configurations for different source directories.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/20.development/2.rete-cli.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReteOptions } from 'rete-cli'\n\nexport default <ReteOptions>[ // config with multiple entries\n  {\n    input: 'src/foo/index.ts',\n    name: 'Namespace'\n    babel: {\n      presets: [\n        require('@babel/preset-env'), // used by default, but should be declared when you specifies 'presets'\n        require('@babel/preset-typescript'), // used by default\n        require('@babel/preset-react'),\n      ]\n    }\n  },\n  {\n    input: 'src/bar/index.ts',\n    name: 'Namespace'\n    globals: {\n      'rete': 'Rete',\n    },\n    plugins: [ // specify Rollup plugins\n      commonjs(),\n    ],\n    babel: {\n      plugins: [\n        // include Babel plugins\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menu in Rete.js Node Editor\nDESCRIPTION: This code demonstrates how to set up a Rete.js editor with context menu functionality. It initializes the editor with various plugins including the context menu plugin, and configures both global context menus for node creation and node-specific context menus with options for deletion and copying.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/9.context-menu.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoot } from \"react-dom/client\";\nimport { NodeEditor, GetSchemes, ClassicPreset } from \"rete\";\nimport { AreaPlugin, AreaExtensions } from \"rete-area-plugin\";\nimport { ConnectionPlugin } from \"rete-connection-plugin\";\nimport {\n  ReactRenderPlugin,\n  Presets as ReactPresets\n} from \"rete-react-render-plugin\";\nimport { ContextMenuPlugin, Presets as ContextMenuPresets } from \"rete-context-menu-plugin\";\n\ntype Schemes = GetSchemes<\n  ClassicPreset.Node,\n  ClassicPreset.Connection<ClassicPreset.Node, ClassicPreset.Node>\n>;\ntype AreaExtra = AreaExtensions.SelectionArea;\n\nconst socket = new ClassicPreset.Socket(\"socket\");\n\nclass NumberNode extends ClassicPreset.Node {\n  width = 180;\n  height = 120;\n\n  constructor(initial: number, change?: (value: number) => void) {\n    super(\"Number\");\n    this.addOutput(\"value\", new ClassicPreset.Output(socket, \"Number\"));\n    this.addControl(\n      \"value\",\n      new ClassicPreset.InputControl(\"number\", {\n        initial,\n        change\n      })\n    );\n  }\n}\n\nclass AddNode extends ClassicPreset.Node {\n  width = 180;\n  height = 195;\n\n  constructor() {\n    super(\"Add\");\n    this.addInput(\"a\", new ClassicPreset.Input(socket, \"A\"));\n    this.addInput(\"b\", new ClassicPreset.Input(socket, \"B\"));\n    this.addOutput(\"value\", new ClassicPreset.Output(socket, \"Number\"));\n    this.addControl(\n      \"result\",\n      new ClassicPreset.InputControl(\"number\", {\n        readonly: true\n      })\n    );\n  }\n}\n\nclass FilterNode extends ClassicPreset.Node {\n  width = 180;\n  height = 195;\n\n  constructor() {\n    super(\"Filter\");\n    this.addInput(\"a\", new ClassicPreset.Input(socket, \"A\"));\n    this.addOutput(\"value\", new ClassicPreset.Output(socket, \"Number\"));\n    this.addControl(\n      \"condition\",\n      new ClassicPreset.InputControl(\"text\", {\n        initial: \"> 10\"\n      })\n    );\n  }\n}\n\nexport async function createEditor(container: HTMLElement) {\n  const editor = new NodeEditor<Schemes>();\n  const area = new AreaPlugin<Schemes, AreaExtra>(container);\n  const connection = new ConnectionPlugin<Schemes, AreaExtra>();\n  const render = new ReactRenderPlugin<Schemes, AreaExtra>({ createRoot });\n  const contextMenu = new ContextMenuPlugin<Schemes>({});\n\n  AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {\n    accumulating: AreaExtensions.accumulateOnCtrl()\n  });\n\n  render.addPreset(ReactPresets.classic.setup());\n\n  connection.addPreset(ConnectionPlugin.classic.setup());\n\n  editor.use(area);\n  area.use(connection);\n  area.use(render);\n  area.use(contextMenu);\n\n  contextMenu.addPreset((\n    // global context menu with nodes that can be added\n    ContextMenuPresets.classic.setup([\n      [\n        \"Add\",\n        {\n          label: \"Number\",\n          async handler() {\n            const node = new NumberNode(1);\n\n            await editor.addNode(node);\n            area.translate(node.id, area.area.pointer);\n          }\n        }\n      ],\n      [\n        \"Add\",\n        {\n          label: \"Operations\",\n          items: [\n            [\n              \"Operations\",\n              {\n                label: \"Add\",\n                async handler() {\n                  const node = new AddNode();\n\n                  await editor.addNode(node);\n                  area.translate(node.id, area.area.pointer);\n                }\n              }\n            ],\n            [\n              \"Operations\",\n              {\n                label: \"Filter\",\n                async handler() {\n                  const node = new FilterNode();\n\n                  await editor.addNode(node);\n                  area.translate(node.id, area.area.pointer);\n                }\n              }\n            ]\n          ]\n        }\n      ]\n    ])\n  ));\n\n  // node context menu\n  contextMenu.addPreset(\n    ContextMenuPresets.classic.setup([\n      [\n        \"Node\",\n        {\n          label: \"Delete\",\n          handler({ node }) {\n            editor.removeNode(node.id);\n          }\n        }\n      ],\n      [\n        \"Node\",\n        {\n          label: \"Clone\",\n          async handler({ node }) {\n            if (!node) return;\n\n            const clonedNode =\n              node instanceof AddNode\n                ? new AddNode()\n                : node instanceof FilterNode\n                ? new FilterNode()\n                : new NumberNode(1);\n\n            await editor.addNode(clonedNode);\n            area.translate(clonedNode.id, { x: node.x + 10, y: node.y + 10 });\n          }\n        }\n      ]\n    ])\n  );\n\n  const n1 = new NumberNode(1);\n  const n2 = new NumberNode(1);\n  const add = new AddNode();\n\n  await editor.addNode(n1);\n  await editor.addNode(n2);\n  await editor.addNode(add);\n\n  area.translate(n1.id, { x: -150, y: 0 });\n  area.translate(n2.id, { x: -150, y: 150 });\n  area.translate(add.id, { x: 30, y: 70 });\n\n  await editor.addConnection(new ClassicPreset.Connection(n1, \"value\", add, \"a\"));\n  await editor.addConnection(new ClassicPreset.Connection(n2, \"value\", add, \"b\"));\n\n  AreaExtensions.zoomAt(area, editor.getNodes());\n\n  return editor;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nodes in Rete.js v1 vs v2\nDESCRIPTION: Demonstrates the difference in node creation between versions. V1 uses a component-based approach where nodes are generated via registered components. V2 removes this abstraction, allowing for more direct node creation.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nclass NumComponent extends Rete.Component {\n  constructor(){\n    super(\"Number\");\n  }\n\n  builder(node) {\n    node.addControl(new NumControl('num'))\n    node.addOutput(new Rete.Output('num', \"Number\", numSocket))\n\n    return node\n  }\n}\n\nconst numComponent = new NumComponent()\neditor.register(numComponent);\n\nconst node = await numComponent.createNode({ num: 2 });\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nconst node = new ClassicPreset.Node('Number')\n\nnode.addControl('num', new NumControl('num'))\nnode.addOutput('num', new ClassicPreset.Output(numSocket, \"Number\"));\n\nawait editor.addNode(node)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Customizing Specific Nodes\nDESCRIPTION: TypeScript code demonstrating how to apply custom Svelte components only to specific nodes based on their properties. This example customizes nodes with the label 'Custom'.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/4.svelte.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    node(context) {\n      if (context.payload.label === \"Custom\") {\n        return CustomNode;\n      }\n      return Presets.classic.Node;\n    }\n  }\n}))\n\nawait editor.addNode(new ClassicPreset.Node('White'))\n```\n\n----------------------------------------\n\nTITLE: Event Listening in Rete.js v1 vs v2\nDESCRIPTION: Shows the difference in event handling between versions. V1 uses traditional event listeners, while v2 uses a middleware-like signal implementation with pipes for manipulating or preventing signal propagation.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\neditor.on('nodecreate', node => {\n return node.canCreate\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\neditor.addPipe(context => {\n  if (context.type === 'nodecreate') return\n  return context\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Socket Compatibility Checking in Rete.js\nDESCRIPTION: This function validates whether a connection can be created by checking the compatibility between source and target sockets. It uses the getConnectionSockets utility to extract the sockets from the connection's nodes.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/9.validation.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function canCreateConnection(editor: NodeEditor<Schemes>, connection: Schemes[\"Connection\"]) {\n  const { source, target } = getConnectionSockets(editor, connection);\n\n  return source && target && source.isCompatibleWith(target)\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Connection Appearance with Svelte\nDESCRIPTION: TypeScript code showing how to override the default connection renderer with a custom Svelte component, allowing for customized appearance of connections between nodes.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/4.svelte.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport CustomConnection from './CustomConnection.svelte'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    connection() {\n      return CustomConnection\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Control for Readonly Mode\nDESCRIPTION: Example of setting up a ClassicPreset.InputControl with readonly property enabled\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/7.readonly.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew ClassicPreset.InputControl('text', { readonly: true })\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Data Method in Rete.js v2\nDESCRIPTION: Demonstrates how to implement a data method for a node in Rete.js version 2. This method processes input values and returns output data for the node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\ndata(inputs) {\n  const { left, right } = inputs\n\n  return { sum: left[0] + right[0] }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Connection Path Plugin to Rete.js Renderer\nDESCRIPTION: Basic implementation of the ConnectionPathPlugin with a default curveStep path for all connections. The plugin must be linked to the render plugin which emits the 'connectionpath' event.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/12.connection-path.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectionPathPlugin } from \"rete-connection-path-plugin\";\nimport { curveStep } from \"d3-shape\";\n\nconst pathPlugin = new ConnectionPathPlugin<Schemes, Area2D<Schemes>>({\n  curve: () => curveStep\n});\n\nrender.use(pathPlugin);\n```\n\n----------------------------------------\n\nTITLE: Removing Nodes from the Dock Menu in Rete.js\nDESCRIPTION: Example showing how to remove node previews from the dock menu by referencing the same function that was used to add them, allowing for dynamic management of the dock contents.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/11.dock-menu.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst createNodeA = () => new NodeA()\n\n\ndock.add(createNodeA);\ndock.remove(createNodeA);\n```\n\n----------------------------------------\n\nTITLE: Preventing Connection Pick Event in TypeScript\nDESCRIPTION: Shows how to prevent the connectionpick event based on a condition.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.connections.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.addPipe(context => {\n  if (context.type === 'connectionpick') {\n    if (readonly) return\n  }\n  return context\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Connection Preset Selection in TypeScript\nDESCRIPTION: Shows how to implement custom logic for selecting connection flow presets based on socket data.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.connections.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.addPreset(({ nodeId, side, key }) => {\n  if (isReadonly(nodeId, side, key)) return undefined\n  if (usesBidirect(nodeId, side, key)) return new BidirectFlow()\n  return new ClassicFlow()\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Controls with Svelte Components\nDESCRIPTION: TypeScript code showing how to create custom controls in Rete.js using Svelte components. This example creates a custom button control while preserving the built-in input controls.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/4.svelte.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport MyButton from './MyButton.svelte'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    control(context) {\n      if (context.payload.isButton) {\n        return MyButton\n      }\n      if (context.payload instanceof ClassicPreset.InputControl) { // don't forget to explicitly specify the built-in Presets.classic.Control\n        return Presets.classic.Control;\n      }\n    }\n  }\n}));\n\nnode.addControl('my-button', { isButton: true, label: 'Click', onClick() {} })\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Comment in Rete.js\nDESCRIPTION: Demonstrates how to add an inline comment to a node using the comment plugin.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/15.comments.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncomment.addInline(\"Inline comment text\", [360, -20], node.dd);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to Specific Node Types\nDESCRIPTION: Code showing how to conditionally apply custom styles to nodes based on their properties, such as label.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    node(context) {\n      if (context.payload.label === \"White\") {\n        return StyledNode;\n      }\n      return Presets.classic.Node;\n    }\n  }\n}))\n\nawait editor.addNode(new ClassicPreset.Node('White'))\n```\n\n----------------------------------------\n\nTITLE: Setting up Classic Preset with Angular Plugin\nDESCRIPTION: Demonstrates how to initialize the Angular plugin for Rete.js with the classic preset that provides built-in components for nodes, connections, and basic controls.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/6.integration.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AngularPlugin, AngularArea2D, Presets as AngularPresets } from 'rete-angular-plugin'\n\nconst angular = new AngularPlugin<Schemes, AngularArea2D<Schemes>>({ injector })\n\nangular.addPreset(AngularPresets.classic.setup())\n\narea.use(angular)\n```\n\n----------------------------------------\n\nTITLE: Saving Data in Nodes in Rete.js v1 vs v2\nDESCRIPTION: Shows how data is stored in nodes across versions. V1 uses the putData method requiring JSON-compatible data for import/export. V2 provides more flexibility with no rigid guidelines for data storage.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nnode.putData('myData', 'data')\ncontrol.putData('myData', 'data') // where control is part of node\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nclass MyNode extends ClassicPreset.Node {\n  myData = 'data'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components for Connection Rendering\nDESCRIPTION: Defines styled components for rendering the connection path, including a transparent hover path and a selectable visible path.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/1.connections.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport styled from \"styled-components\";\n\nconst HoverPath = styled.path`\n  fill: none;\n  stroke-width: 15px;\n  pointer-events: auto;\n  stroke: transparent;\n`;\n\nconst Path = styled.path<{ selected?: boolean }>`\n  stroke: ${(props) => (props.selected ? \"rgb(255, 217, 44)\" : \"steelblue\")};\n`;\n```\n\n----------------------------------------\n\nTITLE: Using NoDrag Hook for Interactive Elements\nDESCRIPTION: Alternative approach using a hook to prevent drag behavior on interactive elements without extra nesting.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst ref = React.useRef(null)\n\nDrag.useNoDrag(ref)\n\n<button ref={ref}>\n  {props.data.label}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Finding and Execution in TypeScript\nDESCRIPTION: Defines the findModule function that returns an object representing a module. This object provides methods to get ports from Input/Output nodes and to execute the nested graph with provided input data.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.modules.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction findModule(path: string) {\n  return {\n    getPorts() {\n      const editor = new NodeEditor<Schemes>();\n\n      await importGraphByPath(path, editor);\n\n      const nodes = editor.getNodes();\n      const inputs = nodes\n        .filter((n): n is InputNode => n instanceof InputNode)\n        .map((n) => n.key);\n      const outputs = nodes\n        .filter((n): n is OutputNode => n instanceof OutputNode)\n        .map((n) => n.key);\n\n      return {\n        inputs,\n        outputs\n      };\n    },\n    exec: async (inputData: Record<string, any>) => {\n      const engine = new DataflowEngine<Schemes>();\n      const editor = new NodeEditor<Schemes>();\n\n      editor.use(engine);\n\n      await importGraphByPath(path, editor);\n\n      const nodes = editor.getNodes();\n\n      injectInputs(nodes, inputData);\n\n      return retrieveOutputs(nodes, engine);\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes and Connections to NodeEditor\nDESCRIPTION: Demonstrates how to create nodes and connections with unique IDs and add them to the editor. The nodes are simple objects with IDs, while connections reference the source and target node IDs.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = { id: getUID() }\nconst b = { id: getUID() }\nconst connection = { id: getUID(), source: a.id, target: b.id }\n\nawait editor.addNode(a)\nawait editor.addNode(b)\nawait editor.addConnection(connection)\n```\n\n----------------------------------------\n\nTITLE: Styling Context Menu with SCSS\nDESCRIPTION: SCSS code showing how to customize the context menu's appearance by overriding default styles. This example changes the width of the menu and styling of menu items and input fields.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/4.svelte.md#2025-04-20_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n.rete-context-menu {\n  width: 320px !important;\n  .block:first-child input {\n    background: grey;\n  }\n  .block.item {\n    background: grey;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting ScopesPlugin in Rete.js\nDESCRIPTION: Initializes and connects the ScopesPlugin to the Rete.js editor, setting up the classic preset for user interactions.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.scopes.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScopesPlugin, Presets as ScopesPresets } from 'rete-scopes-plugin'\n\nconst scopes = new ScopesPlugin<Schemes>()\n\nscopes.addPreset(ScopesPresets.classic.setup())\n\narea.use(scopes)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Button Controls in Rete.js\nDESCRIPTION: Example of customizing controls to include a button component, handling click events and preventing event propagation.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    control(context) {\n      if (context.payload.isButton) {\n        return (props: { data: { isButton: true, label: string, onClick: () => void }}) => (\n          <button\n            onPointerDown={(e) => e.stopPropagation()}\n            onClick={props.data.onClick}\n          >\n            {props.data.label}\n          </button>\n        )\n      }\n      if (context.payload instanceof ClassicPreset.InputControl) { // don't forget to explicitly specify the built-in Presets.classic.Control\n        return Presets.classic.Control;\n      }\n    }\n  }\n}));\n\nnode.addControl('my-button', { isButton: true, label: 'Click', onClick() {} })\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Connection Type in TypeScript\nDESCRIPTION: Extends the ClassicPreset.Connection type to include an optional 'selected' field, allowing for programmatic selection of connections.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/1.connections.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection extends ClassicPreset.Connection<\n  ClassicPreset.Node,\n  ClassicPreset.Node\n> {\n  selected?: boolean;\n}\n\ntype Schemes = GetSchemes<ClassicPreset.Node, Connection>;\n```\n\n----------------------------------------\n\nTITLE: Creating Union of Graphs Using rete-structures in TypeScript\nDESCRIPTION: Combines the main graph with another graph (in this case, a single node), demonstrating set operations on graphs.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).union({ nodes: [selectedNode], connections: [] })\n```\n\n----------------------------------------\n\nTITLE: Removing Nodes in Rete.js\nDESCRIPTION: Shows how to remove a node from the editor using its id property.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/3.editor.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait editor.removeNode(node.id)\n```\n\n----------------------------------------\n\nTITLE: Connecting CommentPlugin in Rete.js\nDESCRIPTION: Imports and initializes the CommentPlugin, then adds it to the area in a Rete.js project.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/15.comments.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CommentPlugin } from \"rete-comment-plugin\";\n\nconst comment = new CommentPlugin<Schemes, AreaExtra>();\n\narea.use(comment);\n```\n\n----------------------------------------\n\nTITLE: Customizing Controls in Rete.js with Vue.js\nDESCRIPTION: TypeScript code showing how to customize controls in Rete.js using Vue.js components.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport MyButton from './MyButton.vue'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    control(context) {\n      if (context.payload.isButton) {\n        return MyButton\n      }\n      if (context.payload instanceof ClassicPreset.InputControl) {\n        return Presets.classic.Control;\n      }\n    }\n  }\n}));\n\nnode.addControl('my-button', { isButton: true, label: 'Click', onClick() {} })\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Start/End Positions in TypeScript\nDESCRIPTION: Shows how to configure the start and end positions of connections using getDOMSocketPosition.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.connections.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDOMSocketPosition } from 'rete-render-utils'\n\nrender.addPreset(Presets.classic.setup({\n  socketPositionWatcher: getDOMSocketPosition({\n    offset({ x, y }, nodeId, side, key) {\n\n      return {\n        x: x + 10 * (side === 'input' ? -1 : 1),\n        y: y\n      }\n    },\n  })\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Spacing Options\nDESCRIPTION: Example of customizing node spacing using elk.js global options.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.arrange.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait arrange.layout({\n  options: {\n    'elk.spacing.nodeNode': 100,\n    'elk.layered.spacing.nodeNodeBetweenLayers': 100\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Separating History Actions Regardless of Timing\nDESCRIPTION: Code to force separation between history actions even if they occur within the timing threshold.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/14.undo-redo.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// action 1\n// action 2\nhistory.separate() // or myAction.separated = true\n// action 3\n```\n\n----------------------------------------\n\nTITLE: Customizing All Nodes with a Custom Component in Lit\nDESCRIPTION: Code showing how to replace the default node component with a custom implementation. It registers a custom element and configures the classic preset to use this component for rendering all nodes.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/5.lit.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomNodeElement } from './CustomNode'\n\ncustomElements.define(\"custom-node\", CustomNodeElement)\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    node(context) {\n      return ({ emit }) => html`<custom-node .data=${context.payload} .emit=${emit}></custom-node>`;\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Creating Intersection of Graphs Using rete-structures in TypeScript\nDESCRIPTION: Creates a new graph containing only elements that exist in both the main graph and another graph (a single node in this case).\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).intersection({ nodes: [selectedNode], connections: [] })\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes and Connections to the Editor in TypeScript\nDESCRIPTION: Creates instances of Log and Delay nodes, establishes connections between them, and adds them to the editor.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/2.control-flow.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst log1 = new Log(\"log before delay\");\nconst delay = new Delay(2);\nconst log2 = new Log(\"log after delay\");\n\nconst con2 = new Connection(log1, \"exec\", delay, \"exec\");\nconst con3 = new Connection(delay, \"exec\", log2, \"exec\");\n\nawait editor.addNode(log1);\nawait editor.addNode(delay);\nawait editor.addNode(log2);\n\nawait editor.addConnection(con2);\nawait editor.addConnection(con3);\n```\n\n----------------------------------------\n\nTITLE: Accessing Rete.js Namespaces\nDESCRIPTION: JavaScript code showing how to access Rete.js package namespaces when using CDN implementation.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/2.getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nRete\nReteAreaPlugin\nReteConnectionPlugin\nReteReactPlugin\n```\n\n----------------------------------------\n\nTITLE: Customizing Connections in Rete.js\nDESCRIPTION: TypeScript code demonstrating how to customize connections in Rete.js using a custom Vue.js component.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport CustomConnection from './CustomConnection.vue'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    connection() {\n      return CustomConnection\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Connecting the Minimap Plugin to the Editor Area\nDESCRIPTION: Initialize the MinimapPlugin and connect it to the editor area. This sets up the minimap infrastructure but requires a rendering plugin for visualization.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/10.minimap.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MinimapExtra, MinimapPlugin } from \"rete-minimap-plugin\";\n\ntype AreaExtra =\n  // ...\n  | MinimapExtra\n\nconst minimap = new MinimapPlugin<Schemes>()();\n\narea.use(minimap);\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Connection Component\nDESCRIPTION: Creates a closure-based component that combines all the selectable connection functionality and integrates it with the Rete.js render preset.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/1.connections.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SelectableConnectionBind(props: { data: Schemes[\"Connection\"] }) {\n  return (\n    <SelectableConnection\n      {...props}\n      click={() => {\n        selector.add({\n          /// ...\n        })\n        // here should be placed here the code for adding to the selector, as shown above\n      }}\n    />\n  );\n}\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    connection() {\n      return SelectableConnectionBind;\n    }\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Filtering Incoming and Outgoing Connections in TypeScript\nDESCRIPTION: Demonstrates how to filter connections to find those where a node is either the source (outgoing) or target (incoming). This is useful for analyzing node relationships.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst connections = editor.getConnections()\n\nconst incomingConnections = connections.filter(connection => connection.target === node.id)\nconst outgoingConnections = connections.filter(connection => connection.source === node.id)\n```\n\n----------------------------------------\n\nTITLE: Finding Incoming and Outgoing Connections for a Node\nDESCRIPTION: Filters the editor's connections to find those where the node is either the target (incoming) or source (outgoing). This is useful for analyzing node relationships.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst connections = editor.getConnections()\n\nconst incomingConnections = connections.filter(connection => connection.target === node.id)\nconst outgoingConnections = connections.filter(connection => connection.source === node.id)\n```\n\n----------------------------------------\n\nTITLE: Rendering the Minimap with a Frontend Framework\nDESCRIPTION: Configure the rendering of the minimap using a frontend framework preset (React, Vue, Angular, Svelte, or Lit). This example specifies a 200px minimap size.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/10.minimap.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Presets } from \"rete-react-plugin\"; // or  rete-vue-plugin, rete-angular-plugin, rete-svelte-plugin, @retejs/lit-plugin\n\nrender.addPreset(Presets.minimap.setup({ size: 200 }));\n```\n\n----------------------------------------\n\nTITLE: Preparing Node and Connection Classes in TypeScript\nDESCRIPTION: Defines custom Node and Connection classes extending ClassicPreset, and sets up type schemes for use with the comment plugin.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/15.comments.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Node extends ClassicPreset.Node {\n  width = 180;\n  height = 140;\n}\nclass Connection<N extends Node> extends ClassicPreset.Connection<N, N> {}\n\ntype Schemes = GetSchemes<Node, Connection<Node>>;\n```\n\n----------------------------------------\n\nTITLE: Using Vue.js 3 Plugins with Rete.js\nDESCRIPTION: TypeScript code demonstrating how to use Vue.js 3 plugins with Rete.js by configuring a custom Vue.js instance.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Presets, VuePlugin } from \"rete-vue-plugin\";\nimport { createApp } from \"vue\";\n\nconst render = new VuePlugin<Schemes, AreaExtra>({\n  setup(context) {\n    const app = createApp(context);\n\n    app.use(yourPlugin);\n\n    return app;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Connection to Selector\nDESCRIPTION: Shows how to add a connection to the selector when clicked, including unselect functionality.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/1.connections.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nselector.add({\n  id: connection.id,\n  label: 'connection',\n  translate() {},\n  unselect() {\n    connection.selected = false;\n    area.update(\"connection\", connection.id);\n  }\n}, accumulating.active())\n\nconnection.selected = true;\narea.update(\"connection\", connection.id);\n```\n\n----------------------------------------\n\nTITLE: Creating Connections in Rete.js\nDESCRIPTION: Demonstrates creating a connection between nodes using ClassicPreset, specifying the source and target nodes and their respective port keys.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/3.editor.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClassicPreset } from 'rete'\n\nconst connection = new ClassicPreset.Connection(sourceNode, 'portKey', targetNode, 'portKey')\n\nawait editor.addConnection(connection)\n```\n\n----------------------------------------\n\nTITLE: Manual Usage of Undo/Redo Methods\nDESCRIPTION: Code showing how to manually trigger undo and redo actions with the history plugin.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/14.undo-redo.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait history.undo()\nawait history.redo()\n```\n\n----------------------------------------\n\nTITLE: Customizing Node and Control Components in Rete.js v2\nDESCRIPTION: Demonstrates how to customize node and control rendering in version 2 using the classic preset with customize handlers for greater flexibility.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nreactPlugin.addPreset(ReactPresets.classic.setup({ customize: {\n  node(data) {\n    return MyNode\n  },\n  control() {\n    return MyReactControl\n  }\n}}))\n```\n\n----------------------------------------\n\nTITLE: Connecting Readonly Plugin to Editor\nDESCRIPTION: Setup code for connecting the readonly plugin to the Rete.js editor and area. The plugin must be connected before other plugins for proper functionality.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/7.readonly.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReadonlyPlugin } from \"rete-readonly-plugin\";\n\nconst readonly = new ReadonlyPlugin<Schemes>();\n\neditor.use(readonly.root);\neditor.use(area);\narea.use(readonly.area);\narea.use(render);\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Insertion in Rete.js (TypeScript)\nDESCRIPTION: This code snippet shows how to set up node insertion functionality in a Rete.js editor. It uses the 'insert-node' directory and calls the 'insertableNodes' function with appropriate arguments to enable this feature.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/8.insert-node.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n:example{id=\"rete-js-v2-insert-node-givohx\" module=\"/src/editor.ts\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Position in Rete.js\nDESCRIPTION: This code snippet shows how to retrieve the position of a node in Rete.js using the NodeView instance from the area plugin.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst view = area.nodeViews.get(nodeId)\n\nif (view) {\n  view.position // { x, y }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Socket Types with Compatibility Checking in Rete.js\nDESCRIPTION: This snippet implements custom socket types (ActionSocket and TextSocket) that extend the ClassicPreset.Socket class. Each socket type defines its own compatibility rules through the isCompatibleWith method.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/9.validation.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClassicPreset } from \"rete\";\n\nexport class ActionSocket extends ClassicPreset.Socket {\n  constructor() {\n    super(\"Action\");\n  }\n\n  isCompatibleWith(socket: ClassicPreset.Socket) {\n    return socket instanceof ActionSocket;\n  }\n}\n\nexport class TextSocket extends ClassicPreset.Socket {\n  constructor() {\n    super(\"Text\");\n  }\n\n  isCompatibleWith(socket: ClassicPreset.Socket) {\n    return socket instanceof TextSocket;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Vue.js 2 Plugins with Rete.js\nDESCRIPTION: TypeScript code showing how to use Vue.js 2 plugins with Rete.js by configuring a custom Vue.js instance.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Presets, VuePlugin } from \"rete-vue-plugin\";\nimport Vue from \"vue\";\n\nconst render = new VuePlugin<Schemes, AreaExtra>({\n  setup(context) {\n    const app = new Vue({ ...context, yourPlugin });\n\n    return app;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering Node Arrangement\nDESCRIPTION: Simple command to execute the auto-arrangement of nodes.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.arrange.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait arrange.layout();\n```\n\n----------------------------------------\n\nTITLE: Creating and Connecting Nodes in the Editor\nDESCRIPTION: Instantiate Start, TextNode, and Log nodes and establish connections between them. This code shows how to create both control flow connections and dataflow connections in the graph.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/3.hybrid.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst start = new Start();\nconst text1 = new TextNode(\"log\");\nconst log1 = new Log();\n\nconst con1 = new Connection(start, \"exec\", log1, \"exec\");\nconst con2 = new Connection(text1, \"value\", log1, \"message\");\n\nawait editor.addNode(start);\nawait editor.addNode(text1);\nawait editor.addNode(log1);\n\nawait editor.addConnection(con1);\nawait editor.addConnection(con2);\n```\n\n----------------------------------------\n\nTITLE: Customizing Parent Node Padding in Rete.js\nDESCRIPTION: Demonstrates how to customize the padding for parent nodes using the ScopesPlugin options.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.scopes.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = new ScopesPlugin<Schemes>({\n  padding: nodeId => ({ top: 40, left: 20, right: 20, bottom: 20 })\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Log Node with Both Control Flow and Dataflow Support\nDESCRIPTION: Create a Log node class that can receive control flow signals and fetch data from incoming nodes. This demonstrates how to use fetchInputs from DataflowEngine to access data from connected nodes while maintaining control flow.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/3.hybrid.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Log extends ClassicPreset.Node {\n  constructor() {\n    super(\"Log\");\n\n    this.addInput(\"exec\", new ClassicPreset.Input(socket, \"Exec\", true));\n    this.addInput(\"message\", new ClassicPreset.Input(socket, \"Text\"));\n    this.addOutput(\"exec\", new ClassicPreset.Output(socket, \"Exec\"));\n  }\n\n  async execute(input: \"exec\", forward: (output: \"exec\") => void) {\n    const inputs = (await dataflow.fetchInputs(this.id)) as {\n      message: string[];\n    };\n\n    console.log((inputs.message && inputs.message[0]) || \"\");\n\n    forward(\"exec\");\n  }\n\n  data() {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Node Position in Rete.js\nDESCRIPTION: This snippet demonstrates how to change the position of a node in Rete.js using the translate method of the area plugin.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\narea.translate(nodeId, { x: 0, y: 0 })\n```\n\n----------------------------------------\n\nTITLE: Implementing TextNode for Data-Only Flow\nDESCRIPTION: Create a TextNode class that only provides data and does not participate in control flow. This node demonstrates how to implement a pure dataflow node that can be used as an input source for hybrid nodes.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/3.hybrid.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass TextNode extends ClassicPreset.Node {\n  constructor(private text: string) {\n    super(\"Text\");\n    this.addOutput(\"value\", new ClassicPreset.Output(socket, \"Number\"));\n  }\n\n  execute() {}\n\n  data(): { value: string } {\n    return {\n      value: this.text\n    };\n  }\n}\n\nclass Connection<A extends NodeProps, B extends NodeProps> extends ClassicPreset.Connection<A, B> {}\n\ntype NodeProps = Start | Log | TextNode;\ntype ConnProps = Connection<Start, Log> | Connection<TextNode, Log>;\ntype Schemes = GetSchemes<NodeProps, ConnProps>;\n```\n\n----------------------------------------\n\nTITLE: Creating Nodes with ClassicPreset in Rete.js\nDESCRIPTION: Demonstrates creating nodes using the ClassicPreset class, which provides more functionality but creates objects that aren't directly serializable to JSON.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/9.import-export.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClassicPreset } from 'rete'\n\nconst node = new ClassicPreset.Node('Label')\n\nnode.addOutput('port', new ClassicPreset.Output(socket, 'Label'))\n\nawait editor.addNode(node)\n```\n\n----------------------------------------\n\nTITLE: Creating Dataflow Engine in Rete.js v1 vs v2\nDESCRIPTION: Demonstrates how to create and register a dataflow engine in both Rete.js versions. Version 1 uses the Rete.Engine class with explicit registration of components, while version 2 uses DataflowEngine connected directly to the editor.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nconst engine = new Rete.Engine('demo@0.1.0');\n\nengine.register(myComponent);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nimport { DataflowEngine } from 'rete-engine'\n\nconst engine = new DataflowEngine<Schemes>()\n\neditor.use(engine)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Button Controls with Lit Components\nDESCRIPTION: Implementation of a custom button control using Lit. The code shows how to customize the classic preset to render a custom button component for specific control types, and how to define the component.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/5.lit.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyButtonElement } from './MyButton'\n\ncustomElements.define(\"my-button\", MyButtonElement);\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    control(context) {\n      if (context.payload.isButton) {\n        const { payload } = context;\n\n        return () => html`<my-button .data=${payload}></my-button>`;\n      }\n      if (context.payload instanceof ClassicPreset.InputControl) { // don't forget to explicitly specify the built-in <rete-control>\n        return () => html`<rete-control .data=${payload}></rete-control>`;\n      }\n    }\n  }\n}));\n\nnode.addControl('my-button', { isButton: true, label: 'Click', onClick() {} })\n```\n\n----------------------------------------\n\nTITLE: Creating Node Base Class with Dimensions\nDESCRIPTION: Definition of Node and Connection classes with specified width and height required for elkjs positioning calculations.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.arrange.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Node extends ClassicPreset.Node {\n  width = 180;\n  height = 120;\n}\n\nclass Connection<N extends Node> extends ClassicPreset.Connection<N, N> {}\n\ntype Schemes = GetSchemes<Node, Connection<Node>>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Viewport Fitting\nDESCRIPTION: Adding zoom functionality to fit all nodes in viewport\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/1.basic.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AreaExtensions } from \"rete-area-plugin\";\n\nAreaExtensions.zoomAt(area, editor.getNodes());\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up Sankey Diagram in Rete.js\nDESCRIPTION: This snippet demonstrates how to import and set up a Sankey diagram in a Rete.js node editor. It includes options for the classic preset setup, graph import, node movement restriction, and layout arrangement.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/12.sankey.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSankeyRestrictor } from './sankey/restrictor';\nimport { Presets } from 'rete';\n\nPresets.classic.setup({\n  // ... other options\n  customize: {\n    node() {\n      return SankeyNode;\n    },\n    connection() {\n      return SankeyConnection;\n    },\n    socket() {\n      return SankeySocket;\n    }\n  }\n});\n\nimportGraph(/* ... */);\n\ncreateSankeyRestrictor(/* ... */);\n\narrange.layout({\n  // ... other options\n  options: {\n    'elk.spacing.nodeNode': 300\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Plugins in Rete.js v1 vs v2\nDESCRIPTION: Comparison of how plugins are connected in Rete.js v1 and v2. In v1, plugins are imported as default imports and added to the editor with options. In v2, plugins are implemented as extensible classes with more flexible customization.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nimport HistoryPlugin from 'rete-history-plugin';\n\neditor.use(HistoryPlugin, { keyboard: true });\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nimport { HistoryPlugin, HistoryExtensions, Presets } from 'rete-history-plugin'\n\nconst history = new HistoryPlugin<Schemes>()\n\nhistory.addPreset(Presets.classic.setup())\n\nHistoryExtensions.keyboard(history)\n\narea.use(history)\n```\n\n----------------------------------------\n\nTITLE: Panning Rete.js Area with Middle Mouse Button\nDESCRIPTION: This snippet demonstrates how to configure the Rete.js Area Plugin to pan using the middle mouse button by setting a custom drag handler.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Drag } from 'rete-area-plugin';\n\narea.area.setDragHandler(new Drag({\n  down: e => {\n    if (e.pointerType === 'mouse' && e.button !== 1) return false\n\n    e.preventDefault()\n    return true\n  },\n  move: () => true\n}))\n```\n\n----------------------------------------\n\nTITLE: Adding Bidirectional Connection Flow in TypeScript\nDESCRIPTION: Demonstrates how to use the BidirectFlow class for bidirectional connection creation.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.connections.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClassicFlow } from 'rete-connection-plugin'\n\nconnection.addPreset(() => new BidirectFlow())\n```\n\n----------------------------------------\n\nTITLE: Adding Nested Nodes in Rete.js\nDESCRIPTION: Demonstrates how to create and add parent and child nodes to the editor, specifying the parent-child relationship.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.scopes.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst node1 = new Node('A');\nconst parent1 = new Node('Parent');\n\nnode1.parent = parent1.id; // specify node1 as nested into parent1\n\nawait editor.addNode(parent1); // make sure to add the parent node before adding its child\nawait editor.addNode(node1);\n```\n\n----------------------------------------\n\nTITLE: Finding Incoming and Outgoing Nodes in TypeScript\nDESCRIPTION: Uses the filtered connections to identify nodes that connect to or from a given node. This code helps navigate the graph structure by following connections.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst incomers = incomingConnections.map(connection => editor.getNode(connection.source))\nconst outgoers = outgoingConnections.map(connection => editor.getNode(connection.target))\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import for Client-side Svelte Components\nDESCRIPTION: TypeScript code showing how to dynamically import Rete.js editor modules in Svelte components using the onMount lifecycle function to ensure client-side only execution.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/4.svelte.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonMount(async () => {\n  const { createEditor } = await import(\"./editor\")\n})\n```\n\n----------------------------------------\n\nTITLE: Installing rete-scopes-plugin for Rete.js\nDESCRIPTION: Command to install the rete-scopes-plugin package using npm.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.scopes.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-scopes-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Button Component in Svelte\nDESCRIPTION: Svelte component code for a custom button that can be used as a control in Rete.js nodes. Includes event handling to prevent propagation of pointer events to the area beneath.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/4.svelte.md#2025-04-20_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<button\n  on:pointerdown|stopPropagation={() => null}\n  on:click=\"data.onClick\"\n>\n  {data.label}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Parent Scope Access and Type Casting\nDESCRIPTION: Shows how child plugins can access and type-cast their parent plugin instances, including type safety checks and error handling.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/1.plugin-system.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scope } from 'rete';\n\nclass Root extends Scope<number> {\n  isRoot = true\n}\n\nclass Root2 extends Scope<number> {\n  isRoot2 = true\n}\n\nconst parentScope = new Root('parent');\nconst childScope = new Scope<string, [number]>('child');\n\nparentScope.use(childScope);\n\nconst parent = childScope.parentScope(); // Root instance, but Scope from TS perspective\nconst root = childScope.parentScope<Root>(Root); // Root instance\nconst wrongInstance = childScope.parentScope<Root2>(Root2); // throws exception\n```\n\n----------------------------------------\n\nTITLE: Finding Root Nodes Using rete-structures in TypeScript\nDESCRIPTION: Identifies root nodes (nodes without incoming connections) in the graph using the structures utility, which is useful for finding entry points in a workflow.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).roots()\n```\n\n----------------------------------------\n\nTITLE: Preventing Zoom on Double-Click in Rete.js\nDESCRIPTION: Code to disable the default zoom behavior triggered by double-clicking in a Rete.js editor by filtering out zoom contexts with the 'dblclick' source.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\narea.addPipe(context => {\n  if (context.type ===  'zoom' && context.data.source === 'dblclick') return\n  return context\n})\n```\n\n----------------------------------------\n\nTITLE: Selectable Nodes in Rete.js v1 vs v2\nDESCRIPTION: Demonstrates node selection implementations. V1 has built-in selection limited to nodes only, while v2 offers more extensible selection capabilities supporting different element types.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\neditor.selected.list\n\neditor.selected.add(node, accumulate)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nconst selector = AreaExtensions.selector()\nconst accumulating = AreaExtensions.accumulateOnCtrl()\n\nconst nodeSelector = AreaExtensions.selectableNodes(area, selector, { accumulating });\n\neditor.getNodes().filter(node => node.selected)\nnodeSelector.select(add.id)\n```\n\n----------------------------------------\n\nTITLE: Preparing Node Classes for Scopes in Rete.js\nDESCRIPTION: Defines Node and Connection classes with necessary properties for scopes functionality, including width, height, and parent fields.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.scopes.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Node extends ClassicPreset.Node {\n  width = 190;\n  height = 120;\n  parent?: string\n}\nclass Connection<N extends Node> extends ClassicPreset.Connection<N, N> {}\n\ntype Schemes = GetSchemes<Node, Connection<Node>>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Rete.js Editor with Svelte Controls\nDESCRIPTION: This code initializes a Rete.js editor with Svelte rendering and custom controls. It sets up a node with an input control, a button for randomizing the input value, and a radial progress indicator.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/2.controls/4.svelte.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEditor, BaseSchemes } from 'rete';\nimport { AreaPlugin, AreaExtensions } from 'rete-area-plugin';\nimport { SveltePlugin, Presets as SveltePresets } from 'rete-svelte-plugin';\n\nimport CustomNode from './CustomNode.svelte';\nimport Connection from './Connection.svelte';\nimport Button from './Button.svelte';\nimport Progress from './Progress.svelte';\n\ntype Schemes = BaseSchemes & {\n  // define your schemes if necessary\n};\n\nexport async function createDemoEditor(container: HTMLElement) {\n  const editor = await createEditor<Schemes>();\n  const area = new AreaPlugin<Schemes>(container);\n  const sveltePlugin = new SveltePlugin<Schemes>();\n\n  AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {\n    accumulating: AreaExtensions.accumulateOnCtrl()\n  });\n\n  const render = SveltePresets.classic.setup([\n    SveltePresets.classic.addPreset<Schemes>({\n      node: CustomNode,\n      connection: Connection\n    })\n  ]);\n\n  editor.use(area);\n  area.use(sveltePlugin);\n  area.use(render);\n\n  const a = await editor.addNode({\n    id: 'a',\n    label: 'A',\n    inputs: {},\n    outputs: {}\n  });\n\n  await area.translate(a.id, { x: 0, y: 0 });\n\n  const socket = new ClassicPreset.Socket('socket');\n\n  const inputControl = new ClassicPreset.InputControl('text', {\n    initial: '0'\n  });\n  await a.addControl('text', inputControl);\n\n  const buttonControl = new ClassicPreset.Control('button', {\n    label: 'Set random',\n    data: {}\n  });\n  await a.addControl('button', buttonControl);\n\n  const progressControl = new ClassicPreset.Control('progress', {\n    data: {}\n  });\n  await a.addControl('progress', progressControl);\n\n  await render.addControl(buttonControl, Button, (_, change) => {\n    const value = Math.ceil(Math.random() * 100);\n\n    inputControl.setValue(value.toString());\n    progressControl.data.progress = value;\n    change();\n  });\n\n  await render.addControl(progressControl, Progress);\n\n  return {\n    destroy: () => area.destroy()\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Connection as Selected\nDESCRIPTION: Demonstrates how to programmatically mark a connection as selected and update the area.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/1.connections.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.selected = true;\narea.update(\"connection\", connection.id);\n```\n\n----------------------------------------\n\nTITLE: Connecting Lit Plugin to Rete.js Area\nDESCRIPTION: TypeScript code for setting up the Lit plugin with Rete.js area plugin. It initializes the renderer with the classic preset and attaches it to the area.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/5.lit.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AreaPlugin } from \"rete-area-plugin\";\nimport { LitPlugin, Presets, LitArea2D } from \"@retejs/lit-plugin\";\n\ntype AreaExtra = LitArea2D<Schemes>;\n\n// ....\n\nconst render = new LitPlugin<Schemes, AreaExtra>();\n\nrender.addPreset(Presets.classic.setup());\n\narea.use(render);\n```\n\n----------------------------------------\n\nTITLE: Accessing Three.js Scene Components\nDESCRIPTION: Code showing how to access the Three.js scene components like the Scene, Camera, Renderers, and OrbitControls, allowing for direct manipulation of the 3D environment.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { scene } = area.area\n\nscene.root // three.js' Scene\nscene.camera // PerspectiveCamera\nscene.renderer.css3d // CSS3DRenderer\nscene.renderer.webgl // WebGLRenderer\nscene.orbit // OrbitControls\n```\n\n----------------------------------------\n\nTITLE: Signal Modification and Prevention\nDESCRIPTION: Illustrates how to modify signals and prevent their propagation using pipes. Shows examples of signal transformation and conditional blocking.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/1.plugin-system.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nparentScope.addPipe((context) => {\n  return context * 2;\n});\nchildScope.addPipe((context) => {\n  if (context === 'b') return // prevent propagation of 'b'\n  return context;\n});\n\nconst doubledNumber = await parentScope.emit(1); // 2\nconst expectedString = await childScope.emit('a'); // 'a'\nconst expectedUndefined = await childScope.emit('b'); // undefined\n```\n\n----------------------------------------\n\nTITLE: Adding Input Controls to Rete.js Nodes with Lit\nDESCRIPTION: Code snippet showing how to add a numeric input control to a node using ClassicPreset.InputControl. It configures the control with initial value, readonly state, and a change handler.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/5.lit.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnode.addControl('my-control', new ClassicPreset.InputControl(\"number\", {\n  initial: 0,\n  readonly: false,\n  change(value) { }\n}))\n```\n\n----------------------------------------\n\nTITLE: Exporting Nodes to JSON in Rete.js\nDESCRIPTION: Example code for exporting graph nodes to a JSON-compatible format, demonstrating how to extract relevant properties from node objects.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/9.import-export.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = { nodes: [] }\nconst nodes = editor.getNodes()\n\nfor (const node of nodes) {\n  data.nodes.push({\n    id: node.id,\n    label: node.label,\n    inputs: /// ....\n    controls: /// ....\n    outputs: /// ....\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue.js Controls in Rete.js\nDESCRIPTION: This code snippet demonstrates the setup of a Rete.js editor with Vue.js controls. It includes the creation of custom nodes with built-in and custom controls, such as a number control, a button for random value generation, and a radial progress indicator.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/2.controls/2.vue.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEditor, Engine, GetSchemes, NodeEditor } from 'rete';\nimport { AreaPlugin, AreaExtensions } from 'rete-area-plugin';\nimport {\n  VuePlugin,\n  Presets as VuePresets,\n  VueArea2D,\n  VueNode,\n} from 'rete-vue-plugin';\nimport { DataflowEngine, DataflowNode } from 'rete-engine';\nimport { ButtonControl } from './button-control';\nimport { RadialProgressControl } from './radial-progress-control';\n\ntype Schemes = GetSchemes<VueArea2D<any>, VueNode<any>>\n\ntype Node = Schemes['Node'] & DataflowNode\ntype Conn = Schemes['Connection']\ntype Area = VueArea2D<Schemes>\n\nclass NumberNode extends DataflowNode {\n  constructor(initial: number, change?: (val: number) => void) {\n    super('Number');\n    this.addControl(\n      'num',\n      new VuePresets.InputControl('number', { initial, change })\n    );\n  }\n\n  data() {\n    return {\n      num: (this.controls['num'] as VuePresets.InputControl<'number'>).value,\n    };\n  }\n}\n\nclass CustomNode extends DataflowNode {\n  constructor(change?: (val: number) => void) {\n    super('Custom controls');\n    const input = new VuePresets.InputControl('number', { initial: 0, change });\n\n    this.addControl('button', new ButtonControl('Set random', () => {\n      const value = Math.random();\n\n      input.setValue(value);\n    }));\n    this.addControl('input', input);\n    this.addControl('progress', new RadialProgressControl(input));\n  }\n}\n\nconst socket = new Presets.ClassicPreset.Socket('socket');\n\nexport async function createNodeComponent(\n  editor: NodeEditor<Schemes>,\n  { node, bindControl, bindSocket }: VuePlugin.ExtractNodeProps<Schemes>\n) {\n  const component = VuePresets.classic.Node as VuePlugin.Component<\n    Schemes['Node']\n  >;\n\n  return (\n    <component\n      data-testid={`node-${node.id}`}\n      {...component.setup?.({\n        editor,\n        node,\n        bindControl,\n        bindSocket,\n      })}\n    />\n  );\n}\n\nexport async function createEditor(container: HTMLElement) {\n  const editor = new NodeEditor<Schemes>();\n  const area = new AreaPlugin<Schemes>(container);\n  const connection = new ConnectionPlugin<Schemes>();\n  const render = new VuePlugin<Schemes>();\n  const engine = new DataflowEngine<Schemes>();\n\n  AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {\n    accumulating: AreaExtensions.accumulateOnCtrl(),\n  });\n\n  render.addPreset(VuePresets.classic.setup());\n  render.addPreset(VuePresets.contextMenu.setup());\n\n  editor.use(engine);\n  editor.use(area);\n  area.use(connection);\n  area.use(render);\n\n  render.addNode(createNodeComponent);\n\n  const numberNode = new NumberNode(0);\n  const customNode = new CustomNode();\n\n  await editor.addNode(numberNode);\n  await editor.addNode(customNode);\n\n  AreaExtensions.zoomAt(area, editor.getNodes());\n\n  return {\n    destroy: () => area.destroy(),\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Render Plugin in Rete.js v1 vs v2\nDESCRIPTION: Compares how to set up the React rendering plugin between versions. Version 1 connects directly to the editor while version 2 connects to the area plugin.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nimport ReactRenderPlugin from 'rete-react-render-plugin';\n\neditor.use(ReactRenderPlugin)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nimport { ReactPlugin } from 'rete-react-plugin'\n\nconst reactPlugin = new ReactPlugin<Schemes, AreaExtra>()\n\narea.use(reactPlugin)\n```\n\n----------------------------------------\n\nTITLE: Customizing Connection Geometry in 3D Scene\nDESCRIPTION: Example showing how to customize the 3D geometry of connections, specifically increasing the width by using the customize function with createClassicConnectionGeometry.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nArea3DExtensions.forms.connection(reactRender, {\n  customize(path) {\n    return Area3DExtensions.forms.createClassicConnectionGeometry(path, 10)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Connection Validation in Rete.js v1 vs v2\nDESCRIPTION: Compares connection validation approaches. V1 uses built-in socket-based validation with combineWith method, while v2 allows for more flexible custom validation implementation through pipes.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nconst anyTypeSocket = new Rete.Socket('Any type');\n\nnumSocket.combineWith(anyTypeSocket);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\neditor.addPipe(context => {\n  if (context.type === 'connectioncreate') {\n    if (canCreateConnection(context.data)) return false\n  }\n  return context\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Selector Functionality in Rete.js\nDESCRIPTION: This code example demonstrates how to extend the Selector class to add custom functionality, such as logging when elements are added or removed from the selection.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/0.index.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SelectorEntity } from 'rete-area-plugin/_types/extensions/selectable'\n\nclass MySelector<E extends SelectorEntity> extends AreaExtensions.Selector<E> {\n  add(entity: E, accumulate: boolean): void {\n    super.add(entity, accumulate)\n    console.log('added', entity)\n  }\n  remove(entity: E): void {\n    super.remove(entity)\n    console.log('removed', entity)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Engine Process in Rete.js v1 vs v2\nDESCRIPTION: Compares how to initiate processing in dataflow engines between versions. Version 1 processes the entire graph data at once, while version 2 fetches results starting from a specific node ID.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nawait engine.process(data);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nengine.fetch(node.id)\n```\n\n----------------------------------------\n\nTITLE: Customizing Specific Nodes in Rete.js\nDESCRIPTION: TypeScript code showing how to apply custom components to specific nodes in Rete.js based on conditions.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    node(context) {\n      if (context.payload.label === \"Custom\") {\n        return CustomNode;\n      }\n      return Presets.classic.Node;\n    }\n  }\n}))\n\nawait editor.addNode(new ClassicPreset.Node('White'))\n```\n\n----------------------------------------\n\nTITLE: Creating Node Classes for Context Menu\nDESCRIPTION: Example of defining custom node classes that will be available in the context menu. The code shows how to create node structures with inputs, outputs, and controls.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.context-menu.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nclass NodeA extends ClassicPreset.Node {\n  constructor(socket: ClassicPreset.Socket) {\n    super(\"NodeA\");\n\n    this.addControl(\"port\", new ClassicPreset.InputControl(\"text\", {}));\n    this.addOutput(\"port\", new ClassicPreset.Output(socket));\n  }\n}\n\n/// class NodeB extends ...\n\ntype Node = NodeA | NodeB;\ntype Schemes = GetSchemes<Node, Connection<Node, Node>>;\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Method in Dataflow Engine in Rete.js v1\nDESCRIPTION: Shows how to define a worker method in a component for the dataflow engine in Rete.js version 1. The worker method processes inputs and generates outputs for a node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nworker(node, inputs, outputs){\n  outputs['num'] = node.data.num;\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Selecting and Deselecting Nodes in Rete.js\nDESCRIPTION: This code shows how to programmatically select or deselect nodes using the built-in methods of selectableNodes. It allows for selecting single nodes, adding to existing selections, and removing nodes from selections.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/0.index.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst selectableNodes = AreaExtensions.selectableNodes(area, selector, { accumulating });\n\nselectableNodes.select(nodeId) // select a single node, the previous selection will be cleared\nselectableNodes.select(nodeId, true) // select a node without clearing previous selections\nselectableNodes.unselect(nodeId) // remove the node from the selected li\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Selection with AreaExtensions in Rete.js\nDESCRIPTION: Sets up selectable nodes functionality using AreaExtensions, with support for accumulating selection when the Ctrl key is pressed.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/3.editor.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AreaExtensions } from 'rete-area-plugin'\n\nAreaExtensions.selectableNodes(area, AreaExtensions.selector(), {\n  accumulating: AreaExtensions.accumulateOnCtrl()\n})\n```\n\n----------------------------------------\n\nTITLE: Translating Nodes in Rete.js v1 vs v2\nDESCRIPTION: Demonstrates how to move nodes in both versions. V1 requires getting the node view first, while v2 provides a direct translate method on the area.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n// v1\neditor.view.nodes.get(node).translate(x, y)\n```\n\nLANGUAGE: ts\nCODE:\n```\n// v2\nawait area.translate(node.id, { x, y })\n```\n\n----------------------------------------\n\nTITLE: Making Comments Selectable in Rete.js\nDESCRIPTION: Configures the comment plugin to make comments selectable, using AreaExtensions for selection and accumulation.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/15.comments.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CommentExtensions } from \"rete-comment-plugin\";\n\nconst selector = AreaExtensions.selector();\nconst accumulating = AreaExtensions.accumulateOnCtrl();\n\nCommentExtensions.selectable(comment, selector, accumulating);\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Node Transitions\nDESCRIPTION: Configuration for animated node positioning with customizable duration and timing function.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.arrange.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArrangeAppliers } from \"rete-auto-arrange-plugin\";\n\nconst applier = new ArrangeAppliers.TransitionApplier<Schemes, AreaExtra>({\n  duration: 500,\n  timingFunction: (t) => t,\n  async onTick() {\n    // called on every frame update\n  }\n});\n\nawait arrange.layout({ applier })\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Nodes and Controls in Rete.js v1\nDESCRIPTION: Shows how to specify custom React components for nodes and controls in version 1. Components are defined within the Rete.Component and Rete.Control constructors.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nclass AddComponent extends Rete.Component {\n  constructor() {\n    super(\"Add\");\n    this.data.component = MyNode;\n  }\n}\n\nclass MyControl extends Rete.Control {\n  constructor(emitter, key, name) {\n    super(key);\n    this.render = 'react';\n    this.component = MyReactControl;\n    this.props = { emitter, name };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Update on Nodes or Controls in Rete.js\nDESCRIPTION: This code shows how to force an update on nodes or controls in Rete.js after making changes to their state.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst area = new AreaPlugin(container)\n\narea.update('node', node.id)\narea.update(\"control\", control.id);\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Nodes in Connected Nodes Arrays in TypeScript\nDESCRIPTION: Handles cases where multiple connections exist between nodes by removing duplicates from the arrays of connected nodes using Set.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nArray.from(new Set(incomers))\nArray.from(new Set(outgoers))\n```\n\n----------------------------------------\n\nTITLE: Custom Button Component in Vue.js\nDESCRIPTION: Vue.js component code for a custom button to be used as a control in Rete.js.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n<button\n  @pointerdown.stop=\"\"\n  @click=\"data.onClick\"\n>{{data.label}}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Selector for Connections\nDESCRIPTION: Sets up the selector and accumulator for handling selectable connections in the Rete.js area.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/1.connections.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst selector = AreaExtensions.selector();\nconst accumulating = AreaExtensions.accumulateOnCtrl();\n\nAreaExtensions.selectableNodes(area, selector, { accumulating });\n```\n\n----------------------------------------\n\nTITLE: Adding a Node at a Specific Position in the Dock Menu\nDESCRIPTION: Code demonstrating how to insert a node preview at a specific position in the dock menu by providing an index as the second parameter to the add method.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/11.dock-menu.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndock.add(() => new NodeA(), 2);\n```\n\n----------------------------------------\n\nTITLE: Context Menu Styling\nDESCRIPTION: SCSS code for customizing the context menu appearance\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/3.angular.md#2025-04-20_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n[rete-context-menu] {\n  width: 320px;\n  context-menu-search input.search {\n    background: grey;\n  }\n  context-menu-item.block {\n    background: grey;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding All Descendant Nodes Using rete-structures in TypeScript\nDESCRIPTION: Recursively retrieves all descendants (children, grandchildren, etc.) of a selected node in hierarchical structures.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).descendants((n) => n.id === selectedNodeId);\n```\n\n----------------------------------------\n\nTITLE: Combining Control Flow with Dataflow in Rete.js v2\nDESCRIPTION: Shows how to integrate dataflow with control flow in version 2. This implementation fetches input data before forwarding control signals.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nasync execute(input: 'exec', forward: (output: 'exec') => void) {\n  const inputs = await dataflow.fetchInputs(this.id)\n\n  forward('exec')\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rete.js and Engine Dependencies\nDESCRIPTION: Install the required npm packages for implementing a hybrid engine in Rete.js. This includes the core Rete.js library and the engine plugin that provides dataflow and control flow functionality.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/3.hybrid.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete rete-engine\n```\n\n----------------------------------------\n\nTITLE: Enhancing Connection Behavior with Event Tracking in TypeScript\nDESCRIPTION: Demonstrates how to track connectionpick and connectiondrop events to enhance connection behavior.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.connections.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.addPipe(context => {\n  if (context.type === 'connectionpick') { // when the user clicks on the socket\n    const { socket } = context.data\n  }\n  if (context.type === 'connectiondrop') { // when the user clicks on the socket or any area\n    const { socket, initial, created } = context.data\n  }\n  return context\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nodes and Connections from NodeEditor\nDESCRIPTION: Shows how to retrieve the list of nodes and connections that have been added to the editor. These methods return arrays of the respective objects.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\neditor.getNodes() // returns [a, b]\neditor.getConnections() // returns [connection]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nodes and Connections from NodeEditor in TypeScript\nDESCRIPTION: Gets the list of nodes and connections that have been added to the editor. These methods provide access to the graph data stored in the NodeEditor.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\neditor.getNodes() // returns [a, b]\neditor.getConnections() // returns [connection]\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration for 3D Integration Documentation\nDESCRIPTION: Markdown frontmatter configuration defining metadata for the 3D integration documentation page, including image references, description, and keywords.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/22.3d/1.index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nimage:\n  src: 3d.png\ndescription: Learn how to integrate a node editor into a 3D scene. Seamlessly integrate the native HTML editor into your 3D scene powered by Three.js without compromising interactive capabilities\nkeywords: 3d,three.js,area,scene\nnavigation:\n  preview: 3d.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Method with Control Flow in Rete.js v1\nDESCRIPTION: Demonstrates how to implement a worker method that specifies closed output ports for control flow in version 1. This method controls which execution paths are available.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nworker(node, inputs, data) {\n    this.closed = ['exec'];\n    return { data }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Geometries for Nodes and Connections\nDESCRIPTION: TypeScript code to link nodes and connections with 3D geometries in the scene, enabling interactive functionality and preventing overlapping with other 3D objects.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nArea3DExtensions.forms.connection(render);\nArea3DExtensions.forms.node(area);\n```\n\n----------------------------------------\n\nTITLE: Auto-Arranging Nodes in Rete.js v1 vs v2\nDESCRIPTION: Shows how to use the auto-arrange plugin in both versions. V2 provides more advanced functionality using elkjs and a preset system.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n// v1\nimport AutoArrangePlugin from 'rete-auto-arrange-plugin';\n\neditor.use(AutoArrangePlugin, {});\n\neditor.trigger('arrange');\n```\n\nLANGUAGE: ts\nCODE:\n```\n// v2\nimport { AutoArrangePlugin, Presets as ArrangePresets } from \"rete-auto-arrange-plugin\";\n\nconst arrange = new AutoArrangePlugin<Schemes>();\n\narrange.addPreset(ArrangePresets.classic.setup());\n\narea.use(arrange);\n\nawait arrange.layout()\n```\n\n----------------------------------------\n\nTITLE: Custom Button Control Component\nDESCRIPTION: Implementation of a custom button control component in Angular\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/3.angular.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ControlComponent } from \"rete-angular-plugin/19\";\nimport { MyButtonComponent } from './my-button.component'\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    control(context) {\n      if (context.payload.isButton) {\n        return MyButtonComponent\n      }\n      if (context.payload instanceof ClassicPreset.InputControl) {\n        return ControlComponent\n      }\n    }\n  }\n}));\n\nnode.addControl('my-button', { isButton: true, label: 'Click', onClick() {} })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"app-button\",\n  template: `<button\n    (pointerdown)=\"$event.stopPropagation()\"\n    (click)=\"data.onClick()\"\n  >\n    {{ data.label }}\n  </button>`\n})\nexport class ButtonComponent {\n  @Input() data!: { label: string, onClick: () => void };\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Nodes from Connection Lists\nDESCRIPTION: When multiple connections exist between nodes, this code removes duplicates from the incoming or outgoing nodes lists using Set.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nArray.from(new Set(incomers))\nArray.from(new Set(outgoers))\n```\n\n----------------------------------------\n\nTITLE: Adding Area Extensions from rete-area-plugin\nDESCRIPTION: Implementing standard area extensions that work alongside the 3D functionality, such as input controls, node ordering, snap grid, and node selection features.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AreaExtensions } from 'rete-area-plugin'\n\nAreaExtensions.showInputControl(area)\nAreaExtensions.simpleNodesOrder(area)\nAreaExtensions.snapGrid(area, { size: 30 })\nAreaExtensions.selectableNodes(area, AreaExtensions.selector(), { accumulating: AreaExtensions.accumulateOnCtrl() });\n```\n\n----------------------------------------\n\nTITLE: Initializing React Plugin for Older React Versions\nDESCRIPTION: Code snippet showing how to initialize the React plugin for React.js version 16 or 17, without the createRoot method.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst render = new ReactPlugin<Schemes, AreaExtra>();\n```\n\n----------------------------------------\n\nTITLE: Creating Difference of Graphs Using rete-structures in TypeScript\nDESCRIPTION: Subtracts a node from the graph to create a new graph without that node, useful for removing specific elements.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).difference({ nodes: [selectedNode], connections: [] })\n```\n\n----------------------------------------\n\nTITLE: Combining Control Flow with Dataflow in Rete.js v2\nDESCRIPTION: Shows how to combine control flow with dataflow in v2. This approach allows fetching inputs from the dataflow engine within the control flow execution.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// v2\nasync execute(input: 'exec', forward: (output: 'exec') => void) {\n  const inputs = await dataflow.fetchInputs(this.id)\n\n  forward('exec')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Nodes and Controls in Rete.js v1 vs v2\nDESCRIPTION: Shows how to define custom components for nodes and controls. V1 uses component classes with properties, while v2 uses a preset system with customize handlers.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// v1\nclass AddComponent extends Rete.Component {\n  constructor() {\n    super(\"Add\");\n    this.data.component = MyNode;\n  }\n}\n\nclass MyControl extends Rete.Control {\n  constructor(emitter, key, name) {\n    super(key);\n    this.render = 'react';\n    this.component = MyReactControl;\n    this.props = { emitter, name };\n  }\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// v2\nreactPlugin.addPreset(ReactPresets.classic.setup({ customize: {\n  node(data) {\n    return MyNode\n  },\n  control() {\n    return MyReactControl\n  }\n}}))\n```\n\n----------------------------------------\n\nTITLE: Finding All Descendants of a Node with rete-structures\nDESCRIPTION: Recursively retrieves all descendants of the selected node, including children, grandchildren, and further generations in the hierarchy.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).descendants((n) => n.id === selectedNodeId);\n```\n\n----------------------------------------\n\nTITLE: Initializing Rete QA Projects\nDESCRIPTION: Command to initialize Rete QA projects for various frameworks. It generates projects and installs dependencies, optionally using a custom dependencies file.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/19.quality-assurance.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrete-qa init --deps-alias dependencies.json\n```\n\n----------------------------------------\n\nTITLE: Equivalent Classic Connection Flow Setup in TypeScript\nDESCRIPTION: Shows the equivalent code for setting up the classic connection flow using the ClassicFlow class.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.connections.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClassicFlow } from 'rete-connection-plugin'\n\nconnection.addPreset(() => new ClassicFlow())\n```\n\n----------------------------------------\n\nTITLE: Installing rete-vue-plugin and rete-render-utils\nDESCRIPTION: Command to install the necessary dependencies for using Vue.js with Rete.js.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-vue-plugin rete-render-utils\n```\n\n----------------------------------------\n\nTITLE: Finding All Ancestor Nodes Using rete-structures in TypeScript\nDESCRIPTION: Recursively retrieves all ancestors (parents, grandparents, etc.) of a selected node in hierarchical structures.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).ancestors((n) => n.id === selectedNodeId);\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Ordering\nDESCRIPTION: Adding functionality to manage node display order\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/1.basic.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nAreaExtensions.simpleNodesOrder(area);\n```\n\n----------------------------------------\n\nTITLE: Implementing Control Flow Worker Methods in Rete.js v1 vs v2\nDESCRIPTION: Demonstrates the implementation of worker methods for control flow. V1 uses a worker method with closed outputs, while v2 uses an execute method with a forward callback.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// v1\nworker(node, inputs, data) {\n    this.closed = ['exec'];\n    return { data }\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// v2\nexecute(input: 'exec', forward: (output: 'exec') => void) {\n  forward('exec')\n}\n```\n\n----------------------------------------\n\nTITLE: Import/Export in Rete.js v1 vs v2\nDESCRIPTION: Compares the import/export functionality between versions. V1 has built-in methods for serialization, while v2 requires custom implementation for more flexibility.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nconst data = editor.toJSON();\nawait editor.fromJSON(data);\n```\n\n----------------------------------------\n\nTITLE: Implementing Scopes in Rete.js Node Editor (TypeScript)\nDESCRIPTION: Configuration and setup of a Rete.js node editor with scopes functionality enabled through rete-scopes-plugin. Allows creation of nested node hierarchies and parent-child relationships that can be modified through long-press interaction.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/10.scopes.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoot } from \"../utils\";\nimport { GetSchemes, ClassicPreset } from \"rete\";\nimport { Scopes } from \"rete-scopes-plugin\";\n\ntype Schemes = GetSchemes<never, never>;\n\nexport async function createEditor() {\n  const { area } = await createRoot<Schemes>();\n\n  const connection = new ClassicPreset.Connection(node1, \"value\", node2, \"value\");\n\n  area.addNode(node1);\n  area.addNode(node2);\n  area.addConnection(connection);\n\n  const scopes = new Scopes<Schemes>();\n\n  area.use(scopes);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lit Plugin Dependencies for Rete.js\nDESCRIPTION: Command to install the necessary packages for using Lit with Rete.js, including the lit-plugin, render utilities, and the Lit library itself.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/5.lit.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @retejs/lit-plugin rete-render-utils lit\n```\n\n----------------------------------------\n\nTITLE: Creating New Application with Rete Kit (Interactive Mode)\nDESCRIPTION: Command to start the interactive application creation process using Rete Kit.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/20.development/3.rete-kit.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrete-kit app\n```\n\n----------------------------------------\n\nTITLE: Customizing Comment Text Editing in Rete.js\nDESCRIPTION: Demonstrates how to customize the comment text editing process by providing a custom edit function to the CommentPlugin.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/15.comments.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst comment = new CommentPlugin<Schemes, AreaExtra>({\n  edit: async (comment) => {\n    return prompt('Edit comment', comment.text)\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Node Geometry in 3D Scene\nDESCRIPTION: Example showing how to customize the 3D geometry of nodes, specifically modifying the border radius by using the customize function with createClassicNodeGeometry.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nArea3DExtensions.forms.node(area, {\n  customize(node) {\n    return Area3DExtensions.forms.createClassicNodeGeometry(node, {\n      borderRadius: 0\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Render Plugin in Rete.js v1 vs v2\nDESCRIPTION: Demonstrates how to initialize the React rendering plugin in both versions. V1 adds the plugin directly to the editor, while v2 creates a plugin instance and adds it to the area.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// v1\nimport ReactRenderPlugin from 'rete-react-render-plugin';\n\neditor.use(ReactRenderPlugin)\n```\n\nLANGUAGE: ts\nCODE:\n```\n// v2\nimport { ReactPlugin } from 'rete-react-plugin'\n\nconst reactPlugin = new ReactPlugin<Schemes, AreaExtra>()\n\narea.use(reactPlugin)\n```\n\n----------------------------------------\n\nTITLE: Installing Rete.js and Engine Dependencies\nDESCRIPTION: Command to install the required npm packages for Rete.js and its engine.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/3.processing/2.control-flow.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete rete-engine\n```\n\n----------------------------------------\n\nTITLE: Setting up Keyboard Shortcuts for History Plugin\nDESCRIPTION: Code to enable default keyboard shortcuts (Ctrl+Z/Ctrl+Y) for undo/redo operations.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/14.undo-redo.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HistoryExtensions } from \"rete-history-plugin\";\n\nHistoryExtensions.keyboard(history);\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Plugin Dependencies\nDESCRIPTION: Command to install required npm packages including rete-angular-plugin and Angular elements\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/3.angular.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-angular-plugin rete-render-utils @angular/elements@19\n```\n\n----------------------------------------\n\nTITLE: Building Project Dependencies (Specific Folders)\nDESCRIPTION: Command to build dependencies from specific directories and insert them into the project's node_modules.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/20.development/3.rete-kit.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrete-kit build --folders my-plugin-1,my-plugin-1,my-project\n```\n\n----------------------------------------\n\nTITLE: Creating Loop Connections in Rete.js\nDESCRIPTION: Code to create a loop connection by extending the ClassicPreset.Connection class and setting the isLoop property to true.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass Connection extends ClassicPreset.Connection {\n  isLoop = false\n}\n\nconst connection = new Connection(source, output, target, input)\n\nconnection.isLoop = true\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Subitems in Context Menu\nDESCRIPTION: Example showing how to organize nodes into hierarchical categories in the context menu by defining subitems within parent menu items.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.context-menu.md#2025-04-20_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst contextMenu = new ContextMenuPlugin<Schemes>({\n  items: ContextMenuPresets.classic.setup([\n    [\"Math\", [\n      [\"Number\", () => new NumberNode()],\n    ]]\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Building a Rete Project\nDESCRIPTION: Command to build a Rete project using a specified configuration file. The command generates a publish-ready 'dist' directory with all required bundles and type definitions.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/20.development/2.rete-cli.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrete build --config rete.config.ts\n```\n\n----------------------------------------\n\nTITLE: Finding Incomers for a Node with rete-structures\nDESCRIPTION: Retrieves all nodes that have direct connections to the selected node, specifically those that are sources of connections targeting the selected node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).incomers(selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Connecting VuePlugin to Rete.js Area\nDESCRIPTION: TypeScript code to set up and connect the VuePlugin to a Rete.js area, including the classic preset.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AreaPlugin } from \"rete-area-plugin\";\nimport { VuePlugin, Presets, VueArea2D } from \"rete-vue-plugin\";\n\ntype AreaExtra = VueArea2D<Schemes>;\n\n// ....\n\nconst render = new VuePlugin<Schemes, AreaExtra>();\n\nrender.addPreset(Presets.classic.setup());\n\narea.use(render);\n```\n\n----------------------------------------\n\nTITLE: Connecting Angular Plugin with Rete.js\nDESCRIPTION: TypeScript code showing how to initialize and connect the Angular plugin with Rete.js area\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/3.angular.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AreaPlugin } from \"rete-area-plugin\";\nimport { AngularPlugin, Presets, AngularArea2D } from \"rete-angular-plugin/19\";\n\ntype AreaExtra = AngularArea2D<Schemes>;\n\n// ....\n\nconst render = new AngularPlugin<Schemes, AreaExtra>({ injector });\n\nrender.addPreset(Presets.classic.setup());\n\narea.use(render);\n```\n\n----------------------------------------\n\nTITLE: Including Rete.js via CDN\nDESCRIPTION: HTML script tags to include Rete.js and its plugins from CDN for browser-based implementation.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/2.getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/rete/rete.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/rete-area-plugin/rete-area-plugin.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/rete-connection-plugin/rete-connection-plugin.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/rete-render-utils/rete-render-utils.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/rete-react-plugin/rete-react-plugin.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing rete-history-plugin\nDESCRIPTION: Command to install the rete-history-plugin dependency using npm.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/14.undo-redo.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-history-plugin\n```\n\n----------------------------------------\n\nTITLE: Dynamic Zoom Control in Rete.js Area Plugin\nDESCRIPTION: This code shows how to enable and disable zoom dynamically in Rete.js Area Plugin, typically in response to events like Ctrl key press and release.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Zoom } from 'rete-area-plugin'\n\n// call on init\narea.area.setZoomHandler(null)\n\n// call on Ctrl press\narea.area.setZoomHandler(new Zoom(0.1))\n\n// call on Ctrl release\narea.area.setZoomHandler(null)\n```\n\n----------------------------------------\n\nTITLE: Linting Rete Project\nDESCRIPTION: Command to run linting separately on a Rete project. While linting is included in the build process, this command allows for independent linting.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/20.development/2.rete-cli.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrete lint\n```\n\n----------------------------------------\n\nTITLE: Finding Orphan Nodes with rete-structures\nDESCRIPTION: Identifies nodes that don't have a parent property specified, making them top-level nodes in the hierarchy.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).orphans();\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Loop for 3D Area\nDESCRIPTION: Code to enable animation for the 3D area, which makes nodes interactive by connecting them to the Three.js animation loop using requestAnimationFrame.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nArea3DExtensions.animate(area)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Task Plugin for Control Flow in Rete.js v1 vs v2\nDESCRIPTION: Shows the implementation differences for control flow between versions. Version 1 uses the rete-task-plugin while version 2 uses the dedicated ControlFlowEngine from rete-engine.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nimport TaskPlugin from 'rete-task-plugin';\n\neditor.use(TaskPlugin);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nimport { ControlFlowEngine } from 'rete-engine'\n\nconst engine = new ControlFlowEngine<Schemes>()\n\neditor.use(engine)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Dependencies for Rete QA\nDESCRIPTION: JSON configuration for specifying custom dependencies in Rete QA. This allows substituting plugins with specific versions or local packages.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/19.quality-assurance.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-rete-plugin\": \"../my-plugin/my-rete-plugin-1.0.0.tgz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Successor Nodes Using rete-structures in TypeScript\nDESCRIPTION: Recursively finds all outgoing nodes and their outgoing nodes, tracing the complete output lineage of a selected node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).successors(selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Disabling Readonly Mode\nDESCRIPTION: Code to disable readonly mode and allow editor modifications\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/7.readonly.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly.disable();\n```\n\n----------------------------------------\n\nTITLE: Creating New Rete Plugin\nDESCRIPTION: Command to generate a new Rete plugin with basic configuration and structure.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/20.development/3.rete-kit.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrete-kit plugin --name <plugin name>\n```\n\n----------------------------------------\n\nTITLE: Adding Frame Comment in Rete.js\nDESCRIPTION: Shows how to add a frame comment covering specific nodes using the comment plugin.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/15.comments.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncomment.addFrame(\"Frame comment text\", [node.id]);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Rete CLI Configuration\nDESCRIPTION: Basic configuration file setup for Rete CLI. The configuration specifies the entry point script and namespace for UMD bundles.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/20.development/2.rete-cli.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReteOptions } from 'rete-cli'\n\nexport default<ReteOptions>{\n  input: 'src/index.ts', // path to entry script\n  name: 'Namespace' // namespace for UMD bundles\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Outputs in Component in Rete.js v1\nDESCRIPTION: Shows how to configure a component's task outputs for control flow and dataflow in version 1. The task provides init methods for running and resetting the task.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nthis.task = {\n    outputs: { exec: 'option', data: 'output' },\n    init(task) {\n        task.run('any data');\n        task.reset();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rete.js Package Category Overview\nDESCRIPTION: Custom component usage for displaying API package overviews for different categories of Rete.js functionality.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.api/0.overview.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:api-overview{filter=\"rete\"}\n\n:api-overview{filter=\"rete-engine,rete-structures\"}\n\n:api-overview{filter=\"rete-area-plugin,rete-area-3d-plugin\"}\n\n:api-overview{filter=\"rete-connection-plugin,rete-context-menu-plugin,rete-readonly-plugin,rete-scopes-plugin,rete-dock-plugin,rete-history-plugin\"}\n\n:api-overview{filter=\"rete-react-plugin,rete-vue-plugin,rete-angular-plugin,rete-svelte-plugin,@retejs/lit-plugin\"}\n\n:api-overview{filter=\"rete-auto-arrange-plugin,rete-minimap-plugin,rete-render-utils,rete-comment-plugin,rete-connection-path-plugin,rete-connection-reroute-plugin\"}\n```\n\n----------------------------------------\n\nTITLE: Finding Outgoing Nodes Using rete-structures in TypeScript\nDESCRIPTION: Gets nodes that are directly connected from a selected node, useful for identifying immediate outputs or consequences of a node.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(graph).outgoers(selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Getting Viewport Center Coordinates in Rete.js\nDESCRIPTION: Code to retrieve the coordinates of the viewport center, transforming screen coordinates into editor coordinates by applying zoom factor and offset.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst area = new AreaPlugin<Schemes, AreaExtra>(container)\n\nconst { x, y, k } = area.area.transform\nconst box = area.container.getBoundingClientRect()\nconst halfWidth = box.width / 2 / k\nconst halfHeight = box.height / 2 / k\n\nreturn { x: halfWidth - x / k, y: halfHeight - y / k }\n```\n\n----------------------------------------\n\nTITLE: Building Project Dependencies (Project Mode)\nDESCRIPTION: Command to build all project dependencies by scanning the current directory recursively.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/20.development/3.rete-kit.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrete-kit build --for ./my-project\n```\n\n----------------------------------------\n\nTITLE: Adding and Managing Custom HTML Elements in 3D Scene\nDESCRIPTION: Code examples for adding, updating geometry, reordering, and removing HTML elements within the 3D scene, enabling integration of HTML content with 3D objects.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\narea.area.content.add(element)\n\narea.area.content.updateGeometry(element, bufferGeometry)\n\narea.area.content.reorder(element, nextElement)\n\narea.area.content.remove(element)\n```\n\n----------------------------------------\n\nTITLE: Customizing Connections with a Custom Component in Lit\nDESCRIPTION: Code snippet demonstrating how to replace the default connection component with a custom implementation. It defines and registers a custom element for connections and configures the renderer to use it.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/5.lit.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomConnectionElement } from './CustomConnection'\n\ncustomElements.define(\"custom-connection\", CustomConnectionElement);\n\nrender.addPreset(Presets.classic.setup({\n  customize: {\n    connection() {\n      return ({ path }) => html`<custom-connection .path=${path}></custom-connection>`;\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Control Flow Ports in Rete.js v1 vs v2\nDESCRIPTION: Shows how to configure ports for control flow. V1 defines them in a component constructor, while v2 configures them through the engine creation with a callback function.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// v1\nthis.task = {\n    outputs: { exec: 'option', data: 'output' },\n    init(task) {\n        task.run('any data');\n        task.reset();\n    }\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// v2\nconst engine = new ControlFlowEngine<Schemes>(() => {\n  return {\n    inputs: () => [\"exec\"],\n    outputs: () => [\"exec\"]\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Auto-arrange Plugin Dependencies\nDESCRIPTION: Commands to install the required dependencies including the auto-arrange plugin, elkjs, and optional web-worker package.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.arrange.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-auto-arrange-plugin elkjs\n\nnpm i web-worker\n```\n\n----------------------------------------\n\nTITLE: Package Validation Commands\nDESCRIPTION: Commands for creating and testing package changes, including creating a tarball and installing it in test applications.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/23.contribution.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd dist && npm pack\n```\n\n----------------------------------------\n\nTITLE: Setting Editor Zoom Level in Rete.js\nDESCRIPTION: Code snippets to programmatically change the zoom level of a Rete.js editor. The first example shows basic zoom with respect to the top left boundary, and the second centers the zoom relative to the viewport.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait area.area.zoom(0.8, 0, 0);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst delta = 0.2;\nconst { k } = area.area.transform;\nconst box = area.container.getBoundingClientRect();\nconst x = box.width / 2 / k;\nconst y = box.height / 2 / k;\n\narea.area.zoom(k * (1 - delta), x * delta, y * delta);\n```\n\n----------------------------------------\n\nTITLE: Running Rete QA Tests\nDESCRIPTION: Command to execute Rete QA tests across multiple stacks (React.js, Vue.js, Angular, Svelte) and browsers (Chromium, Firefox, WebKit).\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/19.quality-assurance.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrete-qa test\n```\n\n----------------------------------------\n\nTITLE: Installing Three.js Dependencies for rete-area-3d-plugin\nDESCRIPTION: Command to install the required dependencies including rete-area-3d-plugin, Three.js, and TypeScript definitions for Three.js.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-area-3d-plugin three @types/three\n```\n\n----------------------------------------\n\nTITLE: Installing Rete CLI with npm\nDESCRIPTION: Command to install Rete CLI globally using npm. This makes the CLI available as a command-line tool across your system.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/20.development/2.rete-cli.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g rete-cli\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Prevention in Rete.js Area Plugin\nDESCRIPTION: This snippet demonstrates how to disable scroll prevention in the Rete.js Area Plugin by setting the zoom handler to null.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst area = new AreaPlugin(container)\n\narea.area.setZoomHandler(null)\n```\n\n----------------------------------------\n\nTITLE: Installing Rete.js Connection Reroute Plugin\nDESCRIPTION: Command to install the rete-connection-reroute-plugin package using npm, which enables connection rerouting functionality in Rete.js projects.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/13.reroute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-connection-reroute-plugin\n```\n\n----------------------------------------\n\nTITLE: Adding Node Cloning Capability\nDESCRIPTION: Example showing how to implement the clone method on a node class to enable the Clone option in the context menu for that node type.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.context-menu.md#2025-04-20_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nclass NodeA extends ClassicPreset.Node {\n  clone() {\n    return new NodeA()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dataflow Engine in Rete.js v1 vs v2\nDESCRIPTION: Demonstrates the difference between initializing and using the dataflow engine in v1 and v2. V1 uses Rete.Engine with explicit registration, while v2 uses DataflowEngine connected directly to the editor.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// v1\nconst engine = new Rete.Engine('demo@0.1.0');\n\nengine.register(myComponent);\n```\n\nLANGUAGE: ts\nCODE:\n```\n// v2\nimport { DataflowEngine } from 'rete-engine'\n\nconst engine = new DataflowEngine<Schemes>()\n\neditor.use(engine)\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Rete.js Project\nDESCRIPTION: Starts a development server with hot-reloading for the Rete.js project. This command is used during development to see live changes as you modify the code.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Linting and Fixing Rete.js Project Files\nDESCRIPTION: Runs the linter on the Rete.js project files and automatically fixes issues where possible. This command helps maintain code quality and consistency.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Configuring Control Flow Ports in Rete.js v2\nDESCRIPTION: Shows how to configure which ports handle control flow in version 2. This allows specifying dedicated inputs and outputs for control signals.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nconst engine = new ControlFlowEngine<Schemes>(() => {\n  return {\n    inputs: () => [\"exec\"],\n    outputs: () => [\"exec\"]\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Rete.js Dependencies with npm-check-updates\nDESCRIPTION: This command selectively updates all dependencies that begin with 'rete' to their latest versions using npm-check-updates with a regular expression pattern.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.FAQ.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx npm-check-updates /^rete/ --target @latest -u\n```\n\n----------------------------------------\n\nTITLE: Installing the Minimap Plugin for Rete.js\nDESCRIPTION: Install the rete-minimap-plugin package using npm which provides minimap functionality for Rete.js node editors.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/10.minimap.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-minimap-plugin\n```\n\n----------------------------------------\n\nTITLE: Connecting History Plugin to Rete.js\nDESCRIPTION: Code to import and initialize the HistoryPlugin and connect it to the area instance.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/14.undo-redo.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HistoryPlugin, HistoryActions } from \"rete-history-plugin\";\n\nconst history = new HistoryPlugin<Schemes, HistoryActions<Schemes>>();\n\narea.use(history);\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker Methods in Rete.js v1 vs v2\nDESCRIPTION: Shows how node processing methods are implemented differently between versions. V1 uses a worker method with explicit outputs assignment, while v2 uses a data method that returns values directly.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// v1\nworker(node, inputs, outputs){\n  outputs['num'] = node.data.num;\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// v2\ndata(inputs) {\n  const { left, right } = inputs\n\n  return { sum: left[0] + right[0] }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Rete.js Repository\nDESCRIPTION: Basic Git and npm commands for cloning the forked repository, installing dependencies and building the project. These commands are essential for setting up the local development environment.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/23.contribution.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <link>\\nnpm ci\\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Removing Connections in Rete.js\nDESCRIPTION: Shows how to remove a connection from the editor using its id property.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/3.editor.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait editor.removeConnection(connection.id)\n```\n\n----------------------------------------\n\nTITLE: Importing VuePlugin for Vue.js 2\nDESCRIPTION: TypeScript code showing how to import VuePlugin for use with Vue.js 2.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/2.vue.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VuePlugin, Presets, VueArea2D } from \"rete-vue-plugin/vue2\";\n```\n\n----------------------------------------\n\nTITLE: Setting up Classic Preset for History Plugin\nDESCRIPTION: Code to add the classic preset to the history plugin which tracks node/connection operations.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/14.undo-redo.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Presets } from \"rete-history-plugin\";\n\nhistory.addPreset(Presets.classic.setup())\n```\n\n----------------------------------------\n\nTITLE: Building Rete.js Project for Production\nDESCRIPTION: Compiles and minifies the Rete.js project for production deployment. This command creates optimized files ready for hosting on a web server.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Programmatically Opening the Context Menu\nDESCRIPTION: Code example demonstrating how to trigger the context menu programmatically by creating a PointerEvent with specific coordinates and emitting it through the area object.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.context-menu.md#2025-04-20_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst event = new PointerEvent('contextmenu', {\n  clientX: x,\n  clientY: y,\n})\n\nawait area.emit({ type: 'contextmenu', data: { event, context } })\n```\n\n----------------------------------------\n\nTITLE: Processing Data with Engine in Rete.js v1 vs v2\nDESCRIPTION: Compares how to initiate data processing with the engine. V1 requires passing data to the process method, while v2 fetches data directly using node IDs.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// v1\nawait engine.process(data);\n```\n\nLANGUAGE: ts\nCODE:\n```\n// v2\nengine.fetch(node.id)\n```\n\n----------------------------------------\n\nTITLE: Installing React Dependencies for Non-React Applications\nDESCRIPTION: Command to install React and ReactDOM dependencies when using the plugin in applications that don't already use React.js.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/1.react.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i react@18 react-dom@18\n```\n\n----------------------------------------\n\nTITLE: Excluding Nodes from Scopes Processing in Rete.js\nDESCRIPTION: Shows how to exclude specific nodes from being processed by the ScopesPlugin.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/8.scopes.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = new ScopesPlugin<Schemes>({\n  exclude: nodeId => excludedNodes.includes(nodeId)\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Component for All Nodes in Rete.js v1\nDESCRIPTION: Shows how to specify a default React component for all nodes when setting up the React render plugin in version 1.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\neditor.use(ReactRenderPlugin, { component: MyNode });\n```\n\n----------------------------------------\n\nTITLE: Retrieving History Information\nDESCRIPTION: Code to get the history snapshot or retrieve recent actions based on a time threshold.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/14.undo-redo.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst list = history.getHistorySnapshot()\nconst recentFor1s = history.getRecent(1000)\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Navigation Metadata\nDESCRIPTION: YAML frontmatter block defining navigation properties for the API documentation page, specifying the title and indicating it's a placeholder.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.api/index.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnavigation:\n  title: API\n  placeholder: true\n---\n```\n\n----------------------------------------\n\nTITLE: Fitting Viewport in Rete.js v1 vs v2\nDESCRIPTION: Compares how to fit all nodes in the viewport between versions. Version 1 uses a static method on AreaPlugin while version 2 uses AreaExtensions with explicit node selection.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\nimport AreaPlugin from \"rete-area-plugin\";\n\nAreaPlugin.zoomAt(editor);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nimport { AreaExtensions } from \"rete-area-plugin\";\n\nAreaExtensions.zoomAt(area, editor.getNodes());\n```\n\n----------------------------------------\n\nTITLE: Positioning Multiple Editors in 3D Space\nDESCRIPTION: Code to position multiple editors in 3D space by rotating and translating the canvas of the secondary editor, preventing overlap with the main editor.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.3d/1.index.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst canvas = secondaryArea.area.getCanvas()\n\ncanvas.rotateY(Math.PI / 2)\ncanvas.get(sharedArea)?.translateX(500)\n```\n\n----------------------------------------\n\nTITLE: Installing rete-svelte-plugin Dependencies\nDESCRIPTION: Command to install the necessary dependencies for using Svelte with Rete.js, including the Svelte plugin, render utilities, and Sass for styling.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/4.svelte.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-svelte-plugin rete-render-utils sass\n```\n\n----------------------------------------\n\nTITLE: Rete.js API Overview Configuration\nDESCRIPTION: Markdown frontmatter configuration for the API documentation page, defining metadata like description and navigation properties.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/24.api/0.overview.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Learn more about Rete.js' packages and their API documentation. Explore the packages to learn more about their capabilities and features\nkeywords: api,jsdoc,typedoc\nnavigation:\n  title: Overview\n  overview: true\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for 3D Material Tool Page\nDESCRIPTION: YAML configuration block defining metadata for the page including image source, description, keywords, and navigation properties.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/22.allmatter.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nimage:\n  src: allmatter.png\ndescription: This 3D material authoring tool example demonstrates the use of Rete.js for data processing and showcases the framework's capabilities. The project serves as a reference for migrating projects from v1\nkeywords: 3d,material,procedural material,dataflow,migration\nnavigation:\n  preview: allmatter.png\n  top: 4\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Rete QA Tool via npm\nDESCRIPTION: Command to globally install the Rete QA tool using npm. This tool is essential for conducting regression UI testing on different combinations of supported features.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/19.quality-assurance.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g rete-qa\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Selector in Rete.js\nDESCRIPTION: This snippet shows how to remove an element from the selector in Rete.js.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/5.selectable/0.index.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nselector.remove({ id, label })\n```\n\n----------------------------------------\n\nTITLE: Configuring Timing for History Action Grouping\nDESCRIPTION: Setting the timing threshold for grouping history actions together.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/14.undo-redo.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst history = new HistoryPlugin<Schemes>({ timing: 200 });\n```\n\n----------------------------------------\n\nTITLE: Installing rete-structures Package\nDESCRIPTION: Command to install the rete-structures package which provides advanced methods for working with graph data structures.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-structures\n```\n\n----------------------------------------\n\nTITLE: Installing Connection Path Plugin Dependencies for Rete.js\nDESCRIPTION: Command to install the necessary dependencies for implementing custom connection paths in Rete.js. Requires both the rete-connection-path-plugin and d3-shape packages.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/12.connection-path.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-connection-path-plugin d3-shape\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration allows all user agents (web crawlers) to access the entire website with no restrictions. The User-agent: * directive targets all bots, and the empty Disallow: directive indicates no paths are restricted.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/public/robots.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Adding Input Controls to Rete.js Nodes\nDESCRIPTION: TypeScript code demonstrating how to add a numeric input control to a Rete.js node using ClassicPreset.InputControl. Defines initial value, readonly state, and change handler.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/2.renderers/4.svelte.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnode.addControl('my-control', new ClassicPreset.InputControl(\"number\", {\n  initial: 0,\n  readonly: false,\n  change(value) { }\n}))\n```\n\n----------------------------------------\n\nTITLE: Creating New Application with Rete Kit (Manual Options)\nDESCRIPTION: Command to create a new application with specific options including name, stack, version, features, and dependency aliases.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/20.development/3.rete-kit.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrete-kit app --name <name> --stack <stack> --stack-version <version> --features <features> --deps-alias <deps-alias>\n```\n\n----------------------------------------\n\nTITLE: Installing rete-comment-plugin in Node.js\nDESCRIPTION: Command to install the rete-comment-plugin package using npm.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/15.comments.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-comment-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Readonly Plugin Dependencies\nDESCRIPTION: Command to install the rete-readonly-plugin package using npm\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/7.readonly.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-readonly-plugin\n```\n\n----------------------------------------\n\nTITLE: Finding Orphan Nodes Using rete-structures in TypeScript\nDESCRIPTION: Identifies nodes without a parent property, which are top-level nodes in hierarchical structures.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).orphans();\n```\n\n----------------------------------------\n\nTITLE: Finding Sibling Nodes with rete-structures\nDESCRIPTION: Retrieves nodes that share the same parent as the selected node. This includes nodes with no parent if the selected node also has no parent.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).siblings((n) => n.id === selectedNodeId)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Rete.js Project\nDESCRIPTION: Installs all necessary dependencies for the Rete.js project using npm. This command should be run after cloning the repository to set up the project locally.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Rete.js Examples Overview Page\nDESCRIPTION: YAML frontmatter configuration that defines metadata for the Examples overview page of Rete.js documentation. It includes title, description, keywords, sharing options, and navigation settings.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/0.index.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Examples overview\ndescription: This page provides a comprehensive list of examples and previews showcasing various types of node editors or visual workflows that have been created using Rete.js\nkeywords: examples overview,examples,pro examples\nshare:\n  title: Overview of examples powered by Rete.js\noverview: true\nnavigation:\n  noPreview: true\n  title: Overview\n---\n```\n\n----------------------------------------\n\nTITLE: Examples Components Integration in Markdown\nDESCRIPTION: Markdown code that includes two examples-overview components with different configurations. The components display different sets of examples based on the 'top' parameter, showing featured examples when true and other examples when false.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/examples/0.index.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Overview\n\n:examples-overview{:top='true'}\n\n:examples-overview{:top='false'}\n```\n\n----------------------------------------\n\nTITLE: Rendering the Context Menu with Framework-Specific Plugins\nDESCRIPTION: Code to add rendering support for the context menu using one of the available framework presets (React, Vue, Angular, Svelte, or Lit).\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.context-menu.md#2025-04-20_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { Presets } from \"rete-react-plugin\"; // or  rete-vue-plugin, rete-angular-plugin, rete-svelte-plugin, @retejs/lit-plugin\n\nrender.addPreset(Presets.contextMenu.setup());\n```\n\n----------------------------------------\n\nTITLE: Translating Nodes in Rete.js v1 vs v2\nDESCRIPTION: Compares how to move nodes in the editor between versions. Version 1 requires accessing the node view directly, while version 2 uses the area plugin's translate method.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/25.migration.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// v1\neditor.view.nodes.get(node).translate(x, y)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nawait area.translate(node.id, { x, y })\n```\n\n----------------------------------------\n\nTITLE: Setting Up Connection Interaction Presets in Rete.js\nDESCRIPTION: Demonstrates how to configure the classic connection interaction preset using the rete-connection-plugin, which provides functionality similar to framework v1.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/2.presets.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectionPlugin, Presets as ConnectionPresets } from 'rete-connection-plugin'\n\nconst connection = new ConnectionPlugin<Schemes, AreaExtra>()\n\nconnection.addPreset(ConnectionPresets.classic.setup())\n```\n\n----------------------------------------\n\nTITLE: Fitting Viewport in Rete.js v1 vs v2\nDESCRIPTION: Shows how to fit the viewport to display all nodes. V1 uses a static method on AreaPlugin, while v2 uses AreaExtensions utility with the area instance.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n// v1\nimport AreaPlugin from \"rete-area-plugin\";\n\nAreaPlugin.zoomAt(editor);\n```\n\nLANGUAGE: ts\nCODE:\n```\n// v2\nimport { AreaExtensions } from \"rete-area-plugin\";\n\nAreaExtensions.zoomAt(area, editor.getNodes());\n```\n\n----------------------------------------\n\nTITLE: Finding Children of a Node with rete-structures\nDESCRIPTION: Retrieves direct descendants (children) of the selected node in a parent-child relationship structure. This requires nodes to have a parent field.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).children((n) => n.id === selectedNodeId);\n```\n\n----------------------------------------\n\nTITLE: Finding Parents of a Node with rete-structures\nDESCRIPTION: Retrieves the parent nodes of the selected node in a hierarchical structure. This is used for nodes with parent-child relationships.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/4.data-structures.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nstructures(editor).parents((n) => n.id === selectedNodeId);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Control Flow Plugin in Rete.js v1 vs v2\nDESCRIPTION: Shows the initialization of control flow functionality. V1 uses rete-task-plugin while v2 uses a dedicated ControlFlowEngine from rete-engine package.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// v1\nimport TaskPlugin from 'rete-task-plugin';\n\neditor.use(TaskPlugin);\n```\n\nLANGUAGE: ts\nCODE:\n```\n// v2\nimport { ControlFlowEngine } from 'rete-engine'\n\nconst engine = new ControlFlowEngine<Schemes>()\n\neditor.use(engine)\n```\n\n----------------------------------------\n\nTITLE: Signal Flow Demonstration\nDESCRIPTION: Shows the output of signal propagation between parent and child scopes, demonstrating the order of execution and signal handling.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/3.concepts/1.plugin-system.md#2025-04-20_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nparent 1\nchild 1\nchild a\n```\n\n----------------------------------------\n\nTITLE: Installing rete-dock-plugin with npm\nDESCRIPTION: Command to install the rete-dock-plugin package using npm, which is required to implement a dock menu in a Rete.js application.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/11.dock-menu.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-dock-plugin\n```\n\n----------------------------------------\n\nTITLE: Setting Default Node Component in Rete.js v1\nDESCRIPTION: Shows how to specify a default component for all nodes in v1 using the ReactRenderPlugin options.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/25.migration.md#2025-04-20_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// v1\neditor.use(ReactRenderPlugin, { component: MyNode });\n```\n\n----------------------------------------\n\nTITLE: Installing rete-structures Package in npm\nDESCRIPTION: Command to install the rete-structures package which provides advanced graph manipulation methods for Rete.js applications.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/uk/docs/4.guides/4.data-structures.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-structures\n```\n\n----------------------------------------\n\nTITLE: Installing rete-context-menu-plugin with npm\nDESCRIPTION: Command to install the context menu plugin dependency for Rete.js using npm.\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/6.context-menu.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i rete-context-menu-plugin\n```\n\n----------------------------------------\n\nTITLE: Removing Connection Plugin\nDESCRIPTION: Code comment indicating the removal of ConnectionPlugin for readonly functionality\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/7.readonly.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\narea.use(connection); // should be removed\n```\n\n----------------------------------------\n\nTITLE: Enabling Readonly Mode\nDESCRIPTION: Code to enable readonly mode in the editor after initial setup\nSOURCE: https://github.com/retejs/retejs.org/blob/main/src/content/en/docs/4.guides/7.readonly.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly.enable();\n```"
  }
]