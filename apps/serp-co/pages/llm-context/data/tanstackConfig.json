[
  {
    "owner": "tanstack",
    "repo": "config",
    "content": "TITLE: ESLint Configuration Setup\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure ESLint in a TanStack project using the `@tanstack/eslint-config` package. It imports the configuration and exports it as the default ESLint configuration. Custom rules can be added in a separate object within the exported array. Requires ESLint v9+ installed.\nSOURCE: https://github.com/tanstack/config/blob/main/docs/eslint.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { tanstackConfig } from '@tanstack/eslint-config'\n// OR\nimport { tanstackConfig } from '@tanstack/config/eslint'\n\nexport default [\n  ...tanstackConfig,\n  {\n    // Custom rules go here\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration with TanStack Config\nDESCRIPTION: This TypeScript snippet demonstrates how to configure Vite using `mergeConfig` and `tanstackViteConfig` from the `@tanstack/config/vite` or `@tanstack/vite-config` package. It merges a custom Vite configuration with the TanStack-specific settings, setting entry point and source directory.\nSOURCE: https://github.com/tanstack/config/blob/main/docs/vite.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig, mergeConfig } from 'vite'\n\nimport { tanstackViteConfig } from '@tanstack/config/vite'\n// OR\nimport { tanstackViteConfig } from '@tanstack/vite-config'\n\nconst config = defineConfig({\n  // Framework plugins, vitest config, etc.\n})\n\nexport default mergeConfig(\n  config,\n  tanstackViteConfig({\n    entry: './src/index.ts',\n    srcDir: './src',\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Import and Execute Publish Function (TypeScript)\nDESCRIPTION: Demonstrates how to import the `publish` function from the `@tanstack/config/publish` or `@tanstack/publish-config` package and execute it with configuration options. The function is used to publish packages based on provided configurations. It uses a promise to handle the asynchronous operation and logs success or error messages.\nSOURCE: https://github.com/tanstack/config/blob/main/docs/publish.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publish } from '@tanstack/config/publish'\n// OR\nimport { publish } from '@tanstack/publish-config'\n\npublish({\n  branchConfigs: configOpts.branchConfigs,\n  packages: configOpts.packages,\n  rootDir: configOpts.rootDir,\n  branch: process.env.BRANCH,\n  tag: process.env.TAG,\n  ghToken: process.env.GH_TOKEN,\n})\n  .then(() => {\n    console.log('Successfully published packages!')\n  })\n  .catch(console.error)\n```\n\n----------------------------------------\n\nTITLE: package.json Exports Configuration\nDESCRIPTION: This JSON snippet defines the \"exports\" field in package.json, specifying how modules are exposed for both ESM and CJS environments. It configures different entry points for import and require, along with their corresponding TypeScript definition files. The snippet is crucial for dual package publishing.\nSOURCE: https://github.com/tanstack/config/blob/main/docs/vite.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"exports\": {\n    \".\": {\n      \"import\": {\n        \"types\": \"./dist/esm/index.d.ts\",\n        \"default\": \"./dist/esm/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./dist/cjs/index.d.cts\",\n        \"default\": \"./dist/cjs/index.cjs\"\n      }\n    },\n    \"./package.json\": \"./package.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable ESM Support (JSON)\nDESCRIPTION: This JSON snippet shows how to enable ECMAScript Modules (ESM) support in a `package.json` file.  Setting the `type` property to `module` allows the use of `import` statements instead of `require`. This configuration is a prerequisite for using the programmatic `publish` function with `import`.\nSOURCE: https://github.com/tanstack/config/blob/main/docs/publish.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install TanStack Config Packages with pnpm\nDESCRIPTION: Installs various TanStack Config packages as development dependencies using pnpm. This includes configurations for AIO, ESLint, publishing, Typedoc, and Vite.\nSOURCE: https://github.com/tanstack/config/blob/main/docs/overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# AIO\npnpm add -D @tanstack/config\n\n# ESLint\npnpm add -D @tanstack/eslint-config\n\n# Publish\npnpm add -D @tanstack/publish-config\n\n# Typedoc\npnpm add -D @tanstack/typedoc-config\n\n# Vite\npnpm add -D @tanstack/vite-config\n```\n\n----------------------------------------\n\nTITLE: Enabling and Preparing Corepack\nDESCRIPTION: These commands enable and prepare Corepack, a tool for managing package managers. This ensures that the correct version of pnpm is used for the project.\nSOURCE: https://github.com/tanstack/config/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable && corepack prepare\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: This command installs the necessary dependencies for the TanStack Config project. It uses pnpm, a package manager, to manage project dependencies.\nSOURCE: https://github.com/tanstack/config/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Using NVM to Select Node Version\nDESCRIPTION: This command uses NVM (Node Version Manager) to select the Node.js version specified in the `.nvmrc` file. This ensures that the development environment uses the correct Node.js version.\nSOURCE: https://github.com/tanstack/config/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnvm use\n```\n\n----------------------------------------\n\nTITLE: Building All Packages\nDESCRIPTION: This command builds all the packages within the TanStack Config repository. This prepares the code for development and testing.\nSOURCE: https://github.com/tanstack/config/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:all\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: This command starts the development server, allowing developers to preview and test their changes in real-time. It watches for file changes and automatically rebuilds the project.\nSOURCE: https://github.com/tanstack/config/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Setting up tanstack.com for Local Development\nDESCRIPTION: These commands navigate into the `tanstack.com` directory, install its dependencies using pnpm, and then start the development server, which will run the documentation locally.\nSOURCE: https://github.com/tanstack/config/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories\nDESCRIPTION: These commands clone the `TanStack/config` and `TanStack/tanstack.com` repositories into the `tanstack` directory. A shallow clone is used for `tanstack.com` to reduce the download size and time.\nSOURCE: https://github.com/tanstack/config/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/config.git\n# We probably don't need all the branches and commit history\n# from the `tanstack.com` repo, so let's just create a shallow\n# clone of the latest version of the `main` branch.\n# Read more about shallow clones here:\n# https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/#user-content-shallow-clones\ngit clone git@github.com:TanStack/tanstack.com.git --depth=1 --single-branch --branch=main\n```\n\n----------------------------------------\n\nTITLE: Creating Tanstack Directory\nDESCRIPTION: This command creates a new directory named `tanstack` to house the `config` and `tanstack.com` repositories for local development of the documentation.\nSOURCE: https://github.com/tanstack/config/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Run Auto-build files\nDESCRIPTION: This command will auto-build the files when you are using Gitpod for online development.\nSOURCE: https://github.com/tanstack/config/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Development in /docs\nDESCRIPTION: This command will run the development environment inside of the docs folder when you are using Gitpod for online development.\nSOURCE: https://github.com/tanstack/config/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```"
  }
]