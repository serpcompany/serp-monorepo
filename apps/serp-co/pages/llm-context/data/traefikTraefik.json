[
  {
    "owner": "traefik",
    "repo": "traefik",
    "content": "TITLE: Configuring Traefik Reverse Proxy with Docker Compose\nDESCRIPTION: A Docker Compose configuration that sets up Traefik as a reverse proxy with the web UI enabled. It exposes ports 80 for HTTP traffic and 8080 for the Traefik dashboard, and mounts the Docker socket to allow Traefik to detect containers.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nservices:\n  reverse-proxy:\n    # The official v3 Traefik docker image\n    image: traefik:v3.4\n    # Enables the web UI and tells Traefik to listen to docker\n    command: --api.insecure=true --providers.docker\n    ports:\n      # The HTTP port\n      - \"80:80\"\n      # The Web UI (enabled by --api.insecure=true)\n      - \"8080:8080\"\n    volumes:\n      # So that Traefik can listen to the Docker events\n      - /var/run/docker.sock:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik with a Catchall Router to Replace 404 Responses with 503\nDESCRIPTION: This configuration demonstrates how to create a catchall router with the lowest priority that returns a 503 Service Unavailable response instead of a 404 Not Found. It consists of both static and dynamic configuration files for Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\n# traefik.yml\n\nentryPoints:\n  web:\n    address: :80\n\nproviders:\n  file:\n    filename: dynamic.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# dynamic.yaml\n\nhttp:\n  routers:\n    catchall:\n      # attached only to web entryPoint\n      entryPoints:\n        - \"web\"\n      # catchall rule\n      rule: \"PathPrefix(`/`)\"\n      service: unavailable\n      # lowest possible priority\n      # evaluated when no other router is matched\n      priority: 1\n\n  services:\n    # Service that will always answer a 503 Service Unavailable response\n    unavailable:\n      loadBalancer:\n        servers: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Challenge for ACME in Traefik\nDESCRIPTION: Configuration for using the HTTP-01 challenge with a certificate resolver. This challenge provisions an HTTP resource and requires the specified entry point to be reachable through port 80.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: \":80\"\n\n  websecure:\n    address: \":443\"\n\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      httpChallenge:\n        entryPoint: web\n```\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n\n  [entryPoints.websecure]\n    address = \":443\"\n\n[certificatesResolvers.myresolver.acme]\n  # ...\n  [certificatesResolvers.myresolver.acme.httpChallenge]\n    entryPoint = \"web\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.web.address=:80\n--entryPoints.websecure.address=:443\n# ...\n--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP and TCP Routing with YAML in Traefik\nDESCRIPTION: Complete YAML configuration example that includes both HTTP and TCP routing, with TLS termination for TCP connections to a service named whoami-tcp.\n\nLANGUAGE: yaml\nCODE:\n```\n# http routing section\nhttp:\n\n  routers:\n    # Define a connection between requests and services\n    to-whoami:\n      rule: Host(`example.com`) && PathPrefix(`/whoami/`)\n      # If the rule matches, applies the middleware\n      middlewares:\n      - test-user\n      # If the rule matches, forward to the whoami service (declared below)\n      service: whoami\n\n  middlewares:\n    # Define an authentication mechanism\n    test-user:\n      basicAuth:\n        users:\n        - test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\n\n  services:\n    # Define how to reach an existing service on our infrastructure\n    whoami:\n      loadBalancer:\n        servers:\n        - url: http://private/whoami-service\ntcp:\n\n  routers:\n    to-whoami-tcp:\n      service: whoami-tcp\n      rule: HostSNI(`whoami-tcp.example.com`)\n      tls: {}\n\n  services:\n    whoami-tcp:\n      loadBalancer:\n        servers:\n        - address: xx.xx.xx.xx:xx\n```\n\n----------------------------------------\n\nTITLE: Deploying Traefik Proxy on Kubernetes\nDESCRIPTION: This YAML creates a Deployment for Traefik Proxy, configuring it to use the previously created ServiceAccount. It enables the dashboard in insecure mode and configures Traefik to use Kubernetes Ingress resources as its dynamic configuration provider.\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: traefik-deployment\n  labels:\n    app: traefik\n\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: traefik\n  template:\n    metadata:\n      labels:\n        app: traefik\n    spec:\n      serviceAccountName: traefik-account\n      containers:\n        - name: traefik\n          image: traefik:v3.4\n          args:\n            - --api.insecure\n            - --providers.kubernetesingress\n          ports:\n            - name: web\n              containerPort: 80\n            - name: dashboard\n              containerPort: 8080\n```\n\n----------------------------------------\n\nTITLE: Binding ClusterRole to ServiceAccount for Traefik\nDESCRIPTION: This YAML defines a ClusterRoleBinding that associates the previously created ClusterRole with the Traefik ServiceAccount, effectively granting the permissions to Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: traefik-role-binding\n\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: traefik-role\nsubjects:\n  - kind: ServiceAccount\n    name: traefik-account\n    namespace: default # This tutorial uses the \"default\" K8s namespace.\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik EntryPoints on Ports 80 & 443 (YAML, TOML, CLI)\nDESCRIPTION: Example showing how to configure two EntryPoints in Traefik: 'web' for HTTP traffic on port 80 and 'websecure' for HTTPS traffic on port 443. The configuration is provided in YAML, TOML, and CLI formats.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  web:\n    address: \":80\"\n\n  websecure:\n    address: \":443\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n\n  [entryPoints.websecure]\n    address = \":443\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.web.address=:80\n--entryPoints.websecure.address=:443\n```\n\n----------------------------------------\n\nTITLE: Setting Key Type for Certificate Generation in Traefik\nDESCRIPTION: Configuration for specifying the key type used for generating certificate private keys. Allows values 'EC256', 'EC384', 'RSA2048', 'RSA4096', 'RSA8192'.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      keyType: 'RSA4096'\n      # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  keyType = \"RSA4096\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.keyType=RSA4096\n# ...\n```\n\n----------------------------------------\n\nTITLE: Launching Traefik with Docker Compose\nDESCRIPTION: Command to start the Traefik reverse proxy in detached mode using Docker Compose.\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d reverse-proxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik with YAML File\nDESCRIPTION: A YAML example for Traefik's static configuration in a file. It defines entry points for HTTP and HTTPS ports, enables Docker as a provider, activates the dashboard, and sets the logging level.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: \":80\"\n  websecure:\n    address: \":443\"\n\nproviders:\n  docker: {}\n\napi:\n  dashboard: true\n\nlog:\n  level: INFO\n```\n\n----------------------------------------\n\nTITLE: Enabling File Provider in Traefik Configuration\nDESCRIPTION: Configuration to enable the File provider in Traefik, which allows defining routing configuration in static files. The file provider can be set up in either YAML or TOML format to specify the directory where dynamic configuration files are located.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  file:\n    directory: \"/path/to/dynamic/conf\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.file]\n  directory = \"/path/to/dynamic/conf\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Secure gRPC Client in Go\nDESCRIPTION: Go code snippet showing how to modify a standard gRPC client to use TLS with self-signed certificates. The code reads certificate files, creates a certificate pool, creates TLS credentials, and configures the gRPC client to use them.\n\nLANGUAGE: go\nCODE:\n```\n// ...\n\n// Read cert file\nfrontendCert, _ := os.ReadFile(\"./frontend.cert\")\n\n// Create CertPool\nroots := x509.NewCertPool()\nroots.AppendCertsFromPEM(frontendCert)\n\n// Create credentials\ncredsClient := credentials.NewClientTLSFromCert(roots, \"\")\n\n// Dial with specific Transport (with credentials)\nconn, err := grpc.Dial(\"frontend.local:4443\", grpc.WithTransportCredentials(credsClient))\nif err != nil {\n    log.Fatalf(\"did not connect: %v\", err)\n}\n\ndefer conn.Close()\nclient := pb.NewGreeterClient(conn)\n\nname := \"World\"\nr, err := client.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring allowExternalNameServices in Traefik Kubernetes CRD Provider\nDESCRIPTION: Allows IngressRoutes to reference ExternalName services when set to true.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesCRD:\n    allowExternalNameServices: true\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesCRD]\n  allowExternalNameServices = true\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetescrd.allowexternalnameservices=true\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Wildcard Certificate with OpenSSL in Bash\nDESCRIPTION: This bash script generates a self-signed wildcard SSL certificate for Traefik. It creates a private key, certificate signing request with specified subject fields, and a self-signed certificate valid for 10 years (3650 days). The certificate is created for the '*.acme.wtf' domain and stored in a specified SSL directory.\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\n# Specify where we will install\n# the wildcard certificate\nSSL_DIR=\"./ssl\"\n\n# Set the wildcarded domain\n# we want to use\nDOMAIN=\"*.acme.wtf\"\n\n# A blank passphrase\nPASSPHRASE=\"\"\n\n# Set our CSR variables\nSUBJ=\"\nC=FR\nST=MP\nO=\nlocalityName=Toulouse\ncommonName=$DOMAIN\norganizationalUnitName=Traefik\nemailAddress=\n\"\n\n# Create our SSL directory\n# in case it doesn't exist\nsudo mkdir -p \"$SSL_DIR\"\n\n# Generate our Private Key, CSR and Certificate\nsudo openssl genrsa -out \"$SSL_DIR/wildcard.key\" 2048\nsudo openssl req -new -subj \"$(echo -n \"$SUBJ\" | tr \"\\n\" \"/\")\" -key \"$SSL_DIR/wildcard.key\" -out \"$SSL_DIR/wildcard.csr\" -passin pass:$PASSPHRASE\nsudo openssl x509 -req -days 3650 -in \"$SSL_DIR/wildcard.csr\" -signkey \"$SSL_DIR/wildcard.key\" -out \"$SSL_DIR/wildcard.crt\"\nsudo rm -f \"$SSL_DIR/wildcard.csr\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum TLS Version in Kubernetes\nDESCRIPTION: Example of configuring minimum TLS versions in Kubernetes using TLSOption resources. Creates two options: a default requiring TLS 1.2 and another requiring TLS 1.3.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: default\n  namespace: default\n\nspec:\n  minVersion: VersionTLS12\n\n---\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: mintls13\n  namespace: default\n\nspec:\n  minVersion: VersionTLS13\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Domain for Sticky Sessions in Kubernetes Ingress\nDESCRIPTION: Specifies the domain attribute for the sticky session cookie, determining to which domains the cookie should be sent.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.ingress.kubernetes.io/service.sticky.cookie.domain: \"foo.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Traefik with Let's Encrypt TLS Challenge\nDESCRIPTION: A Docker Compose configuration that sets up Traefik as a reverse proxy with automatic SSL certificate generation using Let's Encrypt's TLS challenge method. It includes configuration for Traefik's entry points, certificate resolver, and a sample whoami service.\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"content/user-guides/docker-compose/acme-tls/docker-compose.yml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes IngressRoute CRD in YAML\nDESCRIPTION: A complete example of IngressRoute configuration that includes entryPoints definition, routing rules based on Host, middleware attachment, observability settings, service targeting, and TLS configuration with certificate generation and custom options.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test-name\n  namespace: apps\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - kind: Rule\n    # Rule on the Host\n    match: Host(`test.example.com`)\n    # Attach a middleware\n    middlewares:\n    - name: middleware1\n      namespace: apps\n    # Enable Router observability\n    observability:\n      accesslogs: true\n      metrics: true\n      tracing: true\n    # Set a pirority\n    priority: 10\n    services:\n    # Target a Kubernetes Support\n    - kind: Service\n      name: foo\n      namespace: apps\n      # Customize the connection between Traefik and the backend\n      passHostHeader: true\n      port: 80\n      responseForwarding:\n        flushInterval: 1ms\n      scheme: https\n      sticky:\n        cookie:\n          httpOnly: true\n          name: cookie\n          secure: true\n      strategy: RoundRobin\n      weight: 10\n  tls:\n    # Generate a TLS certificate using a certificate resolver\n    certResolver: foo\n    domains:\n    - main: example.net\n      sans:\n      - a.example.net\n      - b.example.net\n    # Customize the TLS options\n    options:\n      name: opt\n      namespace: apps\n    # Add a TLS certificate from a Kubernetes Secret\n    secretName: supersecret\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Cipher Suites in Kubernetes\nDESCRIPTION: Example of configuring specific cipher suites in Kubernetes using a TLSOption resource. Restricts connections to use only specified secure cipher suites.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: default\n  namespace: default\n\nspec:\n  cipherSuites:\n    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n```\n\n----------------------------------------\n\nTITLE: Using Path, PathPrefix, and PathRegexp Matchers in Traefik HTTP Router Rules\nDESCRIPTION: Examples of using path-based matchers to route requests based on URL paths. Shows exact matching with Path, prefix matching with PathPrefix, and pattern matching with PathRegexp.\n\nLANGUAGE: go\nCODE:\n```\nPath(`/products`)\n```\n\nLANGUAGE: go\nCODE:\n```\nPathPrefix(`/products`)\n```\n\nLANGUAGE: go\nCODE:\n```\nPathRegexp(`^/products/(shoes\\|socks)/[0-9]+$`)\n```\n\nLANGUAGE: go\nCODE:\n```\nPathRegexp(`\\.(jpeg\\|jpg\\|png)$`)\n```\n\nLANGUAGE: go\nCODE:\n```\nHostRegexp(`(?i)^/products`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Authentication (mTLS) in TOML\nDESCRIPTION: Implements mutual TLS authentication in TOML format, requiring verified client certificates. This configuration specifies CA files for certificate verification and requires valid client certificates.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[tls.options]\n  [tls.options.default]\n    [tls.options.default.clientAuth]\n      # in PEM format. each file can contain multiple CAs.\n      caFiles = [\"tests/clientca1.crt\", \"tests/clientca2.crt\"]\n      clientAuthType = \"RequireAndVerifyClientCert\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Traefik with Let's Encrypt HTTP Challenge\nDESCRIPTION: This Docker Compose configuration sets up Traefik as a reverse proxy with automatic certificate generation using Let's Encrypt HTTP challenge. It defines both HTTP and HTTPS entrypoints, configures the certificate resolver, and exposes a simple whoami service with HTTPS enabled.\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"content/user-guides/docker-compose/acme-http/docker-compose.yml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Curve Preferences in Kubernetes\nDESCRIPTION: Creates a TLSOption resource in Kubernetes to specify preferred elliptic curves for TLS handshake, prioritizing CurveP521 and CurveP384.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: default\n  namespace: default\n\nspec:\n  curvePreferences:\n    - CurveP521\n    - CurveP384\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Specific HTTP to HTTPS Redirection in Traefik v2 with Docker & Swarm\nDESCRIPTION: Example of domain-specific HTTP to HTTPS redirection in Traefik v2 using Docker & Swarm labels. Shows how to set up separate routers for HTTP and HTTPS traffic with a middleware for redirection.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  traefik.http.routers.app.rule: Host(`example.net`)\n  traefik.http.routers.app.entrypoints: web\n  traefik.http.routers.app.middlewares: https_redirect\n\n  traefik.http.routers.appsecured.rule: Host(`example.net`)\n  traefik.http.routers.appsecured.entrypoints: websecure\n  traefik.http.routers.appsecured.tls: true\n\n  traefik.http.middlewares.https_redirect.redirectscheme.scheme: https\n  traefik.http.middlewares.https_redirect.redirectscheme.permanent: true\n```\n\n----------------------------------------\n\nTITLE: Global Metrics in Prometheus Format\nDESCRIPTION: List of global metrics provided by Traefik in Prometheus format, including configuration reloads, open connections, and TLS certificate expiration metrics.\n\nLANGUAGE: prom\nCODE:\n```\ntraefik_config_reloads_total\ntraefik_config_last_reload_success\ntraefik_open_connections\ntraefik_tls_certs_not_after\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Headers in Traefik (YAML)\nDESCRIPTION: This YAML configuration enables security features such as frame denial and browser XSS filtering using Traefik's Headers middleware. This helps protect applications against common web vulnerabilities.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    testHeader:\n      headers:\n        frameDeny: true\n        browserXssFilter: true\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS-only Router in Traefik\nDESCRIPTION: Example of configuring a Traefik router to accept HTTPS requests only. This configuration will terminate TLS connections at the router level, sending decrypted data to the services.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    Router-1:\n      rule: \"Host(`foo-domain`) && Path(`/foo-path/`)\"\n      service: service-id\n      # will terminate the TLS request\n      tls: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.Router-1]\n    rule = \"Host(`foo-domain`) && Path(`/foo-path/`)\"\n    service = \"service-id\"\n    # will terminate the TLS request\n    [http.routers.Router-1.tls]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Socket Endpoint in YAML\nDESCRIPTION: Configuration for connecting Traefik to the Docker daemon via Unix socket using YAML format. This is the standard way to connect to Docker on the local machine.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    endpoint: \"unix:///var/run/docker.sock\"\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic HTTP Routing with TOML in Traefik\nDESCRIPTION: TOML configuration for dynamic HTTP routing that defines a router, middleware for authentication, and a service with load balancing for the whoami application.\n\nLANGUAGE: toml\nCODE:\n```\n# http routing section\n[http]\n  [http.routers]\n     # Define a connection between requests and services\n     [http.routers.to-whoami]\n      rule = \"Host(`example.com`) && PathPrefix(`/whoami/`)\"\n      # If the rule matches, applies the middleware\n      middlewares = [\"test-user\"]\n      # If the rule matches, forward to the whoami service (declared below)\n      service = \"whoami\"\n\n  [http.middlewares]\n    # Define an authentication mechanism\n    [http.middlewares.test-user.basicAuth]\n      users = [\"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"]\n\n  [http.services]\n    # Define how to reach an existing service on our infrastructure\n    [http.services.whoami.loadBalancer]\n      [[http.services.whoami.loadBalancer.servers]]\n        url = \"http://private/whoami-service\"\n```\n\n----------------------------------------\n\nTITLE: Whoami Service Output Example\nDESCRIPTION: Sample output from the 'whoami' service showing the container's hostname and IP address.\n\nLANGUAGE: yaml\nCODE:\n```\nHostname: a656c8ddca6c\nIP: 172.27.0.3\n#...\n```\n\n----------------------------------------\n\nTITLE: Running Traefik with Custom Configuration File\nDESCRIPTION: Command to start Traefik with a specific configuration file located at a custom path. This overrides the default configuration file lookup behavior.\n\nLANGUAGE: bash\nCODE:\n```\ntraefik --configFile=foo/bar/myconfigfile.yml\n```\n\n----------------------------------------\n\nTITLE: Creating ServiceAccount for Traefik in Kubernetes\nDESCRIPTION: This YAML creates a dedicated ServiceAccount named 'traefik-account' that will be used by Traefik to interact with the Kubernetes API.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: traefik-account\n```\n\n----------------------------------------\n\nTITLE: Disabling Access Logs for HTTP Router in TOML\nDESCRIPTION: Example of disabling access logs for a specific HTTP router using the File Provider in TOML format. The configuration sets accessLogs to false in the observability section.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.my-router]\n    rule = \"Path(`/foo`)\"\n    service = \"service-foo\"\n    [http.routers.my-router.observability]\n      accessLogs = false\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Redirection in Traefik\nDESCRIPTION: Configuration to redirect HTTP traffic from port 80 to HTTPS on port 443, using the entryPoint redirection feature.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: :80\n    http:\n      redirections:\n        entryPoint:\n          to: websecure\n          scheme: https\n\n  websecure:\n    address: :443\n```\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints.web]\n  address = \":80\"\n\n  [entryPoints.web.http]\n    [entryPoints.web.http.redirections]\n      [entryPoints.web.http.redirections.entryPoint]\n        to = \"websecure\"\n        scheme = \"https\"\n\n[entryPoints.websecure]\n  address = \":443\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.web.address=:80\n--entryPoints.web.http.redirections.entryPoint.to=websecure\n--entryPoints.web.http.redirections.entryPoint.scheme=https\n--entryPoints.websecure.address=:443\n```\n\n----------------------------------------\n\nTITLE: Configuring TLSOption CRD in Traefik Proxy with Kubernetes\nDESCRIPTION: Example YAML configuration for creating a TLSOption resource in Kubernetes. This defines TLS parameters including minimum TLS version, strict SNI enforcement, cipher suites, and client authentication settings.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: mytlsoption\n  namespace: default\n\nspec:\n  minVersion: VersionTLS12\n  sniStrict: true\n  cipherSuites:\n    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n    - TLS_RSA_WITH_AES_256_GCM_SHA384\n  clientAuth:\n    secretNames:\n      - secret-ca1\n      - secret-ca2\n    clientAuthType: VerifyClientCertIfGiven\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic HTTP Routing with YAML in Traefik\nDESCRIPTION: YAML configuration for dynamic HTTP routing that defines a router, middleware for authentication, and a service with load balancing for the whoami application.\n\nLANGUAGE: yaml\nCODE:\n```\n# http routing section\nhttp:\n  routers:\n    # Define a connection between requests and services\n    to-whoami:\n      rule: \"Host(`example.com`) && PathPrefix(`/whoami/`)\"\n       # If the rule matches, applies the middleware\n      middlewares:\n      - test-user\n      # If the rule matches, forward to the whoami service (declared below)\n      service: whoami\n\n  middlewares:\n    # Define an authentication mechanism\n    test-user:\n      basicAuth:\n        users:\n        - test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\n\n  services:\n    # Define how to reach an existing service on our infrastructure\n    whoami:\n      loadBalancer:\n        servers:\n        - url: http://private/whoami-service\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Traefik in Kubernetes\nDESCRIPTION: Creates a Kubernetes IngressRoute resource for Traefik that specifies TLS settings. Configures routing for a blog service with Host and Path matching, sets the entry point to 'websecure', and specifies certificate resolver and domain configurations.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: blogtls\nspec:\n  entryPoints:\n    - websecure\n  routes:\n  - match: Host(`example.com`) && Path(`/blog`)\n    kind: Rule\n    services:\n    - name: blog\n      port: 8080\n  tls:\n    certResolver: myresolver\n    domains:\n    - main: example.com\n      sans:\n      - '*.example.org'\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirroring with TraefikService in Kubernetes\nDESCRIPTION: Examples of traffic mirroring configuration using TraefikService CRD. Shows how to mirror traffic from one service to others with percentage control, using both Kubernetes services and other TraefikServices.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutebar\n  namespace: default\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`example.com`) && PathPrefix(`/foo`)\n    kind: Rule\n    services:\n    - name: mirror1\n      namespace: default\n      kind: TraefikService\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Mirroring from a k8s Service\napiVersion: traefik.io/v1alpha1\nkind: TraefikService\nmetadata:\n  name: mirror1\n  namespace: default\n\nspec:\n  mirroring:\n    name: svc1                      # svc1 receives 100% of the traffic\n    port: 80\n    mirrors:\n      - name: svc2                  # svc2 receives a copy of 20% of this traffic\n        port: 80\n        percent: 20\n      - name: svc3                  # svc3 receives a copy of 15% of this traffic\n        kind: TraefikService\n        percent: 15\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Mirroring from a Traefik Service\napiVersion: traefik.io/v1alpha1\nkind: TraefikService\nmetadata:\n  name: mirror1\n  namespace: default\n\nspec:\n  mirroring:\n    name: wrr1                      # wrr1 receives 100% of the traffic\n    kind: TraefikService\n    mirrors:\n      - name: svc2                  # svc2 receives a copy of 20% of this traffic\n        port: 80\n        percent: 20\n      - name: svc3                  # svc3 receives a copy of 10% of this traffic\n        kind: TraefikService\n        percent: 10\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc1\n  namespace: default\n\nspec:\n  ports:\n    - name: http\n      port: 80\n  selector:\n    app: traefiklabs\n    task: app1\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc2\n  namespace: default\n\nspec:\n  ports:\n    - name: http\n      port: 80\n  selector:\n    app: traefiklabs\n    task: app2\n```\n\n----------------------------------------\n\nTITLE: Enabling Ping Health Check in Traefik (YAML, TOML, CLI)\nDESCRIPTION: Basic configuration examples to enable the Ping health check endpoint in Traefik using different configuration formats. The ping feature allows you to check the health of your Traefik instances.\n\nLANGUAGE: yaml\nCODE:\n```\nping: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[ping]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--ping=true\n```\n\n----------------------------------------\n\nTITLE: Configuring RateLimit in Docker & Swarm\nDESCRIPTION: Example of how to configure RateLimit middleware using Docker labels, allowing an average of 100 requests per second with a burst of 200 requests.\n\nLANGUAGE: yaml\nCODE:\n```\n# Here, an average of 100 requests per second is allowed.\n# In addition, a burst of 200 requests is allowed.\nlabels:\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.average=100\"\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.burst=200\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Gateway Resource for Traefik in Kubernetes\nDESCRIPTION: This YAML defines a Gateway resource that configures Traefik to handle incoming traffic. It specifies multiple listeners for different protocols (HTTP, HTTPS, TCP, TLS) with corresponding ports, TLS termination settings, and namespace routing rules. Listener ports must match the configured EntryPoint ports of the Traefik deployment.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: traefik\n  namespace: default\nspec:\n  gatewayClassName: traefik\n  \n  # Only Routes from the same namespace are allowed.\n  listeners:\n    - name: http\n      protocol: HTTP\n      port: 80\n      allowedRoutes:\n        namespaces:\n          from: Same \n\n    - name: https\n      protocol: HTTPS\n      port: 443\n      tls:\n        mode: Terminate\n        certificateRefs:\n          - name: secret-tls\n            namespace: default\n\n      allowedRoutes:\n        namespaces:\n          from: Same\n\n    - name: tcp\n      protocol: TCP\n      port: 3000\n      allowedRoutes:\n        namespaces:\n          from: Same\n\n    - name: tls\n      protocol: TLS\n      port: 3443\n      tls:\n        mode: Terminate\n        certificateRefs:\n          - name: secret-tls\n            namespace: default\n            \n      allowedRoutes:\n        namespaces:\n          from: Same\n```\n\n----------------------------------------\n\nTITLE: Implementing Failover Service Strategy with Health Checks in TOML\nDESCRIPTION: TOML configuration for a failover strategy with health checks. Provides automatic fallback to a backup service when the main service fails health checks, ensuring continuous service availability.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.app]\n    [http.services.app.failover.healthCheck]\n    [http.services.app.failover]\n      service = \"main\"\n      fallback = \"backup\"\n\n  [http.services.main]\n    [http.services.main.loadBalancer]\n      [http.services.main.loadBalancer.healthCheck]\n        path = \"/health\"\n        interval = \"10s\"\n        timeout = \"3s\"\n      [[http.services.main.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n  [http.services.backup]\n    [http.services.backup.loadBalancer]\n      [http.services.backup.loadBalancer.healthCheck]\n        path = \"/health\"\n        interval = \"10s\"\n        timeout = \"3s\"\n      [[http.services.backup.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RateLimit Middleware Using Labels\nDESCRIPTION: A YAML example showing how to configure Traefik's rate limiting middleware using Docker labels. This allows an average of 100 requests per second with a burst capacity of 200 requests.\n\nLANGUAGE: yaml\nCODE:\n```\n# Here, an average of 100 requests per second is allowed.\n# In addition, a burst of 200 requests is allowed.\nlabels:\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.average=100\"\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.burst=200\"\n```\n\n----------------------------------------\n\nTITLE: Defining IngressRouteTCP in Kubernetes with Traefik\nDESCRIPTION: Complete YAML example of an IngressRouteTCP resource showing all available configuration options including entryPoints, routes with matching rules, middleware references, service definitions, and TLS configuration.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRouteTCP\nmetadata:\n  name: ingressroutetcpfoo\n\nspec:\n  entryPoints:                    # [1]\n    - footcp\n  routes:                         # [2]\n  - match: HostSNI(`*`)           # [3]\n    priority: 10                  # [4]\n    middlewares:\n    - name: middleware1           # [5]\n      namespace: default          # [6]\n    services:                     # [7]\n    - name: foo                   # [8]\n      port: 8080                  # [9]\n      weight: 10                  # [10]\n      proxyProtocol:              # [11]\n        version: 1                # [12]\n      serversTransport: transport # [13]\n      nativeLB: true              # [14]\n      nodePortLB: true            # [15]\n      tls: false                  # [16]\n\n  tls:                            # [17]\n    secretName: supersecret       # [18]\n    options:                      # [19]\n      name: opt                   # [20]\n      namespace: default          # [21]\n    certResolver: foo             # [22]\n    domains:                      # [23]\n    - main: example.net           # [24]\n      sans:                       # [25]\n      - a.example.net\n      - b.example.net\n    passthrough: false            # [26]\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS in Traefik v2 with YAML\nDESCRIPTION: Example of dynamic TLS configuration in Traefik v2 using YAML format. Shows how a router references a TLS options configuration defined at the root level, with certificate files and TLS options like minimum version and cipher suites.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  routers:\n    Router-1:\n      rule: \"Host(`example.com`)\"\n      service: service-id\n      # will terminate the TLS request\n      tls:\n        options: myTLSOptions\n\ntls:\n  certificates:\n    - certFile: /path/to/domain.cert\n      keyFile: /path/to/domain.key\n  options:\n    myTLSOptions:\n      minVersion: VersionTLS12\n      cipherSuites:\n        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n```\n\n----------------------------------------\n\nTITLE: Enabling Traefik Dashboard with YAML Configuration\nDESCRIPTION: Basic YAML configuration to enable the Traefik dashboard. This is the simplest way to activate the dashboard feature in your static configuration file.\n\nLANGUAGE: yaml\nCODE:\n```\napi: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for TCP Routers using Docker Labels\nDESCRIPTION: This example shows how to configure a TLS-enabled TCP router in Traefik using Docker labels. Each label represents a specific configuration option for the TLS router.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.tcp.routers.my-tls-router.tls=true\"\n  - \"traefik.tcp.routers.my-tls-router.rule=HostSNI(`example.com`)\"\n  - \"traefik.tcp.routers.my-tls-router.service=my-tcp-service\"\n  - \"traefik.tcp.routers.my-tls-router.tls.passthrough=true\"\n  - \"traefik.tcp.routers.my-tls-router.tls.options=my-tls-options\"\n  - \"traefik.tcp.routers.my-tls-router.tls.certResolver=myresolver\"\n  - \"traefik.tcp.routers.my-tls-router.tls.domains[0].main=example.com\"\n  - \"traefik.tcp.routers.my-tls-router.tls.domains[0].sans=www.example.com,api.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirroring with Health Checks in Traefik\nDESCRIPTION: Configuration for mirroring services with health checks enabled. This setup mirrors 10% of traffic from appv1 to appv2 while monitoring the health status of the primary service.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    mirrored-api:\n      mirroring:\n        healthCheck: {}\n        service: appv1\n        mirrors:\n        - name: appv2\n          percent: 10\n\n    appv1:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker with docker.sock in Docker Compose\nDESCRIPTION: Example showing how to share the Docker socket with the Traefik container using Docker Compose. This allows Traefik to communicate with the Docker daemon.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nservices:\n  traefik:\n     image: traefik:v3.4 # The official v3 Traefik docker image\n     ports:\n       - \"80:80\"\n     volumes:\n       - /var/run/docker.sock:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik with Docker Compose Labels\nDESCRIPTION: Example of configuring Traefik routing using Docker Compose labels. This defines a service with labels that specify the routing rule for host 'example.com' and the port for load balancing.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nservices:\n  my-service:\n    image: my-image\n    labels:\n      - \"traefik.http.routers.my-router.rule=Host(`example.com`)\"\n      - \"traefik.http.services.my-service.loadbalancer.server.port=80\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Secure gRPC Server in Go\nDESCRIPTION: Go code snippet showing how to modify a standard gRPC server to use TLS with self-signed certificates. The code reads certificate files, creates TLS credentials, and configures the gRPC server to use them.\n\nLANGUAGE: go\nCODE:\n```\n// ...\n\n// Read cert and key file\nbackendCert, _ := os.ReadFile(\"./backend.cert\")\nbackendKey, _ := os.ReadFile(\"./backend.key\")\n\n// Generate Certificate struct\ncert, err := tls.X509KeyPair(backendCert, backendKey)\nif err != nil {\n  log.Fatalf(\"failed to parse certificate: %v\", err)\n}\n\n// Create credentials\ncreds := credentials.NewServerTLSFromCert(&cert)\n\n// Use Credentials in gRPC server options\nserverOption := grpc.Creds(creds)\nvar s *grpc.Server = grpc.NewServer(serverOption)\ndefer s.Stop()\n\npb.RegisterGreeterServer(s, &server{})\nerr := s.Serve(lis)\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker with docker.sock in Docker Compose\nDESCRIPTION: Example showing how to share the Docker socket with the Traefik container using Docker Compose. This allows Traefik to communicate with the Docker daemon.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nservices:\n  traefik:\n     image: traefik:v3.4 # The official v3 Traefik docker image\n     ports:\n       - \"80:80\"\n     volumes:\n       - /var/run/docker.sock:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Enabling Traefik Dashboard in Static Configuration\nDESCRIPTION: Basic configuration to enable the Traefik dashboard via the API in the static configuration file. This is the first step for setting up the dashboard in secure mode.\n\nLANGUAGE: yaml\nCODE:\n```\napi: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[api]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--api=true\n```\n\n----------------------------------------\n\nTITLE: Deploying Traefik as Kubernetes Ingress Controller\nDESCRIPTION: Kubernetes manifests for deploying Traefik, including ServiceAccount, Deployment, and Service resources to set up Traefik as an Ingress Controller with LoadBalancer service.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: traefik-ingress-controller\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: traefik\n  labels:\n    app: traefik\n\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: traefik\n  template:\n    metadata:\n      labels:\n        app: traefik\n    spec:\n      serviceAccountName: traefik-ingress-controller\n      containers:\n        - name: traefik\n          image: traefik:v3.4\n          args:\n            - --entryPoints.web.address=:80\n            - --providers.kubernetesingress\n          ports:\n            - name: web\n              containerPort: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: traefik\nspec:\n  type: LoadBalancer\n  selector:\n    app: traefik\n  ports:\n    - protocol: TCP\n      port: 80\n      name: web\n      targetPort: 80\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Endpoints in YAML Configuration\nDESCRIPTION: Enables additional debugging and profiling endpoints in YAML configuration. These endpoints are served under '/debug/' path and provide useful information for troubleshooting and performance analysis.\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  debug: true\n```\n\n----------------------------------------\n\nTITLE: Docker Compose with Multiple Routers and Services\nDESCRIPTION: Advanced Docker Compose configuration that defines multiple routers and services for a single container, forwarding different domains to different ports.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  my-container:\n    # ...\n    deploy:\n      labels:\n        - traefik.http.routers.www-router.rule=Host(`example-a.com`)\n        - traefik.http.routers.www-router.service=www-service\n        - traefik.http.services.www-service.loadbalancer.server.port=8000\n        - traefik.http.routers.admin-router.rule=Host(`example-b.com`)\n        - traefik.http.routers.admin-router.service=admin-service\n        - traefik.http.services.admin-service.loadbalancer.server.port=9000\n```\n\n----------------------------------------\n\nTITLE: Configuring CircuitBreaker for Latency Check in Kubernetes\nDESCRIPTION: Kubernetes manifest for creating a Traefik middleware resource that implements a circuit breaker which triggers when the median latency exceeds 100ms.\n\nLANGUAGE: yaml\nCODE:\n```\n# Latency Check\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: latency-check\nspec:\n  circuitBreaker:\n    expression: LatencyAtQuantileMS(50.0) > 100\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Headers in Traefik (TOML)\nDESCRIPTION: This TOML configuration sets up Cross-Origin Resource Sharing (CORS) headers in Traefik to control which origins, methods, and headers are allowed when browsers make cross-origin requests. It includes settings for allowed methods, headers, origins, and max age.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.testHeader.headers]\n    accessControlAllowMethods = [\"GET\", \"OPTIONS\", \"PUT\"]\n    accessControlAllowHeaders = [ \"*\" ]\n    accessControlAllowOriginList = [\"https://foo.bar.org\",\"https://example.org\"]\n    accessControlMaxAge = 100\n    addVaryHeader = true\n```\n\n----------------------------------------\n\nTITLE: Defining a GatewayClass for Traefik Controller in Kubernetes\nDESCRIPTION: This YAML defines a cluster-scoped GatewayClass resource that specifies Traefik as the controller responsible for managing gateway traffic. The controllerName 'traefik.io/gateway-controller' indicates that gateways attached to this class will be managed by Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: GatewayClass\nmetadata:\n  name: traefik\nspec:\n  controllerName: traefik.io/gateway-controller\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Services for Traefik\nDESCRIPTION: This YAML defines two LoadBalancer Services for Traefik - one for the web interface on port 80 and another for the dashboard on port 8080. These Services expose Traefik to external traffic and route it to the appropriate Traefik containers.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: traefik-dashboard-service\n\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 8080\n      targetPort: dashboard\n  selector:\n    app: traefik\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: traefik-web-service\n\nspec:\n  type: LoadBalancer\n  ports:\n    - targetPort: web\n      port: 80\n  selector:\n    app: traefik\n```\n\n----------------------------------------\n\nTITLE: Adding Whoami Service to Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration that defines a 'whoami' service which displays information about its container. It uses Traefik labels to define routing rules, allowing the service to be accessed via a specific hostname.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nservices:\n\n  ...\n\n  whoami:\n    # A container that exposes an API to show its IP address\n    image: traefik/whoami\n    labels:\n      - \"traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Global HTTP to HTTPS Redirection in Traefik v2 Using CLI\nDESCRIPTION: Command line interface example for configuring global HTTP to HTTPS redirection in Traefik v2, showing how to set up redirections at the entryPoint level to redirect HTTP traffic to HTTPS.\n\nLANGUAGE: bash\nCODE:\n```\n## static configuration\n\n--entryPoints.web.address=:80\n--entryPoints.web.http.redirections.entrypoint.to=websecure\n--entryPoints.web.http.redirections.entrypoint.scheme=https\n--entryPoints.websecure.address=:443\n--providers.docker=true\n```\n\n----------------------------------------\n\nTITLE: Exposing Traefik Dashboard with TOML Dynamic Configuration\nDESCRIPTION: TOML file for dynamic configuration to expose the Traefik dashboard. Creates a router and middleware for the dashboard with basic authentication.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic Configuration\n[http.routers.my-api]\n  rule = \"Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\"\n  service = \"api@internal\"\n  middlewares = [\"auth\"]\n\n[http.middlewares.auth.basicAuth]\n  users = [\n    \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\",\n    \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Ingress Resource for Traefik\nDESCRIPTION: Example of a Kubernetes Ingress resource that defines routing rules for Traefik, specifying host, paths, and backend services with annotations to configure Traefik behavior.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: myingress\n  annotations:\n    traefik.ingress.kubernetes.io/router.entrypoints: web\n\nspec:\n  rules:\n    - host: example.com\n      http:\n        paths:\n          - path: /bar\n            pathType: Exact\n            backend:\n              service:\n                name:  whoami\n                port:\n                  number: 80\n          - path: /foo\n            pathType: Exact\n            backend:\n              service:\n                name:  whoami\n                port:\n                  number: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Headers using Kubernetes CRD\nDESCRIPTION: This Kubernetes Custom Resource Definition (CRD) enables security features such as frame denial and browser XSS filtering using Traefik's Headers middleware. This helps protect applications against common web vulnerabilities.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-header\nspec:\n  headers:\n    frameDeny: true\n    browserXssFilter: true\n```\n\n----------------------------------------\n\nTITLE: Complete Traefik EntryPoint Configuration Reference (YAML, TOML, CLI)\nDESCRIPTION: Comprehensive reference showing all available configuration options for Traefik EntryPoints, including HTTP/2, HTTP/3, transport settings, proxy protocol, and forwarded headers. Available in YAML, TOML, and CLI formats.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  name:\n    address: \":8888\" # same as \":8888/tcp\"\n    http2:\n      maxConcurrentStreams: 42\n    http3:\n      advertisedPort: 8888\n    transport:\n      lifeCycle:\n        requestAcceptGraceTimeout: 42\n        graceTimeOut: 42\n      respondingTimeouts:\n        readTimeout: 42\n        writeTimeout: 42\n        idleTimeout: 42\n    proxyProtocol:\n      insecure: true\n      trustedIPs:\n        - \"127.0.0.1\"\n        - \"192.168.0.1\"\n    forwardedHeaders:\n      insecure: true\n      trustedIPs:\n        - \"127.0.0.1\"\n        - \"192.168.0.1\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.name]\n    address = \":8888\" # same as \":8888/tcp\"\n    [entryPoints.name.http2]\n      maxConcurrentStreams = 42\n    [entryPoints.name.http3]\n      advertisedPort = 8888\n    [entryPoints.name.transport]\n      [entryPoints.name.transport.lifeCycle]\n        requestAcceptGraceTimeout = 42\n        graceTimeOut = 42\n      [entryPoints.name.transport.respondingTimeouts]\n        readTimeout = 42\n        writeTimeout = 42\n        idleTimeout = 42\n    [entryPoints.name.proxyProtocol]\n      insecure = true\n      trustedIPs = [\"127.0.0.1\", \"192.168.0.1\"]\n    [entryPoints.name.forwardedHeaders]\n      insecure = true\n      trustedIPs = [\"127.0.0.1\", \"192.168.0.1\"]\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.name.address=:8888 # same as :8888/tcp\n--entryPoints.name.http2.maxConcurrentStreams=42\n--entryPoints.name.http3.advertisedport=8888\n--entryPoints.name.transport.lifeCycle.requestAcceptGraceTimeout=42\n--entryPoints.name.transport.lifeCycle.graceTimeOut=42\n--entryPoints.name.transport.respondingTimeouts.readTimeout=42\n--entryPoints.name.transport.respondingTimeouts.writeTimeout=42\n--entryPoints.name.transport.respondingTimeouts.idleTimeout=42\n--entryPoints.name.proxyProtocol.insecure=true\n--entryPoints.name.proxyProtocol.trustedIPs=127.0.0.1,192.168.0.1\n--entryPoints.name.forwardedHeaders.insecure=true\n--entryPoints.name.forwardedHeaders.trustedIPs=127.0.0.1,192.168.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring ServersTransport in TOML\nDESCRIPTION: Example of how to declare ServersTransport configuration in TOML format, including TLS settings, connection parameters, timeouts, and SPIFFE configuration.\n\nLANGUAGE: toml\nCODE:\n```\n[http.serversTransports.mytransport]\n  serverName = \"myhost\"\n  certificates = [\"/path/to/cert1.pem\", \"/path/to/cert2.pem\"]\n  insecureSkipVerify = true\n  rootcas = [\"/path/to/rootca1.pem\", \"/path/to/rootca2.pem\"]\n  maxIdleConnsPerHost = 100\n  disableHTTP2 = true\n  peerCertURI = \"spiffe://example.org/peer\"\n\n  [http.serversTransports.mytransport.forwardingTimeouts]\n    dialTimeout = \"30s\"\n    responseHeaderTimeout = \"10s\"\n    idleConnTimeout = \"60s\"\n    readIdleTimeout = \"5s\"\n    pingTimeout = \"15s\"\n\n  [http.serversTransports.mytransport.spiffe]\n    ids = [\"spiffe://example.org/id1\", \"spiffe://example.org/id2\"]\n    trustDomain = \"example.org\"\n```\n\n----------------------------------------\n\nTITLE: Enabling the File Provider in Traefik\nDESCRIPTION: This configuration shows how to enable the file provider in Traefik by specifying a directory containing dynamic configuration files. The provider can be configured using YAML, TOML, or CLI parameters.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  file:\n    directory: \"/path/to/dynamic/conf\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.file]\n  directory = \"/path/to/dynamic/conf\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.file.directory=/path/to/dynamic/conf\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes CRD Provider in Traefik with TOML\nDESCRIPTION: TOML configuration examples for the Traefik KubernetesCRD provider showing different options like endpoint, token, certificate authority, namespaces, label selectors, ingress class, and throttling duration.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesCRD]\n  endpoint = \"http://localhost:8080\"\n  # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesCRD]\n  token = \"mytoken\"\n  # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesCRD]\n  certAuthFilePath = \"/my/ca.crt\"\n  # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesCRD]\n  namespaces = [\"default\", \"production\"]\n  # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesCRD]\n  labelSelector = \"app=traefik\"\n  # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesCRD]\n  ingressClass = \"traefik-internal\"\n  # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesCRD]\n  throttleDuration = \"10s\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Headers using Kubernetes CRD\nDESCRIPTION: This Kubernetes Custom Resource Definition (CRD) sets up Cross-Origin Resource Sharing (CORS) headers in Traefik to control which origins, methods, and headers are allowed when browsers make cross-origin requests.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-header\nspec:\n  headers:\n    accessControlAllowMethods:\n      - \"GET\"\n      - \"OPTIONS\"\n      - \"PUT\"\n    accessControlAllowHeaders:\n      - \"*\"\n    accessControlAllowOriginList:\n      - \"https://foo.bar.org\"\n      - \"https://example.org\"\n    accessControlMaxAge: 100\n    addVaryHeader: true\n```\n\n----------------------------------------\n\nTITLE: Attaching Basic Routing Labels to Docker Containers\nDESCRIPTION: Simple example of attaching Traefik routing labels to a Docker container in a docker-compose file. This sets up a basic Host rule to route traffic for example.com to the container.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  my-container:\n    # ...\n    labels:\n      - traefik.http.routers.my-container.rule=Host(`example.com`)\n```\n\n----------------------------------------\n\nTITLE: Example of Traefik healthcheck Command\nDESCRIPTION: A practical example showing how to run the healthcheck command and its output when Traefik is healthy. The exit status is 0 if healthy and 1 otherwise.\n\nLANGUAGE: bash\nCODE:\n```\n$ traefik healthcheck\nOK: http://:8082/ping\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing a TLSOption with Client Authentication\nDESCRIPTION: Example of creating a TLSOption resource with TLS 1.2 minimum version, strict SNI enforcement, specific cipher suites, and client certificate verification settings.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: mytlsoption\n  namespace: default\n\nspec:\n  minVersion: VersionTLS12\n  sniStrict: true\n  cipherSuites:\n    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n    - TLS_RSA_WITH_AES_256_GCM_SHA384\n  clientAuth:\n    secretNames:\n      - secret-ca1\n      - secret-ca2\n    clientAuthType: VerifyClientCertIfGiven\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirroring with Health Checks (YAML)\nDESCRIPTION: Configuration for a service mirroring setup with health check capability. The health checks ensure that if the main service becomes unreachable, this information is propagated to the mirroring service.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    mirrored-api:\n      mirroring:\n        healthCheck: {}\n        service: appv1\n        mirrors:\n        - name: appv2\n          percent: 10\n\n    appv1:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Let's Encrypt Staging Server in Traefik\nDESCRIPTION: Configuration for using Let's Encrypt staging server in Traefik's ACME certificate resolver. Useful for testing before using the production server.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      caServer: https://acme-staging-v02.api.letsencrypt.org/directory\n      # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  caServer = \"https://acme-staging-v02.api.letsencrypt.org/directory\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP/2 maxConcurrentStreams in Traefik\nDESCRIPTION: Configuration for setting the maximum number of concurrent streams per HTTP/2 connection. This determines how many simultaneous requests each client can initiate.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  foo:\n    http2:\n      maxConcurrentStreams: 250\n```\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints.foo]\n  [entryPoints.foo.http2]\n    maxConcurrentStreams = 250\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.name.http2.maxConcurrentStreams=250\n```\n\n----------------------------------------\n\nTITLE: Examples of Router Rules with Combined Conditions\nDESCRIPTION: Shows how to configure a router rule that combines host matching and path prefix conditions using logical operators. This rule matches requests to specific paths on a specific host.\n\nLANGUAGE: bash\nCODE:\n```\n# Matches http://traefik.example.com/api or http://traefik.example.com/dashboard\n# but does not match http://traefik.example.com/hello\nrule = \"Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Router with Path Rule in TOML\nDESCRIPTION: Example of a basic HTTP router configuration that handles requests with path '/foo' and forwards them to service-foo using the TOML syntax in the File Provider.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.my-router]\n    rule = \"Path(`/foo`)\"\n    service = \"service-foo\"\n```\n\n----------------------------------------\n\nTITLE: Attaching Traefik Labels to Docker Containers\nDESCRIPTION: Demonstrates how to add Traefik-specific labels to containers in a Docker Compose file. These labels allow Traefik to discover and route traffic to your containers based on defined rules.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  my-container:\n    # ...\n    labels:\n      - traefik.http.routers.my-container.rule=Host(`example.com`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Headers in Traefik (TOML)\nDESCRIPTION: This TOML configuration enables security features such as frame denial and browser XSS filtering using Traefik's Headers middleware. This helps protect applications against common web vulnerabilities.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.testHeader.headers]\n    frameDeny = true\n    browserXssFilter = true\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Routers, Middlewares, and Services in Traefik\nDESCRIPTION: Examples of defining HTTP routers, middlewares with basic authentication, and load-balanced services in Traefik's dynamic configuration files.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  # Add the router\n  routers:\n    router0:\n      entryPoints:\n      - web\n      middlewares:\n      - my-basic-auth\n      service: service-foo\n      rule: Path(`/foo`)\n\n  # Add the middleware\n  middlewares:\n    my-basic-auth:\n      basicAuth:\n        users:\n        - test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\n        - test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\n        usersFile: etc/traefik/.htpasswd\n\n  # Add the service\n  services:\n    service-foo:\n      loadBalancer:\n        servers:\n        - url: http://foo/\n        - url: http://bar/\n        passHostHeader: false\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http]\n  # Add the router\n  [http.routers]\n    [http.routers.router0]\n      entryPoints = [\"web\"]\n      middlewares = [\"my-basic-auth\"]\n      service = \"service-foo\"\n      rule = \"Path(`/foo`)\"\n\n  # Add the middleware\n  [http.middlewares]\n    [http.middlewares.my-basic-auth.basicAuth]\n      users = [\"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\",\n                \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"]\n      usersFile = \"etc/traefik/.htpasswd\"\n\n  # Add the service\n  [http.services]\n    [http.services.service-foo]\n      [http.services.service-foo.loadBalancer]\n        [[http.services.service-foo.loadBalancer.servers]]\n          url = \"http://foo/\"\n        [[http.services.service-foo.loadBalancer.servers]]\n          url = \"http://bar/\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Failover Service Strategy with Health Checks in Traefik\nDESCRIPTION: Configuration for setting up a failover strategy with health checks. Routes traffic to a backup service when the main service becomes unreachable, with health monitoring configured for both services.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    app:\n      failover:\n        healthCheck: {}\n        service: main\n        fallback: backup\n\n    main:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\n    backup:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Using cert-manager Certificate with Traefik IngressRoute CRD\nDESCRIPTION: This IngressRoute custom resource defines a TLS-secured route for domain.example.com using the Traefik CRD provider. It references the certificate generated by cert-manager through the secretName field.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: domain\n\nspec:\n  entryPoints:\n    - websecure\n\n  routes:\n  - match: Host(`domain.example.com`)\n    kind: Rule\n    services:\n    - name: domain-service\n      port: 80\n  tls:\n    secretName: domain-tls    # <=== Use the name defined in Certificate resource.\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Rule Syntax in Traefik with Docker Labels\nDESCRIPTION: Docker label configuration for setting different rule syntax versions in Traefik routers. Labels are used to configure Traefik when running in Docker environments.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.routers.Router-v3.rule=HostRegexp(`[a-z]+\\.traefik\\.com`)\"\n  - \"traefik.http.routers.Router-v3.ruleSyntax=v3\"\n  - \"traefik.http.routers.Router-v2.rule=HostRegexp(`{subdomain:[a-z]+}.traefik.com`)\"\n  - \"traefik.http.routers.Router-v2.ruleSyntax=v2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure API Mode in TOML\nDESCRIPTION: Enables the API in insecure mode using TOML configuration, making it directly available on the 'traefik' entryPoint at path '/api'. If the entryPoint is not configured, it will be created on port 8080.\n\nLANGUAGE: toml\nCODE:\n```\n[api]\n  insecure = true\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Headers using Traefik Tags (JSON)\nDESCRIPTION: This JSON configuration uses tags to add the X-Script-Name header while removing X-Custom-Request-Header from requests and X-Custom-Response-Header from responses using Traefik's Headers middleware.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Tags\" : [\n    \"traefik.http.middlewares.testheader.headers.customrequestheaders.X-Script-Name=test\",\n    \"traefik.http.middlewares.testheader.headers.customrequestheaders.X-Custom-Request-Header=\",\n    \"traefik.http.middlewares.testheader.headers.customresponseheaders.X-Custom-Response-Header=\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global HTTP to HTTPS Redirection in Traefik v2 with YAML\nDESCRIPTION: Example of global HTTP to HTTPS redirection in Traefik v2 using YAML format. The redirection is configured at the entryPoint level using HTTP redirections to redirect traffic from 'web' (HTTP) to 'websecure' (HTTPS) entryPoint.\n\nLANGUAGE: yaml\nCODE:\n```\n# traefik.yml\n## static configuration\n\nentryPoints:\n  web:\n    address: \":80\"\n    http:\n      redirections:\n        entrypoint:\n          to: websecure\n          scheme: https\n\n  websecure:\n    address: \":443\"\n```\n\n----------------------------------------\n\nTITLE: Basic Traefik CLI Command Structure\nDESCRIPTION: The basic syntax for using the Traefik command line interface. This shows the general pattern of commands, flags, and arguments that can be used with Traefik CLI.\n\nLANGUAGE: bash\nCODE:\n```\ntraefik [command] [flags] [arguments]\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Challenge for ACME in Traefik\nDESCRIPTION: Configuration for using the TLS-ALPN-01 challenge with a certificate resolver. This challenge provisions a TLS certificate and requires Traefik to be reachable through port 443.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      tlsChallenge: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  [certificatesResolvers.myresolver.acme.tlsChallenge]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.tlschallenge=true\n```\n\n----------------------------------------\n\nTITLE: Configuring IngressRoute for Multi-Level Load Balancing in Traefik\nDESCRIPTION: This YAML defines a Kubernetes IngressRoute that routes traffic from 'example.com/foo' to a TraefikService named 'wrr1' which implements weighted load balancing.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutebar\n  namespace: default\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`example.com`) && PathPrefix(`/foo`)\n    kind: Rule\n    services:\n    - name: wrr1\n      namespace: default\n      kind: TraefikService\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Deployments with Multiple Replicas for Load Balancing\nDESCRIPTION: This YAML creates two Deployments (whoami1 and whoami2), each with 2 replicas running the traefik/whoami image. This creates a second level of load balancing across the replicated pods.\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  namespace: default\n  name: whoami1\n  labels:\n    app: whoami1\n\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: whoami1\n  template:\n    metadata:\n      labels:\n        app: whoami1\n    spec:\n      containers:\n        - name: whoami1\n          image: traefik/whoami\n          ports:\n            - name: web\n              containerPort: 80\n\n---\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  namespace: default\n  name: whoami2\n  labels:\n    app: whoami2\n\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: whoami2\n  template:\n    metadata:\n      labels:\n        app: whoami2\n    spec:\n      containers:\n        - name: whoami2\n          image: traefik/whoami\n          ports:\n            - name: web\n              containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Router with Path Rule in YAML\nDESCRIPTION: Example of a basic HTTP router configuration that handles requests with path '/foo' and forwards them to service-foo using the YAML syntax in the File Provider.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    my-router:\n      rule: \"Path(`/foo`)\"\n      service: service-foo\n```\n\n----------------------------------------\n\nTITLE: Configuring ACME Certificate Storage in Traefik\nDESCRIPTION: Configuration for specifying where ACME certificates are stored in Traefik. The storage option sets the location of the JSON file that needs to have a 600 file mode.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      storage: acme.json\n      # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  storage = \"acme.json\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.storage=acme.json\n# ...\n```\n\n----------------------------------------\n\nTITLE: Matching TCP Connections from IPv4 Subnet in Traefik\nDESCRIPTION: Configuration example showing how to match TCP connections from an IPv4 subnet using CIDR notation with the ClientIP matcher in Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\nClientIP(`192.168.1.0/24`)\n```\n\n----------------------------------------\n\nTITLE: Adding Headers to Request and Response in Traefik (YAML)\nDESCRIPTION: This YAML configuration adds the X-Script-Name header to proxied requests and X-Custom-Response-Header to responses using Traefik's Headers middleware.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    testHeader:\n      headers:\n        customRequestHeaders:\n          X-Script-Name: \"test\"\n        customResponseHeaders:\n          X-Custom-Response-Header: \"value\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Authentication (mTLS) in YAML\nDESCRIPTION: Sets up mutual TLS authentication in YAML format, requiring and verifying client certificates against specified CA files. This implements the most strict clientAuthType that mandates valid client certificates.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  options:\n    default:\n      clientAuth:\n        # in PEM format. each file can contain multiple CAs.\n        caFiles:\n          - tests/clientca1.crt\n          - tests/clientca2.crt\n        clientAuthType: RequireAndVerifyClientCert\n```\n\n----------------------------------------\n\nTITLE: Configuring RateLimit Middleware in YAML\nDESCRIPTION: A YAML configuration example showing how to set up rate limiting middleware in Traefik. This allows an average of 100 requests per second with a burst capacity of 200 requests.\n\nLANGUAGE: yaml\nCODE:\n```\n# Here, an average of 100 requests per second is allowed.\n# In addition, a burst of 200 requests is allowed.\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        average: 100\n        burst: 200\n```\n\n----------------------------------------\n\nTITLE: Configuring ACME Certificate Resolver in Traefik\nDESCRIPTION: Basic configuration example for enabling an ACME certificate resolver in Traefik. This sets up web and websecure entry points and configures a resolver with HTTP challenge for Let's Encrypt certificates.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: \":80\"\n\n  websecure:\n    address: \":443\"\n\ncertificatesResolvers:\n  myresolver:\n    acme:\n      email: your-email@example.com\n      storage: acme.json\n      httpChallenge:\n        # used during the challenge\n        entryPoint: web\n```\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n\n  [entryPoints.websecure]\n    address = \":443\"\n\n[certificatesResolvers.myresolver.acme]\n  email = \"your-email@example.com\"\n  storage = \"acme.json\"\n  [certificatesResolvers.myresolver.acme.httpChallenge]\n    # used during the challenge\n    entryPoint = \"web\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.web.address=:80\n--entryPoints.websecure.address=:443\n# ...\n--certificatesresolvers.myresolver.acme.email=your-email@example.com\n--certificatesresolvers.myresolver.acme.storage=acme.json\n# used during the challenge\n--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted Services with Health Checks in Traefik\nDESCRIPTION: Configuration for setting up weighted load balancing between multiple services with health checks. This allows distributing traffic between appv1 (75%) and appv2 (25%) while monitoring service health status.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    app:\n      weighted:\n        healthCheck: {}\n        services:\n        - name: appv1\n          weight: 3\n        - name: appv2\n          weight: 1\n\n    appv1:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\n    appv2:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a TLSStore Resource in Kubernetes\nDESCRIPTION: YAML example of a TLSStore CRD configuration that specifies certificate lists and a default certificate for TLS termination in Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSStore\nmetadata:\n  name: default\n\nspec:\n  certificates:                            # [1]\n    - secretName: foo                      \n    - secretName: bar\n  defaultCertificate:                      # [2]\n    secretName: secret                     \n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Dashboard with Basic Auth in Docker & Swarm\nDESCRIPTION: Docker labels configuration for enabling the Traefik dashboard with basic authentication. This configuration exposes the dashboard at traefik.example.com and protects it with HTTP basic authentication using hashed passwords.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Configuration\nlabels:\n  - \"traefik.http.routers.dashboard.rule=Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\"\n  - \"traefik.http.routers.dashboard.service=api@internal\"\n  - \"traefik.http.routers.dashboard.middlewares=auth\"\n  - \"traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Traefik Kubernetes Ingress Controller\nDESCRIPTION: Kubernetes RBAC configuration that defines the permissions needed for Traefik to function as an Ingress Controller, including ClusterRole and ClusterRoleBinding resources.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: traefik-ingress-controller\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - services\n      - secrets\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - discovery.k8s.io\n    resources:\n      - endpointslices\n    verbs:\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses\n      - ingressclasses\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses/status\n    verbs:\n      - update\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: traefik-ingress-controller\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: traefik-ingress-controller\nsubjects:\n  - kind: ServiceAccount\n    name: traefik-ingress-controller\n    namespace: default\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Defined TLS Certificates in Traefik TOML\nDESCRIPTION: Example of adding TLS certificates in TOML format to the dynamic configuration of Traefik. Each certificate requires a certFile and keyFile path.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[[tls.certificates]]\n  certFile = \"/path/to/domain.cert\"\n  keyFile = \"/path/to/domain.key\"\n\n[[tls.certificates]]\n  certFile = \"/path/to/other-domain.cert\"\n  keyFile = \"/path/to/other-domain.key\"\n```\n\n----------------------------------------\n\nTITLE: Dashboard Router Rules for Path-Based Access\nDESCRIPTION: Examples of router rules to access the Traefik dashboard. These rules define how the dashboard can be accessed through Traefik itself, either by host name or path prefixes.\n\nLANGUAGE: bash\nCODE:\n```\n# The dashboard can be accessed on http://traefik.example.com/dashboard/\nrule = \"Host(`traefik.example.com`)\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# The dashboard can be accessed on http://example.com/dashboard/ or http://traefik.example.com/dashboard/\nrule = \"PathPrefix(`/api`) || PathPrefix(`/dashboard`)\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# The dashboard can be accessed on http://traefik.example.com/dashboard/\nrule = \"Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RateLimit Middleware Using JSON Tags\nDESCRIPTION: A JSON configuration example showing how to set up rate limiting middleware in Traefik using tags. This allows an average of 100 requests per second with a burst capacity of 50 requests.\n\nLANGUAGE: json\nCODE:\n```\n// Here, an average of 100 requests per second is allowed.\n// In addition, a burst of 200 requests is allowed.\n{\n  \"Tags\": [\n    \"traefik.http.middlewares.test-ratelimit.ratelimit.average=100\",\n    \"traefik.http.middlewares.test-ratelimit.ratelimit.burst=50\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using cert-manager Certificate with Kubernetes Ingress in Traefik\nDESCRIPTION: This Ingress resource routes traffic for domain.example.com to a backend service using TLS secured by the certificate generated by cert-manager. It references the secret containing the certificate via the secretName field.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: domain\n  annotations:\n    traefik.ingress.kubernetes.io/router.entrypoints: websecure\n\nspec:\n  rules:\n  - host: domain.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Exact\n        backend:\n          service:\n            name:  domain-service\n            port:\n              number: 80\n  tls:\n  - secretName: domain-tls # <=== Use the name defined in Certificate resource.\n```\n\n----------------------------------------\n\nTITLE: Using cert-manager Certificate with Kubernetes Gateway API in Traefik\nDESCRIPTION: These Gateway API resources define a Gateway with TLS termination using the cert-manager generated certificate and an HTTPRoute that routes traffic to a backend service. The certificate is referenced in the Gateway's certificateRefs field.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: domain-gateway\nspec:\n  gatewayClassName: traefik\n  listeners:\n    - name: websecure\n      port: 8443\n      protocol: HTTPS\n      hostname: domain.example.com\n      tls:\n        certificateRefs:\n          - name: domain-tls  # <==== Use the name defined in Certificate resource.\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: domain\nspec:\n  parentRefs:\n    - name: domain-gateway\n  hostnames:\n    - domain.example.com\n  rules:\n    - matches:\n        - path:\n            type: Exact\n            value: /\n\n      backendRefs:\n        - name: domain-service\n          port: 80\n          weight: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring ForwardAuth Middleware in Docker & Swarm\nDESCRIPTION: YAML configuration example for delegating authentication to an external service using ForwardAuth middleware in Docker or Docker Swarm environments.\n\nLANGUAGE: yaml\nCODE:\n```\n# Forward authentication to example.com\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.address=https://example.com/auth\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Dashboard Access Using Host Rule\nDESCRIPTION: Sets up a router rule that matches all requests on a specific domain for dashboard access. This configuration allows the dashboard to be accessed at http://traefik.example.com/dashboard/.\n\nLANGUAGE: bash\nCODE:\n```\n# The dashboard can be accessed on http://traefik.example.com/dashboard/\nrule = \"Host(`traefik.example.com`)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Routing with HTTPRoute in Kubernetes Gateway API\nDESCRIPTION: This YAML configuration defines an HTTPRoute resource that routes HTTP traffic to a whoami service based on hostname and path prefix matching. It connects to a Traefik Gateway through the http section and specifies routing rules.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: whoami-http\n  namespace: default\nspec:\n  parentRefs:\n    - name: traefik\n      sectionName: http\n      kind: Gateway\n\n  hostnames:\n    - whoami.localhost\n\n  rules:\n     - matches:\n        - path:\n            type: PathPrefix\n            value: /\n\n       backendRefs:\n        - name: whoami\n          namespace: default\n          port: 80\n```\n\n----------------------------------------\n\nTITLE: Using Host and HostRegexp Matchers in Traefik HTTP Router Rules\nDESCRIPTION: Examples of using Host and HostRegexp matchers to route requests based on the host domain. Shows matching specific domains, subdomains, and using case-insensitive matching.\n\nLANGUAGE: go\nCODE:\n```\nHost(`example.com`)\n```\n\nLANGUAGE: go\nCODE:\n```\nHostRegexp(`^.+\\.example\\.com$`)\n```\n\nLANGUAGE: go\nCODE:\n```\nHostRegexp(`^example\\.(com\\|org)$`)\n```\n\nLANGUAGE: go\nCODE:\n```\nHostRegexp(`(?i)^example\\.(com\\|org)$`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Dashboard Access Using Combined Host and Path Rules\nDESCRIPTION: Creates a more specific router rule that combines both host and path matching. This configuration restricts dashboard access to a specific domain and the correct paths.\n\nLANGUAGE: bash\nCODE:\n```\n# The dashboard can be accessed on http://traefik.example.com/dashboard/\nrule = \"Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\"\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Session Tickets in YAML\nDESCRIPTION: Configures Traefik to disable TLS session tickets in YAML format. This forces every client to perform a full TLS handshake instead of resuming sessions, which can enhance security at the cost of performance.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  options:\n    default:\n      disableSessionTickets: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Rule with Host Matching in Traefik KV Store\nDESCRIPTION: Defines a basic routing rule that matches requests based on the Host header. This configuration instructs Traefik to route requests for 'example.com' to the associated service.\n\nLANGUAGE: yaml\nCODE:\n```\nHost(`example.com`)\n```\n\n----------------------------------------\n\nTITLE: Configuring dnsChallenge with DigitalOcean Provider in YAML\nDESCRIPTION: YAML configuration for setting up a DNS challenge with the DigitalOcean provider in Traefik. This configuration specifies the DNS provider and includes a delayBeforeCheck parameter to control timing of DNS verification.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      dnsChallenge:\n        provider: digitalocean\n        delayBeforeCheck: 0\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Average Rate in Kubernetes\nDESCRIPTION: Example of setting the average request rate to 100 requests per second in Kubernetes. The average parameter defines the maximum rate allowed from a given source.\n\nLANGUAGE: yaml\nCODE:\n```\n# 100 reqs/s\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-ratelimit\nspec:\n  rateLimit:\n    average: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Transport with insecureSkipVerify via CLI\nDESCRIPTION: Static configuration using CLI to disable SSL certificate verification for backend services in Traefik.\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--serversTransport.insecureSkipVerify=true\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Defined TLS Certificates in Traefik YAML\nDESCRIPTION: Example of adding TLS certificates in YAML format to the dynamic configuration of Traefik. This allows certificates to be added or removed while Traefik is running.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  certificates:\n    - certFile: /path/to/domain.cert\n      keyFile: /path/to/domain.key\n    - certFile: /path/to/other-domain.cert\n      keyFile: /path/to/other-domain.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik EntryPoint on Port 80 (YAML, TOML, CLI)\nDESCRIPTION: Example of configuring a basic Traefik EntryPoint named 'web' that listens on port 80 for incoming TCP connections. This configuration can be done via YAML file, TOML file, or command-line interface.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  web:\n   address: \":80\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.web.address=:80\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Traefik ECS Integration\nDESCRIPTION: The required AWS IAM policy JSON for Traefik to access ECS information. Includes permissions to list and describe clusters, tasks, container instances, and more.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"TraefikECSReadAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ecs:ListClusters\",\n                \"ecs:DescribeClusters\",\n                \"ecs:ListTasks\",\n                \"ecs:DescribeTasks\",\n                \"ecs:DescribeContainerInstances\",\n                \"ecs:DescribeTaskDefinition\",\n                \"ec2:DescribeInstances\",\n                \"ssm:DescribeInstanceInformation\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling API in TOML Configuration\nDESCRIPTION: Enables the Traefik API using TOML static configuration. This creates a special 'api@internal' service that can be referenced in a router.\n\nLANGUAGE: toml\nCODE:\n```\n# Static Configuration\n[api]\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using a Middleware in File Provider (YAML)\nDESCRIPTION: Example of declaring a middleware in the YAML file provider and then referencing it from other providers. This demonstrates cross-provider functionality.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    add-foo-prefix:\n      addPrefix:\n        prefix: \"/foo\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Datadog Metrics in Traefik via CLI\nDESCRIPTION: Command line interface option to enable Datadog metrics in Traefik. This flag activates the Datadog metrics exporter with default settings.\n\nLANGUAGE: bash\nCODE:\n```\n--metrics.datadog=true\n```\n\n----------------------------------------\n\nTITLE: Configuring CircuitBreaker for Latency Check in Docker & Swarm\nDESCRIPTION: YAML configuration for setting up a circuit breaker middleware in Docker or Swarm that triggers when the median latency exceeds 100ms.\n\nLANGUAGE: yaml\nCODE:\n```\n# Latency Check\nlabels:\n  - \"traefik.http.middlewares.latency-check.circuitbreaker.expression=LatencyAtQuantileMS(50.0) > 100\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Authentication (mTLS) in Kubernetes\nDESCRIPTION: Creates a Kubernetes TLSOption resource for mutual TLS authentication. This configuration references CA certificates from Kubernetes secrets and requires verified client certificates.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: default\n  namespace: default\n\nspec:\n  clientAuth:\n    # the CA certificate is extracted from key `tls.ca` or `ca.crt` of the given secrets.\n    secretNames:\n      - secretCA\n    clientAuthType: RequireAndVerifyClientCert\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Deployment for whoami Application\nDESCRIPTION: YAML configuration for deploying the traefik/whoami application. This defines a Kubernetes Deployment resource with 1 replica running the whoami container on port 80.\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: whoami\n  labels:\n    app: whoami\n\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: whoami\n  template:\n    metadata:\n      labels:\n        app: whoami\n    spec:\n      containers:\n        - name: whoami\n          image: traefik/whoami\n          ports:\n            - name: web\n              containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Middlewares for EntryPoints in Traefik YAML\nDESCRIPTION: Example showing how to attach middlewares to a Traefik EntryPoint using file-based YAML configuration. The middlewares 'auth' from kubernetescrd provider and 'strip' from file provider are attached to the 'web' EntryPoint listening on port 80.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: :80\n    middlewares:\n      - auth@kubernetescrd\n      - strip@file\n```\n\n----------------------------------------\n\nTITLE: Adding Headers to Request and Response using Traefik Labels\nDESCRIPTION: This configuration uses Docker labels to add the X-Script-Name header to proxied requests and X-Custom-Response-Header to responses using Traefik's Headers middleware.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.testHeader.headers.customrequestheaders.X-Script-Name=test\"\n  - \"traefik.http.middlewares.testHeader.headers.customresponseheaders.X-Custom-Response-Header=value\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Retry Middleware using Labels\nDESCRIPTION: Example of how to configure the Traefik HTTP Retry middleware using Docker-style labels. This configuration sets up 4 retry attempts with an initial interval of 100ms for exponential backoff.\n\nLANGUAGE: yaml\nCODE:\n```\n# Retry 4 times with exponential backoff\nlabels:\n  - \"traefik.http.middlewares.test-retry.retry.attempts=4\"\n  - \"traefik.http.middlewares.test-retry.retry.initialinterval=100ms\"\n```\n\n----------------------------------------\n\nTITLE: Exposing Traefik Dashboard with Docker Labels\nDESCRIPTION: Docker container labels for exposing the Traefik dashboard. Uses dynamic configuration to create a router for the dashboard with basic authentication middleware.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Configuration\nlabels:\n  - \"traefik.http.routers.dashboard.rule=Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\"\n  - \"traefik.http.routers.dashboard.service=api@internal\"\n  - \"traefik.http.routers.dashboard.middlewares=auth\"\n  - \"traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP/3 Protocol in Traefik\nDESCRIPTION: Configuration to enable HTTP/3 protocol on a Traefik EntryPoint. HTTP/3 requires a TCP EntryPoint that can be upgraded to UDP and typically shares the same EntryPoint used for TLS traffic.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  name:\n    http3: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints.name.http3]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.name.http3\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Pages Middleware in TOML\nDESCRIPTION: Example showing how to configure custom error pages for 5XX status codes (excluding 502 and 504) using TOML structured configuration. It includes status codes, error handler service, and query pattern.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic Custom Error Page for 5XX Status Code excluding 502 and 504\n[http.middlewares]\n  [http.middlewares.test-errors.errors]\n    status = [\"500\",\"501\",\"503\",\"505-599\"]\n    service = \"error-handler-service\"\n    query = \"/{status}.html\"\n\n[http.services]\n  # ... definition of the error-handler-service\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Configuration with CLI in Traefik\nDESCRIPTION: Example of static configuration using CLI commands to set up an entrypoint on port 8081 and enable the file provider for Traefik.\n\nLANGUAGE: bash\nCODE:\n```\n# Listen on port 8081 for incoming requests\n--entryPoints.web.address=:8081\n\n# Enable the file provider to define routers / middlewares / services in file\n--providers.file.directory=/path/to/dynamic/conf\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Metrics in Traefik using TOML\nDESCRIPTION: TOML configuration for enabling OpenTelemetry metrics in Traefik. This creates the necessary configuration structure for OpenTelemetry metrics export.\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.otlp]\n```\n\n----------------------------------------\n\nTITLE: Disabling Access Logs for HTTP Router in YAML\nDESCRIPTION: Example of disabling access logs for a specific HTTP router using the File Provider in YAML format. The configuration sets accessLogs to false in the observability section.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    my-router:\n      rule: \"Path(`/foo`)\"\n      service: service-foo\n      observability:\n        accessLogs: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik with CLI Arguments\nDESCRIPTION: Example of configuring Traefik directly via command-line arguments. This approach allows specifying entry points, providers, dashboard settings, and log level without a configuration file.\n\nLANGUAGE: sh\nCODE:\n```\ntraefik \\\n  --entryPoints.web.address=\":80\" \\\n  --entryPoints.websecure.address=\":443\" \\\n  --providers.docker \\\n  --api.dashboard \\\n  --log.level=INFO\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain Middleware with YAML File\nDESCRIPTION: Example of configuring a Chain middleware in Traefik using a YAML file configuration. Shows how to define a chain of middlewares including HTTPS redirection, IP filtering, and basic authentication in a single file.\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\nhttp:\n  routers:\n    router1:\n      service: service1\n      middlewares:\n        - secured\n      rule: \"Host(`mydomain`)\"\n\n  middlewares:\n    secured:\n      chain:\n        middlewares:\n          - https-only\n          - known-ips\n          - auth-users\n\n    auth-users:\n      basicAuth:\n        users:\n          - \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"\n\n    https-only:\n      redirectScheme:\n        scheme: https\n\n    known-ips:\n      ipAllowList:\n        sourceRange:\n          - \"192.168.1.7\"\n          - \"127.0.0.1/32\"\n\n  services:\n    service1:\n      loadBalancer:\n        servers:\n          - url: \"http://127.0.0.1:80\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Transport with insecureSkipVerify in TOML\nDESCRIPTION: Static configuration in TOML format to disable SSL certificate verification for backend services in Traefik.\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[serversTransport]\n  insecureSkipVerify = true\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Connection to Docker via CLI\nDESCRIPTION: Command-line option for connecting Traefik to the Docker Engine API over HTTP. This can be used for remote Docker daemons with HTTP enabled.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.endpoint=http://127.0.0.1:2375\n# ...\n```\n\n----------------------------------------\n\nTITLE: Attaching Middlewares to IngressRoute in Traefik Kubernetes\nDESCRIPTION: Example demonstrating how to attach multiple middlewares to a Traefik IngressRoute resource in Kubernetes. The middlewares will be applied in the order defined, and can be referenced from different namespaces.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-app\n  namespace: apps\n\nspec:\n  entryPoints:\n    - websecure\n  routes:\n  - match: Host(`example.com`)\n    kind: Rule\n    middlewares:\n    # same namespace as the IngressRoute\n    - name: middleware01\n    # default namespace\n    - name: middleware02\n      namespace: apps\n    # Other namespace\n    - name: middleware03\n      namespace: other-ns\n    services:\n    - name: whoami\n      port: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Let's Encrypt HTTP Challenge in Traefik\nDESCRIPTION: This configuration sets up the Let's Encrypt HTTP challenge resolver in Traefik, specifying the challenge type, entrypoint to use, and email address for certificate notifications.\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  # Enable a http challenge named \"myresolver\"\n  - \"--certificatesresolvers.myresolver.acme.httpchallenge=true\"\n  # Tell it to use our predefined entrypoint named \"web\"\n  - \"--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web\"\n  # The email to provide to Let's Encrypt\n  - \"--certificatesresolvers.myresolver.acme.email=postmaster@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Retry Middleware in Docker & Swarm\nDESCRIPTION: Example of how to configure the Retry middleware in Docker or Docker Swarm with 4 retry attempts and exponential backoff starting at 100ms. Uses Docker labels for configuration.\n\nLANGUAGE: yaml\nCODE:\n```\n# Retry 4 times with exponential backoff\nlabels:\n  - \"traefik.http.middlewares.test-retry.retry.attempts=4\"\n  - \"traefik.http.middlewares.test-retry.retry.initialinterval=100ms\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Entry Points and Options via Environment Variables\nDESCRIPTION: This snippet describes environment variables for configuring Traefik entry points, including TLS settings, proxy protocol, transport parameters, and timeouts. Variables follow a pattern where <NAME> represents the entry point identifier.\n\nLANGUAGE: plaintext\nCODE:\n```\nTRAEFIK_ENTRYPOINTS_<NAME>_HTTP_TLS_DOMAINS\n```\n\n----------------------------------------\n\nTITLE: Setting Datadog Address in Traefik using TOML\nDESCRIPTION: TOML configuration specifying the Datadog agent address for metrics export. This defines where Traefik should send the metrics data.\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.datadog]\n    address = \"127.0.0.1:8125\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPCRoute for GRPC Traffic Routing in Kubernetes\nDESCRIPTION: Defines a GRPCRoute resource that routes GRPC traffic to an echo backend service based on method matching. The configuration specifies routing rules for specific GRPC services and methods.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: GRPCRoute\nmetadata:\n  name: echo\n  namespace: default\nspec:\n  parentRefs:\n    - name: traefik\n      sectionName: http\n      kind: Gateway\n\n  hostnames:\n    - echo.localhost\n\n  rules:\n    - matches:\n        - method:\n            type: Exact\n            service: grpc.reflection.v1alpha.ServerReflection\n\n        - method:\n            type: Exact\n            service: gateway_api_conformance.echo_basic.grpcecho.GrpcEcho\n            method: Echo\n\n      backendRefs:\n        - name: echo\n          namespace: default\n          port: 3000\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for TCP Routers in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up a TLS-enabled TCP router in Traefik. It includes settings for passthrough mode, TLS options, domain configuration, and certificate resolver.\n\nLANGUAGE: yaml\nCODE:\n```\ntcp:\n  routers:\n    my-tls-router:\n      rule: \"HostSNI(`example.com`)\"\n      service: \"my-tcp-service\"\n      tls:\n        passthrough: true\n        options: \"my-tls-options\"\n        domains:\n          - main: \"example.com\"\n            sans:\n              - \"www.example.com\"\n              - \"api.example.com\"\n        certResolver: \"myresolver\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth with Consul Catalog in YAML\nDESCRIPTION: Configures BasicAuth middleware using Consul Catalog by defining a user list. This configuration sets up HTTP basic authentication for services registered in Consul.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.basicauth.users=test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/,test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Dashboard with Basic Auth in Kubernetes CRD\nDESCRIPTION: Kubernetes Custom Resource Definition (CRD) for configuring Traefik dashboard with basic authentication. Uses IngressRoute and Middleware resources to define routing rules and authentication. Password hashes are stored in a Kubernetes secret.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: traefik-dashboard\nspec:\n  routes:\n  - match: Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\n    kind: Rule\n    services:\n    - name: api@internal\n      kind: TraefikService\n    middlewares:\n      - name: auth\n---\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: auth\nspec:\n  basicAuth:\n    secret: secretName # Kubernetes secret named \"secretName\"\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Stickiness in Traefik Configuration\nDESCRIPTION: Basic configuration for enabling sticky sessions in Traefik using the File Provider. This example shows how to add stickiness to a service without any custom options, using both YAML and TOML formats.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    my-service:\n      loadBalancer:\n        sticky:\n         cookie: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.my-service]\n    [http.services.my-service.loadBalancer.sticky.cookie]\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Mirroring with Traffic Control in Traefik\nDESCRIPTION: Configuration for request mirroring between services, with options to control request body mirroring and maximum body size. This setup mirrors 10% of traffic from appv1 to appv2 without mirroring the request body.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    mirrored-api:\n      mirroring:\n        service: appv1\n        # mirrorBody defines whether the request body should be mirrored.\n        # Default value is true.\n        mirrorBody: false\n        # maxBodySize is the maximum size allowed for the body of the request.\n        # If the body is larger, the request is not mirrored.\n        # Default value is -1, which means unlimited size.\n        maxBodySize: 1024\n        mirrors:\n        - name: appv2\n          percent: 10\n\n    appv1:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-2/\n```\n\n----------------------------------------\n\nTITLE: Implementing Failover Services in Traefik (YAML)\nDESCRIPTION: Configuration for a failover service that automatically routes traffic to a backup service when the main service becomes unhealthy. The main service uses health checks to monitor availability.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    app:\n      failover:\n        service: main\n        fallback: backup\n\n    main:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\n    backup:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flag Arguments in Traefik CLI\nDESCRIPTION: Demonstrates how to set arguments for flags in Traefik CLI, including both long-form and short-form flag syntax. Also shows how to set boolean flags to true or false.\n\nLANGUAGE: bash\nCODE:\n```\n# set flag_argument to flag(s)\ntraefik [--flag=flag_argument] [-f [flag_argument]]\n\n# set true/false to boolean flag(s)\ntraefik [--flag[=true|false| ]] [-f [true|false| ]]\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP ServersTransport in YAML\nDESCRIPTION: YAML configuration example for setting up a TCP ServersTransport in Traefik with TLS settings, dial timeouts, and SPIFFE configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ntcp:\n  serversTransports:\n    mytransport:\n      dialTimeout: \"30s\"\n      dialKeepAlive: \"20s\"\n      terminationDelay: \"200ms\"\n      tls:\n        serverName: \"example.com\"\n        certificates:\n          - \"/path/to/cert1.pem\"\n          - \"/path/to/cert2.pem\"\n        insecureSkipVerify: true\n        rootcas:\n          - \"/path/to/rootca.pem\"\n        peerCertURI: \"spiffe://example.org/peer\"\n      spiffe:\n        ids:\n          - \"spiffe://example.org/id1\"\n          - \"spiffe://example.org/id2\"\n        trustDomain: \"example.org\"\n```\n\n----------------------------------------\n\nTITLE: Configuring InfluxDB v2 Metrics in Traefik using YAML\nDESCRIPTION: YAML configuration for enabling InfluxDB v2 metrics in Traefik, specifying the InfluxDB server address where metrics will be sent.\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  influxDB2:\n    address: http://localhost:8086\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Events Watch in TOML\nDESCRIPTION: Disabling the Docker events watching mechanism in TOML format. By default, Traefik watches Docker events to detect changes in containers state and configuration.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  watch = false\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Providers Throttle Duration Configuration in CLI\nDESCRIPTION: Configuration example for setting the providers throttle duration using the command line interface. This controls how Traefik handles bursts of configuration changes.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.providersThrottleDuration=10s\n```\n\n----------------------------------------\n\nTITLE: Example IngressClass Resource Definition\nDESCRIPTION: Example Kubernetes IngressClass resource that defines a class named 'traefik-lb' using the Traefik controller.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  name: traefik-lb\nspec:\n  controller: traefik.io/ingress-controller\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Challenge in Traefik with YAML\nDESCRIPTION: YAML configuration for setting up the TLS-ALPN-01 challenge resolver in Traefik to generate and renew ACME certificates by provisioning a TLS certificate.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      tlsChallenge: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Middleware with Docker & Swarm Labels\nDESCRIPTION: Shows how to create and apply an IP allowlist middleware using Docker labels. The example creates a middleware named 'foo-ip-allowlist' that restricts access to specific IP ranges and applies it to a router.\n\nLANGUAGE: yaml\nCODE:\n```\n# As a Docker Label\nwhoami:\n  #  A container that exposes an API to show its IP address\n  image: traefik/whoami\n  labels:\n    # Create a middleware named `foo-ip-allowlist`\n    - \"traefik.tcp.middlewares.foo-ip-allowlist.ipallowlist.sourcerange=127.0.0.1/32, 192.168.1.7\"\n    # Apply the middleware named `foo-ip-allowlist` to the router named `router1`\n    - \"traefik.tcp.routers.router1.middlewares=foo-ip-allowlist@docker\"\n```\n\n----------------------------------------\n\nTITLE: Router Metrics in Prometheus Format\nDESCRIPTION: Lists the metric names for router monitoring in Prometheus format. These metrics track request counts, TLS usage, request duration, and data transfer sizes.\n\nLANGUAGE: prom\nCODE:\n```\ntraefik_router_requests_total\ntraefik_router_requests_tls_total\ntraefik_router_request_duration_seconds\ntraefik_router_requests_bytes_total\ntraefik_router_responses_bytes_total\n```\n\n----------------------------------------\n\nTITLE: Declaring TCP Routers and Services in Traefik with YAML Labels\nDESCRIPTION: Shows how to configure TCP routers and services using Traefik labels, including SNI-based routing and TLS configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.my-router.rule=HostSNI(`example.com`)\ntraefik.tcp.routers.my-router.tls=true\ntraefik.tcp.services.my-service.loadbalancer.server.port=4123\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing in Traefik using YAML, TOML, and CLI\nDESCRIPTION: Basic configuration to enable the tracing system in Traefik. This is the minimal required setup to activate tracing functionality.\n\nLANGUAGE: yaml\nCODE:\n```\ntracing: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tracing]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--tracing=true\n```\n\n----------------------------------------\n\nTITLE: Configuring UsersFile with Kubernetes Secret\nDESCRIPTION: Shows how to use a Kubernetes Secret to store user credentials for BasicAuth middleware, including the creation of the Secret resource.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  basicAuth:\n    secret: authsecret\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: authsecret\n  namespace: default\n\ndata:\n  users: |2\n    dGVzdDokYXByMSRINnVza2trVyRJZ1hMUDZld1RyU3VCa1RycUU4d2ovCnRlc3QyOiRhcHIxJGQ5\n    aHI5SEJCJDRIeHdnVWlyM0hQNEVzZ2dQL1FObzAK\n```\n\n----------------------------------------\n\nTITLE: Configuring ServersTransport in YAML\nDESCRIPTION: Example of how to declare ServersTransport configuration in YAML format, including TLS settings, connection parameters, timeouts, and SPIFFE configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  serversTransports:\n    mytransport:\n      serverName: \"myhost\"\n      certificates:\n        - \"/path/to/cert1.pem\"\n        - \"/path/to/cert2.pem\"\n      insecureSkipVerify: true\n      rootcas:\n        - \"/path/to/rootca1.pem\"\n        - \"/path/to/rootca2.pem\"\n      maxIdleConnsPerHost: 100\n      disableHTTP2: true\n      peerCertURI: \"spiffe://example.org/peer\"\n      forwardingTimeouts:\n        dialTimeout: \"30s\"\n        responseHeaderTimeout: \"10s\"\n        idleConnTimeout: \"60s\"\n        readIdleTimeout: \"5s\"\n        pingTimeout: \"15s\"\n      spiffe:\n        ids:\n          - \"spiffe://example.org/id1\"\n          - \"spiffe://example.org/id2\"\n        trustDomain: \"example.org\"\n```\n\n----------------------------------------\n\nTITLE: Adding Stickiness with Custom Options in Traefik\nDESCRIPTION: Configuring sticky sessions with custom options in Traefik using the File Provider. This example demonstrates how to customize cookie name, secure flag, domain, and httpOnly settings in both YAML and TOML formats.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    my-service:\n      loadBalancer:\n        sticky:\n          cookie:\n            name: my_sticky_cookie_name\n            secure: true\n            domain: mysite.site\n            httpOnly: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.my-service]\n    [http.services.my-service.loadBalancer.sticky.cookie]\n      name = \"my_sticky_cookie_name\"\n      secure = true\n      httpOnly = true\n      domain = \"mysite.site\"\n      sameSite = \"none\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik HTTP Service with Docker Labels\nDESCRIPTION: Example of configuring a Traefik HTTP service using Docker container labels. This approach allows configuration of load balancer settings like servers, sticky sessions, and health checks via container metadata.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.services.my-service.loadBalancer.servers[0].url=http://private-ip-server-1/\"\n  - \"traefik.http.services.my-service.loadBalancer.servers[0].weight=2\"\n  - \"traefik.http.services.my-service.loadBalancer.servers[0].preservePath=true\"\n  - \"traefik.http.services.my-service.loadBalancer.sticky.cookie.name=sticky-cookie\"\n  - \"traefik.http.services.my-service.loadBalancer.healthcheck.path=/health\"\n  - \"traefik.http.services.my-service.loadBalancer.healthcheck.interval=10s\"\n  - \"traefik.http.services.my-service.loadBalancer.healthcheck.timeout=3s\"\n  - \"traefik.http.services.my-service.loadBalancer.passHostHeader=true\"\n  - \"traefik.http.services.my-service.loadBalancer.serversTransport=customTransport@file\"\n  - \"traefik.http.services.my-service.loadBalancer.responseForwarding.flushInterval=150ms\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth Middleware with JSON Tags\nDESCRIPTION: JSON tags configuration for Traefik BasicAuth middleware specifying authorized users with hashed passwords.\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"Tags\": [\n    \"traefik.http.middlewares.test-auth.basicauth.users=test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/,test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a TLSOption Resource in Kubernetes\nDESCRIPTION: YAML example of a TLSOption CRD configuration in Kubernetes that specifies TLS protocol versions, curve preferences, cipher suites, client authentication settings, SNI requirements, and ALPN protocols.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: mytlsoption                             # [1]\n  namespace: default\n\nspec:\n  minVersion: VersionTLS12                      # [2]\n  maxVersion: VersionTLS13                      # [3]\n  curvePreferences:                             # [4]\n    - CurveP521\n    - CurveP384\n  cipherSuites:                                 # [5]\n    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n    - TLS_RSA_WITH_AES_256_GCM_SHA384\n  clientAuth:                                   # [6]\n    secretNames:                                # [7]\n      - secret-ca1\n      - secret-ca2\n    clientAuthType: VerifyClientCertIfGiven     # [8]\n  sniStrict: true                               # [9]\n  alpnProtocols:                                # [10]\n    - foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Dashboard with Basic Auth in Static TOML File\nDESCRIPTION: Static TOML file configuration for Traefik dashboard with basic authentication. Uses TOML syntax to define HTTP router, service, and middleware configurations. The router routes dashboard requests to the internal API and applies basic authentication.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic Configuration\n[http.routers.my-api]\n  rule = \"Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\"\n  service = \"api@internal\"\n  middlewares = [\"auth\"]\n\n[http.middlewares.auth.basicAuth]\n  users = [\n    \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\",\n    \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth Middleware in TOML\nDESCRIPTION: Structured TOML configuration for Traefik BasicAuth middleware that defines a list of authorized users with hashed passwords.\n\nLANGUAGE: toml\nCODE:\n```\n# Declaring the user list\n[http.middlewares]\n  [http.middlewares.test-auth.basicAuth]\n  users = [\n    \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\",\n    \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Declaring Middleware and IngressRoute in Kubernetes CRD\nDESCRIPTION: Example showing how to declare a stripPrefix middleware and reference it in an IngressRoute. The middleware removes the '/stripit' prefix from incoming requests.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: stripprefix\n  namespace: foo\n\nspec:\n  stripPrefix:\n    prefixes:\n      - /stripit\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutebar\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`example.com`) && PathPrefix(`/stripit`)\n    kind: Rule\n    services:\n    - name: whoami\n      port: 80\n    middlewares:\n    - name: stripprefix\n      namespace: foo\n```\n\n----------------------------------------\n\nTITLE: Applying Traefik Kubernetes Resources\nDESCRIPTION: This shell command applies all the previously created YAML files to the Kubernetes cluster, setting up the complete Traefik installation with proper permissions, deployment, and service exposition.\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f 00-role.yml \\\n              -f 00-account.yml \\\n              -f 01-role-binding.yml \\\n              -f 02-traefik.yml \\\n              -f 02-traefik-services.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Socket Connection Example\nDESCRIPTION: Shows how to configure Traefik to connect to the Docker socket. This is a common setup for Docker-based Traefik deployments where Traefik needs to access the Docker API.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    endpoint: \"unix:///var/run/docker.sock\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  endpoint = \"unix:///var/run/docker.sock\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.endpoint=unix:///var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Session Tickets in TOML\nDESCRIPTION: Disables TLS session tickets in TOML format. This setting forces full TLS handshakes for each client connection, which can improve security by preventing session resumption attacks.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[tls.options]\n  [tls.options.default]\n    disableSessionTickets = true\n```\n\n----------------------------------------\n\nTITLE: EntryPoint HTTP Metrics in InfluxDB2 Format\nDESCRIPTION: List of HTTP metrics for entrypoints provided by Traefik in InfluxDB2 format, including request counts, TLS requests, request duration, and request/response byte metrics.\n\nLANGUAGE: influxdb\nCODE:\n```\ntraefik.entrypoint.requests.total\ntraefik.entrypoint.requests.tls.total\ntraefik.entrypoint.request.duration\ntraefik.entrypoint.requests.bytes.total\ntraefik.entrypoint.responses.bytes.total\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik API with Basic Auth for Docker & Swarm\nDESCRIPTION: Docker & Swarm configuration for securing the Traefik API dashboard with basic authentication using container labels. This configuration defines a router for the Traefik dashboard with a hostname rule, connects it to the internal API service, and applies a basic auth middleware with hashed credentials.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Configuration\nlabels:\n  - \"traefik.http.routers.api.rule=Host(`traefik.example.com`)\"\n  - \"traefik.http.routers.api.service=api@internal\"\n  - \"traefik.http.routers.api.middlewares=auth\"\n  - \"traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ACME Default Certificate in Docker & Swarm\nDESCRIPTION: Example of configuring an ACME-generated default certificate in Docker or Docker Swarm using labels to specify the resolver and domain information.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nlabels:\n  - \"traefik.tls.stores.default.defaultgeneratedcert.resolver=myresolver\"\n  - \"traefik.tls.stores.default.defaultgeneratedcert.domain.main=example.org\"\n  - \"traefik.tls.stores.default.defaultgeneratedcert.domain.sans=foo.example.org, bar.example.org\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted IPs for Forwarded Headers in Traefik\nDESCRIPTION: Configuration to specify which IP addresses to trust when processing X-Forwarded-* headers. This allows Traefik to accept forwarded headers only from specified trusted IPs for security.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  web:\n    address: \":80\"\n    forwardedHeaders:\n      trustedIPs:\n        - \"127.0.0.1/32\"\n        - \"192.168.1.7\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n\n    [entryPoints.web.forwardedHeaders]\n      trustedIPs = [\"127.0.0.1/32\", \"192.168.1.7\"]\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.web.address=:80\n--entryPoints.web.forwardedHeaders.trustedIPs=127.0.0.1/32,192.168.1.7\n```\n\n----------------------------------------\n\nTITLE: Defining Traefik AddPrefix Middleware\nDESCRIPTION: Traefik Middleware configuration that adds a prefix '/prefix' to the request path before forwarding to the backend service.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: add-prefix\n  namespace: default\nspec:\n  addPrefix:\n    prefix: /prefix\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS CA Certificate in ForwardAuth\nDESCRIPTION: Sets the CA certificate path for secure connection to the authentication server. This specifies the certificate authority to use for the TLS connection in various deployment environments.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.tls.ca=path/to/local.crt\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    address: https://example.com/auth\n    tls:\n      caSecret: mycasercret\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycasercret\n  namespace: default\n\ndata:\n  # Must contain a certificate under either a `tls.ca` or a `ca.crt` key. \n  tls.ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.tls.ca=path/to/local.crt\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        address: \"https://example.com/auth\"\n        tls:\n          ca: \"path/to/local.crt\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.forwardAuth]\n    address = \"https://example.com/auth\"\n    [http.middlewares.test-auth.forwardAuth.tls]\n      ca = \"path/to/local.crt\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default EntryPoint in Traefik\nDESCRIPTION: Configuration example showing how to mark an EntryPoint as a default using the asDefault option. When set to true, this EntryPoint will be used by routers that don't define their own EntryPoints.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: \":80\"\n  websecure:\n    address: \":443\"\n    asDefault: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints.web]\n  address = \":80\"\n[entryPoints.websecure]\n  address = \":443\"\n  asDefault = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.web.address=:80\n--entryPoints.websecure.address=:443\n--entryPoints.websecure.asDefault=true\n```\n\n----------------------------------------\n\nTITLE: Configuring CircuitBreaker for Latency Check in TOML File\nDESCRIPTION: TOML file configuration for setting up a circuit breaker middleware in Traefik that triggers when the median latency exceeds 100ms.\n\nLANGUAGE: toml\nCODE:\n```\n# Latency Check\n[http.middlewares]\n  [http.middlewares.latency-check.circuitBreaker]\n    expression = \"LatencyAtQuantileMS(50.0) > 100\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Options in Traefik\nDESCRIPTION: Example of configuring TLS options for a Traefik router, including minimum TLS version and allowed cipher suites. These options enable fine-grained control over the TLS parameters.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    Router-1:\n      rule: \"Host(`foo-domain`) && Path(`/foo-path/`)\"\n      service: service-id\n      # will terminate the TLS request\n      tls:\n        options: foo\n\ntls:\n  options:\n    foo:\n      minVersion: VersionTLS12\n      cipherSuites:\n        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.Router-1]\n    rule = \"Host(`foo-domain`) && Path(`/foo-path/`)\"\n    service = \"service-id\"\n    # will terminate the TLS request\n    [http.routers.Router-1.tls]\n      options = \"foo\"\n\n[tls.options]\n  [tls.options.foo]\n    minVersion = \"VersionTLS12\"\n    cipherSuites = [\n      \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n      \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\",\n      \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\n      \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n      \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    ]\n```\n\n----------------------------------------\n\nTITLE: Exposing Traefik Dashboard with Docker Swarm Labels\nDESCRIPTION: Docker Swarm service labels for exposing the Traefik dashboard. Uses dynamic configuration to create a router for the dashboard with basic authentication and includes a dummy service for port detection.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Configuration\ndeploy:\n  labels:\n    - \"traefik.http.routers.dashboard.rule=Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\"\n    - \"traefik.http.routers.dashboard.service=api@internal\"\n    - \"traefik.http.routers.dashboard.middlewares=auth\"\n    - \"traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0\"\n    # Dummy service for Swarm port detection. The port can be any valid integer value.\n    - \"traefik.http.services.dummy-svc.loadbalancer.server.port=9999\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a StripPrefix Middleware in Kubernetes with Traefik\nDESCRIPTION: This example shows how to define a StripPrefix middleware in the 'foo' namespace that removes the '/stripit' prefix from incoming requests. The middleware is created using Traefik's CRD implementation.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: stripprefix\n  namespace: foo\n\nspec:\n  stripPrefix:\n    prefixes:\n      - /stripit\n```\n\n----------------------------------------\n\nTITLE: Specifying Service for Router with Docker Label\nDESCRIPTION: Example of explicitly specifying which service a router should use with a Docker label. This connects the router to the service named 'myservice'.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.service=myservice\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Specific HTTP to HTTPS Redirection in Traefik v2 with IngressRoute\nDESCRIPTION: Example of domain-specific HTTP to HTTPS redirection in Traefik v2 using Kubernetes IngressRoute resources. Defines separate IngressRoutes for HTTP and HTTPS traffic, along with a redirectScheme middleware for HTTP to HTTPS redirection.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: http-redirect-ingressroute\n\nspec:\n  entryPoints:\n    - web\n  routes:\n    - match: Host(`example.net`)\n      kind: Rule\n      services:\n        - name: whoami\n          port: 80\n      middlewares:\n        - name: https-redirect\n\n---\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: https-ingressroute\n\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - match: Host(`foo`)\n      kind: Rule\n      services:\n        - name: whoami\n          port: 80\n  tls: {}\n\n---\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: https-redirect\nspec:\n  redirectScheme:\n    scheme: https\n    permanent: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Weighted Round Robin Load Balancing in Traefik\nDESCRIPTION: Example of weighted round robin load balancing between multiple services in Traefik. This configuration distributes traffic between services based on assigned weights, useful for canary deployments.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  services:\n    app:\n      weighted:\n        services:\n        - name: appv1\n          weight: 3\n        - name: appv2\n          weight: 1\n\n    appv1:\n      loadBalancer:\n        servers:\n        - address: \"xxx.xxx.xxx.xxx:8080\"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - address: \"xxx.xxx.xxx.xxx:8080\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.services]\n  [tcp.services.app]\n    [[tcp.services.app.weighted.services]]\n      name = \"appv1\"\n      weight = 3\n    [[tcp.services.app.weighted.services]]\n      name = \"appv2\"\n      weight = 1\n\n  [tcp.services.appv1]\n    [tcp.services.appv1.loadBalancer]\n      [[tcp.services.appv1.loadBalancer.servers]]\n        address = \"private-ip-server-1:8080/\"\n\n  [tcp.services.appv2]\n    [tcp.services.appv2.loadBalancer]\n      [[tcp.services.appv2.loadBalancer.servers]]\n        address = \"private-ip-server-2:8080/\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Weighted Round Robin with TraefikService in Kubernetes\nDESCRIPTION: Configuration for weighted round robin load balancing using TraefikService CRD. It shows nested TraefikService references and how to balance traffic across multiple Kubernetes services.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutebar\n  namespace: default\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`example.com`) && PathPrefix(`/foo`)\n    kind: Rule\n    services:\n    - name: wrr1\n      namespace: default\n      kind: TraefikService\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TraefikService\nmetadata:\n  name: wrr1\n  namespace: default\n\nspec:\n  weighted:\n    services:\n      - name: svc1\n        port: 80\n        weight: 1\n      - name: wrr2\n        kind: TraefikService\n        weight: 1\n      - name: mirror1\n        kind: TraefikService\n        weight: 1\n\n---\napiVersion: traefik.io/v1alpha1\nkind: TraefikService\nmetadata:\n  name: wrr2\n  namespace: default\n\nspec:\n  weighted:\n    services:\n      - name: svc2\n        port: 80\n        weight: 1\n      - name: svc3\n        port: 80\n        weight: 1\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc1\n  namespace: default\n\nspec:\n  ports:\n    - name: http\n      port: 80\n  selector:\n    app: traefiklabs\n    task: app1\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc2\n  namespace: default\n\nspec:\n  ports:\n    - name: http\n      port: 80\n  selector:\n    app: traefiklabs\n    task: app2\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc3\n  namespace: default\n\nspec:\n  ports:\n    - name: http\n      port: 80\n  selector:\n    app: traefiklabs\n    task: app3\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Headers using Traefik Labels\nDESCRIPTION: This configuration uses Docker labels to enable security features such as frame denial and browser XSS filtering using Traefik's Headers middleware. This helps protect applications against common web vulnerabilities.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.testHeader.headers.framedeny=true\"\n  - \"traefik.http.middlewares.testHeader.headers.browserxssfilter=true\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Traefik Ingress Controller with TLS Support\nDESCRIPTION: Kubernetes manifests for deploying Traefik as an Ingress Controller with TLS support. Includes ServiceAccount, Deployment with TLS entrypoint configuration, and LoadBalancer Service exposing the websecure port.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: traefik-ingress-controller\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: traefik\n  labels:\n    app: traefik\n\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: traefik\n  template:\n    metadata:\n      labels:\n        app: traefik\n    spec:\n      serviceAccountName: traefik-ingress-controller\n      containers:\n        - name: traefik\n          image: traefik:v3.2\n          args:\n            - --entryPoints.websecure.address=:443\n            - --entryPoints.websecure.http.tls\n            - --providers.kubernetesingress\n          ports:\n            - name: websecure\n              containerPort: 443\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: traefik\nspec:\n  type: LoadBalancer\n  selector:\n    app: traefik\n  ports:\n    - protocol: TCP\n      port: 443\n      name: websecure\n      targetPort: 443\n```\n\n----------------------------------------\n\nTITLE: Implementing Weighted Round Robin with TraefikService in Kubernetes\nDESCRIPTION: Configuration for weighted round robin load balancing using TraefikService CRD. It shows nested TraefikService references and how to balance traffic across multiple Kubernetes services.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutebar\n  namespace: default\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`example.com`) && PathPrefix(`/foo`)\n    kind: Rule\n    services:\n    - name: wrr1\n      namespace: default\n      kind: TraefikService\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TraefikService\nmetadata:\n  name: wrr1\n  namespace: default\n\nspec:\n  weighted:\n    services:\n      - name: svc1\n        port: 80\n        weight: 1\n      - name: wrr2\n        kind: TraefikService\n        weight: 1\n      - name: mirror1\n        kind: TraefikService\n        weight: 1\n\n---\napiVersion: traefik.io/v1alpha1\nkind: TraefikService\nmetadata:\n  name: wrr2\n  namespace: default\n\nspec:\n  weighted:\n    services:\n      - name: svc2\n        port: 80\n        weight: 1\n      - name: svc3\n        port: 80\n        weight: 1\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc1\n  namespace: default\n\nspec:\n  ports:\n    - name: http\n      port: 80\n  selector:\n    app: traefiklabs\n    task: app1\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc2\n  namespace: default\n\nspec:\n  ports:\n    - name: http\n      port: 80\n  selector:\n    app: traefiklabs\n    task: app2\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc3\n  namespace: default\n\nspec:\n  ports:\n    - name: http\n      port: 80\n  selector:\n    app: traefiklabs\n    task: app3\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffering Middleware with Labels\nDESCRIPTION: Sets the maximum request body size to 2MB using Docker label configuration for Traefik buffering middleware.\n\nLANGUAGE: yaml\nCODE:\n```\n# Sets the maximum request body to 2MB\nlabels:\n  - \"traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=2000000\"\n```\n\n----------------------------------------\n\nTITLE: Examples of Router Rules for Host Matching\nDESCRIPTION: Shows how to configure a router rule to match requests based on the Host header. This rule matches all traffic to 'traefik.example.com' regardless of the path.\n\nLANGUAGE: bash\nCODE:\n```\n# Matches http://traefik.example.com, http://traefik.example.com/api\n# or http://traefik.example.com/hello\nrule = \"Host(`traefik.example.com`)\"\n```\n\n----------------------------------------\n\nTITLE: Default EntryPoint TCP Router Configuration in YAML\nDESCRIPTION: Example of a TCP router listening to all entry points by default in YAML format. The router uses HostSNI rule to match connections and enables TLS handling.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\n\ntcp:\n  routers:\n    Router-1:\n      # By default, routers listen to every EntryPoints.\n      rule: \"HostSNI(`example.com`)\"\n      service: \"service-1\"\n      # will route TLS requests (and ignore non tls requests)\n      tls: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Static Configuration for gRPC with HTTP (YAML)\nDESCRIPTION: Static configuration in YAML format for setting up Traefik with HTTP entrypoints to handle gRPC traffic. This configuration defines the web entrypoint, file provider, and API access.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: :80\n\nproviders:\n  file:\n    directory: /path/to/dynamic/config\n\napi: {}\n```\n\n----------------------------------------\n\nTITLE: Setting Router Rule with Docker Label\nDESCRIPTION: Example of setting a Host rule for a router using a Docker label. This label configures the router to match requests for example.com.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.rule=Host(`example.com`)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS via CLI in Traefik\nDESCRIPTION: Static configuration example showing how to enable TLS on a secure entrypoint (websecure) using the Traefik command-line interface. This configuration sets up an HTTPS endpoint on port 443.\n\nLANGUAGE: bash\nCODE:\n```\n# Static configuration\n--entryPoints.websecure.address=:443\n--entryPoints.websecure.http.tls\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Endpoints using CLI Flags\nDESCRIPTION: Enables additional debugging and profiling endpoints using CLI flags. These endpoints are served under '/debug/' path and provide useful information for troubleshooting and performance analysis.\n\nLANGUAGE: bash\nCODE:\n```\n--api.debug=true\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth Middleware with Docker Labels\nDESCRIPTION: Docker labels configuration for Traefik BasicAuth middleware that includes a note about escaping dollar signs in docker-compose.yml and a command for generating user:password pairs.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\n#\n# Note: when used in docker-compose.yml all dollar signs in the hash need to be doubled for escaping.\n# To create user:password pair, it's possible to use this command:\n# echo $(htpasswd -nB user) | sed -e s/\\$/\\$\\$/g\n#\n# Also, note that dollar signs should NOT be doubled when not evaluated (e.g. Ansible docker_container module).\nlabels:\n  - \"traefik.http.middlewares.test-auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Compression in Consul Catalog\nDESCRIPTION: Enables the Compress middleware in Consul Catalog using service metadata. Uses default compression settings.\n\nLANGUAGE: yaml\nCODE:\n```\n# Enable compression\n- \"traefik.http.middlewares.test-compress.compress=true\"\n```\n\n----------------------------------------\n\nTITLE: Declaring and Referencing a Middleware in Traefik\nDESCRIPTION: Shows how to declare a redirect middleware that changes HTTP connections to HTTPS, and then reference that middleware in a router configuration. This pattern allows reusing middleware across multiple routers.\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  my-container:\n    # ...\n    labels:\n      # Declaring a middleware\n      - traefik.http.middlewares.my-redirect.redirectscheme.scheme=https\n      # Referencing a middleware\n      - traefik.http.routers.my-container.middlewares=my-redirect\n```\n\n----------------------------------------\n\nTITLE: Exposing Traefik Dashboard with Kubernetes CRD\nDESCRIPTION: Kubernetes configuration for exposing the Traefik dashboard using Custom Resource Definitions (CRDs). Creates an IngressRoute with basic authentication middleware for secure access.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: traefik-dashboard\nspec:\n  routes:\n  - match: Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\n    kind: Rule\n    services:\n    - name: api@internal\n      kind: TraefikService\n    middlewares:\n      - name: auth\n---\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: auth\nspec:\n  basicAuth:\n    secret: secretName # Kubernetes secret named \"secretName\"\n```\n\n----------------------------------------\n\nTITLE: Using Native Kubernetes Service Load-Balancing with IngressRouteTCP\nDESCRIPTION: Configuration for IngressRouteTCP with nativeLB option set to true. This instructs Traefik to use Kubernetes Service clusterIP directly instead of creating a load-balancer with pod IPs, simplifying load balancing configuration.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: traefik.io/v1alpha1\nkind: IngressRouteTCP\nmetadata:\n  name: test.route\n  namespace: default\n\nspec:\n  entryPoints:\n    - foo\n\n  routes:\n  - match: HostSNI(`*`)\n    services:\n    - name: svc\n      port: 80\n      # Here, nativeLB instructs to build the servers load balancer with the Kubernetes Service clusterIP only.\n      nativeLB: true\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc\n  namespace: default\nspec:\n  type: ClusterIP\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Routing Rule in YAML\nDESCRIPTION: Setting a custom default routing rule template in YAML format. This defines what routing rule to apply to a container if no rule is defined by a label, using Go templating.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    defaultRule: \"Host(`{{ .Name }}.{{ index .Labels \\\"customLabel\\\"}}`)\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Router Priorities in Traefik with Tags\nDESCRIPTION: JSON Tags configuration for explicitly setting router priorities in Traefik. The higher priority value (2) for Router-2 ensures it processes matching requests before Router-1.\n\nLANGUAGE: json\nCODE:\n```\n  {\n    // ...\n    \"Tags\": [\n      \"traefik.http.routers.Router-1.rule=HostRegexp(`[a-z]+\\.traefik\\.com`)\",\n      \"traefik.http.routers.Router-1.entryPoints=web\",\n      \"traefik.http.routers.Router-1.service=service-1\",\n      \"traefik.http.routers.Router-1.priority=1\"\n      \"traefik.http.routers.Router-2.rule=Host(`foobar.traefik.com`)\",\n      \"traefik.http.routers.Router-2.entryPoints=web\",\n      \"traefik.http.routers.Router-2.service=service-2\",\n      \"traefik.http.routers.Router-2.priority=2\"\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Enabling Nomad Provider in Traefik Configuration\nDESCRIPTION: Shows how to enable the Nomad provider in Traefik using different configuration formats (YAML, TOML, and CLI).\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad=true\n```\n\n----------------------------------------\n\nTITLE: Configuring ipAllowList Middleware with Docker Labels\nDESCRIPTION: Docker labels configuration example showing how to set up the ipAllowList middleware to accept requests only from specific IP addresses (127.0.0.1/32 and 192.168.1.7).\n\nLANGUAGE: yaml\nCODE:\n```\n# Accepts request from defined IP\nlabels:\n  - \"traefik.http.middlewares.test-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32, 192.168.1.7\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Domain for TCP Router in Traefik\nDESCRIPTION: Sets the main domain for the TLS certificate in a TCP router. This is used when generating certificates with Let's Encrypt.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.routers.mytcprouter.tls.domains[0].main=example.org\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP and TCP Routing with TOML in Traefik\nDESCRIPTION: Complete TOML configuration example that includes both HTTP and TCP routing, with TLS termination for TCP connections to a service named whoami-tcp.\n\nLANGUAGE: toml\nCODE:\n```\n# http routing section\n[http]\n  [http.routers]\n    # Define a connection between requests and services\n    [http.routers.to-whoami]\n      rule = \"Host(`example.com`) && PathPrefix(`/whoami/`)\"\n      # If the rule matches, applies the middleware\n      middlewares = [\"test-user\"]\n      # If the rule matches, forward to the whoami service (declared below)\n      service = \"whoami\"\n\n  [http.middlewares]\n     # Define an authentication mechanism\n     [http.middlewares.test-user.basicAuth]\n       users = [\"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"]\n\n  [http.services]\n     # Define how to reach an existing service on our infrastructure\n     [http.services.whoami.loadBalancer]\n       [[http.services.whoami.loadBalancer.servers]]\n         url = \"http://private/whoami-service\"\n\n[tcp]\n  [tcp.routers]\n    [tcp.routers.to-whoami-tcp]\n      rule = \"HostSNI(`whoami-tcp.example.com`)\"\n      service = \"whoami-tcp\"\n      [tcp.routers.to-whoami-tcp.tls]\n\n  [tcp.services]\n    [tcp.services.whoami-tcp.loadBalancer]\n      [[tcp.services.whoami-tcp.loadBalancer.servers]]\n        address = \"xx.xx.xx.xx:xx\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Syntax in YAML Format\nDESCRIPTION: Example showing how to configure different rule syntax versions (v2 and v3) for TCP routers using the File Provider in YAML format.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  routers:\n    Router-v3:\n      rule: ClientIP(`192.168.0.11`) || ClientIP(`192.168.0.12`)\n      ruleSyntax: v3\n    Router-v2:\n      rule: ClientIP(`192.168.0.11`, `192.168.0.12`)\n      ruleSyntax: v2\n```\n\n----------------------------------------\n\nTITLE: Declaring and Referencing Middleware in Traefik\nDESCRIPTION: Shows how to declare a middleware (redirect to HTTPS in this example) and then reference it in a router configuration.\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n# Declaring a middleware\ntraefik.http.middlewares.my-redirect.redirectscheme.scheme=https\n# Referencing a middleware\ntraefik.http.routers.my-service.middlewares=my-redirect\n```\n\n----------------------------------------\n\nTITLE: Configuring RateLimit in YAML File\nDESCRIPTION: Example of how to configure RateLimit middleware in a YAML file, allowing an average of 100 requests per second with a burst of 200 requests.\n\nLANGUAGE: yaml\nCODE:\n```\n# Here, an average of 100 requests per second is allowed.\n# In addition, a burst of 200 requests is allowed.\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        average: 100\n        burst: 200\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Log Format in YAML\nDESCRIPTION: Configures Traefik to write logs in JSON format to a specified file using YAML configuration. This changes the default text format to structured JSON output.\n\nLANGUAGE: yaml\nCODE:\n```\n# Writing Logs to a File, in JSON\nlog:\n  filePath: \"/path/to/log-file.log\"\n  format: json\n```\n\n----------------------------------------\n\nTITLE: Managing TLS Certificates with Kubernetes Secrets for Traefik\nDESCRIPTION: Example demonstrating how to use TLS certificates stored in Kubernetes Secrets with Traefik Ingress. The Ingress specifies which certificate should be loaded from the Secret to terminate TLS.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: foo\n  namespace: production\n\nspec:\n  rules:\n  - host: example.net\n    http:\n      paths:\n      - path: /bar\n        pathType: Exact\n        backend:\n          service:\n            name:  service1\n            port:\n              number: 80\n  # Only selects which certificate(s) should be loaded from the secret, in order to terminate TLS.\n  # Doesn't enable TLS for that ingress (hence for the underlying router).\n  # Please see the TLS annotations on ingress made for that purpose.\n  tls:\n  - secretName: supersecret\n```\n\n----------------------------------------\n\nTITLE: Configuring RateLimit in Kubernetes\nDESCRIPTION: Example of how to configure RateLimit middleware in Kubernetes using a custom resource definition, allowing an average of 100 requests per second with a burst of 200 requests.\n\nLANGUAGE: yaml\nCODE:\n```\n# Here, an average of 100 requests per second is allowed.\n# In addition, a burst of 200 requests is allowed.\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-ratelimit\nspec:\n  rateLimit:\n    average: 100\n    burst: 200\n```\n\n----------------------------------------\n\nTITLE: Linking TCP Router to Service in Traefik\nDESCRIPTION: Associates a TCP router with a specific service that will handle the routed traffic. Services define how to reach the actual application.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.service=myservice\n```\n\n----------------------------------------\n\nTITLE: Defining ServersTransport CRD in YAML\nDESCRIPTION: Complete YAML configuration for the ServersTransport CRD showing all available options. This includes TLS settings, timeouts, connection parameters, and SPIFFE configuration for secure server communication.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  serverName: foobar                        # [1]\n  insecureSkipVerify: true                  # [2]\n  rootCAs:                                  # [3]\n    - configMap: foobar\n    - secret: foobar\n  certificatesSecrets:                      # [4]\n    - foobar\n    - foobar\n  maxIdleConnsPerHost: 1                    # [5]\n  forwardingTimeouts:                       # [6]\n    dialTimeout: 42s                        # [7]\n    responseHeaderTimeout: 42s              # [8]\n    idleConnTimeout: 42s                    # [9]\n  peerCertURI: foobar                       # [10]\n  disableHTTP2: true                        # [11]\n  spiffe:                                   # [12] \n    ids:                                    # [13]\n    - spiffe://trust-domain/id1\n    - spiffe://trust-domain/id2\n    trustDomain: \"spiffe://trust-domain\"    # [14]\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Options for TCP Router in Traefik\nDESCRIPTION: References a TLS options configuration to use with a TCP router, allowing customization of TLS parameters.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.routers.mytcprouter.tls.options=mysoptions\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IPAllowList TCP Middleware in TOML\nDESCRIPTION: Configures an IPAllowList TCP middleware in Traefik using TOML structured format. This middleware restricts access to only the specified IP addresses.\n\nLANGUAGE: toml\nCODE:\n```\n# Accepts request from defined IP\n[tcp.middlewares]\n  [tcp.middlewares.test-ipallowlist.ipAllowList]\n    sourceRange = [\"127.0.0.1/32\", \"192.168.1.7\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum TLS Version in TOML\nDESCRIPTION: Example of configuring minimum TLS version options in TOML format. This sets requirements for clients to use at least a specific TLS version.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[tls.options]\n\n  [tls.options.default]\n    minVersion = \"VersionTLS12\"\n\n  [tls.options.mintls13]\n    minVersion = \"VersionTLS13\"\n```\n\n----------------------------------------\n\nTITLE: Setting excludedContentTypes in Kubernetes\nDESCRIPTION: Defines a Kubernetes Middleware that configures compression to exclude specific content types from being compressed.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-compress\nspec:\n  compress:\n    excludedContentTypes:\n      - text/event-stream\n```\n\n----------------------------------------\n\nTITLE: Scaling the Whoami Service with Docker Compose\nDESCRIPTION: Command to scale the 'whoami' service to two instances, demonstrating Traefik's automatic load balancing capabilities.\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d --scale whoami=2\n```\n\n----------------------------------------\n\nTITLE: Creating a Certificate Resource with cert-manager\nDESCRIPTION: This snippet defines a cert-manager Certificate resource that will generate a TLS certificate for the specified domain and store it in a Kubernetes Secret. It references the previously created ACME Issuer.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: whoami\n  namespace: traefik\nspec:\n  secretName: domain-tls        # <===  Name of secret where the generated certificate will be stored.\n  dnsNames:\n    - \"domain.example.com\"\n  issuerRef:\n    name: acme\n    kind: Issuer\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Pages Middleware in Kubernetes\nDESCRIPTION: Example showing how to configure Traefik error pages middleware in Kubernetes using a custom resource. It defines status codes, query parameter, and references a Kubernetes service.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-errors\nspec:\n  errors:\n    status:\n      - \"500\"\n      - \"501\"\n      - \"503\"\n      - \"505-599\"\n    query: /{status}.html\n    service:\n      name: error-handler-service\n      port: 80\n```\n\n----------------------------------------\n\nTITLE: Enabling File Provider with Directory Configuration\nDESCRIPTION: Configuration snippets for enabling the Traefik file provider by specifying a directory path for dynamic configuration files.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  file:\n    directory: \"/path/to/dynamic/conf\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.file]\n  directory = \"/path/to/dynamic/conf\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.file.directory=/path/to/dynamic/conf\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Address in Traefik\nDESCRIPTION: Specifies the address where Traefik should send metrics to the Datadog agent. The address can be a standard IP:port format or a Unix Domain Socket path. Default is \"127.0.0.1:8125\".\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  datadog:\n    address: 127.0.0.1:8125\n```\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.datadog]\n    address = \"127.0.0.1:8125\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--metrics.datadog.address=127.0.0.1:8125\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via Unix Socket in TOML\nDESCRIPTION: Configuration for connecting Traefik to Docker Swarm using the unix socket in TOML format. This is the default connection method when running Traefik in a container with the Docker socket mounted.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  endpoint = \"unix:///var/run/docker.sock\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Mirroring in Traefik (YAML)\nDESCRIPTION: Configuration for a mirroring service that forwards requests to a main service while mirroring 10% of traffic to a secondary service. Includes options for controlling request body mirroring and maximum body size.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    mirrored-api:\n      mirroring:\n        service: appv1\n        # mirrorBody defines whether the request body should be mirrored.\n        # Default value is true.\n        mirrorBody: false\n        # maxBodySize is the maximum size allowed for the body of the request.\n        # If the body is larger, the request is not mirrored.\n        # Default value is -1, which means unlimited size.\n        maxBodySize: 1024\n        mirrors:\n        - name: appv2\n          percent: 10\n\n    appv1:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Setting PROXY Protocol Version for TCP Service in Traefik\nDESCRIPTION: Configures which version of the PROXY protocol to use for a TCP service when communicating with the backend servers.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.services.mytcpservice.loadbalancer.proxyprotocol.version=1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Certificate in Kubernetes\nDESCRIPTION: Example of configuring a default TLS certificate in Kubernetes using TLSStore resource and a Secret. This certificate is used for connections without SNI or matching domain.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSStore\nmetadata:\n  name: default\n  namespace: default\n\nspec:\n  defaultCertificate:\n    secretName: default-certificate\n    \n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: default-certificate\n  namespace: default\n  \ntype: Opaque\ndata:\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 Subnet for InFlightReq in TOML File\nDESCRIPTION: This snippet shows how to configure the IPv6 subnet parameter for InFlightReq middleware in a TOML configuration file to transform IPv6 addresses.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-inflightreq.inflightreq]\n    [http.middlewares.test-inflightreq.inFlightReq.sourceCriterion.ipStrategy]\n      ipv6Subnet = 64\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth with YAML File\nDESCRIPTION: Sets up BasicAuth middleware using a YAML configuration file. This approach allows declaring user lists directly in the Traefik configuration file.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\nhttp:\n  middlewares:\n    test-auth:\n      basicAuth:\n        users:\n          - \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"\n          - \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Provider Options in Traefik\nDESCRIPTION: Command line arguments for configuring the Redis provider in Traefik. These options control how Traefik interacts with Redis as a backend, including authentication, endpoint configuration, TLS settings, and Sentinel mode options.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.plugin.<name>\n--providers.providersthrottleduration\n--providers.redis\n--providers.redis.db\n--providers.redis.endpoints\n--providers.redis.password\n--providers.redis.rootkey\n--providers.redis.sentinel.latencystrategy\n--providers.redis.sentinel.mastername\n--providers.redis.sentinel.password\n--providers.redis.sentinel.randomstrategy\n--providers.redis.sentinel.replicastrategy\n--providers.redis.sentinel.usedisconnectedreplicas\n--providers.redis.sentinel.username\n--providers.redis.tls.ca\n--providers.redis.tls.cert\n--providers.redis.tls.insecureskipverify\n--providers.redis.tls.key\n--providers.redis.username\n```\n\n----------------------------------------\n\nTITLE: Declaring an IngressRouteUDP Example in YAML\nDESCRIPTION: A practical example of an IngressRouteUDP resource with multiple services configured with different weights. This shows how to set up UDP load balancing between two services in Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRouteUDP\nmetadata:\n  name: ingressrouteudpfoo\n\nspec:\n  entryPoints:\n    - fooudp\n  routes:\n  - services:\n    - name: foo\n      port: 8080\n      weight: 10\n    - name: bar\n      port: 8081\n      weight: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik HTTP Service Load Balancer in TOML\nDESCRIPTION: Example of configuring a Traefik HTTP service with load balancer settings in TOML format. Shows server configuration, sticky sessions, health checks, and response forwarding parameters.\n\nLANGUAGE: toml\nCODE:\n```\n[http.services]\n  [http.services.my-service.loadBalancer]\n    [[http.services.my-service.loadBalancer.servers]]\n      url = \"http://private-ip-server-1/\"\n    \n    [http.services.my-service.loadBalancer.sticky.cookie]\n      name = \"sticky-cookie\"\n\n    [http.services.my-service.loadBalancer.healthcheck]\n      path = \"/health\"\n      interval = \"10s\"\n      timeout = \"3s\"\n    \n    passHostHeader = true\n    serversTransport = \"customTransport@file\"\n\n    [http.services.my-service.loadBalancer.responseForwarding]\n      flushInterval = \"150ms\"\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Interval in Traefik\nDESCRIPTION: Defines how frequently Traefik performs health checks on the backend service. The interval is specified as a duration value, determining the time between successive health check requests.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.healthcheck.interval=10s\"\n```\n\n----------------------------------------\n\nTITLE: Setting Burst Value in YAML File\nDESCRIPTION: Example of setting the burst parameter to 100 in a YAML file. The burst parameter defines the maximum number of requests allowed to go through in a short period of time.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        burst: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Circuit Breaker with Latency Check in Kubernetes\nDESCRIPTION: Example of configuring a circuit breaker middleware in Traefik using Kubernetes Custom Resource Definition (CRD). This configuration creates a latency check that opens the circuit when the median latency exceeds 100ms.\n\nLANGUAGE: yaml\nCODE:\n```\n# Latency Check\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: latency-check\nspec:\n  circuitBreaker:\n    expression: LatencyAtQuantileMS(50.0) > 100\n```\n\n----------------------------------------\n\nTITLE: Setting includedContentTypes in Kubernetes\nDESCRIPTION: Defines a Kubernetes Middleware that configures compression to only compress specific content types.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-compress\nspec:\n  compress:\n    includedContentTypes:\n      - application/json\n      - text/html\n      - text/plain\n```\n\n----------------------------------------\n\nTITLE: Testing Load Balancing with cURL\nDESCRIPTION: Command to test Traefik's load balancing between multiple instances of the 'whoami' service.\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H Host:whoami.docker.localhost http://127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom DNS Resolvers in ACME DNS Challenge\nDESCRIPTION: Configuration examples for specifying custom DNS servers to resolve the FQDN authority when using DNS-01 challenges. Demonstrates setting up multiple DNS resolvers like Cloudflare and Google DNS.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      dnsChallenge:\n        # ...\n        resolvers:\n          - \"1.1.1.1:53\"\n          - \"8.8.8.8:53\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  [certificatesResolvers.myresolver.acme.dnsChallenge]\n    # ...\n    resolvers = [\"1.1.1.1:53\", \"8.8.8.8:53\"]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Load Balancing for Kubernetes Services\nDESCRIPTION: Example of enabling native load balancing for a Kubernetes service using the traefik.io/service.nativelb annotation, which makes Traefik send traffic to the service IP instead of pod IPs.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myservice\n  namespace: default\n  annotations:\n    traefik.io/service.nativelb: \"true\"\nspec:\n[...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik EntryPoint with ReusePort Option (YAML, TOML, CLI)\nDESCRIPTION: Example showing how to enable the ReusePort option for a Traefik EntryPoint. This allows multiple instances to listen on the same port by utilizing the SO_REUSEPORT socket option, which is useful for zero-downtime deployments.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: \":80\"\n    reusePort: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints.web]\n  address = \":80\"\n  reusePort = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.web.address=:80\n--entryPoints.web.reusePort=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Datadog Metrics in Traefik\nDESCRIPTION: Basic configuration to enable Datadog metrics integration in Traefik. This is the minimal configuration needed to activate the Datadog metrics exporter.\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  datadog: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.datadog]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--metrics.datadog=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted Services in Traefik\nDESCRIPTION: Defines a weighted load balancing setup with health checks that distributes traffic between two services with a 3:1 weight ratio. Each service has its own health check configuration and server definitions.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    app:\n      weighted:\n        healthCheck: {}\n        services:\n        - name: appv1\n          weight: 3\n        - name: appv2\n          weight: 1\n\n    appv1:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\n    appv2:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted Round Robin in YAML\nDESCRIPTION: Example of configuring Weighted Round Robin (WRR) load balancing strategy in YAML format. This allows distribution of traffic between multiple services based on assigned weights.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    app:\n      weighted:\n        services:\n        - name: appv1\n          weight: 3\n        - name: appv2\n          weight: 1\n\n    appv1:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Headers in Traefik\nDESCRIPTION: Configures custom headers to be sent during health check requests to the backend service.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.headers.X-Foo=foobar\n```\n\n----------------------------------------\n\nTITLE: Enabling Dashboard in YAML Configuration\nDESCRIPTION: Enables the Traefik dashboard using YAML configuration. The dashboard provides a visual interface for monitoring and managing Traefik. By default, the dashboard is enabled when API is configured.\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  dashboard: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Routers and Services per Docker Container\nDESCRIPTION: Advanced configuration showing how to set up multiple routers and services for a single container. This example routes traffic from two different domains to two different ports on the same container.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  my-container:\n    # ...\n    labels:\n      - traefik.http.routers.www-router.rule=Host(`example-a.com`)\n      - traefik.http.routers.www-router.service=www-service\n      - traefik.http.services.www-service.loadbalancer.server.port=8000\n      - traefik.http.routers.admin-router.rule=Host(`example-b.com`)\n      - traefik.http.routers.admin-router.service=admin-service\n      - traefik.http.services.admin-service.loadbalancer.server.port=9000\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik EntryPoint for UDP on Port 1704 (YAML, TOML, CLI)\nDESCRIPTION: Example of configuring a Traefik EntryPoint named 'streaming' that listens for UDP traffic on port 1704. The configuration demonstrates the UDP protocol specification in the address format.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  streaming:\n    address: \":1704/udp\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.streaming]\n    address = \":1704/udp\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.streaming.address=:1704/udp\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Retry Middleware in TOML File\nDESCRIPTION: Example of how to configure the Retry middleware in a TOML configuration file with 4 retry attempts and exponential backoff starting at 100ms. Uses the http.middlewares structure.\n\nLANGUAGE: toml\nCODE:\n```\n# Retry 4 times with exponential backoff\n[http.middlewares]\n  [http.middlewares.test-retry.retry]\n    attempts = 4\n    initialInterval = \"100ms\"\n```\n\n----------------------------------------\n\nTITLE: Configuring nativeLBByDefault in Traefik Kubernetes CRD Provider\nDESCRIPTION: Determines whether to use Native Kubernetes load-balancing mode by default. Affects the behavior of the IngressRoute nativeLB option.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesCRD:\n    nativeLBByDefault: true\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesCRD]\n  nativeLBByDefault = true\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetescrd.nativeLBByDefault=true\n```\n\n----------------------------------------\n\nTITLE: Configuring ACME Default Certificate in YAML\nDESCRIPTION: Example of configuring Traefik to use an ACME provider (like Let's Encrypt) to generate the default certificate in YAML format.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  stores:\n    default:\n      defaultGeneratedCert:\n        resolver: myresolver\n        domain:\n          main: example.org\n          sans:\n            - foo.example.org\n            - bar.example.org\n```\n\n----------------------------------------\n\nTITLE: Disabling Colored Log Output via CLI\nDESCRIPTION: Disables colorized output when using the 'common' log format in Traefik with command line configuration. This can be useful for log files that will be processed by other tools.\n\nLANGUAGE: bash\nCODE:\n```\n--log.nocolor=true\n```\n\n----------------------------------------\n\nTITLE: Default Priority Computation for TCP Routers in YAML Format\nDESCRIPTION: Example of dynamic configuration showing how default priorities are computed for TCP routers with ClientIP rules.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  routers:\n    Router-1:\n      rule: \"ClientIP(`192.168.0.12`)\"\n      # ...\n    Router-2:\n      rule: \"ClientIP(`192.168.0.0/24`)\"\n      # ...\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes Ingress Resource Definition\nDESCRIPTION: Sample Kubernetes Ingress resource that defines routing rules for services in the production namespace, with paths /bar and /foo pointing to service1.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: foo\n  namespace: production\n\nspec:\n  rules:\n    - host: example.net\n      http:\n        paths:\n          - path: /bar\n            pathType: Exact\n            backend:\n              service:\n                name:  service1\n                port:\n                  number: 80\n          - path: /foo\n            pathType: Exact\n            backend:\n              service:\n                name:  service1\n                port:\n                  number: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Domain Main for Router in Traefik with Consul Catalog\nDESCRIPTION: Sets the main domain for TLS certificates for 'myrouter' to example.org. This is used when generating certificates through ACME.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.tls.domains[0].main=example.org\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded IPs for InFlightReq in Kubernetes\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes Middleware resource to configure excluded IPs for InFlightReq to select the client IP from X-Forwarded-For header.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-inflightreq\nspec:\n  inFlightReq:\n    sourceCriterion:\n      ipStrategy:\n        excludedIPs:\n        - 127.0.0.1/32\n        - 192.168.1.7\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Scheme in Traefik with YAML Labels\nDESCRIPTION: Sets the scheme (http or https) to use for health check requests.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.scheme=http\n```\n\n----------------------------------------\n\nTITLE: Setting encodings in Consul Catalog\nDESCRIPTION: Configures the Compress middleware in Consul Catalog to support specific compression algorithms in priority order.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-compress.compress.encodings=zstd,br\"\n```\n\n----------------------------------------\n\nTITLE: Complete Kubernetes Ingress Setup with TLS - RBAC Configuration\nDESCRIPTION: RBAC configuration for Traefik Ingress Controller with proper permissions to access services, secrets, endpoints, and ingress resources.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: traefik-ingress-controller\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - services\n      - secrets\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - discovery.k8s.io\n    resources:\n      - endpointslices\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses\n      - ingressclasses\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses/status\n    verbs:\n      - update\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: traefik-ingress-controller\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: traefik-ingress-controller\nsubjects:\n  - kind: ServiceAccount\n    name: traefik-ingress-controller\n    namespace: default\n```\n\n----------------------------------------\n\nTITLE: Configuring dnsChallenge with DigitalOcean Provider in TOML\nDESCRIPTION: TOML configuration for setting up a DNS challenge with the DigitalOcean provider in Traefik. This format uses TOML syntax to configure the same DNS challenge parameters as the YAML example.\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  [certificatesResolvers.myresolver.acme.dnsChallenge]\n    provider = \"digitalocean\"\n    delayBeforeCheck = 0\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Traefik EntryPoints with ReusePort on Different Interfaces (YAML, TOML, CLI)\nDESCRIPTION: Example showing how to configure multiple EntryPoints with ReusePort, binding to different network interfaces but using the same port. This allows for more specific routing based on the interface where traffic arrives.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: \":80\"\n    reusePort: true\n  privateWeb:\n    address: \"192.168.1.2:80\"\n    reusePort: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints.web]\n  address = \":80\"\n  reusePort = true\n[entryPoints.privateWeb]\n  address = \"192.168.1.2:80\"\n  reusePort = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.web.address=:80\n--entryPoints.web.reusePort=true\n--entryPoints.privateWeb.address=192.168.1.2:80\n--entryPoints.privateWeb.reusePort=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Sessions in Traefik\nDESCRIPTION: Controls whether sticky sessions are enabled for a service. When enabled, subsequent requests from the same client are routed to the same backend server.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/sticky\n```\n\n----------------------------------------\n\nTITLE: Disabling Colored Log Output in TOML\nDESCRIPTION: Disables colorized output when using the 'common' log format in Traefik with TOML configuration. This can be useful for log files that will be processed by other tools.\n\nLANGUAGE: toml\nCODE:\n```\n[log]\n  noColor = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes BasicAuth with kubernetes.io/basic-auth Secret\nDESCRIPTION: Shows how to use Kubernetes' native basic-auth secret type with Traefik BasicAuth middleware. This secret type stores username and password in base64-encoded format.\n\nLANGUAGE: yaml\nCODE:\n```\n# This is an alternate auth secret that demonstrates the basic-auth secret type.\n# Note: the password is not hashed, and is merely base64 encoded.\n\napiVersion: v1\nkind: Secret\nmetadata:\n  name: authsecret2\n  namespace: default\ntype: kubernetes.io/basic-auth\ndata:\n  username: dXNlcg== # username: user\n  password: cGFzc3dvcmQ= # password: password\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover with Health Checks (YAML)\nDESCRIPTION: Enhanced failover configuration with health checks for both the failover service itself and its child services. This setup provides hierarchical health monitoring throughout the service chain.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    app:\n      failover:\n        healthCheck: {}\n        service: main\n        fallback: backup\n\n    main:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\n    backup:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Rules in Traefik with Consul Catalog\nDESCRIPTION: Sets a Host rule for a router named 'myrouter' that will match requests for example.com. This tag should be applied to a service in Consul Catalog.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.rule=Host(`example.com`)\n```\n\n----------------------------------------\n\nTITLE: Migrating TOML File Configuration from v1 to v2\nDESCRIPTION: Demonstrates the migration of a TOML file configuration from Traefik v1 to v2. The v1 configuration with frontends and backends is replaced with the v2 concept of routers, services, and middlewares for better separation of concerns.\n\nLANGUAGE: toml\nCODE:\n```\n[frontends]\n  [frontends.frontend1]\n    entryPoints = [\"http\"]\n    backend = \"backend1\"\n\n    [frontends.frontend1.routes]\n      [frontends.frontend1.routes.route0]\n        rule = \"Host:test.localhost\"\n      [frontends.frontend1.routes.route0]\n        rule = \"PathPrefix:/test\"\n\n    [frontends.frontend1.auth]\n      [frontends.frontend1.auth.basic]\n        users = [\n          \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\",\n          \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\",\n        ]\n\n[backends]\n  [backends.backend1]\n    [backends.backend1.servers.server0]\n      url = \"http://10.10.10.1:80\"\n    [backends.backend1.servers.server1]\n      url = \"http://10.10.10.2:80\"\n\n    [backends.backend1.loadBalancer]\n      method = \"wrr\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.routers]\n  [http.routers.router0]\n    rule = \"Host(`test.localhost`) && PathPrefix(`/test`)\"\n    middlewares = [\"auth\"]\n    service = \"my-service\"\n\n[http.services]\n  [[http.services.my-service.loadBalancer.servers]]\n    url = \"http://10.10.10.1:80\"\n  [[http.services.my-service.loadBalancer.servers]]\n    url = \"http://10.10.10.2:80\"\n\n[http.middlewares]\n  [http.middlewares.auth.basicAuth]\n    users = [\n      \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\",\n      \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\",\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring UsersFile with YAML File\nDESCRIPTION: Demonstrates how to configure BasicAuth to use an external file containing the list of authorized users in a YAML configuration file.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      basicAuth:\n        usersFile: \"/path/to/my/usersfile\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Socket Endpoint in TOML\nDESCRIPTION: Configuration for connecting Traefik to the Docker daemon via Unix socket using TOML format. This is the standard way to connect to Docker on the local machine.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  endpoint = \"unix:///var/run/docker.sock\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TLSOption Resource for Traefik\nDESCRIPTION: YAML definition for a TLSOption resource that specifies TLS configuration options. It sets the minimum TLS version to TLS 1.2 for enhanced security when used with IngressRouteTCP resources.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: opt\n  namespace: default\n\nspec:\n  minVersion: VersionTLS12\n```\n\n----------------------------------------\n\nTITLE: Router Metrics in OpenTelemetry Format\nDESCRIPTION: Lists the metric names for router monitoring in OpenTelemetry format. These metrics track request counts, TLS usage, request duration, and data transfer sizes.\n\nLANGUAGE: opentelemetry\nCODE:\n```\ntraefik_router_requests_total\ntraefik_router_requests_tls_total\ntraefik_router_request_duration_seconds\ntraefik_router_requests_bytes_total\ntraefik_router_responses_bytes_total\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Domain SANs for Router in Traefik with Consul Catalog\nDESCRIPTION: Defines Subject Alternative Names (SANs) for the TLS certificate of 'myrouter', allowing the certificate to be valid for multiple domains.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.tls.domains[0].sans=test.example.org,dev.example.org\n```\n\n----------------------------------------\n\nTITLE: Matching IPv4 Subnet in Traefik TCP Router\nDESCRIPTION: Example of using ClientIP matcher to match connections from an IPv4 subnet in CIDR notation in Traefik TCP router configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nClientIP(`192.168.1.0/24`)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum TLS Version in Kubernetes\nDESCRIPTION: Example of configuring maximum TLS versions in Kubernetes using TLSOption resources. Note that limiting TLS version is generally discouraged for security reasons.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: default\n  namespace: default\n\nspec:\n  maxVersion: VersionTLS13\n\n---\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: maxtls12\n  namespace: default\n\nspec:\n  maxVersion: VersionTLS12\n```\n\n----------------------------------------\n\nTITLE: Setting encodings in YAML File\nDESCRIPTION: Configures the Compress middleware using YAML to support specific compression algorithms in priority order.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-compress:\n      compress:\n        encodings:\n          - zstd\n          - br\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Namespaces in Traefik\nDESCRIPTION: Defines the namespaces to query in Consul Enterprise. When using namespaces, discovered configuration objects will be suffixed with '@consul-<namespace>'.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consul:\n    namespaces: \n      - \"ns1\"\n      - \"ns2\"\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consul]\n  namespaces = [\"ns1\", \"ns2\"]\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consul.namespaces=ns1,ns2\n# ...\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for TLS Certificates\nDESCRIPTION: YAML definition for a Kubernetes Secret resource containing TLS certificate and private key data. This secret is referenced by IngressRouteTCP resources for TLS termination.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: supersecret\n\ndata:\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes CRD Provider in Traefik with CLI flags\nDESCRIPTION: Command-line interface flag examples for configuring the Traefik KubernetesCRD provider, showing various options like endpoint, token, certificate authority path, namespaces, label selectors, ingress class, and throttling duration.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetescrd.endpoint=http://localhost:8080\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetescrd.token=mytoken\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetescrd.certauthfilepath=/my/ca.crt\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetescrd.namespaces=default,production\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetescrd.labelselector=\"app=traefik\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetescrd.ingressclass=traefik-internal\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetescrd.throttleDuration=10s\n```\n\n----------------------------------------\n\nTITLE: Formatting Domain Component Information in Certificate Headers\nDESCRIPTION: Shows how domain component information is formatted in headers when info.issuer.domainComponent is set to true. The data is extracted from the issuer part of the certificate using the DC key and formatted as a comma-separated list.\n\nLANGUAGE: text\nCODE:\n```\nDC=org,DC=cheese\n```\n\n----------------------------------------\n\nTITLE: Setting defaultEncoding in Kubernetes\nDESCRIPTION: Defines a Kubernetes Middleware that configures a default compression encoding when the client doesn't specify a preference.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-compress\nspec:\n  compress:\n    defaultEncoding: gzip\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry HTTP Headers in TOML\nDESCRIPTION: Sets additional HTTP headers for OpenTelemetry logs export using TOML configuration. These headers will be sent with each request to the collector.\n\nLANGUAGE: toml\nCODE:\n```\n[log.otlp.http.headers]\n  foo = \"bar\"\n  baz = \"buz\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Compression in Kubernetes\nDESCRIPTION: Defines a Traefik Middleware resource in Kubernetes that enables compression with default settings.\n\nLANGUAGE: yaml\nCODE:\n```\n# Enable compression\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-compress\nspec:\n  compress: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLSRoute for TLS Traffic Routing in Kubernetes\nDESCRIPTION: Defines a TLSRoute resource in the Gateway API experimental channel that routes TLS traffic based on SNI to a whoami backend service. The configuration specifies hostname and backend details.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1alpha2\nkind: TLSRoute\nmetadata:\n  name: whoami-tls\n  namespace: default\nspec:\n  parentRefs:\n    - name: traefik\n      sectionName: tls\n      kind: Gateway\n\n  hostnames:\n    - whoami.localhost\n\n  rules:\n    - backendRefs:\n        - name: whoamitcp\n          namespace: default\n          port: 3000\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics for a Router with Consul Catalog Tags in Traefik\nDESCRIPTION: Enables metrics collection for a specific router as part of observability configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.observability.metrics=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffering Middleware in YAML\nDESCRIPTION: Sets the maximum request body size to 2MB using YAML structured configuration format for Traefik buffering middleware.\n\nLANGUAGE: yaml\nCODE:\n```\n# Sets the maximum request body to 2MB\nhttp:\n  middlewares:\n    limit:\n      buffering:\n        maxRequestBodyBytes: 2000000\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Certificate Chain in Traefik\nDESCRIPTION: Configuration for specifying the preferred certificate chain to use. This is useful when a CA offers multiple certificate chains to match a specific Subject Common Name.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      preferredChain: 'ISRG Root X1'\n      # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  preferredChain = \"ISRG Root X1\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.preferredChain=ISRG Root X1\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Observability in Traefik using TOML\nDESCRIPTION: TOML configuration example showing how to disable metrics, access logs, and tracing for a specific HTTP router in Traefik. This setup creates a router named 'my-router' that handles paths starting with '/foo' and connects to 'service-foo'.\n\nLANGUAGE: toml\nCODE:\n```\n[http.routers.my-router]\n  rule = \"Path(`/foo`)\"\n  service = \"service-foo\"\n\n  [http.routers.my-router.observability]\n    metrics = false\n    accessLogs = false\n    tracing = false\n```\n\n----------------------------------------\n\nTITLE: Configuring HeaderField with Docker & Swarm\nDESCRIPTION: Shows how to define a header field to store the authenticated user in Docker or Swarm environments.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.my-auth.basicauth.headerField=X-WebAuth-User\"\n```\n\n----------------------------------------\n\nTITLE: Setting Root Key for Consul in Traefik\nDESCRIPTION: Defines the root key of the configuration in Consul. The default value is 'traefik'.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consul:\n    rootKey: \"traefik\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consul]\n  rootKey = \"traefik\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consul.rootkey=traefik\n```\n\n----------------------------------------\n\nTITLE: Configuring Circuit Breaker with Latency Check in TOML\nDESCRIPTION: Example of configuring a circuit breaker middleware in Traefik using TOML structured format. This configuration creates a latency check that opens the circuit when the median latency exceeds 100ms.\n\nLANGUAGE: toml\nCODE:\n```\n# Latency Check\n[http.middlewares]\n  [http.middlewares.latency-check.circuitBreaker]\n    expression = \"LatencyAtQuantileMS(50.0) > 100\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Domain Component Information in Certificate Headers\nDESCRIPTION: Shows how domain component information is formatted in headers when info.issuer.domainComponent is set to true. The data is extracted from the issuer part of the certificate using the DC key and formatted as a comma-separated list.\n\nLANGUAGE: text\nCODE:\n```\nDC=org,DC=cheese\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Certificate in YAML\nDESCRIPTION: Example of defining a default certificate for connections without SNI or without a matching domain in YAML format. This certificate is used as fallback.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  stores:\n    default:\n      defaultCertificate:\n        certFile: path/to/cert.crt\n        keyFile: path/to/cert.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Domain in Traefik with YAML Labels\nDESCRIPTION: Sets the domain attribute for sticky session cookies, controlling which domains the cookie is valid for.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.domain=foo.com\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Method in Traefik\nDESCRIPTION: Defines the HTTP method to use for health check requests. This determines whether Traefik uses GET, POST, or other methods for health checks.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/method\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry HTTP Exporter in TOML\nDESCRIPTION: Configures Traefik to send logs to the OpenTelemetry Collector using HTTP protocol with TOML configuration. This is the default protocol when using OpenTelemetry.\n\nLANGUAGE: toml\nCODE:\n```\n[log.otlp.http]\n```\n\n----------------------------------------\n\nTITLE: Setting Users Option in DigestAuth with Docker & Swarm\nDESCRIPTION: Shows how to define authorized users for DigestAuth middleware using the users option in Docker & Swarm.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.digestauth.users=test:traefik:a2688e031edb4be6a3797f3882655c05,test2:traefik:518845800f9e2bfb1f1f740ec24f074e\"\n```\n\n----------------------------------------\n\nTITLE: Setting Average Rate in TOML File\nDESCRIPTION: Example of setting the average request rate to 100 requests per second in a TOML file. The average parameter defines the maximum rate allowed from a given source.\n\nLANGUAGE: toml\nCODE:\n```\n# 100 reqs/s\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    average = 100\n```\n\n----------------------------------------\n\nTITLE: Configuring ServersTransport in Kubernetes with YAML\nDESCRIPTION: This example shows how to define a ServersTransport resource to configure secure connections with custom server name and TLS verification settings.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  serverName: example.org\n  insecureSkipVerify: true\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate Resolver for TCP Router in Traefik\nDESCRIPTION: Specifies which certificate resolver to use for automatic certificate generation for a TCP router's TLS configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.certresolver=myresolver\n```\n\n----------------------------------------\n\nTITLE: Setting excludedContentTypes in YAML File\nDESCRIPTION: Configures the Compress middleware using YAML to exclude specific content types from compression.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-compress:\n      compress:\n        excludedContentTypes:\n          - text/event-stream\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Log File Path in TOML\nDESCRIPTION: Sets the file path for Traefik logs using TOML configuration format. Redirects logs from the default stdout to a specific file location.\n\nLANGUAGE: toml\nCODE:\n```\n# Writing Logs to a File\n[log]\n  filePath = \"/path/to/traefik.log\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DigestAuth Middleware in YAML File\nDESCRIPTION: Example of how to declare a user list for DigestAuth middleware in a YAML configuration file.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\nhttp:\n  middlewares:\n    test-auth:\n      digestAuth:\n        users:\n          - \"test:traefik:a2688e031edb4be6a3797f3882655c05\"\n          - \"test2:traefik:518845800f9e2bfb1f1f740ec24f074e\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Retry Middleware in Kubernetes\nDESCRIPTION: Example of how to configure the Traefik HTTP Retry middleware using Kubernetes Custom Resource Definition (CRD). This configuration sets up 4 retry attempts with an initial interval of 100ms for exponential backoff.\n\nLANGUAGE: yaml\nCODE:\n```\n# Retry 4 times with exponential backoff\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-retry\nspec:\n  retry:\n    attempts: 4\n    initialInterval: 100ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Entry Points with Consul Catalog Tags in Traefik\nDESCRIPTION: Specifies which entry points the router should listen on, in this case 'web' and 'websecure'.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.entrypoints=web,websecure\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP and HTTPS Routes in Traefik\nDESCRIPTION: Example of defining separate routers for HTTP and HTTPS requests in Traefik. This is necessary when the same route needs to be accessible via both protocols.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    my-https-router:\n      rule: \"Host(`foo-domain`) && Path(`/foo-path/`)\"\n      service: service-id\n      # will terminate the TLS request\n      tls: {}\n\n    my-http-router:\n      rule: \"Host(`foo-domain`) && Path(`/foo-path/`)\"\n      service: service-id\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.my-https-router]\n    rule = \"Host(`foo-domain`) && Path(`/foo-path/`)\"\n    service = \"service-id\"\n    # will terminate the TLS request\n    [http.routers.my-https-router.tls]\n\n  [http.routers.my-http-router]\n    rule = \"Host(`foo-domain`) && Path(`/foo-path/`)\"\n    service = \"service-id\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RemoveHeader with Docker & Swarm\nDESCRIPTION: Shows how to configure BasicAuth to remove the authorization header before forwarding the request to the service in Docker or Swarm.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.basicauth.removeheader=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth with TOML File\nDESCRIPTION: Sets up BasicAuth middleware using a TOML configuration file. This demonstrates how to configure user authentication in Traefik's TOML format.\n\nLANGUAGE: toml\nCODE:\n```\n# Declaring the user list\n[http.middlewares]\n  [http.middlewares.test-auth.basicAuth]\n  users = [\n    \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\",\n    \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth with Docker & Swarm in YAML\nDESCRIPTION: Declares a user list for BasicAuth middleware in Docker or Swarm using labels. Note that dollar signs in hashes need to be doubled for escaping in docker-compose.yml files.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\n#\n# Note: when used in docker-compose.yml all dollar signs in the hash need to be doubled for escaping.\n# To create user:password pair, it's possible to use this command:\n# echo $(htpasswd -nB user) | sed -e s/\\$/\\$\\$/g\n#\n# Also note that dollar signs should NOT be doubled when they are not being evaluated (e.g. Ansible docker_container module).\nlabels:\n  - \"traefik.http.middlewares.test-auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Network in YAML\nDESCRIPTION: Configuration to specify a default Docker network to use for connections to all containers. This can be overridden on a per-container basis with the traefik.docker.network routing label.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    network: test\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Retry Middleware in YAML File\nDESCRIPTION: Example of how to configure the Retry middleware in a YAML configuration file with 4 retry attempts and exponential backoff starting at 100ms. Uses the http.middlewares structure.\n\nLANGUAGE: yaml\nCODE:\n```\n# Retry 4 times with exponential backoff\nhttp:\n  middlewares:\n    test-retry:\n      retry:\n        attempts: 4\n        initialInterval: 100ms\n```\n\n----------------------------------------\n\nTITLE: Applying Middlewares to Router with Docker Label\nDESCRIPTION: Example of attaching middlewares to a router using a Docker label. This applies three middlewares (auth, prefix, and cb) to the router.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.middlewares=auth,prefix,cb\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Log Format in TOML\nDESCRIPTION: Configures Traefik to write logs in JSON format to a specified file using TOML configuration. This changes the default text format to structured JSON output.\n\nLANGUAGE: toml\nCODE:\n```\n# Writing Logs to a File, in JSON\n[log]\n  filePath = \"/path/to/log-file.log\"\n  format = \"json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover Service Settings in Traefik KV Store\nDESCRIPTION: Configuration examples for HTTP services failover settings in Traefik using KV store. These entries define service failover options including fallback service, healthcheck configuration, and primary service.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik/http/services/<service_name>/failover/fallback\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik/http/services/<service_name>/failover/healthcheck\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik/http/services/<service_name>/failover/service\n```\n\n----------------------------------------\n\nTITLE: Setting Realm Option in DigestAuth with Docker & Swarm\nDESCRIPTION: Shows how to customize the realm for DigestAuth middleware in Docker & Swarm.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.digestauth.realm=MyRealm\"\n```\n\n----------------------------------------\n\nTITLE: Setting Average Rate in Consul Catalog\nDESCRIPTION: Example of setting the average request rate to 100 requests per second using Consul Catalog. The average parameter defines the maximum rate allowed from a given source.\n\nLANGUAGE: yaml\nCODE:\n```\n# 100 reqs/s\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.average=100\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain Middleware with TOML File\nDESCRIPTION: Example of configuring a Chain middleware in Traefik using a TOML file configuration. Demonstrates how to define a collection of middlewares (HTTPS redirection, IP filtering, and basic authentication) in a single chain.\n\nLANGUAGE: toml\nCODE:\n```\n# ...\n[http.routers]\n  [http.routers.router1]\n    service = \"service1\"\n    middlewares = [\"secured\"]\n    rule = \"Host(`mydomain`)\"\n\n[http.middlewares]\n  [http.middlewares.secured.chain]\n    middlewares = [\"https-only\", \"known-ips\", \"auth-users\"]\n\n  [http.middlewares.auth-users.basicAuth]\n    users = [\"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"]\n\n  [http.middlewares.https-only.redirectScheme]\n    scheme = \"https\"\n\n  [http.middlewares.known-ips.ipAllowList]\n    sourceRange = [\"192.168.1.7\", \"127.0.0.1/32\"]\n\n[http.services]\n  [http.services.service1]\n    [http.services.service1.loadBalancer]\n      [[http.services.service1.loadBalancer.servers]]\n        url = \"http://127.0.0.1:80\"\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS Passthrough for TCP Router\nDESCRIPTION: When enabled, TLS connections are passed through to the backend without termination at Traefik. Useful for end-to-end encryption scenarios.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.passthrough=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Compression in YAML File\nDESCRIPTION: Configures the Compress middleware using Traefik's YAML configuration file with default settings.\n\nLANGUAGE: yaml\nCODE:\n```\n# Enable compression\nhttp:\n  middlewares:\n    test-compress:\n      compress: {}\n```\n\n----------------------------------------\n\nTITLE: Setting Propagation Delay Before DNS Challenge Checks\nDESCRIPTION: Configuration for specifying a delay before TXT record verification by the DNS provider. This option is useful when internal networks block external DNS queries and helps ensure the DNS record has properly propagated.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      dnsChallenge:\n        # ...\n        propagation:\n          # ...\n          delayBeforeChecks: 2s\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  [certificatesResolvers.myresolver.acme.dnsChallenge]\n    # ...\n    [certificatesResolvers.myresolver.acme.dnsChallenge.propagation]\n      # ...\n      delayBeforeChecks = \"2s\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.dnschallenge.propagation.delayBeforeChecks=2s\n```\n\n----------------------------------------\n\nTITLE: Setting ServersTransport in Kubernetes Ingress\nDESCRIPTION: Specifies the servers transport configuration to use with this service, referencing a ServersTransport defined elsewhere.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.ingress.kubernetes.io/service.serverstransport: foobar@file\n```\n\n----------------------------------------\n\nTITLE: Configuring ReplacePath Middleware in TOML\nDESCRIPTION: This snippet shows how to configure the ReplacePath middleware using TOML structured format. It replaces the original request path with '/foo' before forwarding to the backend service.\n\nLANGUAGE: toml\nCODE:\n```\n# Replace the path with /foo\n[http.middlewares]\n  [http.middlewares.test-replacepath.replacePath]\n    path = \"/foo\"\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Domain with Docker Label\nDESCRIPTION: Example of specifying the main domain for TLS certificates with a Docker label. This sets example.org as the main domain for the TLS certificate.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.tls.domains[0].main=example.org\"\n```\n\n----------------------------------------\n\nTITLE: Matching IPv6 ClientIP in Traefik TCP Router\nDESCRIPTION: Example of using ClientIP matcher to match connections from a specific IPv6 address in Traefik TCP router configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nClientIP(`::1`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress with Traefik\nDESCRIPTION: An example of a Kubernetes Ingress resource configuration that routes traffic to a service called 'whoami'. It defines routes for two paths (/bar and /foo) on the 'example.com' host and specifies the 'web' entrypoint via annotations.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: myingress\n  annotations:\n    traefik.ingress.kubernetes.io/router.entrypoints: web\n\nspec:\n  rules:\n    - host: example.com\n      http:\n        paths:\n          - path: /bar\n            pathType: Exact\n            backend:\n              service:\n                name:  whoami\n                port:\n                  number: 80\n          - path: /foo\n            pathType: Exact\n            backend:\n              service:\n                name:  whoami\n                port:\n                  number: 80\n```\n\n----------------------------------------\n\nTITLE: Domain Resolution from Router's Rule in Docker Swarm\nDESCRIPTION: Docker Swarm deployment configuration for a router that derives the domain from a Host rule. Uses a Tailscale domain and references the certificate resolver.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ndeploy:\n  labels:\n    - traefik.http.routers.blog.rule=Host(`monitoring.yak-bebop.ts.net`) && Path(`/metrics`)\n    - traefik.http.routers.blog.tls.certresolver=myresolver\n```\n\n----------------------------------------\n\nTITLE: Setting includedContentTypes in YAML File\nDESCRIPTION: Configures the Compress middleware using YAML to only compress specific content types.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-compress:\n      compress:\n        includedContentTypes:\n          - application/json\n          - text/html\n          - text/plain\n```\n\n----------------------------------------\n\nTITLE: Applying ServersTransport to an IngressRoute in Kubernetes\nDESCRIPTION: This example demonstrates how to reference a ServersTransport resource from an IngressRoute to apply custom connection settings to a specific service.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: testroute\n  namespace: default\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`example.com`)\n    kind: Rule\n    services:\n    - name: whoami\n      port: 80\n      serversTransport: mytransport\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Weight in Traefik Load Balancer\nDESCRIPTION: Sets the weight of a server in the load balancer to control traffic distribution.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/servers/0/weight\n```\n\n----------------------------------------\n\nTITLE: Configuring PassHostHeader in Traefik with YAML Labels\nDESCRIPTION: Controls whether the client's Host header is forwarded to the service behind Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.passhostheader=true\n```\n\n----------------------------------------\n\nTITLE: Setting Password for HTTP Authentication in TOML\nDESCRIPTION: Configuration to set the password for Basic HTTP authentication when the Docker daemon socket is exposed through an HTTP proxy. This is used in conjunction with the username option.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  password = \"foo\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Priority Calculation Example with Tags\nDESCRIPTION: JSON Tags example showing Traefik router rules that may have conflicting priorities based on rule length. The longer regexp rule would have higher priority by default.\n\nLANGUAGE: json\nCODE:\n```\n{\n    // ...\n    \"Tags\": [\n      \"traefik.http.routers.Router-1.rule=HostRegexp(`[a-z]+\\.traefik\\.com`)\",\n      \"traefik.http.routers.Router-2.rule=Host(`foobar.traefik.com`)\"\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting TLS SAN Domains with Docker Label\nDESCRIPTION: Example of specifying Subject Alternative Name (SAN) domains for TLS certificates with a Docker label. This adds test.example.org and dev.example.org as alternative domains.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.tls.domains[0].sans=test.example.org,dev.example.org\"\n```\n\n----------------------------------------\n\nTITLE: Declaring and Referencing TCP Middleware in Traefik\nDESCRIPTION: Demonstrates how to declare and reference a TCP middleware. The example shows an InFlightConn middleware that limits the number of concurrent connections.\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n# Declaring a middleware\ntraefik.tcp.middlewares.test-inflightconn.amount=10\n# Referencing a middleware\ntraefik.tcp.routers.my-service.middlewares=test-inflightconn\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Forwarding Flush Interval in Traefik\nDESCRIPTION: Sets the interval at which Traefik flushes response data to clients. This affects streaming behavior and can be tuned for specific application response patterns.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.responseforwarding.flushinterval=10\"\n```\n\n----------------------------------------\n\nTITLE: Setting HeaderField Option in DigestAuth with Docker & Swarm\nDESCRIPTION: Shows how to customize the header field for authenticated users in DigestAuth middleware with Docker & Swarm.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.my-auth.digestauth.headerField=X-WebAuth-User\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Timeout in TOML\nDESCRIPTION: Setting a custom HTTP client timeout for Docker API connections in TOML format. The value is in seconds, and 0 means no timeout is set.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  httpClientTimeout = 300\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Routing with TCPRoute in Kubernetes Gateway API (Experimental)\nDESCRIPTION: YAML configuration for a TCPRoute that routes TCP traffic to a whoami service. This uses the experimental channel of Gateway API and binds to the tcp section of the Traefik Gateway.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1alpha2\nkind: TCPRoute\nmetadata:\n  name: whoami-tcp\n  namespace: default\nspec:\n  parentRefs:\n    - name: traefik\n      sectionName: tcp\n      kind: Gateway\n\n  rules:\n     - backendRefs:\n        - name: whoamitcp\n          namespace: default\n          port: 3000\n```\n\n----------------------------------------\n\nTITLE: Enabling API using CLI Flags\nDESCRIPTION: Enables the Traefik API using command-line interface flags. This creates a special 'api@internal' service that can be referenced in a router.\n\nLANGUAGE: bash\nCODE:\n```\n--api=true\n```\n\n----------------------------------------\n\nTITLE: Deploying Whoami Service for HTTP Routing\nDESCRIPTION: YAML configuration for deploying a whoami application with Kubernetes Deployment and Service resources. The Service exposes port 80 and the Deployment uses the traefik/whoami container image.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: whoami\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: whoami\n\n  template:\n    metadata:\n      labels:\n        app: whoami\n    spec:\n      containers:\n        - name: whoami\n          image: traefik/whoami\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoami\n  namespace: default\nspec:\n  selector:\n    app: whoami\n\n  ports:\n    - port: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Compression in Docker & Swarm\nDESCRIPTION: Enables the Compress middleware in Docker or Docker Swarm using labels. This basic configuration activates compression with default settings.\n\nLANGUAGE: yaml\nCODE:\n```\n# Enable compression\nlabels:\n  - \"traefik.http.middlewares.test-compress.compress=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Client Certificate in ForwardAuth\nDESCRIPTION: Sets the public certificate path for secure connection to the authentication server. When using this option, setting the key option is required for the TLS connection.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.tls.cert=path/to/foo.cert\"\n  - \"traefik.http.middlewares.test-auth.forwardauth.tls.key=path/to/foo.key\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    address: https://example.com/auth\n    tls:\n      certSecret: mytlscert\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mytlscert\n  namespace: default\n\ndata:\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.tls.cert=path/to/foo.cert\"\n- \"traefik.http.middlewares.test-auth.forwardauth.tls.key=path/to/foo.key\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        address: \"https://example.com/auth\"\n        tls:\n          cert: \"path/to/foo.cert\"\n          key: \"path/to/foo.key\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.forwardAuth]\n    address = \"https://example.com/auth\"\n    [http.middlewares.test-auth.forwardAuth.tls]\n      cert = \"path/to/foo.cert\"\n      key = \"path/to/foo.key\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Whoami Service for HTTP Routing\nDESCRIPTION: YAML configuration for deploying a whoami application with Kubernetes Deployment and Service resources. The Service exposes port 80 and the Deployment uses the traefik/whoami container image.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: whoami\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: whoami\n\n  template:\n    metadata:\n      labels:\n        app: whoami\n    spec:\n      containers:\n        - name: whoami\n          image: traefik/whoami\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoami\n  namespace: default\nspec:\n  selector:\n    app: whoami\n\n  ports:\n    - port: 80\n```\n\n----------------------------------------\n\nTITLE: Declaring TCP Routers with a Service in Traefik\nDESCRIPTION: Configures a TCP router with SNI matching for a specific domain, enables TLS, and specifies the backend service port. This setup enables Traefik to handle TCP connections for applications like databases or custom protocols.\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  my-container:\n    # ...\n    labels:\n      - \"traefik.tcp.routers.my-router.rule=HostSNI(`example.com`)\"\n      - \"traefik.tcp.routers.my-router.tls=true\"\n      - \"traefik.tcp.services.my-service.loadbalancer.server.port=4123\"\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Options with Docker Label\nDESCRIPTION: Example of specifying TLS options for a router using a Docker label. This connects the router to a predefined TLS option set named 'foobar'.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.tls.options=foobar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain Middleware with Kubernetes Custom Resources\nDESCRIPTION: Implementation of Chain middleware in Traefik using Kubernetes Custom Resources. This creates a 'secured' middleware chain that combines HTTPS redirection, IP filtering, and basic authentication in a reusable configuration.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n    - match: Host(`mydomain`)\n      kind: Rule\n      services:\n        - name: whoami\n          port: 80\n      middlewares:\n        - name: secured\n---\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: secured\nspec:\n  chain:\n    middlewares:\n    - name: https-only\n    - name: known-ips\n    - name: auth-users\n---\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: auth-users\nspec:\n  basicAuth:\n    users:\n    - test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\n---\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: https-only\nspec:\n  redirectScheme:\n    scheme: https\n---\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: known-ips\nspec:\n  ipAllowList:\n    sourceRange:\n    - 192.168.1.7\n    - 127.0.0.1/32\n```\n\n----------------------------------------\n\nTITLE: Setting encodings in Kubernetes\nDESCRIPTION: Defines a Kubernetes Middleware that configures specific compression algorithms with priority order.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-compress\nspec:\n  compress:\n    encodings:\n      - zstd\n      - br\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics with Custom Buckets in Traefik using TOML\nDESCRIPTION: TOML configuration for enabling Prometheus metrics in Traefik with custom histogram buckets. This defines the time boundaries for request duration metrics.\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.prometheus]\n    [metrics.prometheus.buckets]\n      - 0.1\n      - 0.3\n      - 1.2\n      - 5.0\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Headers in Traefik (TOML)\nDESCRIPTION: This TOML configuration adds the X-Script-Name header while removing X-Custom-Request-Header from requests and X-Custom-Response-Header from responses using Traefik's Headers middleware.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.testHeader.headers]\n    [http.middlewares.testHeader.headers.customRequestHeaders]\n        X-Script-Name = \"test\" # Adds\n        X-Custom-Request-Header = \"\" # Removes\n    [http.middlewares.testHeader.headers.customResponseHeaders]\n        X-Custom-Response-Header = \"\" # Removes\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Client Certificates for Nomad API Connection\nDESCRIPTION: Shows how to specify client certificates for secure connections to the Nomad API. Both cert and key must be provided together.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad:\n    endpoint:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad.endpoint.tls]\n  cert = \"path/to/foo.cert\"\n  key = \"path/to/foo.key\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad.endpoint.tls.cert=path/to/foo.cert\n--providers.nomad.endpoint.tls.key=path/to/foo.key\n```\n\n----------------------------------------\n\nTITLE: Complete Tailscale Certificate Resolution Configuration in TOML\nDESCRIPTION: Full example configuration for enabling Tailscale certificate resolution in TOML format. Defines entrypoints for HTTP and HTTPS along with the Tailscale certificate resolver.\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n\n  [entryPoints.websecure]\n    address = \":443\"\n\n[certificatesResolvers.myresolver.tailscale]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose with Custom Port Configuration\nDESCRIPTION: Docker Compose configuration that specifies a custom port (12345) for Traefik to connect to the container, overriding the default port detection behavior.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  my-container:\n    # ...\n    deploy:\n      labels:\n        - traefik.http.routers.my-container.rule=Host(`example.com`)\n        - traefik.http.routers.my-container.service=my-service\"\n        # Tell Traefik to use the port 12345 to connect to `my-container`\n        - traefik.http.services.my-service.loadbalancer.server.port=12345\n```\n\n----------------------------------------\n\nTITLE: Configuring DigestAuth Middleware in Consul Catalog\nDESCRIPTION: Example of how to declare a user list for DigestAuth middleware using Consul Catalog configuration.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\n- \"traefik.http.middlewares.test-auth.digestauth.users=test:traefik:a2688e031edb4be6a3797f3882655c05,test2:traefik:518845800f9e2bfb1f1f740ec24f074e\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Headers in Traefik (YAML)\nDESCRIPTION: This YAML configuration sets up Cross-Origin Resource Sharing (CORS) headers in Traefik to control which origins, methods, and headers are allowed when browsers make cross-origin requests. It includes settings for allowed methods, headers, origins, and max age.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    testHeader:\n      headers:\n        accessControlAllowMethods:\n          - GET\n          - OPTIONS\n          - PUT\n        accessControlAllowHeaders: \"*\"\n        accessControlAllowOriginList:\n          - https://foo.bar.org\n          - https://example.org\n        accessControlMaxAge: 100\n        addVaryHeader: true\n```\n\n----------------------------------------\n\nTITLE: Setting RemoveHeader Option in DigestAuth with YAML File\nDESCRIPTION: Shows how to configure the removeHeader option to remove the authorization header before forwarding the request in a YAML configuration file.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      digestAuth:\n        removeHeader: true\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Connection to Docker in YAML\nDESCRIPTION: Configuration for connecting Traefik to the Docker Engine API over TCP using YAML format. This can be used for remote Docker daemons with TCP enabled.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    endpoint: \"tcp://127.0.0.1:2375\"\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Interface in Go for Traefik\nDESCRIPTION: Example showing how to implement the middleware.Middleware interface in Go with ServeHTTP method to integrate with Traefik. This implementation wraps a http.Handler and implements required functionality.\n\nLANGUAGE: go\nCODE:\n```\ntype MyMiddleware struct {\n  next http.Handler\n  // ... other fields\n}\n\nfunc (m *MyMiddleware) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n  // Do something before\n  m.next.ServeHTTP(rw, req)\n  // Do something after\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ServersTransport with Tags\nDESCRIPTION: JSON example showing how to configure ServersTransport for a TCP service using tags in providers like Consul.\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"Tags\": [\n    \"traefik.tcp.services.Service01.loadBalancer.serversTransport=mytransport\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Specific HTTP to HTTPS Redirection in Traefik v1\nDESCRIPTION: Example of domain-specific HTTP to HTTPS redirection in Traefik v1 using TOML format. The redirection is applied at the frontend level for specific domains, redirecting traffic from HTTP to HTTPS for example.net.\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n\n  [entryPoints.websecure]\n    address = \":443\"\n    [entryPoints.websecure.tls]\n\n[file]\n\n[frontends]\n  [frontends.frontend1]\n    entryPoints = [\"web\", \"websecure\"]\n    [frontends.frontend1.routes]\n      [frontends.frontend1.routes.route0]\n        rule = \"Host:example.net\"\n    [frontends.frontend1.redirect]\n      entryPoint = \"websecure\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Go Development\nDESCRIPTION: Commands to set GOPATH and PATH environment variables to prepare for Traefik development. These variables should be set to enable proper Go module resolution.\n\nLANGUAGE: bash\nCODE:\n```\nexport GOPATH=~/go\nexport PATH=$PATH:$GOPATH/bin\n```\n\n----------------------------------------\n\nTITLE: Deploying Whoami Service for TCP Routing\nDESCRIPTION: YAML configuration for deploying a TCP whoami service using Kubernetes Deployment and Service resources. The Deployment uses the traefik/whoamitcp container image and configures it to listen on port 3000.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: whoamitcp\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: whoamitcp\n\n  template:\n    metadata:\n      labels:\n        app: whoamitcp\n    spec:\n      containers:\n        - name: whoami\n          image: traefik/whoamitcp\n          args:\n            - --port=:3000\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoamitcp\n  namespace: default\nspec:\n  selector:\n    app: whoamitcp\n  ports:\n    - port: 3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Status in Traefik\nDESCRIPTION: Sets the expected HTTP status code for a successful health check response.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.status=42\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Port in Traefik with Docker Labels\nDESCRIPTION: Sets the port for a Traefik service. This is mandatory when using Docker Swarm as it's needed for port detection in Swarm environments.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.server.port=8080\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Rule Syntax in Traefik with YAML\nDESCRIPTION: YAML configuration for setting different rule syntax versions in Traefik routers. Router-v3 uses the newer v3 syntax with simplified regular expressions, while Router-v2 uses the legacy v2 syntax with named capture groups.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    Router-v3:\n      rule: HostRegexp(`[a-z]+\\.traefik\\.com`)\n      ruleSyntax: v3\n    Router-v2:\n      rule: HostRegexp(`{subdomain:[a-z]+}.traefik.com`)\n      ruleSyntax: v2\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth Middleware in YAML\nDESCRIPTION: Structured YAML configuration for Traefik BasicAuth middleware that defines a list of authorized users. Passwords are hashed using supported formats like MD5, SHA1, or BCrypt.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\nhttp:\n  middlewares:\n    test-auth:\n      basicAuth:\n        users:\n          - \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"\n          - \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Health Check Headers in Traefik\nDESCRIPTION: Adds custom HTTP headers to health check requests sent to services. This allows for configuring services that require specific headers for health check endpoints.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.healthcheck.headers.X-Foo=foobar\"\n```\n\n----------------------------------------\n\nTITLE: Setting authResponseHeadersRegex in YAML File Configuration\nDESCRIPTION: YAML file configuration for using regex to match and copy headers from authentication server responses.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        address: \"https://example.com/auth\"\n        authResponseHeadersRegex: \"^X-\"\n```\n\n----------------------------------------\n\nTITLE: Configuring StatsD Metrics in Traefik TOML Configuration\nDESCRIPTION: TOML configuration example showing how to enable and configure the StatsD metrics provider in Traefik, specifying the StatsD server address.\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.statsD]\n    address: localhost:8125\n```\n\n----------------------------------------\n\nTITLE: Example Prometheus Metric Output with Custom Labels\nDESCRIPTION: Example of the resulting Prometheus metric output showing the requests_total metric with a custom useragent label derived from the request header.\n\nLANGUAGE: bash\nCODE:\n```\ntraefik_entrypoint_requests_total\\{code=\"200\",entrypoint=\"web\",method=\"GET\",protocol=\"http\",useragent=\"foobar\"\\} 1\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication Username in TOML\nDESCRIPTION: Setting the username for Basic HTTP authentication when connecting to a Docker daemon through an HTTP proxy using TOML. This provides security when accessing the Docker API.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  username = \"foo\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring StripPrefix Middleware in YAML File\nDESCRIPTION: Configuration example for setting up StripPrefix middleware in Traefik's YAML configuration file to strip /foobar and /fiibar prefixes from URL paths.\n\nLANGUAGE: yaml\nCODE:\n```\n# Strip prefix /foobar and /fiibar\nhttp:\n  middlewares:\n    test-stripprefix:\n      stripPrefix:\n        prefixes:\n          - \"/foobar\"\n          - \"/fiibar\"\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Session Tickets in Kubernetes\nDESCRIPTION: Creates a Kubernetes TLSOption resource to disable TLS session tickets. This forces complete TLS handshakes for all connections, which can provide additional security at the expense of increased latency.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: default\n  namespace: default\n\nspec:\n  disableSessionTickets: true\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Server Scheme in Traefik\nDESCRIPTION: Changes the default scheme (protocol) for a Traefik service. Useful when you need to explicitly define whether the service uses HTTP or HTTPS.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.server.scheme=http\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Network via CLI\nDESCRIPTION: Command-line option for setting a default Docker network for connections to all containers. This can be overridden on a per-container basis with the traefik.docker.network label.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.network=test\n# ...\n```\n\n----------------------------------------\n\nTITLE: Enabling insecureSkipVerify for Consul TLS in Traefik\nDESCRIPTION: When set to true, the TLS connection to Consul will accept any certificate presented by the server regardless of the hostnames it covers. Default is false.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consul:\n    tls:\n      insecureSkipVerify: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consul.tls]\n  insecureSkipVerify = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consul.tls.insecureSkipVerify=true\n```\n\n----------------------------------------\n\nTITLE: Configuring ForwardAuth Middleware in Consul Catalog\nDESCRIPTION: YAML configuration for setting up ForwardAuth middleware in Consul Catalog to delegate authentication to an external service.\n\nLANGUAGE: yaml\nCODE:\n```\n# Forward authentication to example.com\n- \"traefik.http.middlewares.test-auth.forwardauth.address=https://example.com/auth\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication Password in YAML\nDESCRIPTION: Setting the password for Basic HTTP authentication when connecting to a Docker daemon through an HTTP proxy using YAML. This provides security when accessing the Docker API.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    password: foo\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Constructing Complex TCP Router Rules in Traefik\nDESCRIPTION: An example of a complex TCP router rule using logical operators (AND, OR) and the NOT operator to match connections based on Server Name Indication and ALPN protocol.\n\nLANGUAGE: yaml\nCODE:\n```\nHostSNI(`example.com`) || (HostSNI(`example.org`) && !ALPN(`h2`))\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router Entrypoints in Traefik\nDESCRIPTION: Defines the entrypoints that the TCP router should listen on. Multiple entrypoints can be specified as a comma-separated list.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.routers.mytcprouter.entrypoints=ep1,ep2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS in Traefik v2 with Docker & Swarm\nDESCRIPTION: Example of TLS configuration in Traefik v2 using Docker & Swarm labels. Shows how to reference a TLS option defined in another provider (File Provider) through cross-provider referencing.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  # myTLSOptions must be defined by another provider, in this instance in the File Provider.\n  # see the cross provider section\n  - \"traefik.http.routers.router0.tls.options=myTLSOptions@file\"\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log Age via CLI\nDESCRIPTION: Configures the maximum age (in days) for retained log files using command line interface. This example sets the maximum age to 3 days.\n\nLANGUAGE: bash\nCODE:\n```\n--log.maxage=3\n```\n\n----------------------------------------\n\nTITLE: Deploying Whoami HTTP Service for HTTPRoute\nDESCRIPTION: Kubernetes manifest for deploying a standard whoami HTTP service that can be targeted by an HTTPRoute. Includes both Deployment and Service resources.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: whoami\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: whoami\n\n  template:\n    metadata:\n      labels:\n        app: whoami\n    spec:\n      containers:\n        - name: whoami\n          image: traefik/whoami\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoami\n  namespace: default\nspec:\n  selector:\n    app: whoami\n  ports:\n    - port: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router Rule Syntax Version in Traefik\nDESCRIPTION: Sets the rule syntax version for parsing router rules. This option is deprecated and will be removed in the next major version.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.ruleSyntax=v3\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain for Sticky Cookies in Traefik\nDESCRIPTION: Sets the domain attribute for the sticky session cookie. This controls which domains the cookie applies to.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.sticky.cookie.domain=foo.com\"\n```\n\n----------------------------------------\n\nTITLE: Service Metrics in Prometheus Format\nDESCRIPTION: Lists the metric names for service monitoring in Prometheus format. These metrics track request counts, TLS usage, request duration, retries, server status, and data transfer sizes.\n\nLANGUAGE: prom\nCODE:\n```\ntraefik_service_requests_total\ntraefik_service_requests_tls_total\ntraefik_service_request_duration_seconds\ntraefik_service_retries_total\ntraefik_service_server_up\ntraefik_service_requests_bytes_total\ntraefik_service_responses_bytes_total\n```\n\n----------------------------------------\n\nTITLE: Enabling Body Forwarding in YAML File Configuration\nDESCRIPTION: YAML file configuration for enabling body forwarding to the authentication server.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        address: \"https://example.com/auth\"\n        forwardBody: true\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Transport with rootCAs in TOML\nDESCRIPTION: Static configuration in TOML format to set Root Certificate Authorities for self-signed TLS certificates in Traefik.\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[serversTransport]\n  rootCAs = [\"foo.crt\", \"bar.crt\"]\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Events Watch via CLI\nDESCRIPTION: Command-line option for disabling the Docker events watching mechanism. By default, Traefik watches Docker events to detect changes in containers state and configuration.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.watch=false\n# ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Traefik Service Discovery\nDESCRIPTION: Controls whether Traefik should expose this service. When set to true, Traefik will create routes for this service; when false, the service will be ignored.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.enable=true\n```\n\n----------------------------------------\n\nTITLE: Service Metrics in OpenTelemetry Format\nDESCRIPTION: Lists the metric names for service monitoring in OpenTelemetry format. These metrics track request counts, TLS usage, request duration, retries, server status, and data transfer sizes.\n\nLANGUAGE: opentelemetry\nCODE:\n```\ntraefik_service_requests_total\ntraefik_service_requests_tls_total\ntraefik_service_request_duration_seconds\ntraefik_service_retries_total\ntraefik_service_server_up\ntraefik_service_requests_bytes_total\ntraefik_service_responses_bytes_total\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Swarm Provider in YAML\nDESCRIPTION: Enables the Docker Swarm provider by specifying the endpoint for either Swarm classic or Swarm mode in YAML format.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    # swarm classic (1.12-)\n    # endpoint: \"tcp://127.0.0.1:2375\"\n    # docker swarm mode (1.12+)\n    endpoint: \"tcp://127.0.0.1:2377\"\n```\n\n----------------------------------------\n\nTITLE: Configuring exposedByDefault in TOML\nDESCRIPTION: Disabling automatic exposure of containers in TOML format. When set to false, only containers with the traefik.enable=true label will be exposed through Traefik.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  exposedByDefault = false\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Setting UDP Service Port in Traefik\nDESCRIPTION: Specifies the port where the UDP service is running on the backend. This tells Traefik which port to connect to on the backend server.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.services.myudpservice.loadbalancer.server.port=423\n```\n\n----------------------------------------\n\nTITLE: Setting trustForwardHeader Option in Docker & Swarm\nDESCRIPTION: Configuration example for enabling the trustForwardHeader option in ForwardAuth middleware for Docker or Swarm environments.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true\"\n```\n\n----------------------------------------\n\nTITLE: Setting authResponseHeadersRegex in Consul Catalog\nDESCRIPTION: Consul Catalog configuration for using regex to match and copy headers from authentication server responses.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.authResponseHeadersRegex=^X-\"\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for TCP Router in Traefik\nDESCRIPTION: Enables TLS for a TCP router, allowing it to handle secure connections.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.routers.mytcprouter.tls=true\"\n```\n\n----------------------------------------\n\nTITLE: EntryPoint HTTP Metrics in StatsD Format\nDESCRIPTION: List of HTTP metrics for entrypoints provided by Traefik in StatsD format with configurable prefix, including request counts, TLS requests, request duration, and request/response byte metrics.\n\nLANGUAGE: statsd\nCODE:\n```\n# Default prefix: \"traefik\"\n{prefix}.entrypoint.request.total\n{prefix}.entrypoint.request.tls.total\n{prefix}.entrypoint.request.duration\n{prefix}.entrypoint.requests.bytes.total\n{prefix}.entrypoint.responses.bytes.total\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers for OpenTelemetry HTTP Export in Traefik\nDESCRIPTION: Configures additional headers to be sent with access logs by the exporter to the OpenTelemetry Collector when using HTTP. This allows for customizing the request headers for authentication or other purposes.\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  otlp:\n    http:\n      headers:\n        foo: bar\n        baz: buz\n```\n\nLANGUAGE: toml\nCODE:\n```\n[accesslog.otlp.http.headers]\n  foo = \"bar\"\n  baz = \"buz\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--accesslog.otlp.http.headers.foo=bar --accesslog.otlp.http.headers.baz=buz\n```\n\n----------------------------------------\n\nTITLE: Setting Burst Value in Consul Catalog\nDESCRIPTION: Example of setting the burst parameter to 100 in Consul Catalog. The burst parameter defines the maximum number of requests allowed to go through in a short period of time.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.burst=100\"\n```\n\n----------------------------------------\n\nTITLE: Disabling the Dashboard\nDESCRIPTION: Configuration to disable the Traefik dashboard while keeping the API enabled. By default, the dashboard is enabled when the API is enabled, but it can be explicitly disabled with these options.\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  dashboard: false\n```\n\nLANGUAGE: toml\nCODE:\n```\n[api]\n  dashboard = false\n```\n\nLANGUAGE: bash\nCODE:\n```\n--api.dashboard=false\n```\n\n----------------------------------------\n\nTITLE: Setting Service Mirroring in Traefik\nDESCRIPTION: Configures which service to mirror requests to. This allows duplicating traffic to a secondary service for testing or monitoring purposes.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/<service_name>/mirroring/service\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Rule Syntax in Traefik with TOML\nDESCRIPTION: TOML configuration for setting different rule syntax versions in Traefik routers. This example demonstrates configuring two routers with different rule syntax versions for handling host-based routing.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.Router-v3]\n    rule = \"HostRegexp(`[a-z]+\\.traefik\\.com`)\"\n    ruleSyntax = v3\n  [http.routers.Router-v2]\n    rule = \"HostRegexp(`{subdomain:[a-z]+}.traefik.com`)\"\n    ruleSyntax = v2\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Cipher Suites in YAML\nDESCRIPTION: Example of configuring specific cipher suites in YAML format. This allows restricting to specific, secure cipher algorithms for TLS connections.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  options:\n    default:\n      cipherSuites:\n        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n```\n\n----------------------------------------\n\nTITLE: Specifying TLS Certificate Resolver with Docker Label\nDESCRIPTION: Example of defining which certificate resolver to use for TLS with a Docker label. This connects the router to the certificate resolver named 'myresolver'.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.tls.certresolver=myresolver\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GrpcWeb Middleware in YAML File\nDESCRIPTION: File-based configuration using YAML syntax to set up the GrpcWeb middleware. This configuration creates a middleware that allows all origins.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-grpcweb:\n      grpcWeb:\n        allowOrigins:\n          - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Provider in Traefik using YAML\nDESCRIPTION: A simple YAML configuration example showing how to enable the Redis provider in Traefik with default options.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  redis: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Swarm with Docker Socket in Docker Compose\nDESCRIPTION: Example docker-compose file for Traefik v3.4 that shares the docker socket with the Traefik container, allowing it to communicate with Docker Swarm.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nservices:\n  traefik:\n     image: traefik:v3.4 # The official v3 Traefik docker image\n     ports:\n       - \"80:80\"\n     volumes:\n       - /var/run/docker.sock:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Building Traefik Web UI for Backend Developers Using Make Commands\nDESCRIPTION: Shell commands for backend developers to generate Docker images and static Web UI content. These commands use the make file to build the Docker image and generate static contents in the webui/static/ folder.\n\nLANGUAGE: shell\nCODE:\n```\nmake build-image                # Generate Docker image.\nmake clean-webui generate-webui # Generate static contents in `webui/static/` folder.\n```\n\n----------------------------------------\n\nTITLE: Setting Username for HTTP Authentication in YAML\nDESCRIPTION: Configuration to set the username for Basic HTTP authentication when the Docker daemon socket is exposed through an HTTP proxy. This is used in conjunction with the password option.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    username: foo\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Domain Definition Using tls.domains in Docker\nDESCRIPTION: Docker label configuration that explicitly defines the domain using tls.domains. Specifies a Tailscale domain and references the certificate resolver.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nlabels:\n  - traefik.http.routers.blog.rule=Path(`/metrics`)\n  - traefik.http.routers.blog.tls.certresolver=myresolver\n  - traefik.http.routers.blog.tls.domains[0].main=monitoring.yak-bebop.ts.net\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Options for TCP Routers in Traefik (YAML and TOML)\nDESCRIPTION: This example demonstrates how to configure TLS options for a TCP router in Traefik, including setting the minimum TLS version and specifying allowed cipher suites. The configuration applies when a HostSNI rule is defined.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  routers:\n    Router-1:\n      rule: \"HostSNI(`foo-domain`)\"\n      service: service-id\n      # will terminate the TLS request\n      tls:\n        options: foo\n\ntls:\n  options:\n    foo:\n      minVersion: VersionTLS12\n      cipherSuites:\n        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.routers]\n  [tcp.routers.Router-1]\n    rule = \"HostSNI(`foo-domain`)\"\n    service = \"service-id\"\n    # will terminate the TLS request\n    [tcp.routers.Router-1.tls]\n      options = \"foo\"\n\n[tls.options]\n  [tls.options.foo]\n    minVersion = \"VersionTLS12\"\n    cipherSuites = [\n      \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n      \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\",\n      \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\n      \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n      \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Swarm Provider via CLI\nDESCRIPTION: Enables the Docker Swarm provider by specifying the endpoint for either Swarm classic or Swarm mode using command line arguments.\n\nLANGUAGE: bash\nCODE:\n```\n# swarm classic (1.12-)\n# --providers.swarm.endpoint=tcp://127.0.0.1:2375\n# docker swarm mode (1.12+)\n--providers.swarm.endpoint=tcp://127.0.0.1:2377\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Whoami Service\nDESCRIPTION: Example output from the whoami service showing HTTP request information, including headers that Traefik adds when proxying the request. This includes forwarded IP addresses, headers, and host information.\n\nLANGUAGE: text\nCODE:\n```\nHostname: d7f919e54651\nIP: 127.0.0.1\nIP: 192.168.64.2\nGET / HTTP/1.1\nHost: whoami.localhost\nUser-Agent: curl/7.52.1\nAccept: */*\nAccept-Encoding: gzip\nX-Forwarded-For: 192.168.64.1\nX-Forwarded-Host: whoami.localhost\nX-Forwarded-Port: 80\nX-Forwarded-Proto: http\nX-Forwarded-Server: 7f0c797dbc51\nX-Real-Ip: 192.168.64.1\n```\n\n----------------------------------------\n\nTITLE: Setting trustForwardHeader Option in Consul Catalog\nDESCRIPTION: Configuration example for enabling the trustForwardHeader option in Consul Catalog.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring authResponseHeaders in TOML File Configuration\nDESCRIPTION: TOML file configuration for specifying headers to copy from authentication server responses.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.forwardAuth]\n    address = \"https://example.com/auth\"\n    authResponseHeaders = [\"X-Auth-User\", \"X-Secret\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring insecureSkipVerify for TLS in YAML\nDESCRIPTION: Enables skipping TLS certificate verification in YAML format. This optional parameter, when set to true, allows Traefik to accept any certificate presented by the server without validation.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  http:\n    tls:\n      insecureSkipVerify: true\n```\n\n----------------------------------------\n\nTITLE: EntryPoint HTTP Metrics in OpenTelemetry Format\nDESCRIPTION: List of HTTP metrics for entrypoints provided by Traefik in OpenTelemetry format, including request counts, TLS requests, request duration, and request/response byte metrics.\n\nLANGUAGE: opentelemetry\nCODE:\n```\ntraefik_entrypoint_requests_total\ntraefik_entrypoint_requests_tls_total\ntraefik_entrypoint_request_duration_seconds\ntraefik_entrypoint_requests_bytes_total\ntraefik_entrypoint_responses_bytes_total\n```\n\n----------------------------------------\n\nTITLE: Defining Acceptable Health Check Status Codes in Traefik\nDESCRIPTION: Specifies which HTTP status codes are considered healthy. This allows customizing what response codes from your service indicate a healthy state.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.healthcheck.status=42\"\n```\n\n----------------------------------------\n\nTITLE: Configuring headerField in ForwardAuth\nDESCRIPTION: Sets a header field to store the authenticated user. This allows passing the authenticated user information to backend services through a custom header.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.headerField=X-WebAuth-User\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    # ...\n    headerField: X-WebAuth-User\n```\n\nLANGUAGE: json\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.headerField=X-WebAuth-User\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        # ...\n        headerField: \"X-WebAuth-User\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares.test-auth.forwardAuth]\n  # ...\n  headerField = \"X-WebAuth-User\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Logger via CLI\nDESCRIPTION: Enables the OpenTelemetry Logger for logs in Traefik using command line interface. By default, it will export logs using HTTPS to localhost:4318/v1/logs.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp=true\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Passthrough for TCP Router in TOML Format\nDESCRIPTION: Example showing how to configure a TCP router for TLS passthrough (forwarding encrypted data) using the File Provider in TOML format.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.routers]\n  [tcp.routers.Router-1]\n    rule = \"HostSNI(`foo-domain`)\"\n    service = \"service-id\"\n    [tcp.routers.Router-1.tls]\n      passthrough = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Log File Path in YAML\nDESCRIPTION: Sets the file path for Traefik logs using YAML configuration format. By default logs are written to stdout, but this directs logs to a specific file location.\n\nLANGUAGE: yaml\nCODE:\n```\n# Writing Logs to a File\nlog:\n  filePath: \"/path/to/traefik.log\"\n```\n\n----------------------------------------\n\nTITLE: Configuring forceSlash Option in Kubernetes\nDESCRIPTION: Kubernetes manifest showing how to configure the StripPrefix middleware with the forceSlash option set to false, which controls empty path handling.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: example\nspec:\n  stripPrefix:\n    prefixes:\n      - \"/foobar\"\n    forceSlash: false\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log Backups in TOML\nDESCRIPTION: Configures the maximum number of old log files to retain using TOML format. This example limits the number of retained log files to 3.\n\nLANGUAGE: toml\nCODE:\n```\n[log]\n  maxBackups = 3\n```\n\n----------------------------------------\n\nTITLE: Setting includedContentTypes in Docker & Swarm\nDESCRIPTION: Configures the Compress middleware in Docker/Swarm to only compress specific content types like JSON, HTML, and plain text.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-compress.compress.includedcontenttypes=application/json,text/html,text/plain\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via SSH in CLI\nDESCRIPTION: Command line flag to configure Traefik to connect to a remote Docker daemon using SSH. This requires Docker 18.09+ and proper SSH key authentication setup for the Traefik user.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm.endpoint=ssh://traefik@192.168.2.5:2022\n# ...\n```\n\n----------------------------------------\n\nTITLE: Including TLSStore Documentation for Kubernetes CRD\nDESCRIPTION: A Markdown include directive that references the TLSStore documentation for Kubernetes Custom Resource Definitions (CRD) in Traefik Proxy.\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"content/reference/routing-configuration/kubernetes/crd/http/tlsstore.md\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Passthrough for TCP Router in YAML Format\nDESCRIPTION: Example showing how to configure a TCP router for TLS passthrough (forwarding encrypted data) using the File Provider in YAML format.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  routers:\n    Router-1:\n      rule: \"HostSNI(`foo-domain`)\"\n      service: service-id\n      tls:\n        passthrough: true\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Router Rule Syntax Version in Traefik\nDESCRIPTION: Configures the rule syntax version to be used for parsing router rules. This option is deprecated and will be removed in the next major version.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.ruleSyntax=v3\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for TCP Routers in TOML\nDESCRIPTION: This TOML configuration shows how to configure a TLS-enabled TCP router in Traefik. It includes the same functionality as the YAML example but in TOML format.\n\nLANGUAGE: toml\nCODE:\n```\n[tcp.routers.my-tls-router]\n  rule = \"HostSNI(`example.com`)\"\n  service = \"my-tcp-service\"\n\n  [tcp.routers.my-tls-router.tls]\n    passthrough = true\n    options = \"my-tls-options\"\n    certResolver = \"myresolver\"\n\n    [[tcp.routers.my-tls-router.tls.domains]]\n      main = \"example.com\"\n      sans = [\"www.example.com\", \"api.example.com\"]\n```\n\n----------------------------------------\n\nTITLE: Setting authResponseHeadersRegex in TOML File Configuration\nDESCRIPTION: TOML file configuration for using regex to match and copy headers from authentication server responses.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.forwardAuth]\n    address = \"https://example.com/auth\"\n    authResponseHeadersRegex = \"^X-\"\n```\n\n----------------------------------------\n\nTITLE: Configuring authResponseHeaders in YAML File Configuration\nDESCRIPTION: YAML file configuration for specifying headers to copy from authentication server responses.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        address: \"https://example.com/auth\"\n        authResponseHeaders:\n          - \"X-Auth-User\"\n          - \"X-Secret\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pass Host Header in Traefik\nDESCRIPTION: Determines whether Traefik passes the client's Host header to the backend service. When enabled, the backend service receives the original Host header from the client request.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.passhostheader=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Internal Resources in YAML\nDESCRIPTION: YAML configuration for enabling metrics for internal resources in Traefik. The 'addInternals' option allows tracking metrics for internal resources like 'ping@internals'.\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  addInternals: true\n```\n\n----------------------------------------\n\nTITLE: Configuring ACME Issuer for HTTP Challenge with cert-manager\nDESCRIPTION: This snippet defines a cert-manager Issuer that uses ACME HTTP-01 challenge with Let's Encrypt staging server to issue certificates. It specifies Traefik as the ingress class to use for solving the challenges.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: acme\n\nspec:\n  acme:\n    # Production server is on https://acme-v02.api.letsencrypt.org/directory\n    # Use staging by default.\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: acme\n    solvers:\n      - http01:\n          ingress:\n            ingressClassName: traefik\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded IPs for InFlightReq in Consul Catalog\nDESCRIPTION: This snippet shows how to configure excluded IPs for InFlightReq middleware in Consul Catalog to select the client IP from X-Forwarded-For header.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-inflightreq.inflightreq.sourcecriterion.ipstrategy.excludedips=127.0.0.1/32, 192.168.1.7\"\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry gRPC Endpoint in TOML\nDESCRIPTION: Configures the endpoint address for the OpenTelemetry Collector when using gRPC protocol with TOML configuration. The default is localhost:4317.\n\nLANGUAGE: toml\nCODE:\n```\n[log.otlp.grpc]\n  endpoint = \"localhost:4317\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SPIFFE IDs in Traefik Server Transport\nDESCRIPTION: Configuration examples for defining allowed SPIFFE IDs in Traefik server transport, which takes precedence over the SPIFFE TrustDomain setting.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      spiffe:\n        ids:\n          - spiffe://trust-domain/id1\n          - spiffe://trust-domain/id2\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.serversTransports.mytransport.spiffe]\n  ids = [\"spiffe://trust-domain/id1\", \"spiffe://trust-domain/id2\"]\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n    spiffe:\n      ids:\n        - spiffe://trust-domain/id1\n        - spiffe://trust-domain/id2\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Router Priorities in Traefik with YAML\nDESCRIPTION: YAML configuration for explicitly setting router priorities in Traefik. This ensures Router-2 handles specific hosts while Router-1 handles the remaining pattern matches.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    Router-1:\n      rule: \"HostRegexp(`[a-z]+\\.traefik\\.com`)\"\n      entryPoints:\n      - \"web\"\n      service: service-1\n      priority: 1\n    Router-2:\n      rule: \"Host(`foobar.traefik.com`)\"\n      entryPoints:\n      - \"web\"\n      priority: 2\n      service: service-2\n```\n\n----------------------------------------\n\nTITLE: Exposing Traefik Dashboard with YAML Dynamic Configuration\nDESCRIPTION: YAML file for dynamic configuration to expose the Traefik dashboard. Creates a router and middleware for the dashboard with basic authentication.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Configuration\nhttp:\n  routers:\n    dashboard:\n      rule: Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\n      service: api@internal\n      middlewares:\n        - auth\n  middlewares:\n    auth:\n      basicAuth:\n        users:\n          - \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"\n          - \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring defaultRule in Docker Provider with YAML, TOML and CLI\nDESCRIPTION: Examples showing how to define the defaultRule option for Docker provider in different configuration formats. The defaultRule determines what routing rule to apply to a container when no rule is explicitly defined by a label.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    defaultRule: \"Host(`{{ .Name }}.{{ index .Labels \\\"customLabel\\\"}}`)\"\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  defaultRule = \"Host(`{{ .Name }}.{{ index .Labels \\\"customLabel\\\"}}`)\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.defaultRule='Host(`{{ .Name }}.{{ index .Labels \"customLabel\"}}`)'\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Middleware with TOML Configuration File\nDESCRIPTION: Illustrates how to set up IP allowlist middleware using a TOML configuration file. It defines the middleware, a router that uses it, and the associated service with load balancing configuration.\n\nLANGUAGE: toml\nCODE:\n```\n# As TOML Configuration File\n[tcp.routers]\n  [tcp.routers.router1]\n    service = \"myService\"\n    middlewares = [\"foo-ip-allowlist\"]\n    rule = \"Host(`example.com`)\"\n\n[tcp.middlewares]\n  [tcp.middlewares.foo-ip-allowlist.ipAllowList]\n    sourceRange = [\"127.0.0.1/32\", \"192.168.1.7\"]\n\n[tcp.services]\n  [tcp.services.service1]\n    [tcp.services.service1.loadBalancer]\n    [[tcp.services.service1.loadBalancer.servers]]\n      address = \"10.0.0.10:4000\"\n    [[tcp.services.service1.loadBalancer.servers]]\n      address = \"10.0.0.11:4000\"\n```\n\n----------------------------------------\n\nTITLE: IngressRouteUDP with ExternalName Service Configuration\nDESCRIPTION: Example showing how to configure an IngressRouteUDP with an ExternalName Service where port is defined only in the IngressRouteUDP.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: traefik.io/v1alpha1\nkind: IngressRouteUDP\nmetadata:\n  name: test.route\n  namespace: default\n\nspec:\n  entryPoints:\n    - foo\n\n  routes:\n  - services:\n    - name: external-svc\n      port: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: external-svc\n  namespace: default\nspec:\n  externalName: external.domain\n  type: ExternalName\n```\n\n----------------------------------------\n\nTITLE: Configuring PROXY Protocol Version for TCP Service in Traefik\nDESCRIPTION: Sets the PROXY protocol version to use for preserving client connection information. The PROXY protocol allows passing client connection information through load balancers.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.mytcpservice.loadbalancer.proxyprotocol.version=1\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Timeout in Traefik\nDESCRIPTION: Defines the maximum duration Traefik waits for a health check response before considering it failed. This prevents health checks from hanging indefinitely on unresponsive services.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.healthcheck.timeout=10s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Authority Path in YAML\nDESCRIPTION: YAML configuration for specifying the path to the certificate authority file used for Kubernetes client authentication.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    certAuthFilePath: \"/my/ca.crt\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router Priority with JSON Tags\nDESCRIPTION: Example of configuring multiple TCP routers with different priorities using JSON tags to handle specific client IP addresses.\n\nLANGUAGE: json\nCODE:\n```\n{\n  //...\n  \"Tags\": [\n    \"traefik.tcp.routers.Router-1.rule=ClientIP(`192.168.0.12`)\",\n    \"traefik.tcp.routers.Router-1.entryPoints=web\",\n    \"traefik.tcp.routers.Router-1.service=service-1\",\n    \"traefik.tcp.routers.Router-1.priority=2\",\n    \"traefik.tcp.routers.Router-2.rule=ClientIP(`192.168.0.0/24`)\",\n    \"traefik.tcp.routers.Router-2.entryPoints=web\",\n    \"traefik.tcp.routers.Router-2.service=service-2\",\n    \"traefik.tcp.routers.Router-2.priority=1\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Idle Connection Timeout in Traefik Forwarding Timeouts\nDESCRIPTION: Configuration examples for setting the maximum amount of time an idle (keep-alive) connection will remain idle before closing itself.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      forwardingTimeouts:\n        idleConnTimeout: \"1s\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.serversTransports.mytransport.forwardingTimeouts]\n  idleConnTimeout = \"1s\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  forwardingTimeouts:\n    idleConnTimeout: \"1s\"\n```\n\n----------------------------------------\n\nTITLE: UseBindPortIP Configuration in YAML\nDESCRIPTION: This snippet demonstrates how to configure Traefik to use the IP/Port attached to the container's binding instead of its inner network IP/Port using YAML configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    useBindPortIP: true\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Sessions with Cookies in Traefik with YAML Labels\nDESCRIPTION: Enables sticky sessions using cookies, ensuring requests from the same client are always routed to the same backend server.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie=true\n```\n\n----------------------------------------\n\nTITLE: Configuring addAuthCookiesToResponse in YAML File Configuration\nDESCRIPTION: YAML file configuration for copying cookies from the authentication server to the response.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        address: \"https://example.com/auth\"\n        addAuthCookiesToResponse:\n          - \"Session-Cookie\"\n          - \"State-Cookie\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ForwardAuth Middleware in TOML File Configuration\nDESCRIPTION: TOML file configuration for setting up the ForwardAuth middleware in Traefik to delegate authentication to an external service.\n\nLANGUAGE: toml\nCODE:\n```\n# Forward authentication to example.com\n[http.middlewares]\n  [http.middlewares.test-auth.forwardAuth]\n    address = \"https://example.com/auth\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Service in Traefik\nDESCRIPTION: Controls whether Traefik should expose this service. This option overrides the default setting specified by exposedByDefault in the provider configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.enable=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Log Compression via CLI\nDESCRIPTION: Enables gzip compression for rotated log files using command line interface. By default, log files are not compressed after rotation.\n\nLANGUAGE: bash\nCODE:\n```\n--log.compress=true\n```\n\n----------------------------------------\n\nTITLE: Calculating Rate Limit in Go\nDESCRIPTION: Shows how the actual rate limit is calculated in Go by dividing average by period. This formula determines the maximum rate of requests allowed.\n\nLANGUAGE: go\nCODE:\n```\nr = average / period\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry gRPC Endpoint via CLI\nDESCRIPTION: Configures the endpoint address for the OpenTelemetry Collector when using gRPC protocol with command line interface. The default is localhost:4317.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.grpc.endpoint=localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry gRPC Headers in YAML\nDESCRIPTION: Sets additional headers for OpenTelemetry gRPC connections using YAML configuration. These headers will be sent with each request to the collector.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  otlp:\n    grpc:\n      headers:\n        foo: bar\n        baz: buz\n```\n\n----------------------------------------\n\nTITLE: Setting Termination Delay for TCP Connections in Traefik\nDESCRIPTION: Example of configuring termination delay for TCP connections (deprecated approach). This controls how quickly connections are fully terminated when one side initiates closing.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  services:\n    my-service:\n      loadBalancer:\n        terminationDelay: 200\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.services]\n  [tcp.services.my-service.loadBalancer]\n    [[tcp.services.my-service.loadBalancer]]\n      terminationDelay = 200\n```\n\n----------------------------------------\n\nTITLE: Configuring ForwardAuth Middleware in YAML File Configuration\nDESCRIPTION: YAML file configuration for setting up the ForwardAuth middleware in Traefik to delegate authentication to an external service.\n\nLANGUAGE: yaml\nCODE:\n```\n# Forward authentication to example.com\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        address: \"https://example.com/auth\"\n```\n\n----------------------------------------\n\nTITLE: Defining Certificate Stores in Traefik YAML\nDESCRIPTION: Example of defining a default TLS certificate store in YAML. Traefik groups certificates together in stores, with only one globally available store named 'default'.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  stores:\n    default: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Hostname in Traefik with YAML Labels\nDESCRIPTION: Sets the hostname to use in the Host header of the health check requests.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.hostname=example.org\n```\n\n----------------------------------------\n\nTITLE: Configuring SPIFFE in Traefik Using TOML\nDESCRIPTION: Static configuration example showing how to enable SPIFFE in Traefik using TOML format. Sets the workloadAPIAddr parameter to connect to the SPIFFE Workload API.\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[spiffe]\n    workloadAPIAddr: localhost\n```\n\n----------------------------------------\n\nTITLE: Setting Average Rate in YAML File\nDESCRIPTION: Example of setting the average request rate to 100 requests per second in a YAML file. The average parameter defines the maximum rate allowed from a given source.\n\nLANGUAGE: yaml\nCODE:\n```\n# 100 reqs/s\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        average: 100\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for TCP Service Backend in Traefik\nDESCRIPTION: Enables TLS for the connection between Traefik and the backend service. This secures the communication from Traefik to your application.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.mytcpservice.loadbalancer.server.tls=true\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Transport for Services in Traefik\nDESCRIPTION: Example of referencing a custom HTTP ServersTransport configuration for communication between Traefik and backend servers using the File Provider.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    Service01:\n      loadBalancer:\n        serversTransport: mytransport\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.Service01]\n    [http.services.Service01.loadBalancer]\n      serversTransport = \"mytransport\"\n```\n\n----------------------------------------\n\nTITLE: Docker Endpoint Configuration in TOML\nDESCRIPTION: This snippet shows how to specify the Docker API endpoint for Traefik to connect to Docker Swarm using TOML configuration.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  endpoint = \"unix:///var/run/docker.sock\"\n```\n\n----------------------------------------\n\nTITLE: Automatic Service Creation with Labels\nDESCRIPTION: Demonstrates how Traefik automatically creates and assigns a service when only a router is defined with labels.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  # no service specified or defined and yet one gets automatically created\n  # and assigned to router myproxy.\n  - \"traefik.http.routers.myproxy.rule=Host(`example.net`)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring maxBodySize in ForwardAuth Middleware\nDESCRIPTION: Sets the maxBodySize parameter to limit the body size in bytes for ForwardAuth middleware. The example sets a 1000 byte limit across different configuration methods.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.maxBodySize=1000\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    address: https://example.com/auth\n    forwardBody: true\n    maxBodySize: 1000\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.maxBodySize=1000\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        address: \"https://example.com/auth\"\n        maxBodySize: 1000\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.forwardAuth]\n    address = \"https://example.com/auth\"\n    forwardBody = true\n    maxBodySize = 1000\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry gRPC Exporter in YAML\nDESCRIPTION: Sets up Traefik to send logs to the OpenTelemetry Collector using gRPC protocol with YAML configuration. The default collector port for gRPC is 4317.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  otlp:\n    grpc: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple EntryPoints in Static Configuration using TOML\nDESCRIPTION: Static configuration that defines web, websecure and other entrypoints on different ports using TOML syntax.\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n  [entryPoints.websecure]\n    address = \":443\"\n  [entryPoints.other]\n    address = \":9090\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Configuration with YAML in Traefik Proxy\nDESCRIPTION: This snippet shows how to define dynamic configuration for Traefik Proxy using YAML format. The actual content is referenced from an external file.\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"content/reference/dynamic-configuration/file.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation Size in YAML\nDESCRIPTION: Sets the maximum size of log files before rotation occurs using YAML configuration. This example sets the maximum size to 1 megabyte (default is 100MB).\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  maxSize: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check with Additional HTTP Headers in Traefik\nDESCRIPTION: Example of configuring a health check with custom HTTP headers using the File Provider. The health check will send additional headers 'My-Custom-Header: foo' and 'My-Header: bar' with each request.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    Service-1:\n      loadBalancer:\n        healthCheck:\n          path: /health\n          headers:\n            My-Custom-Header: foo\n            My-Header: bar\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.Service-1]\n    [http.services.Service-1.loadBalancer.healthCheck]\n      path = \"/health\"\n\n      [http.services.Service-1.loadBalancer.healthCheck.headers]\n        My-Custom-Header = \"foo\"\n        My-Header = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Default Priority Computation for TCP Routers in TOML Format\nDESCRIPTION: Example of dynamic configuration in TOML format showing how default priorities are computed for TCP routers with ClientIP rules.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.routers]\n  [tcp.routers.Router-1]\n    rule = \"ClientIP(`192.168.0.12`)\"\n    # ...\n  [tcp.routers.Router-2]\n    rule = \"ClientIP(`192.168.0.0/24`)\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Metrics Prefix for Datadog\nDESCRIPTION: Configures the prefix used for metrics collection in Datadog. The default prefix is \"traefik\".\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  datadog:\n    prefix: traefik\n```\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.datadog]\n    prefix = \"traefik\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--metrics.datadog.prefix=traefik\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check with Custom Scheme in Traefik\nDESCRIPTION: Example of configuring a health check for a service with a custom scheme using the File Provider. The health check will use the HTTP scheme explicitly for the health check endpoint.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    Service-1:\n      loadBalancer:\n        healthCheck:\n          path: /health\n          scheme: http\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.Service-1]\n    [http.services.Service-1.loadBalancer.healthCheck]\n      path = \"/health\"\n      scheme = \"http\"\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Router Priorities in Traefik with Docker Labels\nDESCRIPTION: Docker label configuration for explicitly setting router priorities in Traefik. This ensures proper routing precedence between specific and pattern-matching rules.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.routers.Router-1.rule=HostRegexp(`[a-z]+\\.traefik\\.com`)\"\n  - \"traefik.http.routers.Router-1.entryPoints=web\"\n  - \"traefik.http.routers.Router-1.service=service-1\"\n  - \"traefik.http.routers.Router-1.priority=1\"\n  - \"traefik.http.routers.Router-2.rule=Host(`foobar.traefik.com`)\"\n  - \"traefik.http.routers.Router-2.entryPoints=web\"\n  - \"traefik.http.routers.Router-2.service=service-2\"\n  - \"traefik.http.routers.Router-2.priority=2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted Round Robin Load Balancing in Traefik\nDESCRIPTION: Configuration examples for the Weighted Round Robin (WRR) load balancing strategy which balances requests between multiple services based on assigned weights.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    app:\n      weighted:\n        services:\n        - name: appv1\n          weight: 3\n        - name: appv2\n          weight: 1\n\n    appv1:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-2/\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.app]\n    [[http.services.app.weighted.services]]\n      name = \"appv1\"\n      weight = 3\n    [[http.services.app.weighted.services]]\n      name = \"appv2\"\n      weight = 1\n\n  [http.services.appv1]\n    [http.services.appv1.loadBalancer]\n      [[http.services.appv1.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n  [http.services.appv2]\n    [http.services.appv2.loadBalancer]\n      [[http.services.appv2.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Hostname in Traefik\nDESCRIPTION: Sets the hostname to be used in health check requests to the backend service.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.hostname=example.org\n```\n\n----------------------------------------\n\nTITLE: Specifying Certificate Stores for Certificates in YAML\nDESCRIPTION: Example of how to specify which store each certificate should be stored in using YAML format. If not specified, certificates are stored in the default store.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  certificates:\n    - certFile: /path/to/domain.cert\n      keyFile: /path/to/domain.key\n      stores:\n        - default\n    # Note that since no store is defined,\n    # the certificate below will be stored in the `default` store.\n    - certFile: /path/to/other-domain.cert\n      keyFile: /path/to/other-domain.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Port in Traefik with YAML\nDESCRIPTION: Sets the port for a service when it exposes multiple ports. This allows you to specify which port Traefik should connect to.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.server.port=8080\n```\n\n----------------------------------------\n\nTITLE: Using Header and HeaderRegexp Matchers in Traefik HTTP Router Rules\nDESCRIPTION: Examples of using Header and HeaderRegexp matchers to match requests based on specific header values. Shows how to match exact header values or use regular expressions for more flexible matching.\n\nLANGUAGE: go\nCODE:\n```\nHeader(`Content-Type`, `application/yaml`)\n```\n\nLANGUAGE: go\nCODE:\n```\nHeaderRegexp(`Content-Type`, `^application/(json\\|yaml)$`)\n```\n\nLANGUAGE: go\nCODE:\n```\nHeaderRegexp(`Content-Type`, `(?i)^application/(json\\|yaml)$`)\n```\n\n----------------------------------------\n\nTITLE: Service Metrics in InfluxDB2 Format\nDESCRIPTION: Lists the metric names for service monitoring in InfluxDB2 format. These metrics track request counts, TLS usage, request duration, retries, server status, and data transfer sizes.\n\nLANGUAGE: influxdb\nCODE:\n```\ntraefik.service.requests.total\ntraefik.service.requests.tls.total\ntraefik.service.request.duration\ntraefik.service.retries.total\ntraefik.service.server.up\ntraefik.service.requests.bytes.total\ntraefik.service.responses.bytes.total\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via HTTP in CLI\nDESCRIPTION: Command line flag to configure Traefik to connect to a remote Docker daemon using HTTP API. This allows Traefik to communicate with a Docker daemon on a different host.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm.endpoint=http://127.0.0.1:2375\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring ContentType Middleware in YAML\nDESCRIPTION: Example of enabling content type auto-detection middleware using structured YAML configuration in Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\n# Enable auto-detection\nhttp:\n  middlewares:\n    autodetect:\n      contentType: {}\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Mode for Forwarded Headers in Traefik\nDESCRIPTION: Configuration to enable insecure mode for forwarded headers, which causes Traefik to always trust X-Forwarded-* headers regardless of the source IP address.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  web:\n    address: \":80\"\n    forwardedHeaders:\n      insecure: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n\n    [entryPoints.web.forwardedHeaders]\n      insecure = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.web.address=:80\n--entryPoints.web.forwardedHeaders.insecure\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Router Service in Traefik\nDESCRIPTION: Associates a TCP router with a specific service that will handle the request.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.routers.mytcprouter.service=myservice\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CircuitBreaker for Latency Check in Consul Catalog\nDESCRIPTION: Configuration for Consul Catalog that sets up a circuit breaker middleware triggered when the median latency exceeds 100ms.\n\nLANGUAGE: yaml\nCODE:\n```\n# Latency Check\n- \"traefik.http.middlewares.latency-check.circuitbreaker.expression=LatencyAtQuantileMS(50.0) > 100\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS insecureSkipVerify in ForwardAuth\nDESCRIPTION: Sets the insecureSkipVerify option to accept any certificate presented by the authentication server. When enabled, TLS connections will not verify hostname coverage.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.tls.insecureSkipVerify=true\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    address: https://example.com/auth\n    tls:\n      insecureSkipVerify: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.tls.InsecureSkipVerify=true\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        address: \"https://example.com/auth\"\n        tls:\n          insecureSkipVerify: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.forwardAuth]\n    address = \"https://example.com/auth\"\n    [http.middlewares.test-auth.forwardAuth.tls]\n      insecureSkipVerify: true\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log Age in TOML\nDESCRIPTION: Configures the maximum age (in days) for retained log files using TOML format. This example sets the maximum age to 3 days.\n\nLANGUAGE: toml\nCODE:\n```\n[log]\n  maxAge = 3\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS in Traefik v2 with TOML\nDESCRIPTION: Example of dynamic TLS configuration in Traefik v2 using TOML format. Shows how a router references a TLS options configuration defined at the root level, with certificate files and TLS options like minimum version and cipher suites.\n\nLANGUAGE: toml\nCODE:\n```\n# dynamic configuration\n[http.routers]\n  [http.routers.Router-1]\n    rule = \"Host(`example.com`)\"\n    service = \"service-id\"\n    # will terminate the TLS request\n    [http.routers.Router-1.tls]\n      options = \"myTLSOptions\"\n\n[[tls.certificates]]\n  certFile = \"/path/to/domain.cert\"\n  keyFile = \"/path/to/domain.key\"\n\n[tls.options]\n  [tls.options.myTLSOptions]\n    minVersion = \"VersionTLS12\"\n    cipherSuites = [\n      \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n      \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n      \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\",\n      \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\n      \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n      \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Connection to Docker in TOML\nDESCRIPTION: Configuration for connecting Traefik to the Docker Engine API over HTTP using TOML format. This can be used for remote Docker daemons with HTTP enabled.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  endpoint = \"http://127.0.0.1:2375\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Service URL in Traefik with YAML Labels\nDESCRIPTION: Defines the complete service URL. This option cannot be combined with separate port or scheme definitions.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.server.url=http://foobar:8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik EntryPoint with allowACMEByPass Option (YAML, TOML, CLI)\nDESCRIPTION: Example showing how to enable the allowACMEByPass option for a Traefik EntryPoint. This allows user-defined routers to handle ACME TLS or HTTP challenges instead of Traefik's dedicated handlers.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  foo:\n    allowACMEByPass: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints.foo]\n  allowACMEByPass = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.name.allowACMEByPass=true\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Client Certificate for OpenTelemetry gRPC in Traefik\nDESCRIPTION: Sets the paths to the client certificate and key for secure gRPC connections to the OpenTelemetry Collector. Both cert and key must be provided together.\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  otlp:\n    grpc:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n```\n\nLANGUAGE: toml\nCODE:\n```\n[accesslog.otlp.grpc.tls]\n  cert = \"path/to/foo.cert\"\n  key = \"path/to/foo.key\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--accesslog.otlp.grpc.tls.cert=path/to/foo.cert\n--accesslog.otlp.grpc.tls.key=path/to/foo.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik EntryPoints on Specific IP Addresses (YAML, TOML, CLI)\nDESCRIPTION: Example demonstrating how to bind Traefik EntryPoints to specific IPv4 and IPv6 addresses instead of all interfaces. This allows for more precise network configuration when running on multi-homed hosts.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  specificIPv4:\n    address: \"192.168.2.7:8888\"\n  specificIPv6:\n    address: \"[2001:db8::1]:8888\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints.specificIPv4]\n  address = \"192.168.2.7:8888\"\n[entryPoints.specificIPv6]\n  address = \"[2001:db8::1]:8888\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.specificIPv4.address=192.168.2.7:8888\n--entryPoints.specificIPv6.address=[2001:db8::1]:8888\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router Priority in TOML Format\nDESCRIPTION: Example of configuring multiple TCP routers with different priorities in TOML format to handle specific client IP addresses.\n\nLANGUAGE: toml\nCODE:\n```\n[tcp.routers]\n  [tcp.routers.Router-1]\n    rule = \"ClientIP(`192.168.0.12`)\"\n    entryPoints = [\"web\"]\n    service = \"service-1\"\n    priority = 2\n  [tcp.routers.Router-2]\n    rule = \"ClientIP(`192.168.0.0/24`)\"\n    entryPoints = [\"web\"]\n    priority = 1\n    service = \"service-2\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Certificate in TOML\nDESCRIPTION: Example of defining a default certificate for connections without SNI or without a matching domain in TOML format. This certificate is used as fallback.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[tls.stores]\n  [tls.stores.default]\n    [tls.stores.default.defaultCertificate]\n      certFile = \"path/to/cert.crt\"\n      keyFile  = \"path/to/cert.key\"\n```\n\n----------------------------------------\n\nTITLE: Setting Router Priority in Traefik with Consul Catalog\nDESCRIPTION: Sets the priority to 42 for a TCP router named 'mytcprouter'. Higher priority routers are evaluated first when multiple routers could match a request.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.routers.mytcprouter.priority=42\"\n```\n\n----------------------------------------\n\nTITLE: Priority Calculation Example with TOML\nDESCRIPTION: TOML example showing how default priorities are computed in Traefik based on rule length. The default priority calculation may lead to unexpected routing behavior.\n\nLANGUAGE: toml\nCODE:\n```\n[http.routers]\n  [http.routers.Router-1]\n    rule = \"HostRegexp(`[a-z]+\\.traefik\\.com`)\"\n    # ...\n  [http.routers.Router-2]\n    rule = \"Host(`foobar.traefik.com`)\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring preserveRequestMethod in ForwardAuth\nDESCRIPTION: Controls whether to preserve the original request method when forwarding to the authentication server. By default, requests are forwarded as GET, but when enabled the original method is preserved.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.preserveRequestMethod=true\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    # ...\n    preserveRequestMethod: true\n```\n\nLANGUAGE: json\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.preserveRequestMethod=true\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        # ...\n        preserveRequestMethod: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares.test-auth.forwardAuth]\n  # ...\n  preserveRequestMethod = true\n```\n\n----------------------------------------\n\nTITLE: Examples of Router Rules for Path Prefix Matching\nDESCRIPTION: Shows how to configure a router rule to match requests based on the URL path prefix. This rule matches any request with path starting with '/api' on any host.\n\nLANGUAGE: bash\nCODE:\n```\n# Matches http://api.traefik.example.com/api or http://example.com/api\n# but does not match http://api.traefik.example.com/hello\nrule = \"PathPrefix(`/api`)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Endpoint in Traefik\nDESCRIPTION: Environment variable for specifying the Docker server endpoint. By default, it connects to the Unix socket at /var/run/docker.sock.\n\nLANGUAGE: bash\nCODE:\n```\nunix:///var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Service Port in Traefik\nDESCRIPTION: Specifies the port on which the backend application is listening for a UDP service.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.udp.services.myudpservice.loadbalancer.server.port=423\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Port Reuse for Traefik EntryPoint in YAML\nDESCRIPTION: Configuration example for enabling the reusePort option on a Traefik EntryPoint using file-based YAML. This allows multiple processes to listen on the same port, enabling features like zero-downtime deployments.\n\nLANGUAGE: yaml\nCODE:\n```\n  entryPoints:\n    web:\n      address: \":80\"\n      reusePort: true\n```\n\n----------------------------------------\n\nTITLE: Configuring preserveLocationHeader in ForwardAuth\nDESCRIPTION: Controls whether to forward the Location header to the client as-is. When enabled, preserves the original Location header from the authentication server without modifying it.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.preserveLocationHeader=true\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    # ...\n    preserveLocationHeader: true\n```\n\nLANGUAGE: json\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.preserveLocationHeader=true\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        # ...\n        preserveLocationHeader: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares.test-auth.forwardAuth]\n  # ...\n  preserveLocationHeader = true\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Logger in YAML\nDESCRIPTION: Enables the OpenTelemetry Logger for logs in Traefik using YAML configuration. By default, it will export logs using HTTPS to localhost:4318/v1/logs.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  otlp: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring RemoveHeader with Kubernetes\nDESCRIPTION: Demonstrates how to configure BasicAuth to remove the authorization header before forwarding the request to the service in Kubernetes.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  basicAuth:\n    removeHeader: true\n```\n\n----------------------------------------\n\nTITLE: Traefik Static Configuration Using YAML Format\nDESCRIPTION: Example of Traefik Proxy static configuration using YAML file format. The content is imported from 'content/reference/static-configuration/file.yaml'.\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"content/reference/static-configuration/file.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Port in Traefik with YAML Labels\nDESCRIPTION: Sets the port for a service. Useful when a service exposes multiple ports and you need to specify which one Traefik should use.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.server.port=8080\n```\n\n----------------------------------------\n\nTITLE: Naming Sticky Cookies in Traefik LoadBalancer\nDESCRIPTION: Sets a custom name for the cookie used in sticky sessions.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.name=foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Options with Consul Catalog Tags in Traefik\nDESCRIPTION: Specifies which TLS options configuration to use for the router.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.tls.options=foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Events Watch in TOML\nDESCRIPTION: Configuration to control whether Traefik watches Docker events. When enabled, Traefik reacts immediately to changes in the Docker Swarm environment.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  watch = false\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Matching Subdomain Connections with HostSNIRegexp in Traefik\nDESCRIPTION: Example of using HostSNIRegexp with a regular expression to match TCP connections to any subdomain of example.com in Traefik configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nHostSNIRegexp(`^.+\\.example\\.com$`)\n```\n\n----------------------------------------\n\nTITLE: Configuring PassTLSClientCert with Full Certificate Info in Kubernetes CRD\nDESCRIPTION: This Kubernetes Custom Resource Definition (CRD) creates a middleware that passes all available certificate information in the X-Forwarded-Tls-Client-Cert-Info header, including subject details, issuer information, validity dates, and SANs.\n\nLANGUAGE: yaml\nCODE:\n```\n# Pass all the available info in the `X-Forwarded-Tls-Client-Cert-Info` header\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-passtlsclientcert\nspec:\n  passTLSClientCert:\n    info:\n      notAfter: true\n      notBefore: true\n      sans: true\n      subject:\n        country: true\n        province: true\n        locality: true\n        organization: true\n        organizationalUnit: true\n        commonName: true\n        serialNumber: true\n        domainComponent: true\n      issuer:\n        country: true\n        province: true\n        locality: true\n        organization: true\n        commonName: true\n        serialNumber: true\n        domainComponent: true\n```\n\n----------------------------------------\n\nTITLE: Mounting ACME Certificate Storage in Docker\nDESCRIPTION: Docker commands for mounting either the ACME JSON file or the folder containing it when running Traefik in a container.\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v \"/my/host/acme.json:/acme.json\" traefik\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v \"/my/host/acme:/etc/traefik/acme\" traefik\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Router Rule in Traefik\nDESCRIPTION: Defines the matching rule for a TCP router. This example uses HostSNI to match based on the SNI field in TLS ClientHello.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.routers.mytcprouter.rule=HostSNI(`example.com`)\"\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Curve Preferences in YAML\nDESCRIPTION: Example of configuring preferred elliptic curves in YAML format. This option allows setting preferred curves in a specific order for TLS connections.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  options:\n    default:\n      curvePreferences:\n        - CurveP521\n        - CurveP384\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth Middleware in Kubernetes\nDESCRIPTION: Kubernetes configuration for Traefik BasicAuth middleware using a Kubernetes secret to store the authorized users. This approach is recommended for Kubernetes environments.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  basicAuth:\n    secret: secretName\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth Middleware in Kubernetes\nDESCRIPTION: Kubernetes configuration for Traefik BasicAuth middleware using a Kubernetes secret to store the authorized users. This approach is recommended for Kubernetes environments.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  basicAuth:\n    secret: secretName\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log Backups via CLI\nDESCRIPTION: Configures the maximum number of old log files to retain using command line interface. This example limits the number of retained log files to 3.\n\nLANGUAGE: bash\nCODE:\n```\n--log.maxbackups=3\n```\n\n----------------------------------------\n\nTITLE: EntryPoint HTTP Metrics in Prometheus Format\nDESCRIPTION: List of HTTP metrics for entrypoints provided by Traefik in Prometheus format, including request counts, TLS requests, request duration, and request/response byte metrics.\n\nLANGUAGE: prom\nCODE:\n```\ntraefik_entrypoint_requests_total\ntraefik_entrypoint_requests_tls_total\ntraefik_entrypoint_request_duration_seconds\ntraefik_entrypoint_requests_bytes_total\ntraefik_entrypoint_responses_bytes_total\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Mirror Names in Traefik\nDESCRIPTION: Defines the name of a service mirror. This allows specifying multiple services to which traffic will be mirrored.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/<service_name>/mirroring/mirrors/<n>/name\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via SSH in YAML\nDESCRIPTION: Configuration for connecting Traefik to a remote Docker daemon using SSH in YAML format. This requires Docker 18.09+ and proper SSH key authentication setup for the Traefik user.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    endpoint: \"ssh://traefik@192.168.2.5:2022\"\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Matching IPv6 Subnet in Traefik TCP Router\nDESCRIPTION: Example of using ClientIP matcher to match connections from an IPv6 subnet in CIDR notation in Traefik TCP router configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nClientIP(`fe80::/10`)\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router Rule Syntax in Traefik\nDESCRIPTION: Sets the rule syntax version for parsing TCP router rules. This option is deprecated and will be removed in the next major version.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.ruleSyntax=v3\n```\n\n----------------------------------------\n\nTITLE: Configuring AddPrefix Middleware in YAML File\nDESCRIPTION: Example of how to configure the AddPrefix middleware in a YAML configuration file. This configuration adds the prefix '/foo' to all request paths before forwarding them.\n\nLANGUAGE: yaml\nCODE:\n```\n# Prefixing with /foo\nhttp:\n  middlewares:\n    add-foo:\n      addPrefix:\n        prefix: \"/foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GrpcWeb Middleware in Consul Catalog\nDESCRIPTION: Configuration for setting up the GrpcWeb middleware when using Consul Catalog as a provider. This setup allows all origins to access the gRPC service.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-grpcweb.grpcWeb.allowOrigins=*\"\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Interval in Traefik\nDESCRIPTION: Configures the interval between health checks to backend servers in seconds.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/interval\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Realm with Docker & Swarm\nDESCRIPTION: Shows how to customize the authentication realm for BasicAuth middleware in Docker or Swarm environments.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.basicauth.realm=MyRealm\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GrpcWeb Middleware in Docker & Swarm\nDESCRIPTION: Example configuration for setting up the GrpcWeb middleware in Docker or Docker Swarm using labels. This configuration allows all origins to access the gRPC service.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-grpcweb.grpcweb.allowOrigins=*\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Access Logs for a Router with Consul Catalog Tags in Traefik\nDESCRIPTION: Enables access logs for a specific router as part of observability configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.observability.accesslogs=true\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry gRPC TLS CA Certificate via CLI\nDESCRIPTION: Configures the certificate authority for secure connections to the OpenTelemetry Collector using gRPC with command line interface. This is used to verify the collector's TLS certificate.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.grpc.tls.ca=path/to/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Routing Rule in TOML\nDESCRIPTION: Configuration to define the default routing rule applied to containers with no specific rule defined. Uses Go templates with sprig functions and access to container name and labels.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  defaultRule = \"Host(`{{ .Name }}.{{ index .Labels \\\"customLabel\\\"}}`)\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Using Query and QueryRegexp Matchers in Traefik HTTP Router Rules\nDESCRIPTION: Examples of using Query and QueryRegexp matchers to route requests based on query parameters. Shows matching exact values, parameters without values, and pattern matching with regular expressions.\n\nLANGUAGE: go\nCODE:\n```\nQuery(`mobile`, `true`)\n```\n\nLANGUAGE: go\nCODE:\n```\nQuery(`mobile`)\n```\n\nLANGUAGE: go\nCODE:\n```\nQueryRegexp(`mobile`, `^(true\\|yes)$`)\n```\n\nLANGUAGE: go\nCODE:\n```\nQueryRegexp(`mobile`, `^.*$`)\n```\n\nLANGUAGE: go\nCODE:\n```\nQueryRegexp(`mobile`, `(?i)^(true\\|yes)$`)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry gRPC Headers via CLI\nDESCRIPTION: Sets additional headers for OpenTelemetry gRPC connections using command line interface. These headers will be sent with each request to the collector.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.grpc.headers.foo=bar --log.otlp.grpc.headers.baz=buz\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Curve Preferences in TOML\nDESCRIPTION: Sets the preferred elliptic curves for TLS handshake in TOML format. This configuration prioritizes CurveP521 and CurveP384 for better security.\n\nLANGUAGE: toml\nCODE:\n```\n[tls.options]\n  [tls.options.default]\n    curvePreferences = [\"CurveP521\", \"CurveP384\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry HTTP Endpoint in Traefik\nDESCRIPTION: Sets the URL endpoint of the OpenTelemetry Collector to receive access logs via HTTP. The default endpoint is 'https://localhost:4318/v1/logs' and uses TLS by default.\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  otlp:\n    http:\n      endpoint: https://collector:4318/v1/logs\n```\n\nLANGUAGE: toml\nCODE:\n```\n[accesslog.otlp.http]\n  endpoint = \"https://collector:4318/v1/logs\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--accesslog.otlp.http.endpoint=https://collector:4318/v1/logs\n```\n\n----------------------------------------\n\nTITLE: Setting Router Priority with Docker Label\nDESCRIPTION: Example of setting priority for a router using a Docker label. This sets the router's priority to 42, affecting the order in which routers are evaluated.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.priority=42\"\n```\n\n----------------------------------------\n\nTITLE: Global Metrics in StatsD Format\nDESCRIPTION: List of global metrics provided by Traefik in StatsD format with configurable prefix, including configuration reloads, open connections, and TLS certificate expiration metrics.\n\nLANGUAGE: statsd\nCODE:\n```\n# Default prefix: \"traefik\"\n{prefix}.config.reload.total\n{prefix}.config.reload.lastSuccessTimestamp\n{prefix}.open.connections\n{prefix}.tls.certs.notAfterTimestamp\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik TLS with CertResolver in Kubernetes\nDESCRIPTION: Kubernetes IngressRoute custom resource definition for Traefik. Defines a route with Host and Path matching, specifies the service name and port, and configures TLS with a certificate resolver.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: blogtls\nspec:\n  entryPoints:\n    - websecure\n  routes:\n  - match: Host(`example.com`) && Path(`/blog`)\n    kind: Rule\n    services:\n    - name: blog\n      port: 8080\n  tls:\n    certResolver: myresolver\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirror Service Name in Traefik\nDESCRIPTION: Sets the name of a service to use as a mirror destination for duplicated traffic.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/<service_name>/mirroring/mirrors/<n>/name\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Sessions with Cookies in Traefik\nDESCRIPTION: Activates sticky sessions using cookies for consistent routing of a client to the same backend server. This ensures session persistence for applications that require it.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.sticky.cookie=true\"\n```\n\n----------------------------------------\n\nTITLE: Sample GRPC Request and Response Using grpcurl\nDESCRIPTION: Example of a GRPC request to the echo service and its corresponding response. Shows the headers and context information returned by the echo service.\n\nLANGUAGE: shell\nCODE:\n```\n$ grpcurl -plaintext echo.localhost:80 gateway_api_conformance.echo_basic.grpcecho.GrpcEcho/Echo\n\n{\n  \"assertions\": {\n    \"fullyQualifiedMethod\": \"/gateway_api_conformance.echo_basic.grpcecho.GrpcEcho/Echo\",\n    \"headers\": [\n      {\n        \"key\": \"x-real-ip\",\n        \"value\": \"10.42.2.0\"\n      },\n      {\n        \"key\": \"x-forwarded-server\",\n        \"value\": \"traefik-74b4cf85d8-nkqqf\"\n      },\n      {\n        \"key\": \"x-forwarded-port\",\n        \"value\": \"80\"\n      },\n      {\n        \"key\": \"x-forwarded-for\",\n        \"value\": \"10.42.2.0\"\n      },\n      {\n        \"key\": \"grpc-accept-encoding\",\n        \"value\": \"gzip\"\n      },\n      {\n        \"key\": \"user-agent\",\n        \"value\": \"grpcurl/1.9.1 grpc-go/1.61.0\"\n      },\n      {\n        \"key\": \"content-type\",\n        \"value\": \"application/grpc\"\n      },\n      {\n        \"key\": \"x-forwarded-host\",\n        \"value\": \"echo.localhost:80\"\n      },\n      {\n        \"key\": \":authority\",\n        \"value\": \"echo.localhost:80\"\n      },\n      {\n        \"key\": \"accept-encoding\",\n        \"value\": \"gzip\"\n      },\n      {\n        \"key\": \"x-forwarded-proto\",\n        \"value\": \"http\"\n      }\n    ],\n    \"authority\": \"echo.localhost:80\",\n    \"context\": {\n      \"namespace\": \"default\",\n      \"pod\": \"echo-78f76675cf-9k7rf\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GrpcWeb Middleware in TOML File\nDESCRIPTION: File-based configuration using TOML syntax to set up the GrpcWeb middleware. This configuration creates a middleware that allows all origins.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-grpcweb.grpcWeb]\n    allowOrigins = [\"*\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Method in Traefik\nDESCRIPTION: Configures the HTTP method to use for health check requests to backend servers.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/method\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded IPs for InFlightReq in YAML File\nDESCRIPTION: This snippet demonstrates how to configure excluded IPs for InFlightReq middleware in a YAML configuration file to select the client IP from X-Forwarded-For header.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-inflightreq:\n      inFlightReq:\n        sourceCriterion:\n          ipStrategy:\n            excludedIPs:\n              - \"127.0.0.1/32\"\n              - \"192.168.1.7\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Container Port with Traefik\nDESCRIPTION: Specifies which port Traefik should use when forwarding requests to a container. This is essential when a container exposes multiple ports to differentiate which one Traefik should target.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.server.port=8080\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Middlewares with Consul Catalog Tags in Traefik\nDESCRIPTION: Assigns a comma-separated list of middlewares to a router for request processing.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.middlewares=auth,prefix,cb\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Selector in TOML\nDESCRIPTION: TOML configuration for filtering which Ingress objects Traefik processes based on labels.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress]\n  labelSelector = \"app=traefik\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Router Priority in Traefik with ECS\nDESCRIPTION: Defines the priority of the router when multiple routers could match a request. Higher values have higher priority.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.priority=42\n```\n\n----------------------------------------\n\nTITLE: Configuring Username Authentication for Etcd in Traefik\nDESCRIPTION: Defines a username with which to connect to etcd. This is optional and defaults to an empty string.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  etcd:\n    # ...\n    username: \"foo\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.etcd]\n  # ...\n  username = \"foo\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.etcd.username=foo\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Headers in Traefik Load Balancer\nDESCRIPTION: Configures custom headers to be included in health check requests to backend servers.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/headers/X-Foo\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Retry Middleware in TOML\nDESCRIPTION: Example of how to configure the Traefik HTTP Retry middleware using TOML structured format. This configuration sets up 4 retry attempts with an initial interval of 100ms for exponential backoff.\n\nLANGUAGE: toml\nCODE:\n```\n# Retry 4 times with exponential backoff\n[http.middlewares]\n  [http.middlewares.test-retry.retry]\n    attempts = 4\n    initialInterval = \"100ms\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router for Database Service in TOML\nDESCRIPTION: Dynamic configuration for a TCP router that forwards all non-TLS requests on port 3306 to a database service using the TOML syntax.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp]\n  [tcp.routers]\n    [tcp.routers.to-database]\n      entryPoints = [\"mysql\"]\n      # Catch every request (only available rule for non-tls routers. See below.)\n      rule = \"HostSNI(`*`)\"\n      service = \"database\"\n```\n\n----------------------------------------\n\nTITLE: Setting Mirror Traffic Percentage in Traefik\nDESCRIPTION: Configures the percentage of traffic to be mirrored to the specified mirror service.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/<service_name>/mirroring/mirrors/<n>/percent\n```\n\n----------------------------------------\n\nTITLE: Domain Resolution from Router's Rule in Docker\nDESCRIPTION: Docker label configuration for a router that derives the domain from a Host rule. The router uses a Tailscale domain and references the certificate resolver.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nlabels:\n  - traefik.http.routers.blog.rule=Host(`monitoring.yak-bebop.ts.net`) && Path(`/metrics`)\n  - traefik.http.routers.blog.tls.certresolver=myresolver\n```\n\n----------------------------------------\n\nTITLE: Configuring ALPN Protocols in TOML\nDESCRIPTION: Sets the list of supported ALPN protocols in TOML format. This configuration specifies HTTP/1.1 and HTTP/2 as the supported protocols for TLS connections.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[tls.options]\n  [tls.options.default]\n    alpnProtocols = [\"http/1.1\", \"h2\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Logs in Experimental Section via CLI\nDESCRIPTION: Activates the experimental OpenTelemetry logs feature in Traefik using command line interface. This must be explicitly enabled before using OpenTelemetry for logs.\n\nLANGUAGE: bash\nCODE:\n```\n--experimental.otlpLogs=true\n```\n\n----------------------------------------\n\nTITLE: Using the healthcheck Command in Traefik CLI\nDESCRIPTION: Shows the syntax for using the 'healthcheck' command which calls Traefik's /ping endpoint to verify if Traefik is healthy. This is useful for Docker HEALTHCHECK or other health monitoring systems.\n\nLANGUAGE: bash\nCODE:\n```\ntraefik healthcheck [command] [flags] [arguments]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Port for Docker Container in Traefik\nDESCRIPTION: Docker-compose configuration that specifies a custom port for Traefik to connect to. This overrides Traefik's default behavior of using the first exposed port of the container.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  my-container:\n    # ...\n    labels:\n      - traefik.http.routers.my-container.rule=Host(`example.com`)\n      # Tell Traefik to use the port 12345 to connect to `my-container`\n      - traefik.http.services.my-service.loadbalancer.server.port=12345\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via Unix Socket in YAML\nDESCRIPTION: Configuration for connecting Traefik to Docker Swarm using the unix socket in YAML format. This is the default connection method when running Traefik in a container with the Docker socket mounted.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    endpoint: \"unix:///var/run/docker.sock\"\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via Unix Socket in YAML\nDESCRIPTION: Configuration for connecting Traefik to Docker Swarm using the unix socket in YAML format. This is the default connection method when running Traefik in a container with the Docker socket mounted.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    endpoint: \"unix:///var/run/docker.sock\"\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Sticky Cookie Path in Traefik\nDESCRIPTION: Sets the path attribute of the cookie used for sticky sessions.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/sticky/cookie/path\n```\n\n----------------------------------------\n\nTITLE: Configuring PassTLSClientCert Middleware with PEM in YAML\nDESCRIPTION: This YAML configuration defines a middleware that passes the PEM-encoded client certificate in the X-Forwarded-Tls-Client-Cert header. It enables the pem option to include the full certificate.\n\nLANGUAGE: yaml\nCODE:\n```\n# Pass the pem in the `X-Forwarded-Tls-Client-Cert` header.\nhttp:\n  middlewares:\n    test-passtlsclientcert:\n      passTLSClientCert:\n        pem: true\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Options for Router in Traefik with Consul Catalog\nDESCRIPTION: Sets the TLS options profile to 'foobar' for 'myrouter'. TLS options define parameters like minimum TLS version, cipher suites, etc.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.tls.options=foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring InFlightReq Middleware in TOML File\nDESCRIPTION: This snippet shows how to configure the InFlightReq middleware in a TOML configuration file to limit simultaneous connections to 10.\n\nLANGUAGE: toml\nCODE:\n```\n# Limiting to 10 simultaneous connections\n[http.middlewares]\n  [http.middlewares.test-inflightreq.inFlightReq]\n    amount = 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Path in Traefik\nDESCRIPTION: Sets the URL path to use for health check requests to backend servers.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/path\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Compression in TOML File\nDESCRIPTION: Configures the Compress middleware using Traefik's TOML configuration file with default settings.\n\nLANGUAGE: toml\nCODE:\n```\n# Enable compression\n[http.middlewares]\n  [http.middlewares.test-compress.compress]\n```\n\n----------------------------------------\n\nTITLE: Setting Server Path Preservation in Traefik Load Balancer\nDESCRIPTION: Configures whether the path should be preserved when forwarding requests to the backend server.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/servers/0/preservePath\n```\n\n----------------------------------------\n\nTITLE: Deploying Echo Service for GRPC Routing\nDESCRIPTION: YAML configuration for deploying a GRPC echo service using Kubernetes Deployment and Service resources. The Deployment uses the echo-basic container image and configures environment variables for the GRPC echo server.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: echo\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: echo\n\n  template:\n    metadata:\n      labels:\n        app: echo\n    spec:\n      containers:\n        - name: echo-basic\n          image: gcr.io/k8s-staging-gateway-api/echo-basic\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n            - name: GRPC_ECHO_SERVER\n              value: \"1\"\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: echo\n  namespace: default\nspec:\n  selector:\n    app: echo\n\n  ports:\n    - port: 3000\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Client Certificate\nDESCRIPTION: Sets the path to public certificate and private key for secure connections to Consul. Both cert and key must be specified together.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    endpoint:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog.endpoint.tls]\n  cert = \"path/to/foo.cert\"\n  key = \"path/to/foo.key\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.endpoint.tls.cert=path/to/foo.cert\n--providers.consulcatalog.endpoint.tls.key=path/to/foo.key\n```\n\n----------------------------------------\n\nTITLE: Enabling Body Forwarding in TOML File Configuration\nDESCRIPTION: TOML file configuration for enabling body forwarding to the authentication server.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.forwardAuth]\n    address = \"https://example.com/auth\"\n    forwardBody = true\n```\n\n----------------------------------------\n\nTITLE: Configuring useBindPortIP in YAML\nDESCRIPTION: Setting useBindPortIP to route requests to the IP/port attached to the container's binding rather than its internal network IP/port using YAML. This helps with container accessibility in certain network configurations.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    useBindPortIP: true\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Router with Specific EntryPoints Using Docker Labels\nDESCRIPTION: Example showing how to configure a UDP router with specific EntryPoints using Docker labels. The router is configured to only listen on the 'streaming' EntryPoint while ignoring others.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.udp.routers.Router-1.entryPoints=streaming\"\n  - \"traefik.udp.routers.Router-1.service=service-1\"\n```\n\n----------------------------------------\n\nTITLE: Priority Calculation Example with Docker Labels\nDESCRIPTION: Docker labels example showing Traefik router rules that would need explicit priority configuration to work correctly. By default, HostRegexp would have higher priority than Host.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.routers.Router-1.rule=HostRegexp(`[a-z]+\\.traefik\\.com`)\"\n  - \"traefik.http.routers.Router-2.rule=Host(`foobar.traefik.com`)\"\n```\n\n----------------------------------------\n\nTITLE: Domain Definition Using tls.domains in Docker Swarm\nDESCRIPTION: Docker Swarm deployment configuration that explicitly defines the domain using tls.domains. Specifies a Tailscale domain and references the certificate resolver.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ndeploy:\n  labels:\n    - traefik.http.routers.blog.rule=Path(`/metrics`)\n    - traefik.http.routers.blog.tls.certresolver=myresolver\n    - traefik.http.routers.blog.tls.domains[0].main=monitoring.yak-bebop.ts.net\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for TCP Routers in Traefik\nDESCRIPTION: Enables TLS for a TCP router, allowing secure connections with TLS termination or passthrough.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.routers.mytcprouter.tls=true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum TLS Version in YAML\nDESCRIPTION: Example of configuring maximum TLS version in YAML format. This is generally discouraged except for special cases, as restricting to older versions reduces security.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  options:\n    default:\n      maxVersion: VersionTLS13\n\n    maxtls12:\n      maxVersion: VersionTLS12\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for TCP Routers in Traefik\nDESCRIPTION: Enables TLS for a TCP router, allowing secure connections with TLS termination or passthrough.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.routers.mytcprouter.tls=true\"\n```\n\n----------------------------------------\n\nTITLE: Setting ExposedByDefault in CLI\nDESCRIPTION: Command line flag to control whether Traefik automatically exposes all containers by default. When set to false, only containers with traefik.enable=true label will be exposed.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm.exposedByDefault=false\n# ...\n```\n\n----------------------------------------\n\nTITLE: Traefik Configuration Table in Markdown\nDESCRIPTION: A markdown table listing Traefik configuration key-value pairs for TCP, TLS, and UDP settings. The table shows the complete path to each configuration option and its corresponding value, with paths structured hierarchically to show relationships between components.\n\nLANGUAGE: markdown\nCODE:\n```\n| `traefik/tcp/serversTransports/TCPServersTransport1/tls/insecureSkipVerify` | `true` |\n| `traefik/tcp/serversTransports/TCPServersTransport1/tls/peerCertURI` | `foobar` |\n| `traefik/tcp/serversTransports/TCPServersTransport1/tls/rootCAs/0` | `foobar` |\n| `traefik/tcp/serversTransports/TCPServersTransport1/tls/rootCAs/1` | `foobar` |\n| `traefik/tcp/serversTransports/TCPServersTransport1/tls/serverName` | `foobar` |\n| `traefik/tcp/serversTransports/TCPServersTransport1/tls/spiffe/ids/0` | `foobar` |\n| `traefik/tcp/serversTransports/TCPServersTransport1/tls/spiffe/ids/1` | `foobar` |\n| `traefik/tcp/serversTransports/TCPServersTransport1/tls/spiffe/trustDomain` | `foobar` |\n| `traefik/tcp/services/TCPService01/loadBalancer/proxyProtocol/version` | `42` |\n| `traefik/tcp/services/TCPService01/loadBalancer/servers/0/address` | `foobar` |\n| `traefik/tcp/services/TCPService01/loadBalancer/servers/0/tls` | `true` |\n| `traefik/tcp/services/TCPService01/loadBalancer/servers/1/address` | `foobar` |\n| `traefik/tcp/services/TCPService01/loadBalancer/servers/1/tls` | `true` |\n| `traefik/tcp/services/TCPService01/loadBalancer/serversTransport` | `foobar` |\n| `traefik/tcp/services/TCPService01/loadBalancer/terminationDelay` | `42` |\n| `traefik/tcp/services/TCPService02/weighted/services/0/name` | `foobar` |\n| `traefik/tcp/services/TCPService02/weighted/services/0/weight` | `42` |\n| `traefik/tcp/services/TCPService02/weighted/services/1/name` | `foobar` |\n| `traefik/tcp/services/TCPService02/weighted/services/1/weight` | `42` |\n| `traefik/tls/certificates/0/certFile` | `foobar` |\n| `traefik/tls/certificates/0/keyFile` | `foobar` |\n| `traefik/tls/certificates/0/stores/0` | `foobar` |\n| `traefik/tls/certificates/0/stores/1` | `foobar` |\n| `traefik/tls/certificates/1/certFile` | `foobar` |\n| `traefik/tls/certificates/1/keyFile` | `foobar` |\n| `traefik/tls/certificates/1/stores/0` | `foobar` |\n| `traefik/tls/certificates/1/stores/1` | `foobar` |\n| `traefik/tls/options/Options0/alpnProtocols/0` | `foobar` |\n| `traefik/tls/options/Options0/alpnProtocols/1` | `foobar` |\n| `traefik/tls/options/Options0/cipherSuites/0` | `foobar` |\n| `traefik/tls/options/Options0/cipherSuites/1` | `foobar` |\n| `traefik/tls/options/Options0/clientAuth/caFiles/0` | `foobar` |\n| `traefik/tls/options/Options0/clientAuth/caFiles/1` | `foobar` |\n| `traefik/tls/options/Options0/clientAuth/clientAuthType` | `foobar` |\n| `traefik/tls/options/Options0/curvePreferences/0` | `foobar` |\n| `traefik/tls/options/Options0/curvePreferences/1` | `foobar` |\n| `traefik/tls/options/Options0/disableSessionTickets` | `true` |\n| `traefik/tls/options/Options0/maxVersion` | `foobar` |\n| `traefik/tls/options/Options0/minVersion` | `foobar` |\n| `traefik/tls/options/Options0/preferServerCipherSuites` | `true` |\n| `traefik/tls/options/Options0/sniStrict` | `true` |\n| `traefik/tls/options/Options1/alpnProtocols/0` | `foobar` |\n| `traefik/tls/options/Options1/alpnProtocols/1` | `foobar` |\n| `traefik/tls/options/Options1/cipherSuites/0` | `foobar` |\n| `traefik/tls/options/Options1/cipherSuites/1` | `foobar` |\n| `traefik/tls/options/Options1/clientAuth/caFiles/0` | `foobar` |\n| `traefik/tls/options/Options1/clientAuth/caFiles/1` | `foobar` |\n| `traefik/tls/options/Options1/clientAuth/clientAuthType` | `foobar` |\n| `traefik/tls/options/Options1/curvePreferences/0` | `foobar` |\n| `traefik/tls/options/Options1/curvePreferences/1` | `foobar` |\n| `traefik/tls/options/Options1/disableSessionTickets` | `true` |\n| `traefik/tls/options/Options1/maxVersion` | `foobar` |\n| `traefik/tls/options/Options1/minVersion` | `foobar` |\n| `traefik/tls/options/Options1/preferServerCipherSuites` | `true` |\n| `traefik/tls/options/Options1/sniStrict` | `true` |\n| `traefik/tls/stores/Store0/defaultCertificate/certFile` | `foobar` |\n| `traefik/tls/stores/Store0/defaultCertificate/keyFile` | `foobar` |\n| `traefik/tls/stores/Store0/defaultGeneratedCert/domain/main` | `foobar` |\n| `traefik/tls/stores/Store0/defaultGeneratedCert/domain/sans/0` | `foobar` |\n| `traefik/tls/stores/Store0/defaultGeneratedCert/domain/sans/1` | `foobar` |\n| `traefik/tls/stores/Store0/defaultGeneratedCert/resolver` | `foobar` |\n| `traefik/tls/stores/Store1/defaultCertificate/certFile` | `foobar` |\n| `traefik/tls/stores/Store1/defaultCertificate/keyFile` | `foobar` |\n| `traefik/tls/stores/Store1/defaultGeneratedCert/domain/main` | `foobar` |\n| `traefik/tls/stores/Store1/defaultGeneratedCert/domain/sans/0` | `foobar` |\n| `traefik/tls/stores/Store1/defaultGeneratedCert/domain/sans/1` | `foobar` |\n| `traefik/tls/stores/Store1/defaultGeneratedCert/resolver` | `foobar` |\n| `traefik/udp/routers/UDPRouter0/entryPoints/0` | `foobar` |\n| `traefik/udp/routers/UDPRouter0/entryPoints/1` | `foobar` |\n| `traefik/udp/routers/UDPRouter0/service` | `foobar` |\n| `traefik/udp/routers/UDPRouter1/entryPoints/0` | `foobar` |\n| `traefik/udp/routers/UDPRouter1/entryPoints/1` | `foobar` |\n| `traefik/udp/routers/UDPRouter1/service` | `foobar` |\n| `traefik/udp/services/UDPService01/loadBalancer/servers/0/address` | `foobar` |\n| `traefik/udp/services/UDPService01/loadBalancer/servers/1/address` | `foobar` |\n| `traefik/udp/services/UDPService02/weighted/services/0/name` | `foobar` |\n| `traefik/udp/services/UDPService02/weighted/services/0/weight` | `42` |\n| `traefik/udp/services/UDPService02/weighted/services/1/name` | `foobar` |\n| `traefik/udp/services/UDPService02/weighted/services/1/weight` | `42` |\n```\n\n----------------------------------------\n\nTITLE: Naming Sticky Cookie in Traefik\nDESCRIPTION: Sets a custom name for the sticky cookie used by the load balancer to maintain session persistence.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.name=foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring PassTLSClientCert with Full Certificate Info using JSON Tags\nDESCRIPTION: This JSON configuration uses Tags to define a middleware that passes all available certificate information in the X-Forwarded-Tls-Client-Cert-Info header, including subject details, issuer information, validity dates, and SANs.\n\nLANGUAGE: json\nCODE:\n```\n// Pass all the available info in the `X-Forwarded-Tls-Client-Cert-Info` header\n{\n  //...\n  \"Tags\" : [\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.notafter=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.notbefore=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.sans=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.subject.commonname=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.subject.country=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.subject.domaincomponent=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.subject.locality=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.subject.organization=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.subject.organizationalunit=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.subject.province=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.subject.serialnumber=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.issuer.commonname=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.issuer.country=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.issuer.domaincomponent=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.issuer.locality=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.issuer.organization=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.issuer.province=true\",\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.info.issuer.serialnumber=true\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Routing Rules for ECS Containers\nDESCRIPTION: Configuration examples for setting default routing rules for ECS containers when no specific rules are defined by labels. Uses Go templates to generate hostnames.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  ecs:\n    defaultRule: \"Host(`{{ .Name }}.{{ index .Labels \\\"customLabel\\\"}}`)\"\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.ecs]\n  defaultRule = \"Host(`{{ .Name }}.{{ index .Labels \\\"customLabel\\\"}}`)\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.ecs.defaultRule='Host(`{{ .Name }}.{{ index .Labels \"customLabel\"}}`)'\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Period in Consul Catalog\nDESCRIPTION: Example of configuring the period parameter in Consul Catalog to set a rate of 6 requests per minute. The period parameter defines the time unit for the rate limiting.\n\nLANGUAGE: yaml\nCODE:\n```\n# 6 reqs/minute\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.average=6\"\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.period=1m\"\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Interval in Traefik\nDESCRIPTION: Defines the time interval between consecutive health checks. This determines how frequently Traefik will check if backend servers are healthy.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/interval\n```\n\n----------------------------------------\n\nTITLE: Setting includedContentTypes in Consul Catalog\nDESCRIPTION: Configures the Compress middleware in Consul Catalog to only compress specific content types.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-compress.compress.includedcontenttypes=application/json,text/html,text/plain\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancer Server URL in Traefik\nDESCRIPTION: Sets the URL for a server in a load balancer configuration, specifying the server's IP address and port.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/servers/0/url\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP and HTTPS Endpoints\nDESCRIPTION: Shell commands demonstrating how to test HTTP redirection to HTTPS and the HTTPS endpoint response using curl. The HTTP request returns a 302 redirect while the HTTPS request shows headers from the whoami service.\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -I http://whoami.localhost\n\nHTTP/1.1 302 Found\nLocation: https://whoami.localhost/\nDate: Thu, 11 Jul 2024 15:11:31 GMT\nContent-Length: 5\n\n$ curl -k https://whoami.localhost\n \nHostname: whoami-697f8c6cbc-2krl7\nIP: 127.0.0.1\nIP: ::1\nIP: 10.42.1.5\nIP: fe80::60ed:22ff:fe10:3ced\nRemoteAddr: 10.42.2.4:44682\nGET / HTTP/1.1\nHost: whoami.localhost\nUser-Agent: curl/7.87.1-DEV\nAccept: */*\nAccept-Encoding: gzip\nX-Forwarded-For: 10.42.1.0\nX-Forwarded-Host: whoami.localhost\nX-Forwarded-Port: 443\nX-Forwarded-Proto: https\nX-Forwarded-Server: traefik-6b66d45748-ns8mt\nX-Real-Ip: 10.42.1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Sticky Cookie Name in Traefik with YAML Labels\nDESCRIPTION: Sets a custom name for the sticky session cookie.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.name=foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring Sticky Cookie Name in Traefik with YAML Labels\nDESCRIPTION: Sets a custom name for the sticky session cookie.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.name=foobar\n```\n\n----------------------------------------\n\nTITLE: Setting HeaderField Option in DigestAuth with Kubernetes\nDESCRIPTION: Shows how to customize the header field for authenticated users in DigestAuth middleware with Kubernetes.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: my-auth\nspec:\n  digestAuth:\n    # ...\n    headerField: X-WebAuth-User\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Certificate Verification\nDESCRIPTION: If set to true, the TLS connection to Consul will accept any certificate presented by the server regardless of hostname validation.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    endpoint:\n      tls:\n        insecureSkipVerify: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog.endpoint.tls]\n  insecureSkipVerify = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.endpoint.tls.insecureskipverify=true\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for a Router in Traefik with ECS\nDESCRIPTION: Enables TLS (HTTPS) for a router, allowing secure connections.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.tls=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Circuit Breaker with Latency Check using Labels\nDESCRIPTION: Example of configuring a circuit breaker middleware in Traefik using Docker labels. This configuration creates a latency check that opens the circuit when the median latency exceeds 100ms.\n\nLANGUAGE: yaml\nCODE:\n```\n# Latency Check\nlabels:\n  - \"traefik.http.middlewares.latency-check.circuitbreaker.expression=LatencyAtQuantileMS(50.0) > 100\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Termination for TCP Router in YAML Format\nDESCRIPTION: Example showing how to configure a TCP router for TLS termination (default behavior) using the File Provider in YAML format.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  routers:\n    Router-1:\n      rule: \"HostSNI(`foo-domain`)\"\n      service: service-id\n      # will terminate the TLS request by default\n      tls: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring PassTLSClientCert Middleware with PEM using Labels\nDESCRIPTION: This configuration uses Docker labels to define a middleware that passes the PEM-encoded client certificate in the X-Forwarded-Tls-Client-Cert header.\n\nLANGUAGE: yaml\nCODE:\n```\n# Pass the pem in the `X-Forwarded-Tls-Client-Cert` header.\nlabels:\n  - \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.pem=true\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Log Compression in TOML\nDESCRIPTION: Enables gzip compression for rotated log files using TOML configuration. By default, log files are not compressed after rotation.\n\nLANGUAGE: toml\nCODE:\n```\n[log]\n  compress = true\n```\n\n----------------------------------------\n\nTITLE: Complete Tailscale Certificate Resolution Configuration via CLI\nDESCRIPTION: Full example of command line parameters for enabling Tailscale certificate resolution. Sets up HTTP and HTTPS entrypoints along with the certificate resolver.\n\nLANGUAGE: bash\nCODE:\n```\n--entrypoints.web.address=:80\n--entrypoints.websecure.address=:443\n# ...\n--certificatesresolvers.myresolver.tailscale=true\n```\n\n----------------------------------------\n\nTITLE: Marking Nomad Canary Deployments in Traefik\nDESCRIPTION: Identifies a service instance as a canary deployment in Nomad, allowing Traefik to handle canary deployments differently from production deployments.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.consulcatalog.canary=true\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Middleware with YAML Configuration File\nDESCRIPTION: Demonstrates how to configure IP allowlist middleware using a YAML configuration file. It defines a router, middleware, and service with load balancing configuration in a clear hierarchical structure.\n\nLANGUAGE: yaml\nCODE:\n```\n# As YAML Configuration File\ntcp:\n  routers:\n    router1:\n      service: myService\n      middlewares:\n        - \"foo-ip-allowlist\"\n      rule: \"Host(`example.com`)\"\n\n  middlewares:\n    foo-ip-allowlist:\n      ipAllowList:\n        sourceRange:\n          - \"127.0.0.1/32\"\n          - \"192.168.1.7\"\n\n  services:\n    service1:\n      loadBalancer:\n        servers:\n        - address: \"10.0.0.10:4000\"\n        - address: \"10.0.0.11:4000\"\n```\n\n----------------------------------------\n\nTITLE: Setting minResponseBodyBytes in TOML File\nDESCRIPTION: Configures the Compress middleware using TOML to set a minimum response size required for compression.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-compress.compress]\n    minResponseBodyBytes = 1200\n```\n\n----------------------------------------\n\nTITLE: Setting Secure Flag for Sticky Cookie in Traefik\nDESCRIPTION: Configures whether the sticky session cookie should be marked as Secure, requiring HTTPS.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/sticky/cookie/secure\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple EntryPoints with Port Reuse in YAML\nDESCRIPTION: Configuration for multiple Traefik EntryPoints with reusePort enabled. This example shows configuration for both a public web EntryPoint on port 80 and a private EntryPoint bound to a specific IP address.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: \":80\"\n    reusePort: true\n  privateWeb:\n    address: \"192.168.1.2:80\"\n    reusePort: true\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Provider Poll Timeout in YAML\nDESCRIPTION: Sets the polling timeout for the HTTP provider in YAML format. This optional parameter defines the maximum time to wait when connecting to the endpoint, defaulting to 5 seconds.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  http:\n    pollTimeout: \"5s\"\n```\n\n----------------------------------------\n\nTITLE: Domain Definition Using tls.domains in TOML File\nDESCRIPTION: Static TOML file configuration that explicitly defines the domain using tls.domains. Specifies a Tailscale domain and references the certificate resolver.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.blog]\n    rule = \"Path(`/metrics`)\"\n    [http.routers.blog.tls]\n      certResolver = \"myresolver\"\n      [[http.routers.blog.tls.domains]]\n        main = \"monitoring.yak-bebop.ts.net\"\n```\n\n----------------------------------------\n\nTITLE: Configuring StripPrefix Middleware in Docker & Swarm\nDESCRIPTION: Configuration example for setting up StripPrefix middleware in Docker or Docker Swarm to strip /foobar and /fiibar prefixes from URLs using Docker labels.\n\nLANGUAGE: yaml\nCODE:\n```\n# Strip prefix /foobar and /fiibar\nlabels:\n  - \"traefik.http.middlewares.test-stripprefix.stripprefix.prefixes=/foobar,/fiibar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SameSite for Sticky Cookie in Traefik\nDESCRIPTION: Sets the SameSite attribute for the sticky session cookie. This controls whether and how the cookie is sent with cross-site requests.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/sticky/cookie/samesite\n```\n\n----------------------------------------\n\nTITLE: Setting minResponseBodyBytes in Docker & Swarm\nDESCRIPTION: Configures the Compress middleware in Docker/Swarm to set a minimum response size (1200 bytes) required for compression to be applied.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-compress.compress.minresponsebodybytes=1200\"\n```\n\n----------------------------------------\n\nTITLE: Setting Sticky Cookie Path in Traefik\nDESCRIPTION: Defines the URL path for which the sticky session cookie is valid.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.path=/foobar\n```\n\n----------------------------------------\n\nTITLE: Enabling Empty Services in Kubernetes Ingress Provider for Traefik\nDESCRIPTION: When set to true, allows creation of an empty servers load balancer if the targeted Kubernetes service has no endpoints. This results in 503 HTTP responses instead of 404 ones. Default is false.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    allowEmptyServices: true\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress]\n  allowEmptyServices = true\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.allowEmptyServices=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Grace Timeout for Active Requests in Traefik\nDESCRIPTION: Configuration to set a duration for active requests to finish before Traefik stops. During this period, no new requests are accepted.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  name:\n    address: \":8888\"\n    transport:\n      lifeCycle:\n        graceTimeOut: 42\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.name]\n    address = \":8888\"\n    [entryPoints.name.transport]\n      [entryPoints.name.transport.lifeCycle]\n        graceTimeOut = 42\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.name.address=:8888\n--entryPoints.name.transport.lifeCycle.graceTimeOut=42\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Datacenter\nDESCRIPTION: Specifies which Consul datacenter to use. If not provided, Consul uses the default agent datacenter.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    endpoint:\n      datacenter: test\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog]\n  [providers.consulCatalog.endpoint]\n    datacenter = \"test\"\n    # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.endpoint.datacenter=test\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Endpoint in Traefik with TOML\nDESCRIPTION: TOML configuration for specifying the Kubernetes server endpoint URL in Traefik. The endpoint overrides environment variables and can be used with kubectl proxy for external-cluster client connections.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress]\n  endpoint = \"http://localhost:8080\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Provider Poll Timeout via CLI\nDESCRIPTION: Command line argument to set the polling timeout for the HTTP provider. Defines the maximum time to wait when connecting to the endpoint.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.http.pollTimeout=5s\n```\n\n----------------------------------------\n\nTITLE: Service Metrics in StatsD Format\nDESCRIPTION: Lists the metric names for service monitoring in StatsD format. These metrics track request counts, TLS usage, request duration, retries, server status, and data transfer sizes. Uses a configurable prefix defaulting to \"traefik\".\n\nLANGUAGE: statsd\nCODE:\n```\n# Default prefix: \"traefik\"\n{prefix}.service.request.total\n{prefix}.service.request.tls.total\n{prefix}.service.request.duration\n{prefix}.service.retries.total\n{prefix}.service.server.up\n{prefix}.service.requests.bytes.total\n{prefix}.service.responses.bytes.total\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via TCP in YAML\nDESCRIPTION: Configuration for connecting Traefik to a remote Docker daemon using TCP in YAML format. This allows Traefik to communicate with a Docker daemon on a different host using TCP protocol.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    endpoint: \"tcp://127.0.0.1:2375\"\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring HeaderField with TOML File\nDESCRIPTION: Shows how to define a header field to store the authenticated user in a TOML configuration file.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares.my-auth.basicAuth]\n  # ...\n  headerField = \"X-WebAuth-User\"\n```\n\n----------------------------------------\n\nTITLE: Setting HttpOnly Flag for Sticky Cookies in Traefik\nDESCRIPTION: Controls whether the sticky session cookie should be accessible only through HTTP requests, making it inaccessible to JavaScript for security purposes.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.sticky.cookie.httponly=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik HTTP Service with JSON Tags\nDESCRIPTION: Example of configuring a Traefik HTTP service using JSON Tags. This approach shows how to configure load balancer settings including servers, sticky sessions, and health checks in JSON format.\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"Tags\": [\n    \"traefik.http.services.my-service.loadBalancer.servers[0].url=http://private-ip-server-1/\",\n    \"traefik.http.services.my-service.loadBalancer.servers[0].weight=2\",\n    \"traefik.http.services.my-service.loadBalancer.servers[0].preservePath=true\",\n    \"traefik.http.services.my-service.loadBalancer.sticky.cookie.name=sticky-cookie\",\n    \"traefik.http.services.my-service.loadBalancer.healthcheck.path=/health\",\n    \"traefik.http.services.my-service.loadBalancer.healthcheck.interval=10s\",\n    \"traefik.http.services.my-service.loadBalancer.healthcheck.timeout=3s\",\n    \"traefik.http.services.my-service.loadBalancer.passHostHeader=true\",\n    \"traefik.http.services.my-service.loadBalancer.serversTransport=customTransport@file\",\n    \"traefik.http.services.my-service.loadBalancer.responseForwarding.flushInterval=150ms\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress PublishedService in Traefik with CLI\nDESCRIPTION: Command-line configuration for the publishedService option to copy status from a Kubernetes service to ingress resources. This can be used when starting Traefik from the command line.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.ingressendpoint.publishedservice=namespace/foo-service\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Provider Endpoint via CLI\nDESCRIPTION: Command line argument to set the HTTP endpoint that Traefik will poll for dynamic configuration. Specifies the URL to fetch configuration from.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.http.endpoint=http://127.0.0.1:9000/api\n```\n\n----------------------------------------\n\nTITLE: Setting Servers Transport for TCP Service in Traefik\nDESCRIPTION: References a ServersTransport resource for a TCP service, which configures how Traefik connects to the backend servers.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.mytcpservice.loadbalancer.serverstransport=foobar@file\n```\n\n----------------------------------------\n\nTITLE: Configuring StripPrefix Middleware in Kubernetes\nDESCRIPTION: Kubernetes manifest example for defining a Traefik Middleware resource to strip /foobar and /fiibar prefixes from URL paths.\n\nLANGUAGE: yaml\nCODE:\n```\n# Strip prefix /foobar and /fiibar\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-stripprefix\nspec:\n  stripPrefix:\n    prefixes:\n      - /foobar\n      - /fiibar\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpOnly for Sticky Cookie in Traefik\nDESCRIPTION: Controls whether the sticky cookie has the HttpOnly flag. When enabled, the cookie cannot be accessed through client-side scripts.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/sticky/cookie/httponly\n```\n\n----------------------------------------\n\nTITLE: Setting encodings in TOML File\nDESCRIPTION: Configures the Compress middleware using TOML to support specific compression algorithms in priority order.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-compress.compress]\n    encodings = [\"zstd\",\"br\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Domain SANs with Consul Catalog Tags in Traefik\nDESCRIPTION: Specifies the Subject Alternative Names (SANs) for TLS certificate generation.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.tls.domains[0].sans=test.example.org,dev.example.org\n```\n\n----------------------------------------\n\nTITLE: Enabling Secure Flag for Sticky Cookie in Traefik\nDESCRIPTION: Sets the secure flag on the sticky cookie, ensuring it's only sent over HTTPS connections for enhanced security.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.secure=true\n```\n\n----------------------------------------\n\nTITLE: Setting UsersFile Option in DigestAuth with Consul Catalog\nDESCRIPTION: Shows how to define a path to an external file containing authorized users for DigestAuth middleware in Consul Catalog.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.digestauth.usersfile=/path/to/my/usersfile\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Endpoint in Traefik with CLI\nDESCRIPTION: Command-line configuration for specifying the Kubernetes server endpoint URL in Traefik. This can be used when starting Traefik from the command line.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.endpoint=http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Headers using Traefik Labels\nDESCRIPTION: This configuration uses Docker labels to set up Cross-Origin Resource Sharing (CORS) headers in Traefik to control which origins, methods, and headers are allowed when browsers make cross-origin requests.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.testheader.headers.accesscontrolallowmethods=GET,OPTIONS,PUT\"\n  - \"traefik.http.middlewares.testheader.headers.accesscontrolallowheaders=*\"\n  - \"traefik.http.middlewares.testheader.headers.accesscontrolalloworiginlist=https://foo.bar.org,https://example.org\"\n  - \"traefik.http.middlewares.testheader.headers.accesscontrolmaxage=100\"\n  - \"traefik.http.middlewares.testheader.headers.addvaryheader=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLSRoute in Kubernetes Gateway API\nDESCRIPTION: Example of a TLSRoute configuration that routes TLS connections with the SNI 'whoami.localhost' to a whoami backend service on port 3000.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1alpha2\nkind: TLSRoute\nmetadata:\n  name: whoami-tls\n  namespace: default\nspec:\n  parentRefs:\n    - name: traefik\n      sectionName: tls\n      kind: Gateway\n\n  hostnames:\n    - whoami.localhost\n\n  rules:\n    - backendRefs:\n        - name: whoamitcp\n          namespace: default\n          port: 3000\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Throttle Duration for Nomad Service Events\nDESCRIPTION: Shows how to set throttle duration to limit how often Traefik processes service events from Nomad. Only works with watch mode enabled.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad:\n    throttleDuration: 2s\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad]\n  throttleDuration = \"2s\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad.throttleDuration=2s\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Sampling Rate\nDESCRIPTION: Configuration to set the proportion of requests to trace, specified as a value between 0.0 and 1.0. The default is 1.0 (trace all requests).\n\nLANGUAGE: yaml\nCODE:\n```\ntracing:\n  sampleRate: 0.2\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tracing]\n  sampleRate = 0.2\n```\n\nLANGUAGE: bash\nCODE:\n```\n--tracing.sampleRate=0.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Routing Rule in YAML\nDESCRIPTION: Configuration to define the default routing rule applied to containers with no specific rule defined. Uses Go templates with sprig functions and access to container name and labels.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    defaultRule: \"Host(`{{ .Name }}.{{ index .Labels \\\"customLabel\\\"}}`)\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Log Compression in YAML\nDESCRIPTION: Enables gzip compression for rotated log files using YAML configuration. By default, log files are not compressed after rotation.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  compress: true\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum TLS Version in TOML\nDESCRIPTION: Example of configuring maximum TLS version in TOML format. Note that limiting to TLS 1.2 or below is discouraged as it reduces security.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[tls.options]\n\n  [tls.options.default]\n    maxVersion = \"VersionTLS13\"\n\n  [tls.options.maxtls12]\n    maxVersion = \"VersionTLS12\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis TLS CA Certificate in Traefik Rate Limit Middleware\nDESCRIPTION: Configuration examples for setting the certificate authority for secure Redis connections across different Traefik deployment environments. This parameter is optional and defaults to the system bundle.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n    - \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.tls.ca=path/to/ca.crt\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-ratelimit\nspec:\n  rateLimit:\n    # ...\n    redis:\n      tls:\n        caSecret: mycasercret\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycasercret\n  namespace: default\n\ndata:\n  # Must contain a certificate under either a `tls.ca` or a `ca.crt` key. \n  tls.ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.tls.ca=path/to/ca.crt\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    rateLimit:\n      # ... \n      redis:\n        tls:\n          ca: path/to/ca.crt\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.redis.tls]\n  ca = \"path/to/ca.crt\"\n```\n\n----------------------------------------\n\nTITLE: Domain Definition Using tls.domains in YAML File\nDESCRIPTION: Static YAML file configuration that explicitly defines the domain using tls.domains. Specifies a Tailscale domain and references the certificate resolver.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    blog:\n      rule: \"Path(`/metrics`)\"\n      tls:\n        certResolver: myresolver\n        domains:\n          - main: \"monitoring.yak-bebop.ts.net\"\n```\n\n----------------------------------------\n\nTITLE: Service Configuration with Docker Swarm Labels\nDESCRIPTION: This snippet demonstrates how to configure a Docker Swarm service with Traefik labels in a Docker Compose file to set up routing rules and load balancer port.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  my-container:\n    deploy:\n      labels:\n        - traefik.http.routers.my-container.rule=Host(`example.com`)\n        - traefik.http.services.my-container-service.loadbalancer.server.port=8080\n```\n\n----------------------------------------\n\nTITLE: Enabling Watch Mode for Nomad Provider\nDESCRIPTION: Shows how to enable watch mode to refresh the configuration on a per-event basis rather than using polling intervals.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad:\n    watch: true\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad]\n  watch = true\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad.watch\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffering Middleware in TOML\nDESCRIPTION: Sets the maximum request body size to 2MB using TOML structured configuration format for Traefik buffering middleware.\n\nLANGUAGE: toml\nCODE:\n```\n# Sets the maximum request body to 2MB\n[http.middlewares]\n  [http.middlewares.limit.buffering]\n    maxRequestBodyBytes = 2000000\n```\n\n----------------------------------------\n\nTITLE: Configuring forceSlash Option in TOML File\nDESCRIPTION: Example of configuring the StripPrefix middleware with the forceSlash option set to false in a TOML configuration file.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.example.stripPrefix]\n    prefixes = [\"/foobar\"]\n    forceSlash = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Header Name for InFlightReq in TOML File\nDESCRIPTION: This snippet shows how to configure a request header name for InFlightReq middleware in a TOML configuration file to group requests based on a specific header value.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-inflightreq.inflightreq]\n    [http.middlewares.test-inflightreq.inFlightReq.sourceCriterion]\n      requestHeaderName = \"username\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Period in Docker & Swarm\nDESCRIPTION: Example of configuring the period parameter in Docker labels to set a rate of 6 requests per minute. The period parameter defines the time unit for the rate limiting.\n\nLANGUAGE: yaml\nCODE:\n```\n# 6 reqs/minute\nlabels:\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.average=6\"\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.period=1m\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Mode for the Dashboard\nDESCRIPTION: Configuration to enable insecure mode for the Traefik dashboard. This mode allows direct access to the dashboard without security features and should only be used for testing purposes.\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  insecure: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[api]\n  insecure = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--api.insecure=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Provider in Traefik Configuration Files\nDESCRIPTION: Shows various ways to enable the Docker provider in Traefik using YAML, TOML, or CLI configuration. This is the basic setup needed to make Traefik work with Docker containers.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Provider in Traefik Configuration Files\nDESCRIPTION: Shows various ways to enable the Docker provider in Traefik using YAML, TOML, or CLI configuration. This is the basic setup needed to make Traefik work with Docker containers.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker=true\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry HTTP TLS Client Certificates in YAML\nDESCRIPTION: Sets up client certificate authentication for OpenTelemetry HTTP connections using YAML. Requires both certificate and key files to be specified.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  otlp:\n    http:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n```\n\n----------------------------------------\n\nTITLE: Setting Users Option in DigestAuth with YAML File\nDESCRIPTION: Shows how to define authorized users for DigestAuth middleware using the users option in a YAML configuration file.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      digestAuth:\n        users:\n          - \"test:traefik:a2688e031edb4be6a3797f3882655c05\"\n          - \"test2:traefik:518845800f9e2bfb1f1f740ec24f074e\"\n```\n\n----------------------------------------\n\nTITLE: UseBindPortIP Configuration via CLI\nDESCRIPTION: This snippet demonstrates how to configure Traefik to use the IP/Port attached to the container's binding instead of its inner network IP/Port using command line arguments.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm.useBindPortIP=true\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for TCP Routers using JSON Tags\nDESCRIPTION: This JSON example demonstrates how to configure a TLS-enabled TCP router in Traefik using tags. It includes the same configuration options as the other examples but in JSON format.\n\nLANGUAGE: json\nCODE:\n```\n{\n  //...\n  \"Tags\": [\n    \"traefik.tcp.routers.my-tls-router.tls=true\"\n    \"traefik.tcp.routers.my-tls-router.rule=HostSNI(`example.com`)\",\n    \"traefik.tcp.routers.my-tls-router.service=my-tcp-service\",\n    \"traefik.tcp.routers.my-tls-router.tls.passthrough=true\",\n    \"traefik.tcp.routers.my-tls-router.tls.options=my-tls-options\",\n    \"traefik.tcp.routers.my-tls-router.tls.certResolver=myresolver\",\n    \"traefik.tcp.routers.my-tls-router.tls.domains[0].main=example.com\",\n    \"traefik.tcp.routers.my-tls-router.tls.domains[0].sans=www.example.com,api.example.com\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Username for Consul Authentication in Traefik\nDESCRIPTION: Defines a username to connect to Consul with for authentication purposes.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consul:\n    # ...\n    username: \"foo\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consul]\n  # ...\n  username = \"foo\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consul.username=foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Endpoint in YAML\nDESCRIPTION: YAML configuration for specifying the Kubernetes server endpoint URL used by Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    endpoint: \"http://localhost:8080\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Using Method Matcher in Traefik HTTP Router Rules\nDESCRIPTION: Example of using the Method matcher to route requests based on their HTTP method/verb. Shows how to match requests with specific HTTP methods.\n\nLANGUAGE: go\nCODE:\n```\nMethod(`OPTIONS`)\n```\n\n----------------------------------------\n\nTITLE: Attaching Tags to Services in Consul Catalog\nDESCRIPTION: Example of how to attach a Traefik-specific tag to services in Consul Catalog to define routing rules.\n\nLANGUAGE: yaml\nCODE:\n```\n- traefik.http.routers.my-router.rule=Host(`example.com`)\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for TCP Service Backend Connection in Traefik\nDESCRIPTION: Determines whether Traefik should use TLS when connecting to the backend service, ensuring secure communication between Traefik and the backend.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.mytcpservice.loadbalancer.server.tls=true\n```\n\n----------------------------------------\n\nTITLE: Declaring Middleware in TOML File Provider\nDESCRIPTION: Example of declaring a middleware called 'add-foo-prefix' in the file provider using TOML format. The middleware adds '/foo' prefix to incoming requests.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.add-foo-prefix.addPrefix]\n    prefix = \"/foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Network in YAML\nDESCRIPTION: Setting a default Docker network for connections to all containers in YAML format. This can be overridden on a per-container basis with the traefik.docker.network label.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    network: test\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed TLS Certificates with Go for Local Development\nDESCRIPTION: This command uses Go's built-in certificate generation tool to create self-signed TLS certificates for localhost development. The command generates certificates valid for 127.0.0.1, ::1, and localhost with a 1024-bit RSA key and extremely long validity period starting from 1970.\n\nLANGUAGE: bash\nCODE:\n```\ngo run $GOROOT/src/crypto/tls/generate_cert.go  --rsa-bits 1024 --host 127.0.0.1,::1,localhost --ca --start-date \"Jan 1 00:00:00 1970\" --duration=1000000h\nmv cert.pem local.cert\nmv key.pem local.key\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Entry Points Using CLI\nDESCRIPTION: Static configuration for defining entry points with TLS support using CLI flags. This is used to expose an Ingress on ports 80 and 443.\n\nLANGUAGE: bash\nCODE:\n```\n# Static configuration\n\n--entryPoints.web.address=:80\n--entryPoints.websecure.address=:443\n--entryPoints.websecure.http.tls=true\n--providers.kubernetesIngress=true\n```\n\n----------------------------------------\n\nTITLE: Configuring sourceCriterion.requestHost in Consul Catalog\nDESCRIPTION: Sets the sourceCriterion.requestHost option to true for the inFlightReq middleware in Consul Catalog using labels.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-inflightreq.inflightreq.sourcecriterion.requesthost=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Strategy Depth in Docker & Swarm\nDESCRIPTION: Example of configuring the IP strategy depth parameter in Docker labels to determine which IP to use from X-Forwarded-For header for rate limiting.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.sourcecriterion.ipstrategy.depth=2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log Backups in YAML\nDESCRIPTION: Configures the maximum number of old log files to retain using YAML format. This example limits the number of retained log files to 3.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  maxBackups: 3\n```\n\n----------------------------------------\n\nTITLE: Starting the Whoami Service with Docker Compose\nDESCRIPTION: Command to start the 'whoami' service in detached mode using Docker Compose.\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d whoami\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Forwarding Flush Interval in Traefik\nDESCRIPTION: Sets the interval for flushing forwarded responses to the client in milliseconds.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/responseforwarding/flushinterval\n```\n\n----------------------------------------\n\nTITLE: Configuring DigestAuth Middleware in Docker & Swarm\nDESCRIPTION: Example of how to declare a user list for DigestAuth middleware using Docker & Swarm labels.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\nlabels:\n  - \"traefik.http.middlewares.test-auth.digestauth.users=test:traefik:a2688e031edb4be6a3797f3882655c05,test2:traefik:518845800f9e2bfb1f1f740ec24f074e\"\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS ECS Provider in Traefik\nDESCRIPTION: Basic configuration examples showing how to enable the ECS provider in Traefik using different configuration formats.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  ecs: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.ecs]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.ecs=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik HTTP Service Load Balancer in YAML\nDESCRIPTION: Example of configuring a Traefik HTTP service with load balancer settings in YAML format. Includes server configuration, sticky sessions, health checks, and response forwarding options.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - url: \"http://private-ip-server-1/\"\n            weight: 2\n            preservePath: true\n        sticky:\n          cookie:\n            name: \"sticky-cookie\"\n        healthcheck:\n          path: \"/health\"\n          interval: \"10s\"\n          timeout: \"3s\"\n        passHostHeader: true\n        serversTransport: \"customTransport@file\"\n        responseForwarding:\n          flushInterval: \"150ms\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis TLS Certificate in Traefik Rate Limit Middleware\nDESCRIPTION: Configuration examples for setting the client certificate for secure Redis connections across different Traefik deployment environments. When this option is set, the key option is required.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.tls.cert=path/to/foo.cert\"\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.tls.key=path/to/foo.key\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n   name: test-ratelimit\nspec:\n   rateLimit:\n      # ...\n      redis:\n         tls:\n           certSecret: mytlscert\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n   name: mytlscert\n   namespace: default\n\ndata:\n   tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n   tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.tls.cert=path/to/foo.cert\"\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.tls.key=path/to/foo.key\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        redis:\n          tls:\n            cert: path/to/foo.cert\n            key: path/to/foo.key\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    [http.middlewares.test-ratelimit.rateLimit.redis]\n      [http.middlewares.test-ratelimit.rateLimit.redis.tls]\n        cert = \"path/to/foo.cert\"\n        key = \"path/to/foo.key\"\n```\n\n----------------------------------------\n\nTITLE: Setting Token for Consul Authentication in Traefik\nDESCRIPTION: Defines a token to connect to Consul with for authentication purposes.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consul:\n    # ...\n    token: \"bar\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consul]\n  # ...\n  token = \"bar\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consul.token=bar\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Connection to Docker in TOML\nDESCRIPTION: Configuration for connecting Traefik to a remote Docker daemon via SSH using TOML format. Requires Docker 18.09+ and proper SSH key authentication setup.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  endpoint = \"ssh://traefik@192.168.2.5:2022\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Kubernetes Load-Balancing by Default in Traefik\nDESCRIPTION: Sets whether to use Native Kubernetes load-balancing mode by default. This setting complements the traefik.ingress.kubernetes.io/service.nativelb service annotation. Default is false.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    nativeLBByDefault: true\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress]\n  nativeLBByDefault = true\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.nativeLBByDefault=true\n```\n\n----------------------------------------\n\nTITLE: Setting Users Option in DigestAuth with Kubernetes Secret\nDESCRIPTION: Shows how to define authorized users for DigestAuth middleware using a Kubernetes Secret for credential storage.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  digestAuth:\n    secret: authsecret\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: authsecret\n  namespace: default\n\ndata:\n  users: |2\n    dGVzdDp0cmFlZmlrOmEyNjg4ZTAzMWVkYjRiZTZhMzc5N2YzODgyNjU1YzA1CnRlc3QyOnRyYWVmaWs6NTE4ODQ1ODAwZjllMmJmYjFmMWY3NDBlYzI0ZjA3NGUKCg==\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Forwarding Flush Interval in Traefik with YAML Labels\nDESCRIPTION: Sets the interval for flushing response data when forwarding responses from backends to clients.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.responseforwarding.flushinterval=10\n```\n\n----------------------------------------\n\nTITLE: Setting Tag Prefix for Consul Catalog\nDESCRIPTION: Defines the prefix for Consul Catalog tags that Traefik will recognize as configuration labels. Default is \"traefik\".\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    prefix: test\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog]\n  prefix = \"test\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.prefix=test\n# ...\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via HTTP in TOML\nDESCRIPTION: Configuration for connecting Traefik to a remote Docker daemon using HTTP API in TOML format. This allows Traefik to communicate with a Docker daemon on a different host.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  swarm = \"http://127.0.0.1:2375\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Provider in Traefik using TOML\nDESCRIPTION: A simple TOML configuration example showing how to enable the Redis provider in Traefik with default options.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.redis]\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Client Timeout in YAML\nDESCRIPTION: Configuration to define the client timeout in seconds for HTTP connections to Docker API. A value of 0 means no timeout is set.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    httpClientTimeout: 300\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Attributes to Traces\nDESCRIPTION: Configuration to define additional resource attributes sent to the collector. These attributes provide extra context for the traces.\n\nLANGUAGE: yaml\nCODE:\n```\ntracing:\n  resourceAttributes:\n    attr1: foo\n    attr2: bar\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tracing]\n  [tracing.resourceAttributes]\n    attr1 = \"foo\"\n    attr2 = \"bar\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--tracing.resourceAttributes.attr1=foo\n--tracing.resourceAttributes.attr2=bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry Points for TLS-specific Ingress in TOML\nDESCRIPTION: Static configuration for defining entry points when using TLS only on specific Ingress resources in TOML format.\n\nLANGUAGE: toml\nCODE:\n```\n# Static configuration\n\n[entryPoints.web]\n  address = \":80\"\n\n[entryPoints.websecure]\n  address = \":443\"\n\n[providers.kubernetesIngress]\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Header Name for InFlightReq in Kubernetes\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes Middleware resource to configure a request header name for InFlightReq to group requests based on a header value.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-inflightreq\nspec:\n  inFlightReq:\n\tsourceCriterion:\n      requestHeaderName: username\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry HTTP Endpoint in YAML\nDESCRIPTION: Configures the URL endpoint for the OpenTelemetry Collector when using HTTP protocol with YAML configuration. The default is https://localhost:4318/v1/logs.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  otlp:\n    http:\n      endpoint: https://collector:4318/v1/logs\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation Size in TOML\nDESCRIPTION: Sets the maximum size of log files before rotation occurs using TOML configuration. This example sets the maximum size to 1 megabyte (default is 100MB).\n\nLANGUAGE: toml\nCODE:\n```\n[log]\n  maxSize = 1\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS Passthrough for TCP Router in Traefik\nDESCRIPTION: Enables TLS passthrough mode, where Traefik forwards the TLS connections to the backend without decrypting them.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.passthrough=true\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP ServersTransport in TOML\nDESCRIPTION: TOML configuration example for setting up a TCP ServersTransport in Traefik with TLS settings, dial timeouts, and SPIFFE configuration.\n\nLANGUAGE: toml\nCODE:\n```\n[tcp.serversTransports.mytransport]\n  dialTimeout = \"30s\"\n  dialKeepAlive = \"20s\"\n  terminationDelay = \"200ms\"\n\n  [tcp.serversTransports.mytransport.tls]\n    serverName = \"example.com\"\n    certificates = [\"/path/to/cert1.pem\", \"/path/to/cert2.pem\"]\n    insecureSkipVerify = true\n    rootcas = [\"/path/to/rootca.pem\"]\n    peerCertURI = \"spiffe://example.org/peer\"\n\n  [tcp.serversTransports.mytransport.spiffe]\n    ids = [\"spiffe://example.org/id1\", \"spiffe://example.org/id2\"]\n    trustDomain = \"example.org\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PassHostHeader in Traefik\nDESCRIPTION: Controls whether Traefik forwards the client's Host header to the backend service. When enabled, the backend service receives the original Host header value.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.passhostheader=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Period in Kubernetes\nDESCRIPTION: Example of configuring the period parameter in Kubernetes to set a rate of 6 requests per minute. The period parameter defines the time unit for the rate limiting.\n\nLANGUAGE: yaml\nCODE:\n```\n# 6 reqs/minute\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-ratelimit\nspec:\n  rateLimit:\n    period: 1m\n    average: 6\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware Factory Function for Traefik\nDESCRIPTION: Example of a factory function that creates and configures a middleware instance in Traefik. The factory accepts a configuration object and returns a middleware constructor function.\n\nLANGUAGE: go\nCODE:\n```\n// CreateConfig creates the default plugin configuration.\nfunc CreateConfig() *Config {\n  return &Config{\n    // Set default values\n  }\n}\n\n// New creates a new plugin.\nfunc New(ctx context.Context, next http.Handler, config *Config, name string) (http.Handler, error) {\n  // Create a middleware instance\n  return &MyMiddleware{\n    next: next,\n    // Initialize with config\n  }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Minimum Idle Connections in Traefik Rate Limit Middleware\nDESCRIPTION: Configuration examples for setting the minimum number of idle connections in the Redis connection pool. This is useful when establishing new connections is slow. Zero means that idle connections are not closed.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n    - \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.minIdleConns=42\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-ratelimit\nspec:\n  rateLimit:\n    # ...\n    redis:\n      minIdleConns: 42\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.minIdleConns=42\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        # ...\n        redis:\n          minIdleConns: 42\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    [http.middlewares.test-ratelimit.rateLimit.redis]\n      minIdleConns = 42\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication Username in YAML\nDESCRIPTION: Setting the username for Basic HTTP authentication when connecting to a Docker daemon through an HTTP proxy using YAML. This provides security when accessing the Docker API.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    username: foo\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Retry Middleware in YAML\nDESCRIPTION: Example of how to configure the Traefik HTTP Retry middleware using YAML structured format. This configuration sets up 4 retry attempts with an initial interval of 100ms for exponential backoff.\n\nLANGUAGE: yaml\nCODE:\n```\n# Retry 4 times with exponential backoff\nhttp:\n  middlewares:\n    test-retry:\n      retry:\n        attempts: 4\n        initialInterval: 100ms\n```\n\n----------------------------------------\n\nTITLE: Attaching ServersTransport to a TCP Service in TOML\nDESCRIPTION: TOML example showing how to attach a configured ServersTransport to a TCP service in Traefik's dynamic configuration.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.services]\n  [tcp.services.Service01]\n    [tcp.services.Service01.loadBalancer]\n      serversTransport = \"mytransport\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Consistent Reads in Consul Catalog\nDESCRIPTION: Forces fully consistent reads at the expense of an extra round-trip to Consul. Prevents stale reads.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    requireConsistent: true\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog]\n  requireConsistent = true\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.requireConsistent=true\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Options for TCP Router in Traefik\nDESCRIPTION: References a TLS options configuration to apply to the TCP router's TLS configuration, allowing customization of TLS parameters.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.options=mysoptions\n```\n\n----------------------------------------\n\nTITLE: Configuring Published Service for Kubernetes Ingress in Traefik\nDESCRIPTION: Specifies a Kubernetes service to copy status from in the format 'namespace/servicename'. The behavior varies based on service type (ClusterIP, NodePort, LoadBalancer), enabling integration with tools like External-DNS by propagating service IPs to ingress resources.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    ingressEndpoint:\n      publishedService: \"namespace/foo-service\"\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress.ingressEndpoint]\n  publishedService = \"namespace/foo-service\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.ingressendpoint.publishedservice=namespace/foo-service\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Internal Resources via CLI\nDESCRIPTION: Command-line interface parameter for enabling metrics for internal resources in Traefik. This flag enables tracking metrics for internal resources like 'ping@internals'.\n\nLANGUAGE: bash\nCODE:\n```\n--metrics.addinternals\n```\n\n----------------------------------------\n\nTITLE: Configuring sourceCriterion.requestHost in TOML File\nDESCRIPTION: Configures the sourceCriterion.requestHost option to true for the inFlightReq middleware in a TOML file configuration.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-inflightreq.inflightreq]\n    [http.middlewares.test-inflightreq.inFlightReq.sourceCriterion]\n      requestHost = true\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Provider TLS.CAOptional in Traefik v2\nDESCRIPTION: Example configurations showing how to set the TLS.CAOptional option for HTTP provider in Traefik v2. This option has been removed in v3 as TLS client authentication is a server-side option.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  http:\n    tls: \n      caOptional: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.http.tls]\n    caOptional=true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.http.tls.caOptional=true\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Strategy Depth for InFlightReq in TOML File\nDESCRIPTION: This snippet shows how to configure the IP strategy depth parameter for InFlightReq middleware in a TOML configuration file.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-inflightreq.inflightreq]\n    [http.middlewares.test-inflightreq.inFlightReq.sourceCriterion.ipStrategy]\n      depth = 2\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry HTTP Endpoint in TOML\nDESCRIPTION: Configures the URL endpoint for the OpenTelemetry Collector when using HTTP protocol with TOML configuration. The default is https://localhost:4318/v1/logs.\n\nLANGUAGE: toml\nCODE:\n```\n[log.otlp.http]\n  endpoint = \"https://collector:4318/v1/logs\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Secure Flag for Sticky Cookies in Traefik\nDESCRIPTION: Sets the Secure flag on the sticky session cookie, ensuring it's only sent over HTTPS connections for enhanced security.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.sticky.cookie.secure=true\"\n```\n\n----------------------------------------\n\nTITLE: Specifying TLS Certificate Resolver for TCP Router in Traefik\nDESCRIPTION: Defines which certificate resolver should be used for obtaining TLS certificates for the TCP router.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.certresolver=myresolver\n```\n\n----------------------------------------\n\nTITLE: Defining Service URL in Traefik\nDESCRIPTION: Directly defines the complete service URL instead of separate port and scheme configurations. Cannot be used together with port or scheme definitions.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.server.url=http://foobar:8080\"\n```\n\n----------------------------------------\n\nTITLE: Adding Headers to Request and Response using Kubernetes CRD\nDESCRIPTION: This Kubernetes Custom Resource Definition (CRD) adds the X-Script-Name header to proxied requests and X-Custom-Response-Header to responses using Traefik's Headers middleware.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-header\nspec:\n  headers:\n    customRequestHeaders:\n      X-Script-Name: \"test\"\n    customResponseHeaders:\n      X-Custom-Response-Header: \"value\"\n```\n\n----------------------------------------\n\nTITLE: Setting Average Rate in Docker & Swarm\nDESCRIPTION: Example of setting the average request rate to 100 requests per second using Docker labels. The average parameter defines the maximum rate allowed from a given source.\n\nLANGUAGE: yaml\nCODE:\n```\n# 100 reqs/s\nlabels:\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.average=100\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Endpoint in TOML\nDESCRIPTION: TOML configuration for specifying the Kubernetes server endpoint URL used by Traefik.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress]\n  endpoint = \"http://localhost:8080\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Attaching ServersTransport to a Service in YAML\nDESCRIPTION: Example showing how to attach a configured ServersTransport to a service in YAML format using dynamic configuration.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    Service01:\n      loadBalancer:\n        serversTransport: mytransport\n```\n\n----------------------------------------\n\nTITLE: Referencing ServersTransport Resource in Traefik\nDESCRIPTION: Links to a ServersTransport resource defined with File or Kubernetes CRD provider for advanced transport configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.serverstransport=foobar@file\n```\n\n----------------------------------------\n\nTITLE: Global Metrics in OpenTelemetry Format\nDESCRIPTION: List of global metrics provided by Traefik in OpenTelemetry format, including configuration reloads, open connections, and TLS certificate expiration metrics.\n\nLANGUAGE: opentelemetry\nCODE:\n```\ntraefik_config_reloads_total\ntraefik_config_last_reload_success\ntraefik_open_connections\ntraefik_tls_certs_not_after\n```\n\n----------------------------------------\n\nTITLE: Configuring exposedByDefault via CLI\nDESCRIPTION: Command-line option for disabling automatic exposure of containers. When set to false, only containers with the traefik.enable=true label will be exposed through Traefik.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.exposedByDefault=false\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Transport with insecureSkipVerify in YAML\nDESCRIPTION: Static configuration in YAML format to disable SSL certificate verification for backend services in Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nserversTransport:\n  insecureSkipVerify: true\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Prefix for Nomad Service Tags\nDESCRIPTION: Shows how to change the default prefix (traefik) for Nomad service tags that define Traefik labels.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad:\n    prefix: test\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad]\n  prefix = \"test\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad.prefix=test\n# ...\n```\n\n----------------------------------------\n\nTITLE: Declaring and Referencing Middleware in Traefik\nDESCRIPTION: Example showing how to declare a redirect middleware and then reference it in a router configuration.\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n# Declaring a middleware\ntraefik.http.middlewares.my-redirect.redirectscheme.scheme=https\n# Referencing a middleware\ntraefik.http.routers.my-service.middlewares=my-redirect\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Basic Authentication Username\nDESCRIPTION: Sets the username for HTTP Basic Authentication when connecting to Consul.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    endpoint:\n      httpAuth:\n        username: test\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog.endpoint.httpAuth]\n  username = \"test\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.endpoint.httpauth.username=test\n```\n\n----------------------------------------\n\nTITLE: Global Metrics in InfluxDB2 Format\nDESCRIPTION: List of global metrics provided by Traefik in InfluxDB2 format, including configuration reloads, open connections, and TLS certificate expiration metrics.\n\nLANGUAGE: influxdb\nCODE:\n```\ntraefik.config.reload.total\ntraefik.config.reload.lastSuccessTimestamp\ntraefik.open.connections\ntraefik.tls.certs.notAfterTimestamp\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Endpoint via CLI\nDESCRIPTION: Command line option to specify the Kubernetes server endpoint URL used by Traefik.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.endpoint=http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry gRPC TLS Client Certificates in TOML\nDESCRIPTION: Sets up client certificate authentication for OpenTelemetry gRPC connections using TOML. Requires both certificate and key files to be specified.\n\nLANGUAGE: toml\nCODE:\n```\n[log.otlp.grpc.tls]\n  cert = \"path/to/foo.cert\"\n  key = \"path/to/foo.key\"\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS Passthrough for TCP Router in Traefik\nDESCRIPTION: Configures the TCP router to not terminate TLS but pass the encrypted traffic directly to the backend service.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.routers.mytcprouter.tls.passthrough=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Provider TLS.CAOptional in Traefik v2\nDESCRIPTION: Example configurations showing how to set the TLS.CAOptional option for Redis provider in Traefik v2. This option has been removed in v3 as TLS client authentication is a server-side option.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  redis:\n    tls: \n      caOptional: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.redis.tls]\n    caOptional=true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.redis.tls.caOptional=true\n```\n\n----------------------------------------\n\nTITLE: Disabling Metrics for HTTP Router in YAML\nDESCRIPTION: Example of disabling metrics for a specific HTTP router using the File Provider in YAML format. The configuration sets metrics to false in the observability section.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    my-router:\n      rule: \"Path(`/foo`)\"\n      service: service-foo\n      observability:\n        metrics: false\n```\n\n----------------------------------------\n\nTITLE: Enabling InsecureSkipVerify for OpenTelemetry HTTP TLS in TOML\nDESCRIPTION: Configures Traefik to skip TLS certificate verification for OpenTelemetry HTTP connections using TOML. This is not recommended for production environments.\n\nLANGUAGE: toml\nCODE:\n```\n[log.otlp.http.tls]\n  insecureSkipVerify = true\n```\n\n----------------------------------------\n\nTITLE: Conflicting TLS Options in Traefik Configuration\nDESCRIPTION: Example showing a configuration that creates conflicting TLS options for the same host. When this happens, both mappings are discarded and the host name gets associated with the default TLS options instead.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    routerfoo:\n      rule: \"Host(`snitest.com`) && Path(`/foo`)\"\n      tls:\n        options: foo\n\n    routerbar:\n      rule: \"Host(`snitest.com`) && Path(`/bar`)\"\n      tls:\n        options: bar\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.routerfoo]\n    rule = \"Host(`snitest.com`) && Path(`/foo`)\"\n    [http.routers.routerfoo.tls]\n      options = \"foo\"\n\n[http.routers]\n  [http.routers.routerbar]\n    rule = \"Host(`snitest.com`) && Path(`/bar`)\"\n    [http.routers.routerbar.tls]\n      options = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Setting Path for Sticky Cookies in Traefik\nDESCRIPTION: Defines the path attribute for the sticky session cookie. This restricts the cookie to specific paths on your domain.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.sticky.cookie.path=/foobar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth with Kubernetes in YAML\nDESCRIPTION: Declares BasicAuth middleware using Kubernetes resources, including a Secret containing the user list. This approach uses a secret to store the authentication credentials.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  basicAuth:\n    secret: secretName\n```\n\n----------------------------------------\n\nTITLE: Formatting Organization Information in Certificate Headers\nDESCRIPTION: Shows how organization information is formatted in headers when info.issuer.organization is set to true. The data is extracted from the issuer part of the certificate using the O key and formatted as a comma-separated list.\n\nLANGUAGE: text\nCODE:\n```\nO=Cheese,O=Cheese 2\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Provider Poll Timeout in TOML\nDESCRIPTION: Sets the polling timeout for the HTTP provider in TOML format. This optional parameter defines the maximum time to wait when connecting to the endpoint, defaulting to 5 seconds.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.http]\n  pollTimeout = \"5s\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Domain for Sticky Sessions in Traefik\nDESCRIPTION: Defines the domain for the sticky session cookie. This determines which domains the cookie will be sent to.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/sticky/cookie/domain\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Provider Endpoint in TOML\nDESCRIPTION: Defines the HTTP endpoint that Traefik will poll for dynamic configuration in TOML format. The endpoint parameter is required and specifies the URL to fetch configuration from.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.http]\n  endpoint = \"http://127.0.0.1:9000/api\"\n```\n\n----------------------------------------\n\nTITLE: Setting TLS InsecureSkipVerify for OpenTelemetry HTTP in Traefik\nDESCRIPTION: Enables TLS connections to accept any certificate from the OpenTelemetry Collector regardless of hostname validation. This is useful for testing but not recommended for production environments.\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  otlp:\n    http:\n      tls:\n        insecureSkipVerify: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[accesslog.otlp.http.tls]\n  insecureSkipVerify = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--accesslog.otlp.http.tls.insecureSkipVerify=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Constraints in AWS ECS Provider\nDESCRIPTION: Example showing how to configure constraints for the ECS provider. Constraints determine which containers Traefik should create routes for based on container labels.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  ecs:\n    constraints: \"Label(`a.label.name`,`foo`)\"\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.ecs]\n  constraints = \"Label(`a.label.name`,`foo`)\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.ecs.constraints=\"Label(`a.label.name`,`foo`)\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting defaultEncoding in Docker & Swarm\nDESCRIPTION: Configures the Compress middleware in Docker/Swarm to use gzip as the default encoding when Accept-Encoding is not specified or contains a wildcard.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-compress.compress.defaultEncoding=gzip\"\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Port in Traefik\nDESCRIPTION: Defines which port to use for health check requests. Useful when the health endpoint is on a different port than the main service.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.healthcheck.port=42\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Routing Rule via CLI\nDESCRIPTION: Command-line option for setting a custom default routing rule template. This defines what routing rule to apply to a container if no rule is defined by a label, using Go templating.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.defaultRule='Host(`{{ .Name }}.{{ index .Labels \"customLabel\"}}`)'\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry HTTP Endpoint via CLI\nDESCRIPTION: Configures the URL endpoint for the OpenTelemetry Collector when using HTTP protocol with command line interface. The default is https://localhost:4318/v1/logs.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.http.endpoint=https://collector:4318/v1/logs\n```\n\n----------------------------------------\n\nTITLE: Setting Keep-Alive Maximum Requests Limit in Traefik\nDESCRIPTION: Configuration to set the maximum number of requests Traefik can handle before sending a Connection: Close header. Zero means no limit.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  name:\n    address: \":8888\"\n    transport:\n      keepAliveMaxRequests: 42\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.name]\n    address = \":8888\"\n    [entryPoints.name.transport]\n      keepAliveMaxRequests = 42\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.name.address=:8888\n--entryPoints.name.transport.keepAliveMaxRequests=42\n```\n\n----------------------------------------\n\nTITLE: Setting TLS InsecureSkipVerify for OpenTelemetry gRPC in Traefik\nDESCRIPTION: Enables TLS connections to accept any certificate from the OpenTelemetry Collector regardless of hostname validation when using gRPC. This setting is useful for testing but not recommended for production.\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  otlp:\n    grpc:\n      tls:\n        insecureSkipVerify: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[accesslog.otlp.grpc.tls]\n  insecureSkipVerify = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--accesslog.otlp.grpc.tls.insecureSkipVerify=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple EntryPoints with CLI Commands\nDESCRIPTION: Static configuration that defines web, websecure and other entrypoints on different ports using CLI command line flags.\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.web.address=:80\n--entryPoints.websecure.address=:443\n--entryPoints.other.address=:9090\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry gRPC TLS CA Certificate in YAML\nDESCRIPTION: Configures the certificate authority for secure connections to the OpenTelemetry Collector using gRPC with YAML. This is used to verify the collector's TLS certificate.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  otlp:\n    grpc:\n      tls:\n        ca: path/to/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Headers via CLI\nDESCRIPTION: Command line argument to set custom headers to be sent with HTTP requests. Allows adding authentication or other required headers when fetching configuration.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.http.headers.name=value\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect Following for Health Checks in Traefik\nDESCRIPTION: Controls whether health checks should follow HTTP redirects. Useful when health endpoints might redirect to another location.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.healthcheck.followredirects=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AddPrefix Middleware in Consul Catalog\nDESCRIPTION: Example of how to configure the AddPrefix middleware in Consul Catalog. This configuration adds the prefix '/foo' to all request paths before forwarding them.\n\nLANGUAGE: yaml\nCODE:\n```\n# Prefixing with /foo\n- \"traefik.http.middlewares.add-foo.addprefix.prefix=/foo\"\n```\n\n----------------------------------------\n\nTITLE: Setting Read Timeout for Traefik EntryPoint\nDESCRIPTION: Configuration for setting the readTimeout parameter which controls the maximum duration for reading the entire request, including the body. This timeout applies to incoming requests to the Traefik instance.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  name:\n    address: \":8888\"\n    transport:\n      respondingTimeouts:\n        readTimeout: 42\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.name]\n    address = \":8888\"\n    [entryPoints.name.transport]\n      [entryPoints.name.transport.respondingTimeouts]\n        readTimeout = 42\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.name.address=:8888\n--entryPoints.name.transport.respondingTimeouts.readTimeout=42\n```\n\n----------------------------------------\n\nTITLE: Enabling Body Forwarding in Kubernetes\nDESCRIPTION: Kubernetes manifest for enabling body forwarding to the authentication server using ForwardAuth middleware.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    address: https://example.com/auth\n    forwardBody: true\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication Username via CLI\nDESCRIPTION: Command-line option for setting the username for Basic HTTP authentication when connecting to a Docker daemon through an HTTP proxy. This provides security when accessing the Docker API.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.username=\"foo\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring ReplacePath Middleware with JSON Tags\nDESCRIPTION: This snippet demonstrates how to configure the ReplacePath middleware using JSON tags. It replaces the original request path with '/foo' before forwarding to the backend service.\n\nLANGUAGE: json\nCODE:\n```\n// Replace the path with /foo\n{\n  // ...\n  \"Tags\" : [\n    \"traefik.http.middlewares.test-replacepath.replacepath.path=/foo\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Push Interval for Datadog Metrics\nDESCRIPTION: Configures the interval at which Traefik pushes metrics to the Datadog agent. The default interval is 10 seconds.\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  datadog:\n    pushInterval: 10s\n```\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.datadog]\n    pushInterval = \"10s\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--metrics.datadog.pushInterval=10s\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Logs in Experimental Section using TOML\nDESCRIPTION: Activates the experimental OpenTelemetry logs feature in Traefik using TOML configuration. This must be explicitly enabled before using OpenTelemetry for logs.\n\nLANGUAGE: toml\nCODE:\n```\n[experimental.otlpLogs]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Headers in TOML\nDESCRIPTION: Configures custom headers to be sent with HTTP requests in TOML format. This optional parameter allows adding authentication or other required headers when fetching configuration.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.http.headers]\n  name = \"value\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SPIFFE in Traefik Using CLI\nDESCRIPTION: Static configuration example showing how to enable SPIFFE in Traefik using command-line arguments. Sets the workloadAPIAddr parameter to connect to the SPIFFE Workload API.\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--spiffe.workloadAPIAddr=localhost\n```\n\n----------------------------------------\n\nTITLE: Enabling Container for Traefik Routing\nDESCRIPTION: Controls whether Traefik should consider the container for routing. This overrides the default exposedByDefault setting.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.enable=true\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Swarm Load Balancer in Traefik\nDESCRIPTION: Activates Swarm's built-in load balancer instead of Traefik's. Traefik will use the virtual IP provided by Docker Swarm instead of container IPs.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.docker.lbswarm=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Specific HTTP to HTTPS Redirection in Traefik v2 with YAML\nDESCRIPTION: Example of domain-specific HTTP to HTTPS redirection in Traefik v2 using YAML format. Shows how to set up separate routers for HTTP and HTTPS traffic with a redirectScheme middleware for redirection from HTTP to HTTPS.\n\nLANGUAGE: yaml\nCODE:\n```\n## dynamic configuration\n# dynamic-conf.yml\n\nhttp:\n  routers:\n    router0:\n      rule: \"Host(`example.net`)\"\n      entryPoints:\n        - web\n      middlewares:\n        - https_redirect\n      service: my-service\n\n    router1:\n      rule: \"Host(`example.net`)\"\n      entryPoints:\n        - websecure\n      service: my-service\n      tls: {}\n\n  middlewares:\n    https-redirect:\n      redirectScheme:\n        scheme: https\n        permanent: true\n```\n\n----------------------------------------\n\nTITLE: Setting UDP Router Entry Points in Traefik\nDESCRIPTION: Configures the entry points for a UDP router. Entry points define which ports Traefik listens on for incoming UDP traffic.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.routers.myudprouter.entrypoints=ep1,ep2\n```\n\n----------------------------------------\n\nTITLE: Enabling Consul Catalog Provider in Traefik\nDESCRIPTION: Basic configuration examples for enabling the Consul Catalog provider in Traefik using different configuration formats.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog=true\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log Age in YAML\nDESCRIPTION: Configures the maximum age (in days) for retained log files using YAML format. This example sets the maximum age to 3 days.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  maxAge: 3\n```\n\n----------------------------------------\n\nTITLE: Enabling Traefik API in Docker Compose\nDESCRIPTION: Configuration snippet for exposing the Traefik API in insecure mode. This enables access to the Traefik dashboard and API on port 8080 for debugging and monitoring purposes.\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  # Traefik will listen on port 8080 by default for API request.\n  - \"--api.insecure=true\"\n\nports:\n  - \"8080:8080\"\n```\n\n----------------------------------------\n\nTITLE: Setting Traefik Log Level in TOML\nDESCRIPTION: Configures the logging level in Traefik using TOML format. This example sets the log level to DEBUG, which is more verbose than the default ERROR level.\n\nLANGUAGE: toml\nCODE:\n```\n[log]\n  level = \"DEBUG\"\n```\n\n----------------------------------------\n\nTITLE: Declaring and Referencing Middleware in Traefik\nDESCRIPTION: Example showing how to declare a redirect middleware that changes HTTP to HTTPS, and then reference it in a router configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  my-container:\n    # ...\n    deploy:\n    labels:\n    # Declaring a middleware\n    - traefik.http.middlewares.my-redirect.redirectscheme.scheme=https\n        # Referencing a middleware\n        - traefik.http.routers.my-container.middlewares=my-redirect\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Internal Resources in TOML\nDESCRIPTION: TOML configuration for enabling metrics for internal resources in Traefik. The 'addInternals' option allows tracking metrics for internal resources like 'ping@internals'.\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\naddInternals = true\n```\n\n----------------------------------------\n\nTITLE: Setting Filename Configuration for Traefik File Provider\nDESCRIPTION: Specifies a single configuration file path for Traefik's file provider instead of a directory. Note that filename and directory options are mutually exclusive.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  file:\n    filename: /path/to/config/dynamic_conf.yml\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers]\n  [providers.file]\n    filename = \"/path/to/config/dynamic_conf.toml\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.file.filename=/path/to/config/dynamic_conf.yml\n```\n\n----------------------------------------\n\nTITLE: Setting Router Priorities in TOML Format\nDESCRIPTION: Example of setting explicit priorities for TCP routers to control routing precedence for overlapping rules using the File Provider in TOML format.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.routers]\n  [tcp.routers.Router-1]\n    rule = \"ClientIP(`192.168.0.12`)\"\n    entryPoints = [\"web\"]\n    service = \"service-1\"\n    priority = 2\n  [tcp.routers.Router-2]\n    rule = \"ClientIP(`192.168.0.0/24`)\"\n    entryPoints = [\"web\"]\n    priority = 1\n    service = \"service-2\"\n```\n\n----------------------------------------\n\nTITLE: Defining TLSStore CRD for Kubernetes in YAML\nDESCRIPTION: Custom Resource Definition (CRD) for TLSStore introduced in v2.2. This YAML definition needs to be applied to the cluster when upgrading to v2.2.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: tlsstores.traefik.containo.us\n\nspec:\n  group: traefik.containo.us\n  version: v1alpha1\n  names:\n    kind: TLSStore\n    plural: tlsstores\n    singular: tlsstore\n  scope: Namespaced\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Strategy Depth in TOML File\nDESCRIPTION: Example of configuring the IP strategy depth parameter in a TOML file to determine which IP to use from X-Forwarded-For header for rate limiting.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    [http.middlewares.test-ratelimit.rateLimit.sourceCriterion.ipStrategy]\n      depth = 2\n```\n\n----------------------------------------\n\nTITLE: Configuring addAuthCookiesToResponse in Consul Catalog\nDESCRIPTION: Consul Catalog configuration for copying cookies from the authentication server to the response.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.addAuthCookiesToResponse=Session-Cookie,State-Cookie\"\n```\n\n----------------------------------------\n\nTITLE: Enabling File Watching in Traefik File Provider\nDESCRIPTION: Enables automatic file change detection in Traefik by setting the watch option to true. Works with both filename and directory configurations.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  file:\n    directory: /path/to/dynamic/conf\n    watch: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers]\n  [providers.file]\n    directory = \"/path/to/dynamic/conf\"\n    watch = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.file.directory=/my/path/to/dynamic/conf\n--providers.file.watch=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis readTimeout in Traefik Rate Limit Middleware\nDESCRIPTION: Configuration examples for setting Redis readTimeout in Traefik's rate limit middleware. This parameter defines the timeout for socket reads, with a default of 3 seconds. When the timeout is reached, commands will fail instead of blocking. Setting to zero means no timeout.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.readTimeout=42s\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-ratelimit\nspec:\n  rateLimit:\n    # ...\n    redis:\n      readTimeout: 42s\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.readTimeout=42s\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        # ...\n        redis:\n          readTimeout: 42s\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    [http.middlewares.test-ratelimit.rateLimit.redis]\n      readTimeout = \"42s\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via Unix Socket in CLI\nDESCRIPTION: Command line flag to configure Traefik to connect to Docker Swarm using the unix socket. This is the default connection method when running Traefik in a container with the Docker socket mounted.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm.endpoint=unix:///var/run/docker.sock\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring forceSlash Option in YAML File\nDESCRIPTION: Example of configuring the StripPrefix middleware with the forceSlash option set to false in a YAML configuration file.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    example:\n      stripPrefix:\n        prefixes:\n          - \"/foobar\"\n        forceSlash: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Status Code in Traefik\nDESCRIPTION: Sets the expected HTTP status code for a successful health check response.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/status\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Socket Endpoint via CLI\nDESCRIPTION: Command-line option for connecting Traefik to the Docker daemon via Unix socket. This can be used when running Traefik directly from the command line.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.endpoint=unix:///var/run/docker.sock\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting Username for HTTP Authentication in TOML\nDESCRIPTION: Configuration to set the username for Basic HTTP authentication when the Docker daemon socket is exposed through an HTTP proxy. This is used in conjunction with the password option.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  username = \"foo\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry gRPC Exporter via CLI\nDESCRIPTION: Sets up Traefik to send logs to the OpenTelemetry Collector using gRPC protocol with command line interface. The default collector port for gRPC is 4317.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.grpc=true\n```\n\n----------------------------------------\n\nTITLE: Configuring RedirectRegex Middleware in Docker and Swarm\nDESCRIPTION: Example showing how to set up RedirectRegex middleware in Docker using labels. This configuration performs domain replacement using regex matching, with escaped dollar signs for proper variable substitution.\n\nLANGUAGE: yaml\nCODE:\n```\n# Redirect with domain replacement\n# Note: all dollar signs need to be doubled for escaping.\nlabels:\n  - \"traefik.http.middlewares.test-redirectregex.redirectregex.regex=^http://localhost/(.*)\"\n  - \"traefik.http.middlewares.test-redirectregex.redirectregex.replacement=http://mydomain/$${1}\"\n```\n\n----------------------------------------\n\nTITLE: Constraints Expression Examples for Docker Provider\nDESCRIPTION: Various examples of constraint expressions for filtering containers based on their labels. These expressions use Label() and LabelRegex() functions with boolean logic to include or exclude containers.\n\nLANGUAGE: toml\nCODE:\n```\n# Includes only containers having a label with key `a.label.name` and value `foo`\nconstraints = \"Label(`a.label.name`, `foo`)\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n# Excludes containers having any label with key `a.label.name` and value `foo`\nconstraints = \"!Label(`a.label.name`, `value`)\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n# With logical AND.\nconstraints = \"Label(`a.label.name`, `valueA`) && Label(`another.label.name`, `valueB`)\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n# With logical OR.\nconstraints = \"Label(`a.label.name`, `valueA`) || Label(`another.label.name`, `valueB`)\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n# With logical AND and OR, with precedence set by parentheses.\nconstraints = \"Label(`a.label.name`, `valueA`) && (Label(`another.label.name`, `valueB`) || Label(`yet.another.label.name`, `valueC`))\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n# Includes only containers having a label with key `a.label.name` and a value matching the `a.+` regular expression.\nconstraints = \"LabelRegex(`a.label.name`, `a.+`)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Traefik Log Level via CLI\nDESCRIPTION: Configures the logging level in Traefik using command line interface. This example sets the log level to DEBUG, which is more verbose than the default ERROR level.\n\nLANGUAGE: bash\nCODE:\n```\n--log.level=DEBUG\n```\n\n----------------------------------------\n\nTITLE: Referencing ServersTransport Resource in Traefik\nDESCRIPTION: References a ServersTransport resource that is defined with the File provider or the Kubernetes CRD. Used for configuring transport layer settings.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.<service_name>.loadbalancer.serverstransport=foobar@file\"\n```\n\n----------------------------------------\n\nTITLE: Setting the Service Name for Tracing\nDESCRIPTION: Configuration to set the service name used in the tracing backend. This is a required setting with a default value of \"traefik\".\n\nLANGUAGE: yaml\nCODE:\n```\ntracing:\n  serviceName: traefik\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tracing]\n  serviceName = \"traefik\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--tracing.serviceName=traefik\n```\n\n----------------------------------------\n\nTITLE: Configuring exposedByDefault in YAML\nDESCRIPTION: Disabling automatic exposure of containers in YAML format. When set to false, only containers with the traefik.enable=true label will be exposed through Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    exposedByDefault: false\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Specific EntryPoints TCP Router Configuration in YAML\nDESCRIPTION: Example of a TCP router listening to specific entry points (websecure and other) in YAML format. The router uses HostSNI rule to match connections and enables TLS handling.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  routers:\n    Router-1:\n      # won't listen to entry point web\n      entryPoints:\n        - \"websecure\"\n        - \"other\"\n      rule: \"HostSNI(`example.com`)\"\n      service: \"service-1\"\n      # will route TLS requests (and ignore non tls requests)\n      tls: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry gRPC Headers in TOML\nDESCRIPTION: Sets additional headers for OpenTelemetry gRPC connections using TOML configuration. These headers will be sent with each request to the collector.\n\nLANGUAGE: toml\nCODE:\n```\n[log.otlp.grpc.headers]\n  foo = \"bar\"\n  baz = \"buz\"\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for Backend TCP Service Connection\nDESCRIPTION: Determines whether Traefik should use TLS when connecting to the backend service. Enables secure communication between Traefik and the backend.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.mytcpservice.loadbalancer.server.tls=true\n```\n\n----------------------------------------\n\nTITLE: Configuring sourceCriterion.requestHost in Docker & Swarm\nDESCRIPTION: Sets the sourceCriterion.requestHost option to true for the inFlightReq middleware in Docker & Swarm environments using labels.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-inflightreq.inflightreq.sourcecriterion.requesthost=true\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Colored Log Output in YAML\nDESCRIPTION: Disables colorized output when using the 'common' log format in Traefik with YAML configuration. This can be useful for log files that will be processed by other tools.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  noColor: true\n```\n\n----------------------------------------\n\nTITLE: Setting Server Weight in Traefik Load Balancer\nDESCRIPTION: Overrides the default weight in load balancing decisions, allowing you to control traffic distribution between multiple instances.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.server.weight=42\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Port in Traefik using YAML Labels\nDESCRIPTION: Sets the port for a Traefik service. This is particularly useful when a service exposes multiple ports and you need to specify which one Traefik should use.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.server.port=8080\n```\n\n----------------------------------------\n\nTITLE: Complete Client TLS Certificate Example in PEM Format\nDESCRIPTION: A complete example of a client TLS certificate in PEM format, showing certificate data including version, serial number, signature algorithm, issuer details, validity period, subject information, public key, extensions, and the certificate signature.\n\nLANGUAGE: pem\nCODE:\n```\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 1 (0x1)\n        Signature Algorithm: sha1WithRSAEncryption\n        Issuer: DC=org, DC=cheese, O=Cheese, O=Cheese 2, OU=Simple Signing Section, OU=Simple Signing Section 2, CN=Simple Signing CA, CN=Simple Signing CA 2, C=FR, C=US, L=TOULOUSE, L=LYON, ST=Signing State, ST=Signing State 2/emailAddress=simple@signing.com/emailAddress=simple2@signing.com\n        Validity\n            Not Before: Dec  6 11:10:16 2018 GMT\n            Not After : Dec  5 11:10:16 2020 GMT\n        Subject: DC=org, DC=cheese, O=Cheese, O=Cheese 2, OU=Simple Signing Section, OU=Simple Signing Section 2, CN=*.example.org, CN=*.example.com, C=FR, C=US, L=TOULOUSE, L=LYON, ST=Cheese org state, ST=Cheese com state/emailAddress=cert@example.org/emailAddress=cert@sexample.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (2048 bit)\n                Modulus:\n                    00:de:77:fa:8d:03:70:30:39:dd:51:1b:cc:60:db:\n                    a9:5a:13:b1:af:fe:2c:c6:38:9b:88:0a:0f:8e:d9:\n                    1b:a1:1d:af:0d:66:e4:13:5b:bc:5d:36:92:d7:5e:\n                    d0:fa:88:29:d3:78:e1:81:de:98:b2:a9:22:3f:bf:\n                    8a:af:12:92:63:d4:a9:c3:f2:e4:7e:d2:dc:a2:c5:\n                    39:1c:7a:eb:d7:12:70:63:2e:41:47:e0:f0:08:e8:\n                    dc:be:09:01:ec:28:09:af:35:d7:79:9c:50:35:d1:\n                    6b:e5:87:7b:34:f6:d2:31:65:1d:18:42:69:6c:04:\n                    11:83:fe:44:ae:90:92:2d:0b:75:39:57:62:e6:17:\n                    2f:47:2b:c7:53:dd:10:2d:c9:e3:06:13:d2:b9:ba:\n                    63:2e:3c:7d:83:6b:d6:89:c9:cc:9d:4d:bf:9f:e8:\n                    a3:7b:da:c8:99:2b:ba:66:d6:8e:f8:41:41:a0:c9:\n                    d0:5e:c8:11:a4:55:4a:93:83:87:63:04:63:41:9c:\n                    fb:68:04:67:c2:71:2f:f2:65:1d:02:5d:15:db:2c:\n                    d9:04:69:85:c2:7d:0d:ea:3b:ac:85:f8:d4:8f:0f:\n                    c5:70:b2:45:e1:ec:b2:54:0b:e9:f7:82:b4:9b:1b:\n                    2d:b9:25:d4:ab:ca:8f:5b:44:3e:15:dd:b8:7f:b7:\n                    ee:f9\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Basic Constraints:\n                CA:FALSE\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication, TLS Web Client Authentication\n            X509v3 Subject Key Identifier:\n                94:BA:73:78:A2:87:FB:58:28:28:CF:98:3B:C2:45:70:16:6E:29:2F\n            X509v3 Authority Key Identifier:\n                keyid:1E:52:A2:E8:54:D5:37:EB:D5:A8:1D:E4:C2:04:1D:37:E2:F7:70:03\n\n            X509v3 Subject Alternative Name:\n                DNS:*.example.org, DNS:*.example.net, DNS:*.example.com, IP Address:10.0.1.0, IP Address:10.0.1.2, email:test@example.org, email:test@example.net\n    Signature Algorithm: sha1WithRSAEncryption\n         76:6b:05:b0:0e:34:11:b1:83:99:91:dc:ae:1b:e2:08:15:8b:\n         16:b2:9b:27:1c:02:ac:b5:df:1b:d0:d0:75:a4:2b:2c:5c:65:\n         ed:99:ab:f7:cd:fe:38:3f:c3:9a:22:31:1b:ac:8c:1c:c2:f9:\n         5d:d4:75:7a:2e:72:c7:85:a9:04:af:9f:2a:cc:d3:96:75:f0:\n         8e:c7:c6:76:48:ac:45:a4:b9:02:1e:2f:c0:15:c4:07:08:92:\n         cb:27:50:67:a1:c8:05:c5:3a:b3:a6:48:be:eb:d5:59:ab:a2:\n         1b:95:30:71:13:5b:0a:9a:73:3b:60:cc:10:d0:6a:c7:e5:d7:\n         8b:2f:f9:2e:98:f2:ff:81:14:24:09:e3:4b:55:57:09:1a:22:\n         74:f1:f6:40:13:31:43:89:71:0a:96:1a:05:82:1f:83:3a:87:\n         9b:17:25:ef:5a:55:f2:2d:cd:0d:4d:e4:81:58:b6:e3:8d:09:\n         62:9a:0c:bd:e4:e5:5c:f0:95:da:cb:c7:34:2c:34:5f:6d:fc:\n         60:7b:12:5b:86:fd:df:21:89:3b:48:08:30:bf:67:ff:8c:e6:\n         9b:53:cc:87:36:47:70:40:3b:d9:90:2a:d2:d2:82:c6:9c:f5:\n         d1:d8:e0:e6:fd:aa:2f:95:7e:39:ac:fc:4e:d4:ce:65:b3:ec:\n         c6:98:8a:31\n-----BEGIN CERTIFICATE-----\nMIIGWjCCBUKgAwIBAgIBATANBgkqhkiG9w0BAQUFADCCAYQxEzARBgoJkiaJk/Is\nZAEZFgNvcmcxFjAUBgoJkiaJk/IsZAEZFgZjaGVlc2UxDzANBgNVBAoMBkNoZWVz\nZTERMA8GA1UECgwIQ2hlZXNlIDIxHzAdBgNVBAsMFlNpbXBsZSBTaWduaW5nIFNl\nY3Rpb24xITAfBgNVBAsMGFNpbXBsZSBTaWduaW5nIFNlY3Rpb24gMjEaMBgGA1UE\nAwwRU2ltcGxlIFNpZ25pbmcgQ0ExHDAaBgNVBAMME1NpbXBsZSBTaWduaW5nIENB\nIDIxCzAJBgNVBAYTAkZSMQswCQYDVQQGEwJVUzERMA8GA1UEBwwIVE9VTE9VU0Ux\nDTALBgNVBAcMBExZT04xFjAUBgNVBAgMDVNpZ25pbmcgU3RhdGUxGDAWBgNVBAgM\nD1NpZ25pbmcgU3RhdGUgMjEhMB8GCSqGSIb3DQEJARYSc2ltcGxlQHNpZ25pbmcu\nY29tMSIwIAYJKoZIhvcNAQkBFhNzaW1wbGUyQHNpZ25pbmcuY29tMB4XDTE4MTIw\nNjExMTAxNloXDTIwMTIwNTExMTAxNlowggF2MRMwEQYKCZImiZPyLGQBGRYDb3Jn\nMRYwFAYKCZImiZPyLGQBGRYGY2hlZXNlMQ8wDQYDVQQKDAZDaGVlc2UxETAPBgNV\nBAoMCENoZWVzZSAyMR8wHQYDVQQLDBZTaW1wbGUgU2lnbmluZyBTZWN0aW9uMSEw\nHwYDVQQLDBhTaW1wbGUgU2lnbmluZyBTZWN0aW9uIDIxFTATBgNVBAMMDCouY2hl\nZXNlLm9yZzEVMBMGA1UEAwwMKi5jaGVlc2UuY29tMQswCQYDVQQGEwJGUjELMAkG\nA1UEBhMCVVMxETAPBgNVBAcMCFRPVUxPVVNFMQ0wCwYDVQQHDARMWU9OMRkwFwYD\nVQQIDBBDaGVlc2Ugb3JnIHN0YXRlMRkwFwYDVQQIDBBDaGVlc2UgY29tIHN0YXRl\nMR4wHAYJKoZIhvcNAQkBFg9jZXJ0QGNoZWVzZS5vcmcxHzAdBgkqhkiG9w0BCQEW\nEGNlcnRAc2NoZWVzZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\nAQDed/qNA3AwOd1RG8xg26laE7Gv/izGOJuICg+O2RuhHa8NZuQTW7xdNpLXXtD6\niCnTeOGB3piyqSI/v4qvEpJj1KnD8uR+0tyixTkceuvXEnBjLkFH4PAI6Ny+CQHs\nKAmvNdd5nFA10Wvlh3s09tIxZR0YQmlsBBGD/kSukJItC3U5V2LmFy9HK8dT3RAt\nyeMGE9K5umMuPH2Da9aJycydTb+f6KN72siZK7pm1o74QUGgydBeyBGkVUqTg4dj\nBGNBnPtoBGfCcS/yZR0CXRXbLNkEaYXCfQ3qO6yF+NSPD8VwskXh7LJUC+n3grSb\nGy25JdSryo9bRD4V3bh/t+75AgMBAAGjgeAwgd0wDgYDVR0PAQH/BAQDAgWgMAkG\nA1UdEwQCMAAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB0GA1UdDgQW\nBBSUunN4oof7WCgoz5g7wkVwFm4pLzAfBgNVHSMEGDAWgBQeUqLoVNU369WoHeTC\nBB034vdwAzBhBgNVHREEWjBYggwqLmNoZWVzZS5vcmeCDCouY2hlZXNlLm5ldIIM\nKi5jaGVlc2UuY29thwQKAAEAhwQKAAECgQ90ZXN0QGNoZWVzZS5vcmeBD3Rlc3RA\nY2hlZXNlLm5ldDANBgkqhkiG9w0BAQUFAAOCAQEAdmsFsA40EbGDmZHcrhviCBWL\nFrKbJxwCrLXfG9DQdaQrLFxl7Zmr983+OD/DmiIxG6yMHML5XdR1ei5yx4WpBK+f\nKszTlnXwjsfGdkisRaS5Ah4vwBXEBwiSyydQZ6HIBcU6s6ZIvuvVWauiG5UwcRNb\nCppzO2DMENBqx+XXiy/5Lpjy/4EUJAnjS1VXCRoidPH2QBMxQ4lxCpYaBYIfgzqH\nmxcl71pV8i3NDU3kgVi2440JYpoMveTlXPCV2svHNCw0X238YHsSW4b93yGJO0gI\nML9n/4zmm1PMhzZHcEA72ZAq0tKCxpz10djg5v2qL5V+Oaz8TtTOZbPsxpiKMQ==\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Setting Default Network in TOML\nDESCRIPTION: Configuration to specify a default Docker network to use for connections to all containers. This can be overridden on a per-container basis with the traefik.docker.network routing label.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  network = \"test\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS Insecure Skip Verify for Nomad API Connection\nDESCRIPTION: Shows how to enable insecure TLS connections to the Nomad API by accepting any certificate regardless of the hostnames it covers.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad:\n    endpoint:\n      tls:\n        insecureSkipVerify: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad.endpoint.tls]\n  insecureSkipVerify = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad.endpoint.tls.insecureskipverify=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure API Mode using CLI\nDESCRIPTION: Enables the API in insecure mode using CLI flags, making it directly available on the 'traefik' entryPoint at path '/api'. If the entryPoint is not configured, it will be created on port 8080.\n\nLANGUAGE: bash\nCODE:\n```\n--api.insecure=true\n```\n\n----------------------------------------\n\nTITLE: Disabling Metrics for HTTP Router in TOML\nDESCRIPTION: Example of disabling metrics for a specific HTTP router using the File Provider in TOML format. The configuration sets metrics to false in the observability section.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.my-router]\n    rule = \"Path(`/foo`)\"\n    service = \"service-foo\"\n    [http.routers.my-router.observability]\n      metrics = false\n```\n\n----------------------------------------\n\nTITLE: Setting Burst Value in Kubernetes\nDESCRIPTION: Example of setting the burst parameter to 100 in Kubernetes. The burst parameter defines the maximum number of requests allowed to go through in a short period of time.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-ratelimit\nspec:\n  rateLimit:\n    burst: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik TLS with CertResolver in Docker & Swarm\nDESCRIPTION: Configuration for a Traefik router using container labels in Docker. Sets up a router named 'blog' with Host and Path rules, enables TLS, and configures a certificate resolver named 'myresolver'.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nlabels:\n  - traefik.http.routers.blog.rule=Host(`example.com`) && Path(`/blog`)\n  - traefik.http.routers.blog.tls=true\n  - traefik.http.routers.blog.tls.certresolver=myresolver\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik TLS with CertResolver in Docker & Swarm\nDESCRIPTION: Configuration for a Traefik router using container labels in Docker. Sets up a router named 'blog' with Host and Path rules, enables TLS, and configures a certificate resolver named 'myresolver'.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nlabels:\n  - traefik.http.routers.blog.rule=Host(`example.com`) && Path(`/blog`)\n  - traefik.http.routers.blog.tls=true\n  - traefik.http.routers.blog.tls.certresolver=myresolver\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry HTTP Headers via CLI\nDESCRIPTION: Sets additional HTTP headers for OpenTelemetry logs export using command line interface. These headers will be sent with each request to the collector.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.http.headers.foo=bar --log.otlp.http.headers.baz=buz\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Strategy Depth for InFlightReq in Kubernetes\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes Middleware resource to configure the IP strategy depth parameter for InFlightReq.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-inflightreq\nspec:\n  inFlightReq:\n    sourceCriterion:\n      ipStrategy:\n        depth: 2\n```\n\n----------------------------------------\n\nTITLE: Defining TCP Service Port in Traefik\nDESCRIPTION: Specifies the port on which the TCP service is listening in the backend container.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.services.mytcpservice.loadbalancer.server.port=423\"\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry HTTP TLS CA Certificate via CLI\nDESCRIPTION: Configures the certificate authority for secure connections to the OpenTelemetry Collector using command line interface. This is used to verify the collector's TLS certificate.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.http.tls.ca=path/to/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Protocol in Traefik\nDESCRIPTION: Sets which protocol scheme to use for health checks. Can be either 'http' or 'https' depending on service requirements.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.healthcheck.scheme=http\"\n```\n\n----------------------------------------\n\nTITLE: Setting Safe Query Parameters for Tracing\nDESCRIPTION: Configuration to specify which query parameters should not be redacted in traces. By default, all query parameters are redacted for security reasons.\n\nLANGUAGE: yaml\nCODE:\n```\ntracing:\n  safeQueryParams:\n    - bar\n    - buz\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tracing]\n  safeQueryParams = [\"bar\", \"buz\"]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--tracing.safeQueryParams=bar,buz\n```\n\n----------------------------------------\n\nTITLE: Enabling Routers Labels in Datadog Metrics\nDESCRIPTION: Configures whether to include router labels in the metrics exported to Datadog. This option is disabled by default and must be explicitly enabled.\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.datadog]\n    addRoutersLabels = true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  datadog:\n    addRoutersLabels: true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--metrics.datadog.addrouterslabels=true\n```\n\n----------------------------------------\n\nTITLE: Disabling Tracing for HTTP Router in TOML\nDESCRIPTION: Example of disabling tracing for a specific HTTP router using the File Provider in TOML format. The configuration sets tracing to false in the observability section.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.my-router]\n    rule = \"Path(`/foo`)\"\n    service = \"service-foo\"\n    [http.routers.my-router.observability]\n      tracing = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Zone Settings with Docker Compose in Traefik\nDESCRIPTION: This Docker Compose configuration demonstrates how to set up Traefik with a custom time zone for log timestamps. It specifies the TZ environment variable to use Alaska time zone and configures the access logs to drop the StartUTC field, effectively using local time for timestamp formatting.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.7\"\n\nservices:\n  traefik:\n    image: traefik:v3.2\n    environment:\n      - TZ=US/Alaska\n    command:\n      - --accesslog.fields.names.StartUTC=drop\n      - --providers.docker\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry gRPC Endpoint in YAML\nDESCRIPTION: Configures the endpoint address for the OpenTelemetry Collector when using gRPC protocol with YAML configuration. The default is localhost:4317.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  otlp:\n    grpc:\n      endpoint: localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Setting minResponseBodyBytes in YAML File\nDESCRIPTION: Configures the Compress middleware using YAML to set a minimum response size required for compression.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-compress:\n      compress:\n        minResponseBodyBytes: 1200\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry gRPC Endpoint in Traefik\nDESCRIPTION: Configures the address of the OpenTelemetry Collector for gRPC transport. The default endpoint is 'localhost:4317' in host:port format.\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  otlp:\n    grpc:\n      endpoint: localhost:4317\n```\n\nLANGUAGE: toml\nCODE:\n```\n[accesslog.otlp.grpc]\n  endpoint = \"localhost:4317\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--accesslog.otlp.grpc.endpoint=localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded IPs for InFlightReq in TOML File\nDESCRIPTION: This snippet shows how to configure excluded IPs for InFlightReq middleware in a TOML configuration file to select the client IP from X-Forwarded-For header.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-inflightreq.inflightreq]\n    [http.middlewares.test-inflightreq.inFlightReq.sourceCriterion.ipStrategy]\n      excludedIPs = [\"127.0.0.1/32\", \"192.168.1.7\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling Etcd Provider in Traefik (YAML, TOML, Bash)\nDESCRIPTION: These code snippets demonstrate how to enable the etcd provider in Traefik using different configuration formats. The configuration can be provided via YAML file, TOML file, or command-line interface.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  etcd: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.etcd]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.etcd=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Dashboard using CLI Flags\nDESCRIPTION: Enables the Traefik dashboard using CLI flags. The dashboard provides a visual interface for monitoring and managing Traefik. By default, the dashboard is enabled when API is configured.\n\nLANGUAGE: bash\nCODE:\n```\n--api.dashboard=true\n```\n\n----------------------------------------\n\nTITLE: Configuring ExternalName Service with IngressRouteTCP\nDESCRIPTION: Example of IngressRouteTCP configuration with Kubernetes ExternalName Service, where the port is defined only on the IngressRouteTCP side. This demonstrates how to route TCP traffic to external services.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: traefik.io/v1alpha1\nkind: IngressRouteTCP\nmetadata:\n  name: test.route\n  namespace: default\n\nspec:\n  entryPoints:\n    - foo\n\n  routes:\n  - match: HostSNI(`*`)\n    services:\n    - name: external-svc\n      port: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: external-svc\n  namespace: default\nspec:\n  externalName: external.domain\n  type: ExternalName\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Endpoints in Traefik\nDESCRIPTION: Defines how to access Consul through the endpoints option. The default value is '127.0.0.1:8500'.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consul:\n    endpoints:\n      - \"127.0.0.1:8500\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consul]\n  endpoints = [\"127.0.0.1:8500\"]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consul.endpoints=127.0.0.1:8500\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing for a Router in Traefik with ECS\nDESCRIPTION: Controls whether the router will produce traces, which are useful for distributed tracing and debugging request flows.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.routers.myrouter.observability.tracing=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS CA Certificate for OpenTelemetry gRPC in Traefik\nDESCRIPTION: Sets the path to the certificate authority for secure gRPC connections to the OpenTelemetry Collector. By default, it uses the system certificate bundle.\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  otlp:\n    grpc:\n      tls:\n        ca: path/to/ca.crt\n```\n\nLANGUAGE: toml\nCODE:\n```\n[accesslog.otlp.grpc.tls]\n  ca = \"path/to/ca.crt\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--accesslog.otlp.grpc.tls.ca=path/to/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Strategy Depth for InFlightReq in Docker & Swarm\nDESCRIPTION: This snippet shows how to configure the IP strategy depth parameter for InFlightReq middleware in Docker or Docker Swarm to select the client IP from X-Forwarded-For header.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-inflightreq.inflightreq.sourcecriterion.ipstrategy.depth=2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Options for a Router in Traefik with ECS\nDESCRIPTION: Specifies TLS options to use for the router, allowing customization of TLS parameters such as minimum version, ciphers, etc.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.tls.options=foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry HTTP TLS Client Certificates via CLI\nDESCRIPTION: Sets up client certificate authentication for OpenTelemetry HTTP connections using command line interface. Requires both certificate and key files to be specified.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.http.tls.cert=path/to/foo.cert\n--log.otlp.http.tls.key=path/to/foo.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Swarm Provider in TOML\nDESCRIPTION: Enables the Docker Swarm provider by specifying the endpoint for either Swarm classic or Swarm mode in TOML format.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  # swarm classic (1.12-)\n  # endpoint = \"tcp://127.0.0.1:2375\"\n  # docker swarm mode (1.12+)\n  endpoint = \"tcp://127.0.0.1:2377\"\n```\n\n----------------------------------------\n\nTITLE: Setting Consul Server URI Scheme\nDESCRIPTION: Defines the URI scheme for connecting to the Consul server, such as https for secure connections.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    endpoint:\n      scheme: https\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog]\n  [providers.consulCatalog.endpoint]\n    scheme = \"https\"\n    # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.endpoint.scheme=https\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental KubernetesGateway Provider\nDESCRIPTION: Example configurations for enabling the experimental KubernetesGateway provider in Traefik. This feature became stable in v3.1, and the experimental option is now deprecated.\n\nLANGUAGE: yaml\nCODE:\n```\nexperimental:\n  kubernetesgateway: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[experimental]\n    kubernetesgateway=true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--experimental.kubernetesgateway=true\n```\n\n----------------------------------------\n\nTITLE: Requiring DNS Challenge Propagation to All Recursive Nameservers\nDESCRIPTION: Configuration to require the challenge TXT record to be propagated to all recursive nameservers. This is recommended when authoritative nameserver checks are disabled to ensure proper DNS propagation.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      dnsChallenge:\n        # ...\n        propagation:\n          # ...\n          requireAllRNS: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  [certificatesResolvers.myresolver.acme.dnsChallenge]\n    # ...\n    [certificatesResolvers.myresolver.acme.dnsChallenge.propagation]\n      # ...\n      requireAllRNS = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.dnschallenge.propagation.requireAllRNS=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik API with Basic Auth for Kubernetes using CRDs\nDESCRIPTION: Kubernetes Custom Resource Definition (CRD) configuration for securing the Traefik API dashboard. This uses the IngressRoute and Middleware CRDs to define the routing and authentication, with credentials stored in a Kubernetes secret.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: traefik-dashboard\nspec:\n  routes:\n  - match: Host(`traefik.example.com`)\n    kind: Rule\n    services:\n    - name: api@internal\n      kind: TraefikService\n    middlewares:\n      - name: auth\n---\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: auth\nspec:\n  basicAuth:\n    secret: secretName # Kubernetes secret named \"secretName\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePortLB in Kubernetes Ingress\nDESCRIPTION: Controls whether the load-balancer's children are directly the nodes internal IPs using nodePort when service type is NodePort. Useful when Traefik runs externally from the cluster but within the same network.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.ingress.kubernetes.io/service.nodeportlb: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Adding BackendTLSPolicy Support in Kubernetes Gateway Provider RBACs\nDESCRIPTION: YAML configuration for adding BackendTLSPolicy resource rights to Kubernetes Gateway provider RBACs. This is required for the experimental BackendTLSPolicy support added in Traefik v3.2.\n\nLANGUAGE: yaml\nCODE:\n```\n  ...\n  - apiGroups:\n      - \"\"\n    resources:\n      - configmaps\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - gateway.networking.k8s.io\n    resources:\n      - backendtlspolicies\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - gateway.networking.k8s.io\n    resources:\n      - backendtlspolicies/status\n    verbs:\n      - update\n  ...\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers for OpenTelemetry gRPC in Traefik\nDESCRIPTION: Configures additional headers to be sent with access logs to the OpenTelemetry Collector when using gRPC. These headers can be used for authentication or other custom purposes.\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  otlp:\n    grpc:\n      headers:\n        foo: bar\n        baz: buz\n```\n\nLANGUAGE: toml\nCODE:\n```\n[accesslog.otlp.grpc.headers]\n  foo = \"bar\"\n  baz = \"buz\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--accesslog.otlp.grpc.headers.foo=bar --accesslog.otlp.grpc.headers.baz=buz\n```\n\n----------------------------------------\n\nTITLE: Enabling Secure Flag for Sticky Cookies in Traefik\nDESCRIPTION: Configures the cookie used for sticky sessions to be sent only over secure HTTPS connections.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.secure=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Scheme in Traefik with YAML Labels\nDESCRIPTION: Overrides the default HTTP scheme for a service, allowing you to specify whether to use HTTP or HTTPS.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.server.scheme=http\n```\n\n----------------------------------------\n\nTITLE: Configuring authResponseHeaders in Consul Catalog\nDESCRIPTION: Consul Catalog configuration for specifying headers to copy from authentication server responses.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress PublishedService in Traefik with TOML\nDESCRIPTION: TOML configuration for the publishedService option to copy status from a Kubernetes service to ingress resources. This is useful for tools like External-DNS to propagate service IPs to ingress resources.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress.ingressEndpoint]\n  publishedService = \"namespace/foo-service\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Defining UDP Service Port in Traefik\nDESCRIPTION: Specifies the port on which the UDP service is listening in the backend container.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.udp.services.myudpservice.loadbalancer.server.port=423\"\n```\n\n----------------------------------------\n\nTITLE: Referencing YAML Configurations for Nomad and Docker Labels in Traefik\nDESCRIPTION: This code snippet includes references to two YAML configuration files: one for Nomad service discovery configuration and another for Docker labels configuration. These files are included in the documentation using a documentation-specific include syntax.\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"content/reference/dynamic-configuration/nomad.yml\"\n--8<-- \"content/reference/dynamic-configuration/docker-labels.yml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring InFlightConn TCP Middleware with JSON Tags\nDESCRIPTION: Example of limiting simultaneous connections to 10 using JSON tags in Traefik configuration.\n\nLANGUAGE: json\nCODE:\n```\n// Limiting to 10 simultaneous connections\n{\n  //...\n  \"Tags\" : [\n    \"traefik.tcp.middlewares.test-inflightconn.inflightconn.amount=10\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring InFlightConn TCP Middleware in Kubernetes\nDESCRIPTION: Example of limiting simultaneous connections to 10 using Kubernetes Custom Resource Definition (CRD) for Traefik's TCP middleware.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: MiddlewareTCP\nmetadata:\n  name: test-inflightconn\nspec:\n  inFlightConn:\n    amount: 10\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Ingress with TLS and Annotations in YAML\nDESCRIPTION: Example Kubernetes Ingress definition with TLS configuration and annotations to restrict TLS to specific Ingress resources in v2.2+.\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Ingress\napiVersion: networking.k8s.io/v1beta1\nmetadata:\n  name: example-tls\n  annotations:\n    traefik.ingress.kubernetes.io/router.entrypoints: websecure\n    traefik.ingress.kubernetes.io/router.tls: \"true\"\n\nspec:\n  tls:\n  - secretName: my-tls-secret\n\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: \"\"\n        backend:\n          serviceName: example-com\n          servicePort: 80\n```\n\n----------------------------------------\n\nTITLE: Setting Users Option in DigestAuth with Consul Catalog\nDESCRIPTION: Shows how to define authorized users for DigestAuth middleware using the users option in Consul Catalog.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.digestauth.users=test:traefik:a2688e031edb4be6a3797f3882655c05,test2:traefik:518845800f9e2bfb1f1f740ec24f074e\"\n```\n\n----------------------------------------\n\nTITLE: Setting ExposedByDefault in TOML\nDESCRIPTION: Configuration to control whether Traefik automatically exposes all containers by default. When set to false, only containers with traefik.enable=true label will be exposed.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  exposedByDefault = false\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Enabling InsecureSkipVerify for OpenTelemetry HTTP TLS in YAML\nDESCRIPTION: Configures Traefik to skip TLS certificate verification for OpenTelemetry HTTP connections using YAML. This is not recommended for production environments.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  otlp:\n    http:\n      tls:\n        insecureSkipVerify: true\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via TCP in TOML\nDESCRIPTION: Configuration for connecting Traefik to a remote Docker daemon using TCP in TOML format. This allows Traefik to communicate with a Docker daemon on a different host using TCP protocol.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  swarm = \"tcp://127.0.0.1:2375\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS CA Certificate in TOML\nDESCRIPTION: Sets the certificate authority for secure HTTPS connections in TOML format. This optional parameter specifies the path to the CA certificate used for verifying the endpoint's certificate.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.http.tls]\n  ca = \"path/to/ca.crt\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Locality Information in Certificate Headers\nDESCRIPTION: Shows how locality information is formatted in headers when info.issuer.locality is set to true. The data is extracted from the issuer part of the certificate using the L key and formatted as a comma-separated list.\n\nLANGUAGE: text\nCODE:\n```\nL=TOULOUSE,L=LYON\n```\n\n----------------------------------------\n\nTITLE: Disabling DNS Challenge Propagation Checks\nDESCRIPTION: Configuration to disable the challenge TXT record propagation checks before notifying ACME that the DNS challenge is ready. This option should be used with caution as it may prevent the challenge from succeeding.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      dnsChallenge:\n        # ...\n        propagation:\n          # ...\n          disableChecks: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  [certificatesResolvers.myresolver.acme.dnsChallenge]\n    # ...\n    [certificatesResolvers.myresolver.acme.dnsChallenge.propagation]\n      # ...\n      disableChecks = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.dnschallenge.propagation.disableChecks=true\n```\n\n----------------------------------------\n\nTITLE: Setting Response Forwarding Flush Interval in Traefik\nDESCRIPTION: Configures how frequently Traefik flushes the response buffer to clients. Lower values provide more real-time responses but may increase server load.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.responseforwarding.flushinterval=10\"\n```\n\n----------------------------------------\n\nTITLE: Router Metrics in StatsD Format\nDESCRIPTION: Lists the metric names for router monitoring in StatsD format. These metrics track request counts, TLS usage, request duration, and data transfer sizes. Uses a configurable prefix defaulting to \"traefik\".\n\nLANGUAGE: statsd\nCODE:\n```\n# Default prefix: \"traefik\"\n{prefix}.router.request.total\n{prefix}.router.request.tls.total\n{prefix}.router.request.duration\n{prefix}.router.requests.bytes.total\n{prefix}.router.responses.bytes.total\n```\n\n----------------------------------------\n\nTITLE: Updating ClusterRole for Traefik v2.2 in YAML\nDESCRIPTION: Updated ClusterRole definition for Traefik v2.2 that includes permissions for the new TLSStore and IngressRouteUDP CRDs. This needs to be applied when upgrading to v2.2.\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: traefik-ingress-controller\n\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - services\n      - endpoints\n      - secrets\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses/status\n    verbs:\n      - update\n  - apiGroups:\n      - traefik.io\n      - traefik.containo.us\n    resources:\n      - middlewares\n      - middlewaretcps\n      - ingressroutes\n      - traefikservices\n      - ingressroutetcps\n      - ingressrouteudps\n      - tlsoptions\n      - tlsstores\n      - serverstransports\n      - serverstransporttcps\n    verbs:\n      - get\n      - list\n      - watch\n```\n\n----------------------------------------\n\nTITLE: Updating ClusterRole for Traefik v2.1 in YAML\nDESCRIPTION: Updated ClusterRole definition for Traefik v2.1 that includes permissions for the new TraefikService CRD. This needs to be applied when upgrading to v2.1.\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: traefik-ingress-controller\n\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - services\n      - endpoints\n      - secrets\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses/status\n    verbs:\n      - update\n  - apiGroups:\n      - traefik.io\n      - traefik.containo.us\n    resources:\n      - middlewares\n      - middlewaretcps\n      - ingressroutes\n      - traefikservices\n      - ingressroutetcps\n      - ingressrouteudps\n      - tlsoptions\n      - tlsstores\n      - serverstransports\n      - serverstransporttcps\n    verbs:\n      - get\n      - list\n      - watch\n```\n\n----------------------------------------\n\nTITLE: Setting Sticky Cookie Name in Kubernetes Ingress\nDESCRIPTION: Specifies the name of the cookie used for sticky sessions when sticky sessions are enabled.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.ingress.kubernetes.io/service.sticky.cookie.name: foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring Routers, Middlewares and Services in Traefik\nDESCRIPTION: This example demonstrates how to define HTTP routers, middlewares (basic authentication), and services in Traefik's dynamic configuration file. It includes route rules, entry points, and load balancer configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  # Add the router\n  routers:\n    router0:\n      entryPoints:\n      - web\n      middlewares:\n      - my-basic-auth\n      service: service-foo\n      rule: Path(`/foo`)\n\n  # Add the middleware\n  middlewares:\n    my-basic-auth:\n      basicAuth:\n        users:\n        - test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\n        - test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\n        usersFile: etc/traefik/.htpasswd\n\n  # Add the service\n  services:\n    service-foo:\n      loadBalancer:\n        servers:\n        - url: http://foo/\n        - url: http://bar/\n        passHostHeader: false\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http]\n  # Add the router\n  [http.routers]\n    [http.routers.router0]\n      entryPoints = [\"web\"]\n      middlewares = [\"my-basic-auth\"]\n      service = \"service-foo\"\n      rule = \"Path(`/foo`)\"\n\n  # Add the middleware\n  [http.middlewares]\n    [http.middlewares.my-basic-auth.basicAuth]\n      users = [\"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\",\n                \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"]\n      usersFile = \"etc/traefik/.htpasswd\"\n\n  # Add the service\n  [http.services]\n    [http.services.service-foo]\n      [http.services.service-foo.loadBalancer]\n        [[http.services.service-foo.loadBalancer.servers]]\n          url = \"http://foo/\"\n        [[http.services.service-foo.loadBalancer.servers]]\n          url = \"http://bar/\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing for a Router with Consul Catalog Tags in Traefik\nDESCRIPTION: Enables distributed tracing for a specific router as part of observability configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.observability.tracing=true\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Service Backend Port in Traefik\nDESCRIPTION: Specifies the port number that the backend service is listening on for UDP connections.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.services.myudpservice.loadbalancer.server.port=423\n```\n\n----------------------------------------\n\nTITLE: Setting minResponseBodyBytes in Consul Catalog\nDESCRIPTION: Configures the Compress middleware in Consul Catalog to set a minimum response size required for compression.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-compress.compress.minresponsebodybytes=1200\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Configuration with TOML in Traefik Proxy\nDESCRIPTION: This snippet shows how to define dynamic configuration for Traefik Proxy using TOML format. The actual content is referenced from an external file.\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"content/reference/dynamic-configuration/file.toml\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Configuration with TOML in Traefik Proxy\nDESCRIPTION: This snippet shows how to define dynamic configuration for Traefik Proxy using TOML format. The actual content is referenced from an external file.\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"content/reference/dynamic-configuration/file.toml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS in Traefik v2 with Kubernetes IngressRoute\nDESCRIPTION: Example of TLS configuration in Traefik v2 using Kubernetes CRDs (Custom Resource Definitions). Defines a TLSOption resource with TLS settings and an IngressRoute that references this TLS option for secure routing.\n\nLANGUAGE: yaml\nCODE:\n```\n# The definitions below require the definitions for the TLSOption and IngressRoute kinds.\n# https://doc.traefik.io/traefik/reference/dynamic-configuration/kubernetes-crd/#definitions\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: mytlsoption\n  namespace: default\n\nspec:\n  minVersion: VersionTLS12\n  cipherSuites:\n    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n    - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n    - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n\n---\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutebar\n\nspec:\n  entryPoints:\n    - web\n  routes:\n    - match: Host(`example.com`)\n      kind: Rule\n      services:\n        - name: whoami\n          port: 80\n  tls:\n    options:\n      name: mytlsoption\n      namespace: default\n```\n\n----------------------------------------\n\nTITLE: Setting defaultEncoding in TOML File\nDESCRIPTION: Configures the Compress middleware using TOML to set a default compression encoding.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-compress.compress]\n    defaultEncoding = \"gzip\"\n```\n\n----------------------------------------\n\nTITLE: Declaring and Referencing Middleware in Traefik with YAML Labels\nDESCRIPTION: Demonstrates how to declare a redirect middleware and then reference it in a router configuration.\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n# Declaring a middleware\ntraefik.http.middlewares.my-redirect.redirectscheme.scheme=https\n# Referencing a middleware\ntraefik.http.routers.my-service.middlewares=my-redirect\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry gRPC Exporter in TOML\nDESCRIPTION: Sets up Traefik to send logs to the OpenTelemetry Collector using gRPC protocol with TOML configuration. The default collector port for gRPC is 4317.\n\nLANGUAGE: toml\nCODE:\n```\n[log.otlp.grpc]\n```\n\n----------------------------------------\n\nTITLE: Setting Refresh Interval in TOML\nDESCRIPTION: Configuration to define the polling interval in seconds for Docker Swarm Mode. This controls how frequently Traefik checks for changes in the Docker Swarm environment.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  refreshSeconds = 30\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespaces to Watch in YAML\nDESCRIPTION: YAML configuration for limiting which Kubernetes namespaces Traefik watches for Ingress resources.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    namespaces:\n      - \"default\"\n      - \"production\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring InFlightReq Middleware in Docker & Swarm\nDESCRIPTION: This snippet shows how to configure the InFlightReq middleware in Docker or Docker Swarm using labels to limit simultaneous requests to 10.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-inflightreq.inflightreq.amount=10\"\n```\n\n----------------------------------------\n\nTITLE: Disabling CNAME Support with Environment Variable\nDESCRIPTION: Environment variable setting to disable CNAME support in Traefik's DNS challenge process. This can be useful in cases where CNAME records cause problems with certificate issuance.\n\nLANGUAGE: bash\nCODE:\n```\nLEGO_DISABLE_CNAME_SUPPORT=true\n```\n\n----------------------------------------\n\nTITLE: Configuring InFlightConn TCP Middleware in YAML\nDESCRIPTION: Example of limiting simultaneous connections to 10 using structured YAML configuration for Traefik's TCP middleware.\n\nLANGUAGE: yaml\nCODE:\n```\n# Limiting to 10 simultaneous connections\ntcp:\n  middlewares:\n    test-inflightconn:\n      inFlightConn:\n        amount: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Listening to All EntryPoints in TOML\nDESCRIPTION: Dynamic configuration of an HTTP router that listens to all available entry points by default using TOML syntax.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.Router-1]\n    # By default, routers listen to every EntryPoints.\n    rule = \"Host(`example.com`)\"\n    service = \"service-1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Syntax Per Router in Traefik v3\nDESCRIPTION: Examples showing how to configure the rule syntax on a per-router basis in different providers. This allows heterogeneous router configurations and eases migration from v2 to v3.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.routers.test.ruleSyntax=v2\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test.route\n  namespace: default\n\nspec:\n  routes:\n    - match: PathPrefix(`/foo`, `/bar`)\n      syntax: v2\n      kind: Rule\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.test.ruleSyntax=v2\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  routers:\n    test:\n      ruleSyntax: v2\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.routers]\n  [http.routers.test]\n    ruleSyntax = \"v2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 Subnet for InFlightReq in Kubernetes\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes Middleware resource to configure the IPv6 subnet parameter for InFlightReq middleware to transform IPv6 addresses.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-inflightreq\nspec:\n  inFlightReq:\n    sourceCriterion:\n      ipStrategy:\n        ipv6Subnet: 64\n```\n\n----------------------------------------\n\nTITLE: Linking TCP Router to Service in Traefik\nDESCRIPTION: Specifies which service a TCP router should forward matching requests to by referencing the service name.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.service=myservice\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Hostname in Traefik\nDESCRIPTION: Sets the hostname to use for health check requests to backend servers.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/hostname\n```\n\n----------------------------------------\n\nTITLE: Setting defaultEncoding in YAML File\nDESCRIPTION: Configures the Compress middleware using YAML to set a default compression encoding.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-compress:\n      compress:\n        defaultEncoding: gzip\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Headers using Kubernetes CRD\nDESCRIPTION: This Kubernetes Custom Resource Definition (CRD) adds the X-Script-Name header while removing X-Custom-Request-Header from requests and X-Custom-Response-Header from responses using Traefik's Headers middleware.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-header\nspec:\n  headers:\n    customRequestHeaders:\n      X-Script-Name: \"test\" # Adds\n      X-Custom-Request-Header: \"\" # Removes\n    customResponseHeaders:\n      X-Custom-Response-Header: \"\" # Removes\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Status Code in Traefik\nDESCRIPTION: Specifies which HTTP status code indicates a healthy service in the health check response. This allows customizing which response codes Traefik should interpret as successful health checks.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.healthcheck.status=42\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Entry Points in YAML\nDESCRIPTION: Static configuration for defining entry points with TLS support in YAML format. This is used to expose an Ingress on ports 80 and 443.\n\nLANGUAGE: yaml\nCODE:\n```\n# Static configuration\n\nentryPoints:\n  web:\n    address: :80\n  websecure:\n    address: :443\n    http:\n      tls: {}\n\nproviders:\n  kubernetesIngress: {}\n```\n\n----------------------------------------\n\nTITLE: Optional Traefik Debugging Configuration\nDESCRIPTION: These optional configuration lines can be uncommented to enable debug logging and use Let's Encrypt's staging environment for testing certificate issuance without hitting rate limits.\n\nLANGUAGE: yaml\nCODE:\n```\n#- \"--log.level=DEBUG\"\n#- \"--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Global HTTP to HTTPS Redirection in Traefik v1 Using CLI\nDESCRIPTION: Command line interface example for configuring global HTTP to HTTPS redirection in Traefik v1, showing how to set up redirection from the 'web' entryPoint to the 'websecure' entryPoint.\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints=Name:web Address::80 Redirect.EntryPoint:websecure\n--entryPoints='Name:websecure Address::443 TLS'\n```\n\n----------------------------------------\n\nTITLE: Referencing TLSStore Implicitly in an IngressRoute\nDESCRIPTION: Example showing an IngressRoute that uses TLS termination, implicitly referencing the default TLSStore without explicitly naming it.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutebar\n\nspec:\n  entryPoints:\n    - websecure\n  routes:\n  - match: Host(`example.com`) && PathPrefix(`/stripit`)\n    kind: Rule\n    services:\n    - name: whoami\n      port: 80\n  tls: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring authResponseHeaders in Kubernetes\nDESCRIPTION: Kubernetes manifest for specifying headers to copy from authentication server responses using ForwardAuth middleware.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    address: https://example.com/auth\n    authResponseHeaders:\n      - X-Auth-User\n      - X-Secret\n```\n\n----------------------------------------\n\nTITLE: Setting minResponseBodyBytes in Kubernetes\nDESCRIPTION: Defines a Kubernetes Middleware that configures compression to only compress responses larger than a specified size.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-compress\nspec:\n  compress:\n    minResponseBodyBytes: 1200\n```\n\n----------------------------------------\n\nTITLE: Enabling Swarm Provider via Command Line\nDESCRIPTION: This snippet shows how to enable the Docker Swarm provider in Traefik using command line arguments.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik API with Basic Auth using YAML File\nDESCRIPTION: File-based YAML configuration for securing the Traefik API dashboard. This defines the HTTP router, service connection, and basic authentication middleware with hashed user credentials in a structured YAML format.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Configuration\nhttp:\n  routers:\n    api:\n      rule: Host(`traefik.example.com`)\n      service: api@internal\n      middlewares:\n        - auth\n  middlewares:\n    auth:\n      basicAuth:\n        users:\n          - \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"\n          - \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Associating UDP Router with a Service in Traefik\nDESCRIPTION: Links a UDP router to a specific service that will handle the routed UDP traffic.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.udp.routers.myudprouter.service=myservice\"\n```\n\n----------------------------------------\n\nTITLE: Disabling IngressClass Lookup in YAML\nDESCRIPTION: YAML configuration to disable IngressClass discovery in the cluster. This option is deprecated in v3.1.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    disableIngressClassLookup: true\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting HeaderField Option in DigestAuth with TOML File\nDESCRIPTION: Shows how to customize the header field for authenticated users in DigestAuth middleware with a TOML configuration file.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares.my-auth.digestAuth]\n  # ...\n  headerField = \"X-WebAuth-User\"\n```\n\n----------------------------------------\n\nTITLE: Setting Realm Option in DigestAuth with Consul Catalog\nDESCRIPTION: Shows how to customize the realm for DigestAuth middleware in Consul Catalog.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.digestauth.realm=MyRealm\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Ingress Provider in TOML Configuration\nDESCRIPTION: Configuration snippet showing how to enable the Kubernetes Ingress provider in Traefik using TOML format.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress]\n```\n\n----------------------------------------\n\nTITLE: Configuring ALPN Protocols in Kubernetes\nDESCRIPTION: Creates a Kubernetes TLSOption resource to specify supported ALPN protocols. This configuration sets HTTP/1.1 and HTTP/2 as supported protocols for TLS handshake.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSOption\nmetadata:\n  name: default\n  namespace: default\n\nspec:\n  alpnProtocols:\n    - http/1.1\n    - h2\n```\n\n----------------------------------------\n\nTITLE: Configuring DigestAuth Middleware in TOML File\nDESCRIPTION: Example of how to declare a user list for DigestAuth middleware in a TOML configuration file.\n\nLANGUAGE: toml\nCODE:\n```\n# Declaring the user list\n[http.middlewares]\n  [http.middlewares.test-auth.digestAuth]\n    users = [\n      \"test:traefik:a2688e031edb4be6a3797f3882655c05\",\n      \"test2:traefik:518845800f9e2bfb1f1f740ec24f074e\",\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Status Codes in Traefik with YAML Labels\nDESCRIPTION: Sets which HTTP status codes are considered successful responses for health checks.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.status=42\n```\n\n----------------------------------------\n\nTITLE: Configuring InFlightReq Middleware with Docker Labels\nDESCRIPTION: Sets up the inFlightReq middleware using Docker container labels to limit simultaneous connections to 10. This is commonly used in Docker Compose or Docker run commands.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-inflightreq.inflightreq.amount=10\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Options for Traefik TLS Challenge\nDESCRIPTION: Optional configuration lines for enabling debug logging and using Let's Encrypt's staging environment for testing purposes. Useful for troubleshooting certificate issuance without hitting production rate limits.\n\nLANGUAGE: yaml\nCODE:\n```\n#- \"--log.level=DEBUG\"\n#- \"--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ipAllowList Middleware with Tags in JSON\nDESCRIPTION: JSON tags configuration example showing how to set up the ipAllowList middleware to accept requests only from specific IP addresses (127.0.0.1/32 and 192.168.1.7).\n\nLANGUAGE: json\nCODE:\n```\n// Accepts request from defined IP\n{\n  \"Tags\" : [\n    \"traefik.http.middlewares.test-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32, 192.168.1.7\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Flag for Sticky Cookies in Traefik with YAML Labels\nDESCRIPTION: Sets the Secure flag on sticky session cookies, ensuring they are only sent over HTTPS connections.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.secure=true\n```\n\n----------------------------------------\n\nTITLE: Configuring SAN Domains for TLS Certificate in Traefik TCP Router\nDESCRIPTION: Defines Subject Alternative Names (SANs) for the TLS certificate, allowing the certificate to be valid for multiple domain names.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.domains[0].sans=test.example.org,dev.example.org\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain Middleware with Consul Catalog\nDESCRIPTION: Example of configuring a Chain middleware in Traefik using Consul Catalog. Demonstrates how to combine multiple middlewares (https-only, known-ips, auth-users) into a single 'secured' chain middleware.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.router1.service=service1\"\n- \"traefik.http.routers.router1.middlewares=secured\"\n- \"traefik.http.routers.router1.rule=Host(`mydomain`)\"\n- \"traefik.http.middlewares.secured.chain.middlewares=https-only,known-ips,auth-users\"\n- \"traefik.http.middlewares.auth-users.basicauth.users=test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"\n- \"traefik.http.middlewares.https-only.redirectscheme.scheme=https\"\n- \"traefik.http.middlewares.known-ips.ipallowlist.sourceRange=192.168.1.7,127.0.0.1/32\"\n- \"traefik.http.services.service1.loadbalancer.server.port=80\"\n```\n\n----------------------------------------\n\nTITLE: Setting excludedContentTypes in Docker & Swarm\nDESCRIPTION: Configures the Compress middleware in Docker/Swarm to exclude specific content types from compression, such as text/event-stream.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-compress.compress.excludedcontenttypes=text/event-stream\"\n```\n\n----------------------------------------\n\nTITLE: Declaring UDP Routers and Services in Traefik\nDESCRIPTION: Example showing how to configure both UDP routers and services. The router specifies which entry point to use, and the service defines the backend port.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.routers.my-router.entrypoints=udp\ntraefik.udp.services.my-service.loadbalancer.server.port=4123\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Dashboard with Basic Auth in Consul Catalog\nDESCRIPTION: Consul Catalog configuration for Traefik dashboard with basic authentication. This dynamic configuration uses service tags to define routing rules and middleware for protecting the dashboard with HTTP basic authentication.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Configuration\n- \"traefik.http.routers.dashboard.rule=Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\"\n- \"traefik.http.routers.dashboard.service=api@internal\"\n- \"traefik.http.routers.dashboard.middlewares=auth\"\n- \"traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Router Priority in Traefik\nDESCRIPTION: Assigns a priority to the TCP router which determines the order of evaluation when multiple routers match the same connection.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.routers.myrouter.priority=42\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Cluster Scope Resources via CLI\nDESCRIPTION: Command line option to disable discovery of cluster-scoped resources like IngressClass and Nodes, reducing required permissions.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.disableClusterScopeResources=true\n```\n\n----------------------------------------\n\nTITLE: Configuring UsersFile Option with Docker & Swarm\nDESCRIPTION: Demonstrates how to configure BasicAuth to use an external file containing authorized users in Docker or Swarm environments.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.basicauth.usersfile=/path/to/my/usersfile\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AddPrefix Middleware in TOML File\nDESCRIPTION: Example of how to configure the AddPrefix middleware in a TOML configuration file. This configuration adds the prefix '/foo' to all request paths before forwarding them.\n\nLANGUAGE: toml\nCODE:\n```\n# Prefixing with /foo\n[http.middlewares]\n  [http.middlewares.add-foo.addPrefix]\n    prefix = \"/foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring authRequestHeaders in Consul Catalog\nDESCRIPTION: Consul Catalog configuration for filtering headers passed to the authentication server.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.authRequestHeaders=Accept,X-CustomHeader\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Metrics in Traefik Helm Chart\nDESCRIPTION: Helm Chart values configuration to enable OpenTelemetry metrics while disabling the default Prometheus metrics. This configures Traefik to provide metrics in the OpenTelemetry format with HTTP export.\n\nLANGUAGE: yaml\nCODE:\n```\n# values.yaml\nmetrics:\n  # Disable Prometheus (enabled by default)\n  prometheus: null\n  # Enable providing OTel metrics\n  otlp:\n    enabled: true\n    http:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Tailscale ACL Configuration for Docker Networks\nDESCRIPTION: JSON configuration example for Tailscale ACLs to automatically approve routes for Docker subnet containers, necessary for Docker Desktop users running integration tests.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"autoApprovers\": {\n      // Allow myself to automatically\n      // advertize routes for docker networks\n      \"routes\": {\n        \"172.31.42.0/24\": [\"your_tailscale_identity\"],\n      },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Cipher Suites in TOML\nDESCRIPTION: Example of configuring specific cipher suites in TOML format. Allows restricting to specific cipher algorithms for TLS connections.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[tls.options]\n  [tls.options.default]\n    cipherSuites = [\n      \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring AddPrefix Middleware in TOML File\nDESCRIPTION: Example of how to configure the AddPrefix middleware in a TOML configuration file. This configuration adds the prefix '/foo' to all request paths before forwarding them.\n\nLANGUAGE: toml\nCODE:\n```\n# Prefixing with /foo\n[http.middlewares]\n  [http.middlewares.add-foo.addPrefix]\n    prefix = \"/foo\"\n```\n\n----------------------------------------\n\nTITLE: Specifying the Service for a Router in Traefik with ECS\nDESCRIPTION: Links a router to a specific service that will handle the requests after routing.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.service=myservice\n```\n\n----------------------------------------\n\nTITLE: IngressRouteUDP Basic Structure in YAML\nDESCRIPTION: Defines the basic structure and attributes of an IngressRouteUDP custom resource in Kubernetes for Traefik UDP routing. This includes entryPoints, routes, and service configuration with explanations for each field.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRouteUDP\nmetadata:\n  name: ingressrouteudpfoo\n\nspec:\n  entryPoints:                  # [1]\n    - fooudp\n  routes:                       # [2]\n  - services:                   # [3]\n    - name: foo                 # [4]\n      port: 8080                # [5]\n      weight: 10                # [6]\n      nativeLB: true            # [7]\n      nodePortLB: true          # [8]\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP ServersTransport with Termination Delay in Traefik\nDESCRIPTION: Example of configuring termination delay for TCP ServersTransport. This controls the deadline for fully terminating connections when one side initiates closing.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      terminationDelay: 100ms\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.serversTransports.mytransport]\n  terminationDelay = \"100ms\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  terminationDelay: 100ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirroring with Health Checks in TOML\nDESCRIPTION: TOML configuration for mirroring services with health checks. Sets up a system that mirrors 10% of traffic to a secondary service while monitoring the health of the primary service through regular status checks.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.mirrored-api]\n    [http.services.mirrored-api.mirroring]\n      service = \"appv1\"\n      [http.services.mirrored-api.mirroring.healthCheck]\n    [[http.services.mirrored-api.mirroring.mirrors]]\n      name = \"appv2\"\n      percent = 10\n\n  [http.services.appv1]\n    [http.services.appv1.loadBalancer]\n      [http.services.appv1.loadBalancer.healthCheck]\n        path = \"/health\"\n        interval = \"10s\"\n        timeout = \"3s\"\n      [[http.services.appv1.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n  [http.services.appv2]\n    [http.services.appv2.loadBalancer]\n      [http.services.appv1.loadBalancer.healthCheck]\n        path = \"/health\"\n        interval = \"10s\"\n        timeout = \"3s\"\n      [[http.services.appv2.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailscale Certificate Resolver in YAML\nDESCRIPTION: Basic configuration for a Tailscale certificate resolver in YAML format. This enables Traefik to request certificates from the Tailscale daemon.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n    myresolver:\n        tailscale: {}\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS on Traefik Router via Kubernetes Ingress Annotations\nDESCRIPTION: Example showing how to enable TLS on a Traefik router through Kubernetes Ingress annotations. The router.tls annotation explicitly enables TLS for the ingress routes.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.ingress.kubernetes.io/router.tls: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Default EntryPoint TCP Router Configuration in TOML\nDESCRIPTION: Example of a TCP router listening to all entry points by default in TOML format. The router uses HostSNI rule to match connections and enables TLS handling.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n\n[tcp.routers]\n  [tcp.routers.Router-1]\n    # By default, routers listen to every EntryPoints.\n    rule = \"HostSNI(`example.com`)\"\n    service = \"service-1\"\n    # will route TLS requests (and ignore non tls requests)\n    [tcp.routers.Router-1.tls]\n```\n\n----------------------------------------\n\nTITLE: Setting Path for Sticky Session Cookie in Traefik\nDESCRIPTION: Configures the URL path for which the sticky session cookie is valid. This restricts the cookie to specific parts of the application, limiting its scope for security purposes.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.sticky.cookie.path=/foobar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AddPrefix Middleware in Structured TOML\nDESCRIPTION: Example of how to configure the AddPrefix middleware in Traefik using structured TOML format. This configuration adds the prefix '/foo' to all request paths.\n\nLANGUAGE: toml\nCODE:\n```\n# Prefixing with /foo\n[http.middlewares]\n  [http.middlewares.add-foo.addPrefix]\n    prefix = \"/foo\"\n```\n\n----------------------------------------\n\nTITLE: Setting CA Server Name for ACME Authentication in Traefik\nDESCRIPTION: Configuration for specifying the CA server name used to authenticate an ACME server with an HTTPS certificate not issued by a trusted root CA.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      caServerName: \"my-server\"\n      # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  caServerName = \"my-server\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.caServerName=\"my-server\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Name for SNI in Traefik ServersTransport\nDESCRIPTION: Example of configuring the server name for SNI (Server Name Indication) in an HTTP ServersTransport. This affects the TLS handshake between Traefik and backend servers.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      serverName: \"myhost\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.serversTransports.mytransport]\n  serverName = \"myhost\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  serverName: \"test\"\n```\n\n----------------------------------------\n\nTITLE: Custom Network Configuration for Traefik in Docker Compose\nDESCRIPTION: Example Docker Compose configuration showing how to create and use a custom network with Traefik. This ensures Traefik can communicate with the containers it needs to expose.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.3\"\n\nnetworks:\n  traefiknet: {}\n\nservices:\n\n  traefik:\n    image: \"traefik:v3.4\"\n    ...\n    networks:\n      - traefiknet\n\n  whoami:\n    image: \"traefik/whoami\"\n    ...\n    networks:\n      - traefiknet\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Certificate Authority\nDESCRIPTION: Specifies the path to the certificate authority used for secure connections to Consul. Defaults to system bundle.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    endpoint:\n      tls:\n        ca: path/to/ca.crt\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog.endpoint.tls]\n  ca = \"path/to/ca.crt\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.endpoint.tls.ca=path/to/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Defining TCP Router Rule with HostSNI in Traefik\nDESCRIPTION: Configures a routing rule for TCP traffic using the HostSNI matcher to route based on the SNI value in TLS connections.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.routers.mytcprouter.rule=HostSNI(`example.com`)\"\n```\n\n----------------------------------------\n\nTITLE: Attaching Traefik Configuration Tags to Nomad Services\nDESCRIPTION: Demonstrates how to attach Traefik-specific tags to Nomad services for routing configuration.\n\nLANGUAGE: hcl\nCODE:\n```\n...\nservice {\n  name = \"myService\"\n  tags = [\n    \"traefik.http.routers.my-router.rule=Host(`example.com`)\",\n  ]\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Formatting Common Name Information in Certificate Headers\nDESCRIPTION: Shows how common name information is formatted in headers when info.issuer.commonName is set to true. The data is extracted from the issuer part of the certificate using the CN key and included in the header.\n\nLANGUAGE: text\nCODE:\n```\nCN=Simple Signing CA 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik with KV Providers\nDESCRIPTION: Examples of configuring Traefik using key-value providers like etcd, Redis, and ZooKeeper. These commands show how to set routing rules, services, and backend server URLs in different key-value stores.\n\nLANGUAGE: bash\nCODE:\n```\n# Set a router rule\netcdctl put /traefik/http/routers/my-router/rule \"Host(`example.com`)\"\n# Define the service associated with the router\netcdctl put /traefik/http/routers/my-router/service \"my-service\"\n# Set the backend server URL for the service\netcdctl put /traefik/http/services/my-service/loadbalancer/servers/0/url \"http://localhost:8080\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Set a router rule\nredis-cli set traefik/http/routers/my-router/rule \"Host(`example.com`)\"\n# Define the service associated with the router\nredis-cli set traefik/http/routers/my-router/service \"my-service\"\n# Set the backend server URL for the service\nredis-cli set traefik/http/services/my-service/loadbalancer/servers/0/url \"http://localhost:8080\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Set a router rule\ncreate /traefik/http/routers/my-router/rule \"Host(`example.com`)\"\n# Define the service associated with the router\ncreate /traefik/http/routers/my-router/service \"my-service\"\n# Set the backend server URL for the service\ncreate /traefik/http/services/my-service/loadbalancer/servers/0/url \"http://localhost:8080\"\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Provider Constraints with YAML, TOML and CLI\nDESCRIPTION: Examples showing how to set constraints on Docker containers for route creation. Constraints are expressions that Traefik matches against container labels to determine whether to create routes for a container.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    constraints: \"Label(`a.label.name`,`foo`)\"\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  constraints = \"Label(`a.label.name`,`foo`)\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.constraints=Label(`a.label.name`,`foo`)\n# ...\n```\n\n----------------------------------------\n\nTITLE: Whoami Service Output from Second Container\nDESCRIPTION: Sample output from the second instance of the 'whoami' service, showing a different hostname and IP address compared to the first instance.\n\nLANGUAGE: yaml\nCODE:\n```\nHostname: s458f154e1f1\nIP: 172.27.0.4\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting Refresh Interval in YAML\nDESCRIPTION: Configuration to define the polling interval in seconds for Docker Swarm Mode. This controls how frequently Traefik checks for changes in the Docker Swarm environment.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    refreshSeconds: 30\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Declaring TCP Routers and Services in Traefik\nDESCRIPTION: Demonstrates how to configure TCP routers and services using labels, including setting up TLS with SNI rules and specifying the backend service port.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.my-router.rule=HostSNI(`example.com`)\ntraefik.tcp.routers.my-router.tls=true\ntraefik.tcp.services.my-service.loadbalancer.server.port=4123\n```\n\n----------------------------------------\n\nTITLE: Setting Router Rule Syntax in Traefik with Consul Catalog\nDESCRIPTION: Sets the rule syntax version to v3 for a router named 'myrouter'. This option is deprecated and will be removed in the next major version.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.ruleSyntax=v3\n```\n\n----------------------------------------\n\nTITLE: Configuring authResponseHeaders in Docker & Swarm\nDESCRIPTION: Docker & Swarm configuration for specifying headers to copy from authentication server responses using ForwardAuth middleware.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret\"\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Port in Traefik\nDESCRIPTION: Configures a specific port to use for health check requests, which may differ from the service port.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/port\n```\n\n----------------------------------------\n\nTITLE: Default Common Format Log Example in Traefik\nDESCRIPTION: Shows the default setting for Traefik's log format, set to 'common' format which provides human-readable logs with timestamp, level, and message.\n\nLANGUAGE: plaintext\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Configuring ACME Default Certificate in TOML\nDESCRIPTION: Example of configuring Traefik to use an ACME provider (like Let's Encrypt) to generate the default certificate in TOML format.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[tls.stores]\n  [tls.stores.default.defaultGeneratedCert]\n    resolver = \"myresolver\"\n    [tls.stores.default.defaultGeneratedCert.domain]\n      main = \"example.org\"\n      sans = [\"foo.example.org\", \"bar.example.org\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose with Traefik Labels\nDESCRIPTION: A simple Docker Compose file demonstrating how to attach Traefik routing labels to a service in Swarm mode for hostname-based routing.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  my-container:\n    deploy:\n      labels:\n        - traefik.http.routers.my-container.rule=Host(`example.com`)\n        - traefik.http.services.my-container-service.loadbalancer.server.port=8080\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication Password in TOML\nDESCRIPTION: Setting the password for Basic HTTP authentication when connecting to a Docker daemon through an HTTP proxy using TOML. This provides security when accessing the Docker API.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  password = \"foo\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Client TLS Certificate and Key via CLI\nDESCRIPTION: Command line arguments to configure client certificates for mutual TLS authentication. Specify the paths to the certificate and private key files used for client authentication.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.http.tls.cert=path/to/foo.cert\n--providers.http.tls.key=path/to/foo.key\n```\n\n----------------------------------------\n\nTITLE: Cross-Provider Reference Format in Traefik\nDESCRIPTION: The format for referencing objects from other providers in Traefik. This is used when you need to reference a resource from a different provider's namespace.\n\nLANGUAGE: text\nCODE:\n```\n<resource-name>@<provider-name>\n```\n\n----------------------------------------\n\nTITLE: Setting UsersFile Option in DigestAuth with Kubernetes Secret\nDESCRIPTION: Shows how to use a Kubernetes Secret instead of usersFile for DigestAuth middleware in Kubernetes.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  digestAuth:\n    secret: authsecret\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: authsecret\n  namespace: default\n\ndata:\n  users: |2\n    dGVzdDokYXByMSRINnVza2trVyRJZ1hMUDZld1RyU3VCa1RycUU4d2ovCnRlc3QyOiRhcHIxJGQ5\n    aHI5SEJCJDRIeHdnVWlyM0hQNEVzZ2dQL1FObzAK\n```\n\n----------------------------------------\n\nTITLE: Example of Certificate Info Header Format\nDESCRIPTION: Demonstrates the format of the X-Forwarded-Tls-Client-Cert-Info header when all certificate details are selected in the info option.\n\nLANGUAGE: text\nCODE:\n```\nSubject=\"DC=org,DC=cheese,C=FR,C=US,ST=Cheese org state,ST=Cheese com state,L=TOULOUSE,L=LYON,O=Cheese,O=Cheese 2,CN=*.example.com\";Issuer=\"DC=org,DC=cheese,C=FR,C=US,ST=Signing State,ST=Signing State 2,L=TOULOUSE,L=LYON,O=Cheese,O=Cheese 2,CN=Simple Signing CA 2\";NB=\"1544094616\";NA=\"1607166616\";SAN=\"*.example.org,*.example.net,*.example.com,test@example.org,test@example.net,10.0.1.0,10.0.1.2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry HTTP Headers in YAML\nDESCRIPTION: Sets additional HTTP headers for OpenTelemetry logs export using YAML configuration. These headers will be sent with each request to the collector.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  otlp:\n    http:\n      headers:\n        foo: bar\n        baz: buz\n```\n\n----------------------------------------\n\nTITLE: Matching ALPN Protocol in Traefik TCP Router\nDESCRIPTION: Example of using ALPN matcher to match connections using the HTTP/2 protocol in Traefik TCP router configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nALPN(`h2`)\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Cookie Sessions in Traefik\nDESCRIPTION: Activates sticky sessions using cookies. When enabled, subsequent requests from the same client will be routed to the same backend server.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.sticky.cookie=true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Timeout in Traefik\nDESCRIPTION: Defines the maximum duration in seconds that Traefik will wait for a health check response before considering it failed.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.timeout=10\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for TCP Service Backend in Traefik\nDESCRIPTION: Configures whether to use TLS when communicating with the backend servers for a TCP service.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.services.mytcpservice.loadbalancer.server.tls=true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Secure Flag for Sticky Cookie in Traefik\nDESCRIPTION: Controls whether the sticky cookie has the Secure flag. When enabled, the cookie is only sent over HTTPS connections.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/sticky/cookie/secure\n```\n\n----------------------------------------\n\nTITLE: Enabling Access Logs for Router in Traefik with Consul Catalog\nDESCRIPTION: Controls whether the router 'myrouter' will produce access logs. This is part of the observability settings.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.routers.myrouter.observability.accesslogs=true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Datadog Address in Traefik using YAML\nDESCRIPTION: YAML configuration specifying the Datadog agent address for metrics export. This defines where Traefik should send the metrics data.\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  datadog:\n    address: 127.0.0.1:8125\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 Subnet for InFlightReq in YAML File\nDESCRIPTION: This snippet demonstrates how to configure the IPv6 subnet parameter for InFlightReq middleware in a YAML configuration file to transform IPv6 addresses.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-inflightreq:\n      inFlightReq:\n        sourceCriterion:\n          ipStrategy:\n            ipv6Subnet: 64\n```\n\n----------------------------------------\n\nTITLE: Configuring RedirectRegex Middleware in Kubernetes\nDESCRIPTION: Example showing how to define RedirectRegex middleware in Kubernetes using a Middleware custom resource. This configuration redirects requests from localhost to a different domain while preserving the path.\n\nLANGUAGE: yaml\nCODE:\n```\n# Redirect with domain replacement\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-redirectregex\nspec:\n  redirectRegex:\n    regex: ^http://localhost/(.*)\n    replacement: http://mydomain/${1}\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik TLS with CertResolver in Docker Swarm\nDESCRIPTION: Configuration for a Traefik router using deployment labels in Docker Swarm mode. Sets up a router with Host and Path rules, enables TLS, configures a certificate resolver, and defines the backend service port.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ndeploy:\n  labels:\n    - traefik.http.routers.blog.rule=Host(`example.com`) && Path(`/blog`)\n    - traefik.http.routers.blog.tls=true\n    - traefik.http.routers.blog.tls.certresolver=myresolver\n    - traefik.http.services.blog-svc.loadbalancer.server.port=8080\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Hostname in Traefik\nDESCRIPTION: Sets the hostname to use for health check requests. This hostname is used in the Host header of health check requests.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/hostname\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Routing Rule in TOML\nDESCRIPTION: Setting a custom default routing rule template in TOML format. This defines what routing rule to apply to a container if no rule is defined by a label, using Go templating.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  defaultRule = \"Host(`{{ .Name }}.{{ index .Labels \\\"customLabel\\\"}}`)\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Headers in YAML\nDESCRIPTION: Configures custom headers to be sent with HTTP requests in YAML format. This optional parameter allows adding authentication or other required headers when fetching configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  http:\n    headers:\n      name: value\n```\n\n----------------------------------------\n\nTITLE: Defining TCP Router Rules in Traefik\nDESCRIPTION: Sets the rule for matching incoming TCP connections. This example uses HostSNI to match requests based on the Server Name Indication TLS extension.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.rule=HostSNI(`example.com`)\n```\n\n----------------------------------------\n\nTITLE: Setting excludedContentTypes in TOML File\nDESCRIPTION: Configures the Compress middleware using TOML to exclude specific content types from compression.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-compress.compress]\n    excludedContentTypes = [\"text/event-stream\"]\n```\n\n----------------------------------------\n\nTITLE: Using the version Command in Traefik CLI\nDESCRIPTION: Shows how to use the 'version' command to display the current Traefik version information. This is a simple command with no additional arguments or flags.\n\nLANGUAGE: bash\nCODE:\n```\ntraefik version\n```\n\n----------------------------------------\n\nTITLE: Configuring Circuit Breaker with Latency Check using JSON Tags\nDESCRIPTION: Example of configuring a circuit breaker middleware in Traefik using JSON tags. This configuration creates a latency check that opens the circuit when the median latency exceeds 100ms.\n\nLANGUAGE: json\nCODE:\n```\n{\n  //...\n  \"Tags\" : [\n    \"traefik.http.middlewares.latency-check.circuitbreaker.expression=LatencyAtQuantileMS(50.0) > 100\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RedirectRegex Middleware in TOML File\nDESCRIPTION: Example showing how to define RedirectRegex middleware in a TOML configuration file. This configuration performs the same domain replacement redirection as the other examples.\n\nLANGUAGE: toml\nCODE:\n```\n# Redirect with domain replacement\n[http.middlewares]\n  [http.middlewares.test-redirectregex.redirectRegex]\n    regex = \"^http://localhost/(.*)\"\n    replacement = \"http://mydomain/${1}\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Whoami TCP Service for TLSRoute\nDESCRIPTION: Kubernetes manifest for deploying a whoami TCP service that can be targeted by a TLSRoute. Includes both Deployment and Service resources.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: whoamitcp\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: whoamitcp\n\n  template:\n    metadata:\n      labels:\n        app: whoamitcp\n    spec:\n      containers:\n        - name: whoami\n          image: traefik/whoamitcp\n          args:\n            - --port=:3000\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoamitcp\n  namespace: default\nspec:\n  selector:\n    app: whoamitcp\n  ports:\n    - port: 3000\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Ingress with TLS in YAML\nDESCRIPTION: Example Kubernetes Ingress definition with TLS configuration. In v2.2, it's not sufficient to only rely on a TLS section in the Ingress to enable HTTPS.\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Ingress\napiVersion: networking.k8s.io/v1beta1\nmetadata:\n  name: example\n\nspec:\n  tls:\n  - secretName: my-tls-secret\n\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: \"/foo\"\n        backend:\n          serviceName: example-com\n          servicePort: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Path in Traefik\nDESCRIPTION: Specifies the URL path used for health check requests to the backend service.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.path=/foo\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Router Priorities in Traefik with TOML\nDESCRIPTION: TOML configuration for explicitly setting router priorities in Traefik. Priority is set to 2 for the specific host router and 1 for the pattern-matching router.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.Router-1]\n    rule = \"HostRegexp(`[a-z]+\\.traefik\\.com`)\"\n    entryPoints = [\"web\"]\n    service = \"service-1\"\n    priority = 1\n  [http.routers.Router-2]\n    rule = \"Host(`foobar.traefik.com`)\"\n    entryPoints = [\"web\"]\n    priority = 2\n    service = \"service-2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HeaderField with Consul Catalog\nDESCRIPTION: Shows how to define a header field to store the authenticated user in Consul Catalog.\n\nLANGUAGE: json\nCODE:\n```\n- \"traefik.http.middlewares.my-auth.basicauth.headerField=X-WebAuth-User\"\n```\n\n----------------------------------------\n\nTITLE: Configuring StripPrefix Middleware in Consul Catalog\nDESCRIPTION: Configuration example for defining StripPrefix middleware in Consul Catalog to strip /foobar and /fiibar prefixes from URL paths.\n\nLANGUAGE: yaml\nCODE:\n```\n# Strip prefix /foobar and /fiibar\n- \"traefik.http.middlewares.test-stripprefix.stripprefix.prefixes=/foobar,/fiibar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PassTLSClientCert Middleware with PEM in TOML\nDESCRIPTION: This TOML configuration defines a middleware that passes the PEM-encoded client certificate in the X-Forwarded-Tls-Client-Cert header. It enables the pem option to include the full certificate.\n\nLANGUAGE: toml\nCODE:\n```\n# Pass the pem in the `X-Forwarded-Tls-Client-Cert` header.\n[http.middlewares]\n  [http.middlewares.test-passtlsclientcert.passTLSClientCert]\n    pem = true\n```\n\n----------------------------------------\n\nTITLE: Configuring ServersTransport Reference in Traefik\nDESCRIPTION: References a ServersTransport resource defined in the File provider or Kubernetes CRD. This determines how Traefik communicates with backend servers.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/serverstransport\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Timeout via CLI\nDESCRIPTION: Command-line option for setting a custom HTTP client timeout for Docker API connections. The value is in seconds, and 0 means no timeout is set.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.httpClientTimeout=300\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Provider Endpoint in YAML\nDESCRIPTION: Defines the HTTP endpoint that Traefik will poll for dynamic configuration in YAML format. The endpoint parameter is required and specifies the URL to fetch configuration from.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  http:\n    endpoint: \"http://127.0.0.1:9000/api\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Server URLs in Traefik Key-Value Store\nDESCRIPTION: Sets the URL for a load balancer server in a Traefik service. This configuration specifies the server endpoint that will receive traffic.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/servers/0/url\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Collection in Traefik using TOML Configuration\nDESCRIPTION: This snippet shows how to enable anonymous usage data collection in Traefik using TOML configuration file. The sendAnonymousUsage option is set to true to allow Traefik to collect anonymous usage statistics.\n\nLANGUAGE: toml\nCODE:\n```\n[global]\n  # Send anonymous usage data\n  sendAnonymousUsage = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik API with Basic Auth for Consul Catalog\nDESCRIPTION: Consul Catalog configuration for securing the Traefik API dashboard with basic authentication. This sets up service tags that Traefik will use to configure the router, service, and basic auth middleware.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Configuration\n- \"traefik.http.routers.api.rule=Host(`traefik.example.com`)\"\n- \"traefik.http.routers.api.service=api@internal\"\n- \"traefik.http.routers.api.middlewares=auth\"\n- \"traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: UseBindPortIP Configuration in TOML\nDESCRIPTION: This snippet demonstrates how to configure Traefik to use the IP/Port attached to the container's binding instead of its inner network IP/Port using TOML configuration.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  useBindPortIP = true\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Entry Points in Traefik with ECS\nDESCRIPTION: Defines which entry points the router should listen on. In this example, the router will listen on both web (HTTP) and websecure (HTTPS) entry points.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.entrypoints=web,websecure\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate Resolver for TCP Router in Traefik\nDESCRIPTION: Specifies which certificate resolver to use for obtaining TLS certificates. Certificate resolvers handle automatic certificate acquisition from providers like Let's Encrypt.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.certresolver=myresolver\n```\n\n----------------------------------------\n\nTITLE: Setting Max Age for Sticky Cookie in Traefik\nDESCRIPTION: Defines the lifetime in seconds for the sticky cookie, after which the browser will discard it.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.maxage=42\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Headers in Traefik\nDESCRIPTION: Configures custom headers that Traefik will send when performing health checks on backend services.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.headers.X-Foo=foobar\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Router Priority in Traefik\nDESCRIPTION: Assigns a priority to the router when multiple routers match the same connection. Higher values have greater priority when resolving conflicts.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.myrouter.priority=42\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Redirect Following in Traefik\nDESCRIPTION: Determines whether Traefik follows HTTP redirects during health checks. When enabled, Traefik will follow redirects to determine the service health status at the final destination.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.healthcheck.followredirects=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespaces to Watch via CLI\nDESCRIPTION: Command line option to limit which Kubernetes namespaces Traefik watches for Ingress resources.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.namespaces=default,production\n```\n\n----------------------------------------\n\nTITLE: Specific EntryPoints TCP Router Configuration in TOML\nDESCRIPTION: Example of a TCP router listening to specific entry points (websecure and other) in TOML format. The router uses HostSNI rule to match connections and enables TLS handling.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.routers]\n  [tcp.routers.Router-1]\n    # won't listen to entry point web\n    entryPoints = [\"websecure\", \"other\"]\n    rule = \"HostSNI(`example.com`)\"\n    service = \"service-1\"\n    # will route TLS requests (and ignore non tls requests)\n    [tcp.routers.Router-1.tls]\n```\n\n----------------------------------------\n\nTITLE: Sample TCP Request and Response Using netcat\nDESCRIPTION: Example of a TCP request to the whoami service using netcat and its corresponding response. Shows hostname and IP information returned by the service.\n\nLANGUAGE: shell\nCODE:\n```\n$ nc localhost 3000\n\nWHO\nHostname: whoamitcp-85d644bfc-ktzv4\nIP: 127.0.0.1\nIP: ::1\nIP: 10.42.1.4\nIP: fe80::b89e:85ff:fec2:7d21\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Router Using Docker Labels\nDESCRIPTION: Example showing how to configure a UDP router with Docker labels. This approach is useful when deploying services with Docker and you want to configure Traefik routing directly through container labels.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.udp.routers.Router-1.service=service-1\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics for Router with Docker Label\nDESCRIPTION: Example of enabling metrics for a specific router using a Docker label. This turns on metrics collection for observability purposes.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.observability.metrics=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Certificates for Secure Connection to Etcd\nDESCRIPTION: Sets the path to the public certificate and private key for secure client authentication with etcd. Both cert and key options must be used together.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  etcd:\n    tls:\n      cert: path/to/foo.cert\n      key: path/to/foo.key\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.etcd.tls]\n  cert = \"path/to/foo.cert\"\n  key = \"path/to/foo.key\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.etcd.tls.cert=path/to/foo.cert\n--providers.etcd.tls.key=path/to/foo.key\n```\n\n----------------------------------------\n\nTITLE: Configuring SameSite for Sticky Cookie in Traefik\nDESCRIPTION: Sets the SameSite attribute for the sticky cookie, controlling its behavior in cross-site requests.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.samesite=none\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Scheme in Traefik\nDESCRIPTION: Sets the URI scheme to use for health check requests. This determines whether Traefik uses HTTP or HTTPS for health checks.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/scheme\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Timeout in YAML\nDESCRIPTION: Setting a custom HTTP client timeout for Docker API connections in YAML format. The value is in seconds, and 0 means no timeout is set.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    httpClientTimeout: 300\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Maximum Active Connections in Traefik Rate Limit Middleware\nDESCRIPTION: Configuration examples for setting the maximum number of connections the Redis pool can allocate at a given time. Zero means there is no limit to the number of connections.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n    - \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.maxActiveConns=42\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-ratelimit\nspec:\n  rateLimit:\n    # ...\n    redis:\n      maxActiveConns: 42\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.maxActiveConns=42\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        # ...\n        redis:\n          maxActiveConns: 42\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    [http.middlewares.test-ratelimit.rateLimit.redis]\n      maxActiveConns = 42\n```\n\n----------------------------------------\n\nTITLE: Configuring InfluxDB v2 Metrics in Traefik using TOML\nDESCRIPTION: TOML configuration for enabling InfluxDB v2 metrics in Traefik, specifying the InfluxDB server address where metrics will be sent.\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.influxDB2]\n    address: http://localhost:8086\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Max Age in Traefik with YAML Labels\nDESCRIPTION: Sets the maximum age (in seconds) for sticky session cookies, determining how long they remain valid.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.maxage=42\n```\n\n----------------------------------------\n\nTITLE: Configuring Global HTTP to HTTPS Redirection in Traefik v2 with TOML\nDESCRIPTION: Example of global HTTP to HTTPS redirection in Traefik v2 using TOML format. The redirection is configured at the entryPoint level using HTTP redirections to redirect traffic from 'web' (HTTP) to 'websecure' (HTTPS) entryPoint.\n\nLANGUAGE: toml\nCODE:\n```\n# traefik.toml\n## static configuration\n\n[entryPoints.web]\n  address = \":80\"\n  [entryPoints.web.http.redirections.entryPoint]\n    to = \"websecure\"\n    scheme = \"https\"\n\n[entryPoints.websecure]\n  address = \":443\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Scheme in Traefik\nDESCRIPTION: Sets the URL scheme (http/https) to use for health check requests to backend servers.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/scheme\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Entry Points in TOML\nDESCRIPTION: Static configuration for defining entry points with TLS support in TOML format. This is used to expose an Ingress on ports 80 and 443.\n\nLANGUAGE: toml\nCODE:\n```\n# Static configuration\n\n[entryPoints.web]\n  address = \":80\"\n\n[entryPoints.websecure]\n  address = \":443\"\n  [entryPoints.websecure.http]\n    [entryPoints.websecure.http.tls]\n\n[providers.kubernetesIngress]\n```\n\n----------------------------------------\n\nTITLE: Enabling Local Agent Cache for Consul Catalog\nDESCRIPTION: Uses the local Consul agent's cache for catalog reads to improve performance.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    cache: true\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog]\n  cache = true\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.cache=true\n# ...\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificates for gRPC Client\nDESCRIPTION: Bash commands for generating a self-signed certificate for the gRPC client. This creates a certificate and key file with the common name 'frontend.local'.\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./frontend.key -out ./frontend.cert\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum TLS Version in YAML\nDESCRIPTION: Example of configuring minimum TLS version options in YAML format. This helps enforce security by requiring clients to use at least TLS 1.2 or TLS 1.3.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  options:\n    default:\n      minVersion: VersionTLS12\n\n    mintls13:\n      minVersion: VersionTLS13\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum TLS Version in YAML\nDESCRIPTION: Example of configuring minimum TLS version options in YAML format. This helps enforce security by requiring clients to use at least TLS 1.2 or TLS 1.3.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic configuration\n\ntls:\n  options:\n    default:\n      minVersion: VersionTLS12\n\n    mintls13:\n      minVersion: VersionTLS13\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Service Port in Traefik\nDESCRIPTION: Specifies the port where the TCP service is running on the backend. This tells Traefik which port to connect to on the backend server.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.mytcpservice.loadbalancer.server.port=423\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Configuration for Traefik File Provider\nDESCRIPTION: Specifies a directory path containing multiple configuration files for Traefik's file provider. This approach is recommended over using a single file.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  file:\n    directory: /path/to/config\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers]\n  [providers.file]\n    directory = \"/path/to/config\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.file.directory=/path/to/config\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Scheme in Traefik\nDESCRIPTION: Sets the URL scheme (http or https) that Traefik will use when performing health checks on backend services.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.scheme=http\n```\n\n----------------------------------------\n\nTITLE: Docker Labels for Explicit Router-Service Definition\nDESCRIPTION: Example showing how to explicitly link a router to a service using labels. The 'www-router' is explicitly linked to the 'www-service' for more control.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - traefik.http.routers.www-router.rule=Host(`example-a.com`)\n  # Explicit link between the router and the service\n  - traefik.http.routers.www-router.service=www-service\n  - traefik.http.services.www-service.loadbalancer.server.port=8000\n```\n\n----------------------------------------\n\nTITLE: Setting Sticky Cookie Name in Traefik\nDESCRIPTION: Defines the name of the cookie used for sticky sessions. This cookie is used to track which backend server should handle subsequent requests.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/sticky/cookie/name\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS CA Certificate for Nomad API Connection\nDESCRIPTION: Shows how to specify a custom certificate authority for secure connections to the Nomad API.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad:\n    endpoint:\n      tls:\n        ca: path/to/ca.crt\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad.endpoint.tls]\n  ca = \"path/to/ca.crt\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad.endpoint.tls.ca=path/to/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication Password via CLI\nDESCRIPTION: Command-line option for setting the password for Basic HTTP authentication when connecting to a Docker daemon through an HTTP proxy. This provides security when accessing the Docker API.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.password=\"foo\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Docker Labels for Explicit Router-Service Definition\nDESCRIPTION: Example showing how to explicitly link a router to a service using labels. The 'www-router' is explicitly linked to the 'www-service' for more control.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - traefik.http.routers.www-router.rule=Host(`example-a.com`)\n  # Explicit link between the router and the service\n  - traefik.http.routers.www-router.service=www-service\n  - traefik.http.services.www-service.loadbalancer.server.port=8000\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Basic Authentication Password\nDESCRIPTION: Sets the password for HTTP Basic Authentication when connecting to Consul.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    endpoint:\n      httpAuth:\n        password: test\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog.endpoint.httpAuth]\n  password = \"test\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.endpoint.httpauth.password=test\n```\n\n----------------------------------------\n\nTITLE: Allowing Connection Headers to Pass Through Traefik Middleware\nDESCRIPTION: Configuration to specify which Connection headers are allowed to pass through the middleware chain before their removal. This controls which headers from the Connection field can be preserved temporarily during request processing.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  web:\n    address: \":80\"\n    forwardedHeaders:\n      connection:\n        - foobar\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n\n    [entryPoints.web.forwardedHeaders]\n      connection = [\"foobar\"]\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.web.address=:80\n--entryPoints.web.forwardedHeaders.connection=foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Domain Main Name for TCP Router in Traefik\nDESCRIPTION: Sets the main domain name for the TLS certificate to be obtained by the certificate resolver.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.routers.mytcprouter.tls.domains[0].main=example.org\"\n```\n\n----------------------------------------\n\nTITLE: Defining TLS Options for TCP Router in Traefik\nDESCRIPTION: References a TLS options configuration for the TCP router, allowing customization of TLS parameters like minimum version, cipher suites, etc.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.routers.mytcprouter.tls.options=mysoptions\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sticky Cookie Path in Traefik with YAML Labels\nDESCRIPTION: Sets the path attribute for the sticky session cookie, restricting the cookie to specific URL paths.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.path=/foobar\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Timeout in Traefik\nDESCRIPTION: Configures the timeout for health check requests to backend servers in seconds.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/timeout\n```\n\n----------------------------------------\n\nTITLE: Configuring InFlightReq Middleware in Kubernetes\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes Middleware resource to limit simultaneous requests to 10 using Traefik's custom resource definition.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-inflightreq\nspec:\n  inFlightReq:\n    amount: 10\n```\n\n----------------------------------------\n\nTITLE: Referencing ServersTransport Resource for TCP Service in Traefik\nDESCRIPTION: Links a TCP service to a ServersTransport resource that defines connection settings for communication with backend servers.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.myservice.loadbalancer.serverstransport=foobar@file\n```\n\n----------------------------------------\n\nTITLE: Using System Certificate Pool in Traefik\nDESCRIPTION: Configuration for specifying whether the certificates pool must use a copy of the system certificate pool in Traefik's ACME resolver.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      caSystemCertPool: true\n      # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  caSystemCertPool = true\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.caSystemCertPool=true\n# ...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating API Pagination with cURL\nDESCRIPTION: Shows how to control pagination when accessing Traefik API endpoints using cURL. The example retrieves the second page of HTTP routers with 20 results per page using query parameters.\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://traefik.example.com:8080/api/http/routers?page=2&per_page=20\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Path in Traefik with YAML Labels\nDESCRIPTION: Sets the URL path to use for health check requests to the service.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.path=/foo\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Provider Poll Interval in TOML\nDESCRIPTION: Configures the polling interval for the HTTP provider in TOML format. This optional parameter defines how frequently Traefik checks the endpoint for configuration updates, defaulting to 5 seconds.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.http]\n  pollInterval = \"5s\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics for a Router in Traefik with ECS\nDESCRIPTION: Controls whether the router will produce metrics, which are useful for monitoring performance and usage statistics.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.routers.myrouter.observability.metrics=true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Response Forwarding Flush Interval in Traefik\nDESCRIPTION: Defines the interval for flushing the response buffer to clients. This affects how quickly clients receive partial responses.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/responseforwarding/flushinterval\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Middleware with Consul Catalog\nDESCRIPTION: Shows how to configure IP allowlist middleware using Consul Catalog. The example creates a middleware that restricts traffic to specific IP ranges and applies it to a router.\n\nLANGUAGE: yaml\nCODE:\n```\n# Create a middleware named `foo-ip-allowlist`\n- \"traefik.tcp.middlewares.foo-ip-allowlist.ipallowlist.sourcerange=127.0.0.1/32, 192.168.1.7\"\n# Apply the middleware named `foo-ip-allowlist` to the router named `router1`\n- \"traefik.tcp.routers.router1.middlewares=foo-ip-allowlist@consulcatalog\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Endpoints in Traefik\nDESCRIPTION: Defines how to access etcd by specifying the endpoints. The default value is '127.0.0.1:2379'.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  etcd:\n    endpoints:\n      - \"127.0.0.1:2379\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.etcd]\n  endpoints = [\"127.0.0.1:2379\"]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.etcd.endpoints=127.0.0.1:2379\n```\n\n----------------------------------------\n\nTITLE: Configuring EntryPoints with CLI Commands\nDESCRIPTION: Static configuration that defines web and mysql entrypoints on ports 80 and 3306 using CLI command line flags.\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.web.address=:80\n--entryPoints.mysql.address=:3306\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Discovery Scope\nDESCRIPTION: Controls whether Consul services are exposed by default. If false, only services with traefik.enable=true tag will be discovered.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    exposedByDefault: false\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog]\n  exposedByDefault = false\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.exposedByDefault=false\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Resolver for TCP Routers in Traefik (YAML and TOML)\nDESCRIPTION: This example shows how to configure a certificate resolver for a TCP router in Traefik to automatically obtain TLS certificates. This is used when you need to secure TCP connections with dynamic certificates.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  routers:\n    routerfoo:\n      rule: \"HostSNI(`snitest.com`)\"\n      tls:\n        certResolver: foo\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.routers]\n  [tcp.routers.routerfoo]\n    rule = \"HostSNI(`snitest.com`)\"\n    [tcp.routers.routerfoo.tls]\n      certResolver = \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router Entry Points in Traefik with YAML\nDESCRIPTION: Specifies the entry points that the TCP router will listen on. Multiple entry points can be provided as a comma-separated list.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.routers.mytcprouter.entrypoints=ep1,ep2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Pages Middleware in YAML\nDESCRIPTION: Example showing how to configure custom error pages for 5XX status codes (excluding 502 and 504) using YAML structured configuration. It defines status codes ranges, service to handle errors, and URL pattern.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Custom Error Page for 5XX Status Code excluding 502 and 504\nhttp:\n  middlewares:\n    test-errors:\n      errors:\n        status:\n          - \"500\"\n          - \"501\"\n          - \"503\"\n          - \"505-599\"\n        service: error-handler-service\n        query: \"/{status}.html\"\n\n  services:\n    # ... definition of the error-handler-service\n```\n\n----------------------------------------\n\nTITLE: Exposing Traefik Dashboard with Consul Catalog\nDESCRIPTION: Consul Catalog configuration for exposing the Traefik dashboard. Defines labels for creating a router for the dashboard with basic authentication middleware.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Configuration\n- \"traefik.http.routers.dashboard.rule=Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\"\n- \"traefik.http.routers.dashboard.service=api@internal\"\n- \"traefik.http.routers.dashboard.middlewares=auth\"\n- \"traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Terminating Status Code for Ping in Traefik\nDESCRIPTION: Configuration to customize the status code returned by the Ping endpoint during graceful shutdown. By default, it returns 503, but this can be changed to accommodate health check requirements of load balancers or orchestrators.\n\nLANGUAGE: yaml\nCODE:\n```\nping:\n  terminatingStatusCode: 204\n```\n\nLANGUAGE: toml\nCODE:\n```\n[ping]\n  terminatingStatusCode = 204\n```\n\nLANGUAGE: bash\nCODE:\n```\n--ping.terminatingStatusCode=204\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry gRPC TLS CA Certificate in TOML\nDESCRIPTION: Configures the certificate authority for secure connections to the OpenTelemetry Collector using gRPC with TOML. This is used to verify the collector's TLS certificate.\n\nLANGUAGE: toml\nCODE:\n```\n[log.otlp.grpc.tls]\n  ca = \"path/to/ca.crt\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics Buckets in Traefik\nDESCRIPTION: Environment variable that defines the buckets for latency metrics in Prometheus. The default values are set to capture common response time ranges.\n\nLANGUAGE: bash\nCODE:\n```\n0.100000, 0.300000, 1.200000, 5.000000\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS CA Certificate via CLI\nDESCRIPTION: Command line argument to set the certificate authority for secure HTTPS connections. Specifies the path to the CA certificate used for verifying the endpoint's certificate.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.http.tls.ca=path/to/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Setting UDP Router Service in Traefik\nDESCRIPTION: Associates a UDP router with a specific service that will handle the request.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.udp.routers.myudprouter.service=myservice\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing Strategy in Traefik\nDESCRIPTION: Defines the algorithm used to distribute traffic among backend servers. Options include round-robin, weighted, or power of two choices (p2c).\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/strategy\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted Services in TOML Format\nDESCRIPTION: TOML representation of a weighted load balancing configuration that distributes traffic between two services with health checks. Services are weighted in a 3:1 ratio with health check paths set to '/health'.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.app]\n    [http.services.app.weighted.healthCheck]\n    [[http.services.app.weighted.services]]\n      name = \"appv1\"\n      weight = 3\n    [[http.services.app.weighted.services]]\n      name = \"appv2\"\n      weight = 1\n\n  [http.services.appv1]\n    [http.services.appv1.loadBalancer]\n      [http.services.appv1.loadBalancer.healthCheck]\n        path = \"/health\"\n        interval = \"10s\"\n        timeout = \"3s\"\n      [[http.services.appv1.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n  [http.services.appv2]\n    [http.services.appv2.loadBalancer]\n      [http.services.appv2.loadBalancer.healthCheck]\n        path = \"/health\"\n        interval = \"10s\"\n        timeout = \"3s\"\n      [[http.services.appv2.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Setting Client TLS Certificate and Key in YAML\nDESCRIPTION: Configures client certificates for mutual TLS authentication in YAML format. These optional parameters specify the paths to the certificate and private key files used for client authentication.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  http:\n    tls:\n      cert: path/to/foo.cert\n      key: path/to/foo.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Routing Rule in Traefik\nDESCRIPTION: Environment variables for setting the default routing rule used by providers like ConsulCatalog and Docker. The default rule uses the normalized service name as the host.\n\nLANGUAGE: bash\nCODE:\n```\nHost(`{{ normalize .Name }}`)\n```\n\n----------------------------------------\n\nTITLE: Matching TCP Connections by IPv6 ClientIP in Traefik\nDESCRIPTION: Configuration example showing how to match TCP connections from a specific IPv6 address using the ClientIP matcher in Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\nClientIP(`::1`)\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Router Listening on All EntryPoints in TOML\nDESCRIPTION: Configuration example showing how to set up a UDP router that listens on all defined UDP EntryPoints using TOML format. The router will accept packets from all EntryPoints by default.\n\nLANGUAGE: toml\nCODE:\n```\n[udp.routers]\n  [udp.routers.Router-1]\n    # By default, routers listen to all UDP entrypoints,\n    # i.e. \"other\", and \"streaming\".\n    service = \"service-1\"\n```\n\n----------------------------------------\n\nTITLE: IngressRoute with Cross-Provider Middleware Reference\nDESCRIPTION: Example of a Kubernetes IngressRoute that uses a middleware defined in the file provider. Demonstrates cross-provider functionality in Kubernetes CRD.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutestripprefix\n\nspec:\n  entryPoints:\n    - web\n  routes:\n    - match: Host(`example.com`)\n      kind: Rule\n      services:\n        - name: whoami\n          port: 80\n      middlewares:\n        - name: add-foo-prefix@file\n        # namespace: bar\n        # A namespace specification such as above is ignored\n        # when the cross-provider syntax is used.\n```\n\n----------------------------------------\n\nTITLE: Configuring IPAllowList TCP Middleware in Kubernetes\nDESCRIPTION: Configures an IPAllowList TCP middleware in Traefik using Kubernetes CRD (Custom Resource Definition). This middleware restricts TCP connections to only the specified IP addresses.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: MiddlewareTCP\nmetadata:\n  name: test-ipallowlist\nspec:\n  ipAllowList:\n    sourceRange:\n      - 127.0.0.1/32\n      - 192.168.1.7\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Router Listening on All EntryPoints in YAML\nDESCRIPTION: Configuration example showing how to set up a UDP router that listens on all defined UDP EntryPoints. This snippet demonstrates the default behavior where a router will accept packets from all EntryPoints if none are explicitly specified.\n\nLANGUAGE: yaml\nCODE:\n```\nudp:\n  routers:\n    Router-1:\n      # By default, routers listen to all UDP entrypoints\n      # i.e. \"other\", and \"streaming\".\n      service: \"service-1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Metrics in Traefik using TOML\nDESCRIPTION: TOML configuration for enabling Datadog metrics in Traefik. This creates the necessary configuration structure for Datadog metrics export.\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.datadog]\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP/3 Advertised Port in Traefik\nDESCRIPTION: Configuration for specifying which UDP port to advertise as the HTTP/3 authority. This can be used to override the authority in the alt-svc header when the public facing port differs from Traefik's listening port.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  name:\n    http3:\n      advertisedPort: 443\n```\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints.name.http3]\n  advertisedPort = 443\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.name.http3.advertisedport=443\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Authority Path in TOML\nDESCRIPTION: TOML configuration for specifying the path to the certificate authority file used for Kubernetes client authentication.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress]\n  certAuthFilePath = \"/my/ca.crt\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik TLS with CertResolver in YAML File\nDESCRIPTION: File-based YAML configuration for Traefik. Defines a router with Host and Path matching rules and configures TLS with a certificate resolver in the Traefik dynamic configuration file.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    blog:\n      rule: \"Host(`example.com`) && Path(`/blog`)\"\n      tls:\n        certResolver: myresolver\n```\n\n----------------------------------------\n\nTITLE: Capturing Response Headers in Traces\nDESCRIPTION: Configuration to define which response headers should be added as attributes to trace spans. This applies to both client and server kind spans.\n\nLANGUAGE: yaml\nCODE:\n```\ntracing:\n  capturedResponseHeaders:\n    - X-CustomHeader\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tracing]\n  capturedResponseHeaders = [\"X-CustomHeader\"]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--tracing.capturedResponseHeaders[0]=X-CustomHeader\n```\n\n----------------------------------------\n\nTITLE: Configuring insecureSkipVerify for TLS via CLI\nDESCRIPTION: Command line argument to enable skipping TLS certificate verification. When set to true, allows Traefik to accept any certificate presented by the server without validation.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.http.tls.insecureSkipVerify=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Scheme in Traefik\nDESCRIPTION: Specifies whether health checks should use HTTP or HTTPS when connecting to the backend service. This allows using a different protocol for health checks than for regular service traffic.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.healthcheck.scheme=http\"\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Pod with Sticky Session Cookies using cURL\nDESCRIPTION: This bash command demonstrates how to use cURL to make a request with sticky session cookies at both load-balancing levels, targeting a specific pod at IP 10.42.0.6.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H Host:example.com -b \"lvl1=default-whoami1-80; lvl2=http://10.42.0.6:80\" http://localhost:8000/foo\n```\n\n----------------------------------------\n\nTITLE: Configuring peerCertURI in Traefik Server Transport\nDESCRIPTION: Configuration examples for setting the peerCertURI which defines the URI used to match against SAN URIs during server certificate verification.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      peerCertURI: foobar\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.serversTransports.mytransport]\n  peerCertURI = \"foobar\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  peerCertURI: foobar\n```\n\n----------------------------------------\n\nTITLE: Docker & Swarm Middleware Reference Configuration\nDESCRIPTION: Example of attaching a middleware (declared in file provider) to a Docker container through labels. Shows cross-provider reference syntax.\n\nLANGUAGE: yaml\nCODE:\n```\nyour-container: #\n  image: your-docker-image\n\n  labels:\n    # Attach add-foo-prefix@file middleware (declared in file)\n    - \"traefik.http.routers.my-container.middlewares=add-foo-prefix@file\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Header Name for InFlightReq in Consul Catalog\nDESCRIPTION: This snippet shows how to configure a request header name for InFlightReq middleware in Consul Catalog to group requests based on a specific header value.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-inflightreq.inflightreq.sourcecriterion.requestheadername=username\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EntryPoints in Static Configuration using TOML\nDESCRIPTION: Static configuration that defines web and mysql entrypoints on ports 80 and 3306 using TOML syntax.\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n  [entryPoints.mysql]\n    address = \":3306\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry HTTP Exporter via CLI\nDESCRIPTION: Configures Traefik to send logs to the OpenTelemetry Collector using HTTP protocol with command line interface. This is the default protocol when using OpenTelemetry.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.http=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress Provider Options in Traefik\nDESCRIPTION: Command line arguments for configuring the Kubernetes Ingress provider in Traefik. These options control how Traefik interacts with Kubernetes Ingress resources, including authentication, namespace selection, endpoint configuration, and service behavior.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress\n--providers.kubernetesingress.allowemptyservices\n--providers.kubernetesingress.allowexternalnameservices\n--providers.kubernetesingress.certauthfilepath\n--providers.kubernetesingress.disableclusterscoperesources\n--providers.kubernetesingress.disableingressclasslookup\n--providers.kubernetesingress.endpoint\n--providers.kubernetesingress.ingressclass\n--providers.kubernetesingress.ingressendpoint.hostname\n--providers.kubernetesingress.ingressendpoint.ip\n--providers.kubernetesingress.ingressendpoint.publishedservice\n--providers.kubernetesingress.labelselector\n--providers.kubernetesingress.namespaces\n--providers.kubernetesingress.nativelbbydefault\n--providers.kubernetesingress.throttleduration\n--providers.kubernetesingress.token\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP to HTTPS Redirection with HTTPRoute\nDESCRIPTION: This YAML snippet shows how to configure an HTTPRoute that redirects HTTP traffic to HTTPS using the RequestRedirect filter. It binds to the http section of the Traefik Gateway and specifies the scheme to be https.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: whoami-http\n  namespace: default\nspec:\n  parentRefs:\n    - name: traefik\n      sectionName: http\n      kind: Gateway\n\n  hostnames:\n    - whoami.localhost\n\n  rules:\n    - filters:\n        - type: RequestRedirect\n          requestRedirect:\n            scheme: https\n```\n\n----------------------------------------\n\nTITLE: Configuring External Account Binding for ACME with TOML\nDESCRIPTION: TOML configuration for setting up External Account Binding (EAB) with key identifier and HMAC key for external Certificate Authority integration.\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  [certificatesResolvers.myresolver.acme.eab]\n    kid = \"abc-keyID-xyz\"\n    hmacEncoded = \"abc-hmac-xyz\"\n```\n\n----------------------------------------\n\nTITLE: Setting PROXY Protocol Version for TCP Service in Traefik\nDESCRIPTION: Configures the PROXY protocol version to use when communicating with the backend service, allowing preservation of client connection information.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.services.mytcpservice.loadbalancer.proxyprotocol.version=1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PassTLSClientCert with Full Certificate Info in TOML\nDESCRIPTION: This TOML configuration defines a middleware that passes all available certificate information in the X-Forwarded-Tls-Client-Cert-Info header, including subject details, issuer information, validity dates, and SANs.\n\nLANGUAGE: toml\nCODE:\n```\n# Pass all the available info in the `X-Forwarded-Tls-Client-Cert-Info` header\n[http.middlewares]\n  [http.middlewares.test-passtlsclientcert.passTLSClientCert]\n    [http.middlewares.test-passtlsclientcert.passTLSClientCert.info]\n      notAfter = true\n      notBefore = true\n      sans = true\n      [http.middlewares.test-passtlsclientcert.passTLSClientCert.info.subject]\n        country = true\n        province = true\n        locality = true\n        organization = true\n        organizationalUnit = true\n        commonName = true\n        serialNumber = true\n        domainComponent = true\n      [http.middlewares.test-passtlsclientcert.passTLSClientCert.info.issuer]\n        country = true\n        province = true\n        locality = true\n        organization = true\n        commonName = true\n        serialNumber = true\n        domainComponent = true\n```\n\n----------------------------------------\n\nTITLE: Migrating YAML File Configuration from v1 to v2\nDESCRIPTION: Shows how to migrate a YAML file configuration from Traefik v1 to v2. The v2 configuration clearly separates routing rules, services, and middleware definitions, which were previously combined in the frontends and backends concepts.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  routers:\n    router0:\n      rule: \"Host(`test.localhost`) && PathPrefix(`/test`)\"\n      service: my-service\n      middlewares:\n        - auth\n\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - url: http://10.10.10.1:80\n          - url: http://10.10.10.2:80\n\n  middlewares:\n    auth:\n      basicAuth:\n        users:\n          - \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"\n          - \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Events Watch in YAML\nDESCRIPTION: Configuration to control whether Traefik watches Docker events. When enabled, Traefik reacts immediately to changes in the Docker Swarm environment.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    watch: false\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Including Traefik Docker Swarm configuration files in YAML\nDESCRIPTION: This snippet shows how to include Traefik configuration files using the file inclusion syntax. It references both Swarm-specific configuration and general Docker label configuration files.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  --8<-- \"content/reference/dynamic-configuration/swarm.yml\"\n  --8<-- \"content/reference/dynamic-configuration/docker-labels.yml\"\n```\n\n----------------------------------------\n\nTITLE: Testing TLSRoute with OpenSSL\nDESCRIPTION: Shell command using OpenSSL to test a TLS connection to the Gateway with the 'whoami.localhost' SNI, showing the expected response from the whoami service.\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl s_client -quiet -connect localhost:3443 -servername whoami.localhost\nConnecting to ::1\ndepth=0 C=FR, L=Lyon, O=Traefik Labs, CN=Whoami\nverify error:num=18:self-signed certificate\nverify return:1\ndepth=0 C=FR, L=Lyon, O=Traefik Labs, CN=Whoami\nverify return:1\n\nWHO\nHostname: whoamitcp-85d644bfc-hnmdz\nIP: 127.0.0.1\nIP: ::1\nIP: 10.42.2.4\nIP: fe80::d873:20ff:fef5:be86\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP/2 in Traefik Server Transport\nDESCRIPTION: Configuration examples for disabling HTTP/2 for connections with backend servers in Traefik using YAML, TOML, and Kubernetes formats.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      disableHTTP2: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.serversTransports.mytransport]\n  disableHTTP2 = true\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  disableHTTP2: true\n```\n\n----------------------------------------\n\nTITLE: Setting Refresh Interval in CLI\nDESCRIPTION: Command line flag to define the polling interval in seconds for Docker Swarm Mode. This controls how frequently Traefik checks for changes in the Docker Swarm environment.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm.refreshSeconds=30\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Realm with YAML File\nDESCRIPTION: Demonstrates how to customize the authentication realm for BasicAuth middleware in a YAML configuration file.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      basicAuth:\n        realm: \"MyRealm\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Service Backend Port in Traefik\nDESCRIPTION: Specifies the port number that the backend service is listening on for TCP connections.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.mytcpservice.loadbalancer.server.port=423\n```\n\n----------------------------------------\n\nTITLE: Configuring REST and Docker Swarm Provider Options in Traefik\nDESCRIPTION: Command line arguments for configuring the REST and Docker Swarm providers in Traefik. These options control how Traefik interacts with the REST API and Docker Swarm services, including authentication, service selection, and networking behavior.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.rest\n--providers.rest.insecure\n--providers.swarm\n--providers.swarm.allowemptyservices\n--providers.swarm.constraints\n--providers.swarm.defaultrule\n--providers.swarm.endpoint\n--providers.swarm.exposedbydefault\n--providers.swarm.httpclienttimeout\n--providers.swarm.network\n--providers.swarm.password\n--providers.swarm.refreshseconds\n--providers.swarm.tls.ca\n--providers.swarm.tls.cert\n--providers.swarm.tls.insecureskipverify\n--providers.swarm.tls.key\n--providers.swarm.usebindportip\n--providers.swarm.username\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Flag for Sticky Cookie in Kubernetes Ingress\nDESCRIPTION: Controls whether the sticky session cookie should be sent only over HTTPS connections.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.ingress.kubernetes.io/service.sticky.cookie.secure: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AddPrefix Middleware with Traefik Labels\nDESCRIPTION: Example of how to configure the AddPrefix middleware in Traefik using container labels. This configuration adds the prefix '/foo' to all request paths.\n\nLANGUAGE: yaml\nCODE:\n```\n# Prefixing with /foo\nlabels:\n  - \"traefik.http.middlewares.add-foo.addprefix.prefix=/foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Provider Options in Traefik\nDESCRIPTION: Command line arguments for configuring the Nomad provider in Traefik. These options control how Traefik interacts with Nomad services, including authentication, endpoint configuration, service selection, and event watching behavior.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad\n--providers.nomad.allowemptyservices\n--providers.nomad.constraints\n--providers.nomad.defaultrule\n--providers.nomad.endpoint.address\n--providers.nomad.endpoint.endpointwaittime\n--providers.nomad.endpoint.region\n--providers.nomad.endpoint.tls.ca\n--providers.nomad.endpoint.tls.cert\n--providers.nomad.endpoint.tls.insecureskipverify\n--providers.nomad.endpoint.tls.key\n--providers.nomad.endpoint.token\n--providers.nomad.exposedbydefault\n--providers.nomad.namespaces\n--providers.nomad.prefix\n--providers.nomad.refreshinterval\n--providers.nomad.stale\n--providers.nomad.throttleduration\n--providers.nomad.watch\n```\n\n----------------------------------------\n\nTITLE: Setting authResponseHeadersRegex in Docker & Swarm\nDESCRIPTION: Docker & Swarm configuration for using regex to match and copy headers from authentication server responses.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.authResponseHeadersRegex=^X-\"\n```\n\n----------------------------------------\n\nTITLE: Enabling InsecureSkipVerify for OpenTelemetry HTTP TLS via CLI\nDESCRIPTION: Configures Traefik to skip TLS certificate verification for OpenTelemetry HTTP connections using command line interface. This is not recommended for production environments.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.http.tls.insecureSkipVerify=true\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Retry Middleware in Kubernetes\nDESCRIPTION: Example of how to configure the Retry middleware in Kubernetes using a Custom Resource Definition with 4 retry attempts and exponential backoff starting at 100ms.\n\nLANGUAGE: yaml\nCODE:\n```\n# Retry 4 times with exponential backoff\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-retry\nspec:\n  retry:\n    attempts: 4\n    initialInterval: 100ms\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Routing with HTTPRoute\nDESCRIPTION: This YAML defines an HTTPRoute for HTTPS traffic that routes to a whoami service. It binds to the https section of the Traefik Gateway and specifies path matching and backend reference to the whoami service.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: whoami-https\n  namespace: default\nspec:\n  parentRefs:\n    - name: traefik\n      sectionName: https\n      kind: Gateway\n\n  hostnames:\n    - whoami.localhost\n\n  rules:\n    - matches:\n        - path:\n            type: PathPrefix\n            value: /\n\n      backendRefs:\n        - name: whoami\n          namespace: default\n          port: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Routing with HTTPRoute\nDESCRIPTION: This YAML defines an HTTPRoute for HTTPS traffic that routes to a whoami service. It binds to the https section of the Traefik Gateway and specifies path matching and backend reference to the whoami service.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: whoami-https\n  namespace: default\nspec:\n  parentRefs:\n    - name: traefik\n      sectionName: https\n      kind: Gateway\n\n  hostnames:\n    - whoami.localhost\n\n  rules:\n    - matches:\n        - path:\n            type: PathPrefix\n            value: /\n\n      backendRefs:\n        - name: whoami\n          namespace: default\n          port: 80\n```\n\n----------------------------------------\n\nTITLE: Enabling Stale Consistency for Nomad API Reads\nDESCRIPTION: Configuration examples showing how to enable stale consistency for faster Nomad service API reads, with different configuration formats.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad:\n    stale: true\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad]\n  stale = true\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad.stale=true\n# ...\n```\n\n----------------------------------------\n\nTITLE: Linking TCP Router to Service in Traefik\nDESCRIPTION: Specifies which service the TCP router should forward matched connections to. Refers to a service defined elsewhere in the configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.service=myservice\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPRoute with Traefik Middleware Filter\nDESCRIPTION: HTTPRoute configuration that uses a Traefik middleware as an ExtensionRef filter to modify requests before they reach the backend service.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: whoami-http\n  namespace: default\nspec:\n  parentRefs:\n    - name: traefik\n      sectionName: http\n      kind: Gateway\n\n  hostnames:\n    - whoami.localhost\n\n  rules:\n    - backendRefs:\n        - name: whoami\n          namespace: default\n          port: 80\n\n      filters:\n        - type: ExtensionRef\n          extensionRef:\n            group: traefik.io\n            kind: Middleware\n            name: add-prefix\n```\n\n----------------------------------------\n\nTITLE: Setting maxIdleConnsPerHost in Traefik Server Transport\nDESCRIPTION: Configuration examples for controlling the maximum idle connections per host in Traefik server transport using YAML, TOML, and Kubernetes formats.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      maxIdleConnsPerHost: 7\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.serversTransports.mytransport]\n  maxIdleConnsPerHost = 7\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  maxIdleConnsPerHost: 7\n```\n\n----------------------------------------\n\nTITLE: Configuring UseBindPortIP in YAML\nDESCRIPTION: Configuration to make Traefik route requests to the external IP/port of container bindings instead of the internal network IP/port. This affects how Traefik routes traffic to containers.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    useBindPortIP: true\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Headers in Traefik\nDESCRIPTION: Configures custom headers for health check requests to backend servers. These headers are included when Traefik sends health check requests.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/headers/X-Foo\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpOnly Flag for Sticky Cookie in Kubernetes Ingress\nDESCRIPTION: Controls whether the sticky session cookie should be accessible only through HTTP requests and not JavaScript.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.ingress.kubernetes.io/service.sticky.cookie.httponly: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpOnly Flag for Sticky Cookie in Kubernetes Ingress\nDESCRIPTION: Controls whether the sticky session cookie should be accessible only through HTTP requests and not JavaScript.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.ingress.kubernetes.io/service.sticky.cookie.httponly: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Router Priority in Traefik\nDESCRIPTION: Assigns a priority to a TCP router for rule evaluation order. Higher values have higher priority when multiple routers match a request.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.routers.mytcprouter.priority=42\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Interval in Traefik with YAML Labels\nDESCRIPTION: Sets the frequency of health check executions. The value is specified in seconds.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.interval=10\n```\n\n----------------------------------------\n\nTITLE: Enabling Entry Points Labels in Datadog Metrics\nDESCRIPTION: Configures whether to include entry points labels in the metrics exported to Datadog. This option is enabled by default.\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  datadog:\n    addEntryPointsLabels: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.datadog]\n    addEntryPointsLabels = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--metrics.datadog.addEntryPointsLabels=true\n```\n\n----------------------------------------\n\nTITLE: Configuring ServersTransport with Docker Labels\nDESCRIPTION: Example showing how to configure ServersTransport for a TCP service using Docker container labels.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.tcp.services.Service01.loadBalancer.serversTransport=mytransport\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Hostname in Traefik\nDESCRIPTION: Sets the hostname to use in the Host header when Traefik performs health checks on backend services.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.hostname=example.org\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router Priority in YAML Format\nDESCRIPTION: Example of configuring multiple TCP routers with different priorities in YAML format to handle specific client IP addresses.\n\nLANGUAGE: yaml\nCODE:\n```\ntcp:\n  routers:\n    Router-1:\n      rule: \"ClientIP(`192.168.0.12`)\"\n      entryPoints:\n      - \"web\"\n      service: service-1\n      priority: 2\n    Router-2:\n      rule: \"ClientIP(`192.168.0.0/24`)\"\n      entryPoints:\n      - \"web\"\n      priority: 1\n      service: service-2\n```\n\n----------------------------------------\n\nTITLE: Configuring AddPrefix Middleware in Structured YAML\nDESCRIPTION: Example of how to configure the AddPrefix middleware in Traefik using structured YAML format. This configuration adds the prefix '/foo' to all request paths.\n\nLANGUAGE: yaml\nCODE:\n```\n# Prefixing with /foo\nhttp:\n  middlewares:\n    add-foo:\n      addPrefix:\n        prefix: \"/foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Router Entry Points in Traefik\nDESCRIPTION: Sets the entry points for a UDP router in Traefik, defining where Traefik listens for UDP traffic.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.routers.myudprouter.entrypoints=ep1,ep2\n```\n\n----------------------------------------\n\nTITLE: Configuring Pass Host Header in Kubernetes Ingress\nDESCRIPTION: Controls whether Traefik passes the Host header from the incoming request to the backend service.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.ingress.kubernetes.io/service.passhostheader: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Service with a Single Server in Traefik\nDESCRIPTION: Example of declaring a TCP service with a single backend server using the File Provider. This configuration shows the basic setup for connecting to a TCP backend.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - address: \"xx.xx.xx.xx:xx\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.services]\n  [tcp.services.my-service.loadBalancer]\n    [[tcp.services.my-service.loadBalancer.servers]]\n      address = \"xx.xx.xx.xx:xx\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Traefik Help Information\nDESCRIPTION: Commands to display available command-line arguments for Traefik, either running natively or as a Docker container. This helps users discover all configuration options.\n\nLANGUAGE: bash\nCODE:\n```\ntraefik --help\n\n# or\n\ndocker run traefik[:version] --help\n# ex: docker run traefik:v3.4 --help\n```\n\n----------------------------------------\n\nTITLE: Setting authResponseHeadersRegex in Kubernetes\nDESCRIPTION: Kubernetes manifest for using regex to match and copy headers from authentication server responses.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    address: https://example.com/auth\n    authResponseHeadersRegex: ^X-\n```\n\n----------------------------------------\n\nTITLE: Configuring Servers Transport for TCP Service\nDESCRIPTION: References a ServersTransport resource for customizing communication parameters with backends. Can be defined in File provider or Kubernetes CRD.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.<service_name>.loadbalancer.serverstransport=foobar@file\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Metrics HTTP Endpoint in Traefik\nDESCRIPTION: Environment variable used to set the HTTP endpoint for the OpenTelemetry collector. The default value is https://localhost:4318.\n\nLANGUAGE: bash\nCODE:\n```\nhttps://localhost:4318\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Status in Traefik\nDESCRIPTION: Specifies expected HTTP status code(s) that indicate a healthy backend server. Traefik uses this to determine if a server is functioning properly.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/status\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Port in Traefik with YAML Labels\nDESCRIPTION: Specifies a port to use for health checks, which can be different from the service port.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.port=42\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Logs via CLI Arguments\nDESCRIPTION: Command-line arguments for configuring Traefik system logs. These flags can be used when starting Traefik to specify log file path, format, and level without needing a configuration file.\n\nLANGUAGE: sh\nCODE:\n```\n--log.filePath=/path/to/log-file.log\n--log.format=json\n--log.level=INFO\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes Rights in Kubernetes Provider RBACs\nDESCRIPTION: YAML configuration for adding nodes resource rights to Kubernetes provider RBACs. This is needed for NodePort load-balancing functionality introduced in Traefik v3.1.\n\nLANGUAGE: yaml\nCODE:\n```\n  ...\n  - apiGroups:\n      - \"\"\n    resources:\n      - nodes\n    verbs:\n      - get\n      - list\n      - watch\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Server Address\nDESCRIPTION: Shows how to set the address of the Nomad server endpoint for connecting to the Nomad API.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad:\n    endpoint:\n      address: http://127.0.0.1:4646\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad]\n  [providers.nomad.endpoint]\n    address = \"http://127.0.0.1:4646\"\n    # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad.endpoint.address=http://127.0.0.1:4646\n# ...\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via SSH in TOML\nDESCRIPTION: Configuration for connecting Traefik to a remote Docker daemon using SSH in TOML format. This requires Docker 18.09+ and proper SSH key authentication setup for the Traefik user.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.swarm]\n  endpoint = \"ssh://traefik@192.168.2.5:2022\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring ContentType Middleware with Labels\nDESCRIPTION: Example of enabling content type auto-detection middleware using Docker or service labels in Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\n# Enable auto-detection\nlabels:\n  - \"traefik.http.middlewares.autodetect.contenttype=true\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Service in Traefik Configuration\nDESCRIPTION: Controls whether Traefik should expose this service, overriding the global exposedByDefault setting.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.enable=true\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS on Traefik Entrypoint via YAML Configuration\nDESCRIPTION: Configures TLS termination through static configuration on a Traefik entrypoint using YAML format.\n\nLANGUAGE: yaml\nCODE:\n```\n# Static configuration\nentryPoints:\n  websecure:\n    address: ':443'\n    http:\n      tls: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Router with Specific EntryPoints in TOML\nDESCRIPTION: Dynamic configuration of an HTTP router that listens only to specific entry points (websecure and other, but not web) using TOML syntax.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.Router-1]\n    # won't listen to entry point web\n    entryPoints = [\"websecure\", \"other\"]\n    rule = \"Host(`example.com`)\"\n    service = \"service-1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Path for Sticky Cookie in Kubernetes Ingress\nDESCRIPTION: Configures the path attribute for the sticky session cookie, determining to which paths the cookie should be sent.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.ingress.kubernetes.io/service.sticky.cookie.path: /foobar\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Service for whoami Application\nDESCRIPTION: YAML configuration for exposing the whoami application through a Kubernetes Service. This service selects pods with the app=whoami label and forwards traffic to the web port (80).\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoami\n\nspec:\n  ports:\n    - name: web\n      port: 80\n      targetPort: web\n      \n  selector:\n    app: whoami\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Logs in Experimental Section using YAML\nDESCRIPTION: Activates the experimental OpenTelemetry logs feature in Traefik using YAML configuration. This must be explicitly enabled before using OpenTelemetry for logs.\n\nLANGUAGE: yaml\nCODE:\n```\nexperimental:\n  otlpLogs: true\n```\n\n----------------------------------------\n\nTITLE: Docker Labels for Automatic Service Assignment\nDESCRIPTION: Example showing how Traefik automatically assigns a service to a router when using labels. The service 'myservice' is automatically assigned to the router 'myproxy'.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.routers.myproxy.rule=Host(`example.net`)\"\n  # service myservice gets automatically assigned to router myproxy\n  - \"traefik.http.services.myservice.loadbalancer.server.port=80\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ServersTransport with rootCAs in Kubernetes CRDs\nDESCRIPTION: YAML configuration example for using the new rootCAs option in ServersTransport and ServersTransportTCP CRDs. This replaces the deprecated rootCAsSecrets option in Traefik v3.4.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: foo\n  namespace: bar\nspec:\n  rootCAs:\n    - configMap: ca-config-map\n    - secret: ca-secret\n      \n---      \napiVersion: traefik.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: foo\n  namespace: bar\nspec:\n  rootCAs:\n    - configMap: ca-config-map\n    - secret: ca-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring SameSite for Sticky Cookies in Traefik with YAML Labels\nDESCRIPTION: Sets the SameSite attribute for sticky session cookies, controlling when cookies are sent with cross-site requests.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.samesite=none\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Provider Poll Interval in YAML\nDESCRIPTION: Configures the polling interval for the HTTP provider in YAML format. This optional parameter defines how frequently Traefik checks the endpoint for configuration updates, defaulting to 5 seconds.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  http:\n    pollInterval: \"5s\"\n```\n\n----------------------------------------\n\nTITLE: Setting Path for Sticky Cookie in Kubernetes Ingress\nDESCRIPTION: Configures the path attribute for the sticky session cookie, determining to which paths the cookie should be sent.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.ingress.kubernetes.io/service.sticky.cookie.path: /foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Router with Specific EntryPoints in YAML\nDESCRIPTION: Configuration example showing how to set up a UDP router that listens only on specific EntryPoints. This snippet restricts the router to only accept packets from the 'streaming' EntryPoint.\n\nLANGUAGE: yaml\nCODE:\n```\nudp:\n  routers:\n    Router-1:\n      # does not listen on \"other\" entry point\n      entryPoints:\n        - \"streaming\"\n      service: \"service-1\"\n```\n\n----------------------------------------\n\nTITLE: Domain Definition Using tls.domains in Kubernetes\nDESCRIPTION: Kubernetes IngressRoute configuration that explicitly defines the domain using tls.domains. Specifies a Tailscale domain and references the certificate resolver.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: blogtls\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - match: Path(`/metrics`)\n      kind: Rule\n      services:\n        - name: blog\n          port: 8080\n  tls:\n    certResolver: myresolver\n    domains:\n      - main: monitoring.yak-bebop.ts.net\n```\n\n----------------------------------------\n\nTITLE: Example Certificate for PassTLSClientCert Middleware in Traefik\nDESCRIPTION: A sample X.509 certificate showing the complete structure that would be processed by the passTLSClientCert middleware. This example demonstrates the certificate format including issuer information, validity dates, subject details, and extensions that would be extracted and passed in the request headers.\n\nLANGUAGE: txt\nCODE:\n```\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 1 (0x1)\n        Signature Algorithm: sha1WithRSAEncryption\n        Issuer: DC=org, DC=cheese, O=Cheese, O=Cheese 2, OU=Simple Signing Section, OU=Simple Signing Section 2, CN=Simple Signing CA, CN=Simple Signing CA 2, C=FR, C=US, L=TOULOUSE, L=LYON, ST=Signing State, ST=Signing State 2/emailAddress=simple@signing.com/emailAddress=simple2@signing.com\n        Validity\n            Not Before: Dec  6 11:10:16 2018 GMT\n            Not After : Dec  5 11:10:16 2020 GMT\n        Subject: DC=org, DC=cheese, O=Cheese, O=Cheese 2, OU=Simple Signing Section, OU=Simple Signing Section 2, CN=*.example.org, CN=*.example.com, C=FR, C=US, L=TOULOUSE, L=LYON, ST=Cheese org state, ST=Cheese com statemailAddress=cert@example.org/emailAddress=cert@sexample.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (2048 bit)\n                Modulus:\n                    00:de:77:fa:8d:03:70:30:39:dd:51:1b:cc:60:db:\n                    a9:5a:13:b1:af:fe:2c:c6:38:9b:88:0a:0f:8e:d9:\n                    1b:a1:1d:af:0d:66:e4:13:5b:bc:5d:36:92:d7:5e:\n                    d0:fa:88:29:d3:78:e1:81:de:98:b2:a9:22:3f:bf:\n                    8a:af:12:92:63:d4:a9:c3:f2:e4:7e:d2:dc:a2:c5:\n                    39:1c:7a:eb:d7:12:70:63:2e:41:47:e0:f0:08:e8:\n                    dc:be:09:01:ec:28:09:af:35:d7:79:9c:50:35:d1:\n                    6b:e5:87:7b:34:f6:d2:31:65:1d:18:42:69:6c:04:\n                    11:83:fe:44:ae:90:92:2d:0b:75:39:57:62:e6:17:\n                    2f:47:2b:c7:53:dd:10:2d:c9:e3:06:13:d2:b9:ba:\n                    63:2e:3c:7d:83:6b:d6:89:c9:cc:9d:4d:bf:9f:e8:\n                    a3:7b:da:c8:99:2b:ba:66:d6:8e:f8:41:41:a0:c9:\n                    d0:5e:c8:11:a4:55:4a:93:83:87:63:04:63:41:9c:\n                    fb:68:04:67:c2:71:2f:f2:65:1d:02:5d:15:db:2c:\n                    d9:04:69:85:c2:7d:0d:ea:3b:ac:85:f8:d4:8f:0f:\n                    c5:70:b2:45:e1:ec:b2:54:0b:e9:f7:82:b4:9b:1b:\n                    2d:b9:25:d4:ab:ca:8f:5b:44:3e:15:dd:b8:7f:b7:\n                    ee:f9\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Basic Constraints:\n                CA:FALSE\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication, TLS Web Client Authentication\n            X509v3 Subject Key Identifier:\n                94:BA:73:78:A2:87:FB:58:28:28:CF:98:3B:C2:45:70:16:6E:29:2F\n            X509v3 Authority Key Identifier:\n                keyid:1E:52:A2:E8:54:D5:37:EB:D5:A8:1D:E4:C2:04:1D:37:E2:F7:70:03\n\n            X509v3 Subject Alternative Name:\n                DNS:*.example.org, DNS:*.example.net, DNS:*.example.com, IP Address:10.0.1.0, IP Address:10.0.1.2, email:test@example.org, email:test@example.net\n    Signature Algorithm: sha1WithRSAEncryption\n        76:6b:05:b0:0e:34:11:b1:83:99:91:dc:ae:1b:e2:08:15:8b:\n        16:b2:9b:27:1c:02:ac:b5:df:1b:d0:d0:75:a4:2b:2c:5c:65:\n        ed:99:ab:f7:cd:fe:38:3f:c3:9a:22:31:1b:ac:8c:1c:c2:f9:\n        5d:d4:75:7a:2e:72:c7:85:a9:04:af:9f:2a:cc:d3:96:75:f0:\n        8e:c7:c6:76:48:ac:45:a4:b9:02:1e:2f:c0:15:c4:07:08:92:\n        cb:27:50:67:a1:c8:05:c5:3a:b3:a6:48:be:eb:d5:59:ab:a2:\n        1b:95:30:71:13:5b:0a:9a:73:3b:60:cc:10:d0:6a:c7:e5:d7:\n        8b:2f:f9:2e:98:f2:ff:81:14:24:09:e3:4b:55:57:09:1a:22:\n        74:f1:f6:40:13:31:43:89:71:0a:96:1a:05:82:1f:83:3a:87:\n        9b:17:25:ef:5a:55:f2:2d:cd:0d:4d:e4:81:58:b6:e3:8d:09:\n        62:9a:0c:bd:e4:e5:5c:f0:95:da:cb:c7:34:2c:34:5f:6d:fc:\n        60:7b:12:5b:86:fd:df:21:89:3b:48:08:30:bf:67:ff:8c:e6:\n        9b:53:cc:87:36:47:70:40:3b:d9:90:2a:d2:d2:82:c6:9c:f5:\n        d1:d8:e0:e6:fd:aa:2f:95:7e:39:ac:fc:4e:d4:ce:65:b3:ec:\n        c6:98:8a:31\n-----BEGIN CERTIFICATE-----\nMIIGWjCCBUKgAwIBAgIBATANBgkqhkiG9w0BAQUFADCCAYQxEzARBgoJkiaJk/Is\nZAEZFgNvcmcxFjAUBgoJkiaJk/IsZAEZFgZjaGVlc2UxDzANBgNVBAoMBkNoZWVz\nZTERMA8GA1UECgwIQ2hlZXNlIDIxHzAdBgNVBAsMFlNpbXBsZSBTaWduaW5nIFNl\nY3Rpb24xITAfBgNVBAsMGFNpbXBsZSBTaWduaW5nIFNlY3Rpb24gMjEaMBgGA1UE\nAwwRU2ltcGxlIFNpZ25pbmcgQ0ExHDAaBgNVBAMME1NpbXBsZSBTaWduaW5nIENB\nIDIxCzAJBgNVBAYTAkZSMQswCQYDVQQGEwJVUzERMA8GA1UEBwwIVE9VTE9VU0Ux\nDTALBgNVBAcMBExZT04xFjAUBgNVBAgMDVNpZ25pbmcgU3RhdGUxGDAWBgNVBAgM\nD1NpZ25pbmcgU3RhdGUgMjEhMB8GCSqGSIb3DQEJARYSc2ltcGxlQHNpZ25pbmcu\nY29tMSIwIAYJKoZIhvcNAQkBFhNzaW1wbGUyQHNpZ25pbmcuY29tMB4XDTE4MTIw\nNjExMTAxNloXDTIwMTIwNTExMTAxNlowggF2MRMwEQYKCZImiZPyLGQBGRYDb3Jn\nMRYwFAYKCZImiZPyLGQBGRYGY2hlZXNlMQ8wDQYDVQQKDAZDaGVlc2UxETAPBgNV\nBAoMCENoZWVzZSAyMR8wHQYDVQQLDBZTaW1wbGUgU2lnbmluZyBTZWN0aW9uMSEw\nHwYDVQQLDBhTaW1wbGUgU2lnbmluZyBTZWN0aW9uIDIxFTATBgNVBAMMDCouY2hl\nZXNlLm9yZzEVMBMGA1UEAwwMKi5jaGVlc2UuY29tMQswCQYDVQQGEwJGUjELMAkG\nA1UEBhMCVVMxETAPBgNVBAcMCFRPVUxPVVNFMQ0wCwYDVQQHDARMWU9OMRkwFwYD\nVQQIDBBDaGVlc2Ugb3JnIHN0YXRlMRkwFwYDVQQIDBBDaGVlc2UgY29tIHN0YXRl\nMR4wHAYJKoZIhvcNAQkBFg9jZXJ0QGNoZWVzZS5vcmcxHzAdBgkqhkiG9w0BCQEW\nEGNlcnRAc2NoZWVzZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\nAQDed/qNA3AwOd1RG8xg26laE7Gv/izGOJuICg+O2RuhHa8NZuQTW7xdNpLXXtD6\niCnTeOGB3piyqSI/v4qvEpJj1KnD8uR+0tyixTkceuvXEnBjLkFH4PAI6Ny+CQHs\nKAmvNdd5nFA10Wvlh3s09tIxZR0YQmlsBBGD/kSukJItC3U5V2LmFy9HK8dT3RAt\nyeMGE9K5umMuPH2Da9aJycydTb+f6KN72siZK7pm1o74QUGgydBeyBGkVUqTg4dj\nBGNBnPtoBGfCcS/yZR0CXRXbLNkEaYXCfQ3qO6yF+NSPD8VwskXh7LJUC+n3grSb\nGy25JdSryo9bRD4V3bh/t+75AgMBAAGjgeAwgd0wDgYDVR0PAQH/BAQDAgWgMAkG\nA1UdEwQCMAAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB0GA1UdDgQW\nBBSUunN4oof7WCgoz5g7wkVwFm4pLzAfBgNVHSMEGDAWgBQeUqLoVNU369WoHeTC\nBB034vdwAzBhBgNVHREEWjBYggwqLmNoZWVzZS5vcmeCDCouY2hlZXNlLm5ldIIM\nKi5jaGVlc2UuY29thwQKAAEAhwQKAAECgQ90ZXN0QGNoZWVzZS5vcmeBD3Rlc3RA\nY2hlZXNlLm5ldDANBgkqhkiG9w0BAQUFAAOCAQEAdmsFsA40EbGDmZHcrhviCBWL\nFrKbJxwCrLXfG9DQdaQrLFxl7Zmr983+OD/DmiIxG6yMHML5XdR1ei5yx4WpBK+f\nKszTlnXwjsfGdkisRaS5Ah4vwBXEBwiSyydQZ6HIBcU6s6ZIvuvVWauiG5UwcRNb\nCppzO2DMENBqx+XXiy/5Lpjy/4EUJAnjS1VXCRoidPH2QBMxQ4lxCpYaBYIfgzqH\nmxcl71pV8i3NDU3kgVi2440JYpoMveTlXPCV2svHNCw0X238YHsSW4b93yGJO0gI\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Adding Headers to Request and Response using Traefik Tags (JSON)\nDESCRIPTION: This JSON configuration uses tags to add the X-Script-Name header to proxied requests and X-Custom-Response-Header to responses using Traefik's Headers middleware.\n\nLANGUAGE: json\nCODE:\n```\n{\n  //...\n  \"Tags\": [\n    \"traefik.http.middlewares.testheader.headers.customrequestheaders.X-Script-Name=test\",\n    \"traefik.http.middlewares.testheader.headers.customresponseheaders.X-Custom-Response-Header=value\"\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Whoami Sample Application Deployment for Kubernetes\nDESCRIPTION: Deployment and Service configuration for the whoami application used as a backend in the Traefik Ingress examples.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: whoami\n  labels:\n    app: traefiklabs\n    name: whoami\n\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: traefiklabs\n      task: whoami\n  template:\n    metadata:\n      labels:\n        app: traefiklabs\n        task: whoami\n    spec:\n      containers:\n        - name: whoami\n          image: traefik/whoami\n          ports:\n            - containerPort: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoami\n\nspec:\n  ports:\n    - name: http\n      port: 80\n  selector:\n    app: traefiklabs\n    task: whoami\n```\n\n----------------------------------------\n\nTITLE: Automatic Service Assignment with Labels\nDESCRIPTION: Shows how a service is automatically assigned to a router when both are defined with labels but not explicitly connected.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.routers.myproxy.rule=Host(`example.net`)\"\n  # service myservice gets automatically assigned to router myproxy\n  - \"traefik.http.services.myservice.loadbalancer.server.port=80\"\n```\n\n----------------------------------------\n\nTITLE: Testing the Whoami Service with cURL\nDESCRIPTION: Command to test the 'whoami' service by sending an HTTP request with a specific Host header, which Traefik uses to route the request.\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H Host:whoami.docker.localhost http://127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Events Watch in YAML\nDESCRIPTION: Disabling the Docker events watching mechanism in YAML format. By default, Traefik watches Docker events to detect changes in containers state and configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    watch: false\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Events Watch in YAML\nDESCRIPTION: Disabling the Docker events watching mechanism in YAML format. By default, Traefik watches Docker events to detect changes in containers state and configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    watch: false\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting IP for Kubernetes Ingress Status in Traefik\nDESCRIPTION: Configures the IP address that will be copied to Ingress status.loadbalancer.ip. This setting supports a single IP value (IPv4 or IPv6) and has an empty string as the default value.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    ingressEndpoint:\n      ip: \"1.2.3.4\"\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress.ingressEndpoint]\n  ip = \"1.2.3.4\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.ingressendpoint.ip=1.2.3.4\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Connection to Docker via CLI\nDESCRIPTION: Command-line option for connecting Traefik to the Docker Engine API over TCP. This can be used for remote Docker daemons with TCP enabled.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.docker.endpoint=tcp://127.0.0.1:2375\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Redirect Following in Traefik with YAML Labels\nDESCRIPTION: Controls whether health checks should follow HTTP redirects returned by the service.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.followredirects=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing Strategy in Traefik with YAML Labels\nDESCRIPTION: Sets the load balancing algorithm to use when distributing requests across multiple backend servers.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.strategy=p2c\n```\n\n----------------------------------------\n\nTITLE: Specifying Certificate Stores for Certificates in TOML\nDESCRIPTION: Example of how to specify which store each certificate should be stored in using TOML format. If not specified, certificates are stored in the default store.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[[tls.certificates]]\n  certFile = \"/path/to/domain.cert\"\n  keyFile = \"/path/to/domain.key\"\n  stores = [\"default\"]\n\n[[tls.certificates]]\n  # Note that since no store is defined,\n  # the certificate below will be stored in the `default` store.\n  certFile = \"/path/to/other-domain.cert\"\n  keyFile = \"/path/to/other-domain.key\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Strategy Depth in Kubernetes\nDESCRIPTION: Example of configuring the IP strategy depth parameter in Kubernetes to determine which IP to use from X-Forwarded-For header for rate limiting.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-ratelimit\nspec:\n  rateLimit:\n    sourceCriterion:\n      ipStrategy:\n        depth: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring PassTLSClientCert Middleware with PEM using JSON Tags\nDESCRIPTION: This JSON configuration uses Tags to define a middleware that passes the PEM-encoded client certificate in the X-Forwarded-Tls-Client-Cert header.\n\nLANGUAGE: json\nCODE:\n```\n// Pass the pem in the `X-Forwarded-Tls-Client-Cert` header\n{\n  \"Tags\": [\n    \"traefik.http.middlewares.test-passtlsclientcert.passtlsclientcert.pem=true\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ClusterRole for Traefik in Kubernetes\nDESCRIPTION: This YAML defines the ClusterRole for Traefik with necessary permissions to access Kubernetes resources. It grants Traefik the ability to get, list, and watch various resources like services, ingresses, and custom Traefik CRDs.\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: traefik-role\n\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - services\n      - secrets\n      - nodes\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - discovery.k8s.io\n    resources:\n      - endpointslices\n    verbs:\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses\n      - ingressclasses\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses/status\n    verbs:\n      - update\n  - apiGroups:\n      - traefik.io\n    resources:\n      - middlewares\n      - middlewaretcps\n      - ingressroutes\n      - traefikservices\n      - ingressroutetcps\n      - ingressrouteudps\n      - tlsoptions\n      - tlsstores\n      - serverstransports\n      - serverstransporttcps\n    verbs:\n      - get\n      - list\n      - watch\n```\n\n----------------------------------------\n\nTITLE: Creating ClusterRole for Traefik in Kubernetes\nDESCRIPTION: This YAML defines the ClusterRole for Traefik with necessary permissions to access Kubernetes resources. It grants Traefik the ability to get, list, and watch various resources like services, ingresses, and custom Traefik CRDs.\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: traefik-role\n\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - services\n      - secrets\n      - nodes\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - discovery.k8s.io\n    resources:\n      - endpointslices\n    verbs:\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses\n      - ingressclasses\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses/status\n    verbs:\n      - update\n  - apiGroups:\n      - traefik.io\n    resources:\n      - middlewares\n      - middlewaretcps\n      - ingressroutes\n      - traefikservices\n      - ingressroutetcps\n      - ingressrouteudps\n      - tlsoptions\n      - tlsstores\n      - serverstransports\n      - serverstransporttcps\n    verbs:\n      - get\n      - list\n      - watch\n```\n\n----------------------------------------\n\nTITLE: Configuring ReplacePath Middleware with Labels\nDESCRIPTION: This snippet shows how to configure the ReplacePath middleware using Docker labels. It replaces the original request path with '/foo' before forwarding to the backend service.\n\nLANGUAGE: yaml\nCODE:\n```\n# Replace the path with /foo\nlabels:\n  - \"traefik.http.middlewares.test-replacepath.replacepath.path=/foo\"\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Headers using Traefik Labels\nDESCRIPTION: This configuration uses Docker labels to add the X-Script-Name header while removing X-Custom-Request-Header from requests and X-Custom-Response-Header from responses using Traefik's Headers middleware.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.testheader.headers.customrequestheaders.X-Script-Name=test\"\n  - \"traefik.http.middlewares.testheader.headers.customrequestheaders.X-Custom-Request-Header=\"\n  - \"traefik.http.middlewares.testheader.headers.customresponseheaders.X-Custom-Response-Header=\"\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for Router with Docker Label\nDESCRIPTION: Example of enabling TLS (HTTPS) for a router using a Docker label. This simple configuration turns on TLS for secure connections.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.tls=true\"\n```\n\n----------------------------------------\n\nTITLE: Linking TCP Router to Backend Service in Traefik\nDESCRIPTION: Associates a TCP router with a specific backend service that will handle the traffic once it's routed.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.service=myservice\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Whoami Backend Service for Traefik\nDESCRIPTION: Configuration for a sample 'whoami' application that serves as a backend for the Traefik Ingress, including Deployment and Service resources.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: whoami\n  labels:\n    app: traefiklabs\n    name: whoami\n\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: traefiklabs\n      task: whoami\n  template:\n    metadata:\n      labels:\n        app: traefiklabs\n        task: whoami\n    spec:\n      containers:\n        - name: whoami\n          image: traefik/whoami\n          ports:\n            - containerPort: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoami\n\nspec:\n  ports:\n    - name: http\n      port: 80\n  selector:\n    app: traefiklabs\n    task: whoami\n```\n\n----------------------------------------\n\nTITLE: Configuring Middlewares for EntryPoints in Traefik Helm Chart\nDESCRIPTION: Example showing how to attach middlewares to a Traefik EntryPoint using Helm Chart values. The middlewares 'auth' from kubernetescrd provider and 'strip' from file provider are attached to the 'web' port.\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n  web:\n    port: :80\n    middlewares:\n      - auth@kubernetescrd\n      - strip@file\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Header Name for InFlightReq in Docker & Swarm\nDESCRIPTION: This snippet shows how to configure a request header name for InFlightReq middleware in Docker or Docker Swarm to group requests based on a specific header value.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-inflightreq.inflightreq.sourcecriterion.requestheadername=username\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname for Kubernetes Ingress Endpoints in Traefik\nDESCRIPTION: Sets the hostname used for Kubernetes Ingress endpoints. This configuration can be applied via YAML, TOML, or CLI, with an empty string as the default value if not specified.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    ingressEndpoint:\n      hostname: \"example.net\"\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress.ingressEndpoint]\n  hostname = \"example.net\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.ingressendpoint.hostname=example.net\n```\n\n----------------------------------------\n\nTITLE: Configuring addAuthCookiesToResponse in Docker\nDESCRIPTION: Docker configuration example for copying cookies from the authentication server to the response using ForwardAuth middleware.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.addAuthCookiesToResponse=Session-Cookie,State-Cookie\"\n```\n\n----------------------------------------\n\nTITLE: Linking UDP Router to Service in Traefik\nDESCRIPTION: Associates a UDP router with a specific service that will handle the routed traffic. Services define how to reach the backend UDP application.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.routers.myudprouter.service=myservice\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for Router with Docker Label\nDESCRIPTION: Example of enabling TLS (HTTPS) for a router using a Docker label. This simple configuration turns on TLS for secure connections.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.tls=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Strategy Depth in YAML File\nDESCRIPTION: Example of configuring the IP strategy depth parameter in a YAML file to determine which IP to use from X-Forwarded-For header for rate limiting.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        sourceCriterion:\n          ipStrategy:\n            depth: 2\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Scheme for Traefik Services\nDESCRIPTION: Changes the default protocol scheme used to connect to the service backend.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.server.scheme=http\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Listening to All EntryPoints in YAML\nDESCRIPTION: Dynamic configuration of an HTTP router that listens to all available entry points by default using YAML syntax.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    Router-1:\n      # By default, routers listen to every EntryPoints.\n      rule: \"Host(`example.com`)\"\n      service: \"service-1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Retry Middleware using JSON Tags\nDESCRIPTION: Example of how to configure the Traefik HTTP Retry middleware using JSON Tags. This configuration sets up 4 retry attempts with an initial interval of 100ms for exponential backoff.\n\nLANGUAGE: json\nCODE:\n```\n// Retry 4 times with exponential backoff\n\n{\n  // ...\n  \"Tags\" : [\n    \"traefik.http.middlewares.test-retry.retry.attempts=4\",\n    \"traefik.http.middlewares.test-retry.retry.initialinterval=100ms\"\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring DigestAuth Middleware with Tags\nDESCRIPTION: Example of configuring the DigestAuth middleware using Tags format (typically in JSON). It demonstrates how to specify authorized users with their credentials.\n\nLANGUAGE: json\nCODE:\n```\n// Declaring the user list\n{\n  //...\n  \"Tags\" : [\n    \"traefik.http.middlewares.test-auth.digestauth.users=test:traefik:a2688e031edb4be6a3797f3882655c05,test2:traefik:518845800f9e2bfb1f1f740ec24f074e\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for TCP Router in Traefik\nDESCRIPTION: Enables TLS (Transport Layer Security) for a TCP router, allowing secure encrypted connections.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls=true\n```\n\n----------------------------------------\n\nTITLE: Using cURL to Test Header-Based Metrics in Traefik\nDESCRIPTION: Command line example showing how to make a request with a specific User-Agent header to test the custom metrics labeling in Traefik.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"User-Agent: foobar\" http://localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik EntryPoints for Both TCP and UDP on Same Port (YAML, TOML, CLI)\nDESCRIPTION: Example showing how to configure separate EntryPoints for TCP and UDP protocols on the same port (3179). Two distinct EntryPoints must be defined since a single EntryPoint can only handle one protocol.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  tcpep:\n   address: \":3179\"\n  udpep:\n   address: \":3179/udp\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.tcpep]\n    address = \":3179\"\n  [entryPoints.udpep]\n    address = \":3179/udp\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.tcpep.address=:3179\n--entryPoints.udpep.address=:3179/udp\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress Class in TOML\nDESCRIPTION: TOML configuration for specifying which Ingress annotation class value Traefik should process.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress]\n  ingressClass = \"traefik-internal\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring useBindPortIP in TOML\nDESCRIPTION: Setting useBindPortIP to route requests to the IP/port attached to the container's binding rather than its internal network IP/port using TOML. This helps with container accessibility in certain network configurations.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  useBindPortIP = true\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailscale Certificate Resolver in TOML\nDESCRIPTION: Basic configuration for a Tailscale certificate resolver in TOML format. This enables Traefik to request certificates from the Tailscale daemon.\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.tailscale]\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing for Router with Docker Label\nDESCRIPTION: Example of enabling request tracing for a specific router using a Docker label. This turns on tracing for observability purposes.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.observability.tracing=true\"\n```\n\n----------------------------------------\n\nTITLE: Installing Kubernetes Gateway API CRDs using kubectl\nDESCRIPTION: Command to install Gateway API CRDs from the Standard channel to enable the Gateway API functionality in a Kubernetes cluster.\n\nLANGUAGE: bash\nCODE:\n```\n# Install Gateway API CRDs from the Standard channel.\nkubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.1/standard-install.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting UsersFile Option in DigestAuth with TOML File\nDESCRIPTION: Shows how to define a path to an external file containing authorized users for DigestAuth middleware in a TOML configuration file.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.digestAuth]\n    usersFile = \"/path/to/my/usersfile\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Configuration for Secure gRPC Service in Traefik (YAML)\nDESCRIPTION: Dynamic configuration in YAML format that sets up a router to forward secure gRPC requests to a backend service. The configuration includes TLS certificates for frontend communication.\n\nLANGUAGE: yaml\nCODE:\n```\n## dynamic configuration ##\n\nhttp:\n  routers:\n    routerTest:\n      service: srv-grpc\n      rule: Host(`frontend.local`)\n  services:\n    srv-grpc:\n      loadBalancer:\n        servers:\n        # Access on backend with HTTPS\n        - url: https://backend.local:8080\ntls:\n  # For secure connection on frontend.local\n  certificates:\n  - certfile: ./frontend.cert\n    keyfile: ./frontend.key\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Router Entry Points in Traefik\nDESCRIPTION: Specifies which entry points a UDP router should listen on. Multiple entry points can be specified in a comma-separated list.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.routers.myudprouter.entrypoints=ep1,ep2\n```\n\n----------------------------------------\n\nTITLE: Using ClientIP Matcher in Traefik HTTP Router Rules\nDESCRIPTION: Examples of using ClientIP matcher to route requests based on the client's IP address. Shows matching IPv4 addresses, IPv6 addresses, and IP subnets.\n\nLANGUAGE: go\nCODE:\n```\nClientIP(`10.76.105.11`)\n```\n\nLANGUAGE: go\nCODE:\n```\nClientIP(`::1`)\n```\n\nLANGUAGE: go\nCODE:\n```\nClientIP(`192.168.1.0/24`)\n```\n\nLANGUAGE: go\nCODE:\n```\nClientIP(`fe80::/10`)\n```\n\n----------------------------------------\n\nTITLE: Configuring DigestAuth Middleware in Kubernetes\nDESCRIPTION: Example of configuring the DigestAuth middleware in Kubernetes using a CRD (Custom Resource Definition). It shows how to reference user credentials from a Kubernetes secret.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  digestAuth:\n    secret: userssecret\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Options for TCP Router in Traefik\nDESCRIPTION: References a TLS options configuration to be applied to the TCP router, allowing customization of TLS parameters.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.options=myoptions\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Services for Load Balancing in Traefik\nDESCRIPTION: This YAML defines two Kubernetes Services (whoami1 and whoami2) that select pods with matching app labels. These services are the targets for the TraefikService weighted load balancing.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoami1\n\nspec:\n  ports:\n    - protocol: TCP\n      name: web\n      port: 80\n  selector:\n    app: whoami1\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoami2\n\nspec:\n  ports:\n    - protocol: TCP\n      name: web\n      port: 80\n  selector:\n    app: whoami2\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus HeaderLabels in Traefik YAML Configuration\nDESCRIPTION: YAML configuration example showing how to define custom header labels for Prometheus metrics in Traefik's static configuration file. This allows extracting values from request headers as additional labels for the requests_total metric.\n\nLANGUAGE: yaml\nCODE:\n```\n# static_configuration.yaml\nmetrics:\n  prometheus:\n    headerLabels:\n      useragent: User-Agent\n```\n\n----------------------------------------\n\nTITLE: Configuring EntryPoints in Static Configuration using YAML\nDESCRIPTION: Static configuration that defines web and mysql entrypoints on ports 80 and 3306 using YAML syntax.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  web:\n    address: \":80\"\n  mysql:\n    address: \":3306\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespaces to Watch in TOML\nDESCRIPTION: TOML configuration for limiting which Kubernetes namespaces Traefik watches for Ingress resources.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress]\n  namespaces = [\"default\", \"production\"]\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Hostname in Traefik\nDESCRIPTION: Sets the hostname to use in health check requests to the backend service. This is important when backend services validate the Host header in incoming requests.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.healthcheck.hostname=example.org\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Service Backend Port in Traefik\nDESCRIPTION: Specifies the port where the backend UDP service is listening. Traefik will forward UDP packets to this port on the backend server.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.services.myudpservice.loadbalancer.server.port=423\n```\n\n----------------------------------------\n\nTITLE: Referencing ServersTransport in Traefik with YAML Labels\nDESCRIPTION: References a ServersTransport resource defined in the File provider or Kubernetes CRD, which controls how Traefik connects to your servers.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.serverstransport=foobar@file\n```\n\n----------------------------------------\n\nTITLE: Configuring SPIFFE in Traefik Using YAML\nDESCRIPTION: Static configuration example showing how to enable SPIFFE in Traefik using YAML format. Sets the workloadAPIAddr parameter to connect to the SPIFFE Workload API.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nspiffe:\n    workloadAPIAddr: localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Rules in Traefik with ECS\nDESCRIPTION: Sets a Host rule for a Traefik router when using ECS. This label defines which hostnames the router will respond to.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.rule=Host(`example.com`)\n```\n\n----------------------------------------\n\nTITLE: Configuring ExternalName Service with Port on IngressRoute in Kubernetes\nDESCRIPTION: Configuration example showing how to define an ExternalName Service in Kubernetes with the port defined only on the IngressRoute resource. This approach allows connecting to external services that don't have ports defined.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test.route\n  namespace: apps\n\nspec:\n  entryPoints:\n    - foo\n  routes:\n  - match: Host(`example.net`)\n    kind: Rule\n    services:\n    - name: external-svc\n      port: 80\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: external-svc\n  namespace: apps\n\nspec:\n  externalName: external.domain\n  type: ExternalName\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffering Middleware with Tags\nDESCRIPTION: Sets the maximum request body size to 2MB using JSON Tags configuration format for Traefik buffering middleware.\n\nLANGUAGE: json\nCODE:\n```\n// Sets the maximum request body to 2MB\n{\n  // ...\n  \"Tags\": [\n    \"traefik.http.middlewares.test-auth.basicauth.users=test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/,test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Timeout in Traefik\nDESCRIPTION: Defines the timeout for health check requests. If the service doesn't respond within this duration, it's considered unhealthy.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.healthcheck.timeout=10s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Router Entry Points in Traefik\nDESCRIPTION: Specifies which entry points the UDP router should listen on. Multiple entry points can be defined using a comma-separated list.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.routers.myudprouter.entrypoints=ep1,ep2\n```\n\n----------------------------------------\n\nTITLE: Setting Default Routing Rules for Nomad Services\nDESCRIPTION: Configuration examples showing how to define a default routing rule template for Nomad services using Go templates.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad:\n    defaultRule: \"Host(`{{ .Name }}.{{ index .Labels \\\"customLabel\\\"}}`)\"\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad]\n  defaultRule = \"Host(`{{ .Name }}.{{ index .Labels \\\"customLabel\\\"}}`)\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad.defaultRule='Host(`{{ .Name }}.{{ index .Labels \"customLabel\"}}`)'\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting HeaderField Option in DigestAuth with YAML File\nDESCRIPTION: Shows how to customize the header field for authenticated users in DigestAuth middleware with a YAML configuration file.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    my-auth:\n      digestAuth:\n        # ...\n        headerField: \"X-WebAuth-User\"\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Provider Poll Interval via CLI\nDESCRIPTION: Command line argument to set the polling interval for the HTTP provider. Defines how frequently Traefik checks the endpoint for configuration updates.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.http.pollInterval=5s\n```\n\n----------------------------------------\n\nTITLE: Configuring CA Certificate for Secure Connection to Etcd\nDESCRIPTION: Sets the path to the certificate authority for secure connection to etcd. It defaults to the system bundle if not specified.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  etcd:\n    tls:\n      ca: path/to/ca.crt\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.etcd.tls]\n  ca = \"path/to/ca.crt\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.etcd.tls.ca=path/to/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Container in Traefik\nDESCRIPTION: Controls whether Traefik should expose the container. This option overrides the default exposedByDefault setting.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.enable=true\"\n```\n\n----------------------------------------\n\nTITLE: IngressRouteUDP with Port Defined on Both Sides\nDESCRIPTION: Example showing how to configure an IngressRouteUDP with an ExternalName Service where port is defined in both resources. Traefik requires the ports to match.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: traefik.io/v1alpha1\nkind: IngressRouteUDP\nmetadata:\n  name: test.route\n  namespace: default\n\nspec:\n  entryPoints:\n    - foo\n\n  routes:\n  - services:\n    - name: external-svc\n      port: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: external-svc\n  namespace: default\nspec:\n  externalName: external.domain\n  type: ExternalName\n  ports:\n    - port: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation Size via CLI\nDESCRIPTION: Sets the maximum size of log files before rotation occurs using command line interface. This example sets the maximum size to 1 megabyte (default is 100MB).\n\nLANGUAGE: bash\nCODE:\n```\n--log.maxsize=1\n```\n\n----------------------------------------\n\nTITLE: Disabling Tracing for HTTP Router in YAML\nDESCRIPTION: Example of disabling tracing for a specific HTTP router using the File Provider in YAML format. The configuration sets tracing to false in the observability section.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    my-router:\n      rule: \"Path(`/foo`)\"\n      service: service-foo\n      observability:\n        tracing: false\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Policy for Sticky Cookies in Traefik\nDESCRIPTION: Configures the SameSite attribute for the sticky session cookie. This controls how the cookie is sent in cross-site requests, affecting cross-site request forgery protection.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.sticky.cookie.samesite=none\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ExternalName Service with Port on Service in Kubernetes\nDESCRIPTION: Configuration example showing how to define an ExternalName Service in Kubernetes with the port defined on the Service resource rather than the IngressRoute, allowing for more standard Kubernetes configuration.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test.route\n  namespace: apps\n\nspec:\n  entryPoints:\n    - foo\n  routes:\n  - match: Host(`example.net`)\n    kind: Rule\n    services:\n    - name: external-svc\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: external-svc\n  namespace: apps\n\nspec:\n  externalName: external.domain\n  type: ExternalName\n  ports:\n    - port: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Pages Middleware with JSON Tags\nDESCRIPTION: Example showing how to configure custom error pages for 5XX status codes (excluding 502 and 504) using JSON tags. It uses the same configuration pattern as labels.\n\nLANGUAGE: json\nCODE:\n```\n// Dynamic Custom Error Page for 5XX Status Code excluding 502 and 504\n{\n  // ...\n  \"Tags\": [\n    \"traefik.http.middlewares.test-errors.errors.status=500,501,503,505-599\",\n    \"traefik.http.middlewares.test-errors.errors.service=error-handler-service\",\n    \"traefik.http.middlewares.test-errors.errors.query=/{status}.html\"\n  ]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Domains for TCP Routers in Traefik (YAML and TOML)\nDESCRIPTION: This example demonstrates how to configure domain settings for TLS certificates in a TCP router, including the main domain and SANs (Subject Alternative Names). This is useful for obtaining wildcard certificates.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  routers:\n    routerbar:\n      rule: \"HostSNI(`snitest.com`)\"\n      tls:\n        certResolver: \"bar\"\n        domains:\n          - main: \"snitest.com\"\n            sans:\n              - \"*.snitest.com\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.routers]\n  [tcp.routers.routerbar]\n    rule = \"HostSNI(`snitest.com`)\"\n    [tcp.routers.routerbar.tls]\n      certResolver = \"bar\"\n      [[tcp.routers.routerbar.tls.domains]]\n        main = \"snitest.com\"\n        sans = [\"*.snitest.com\"]\n```\n\n----------------------------------------\n\nTITLE: Setting PROXY Protocol Version for TCP Service\nDESCRIPTION: Specifies which version of the PROXY protocol to use when communicating with backends. The PROXY protocol passes client connection information to the backend.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.mytcpservice.loadbalancer.proxyprotocol.version=1\n```\n\n----------------------------------------\n\nTITLE: Enabling Nomad Provider in Traefik\nDESCRIPTION: Basic configuration examples showing how to enable the Nomad provider in Traefik using different configuration formats (YAML, TOML, and CLI).\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Refresh Interval for Consul Catalog\nDESCRIPTION: Sets the polling interval for checking Consul Catalog for changes. Default is 15 seconds.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    refreshInterval: 30s\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog]\n  refreshInterval = \"30s\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.refreshInterval=30s\n# ...\n```\n\n----------------------------------------\n\nTITLE: Priority Calculation Example with YAML\nDESCRIPTION: YAML example showing how default priorities are computed in Traefik based on rule length. This demonstrates a potential conflict between a specific host rule and a regexp rule.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  routers:\n    Router-1:\n      rule: \"HostRegexp(`[a-z]+\\.traefik\\.com`)\"\n      # ...\n    Router-2:\n      rule: \"Host(`foobar.traefik.com`)\"\n      # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Duration in Traefik\nDESCRIPTION: Configuration for setting certificate duration which affects renewal periods and intervals. The value defaults to 2160 (90 days) to match Let's Encrypt certificates duration.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      certificatesDuration: 72\n      # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  certificatesDuration=72\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.certificatesduration=72\n# ...\n```\n\n----------------------------------------\n\nTITLE: Creating CA Secrets for TLS Client Authentication\nDESCRIPTION: Example of creating Kubernetes Secrets containing CA certificates to be used for client certificate verification in a TLSOption configuration.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: secret-ca1\n  namespace: default\n\ndata:\n  # Must contain a certificate under either a `tls.ca` or a `ca.crt` key.\n  tls.ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: secret-ca2\n  namespace: default\n\ndata:\n  # Must contain a certificate under either a `tls.ca` or a `ca.crt` key. \n  tls.ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry gRPC TLS Client Certificates via CLI\nDESCRIPTION: Sets up client certificate authentication for OpenTelemetry gRPC connections using command line interface. Requires both certificate and key files to be specified.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.grpc.tls.cert=path/to/foo.cert\n--log.otlp.grpc.tls.key=path/to/foo.key\n```\n\n----------------------------------------\n\nTITLE: Configuring ACME Default Certificate in Kubernetes\nDESCRIPTION: Example of configuring an ACME-generated default certificate using Let's Encrypt in Kubernetes, specifying the resolver and domain information.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSStore\nmetadata:\n  name: default\n  namespace: default\n\nspec:\n  defaultGeneratedCert:\n    resolver: myresolver\n    domain:\n      main: example.org\n      sans:\n        - foo.example.org\n        - bar.example.org\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik HTTPS Entrypoint\nDESCRIPTION: This snippet configures a secure entrypoint for HTTPS traffic on port 443 and exposes this port to allow external connections.\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  # Traefik will listen to incoming request on the port 443 (https)\n  - \"--entryPoints.websecure.address=:443\"\nports:\n  - \"443:443\"\n```\n\n----------------------------------------\n\nTITLE: Defining IngressRoute with ExternalName Service in Traefik (Port on IngressRoute)\nDESCRIPTION: Example of defining a Traefik IngressRoute with an ExternalName Service where the port is defined only on the IngressRoute. This configuration is useful for external services that don't specify ports.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test.route\n  namespace: default\n\nspec:\n  entryPoints:\n    - foo\n\n  routes:\n  - match: Host(`example.net`)\n    kind: Rule\n    services:\n    - name: external-svc\n      port: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: external-svc\n  namespace: default\nspec:\n  externalName: external.domain\n  type: ExternalName\n```\n\n----------------------------------------\n\nTITLE: Configuring ServersTransport with JSON Tags\nDESCRIPTION: Example of how to configure ServersTransport using JSON tags for providers that support tag-based configuration.\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"Tags\": [\n    \"traefik.http.services.Service01.loadBalancer.serversTransport=mytransport\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Routers with Default EntryPoints in Traefik (YAML and TOML)\nDESCRIPTION: This example shows a UDP router configuration that listens on all defined UDP EntryPoints. Since UDP is connectionless, Traefik uses sessions to maintain state information for communication between clients and backends.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\n\nudp:\n  routers:\n    Router-1:\n      # By default, routers listen to all UDP entrypoints\n      # i.e. \"other\", and \"streaming\".\n      service: \"service-1\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n\n[udp.routers]\n  [udp.routers.Router-1]\n    # By default, routers listen to all UDP entrypoints,\n    # i.e. \"other\", and \"streaming\".\n    service = \"service-1\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\n\nentryPoints:\n  # not used by UDP routers\n  web:\n    address: \":80\"\n  # used by UDP routers\n  other:\n    address: \":9090/udp\"\n  streaming:\n    address: \":9191/udp\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n\n[entryPoints]\n  # not used by UDP routers\n  [entryPoints.web]\n    address = \":80\"\n  # used by UDP routers\n  [entryPoints.other]\n    address = \":9090/udp\"\n  [entryPoints.streaming]\n    address = \":9191/udp\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.web.address=\":80\"\n--entryPoints.other.address=\":9090/udp\"\n--entryPoints.streaming.address=\":9191/udp\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Configuration with TOML File in Traefik\nDESCRIPTION: Example of static configuration using TOML format to set up an entrypoint on port 8081 and enable the file provider for Traefik.\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints]\n  [entryPoints.web]\n    # Listen on port 8081 for incoming requests\n    address = \":8081\"\n\n[providers]\n  # Enable the file provider to define routers / middlewares / services in file\n  [providers.file]\n    directory = \"/path/to/dynamic/conf\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Gateway Endpoint in TOML\nDESCRIPTION: Example of setting the Kubernetes API server endpoint URL in TOML configuration to override environment variables.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesGateway]\n  endpoint = \"http://localhost:8080\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Headers using Traefik Tags (JSON)\nDESCRIPTION: This JSON configuration uses tags to set up Cross-Origin Resource Sharing (CORS) headers in Traefik to control which origins, methods, and headers are allowed when browsers make cross-origin requests.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Tags\" : [\n    \"traefik.http.middlewares.testheader.headers.accesscontrolallowmethods=GET,OPTIONS,PUT\",\n     \"traefik.http.middlewares.testheader.headers.accesscontrolallowheaders=*\",\n    \"traefik.http.middlewares.testheader.headers.accesscontrolalloworiginlist=https://foo.bar.org,https://example.org\",\n    \"traefik.http.middlewares.testheader.headers.accesscontrolmaxage=100\",\n    \"traefik.http.middlewares.testheader.headers.addvaryheader=true\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate Verification Skip for Etcd\nDESCRIPTION: Enables skipping verification of TLS certificates presented by the etcd server. When set to true, accepts any certificate regardless of the hostnames it covers. Defaults to false.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  etcd:\n    tls:\n      insecureSkipVerify: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.etcd.tls]\n  insecureSkipVerify = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.etcd.tls.insecureSkipVerify=true\n```\n\n----------------------------------------\n\nTITLE: Defining Certificate Stores in Traefik TOML\nDESCRIPTION: Example of defining a default TLS certificate store in TOML. This is the required configuration to establish the default certificate store.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[tls.stores]\n  [tls.stores.default]\n```\n\n----------------------------------------\n\nTITLE: Testing HTTPRoute with cURL\nDESCRIPTION: Shell command using cURL to test an HTTP request to the Gateway, showing the response with the prefix added by the Traefik middleware.\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://whoami.localhost\n                                                                                                    \nHostname: whoami-697f8c6cbc-kw954\nIP: 127.0.0.1\nIP: ::1\nIP: 10.42.2.6\nIP: fe80::a460:ecff:feb6:3a56\nRemoteAddr: 10.42.2.4:54758\nGET /prefix/ HTTP/1.1\nHost: whoami.localhost\nUser-Agent: curl/7.87.1-DEV\nAccept: */*\nAccept-Encoding: gzip\nX-Forwarded-For: 10.42.2.1\nX-Forwarded-Host: whoami.localhost\nX-Forwarded-Port: 80\nX-Forwarded-Proto: http\nX-Forwarded-Server: traefik-6b66d45748-ns8mt\nX-Real-Ip: 10.42.2.1\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for TCP Router in Traefik\nDESCRIPTION: Activates TLS mode for this TCP router, enabling secure connections. Setting to true enables TLS termination at the router level.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls=true\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Configuration for Traefik\nDESCRIPTION: A basic Docker Compose file showing how to set up Traefik with a simple 'whoami' service. This configuration enables HTTP traffic on port 80 and exposes the Traefik API on port 8080.\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"content/user-guides/docker-compose/basic-example/docker-compose.yml\"\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Configuration for Traefik\nDESCRIPTION: A basic Docker Compose file showing how to set up Traefik with a simple 'whoami' service. This configuration enables HTTP traffic on port 80 and exposes the Traefik API on port 8080.\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"content/user-guides/docker-compose/basic-example/docker-compose.yml\"\n```\n\n----------------------------------------\n\nTITLE: Defining IngressRoute with ExternalName Service in Traefik (Port on Service)\nDESCRIPTION: Example of defining a Traefik IngressRoute with an ExternalName Service where the port is defined on the Service resource. This follows standard Kubernetes configuration patterns.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test.route\n  namespace: default\n\nspec:\n  entryPoints:\n    - foo\n\n  routes:\n  - match: Host(`example.net`)\n    kind: Rule\n    services:\n    - name: external-svc\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: external-svc\n  namespace: default\nspec:\n  externalName: external.domain\n  type: ExternalName\n  ports:\n    - port: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring RedirectRegex Middleware in Consul Catalog\nDESCRIPTION: Example showing how to set up RedirectRegex middleware in Consul Catalog. Like the Docker example, it requires double dollar signs for escaping in the replacement pattern.\n\nLANGUAGE: yaml\nCODE:\n```\n# Redirect with domain replacement\n# Note: all dollar signs need to be doubled for escaping.\n- \"traefik.http.middlewares.test-redirectregex.redirectregex.regex=^http://localhost/(.*)\"\n- \"traefik.http.middlewares.test-redirectregex.redirectregex.replacement=http://mydomain/$${1}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Routers with Specific EntryPoints in Traefik (YAML and TOML)\nDESCRIPTION: This example demonstrates how to configure a UDP router to listen only on specific EntryPoints rather than all available UDP EntryPoints. This allows for more granular control over UDP traffic routing.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nudp:\n  routers:\n    Router-1:\n      # does not listen on \"other\" entry point\n      entryPoints:\n        - \"streaming\"\n      service: \"service-1\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[udp.routers]\n  [udp.routers.Router-1]\n    # does not listen on \"other\" entry point\n    entryPoints = [\"streaming\"]\n    service = \"service-1\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\n\nentryPoints:\n  web:\n    address: \":80\"\n  other:\n    address: \":9090/udp\"\n  streaming:\n    address: \":9191/udp\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n  [entryPoints.other]\n    address = \":9090/udp\"\n  [entryPoints.streaming]\n    address = \":9191/udp\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.web.address=\":80\"\n--entryPoints.other.address=\":9090/udp\"\n--entryPoints.streaming.address=\":9191/udp\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Docker Network for Traefik Swarm Mode\nDESCRIPTION: Explicitly defines which Docker network Traefik should use for connections to the container in Swarm mode.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.swarm.network=mynetwork\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Gateway Provider in Helm Chart Values\nDESCRIPTION: Configuration for Traefik Helm chart values.yaml file to enable the Kubernetes Gateway API provider.\n\nLANGUAGE: yaml\nCODE:\n```\n## Values file\nproviders:\n  kubernetesGateway:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Challenge with EntryPoint in Traefik using YAML\nDESCRIPTION: YAML configuration for setting up HTTP-01 challenge resolver with a dedicated web entrypoint on port 80 to generate and renew ACME certificates.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: \":80\"\n\n  websecure:\n    address: \":443\"\n\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      httpChallenge:\n        entryPoint: web\n```\n\n----------------------------------------\n\nTITLE: Implementing Failover Services in Traefik (TOML)\nDESCRIPTION: TOML format configuration for a failover service with a main service and backup service. The failover system relies on health checks to determine when to route traffic to the backup service.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.app]\n    [http.services.app.failover]\n      service = \"main\"\n      fallback = \"backup\"\n\n  [http.services.main]\n    [http.services.main.loadBalancer]\n      [http.services.main.loadBalancer.healthCheck]\n        path = \"/health\"\n        interval = \"10s\"\n        timeout = \"3s\"\n      [[http.services.main.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n  [http.services.backup]\n    [http.services.backup.loadBalancer]\n      [[http.services.backup.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Hostname in Traefik\nDESCRIPTION: Sets the hostname to use for health check requests. Useful when the service requires a specific hostname for health validation.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.healthcheck.hostname=example.org\"\n```\n\n----------------------------------------\n\nTITLE: Setting RemoveHeader Option in DigestAuth with Kubernetes\nDESCRIPTION: Shows how to configure the removeHeader option to remove the authorization header before forwarding the request in Kubernetes.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  digestAuth:\n    removeHeader: true\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router Entry Points in Traefik\nDESCRIPTION: Sets the entry points for a TCP router in Traefik. Entry points define the ports where Traefik listens for TCP connections.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.entrypoints=ep1,ep2\n```\n\n----------------------------------------\n\nTITLE: Handling Conflicting TLS Options with Kubernetes IngressRoute\nDESCRIPTION: Example demonstrates a conflict scenario where two IngressRoute resources reference the same host with different TLS options. In such cases, both mappings are discarded and the default TLS options are used instead.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: IngressRoute01\n  namespace: apps\n\nspec:\n  entryPoints:\n    - foo\n  routes:\n  - match: Host(`example.net`)\n    kind: Rule\n  tls:\n    options: foo\n    ...\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: IngressRoute02\n  namespace: apps\n\nspec:\n  entryPoints:\n    - foo\n  routes:\n  - match: Host(`example.net`)\n    kind: Rule\n  tls:\n    options: bar\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Rule Syntax in Traefik with Tags\nDESCRIPTION: JSON Tags configuration for setting different rule syntax versions in Traefik routers. Tags are used in some Traefik providers like Consul Catalog.\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"Tags\": [\n    \"traefik.http.routers.Router-v3.rule=HostRegexp(`[a-z]+\\.traefik\\.com`)\",\n    \"traefik.http.routers.Router-v3.ruleSyntax=v3\"\n    \"traefik.http.routers.Router-v2.rule=HostRegexp(`{subdomain:[a-z]+}.traefik.com`)\",\n    \"traefik.http.routers.Router-v2.ruleSyntax=v2\"\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Converting Labels to HTTP Service in Traefik\nDESCRIPTION: Function that handles the conversion of labeled services to HTTP services in Traefik. It processes provider configurations to create appropriate HTTP service types based on the service definition.\n\nLANGUAGE: go\nCODE:\n```\n// BuildHTTPService creates an http service from labels/annotations.\nfunc BuildHTTPService(provider provider.Provider, name string, configuration interface{}) (*service.Service, error) {\n\tserviceName := provider.GetQualifiedName(name)\n\tsvc := CreateHTTPService(provider, name, serviceName)\n\n\tconfigs, ok := configuration.(dynamic.Service)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"invalid service configuration: %T\", configuration)\n\t}\n\n\tif configs.LoadBalancer != nil {\n\t\tfor _, server := range configs.LoadBalancer.Servers {\n\t\t\tif server.URL == \"\" {\n\t\t\t\treturn nil, fmt.Errorf(\"the URL of a server is empty\")\n\t\t\t}\n\n\t\t\tsvc.LoadBalancer.Servers = append(svc.LoadBalancer.Servers, server)\n\t\t}\n\n\t\tsvc.LoadBalancer.Method = configs.LoadBalancer.Method\n\t\tsvc.LoadBalancer.HealthCheck = configs.LoadBalancer.HealthCheck\n\t\tsvc.LoadBalancer.PassHostHeader = configs.LoadBalancer.PassHostHeader\n\t\tsvc.LoadBalancer.ResponseForwarding = configs.LoadBalancer.ResponseForwarding\n\t\tsvc.LoadBalancer.Sticky = configs.LoadBalancer.Sticky\n\t}\n\n\tif configs.Weighted != nil {\n\t\tsvc.Weighted = &dynamic.WeightedRoundRobin{}\n\t\tsvc.Weighted.Services = make([]dynamic.WRRService, len(configs.Weighted.Services))\n\n\t\tfor i, service := range configs.Weighted.Services {\n\t\t\tsvc.Weighted.Services[i] = service\n\t\t}\n\n\t\tsvc.Weighted.Sticky = configs.Weighted.Sticky\n\t}\n\n\tif configs.Mirroring != nil {\n\t\tsvc.Mirroring = &dynamic.Mirroring{\n\t\t\tMaxBodySize: configs.Mirroring.MaxBodySize,\n\t\t\tService:     configs.Mirroring.Service,\n\t\t\tMirrors:     configs.Mirroring.Mirrors,\n\t\t}\n\t}\n\n\treturn svc, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing ServersTransport Resource in Traefik\nDESCRIPTION: References a ServersTransport resource defined in File provider or Kubernetes CRD for transport configuration.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/serverstransport\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Challenge with EntryPoint in Traefik using TOML\nDESCRIPTION: TOML configuration for setting up HTTP-01 challenge resolver with a dedicated web entrypoint on port 80 to generate and renew ACME certificates.\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n\n  [entryPoints.websecure]\n    address = \":443\"\n\n[certificatesResolvers.myresolver.acme]\n  # ...\n  [certificatesResolvers.myresolver.acme.httpChallenge]\n    entryPoint = \"web\"\n```\n\n----------------------------------------\n\nTITLE: Ingress Definition with TLS Entrypoint in Kubernetes\nDESCRIPTION: Kubernetes Ingress resource configuration that uses the websecure entrypoint for TLS termination, defining routes for example.com.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: myingress\n  annotations:\n    traefik.ingress.kubernetes.io/router.entrypoints: websecure\n\nspec:\n  rules:\n    - host: example.com\n      http:\n        paths:\n          - path: /bar\n            pathType: Exact\n            backend:\n              service:\n                name:  whoami\n                port:\n                  number: 80\n          - path: /foo\n            pathType: Exact\n            backend:\n              service:\n                name:  whoami\n                port:\n                  number: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS CA Certificate in YAML\nDESCRIPTION: Sets the certificate authority for secure HTTPS connections in YAML format. This optional parameter specifies the path to the CA certificate used for verifying the endpoint's certificate.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  http:\n    tls:\n      ca: path/to/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict SNI Checking in TOML\nDESCRIPTION: Configures Traefik to enforce strict SNI checking using TOML format. This prevents connections from clients that don't provide a matching server_name extension.\n\nLANGUAGE: toml\nCODE:\n```\n# Dynamic configuration\n\n[tls.options]\n  [tls.options.default]\n    sniStrict = true\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Interval in Traefik\nDESCRIPTION: Defines how frequently the health checks are performed. The value must be a valid duration (e.g., 10s for 10 seconds).\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.healthcheck.interval=10s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Connection to Docker in YAML\nDESCRIPTION: Configuration for connecting Traefik to the Docker Engine API over HTTP using YAML format. This can be used for remote Docker daemons with HTTP enabled.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  docker:\n    endpoint: \"http://127.0.0.1:2375\"\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Importing ECS and Docker Labels Configuration in YAML\nDESCRIPTION: This snippet references external YAML configuration files for ECS dynamic configuration and Docker labels. The files are included using the --8<-- syntax, which is likely a documentation tool directive for file inclusion.\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"content/reference/dynamic-configuration/ecs.yml\"\n--8<-- \"content/reference/dynamic-configuration/docker-labels.yml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Forwarding Flush Interval in Traefik\nDESCRIPTION: Sets the interval for flushing response data from backend to client, affecting streaming performance.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.responseforwarding.flushinterval=10\n```\n\n----------------------------------------\n\nTITLE: Example Ingress with IngressClassName\nDESCRIPTION: Example Kubernetes Ingress resource that references a specific IngressClass 'traefik-lb' to be used for routing.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\nspec:\n  ingressClassName: traefik-lb\n  rules:\n  - host: \"*.example.com\"\n    http:\n      paths:\n      - path: /example\n        pathType: Exact\n        backend:\n          service:\n            name: example-service\n            port:\n                number: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple EntryPoints with Port Reuse in Helm Chart Values\nDESCRIPTION: Configuration for multiple Traefik EntryPoints with reusePort enabled using Helm Chart values. This shows how to configure both public and private EntryPoints through additional arguments.\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalArguments:\n  - --entryPoints.web.reusePort=true\n  - --entryPoints.privateWeb.address=192.168.1.2:80\n  - --entryPoints.privateWeb.reusePort=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Status in Traefik\nDESCRIPTION: Defines the HTTP status code that Traefik should consider as healthy when performing health checks on backend services.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.status=42\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Pages Middleware with Docker Labels\nDESCRIPTION: Example showing how to configure custom error pages for 5XX status codes using Docker container labels. It defines status codes, error handler service, and query pattern as individual labels.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Custom Error Page for 5XX Status Code\nlabels:\n  - \"traefik.http.middlewares.test-errors.errors.status=500,501,503,505-599\"\n  - \"traefik.http.middlewares.test-errors.errors.service=error-handler-service\"\n  - \"traefik.http.middlewares.test-errors.errors.query=/{status}.html\"\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Router Rules in Traefik\nDESCRIPTION: Defines a rule for TCP router matching using HostSNI. Rules determine which requests are handled by this router based on SNI information.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.rule=HostSNI(`example.com`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain Middleware with Docker & Swarm Labels\nDESCRIPTION: Example of configuring a Chain middleware in Traefik using Docker or Swarm labels. The chain combines AllowList, BasicAuth, and RedirectScheme middlewares into a single 'secured' middleware that can be applied to routes.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.routers.router1.service=service1\"\n  - \"traefik.http.routers.router1.middlewares=secured\"\n  - \"traefik.http.routers.router1.rule=Host(`mydomain`)\"\n  - \"traefik.http.middlewares.secured.chain.middlewares=https-only,known-ips,auth-users\"\n  - \"traefik.http.middlewares.auth-users.basicauth.users=test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"\n  - \"traefik.http.middlewares.https-only.redirectscheme.scheme=https\"\n  - \"traefik.http.middlewares.known-ips.ipallowlist.sourceRange=192.168.1.7,127.0.0.1/32\"\n  - \"traefik.http.services.service1.loadbalancer.server.port=80\"\n```\n\n----------------------------------------\n\nTITLE: Declaring TCP Routers and Services in Traefik\nDESCRIPTION: Example demonstrating how to set up TCP routers and services using Traefik labels, including SNI host matching, TLS configuration, and port specification.\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  my-container:\n    # ...\n    deploy:\n      labels:\n        - \"traefik.tcp.routers.my-router.rule=HostSNI(`example.com`)\"\n        - \"traefik.tcp.routers.my-router.tls=true\"\n        - \"traefik.tcp.services.my-service.loadbalancer.server.port=4123\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Ingress Provider in YAML Configuration\nDESCRIPTION: Configuration snippet showing how to enable the Kubernetes Ingress provider in Traefik using YAML format.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress: {}\n```\n\n----------------------------------------\n\nTITLE: Marking Nomad Service as Canary Deployment in Traefik\nDESCRIPTION: Identifies a service instance as a canary deployment in Nomad, allowing for different routing or load balancing of canary instances.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.nomad.canary=true\n```\n\n----------------------------------------\n\nTITLE: Setting TCP Router Priority in Traefik\nDESCRIPTION: Assigns a priority value to a TCP router, which determines the order of evaluation when multiple routers could match the same request.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.routers.mytcprouter.priority=42\"\n```\n\n----------------------------------------\n\nTITLE: Configuring allowCrossNamespace in Traefik Kubernetes CRD Provider\nDESCRIPTION: Enables IngressRoute resources to reference resources in namespaces other than their own when set to true.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesCRD:\n    allowCrossNamespace: true\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesCRD]\n  allowCrossNamespace = true\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetescrd.allowCrossNamespace=true\n```\n\n----------------------------------------\n\nTITLE: Configuring DigestAuth Middleware with Labels\nDESCRIPTION: Example of configuring the DigestAuth middleware using Docker/container labels. It shows how to declare multiple authorized users in a single label.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\nlabels:\n  - \"traefik.http.middlewares.test-auth.digestauth.users=test:traefik:a2688e031edb4be6a3797f3882655c05,test2:traefik:518845800f9e2bfb1f1f740ec24f074e\"\n```\n\n----------------------------------------\n\nTITLE: Setting Router Rule Syntax in Traefik with ECS\nDESCRIPTION: Specifies the rule syntax version for a Traefik router. This option is deprecated and will be removed in future versions.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.ruleSyntax=v3\n```\n\n----------------------------------------\n\nTITLE: Example of X-Forwarded-Tls-Client-Cert-Info Header Format in Traefik\nDESCRIPTION: This example shows the unescaped format of the X-Forwarded-Tls-Client-Cert-Info header when all available certificate fields are selected. The header combines subject, issuer, validity dates, and subject alternative name information in a structured format. Multiple certificates would be separated by commas.\n\nLANGUAGE: text\nCODE:\n```\nSubject=\"DC=org,DC=cheese,C=FR,C=US,ST=Cheese org state,ST=Cheese com state,L=TOULOUSE,L=LYON,O=Cheese,O=Cheese 2,CN=*.example.com\";Issuer=\"DC=org,DC=cheese,C=FR,C=US,ST=Signing State,ST=Signing State 2,L=TOULOUSE,L=LYON,O=Cheese,O=Cheese 2,CN=Simple Signing CA 2\";NB=\"1544094616\";NA=\"1607166616\";SAN=\"*.example.org,*.example.net,*.example.com,test@example.org,test@example.net,10.0.1.0,10.0.1.2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Routing Rule in CLI\nDESCRIPTION: Command line flag to define the default routing rule applied to containers with no specific rule defined. Uses Go templates with sprig functions and access to container name and labels.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm.defaultRule='Host(`{{ .Name }}.{{ index .Labels \"customLabel\"}}`)'\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring insecureSkipVerify for TLS in TOML\nDESCRIPTION: Enables skipping TLS certificate verification in TOML format. This optional parameter, when set to true, allows Traefik to accept any certificate presented by the server without validation.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.http.tls]\n  insecureSkipVerify = true\n```\n\n----------------------------------------\n\nTITLE: Setting Traefik Log Level in YAML\nDESCRIPTION: Configures the logging level in Traefik using YAML format. This example sets the log level to DEBUG, which is more verbose than the default ERROR level.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  level: DEBUG\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple EntryPoints in Static Configuration using YAML\nDESCRIPTION: Static configuration that defines web, websecure and other entrypoints on different ports using YAML syntax.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  web:\n    address: \":80\"\n  websecure:\n    address: \":443\"\n  other:\n    address: \":9090\"\n```\n\n----------------------------------------\n\nTITLE: Exposing Traefik Dashboard with Helm Chart Values\nDESCRIPTION: Helm Chart values for exposing the Traefik dashboard with authentication. Configures an IngressRoute with custom domain and creates necessary authentication middleware with a basic auth secret.\n\nLANGUAGE: yaml\nCODE:\n```\n# Create an IngressRoute for the dashboard\ningressRoute:\n  dashboard:\n    enabled: true\n    # Custom match rule with host domain\n    matchRule: Host(`traefik.example.com`)\n    entryPoints: [\"websecure\"]\n    # Add custom middlewares : authentication and redirection\n    middlewares:\n      - name: traefik-dashboard-auth\n\n# Create the custom middlewares used by the IngressRoute dashboard (can also be created in another way).\n# /!\\ Yes, you need to replace \"changeme\" password with a better one. /!\\\nextraObjects:\n  - apiVersion: v1\n    kind: Secret\n    metadata:\n      name: traefik-dashboard-auth-secret\n    type: kubernetes.io/basic-auth\n    stringData:\n      username: admin\n      password: changeme\n\n  - apiVersion: traefik.io/v1alpha1\n    kind: Middleware\n    metadata:\n      name: traefik-dashboard-auth\n    spec:\n      basicAuth:\n        secret: traefik-dashboard-auth-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Domains with SANs in Traefik\nDESCRIPTION: Example of configuring a main domain with Subject Alternative Names (SANs) for a Traefik router. This configuration allows for wildcard certificates and multiple domains on a single certificate.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    routerbar:\n      rule: \"Host(`snitest.com`) && Path(`/bar`)\"\n      tls:\n        certResolver: \"bar\"\n        domains:\n          - main: \"snitest.com\"\n            sans:\n              - \"*.snitest.com\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.routerbar]\n    rule = \"Host(`snitest.com`) && Path(`/bar`)\"\n    [http.routers.routerbar.tls]\n      certResolver = \"bar\"\n      [[http.routers.routerbar.tls.domains]]\n        main = \"snitest.com\"\n        sans = [\"*.snitest.com\"]\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Domain Main for TCP Router in Traefik\nDESCRIPTION: Configures the main domain for TLS certificate generation for a TCP router. This is used with automatic certificate resolvers.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.domains[0].main=example.org\n```\n\n----------------------------------------\n\nTITLE: Global Metrics in Datadog Format\nDESCRIPTION: List of global metrics provided by Traefik in Datadog format, including configuration reloads, open connections, and TLS certificate expiration metrics.\n\nLANGUAGE: dd\nCODE:\n```\nconfig.reload.total\nconfig.reload.lastSuccessTimestamp\nopen.connections\ntls.certs.notAfterTimestamp\n```\n\n----------------------------------------\n\nTITLE: Configuring PassTLSClientCert Middleware with PEM in Kubernetes CRD\nDESCRIPTION: This Kubernetes Custom Resource Definition (CRD) creates a middleware that passes the PEM-encoded client certificate in the X-Forwarded-Tls-Client-Cert header.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-passtlsclientcert\nspec:\n  passTLSClientCert:\n    pem: true\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router Entry Points in Traefik\nDESCRIPTION: Specifies which entry points a TCP router should listen on. Multiple entry points can be specified in a comma-separated list.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.entrypoints=ep1,ep2\n```\n\n----------------------------------------\n\nTITLE: Configuring PassTLSClientCert with Full Certificate Info in YAML\nDESCRIPTION: This YAML configuration defines a middleware that passes all available certificate information in the X-Forwarded-Tls-Client-Cert-Info header, including subject details, issuer information, validity dates, and SANs.\n\nLANGUAGE: yaml\nCODE:\n```\n# Pass all the available info in the `X-Forwarded-Tls-Client-Cert-Info` header\nhttp:\n  middlewares:\n    test-passtlsclientcert:\n      passTLSClientCert:\n        info:\n          notAfter: true\n          notBefore: true\n          sans: true\n          subject:\n            country: true\n            province: true\n            locality: true\n            organization: true\n            organizationalUnit: true\n            commonName: true\n            serialNumber: true\n            domainComponent: true\n          issuer:\n            country: true\n            province: true\n            locality: true\n            organization: true\n            commonName: true\n            serialNumber: true\n            domainComponent: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Service with Consul Catalog Tags in Traefik\nDESCRIPTION: Specifies which backend service the router should direct traffic to.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.service=myservice\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing Strategy in Traefik\nDESCRIPTION: Sets the algorithm used to balance traffic between multiple instances of the same service. Options include 'wrr' (weighted round robin) and 'p2c' (power of two choices).\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.services.myservice.loadbalancer.strategy=p2c\"\n```\n\n----------------------------------------\n\nTITLE: Static EntryPoints Configuration in YAML\nDESCRIPTION: Static configuration defining three entry points (web, websecure, and other) with their respective addresses in YAML format.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\n\nentryPoints:\n  web:\n    address: \":80\"\n  websecure:\n    address: \":443\"\n  other:\n    address: \":9090\"\n```\n\n----------------------------------------\n\nTITLE: Setting Max Age for Sticky Cookies in Traefik\nDESCRIPTION: Defines how long (in seconds) the sticky session cookie should persist in the browser.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.maxage=42\n```\n\n----------------------------------------\n\nTITLE: Traefik Static Configuration Using TOML Format\nDESCRIPTION: Example of Traefik Proxy static configuration using TOML file format. The content is imported from 'content/reference/static-configuration/file.toml'.\n\nLANGUAGE: toml\nCODE:\n```\n--8<-- \"content/reference/static-configuration/file.toml\"\n```\n\n----------------------------------------\n\nTITLE: Linking UDP Router to Service in Traefik\nDESCRIPTION: Specifies which service a UDP router should forward matching requests to by referencing the service name.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.routers.myudprouter.service=myservice\n```\n\n----------------------------------------\n\nTITLE: Enabling API in YAML Configuration\nDESCRIPTION: Enables the Traefik API using YAML static configuration. This creates a special 'api@internal' service that can be referenced in a router.\n\nLANGUAGE: yaml\nCODE:\n```\n# Static Configuration\napi: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReplacePath Middleware in YAML\nDESCRIPTION: This snippet demonstrates how to configure the ReplacePath middleware using YAML structured format. It replaces the original request path with '/foo' before forwarding to the backend service.\n\nLANGUAGE: yaml\nCODE:\n```\n# Replace the path with /foo\nhttp:\n  middlewares:\n    test-replacepath:\n      replacePath:\n        path: \"/foo\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Whoami TCP Service for Gateway API Testing\nDESCRIPTION: Kubernetes manifests for deploying a whoami TCP service. Includes a Deployment with the whoamitcp container and a Service to expose it on port 3000.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: whoamitcp\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: whoamitcp\n\n  template:\n    metadata:\n      labels:\n        app: whoamitcp\n    spec:\n      containers:\n        - name: whoami\n          image: traefik/whoamitcp\n          args:\n            - --port=:3000\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoamitcp\n  namespace: default\nspec:\n  selector:\n    app: whoamitcp\n  ports:\n    - port: 3000\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Domain SAN Entries for TCP Router in Traefik\nDESCRIPTION: Configures Subject Alternative Names (SANs) for TLS certificate generation for a TCP router. Multiple SANs can be specified in a comma-separated list.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.domains[0].sans=test.example.org,dev.example.org\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Ingress Provider via CLI\nDESCRIPTION: Command line option to enable the Kubernetes Ingress provider in Traefik.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress=true\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Domain Main with Consul Catalog Tags in Traefik\nDESCRIPTION: Sets the main domain for TLS certificate generation.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.tls.domains[0].main=example.org\n```\n\n----------------------------------------\n\nTITLE: Matching TCP Connections by IPv4 ClientIP in Traefik\nDESCRIPTION: Configuration example showing how to match TCP connections from a specific IPv4 address using the ClientIP matcher in Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\nClientIP(`10.76.105.11`)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate Resolver for TCP Router\nDESCRIPTION: Specifies which certificate resolver to use for obtaining TLS certificates. References a resolver defined elsewhere in Traefik's configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.certresolver=myresolver\n```\n\n----------------------------------------\n\nTITLE: Setting Up Certificate Storage Volume in Traefik\nDESCRIPTION: This configuration creates a persistent volume for storing Let's Encrypt certificates and configures Traefik to use this location for certificate storage.\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  # Create a letsencrypt dir within the folder where the docker-compose file is\n  - \"./letsencrypt:/letsencrypt\"\n\ncommand:\n  # Tell to store the certificate on a path under our volume\n  - \"--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Service Discovery in Traefik\nDESCRIPTION: Controls whether Traefik should include the service in routing. This overrides the exposedByDefault setting.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.enable=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Dashboard in TOML Configuration\nDESCRIPTION: Enables the Traefik dashboard using TOML configuration. The dashboard provides a visual interface for monitoring and managing Traefik. By default, the dashboard is enabled when API is configured.\n\nLANGUAGE: toml\nCODE:\n```\n[api]\n  dashboard = true\n```\n\n----------------------------------------\n\nTITLE: Configuring StripPrefix Middleware in YAML Structured Format\nDESCRIPTION: This snippet shows how to configure the stripPrefix middleware to strip /foobar and /fiibar prefixes using YAML structured format. This configuration is applied at the HTTP middleware level.\n\nLANGUAGE: yaml\nCODE:\n```\n# Strip prefix /foobar and /fiibar\nhttp:\n  middlewares:\n    test-stripprefix:\n      stripPrefix:\n        prefixes:\n          - \"/foobar\"\n          - \"/fiibar\"\n```\n\n----------------------------------------\n\nTITLE: Using Kubernetes Service Native Load-Balancing with Traefik\nDESCRIPTION: Example demonstrates how to use the native Kubernetes Service load balancing with Traefik by setting the nativeLB option to true. This instructs Traefik to use the Kubernetes Service clusterIP directly instead of pod IPs.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test.route\n  namespace: default\n\nspec:\n  entryPoints:\n    - foo\n\n  routes:\n  - match: Host(`example.net`)\n    kind: Rule\n    services:\n    - name: svc\n      port: 80\n      # Here, nativeLB instructs to build the server load-balancer with the Kubernetes Service clusterIP only.\n      nativeLB: true\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc\n  namespace: default\nspec:\n  type: ClusterIP\n  ...\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Interval in Traefik\nDESCRIPTION: Defines the time interval between consecutive health checks in seconds.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.interval=10\n```\n\n----------------------------------------\n\nTITLE: Setting Router Entry Points with Docker Label\nDESCRIPTION: Example of defining which entry points a router should listen on using a Docker label. The router will accept traffic from entry points ep1 and ep2.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.entrypoints=ep1,ep2\"\n```\n\n----------------------------------------\n\nTITLE: Matching TCP Connections from IPv6 Subnet in Traefik\nDESCRIPTION: Configuration example showing how to match TCP connections from an IPv6 subnet using CIDR notation with the ClientIP matcher in Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\nClientIP(`fe80::/10`)\n```\n\n----------------------------------------\n\nTITLE: Configuring InFlightReq Middleware in Consul Catalog\nDESCRIPTION: This snippet shows how to configure the InFlightReq middleware in Consul Catalog to limit simultaneous connections to 10.\n\nLANGUAGE: yaml\nCODE:\n```\n# Limiting to 10 simultaneous connections\n- \"traefik.http.middlewares.test-inflightreq.inflightreq.amount=10\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ipAllowList Middleware in Structured TOML Format\nDESCRIPTION: TOML configuration example showing how to set up the ipAllowList middleware to accept requests only from specific IP addresses (127.0.0.1/32 and 192.168.1.7).\n\nLANGUAGE: toml\nCODE:\n```\n# Accepts request from defined IP\n[http.middlewares]\n  [http.middlewares.test-ipallowlist.ipAllowList]\n    sourceRange = [\"127.0.0.1/32\", \"192.168.1.7\"]\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Domain SANs for TCP Router in Traefik\nDESCRIPTION: Configures Subject Alternative Names (SANs) for the TLS certificate in a TCP router. Multiple domains can be specified as a comma-separated list.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.routers.mytcprouter.tls.domains[0].sans=test.example.org,dev.example.org\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Password in Traefik Rate Limit Middleware\nDESCRIPTION: Configuration examples for setting the Redis password authentication across different Traefik deployment environments. This parameter is optional with a default value of empty string.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n    - \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.password=password\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n   name: test-ratelimit\nspec:\n   rateLimit:\n      # ...\n      redis:\n         secret: mysecret\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n   name: mysecret\n   namespace: default\n\ndata:\n   username: dXNlcm5hbWU=\n   password: cGFzc3dvcmQ=\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.password=password\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        # ...\n        redis:\n          password: password\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    [http.middlewares.test-ratelimit.rateLimit.redis]\n      password = \"password\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Observability in Traefik using Labels\nDESCRIPTION: Docker labels configuration example showing how to disable metrics, access logs, and tracing for a specific HTTP router in Traefik. This setup creates a router named 'my-router' that handles paths starting with '/foo' and connects to 'service-foo'.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.routers.my-router.rule=Path(`/foo`)\"\n  - \"traefik.http.routers.my-router.service=service-foo\"\n  - \"traefik.http.routers.my-router.observability.metrics=false\"\n  - \"traefik.http.routers.my-router.observability.accessLogs=false\"\n  - \"traefik.http.routers.my-router.observability.tracing=false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring External Account Binding for ACME with YAML\nDESCRIPTION: YAML configuration for setting up External Account Binding (EAB) with key identifier and HMAC key for external Certificate Authority integration.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      eab:\n        kid: abc-keyID-xyz\n        hmacEncoded: abc-hmac-xyz\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Resolver for Router in Traefik with Consul Catalog\nDESCRIPTION: Specifies which certificate resolver 'myrouter' should use for obtaining TLS certificates, in this case 'myresolver'.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.tls.certresolver=myresolver\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Bearer Token in YAML\nDESCRIPTION: YAML configuration for specifying the bearer token used for Kubernetes client authentication.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    token: \"mytoken\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Domain SANs for TCP Router in Traefik\nDESCRIPTION: Configures Subject Alternative Names (SANs) for the TLS certificate, allowing multiple domain names to be secured with the same certificate.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.routers.mytcprouter.tls.domains[0].sans=test.example.org,dev.example.org\"\n```\n\n----------------------------------------\n\nTITLE: Setting Ping Timeout in Traefik Forwarding Timeouts\nDESCRIPTION: Configuration examples for setting the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      forwardingTimeouts:\n        pingTimeout: \"1s\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.serversTransports.mytransport.forwardingTimeouts]\n  pingTimeout = \"1s\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  forwardingTimeouts:\n    pingTimeout: \"1s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Resolver in Traefik\nDESCRIPTION: Example of configuring a certificate resolver for a Traefik router. When certResolver is defined, Traefik will attempt to generate certificates based on the router's Host & HostSNI rules.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    routerfoo:\n      rule: \"Host(`snitest.com`) && Path(`/foo`)\"\n      tls:\n        certResolver: foo\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.routerfoo]\n    rule = \"Host(`snitest.com`) && Path(`/foo`)\"\n    [http.routers.routerfoo.tls]\n      certResolver = \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Declaring and Referencing TCP Middleware in Traefik\nDESCRIPTION: Example showing how to declare a TCP middleware (InFlightConn) and reference it from a router. The middleware limits the amount of concurrent connections.\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n# Declaring a middleware\ntraefik.tcp.middlewares.test-inflightconn.amount=10\n# Referencing a middleware\ntraefik.tcp.routers.my-service.middlewares=test-inflightconn\n```\n\n----------------------------------------\n\nTITLE: Configuring Period in YAML File\nDESCRIPTION: Example of configuring the period parameter in a YAML file to set a rate of 6 requests per minute. The period parameter defines the time unit for the rate limiting.\n\nLANGUAGE: yaml\nCODE:\n```\n# 6 reqs/minute\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        average: 6\n        period: 1m\n```\n\n----------------------------------------\n\nTITLE: Configuring TCPRoute for TCP Traffic Routing in Kubernetes\nDESCRIPTION: Defines a TCPRoute resource in the Gateway API experimental channel that routes TCP traffic to a whoami backend service. The configuration specifies the backend service and port.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: gateway.networking.k8s.io/v1alpha2\nkind: TCPRoute\nmetadata:\n  name: whoami-tcp\n  namespace: default\nspec:\n  parentRefs:\n    - name: traefik\n      sectionName: tcp\n      kind: Gateway\n\n  rules:\n     - backendRefs:\n        - name: whoamitcp\n          namespace: default\n          port: 3000\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Challenge in Traefik with CLI\nDESCRIPTION: Command-line configuration for enabling the TLS-ALPN-01 challenge resolver in Traefik to generate and renew ACME certificates.\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.tlschallenge=true\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Headers in Traefik\nDESCRIPTION: Adds custom headers to health check requests sent by Traefik to the backend service. This allows customizing how health checks authenticate or identify themselves to the backend.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.healthcheck.headers.X-Foo=foobar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Entry Points in Traefik with Consul Catalog\nDESCRIPTION: Defines which entry points the router 'myrouter' should be attached to, in this case 'web' and 'websecure' entry points.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.entrypoints=web,websecure\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Service with TLS Backend in Traefik\nDESCRIPTION: Example of declaring a TCP service with TLS enabled for the backend connection. This configuration enables secure communication between Traefik and the backend server.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - address: \"xx.xx.xx.xx:xx\"\n            tls: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.services]\n  [tcp.services.my-service.loadBalancer]\n    [[tcp.services.my-service.loadBalancer.servers]]\n      address = \"xx.xx.xx.xx:xx\"\n      tls = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Static Configuration for gRPC with HTTPS (TOML)\nDESCRIPTION: Static configuration in TOML format for setting up Traefik with HTTPS entrypoints to handle secure gRPC traffic. This configuration includes root CA certificates for secure backend communication.\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints]\n  [entryPoints.websecure]\n    address = \":4443\"\n\n\n[serversTransport]\n  # For secure connection on backend.local\n  rootCAs = [ \"./backend.cert\" ]\n\n[api]\n\n[provider.file]\n  directory = \"/path/to/dynamic/config\"\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Network for Container in Traefik\nDESCRIPTION: Overrides the default Docker network used for connections to the container. Important when a container is connected to multiple networks.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.docker.network=mynetwork\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Period in TOML File\nDESCRIPTION: Example of configuring the period parameter in a TOML file to set a rate of 6 requests per minute. The period parameter defines the time unit for the rate limiting.\n\nLANGUAGE: toml\nCODE:\n```\n# 6 reqs/minute\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    average = 6\n    period = \"1m\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ServersTransportTCP in Kubernetes with Traefik CRD\nDESCRIPTION: An example YAML configuration for ServersTransportTCP CRD that sets up TLS options including server name and insecure skip verification. This custom resource defines how Traefik should handle TCP transport to backend servers.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  tls:\n    serverName: example.org\n    insecureSkipVerify: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Access Logs in TOML Format\nDESCRIPTION: TOML configuration for Traefik access logs with detailed settings for format, filters, and field customization. This provides the same functionality as the YAML example but in TOML syntax.\n\nLANGUAGE: toml\nCODE:\n```\n[accessLog]\n  format = \"json\"\n\n  [accessLog.filters]\n    statusCodes = [ \"200\", \"300-302\" ]\n    retryAttempts = true\n    minDuration = \"10ms\"\n\n  [accessLog.fields]\n    defaultMode = \"keep\"\n\n    [accessLog.fields.names]\n      ClientUsername = \"drop\"\n\n    [accessLog.fields.headers]\n      defaultMode = \"keep\"\n\n      [accessLog.fields.headers.names]\n        User-Agent = \"redact\"\n        Authorization = \"drop\"\n```\n\n----------------------------------------\n\nTITLE: Referencing ServersTransport Resource in Traefik\nDESCRIPTION: Links a service to a ServersTransport resource defined with the File provider or Kubernetes CRD. This allows configuring transport-level settings for the service.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.<service_name>.loadbalancer.serverstransport=foobar@file\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Bearer Token in TOML\nDESCRIPTION: TOML configuration for specifying the bearer token used for Kubernetes client authentication.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress]\n  token = \"mytoken\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Static EntryPoints Configuration Using CLI\nDESCRIPTION: Static configuration defining three entry points (web, websecure, and other) with their respective addresses using command-line interface arguments.\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.web.address=:80\n--entryPoints.websecure.address=:443\n--entryPoints.other.address=:9090\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Labels for TLS Certificate Resolution\nDESCRIPTION: This snippet shows the Docker service label configuration needed to tell Traefik which certificate resolver to use for securing the service with HTTPS.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  # Uses the Host rule to define which certificate to issue\n  - \"traefik.http.routers.whoami.tls.certresolver=myresolver\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Specific HTTP to HTTPS Redirection in Traefik v2 with TOML\nDESCRIPTION: Example of domain-specific HTTP to HTTPS redirection in Traefik v2 using TOML format. Shows how to set up separate routers for HTTP and HTTPS traffic with a redirectScheme middleware for redirection from HTTP to HTTPS.\n\nLANGUAGE: toml\nCODE:\n```\n## dynamic configuration\n# dynamic-conf.toml\n\n[http.routers]\n  [http.routers.router0]\n    rule = \"Host(`example.net`)\"\n    service = \"my-service\"\n    entrypoints = [\"web\"]\n    middlewares = [\"https_redirect\"]\n\n[http.routers.router1]\n    rule = \"Host(`example.net`)\"\n    service = \"my-service\"\n    entrypoints = [\"websecure\"]\n    [http.routers.router1.tls]\n\n[http.middlewares]\n  [http.middlewares.https_redirect.redirectScheme]\n    scheme = \"https\"\n    permanent = true\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Certificate Resolver for a Router in Traefik with ECS\nDESCRIPTION: Specifies which certificate resolver to use for obtaining TLS certificates for the router.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.tls.certresolver=myresolver\n```\n\n----------------------------------------\n\nTITLE: Configuring IPAllowList TCP Middleware with Tags\nDESCRIPTION: Configures an IPAllowList TCP middleware in Traefik using JSON tags format. This configuration restricts access to only the specified IP addresses.\n\nLANGUAGE: json\nCODE:\n```\n// Accepts request from defined IP\n{\n  //...\n  \"Tags\" : [\n    \"traefik.tcp.middlewares.test-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32, 192.168.1.7\"s\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Scheme in Traefik\nDESCRIPTION: Sets the protocol scheme (http/https) used for health check requests to the backend service.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.scheme=http\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Configuration File Path in Traefik\nDESCRIPTION: Command-line example showing how to override the default configuration file location in Traefik using the configFile argument.\n\nLANGUAGE: bash\nCODE:\n```\ntraefik --configFile=foo/bar/myconfigfile.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring SameSite for Sticky Cookie in Traefik\nDESCRIPTION: Sets the SameSite attribute for the sticky session cookie to control cross-site request behavior.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/sticky/cookie/samesite\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Timeout in Traefik\nDESCRIPTION: Defines the timeout duration for health check requests. If a health check takes longer than this value, the check is considered failed.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/healthcheck/timeout\n```\n\n----------------------------------------\n\nTITLE: Traefik EntryPoints Configuration\nDESCRIPTION: Docker Compose snippet showing how to configure Traefik entrypoints for HTTP traffic and expose the necessary ports. This allows Traefik to accept incoming requests on port 80.\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  # Traefik will listen to incoming request on the port 80 (HTTP)\n  - \"--entryPoints.web.address=:80\"\n\nports:\n  - \"80:80\"\n```\n\n----------------------------------------\n\nTITLE: Declaring and Referencing TCP Middlewares in Traefik\nDESCRIPTION: Example showing how to declare a TCP middleware (InFlightConn) and reference it in a TCP router configuration.\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n# Declaring a middleware\ntraefik.tcp.middlewares.test-inflightconn.amount=10\n# Referencing a middleware\ntraefik.tcp.routers.my-service.middlewares=test-inflightconn\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Redirect Following in Traefik\nDESCRIPTION: Controls whether Traefik should follow HTTP redirects when performing health checks on backend services.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.followredirects=true\n```\n\n----------------------------------------\n\nTITLE: Configuring InFlightConn TCP Middleware in TOML\nDESCRIPTION: Example of limiting simultaneous connections to 10 using structured TOML configuration for Traefik's TCP middleware.\n\nLANGUAGE: toml\nCODE:\n```\n# Limiting to 10 simultaneous connections\n[tcp.middlewares]\n  [tcp.middlewares.test-inflightconn.inFlightConn]\n    amount = 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Protocol Version for TCP Service in Traefik\nDESCRIPTION: Sets the PROXY protocol version for a TCP service, which allows client connection information to be passed through proxies.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.mytcpservice.loadbalancer.proxyprotocol.version=1\n```\n\n----------------------------------------\n\nTITLE: Enabling Traefik Dashboard with CLI Flags\nDESCRIPTION: Command-line flag to enable the Traefik dashboard. This allows enabling the dashboard when running Traefik directly from the command line.\n\nLANGUAGE: cli\nCODE:\n```\n--api=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Sessions in Traefik Load Balancer\nDESCRIPTION: Controls whether to enable sticky sessions for the service to maintain user affinity to servers.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/sticky\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Bearer Token via CLI\nDESCRIPTION: Command line option to specify the bearer token used for Kubernetes client authentication.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.token=mytoken\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Mirroring with Traffic Control in TOML\nDESCRIPTION: TOML configuration for request mirroring with options to control body mirroring and size limits. Demonstrates mirroring 10% of traffic from the primary service to a secondary service with a 1KB body size limit.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.mirrored-api]\n    [http.services.mirrored-api.mirroring]\n      service = \"appv1\"\n      # maxBodySize is the maximum size in bytes allowed for the body of the request.\n      # If the body is larger, the request is not mirrored.\n      # Default value is -1, which means unlimited size.\n      maxBodySize = 1024\n      # mirrorBody defines whether the request body should be mirrored.\n      # Default value is true.\n      mirrorBody = false\n    [[http.services.mirrored-api.mirroring.mirrors]]\n      name = \"appv2\"\n      percent = 10\n\n  [http.services.appv1]\n    [http.services.appv1.loadBalancer]\n      [[http.services.appv1.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n  [http.services.appv2]\n    [http.services.appv2.loadBalancer]\n      [[http.services.appv2.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Traefik Configuration with curl\nDESCRIPTION: Bash command to retrieve and format the Traefik configuration from the API using curl and jq. This is useful for debugging on remote servers.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s 127.0.0.1:8080/api/rawdata | jq .\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Events Watch in CLI\nDESCRIPTION: Command line flag to control whether Traefik watches Docker events. When enabled, Traefik reacts immediately to changes in the Docker Swarm environment.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm.watch=false\n# ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Access Logs for Router with Docker Label\nDESCRIPTION: Example of enabling access logs for a specific router using a Docker label. This turns on access logging for observability purposes.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.routers.myrouter.observability.accesslogs=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ipAllowList Middleware in Structured YAML Format\nDESCRIPTION: YAML configuration example showing how to set up the ipAllowList middleware to accept requests only from specific IP addresses (127.0.0.1/32 and 192.168.1.7).\n\nLANGUAGE: yaml\nCODE:\n```\n# Accepts request from defined IP\nhttp:\n  middlewares:\n    test-ipallowlist:\n      ipAllowList:\n        sourceRange:\n          - \"127.0.0.1/32\"\n          - \"192.168.1.7\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Consul Connect Integration in Traefik\nDESCRIPTION: Controls whether Traefik should treat the service as a Consul Connect capable service. This overrides the connectByDefault setting.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.consulcatalog.connect=true\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Metrics in Traefik via CLI\nDESCRIPTION: Command line interface option to enable OpenTelemetry metrics in Traefik. This flag activates the OTLP metrics exporter with default settings.\n\nLANGUAGE: bash\nCODE:\n```\n--metrics.otlp=true\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for TCP Service Backend in Traefik\nDESCRIPTION: Configures Traefik to use TLS when connecting to the backend TCP service, enabling secure communication between Traefik and backend.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.tcp.services.mytcpservice.loadbalancer.server.tls=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Headers in Traefik with YAML Labels\nDESCRIPTION: Sets custom headers to be sent during health check requests to the backend services.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.headers.X-Foo=foobar\n```\n\n----------------------------------------\n\nTITLE: Docker Provider Configuration for Traefik\nDESCRIPTION: Complete Docker Compose configuration showing how to set up Traefik with Docker provider integration. This includes mounting the Docker socket, enabling the Docker provider, and configuring container labels for routing.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik:\n  command:\n    # Enabling Docker provider\n    - \"--providers.docker=true\"\n    # Do not expose containers unless explicitly told so\n    - \"--providers.docker.exposedbydefault=false\"\n  volumes:\n    - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n\nwhoami:\n  labels:\n    # Explicitly tell Traefik to expose this container\n    - \"traefik.enable=true\"\n    # The domain the service will respond to\n    - \"traefik.http.routers.whoami.rule=Host(`whoami.localhost`)\"\n    # Allow request only from the predefined entry point named \"web\"\n    - \"traefik.http.routers.whoami.entrypoints=web\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailscale Certificate Resolver via CLI\nDESCRIPTION: Command line parameter for enabling a Tailscale certificate resolver in Traefik. This allows certificate resolution through the Tailscale daemon.\n\nLANGUAGE: bash\nCODE:\n```\n--certificatesresolvers.myresolver.tailscale=true\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Domain Main Name for TCP Router\nDESCRIPTION: Defines the main domain name for the TLS certificate. This is used when automatically generating certificates through a certificate resolver.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.domains[0].main=example.org\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik with Environment Variables\nDESCRIPTION: Example showing how to configure Traefik using environment variables with the TRAEFIK_ prefix. This approach defines the same configuration as previous examples but through environment variables.\n\nLANGUAGE: sh\nCODE:\n```\nTRAEFIK_ENTRYPOINTS_WEB_ADDRESS=\":80\" TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=\":443\" TRAEFIK_PROVIDERS_DOCKER=true TRAEFIK_API_DASHBOARD=true TRAEFIK_LOG_LEVEL=\"INFO\" traefik\n```\n\n----------------------------------------\n\nTITLE: Referencing a ServersTransport Resource in Traefik\nDESCRIPTION: Links a service to a predefined ServersTransport resource for advanced transport configuration. The resource must be defined separately using the File provider or Kubernetes CRD.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.serverstransport=foobar@file\"\n```\n\n----------------------------------------\n\nTITLE: Setting Password for HTTP Authentication in CLI\nDESCRIPTION: Command line flag to set the password for Basic HTTP authentication when the Docker daemon socket is exposed through an HTTP proxy. This is used in conjunction with the username option.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm.password=\"foo\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router Priority with Docker Labels\nDESCRIPTION: Example of configuring multiple TCP routers with different priorities using Docker container labels to handle specific client IP addresses.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n - \"traefik.tcp.routers.Router-1.rule=ClientIP(`192.168.0.12`)\"\n - \"traefik.tcp.routers.Router-1.entryPoints=web\"\n - \"traefik.tcp.routers.Router-1.service=service-1\"\n - \"traefik.tcp.routers.Router-1.priority=2\"\n - \"traefik.tcp.routers.Router-2.rule=ClientIP(`192.168.0.0/24`)\"\n - \"traefik.tcp.routers.Router-2.entryPoints=web\"\n - \"traefik.tcp.routers.Router-2.service=service-2\"\n - \"traefik.tcp.routers.Router-2.priority=1\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Swarm via TCP in CLI\nDESCRIPTION: Command line flag to configure Traefik to connect to a remote Docker daemon using TCP. This allows Traefik to communicate with a Docker daemon on a different host using TCP protocol.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm.endpoint=tcp://127.0.0.1:2375\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Domain Main Name in Traefik with ECS\nDESCRIPTION: Sets the main domain name for TLS certificate generation. This is used when requesting certificates from an ACME provider like Let's Encrypt.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.tls.domains[0].main=example.org\n```\n\n----------------------------------------\n\nTITLE: Dynamic Configuration for gRPC Service in Traefik (YAML)\nDESCRIPTION: Dynamic configuration in YAML format that sets up a router to forward gRPC requests to a backend service. The configuration uses h2c protocol for HTTP/2 cleartext communication with the backend.\n\nLANGUAGE: yaml\nCODE:\n```\n## dynamic configuration ##\n\nhttp:\n  routers:\n    routerTest:\n      service: srv-grpc\n      rule: Host(`frontend.local`)\n\n  services:\n    srv-grpc:\n      loadBalancer:\n        servers:\n        - url: h2c://backend.local:8080\n```\n\n----------------------------------------\n\nTITLE: Declaring Routers and Services with File Provider\nDESCRIPTION: Example of using the file provider to declare routers and services in Traefik. This shows how to define a router with a Host rule pointing to 'example.com' and a service pointing to a local server at port 8080.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  routers:\n    my-router:\n      rule: \"Host(`example.com`)\"\n      service: my-service\n\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - url: \"http://localhost:8080\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http]\n  [http.routers]\n    [http.routers.my-router]\n      rule = \"Host(`example.com`)\"\n      service = \"my-service\"\n\n  [http.services]\n    [http.services.my-service.loadBalancer]\n      [[http.services.my-service.loadBalancer.servers]]\n        url = \"http://localhost:8080\"\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret for Gateway TLS Termination in Kubernetes\nDESCRIPTION: This YAML defines a Kubernetes Secret of type 'kubernetes.io/tls' containing self-signed certificate data (tls.crt and tls.key) for the whoami.localhost domain. This secret is referenced by the Gateway resource for TLS termination on HTTPS and TLS listeners.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: secret-tls\n  namespace: default\ntype: kubernetes.io/tls\ndata:\n  # Self-signed certificate for the whoami.localhost domain.\n  tls.crt: |\n    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZWakNDQXo2Z0F3SUJBZ0lVZUUrZG94aTUrMTBMVi9DaUdTMkt2Q1dJR1dZd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1JERUxNQWtHQTFVRUJoTUNSbEl4RFRBTEJnTlZCQWNNQkV4NWIyNHhGVEFUQmdOVkJBb01ERlJ5WVdWbQphV3NnVEdGaWN6RVBNQTBHQTFVRUF3d0dWMmh2WVcxcE1DQVhEVEkwTURjeE1ERTFNRGt3TjFvWUR6SXhNalF3Ck5qRTJNVFV3T1RBM1dqQkVNUXN3Q1FZRFZRUUdFd0pHVWpFTk1Bc0dBMVVFQnd3RVRIbHZiakVWTUJNR0ExVUUKQ2d3TVZISmhaV1pwYXlCTVlXSnpNUTh3RFFZRFZRUUREQVpYYUc5aGJXa3dnZ0lpTUEwR0NTcUdTSWIzRFFFQgpBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRQ1pNNm1WNUJkV2V0QzZtdnp0YVBobFNjZ0ljbnd6Z3NsOEFxendEMk05ClJWVkZwRUxBbTh2OTNlRWtMZEY2ZnNkY0FhUXQxWlFDSFdYby9mTHBRNVVrUHh1djZNUCt2NG1KMHY4ZEtGWjcKUjcwaTVud1lCMkVlVkw2RUNZaWlxNmZ6VEtsa3F6U0QvNW93elN3L3pqa0dUYTBJdy92SDlhc0g3NEhqM1d0QQo3RythenZjaVlhQTZxK1dWYlZxNlBIanF6em9obEFuMkh1ano2aERqYWllc3ZMbHdBL0IvcmhEc0FLaCtpMHI4CkFKUTFqM0JiTGJuYkJyWmZqYnBJUjNhYVh5amkwK3RQWENnVTkzQmU5dm1LZTZTY0dSNy82T25tYmtTc0xjZFcKaFpVNzcrL2c4WllsZGhwS01nczc4ekJYUlh4bHlzSThHRUtqU1hud3k5WmZNT2RJNEpBTWNtT0lOaVlBY21abgpJTUJIa0xacFl3aUl0eFdseXVJcWxoZFpkSHNrTFdNSjBSTHUxRmhTMnBFV0NOZTM3VDBiOWhtNFg0OXJ1QWJ6Ckl1M01xSmczcXFIdGRMNGRkZ1JZRHNjMXd0cDJrR2dBZGxDaXJIclF6K1l4MEJNT1ZsZEczaG1SUUh5ZHEySHIKWW0xeEFDNWpMZ3FvaVZhY09wd0xKY21PcGsrZWVNQkNZNVo0ekNYN1hXeXdhVmNtMnN2aGlPMThCZFIraDloWQpiMkRNZDFCendDbE95endQcUlvQy9uNGRURG96Ry9GT3NySzgvNEZ4dzY2Q1ZmM3E4MzBNUHdSd2xDSzFDQjdGCjNQK3lKWkpPelRuK05QZ2dGQW9NaGZUYXBQWTFhUGlWajBzVG9vQjBaOGNFV1RkTnJxQU5tUGs5aDNoQjJwbjgKSndJREFRQUJvejR3UERBYkJnTlZIUkVFRkRBU2doQjNhRzloYldrdWJHOWpZV3hvYjNOME1CMEdBMVVkRGdRVwpCQlNGSjF4N01xdG9zQ3UwQmFWbEs1U054K2djampBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQVdCOVc1eWkzClRpTWpmSThhSCtMZW1wZjc4clhyeWJ6UXJvSXdEazhqQXhnc3Nrc2V2ZEtIaXJIZGJMZ0RoS2krbkJLeEQ5S2QKNWM4RS9VL1VHWUhxaUowTVUzYkpoeTVNM3oyaklKd1hFa3FuVVhRd0dBNzVyU0QxWVBkOTlWeVpuNEJVRlEwdwpCT3loOU5DS3Z3ZTgycUVlOWZmeU5iem5JUEMrNS9pekhaYlNQMEpwRzdtNFQ5TXljdHV1OTlsaVhmSVlCMU1PCkRFRUdpamxhZ3JvdTliVlpsNmovR2xCaVZpU0JVQXhaRlNqdFErV2RFODJaZlFRUFVWdXQrUEY0SEl0N1dmYlgKaUpZbjRsMytJSVczNStvbUZ5QjR5WUJNdU9SVWRsZ3V5N1ZieEU5OTdPdHYzTnpDOGJYcGtaQVM0TkVzQVVFdwpJZ3lOcTFCdExsb3dZdjZXY05HbkJ5RE1NRUMzdUYzNEcxQkJCTzFDRHUrYXBVdW5NbVhUWmU5WlkrbXh4U2Z2CnBZclhHTHBoT2t4ZitQalpMbEpqQVFlcTNxblMvWWtLQmtYQi9zb282ZVVLTTlybyt5RTVMbnFrV20wZXpQWmwKc2Z5NGpqZ0lJUHlUMHhhZ0YyWExzUSs0M3N4aDRYTEhmc3Z3Zis2QnJVK2trTnoydmc2M3duLzJDQUNVVms3bgphSDdwZzZyZGt4T2pOTDJjUGd6ZzhWaExXbkVYYjhhUVJlVjY1WnlRc0xta21oOXBlSFRpYXBUb2xWa0d6TDIwCm9pdExZc3ZUcnhUR2NRd3Jpd3FaT1I3WjEvVEJLVnVoYnp0emxlRjFHRk9LdE52UmNSREVBeWVlbnJDRzRRMmgKMnFNNFh1RFFKcjJrR095OEV0dnlYTitENkNZUkg0ck5vZUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\n\n  tls.key: |\n    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Nzd2dna25BZ0VBQW9JQ0FRQ1pNNm1WNUJkV2V0QzYKbXZ6dGFQaGxTY2dJY253emdzbDhBcXp3RDJNOVJWVkZwRUxBbTh2OTNlRWtMZEY2ZnNkY0FhUXQxWlFDSFdYbwovZkxwUTVVa1B4dXY2TVArdjRtSjB2OGRLRlo3UjcwaTVud1lCMkVlVkw2RUNZaWlxNmZ6VEtsa3F6U0QvNW93CnpTdy96amtHVGEwSXcvdkg5YXNINzRIajNXdEE3RythenZjaVlhQTZxK1dWYlZxNlBIanF6em9obEFuMkh1anoKNmhEamFpZXN2TGx3QS9CL3JoRHNBS2graTByOEFKUTFqM0JiTGJuYkJyWmZqYnBJUjNhYVh5amkwK3RQWENnVQo5M0JlOXZtS2U2U2NHUjcvNk9ubWJrU3NMY2RXaFpVNzcrL2c4WllsZGhwS01nczc4ekJYUlh4bHlzSThHRUtqClNYbnd5OVpmTU9kSTRKQU1jbU9JTmlZQWNtWm5JTUJIa0xacFl3aUl0eFdseXVJcWxoZFpkSHNrTFdNSjBSTHUKMUZoUzJwRVdDTmUzN1QwYjlobTRYNDlydUFiekl1M01xSmczcXFIdGRMNGRkZ1JZRHNjMXd0cDJrR2dBZGxDaQpySHJReitZeDBCTU9WbGRHM2htUlFIeWRxMkhyWW0xeEFDNWpMZ3FvaVZhY09wd0xKY21PcGsrZWVNQkNZNVo0CnpDWDdYV3l3YVZjbTJzdmhpTzE4QmRSK2g5aFliMkRNZDFCendDbE95endQcUlvQy9uNGRURG96Ry9GT3NySzgKLzRGeHc2NkNWZjNxODMwTVB3UndsQ0sxQ0I3RjNQK3lKWkpPelRuK05QZ2dGQW9NaGZUYXBQWTFhUGlWajBzVApvb0IwWjhjRVdUZE5ycUFObVBrOWgzaEIycG44SndJREFRQUJBb0lDQUVCa2dKRXA3ODAvamVBQktQSTR2cjhFCkJmblc5UEZKdFpwVUhaQkJSM3NIVzFJTU9xcHVVWTJBNXhLbjEzWmZOemdxMEhFYlpqeUZVc0pkaXU0VW8razYKUlU3b3pRaVVSU0VTK0h1dTZycWlhcEx5d1pIditCZ2hrbm80NzU4Lyt6VytNU3pJOFNmU0ZXTVJ1ZG1QdWxRMQo3ZGJUV1U2d3FaU0tUTlFUeXZMYzdnUHBuZUpybWtkTzNRNnppZ0RoVGdtVDFHRXNzZ3NxN3NzbXhMWnhkZithCnkyNlRtVkJ4UDFlUzV6OVpHTWxYRFBSK044RjdOTFVrMng3S21WT3NCZVBZdjN5bmlpNHZGQUhNQndWRFZadXAKWUlUajRpMjZIaVhtanlLM2t5T0F2anNWSElRMXh1QTBCZFROdC84WXRtYllJL005QitydVg0UDJiRFNUMktRKwo4TlN2Uk9wbVppcnBHZkY3bExMSGpJUjlTMFhCWDd6VDRoWnBRWnpqK3NEWnhDM2Y3TGIwRFlKYkp0TmlDYTQxCmNpTjhNUlNldzNneHZ0RVk0RzdnN3hjbkJNdjdNT3RwQTE3d2gvMHdLd0h0amYzSWh2TmIzdkZwT0k5d1FqSzYKSlRQMng4bENJV0tyalpObVN0UksreHJTN3hTOUZVdnBhSVlyclRLQkZWSmcyMURCYWI1L3hqRlBlQWxXejczSwpvVkhsa0hLdXNMSjZLczZzcXo0ZG9mbzg3dkFsUFJzTXRkZ1ZnZFIzNXhLTGtEWXNIbGxML3Z5dE9oSkNieXB5CkJqQm1TR0RMdzBDdWplaHVtU2czYjdSUGVTNk5rbHNqUEIrMVpzRjhpVGdCcjMyM1hvTmNha2dhWWVYQlg4NFAKaE1WZHUxWk1rbXJZMWhXTzEydnhBb0lCQVFEWU5Vb2xCMkhsdWlDcVFqdmU4UFNhV0YxRmhwNUlOMGJIZEppeApIdkhqMkplVHJ6V1pUZFlIdFNJR2RzalhTOTBESXo2bXJhMW9YZXFRYlgrODVlOUFQQkZnRTJmNU5uTzBCSVVJCk5hMXRiVGpIOUhjRGRzQmJKUkZwYnk1ODZUb3lhdFY3bS9zcjVpQUZlZFMyenFOTm1XUmZOdllZS2xselZoSEUKdUd4ZjZxMHJTWktVQUhja2s1bU5Yais3WFhZaTgyemErVEE3ZjBDVm5OamR3OXFpd3B2aTJKTFB2SnA0bWt6KwpyMEN1RW9yV2NhMUdTL2hTVWdXemw3NzhQdlRpZFI2RW4zMDB2ZlIyTE84aG1xRjhVL3Bpb2UrTDVjSllRNnNKCk1YMngrYThzWFFpZ3dwdG02aUNxQ2FuS3ExN3NUZS9RTmQ1czdwb3ZOaHVKOHd3dEFvSUJBUUMxWmM5ZktPUFgKVzZSN1VoaHRRcmhIc3htQnRIQ1BuNWRLbjN5MElNNWRBaEFSdFZDV1U0M0hOTHpCNW1LbjU2dnZrSVNFaXdBbAoxTGhuY2I3YXQ2cHpTSlZtMm5oTDhjeUZrdGQrNzVyL1FHNFlpNnZQbHNBODV5ZXZpZDhZcWswaHdaZXExY05xCmxETUN3NWsrV0drckM2VW5jZXNIc2FWbDJTUGdZV1c1L3I1NnVxUnBsaVFka1EyZmlEYWRyblVueU8ycHg3bFMKVG1HemZaNmtzTWh2MlZFR1NPRm05aUo0dWlPb0xyZVhoU1RQRmxTdjdZUTZSWWtSaGgwT0tqdXM5bXZacEIxWApjcytYN0UyVTNlM0RZelpCR0NFdmxxaFNWTFRScjdIN21pMWxUMEozR0RzbDdiUk9xOE50WVdQa3hhSlNCUnQ5Ck9TcTlkTm9CcGRvakFvSUJBQ2lQdnN3NW1WVW0yUS80QXhGdE5RWnJ3M3ZTcUlrMXpaS0h2a21rVzQ3NlNGMk4KaGttdmY1TE1tWWlLNmx6eHY1SGlIOVBYUzJ3RUNvaHo4bjMyeVM3TTFobW5LbDlucHNkRC9jMHZmTXpGcTl4ZgpjYUIxdTlxZGxxbW9FUm1nQzZuL3Z2TkVyUmRzUWQrbEhwSDVMRXZYbGl3Q3ZLS0Y5MmdhNHBSOFlPQ1J2MUVhCnFXUVl2a0ZmYTNSSkZUM0taK3BncnJCYUJZRnoreUxXWFIwbHJEUFN2TG9QRldQaHB6MHUvWGplV2cwT0wzdlIKc2NjNVkybldOM21jNDFpaFd3SE5KUitPYUVmbnh5QVFpQUJPNlRMUThtMWtvZk1sOUpMb2h3TGZoUXhKb21KNQpSYkFiTWxwWlhDMXFTSzliL1IvcDh5NmxuSWZsTDRuaDVjSzRsVFVDZ2dFQUpSSHVSQU1tTksrTXVJcjVaUEs2Cm1DUjR0UEg4QXMzWmJDMlZuWFlLMWlVQ3hhdXBFVjkzM05yaExEcjV0Rmg2NFpWR0Q1UWNicDYvSkp5eEpSOWQKblB1YlZJNlhBT1lrSnJQd2lBZE5SSmFWS1R6NTJvMXpNYjhIZEM4WHdZR2tDNTcxY0xzSW1YSTV6bm5NaWxvaworK0FBVzBSRGhLb0FKQVV3K0x6T3ZpamFJbGljR3R2TSs2SFdCK0VkVURJRHpTS1p0eFdTd01nMTNTbHh6elExCmNlNFdTZE9CQkxxT0p0L2JRNVp3ZkcyQUxUWGlEcVhhWE5JekJickRtMDUwTFkrYVVMcmlLQ25WVkxXODBReGQKZDQyQjIrR2pmb2NxVk5Ec3R1RlIzUm9QNXVGQXN2Zm50b09TVW5WMWxaZk9nMFVFUEFEQk1tRUpZL2hLU1FYcwp3d0tDQVFBNWQya2hFQ1c1V3QrMzRYWnl1b3NFTjZ4UDExbC96VDRBZjhGSWtQLzlkb0JXRnBhc28zbG1NcXZHCmhPeFErbnZBSjFhNzhZRjA4N3p1UC9DZkQ0UElOUTV4YzZHMDNQdG5JOVNVT0dpMDB4Zlg5MU5NMHBHYWJqb0QKZ0RqVzJxSkJDaVB5N0RIR1RlZkU5eUNUbkhrY1NBbWllVGc3aGFyeEZPOUREZTJKbzhKQXV2SHI1aGVxazVIcgpLYlgzTy9vNUMwcWVnYW1rWVRLcHZzV2VFdXhkY2l5LzFQd3NnV3BuV1JPWllQNENrSkJweEx1bDNVamVSY3dkCnRhcjBJYU52WlV2NFd4U0JZdWVHMDFyYUd2SDZtTTcyTEExR3MrMytwTnZwUVo3bGo2S09tcFlhQUlhemVxY2MKTjJjT2R5U1RqZmQ5OFlNVFAxbmIyK3N1Yy91VAotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==\n```\n\n----------------------------------------\n\nTITLE: Displaying PEM Certificate Data Format\nDESCRIPTION: Shows the format of a certificate that would be forwarded with the 'pem' option, including the BEGIN and END CERTIFICATE delimiters and the encoded certificate content.\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN CERTIFICATE-----\nMIIGWjCCBUKgAwIBAgIBATANBgkqhkiG9w0BAQUFADCCAYQxEzARBgoJkiaJk/Is\nZAEZFgNvcmcxFjAUBgoJkiaJk/IsZAEZFgZjaGVlc2UxDzANBgNVBAoMBkNoZWVz\nZTERMA8GA1UECgwIQ2hlZXNlIDIxHzAdBgNVBAsMFlNpbXBsZSBTaWduaW5nIFNl\nY3Rpb24xITAfBgNVBAsMGFNpbXBsZSBTaWduaW5nIFNlY3Rpb24gMjEaMBgGA1UE\nAwwRU2ltcGxlIFNpZ25pbmcgQ0ExHDAaBgNVBAMME1NpbXBsZSBTaWduaW5nIENB\nIDIxCzAJBgNVBAYTAkZSMQswCQYDVQQGEwJVUzERMA8GA1UEBwwIVE9VTE9VU0Ux\nDTALBgNVBAcMBExZT04xFjAUBgNVBAgMDVNpZ25pbmcgU3RhdGUxGDAWBgNVBAgM\nD1NpZ25pbmcgU3RhdGUgMjEhMB8GCSqGSIb3DQEJARYSc2ltcGxlQHNpZ25pbmcu\nY29tMSIwIAYJKoZIhvcNAQkBFhNzaW1wbGUyQHNpZ25pbmcuY29tMB4XDTE4MTIw\nNjExMTAxNloXDTIwMTIwNTExMTAxNlowggF2MRMwEQYKCZImiZPyLGQBGRYDb3Jn\nMRYwFAYKCZImiZPyLGQBGRYGY2hlZXNlMQ8wDQYDVQQKDAZDaGVlc2UxETAPBgNV\nBAoMCENoZWVzZSAyMR8wHQYDVQQLDBZTaW1wbGUgU2lnbmluZyBTZWN0aW9uMSEw\nHwYDVQQLDBhTaW1wbGUgU2lnbmluZyBTZWN0aW9uIDIxFTATBgNVBAMMDCouY2hl\nZXNlLm9yZzEVMBMGA1UEAwwMKi5jaGVlc2UuY29tMQswCQYDVQQGEwJGUjELMAkG\nA1UEBhMCVVMxETAPBgNVBAcMCFRPVUxPVVNFMQ0wCwYDVQQHDARMWU9OMRkwFwYD\nVQQIDBBDaGVlc2Ugb3JnIHN0YXRlMRkwFwYDVQQIDBBDaGVlc2UgY29tIHN0YXRl\nMR4wHAYJKoZIhvcNAQkBFg9jZXJ0QGNoZWVzZS5vcmcxHzAdBgkqhkiG9w0BCQEW\nEGNlcnRAc2NoZWVzZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\nAQDed/qNA3AwOd1RG8xg26laE7Gv/izGOJuICg+O2RuhHa8NZuQTW7xdNpLXXtD6\niCnTeOGB3piyqSI/v4qvEpJj1KnD8uR+0tyixTkceuvXEnBjLkFH4PAI6Ny+CQHs\nKAmvNdd5nFA10Wvlh3s09tIxZR0YQmlsBBGD/kSukJItC3U5V2LmFy9HK8dT3RAt\nyeMGE9K5umMuPH2Da9aJycydTb+f6KN72siZK7pm1o74QUGgydBeyBGkVUqTg4dj\nBGNBnPtoBGfCcS/yZR0CXRXbLNkEaYXCfQ3qO6yF+NSPD8VwskXh7LJUC+n3grSb\nGy25JdSryo9bRD4V3bh/t+75AgMBAAGjgeAwgd0wDgYDVR0PAQH/BAQDAgWgMAkG\nA1UdEwQCMAAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB0GA1UdDgQW\nBBSUunN4oof7WCgoz5g7wkVwFm4pLzAfBgNVHSMEGDAWgBQeUqLoVNU369WoHeTC\nBB034vdwAzBhBgNVHREEWjBYggwqLmNoZWVzZS5vcmeCDCouY2hlZXNlLm5ldIIM\nKi5jaGVlc2UuY29thwQKAAEAhwQKAAECgQ90ZXN0QGNoZWVzZS5vcmeBD3Rlc3RA\nY2hlZXNlLm5ldDANBgkqhkiG9w0BAQUFAAOCAQEAdmsFsA40EbGDmZHcrhviCBWL\nFrKbJxwCrLXfG9DQdaQrLFxl7Zmr983+OD/DmiIxG6yMHML5XdR1ei5yx4WpBK+f\nKszTlnXwjsfGdkisRaS5Ah4vwBXEBwiSyydQZ6HIBcU6s6ZIvuvVWauiG5UwcRNb\nCppzO2DMENBqx+XXiy/5Lpjy/4EUJAnjS1VXCRoidPH2QBMxQ4lxCpYaBYIfgzqH\nmxcl71pV8i3NDU3kgVi2440JYpoMveTlXPCV2svHNCw0X238YHsSW4b93yGJO0gI\nML9n/4zmm1PMhzZHcEA72ZAq0tKCxpz10djg5v2qL5V+Oaz8TtTOZbPsxpiKMQ==\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Defining Health Check Path in Traefik\nDESCRIPTION: Specifies the URL path Traefik uses when performing health checks on the backend service. This should point to an endpoint on your service that can verify its operational status.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.healthcheck.path=/foo\"\n```\n\n----------------------------------------\n\nTITLE: Setting Client TLS Certificate and Key in TOML\nDESCRIPTION: Configures client certificates for mutual TLS authentication in TOML format. These optional parameters specify the paths to the certificate and private key files used for client authentication.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.http.tls]\n  cert = \"path/to/foo.cert\"\n  key = \"path/to/foo.key\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Router with Specific EntryPoints Using JSON Tags\nDESCRIPTION: Example showing how to configure a UDP router with specific EntryPoints using JSON tags. This restricts the router to only accept packets from the 'streaming' EntryPoint.\n\nLANGUAGE: json\nCODE:\n```\n{\n  //...\n  \"Tags\": [\n    \"traefik.udp.routers.Router-1.entryPoints=streaming\",\n    \"traefik.udp.routers.Router-1.service=service-1\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Property for Sticky Cookies in Traefik\nDESCRIPTION: Controls the cookie's SameSite attribute, which affects how cookies are sent in cross-site requests.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.samesite=none\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificates for gRPC Server\nDESCRIPTION: Bash commands for generating a self-signed certificate for the gRPC server. This creates a certificate and key file with the common name 'backend.local'.\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./backend.key -out ./backend.cert\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik with Helm Values File\nDESCRIPTION: A YAML values file example for deploying Traefik in Kubernetes using Helm. It configures exposed ports and adds additional CLI arguments for the Traefik instance.\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n  web:\n    exposedPort: 80\n  websecure:\n    exposedPort: 443\n\nadditionalArguments:\n  - \"--providers.kubernetescrd.ingressClass\"\n  - \"--log.level=INFO\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Router with Specific EntryPoints in YAML\nDESCRIPTION: Dynamic configuration of an HTTP router that listens only to specific entry points (websecure and other, but not web) using YAML syntax.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  routers:\n    Router-1:\n      # won't listen to entry point web\n      entryPoints:\n        - \"websecure\"\n        - \"other\"\n      rule: \"Host(`example.com`)\"\n      service: \"service-1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GrpcWeb Middleware in Kubernetes\nDESCRIPTION: Kubernetes manifest using Custom Resource Definition (CRD) to set up the GrpcWeb middleware. This configuration creates a middleware resource that allows all origins.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-grpcweb\nspec:\n  grpcWeb:\n    allowOrigins:\n      - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Setting HttpOnly Flag for Sticky Cookies in Traefik\nDESCRIPTION: Configures whether the sticky session cookie should have the HttpOnly flag set. When enabled, this prevents client-side scripts from accessing the cookie, enhancing security.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.sticky.cookie.httponly=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Network in TOML\nDESCRIPTION: Setting a default Docker network for connections to all containers in TOML format. This can be overridden on a per-container basis with the traefik.docker.network label.\n\nLANGUAGE: toml\nCODE:\n```\n[providers.docker]\n  network = \"test\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Domain SANs for TCP Router\nDESCRIPTION: Specifies Subject Alternative Names (SANs) for the TLS certificate. These are additional domain names covered by the same certificate.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.domains[0].sans=test.example.org,dev.example.org\n```\n\n----------------------------------------\n\nTITLE: Setting ExposedByDefault in YAML\nDESCRIPTION: Configuration to control whether Traefik automatically exposes all containers by default. When set to false, only containers with traefik.enable=true label will be exposed.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  swarm:\n    exposedByDefault: false\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis TLS insecureSkipVerify in Traefik Rate Limit Middleware\nDESCRIPTION: Configuration examples for skipping TLS certificate verification in Redis connections across different Traefik deployment environments. If set to true, any certificate presented by the server will be accepted regardless of hostname coverage.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.tls.insecureSkipVerify=true\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-ratelimit\nspec:\n  rateLimit:\n    # ...\n    redis:\n      tls:\n        insecureSkipVerify: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.redis.tls.insecureSkipVerify=true\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-ratelimit:\n      rateLimit:\n        # ...\n        redis:\n          tls:\n            insecureSkipVerify: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    [http.middlewares.test-ratelimit.rateLimit.redis]\n      [http.middlewares.test-ratelimit.rateLimit.redis.tls]\n        insecureSkipVerify = true\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS in Traefik v1 (Static Configuration)\nDESCRIPTION: Example of TLS configuration in Traefik v1 where TLS parameters are specified in the static configuration as an entryPoint field. This shows a websecure entryPoint with TLS settings including minimum version, cipher suites, and certificate files.\n\nLANGUAGE: toml\nCODE:\n```\n# static configuration\n[entryPoints]\n  [entryPoints.websecure]\n    address = \":443\"\n\n    [entryPoints.websecure.tls]\n      minVersion = \"VersionTLS12\"\n      cipherSuites = [\n        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n        \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n        \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\",\n        \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\n        \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n      ]\n      [[entryPoints.websecure.tls.certificates]]\n        certFile = \"path/to/my.cert\"\n        keyFile = \"path/to/my.key\"\n```\n\n----------------------------------------\n\nTITLE: Referencing a Middleware in a Traefik IngressRoute\nDESCRIPTION: This example demonstrates how to reference a middleware from an IngressRoute configuration. The IngressRoute uses the 'stripprefix' middleware from the 'foo' namespace to process requests for 'example.com' with path prefix '/stripit'.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutebar\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`example.com`) && PathPrefix(`/stripit`)\n    kind: Rule\n    services:\n    - name: whoami\n      port: 80\n    middlewares:\n    - name: stripprefix\n      namespace: foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirroring with Health Checks (TOML)\nDESCRIPTION: TOML format configuration for service mirroring with health checks. This setup enables automatic monitoring of service availability and propagates health status through the service hierarchy.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.mirrored-api]\n    [http.services.mirrored-api.mirroring]\n      [http.services.mirrored-api.mirroring.healthCheck]\n      service = \"appv1\"\n    [[http.services.mirrored-api.mirroring.mirrors]]\n      name = \"appv2\"\n      percent = 10\n\n  [http.services.appv1]\n    [http.services.appv1.loadBalancer]\n      [http.services.appv1.loadBalancer.healthCheck]\n        path = \"/health\"\n        interval = \"10s\"\n        timeout = \"3s\"\n      [[http.services.appv1.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n  [http.services.appv2]\n    [http.services.appv2.loadBalancer]\n      [http.services.appv1.loadBalancer.healthCheck]\n        path = \"/health\"\n        interval = \"10s\"\n        timeout = \"3s\"\n      [[http.services.appv2.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Testing GRPC Endpoint\nDESCRIPTION: Shell command demonstrating how to test the GRPC routing with grpcurl and the response showing the received headers and context. The command targets the Echo method of the GrpcEcho service.\n\nLANGUAGE: shell\nCODE:\n```\n$ grpcurl -plaintext echo.localhost:80 gateway_api_conformance.echo_basic.grpcecho.GrpcEcho/Echo\n\n{\n  \"assertions\": {\n    \"fullyQualifiedMethod\": \"/gateway_api_conformance.echo_basic.grpcecho.GrpcEcho/Echo\",\n    \"headers\": [\n      {\n        \"key\": \"x-real-ip\",\n        \"value\": \"10.42.2.0\"\n      },\n      {\n        \"key\": \"x-forwarded-server\",\n        \"value\": \"traefik-74b4cf85d8-nkqqf\"\n      },\n      {\n        \"key\": \"x-forwarded-port\",\n        \"value\": \"80\"\n      },\n      {\n        \"key\": \"x-forwarded-for\",\n        \"value\": \"10.42.2.0\"\n      },\n      {\n        \"key\": \"grpc-accept-encoding\",\n        \"value\": \"gzip\"\n      },\n      {\n        \"key\": \"user-agent\",\n        \"value\": \"grpcurl/1.9.1 grpc-go/1.61.0\"\n      },\n      {\n        \"key\": \"content-type\",\n        \"value\": \"application/grpc\"\n      },\n      {\n        \"key\": \"x-forwarded-host\",\n        \"value\": \"echo.localhost:80\"\n      },\n      {\n        \"key\": \":authority\",\n        \"value\": \"echo.localhost:80\"\n      },\n      {\n        \"key\": \"accept-encoding\",\n        \"value\": \"gzip\"\n      },\n      {\n        \"key\": \"x-forwarded-proto\",\n        \"value\": \"http\"\n      }\n    ],\n    \"authority\": \"echo.localhost:80\",\n    \"context\": {\n      \"namespace\": \"default\",\n      \"pod\": \"echo-78f76675cf-9k7rf\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Secure Flag for Sticky Cookies in Traefik\nDESCRIPTION: Determines whether the sticky session cookie should have the Secure flag set. When enabled, the cookie will only be sent over HTTPS connections, enhancing security.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.myservice.loadbalancer.sticky.cookie.secure=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate and Key for Consul in Traefik\nDESCRIPTION: Sets the paths to the public certificate and private key used for the secure connection to Consul. Both cert and key must be provided together.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consul:\n    tls:\n      cert: path/to/foo.cert\n      key: path/to/foo.key\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consul.tls]\n  cert = \"path/to/foo.cert\"\n  key = \"path/to/foo.key\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consul.tls.cert=path/to/foo.cert\n--providers.consul.tls.key=path/to/foo.key\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP ServersTransport with Dial Timeout in Traefik\nDESCRIPTION: Example of configuring dial timeout for TCP ServersTransport. This sets the maximum time allowed for establishing a connection to backend servers.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      dialTimeout: 30s\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.serversTransports.mytransport]\n  dialTimeout = \"30s\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  dialTimeout: 30s\n```\n\n----------------------------------------\n\nTITLE: Configuring RemoveHeader with YAML File\nDESCRIPTION: Demonstrates how to configure BasicAuth to remove the authorization header before forwarding the request to the service in a YAML file.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      basicAuth:\n        removeHeader: true\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS in Traefik v1 Using CLI\nDESCRIPTION: Command line interface example for configuring TLS in Traefik v1, showing how to set TLS parameters for a websecure entryPoint including certificate paths, minimum TLS version, and cipher suites.\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints='Name:websecure Address::443 TLS:path/to/my.cert,path/to/my.key TLS.MinVersion:VersionTLS12 TLS.CipherSuites:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256'\n```\n\n----------------------------------------\n\nTITLE: Setting Throttle Duration for Kubernetes Ingress Provider in Traefik\nDESCRIPTION: Defines how often (in seconds or as a duration) the provider processes events from Kubernetes. This prevents frequent cluster updates from constantly changing Traefik's configuration. If not set, no throttling is applied.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    throttleDuration: \"10s\"\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.kubernetesIngress]\n  throttleDuration = \"10s\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.throttleDuration=10s\n```\n\n----------------------------------------\n\nTITLE: Router Metrics in Datadog Format\nDESCRIPTION: Lists the metric names for router monitoring in Datadog format. These metrics track request counts, TLS usage, request duration, and data transfer sizes.\n\nLANGUAGE: dd\nCODE:\n```\nrouter.request.total\nrouter.request.tls.total\nrouter.request.duration\nrouter.requests.bytes.total\nrouter.responses.bytes.total\n```\n\n----------------------------------------\n\nTITLE: Referencing ServersTransport in IngressRoute\nDESCRIPTION: Example showing how to reference a ServersTransport CRD from an IngressRoute definition. This connects the transport configuration to a specific service route.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: testroute\n  namespace: default\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`example.com`)\n    kind: Rule\n    services:\n    - name: whoami\n      port: 80\n      serversTransport: mytransport\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Service Port in Traefik\nDESCRIPTION: Specifies the port on which the backend application is listening for a TCP service.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.services.mytcpservice.loadbalancer.server.port=423\"\n```\n\n----------------------------------------\n\nTITLE: Setting Password for Consul Authentication in Traefik\nDESCRIPTION: Defines a password to connect to Consul with for authentication purposes.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consul:\n    # ...\n    password: \"bar\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consul]\n  # ...\n  password = \"bar\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consul.password=bar\n```\n\n----------------------------------------\n\nTITLE: Setting Read Idle Timeout in Traefik Forwarding Timeouts\nDESCRIPTION: Configuration examples for setting the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      forwardingTimeouts:\n        readIdleTimeout: \"1s\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.serversTransports.mytransport.forwardingTimeouts]\n  readIdleTimeout = \"1s\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  forwardingTimeouts:\n    readIdleTimeout: \"1s\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Network in CLI\nDESCRIPTION: Command line flag to specify a default Docker network to use for connections to all containers. This can be overridden on a per-container basis with the traefik.docker.network routing label.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.swarm.network=test\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting trustForwardHeader Option in YAML File Configuration\nDESCRIPTION: YAML file configuration for ForwardAuth middleware with trustForwardHeader enabled.\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    test-auth:\n      forwardAuth:\n        address: \"https://example.com/auth\"\n        trustForwardHeader: true\n```\n\n----------------------------------------\n\nTITLE: Defining IngressRouteUDP CRD for Kubernetes in YAML\nDESCRIPTION: Custom Resource Definition (CRD) for IngressRouteUDP introduced in v2.2. This YAML definition needs to be applied to the cluster when upgrading to v2.2.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ingressrouteudps.traefik.containo.us\n\nspec:\n  group: traefik.containo.us\n  version: v1alpha1\n  names:\n    kind: IngressRouteUDP\n    plural: ingressrouteudps\n    singular: ingressrouteudp\n  scope: Namespaced\n```\n\n----------------------------------------\n\nTITLE: Configuring ServersTransport for TCP Service in Traefik\nDESCRIPTION: References a ServersTransport resource for a TCP service, which defines how to communicate with backend servers.\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.tcp.services.mytcpservice.loadbalancer.serverstransport=foobar@file\"\n```\n\n----------------------------------------\n\nTITLE: Service Metrics in Datadog Format\nDESCRIPTION: Lists the metric names for service monitoring in Datadog format. These metrics track request counts, TLS usage, request duration, retries, server status, and data transfer sizes.\n\nLANGUAGE: dd\nCODE:\n```\nservice.request.total\nrouter.service.tls.total\nservice.request.duration\nservice.retries.total\nservice.server.up\nservice.requests.bytes.total\nservice.responses.bytes.total\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Cookie in Traefik LoadBalancer\nDESCRIPTION: Activates sticky sessions using cookies to ensure client requests are routed to the same backend server.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie=true\n```\n\n----------------------------------------\n\nTITLE: Attaching Middlewares to a Router in Traefik with ECS\nDESCRIPTION: Assigns middlewares to a router for request processing. This example attaches authentication, path prefix, and circuit breaker middlewares to the router.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.routers.myrouter.middlewares=auth,prefix,cb\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Rule Syntax in Traefik v3 Static Configuration\nDESCRIPTION: Example configurations showing how to set the default rule matchers syntax in Traefik v3 static configuration. This allows backward compatibility with v2 rule syntax.\n\nLANGUAGE: yaml\nCODE:\n```\n# static configuration\ncore:\n  defaultRuleSyntax: v2\n```\n\nLANGUAGE: toml\nCODE:\n```\n# static configuration\n[core]\n    defaultRuleSyntax=\"v2\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# static configuration\n--core.defaultRuleSyntax=v2\n```\n\n----------------------------------------\n\nTITLE: Configuring rootCAs in Server Transport with YAML, TOML, and Kubernetes\nDESCRIPTION: Examples showing how to configure root certificate authorities for server transport in Traefik using YAML, TOML, and Kubernetes formats.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      rootCAs:\n        - foo.crt\n        - bar.crt\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.serversTransports.mytransport]\n  rootCAs = [\"foo.crt\", \"bar.crt\"]\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  rootCAsSecrets:\n    - myca\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: myca\n\ndata:\n  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n```\n\n----------------------------------------\n\nTITLE: Configuring DigestAuth Middleware in Kubernetes\nDESCRIPTION: Example of how to set up DigestAuth middleware in Kubernetes using a secret to store user credentials.\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring the user list\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  digestAuth:\n    secret: userssecret\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes CRDs to v3.4\nDESCRIPTION: Shell command to update Kubernetes CRDs to the latest version compatible with Traefik v3.4. This command fetches and applies the updated CRD definitions.\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v3.4/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Method in Traefik\nDESCRIPTION: Configures the HTTP method that Traefik will use when performing health checks on backend services.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.method=foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring RateLimit Middleware in TOML\nDESCRIPTION: A TOML configuration example showing how to set up rate limiting middleware in Traefik. This allows an average of 100 requests per second with a burst capacity of 200 requests.\n\nLANGUAGE: toml\nCODE:\n```\n# Here, an average of 100 requests per second is allowed.\n# In addition, a burst of 200 requests is allowed.\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    average = 100\n    burst = 200\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for TCP Service Backend in Traefik\nDESCRIPTION: Enables TLS for connections between Traefik and the backend server for a TCP service, securing the backend communication.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.mytcpservice.loadbalancer.server.tls=true\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP-Only Flag for Sticky Cookie in Traefik\nDESCRIPTION: Configures the sticky cookie to be HTTP-only, preventing client-side scripts from accessing the cookie for enhanced security.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.sticky.cookie.httponly=true\n```\n\n----------------------------------------\n\nTITLE: Disabling Host Header Forwarding in Traefik\nDESCRIPTION: Example of disabling the forwarding of client Host header to server using the File Provider. By default, Traefik forwards the Host header, but this configuration turns it off.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    Service01:\n      loadBalancer:\n        passHostHeader: false\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.Service01]\n    [http.services.Service01.loadBalancer]\n      passHostHeader = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure PROXY Protocol Mode in Traefik\nDESCRIPTION: Configuration for testing environments to trust every incoming connection when using PROXY protocol. Every remote client address will be replaced regardless of trustedIPs.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  web:\n    address: \":80\"\n    proxyProtocol:\n      insecure: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n\n    [entryPoints.web.proxyProtocol]\n      insecure = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.web.address=:80\n--entryPoints.web.proxyProtocol.insecure\n```\n\n----------------------------------------\n\nTITLE: Setting RemoveHeader Option in DigestAuth with Consul Catalog\nDESCRIPTION: Shows how to configure the removeHeader option to remove the authorization header before forwarding the request in Consul Catalog.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.digestauth.removeheader=true\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Manual Routing for Ping Service in Traefik\nDESCRIPTION: Configuration to enable manual routing for the Ping service. When enabled, the default internal router is disabled, allowing you to create a custom router for the ping@internal service.\n\nLANGUAGE: yaml\nCODE:\n```\nping:\n  manualRouting: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[ping]\n  manualRouting = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--ping.manualrouting=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Dashboard with Basic Auth in Docker Swarm\nDESCRIPTION: Docker Swarm deployment labels for enabling the Traefik dashboard with basic authentication. Includes a dummy service for Swarm port detection. This configuration routes dashboard requests to the internal API and protects it with basic auth.\n\nLANGUAGE: yaml\nCODE:\n```\n# Dynamic Configuration\ndeploy:\n  labels:\n    - \"traefik.http.routers.dashboard.rule=Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\"\n    - \"traefik.http.routers.dashboard.service=api@internal\"\n    - \"traefik.http.routers.dashboard.middlewares=auth\"\n    - \"traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0\"\n    # Dummy service for Swarm port detection. The port can be any valid integer value.\n    - \"traefik.http.services.dummy-svc.loadbalancer.server.port=9999\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpOnly for Sticky Cookie in Traefik\nDESCRIPTION: Sets whether the sticky session cookie should be HttpOnly for improved security.\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik/http/services/myservice/loadbalancer/sticky/cookie/httponly\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS Passthrough for TCP Router in Traefik\nDESCRIPTION: Enables TLS passthrough mode for a TCP router, which forwards encrypted TLS traffic to backends without decryption.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.passthrough=true\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Router Entry Points in Traefik\nDESCRIPTION: Specifies the entry points that the UDP router will listen on. Multiple entry points can be provided as a comma-separated list.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.udp.routers.myudprouter.entrypoints=ep1,ep2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring addAuthCookiesToResponse in Kubernetes\nDESCRIPTION: Kubernetes manifest for copying cookies from the authentication server to the response using ForwardAuth middleware.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    address: https://example.com/auth\n    addAuthCookiesToResponse:\n      - Session-Cookie\n      - State-Cookie\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Environment Configuration\nDESCRIPTION: Sample output of the 'go env' command showing properly configured Go environment variables including GOARCH, GOOS, and GOPATH.\n\nLANGUAGE: bash\nCODE:\n```\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/<yourusername>/go\"\nGORACE=\"\"\n## ... and the list goes on\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Mode for OpenTelemetry gRPC in Traefik\nDESCRIPTION: Allows sending access logs to the OpenTelemetry Collector without using a secured protocol when using gRPC. This disables TLS for the connection.\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  otlp:\n    grpc:\n      insecure: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[accesslog.otlp.grpc]\n  insecure = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--accesslog.otlp.grpc.insecure=true\n```\n\n----------------------------------------\n\nTITLE: Setting trustForwardHeader Option in Kubernetes\nDESCRIPTION: Kubernetes manifest for configuring ForwardAuth middleware with trustForwardHeader enabled.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    address: https://example.com/auth\n    trustForwardHeader: true\n```\n\n----------------------------------------\n\nTITLE: Formatting Serial Number Information in Certificate Headers\nDESCRIPTION: Shows how serial number information is formatted in headers when info.issuer.serialNumber is set to true. The data is extracted from the issuer part of the certificate using the SN key and included in the header.\n\nLANGUAGE: text\nCODE:\n```\nSN=1234567890\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS on Traefik Entrypoint via CLI\nDESCRIPTION: Configures TLS termination through static configuration on a Traefik entrypoint using command-line flags.\n\nLANGUAGE: bash\nCODE:\n```\n# Static configuration\n--entryPoints.websecure.address=:443\n--entryPoints.websecure.http.tls\n```\n\n----------------------------------------\n\nTITLE: Matching All Connections with HostSNI in Traefik\nDESCRIPTION: Example of using HostSNI matcher to match all TCP connections in Traefik configuration.\n\nLANGUAGE: yaml\nCODE:\n```\nHostSNI(`*`)\n```\n\n----------------------------------------\n\nTITLE: Setting excludedContentTypes in Consul Catalog\nDESCRIPTION: Configures the Compress middleware in Consul Catalog to exclude specific content types from compression.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-compress.compress.excludedcontenttypes=text/event-stream\"\n```\n\n----------------------------------------\n\nTITLE: Original Configuration Example for Traefik Data Collection\nDESCRIPTION: This snippet shows an example of an original Traefik configuration before anonymization. It includes sensitive information like endpoint addresses and TLS certificates that will be obfuscated during data collection.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n  address: \":80\"\n\napi: {}\n\nproviders:\n  docker:\n    endpoint: \"tcp://10.10.10.10:2375\"\n    exposedByDefault: true\n\n    tls:\n      ca: dockerCA\n      cert: dockerCert\n      key: dockerKey\n      insecureSkipVerify: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Method in Traefik with YAML Labels\nDESCRIPTION: Sets the HTTP method to use for health check requests (GET, POST, etc.).\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.method=foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Discovery Constraints\nDESCRIPTION: Configuration examples showing how to filter services using tag-based constraints to control which Nomad services will be included in Traefik routing.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  nomad:\n    constraints: \"Tag(`a.tag.name`)\"\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.nomad]\n  constraints = \"Tag(`a.tag.name`)\"\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.nomad.constraints=\"Tag(`a.tag.name`)\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Gateway API Provider Options in Traefik\nDESCRIPTION: Command line arguments for configuring the Kubernetes Gateway API provider in Traefik. These options control how Traefik interacts with Kubernetes Gateway resources, including authentication, namespace selection, status reporting, and experimental features.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesgateway\n--providers.kubernetesgateway.certauthfilepath\n--providers.kubernetesgateway.endpoint\n--providers.kubernetesgateway.experimentalchannel\n--providers.kubernetesgateway.labelselector\n--providers.kubernetesgateway.namespaces\n--providers.kubernetesgateway.nativelbbydefault\n--providers.kubernetesgateway.statusaddress.hostname\n--providers.kubernetesgateway.statusaddress.ip\n--providers.kubernetesgateway.statusaddress.service\n--providers.kubernetesgateway.statusaddress.service.name\n--providers.kubernetesgateway.statusaddress.service.namespace\n--providers.kubernetesgateway.throttleduration\n--providers.kubernetesgateway.token\n```\n\n----------------------------------------\n\nTITLE: Setting the Root Key for Etcd in Traefik\nDESCRIPTION: Defines the root key of the configuration in etcd. The default value is 'traefik'.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  etcd:\n    rootKey: \"traefik\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.etcd]\n  rootKey = \"traefik\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.etcd.rootkey=traefik\n```\n\n----------------------------------------\n\nTITLE: Attaching ServersTransport to a TCP Service in YAML\nDESCRIPTION: YAML example showing how to attach a configured ServersTransport to a TCP service in Traefik's dynamic configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ntcp:\n  services:\n    Service01:\n      loadBalancer:\n        serversTransport: mytransport\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Challenge Delay in Traefik\nDESCRIPTION: Configuration for setting a delay between creation and validation of the HTTP-01 challenge. This allows time for DNS propagation or other processes to complete before validation occurs.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      httpChallenge:\n        # ...\n        delay: 12\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  [certificatesResolvers.myresolver.acme.httpChallenge]\n    # ...\n    delay = 12\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.httpchallenge.delay=12\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Collection in Traefik using YAML Configuration\nDESCRIPTION: This snippet shows how to enable anonymous usage data collection in Traefik using YAML configuration file. The sendAnonymousUsage option is set to true to allow Traefik to collect anonymous usage statistics.\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  # Send anonymous usage data\n  sendAnonymousUsage: true\n```\n\n----------------------------------------\n\nTITLE: Configuring InfluxDB v1 Metrics in Traefik v2\nDESCRIPTION: Example configurations for InfluxDB v1 metrics in Traefik v2. This feature has been removed in v3 as InfluxDB v1.x maintenance ended in 2021.\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  influxDB: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[metrics.influxDB]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--metrics.influxDB=true\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Logger in TOML\nDESCRIPTION: Enables the OpenTelemetry Logger for logs in Traefik using TOML configuration. By default, it will export logs using HTTPS to localhost:4318/v1/logs.\n\nLANGUAGE: toml\nCODE:\n```\n[log.otlp]\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Authentication for Etcd in Traefik\nDESCRIPTION: Defines a password with which to connect to etcd. This is optional and defaults to an empty string.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  etcd:\n    # ...\n    password: \"bar\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.etcd]\n  # ...\n  password = \"bar\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.etcd.password=foo\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Collection in Traefik using CLI\nDESCRIPTION: This snippet shows how to enable anonymous usage data collection in Traefik using a command-line interface flag. The global.sendAnonymousUsage flag enables the collection of anonymous usage statistics.\n\nLANGUAGE: bash\nCODE:\n```\n# Send anonymous usage data\n--global.sendAnonymousUsage\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Router Using JSON Tags\nDESCRIPTION: Example showing how to configure a UDP router using JSON tags. This format can be used in provider configurations that support tag-based configuration like Consul Catalog.\n\nLANGUAGE: json\nCODE:\n```\n{\n  //...\n  \"Tags\": [\n    \"traefik.udp.routers.Router-1.service=service-1\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Timeout in Traefik with YAML Labels\nDESCRIPTION: Sets the timeout for health check requests. The value is specified in seconds.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.services.myservice.loadbalancer.healthcheck.timeout=10\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Pilot in v2\nDESCRIPTION: Example configurations for Traefik Pilot in v2. Pilot is no longer available since October 4th, 2022, and its configuration is now unsupported in v3.\n\nLANGUAGE: yaml\nCODE:\n```\npilot:\n  token: foobar\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pilot]\n    token=foobar\n```\n\nLANGUAGE: bash\nCODE:\n```\n--pilot.token=foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Gateway Endpoint in YAML\nDESCRIPTION: Example of setting the Kubernetes API server endpoint URL in YAML configuration to override environment variables.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesGateway:\n    endpoint: \"http://localhost:8080\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Server Address\nDESCRIPTION: Defines the address of the Consul server endpoint. Default is 127.0.0.1:8500.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    endpoint:\n      address: 127.0.0.1:8500\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog]\n  [providers.consulCatalog.endpoint]\n    address = \"127.0.0.1:8500\"\n    # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.endpoint.address=127.0.0.1:8500\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry Points for TLS-specific Ingress in YAML\nDESCRIPTION: Static configuration for defining entry points when using TLS only on specific Ingress resources. This is used in conjunction with the annotated Ingress.\n\nLANGUAGE: yaml\nCODE:\n```\n# Static configuration\n\nentryPoints:\n  web:\n    address: :80\n  websecure:\n    address: :443\n\nproviders:\n  kubernetesIngress: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring InFlightConn TCP Middleware with Labels\nDESCRIPTION: Example of limiting simultaneous connections to 10 using Traefik labels for Docker or other supported providers.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.tcp.middlewares.test-inflightconn.inflightconn.amount=10\"\n```\n\n----------------------------------------\n\nTITLE: Adding GRPCRoute Support in Kubernetes Gateway Provider RBACs\nDESCRIPTION: YAML configuration for adding gRPCRoute resource rights to Kubernetes Gateway provider RBACs. This is required for the GRPCRoute support added in Traefik v3.2.\n\nLANGUAGE: yaml\nCODE:\n```\n  ...\n  - apiGroups:\n      - gateway.networking.k8s.io\n    resources:\n      - grpcroutes\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - gateway.networking.k8s.io\n    resources:\n      - grpcroutes/status\n    verbs:\n      - update\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring InFlightReq Middleware in Consul Catalog\nDESCRIPTION: Configures the inFlightReq middleware through Consul Catalog tags to limit simultaneous connections to 10. This approach is used when Traefik is integrated with Consul for service discovery.\n\nLANGUAGE: json\nCODE:\n```\n// Limiting to 10 simultaneous connections\n{\n  \"Tags\" : [\n    \"traefik.http.middlewares.test-inflightreq.inflightreq.amount=10\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Consul ACL Token\nDESCRIPTION: Provides a per-request ACL token that overwrites the agent's default token for authentication.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  consulCatalog:\n    endpoint:\n      token: test\n    # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.consulCatalog]\n  [providers.consulCatalog.endpoint]\n    token = \"test\"\n    # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.consulcatalog.endpoint.token=test\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry Points for TLS-specific Ingress Using CLI\nDESCRIPTION: Static configuration for defining entry points when using TLS only on specific Ingress resources using CLI flags.\n\nLANGUAGE: bash\nCODE:\n```\n# Static configuration\n\n--entryPoints.web.address=:80\n--entryPoints.websecure.address=:443\n--providers.kubernetesIngress=true\n```\n\n----------------------------------------\n\nTITLE: IngressRouteUDP with Native Load Balancing\nDESCRIPTION: Example showing how to use the nativeLB option to use Kubernetes Service clusterIP directly instead of pod IPs. This is useful for more stable load balancing in certain environments.\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: traefik.io/v1alpha1\nkind: IngressRouteUDP\nmetadata:\n  name: test.route\n  namespace: default\n\nspec:\n  entryPoints:\n    - foo\n\n  routes:\n  - services:\n    - name: svc\n      port: 80\n      # Here, nativeLB instructs to build the servers load balancer with the Kubernetes Service clusterIP only.\n      nativeLB: true\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc\n  namespace: default\nspec:\n  type: ClusterIP\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router Entry Points in Traefik\nDESCRIPTION: Sets entry points for a TCP router in Traefik. Entry points are the network endpoints (ports) that Traefik listens on for incoming connections.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.entrypoints=ep1,ep2\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Traefik using TOML File\nDESCRIPTION: Sets up TLS configuration for Traefik using a TOML file format. Configures a router named 'blog' with Host and Path matching, specifies a certificate resolver (referencing static configuration), and defines domains with main and sans patterns.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.blog]\n    rule = \"Host(`example.com`) && Path(`/blog`)\"\n    [http.routers.blog.tls]\n      certResolver = \"myresolver\" # From static configuration\n      [[http.routers.blog.tls.domains]]\n        main = \"example.com\"\n        sans = [\"*.example.org\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Burst Value in TOML File\nDESCRIPTION: Example of setting the burst parameter to 100 in a TOML file. The burst parameter defines the maximum number of requests allowed to go through in a short period of time.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    burst = 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Global HTTP to HTTPS Redirection in Traefik v1\nDESCRIPTION: Example of global HTTP to HTTPS redirection in Traefik v1 using TOML format. The redirection is applied at the entryPoint level, redirecting traffic from 'web' (HTTP) to 'websecure' (HTTPS) entryPoint.\n\nLANGUAGE: toml\nCODE:\n```\n# static configuration\ndefaultEntryPoints = [\"web\", \"websecure\"]\n\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n    [entryPoints.web.redirect]\n      entryPoint = \"websecure\"\n\n  [entryPoints.websecure]\n    address = \":443\"\n    [entryPoints.websecure.tls]\n```\n\n----------------------------------------\n\nTITLE: Adding EndpointSlices API Rights in Kubernetes Provider RBACs\nDESCRIPTION: YAML configuration for adding endpointslices rights to Kubernetes provider RBACs. This is required when migrating to Traefik v3.1 as it replaces the endpoints API with EndpointSlices API.\n\nLANGUAGE: yaml\nCODE:\n```\n  ... \n  - apiGroups:\n      - discovery.k8s.io\n    resources:\n      - endpointslices\n    verbs:\n      - list\n      - watch\n  ...\n```\n\n----------------------------------------\n\nTITLE: Referencing a TLSOption in an IngressRoute\nDESCRIPTION: Example showing how to reference a previously defined TLSOption in a Traefik IngressRoute CRD, enabling the specified TLS configuration for this route.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutebar\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`example.com`) && PathPrefix(`/stripit`)\n    kind: Rule\n    services:\n    - name: whoami\n      port: 80\n  tls:\n    options: \n      name: mytlsoption\n      namespace: default\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Dashboard Access Using Path Prefix Rule\nDESCRIPTION: Defines a router rule that matches specific path prefixes for dashboard access. This allows the dashboard to be accessed on any domain as long as the path starts with /api or /dashboard.\n\nLANGUAGE: bash\nCODE:\n```\n# The dashboard can be accessed on http://example.com/dashboard/ or http://traefik.example.com/dashboard/\nrule = \"PathPrefix(`/api`) || PathPrefix(`/dashboard`)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Body Forwarding in Consul Catalog\nDESCRIPTION: Consul Catalog configuration for enabling body forwarding to the authentication server.\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.test-auth.forwardauth.forwardBody=true\"\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Resources with kubectl\nDESCRIPTION: Shell command to apply the created Kubernetes resource configurations (Deployment, Service, Ingress) to the cluster using kubectl.\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f 03-whoami.yml \\\n              -f 03-whoami-services.yml \\\n              -f 04-whoami-ingress.yml\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Mode for OpenTelemetry gRPC via CLI\nDESCRIPTION: Configures Traefik to use unsecured protocol for OpenTelemetry gRPC connections using command line interface. By default, gRPC connections are secured with TLS.\n\nLANGUAGE: bash\nCODE:\n```\n--log.otlp.grpc.insecure=true\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Domain Main Name for TCP Router in Traefik\nDESCRIPTION: Defines the main domain name for TLS certificate generation. This is the primary domain that will be included in the certificate.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.routers.mytcprouter.tls.domains[0].main=example.org\n```\n\n----------------------------------------\n\nTITLE: Setting Idle Timeout for Traefik EntryPoint\nDESCRIPTION: Configuration for setting the idleTimeout parameter which controls the maximum duration an idle (keep-alive) connection will remain idle before closing itself. This affects how long inactive connections are maintained.\n\nLANGUAGE: yaml\nCODE:\n```\n## Static configuration\nentryPoints:\n  name:\n    address: \":8888\"\n    transport:\n      respondingTimeouts:\n        idleTimeout: 42\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Static configuration\n[entryPoints]\n  [entryPoints.name]\n    address = \":8888\"\n    [entryPoints.name.transport]\n      [entryPoints.name.transport.respondingTimeouts]\n        idleTimeout = 42\n```\n\nLANGUAGE: bash\nCODE:\n```\n## Static configuration\n--entryPoints.name.address=:8888\n--entryPoints.name.transport.respondingTimeouts.idleTimeout=42\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom API Base Path\nDESCRIPTION: Configuration to customize the base path for the Traefik API and dashboard. This changes the default paths from /api and /dashboard to custom paths under a specified base path.\n\nLANGUAGE: yaml\nCODE:\n```\napi:\n  # Customizes the base path:\n  # - Serving API under `/traefik/api`\n  # - Serving Dashboard under `/traefik/dashboard`\n  basePath: /traefik\n```\n\nLANGUAGE: toml\nCODE:\n```\n[api]\n  # Customizes the base path:\n  # - Serving API under `/traefik/api`\n  # - Serving Dashboard under `/traefik/dashboard`\n  basePath = \"/traefik\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Customizes the base path:\n# - Serving API under `/traefik/api`\n# - Serving Dashboard under `/traefik/dashboard`\n--api.basePath=/traefik\n```\n\n----------------------------------------\n\nTITLE: Obfuscated Configuration Example for Traefik Data Collection\nDESCRIPTION: This snippet shows how Traefik anonymizes the configuration before collecting it. Sensitive information like endpoints, certificates, and keys are replaced with 'xxxx' to protect user privacy.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n  address: \":80\"\n\napi: {}\n\nproviders:\n  docker:\n    endpoint: \"xxxx\"\n    exposedByDefault: true\n\n    tls:\n      ca: xxxx\n      cert: xxxx\n      key: xxxx\n      insecureSkipVerify: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Default TLSStore with a Default Certificate\nDESCRIPTION: Example of creating the default TLSStore resource with a specified default certificate to be used for TLS termination when no specific certificate matches a request.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: TLSStore\nmetadata:\n  name: default\n\nspec:\n  defaultCertificate:\n    secretName:  supersecret\n```\n\n----------------------------------------\n\nTITLE: Running Traefik Unit Tests\nDESCRIPTION: Command to run Traefik unit tests using make, showing the test command and output with coverage information.\n\nLANGUAGE: bash\nCODE:\n```\n$ make test-unit\nGOOS=darwin GOARCH=arm64 go test -cover \"-coverprofile=cover.out\" -v ./pkg/... ./cmd/...\n+ go test -cover -coverprofile=cover.out .\nok      github.com/traefik/traefik   0.005s  coverage: 4.1% of statements\n\nTest success\n```\n\n----------------------------------------\n\nTITLE: Setting Servers Transport for TCP Service in Traefik\nDESCRIPTION: References a ServersTransport resource for advanced transport configuration. Server transports define how Traefik connects to your backend services.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.myservice.loadbalancer.serverstransport=foobar@file\n```\n\n----------------------------------------\n\nTITLE: Configuring Circuit Breaker with Latency Check in YAML\nDESCRIPTION: Example of configuring a circuit breaker middleware in Traefik using YAML structured format. This configuration creates a latency check that opens the circuit when the median latency exceeds 100ms.\n\nLANGUAGE: yaml\nCODE:\n```\n# Latency Check\nhttp:\n  middlewares:\n    latency-check:\n      circuitBreaker:\n        expression: \"LatencyAtQuantileMS(50.0) > 100\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Endpoint in Traefik with YAML\nDESCRIPTION: YAML configuration for specifying the Kubernetes server endpoint URL in Traefik. The endpoint overrides environment variables and can be used with kubectl proxy for external-cluster client connections.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    endpoint: \"http://localhost:8080\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Ingress with CRD Middleware Reference\nDESCRIPTION: Example of a Kubernetes Ingress with an annotation referencing a middleware from the Kubernetes CRD provider, showing the proper namespace-middleware-provider syntax.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: stripprefix\n  namespace: appspace\nspec:\n  stripPrefix:\n    prefixes:\n      - /stripit\n\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress\n  namespace: appspace\n  annotations:\n    # referencing a middleware from Kubernetes CRD provider: \n    # <middleware-namespace>-<middleware-name>@kubernetescrd\n    \"traefik.ingress.kubernetes.io/router.middlewares\": appspace-stripprefix@kubernetescrd\nspec:\n  # ... regular ingress definition\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Service Backend Port in Traefik\nDESCRIPTION: Specifies the port where the backend service is listening. Traefik will forward TCP connections to this port on the backend server.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.tcp.services.mytcpservice.loadbalancer.server.port=423\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Ingress with CRD Middleware Reference\nDESCRIPTION: Example of a Kubernetes Ingress with an annotation referencing a middleware from the Kubernetes CRD provider, showing the proper namespace-middleware-provider syntax.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: stripprefix\n  namespace: appspace\nspec:\n  stripPrefix:\n    prefixes:\n      - /stripit\n\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress\n  namespace: appspace\n  annotations:\n    # referencing a middleware from Kubernetes CRD provider: \n    # <middleware-namespace>-<middleware-name>@kubernetescrd\n    \"traefik.ingress.kubernetes.io/router.middlewares\": appspace-stripprefix@kubernetescrd\nspec:\n  # ... regular ingress definition\n```\n\n----------------------------------------\n\nTITLE: Defining TCP Middleware with IP Allow List\nDESCRIPTION: YAML definition for a MiddlewareTCP resource that implements IP filtering. This middleware allows TCP connections only from specified IP ranges or addresses, providing network-level access control.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: MiddlewareTCP\nmetadata:\n  name: ipallowlist\nspec:\n  ipAllowList:\n    sourceRange:\n      - 127.0.0.1/32\n      - 192.168.1.7\n```\n\n----------------------------------------\n\nTITLE: Declaring UDP Routers and Services in Traefik\nDESCRIPTION: Example of configuring both UDP router entry points and service port settings for UDP traffic handling in Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.routers.my-router.entrypoints=udp\ntraefik.udp.services.my-service.loadbalancer.server.port=4123\n```\n\n----------------------------------------\n\nTITLE: Declaring UDP Routers and Services in Traefik\nDESCRIPTION: Example of configuring both UDP router entry points and service port settings for UDP traffic handling in Traefik.\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.udp.routers.my-router.entrypoints=udp\ntraefik.udp.services.my-service.loadbalancer.server.port=4123\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Router with Middleware in YAML Format\nDESCRIPTION: Example showing how to attach a middleware to a TCP router using the File Provider in YAML format.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  routers:\n    my-router:\n      rule: \"HostSNI(`*`)\"\n      # declared elsewhere\n      middlewares:\n      - ipallowlist\n      service: service-foo\n```\n\n----------------------------------------\n\nTITLE: Disabling IngressClass Lookup via CLI\nDESCRIPTION: Command line option to disable IngressClass discovery in the cluster. This option is deprecated in v3.1.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesingress.disableingressclasslookup=true\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Termination for TCP Router in TOML Format\nDESCRIPTION: Example showing how to configure a TCP router for TLS termination (default behavior) using the File Provider in TOML format.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.routers]\n  [tcp.routers.Router-1]\n    rule = \"HostSNI(`foo-domain`)\"\n    service = \"service-id\"\n    # will terminate the TLS request by default\n    [tcp.routers.Router-1.tls]\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check with Custom Interval & Timeout in Traefik\nDESCRIPTION: Example of configuring a health check for a service with custom interval and timeout settings using the File Provider. The health check will ping the /health endpoint every 10 seconds and timeout after 3 seconds.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    Service-1:\n      loadBalancer:\n        healthCheck:\n          path: /health\n          interval: \"10s\"\n          timeout: \"3s\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.Service-1]\n    [http.services.Service-1.loadBalancer.healthCheck]\n      path = \"/health\"\n      interval = \"10s\"\n      timeout = \"3s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check with Custom Port in Traefik\nDESCRIPTION: Example of configuring a health check for a service with a custom port using the File Provider. The health check will be directed to port 8080 instead of the default service port.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    Service-1:\n      loadBalancer:\n        healthCheck:\n          path: /health\n          port: 8080\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.Service-1]\n    [http.services.Service-1.loadBalancer.healthCheck]\n      path = \"/health\"\n      port = 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Forwarding with Custom FlushInterval in Traefik\nDESCRIPTION: Example of setting a custom flush interval for response forwarding using the File Provider. This controls how frequently Traefik flushes response data to the client.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\nhttp:\n  services:\n    Service-1:\n      loadBalancer:\n        responseForwarding:\n          flushInterval: 1s\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.Service-1]\n    [http.services.Service-1.loadBalancer.responseForwarding]\n      flushInterval = \"1s\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Mirroring in Traefik (TOML)\nDESCRIPTION: TOML format configuration for service mirroring that routes requests to a primary service while mirroring 10% to a secondary service. Includes options for controlling body mirroring and size limits.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.mirrored-api]\n    [http.services.mirrored-api.mirroring]\n      service = \"appv1\"\n      # maxBodySize is the maximum size in bytes allowed for the body of the request.\n      # If the body is larger, the request is not mirrored.\n      # Default value is -1, which means unlimited size.\n      maxBodySize = 1024\n      # mirrorBody defines whether the request body should be mirrored.\n      # Default value is true.\n      mirrorBody = false\n    [[http.services.mirrored-api.mirroring.mirrors]]\n      name = \"appv2\"\n      percent = 10\n\n  [http.services.appv1]\n    [http.services.appv1.loadBalancer]\n      [[http.services.appv1.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n  [http.services.appv2]\n    [http.services.appv2.loadBalancer]\n      [[http.services.appv2.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover with Health Checks (TOML)\nDESCRIPTION: TOML configuration for a complete failover system with health checks at every level. This enables automatic detection of service failures and propagation of health status through the service hierarchy.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.services]\n  [http.services.app]\n    [http.services.app.failover.healthCheck]\n    [http.services.app.failover]\n      service = \"main\"\n      fallback = \"backup\"\n\n  [http.services.main]\n    [http.services.main.loadBalancer]\n      [http.services.main.loadBalancer.healthCheck]\n        path = \"/health\"\n        interval = \"10s\"\n        timeout = \"3s\"\n      [[http.services.main.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n  [http.services.backup]\n    [http.services.backup.loadBalancer]\n      [http.services.backup.loadBalancer.healthCheck]\n        path = \"/health\"\n        interval = \"10s\"\n        timeout = \"3s\"\n      [[http.services.backup.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Service with Multiple Servers in Traefik\nDESCRIPTION: Example of declaring a TCP service with two backend servers using the File Provider. This configuration demonstrates how to set up load balancing across multiple server instances.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n        - address: \"xx.xx.xx.xx:xx\"\n        - address: \"xx.xx.xx.xx:xx\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.services]\n  [tcp.services.my-service.loadBalancer]\n    [[tcp.services.my-service.loadBalancer.servers]]\n      address = \"xx.xx.xx.xx:xx\"\n    [[tcp.services.my-service.loadBalancer.servers]]\n       address = \"xx.xx.xx.xx:xx\"\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom TCP ServersTransport in Traefik\nDESCRIPTION: Example of referencing a named ServersTransport configuration for TCP services. This allows customizing the transport settings between Traefik and backend servers.\n\nLANGUAGE: yaml\nCODE:\n```\n## Dynamic configuration\ntcp:\n  services:\n    Service01:\n      loadBalancer:\n        serversTransport: mytransport\n```\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[tcp.services]\n  [tcp.services.Service01]\n    [tcp.services.Service01.loadBalancer]\n      serversTransport = \"mytransport\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RemoveHeader with TOML File\nDESCRIPTION: Shows how to configure BasicAuth to remove the authorization header before forwarding the request to the service in a TOML file.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.basicAuth]\n    removeHeader = true\n```\n\n----------------------------------------\n\nTITLE: Setting includedContentTypes in TOML File\nDESCRIPTION: Configures the Compress middleware using TOML to only compress specific content types.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-compress.compress]\n    includedContentTypes = [\"application/json\",\"text/html\",\"text/plain\"]\n```\n\n----------------------------------------\n\nTITLE: Setting encodings in Docker & Swarm\nDESCRIPTION: Configures the Compress middleware in Docker/Swarm to support specific compression algorithms (Zstandard and Brotli) in order of priority.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-compress.compress.encodings=zstd,br\"\n```\n\n----------------------------------------\n\nTITLE: Setting RemoveHeader Option in DigestAuth with Docker & Swarm\nDESCRIPTION: Shows how to configure the removeHeader option to remove the authorization header before forwarding the request in Docker & Swarm.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.digestauth.removeheader=true\"\n```\n\n----------------------------------------\n\nTITLE: Setting RemoveHeader Option in DigestAuth with TOML File\nDESCRIPTION: Shows how to configure the removeHeader option to remove the authorization header before forwarding the request in a TOML configuration file.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.digestAuth]\n    removeHeader = true\n```\n\n----------------------------------------\n\nTITLE: Configuring ForwardAuth Middleware in Kubernetes\nDESCRIPTION: Kubernetes manifest for setting up ForwardAuth middleware that delegates authentication to an external service.\n\nLANGUAGE: yaml\nCODE:\n```\n# Forward authentication to example.com\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-auth\nspec:\n  forwardAuth:\n    address: https://example.com/auth\n```\n\n----------------------------------------\n\nTITLE: Configuring authRequestHeaders in Docker & Swarm\nDESCRIPTION: Docker & Swarm configuration for filtering headers passed to the authentication server using ForwardAuth middleware.\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.http.middlewares.test-auth.forwardauth.authRequestHeaders=Accept,X-CustomHeader\"\n```\n\n----------------------------------------\n\nTITLE: Configuring authRequestHeaders in TOML File Configuration\nDESCRIPTION: TOML file configuration for filtering headers passed to the authentication server.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.forwardAuth]\n    address = \"https://example.com/auth\"\n    authRequestHeaders = \"Accept,X-CustomHeader\"\n```\n\n----------------------------------------\n\nTITLE: Configuring addAuthCookiesToResponse in TOML File Configuration\nDESCRIPTION: TOML file configuration for copying cookies from the authentication server to the response.\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares]\n  [http.middlewares.test-auth.forwardAuth]\n    address = \"https://example.com/auth\"\n    addAuthCookiesToResponse = [\"Session-Cookie\", \"State-Cookie\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring RateLimit in Consul Catalog\nDESCRIPTION: Example of how to configure RateLimit middleware using Consul Catalog, allowing an average of 100 requests per second with a burst of 50 requests.\n\nLANGUAGE: yaml\nCODE:\n```\n# Here, an average of 100 requests per second is allowed.\n# In addition, a burst of 200 requests is allowed.\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.average=100\"\n- \"traefik.http.middlewares.test-ratelimit.ratelimit.burst=50\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RateLimit in TOML File\nDESCRIPTION: Example of how to configure RateLimit middleware in a TOML file, allowing an average of 100 requests per second with a burst of 200 requests.\n\nLANGUAGE: toml\nCODE:\n```\n# Here, an average of 100 requests per second is allowed.\n# In addition, a burst of 200 requests is allowed.\n[http.middlewares]\n  [http.middlewares.test-ratelimit.rateLimit]\n    average = 100\n    burst = 200\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Client Certificate for OpenTelemetry HTTP in Traefik\nDESCRIPTION: Sets the paths to the client certificate and key for secure connections to the OpenTelemetry Collector. Both cert and key options must be provided together.\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  otlp:\n    http:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n```\n\nLANGUAGE: toml\nCODE:\n```\n[accesslog.otlp.http.tls]\n  cert = \"path/to/foo.cert\"\n  key = \"path/to/foo.key\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--accesslog.otlp.http.tls.cert=path/to/foo.cert\n--accesslog.otlp.http.tls.key=path/to/foo.key\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry gRPC Export in Traefik\nDESCRIPTION: Configures Traefik to send access logs to the OpenTelemetry Collector using gRPC instead of HTTP. This provides an alternative transport protocol for the logs.\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  otlp:\n    grpc: {}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[accesslog.otlp.grpc]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--accesslog.otlp.grpc=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Log File Path via CLI\nDESCRIPTION: Sets the file path for Traefik logs using command line interface. This option redirects logs from stdout to the specified file location.\n\nLANGUAGE: bash\nCODE:\n```\n# Writing Logs to a File\n--log.filePath=/path/to/traefik.log\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry HTTP TLS CA Certificate in TOML\nDESCRIPTION: Configures the certificate authority for secure connections to the OpenTelemetry Collector using TOML. This is used to verify the collector's TLS certificate.\n\nLANGUAGE: toml\nCODE:\n```\n[log.otlp.http.tls]\n  ca = \"path/to/ca.crt\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Mode for OpenTelemetry gRPC in YAML\nDESCRIPTION: Configures Traefik to use unsecured protocol for OpenTelemetry gRPC connections using YAML. By default, gRPC connections are secured with TLS.\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  otlp:\n    grpc:\n      insecure: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Services Labels in Datadog Metrics\nDESCRIPTION: Configures whether to include service labels in the metrics exported to Datadog. This option is enabled by default.\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  datadog:\n    addServicesLabels: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n  [metrics.datadog]\n    addServicesLabels = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--metrics.datadog.addServicesLabels=true\n```\n\n----------------------------------------\n\nTITLE: EntryPoint HTTP Metrics in Datadog Format\nDESCRIPTION: List of HTTP metrics for entrypoints provided by Traefik in Datadog format, including request counts, TLS requests, request duration, and request/response byte metrics.\n\nLANGUAGE: dd\nCODE:\n```\nentrypoint.request.total\nentrypoint.request.tls.total\nentrypoint.request.duration\nentrypoint.requests.bytes.total\nentrypoint.responses.bytes.total\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Resource Tracing\nDESCRIPTION: Configuration to enable tracing for Traefik's internal resources such as ping@internal endpoints. By default this is disabled.\n\nLANGUAGE: yaml\nCODE:\n```\ntracing:\n  addInternals: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tracing]\n  addInternals = true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--tracing.addinternals\n```\n\n----------------------------------------\n\nTITLE: Setting CA Certificates for ACME Authentication in Traefik\nDESCRIPTION: Configuration for specifying paths to PEM encoded CA Certificates used to authenticate an ACME server with an HTTPS certificate not issued by a trusted root CA.\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  myresolver:\n    acme:\n      # ...\n      caCertificates:\n        - path/certificates1.pem\n        - path/certificates2.pem\n      # ...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  caCertificates = [ \"path/certificates1.pem\", \"path/certificates2.pem\" ]\n  # ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n--certificatesresolvers.myresolver.acme.caCertificates=\"path/certificates1.pem,path/certificates2.pem\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik TLS with CertResolver in TOML File\nDESCRIPTION: File-based TOML configuration for Traefik. Defines a router with Host and Path matching rules and configures TLS with a certificate resolver in the Traefik dynamic configuration file.\n\nLANGUAGE: toml\nCODE:\n```\n## Dynamic configuration\n[http.routers]\n  [http.routers.blog]\n  rule = \"Host(`example.com`) && Path(`/blog`)\"\n  [http.routers.blog.tls]\n    certResolver = \"myresolver\"\n```\n\n----------------------------------------\n\nTITLE: Complete Tailscale Certificate Resolution Configuration in YAML\nDESCRIPTION: Full example configuration for enabling Tailscale certificate resolution in YAML format. Defines entrypoints for HTTP and HTTPS along with the Tailscale certificate resolver.\n\nLANGUAGE: yaml\nCODE:\n```\nentryPoints:\n  web:\n    address: \":80\"\n\n  websecure:\n    address: \":443\"\n\ncertificatesResolvers:\n  myresolver:\n    tailscale: {}\n```\n\n----------------------------------------\n\nTITLE: Migrating Kubernetes Ingress to IngressRoute with Basic Auth\nDESCRIPTION: Shows the migration from Kubernetes Ingress resource in v1 to IngressRoute in v2, introducing the separation of routing rules and middleware definitions. The v2 implementation uses CRDs to define both the routes and the authentication middleware.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n  name: traefik\n  namespace: kube-system\n  annotations:\n    kubernetes.io/ingress.class: traefik\n    traefik.ingress.kubernetes.io/rule-type: PathPrefix\nspec:\n  rules:\n  - host: test.localhost\n    http:\n      paths:\n      - path: /test\n        backend:\n          serviceName: server0\n          servicePort: 80\n      - path: /test\n        backend:\n          serviceName: server1\n          servicePort: 80\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# The definitions below require the definitions for the Middleware and IngressRoute kinds.\n# https://doc.traefik.io/traefik/reference/dynamic-configuration/kubernetes-crd/#definitions\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: basicauth\n  namespace: foo\n\nspec:\n  basicAuth:\n    users:\n      - test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\n      - test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\n\n---\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutebar\n\nspec:\n  entryPoints:\n    - http\n  routes:\n  - match: Host(`test.localhost`) && PathPrefix(`/test`)\n    kind: Rule\n    services:\n    - name: server0\n      port: 80\n    - name: server1\n      port: 80\n    middlewares:\n    - name: basicauth\n      namespace: foo\n```\n\n----------------------------------------\n\nTITLE: Configuring ETCD Provider TLS.CAOptional in Traefik v2\nDESCRIPTION: Example configurations showing how to set the TLS.CAOptional option for ETCD provider in Traefik v2. This option has been removed in v3 as TLS client authentication is a server-side option.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  etcd:\n    tls: \n      caOptional: true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[providers.etcd.tls]\n    caOptional=true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--providers.etcd.tls.caOptional=true\n```\n\n----------------------------------------\n\nTITLE: Defining TraefikService CRD for Kubernetes in YAML\nDESCRIPTION: Custom Resource Definition (CRD) for TraefikService introduced in v2.1. This YAML definition needs to be applied to the cluster when upgrading to v2.1.\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: traefikservices.traefik.containo.us\n\nspec:\n  group: traefik.containo.us\n  version: v1alpha1\n  names:\n    kind: TraefikService\n    plural: traefikservices\n    singular: traefikservice\n  scope: Namespaced\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes CRD Definitions\nDESCRIPTION: Shell command to update Kubernetes CRDs to the latest version compatible with Traefik v3.2 and higher. This updates TraefikService, RateLimit, InFlightReq, and Compress middleware definitions.\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v3.3/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Metrics in Traefik using YAML\nDESCRIPTION: YAML configuration for enabling OpenTelemetry metrics in Traefik with default settings. This will export metrics using HTTP to https://localhost:4318/v1/metrics.\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  otlp: {}\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Gateway Provider in YAML Configuration\nDESCRIPTION: YAML configuration to enable the Kubernetes Gateway API provider in Traefik's static configuration file.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesGateway: {}\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Gateway Provider via CLI\nDESCRIPTION: Command line flag to enable the Kubernetes Gateway API provider when launching Traefik.\n\nLANGUAGE: bash\nCODE:\n```\n--providers.kubernetesgateway=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress PublishedService in Traefik with YAML\nDESCRIPTION: YAML configuration for the publishedService option to copy status from a Kubernetes service to ingress resources. This is useful for tools like External-DNS to propagate service IPs to ingress resources.\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  kubernetesIngress:\n    ingressEndpoint:\n      publishedService: \"namespace/foo-service\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Referencing Resources Across Providers Using Namespace Format\nDESCRIPTION: The format for referencing Traefik objects across different providers. This pattern uses the @ separator followed by the provider name to reference resources defined in other providers.\n\nLANGUAGE: text\nCODE:\n```\n<resource-name>@<provider-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Challenge in Traefik with TOML\nDESCRIPTION: TOML configuration for setting up the TLS-ALPN-01 challenge resolver in Traefik to generate and renew ACME certificates by provisioning a TLS certificate.\n\nLANGUAGE: toml\nCODE:\n```\n[certificatesResolvers.myresolver.acme]\n  # ...\n  [certificatesResolvers.myresolver.acme.tlsChallenge]\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Challenge with EntryPoint in Traefik using CLI\nDESCRIPTION: Command-line configuration for setting up HTTP-01 challenge resolver with a dedicated web entrypoint on port 80 to generate and renew ACME certificates.\n\nLANGUAGE: bash\nCODE:\n```\n--entryPoints.web.address=:80\n--entryPoints.websecure.address=:443\n# ...\n--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS in Traefik using TOML configuration\nDESCRIPTION: An empty TOML configuration example that would enable TLS on an entrypoint. The example is incomplete in the original document.\n\nLANGUAGE: toml\nCODE:\n```\n\n```"
  }
]