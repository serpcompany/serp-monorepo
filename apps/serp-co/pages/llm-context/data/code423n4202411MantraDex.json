[
  {
    "owner": "code-423n4",
    "repo": "2024-11-mantra-dex",
    "content": "TITLE: Visualizing Pool Manager Architecture with Mermaid\nDESCRIPTION: Mermaid diagram illustrating the three main components of the Pool Manager: pool creation, deposits/withdrawals, and swap operations. Shows the flow of operations and interactions between different components including fee collection and LP token management.\nSOURCE: https://github.com/code-423n4/2024-11-mantra-dex/blob/main/contracts/pool-manager/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Pool Manager Overview\n---\ngraph LR\n    A[Pool Manager] --> B(Pool Creation)\n    A --> C(Deposits and Withdrawals)\n    A --> D(Swaps)\n\n    subgraph Pool Creation\n        B --> E[\"CreatePool (User)\"]\n        E --> X[Fees Collected by Fee Collector]\n        E --> F[Pools Map]\n    end\n\n    subgraph Deposits and Withdrawals\n        C --> G[\"ProvideLiquidity (User)\"]\n        C --> H[\"WithdrawLiquidity (User)\"]\n        G --> I[LP Tokens Minted]\n        H --> J[LP Tokens Burned]\n        J --> Z[User gets assets equivalent to the LP shares burned]\n    end\n\n    subgraph Swaps\n        D --> K[\"Swap (Single-hop)\"]\n        D --> L[\"ExecuteSwapOperations (Multi-hop)\"]\n        K --> M{Pool Balances Updated}\n        L --> M\n        M --> N[Fees Collected by Fee Collector]\n        M --> O[Swap Fees Remain in Pool for LPs]\n    end\n```\n\n----------------------------------------\n\nTITLE: Visualizing Farm Manager Architecture with Mermaid\nDESCRIPTION: Mermaid diagram showing the core components and flows of the Farm Manager, including farm management, position handling, and reward distribution mechanics. Illustrates the relationship between farms, positions, and epoch-based reward calculations.\nSOURCE: https://github.com/code-423n4/2024-11-mantra-dex/blob/main/contracts/farm-manager/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Farm Manager Overview\n---\ngraph TD\n    A[Farm Manager] --> B(Farms)\n    A --> C(Positions)\n\n    subgraph Farms\n        B --> D[\"Create Farm (User)\"]\n        B --> E[\"Top up Farm (User)\"]\n        B --> F[\"Close Farm (Owner or Contract Owner)\"]\n    end\n\n    subgraph Positions\n        C --> G[\"Create Position (User)\"]\n        C --> H[\"Expand Position (User)\"]\n        C --> I[\"Close Position (User)\"]\n        C --> J[\"Withdraw Position (User)\"]\n    end\n\n    L{On Epoch Changed} --> Q[Store LP weight for contract]\n    N[\"Claim Farm Rewards (User)\"] -->|Rewards go to user| O[Save user's last claimed epoch]\n    N --> P[Save LP Weight History]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Fee Collection Flow with Mermaid Diagram\nDESCRIPTION: A flowchart diagram showing how fees are collected from different protocol operations including pool creation, swaps, farm creation, and emergency withdrawals. The diagram illustrates the flow from Pool Manager and Farm Manager to the Fee Collector.\nSOURCE: https://github.com/code-423n4/2024-11-mantra-dex/blob/main/contracts/fee-collector/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Fee Collection Mechanism\n---\ngraph LR\n    A[Pool Manager] --> B[Create Pool]\n    A --> D[Perform Swap]\n\n    H[Farm Manager] --> I[Create farm]\n    H --> L[User emergency withdraw]\n\n    B --> J{Fee Collected}\n    D --> J\n    L --> J\n    I --> J\n    J --> K[Fee Collector]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Epoch Manager Hook Mechanism with Mermaid Diagram\nDESCRIPTION: A mermaid diagram illustrating how the Epoch Manager executes hooks on registered contracts when a new epoch is created. The diagram shows the Epoch Manager triggering the on_epoch_created hook on multiple contracts after a CreateEpoch action occurs.\nSOURCE: https://github.com/code-423n4/2024-11-mantra-dex/blob/main/contracts/epoch-manager/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Epoch Manager Hook Mechanism\n---\nflowchart\nE[Epoch Manager] -->|on_epoch_created| C1[Contract 1]\nE -.->|CreateEpoch| E\nE -->|on_epoch_created| C2[Contract 2]\nE -->|on_epoch_created| N[...]\nE -->|on_epoch_created| CN[Contract N]\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Tests for MANTRA DEX Project in Bash\nDESCRIPTION: This snippet provides instructions for cloning the MANTRA DEX repository, building the project, running tests, and optimizing the code. It also includes a command for checking test coverage using cargo tarpaulin.\nSOURCE: https://github.com/code-423n4/2024-11-mantra-dex/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recurse https://github.com/code-423n4/2024-11-mantra-dex.git\ncd 2024-11-mantra-dex\ncargo build\ncargo test\n# If you donÂ´t have `just`: `cargo install just` before proceeding\njust optimize\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo tarpaulin -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Proptest Seeds for Mantra DEX Testing\nDESCRIPTION: This snippet contains the saved proptest failure cases for Mantra DEX testing. Each line represents a specific test case that previously caused failures, including parameters like amplification factors, token amounts, and swap values.\nSOURCE: https://github.com/code-423n4/2024-11-mantra-dex/blob/main/contracts/pool-manager/proptest-regressions/helpers.txt#2025-04-21_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\ncc 55857276de2241e3d09d36aba47854e0017db66f6c5a61e306b38ad0d3b8aeeb # shrinks to amp_factor = 1, initial_user_token_a_amount = 10000000, initial_user_token_b_amount = 10000000\ncc 33456e9a9f11bed69ac5171155ce7a64f73f912fcbfede19046989302d1b2da9 # shrinks to amp_factor = 10, deposit_amount_a = 0, deposit_amount_b = 0, deposit_amount_c = 0, swap_token_a_amount = 0, swap_token_b_amount = 0, swap_token_c_amount = 1, pool_token_supply = 0\ncc 75c3b0922c450b034b92dc8c2ea87edff47c90bbede702d84c9fd9c672e2f31f # shrinks to amp_factor = 141, deposit_amount_a = 308442737939502983046195411808336, deposit_amount_b = 0, deposit_amount_c = 0, swap_token_a_amount = 870112623450347049437652954298478, swap_token_b_amount = 501497230776538877048085549853566, swap_token_c_amount = 24063806364666791266594852039507, pool_token_supply = 2\ncc 0e8058d82bcea9791825f64915edb7336ff8f46a9e5400f9a035f2602838fb96 # shrinks to amp_factor = 139040, source_token_amount = 2201422791601550300438305308643575, swap_source_amount = 0, swap_destination_amount = 0, unswapped_amount = 0\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Todo Template\nDESCRIPTION: Simple markdown template with a todo placeholder for future contributing guidelines\nSOURCE: https://github.com/code-423n4/2024-11-mantra-dex/blob/main/docs/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing\n\ntodo\n```"
  }
]