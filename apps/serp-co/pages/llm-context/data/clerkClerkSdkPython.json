[
  {
    "owner": "clerk",
    "repo": "clerk-sdk-python",
    "content": "TITLE: Configuring Password Hasher in Clerk SDK Python\nDESCRIPTION: Specifies the password_hasher parameter for user creation or update. It supports various hashing algorithms including bcrypt, md5, pbkdf2, scrypt, sha256, and argon2 variants. The chosen hasher expects the password digest in a specific format.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npassword_hasher: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Strategy in Clerk SDK Python\nDESCRIPTION: This snippet shows how to implement a custom retry strategy for API calls in the Clerk SDK. It demonstrates both per-operation and global configuration of retries using a `RetryConfig` object, allowing developers to fine-tune the behavior of requests.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\nfrom clerk_backend_api.utils import BackoffStrategy, RetryConfig\n\n\nwith Clerk() as clerk:\n\n    clerk.miscellaneous.get_public_interstitial(frontend_api_query_parameter=\"frontend-api_1a2b3c4d\", frontend_api_query_parameter1=\"pub_1a2b3c4d\", publishable_key=\"pub_1a2b3c4d\", proxy_url=\"https://mean-orchid.com/\", domain=\"plump-reach.com\", sign_in_url=\"https://delicious-costume.org/\", use_domain_for_script=True,\n        RetryConfig(\"backoff\", BackoffStrategy(1, 50, 1.1, 100), False))\n\n    # Use the SDK ...\n\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\nfrom clerk_backend_api.utils import BackoffStrategy, RetryConfig\n\n\nwith Clerk(\n    retry_config=RetryConfig(\"backoff\", BackoffStrategy(1, 50, 1.1, 100), False),\n) as clerk:\n\n    clerk.miscellaneous.get_public_interstitial(frontend_api_query_parameter=\"frontend-api_1a2b3c4d\", frontend_api_query_parameter1=\"pub_1a2b3c4d\", publishable_key=\"pub_1a2b3c4d\", proxy_url=\"https://mean-orchid.com/\", domain=\"plump-reach.com\", sign_in_url=\"https://delicious-costume.org/\", use_domain_for_script=True)\n\n    # Use the SDK ...\n\n```\n\n----------------------------------------\n\nTITLE: Asynchronous usage of Clerk Backend API SDK\nDESCRIPTION: Example of asynchronous usage of the Clerk Backend API SDK to make API calls.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom clerk_backend_api import Clerk\n\nasync def main():\n\n    async with Clerk() as clerk:\n\n        await clerk.miscellaneous.get_public_interstitial_async(frontend_api_query_parameter=\"frontend-api_1a2b3c4d\", frontend_api_query_parameter1=\"pub_1a2b3c4d\", publishable_key=\"pub_1a2b3c4d\", proxy_url=\"https://mean-orchid.com/\", domain=\"plump-reach.com\", sign_in_url=\"https://delicious-costume.org/\", use_domain_for_script=True)\n\n        # Use the SDK ...\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Settings with Clerk Python SDK\nDESCRIPTION: Example showing how to initialize the Clerk client and update organization settings with various configuration options. The code demonstrates setting parameters like membership limits, domain settings, and role configurations.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/instancesettingssdk/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.instance_settings.update_organization_settings(request={\n        \"enabled\": True,\n        \"max_allowed_memberships\": 10,\n        \"admin_delete_enabled\": False,\n        \"domains_enabled\": True,\n        \"domains_enrollment_modes\": [\n            \"automatic_invitation\",\n            \"automatic_suggestion\",\n        ],\n        \"creator_role_id\": \"creator_role\",\n        \"domains_default_role_id\": \"member_role\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Authenticating requests using Clerk Backend API SDK\nDESCRIPTION: Example of authenticating requests from frontend to backend using Clerk Backend API SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport httpx\nfrom clerk_backend_api import Clerk\nfrom clerk_backend_api.jwks_helpers import authenticate_request, AuthenticateRequestOptions\n\ndef is_signed_in(request: httpx.Request):\n    sdk = Clerk(bearer_auth=os.getenv('CLERK_SECRET_KEY'))\n    request_state = sdk.authenticate_request(\n        request,\n        AuthenticateRequestOptions(\n            authorized_parties=['https://example.com']\n        )\n    )\n    return request_state.is_signed_in\n```\n\n----------------------------------------\n\nTITLE: Create User with Clerk Python SDK\nDESCRIPTION: Creates a new user with specified attributes including email, phone, password, metadata and organization settings. Email addresses and phone numbers are automatically marked as verified. Includes rate limiting of 20 requests per 10 seconds.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.create(request={\n        \"external_id\": \"ext-id-001\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\",\n        \"email_address\": [\n            \"john.doe@example.com\",\n        ],\n        \"phone_number\": [\n            \"+12345678901\",\n        ],\n        \"web3_wallet\": [\n            \"0x123456789abcdef0x123456789abcdef\",\n        ],\n        \"username\": \"johndoe123\",\n        \"password\": \"Secure*Pass4\",\n        \"password_digest\": \"$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc\",\n        \"password_hasher\": \"<value>\",\n        \"skip_password_checks\": False,\n        \"skip_password_requirement\": False,\n        \"totp_secret\": \"base32totpsecretkey\",\n        \"backup_codes\": [\n            \"123456\",\n            \"654321\",\n        ],\n        \"public_metadata\": {\n            \"role\": \"user\",\n        },\n        \"private_metadata\": {\n            \"internal_id\": \"789\",\n        },\n        \"unsafe_metadata\": {\n            \"preferences\": {\n                \"theme\": \"dark\",\n            },\n        },\n        \"delete_self_enabled\": True,\n        \"legal_accepted_at\": \"<value>\",\n        \"skip_legal_checks\": False,\n        \"create_organization_enabled\": True,\n        \"create_organizations_limit\": 134365,\n        \"created_at\": \"2023-03-15T07:15:20.902Z\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Details with Clerk SDK Python\nDESCRIPTION: This snippet demonstrates how to retrieve user details using the Clerk SDK for Python. It initializes the Clerk client with a bearer token and fetches user information by calling the get method on the users endpoint with the specified user_id. The example ensures that the response object is not None before proceeding to handle the response data.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.get(user_id=\"usr_1\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Defining CreateUserRequestBody Class for Clerk User Creation in Python\nDESCRIPTION: This class defines the structure for creating a user request in the Clerk system. It includes various optional fields for user information such as external ID, email addresses, phone numbers, username, password, first and last name, public metadata, private metadata, and unsafe metadata.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import List, Optional, Any\nfrom pydantic import BaseModel, Field\nfrom .email_address import EmailAddress\nfrom .phone_number import PhoneNumber\n\n\nclass CreateUserRequestBody(BaseModel):\n    external_id: Optional[str] = Field(default=None)\n    email_addresses: Optional[List[EmailAddress]] = Field(default=None)\n    phone_numbers: Optional[List[PhoneNumber]] = Field(default=None)\n    username: Optional[str] = Field(default=None)\n    password: Optional[str] = Field(default=None)\n    first_name: Optional[str] = Field(default=None)\n    last_name: Optional[str] = Field(default=None)\n    public_metadata: Optional[Any] = Field(default=None)\n    private_metadata: Optional[Any] = Field(default=None)\n    unsafe_metadata: Optional[Any] = Field(default=None)\n```\n\n----------------------------------------\n\nTITLE: Updating User Attributes with Clerk SDK Python\nDESCRIPTION: This snippet illustrates how to update a user's attributes using the Clerk SDK for Python. The example shows how to set various user identifiers and metadata while also updating the user's password. Important parameters include user_id, external_id, and metadata. The snippet also addresses user session management post-update with the sign_out_of_other_sessions parameter.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.update(user_id=\"usr_1\", external_id=\"ext_123\", first_name=\"Jane\", last_name=\"Doe\", primary_email_address_id=\"eml_12345\", primary_phone_number_id=\"phn_67890\", primary_web3_wallet_id=\"wlt_123\", username=\"janedoe\", profile_image_id=\"img_789\", password=\"secretPass123!\", password_digest=\"\\$argon2i\\$v=19\\$m=4096,t=3,p=1\\$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0\\$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc\", password_hasher=\"<value>\", skip_password_checks=False, sign_out_of_other_sessions=True, totp_secret=\"ABCD1234EFGH5678\", backup_codes=[\n        \"123456\",\n        \"654321\",\n    ], public_metadata={\n        \"theme\": \"dark\",\n    }, private_metadata={\n        \"vip\": True,\n    }, unsafe_metadata={\n        \"age\": 30,\n    }, delete_self_enabled=True, create_organization_enabled=False, legal_accepted_at=\"<value>\", skip_legal_checks=False, create_organizations_limit=597129, created_at=\"2021-04-05T14:30:00.000Z\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Access Token with Clerk Python SDK\nDESCRIPTION: This snippet demonstrates how to fetch an OAuth access token for a user who has previously authenticated with a particular OAuth provider using the Clerk Python SDK. It handles token refreshing for OAuth 2.0 if the access token has expired.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.get_o_auth_access_token(user_id=\"user_123\", provider=\"oauth_google\", paginated=True)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: List Users with Clerk Python SDK\nDESCRIPTION: Returns a paginated list of all users sorted by creation date. Supports filtering by email, phone, external ID, username, web3 wallet, user ID, organization ID and other criteria. Also allows searching and filtering by activity timestamps.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.list(request={\n        \"email_address\": [\n            \"test@example.com\",\n        ],\n        \"phone_number\": [\n            \"+12345678901\",\n        ],\n        \"external_id\": [\n            \"external-id-123\",\n        ],\n        \"username\": [\n            \"user123\",\n        ],\n        \"web3_wallet\": [\n            \"0x123456789abcdef0x123456789abcdef\",\n        ],\n        \"user_id\": [\n            \"user-id-123\",\n        ],\n        \"organization_id\": [\n            \"org-id-123\",\n        ],\n        \"query\": \"John\",\n        \"email_address_query\": \"<value>\",\n        \"phone_number_query\": \"<value>\",\n        \"username_query\": \"<value>\",\n        \"name_query\": \"<value>\",\n        \"banned\": False,\n        \"last_active_at_before\": 1700690400000,\n        \"last_active_at_after\": 1700690400000,\n        \"last_active_at_since\": 1700690400000,\n        \"created_at_before\": 1730160000000,\n        \"created_at_after\": 1730160000000,\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Verifying a Session with Clerk SDK - Python\nDESCRIPTION: This snippet demonstrates how to verify a session using the Clerk SDK. It requires the session ID and an optional JWT token for validation. The response is the session information if authenticated.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/sessions/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sessions.verify(session_id=\"sess_w8q4g9s60j28fghv00f3\", token=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoic2Vzc193OHF4ZzZzNm9qMjhmZ2h2MDBmMyIsImlhdCI6MTU4MjY0OTg2Mn0.J4KP2L6bEZ6YccHFW4E2vKbOLw_mmO0gF_GNRw-wtLM\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Revoke Invitation using Clerk API in Python\nDESCRIPTION: This snippet demonstrates how to revoke an invitation using the Clerk API. It initializes the Clerk client and calls the `revoke` method with the ID of the invitation to revoke. It requires a valid bearer token for authentication and the `clerk_backend_api` package to be installed.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/invitations/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.invitations.revoke(invitation_id=\"inv_123\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Updating User Metadata with Clerk Python SDK\nDESCRIPTION: This snippet demonstrates how to update a user's metadata using the Clerk Python SDK. It performs a deep merge of existing metadata with provided values, allowing for nested JSON object updates and key removal.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.update_metadata(user_id=\"user_123456789\", public_metadata={\n        \"key\": \"<value>\",\n        \"key1\": \"<value>\",\n    }, private_metadata={\n        \"key\": \"<value>\",\n        \"key1\": \"<value>\",\n        \"key2\": \"<value>\",\n    }, unsafe_metadata={\n        \"key\": \"<value>\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Debug Logging for Clerk SDK in Python\nDESCRIPTION: This snippet provides a way to enable debug logging for SDK requests and responses in the Clerk SDK. It integrates a custom logger using Python's `logging` library. The `logging` package should be configured and is used to capture detailed SDK logs.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\ns = Clerk(debug_logger=logging.getLogger(\"clerk_backend_api\"))\n```\n\n----------------------------------------\n\nTITLE: Verifying TOTP or Backup Code with Clerk Python SDK\nDESCRIPTION: This snippet shows how to verify a user's TOTP (Time-based One-Time Password) or backup code using the Clerk Python SDK. It requires the user ID and the code as inputs and returns a verification response.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.verify_totp(user_id=\"usr_1a2b3c\", code=\"123456\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Async HTTP Client with Custom Logic in Python\nDESCRIPTION: This snippet shows how to create a custom asynchronous HTTP client in Python. It creates a subclass of `AsyncHttpClient` to add custom headers and control request logic. Dependencies include `httpx` and `clerk_backend_api`. The `CustomClient` class overrides `send` and `build_request` methods, adding specific headers to requests.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\nfrom clerk_backend_api.httpclient import AsyncHttpClient\nimport httpx\n\nclass CustomClient(AsyncHttpClient):\n    client: AsyncHttpClient\n\n    def __init__(self, client: AsyncHttpClient):\n        self.client = client\n\n    async def send(\n        self,\n        request: httpx.Request,\n        *,\n        stream: bool = False,\n        auth: Union[\n            httpx._types.AuthTypes, httpx._client.UseClientDefault, None\n        ] = httpx.USE_CLIENT_DEFAULT,\n        follow_redirects: Union[\n            bool, httpx._client.UseClientDefault\n        ] = httpx.USE_CLIENT_DEFAULT,\n    ) -> httpx.Response:\n        request.headers[\"Client-Level-Header\"] = \"added by client\"\n\n        return await self.client.send(\n            request, stream=stream, auth=auth, follow_redirects=follow_redirects\n        )\n\n    def build_request(\n        self,\n        method: str,\n        url: httpx._types.URLTypes,\n        *,\n        content: Optional[httpx._types.RequestContent] = None,\n        data: Optional[httpx._types.RequestData] = None,\n        files: Optional[httpx._types.RequestFiles] = None,\n        json: Optional[Any] = None,\n        params: Optional[httpx._types.QueryParamTypes] = None,\n        headers: Optional[httpx._types.HeaderTypes] = None,\n        cookies: Optional[httpx._types.CookieTypes] = None,\n        timeout: Union[\n            httpx._types.TimeoutTypes, httpx._client.UseClientDefault\n        ] = httpx.USE_CLIENT_DEFAULT,\n        extensions: Optional[httpx._types.RequestExtensions] = None,\n    ) -> httpx.Request:\n        return self.client.build_request(\n            method,\n            url,\n            content=content,\n            data=data,\n            files=files,\n            json=json,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            timeout=timeout,\n            extensions=extensions,\n        )\n\ns = Clerk(async_client=CustomClient(httpx.AsyncClient()))\n```\n\n----------------------------------------\n\nTITLE: Retrieving an OAuth Application by ID with Python Clerk SDK\nDESCRIPTION: Fetches an OAuth application by its ID. This allows you to retrieve detailed information about a specific OAuth application in your Clerk instance.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/oauthapplicationssdk/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.oauth_applications.get(oauth_application_id=\"oauth_app_12345\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Invitations with Clerk API in Python\nDESCRIPTION: This code snippet demonstrates how to create a new organization invitation using the Clerk Backend API in Python. It initializes the Clerk client with a bearer token, then calls the `create` method on the `organization_invitations` object, providing parameters such as the organization ID, email address, role, inviter user ID, metadata, redirect URL, and expiration duration. The response is then asserted to be not None and printed.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationinvitationssdk/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organization_invitations.create(organization_id=\"org_12345\", email_address=\"user@example.com\", role=\"admin\", inviter_user_id=\"user_67890\", public_metadata={\n        \"key\": \"value\",\n    }, private_metadata={\n        \"private_key\": \"secret_value\",\n    }, redirect_url=\"https://example.com/welcome\", expires_in_days=486589)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Organizations with Clerk SDK Python\nDESCRIPTION: Example showing how to list organizations for an instance using the Clerk SDK for Python. The code initializes the Clerk client with authentication and calls the list method with various filtering parameters. It demonstrates how to retrieve organizations with optional query parameters like including member counts and filtering by user ID.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationssdk/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organizations.list(include_members_count=False, include_missing_member_with_elevated_permissions=False, query=\"false\", user_id=[\n        \"clerk\",\n    ], organization_id=[\n        \"-name\",\n    ])\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: User Metadata Example in Clerk Python SDK\nDESCRIPTION: Examples of the three types of metadata available in Clerk's user model: public_metadata, private_metadata, and unsafe_metadata. These fields store customizable user attributes with different visibility and security levels.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\"role\": \"admin\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"ssn\": \"123-45-6789\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"theme\": \"dark\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Organization Metadata - Python\nDESCRIPTION: This snippet merges existing metadata attributes of an organization with provided parameters using a deep merge approach. Any nested JSON objects are also merged. It requires a valid bearer token for authentication.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationssdk/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organizations.merge_metadata(organization_id=\"org_12345\", public_metadata={\n        \"announcement\": \"We are opening a new office!\",\n    }, private_metadata={\n        \"internal_use_only\": \"Future plans discussion.\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Organization with Clerk Python SDK\nDESCRIPTION: This example demonstrates how to create a new organization using the Clerk Python SDK. It shows setting organization properties including name, creator, metadata (both private and public), slug, membership limits, and creation timestamp.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationssdk/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organizations.create(request={\n        \"name\": \"NewOrg\",\n        \"created_by\": \"user_123\",\n        \"private_metadata\": {\n            \"internal_code\": \"ABC123\",\n        },\n        \"public_metadata\": {\n            \"public_event\": \"Annual Summit\",\n        },\n        \"slug\": \"neworg\",\n        \"max_allowed_memberships\": 100,\n        \"created_at\": \"1721474962525\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Optional Parameter for Signing Out of Other Sessions in Clerk SDK Python\nDESCRIPTION: This snippet details the optional parameter `sign_out_of_other_sessions`, which, when set to `true`, will sign the user out from all active sessions after their password is updated. This parameter is also only applicable when a password is being provided.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateuserrequestbody.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n| `sign_out_of_other_sessions`| *OptionalNullable[bool| :heavy_minus_sign| Set to `true` to sign out the user from all their active sessions once their password is updated. This parameter can only be used when providing a `password`| true|\n```\n\n----------------------------------------\n\nTITLE: Count Users with Clerk Python SDK\nDESCRIPTION: Returns a total count of users matching specified filter criteria including email, phone, external ID, username, web3 wallet, user ID, organization ID and other attributes.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.count(email_address=[\n        \"user@example.com\",\n    ], phone_number=[\n        \"+1234567890\",\n    ], external_id=[\n        \"external-id-123\",\n    ], username=[\n        \"username123\",\n    ], web3_wallet=[\n        \"0x123456789abcdef\",\n    ], user_id=[\n        \"user-id-123\",\n    ], organization_id=[\n        \"John Doe\",\n    ], query=\"John Doe\", email_address_query=\"<value>\", phone_number_query=\"<value>\", username_query=\"<value>\", name_query=\"<value>\", banned=True, last_active_at_before=1700690400000, last_active_at_after=1700690400000, last_active_at_since=1700690400000, created_at_before=1730160000000, created_at_after=1730160000000)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Session Token with Clerk Python SDK\nDESCRIPTION: Example of refreshing a session by creating a new token. This method requires a session ID, expired token, refresh token, and request origin. It returns a SessionRefresh object with the new tokens.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/sessions/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sessions.refresh(session_id=\"<id>\", expired_token=\"<value>\", refresh_token=\"<value>\", request_origin=\"<value>\", request_headers={\n        \"key\": \"<value>\",\n        \"key1\": \"<value>\",\n        \"key2\": \"<value>\",\n    }, request_originating_ip=\"<value>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Making Asynchronous API Calls with Clerk SDK for Python\nDESCRIPTION: This snippet shows how to use the Clerk SDK to make asynchronous API calls using asyncio. It demonstrates the usage of the 'get_public_interstitial_async' method from the miscellaneous module.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/USAGE.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Asynchronous Example\nimport asyncio\nfrom clerk_backend_api import Clerk\n\nasync def main():\n\n    async with Clerk() as clerk:\n\n        await clerk.miscellaneous.get_public_interstitial_async(frontend_api_query_parameter=\"frontend-api_1a2b3c4d\", frontend_api_query_parameter1=\"pub_1a2b3c4d\", publishable_key=\"pub_1a2b3c4d\", proxy_url=\"https://mean-orchid.com/\", domain=\"plump-reach.com\", sign_in_url=\"https://delicious-costume.org/\", use_domain_for_script=True)\n\n        # Use the SDK ...\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Invitations in Bulk with Clerk API (Python)\nDESCRIPTION: This snippet demonstrates how to use the Clerk Python SDK to create multiple organization invitations at once. It initializes the Clerk client, calls the `bulk_create` method on the `organization_invitations` service, and then handles the response.  The `organization_id` and `request_body` are required.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationinvitationssdk/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organization_invitations.bulk_create(organization_id=\"org_12345\", request_body=[\n\n    ])\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring User Management Options in Clerk SDK (Python)\nDESCRIPTION: This code snippet demonstrates the usage of optional parameters for user management in the Clerk SDK. It includes 'skip_legal_checks' to bypass legal verifications and 'create_organizations_limit' to set a cap on organization creation.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateuserrequestbody.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Example usage:\n# client.users.create(\n#     skip_legal_checks=True,\n#     create_organizations_limit=5\n# )\n```\n\n----------------------------------------\n\nTITLE: Setting a User's Profile Image with Clerk Python SDK\nDESCRIPTION: Updates a user's profile image by uploading a file. Requires the user's ID and a file object containing the image data.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.set_profile_image(user_id=\"usr_test123\", file={\n        \"file_name\": \"example.file\",\n        \"content\": open(\"example.file\", \"rb\"),\n        \"content_type\": \"<value>\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Getting Client Details with Clerk SDK in Python\nDESCRIPTION: This snippet retrieves the details of a client by client ID using the Clerk SDK. Includes optional configuration for request retries.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/clients/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.clients.get(client_id=\"cli_123456789\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Organization Invitations in Clerk Python SDK\nDESCRIPTION: Demonstrates how to retrieve a list of organization invitations for the current Clerk instance. The example shows filtering by status (ACCEPTED) and using a query parameter. The results can be paginated using limit and offset parameters.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationinvitationssdk/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organization_invitations.get_all(status=clerk_backend_api.ListInstanceOrganizationInvitationsQueryParamStatus.ACCEPTED, query=\"<value>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In Token with Clerk Python SDK\nDESCRIPTION: Creates a new sign-in token and associates it with a specified user. The token expires in 30 days by default, but the expiration duration can be customized using expires_in_seconds parameter.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/signintokens/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sign_in_tokens.create(request={\n        \"user_id\": \"user_12345\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Creating an OAuth Application with Python Clerk SDK\nDESCRIPTION: Creates a new OAuth application with a specified name, callback URL, and additional options. The callback URL must be a valid URL. All URL schemes are allowed such as http://, https://, myapp://, etc.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/oauthapplicationssdk/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.oauth_applications.create(request={\n        \"name\": \"Example App\",\n        \"redirect_uris\": [\n            \"<value>\",\n            \"<value>\",\n        ],\n        \"callback_url\": \"https://example.com/oauth/callback\",\n        \"public\": True,\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Creating Email Address with Clerk SDK Python\nDESCRIPTION: This snippet demonstrates how to create a new email address using the Clerk SDK in Python. It requires the Clerk instance initialized with a bearer token. The method takes a request parameter containing user_id, email_address, verification status, and primary status. It returns the created email address object.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailaddresses/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.email_addresses.create(request={\n        \"user_id\": \"user_12345\",\n        \"email_address\": \"example@clerk.com\",\n        \"verified\": False,\n        \"primary\": True,\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Creating a JWT Template with Clerk Python SDK\nDESCRIPTION: Example showing how to create a new JWT template with customized parameters including name, claims, lifetime, and signing configuration.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/jwttemplates/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.jwt_templates.create(request={\n        \"name\": \"Example Template\",\n        \"claims\": {},\n        \"lifetime\": 3600,\n        \"allowed_clock_skew\": 5,\n        \"custom_signing_key\": False,\n        \"signing_algorithm\": \"RS256\",\n        \"signing_key\": \"PRIVATE_KEY_PLACEHOLDER\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Uploading Organization Logo - Python\nDESCRIPTION: This snippet uploads or replaces an organization's logo by specifying the organization ID and the image file. The request requires multipart/form-data content type and properly handles large files and different image formats.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationssdk/README.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organizations.upload_logo(organization_id=\"org_12345\", file={\n        \"file_name\": \"example.file\",\n        \"content\": open(\"example.file\", \"rb\"),\n        \"content_type\": \"<value>\",\n    }, uploader_user_id=\"user_67890\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Synchronous usage of Clerk Backend API SDK\nDESCRIPTION: Example of synchronous usage of the Clerk Backend API SDK to make API calls.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk() as clerk:\n\n    clerk.miscellaneous.get_public_interstitial(frontend_api_query_parameter=\"frontend-api_1a2b3c4d\", frontend_api_query_parameter1=\"pub_1a2b3c4d\", publishable_key=\"pub_1a2b3c4d\", proxy_url=\"https://mean-orchid.com/\", domain=\"plump-reach.com\", sign_in_url=\"https://delicious-costume.org/\", use_domain_for_script=True)\n\n    # Use the SDK ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving User's Organization Invitations with Clerk Python SDK\nDESCRIPTION: This snippet demonstrates how to use the Clerk Python SDK to retrieve a paginated list of a user's organization invitations. It initializes the Clerk client, makes an API call to get organization invitations with specified parameters, and handles the response.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.get_organization_invitations(user_id=\"<id>\", status=clerk_backend_api.UsersGetOrganizationInvitationsQueryParamStatus.PENDING)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Listing Organization Domains with Clerk Python SDK\nDESCRIPTION: Retrieves a list of all domains for a specified organization. The list can be filtered by verification status and enrollment mode.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationdomainssdk/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organization_domains.list(organization_id=\"<id>\", verified=\"<value>\", enrollment_mode=\"<value>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Updating an Organization with Clerk Python SDK\nDESCRIPTION: This snippet shows how to update an existing organization. It allows modifying various properties such as name, slug, metadata, and membership settings.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationssdk/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organizations.update(organization_id=\"org_123_update\", public_metadata={\n\n    }, private_metadata={\n\n    }, name=\"New Organization Name\", slug=\"new-org-slug\", max_allowed_memberships=100, admin_delete_enabled=True, created_at=\"1733171278360\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameter Table in Markdown\nDESCRIPTION: A markdown table showing the parameters for updating templates, including their types, requirements, descriptions, and examples.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailandsmstemplates/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter                                                                                                                                                                                  | Type                                                                                                                                                                                       | Required                                                                                                                                                                                   | Description                                                                                                                                                                                | Example                                                                                                                                                                                    |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `template_type`                                                                                                                                                                            | [models.UpsertTemplatePathParamTemplateType](../../models/upserttemplatepathparamtemplatetype.md)                                                                                          | :heavy_check_mark:                                                                                                                                                                         | The type of template to update                                                                                                                                                             | sms                                                                                                                                                                                        |\n| `slug`                                                                                                                                                                                     | *str*                                                                                                                                                                                      | :heavy_check_mark:                                                                                                                                                                         | The slug of the template to update                                                                                                                                                         | verification-code                                                                                                                                                                          |\n| `name`                                                                                                                                                                                     | *Optional[str]*                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                         | The user-friendly name of the template                                                                                                                                                     | Verification Code                                                                                                                                                                          |\n| `subject`                                                                                                                                                                                  | *OptionalNullable[str]*                                                                                                                                                                    | :heavy_minus_sign:                                                                                                                                                                         | The email subject.<br/>Applicable only to email templates.                                                                                                                                 | Your Verification Code                                                                                                                                                                     |\n| `markup`                                                                                                                                                                                   | *OptionalNullable[str]*                                                                                                                                                                    | :heavy_minus_sign:                                                                                                                                                                         | The editor markup used to generate the body of the template                                                                                                                                | <p>Your code: {{code}}</p>                                                                                                                                                                 |\n| `body`                                                                                                                                                                                     | *Optional[str]*                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                         | The template body before variable interpolation                                                                                                                                            | Use this code to verify your email: {{code}}                                                                                                                                               |\n| `delivered_by_clerk`                                                                                                                                                                       | *OptionalNullable[bool]*                                                                                                                                                                   | :heavy_minus_sign:                                                                                                                                                                         | Whether Clerk should deliver emails or SMS messages based on the current template                                                                                                          | true                                                                                                                                                                                       |\n| `from_email_name`                                                                                                                                                                          | *Optional[str]*                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                         | The local part of the From email address that will be used for emails.<br/>For example, in the address 'hello@example.com', the local part is 'hello'.<br/>Applicable only to email templates. | hello                                                                                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Verifying User Password with Clerk Python SDK\nDESCRIPTION: This snippet demonstrates how to verify a user's password using the Clerk Python SDK. It requires the user ID and password as inputs and returns a verification response.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.verify_password(user_id=\"user_123\", password=\"securepassword123\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Creating an Invitation with Clerk Python SDK\nDESCRIPTION: Creates a new invitation for the given email address and sends the invitation email. This example demonstrates setting the email address, metadata, redirect URL, expiration period, and template.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/invitations/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.invitations.create(request={\n        \"email_address\": \"user@example.com\",\n        \"public_metadata\": {\n\n        },\n        \"redirect_url\": \"https://example.com/welcome\",\n        \"expires_in_days\": 486589,\n        \"template_slug\": clerk_backend_api.TemplateSlug.WAITLIST_INVITATION,\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Listing Sessions with Clerk Python SDK\nDESCRIPTION: Example of listing user sessions with optional filtering by client_id, user_id, and status. The response returns sessions sorted by creation date, with newer sessions appearing first.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/sessions/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sessions.list(client_id=\"client_123\", user_id=\"user_456\", status=clerk_backend_api.QueryParamStatus.ACTIVE, paginated=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Banning a User with Clerk Python SDK\nDESCRIPTION: This code demonstrates how to ban a user which revokes all their sessions and prevents them from signing in again. It requires a bearer authentication token and handles the response appropriately.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.ban(user_id=\"user_12345\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Adding a Domain with Clerk SDK in Python\nDESCRIPTION: This code snippet demonstrates how to add a new domain to a Clerk instance using the Clerk SDK for Python. It initializes the Clerk client with a bearer token, constructs a request body with the domain details (name, is_satellite, proxy_url), and calls the `domains.add()` method. The is_satellite parameter must be set to true.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/domainssdk/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.domains.add(request={\n        \"name\": \"example.com\",\n        \"is_satellite\": True,\n        \"proxy_url\": \"https://proxy.example.com\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Domain with Clerk SDK in Python\nDESCRIPTION: This code snippet demonstrates how to update a domain within a Clerk instance using the Clerk SDK for Python. It initializes the Clerk client with a bearer token and calls the `domains.update()` method with the domain ID, new name, proxy URL, and is_secondary flag. Updating a primary domain's name will also update the instance's home origin, affecting the default application paths.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/domainssdk/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.domains.update(domain_id=\"domain_12345\", name=\"example.com\", proxy_url=\"http://proxy.example.com\", is_secondary=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Phone Number with Clerk SDK Python\nDESCRIPTION: This snippet demonstrates how to create a new phone number using the Clerk SDK for Python. It includes setting the user ID, phone number, verification status, primary status, and second factor reservation.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/phonenumbers/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.phone_numbers.create(request={\n        \"user_id\": \"usr_12345\",\n        \"phone_number\": \"+11234567890\",\n        \"verified\": True,\n        \"primary\": False,\n        \"reserved_for_second_factor\": False,\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Listing JWT Templates with Clerk Python SDK\nDESCRIPTION: Example showing how to list all JWT templates using the Clerk Python SDK. This operation supports pagination through optional parameters.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/jwttemplates/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.jwt_templates.list(paginated=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Disabling MFA for User in Python\nDESCRIPTION: Disables all MFA methods for a given user. Requires the user ID. Returns a DisableMFAResponseBody object or raises errors for invalid requests or server issues.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.disable_mfa(user_id=\"user_123456\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Updating a Sign-up using Clerk SDK in Python\nDESCRIPTION: This snippet shows how to update a sign-up using its ID. It initializes the Clerk client with a bearer token and calls the update method of the sign_ups module, providing the sign-up ID, external ID, and custom action flag.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/signups/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sign_ups.update(id=\"signup_1234567890abcdef\", external_id=\"ext_id_7890abcdef123456\", custom_action=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Initializing ErrorClerkError Model in Python\nDESCRIPTION: Demonstrates the usage of the ErrorClerkError model from the Clerk SDK. This model is used to represent and handle Clerk-specific errors in Python applications integrating with Clerk.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/error.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.ErrorClerkError = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Authenticating Clerk Backend API SDK with bearer token\nDESCRIPTION: Example of authenticating the Clerk Backend API SDK using a bearer token.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    clerk.miscellaneous.get_public_interstitial(frontend_api_query_parameter=\"frontend-api_1a2b3c4d\", frontend_api_query_parameter1=\"pub_1a2b3c4d\", publishable_key=\"pub_1a2b3c4d\", proxy_url=\"https://mean-orchid.com/\", domain=\"plump-reach.com\", sign_in_url=\"https://delicious-costume.org/\", use_domain_for_script=True)\n\n    # Use the SDK ...\n```\n\n----------------------------------------\n\nTITLE: Verifying TOTP for User Authentication in Python\nDESCRIPTION: Verifies a TOTP or backup code for a given user. Requires the user ID and the code to verify. Returns a VerifyTOTPResponseBody object or raises errors for invalid requests or server issues.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.verify_totp(user_id=\"usr_1a2b3c\", code=\"123456\")\n\n    if res is not None:\n        # Handle successful verification\n        print(res)\n    else:\n        # Handle verification failure\n        print(\"Verification failed\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Instance with Clerk Python SDK\nDESCRIPTION: Demonstrates how to fetch the current Clerk instance settings using the get() method of the instance_settings module. This snippet initializes the Clerk client with a bearer token and retrieves instance information.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/instancesettingssdk/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.instance_settings.get()\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a User with Clerk Python SDK\nDESCRIPTION: This code demonstrates how to delete a user by their ID using the Clerk Python SDK. It requires a bearer authentication token and handles the response from the Clerk API.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.delete(user_id=\"usr_1\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: ErrorClerkError Fields Table Definition\nDESCRIPTION: Markdown table defining the fields, types, requirements and examples for the ErrorClerkError class. Includes message, long_message, code, meta, and clerk_trace_id fields with their respective properties.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/errorclerkerror.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                | Type                                                 | Required                                             | Description                                          | Example                                              |\n| ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- |\n| `message`                                            | *str*                                                | :heavy_check_mark:                                   | N/A                                                  | Invalid input                                        |\n| `long_message`                                       | *str*                                                | :heavy_check_mark:                                   | N/A                                                  | The input provided does not meet the requirements.   |\n| `code`                                               | *str*                                                | :heavy_check_mark:                                   | N/A                                                  | 400_bad_request                                      |\n| `meta`                                               | [Optional[models.ErrorMeta]](../models/errormeta.md) | :heavy_minus_sign:                                   | N/A                                                  | {}                                                   |\n| `clerk_trace_id`                                     | *Optional[str]*                                      | :heavy_minus_sign:                                   | N/A                                                  | trace_123456789abcd                                  |\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON Web Key Set with Python Clerk SDK\nDESCRIPTION: Example code showing how to retrieve the JSON Web Key Set (JWKS) from a Clerk instance using the Python SDK. The example initializes the Clerk client with authentication and makes a request to get the JWKS.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/jwkssdk/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.jwks.get_jwks()\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Overriding Server URL in Clerk SDK Python\nDESCRIPTION: This snippet demonstrates how to override the server URL when initializing the Clerk SDK client instance. It allows developers to connect to a different server than the default one.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    server_url=\"https://api.clerk.com/v1\",\n) as clerk:\n\n    clerk.miscellaneous.get_public_interstitial(frontend_api_query_parameter=\"frontend-api_1a2b3c4d\", frontend_api_query_parameter1=\"pub_1a2b3c4d\", publishable_key=\"pub_1a2b3c4d\", proxy_url=\"https://mean-orchid.com/\", domain=\"plump-reach.com\", sign_in_url=\"https://delicious-costume.org/\", use_domain_for_script=True)\n\n    # Use the SDK ...\n\n```\n\n----------------------------------------\n\nTITLE: Invitation Parameters Types in Python\nDESCRIPTION: Type definitions for invitation parameters in Clerk SDK. Includes redirect_url for post-acceptance redirection and expires_in_days for setting invitation validity period.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createorganizationinvitationrequestbody.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nredirect_url: OptionalNullable[str]\nexpires_in_days: OptionalNullable[int]\n```\n\n----------------------------------------\n\nTITLE: Listing Organization Invitations with Clerk API in Python\nDESCRIPTION: This snippet demonstrates how to use the Clerk SDK to list organization invitations. It initializes the Clerk client with a bearer token and fetches the invitations for a specific organization based on the provided parameters. The response is asserted for not being None for validation purposes.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationinvitationssdk/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organization_invitations.list(organization_id=\"org_12345\", status=clerk_backend_api.ListOrganizationInvitationsQueryParamStatus.PENDING)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Domains with Clerk SDK in Python\nDESCRIPTION: This code snippet demonstrates how to list all domains associated with a Clerk instance using the Clerk SDK for Python. It initializes the Clerk client with a bearer token, calls the `domains.list()` method, and prints the response. The response contains the primary domain and any satellite domains associated with the instance.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/domainssdk/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.domains.list()\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Unbanning a User with Clerk Python SDK\nDESCRIPTION: This code demonstrates how to unban a previously banned user using the Clerk Python SDK. It requires a bearer authentication token and returns the updated user object.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.unban(user_id=\"user_12345\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Updating Instance Settings with Clerk Python SDK\nDESCRIPTION: Shows how to update various instance settings such as test mode, HIBP integration, email deliverability, and allowed origins. This code initializes the Clerk client and uses the update() method with configuration parameters.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/instancesettingssdk/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    clerk.instance_settings.update(request={\n        \"test_mode\": True,\n        \"hibp\": False,\n        \"enhanced_email_deliverability\": True,\n        \"support_email\": \"support@example.com\",\n        \"clerk_js_version\": \"2.3.1\",\n        \"development_origin\": \"http://localhost:3000\",\n        \"allowed_origins\": [\n            \"http://localhost:3000\",\n            \"chrome-extension://extension_uiid\",\n            \"capacitor://localhost\",\n        ],\n        \"url_based_session_syncing\": True,\n    })\n\n    # Use the SDK ...\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Phone Number with Clerk SDK Python\nDESCRIPTION: This snippet shows how to update the properties of a phone number, such as verification status, primary status, and second factor reservation, using the Clerk SDK for Python.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/phonenumbers/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.phone_numbers.update(phone_number_id=\"phone_12345\", verified=False, primary=True, reserved_for_second_factor=True)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth Application using Clerk Python SDK\nDESCRIPTION: This code initializes a Clerk client, updates an OAuth application with new details, and handles the response. It demonstrates authentication, setting application properties, and basic error checking.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/oauthapplicationssdk/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.oauth_applications.update(oauth_application_id=\"oauth_app_67890\", name=\"Updated OAuth App Name\", redirect_uris=[\n        \"<value>\",\n        \"<value>\",\n        \"<value>\",\n    ], callback_url=\"https://example.com/oauth/callback\", public=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Passkey Model Example in Clerk Python SDK\nDESCRIPTION: Example structure for the SchemasPasskey model in Clerk's Python SDK. This model includes properties like ID, name, last used timestamp, and verification details for passkeys associated with a user.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n\"id\": \"passkey_id_123\",\n\"object\": \"passkey\",\n\"name\": \"My Passkey\",\n\"last_used_at\": 1615852800,\n\"verification\": {\n\"status\": \"verified\",\n\"strategy\": \"passkey\"\n}\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Memberships with Clerk Python SDK\nDESCRIPTION: Example showing how to retrieve a paginated list of organization memberships for a specific user using the Clerk Python SDK. Uses bearer token authentication and returns organization membership data.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.get_organization_memberships(user_id=\"usr_1234567890\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Listing Allowlist Identifiers with Clerk SDK - Python\nDESCRIPTION: This snippet demonstrates how to list all identifiers on the allowlist using the Clerk SDK in Python. The operation supports pagination configurable through parameters. The function returns a list of allowlist identifiers, or raises an error in cases such as authentication failure or server errors.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/allowlistidentifiers/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.allowlist_identifiers.list(paginated=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Session Token with Clerk SDK - Python\nDESCRIPTION: This snippet shows how to create a new session JSON Web Token (JWT) using the session ID and an optional expiration parameter with the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/sessions/README.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sessions.create_token(session_id=\"<id>\", expires_in_seconds=6005.84)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Unlocking a User with Clerk Python SDK\nDESCRIPTION: Removes the lock from a user, allowing them to sign in again.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.unlock(user_id=\"user_12345\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Defining EmailAddress Fields in Markdown\nDESCRIPTION: This markdown table defines the fields of the EmailAddress model, including their types, requirements, descriptions, and examples. It covers essential properties like email address, verification status, and linked identifications.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/emailaddress.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                  | Type                                                                                   | Required                                                                               | Description                                                                            | Example                                                                                |\n| -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |\n| `object`                                                                               | [models.EmailAddressObject](../models/emailaddressobject.md)                           | :heavy_check_mark:                                                                     | String representing the object's type. Objects of the same type share the same value.<br/> | email_address                                                                          |\n| `email_address`                                                                        | *str*                                                                                  | :heavy_check_mark:                                                                     | N/A                                                                                    | example@clerk.com                                                                      |\n| `reserved`                                                                             | *bool*                                                                                 | :heavy_check_mark:                                                                     | N/A                                                                                    | false                                                                                  |\n| `verification`                                                                         | [Nullable[models.Verification]](../models/verification.md)                             | :heavy_check_mark:                                                                     | N/A                                                                                    | {<br/>\"status\": \"verified\",<br/>\"strategy\": \"admin\"<br/>}                              |\n| `linked_to`                                                                            | List[[models.IdentificationLink](../models/identificationlink.md)]                     | :heavy_check_mark:                                                                     | N/A                                                                                    | [<br/>{<br/>\"type\": \"oauth_google\",<br/>\"id\": \"link_12345\"<br/>}<br/>]                 |\n| `created_at`                                                                           | *int*                                                                                  | :heavy_check_mark:                                                                     | Unix timestamp of creation<br/>                                                        | 1615458901                                                                             |\n| `updated_at`                                                                           | *int*                                                                                  | :heavy_check_mark:                                                                     | Unix timestamp of creation<br/>                                                        | 1615459001                                                                             |\n| `id`                                                                                   | *Optional[str]*                                                                        | :heavy_minus_sign:                                                                     | N/A                                                                                    | email_id_56789                                                                         |\n| `matches_sso_connection`                                                               | *Optional[bool]*                                                                       | :heavy_minus_sign:                                                                     | Indicates whether this email address domain matches an active enterprise connection.<br/> |                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Updating a JWT Template with Clerk Python SDK\nDESCRIPTION: Example showing how to update an existing JWT template by providing its ID and the fields to be updated, such as name, claims, lifetime, and signing configuration.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/jwttemplates/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.jwt_templates.update(template_id=\"<id>\", name=\"<value>\", claims={}, lifetime=8574.78, allowed_clock_skew=5971.29, custom_signing_key=True, signing_algorithm=\"<value>\", signing_key=\"<value>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Web3 Wallet Model Example in Clerk Python SDK\nDESCRIPTION: Example structure for the Web3Wallet model in Clerk's Python SDK. This model includes properties like ID, wallet address, verification status, and timestamps for blockchain wallets associated with a user.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n\"id\": \"wallet_id_123\",\n\"object\": \"web3_wallet\",\n\"web3_wallet\": \"0x123456789abcdef\",\n\"verification\": {\n\"status\": \"verified\",\n\"strategy\": \"web3_metamask_signature\"\n},\n\"created_at\": 1609459200,\n\"updated_at\": 1609459200\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Searching Users with Query Parameter in Python\nDESCRIPTION: This optional parameter allows searching for users based on various fields including email, phone, username, web3 wallet, user ID, first name, and last name. It supports partial matches and doesn't require an exact value.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"John\"\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Token with Clerk SDK in Python\nDESCRIPTION: Method to create an actor token for impersonating a user with specific authentication requirements. Requires a bearer token and user details including the actor's user ID.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/actortokens/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.actor_tokens.create(request=clerk_backend_api.CreateActorTokenRequestBody(\n        user_id=\"user_1a2b3c\",\n        actor=clerk_backend_api.CreateActorTokenActor(\n            sub=\"user_2OEpKhcCN1Lat9NQ0G6puh7q5Rb\",\n            **{\n                \"sub\": \"user_2OEpKhcCN1Lat9NQ0G6puh7q5Rb\",\n            },\n        ),\n    ))\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Creating Session Token from Template in Python\nDESCRIPTION: This code snippet demonstrates how to use the Clerk SDK to create a JWT session token from a template. It uses the Clerk class to authenticate and then calls the create_token_from_template method with specific parameters including session ID and template name. The response is asserted to ensure a successful token creation.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/sessions/README.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sessions.create_token_from_template(session_id=\"ses_123abcd4567\", template_name=\"custom_hasura\", expires_in_seconds=2299.84)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Using Backup Codes with Clerk SDK in Python\nDESCRIPTION: Example of using backup codes in the Clerk SDK, where backup codes are provided as an array of strings. These codes can be used to enable backup authentication for a user without resetting existing codes.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n[\n\"123456\",\n\"654321\"\n]\n```\n\n----------------------------------------\n\nTITLE: Rotating OAuth Application Secret with Clerk API in Python\nDESCRIPTION: This snippet showcases how to rotate the client secret of an OAuth application using the Clerk Backend API with Python. It necessitates a bearer token for authentication and the ID of the OAuth application. The response is asserted, and then printed to the console.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/oauthapplicationssdk/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.oauth_applications.rotate_secret(oauth_application_id=\"oauth_application_12345\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Client Model Field Documentation Table in Markdown\nDESCRIPTION: Markdown table documenting all fields of the Client model including their types, requirements, descriptions and examples\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/client.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type | Required | Description | Example |\n| -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |\n| `object` | [models.Object](../models/object.md) | :heavy_check_mark: | String representing the object's type. Objects of the same type share the same value. | client |\n| `id` | *str* | :heavy_check_mark: | String representing the identifier of the session. | client_123456789abcd |\n| `session_ids` | List[*str*] | :heavy_check_mark: | N/A | [\\n\"sess_123456789abcd\",\\n\"sess_23456789abcd\"\\n] |\n| `sessions` | List[[models.Session](../models/session.md)] | :heavy_check_mark: | N/A | |\n| `sign_in_id` | *Nullable[str]* | :heavy_check_mark: | N/A | signin_123456789abcd |\n| `sign_up_id` | *Nullable[str]* | :heavy_check_mark: | N/A | signup_123456789abcd |\n| `last_active_session_id` | *Nullable[str]* | :heavy_check_mark: | Last active session_id. | session_123456789abcd |\n| `updated_at` | *int* | :heavy_check_mark: | Unix timestamp of last update. | 1632580323 |\n| `created_at` | *int* | :heavy_check_mark: | Unix timestamp of creation. | 1622481123 |\n```\n\n----------------------------------------\n\nTITLE: Phone Number Model Example in Clerk Python SDK\nDESCRIPTION: Example structure for the PhoneNumber model in Clerk's Python SDK. This model includes properties like ID, phone number, verification status, and timestamps for phone numbers associated with a user.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n\"id\": \"phone_id_123\",\n\"object\": \"phone_number\",\n\"phone_number\": \"+12345678901\",\n\"verification\": {\n\"status\": \"verified\",\n\"strategy\": \"phone_code\"\n},\n\"created_at\": 1609459200,\n\"updated_at\": 1609459200\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Updating SAML Connection with Python Clerk SDK\nDESCRIPTION: This snippet shows how to update an existing SAML Connection specified by its ID using the Clerk SDK. The `saml_connection_id` is necessary, along with the other parameters for the updated configuration. An optional `retries` parameter can be utilized for custom retry behavior.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/samlconnectionssdk/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.saml_connections.update(saml_connection_id=\"saml_conn_123_update\", name=\"Example SAML Connection\", domain=\"example.com\", idp_entity_id=\"entity_123\", idp_sso_url=\"https://idp.example.com/sso\", idp_certificate=\"MIIDBTCCAe2gAwIBAgIQ...\", idp_metadata_url=\"https://idp.example.com/metadata\", idp_metadata=\"<EntityDescriptor>...</EntityDescriptor>\", organization_id=\"<id>\", attribute_mapping={\n        \"user_id\": \"id123\",\n        \"email_address\": \"user@example.com\",\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n    }, active=True, sync_user_attributes=False, allow_subdomains=True, allow_idp_initiated=False, disable_additional_identifications=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Clerk SDK Python\nDESCRIPTION: This snippet illustrates how to handle errors during API calls in the Clerk SDK. It shows the structure and properties of the `SDKError` exception and demonstrates how to catch and process errors effectively.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk, models\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n    res = None\n    try:\n\n        res = clerk.clients.verify(request={\n            \"token\": \"jwt_token_example\",\n        })\n\n        assert res is not None\n\n        # Handle response\n        print(res)\n\n    except models.ClerkErrors as e:\n        # handle e.data: models.ClerkErrorsData\n        raise(e)\n    except models.SDKError as e:\n        # handle exception\n        raise(e)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Domains with Clerk Python SDK\nDESCRIPTION: Creates a new organization domain with the specified organization ID, name, enrollment mode, and verification status. The domain is verified by default but can be set to unverified.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationdomainssdk/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organization_domains.create(organization_id=\"<id>\", name=\"<value>\", enrollment_mode=\"<value>\", verified=True)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Organization in Clerk SDK Python\nDESCRIPTION: This code snippet demonstrates how to delete an organization using the Clerk SDK in Python. It requires the Clerk object to be initialized with bearer authentication. The main parameter is the organization ID, which specifies which organization is to be deleted. There is also optional configuration for retry behavior. The operation returns a response object confirming the deletion.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationssdk/README.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organizations.delete(organization_id=\"org_321_delete\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Fields in Python\nDESCRIPTION: Structured representation of organization attributes with type annotations and optional fields for metadata and membership tracking\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/organization.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"object\": models.OrganizationObject,\n    \"id\": str,\n    \"name\": str,\n    \"slug\": str,\n    \"max_allowed_memberships\": int,\n    \"admin_delete_enabled\": bool,\n    \"public_metadata\": Dict[str, Any],\n    \"private_metadata\": Dict[str, Any],\n    \"created_at\": int,\n    \"updated_at\": int,\n    \"members_count\": Optional[int],\n    \"missing_member_with_elevated_permissions\": Optional[bool],\n    \"pending_invitations_count\": Optional[int],\n    \"created_by\": Optional[str]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Public Metadata Structure - Python\nDESCRIPTION: This snippet defines the structure for public metadata associated with users in the Clerk SDK. The public metadata is a dictionary that can store any key-value pairs and is accessible from both the Frontend and Backend APIs. This structure is essential for applications that require user-visible metadata.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateuserrequestbody.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npublic_metadata = Dict[str, Any]  # Metadata saved on the user, that is visible to both your Frontend and Backend APIs\n# Example usage: {'theme': 'dark'}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Allowlist Identifier with Clerk SDK - Python\nDESCRIPTION: This snippet describes how to delete an identifier from the allowlist using the Clerk SDK in Python. The identifier's ID is required to execute the operation, which returns a confirmation object or throws an error if the process fails.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/allowlistidentifiers/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.allowlist_identifiers.delete(identifier_id=\"example_identifier_id\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Locking a User with Clerk Python SDK\nDESCRIPTION: Marks a user as locked, preventing them from signing in until the lock expires. Lock duration is configurable in the instance's restrictions settings.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.lock(user_id=\"user_123456789\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Changing Production Instance Domain with Clerk Python SDK\nDESCRIPTION: Shows how to change the domain of a production instance. This operation affects DNS records, SSL certificates, and user sessions. The snippet initializes the Clerk client and uses the change_domain() method with required parameters.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/instancesettingssdk/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    clerk.instance_settings.change_domain(request={\n        \"home_url\": \"https://www.newdomain.com\",\n        \"is_secondary\": False,\n    })\n\n    # Use the SDK ...\n\n```\n\n----------------------------------------\n\nTITLE: Revoking Sign-In Token with Clerk Python SDK\nDESCRIPTION: Revokes a pending sign-in token using its ID. This operation requires a valid sign-in token ID and returns the revoked token details.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/signintokens/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sign_in_tokens.revoke(sign_in_token_id=\"tok_test_1234567890\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Address with Clerk SDK Python\nDESCRIPTION: This snippet shows how to retrieve details of an email address using the Clerk SDK in Python. The method requires an email_address_id parameter and returns the email address details.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailaddresses/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.email_addresses.get(email_address_id=\"email_address_id_example\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Listing SAML Connections with Pagination and Filtering in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of SAML Connections for a Clerk instance. It supports filtering with a query parameter, ordering results, and filtering by organization IDs. The results are paginated and ordered by descending creation date.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/samlconnectionssdk/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.saml_connections.list(query=\"<value>\", order_by=\"<value>\", organization_id=[\n        \"<id>\",\n        \"<id>\",\n        \"<id>\",\n    ])\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Creating a Blocklist Identifier in Clerk SDK (Python)\nDESCRIPTION: Adds a new identifier to the block-list to prevent access to a Clerk authentication instance. Requires a valid bearer token and an identifier to block.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/blocklistidentifierssdk/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.blocklist_identifiers.create(request={\n        \"identifier\": \"example@example.com\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain with Clerk SDK in Python\nDESCRIPTION: This code snippet demonstrates how to delete a satellite domain from a Clerk instance using the Clerk SDK for Python.  It initializes the Clerk client with a bearer token and calls the `domains.delete()` method with the ID of the domain to be deleted.  It is not possible to delete the primary domain.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/domainssdk/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.domains.delete(domain_id=\"domain_12345\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Svix App with Clerk Python SDK\nDESCRIPTION: Creates a Svix app and associates it with the current Clerk instance. This function requires authentication with a bearer token and returns a SvixURL model object.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/webhooks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.webhooks.create_svix_app()\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Accountless Applications with Clerk SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a new accountless application using the Clerk SDK. It initializes the Clerk client with a bearer token and performs the create operation, asserting that the response is not None before printing it. It requires the utils.RetryConfig type for retries, though it's not mandatory.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/experimentalaccountlessapplications/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.experimental_accountless_applications.create()\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Phone Number with Clerk SDK Python\nDESCRIPTION: This snippet demonstrates how to delete a phone number using its ID with the Clerk SDK for Python.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/phonenumbers/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.phone_numbers.delete(phone_number_id=\"phone_12345\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Creating a Redirect URL in Clerk Python SDK\nDESCRIPTION: Creates a new redirect URL in the Clerk instance whitelist. Requires a URL parameter in the request body and returns the created RedirectURL object.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/redirecturls/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.redirect_urls.create(request={\n        \"url\": \"https://my-app.com/oauth-callback\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Email Address Model Example in Clerk Python SDK\nDESCRIPTION: Example structure for the EmailAddress model in Clerk's Python SDK. This model includes properties like ID, email address, verification status, and timestamps for email addresses associated with a user.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n\"id\": \"email_id_123\",\n\"object\": \"email_address\",\n\"email_address\": \"john.doe@example.com\",\n\"verification\": {\n\"status\": \"verified\",\n\"strategy\": \"email_code\"\n},\n\"created_at\": 1609459200,\n\"updated_at\": 1609459200\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Private Metadata Structure - Python\nDESCRIPTION: This snippet specifies the structure for private metadata associated with users in the Clerk SDK. The private metadata is also a dictionary that can hold any key-value pairs but is restricted to Backend API access only. This distinction is crucial for maintaining user privacy in applications.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateuserrequestbody.md#2025-04-16_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nprivate_metadata = Dict[str, Any]  # Metadata saved on the user, that is only visible to your Backend API\n# Example usage: {'vip': true'}\n```\n\n----------------------------------------\n\nTITLE: Uploading File Stream in Clerk SDK Python\nDESCRIPTION: This snippet demonstrates how to attach a file stream to a request for user profile image updates using the Clerk SDK. It shows the proper usage of the SDK's methods to handle file uploads in an efficient manner, avoiding memory issues with large files.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.set_profile_image(user_id=\"usr_test123\", file={\n        \"file_name\": \"example.file\",\n        \"content\": open(\"example.file\", \"rb\"),\n        \"content_type\": \"<value>\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Generating Svix Auth URL with Clerk Python SDK\nDESCRIPTION: Generates a new URL for accessing the Svix management dashboard for a particular Clerk instance. This function requires authentication with a bearer token and returns a SvixURL model object.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/webhooks/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.webhooks.generate_svix_auth_url()\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Redirect URL in Clerk Python SDK\nDESCRIPTION: Removes a specific redirect URL from the whitelist of the Clerk instance using its ID. Returns a confirmation of the deletion operation.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/redirecturls/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.redirect_urls.delete(id=\"redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Phone Number with Clerk SDK Python\nDESCRIPTION: This snippet shows how to retrieve the details of a specific phone number using its ID with the Clerk SDK for Python.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/phonenumbers/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.phone_numbers.get(phone_number_id=\"phone_12345\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Listing Pending Organization Invitations in Python\nDESCRIPTION: Retrieve a list of pending organization invitations with optional pagination using the Clerk SDK. Supports specifying organization ID, limit, and offset for querying invitations.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationinvitationssdk/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organization_invitations.list_pending(organization_id=\"org_12345\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for CreatePhoneNumberRequestBody Fields\nDESCRIPTION: Detailed field specifications for creating phone number requests including data types, requirements, descriptions and examples. Covers user_id, phone_number, verified status, primary status, and second factor settings.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createphonenumberrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `user_id` | *str* | :heavy_check_mark: | The ID representing the user | usr_12345 |\n| `phone_number` | *str* | :heavy_check_mark: | The new phone number. Must adhere to the E.164 standard for phone number format. | +11234567890 |\n| `verified` | *OptionalNullable[bool]* | :heavy_minus_sign: | When created, the phone number will be marked as verified. | true |\n| `primary` | *OptionalNullable[bool]* | :heavy_minus_sign: | Create this phone number as the primary phone number for the user. Default: false, unless it is the first phone number. | false |\n| `reserved_for_second_factor` | *OptionalNullable[bool]* | :heavy_minus_sign: | Create this phone number as reserved for multi-factor authentication. The phone number must also be verified.<br/>If there are no other reserved second factors, the phone number will be set as the default second factor. | false |\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteBlocklistIdentifierRequest in Python\nDESCRIPTION: Represents a request to delete a specific identifier from a blocklist, requiring a mandatory identifier ID\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteblocklistidentifierrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DeleteBlocklistIdentifierRequest:\n    identifier_id: str\n```\n\n----------------------------------------\n\nTITLE: Listing Redirect URLs in Clerk Python SDK\nDESCRIPTION: Lists all whitelisted redirect URLs for the Clerk instance. Supports pagination through optional parameters and returns a list of RedirectURL objects.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/redirecturls/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.redirect_urls.list(paginated=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Fetching SAML Connection with Python Clerk SDK\nDESCRIPTION: This snippet illustrates how to fetch a SAML Connection by its ID using the Clerk SDK. The ID `saml_connection_id` is required for the request, and the `retries` parameter is optional to modify the client's retry behavior.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/samlconnectionssdk/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.saml_connections.get(saml_connection_id=\"saml_conn_123\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Waitlist Entries Using Clerk Python SDK\nDESCRIPTION: This example demonstrates how to create a new waitlist entry with an email address using the Clerk Python SDK. If the email address already exists on the waitlist, no new entry is created and the existing entry is returned.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/waitlistentriessdk/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.waitlist_entries.create(request={\n        \"email_address\": \"Demond_Willms@hotmail.com\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Updating Instance Restrictions with Clerk Python SDK\nDESCRIPTION: Demonstrates how to update restriction settings for a Clerk instance, including allowlist/blocklist configurations and email security settings. The code initializes the Clerk client and uses the update_restrictions() method.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/instancesettingssdk/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.instance_settings.update_restrictions(request={\n        \"allowlist\": False,\n        \"blocklist\": True,\n        \"block_email_subaddresses\": True,\n        \"block_disposable_email_domains\": True,\n        \"ignore_dots_for_gmail_addresses\": False,\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Private Metadata in Clerk SDK for Python\nDESCRIPTION: This snippet demonstrates the structure of private_metadata in the Clerk SDK. It is a dictionary with string keys and any value type, only visible to the Backend API.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n{\n\"internal_id\": \"789\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Email Address in Clerk SDK\nDESCRIPTION: Filters users by performing a case-insensitive partial match on email addresses. Allows searching for users with emails containing a specific substring.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserscountrequest.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nemail_address_query: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Retrieving Instance Organization Memberships in Clerk Python SDK\nDESCRIPTION: Example code demonstrating how to retrieve all organization user memberships for a given instance using the Clerk Python SDK. This operation allows ordering the results and returns a collection of organization memberships.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.get_instance_organization_memberships(order_by=\"<value>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Sign-up by ID using Clerk SDK in Python\nDESCRIPTION: This snippet demonstrates how to retrieve the details of a sign-up using its ID. It initializes the Clerk client with a bearer token and calls the get method of the sign_ups module.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/signups/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sign_ups.get(id=\"<id>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Verifying Proxy Configuration for Domain using Clerk SDK Python\nDESCRIPTION: This code snippet demonstrates how to use the 'verify' operation of the ProxyChecks module to validate a proxy configuration for a domain. It sends a request with a domain ID and proxy URL, then handles the response.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/proxychecks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.proxy_checks.verify(request={\n        \"domain_id\": \"domain_32hfu3e\",\n        \"proxy_url\": \"https://example.com/__clerk\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Deleting User's TOTP Authenticators in Clerk Python SDK\nDESCRIPTION: Example code demonstrating how to delete all Time-based One-Time Password (TOTP) authenticators for a user using the Clerk Python SDK. This operation requires a user ID and returns a DeleteTOTPResponseBody object.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.delete_totp(user_id=\"<id>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: User Activity Timestamp Filtering in Python\nDESCRIPTION: Example timestamp parameters for filtering user activity in Clerk SDK. Shows usage of last_active_at_after for current filtering and last_active_at_since for legacy/deprecated filtering. Both parameters accept millisecond-precision Unix timestamps.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlast_active_at_after = 1700690400000  # Filter users active after 2023-11-23\nlast_active_at_since = 1700690400000  # Deprecated: Filter users active since 2023-11-23\n```\n\n----------------------------------------\n\nTITLE: Counting Users by Query in Python\nDESCRIPTION: Counts users matching a given query, checking against multiple potential identifiers like emails, phone numbers, and names. The query allows partial matches, not requiring exact matches.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserscountrequest.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n| `query`                                                                                                                                                                                                                                                                                                                                             | *Optional[str]*                                                                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users that match the given query.<br/>For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.<br/>The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.                                                   |                                                                                                                                                                                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Organization Invitation in Python\nDESCRIPTION: Fetch details of a specific organization invitation by providing organization and invitation IDs using the Clerk SDK. Useful for getting detailed information about a single invitation.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationinvitationssdk/README.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organization_invitations.get(organization_id=\"org_123456789\", invitation_id=\"inv_987654321\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Defining Invitation Model Fields in Python\nDESCRIPTION: Represents the structure and attributes of an invitation object in the Clerk SDK, including required and optional fields with their types and descriptions\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/invitation.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Invitation:\n    object: InvitationObject\n    id: str\n    email_address: str\n    public_metadata: Dict[str, Any]\n    status: InvitationStatus\n    created_at: int\n    updated_at: int\n    revoked: Optional[bool] = None\n    url: Optional[str] = None\n    expires_at: OptionalNullable[int] = None\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for unsafe_metadata in Clerk SDK Python\nDESCRIPTION: An example of how to structure unsafe_metadata for a user, which can be updated from both Frontend and Backend APIs. This example shows storing a user's age, but note that since this can be modified from the frontend, it is not guaranteed to be safe.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n\"age\": 30\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting User's External Account in Clerk Python SDK\nDESCRIPTION: Example code demonstrating how to delete an external account for a user using the Clerk Python SDK. This operation requires both a user ID and an external account ID, and returns a DeletedObject response.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.delete_external_account(user_id=\"<id>\", external_account_id=\"<id>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Organization ID in Python\nDESCRIPTION: This parameter allows querying users based on their organization memberships. It accepts a list of organization IDs, with optional '+' or '-' prefixes to include or exclude organizations. Up to 100 organization IDs can be provided.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[\"org-id-123\"]\n```\n\n----------------------------------------\n\nTITLE: Bulk Create Invitations using Clerk API in Python\nDESCRIPTION: This snippet shows how to use the Clerk API to create multiple invitations.  It initializes the Clerk client and calls the `bulk_create` method with a list of email addresses and associated details. It requires a valid bearer token for authentication and the `clerk_backend_api` package to be installed.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/invitations/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.invitations.bulk_create(request=[\n        {\n            \"email_address\": \"Jeff_Schiller50@gmail.com\",\n            \"public_metadata\": {\n                \"key\": \"<value>\",\n            },\n            \"redirect_url\": \"https://dreary-advancement.net/\",\n            \"expires_in_days\": 123536,\n        },\n        {\n            \"email_address\": \"Pierce13@hotmail.com\",\n            \"public_metadata\": {\n                \"key\": \"<value>\",\n            },\n            \"redirect_url\": \"https://shrill-jet.net/\",\n            \"expires_in_days\": 665767,\n        },\n    ])\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Username - Python\nDESCRIPTION: This snippet provides a method to retrieve users by their usernames. It accepts a list of up to 100 usernames, returning users that match. If any usernames are not found, they are simply ignored without affecting the rest of the query.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n| `username`| List[*str| :heavy_minus_sign| Returns users with the specified usernames.<br/>Accepts up to 100 usernames.<br/>Any usernames not found are ignored.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | [<br/>\"user123\"<brn```\n\n----------------------------------------\n\nTITLE: Retrieving Session Details with Clerk Python SDK\nDESCRIPTION: Example of retrieving session details using the get method from the sessions API. The method requires a session ID and returns a Session object with the details of the specified session.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/sessions/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sessions.get(session_id=\"sess_1234567890abcdef\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Connection Fields in Python\nDESCRIPTION: Describes the comprehensive configuration schema for SAML connections, including mandatory and optional fields for authentication setup\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/samlconnectionsamlconnection.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SAMLConnection:\n    id: str\n    name: str\n    domain: str\n    active: bool\n    provider: str\n    sync_user_attributes: bool\n    created_at: int\n    updated_at: int\n    allow_subdomains: Optional[bool] = None\n    allow_idp_initiated: Optional[bool] = None\n    disable_additional_identifications: Optional[bool] = None\n```\n\n----------------------------------------\n\nTITLE: User Permission Configuration in Clerk Python SDK\nDESCRIPTION: Configuration options for controlling user permissions in Clerk. These boolean flags determine if users can delete their own accounts and create organizations through the Frontend API.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndelete_self_enabled: OptionalNullable[bool]  # If true, user can delete themselves\ncreate_organization_enabled: OptionalNullable[bool]  # If true, user can create organizations\n```\n\n----------------------------------------\n\nTITLE: Listing Waitlist Entries Using Clerk Python SDK\nDESCRIPTION: This example shows how to retrieve a list of waitlist entries using the Clerk Python SDK. The code demonstrates filtering by query and status, with various pagination and sorting options available as parameters.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/waitlistentriessdk/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.waitlist_entries.list(query=\"<value>\", status=clerk_backend_api.ListWaitlistEntriesQueryParamStatus.COMPLETED)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Deleting Backup Codes for User in Python\nDESCRIPTION: Disables all backup codes for a given user. Requires the user ID. Returns a DeleteBackupCodeResponseBody object or raises errors for invalid requests or server issues.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.delete_backup_codes(user_id=\"<id>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Creating TOTP Verification Request in Python\nDESCRIPTION: Defines a request object for verifying Time-based One-Time Password (TOTP) with a required user ID and optional request body\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/verifytotprequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass VerifyTOTPRequest:\n    user_id: str\n    request_body: Optional[models.VerifyTOTPRequestBody] = None\n```\n\n----------------------------------------\n\nTITLE: Filtering Users Created Before a Specific Date - Python\nDESCRIPTION: This function retrieves users who have been created before a specified timestamp, provided in milliseconds. The input is an optional integer representing the timestamp, allowing for precise filtering of users based on their creation date. Example value: 1730160000000 for all users created before October 29, 2024.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n| `created_at_before`| *Optional[int| :heavy_minus_sign| Returns users who have been created before the given date (with millisecond precision).<br/>Example: use 1730160000000 to retrieve users who have been created before||\n```\n\n----------------------------------------\n\nTITLE: Creating a New Session with Clerk Python SDK\nDESCRIPTION: Example of creating a new active session for a specific user ID. This operation is intended only for testing purposes and not available for production instances.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/sessions/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sessions.create(request={\n        \"user_id\": \"<id>\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Fields in Markdown\nDESCRIPTION: This markdown table defines the fields for the Domains module, including their types, requirements, descriptions, and examples.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/domains.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                      | Type                                       | Required                                   | Description                                | Example                                    |\n| ------------------------------------------ | ------------------------------------------ | ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |\n| `data`                                     | List[[models.Domain](../models/domain.md)] | :heavy_check_mark:                         | N/A                                        |                                            |\n| `total_count`                              | *int*                                      | :heavy_check_mark:                         | Total number of domains<br/>               | 1                                          |\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Connection Update Parameters\nDESCRIPTION: Defines the parameters available for updating a SAML Connection in the Clerk SDK, including optional and required fields for identity provider configuration and user synchronization\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/samlconnectionssdk/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{\n  \"saml_connection_id\": str,  # Required: ID of SAML Connection to update\n  \"name\": Optional[str],  # Optional: Name of SAML Connection\n  \"domain\": Optional[str],  # Optional: Domain for SAML Connection\n  \"idp_entity_id\": Optional[str],  # Optional: Identity Provider Entity ID\n  \"idp_sso_url\": Optional[str],  # Optional: SSO URL from Identity Provider\n  \"idp_certificate\": Optional[str],  # Optional: X.509 Certificate\n  \"idp_metadata_url\": Optional[str],  # Optional: Metadata URL with priority\n  \"idp_metadata\": Optional[str],  # Optional: XML Metadata content\n  \"organization_id\": Optional[str],  # Optional: Organization ID for users\n  \"attribute_mapping\": Optional[UpdateSAMLConnectionAttributeMapping],  # Optional: Attribute name mapping\n  \"active\": Optional[bool],  # Optional: Activate/Deactivate Connection\n  \"sync_user_attributes\": Optional[bool]  # Optional: Sync user attributes\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Redirect URL in Clerk Python SDK\nDESCRIPTION: Retrieves the details of a specific redirect URL using its ID. Returns a RedirectURL object containing the URL information.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/redirecturls/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.redirect_urls.get(id=\"redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Authentication JSON Response Structure Example\nDESCRIPTION: Example JSON structure showing external account configuration with provider details and identifiers.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n\"id\": \"ext_account_id_123\",\n\"provider\": \"Facebook\",\n\"user_id\": \"user_id_at_provider\"\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Verifying Client with Clerk SDK in Python\nDESCRIPTION: This snippet verifies a client using a provided token with Clerk SDK. Requires a request object containing the token. Optional retries configuration available.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/clients/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.clients.verify(request={\n        \"token\": \"jwt_token_example\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Restrictions Request Body\nDESCRIPTION: Configures email and domain restriction settings for a Clerk authentication instance, including allowlist, blocklist, and email domain management options\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateinstancerestrictionsrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateInstanceRestrictionsRequestBody:\n    allowlist: Optional[bool] = None\n    blocklist: Optional[bool] = None\n    block_email_subaddresses: Optional[bool] = None\n    block_disposable_email_domains: Optional[bool] = None\n    ignore_dots_for_gmail_addresses: Optional[bool] = None\n```\n\n----------------------------------------\n\nTITLE: Revoking a Session with Clerk Python SDK\nDESCRIPTION: Example of revoking a session, which sets its status to \"revoked\" (an unauthenticated state). The method requires a session ID and returns the updated session information.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/sessions/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.sessions.revoke(session_id=\"sess_1234567890abcdef\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Documenting ExternalAccount Fields in Markdown\nDESCRIPTION: A markdown table structure for documenting the fields of the ExternalAccount class. The table includes columns for field name, type, whether it's required, and a description.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/externalaccount.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field       | Type        | Required    | Description |\n| ----------- | ----------- | ----------- | ----------- |\n```\n\n----------------------------------------\n\nTITLE: Describing User Phone Number Attribute in Clerk SDK Python\nDESCRIPTION: This snippet describes the `phone_number` attribute for the Clerk SDK in Python. It details that the attribute is a list of strings representing phone numbers to be added to the user's profile. The first phone number in the list will be set as the primary phone number.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"`phone_number`| List[*str| :heavy_minus_sign| Phone numbers to add to the user.<br/>Must be unique across your instance.<br/>The first phone number will be set as the user's primary phone number||\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Passkey for User in Python\nDESCRIPTION: Deletes a specific passkey identification for a given user and notifies them via email. Requires the user ID and passkey identification ID. Returns a DeletedObject or raises errors for invalid requests or server issues.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.delete_passkey(user_id=\"<id>\", passkey_identification_id=\"<id>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Deleting a User's Profile Image with Clerk Python SDK\nDESCRIPTION: Removes a user's profile image. Only requires the user's ID to identify which user's image to delete.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.delete_profile_image(user_id=\"usr_test123\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: SAML Account Object Structure in Python SDK\nDESCRIPTION: Example structure of a SAML account object showing the format of account properties including ID, provider information, email, metadata, and verification status.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n\"id\": \"saml_account_id_123\",\n\"object\": \"saml_account\",\n\"provider\": \"SAML Provider\",\n\"active\": true,\n\"email_address\": \"user@example.com\",\n\"public_metadata\": {\n\"department\": \"IT\"\n},\n\"verification\": {\n\"status\": \"verified\",\n\"strategy\": \"saml\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: CreateAllowlistIdentifierRequestBody Fields Table\nDESCRIPTION: Markdown table defining the fields, types, requirements, and descriptions for the CreateAllowlistIdentifierRequestBody structure. Includes two main fields: identifier (required) for specifying the allowlist entry, and notify (optional) for controlling invitation notifications.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createallowlistidentifierrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type | Required | Description | Example |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `identifier` | *str* | :heavy_check_mark: | The identifier to be added in the allow-list.<br/>This can be an email address, a phone number or a web3 wallet. | user@example.com |\n| `notify` | *Optional[bool]* | :heavy_minus_sign: | This flag denotes whether the given identifier will receive an invitation to join the application.<br/>Note that this only works for email address and phone number identifiers. | true |\n```\n\n----------------------------------------\n\nTITLE: Deleting a Svix App with Clerk Python SDK\nDESCRIPTION: Deletes a Svix app and disassociates it from the current Clerk instance. This function requires authentication with a bearer token but does not return a response.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/webhooks/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    clerk.webhooks.delete_svix_app()\n\n    # Use the SDK ...\n\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Verification Ticket Schema\nDESCRIPTION: Describes the data structure for a verification ticket with fields for tracking SAML authentication verification status and metadata\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/verificationticket.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# VerificationTicket Fields\nstatus: TicketVerificationSAMLAccountStatus\nstrategy: TicketVerificationSAMLAccountStrategy\nattempts: Optional[int]\nexpire_at: Optional[int]\nverified_at_client: Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Describing User Web3 Wallet Attribute in Clerk SDK Python\nDESCRIPTION: This snippet describes the `web3_wallet` attribute for the Clerk SDK in Python. It explains that this attribute is a list of strings representing Web3 wallet addresses to add to the user's profile. The first wallet in the list will be designated as the user's primary wallet.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"`web3_wallet`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | List[*str| :heavy_minus_sign| Web3 wallets to add to the user.<br/>Must be unique across your instance.<br/>The first wallet will be set as the user's primary wallet||\"\n```\n\n----------------------------------------\n\nTITLE: Defining CreateOAuthApplicationRequestBody Class Fields in Python\nDESCRIPTION: This snippet defines the fields of the CreateOAuthApplicationRequestBody class. It includes the name, redirect_uris, callback_url (deprecated), scopes, and public fields, along with their types, requirements, and descriptions.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createoauthapplicationrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CreateOAuthApplicationRequestBody:\n    name: str  # Required, max length: 256\n    redirect_uris: List[str]  # Optional\n    callback_url: OptionalNullable[str]  # Deprecated\n    scopes: OptionalNullable[str]  # Optional\n    public: OptionalNullable[bool]  # Optional\n```\n\n----------------------------------------\n\nTITLE: Revoking Actor Token with Clerk SDK in Python\nDESCRIPTION: Method to revoke a pending actor token by providing its unique identifier. Requires a bearer token and the specific actor token ID to be revoked.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/actortokens/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.actor_tokens.revoke(actor_token_id=\"act_tok_abcdefghijk\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Querying Users by External ID - Python\nDESCRIPTION: This snippet allows users to fetch user details by providing a list of external IDs. Users can include or exclude specific IDs based on formatting ('+' for inclusion and '-' for exclusion), with up to 100 IDs accepted. Any IDs that do not correspond to a user are ignored.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n| `external_id`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | List[*str| :heavy_minus_sign| Returns users with the specified external ids.<br/>For each external id, the `+` and `-` can be<br/>prepended to the id, which denote whether the<br/>respective external id should be included or<br/>excluded from the result set.<br/>Accepts up to 100 external ids.<br/>Any external ids not found are ignored| [<br/>\"external-id-123\"<brn```\n\n----------------------------------------\n\nTITLE: Implementing Query Offset in Clerk SDK\nDESCRIPTION: Optional parameter to skip initial results when paginating. Must be a non-negative integer and typically used in combination with the limit parameter to navigate through large result sets.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listorganizationsrequest.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noffset: Optional[int] = 10\n```\n\n----------------------------------------\n\nTITLE: Managing Resources with Clerk SDK Context Manager in Python\nDESCRIPTION: Illustrates how to manage resources effectively using the context manager protocol with Clerk SDK instances in Python. This ensures HTTP connections are closed and resources are released. It uses `with` statements for both synchronous and asynchronous contexts.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\ndef main():\n\n    with Clerk() as clerk:\n        # Rest of application here...\n\n\n# Or when using async:\nasync def amain():\n\n    async with Clerk() as clerk:\n        # Rest of application here...\n```\n\n----------------------------------------\n\nTITLE: Describing User Property: `email_address`\nDESCRIPTION: Describes the `email_address` property for a user in the Clerk SDK. It is a list of strings, where each string represents an email address to add to the user. Email addresses must be unique, and the first one will be set as the primary email address.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n| `email_address` | List[*str*] | :heavy_minus_sign: | Email addresses to add to the user.<br/>Must be unique across your instance.<br/>The first email address will be set as the user's primary email address. | |\n```\n\n----------------------------------------\n\nTITLE: Filtering Users Created After a Specific Date - Python\nDESCRIPTION: This function retrieves users who have been created after a specified timestamp, given in milliseconds. The input is an optional integer that allows for filtering based on users' creation dates. Example value: 1730160000000 for users created after October 29, 2024.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n| `created_at_after`| *Optional[int| :heavy_minus_sign| Returns users who have been created after the given date (with millisecond precision).<br/>Example: use 1730160000000 to retrieve users who have been created after||\n```\n\n----------------------------------------\n\nTITLE: Deleting Web3 Wallet for User in Python\nDESCRIPTION: Deletes a specific web3 wallet identification for a given user. Requires the user ID and web3 wallet identification ID. Returns a response object or raises errors for invalid requests or server issues.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.users.delete_web3_wallet(user_id=\"<id>\", web3_wallet_identification_id=\"<id>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: GetOrganizationRequest Data Model Schema\nDESCRIPTION: Defines the fields and data types for making organization retrieval requests. Includes required organization_id field and optional flags for including member counts and missing members with elevated permissions.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getorganizationrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GetOrganizationRequest:\n    organization_id: str             # Required: The ID or slug of the organization\n    include_members_count: Optional[bool]  # Optional: Include organization's members count\n    include_missing_member_with_elevated_permissions: Optional[bool]  # Optional: Include missing members with elevated permissions\n```\n\n----------------------------------------\n\nTITLE: Defining Unsafe Metadata Structure in Python\nDESCRIPTION: This snippet defines a structure for `unsafe_metadata`, which allows for flexible updates to user metadata that can be modified from both frontend and backend APIs. The implementation uses a dictionary type to accommodate varying metadata formats, with an accompanying note emphasizing the lack of safety guarantees due to frontend modifications.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateuserrequestbody.md#2025-04-16_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"unsafe_metadata = Dict[str, Any]  # Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.\\n# Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.\\n# Example: {\\n#     'age': 30\\n# }\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Invitation Sorting\nDESCRIPTION: Defines the `order_by` parameter for sorting organization invitations by creation date or email address. Supports ascending and descending order using `+` or `-` prefixes. Defaults to descending order by creation date if not specified.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listinstanceorganizationinvitationsrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\norder_by='-created_at'\n```\n\nLANGUAGE: python\nCODE:\n```\norder_by='+email_address'\n```\n\n----------------------------------------\n\nTITLE: Counting Users by User IDs in Python\nDESCRIPTION: Counts users with the user ids specified, accepting up to 100 user ids and ignoring those that are not found.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserscountrequest.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n| `user_id`                                                                                                                                                                                                                                                                                                                                           | List[*str*]                                                                                                                                                                                                                                                                                                                                         | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with the user ids specified.<br/>Accepts up to 100 user ids.<br/>Any user ids not found are ignored.                                                                                                                                                                                                                                   | [<br/>\"user-id-123\"<br/>]                                                                                                                                                                                                                                                                                                                           |\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Access Token Request Parameters\nDESCRIPTION: Specifies the parameters required to retrieve an OAuth access token, including user identification, provider selection, and optional pagination controls\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getoauthaccesstokenrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GetOAuthAccessTokenRequest:\n    user_id: str  # Required user identifier\n    provider: str  # Required OAuth provider identifier\n    paginated: Optional[bool] = None  # Optional pagination flag\n    limit: Optional[int] = None  # Optional result limit\n    offset: Optional[int] = None  # Optional result offset\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Username in Clerk SDK\nDESCRIPTION: Filters users by performing a case-insensitive partial match on usernames. Allows searching for users with usernames containing a specific substring.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserscountrequest.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nusername_query: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Setting Result Limit in Clerk SDK for Python\nDESCRIPTION: This snippet outlines the `limit` parameter, which is used to apply a cap on the number of returned results during an organization invitation query. It is designed to facilitate pagination and can be paired with an `offset` for broader result management. The default value for limit is set to 20.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listinstanceorganizationinvitationsrequest.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n| `limit`| *Optional[int]*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                                                                                                                                                                                                                                                                                                                                                                                                               ||\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteUserRequest Fields in Markdown\nDESCRIPTION: Defines the structure of the DeleteUserRequest class using a Markdown table. It specifies the 'user_id' field as a required string parameter for deleting a user, including its type, requirement status, description, and an example value.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteuserrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                        | Type                         | Required                     | Description                  | Example                      |\n| ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- |\n| `user_id`                    | *str*                        | :heavy_check_mark:           | The ID of the user to delete | usr_1                        |\n```\n\n----------------------------------------\n\nTITLE: Updating Email Address with Clerk SDK Python\nDESCRIPTION: This snippet describes how to update an email address using the Clerk SDK in Python. It requires email_address_id and optional boolean values for verifying and setting the primary email status.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailaddresses/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.email_addresses.update(email_address_id=\"email_address_id_example\", verified=False, primary=True)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: AddDomainRequestBody Python Class Fields\nDESCRIPTION: Schema definition for domain configuration with three main fields: name (required domain name), is_satellite (required boolean flag), and proxy_url (optional proxy URL for production instances).\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/adddomainrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AddDomainRequestBody:\n    name: str            # Required: The domain name (e.g., 'example.com')\n    is_satellite: bool    # Required: Must be true\n    proxy_url: Optional[str] # Optional: Proxy URL for production instances\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Phone Number in Clerk Python SDK\nDESCRIPTION: Parameter documentation for phone number filtering. Allows case-insensitive partial matching of phone numbers, where phone_number_query=555 would match +1555xxxxxxx.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nphone_number_query: Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Setting Password Digest\nDESCRIPTION: This snippet describes the usage of the `password_digest` property, which allows the use of pre-existing password digests for user authentication. The digests must be created with one of the supported hashing algorithms specified by the `password_hasher` property.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n| `password_digest`| *OptionalNullable[str| :heavy_minus_sign| In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.<br/>The digests should be generated with one of the supported algorithms.<br/>The hashing algorithm can be specified using the `password_hasher` property.\n```\n\n----------------------------------------\n\nTITLE: SAML Connection Request Body Schema Example\nDESCRIPTION: Example fields and types for creating a SAML connection, including required fields for name, domain, provider, and optional fields for IdP configuration. The schema supports both direct IdP property configuration and metadata-based setup.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createsamlconnectionrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"name\": \"My SAML Connection\",            # str (required)\n    \"domain\": \"example.org\",              # str (required)\n    \"provider\": \"saml_custom\",            # Provider enum (required)\n    \"idp_entity_id\": \"http://idp.example.org/\",  # Optional[str]\n    \"idp_sso_url\": \"http://idp.example.org/sso\",  # Optional[str]\n    \"idp_certificate\": \"MIIDdzCCAl+gAwIBAgIJAKcyBaiiz+DT...\",  # Optional[str]\n    \"idp_metadata_url\": \"http://idp.example.org/metadata.xml\",  # Optional[str]\n    \"idp_metadata\": \"<EntityDescriptor ...\",  # Optional[str]\n    \"organization_id\": None,  # Optional[str]\n    \"attribute_mapping\": None  # Optional[AttributeMapping]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Metadata Property in Python\nDESCRIPTION: This snippet defines the 'unsafe_metadata' property for a user object. It is a dictionary that can store any type of data and can be updated from both Frontend and Backend APIs. The data is not guaranteed to be safe since it can be modified from the frontend.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n{\n\"preferences\": {\n\"theme\": \"dark\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Email Address in Clerk SDK for Python\nDESCRIPTION: This snippet describes the `query` parameter that allows users to filter organization invitations using an email address. It enables targeted searching and is optional in nature, enhancing usability by providing more specific result filtering options.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listinstanceorganizationinvitationsrequest.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n| `query`| *Optional[str| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Filter organization invitations based on their `email_address`                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ||\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteUserProfileImageRequest Fields in Markdown\nDESCRIPTION: This snippet defines the fields for the DeleteUserProfileImageRequest class using a markdown table. It specifies the 'user_id' field, which is a required string parameter used to identify the user whose profile image should be deleted.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteuserprofileimagerequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                              | Type                                               | Required                                           | Description                                        | Example                                            |\n| -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- |\n| `user_id`                                          | *str*                                              | :heavy_check_mark:                                 | The ID of the user to delete the profile image for | usr_test123                                        |\n```\n\n----------------------------------------\n\nTITLE: Deleting Email Address with Clerk SDK Python\nDESCRIPTION: This snippet illustrates how to delete an email address using the Clerk SDK in Python. It requires the email_address_id of the email address to be deleted and confirms deletion with a response object.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailaddresses/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.email_addresses.delete(email_address_id=\"email_address_id_example\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Public Metadata in Clerk SDK for Python\nDESCRIPTION: This snippet shows the structure of public_metadata in the Clerk SDK. It is a dictionary with string keys and any value type, visible to both Frontend and Backend APIs.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n{\n\"role\": \"user\"\n}\n```\n\n----------------------------------------\n\nTITLE: CNameTarget Model Fields Definition\nDESCRIPTION: Specifies the structure of CNAME target configuration used in domain management. Contains three required fields: host (the CNAME host), value (the CNAME value), and required (boolean flag indicating if the CNAME must be set for domain deployment).\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/cnametarget.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CNameTarget:\n    host: str       # Example: cname.example.com\n    value: str      # Example: value.example.com\n    required: bool   # Indicates if CNAME target is required for domain deployment\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Last Active Date - Python\nDESCRIPTION: This snippet provides two parameters, `last_active_at_before` and `last_active_at_after`, to filter users based on their last session activity. The timestamps must be specified in milliseconds for accurate filtering.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listorganizationmembershipsrequest.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"last_active_at_before\"                                                                                                                                                                                                                                                                    | *Optional[int]*                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users whose last session activity was before the given date (with millisecond precision).<br/>Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.\n```\n\nLANGUAGE: python\nCODE:\n```\n\"last_active_at_after\"                                                                                                                                                                                                                                                                     | *Optional[int]*                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users whose last session activity was after the given date (with millisecond precision).<br/>Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.\n```\n\n----------------------------------------\n\nTITLE: Documenting ListOAuthApplicationsRequest fields\nDESCRIPTION: This section describes the fields available in the ListOAuthApplicationsRequest. It includes parameters for pagination such as `limit` and `offset` for controlling the number of results returned and skipping results respectively. These parameters are commonly used together for implementing pagination in API requests.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listoauthapplicationsrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |\n| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| `limit`                                                                                                                                   | *Optional[int]*                                                                                                                           | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |\n| `offset`                                                                                                                                  | *Optional[int]*                                                                                                                           | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Defining Email Address Update Request Fields\nDESCRIPTION: Describes the required and optional fields for updating an email address, including the email address ID and optional request body\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateemailaddressrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type | Required | Description | Example |\n| -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n| `email_address_id` | *str* | :heavy_check_mark: | The ID of the email address to update | email_address_id_example |\n| `request_body` | [Optional[models.UpdateEmailAddressRequestBody]](../models/updateemailaddressrequestbody.md) | :heavy_minus_sign: | N/A | |\n```\n\n----------------------------------------\n\nTITLE: Retrieving a JWT Template with Clerk Python SDK\nDESCRIPTION: Example showing how to retrieve details of a specific JWT template by its ID using the Clerk Python SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/jwttemplates/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.jwt_templates.get(template_id=\"template_123\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Python Query Parameter Types\nDESCRIPTION: Type definitions for query parameters used in user filtering. Both username_query and name_query are defined as Optional[str] types, allowing for case-insensitive partial matching of user records.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nusername_query: Optional[str]\nname_query: Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Setting Public Metadata with Clerk SDK in Python\nDESCRIPTION: Example of setting public metadata in the Clerk SDK, which is visible to both Frontend and Backend APIs. In this example, it stores a user's theme preference.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n{\n\"theme\": \"dark\"\n}\n```\n\n----------------------------------------\n\nTITLE: Session Token Template Request Fields Table in Markdown\nDESCRIPTION: Markdown table documenting the required fields for creating a session token from a template, including field names, types, requirements, descriptions and examples.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createsessiontokenfromtemplaterequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type | Required | Description | Example |\n| -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| `session_id` | *str* | :heavy_check_mark: | The ID of the session | ses_123abcd4567 |\n| `template_name` | *str* | :heavy_check_mark: | The name of the JWT Template defined in your instance (e.g. `custom_hasura`). | custom_hasura |\n| `request_body` | [Optional[models.CreateSessionTokenFromTemplateRequestBody]](../models/createsessiontokenfromtemplaterequestbody.md) | :heavy_minus_sign: | N/A | |\n```\n\n----------------------------------------\n\nTITLE: Applying Pagination Limit and Offset - Python\nDESCRIPTION: This snippet defines the parameters `limit` and `offset` to control the pagination of the user query results. The `limit` specifies the maximum number of results to return, while `offset` allows skipping over a defined number of results.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listorganizationmembershipsrequest.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"limit\"                                                                                                                                                                                                                                                                                    | *Optional[int]*                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.\n```\n\nLANGUAGE: python\nCODE:\n```\n\"offset\"                                                                                                                                                                                                                                                                                   | *Optional[int]*                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`.\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Email Address in Clerk Python SDK\nDESCRIPTION: Parameter documentation for email address filtering. Allows case-insensitive partial matching of email addresses, where email_address_query=ello would match HELLO@example.com.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nemail_address_query: Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Clerk Python SDK Contact ID Parameters\nDESCRIPTION: Parameters for setting primary contact identifiers in Clerk. Includes primary_phone_number_id for setting verified phone numbers and primary_web3_wallet_id for setting verified web3 wallets as primary contact methods.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprimary_phone_number_id: OptionalNullable[str]  # Example: phn_67890\nprimary_web3_wallet_id: OptionalNullable[str]  # Example: wlt_123\n```\n\n----------------------------------------\n\nTITLE: Defining `limit` Parameter for Pagination in Python\nDESCRIPTION: This snippet defines an optional integer parameter 'limit' used to specify the maximum number of results to return in paginated API requests. It is meant to work in conjunction with the 'offset' parameter for effective pagination.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n| `limit`| *Optional[int| :heavy_minus_sign| Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`||\n```\n\n----------------------------------------\n\nTITLE: Counting Users by Usernames in Python\nDESCRIPTION: Counts users with the specified usernames. It accepts up to 100 usernames, ignoring any that are not found.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserscountrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n| `username`                                                                                                                                                                                                                                                                                                                                          | List[*str*]                                                                                                                                                                                                                                                                                                                                         | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with the specified usernames.<br/>Accepts up to 100 usernames.<br/>Any usernames not found are ignored.                                                                                                                                                                                                                                | [<br/>\"username123\"<br/>]                                                                                                                                                                                                                                                                                                                           |\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for private_metadata in Clerk SDK Python\nDESCRIPTION: An example of how to structure private_metadata for a user, which is only visible to your Backend API. This example shows setting a VIP status flag for a user.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\"vip\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Organization Memberships Query Parameters\nDESCRIPTION: Structure defining parameters for retrieving a user's organization memberships with optional pagination support\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/usersgetorganizationmembershipsrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UsersGetOrganizationMembershipsRequest:\n    user_id: str\n    limit: Optional[int] = None\n    offset: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Defining CreateSessionTokenFromTemplateObject in Python\nDESCRIPTION: This code snippet defines a class or enum named CreateSessionTokenFromTemplateObject with a single constant value. It sets TOKEN to the string value 'token', which likely represents a placeholder or default value for session token creation.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createsessiontokenfromtemplateobject.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# CreateSessionTokenFromTemplateObject\n\n\n## Values\n\n| Name    | Value   |\n| ------- | ------- |\n| `TOKEN` | token   |\n```\n\n----------------------------------------\n\nTITLE: User Name Parameters Definition - Python\nDESCRIPTION: Defines optional string parameters for user first and last names. Both fields can accept null values and are used when creating or updating user profiles.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfirst_name: OptionalNullable[str] # The first name to assign to the user\nlast_name: OptionalNullable[str] # The last name to assign to the user\n```\n\n----------------------------------------\n\nTITLE: Defining Discovery URL in Python\nDESCRIPTION: This snippet initializes the discovery URL, which is typically used for retrieving dynamic configuration for OAuth 2.0 services. It is a string type variable.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/oauthapplicationwithsecret.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"discovery_url = ''\"\n```\n\n----------------------------------------\n\nTITLE: Defining Web3 Signature Constants\nDESCRIPTION: This snippet defines several constants that represent different types of Web3 wallet signatures. These constants can be used in the authentication or verification processes for different wallets in Web3 applications. Dependencies include a basic understanding of Web3 authentication methods.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/web3signatureverificationstrategy.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                             | Value                            |\n| -------------------------------- | -------------------------------- |\n| `WEB3_METAMASK_SIGNATURE`        | web3_metamask_signature          |\n| `WEB3_COINBASE_WALLET_SIGNATURE` | web3_coinbase_wallet_signature   |\n| `WEB3_OKX_WALLET_SIGNATURE`      | web3_okx_wallet_signature        |\n```\n\n----------------------------------------\n\nTITLE: Counting Users by Web3 Wallet Addresses in Python\nDESCRIPTION: Counts users with the specified web3 wallet addresses. The function accepts up to 100 addresses and ignores any that are not found.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserscountrequest.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n| `web3_wallet`                                                                                                                                                                                                                                                                                                                                       | List[*str*]                                                                                                                                                                                                                                                                                                                                         | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Counts users with the specified web3 wallet addresses.<br/>Accepts up to 100 web3 wallet addresses.<br/>Any web3 wallet addressed not found are ignored.                                                                                                                                                                                            | [<br/>\"0x123456789abcdef\"<br/>]                                                                                                                                                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Deleting a SAML Connection with Clerk Python SDK\nDESCRIPTION: Code example demonstrating how to delete a SAML Connection using the Clerk Python SDK. The function requires a SAML connection ID and returns a DeletedObject response upon successful deletion.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/samlconnectionssdk/README.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.saml_connections.delete(saml_connection_id=\"saml_conn_123_delete\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Configuring Result Limit in Clerk SDK\nDESCRIPTION: Optional parameter to control the maximum number of results returned in a query. Used for implementing pagination and managing result set size.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listorganizationsrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlimit: Optional[int] = 20\n```\n\n----------------------------------------\n\nTITLE: Filtering by Status in Clerk SDK for Python\nDESCRIPTION: This snippet defines the `status` parameter used to filter organization invitations by their current status. It references a model that details the possible status values. This functionality is part of the querying capabilities of the SDK, enabling more targeted results based on invitation status.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listinstanceorganizationinvitationsrequest.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n| `status`| [Optional[models.ListInstanceOrganizationInvitationsQueryParamStatus]](../models/listinstanceorganizationinvitationsqueryparamstatus.md)                                                                                                                                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Filter organization invitations based on their status                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: File Upload Fields Schema Definition - Markdown\nDESCRIPTION: Schema documentation detailing the required fields for file uploads, including file_name (string), content (bytes/IO/BufferedReader), and optional content_type (string).\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/file.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                        | Type                                         | Required                                     | Description                                  |\n| -------------------------------------------- | -------------------------------------------- | -------------------------------------------- | -------------------------------------------- |\n| `file_name`                                  | *str*                                        | :heavy_check_mark:                           | N/A                                          |\n| `content`                                    | *Union[bytes, IO[bytes], io.BufferedReader]* | :heavy_check_mark:                           | N/A                                          |\n| `content_type`                               | *Optional[str]*                              | :heavy_minus_sign:                           | N/A                                          |\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Name with Case Insensitivity - Python\nDESCRIPTION: This snippet specifies a parameter `name_query` which allows the retrieval of users with names that match a given query in a case-insensitive manner. This enables flexible user searching based on partial matches of names.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listorganizationmembershipsrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"name_query\"                                                                                                                                                                                                                                                                               | *Optional[str]*                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users with names that match the given query, via case-insensitive partial match.\n```\n\n----------------------------------------\n\nTITLE: Defining User Info URL in Python\nDESCRIPTION: This snippet defines the URL that provides user information once authenticated. It is also a string type variable vital for user profile retrieval.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/oauthapplicationwithsecret.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"user_info_url = 'https://example.com/userinfo'\"\n```\n\n----------------------------------------\n\nTITLE: Describing User Property: `last_name`\nDESCRIPTION: Describes the `last_name` property for a user in the Clerk SDK. It is an optional, nullable string that represents the user's last name. The provided example value is \"Doe\".\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n| `last_name` | *OptionalNullable[str]* | :heavy_minus_sign: | The last name to assign to the user | Doe |\n```\n\n----------------------------------------\n\nTITLE: Organization Configuration Parameters in Python\nDESCRIPTION: Configuration parameters for controlling organization creation in Clerk. Includes boolean flag to enable/disable organization creation and numeric limit for maximum organizations a user can create.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncreate_organization_enabled: OptionalNullable[bool]  # If enabled, user can create organizations via FAPI\ncreate_organizations_limit: OptionalNullable[int]   # The maximum number of organizations the user can create. 0 means unlimited\n```\n\n----------------------------------------\n\nTITLE: Defining CreateBulkInvitationsTemplateSlug Enum in Python\nDESCRIPTION: This code snippet defines an enumeration called CreateBulkInvitationsTemplateSlug with two values: INVITATION and WAITLIST_INVITATION. These represent the slugs for different email templates used in bulk invitation processes.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createbulkinvitationstemplateslug.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# CreateBulkInvitationsTemplateSlug\n\nThe slug of the email template to use for the invitation email.\n\n\n## Values\n\n| Name                  | Value                 |\n| --------------------- | --------------------- |\n| `INVITATION`          | invitation            |\n| `WAITLIST_INVITATION` | waitlist_invitation   |\n```\n\n----------------------------------------\n\nTITLE: Defining CreateSessionTokenRequestBody Class in Python\nDESCRIPTION: This code snippet defines the CreateSessionTokenRequestBody class with a single field 'expires_in_seconds'. This field is optional and nullable, of type float, and is used to override the default session token lifetime.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createsessiontokenrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# CreateSessionTokenRequestBody\n\n\n## Fields\n\n| Field                                                              | Type                                                               | Required                                                           | Description                                                        |\n| ------------------------------------------------------------------ | ------------------------------------------------------------------ | ------------------------------------------------------------------ | ------------------------------------------------------------------ |\n| `expires_in_seconds`                                               | *OptionalNullable[float]*                                          | :heavy_minus_sign:                                                 | Use this parameter to override the default session token lifetime. |\n```\n\n----------------------------------------\n\nTITLE: Organization Invitations Query Parameters Table\nDESCRIPTION: Markdown table documenting the available query parameters for organization invitations including status filtering, email address filtering, and pagination limits.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationinvitationssdk/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `status` | [Optional[models.ListInstanceOrganizationInvitationsQueryParamStatus]](../../models/listinstanceorganizationinvitationsqueryparamstatus.md) | :heavy_minus_sign: | Filter organization invitations based on their status |\n| `query` | *Optional[str]* | :heavy_minus_sign: | Filter organization invitations based on their `email_address` |\n| `limit` | *Optional[int]* | :heavy_minus_sign: | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`. | 20 |\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Name in Clerk SDK\nDESCRIPTION: Filters users by performing a case-insensitive partial match on user names. Enables searching for users with names containing a specific substring.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserscountrequest.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nname_query: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Listing Invitations with Clerk Python SDK\nDESCRIPTION: Returns all non-revoked invitations for your application, sorted by creation date. The example shows how to filter invitations by status, query text, ordering, and pagination options.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/invitations/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.invitations.list(status=clerk_backend_api.ListInvitationsQueryParamStatus.PENDING, query=\"<value>\", order_by=\"pending\", paginated=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Ban User Request Fields Schema\nDESCRIPTION: Defines the required field for banning a user. The user_id field is a required string parameter that uniquely identifies the user to be banned in the Clerk system.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/banuserrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                     | Type                      | Required                  | Description               | Example                   |\n| ------------------------- | ------------------------- | ------------------------- | ------------------------- | ------------------------- |\n| `user_id`                 | *str*                     | :heavy_check_mark:        | The ID of the user to ban | user_12345                |\n```\n\n----------------------------------------\n\nTITLE: Initializing Python HTTP Client with Custom Headers\nDESCRIPTION: This snippet demonstrates how to initialize the Clerk SDK with a custom HTTP client to include predefined headers on every request. Requires `httpx` and `clerk_backend_api` packages. The HTTP client `httpx.Client` is initialized with custom headers before being used in the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\nimport httpx\n\nhttp_client = httpx.Client(headers={\"x-custom-header\": \"someValue\"})\ns = Clerk(client=http_client)\n```\n\n----------------------------------------\n\nTITLE: Domain Enrollment Mode Constants - Markdown Table\nDESCRIPTION: Markdown table defining the available domain enrollment modes and their corresponding values in the Clerk SDK. Includes manual invitation, automatic invitation, and automatic suggestion modes.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/domainsenrollmentmodes.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                   | Value                  |\n| ---------------------- | ---------------------- |\n| `MANUAL_INVITATION`    | manual_invitation      |\n| `AUTOMATIC_INVITATION` | automatic_invitation   |\n| `AUTOMATIC_SUGGESTION` | automatic_suggestion   |\n```\n\n----------------------------------------\n\nTITLE: Defining CreateSessionTokenResponseBody Fields in Markdown\nDESCRIPTION: This code snippet defines the fields of the CreateSessionTokenResponseBody class using a markdown table. It specifies the field names, types, requirements, and descriptions.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createsessiontokenresponsebody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                              | Type                                                                               | Required                                                                           | Description                                                                        |\n| ---------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |\n| `object`                                                                           | [Optional[models.CreateSessionTokenObject]](../models/createsessiontokenobject.md) | :heavy_minus_sign:                                                                 | N/A                                                                                |\n| `jwt`                                                                              | *Optional[str]*                                                                    | :heavy_minus_sign:                                                                 | N/A                                                                                \n```\n\n----------------------------------------\n\nTITLE: GetPublicInterstitialRequest Fields Definition\nDESCRIPTION: Defines the fields used in the GetPublicInterstitialRequest class. Includes deprecated frontend_api_query_parameter and several optional string fields for API keys, proxy URL, domain configuration, and sign-in URL settings. All fields are optional with specific type annotations.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getpublicinterstitialrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrontend_api_query_parameter: Optional[str]  # Deprecated\nfrontend_api_query_parameter1: Optional[str]\npublishable_key: Optional[str]\nproxy_url: Optional[str]\ndomain: Optional[str]\nsign_in_url: Optional[str]\nuse_domain_for_script: Optional[bool]\n```\n\n----------------------------------------\n\nTITLE: DeleteOrganizationDomainRequest Fields Documentation\nDESCRIPTION: Documentation table defining the required fields for deleting an organization domain. Contains organization_id and domain_id fields, both of type string and marked as required.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteorganizationdomainrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                            | Type                                             | Required                                         | Description                                      |\n| ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ |\n| `organization_id`                                | *str*                                            | :heavy_check_mark:                               | The ID of the organization the domain belongs to |\n| `domain_id`                                      | *str*                                            | :heavy_check_mark:                               | The ID of the domain                             |\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Phone Number in Clerk SDK\nDESCRIPTION: Filters users by performing a case-insensitive partial match on phone numbers. Enables searching for users with phone numbers containing a specific substring.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserscountrequest.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nphone_number_query: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Organization Invitation Request Parameters Table\nDESCRIPTION: A markdown table documenting the required parameters for retrieving an organization invitation. Specifies two mandatory fields: organization_id and invitation_id, both as string types.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getorganizationinvitationrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                           | Type                            | Required                        | Description                     | Example                         |\n| ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- |\n| `organization_id`               | *str*                           | :heavy_check_mark:              | The organization ID.            | org_123456789                   |\n| `invitation_id`                 | *str*                           | :heavy_check_mark:              | The organization invitation ID. | inv_987654321                   |\n```\n\n----------------------------------------\n\nTITLE: Defining Password Hasher\nDESCRIPTION: This snippet explains the `password_hasher` property, which identifies the hashing algorithm used for generating a password digest. It lists various supported algorithms and mentions that each has specific input format requirements.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n| `password_hasher`| *Optional[str| :heavy_minus_sign| The hashing algorithm that was used to generate the password digest.<br/><br/>The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),<br/>[`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),<br/>[`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),<br/>and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.<br/><br/>Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information.\n```\n\n----------------------------------------\n\nTITLE: Setting Optional Parameter to Skip Password Checks in Clerk SDK Python\nDESCRIPTION: This snippet defines the optional parameter `skip_password_checks`, which can be set to `true` to bypass any password policy checks when updating a user's password. It is applicable only when a password is being provided.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateuserrequestbody.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n| `skip_password_checks`| *OptionalNullable[bool| :heavy_minus_sign| Set it to `true` if you're updating the user's password and want to skip any password policy settings check. This parameter can only be used when providing a `password`| false|\n```\n\n----------------------------------------\n\nTITLE: Defining CreateSignInTokenRequestBody Fields in Markdown\nDESCRIPTION: This markdown table defines the fields for the CreateSignInTokenRequestBody class. It includes the field names, types, requirements, descriptions, and examples for 'user_id' and 'expires_in_seconds'.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createsignintokenrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                                                 | Type                                                                                                                  | Required                                                                                                              | Description                                                                                                           | Example                                                                                                               |\n| --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- |\n| `user_id`                                                                                                             | *str*                                                                                                                 | :heavy_check_mark:                                                                                                    | The ID of the user that can use the newly created sign in token                                                       | user_12345                                                                                                            |\n| `expires_in_seconds`                                                                                                  | *OptionalNullable[int]*                                                                                               | :heavy_minus_sign:                                                                                                    | Optional parameter to specify the life duration of the sign in token in seconds.<br/>By default, the duration is 30 days. | 2592000                                                                                                               |\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Error Model Fields\nDESCRIPTION: Structure for capturing detailed SAML authentication error information with various optional and required fields\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/samlerrorclerkerror.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SAMLErrorClerkError:\n    message: str\n    long_message: str\n    code: str\n    meta: Optional[models.ClerkErrorErrorSAMLAccountMeta] = None\n    clerk_trace_id: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: URL-based Session Syncing Configuration Parameter\nDESCRIPTION: Configuration parameter that determines whether to enable URL-based session syncing in development mode when third-party cookies are not available. The parameter accepts an optional boolean value and defaults to true.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateinstancerequestbody.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nurl_based_session_syncing: Optional[bool] = True\n```\n\n----------------------------------------\n\nTITLE: Listing Email and SMS Templates in Python\nDESCRIPTION: This snippet demonstrates how to list all email or SMS templates using the Clerk SDK in Python. The method is deprecated and returns templates sorted by position. It requires authentication via a bearer token and specifies whether or not to paginate the results.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailsmstemplates/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.email_sms_templates.list(template_type=clerk_backend_api.TemplateType.EMAIL, paginated=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Verification Model\nDESCRIPTION: Type definition for OAuth-based verification model in Clerk SDK\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/verification.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.FromOAuth = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Defining CreateOrganizationInvitationBulkRequest Fields in Markdown\nDESCRIPTION: This snippet defines the fields of the CreateOrganizationInvitationBulkRequest class using a markdown table. It specifies the field names, types, requirements, descriptions, and examples for 'organization_id' and 'request_body'.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createorganizationinvitationbulkrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                                                | Type                                                                                                                 | Required                                                                                                             | Description                                                                                                          | Example                                                                                                              |\n| -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| `organization_id`                                                                                                    | *str*                                                                                                                | :heavy_check_mark:                                                                                                   | The organization ID.                                                                                                 | org_12345                                                                                                            |\n| `request_body`                                                                                                       | List[[models.CreateOrganizationInvitationBulkRequestBody](../models/createorganizationinvitationbulkrequestbody.md)] | :heavy_check_mark:                                                                                                   | N/A                                                                                                                  |                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Defining CreateWaitlistEntryRequestBody Fields in Markdown\nDESCRIPTION: This markdown table defines the fields for the CreateWaitlistEntryRequestBody class. It specifies two fields: 'email_address' (required string) and 'notify' (optional boolean). The table includes field names, types, requirements, and descriptions.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createwaitlistentryrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                                                   | Type                                                                                                                    | Required                                                                                                                | Description                                                                                                             |\n| ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| `email_address`                                                                                                         | *str*                                                                                                                   | :heavy_check_mark:                                                                                                      | The email address to add to the waitlist                                                                                |\n| `notify`                                                                                                                | *OptionalNullable[bool]*                                                                                                | :heavy_minus_sign:                                                                                                      | Optional flag which denotes whether a confirmation email should be sent to the given email address.<br/>Defaults to `true`. |\n```\n\n----------------------------------------\n\nTITLE: Email Address Request Body Fields Table\nDESCRIPTION: Markdown table defining the required and optional fields for creating an email address. Includes field types, requirements, descriptions and examples for user_id, email_address, verified, and primary fields.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createemailaddressrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `user_id` | *str* | :heavy_check_mark: | The ID representing the user | user_12345 |\n| `email_address` | *str* | :heavy_check_mark: | The new email address. Must adhere to the RFC 5322 specification for email address format. | example@clerk.com |\n| `verified` | *OptionalNullable[bool]* | :heavy_minus_sign: | When created, the email address will be marked as verified. | false |\n| `primary` | *OptionalNullable[bool]* | :heavy_minus_sign: | Create this email address as the primary email address for the user.<br/>Default: false, unless it is the first email address. | true |\n```\n\n----------------------------------------\n\nTITLE: DeleteTOTPRequest Fields Definition in Markdown\nDESCRIPTION: Defines the required fields for deleting TOTP entries. The only required field is user_id which must be provided as a string to identify the user whose TOTP entries should be deleted.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deletetotprequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                            | Type                                             | Required                                         | Description                                      |\n| ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ | ------------------------------------------------ |\n| `user_id`                                        | *str*                                            | :heavy_check_mark:                               | The ID of the user whose TOTPs are to be deleted |\n```\n\n----------------------------------------\n\nTITLE: Defining Legal Acceptance Parameters in Python\nDESCRIPTION: This snippet defines two optional parameters for handling legal acceptance in user management. 'legal_accepted_at' is a timestamp for when a user accepted legal terms, while 'skip_legal_checks' allows bypassing legal checks during user creation or migration.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlegal_accepted_at: OptionalNullable[str] = None  # RFC3339 format timestamp\nskip_legal_checks: OptionalNullable[bool] = None  # Set to True to skip legal checks\n```\n\n----------------------------------------\n\nTITLE: Defining OTP Verification Model\nDESCRIPTION: Type definition for One-Time Password (OTP) verification model in Clerk SDK\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/verification.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.Otp = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Making Synchronous API Calls with Clerk SDK for Python\nDESCRIPTION: This snippet demonstrates how to use the Clerk SDK to make synchronous API calls. It specifically shows how to use the 'get_public_interstitial' method from the miscellaneous module.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/USAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Synchronous Example\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk() as clerk:\n\n    clerk.miscellaneous.get_public_interstitial(frontend_api_query_parameter=\"frontend-api_1a2b3c4d\", frontend_api_query_parameter1=\"pub_1a2b3c4d\", publishable_key=\"pub_1a2b3c4d\", proxy_url=\"https://mean-orchid.com/\", domain=\"plump-reach.com\", sign_in_url=\"https://delicious-costume.org/\", use_domain_for_script=True)\n\n    # Use the SDK ...\n```\n\n----------------------------------------\n\nTITLE: Example Actor Payload in Markdown\nDESCRIPTION: This snippet demonstrates the structure of the actor payload, which is a required field in the CreateActorTokenRequestBody. It includes the 'sub' property containing the ID of the actor.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createactortokenrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"sub\": \"user_2OEpKhcCN1Lat9NQ0G6puh7q5Rb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteAllowlistIdentifierRequest Class Fields in Markdown\nDESCRIPTION: This markdown table defines the fields for the DeleteAllowlistIdentifierRequest class. It specifies a single required field 'identifier_id' of type string, which represents the ID of the identifier to be deleted from the allow-list.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteallowlistidentifierrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                  | Type                                                   | Required                                               | Description                                            | Example                                                |\n| ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ |\n| `identifier_id`                                        | *str*                                                  | :heavy_check_mark:                                     | The ID of the identifier to delete from the allow-list | example_identifier_id                                  |\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Connection Deletion Request Fields\nDESCRIPTION: Defines the required field for identifying a SAML connection to be deleted, specifically the connection's unique identifier as a string\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deletesamlconnectionrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsaml_connection_id: str\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Proxy Verification Request Body Fields\nDESCRIPTION: Describes the optional fields used for configuring domain proxy verification in a Clerk domain configuration. Includes domain_id for identifying the specific domain and proxy_url for specifying the proxy forwarding endpoint.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/verifydomainproxyrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass VerifyDomainProxyRequestBody:\n    domain_id: Optional[str] = None\n    proxy_url: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Email Address ID Parameter - Python\nDESCRIPTION: This code snippet defines the `primary_email_address_id` parameter, which is an optional field used to set a user's primary email address. The parameter must reference a verified email that is currently associated with the user. This is crucial for user identification and communication in the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateuserrequestbody.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n| `primary_email_address_id`| *OptionalNullable[str| :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | The ID of the email address to set as primary.<br/>It must be verified, and present on the current user| eml|\n```\n\n----------------------------------------\n\nTITLE: Actor Payload Example - Python Dictionary\nDESCRIPTION: Example of a valid actor payload structure containing the mandatory 'sub' field representing the actor's ID and additional custom fields through __pydantic_extra__.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createactortokenactor.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n  \"sub\": \"user_2OEpKhcCN1Lat9NQ0G6puh7q5Rb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdminVerificationStatus Enum with Values in Markdown Table\nDESCRIPTION: A markdown table that defines the AdminVerificationStatus enum with a single value 'VERIFIED' that corresponds to the string value 'verified'. This enum is likely used for admin verification operations in the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/adminverificationstatus.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name       | Value      |\n| ---------- | ---------- |\n| `VERIFIED` | verified   |\n```\n\n----------------------------------------\n\nTITLE: GetSignUpRequest Fields Documentation in Markdown\nDESCRIPTION: Documents the required fields for the GetSignUpRequest structure. Currently only contains an 'id' field of type string that is required for retrieving sign-up information.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getsignuprequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                             | Type                              | Required                          | Description                       |\n| --------------------------------- | --------------------------------- | --------------------------------- | --------------------------------- |\n| `id`                              | *str*                             | :heavy_check_mark:                | The ID of the sign-up to retrieve |\n```\n\n----------------------------------------\n\nTITLE: DeleteBackupCodeRequest Field Definition in Markdown\nDESCRIPTION: Defines the structure of the DeleteBackupCodeRequest class with a required user_id field of type string that identifies the user whose backup codes should be deleted.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deletebackupcoderequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                    | Type                                                     | Required                                                 | Description                                              |\n| -------------------------------------------------------- | -------------------------------------------------------- | -------------------------------------------------------- | -------------------------------------------------------- |\n| `user_id`                                                | *str*                                                    | :heavy_check_mark:                                       | The ID of the user whose backup codes are to be deleted. |\n```\n\n----------------------------------------\n\nTITLE: Defining ActorToken Fields in Markdown\nDESCRIPTION: This markdown table defines the fields of the ActorToken class, including their types, requirements, descriptions, and examples. It covers essential properties such as object type, ID, status, user ID, actor details, creation and update timestamps, and optional token and URL fields.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/actortoken.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                    | Type                                                     | Required                                                 | Description                                              | Example                                                  |\n| -------------------------------------------------------- | -------------------------------------------------------- | -------------------------------------------------------- | -------------------------------------------------------- | -------------------------------------------------------- |\n| `object`                                                 | [models.ActorTokenObject](../models/actortokenobject.md) | :heavy_check_mark:                                       | N/A                                                      | actor_token                                              |\n| `id`                                                     | *str*                                                    | :heavy_check_mark:                                       | N/A                                                      | actor_tok_1a2b3c                                         |\n| `status`                                                 | [models.ActorTokenStatus](../models/actortokenstatus.md) | :heavy_check_mark:                                       | N/A                                                      | pending                                                  |\n| `user_id`                                                | *str*                                                    | :heavy_check_mark:                                       | N/A                                                      | user_1a2b3c                                              |\n| `actor`                                                  | [models.ActorTokenActor](../models/actortokenactor.md)   | :heavy_check_mark:                                       | N/A                                                      | {<br/>\"sub\": \"user_2OEpKhcCN1Lat9NQ0G6puh7q5Rb\"<br/>}    |\n| `created_at`                                             | *int*                                                    | :heavy_check_mark:                                       | Unix timestamp of creation.<br/>                         | 1609459200                                               |\n| `updated_at`                                             | *int*                                                    | :heavy_check_mark:                                       | Unix timestamp of last update.<br/>                      | 1612137600                                               |\n| `token`                                                  | *Optional[str]*                                          | :heavy_minus_sign:                                       | N/A                                                      | token_string                                             |\n| `url`                                                    | *Optional[str]*                                          | :heavy_minus_sign:                                       | N/A                                                      | https://example.com/token                                |\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteEmailAddressRequest Class Fields in Markdown\nDESCRIPTION: This snippet defines the fields for the DeleteEmailAddressRequest class using a markdown table. It specifies the 'email_address_id' field of type string, which is required and used to identify the email address to be deleted.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteemailaddressrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                 | Type                                  | Required                              | Description                           | Example                               |\n| ------------------------------------- | ------------------------------------- | ------------------------------------- | ------------------------------------- | ------------------------------------- |\n| `email_address_id`                    | *str*                                 | :heavy_check_mark:                    | The ID of the email address to delete | email_address_id_example              |\n```\n\n----------------------------------------\n\nTITLE: Defining Template Delivery Request Body\nDESCRIPTION: Represents an optional configuration to control whether Clerk should handle email or SMS message delivery for a specific template. The boolean flag allows enabling or disabling Clerk's built-in delivery mechanism.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/toggletemplatedeliveryrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndelivered_by_clerk: Optional[bool] = None\n```\n\n----------------------------------------\n\nTITLE: Defining User Profile Field: first_name in Python\nDESCRIPTION: This snippet specifies the 'first_name' field as an optional nullable string, part of the user profile definition for the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n| `first_name`                                                                                                                                                                                                                                             | *OptionalNullable[str]*                                                                                                                                                                                                                                  | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | John                                                                                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for Create Waitlist Entry API in Markdown\nDESCRIPTION: A markdown table describing the parameters for the create_waitlist_entry API call. It includes the parameter name, type, whether it's required, and a description.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/waitlistentriessdk/README.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter                                                                               | Type                                                                                    | Required                                                                                | Description                                                                             |\n| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |\n| `request`                                                                               | [models.CreateWaitlistEntryRequestBody](../../models/createwaitlistentryrequestbody.md) | :heavy_check_mark:                                                                      | The request object to use for the request.                                              |\n| `retries`                                                                               | [Optional[utils.RetryConfig]](../../models/utils/retryconfig.md)                        | :heavy_minus_sign:                                                                      | Configuration to override the default retry behavior of the client.                     |\n```\n\n----------------------------------------\n\nTITLE: Domain Deletion Request Structure in Clerk Python SDK\nDESCRIPTION: Defines the required field for deleting a domain in Clerk. The domain_id parameter is mandatory and must reference a satellite domain.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deletedomainrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      | Type | Required | Description | Example |\n| ---------- | ---- | -------- | ----------- | ------- |\n| `domain_id` | *str* | :heavy_check_mark: | The ID of the domain that will be deleted. Must be a satellite domain. | domain_12345 |\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteExternalAccountRequest Fields in Markdown\nDESCRIPTION: This markdown table defines the fields for the DeleteExternalAccountRequest class. It specifies two required string fields: user_id for identifying the user, and external_account_id for specifying the external account to be deleted.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteexternalaccountrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                    | Type                                     | Required                                 | Description                              |\n| ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- |\n| `user_id`                                | *str*                                    | :heavy_check_mark:                       | The ID of the user's external account    |\n| `external_account_id`                    | *str*                                    | :heavy_check_mark:                       | The ID of the external account to delete |\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Verification Strategy Enum\nDESCRIPTION: Enumerates the SAML verification strategy with a predefined constant value used for authentication and verification purposes\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/samlverificationstrategy.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n| Name   | Value  |\n| ------ | ------ |\n| `SAML` | saml   |\n```\n\n----------------------------------------\n\nTITLE: Session Token Request Fields Definition\nDESCRIPTION: Markdown table defining the fields required for creating a session token request, including session_id (required string) and an optional request body of type CreateSessionTokenRequestBody.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createsessiontokenrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                        | Type                                                                                         | Required                                                                                     | Description                                                                                  |\n| -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n| `session_id`                                                                                 | *str*                                                                                        | :heavy_check_mark:                                                                           | The ID of the session                                                                        |\n| `request_body`                                                                               | [Optional[models.CreateSessionTokenRequestBody]](../models/createsessiontokenrequestbody.md) | :heavy_minus_sign:                                                                           | N/A                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Defining EmailAddressObject Enum in Python for Clerk SDK\nDESCRIPTION: This code snippet defines an enum called EmailAddressObject for use in the Clerk SDK for Python. It contains a single value 'EMAIL_ADDRESS' with the corresponding string value 'email_address'. This enum is likely used to represent the type of an email address object within the SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/emailaddressobject.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# EmailAddressObject\n\nString representing the object's type. Objects of the same type share the same value.\n\n\n\n## Values\n\n| Name            | Value           |\n| --------------- | --------------- |\n| `EMAIL_ADDRESS` | email_address   |\n```\n\n----------------------------------------\n\nTITLE: Defining User Profile Field: image_url in Python\nDESCRIPTION: This snippet defines the 'image_url' field as an optional string within the user profile structure of the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n| `image_url`                                                                                                                                                                                                                                              | *Optional[str]*                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | https://example.com/new-profile.jpg                                                                                                                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: EnrollmentMode Enum Values Table\nDESCRIPTION: Table defining three possible enrollment modes for domains: manual invitation, automatic invitation, and automatic suggestion. Each mode represents a different approach to handling user enrollment for a domain.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/enrollmentmode.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                   | Value                  |\n| ---------------------- | ---------------------- |\n| `MANUAL_INVITATION`    | manual_invitation      |\n| `AUTOMATIC_INVITATION` | automatic_invitation   |\n| `AUTOMATIC_SUGGESTION` | automatic_suggestion   |\n```\n\n----------------------------------------\n\nTITLE: DeleteOAuthApplicationRequest Fields Table\nDESCRIPTION: Markdown table defining the required field for deleting an OAuth application. The oauth_application_id field is required and must be provided as a string.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteoauthapplicationrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                     | Type                                      | Required                                  | Description                               | Example                                   |\n| ----------------------------------------- | ----------------------------------------- | ----------------------------------------- | ----------------------------------------- | ----------------------------------------- |\n| `oauth_application_id`                    | *str*                                     | :heavy_check_mark:                        | The ID of the OAuth application to delete | oauth_app_09876                           |\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteJWTTemplateRequest Class Fields in Markdown\nDESCRIPTION: This snippet defines the fields for the DeleteJWTTemplateRequest class using a markdown table. It specifies a single required field 'template_id' of type string, which represents the JWT Template ID to be deleted.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deletejwttemplaterequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field              | Type               | Required           | Description        |\n| ------------------ | ------------------ | ------------------ | ------------------ |\n| `template_id`      | *str*              | :heavy_check_mark: | JWT Template ID    |\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Schema Definition for DeletedObject\nDESCRIPTION: Defines the field specifications for DeletedObject including field names, types, requirements and examples. The schema includes both required fields (object and deleted) and optional fields (id and slug).\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deletedobject.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                     | Type                      | Required                  | Description               | Example                   |\n| ------------------------- | ------------------------- | ------------------------- | ------------------------- | ------------------------- |\n| `object`                  | *str*                     | :heavy_check_mark:        | N/A                       | deleted_object            |\n| `deleted`                 | *bool*                    | :heavy_check_mark:        | N/A                       | true                      |\n| `id`                      | *Optional[str]*           | :heavy_minus_sign:        | N/A                       | deleted_object_id_example |\n| `slug`                    | *Optional[str]*           | :heavy_minus_sign:        | N/A                       | deleted-object-slug       |\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Invitation Object Type\nDESCRIPTION: Constant value representing the type of organization invitation objects in the Clerk SDK. Used to identify and categorize invitation-related objects.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/organizationinvitationobject.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nORGANIZATION_INVITATION = \"organization_invitation\"\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateProductionInstanceDomainRequestBody Structure in Markdown\nDESCRIPTION: Markdown table that defines the fields of UpdateProductionInstanceDomainRequestBody, including field names, types, requirements, descriptions, and examples for updating production instance domains.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateproductioninstancedomainrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# UpdateProductionInstanceDomainRequestBody\n\n\n## Fields\n\n| Field                                                                    | Type                                                                     | Required                                                                 | Description                                                              | Example                                                                  |\n| ------------------------------------------------------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------------------ |\n| `home_url`                                                               | *Optional[str]*                                                          | :heavy_minus_sign:                                                       | The new home URL of the production instance e.g. https://www.example.com | https://www.example.com                                                  |\n| `is_secondary`                                                           | *Optional[bool]*                                                         | :heavy_minus_sign:                                                       | Whether the domain is a secondary app.                                   |                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Defining User Profile Field: username in Python\nDESCRIPTION: This snippet defines the 'username' field as an optional nullable string in the user profile schema used by the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n| `username`                                                                                                                                                                                                                                               | *OptionalNullable[str]*                                                                                                                                                                                                                                  | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | john_doe                                                                                                                                                                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Template Request Parameters Table in Markdown\nDESCRIPTION: Markdown table defining the required fields for the GetTemplateRequest structure. Details the template_type and slug parameters along with their types, requirements, and example values.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/gettemplaterequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                              | Type                                                               | Required                                                           | Description                                                        | Example                                                            |\n| ------------------------------------------------------------------ | ------------------------------------------------------------------ | ------------------------------------------------------------------ | ------------------------------------------------------------------ | ------------------------------------------------------------------ |\n| `template_type`                                                    | [models.PathParamTemplateType](../models/pathparamtemplatetype.md) | :heavy_check_mark:                                                 | The type of templates to retrieve (email or SMS)                   | email                                                              |\n| `slug`                                                             | *str*                                                              | :heavy_check_mark:                                                 | The slug (i.e. machine-friendly name) of the template to retrieve  | welcome-email                                                      |\n```\n\n----------------------------------------\n\nTITLE: Installing Clerk Backend API SDK with pip\nDESCRIPTION: Command to install the Clerk Backend API SDK using pip package manager.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install clerk-backend-api\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteOrganizationMembershipRequest Fields in Markdown\nDESCRIPTION: This snippet defines the fields for the DeleteOrganizationMembershipRequest class using a markdown table. It specifies two required fields: organization_id and user_id, along with their types, requirements, descriptions, and examples.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteorganizationmembershiprequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                | Type                                                 | Required                                             | Description                                          | Example                                              |\n| ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- |\n| `organization_id`                                    | *str*                                                | :heavy_check_mark:                                   | The ID of the organization the membership belongs to | org_12345                                            |\n| `user_id`                                            | *str*                                                | :heavy_check_mark:                                   | The ID of the user that this membership belongs to   | user_67890                                           |\n```\n\n----------------------------------------\n\nTITLE: Defining Token Model in Python\nDESCRIPTION: This snippet defines a variable 'value' of the type 'models.Token', which is likely used for handling authentication tokens within the session refresh operation. It requires the 'models' module that contains the 'Token' class definition. Expected input is a placeholder comment indicating further implementation, and the output is an instance of the Token model.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/sessionrefresh.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.Token = /* values here */\n```\n\n----------------------------------------\n\nTITLE: SignUpVerifications Field Mapping\nDESCRIPTION: Defines nullable verification fields for user registration with types from Clerk models\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/signupverifications.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nemail_address: Nullable[models.SignUpVerification]\nphone_number: Nullable[models.SignUpVerification]\nweb3_wallet: Nullable[models.SignUpVerification]\nexternal_account: Nullable[models.ExternalAccount]\n```\n\n----------------------------------------\n\nTITLE: Allowed Origins Configuration\nDESCRIPTION: Lists the allowed origins for requests. This is crucial for browser-based stacks and includes specific URIs for different platforms like Chrome extensions and Electron. This parameter is an array of strings.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateinstancerequestbody.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n| `allowed_origins`                                                                                                                                                                                                                                                                                                                                                                                 | List[*str*]                                                                                                                                                                                                                                                                                                                                                                                       | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | For browser-like stacks such as browser extensions, Electron, or Capacitor.js the instance allowed origins need to be updated with the request origin value.<br/>For Chrome extensions popup, background, or service worker pages the origin is chrome-extension://extension_uiid. For Electron apps the default origin is http://localhost:3000. For Capacitor, the origin is capacitor://localhost. | [<br/>\"http://localhost:3000\",<br/>\"chrome-extension://extension_uiid\",<br/>\"capacitor://localhost\"<br/>]                                                                                                                                                                                                                                                                                         |\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Error Clerk Error in Python\nDESCRIPTION: This snippet shows how to define a variable of type `models.OauthErrorClerkError`. It is intended for handling OAuth-related errors using the Clerk SDK in Python. There are no explicit dependencies mentioned, but it assumes the presence of the `models` module from the Clerk SDK. The variable is intended to hold error values specific to OAuth processes within this context.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/verificationerror.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.OauthErrorClerkError = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Defining Phone Number Verification Status Enum in Markdown Table\nDESCRIPTION: A markdown table defining the enum values for phone number verification status in the Clerk admin system. Currently defines 'VERIFIED' with a value of 'verified'.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/adminverificationphonenumberstatus.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name       | Value      |\n| ---------- | ---------- |\n| `VERIFIED` | verified   |\n```\n\n----------------------------------------\n\nTITLE: Installing Clerk Backend API SDK with Poetry\nDESCRIPTION: Command to install the Clerk Backend API SDK using Poetry package manager.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry add clerk-backend-api\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteTOTPResponseBody Class Structure in Markdown\nDESCRIPTION: This markdown snippet defines the structure of the DeleteTOTPResponseBody class, which is used to represent a successful TOTP deletion operation. It includes a single optional field 'user_id' of type string.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deletetotpresponsebody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# DeleteTOTPResponseBody\n\nSuccessful operation.\n\n\n## Fields\n\n| Field              | Type               | Required           | Description        |\n| ------------------ | ------------------ | ------------------ | ------------------ |\n| `user_id`          | *Optional[str]*    | :heavy_minus_sign: | N/A                |\n```\n\n----------------------------------------\n\nTITLE: Defining Claims Fields in Markdown Table\nDESCRIPTION: This snippet presents a markdown table structure for documenting the fields of the Claims module. The table includes columns for Field, Type, Required status, and Description.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/claims.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field       | Type        | Required    | Description |\n| ----------- | ----------- | ----------- | ----------- |\n```\n\n----------------------------------------\n\nTITLE: RevokeInvitationRequest Fields\nDESCRIPTION: This table defines the structure of the RevokeInvitationRequest.  It specifies the `invitation_id` field, which is a required string containing the ID of the invitation to be revoked. This ID is used to identify the specific invitation to be targeted for revocation.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/revokeinvitationrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Field                                  | Type                                   | Required                               | Description                            | Example                                |\n| -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- |\n| `invitation_id`                        | *str*                                  | :heavy_check_mark:                     | The ID of the invitation to be revoked | inv_123                                |\n```\n\n----------------------------------------\n\nTITLE: Defining User Profile Field: last_name in Python\nDESCRIPTION: This snippet establishes the 'last_name' field as an optional nullable string in the user profile section of the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n| `last_name`                                                                                                                                                                                                                                              | *OptionalNullable[str]*                                                                                                                                                                                                                                  | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | Doe                                                                                                                                                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Defining DisableMFARequest Class Fields in Markdown\nDESCRIPTION: This markdown table defines the fields for the DisableMFARequest class. It specifies the field name, type, whether it's required, a description, and an example value for the user_id field.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/disablemfarequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                   | Type                                                    | Required                                                | Description                                             | Example                                                 |\n| ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------------- |\n| `user_id`                                               | *str*                                                   | :heavy_check_mark:                                      | The ID of the user whose MFA methods are to be disabled | user_123456                                             |\n```\n\n----------------------------------------\n\nTITLE: ProxyCheck Data Model Schema\nDESCRIPTION: Defines the structured fields for tracking proxy configuration validation status, including timestamps, domain references, and validation outcomes\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/proxycheck.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ProxyCheck:\n    object: models.ProxyCheckObject\n    id: str\n    domain_id: str\n    last_run_at: Optional[int]\n    proxy_url: str\n    successful: bool\n    created_at: int\n    updated_at: int\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteRedirectURLRequest Fields in Markdown\nDESCRIPTION: This snippet defines the fields for the DeleteRedirectURLRequest class using a Markdown table. It specifies the 'id' field, which is a required string representing the ID of the redirect URL to be deleted.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteredirecturlrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                            | Type                             | Required                         | Description                      | Example                          |\n| -------------------------------- | -------------------------------- | -------------------------------- | -------------------------------- | -------------------------------- |\n| `id`                             | *str*                            | :heavy_check_mark:               | The ID of the redirect URL       | redir_01FG4K9G5NWSQ4ZPT4TQE4Z7G3 |\n```\n\n----------------------------------------\n\nTITLE: FromOAuth Model Fields Table in Markdown\nDESCRIPTION: Markdown table defining the fields, types, requirements and descriptions for the FromOAuth model. Includes fields for verification status, strategy, expiration time, attempt counts, error handling and client verification timestamp.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/fromoauth.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                          | Type                                                                           | Required                                                                       | Description                                                                    |\n| ------------------------------------------------------------------------------ | ------------------------------------------------------------------------------ | ------------------------------------------------------------------------------ | ------------------------------------------------------------------------------ |\n| `status`                                                                       | [models.FromOAuthVerificationStatus](../models/fromoauthverificationstatus.md) | :heavy_check_mark:                                                             | N/A                                                                            |\n| `strategy`                                                                     | *str*                                                                          | :heavy_check_mark:                                                             | N/A                                                                            |\n| `expire_at`                                                                    | *Nullable[int]*                                                                | :heavy_check_mark:                                                             | N/A                                                                            |\n| `attempts`                                                                     | *Nullable[int]*                                                                | :heavy_check_mark:                                                             | N/A                                                                            |\n| `error`                                                                        | [OptionalNullable[models.Error]](../models/error.md)                           | :heavy_minus_sign:                                                             | N/A                                                                            |\n| `verified_at_client`                                                           | *OptionalNullable[str]*                                                        | :heavy_minus_sign:                                                             | N/A                                                                            |\n```\n\n----------------------------------------\n\nTITLE: Clerk JS Version Configuration\nDESCRIPTION: Specifies the version of Clerk JS being used in the application. Meant for compatibility and feature support, this version is also an optional string parameter.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateinstancerequestbody.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n| `clerk_js_version`                                                                                                                                                                                                                                                                                                                                                                                | *OptionalNullable[str]*                                                                                                                                                                                                                                                                                                                                                                           | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | N/A                                                                                                                                                                                                                                                                                                                                                                                               | 2.3.1                                                                                                                                                                                                                                                                                                                                                                                             |\n```\n\n----------------------------------------\n\nTITLE: Defining Last Name Parameter - Python\nDESCRIPTION: This code snippet defines the `last_name` parameter, which is an optional field to assign a user's last name. It specifies that the parameter can hold a nullable string value, indicating that it is not mandatory. This parameter will be used during user management within the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateuserrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n| `last_name`| *OptionalNullable[str| :heavy_minus_sign| The last name to assign to the user| Doe|\n```\n\n----------------------------------------\n\nTITLE: GetSessionListRequest Field Definitions\nDESCRIPTION: Structured field documentation for the GetSessionListRequest class defining optional parameters for filtering and paginating session lists. Includes client_id, user_id, status, pagination controls, and offset parameters.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getsessionlistrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                                                                     | Type                                                                                                                                      | Required                                                                                                                                  | Description                                                                                                                               | Example                                                                                                                                   |\n| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| `client_id`                                                                                                                               | *Optional[str]*                                                                                                                           | :heavy_minus_sign:                                                                                                                        | List sessions for the given client                                                                                                        | client_123                                                                                                                                |\n| `user_id`                                                                                                                                 | *Optional[str]*                                                                                                                           | :heavy_minus_sign:                                                                                                                        | List sessions for the given user                                                                                                          | user_456                                                                                                                                  |\n| `status`                                                                                                                                  | [Optional[models.QueryParamStatus]](../models/queryparamstatus.md)                                                                        | :heavy_minus_sign:                                                                                                                        | Filter sessions by the provided status                                                                                                    | active                                                                                                                                    |\n| `paginated`                                                                                                                               | *Optional[bool]*                                                                                                                          | :heavy_minus_sign:                                                                                                                        | Whether to paginate the results.<br/>If true, the results will be paginated.<br/>If false, the results will not be paginated.             |                                                                                                                                           |\n| `limit`                                                                                                                                   | *Optional[int]*                                                                                                                           | :heavy_minus_sign:                                                                                                                        | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`.                     | 20                                                                                                                                        |\n| `offset`                                                                                                                                  | *Optional[int]*                                                                                                                           | :heavy_minus_sign:                                                                                                                        | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10                                                                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Defining Created At Metadata in Python\nDESCRIPTION: This snippet defines a Unix timestamp for resource creation. It is an integer type variable and helps track when the resource was created.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/oauthapplicationwithsecret.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"created_at = 1609459200\"\n```\n\n----------------------------------------\n\nTITLE: Defining GetRedirectURLRequest Class Structure\nDESCRIPTION: Represents a request for generating a redirect URL with a mandatory ID parameter. The ID is a string identifying the specific redirect URL to be created.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getredirecturlrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GetRedirectURLRequest:\n    id: str\n```\n\n----------------------------------------\n\nTITLE: Development Origin Configuration\nDESCRIPTION: This optional parameter defines the development origin for local development, typically set to a local server URL. It is needed for secure interactions during development.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateinstancerequestbody.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n| `development_origin`                                                                                                                                                                                                                                                                                                                                                                              | *OptionalNullable[str]*                                                                                                                                                                                                                                                                                                                                                                           | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | N/A                                                                                                                                                                                                                                                                                                                                                                                               | http://localhost:3000                                                                                                                                                                                                                                                                                                                                                                             |\n```\n\n----------------------------------------\n\nTITLE: GetSessionRequest Field Definition Table in Markdown\nDESCRIPTION: Table defining the GetSessionRequest structure with details about the session_id field, including its type, requirement status, and example value.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getsessionrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                 | Type                  | Required              | Description           | Example               |\n| --------------------- | --------------------- | --------------------- | --------------------- | --------------------- |\n| `session_id`          | *str*                 | :heavy_check_mark:    | The ID of the session | sess_1234567890abcdef |\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Banned Status in Clerk SDK\nDESCRIPTION: Allows filtering users based on their banned status. Can retrieve either banned or non-banned users by setting a boolean value.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserscountrequest.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbanned: Optional[bool] = None\n```\n\n----------------------------------------\n\nTITLE: Defining User Profile Field: has_image in Python\nDESCRIPTION: This snippet establishes the 'has_image' field as an optional boolean, indicating the presence of a profile image in the Clerk SDK user profile.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n| `has_image`                                                                                                                                                                                                                                              | *Optional[bool]*                                                                                                                                                                                                                                         | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | true                                                                                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Defining User Object Values\nDESCRIPTION: This snippet defines the possible value for the UserObject type, which is 'user'. This signifies that the object is of the user type within the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/userobject.md#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"USER | user\"\n```\n\n----------------------------------------\n\nTITLE: Defining AdminVerificationWeb3WalletStatus Enum in Python\nDESCRIPTION: Defines an enumeration for web3 wallet verification status in the Clerk SDK for Python. Currently only includes the VERIFIED status with a value of 'verified'.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/adminverificationweb3walletstatus.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# AdminVerificationWeb3WalletStatus\n\n\n## Values\n\n| Name       | Value      |\n| ---------- | ---------- |\n| `VERIFIED` | verified   |\n```\n\n----------------------------------------\n\nTITLE: Upserting Email and SMS Templates with Clerk in Python\nDESCRIPTION: The purpose of this snippet is to demonstrate how to update an existing email or SMS template using the Clerk SDK for Python. The `Clerk` object is initialized with bearer authentication, and the upsert method is called with several parameters such as template type, slug, and markup. This code requires the `clerk_backend_api` package and a valid authentication token. The operation has been deprecated, urging users to migrate to newer methods.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailandsmstemplates/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.email_and_sms_templates.upsert(template_type=clerk_backend_api.UpsertTemplatePathParamTemplateType.SMS, slug=\"verification-code\", name=\"Verification Code\", subject=\"Your Verification Code\", markup=\"<p>Your code: {{code}}</p>\", body=\"Use this code to verify your email: {{code}}\", delivered_by_clerk=True, from_email_name=\"hello\", reply_to_email_name=\"support\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Token Fetch URL in Python\nDESCRIPTION: This snippet defines the URL used to fetch the token required for authentication. It is a string type variable and is crucial for the OAuth process.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/oauthapplicationwithsecret.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"token_fetch_url = 'https://example.com/oauth/token'\"\n```\n\n----------------------------------------\n\nTITLE: Completing Accountless Applications with Clerk SDK in Python\nDESCRIPTION: This snippet shows how to complete an accountless application using the Clerk SDK. Similar to the create snippet, it initializes the Clerk client with a bearer token and performs the complete operation, ensuring that the response is valid by asserting it's not None before printing it. The retries parameter can also be configured using utils.RetryConfig, if desired.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/experimentalaccountlessapplications/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.experimental_accountless_applications.complete()\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Defining User Metadata Update Request Structure in Python\nDESCRIPTION: Represents a request to update user metadata with a required user ID and optional request body for metadata modifications\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateusermetadatarequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateUserMetadataRequest:\n    user_id: str\n    request_body: Optional[models.UpdateUserMetadataRequestBody] = None\n```\n\n----------------------------------------\n\nTITLE: External Account Type Constants\nDESCRIPTION: Defines three constant values for different types of external accounts: generic external account, Facebook account, and Google account. These values are used to identify the type of external account object.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/externalaccountwithverificationobject.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name               | Value              |\n| ------------------ | ------------------ |\n| `EXTERNAL_ACCOUNT` | external_account   |\n| `FACEBOOK_ACCOUNT` | facebook_account   |\n| `GOOGLE_ACCOUNT`   | google_account     |\n```\n\n----------------------------------------\n\nTITLE: GetOAuthApplicationRequest Field Documentation\nDESCRIPTION: Documents the required field for retrieving OAuth application details. The oauth_application_id field is a required string parameter that identifies the specific OAuth application to retrieve.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getoauthapplicationrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                           | Type                            | Required                        | Description                     | Example                         |\n| ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- | ------------------------------- |\n| `oauth_application_id`          | *str*                           | :heavy_check_mark:              | The ID of the OAuth application | oauth_app_12345                 |\n```\n\n----------------------------------------\n\nTITLE: Initializing SAML Connection Model in Python\nDESCRIPTION: Defines a type hint for a SAML connection using Clerk's models, allowing strong typing for SAML connection configuration values\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/samlconnection.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.SAMLConnectionSAMLConnection = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Invitation Model in Python\nDESCRIPTION: Describes the data structure for an organization invitation with fields for invitation details, timestamps, and optional metadata\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/organizationinvitationwithpublicorganizationdata.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass OrganizationInvitationWithPublicOrganizationData:\n    object: str\n    id: str\n    email_address: str\n    role: str\n    role_name: str\n    public_metadata: Dict[str, Any]\n    url: Optional[str]\n    expires_at: Optional[int]\n    created_at: int\n    updated_at: int\n    organization_id: Optional[str]\n    status: Optional[str]\n    private_metadata: Dict[str, Any]\n    public_organization_data: Optional[OrganizationInvitationPublicOrganizationData]\n```\n\n----------------------------------------\n\nTITLE: Fetching Users by Organization IDs in Python\nDESCRIPTION: Returns users that have memberships to specified organizations. Up to 100 organization ids can be accepted, with options to include or exclude them using '+' and '-' respectively.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserscountrequest.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n| `organization_id`                                                                                                                                                                                                                                                                                                                                   | List[*str*]                                                                                                                                                                                                                                                                                                                                         | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                  | Returns users that have memberships to the given organizations. For each organization id, the `+` and `-`<br/>can be prepended to the id, which denote whether the respective organization should be included or<br/>excluded from the result set. Accepts up to 100 organization ids.                                                              | John Doe                                                                                                                                                                                                                                                                                                                                            |\n```\n\n----------------------------------------\n\nTITLE: Documenting Invitation Parameters in Markdown\nDESCRIPTION: This snippet defines two parameters for creating invitations: 'expires_in_days' and 'template_slug'. It specifies their types, optionality, and provides descriptions of their usage.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createinvitationrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| `expires_in_days`                                                                                                                                                                                                                                                                      | *OptionalNullable[int]*                                                                                                                                                                                                                                                                | :heavy_minus_sign:                                                                                                                                                                                                                                                                     | The number of days the invitation will be valid for. By default, the invitation expires after 30 days.                                                                                                                                                                                 |                                                                                                                                                                                                                                                                                        |\n| `template_slug`                                                                                                                                                                                                                                                                        | [Optional[models.TemplateSlug]](../models/templateslug.md)                                                                                                                                                                                                                             | :heavy_minus_sign:                                                                                                                                                                                                                                                                     | The slug of the email template to use for the invitation email.                                                                                                                                                                                                                        |                                                                                                                                                                                                                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Defining CreateBlocklistIdentifierRequestBody Class Fields in Markdown\nDESCRIPTION: This markdown table defines the fields for the CreateBlocklistIdentifierRequestBody class. It specifies a single required field 'identifier' of type string, which can be an email address, phone number, or web3 wallet to be added to the blocklist.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createblocklistidentifierrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                                        | Type                                                                                                         | Required                                                                                                     | Description                                                                                                  | Example                                                                                                      |\n| ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ |\n| `identifier`                                                                                                 | *str*                                                                                                        | :heavy_check_mark:                                                                                           | The identifier to be added in the block-list.<br/>This can be an email address, a phone number or a web3 wallet. | example@example.com                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Defining ActorTokenObject Enumeration Value in Markdown Table\nDESCRIPTION: This snippet defines the ActorTokenObject enumeration with a single value 'ACTOR_TOKEN' that maps to the string 'actor_token'. This is likely used for consistent reference to actor tokens throughout the Clerk Python SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/actortokenobject.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name          | Value         |\n| ------------- | ------------- |\n| `ACTOR_TOKEN` | actor_token   |\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Creation Date - Python\nDESCRIPTION: This snippet includes parameters `created_at_before` and `created_at_after`, which allow filtering users based on their creation dates. The timestamps must be provided in milliseconds, enabling precise querying of user creation times.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listorganizationmembershipsrequest.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"created_at_before\"                                                                                                                                                                                                                                                                        | *Optional[int]*                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users who have been created before the given date (with millisecond precision).<br/>Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.\n```\n\nLANGUAGE: python\nCODE:\n```\n\"created_at_after\"                                                                                                                                                                                                                                                                         | *Optional[int]*                                                                                                                                                                                                                                                                            | :heavy_minus_sign:                                                                                                                                                                                                                                                                         | Returns users who have been created after the given date (with millisecond precision).<br/>Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.\n```\n\n----------------------------------------\n\nTITLE: Defining Passkey Type in Python\nDESCRIPTION: This snippet defines a variable of type models.Passkey, which is meant to hold Passkey values within the Clerk SDK context. The models.Passkey needs to be properly initialized with the relevant values for operational use in user authentication flows.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/schemaspasskeyverification.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.Passkey = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Listing OAuth Applications with Python Clerk SDK\nDESCRIPTION: Makes a request to list all OAuth applications for an instance. Results can be paginated using the optional limit and offset query parameters. The OAuth applications are returned in descending order by creation date.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/oauthapplicationssdk/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.oauth_applications.list()\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Defining Deletion Permission in Python\nDESCRIPTION: This snippet defines an optional boolean field `delete_self_enabled`, which indicates whether the user has permission to delete their own account via the Frontend API. The intended use is to add an additional layer of control over user account management within the application.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateuserrequestbody.md#2025-04-16_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n\"delete_self_enabled = Optional[bool]  # If true, the user can delete themselves with the Frontend API.\\n# Example: true\"\n```\n\n----------------------------------------\n\nTITLE: Defining BlocklistIdentifierIdentifierType Enum in Markdown\nDESCRIPTION: This code snippet defines the BlocklistIdentifierIdentifierType enum using a markdown table. It lists three possible values: EMAIL_ADDRESS, PHONE_NUMBER, and WEB3_WALLET, along with their corresponding string representations.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/blocklistidentifieridentifiertype.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name            | Value           |\n| --------------- | --------------- |\n| `EMAIL_ADDRESS` | email_address   |\n| `PHONE_NUMBER`  | phone_number    |\n| `WEB3_WALLET`   | web3_wallet     |\n```\n\n----------------------------------------\n\nTITLE: Defining ActorTokenActor class fields in Markdown\nDESCRIPTION: This Markdown table defines the fields for the ActorTokenActor class. Currently, the table is empty, suggesting that no fields have been defined or documented yet.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/actortokenactor.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field       | Type        | Required    | Description |\n| ----------- | ----------- | ----------- | ----------- |\n```\n\n----------------------------------------\n\nTITLE: Defining VerificationOTP Model in Python\nDESCRIPTION: This code snippet defines the `VerificationOTP` model which likely represents a one-time password verification method. The model includes a `value` attribute of type `models.VerificationOTP`. The comment indicates that values should be assigned here when the model is instantiated.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/phonenumberverification.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nvalue: models.VerificationOTP = /* values here */\n```\n```\n\n----------------------------------------\n\nTITLE: Defining SignUp Status Enum Values\nDESCRIPTION: Provides an enumeration of sign-up status states used to track the progress and outcome of user registration attempts\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/signupstatus.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# SignUpStatus\n\n# Values:\n# - MISSING_REQUIREMENTS: User registration is incomplete\n# - COMPLETE: User registration successfully finished\n# - ABANDONED: User abandoned the sign-up process\n```\n\n----------------------------------------\n\nTITLE: User Query Parameter Examples in Python\nDESCRIPTION: Examples showing how to use banned and last_active_at_before parameters to filter users in Clerk Python SDK. The banned parameter filters users by their banned status, while last_active_at_before filters users based on their last activity timestamp.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbanned: Optional[bool]  # Filter users by banned status\nlast_active_at_before: Optional[int] = 1700690400000  # Filter users by last activity before timestamp\n```\n\n----------------------------------------\n\nTITLE: Defining Web3Signature Model - Python\nDESCRIPTION: This snippet defines a variable of type Web3Signature from the models. It is intended to hold specific values necessary for Web3 signature verification, ensuring type consistency.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/web3walletverification.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.Web3Signature = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteOrganizationRequest Fields in Markdown\nDESCRIPTION: This markdown table defines the fields for the DeleteOrganizationRequest class. It specifies the 'organization_id' field as a required string parameter for deleting an organization.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteorganizationrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                | Type                                 | Required                             | Description                          | Example                              |\n| ------------------------------------ | ------------------------------------ | ------------------------------------ | ------------------------------------ | ------------------------------------ |\n| `organization_id`                    | *str*                                | :heavy_check_mark:                   | The ID of the organization to delete | org_321_delete                       |\n```\n\n----------------------------------------\n\nTITLE: Defining Token Introspection URL in Python\nDESCRIPTION: This snippet defines the URL for token introspection, which allows the application to validate the access token. It is crucial for security checks and is a string type variable.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/oauthapplicationwithsecret.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"token_introspection_url = ''\"\n```\n\n----------------------------------------\n\nTITLE: Defining VerificationAdmin Model in Python\nDESCRIPTION: This code snippet defines the `VerificationAdmin` model, which likely represents an admin-initiated verification method. The model includes a `value` attribute of type `models.VerificationAdmin`. The comment indicates that values should be assigned here when the model is instantiated.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/phonenumberverification.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nvalue: models.VerificationAdmin = /* values here */\n```\n```\n\n----------------------------------------\n\nTITLE: BlocklistIdentifierObject Value Definition in Markdown Table\nDESCRIPTION: A markdown table defining the constant value for the BlocklistIdentifierObject type in the Clerk SDK. The table shows that objects of this type have the value 'blocklist_identifier'.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/blocklistidentifierobject.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                   | Value                  |\n| ---------------------- | ---------------------- |\n| `BLOCKLIST_IDENTIFIER` | blocklist_identifier   |\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleOneTapErrorClerkError in Python\nDESCRIPTION: This snippet shows how to define and assign a value to a `models.GoogleOneTapErrorClerkError` variable. It demonstrates the basic syntax for creating an instance of this type and assigning a placeholder comment where actual values should be placed.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/googleonetapverificationerror.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.GoogleOneTapErrorClerkError = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Invitation Fields in Markdown\nDESCRIPTION: A markdown table defining the fields for creating organization invitations. It includes email_address, role, inviter_user_id, public_metadata, and private_metadata fields with their types, requirements, descriptions, and examples.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createorganizationinvitationbulkrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                                                                                                                                                                                                 | Type                                                                                                                                                                                                                                                                  | Required                                                                                                                                                                                                                                                              | Description                                                                                                                                                                                                                                                           | Example                                                                                                                                                                                                                                                               |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `email_address`                                                                                                                                                                                                                                                       | *str*                                                                                                                                                                                                                                                                 | :heavy_check_mark:                                                                                                                                                                                                                                                    | The email address of the new member that is going to be invited to the organization                                                                                                                                                                                   | newmember@example.com                                                                                                                                                                                                                                                 |\n| `role`                                                                                                                                                                                                                                                                | *str*                                                                                                                                                                                                                                                                 | :heavy_check_mark:                                                                                                                                                                                                                                                    | The role of the new member in the organization                                                                                                                                                                                                                        | admin                                                                                                                                                                                                                                                                 |\n| `inviter_user_id`                                                                                                                                                                                                                                                     | *OptionalNullable[str]*                                                                                                                                                                                                                                               | :heavy_minus_sign:                                                                                                                                                                                                                                                    | The ID of the user that invites the new member to the organization.<br/>Must be an administrator in the organization.                                                                                                                                                 | user_67890                                                                                                                                                                                                                                                            |\n| `public_metadata`                                                                                                                                                                                                                                                     | Dict[str, *Any*]                                                                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                                    | Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.<br/>When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership. | {}                                                                                                                                                                                                                                                                    |\n| `private_metadata`                                                                                                                                                                                                                                                    | Dict[str, *Any*]                                                                                                                                                                                                                                                      | :heavy_minus_sign:                                                                                                                                                                                                                                                    | Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.<br/>When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership. | {}                                                                                                                                                                                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Session Token Response Fields Table\nDESCRIPTION: Markdown table defining the response fields for CreateSessionTokenFromTemplateResponseBody, including field types, requirements, and examples.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createsessiontokenfromtemplateresponsebody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                                                                                         | Type                                                                                                                                                          | Required                                                                                                                                                      | Description                                                                                                                                                   | Example                                                                                                                                                       |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `object`                                                                                                                                                      | [Optional[models.CreateSessionTokenFromTemplateObject]](../models/createsessiontokenfromtemplateobject.md)                                                    | :heavy_minus_sign:                                                                                                                                            | N/A                                                                                                                                                           | token                                                                                                                                                         |\n| `jwt`                                                                                                                                                         | *Optional[str]*                                                                                                                                               | :heavy_minus_sign:                                                                                                                                            | N/A                                                                                                                                                           | eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvZSBCbG9nZ3MiLCJpYXQiOjE1MTYyMzkwMjJ9.qKVwLLnbfqfM5VCfU8vDhXXXS0VklRcsErgTpELYgfw |\n```\n\n----------------------------------------\n\nTITLE: Defining Admin Verification Model\nDESCRIPTION: Type definition for Admin verification model in Clerk SDK\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/verification.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.Admin = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Parameter Table Documentation in Markdown\nDESCRIPTION: Markdown table defining optional parameters for limit, offset, query and order_by. These parameters control pagination, filtering and sorting of results in Clerk SDK operations.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/samlconnectionssdk/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `limit` | *Optional[int]* | :heavy_minus_sign: | Applies a limit to the number of results returned.<br/>Can be used for paginating the results together with `offset`. | 20 |\n| `offset` | *Optional[int]* | :heavy_minus_sign: | Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`. | 10 |\n| `query` | *Optional[str]* | :heavy_minus_sign: | Returns SAML connections that have a name that matches the given query, via case-insensitive partial match. | |\n| `order_by` | *Optional[str]* | :heavy_minus_sign: | Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.<br/>By prepending one of those values with + or -,<br/>we can choose to sort in ascending (ASC) or descending (DESC) order. | |\n```\n\n----------------------------------------\n\nTITLE: Template List Request Field Definitions - Python\nDESCRIPTION: Field definitions for the GetTemplateListRequest class. Includes required template_type field and optional pagination parameters (paginated, limit, offset). The template_type specifies email or SMS templates, while pagination parameters control result chunking.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/gettemplatelistrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntemplate_type: models.TemplateType  # Required - The type of templates to list (email or SMS)\npaginated: Optional[bool]     # Optional - Whether to paginate the results\nlimit: Optional[int]        # Optional - Limit number of results returned\noffset: Optional[int]       # Optional - Number of results to skip for pagination\n```\n\n----------------------------------------\n\nTITLE: Initializing SAMLErrorClerkError in Python\nDESCRIPTION: This snippet shows how to initialize a `models.SAMLErrorClerkError` object in Python.  It assigns a value (represented by a comment placeholder) to the `value` variable.  It depends on the `models` module being available within the project, specifically the `SAMLErrorClerkError` class.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/samlverificationerror.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nvalue: models.SAMLErrorClerkError = /* values here */\n```\n```\n\n----------------------------------------\n\nTITLE: Using Clerk Backend API SDK with uv in Python shell\nDESCRIPTION: Command to use the Clerk Backend API SDK in a Python shell using uv package manager.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuvx --from clerk-backend-api python\n```\n\n----------------------------------------\n\nTITLE: Defining Client Secret in Python\nDESCRIPTION: This snippet defines the client secret which is used for authenticating private clients. It is an optional string and should be kept confidential.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/oauthapplicationwithsecret.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"client_secret = 'secretXYZ123'\"\n```\n\n----------------------------------------\n\nTITLE: GetClientRequest Fields Documentation Table\nDESCRIPTION: Markdown table documenting the required fields for the GetClientRequest. Specifies that client_id is a required string parameter used to identify the client.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getclientrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field              | Type               | Required           | Description        | Example            |\n| ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |\n| `client_id`        | *str*              | :heavy_check_mark: | Client ID.         | cli_123456789      |\n```\n\n----------------------------------------\n\nTITLE: Organization Invitation Request Fields Documentation\nDESCRIPTION: Field specifications for creating an organization invitation including organization_id and optional request body. The organization_id is required and must be a string, while the request_body is optional and uses a custom model type.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createorganizationinvitationrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                                            | Type                                                                                                             | Required                                                                                                         | Description                                                                                                      | Example                                                                                                          |\n| ---------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------- |\n| `organization_id`                                                                                                | *str*                                                                                                            | :heavy_check_mark:                                                                                               | The ID of the organization for which to send the invitation                                                      | org_12345                                                                                                        |\n| `request_body`                                                                                                   | [Optional[models.CreateOrganizationInvitationRequestBody]](../models/createorganizationinvitationrequestbody.md) | :heavy_minus_sign:                                                                                               | N/A                                                                                                              |                                                                                                                  |\n```\n\n----------------------------------------\n\nTITLE: Defining Cookies Model in Python\nDESCRIPTION: This snippet defines a variable 'value' of the type 'models.Cookies', which is intended for managing session cookies in the context of session refresh within the Clerk SDK. It requires the 'models' module that includes the 'Cookies' class. The input is a placeholder comment suggesting further details, and the output results in an instance of the Cookies model.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/sessionrefresh.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.Cookies = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Defining User Profile Field: primary_web3_wallet_id in Python\nDESCRIPTION: This snippet defines the 'primary_web3_wallet_id' field as an optional nullable string within the user profile structure for the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n| `primary_web3_wallet_id`                                                                                                                                                                                                                                 | *OptionalNullable[str]*                                                                                                                                                                                                                                  | :heavy_minus_sign:                                                                                                                                                                                                                                       | N/A                                                                                                                                                                                                                                                      | wallet_id_123                                                                                                                                                                                                                                            |\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination for Allowlist Identifiers Request\nDESCRIPTION: Supports optional pagination controls for retrieving allowlist identifiers, including setting result limits and offsets to manage data retrieval\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listallowlistidentifiersrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npaginated: Optional[bool] = None\nlimit: Optional[int] = None\noffset: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Creating an Allowlist Identifier with Clerk SDK - Python\nDESCRIPTION: This snippet details how to create an identifier for the allowlist using the Clerk SDK in Python. It requires a request object containing the identifier. The function returns the created allowlist identifier object or an applicable error if the operation fails.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/allowlistidentifiers/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.allowlist_identifiers.create(request={\n        \"identifier\": \"user@example.com\",\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Blocklist Identifiers in Clerk SDK (Python)\nDESCRIPTION: Retrieves a list of all identifiers blocked from accessing a Clerk authentication instance using the SDK. Requires a valid bearer token for authentication.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/blocklistidentifierssdk/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.blocklist_identifiers.list()\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Defining CreateOrganizationMembershipRequest Fields in Markdown\nDESCRIPTION: This markdown table defines the fields of the CreateOrganizationMembershipRequest class. It includes the field names, types, whether they are required, descriptions, and examples.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createorganizationmembershiprequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                                  | Type                                                                                                   | Required                                                                                               | Description                                                                                            | Example                                                                                                |\n| ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------ |\n| `organization_id`                                                                                      | *str*                                                                                                  | :heavy_check_mark:                                                                                     | The ID of the organization where the new membership will be created                                    | org_123                                                                                                |\n| `request_body`                                                                                         | [models.CreateOrganizationMembershipRequestBody](../models/createorganizationmembershiprequestbody.md) | :heavy_check_mark:                                                                                     | N/A                                                                                                    |                                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Defining ClerkErrors Fields in Markdown\nDESCRIPTION: This snippet defines the fields of the ClerkErrors class using a markdown table. It includes two fields: 'errors' (a list of ClerkError objects) and 'meta' (an optional ClerkErrorsMeta object).\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/clerkerrors.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                                                                                                        | Type                                                                                                                                                                         | Required                                                                                                                                                                     | Description                                                                                                                                                                  | Example                                                                                                                                                                      |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `errors`                                                                                                                                                                     | List[[models.ClerkError](../models/clerkerror.md)]                                                                                                                           | :heavy_check_mark:                                                                                                                                                           | N/A                                                                                                                                                                          | [<br/>{<br/>\"message\": \"Invalid input\",<br/>\"long_message\": \"The input provided does not meet the requirements.\",<br/>\"code\": \"400_bad_request\",<br/>\"clerk_trace_id\": \"trace_123456789abcd\"<br/>}<br/>] |\n| `meta`                                                                                                                                                                       | [Optional[models.ClerkErrorsMeta]](../models/clerkerrorsmeta.md)                                                                                                             | :heavy_minus_sign:                                                                                                                                                           | N/A                                                                                                                                                                          | {}                                                                                                                                                                           |\n```\n\n----------------------------------------\n\nTITLE: Environment Information Collection using Node.js\nDESCRIPTION: Command to collect system environment information using Node.js's envinfo utility. This helps in providing detailed system information when reporting issues.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx envinfo\n```\n\n----------------------------------------\n\nTITLE: User Profile Parameters Example in Python\nDESCRIPTION: Example of parameter values for configuring user profiles in Clerk. Shows the format for setting profile image ID and password with their respective types and constraints.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateuserrequestbody.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprofile_image_id = \"img_789\"  # Optional string for user's profile image ID\npassword = \"secretPass123!\"  # Min 8 chars, must not be in compromised password lists\n```\n\n----------------------------------------\n\nTITLE: Domain Field Example in JSON\nDESCRIPTION: Example JSON structure showing the CNAME target configuration for a domain\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/domain.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"host\": \"example-host.clerk.com\",\n\"value\": \"example-value.clerk.services\",\n\"required\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting a Template to Default in Python\nDESCRIPTION: This snippet provides a way to revert a modified email or SMS template back to its default state using the Clerk SDK in Python. The operation is deprecated and involves specifying the template type and slug, requiring a bearer token for authentication. The response is checked for success.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailsmstemplates/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.email_sms_templates.revert(template_type=clerk_backend_api.RevertTemplatePathParamTemplateType.EMAIL, slug=\"welcome-email\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Defining `offset` Parameter for Pagination in Python\nDESCRIPTION: This snippet defines an optional integer parameter 'offset' that allows users to skip a specified number of results when paginating through API responses. It is necessary for controlling the starting point of returned results and should be used together with 'limit'.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getuserlistrequest.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n| `offset`| *Optional[int| :heavy_minus_sign| Skip the first `offset` results when paginating.<br/>Needs to be an integer greater or equal to zero.<br/>To be used in conjunction with `limit`||\n```\n\n----------------------------------------\n\nTITLE: Defining AllowlistIdentifierObject Enum Value\nDESCRIPTION: Constant string value definition for identifying allowlist identifier objects. The value 'allowlist_identifier' is used to represent objects of this specific type.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/allowlistidentifierobject.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nALLOWLIST_IDENTIFIER = \"allowlist_identifier\"\n```\n\n----------------------------------------\n\nTITLE: Domain Object Constants\nDESCRIPTION: Defines the DOMAIN constant value used in the clerk-sdk-python SDK. This constant represents the domain identifier used in API calls and configurations.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/domainobject.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name     | Value    |\n| -------- | -------- |\n| `DOMAIN` | domain   |\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated User Profile Field: profile_image_url in Python\nDESCRIPTION: This snippet defines the 'profile_image_url' field as an optional string but is marked as deprecated, suggesting users migrate away from it soon.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/user.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n| ~~`profile_image_url`~~                                                                                                                                                                                                                                  | *Optional[str]*                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                       | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible.                                                                                                                                  | https://example.com/profile.jpg                                                                                                                                                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: AttributeMapping Fields Definition in Markdown\nDESCRIPTION: Markdown table defining the available fields for attribute mapping between Identity Provider and Clerk. Includes field names, types, requirements, and examples for user_id, email_address, first_name, and last_name.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/attributemapping.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field              | Type               | Required           | Description        | Example            |\n| ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |\n| `user_id`          | *Optional[str]*    | :heavy_minus_sign: | N/A                | nameid             |\n| `email_address`    | *Optional[str]*    | :heavy_minus_sign: | N/A                | mail               |\n| `first_name`       | *Optional[str]*    | :heavy_minus_sign: | N/A                | givenName          |\n| `last_name`        | *Optional[str]*    | :heavy_minus_sign: | N/A                | surname            |\n```\n\n----------------------------------------\n\nTITLE: Deprecated Cookieless Development Mode Configuration\nDESCRIPTION: This optional boolean parameter, now deprecated, indicates whether the instance should operate in cookieless development mode. Users should migrate to `url_based_session_syncing` due to its planned removal in future versions.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateinstancerequestbody.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n| ~~`cookieless_dev`~~                                                                                                                                                                                                                                                                                                                                                                              | *OptionalNullable[bool]*                                                                                                                                                                                                                                                                                                                                                                          | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | : warning: ** DEPRECATED **: This will be removed in a future release, please migrate away from it as soon as possible.<br/><br/>Whether the instance should operate in cookieless development mode (i.e. without third-party cookies).<br/>Deprecated: Please use `url_based_session_syncing` instead.                                                                                           | false                                                                                                                                                                                                                                                                                                                                                                                             |\n```\n\n----------------------------------------\n\nTITLE: Class Definition - CreateOrganizationInvitationRequestBody\nDESCRIPTION: Empty class definition that serves as a placeholder or marker for organization invitation request body structures in the Clerk Python SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createorganizationinvitationrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateOrganizationInvitationRequestBody\n```\n\n----------------------------------------\n\nTITLE: Defining Password Parameters in Clerk SDK Python\nDESCRIPTION: This snippet defines two password-related parameters: 'password' for plaintext passwords and 'password_digest' for pre-hashed passwords. The 'password' must be at least 8 characters and not in known hacked password lists. The 'password_digest' allows using pre-hashed passwords with supported algorithms.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npassword: OptionalNullable[str] = \"secretPass123!\"\npassword_digest: Optional[str] = \"$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc\"\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteBackupCodeResponseBody Class in Python\nDESCRIPTION: This code snippet defines the DeleteBackupCodeResponseBody class with a single optional field 'user_id'. The class represents the response structure for a successful backup code deletion operation.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deletebackupcoderesponsebody.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DeleteBackupCodeResponseBody:\n    user_id: Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Verification Status Enum\nDESCRIPTION: Provides an enumeration of possible verification statuses for OAuth authentication, including states like unverified, verified, failed, expired, and transferable\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/oauthverificationstatus.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass OauthVerificationStatus:\n    UNVERIFIED = \"unverified\"\n    VERIFIED = \"verified\"\n    FAILED = \"failed\"\n    EXPIRED = \"expired\"\n    TRANSFERABLE = \"transferable\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Table\nDESCRIPTION: Parameter table defining reply_to_email_name and retries configuration options for templates\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailandsmstemplates/README.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `reply_to_email_name` | *Optional[str]* | :heavy_minus_sign: | The local part of the Reply To email address that will be used for emails.\\nFor example, in the address 'hello@example.com', the local part is 'hello'.\\nApplicable only to email templates. | support |\n| `retries` | [Optional[utils.RetryConfig]](../../models/utils/retryconfig.md) | :heavy_minus_sign: | Configuration to override the default retry behavior of the client. | |\n```\n\n----------------------------------------\n\nTITLE: Defining DisableMFAResponseBody Class in Python\nDESCRIPTION: This code snippet defines the DisableMFAResponseBody class with a single optional field 'user_id' of type str. The class is used to represent the response from a successful MFA disable operation.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/disablemfaresponsebody.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass DisableMFAResponseBody:\n    user_id: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Defining Updated At Metadata in Python\nDESCRIPTION: This snippet defines a Unix timestamp for the last update of the resource. It is essential for maintaining the state of the resource and is an integer type variable.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/oauthapplicationwithsecret.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"updated_at = 1612137600\"\n```\n\n----------------------------------------\n\nTITLE: Toggling Template Delivery with Clerk SDK for Python\nDESCRIPTION: This snippet demonstrates how to toggle the delivery of a template using the Clerk SDK for Python. It specifies the template type, slug, and whether Clerk should handle delivery. The function is deprecated and will be removed in a future release.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailsmstemplates/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.email_sms_templates.toggle_template_delivery(template_type=clerk_backend_api.ToggleTemplateDeliveryPathParamTemplateType.EMAIL, slug=\"welcome-email\", delivered_by_clerk=True)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Defining Ticket Verification Model\nDESCRIPTION: Type definition for Ticket-based verification model in Clerk SDK\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/verification.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.Ticket = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Deleting Organization Logo - Python\nDESCRIPTION: This snippet deletes the logo of a specified organization. The snippet requires a valid bearer token to authenticate the request and handle the response appropriately.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationssdk/README.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organizations.delete_logo(organization_id=\"org_12345\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Invitations Request Placeholder\nDESCRIPTION: This placeholder indicates the location where the Invitations Request functionality would be implemented in the Clerk Python SDK. It serves as a reminder that this feature needs to be added.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/listinvitationsrequest.md#2025-04-16_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining AdminVerificationStrategy Enum Values in Markdown Table\nDESCRIPTION: A markdown table that defines the AdminVerificationStrategy enum with a single value 'ADMIN' that maps to the string representation 'admin'. This is used in the Clerk Python SDK for specifying verification strategies.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/adminverificationstrategy.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Value   |\n| ------- | ------- |\n| `ADMIN` | admin   |\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Email or SMS Template in Python\nDESCRIPTION: This snippet shows how to retrieve details of a specific email or SMS template by type and slug using the Clerk SDK in Python. The operation is deprecated and requires a bearer token for authentication. The function checks for the presence of the response and prints it.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailsmstemplates/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.email_sms_templates.get(template_type=clerk_backend_api.PathParamTemplateType.EMAIL, slug=\"welcome-email\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: GetPhoneNumberRequest Field Documentation\nDESCRIPTION: Documents the required field for retrieving a phone number. The phone_number_id field is a required string parameter that specifies the unique identifier of the phone number to be retrieved.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getphonenumberrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                  | Type                                   | Required                               | Description                            | Example                                |\n| -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- |\n| `phone_number_id`                      | *str*                                  | :heavy_check_mark:                     | The ID of the phone number to retrieve | phone_12345                            |\n```\n\n----------------------------------------\n\nTITLE: Previewing Email Templates with Clerk Python SDK\nDESCRIPTION: Example code demonstrating how to preview an email template using the Clerk SDK. The code shows initializing the Clerk client and calling the preview method with template parameters including type, slug, subject, and email settings. This functionality is marked as deprecated.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/templates/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.templates.preview(template_type=\"email\", slug=\"welcome-email\", subject=\"Welcome to our service!\", body=\"Hi, thank you for joining our service.\", from_email_name=\"hello\", reply_to_email_name=\"support\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Fetching an Organization with Clerk Python SDK\nDESCRIPTION: This snippet demonstrates how to fetch an organization using its ID or slug. It includes optional parameters for including member count and missing members with elevated permissions.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationssdk/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organizations.get(organization_id=\"org_123\", include_members_count=False, include_missing_member_with_elevated_permissions=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Defining Actor Token Status Enum Values - Python\nDESCRIPTION: Enumerates the three possible states for actor tokens in the Clerk system: PENDING (pending), ACCEPTED (accepted), and REVOKED (revoked). These status values are used to track the lifecycle of actor tokens.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/actortokenstatus.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name       | Value      |\n| ---------- | ---------- |\n| `PENDING`  | pending    |\n| `ACCEPTED` | accepted   |\n| `REVOKED`  | revoked    |\n```\n\n----------------------------------------\n\nTITLE: Defining Web3WalletVerificationAdmin Model - Python\nDESCRIPTION: This snippet defines a variable of type Web3WalletVerificationAdmin from the models. It is meant to encapsulate the data required for wallet verification administration tasks.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/web3walletverification.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.Web3WalletVerificationAdmin = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Retrieving Clerk Interstitial Page with Python SDK\nDESCRIPTION: This code demonstrates how to use the get_public_interstitial method from the Clerk Python SDK to retrieve HTML markup for an authentication interstitial page. The interstitial page is used when a user's authentication state cannot be immediately determined.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/miscellaneous/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk() as clerk:\n\n    clerk.miscellaneous.get_public_interstitial(frontend_api_query_parameter=\"frontend-api_1a2b3c4d\", frontend_api_query_parameter1=\"pub_1a2b3c4d\", publishable_key=\"pub_1a2b3c4d\", proxy_url=\"https://mean-orchid.com/\", domain=\"plump-reach.com\", sign_in_url=\"https://delicious-costume.org/\", use_domain_for_script=True)\n\n    # Use the SDK ...\n```\n\n----------------------------------------\n\nTITLE: Defining Clerk Object Type Constants\nDESCRIPTION: Describes the object type constant for client representation in the Clerk SDK. Used to identify and categorize different object types within the system.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/object.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name     | Value    |\n| -------- | -------- |\n| `CLIENT` | client   |\n```\n\n----------------------------------------\n\nTITLE: Revoking an Organization Invitation in Python\nDESCRIPTION: Invalidate a pending organization invitation by specifying the organization ID, invitation ID, and requesting user ID. Only available for invitations with 'pending' status and requires admin role.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationinvitationssdk/README.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organization_invitations.revoke(organization_id=\"org_123456\", invitation_id=\"inv_123456\", requesting_user_id=\"usr_12345\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Support Email Configuration\nDESCRIPTION: Defines an optional support email for users of the application, which can be configured as a string. This parameter is useful for providing users an address for assistance or inquiries.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/updateinstancerequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n| `support_email`                                                                                                                                                                                                                                                                                                                                                                                   | *OptionalNullable[str]*                                                                                                                                                                                                                                                                                                                                                                           | :heavy_minus_sign:                                                                                                                                                                                                                                                                                                                                                                                | N/A                                                                                                                                                                                                                                                                                                                                                                                               | support@example.com                                                                                                                                                                                                                                                                                                                                                                               |\n```\n\n----------------------------------------\n\nTITLE: Skipping Password Checks in Clerk SDK Python\nDESCRIPTION: Defines the skip_password_checks parameter for user password updates. When set to True, it bypasses password policy settings checks. This parameter is only applicable when providing a new password.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/users/README.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nskip_password_checks: OptionalNullable[bool] = False\n```\n\n----------------------------------------\n\nTITLE: Deleting Organization Domain with Clerk Python SDK\nDESCRIPTION: Example showing how to delete a domain from an organization using the Clerk Python SDK. The code demonstrates authentication with a bearer token and making a delete request with organization and domain IDs.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationdomainssdk/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organization_domains.delete(organization_id=\"<id>\", domain_id=\"<id>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Error Response Configuration\nDESCRIPTION: Error types and corresponding status codes for template operations\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/emailandsmstemplates/README.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Error Type | Status Code | Content Type |\n| ---------------------------- | ---------------------------- | ---------------------------- |\n| models.ClerkErrors | 400, 401, 402, 403, 404, 422 | application/json |\n| models.SDKError | 4XX, 5XX | */\\* |\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Domain with Clerk Python SDK\nDESCRIPTION: Example showing how to update an organization domain's properties using the Clerk Python SDK. Updates domain verification status and enrollment mode with proper authentication.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/organizationdomainssdk/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.organization_domains.update(organization_id=\"<id>\", domain_id=\"<id>\", enrollment_mode=\"<value>\", verified=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Defining CreateOrganizationDomainRequestBody Fields in Markdown\nDESCRIPTION: This markdown table defines the fields for the CreateOrganizationDomainRequestBody class. It includes the field names, their types, whether they are required, and descriptions of each field.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createorganizationdomainrequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                                                                                     | Type                                                                                                                      | Required                                                                                                                  | Description                                                                                                               |\n| ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- |\n| `name`                                                                                                                    | *Optional[str]*                                                                                                           | :heavy_minus_sign:                                                                                                        | The name of the new domain                                                                                                |\n| `enrollment_mode`                                                                                                         | *Optional[str]*                                                                                                           | :heavy_minus_sign:                                                                                                        | The enrollment_mode for the new domain. This can be `automatic_invitation`, `automatic_suggestion` or `manual_invitation` |\n| `verified`                                                                                                                | *OptionalNullable[bool]*                                                                                                  | :heavy_minus_sign:                                                                                                        | The status of domain's verification. Defaults to true                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Creating Testing Token with Clerk Python SDK\nDESCRIPTION: Example of how to retrieve a new testing token using the Clerk Python SDK. The code demonstrates initializing the Clerk client with authentication and making a request to create a testing token.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/testingtokens/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.testing_tokens.create()\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Google One Tap Verification Model Usage in Python\nDESCRIPTION: Example showing the type annotation for Google One Tap verification model usage in Clerk SDK. This represents the structure for Google One Tap based external account verification.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/externalaccountwithverificationverification.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.GoogleOneTap = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Deleting OAuth Application with Clerk API in Python\nDESCRIPTION: This snippet demonstrates how to delete an OAuth application using the Clerk Backend API with the Python SDK. It requires a bearer token for authentication and the ID of the OAuth application to be deleted. The response is asserted to ensure it's not None, and then printed.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/oauthapplicationssdk/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.oauth_applications.delete(oauth_application_id=\"oauth_app_09876\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: OAuth Verification Model Usage in Python\nDESCRIPTION: Example showing the type annotation for OAuth verification model usage in Clerk SDK. This represents the structure for OAuth-based external account verification.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/externalaccountwithverificationverification.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.Oauth = /* values here */\n```\n\n----------------------------------------\n\nTITLE: Creating SAML Connection with Python Clerk SDK\nDESCRIPTION: This snippet demonstrates how to create a new SAML Connection using the Clerk SDK. The `request` parameter is mandatory and contains the necessary configuration for the SAML connection. An optional `retries` configuration can be included to customize the retry behavior of the client.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/samlconnectionssdk/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport clerk_backend_api\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.saml_connections.create(request={\n        \"name\": \"My SAML Connection\",\n        \"domain\": \"example.org\",\n        \"provider\": clerk_backend_api.Provider.SAML_CUSTOM,\n        \"idp_entity_id\": \"http://idp.example.org/\",\n        \"idp_sso_url\": \"http://idp.example.org/sso\",\n        \"idp_certificate\": \"MIIDdzCCAl+gAwIBAgIJAKcyBaiiz+DT...\",\n        \"idp_metadata_url\": \"http://idp.example.org/metadata.xml\",\n        \"idp_metadata\": \"<EntityDescriptor ...\",\n        \"organization_id\": \"<id>\",\n        \"attribute_mapping\": {\n            \"user_id\": \"nameid\",\n            \"email_address\": \"mail\",\n            \"first_name\": \"givenName\",\n            \"last_name\": \"surname\",\n        },\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Model in Python\nDESCRIPTION: This code snippet defines a SAML model using a type hint in Python. It is intended for initializing variables that will hold SAML data within the verification process.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/samlaccountverification.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.Saml = /* values here */\n```\n\n----------------------------------------\n\nTITLE: SAML Connection Request Fields Table\nDESCRIPTION: Markdown table defining the required fields for a SAML connection request. Specifies the saml_connection_id field as a required string parameter.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/getsamlconnectionrequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                         | Type                          | Required                      | Description                   | Example                       |\n| ----------------------------- | ----------------------------- | ----------------------------- | ----------------------------- | ----------------------------- |\n| `saml_connection_id`          | *str*                         | :heavy_check_mark:            | The ID of the SAML Connection | saml_conn_123                 |\n```\n\n----------------------------------------\n\nTITLE: Defining Verification Ticket Model in Python\nDESCRIPTION: This snippet defines a VerificationTicket model also with type hints in Python, used for managing verification ticket data in account verification scenarios.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/samlaccountverification.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvalue: models.VerificationTicket = /* values here */\n```\n\n----------------------------------------\n\nTITLE: External Account Class Declaration with Verification\nDESCRIPTION: Python class declaration for ExternalAccountWithVerification, which appears to be a model or data structure for handling external accounts that include verification functionality.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/externalaccountwithverification.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# ExternalAccountWithVerification\n```\n\n----------------------------------------\n\nTITLE: Defining CreateSessionTokenFromTemplateRequestBody Fields in Markdown\nDESCRIPTION: This markdown table defines the fields for the CreateSessionTokenFromTemplateRequestBody class. It includes the field name, type, requirement status, and description.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createsessiontokenfromtemplaterequestbody.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                                                  | Type                                                   | Required                                               | Description                                            |\n| ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ |\n| `expires_in_seconds`                                   | *OptionalNullable[float]*                              | :heavy_minus_sign:                                     | Use this parameter to override the JWT token lifetime. |\n```\n\n----------------------------------------\n\nTITLE: CodeType Enum Values Definition in Markdown\nDESCRIPTION: Defines the possible values for the CodeType enum in the Clerk Python SDK. The enum includes TOTP (Time-based One-Time Password) with value 'totp' and BACKUP_CODE with value 'backup_code'.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/codetype.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name          | Value         |\n| ------------- | ------------- |\n| `TOTP`        | totp          |\n| `BACKUP_CODE` | backup_code   |\n```\n\n----------------------------------------\n\nTITLE: Defining ClerkErrorsMeta Class Fields in Markdown\nDESCRIPTION: This snippet defines a markdown table for the fields of the ClerkErrorsMeta class. The table is currently empty, indicating that no fields have been defined yet or that this is a placeholder for future field definitions.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/clerkerrorsmeta.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field       | Type        | Required    | Description |\n| ----------- | ----------- | ----------- | ----------- |\n```\n\n----------------------------------------\n\nTITLE: Delete Organization Logo Request Fields Table\nDESCRIPTION: A markdown table defining the required fields for the DeleteOrganizationLogoRequest. The organization_id parameter is a required string that identifies the organization whose logo should be deleted.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/deleteorganizationlogorequest.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type | Required | Description | Example |\n| -------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------- |\n| `organization_id` | *str* | :heavy_check_mark: | The ID of the organization for which the logo will be deleted. | org_12345 |\n```\n\n----------------------------------------\n\nTITLE: Listing Clients with Clerk SDK in Python\nDESCRIPTION: This snippet demonstrates how to list all clients using the Clerk SDK. The operation is deprecated and expected to be removed in future releases. No pagination by default, unless specified.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/clients/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.clients.list(paginated=False)\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Defining Response and Error Types for Create Waitlist Entry API in Markdown\nDESCRIPTION: Markdown sections describing the expected response type and possible error scenarios for the create_waitlist_entry API call, including error types, status codes, and content types.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/waitlistentriessdk/README.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Response\n\n**[models.WaitlistEntry](../../models/waitlistentry.md)**\n\n### Errors\n\n| Error Type         | Status Code        | Content Type       |\n| ------------------ | ------------------ | ------------------ |\n| models.ClerkErrors | 400, 422           | application/json   |\n| models.SDKError    | 4XX, 5XX           | */*                |\n```\n\n----------------------------------------\n\nTITLE: Deleting a Blocklist Identifier in Clerk SDK (Python)\nDESCRIPTION: Removes a specific identifier from the block-list of a Clerk authentication instance. Requires a valid bearer token and the identifier's unique ID.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/blocklistidentifierssdk/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.blocklist_identifiers.delete(identifier_id=\"identifier123\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Standalone Python script using Clerk Backend API SDK with uv\nDESCRIPTION: Example of a standalone Python script using the Clerk Backend API SDK with uv package manager.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env -S uv run --script\n# /// script\n# requires-python = \">=3.9\"\n# dependencies = [\n#     \"clerk-backend-api\",\n# ]\n# ///\n\nfrom clerk_backend_api import Clerk\n\nsdk = Clerk(\n  # SDK arguments\n)\n\n# Rest of script here...\n```\n\n----------------------------------------\n\nTITLE: Deleting a JWT Template with Clerk Python SDK\nDESCRIPTION: Example of how to delete a JWT template using the Clerk Python SDK. The code authenticates with a bearer token and deletes a template by its ID.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/sdks/jwttemplates/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom clerk_backend_api import Clerk\n\n\nwith Clerk(\n    bearer_auth=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as clerk:\n\n    res = clerk.jwt_templates.delete(template_id=\"<id>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup Codes in Clerk Python SDK\nDESCRIPTION: Example of providing backup codes in plain format for a user in Clerk. Backup codes serve as a recovery method for multi-factor authentication when users can't access their primary authentication method.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/createuserrequestbody.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n[\n\"123456\",\n\"654321\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Accountless Application Constants in Python\nDESCRIPTION: Defines the constant value 'ACCOUNTLESS_APPLICATION' which maps to the string 'accountless_application' for use in the Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-python/blob/main/docs/models/accountlessapplicationobject.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nACCOUNTLESS_APPLICATION = accountless_application\n```"
  }
]