[
  {
    "owner": "it-gorillaz",
    "repo": "configify",
    "content": "TITLE: Installing @itgorillaz/configify via npm\nDESCRIPTION: Installs the @itgorillaz/configify package as a project dependency using the Node Package Manager (npm). This command adds the package to your node_modules directory and updates your package.json and package-lock.json files.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @itgorillaz/configify\n```\n\n----------------------------------------\n\nTITLE: Importing ConfigifyModule in a NestJS Application\nDESCRIPTION: Imports and initializes the ConfigifyModule within a NestJS application's root module (AppModule) using the forRootAsync method. This makes the configuration capabilities available throughout the application. Note the requirement to set `strictPropertyInitialization` to `false` in tsconfig.json when TypeScript's strict mode is enabled.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [ConfigifyModule.forRootAsync()],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Example .env File for Configuration\nDESCRIPTION: An example .env file defining two environment variables, APPLICATION_CLIENT_ID and APPLICATION_CLIENT_TOKEN. The configify module automatically looks for a .env file in the project root by default.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nAPPLICATION_CLIENT_ID=ABC\nAPPLICATION_CLIENT_TOKEN=TEST\n```\n\n----------------------------------------\n\nTITLE: Mapping .env Variables to a TypeScript Configuration Class\nDESCRIPTION: Demonstrates mapping environment variables (like those in a .env file) to properties of a TypeScript class using the @Configuration decorator for the class and the @Value decorator for each property. The string argument in @Value corresponds to the environment variable name.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration()\nexport class ApplicationClientConfig {\n  @Value('APPLICATION_CLIENT_ID')\n  appClientId: string;\n\n  @Value('APPLICATION_CLIENT_TOKEN')\n  appClientToken: string\n}\n```\n\n----------------------------------------\n\nTITLE: Example application.yml File for Configuration\nDESCRIPTION: An example application.yml file defining nested configuration properties for a database, including host, port, username, password, and complex metadata as a multiline JSON string. The configify module looks for application.yml in the project root by default.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: localhost\n  port: 3306\n  username: test\n  password: test\n  metadata: |\n    {\n      \"label\": \"staging\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Mapping YAML Properties to a TypeScript Configuration Class\nDESCRIPTION: Shows how to map properties from a YAML configuration file (e.g., application.yml) to a TypeScript class using @Configuration and @Value. It demonstrates using dot notation ('database.host') for nested properties and includes the 'parse' option within @Value to convert string values to other types (e.g., number via parseInt, JSON object via JSON.parse).\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration()\nexport class DatabaseConfiguration {\n  @Value('database.host')\n  host: string;\n\n  @Value('database.port', {\n    parse: parseInt\n  })\n  port: number;\n\n  @Value('database.metadata', {\n    parse: JSON.parse\n  })\n  metadata: MetadataType;\n}\n```\n\n----------------------------------------\n\nTITLE: Example .env File for Multiple Configuration Classes\nDESCRIPTION: A .env file containing configuration variables grouped logically (using comments) for different concerns (database and Okta authentication). This structure is intended to be mapped to separate, dedicated configuration classes.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n# database config\nDATABASE_HOST=localhost\nDATABASE_USER=test\nDATABASE_PASSWORD=test\n\n# okta config\nOKTA_API_TOKEN=test\nOKTA_CLIENT_ID=test\n```\n\n----------------------------------------\n\nTITLE: Mapping Configuration to Multiple TypeScript Classes\nDESCRIPTION: Illustrates how configuration values (e.g., from a single .env or YAML file) can be mapped to multiple distinct TypeScript classes, each decorated with @Configuration. This promotes separation of concerns for different configuration areas (e.g., DatabaseConfiguration, OktaConfiguration). The actual property mapping using @Value is omitted for brevity but follows the previous examples.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration()\nexport class DatabaseConfiguration {\n  // database configuration attributes\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration()\nexport class OktaConfiguration {\n  // okta configuration attributes\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Configuration Classes into NestJS Services\nDESCRIPTION: Demonstrates how to inject a configuration class instance (MyConfig, assumed to be decorated with @Configuration) into a NestJS service (AppService) using constructor injection. The configify module makes @Configuration classes globally available, allowing NestJS's dependency injection system to provide them where requested.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AppService {\n  private readonly LOGGER = new Logger(AppService.name);\n\n  constructor(private readonly config: MyConfig) {\n    this.LOGGER.log(JSON.stringify(config));\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example .env File with Variable Expansion\nDESCRIPTION: Shows variable expansion within a .env file, a feature enabled by default in configify. Values can reference other variables defined within the same file or environment using `${VARIABLE_NAME}` syntax. It also demonstrates providing a default value using `${NON_EXISTING_ENV:-DEFAULT_VALUE}` syntax if the referenced variable is not set.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nMY_API_KEY=${MY_SECRET} // --> MY_API_KEY=TEST\nANY_OTHER_CONFIG=TEST\nMY_SECRET=TEST\nAPP_CLIENT_ID=${NON_EXISTING_ENV:-DEFAULT_ID} // --> APP_CLIENT_ID=DEFAULT_ID\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values using @Value Decorator Options\nDESCRIPTION: Illustrates setting default values for configuration properties directly within the @Value decorator using the 'default' option. This provides a fallback if the corresponding environment variable or configuration file entry (e.g., 'DB_HOST', 'DB_PORT') is missing. It also shows combining 'default' with the 'parse' option.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration()\nexport class DatabaseConfiguration {\n  @Value('DB_HOST', { default: 'localhost' })\n  host: string;\n\n  @Value('DB_PORT', {\n    parse: parseInt,\n    default: 3306\n  })\n  port: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Example YAML with JSON String Value for Parsing\nDESCRIPTION: An example YAML configuration snippet where a value ('db-json-config') is a multiline string containing structured JSON data. This format requires explicit parsing in the corresponding TypeScript configuration class to be used as an object.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndb-json-config: |\n  {\n    \"host\": \"localhost\",\n    \"user\": \"test\",\n    \"password\": \"test\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Parsing Configuration Values using @Value Decorator\nDESCRIPTION: Shows how to parse complex string values (like a JSON string from YAML or .env) into specific TypeScript types (e.g., a MyDBConfig interface) using the 'parse' option in the @Value decorator. This option accepts a function (like JSON.parse) that transforms the raw string value into the desired type.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MyDBConfig {\n  host: string;\n  user: string;\n  password: string;\n}\n\n@Configuration()\nexport class SuperSecretConfiguration {\n  @Value('db-json-config', {\n    parse: JSON.parse\n  })\n  myDbConfig: MyDBConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Configuration Classes with class-validator\nDESCRIPTION: Demonstrates integrating the class-validator library decorators (e.g., @IsEmail, @IsNotEmpty) with @Configuration classes. This allows for runtime validation of configuration values when the application loads, ensuring required formats or presence before the application starts serving requests. If validation fails, the application bootstrap process typically halts.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration()\nexport class MyConfiguration {\n  @IsEmail()\n  @Value('SENDER_EMAIL')\n  senderEmail: string;\n\n  @IsNotEmpty()\n  @Value('my-api-token')\n  myApiToken: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Module Options for ConfigifyModule\nDESCRIPTION: Illustrates the structure and available properties of the options object that can be passed to ConfigifyModule.forRootAsync(). This allows customization of default behaviors such as ignoring specific configuration sources (files/env vars), specifying custom config file paths, disabling variable expansion, or providing custom strategies for resolving secrets from external sources.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* Ignores any config file.\n* The default value is false;\n*/\nignoreConfigFile?: boolean;\n\n/**\n* Ignores environment variables\n* The default value is false;\n*/\nignoreEnvVars?: boolean;\n\n/**\n* The path of the configuration files\n*/\nconfigFilePath?: string | string[];\n\n/**\n* Expands variables\n* The default value is true\n*/\nexpandConfig?: boolean;\n\n/**\n * The secrets resolvers strategies\n */\nsecretsResolverStrategies?: ConfigurationResolver[];\n```\n\n----------------------------------------\n\nTITLE: Running the example application with Docker\nDESCRIPTION: Commands to run the example application using either Docker Compose or npm.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/aws-secrets-example/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK dependencies\nDESCRIPTION: Command to install the required AWS SDK packages for Parameter Store and Secrets Manager integration.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/aws-secrets-example/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-ssm @aws-sdk/client-secrets-manager\n```\n\n----------------------------------------\n\nTITLE: Initializing ConfigifyModule with default AWS resolvers\nDESCRIPTION: NestJS module configuration to initialize Configify with default AWS Parameter Store and Secrets Manager resolvers.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/aws-secrets-example/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n@Module({\n  imports: [\n    ConfigifyModule.forRootAsync({\n      secretsResolverStrategies: [\n        AwsSecretsResolverFactory.defaultSecretsManagerResolver(),\n        AwsSecretsResolverFactory.defaultParameterStoreResolver(),\n      ],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Initializing ConfigifyModule with custom AWS client\nDESCRIPTION: NestJS module configuration to initialize Configify with a custom instance of the AWS SDK client for Parameter Store.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/aws-secrets-example/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SSMClient } from '@aws-sdk/client-ssm';\nimport {\n  ConfigifyModule,\n  RemoteConfigurationResolver,\n} from '@itgorillaz/configify';\nimport { AwsParameterStoreConfigurationResolver } from '@itgorillaz/configify/configuration/resolvers/aws';\n\n@Module({\n  imports: [\n    ConfigifyModule.forRootAsync({\n      secretsResolverStrategies: [\n        new RemoteConfigurationResolver(\n          new AwsParameterStoreConfigurationResolver(new SSMClient()),\n        ),\n      ],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating a configuration class with AWS Parameter Store values\nDESCRIPTION: Defining a NestJS configuration class that uses the @Value decorator to retrieve values from AWS Parameter Store.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/aws-secrets-example/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n@Configuration()\nexport class DatabaseConfiguration {\n  @Value('AWS_PARAMETER_STORE_DB_PASSWORD')\n  dbPassword: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting configuration values into a NestJS service\nDESCRIPTION: Example of how to inject the configuration class into a NestJS service to access the resolved values.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/aws-secrets-example/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n@Injectable()\nexport class MyService {\n  constructor(private readonly config: DatabaseConfiguration) {}\n}\n```\n\n----------------------------------------\n\nTITLE: GCP Authentication and Package Installation (Bash)\nDESCRIPTION: Authenticates with Google Cloud and installs project dependencies. It then starts the application.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/gcp-secrets-example/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\nnpm install && npm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Secret Manager Dependency (Bash)\nDESCRIPTION: Installs the Google Cloud Secret Manager package using npm.  This is a prerequisite for accessing secrets stored in GCP Secret Manager.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/gcp-secrets-example/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @google-cloud/secret-manager\n```\n\n----------------------------------------\n\nTITLE: Configuring Configify Module with GCP Secrets Resolver (JavaScript)\nDESCRIPTION: Configures the Configify module to use the Google Cloud Secret Manager for resolving secrets. It imports necessary modules and uses the `GoogleCloudSecretsResolverFactory` to create a resolver instance.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/gcp-secrets-example/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConfigifyModule } from '@itgorillaz/configify';\nimport { GoogleCloudSecretsResolverFactory } from '@itgorillaz/configify/configuration/resolvers/gcp';\n\n@Module({\n  imports: [\n    ConfigifyModule.forRootAsync({\n      secretsResolverStrategies: [\n        GoogleCloudSecretsResolverFactory.defaultSecretManagerConfigurationResolver(),\n      ],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Configify with Custom Secret Manager Client (JavaScript)\nDESCRIPTION: Configures the Configify module using a custom instance of `SecretManagerServiceClient` for resolving secrets. It creates a `RemoteConfigurationResolver` with a `GoogleCloudSecretManagerConfigurationResolver` instance using the custom client.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/gcp-secrets-example/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SecretManagerServiceClient } from '@google-cloud/secret-manager';\nimport {\n  ConfigifyModule,\n  RemoteConfigurationResolver,\n} from '@itgorillaz/configify';\nimport { GoogleCloudSecretManagerConfigurationResolver } from '@itgorillaz/configify/configuration/resolvers/gcp';\n\n@Module({\n  imports: [\n    ConfigifyModule.forRootAsync({\n      secretsResolverStrategies: [\n        new RemoteConfigurationResolver(\n          new GoogleCloudSecretManagerConfigurationResolver(\n            new SecretManagerServiceClient(),\n          ),\n        ),\n      ],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Setting GCP Secret in .env file\nDESCRIPTION: Example of how to set the secret id for the password in the .env file. This is for demonstration, the actual password should be stored in GCP Secret Manager and its ID referenced here.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/gcp-secrets-example/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nGCP_SECRET_MANAGER_DB_PASSWORD=secret-id\n```\n\n----------------------------------------\n\nTITLE: Declaring Configuration with @Value Decorator (JavaScript)\nDESCRIPTION: Demonstrates how to declare a configuration property using the `@Value` decorator to inject a secret from GCP Secret Manager. The environment variable `GCP_SECRET_MANAGER_DB_PASSWORD` is bound to the `dbPassword` property.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/gcp-secrets-example/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n@Configuration()\nexport class DatabaseConfiguration {\n  @Value('GCP_SECRET_MANAGER_DB_PASSWORD')\n  dbPassword: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Configuration in a Service (JavaScript)\nDESCRIPTION: Shows how to inject a configuration class into a service using dependency injection. The `DatabaseConfiguration` class is injected into the `MyService` constructor.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/gcp-secrets-example/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n@Injectable()\nexport class MyService {\n  constructor(private readonly config: DatabaseConfiguration) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Azure Key Vault integration with npm\nDESCRIPTION: Installs required npm packages to enable Azure Key Vault secret resolution, namely @azure/identity and @azure/keyvault-secrets. This step is essential to authenticate and interact with Azure Key Vault services within the application.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/azure-secrets-example/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @azure/identity @azure/keyvault-secrets\n```\n\n----------------------------------------\n\nTITLE: Running the Node.js application with npm\nDESCRIPTION: Executes installation of all dependencies and starts the application using npm scripts. This snippet assumes the prior setup of environment variables and Azure Key Vault secrets as per instructions.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/azure-secrets-example/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && npm run start\n```\n\n----------------------------------------\n\nTITLE: Initializing Configify Module with AzureKeyVaultConfigurationResolver in TypeScript\nDESCRIPTION: Demonstrates importing and configuring the ConfigifyModule for asynchronous setup in a NestJS application. It uses the AzureKeyVaultConfigurationResolverFactory to create a default secret resolver strategy that connects to Azure Key Vault. If no URL parameter is provided, the resolver falls back to the AZURE_KEYVAULT_URL environment variable.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/azure-secrets-example/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigifyModule } from '@itgorillaz/configify';\nimport { AzureKeyVaultConfigurationResolverFactory } from '@itgorillaz/configify/configuration/resolvers/azure';\n\n@Module({\n  imports: [\n    ConfigifyModule.forRootAsync({\n      secretsResolverStrategies: [\n        AzureKeyVaultConfigurationResolverFactory.defaultKeyVaultConfigurationResolver(),\n      ],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Custom Azure Key Vault SecretClient integration with Configify Module in TypeScript\nDESCRIPTION: Shows how to manually instantiate the Azure SDK SecretClient with DefaultAzureCredential and use it within Configify's RemoteConfigurationResolver. This approach allows for fine-grained control over the Azure Key Vault client instance and credentials management rather than relying on default factory methods.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/azure-secrets-example/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\nimport {\n  ConfigifyModule,\n  RemoteConfigurationResolver,\n} from '@itgorillaz/configify';\nimport { AzureKeyVaultConfigurationResolverFactory } from '@itgorillaz/configify/configuration/resolvers/azure';\n\n@Module({\n  imports: [\n    ConfigifyModule.forRootAsync({\n      secretsResolverStrategies: [\n        new RemoteConfigurationResolver(\n          new AzureKeyVaultConfigurationResolver(\n            new SecretClient(\n              'your-key-vault-url',\n              new DefaultAzureCredential(),\n            ),\n          ),\n        ),\n      ],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Environment variable and configuration property mapping to Azure Key Vault secrets\nDESCRIPTION: Illustrates how environment variables prefixed with AZURE_KEY_VAULT, or corresponding YAML/JSON keys named azure-key-vault can be mapped to secrets in Azure Key Vault. An example shows a .env file entry linking a database password variable to an Azure Key Vault secret ID, along with a NestJS configuration class using the @Value decorator to inject that secret.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/azure-secrets-example/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_KEY_VAULT_DB_PASSWORD=key-vault-secret-id\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration()\nexport class DatabaseConfiguration {\n  @Value('AZURE_KEY_VAULT_DB_PASSWORD')\n  dbPassword: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting configuration into a service class using NestJS dependency injection\nDESCRIPTION: Shows how to inject a configuration class (that holds Azure Key Vault secrets) into any NestJS service where configuration values are needed. This pattern leverages NestJS's dependency injection to make secret configuration accessible within application services.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/azure-secrets-example/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class MyService {\n  constructor(private readonly config: DatabaseConfiguration) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Configify Bitwarden Example (Shell)\nDESCRIPTION: This command block provides the steps to set up and run the example application. It involves exporting the Bitwarden access token as an environment variable, installing project dependencies, and starting the application using npm scripts.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/bitwarden-secrets-example/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nexport BWS_ACCESS_TOKEN=your-access-token\nnpm install && npm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Bitwarden SDK Dependency (Shell)\nDESCRIPTION: This command installs the required dependency for interacting with Bitwarden Secrets Manager from Node.js. The `@bitwarden/sdk-napi` package is necessary for the Bitwarden resolver to function correctly.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/bitwarden-secrets-example/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @bitwarden/sdk-napi\n```\n\n----------------------------------------\n\nTITLE: Configuring Configify with Default Bitwarden Resolver (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the ConfigifyModule in a NestJS application to use the default Bitwarden Secrets Manager resolver. It uses `forRootAsync` for asynchronous setup and `BitwardenSecretsResolverFactory.defaultBitwardenSecretsResolver`, which automatically looks for the `BWS_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/bitwarden-secrets-example/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { ConfigifyModule } from '@itgorillaz/configify';\nimport {\n  BitwardenSecretsResolverFactory,\n  BitwardenServerRegion,\n} from '@itgorillaz/configify/configuration/resolvers/bitwarden';\n\n@Module({\n  imports: [\n    ConfigifyModule.forRootAsync({\n      secretsResolverStrategies: [\n        BitwardenSecretsResolverFactory.defaultBitwardenSecretsResolver(\n          BitwardenServerRegion.EU,\n        ),\n      ],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Configify with Custom Bitwarden Client (TypeScript)\nDESCRIPTION: This configuration alternative shows how to set up the ConfigifyModule using a manually instantiated `BitwardenClient`. This allows for more control over client settings like API URLs and user agent. The access token is provided directly to the resolver instance.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/bitwarden-secrets-example/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  BitwardenClient,\n  ClientSettings,\n  DeviceType,\n} from '@bitwarden/sdk-napi';\nimport {\n  ConfigifyModule,\n  RemoteConfigurationResolver,\n} from '@itgorillaz/configify';\nimport { BitwardenSecretsManagerConfigurationResolver } from '@itgorillaz/configify/configuration/resolvers/bitwarden';\n\n@Module({\n  imports: [\n    ConfigifyModule.forRootAsync({\n      secretsResolverStrategies: [\n        new RemoteConfigurationResolver(\n          new BitwardenSecretsManagerConfigurationResolver(\n            new BitwardenClient({\n              apiUrl: 'https://api.bitwarden.com',\n              identityUrl: 'https://identity.bitwarden.com',\n              userAgent: 'Bitwarden SDK',\n              deviceType: DeviceType.SDK,\n            }),\n            'your-access-token',\n          ),\n        ),\n      ],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining Bitwarden Secret ID in .env (Plaintext)\nDESCRIPTION: This snippet illustrates how a Bitwarden secret ID is typically represented in a `.env` file. The key uses the prefix `BITWARDEN_SECRETS_MANAGER_` followed by the configuration key, and the value is the actual Bitwarden secret ID.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/bitwarden-secrets-example/README.md#_snippet_4\n\nLANGUAGE: Plaintext\nCODE:\n```\nBITWARDEN_SECRETS_MANAGER_DB_PASSWORD=secret-id\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Class with Bitwarden Secret (TypeScript)\nDESCRIPTION: This code defines a TypeScript class using Configify decorators to map a specific configuration key to a class property. The `@Configuration()` decorator marks the class, and `@Value('BITWARDEN_SECRETS_MANAGER_DB_PASSWORD')` specifies which key Configify should resolve from the configured sources (including Bitwarden) and assign to the `dbPassword` property.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/bitwarden-secrets-example/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n@Configuration()\nexport class DatabaseConfiguration {\n  @Value('BITWARDEN_SECRETS_MANAGER_DB_PASSWORD')\n  dbPassword: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Configuration Class (TypeScript)\nDESCRIPTION: This example shows how to inject the defined configuration class into a service using standard NestJS dependency injection. Once injected, the service can access the resolved configuration values, which were fetched from Bitwarden Secrets Manager by Configify.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/bitwarden-secrets-example/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n@Injectable()\nexport class MyService {\n  constructor(private readonly config: DatabaseConfiguration) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Secret Resolver in Configify with TypeScript\nDESCRIPTION: This snippet implements a custom configuration resolver by extending the RemoteConfigurationResolverStrategy interface. It defines how secret values are dynamically fetched from a remote endpoint using Axios based on a key or identifier. Dependencies include '@itgorillaz/configify', 'axios', and NestJS's @Injectable decorator. The class requires a URL and an Axios instance as parameters. It expects a remote endpoint returning a JSON object with a 'value' property. Outputs are promise-based and return either the secret as a string or undefined if not found.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/custom-secrets-example/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RemoteConfigurationResolverStrategy } from '@itgorillaz/configify';\nimport { Axios } from 'axios';\n\ninterface CustomSecret {\n  value: string;\n}\n\n@Injectable()\nexport class CustomConfigurationResolver\n  implements RemoteConfigurationResolverStrategy\n{\n  configurationKeys: readonly string[] = ['CUSTOM_SECRET', 'custom-secret'];\n\n  constructor(\n    private readonly url: string,\n    private readonly axios: Axios,\n  ) {}\n\n  async resolveSecretValue(id: string): Promise<string | undefined> {\n    const secretId = `${this.url}/${id}`;\n    const result = await this.axios.get<CustomSecret>(secretId);\n    return result.data.value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Secret Resolver with ConfigifyModule in NestJS (TypeScript)\nDESCRIPTION: This snippet shows how to register a custom RemoteConfigurationResolver with the ConfigifyModule in a NestJS application. It demonstrates using the forRootAsync method to provide a list of secretsResolverStrategies, including the custom resolver instance. Required dependencies are @itgorillaz/configify, the custom resolver class, and standard NestJS module structure. The main input is an endpoint URL for the resolver, and the output is a configured module with injected secret handling. This enables dynamic secret value retrieval based on specified environment keys.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/custom-secrets-example/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  ConfigifyModule,\n  RemoteConfigurationResolver,\n} from '@itgorillaz/configify';\n\n@Module({\n  imports: [\n    ConfigifyModule.forRootAsync({\n      secretsResolverStrategies: [\n        new RemoteConfigurationResolver(\n          new CustomConfigurationResolver('any-endpoint-url', new Axios()),\n        ),\n      ],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining and Injecting Secret-Based Configuration in NestJS with TypeScript\nDESCRIPTION: This snippet provides an example of defining a configuration class that reads a secret value from the environment using the @Configuration and @Value decorators. The DatabaseConfiguration class exposes a property 'dbPassword' that retrieves the secret mapped to the 'CUSTOM_SECRET_DB_PASSWORD' environment variable. Required dependencies are the configuration decorators and the configured secret resolver. The expected input is an environment variable or key set for a database password secret, and the output is the property being available for dependency injection elsewhere in the application.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/custom-secrets-example/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Configuration()\nexport class DatabaseConfiguration {\n  @Value('CUSTOM_SECRET_DB_PASSWORD')\n  dbPassword: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Secret-Driven Configuration into a Service in NestJS (TypeScript)\nDESCRIPTION: This snippet illustrates injecting the custom configuration class into a service using dependency injection. MyService receives an instance of DatabaseConfiguration, exposing the resolved database password. The main dependency is the custom configuration class, and the feature depends on prior resolver/module setup. There are no unique inputs or outputs at this injection point; the resolved values are now accessible as standard typed properties.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/custom-secrets-example/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Injectable()\nexport class MyService {\n  constructor(private readonly config: DatabaseConfiguration) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Environment variable configuration for AWS Parameter Store\nDESCRIPTION: Example .env file entry that maps an environment variable to an AWS Parameter Store path.\nSOURCE: https://github.com/it-gorillaz/configify/blob/master/examples/aws-secrets-example/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nAWS_PARAMETER_STORE_DB_PASSWORD=/my/db/password\n```"
  }
]