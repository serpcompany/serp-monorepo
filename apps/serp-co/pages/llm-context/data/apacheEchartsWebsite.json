[
  {
    "owner": "apache",
    "repo": "echarts-website",
    "content": "TITLE: Configuring ECharts Candlestick Chart for Shanghai Index 2015\nDESCRIPTION: This snippet sets up the option configuration for an ECharts candlestick chart. It processes raw data, configures axes, and defines visual styles to display the Shanghai Stock Exchange Index for 2015. The chart includes tooltips, data zoom, and custom color schemes.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/candlestick-sh-2015.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  dataset: {\n    source: rawData\n  },\n  title: {\n    text: 'ShangHai Index, 2015'\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'line'\n    }\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: false\n      }\n    }\n  },\n  grid: [\n    {\n      left: '10%',\n      right: '10%',\n      bottom: 200\n    },\n    {\n      left: '10%',\n      right: '10%',\n      height: 80,\n      bottom: 80\n    }\n  ],\n  xAxis: [\n    {\n      type: 'category',\n      scale: true,\n      boundaryGap: false,\n      axisLine: { onZero: false },\n      splitLine: { show: false },\n      min: 'dataMin',\n      max: 'dataMax'\n    },\n    {\n      type: 'category',\n      gridIndex: 1,\n      scale: true,\n      boundaryGap: false,\n      axisLine: { onZero: false },\n      axisTick: { show: false },\n      splitLine: { show: false },\n      axisLabel: { show: false },\n      min: 'dataMin',\n      max: 'dataMax'\n    }\n  ],\n  yAxis: [\n    {\n      scale: true,\n      splitArea: {\n        show: true\n      }\n    },\n    {\n      scale: true,\n      gridIndex: 1,\n      splitNumber: 2,\n      axisLabel: { show: false },\n      axisLine: { show: false },\n      axisTick: { show: false },\n      splitLine: { show: false }\n    }\n  ],\n  dataZoom: [\n    {\n      type: 'inside',\n      xAxisIndex: [0, 1],\n      start: 10,\n      end: 100\n    },\n    {\n      show: true,\n      xAxisIndex: [0, 1],\n      type: 'slider',\n      bottom: 10,\n      start: 10,\n      end: 100\n    }\n  ],\n  visualMap: {\n    show: false,\n    seriesIndex: 1,\n    dimension: 6,\n    pieces: [\n      {\n        value: 1,\n        color: downColor\n      },\n      {\n        value: -1,\n        color: upColor\n      }\n    ]\n  },\n  series: [\n    {\n      type: 'candlestick',\n      itemStyle: {\n        color: upColor,\n        color0: downColor,\n        borderColor: upBorderColor,\n        borderColor0: downBorderColor\n      },\n      encode: {\n        x: 0,\n        y: [1, 4, 3, 2]\n      }\n    },\n    {\n      name: 'Volumn',\n      type: 'bar',\n      xAxisIndex: 1,\n      yAxisIndex: 1,\n      itemStyle: {\n        color: '#7fbe9e'\n      },\n      large: true,\n      encode: {\n        x: 0,\n        y: 5\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Scatter Matrix Chart in Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to set up a scatter matrix chart using Apache ECharts. It includes configuration for dimensions, visual encoding, axis setup, and data processing. The chart visualizes relationships between multiple variables in a grid of scatter plots.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-matrix.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    formatter: function (param) {\n      return [\n        'Group ' + param.data[0] + ': ',\n        'x: ' + param.data[1],\n        'y: ' + param.data[2],\n        'z: ' + param.data[3]\n      ].join('<br/>');\n    }\n  },\n  parallelAxis: [\n    { dim: 0, name: 'Price' },\n    { dim: 1, name: 'Net Weight' },\n    { dim: 2, name: 'Amount' },\n    {\n      dim: 3,\n      name: 'Score',\n      type: 'category',\n      data: ['Excellent', 'Good', 'OK', 'Bad']\n    }\n  ],\n  parallel: {\n    left: '5%',\n    right: '13%',\n    bottom: '10%',\n    top: '20%'\n  },\n  series: {\n    type: 'parallel',\n    lineStyle: {\n      width: 1\n    },\n    data: [\n      [12.99, 100, 82, 'Good'],\n      [9.99, 80, 77, 'OK'],\n      [20, 120, 60, 'Excellent']\n    ]\n  },\n  visualMap: {\n    show: true,\n    min: 0,\n    max: 150,\n    dimension: 1,\n    inRange: {\n      color: ['#d94e5d', '#eac736', '#50a3ba'].reverse()\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Smoothed Line Chart with Apache ECharts in JavaScript\nDESCRIPTION: This code snippet sets up the configuration for a smoothed line chart using Apache ECharts. It defines multiple data series with smoothed lines, custom colors, and area styling. The chart includes a legend, x-axis labels, and tooltip.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-smooth.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\n      type: 'line',\n      smooth: true\n    },\n    {\n      data: [620, 732, 701, 734, 1090, 1130, 1120],\n      type: 'line',\n      smooth: true\n    },\n    {\n      data: [120, 132, 101, 134, 290, 230, 220],\n      type: 'line',\n      smooth: true\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Data and Creating Linear Regression Chart with Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to generate random data points, calculate a linear regression line, and create a scatter plot with the regression line using Apache ECharts. It sets up the chart options, including axes, series, and tooltip configurations.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-linear-regression.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  dataset: [\n    {\n      source: [\n        [1, 4862.4],\n        [2, 5294.7],\n        [3, 5934.5],\n        [4, 7171.0],\n        [5, 8964.4],\n        [6, 10202.2],\n        [7, 11962.5],\n        [8, 14928.3],\n        [9, 16909.2],\n        [10, 18547.9],\n        [11, 21617.8],\n        [12, 26638.1],\n        [13, 34634.4],\n        [14, 46759.4],\n        [15, 58478.1],\n        [16, 67884.6],\n        [17, 74462.6],\n        [18, 79395.7]\n      ]\n    },\n    {\n      transform: {\n        type: 'ecStat:regression',\n        config: {\n          method: 'linear',\n          formulaOn: 'end'\n        }\n      }\n    }\n  ],\n  title: {\n    text: 'Linear Regression',\n    subtext: 'By ecStat.regression',\n    sublink: 'https://github.com/ecomfe/echarts-stat',\n    left: 'center'\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    }\n  },\n  xAxis: {\n    splitLine: {\n      lineStyle: {\n        type: 'dashed'\n      }\n    }\n  },\n  yAxis: {\n    splitLine: {\n      lineStyle: {\n        type: 'dashed'\n      }\n    }\n  },\n  series: [\n    {\n      name: 'scatter',\n      type: 'scatter',\n      datasetIndex: 0\n    },\n    {\n      name: 'line',\n      type: 'line',\n      smooth: true,\n      datasetIndex: 1,\n      symbolSize: 0.1,\n      symbol: 'circle',\n      label: { show: true, fontSize: 16 },\n      labelLayout: { dx: -20 },\n      encode: { label: 2, tooltip: 1 }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot of Black Cherry Tree Girths with Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to create a scatter plot using Apache ECharts to visualize the relationship between the height and girth of black cherry trees. It includes data preprocessing to extract relevant information and configures the chart with appropriate axes, series, and visual properties.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/bar-histogram.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$.get('data/asset/data/treesGirthHeight.json', function (data) {\n    var dataGirth = data.map(function (item) {\n        return item[1];\n    });\n    var dataHeight = data.map(function (item) {\n        return item[2];\n    });\n    myChart.setOption({\n        title: {\n            text: 'Girths of Black Cherry Trees',\n            left: 'center'\n        },\n        xAxis: {\n            name: 'Girth',\n            nameLocation: 'middle',\n            nameGap: 25\n        },\n        yAxis: {\n            name: 'Height'\n        },\n        tooltip: {\n            trigger: 'item'\n        },\n        series: [{\n            type: 'scatter',\n            name: 'Height-Girth',\n            data: data.map(function (item, idx) {\n                return {\n                    value: item.slice(1),\n                    name: item[0]\n                };\n            }),\n            symbolSize: function (value) {\n                return value[2] / 5;\n            }\n        }]\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring World Population Scatter Plot with Apache ECharts (JavaScript)\nDESCRIPTION: This code snippet defines the configuration for an Apache ECharts scatter plot visualization of world population data for 2011. It sets up the chart options including axis labels, data points, and visual encoding for population size and GDP.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-world-population.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  backgroundColor: new echarts.graphic.RadialGradient(0.3, 0.3, 0.8, [\n    {\n      offset: 0,\n      color: '#f7f8fa'\n    },\n    {\n      offset: 1,\n      color: '#cdd0d5'\n    }\n  ]),\n  title: {\n    text: 'World Population (2011)'\n  },\n  legend: {\n    right: 10,\n    data: ['1990', '2015']\n  },\n  xAxis: {\n    splitLine: {\n      lineStyle: {\n        type: 'dashed'\n      }\n    }\n  },\n  yAxis: {\n    splitLine: {\n      lineStyle: {\n        type: 'dashed'\n      }\n    },\n    scale: true\n  },\n  series: [\n    {\n      name: '1990',\n      data: data[0],\n      type: 'scatter',\n      symbolSize: function (data) {\n        return Math.sqrt(data[2]) / 5e2;\n      },\n      emphasis: {\n        focus: 'series',\n        label: {\n          show: true,\n          formatter: function (param) {\n            return param.data[3];\n          },\n          position: 'top'\n        }\n      },\n      itemStyle: {\n        shadowBlur: 10,\n        shadowColor: 'rgba(120, 36, 50, 0.5)',\n        shadowOffsetY: 5,\n        color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [\n          {\n            offset: 0,\n            color: 'rgb(251, 118, 123)'\n          },\n          {\n            offset: 1,\n            color: 'rgb(204, 46, 72)'\n          }\n        ])\n      }\n    },\n    {\n      name: '2015',\n      data: data[1],\n      type: 'scatter',\n      symbolSize: function (data) {\n        return Math.sqrt(data[2]) / 5e2;\n      },\n      emphasis: {\n        focus: 'series',\n        label: {\n          show: true,\n          formatter: function (param) {\n            return param.data[3];\n          },\n          position: 'top'\n        }\n      },\n      itemStyle: {\n        shadowBlur: 10,\n        shadowColor: 'rgba(25, 100, 150, 0.5)',\n        shadowOffsetY: 5,\n        color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [\n          {\n            offset: 0,\n            color: 'rgb(129, 227, 238)'\n          },\n          {\n            offset: 1,\n            color: 'rgb(25, 183, 207)'\n          }\n        ])\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Candlestick Chart in JavaScript with Apache ECharts\nDESCRIPTION: This code snippet sets up the configuration for a basic candlestick chart using Apache ECharts. It defines the chart type, data, x-axis categories, and visual styles for the candlesticks.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/candlestick-simple.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  xAxis: {\n    data: ['2017-10-24', '2017-10-25', '2017-10-26', '2017-10-27']\n  },\n  yAxis: {},\n  series: [\n    {\n      type: 'candlestick',\n      data: [\n        [20, 34, 10, 38],\n        [40, 35, 30, 50],\n        [31, 38, 33, 44],\n        [38, 15, 5, 42]\n      ]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ECharts Scatter Chart with Exponential Regression Line\nDESCRIPTION: This snippet sets up the ECharts options for rendering a scatter chart with the generated data points and the calculated exponential regression line. It configures the chart's appearance, axes, and series.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-exponential-regression.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n    title: {\n        text: 'Exponential Regression',\n        left: 'center'\n    },\n    tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n            type: 'cross'\n        }\n    },\n    xAxis: {\n        type: 'value',\n        splitLine: {\n            lineStyle: {\n                type: 'dashed'\n            }\n        },\n        splitNumber: 20\n    },\n    yAxis: {\n        type: 'value',\n        splitLine: {\n            lineStyle: {\n                type: 'dashed'\n            }\n        }\n    },\n    series: [\n        {\n            name: 'scatter',\n            type: 'scatter',\n            emphasis: {\n                focus: 'series'\n            },\n            data: data\n        },\n        {\n            name: 'line',\n            type: 'line',\n            showSymbol: false,\n            emphasis: {\n                focus: 'series'\n            },\n            data: exponentialRegressionLine(a, b, data),\n            markPoint: {\n                itemStyle: {\n                    color: 'transparent'\n                },\n                label: {\n                    formatter: 'y = ' + a.toFixed(2) + ' * e^(' + b.toFixed(2) + 'x)',\n                    position: 'top',\n                    color: '#555',\n                    backgroundColor: 'rgba(255,255,255,0.7)',\n                    padding: [8, 16]\n                },\n                data: [\n                    { coord: [data[data.length - 1][0], a * Math.exp(b * data[data.length - 1][0])] }\n                ]\n            }\n        }\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Data Chart with Time Axis in ECharts\nDESCRIPTION: This code creates a real-time line chart that displays dynamic data on a time axis. It initializes an empty chart with time-based x-axis and numerical y-axis, then updates the data every second with new random values while maintaining a rolling window of the most recent data points.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/dynamic-data2.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html style=\"height: 100%\">\n  <head>\n    <meta charset=\"utf-8\">\n  </head>\n  <body style=\"height: 100%; margin: 0\">\n    <div id=\"container\" style=\"height: 100%\"></div>\n\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js\"></script>\n    <!-- Uncomment this line if you want to dataTool extension\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/extension/dataTool.min.js\"></script>\n    -->\n    <!-- Uncomment this line if you want to use gl extension\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/echarts-gl@2/dist/echarts-gl.min.js\"></script>\n    -->\n    <!-- Uncomment this line if you want to echarts-stat extension\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/echarts-stat@latest/dist/ecStat.min.js\"></script>\n    -->\n    <!-- Uncomment this line if you want to use map\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.3/map/js/china.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.3/map/js/world.js\"></script>\n    -->\n    <!-- Uncomment these two lines if you want to use bmap extension\n    <script type=\"text/javascript\" src=\"https://api.map.baidu.com/api?v=3.0&ak=YOUR_API_KEY\"></script>\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/extension/bmap.min.js\"></script>\n    -->\n\n    <script type=\"text/javascript\">\n      var dom = document.getElementById('container');\n      var myChart = echarts.init(dom, null, {\n        renderer: 'canvas',\n        useDirtyRect: false\n      });\n      var app = {};\n\n      var option;\n\n      function randomData() {\n        now = new Date(+now + oneDay);\n        value = value + Math.random() * 21 - 10;\n        return {\n          name: now.toString(),\n          value: [\n            [now.getFullYear(), now.getMonth() + 1, now.getDate()].join('/'),\n            Math.round(value)\n          ]\n        };\n      }\n\n      var data = [];\n      var now = new Date(1997, 9, 3);\n      var oneDay = 24 * 3600 * 1000;\n      var value = Math.random() * 1000;\n      for (var i = 0; i < 1000; i++) {\n        data.push(randomData());\n      }\n\n      option = {\n        title: {\n          text: 'Dynamic Data & Time Axis'\n        },\n        tooltip: {\n          trigger: 'axis',\n          formatter: function (params) {\n            params = params[0];\n            var date = new Date(params.name);\n            return (\n              date.getDate() +\n              '/' +\n              (date.getMonth() + 1) +\n              '/' +\n              date.getFullYear() +\n              ' : ' +\n              params.value[1]\n            );\n          },\n          axisPointer: {\n            animation: false\n          }\n        },\n        xAxis: {\n          type: 'time',\n          splitLine: {\n            show: false\n          }\n        },\n        yAxis: {\n          type: 'value',\n          boundaryGap: [0, '100%'],\n          splitLine: {\n            show: false\n          }\n        },\n        series: [\n          {\n            name: 'Fake Data',\n            type: 'line',\n            showSymbol: false,\n            data: data\n          }\n        ]\n      };\n\n      setInterval(function () {\n        for (var i = 0; i < 5; i++) {\n          data.shift();\n          data.push(randomData());\n        }\n\n        myChart.setOption({\n          series: [\n            {\n              data: data\n            }\n          ]\n        });\n      }, 1000);\n\n      if (option && typeof option === 'object') {\n        myChart.setOption(option);\n      }\n\n      window.addEventListener('resize', myChart.resize);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing renderItem Function for Custom Cartesian Polygon Chart in JavaScript\nDESCRIPTION: This snippet defines the renderItem function used to render individual polygons in the custom cartesian chart. It calculates polygon points, creates paths, and returns the shape configuration.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/custom-cartesian-polygon.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderItem(params, api) {\n  if (params.context.rendered) {\n    return;\n  }\n  params.context.rendered = true;\n\n  let points = [];\n  for (let i = 0; i < params.dataIndex * 4; i++) {\n    points.push(api.coord([api.value(0) + Math.random() * 5, api.value(1) + Math.random() * 5]));\n  }\n\n  let color = api.visual('color');\n\n  return {\n    type: 'polygon',\n    transition: ['shape'],\n    shape: {\n      points: points\n    },\n    style: api.style({\n      fill: color,\n      stroke: echarts.color.lift(color)\n    })\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Chart with Y-Axis Gradient in Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to create a line chart with gradient effects along the y-axis using Apache ECharts. It sets up a configuration with two data series, one using a basic gradient and another using a custom gradient based on the y-axis values. The example also configures the chart's axis, tooltip, and visualization options.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-gradient.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\n      type: 'line',\n      smooth: true\n    },\n    {\n      data: [640, 1250, 501, 334, 190, 130, 220],\n      type: 'line',\n      smooth: true,\n      lineStyle: {\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: 'rgb(255, 0, 0)'\n          },\n          {\n            offset: 1,\n            color: 'rgb(0, 0, 255)'\n          }\n        ])\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding Nodes and Links to Graph in Apache ECharts using JavaScript\nDESCRIPTION: This code snippet demonstrates how to dynamically add new nodes and links to an existing graph visualization in Apache ECharts. It uses a timer to periodically add random connections between nodes and updates the chart accordingly.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/graph-force-dynamic.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetInterval(function() {\n  var source = Math.round((Math.random() * 3));\n  var target = Math.round((Math.random() * 3));\n  if (source !== target) {\n    option.series[0].links.push({\n      source: option.series[0].data[source].name,\n      target: option.series[0].data[target].name\n    });\n    myChart.setOption(option);\n  }\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Creating Beijing AQI Line Chart with ECharts in JavaScript\nDESCRIPTION: This code snippet initializes an ECharts instance and configures a line chart to visualize Beijing's Air Quality Index (AQI) over time. It loads data from an external source, sets up x and y axes, and applies custom styling to the chart.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-aqi.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Beijing AQI',\n    left: '1%'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  grid: {\n    left: '5%',\n    right: '15%',\n    bottom: '10%'\n  },\n  xAxis: {\n    data: data.map(function (item) {\n      return item[0];\n    })\n  },\n  yAxis: {},\n  toolbox: {\n    right: 10,\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none'\n      },\n      restore: {},\n      saveAsImage: {}\n    }\n  },\n  dataZoom: [\n    {\n      startValue: '2014-06-01'\n    },\n    {\n      type: 'inside'\n    }\n  ],\n  visualMap: {\n    top: 50,\n    right: 10,\n    pieces: [\n      {\n        gt: 0,\n        lte: 50,\n        color: '#93CE07'\n      },\n      {\n        gt: 50,\n        lte: 100,\n        color: '#FBDB0F'\n      },\n      {\n        gt: 100,\n        lte: 150,\n        color: '#FC7D02'\n      },\n      {\n        gt: 150,\n        lte: 200,\n        color: '#FD0100'\n      },\n      {\n        gt: 200,\n        lte: 300,\n        color: '#AA069F'\n      },\n      {\n        gt: 300,\n        color: '#AC3B2A'\n      }\n    ],\n    outOfRange: {\n      color: '#999'\n    }\n  },\n  series: {\n    name: 'Beijing AQI',\n    type: 'line',\n    data: data.map(function (item) {\n      return item[1];\n    }),\n    markLine: {\n      silent: true,\n      lineStyle: {\n        color: '#333'\n      },\n      data: [\n        {\n          yAxis: 50\n        },\n        {\n          yAxis: 100\n        },\n        {\n          yAxis: 150\n        },\n        {\n          yAxis: 200\n        },\n        {\n          yAxis: 300\n        }\n      ]\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Rainfall and Water Flow Line Chart with ECharts\nDESCRIPTION: This code creates a line chart visualization showing the relationship between precipitation and water flow using ECharts. It configures dual y-axes with different units, implements tooltip formatting, and visualizes data points across multiple months. The chart includes custom styling for both axes.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/grid-multiple.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Rainfall vs Evaporation',\n    subtext: 'Fake Data'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {\n    data: ['Rainfall', 'Evaporation']\n  },\n  toolbox: {\n    show: true,\n    feature: {\n      dataView: { show: true, readOnly: false },\n      magicType: { show: true, type: ['line', 'bar'] },\n      restore: { show: true },\n      saveAsImage: { show: true }\n    }\n  },\n  xAxis: {\n    type: 'category',\n    data: [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec'\n    ]\n  },\n  yAxis: [\n    {\n      type: 'value',\n      name: 'Rainfall',\n      min: 0,\n      max: 250,\n      interval: 50,\n      axisLabel: {\n        formatter: '{value} ml'\n      }\n    },\n    {\n      type: 'value',\n      name: 'Evaporation',\n      min: 0,\n      max: 10,\n      interval: 2,\n      axisLabel: {\n        formatter: '{value} °C'\n      }\n    }\n  ],\n  series: [\n    {\n      name: 'Rainfall',\n      type: 'bar',\n      yAxisIndex: 0,\n      data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3]\n    },\n    {\n      name: 'Evaporation',\n      type: 'line',\n      smooth: true,\n      yAxisIndex: 1,\n      data: [2.0, 2.2, 3.3, 4.5, 6.3, 10.2, 20.3, 23.4, 23.0, 16.5, 12.0, 6.2]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Using ecStat Histogram Transform in ECharts\nDESCRIPTION: ECharts option configuration using ecStat histogram transform.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setOption({\n    dataset: [{\n        source: data\n    }, {\n        type: 'ecStat:histogram',\n        config: config\n    }],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Scatter Map with Brush in ECharts (JavaScript)\nDESCRIPTION: This code snippet sets up an ECharts instance with a scatter map of China, including population data points and brushing functionality. It defines chart options, data processing, and visual mapping for the scatter plot.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-map-brush.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.get(ROOT_PATH + '/data/asset/geo/China_Province_Border.json', function (chinaJson) {\n  echarts.registerMap('china', chinaJson);\n  var chart = echarts.init(document.getElementById('main'));\n  var regionData = [\n    {name: '北京', value: 5},\n    {name: '天津', value: 10},\n    {name: '上海', value: 8},\n    {name: '重庆', value: 12},\n    {name: '河北', value: 2},\n    {name: '河南', value: 5},\n    {name: '云南', value: 6},\n    {name: '辽宁', value: 4},\n    {name: '黑龙江', value: 2},\n    {name: '湖南', value: 5},\n    {name: '安徽', value: 8},\n    {name: '山东', value: 9},\n    {name: '新疆', value: 1},\n    {name: '江苏', value: 12},\n    {name: '浙江', value: 11},\n    {name: '江西', value: 5},\n    {name: '湖北', value: 7},\n    {name: '广西', value: 3},\n    {name: '甘肃', value: 2},\n    {name: '山西', value: 3},\n    {name: '内蒙古', value: 1},\n    {name: '陕西', value: 4},\n    {name: '吉林', value: 3},\n    {name: '福建', value: 7},\n    {name: '贵州', value: 3},\n    {name: '广东', value: 15},\n    {name: '青海', value: 1},\n    {name: '西藏', value: 0},\n    {name: '四川', value: 9},\n    {name: '宁夏', value: 1},\n    {name: '海南', value: 2},\n    {name: '台湾', value: 5},\n    {name: '香港', value: 3},\n    {name: '澳门', value: 1}\n  ];\n  var option = {\n    title: {\n      text: 'Scatter Map Brush',\n      subtext: '注：将地图中散点放大显示',\n      left: 'center'\n    },\n    tooltip: {\n      trigger: 'item'\n    },\n    legend: {\n      orient: 'vertical',\n      left: 'left',\n      data: ['scatter']\n    },\n    dataRange: {\n      min: 0,\n      max: 1000,\n      x: 'left',\n      y: 'bottom',\n      text: ['High', 'Low'],\n      calculable: true\n    },\n    toolbox: {\n      show: true,\n      orient: 'vertical',\n      left: 'right',\n      top: 'center',\n      feature: {\n        dataView: { readOnly: false },\n        restore: {},\n        saveAsImage: {}\n      }\n    },\n    geo: {\n      map: 'china',\n      roam: true,\n      zoom: 1,\n      label: {\n        normal: { show: true },\n        emphasis: { show: false }\n      },\n      itemStyle: {\n        normal: {\n          areaColor: '#f4f4f4',\n          borderColor: '#404a59'\n        },\n        emphasis: {\n          areaColor: '#ccc'\n        }\n      }\n    },\n    series: [\n      {\n        name: 'scatter',\n        type: 'scatter',\n        coordinateSystem: 'geo',\n        data: regionData,\n        symbolSize: function (val) {\n          return val[1] / 5;\n        },\n        label: {\n          normal: {\n            formatter: '{b}',\n            position: 'right',\n            show: false\n          },\n          emphasis: {\n            show: true\n          }\n        },\n        itemStyle: {\n          normal: {\n            color: '#ddb926'\n          }\n        }\n      }\n    ],\n    brush: {\n      outOfBrush: {\n        color: '#f4f4f4'\n      },\n      brushStyle: {\n        borderWidth: 2,\n        color: 'rgba(0,0,0,0.2)',\n        borderColor: 'rgba(0,0,0,0.5)'\n      },\n      seriesIndex: [0],\n      throttleType: 'debounce',\n      throttleDelay: 300,\n      geoIndex: 0\n    }\n  };\n  chart.setOption(option);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ECharts Line Chart with Mobile Tooltip and DataZoom\nDESCRIPTION: This code snippet demonstrates how to create an ECharts line chart with touch-enabled tooltip and dataZoom components for mobile devices. It sets up the chart options, including axis configuration, series data, and mobile-specific settings for tooltip and dataZoom.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-tooltip-touch.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createChart() {\n  var myChart = echarts.init(document.getElementById('main'));\n\n  var base = +new Date(1968, 9, 3);\n  var oneDay = 24 * 3600 * 1000;\n  var date = [];\n  var data = [Math.random() * 300];\n\n  for (var i = 1; i < 20000; i++) {\n    var now = new Date((base += oneDay));\n    date.push([now.getFullYear(), now.getMonth() + 1, now.getDate()].join('/'));\n    data.push(Math.round((Math.random() - 0.5) * 20 + data[i - 1]));\n  }\n\n  myChart.setOption({\n    tooltip: {\n      trigger: 'axis',\n      position: function (pt) {\n        return [pt[0], '10%'];\n      }\n    },\n    toolbox: {\n      feature: {\n        dataZoom: {\n          yAxisIndex: 'none'\n        },\n        restore: {},\n        saveAsImage: {}\n      }\n    },\n    xAxis: {\n      type: 'category',\n      boundaryGap: false,\n      data: date\n    },\n    yAxis: {\n      type: 'value',\n      boundaryGap: [0, '100%']\n    },\n    dataZoom: [\n      {\n        type: 'inside',\n        start: 0,\n        end: 10\n      },\n      {\n        start: 0,\n        end: 10\n      }\n    ],\n    series: [\n      {\n        name: 'Fake Data',\n        type: 'line',\n        smooth: true,\n        symbol: 'none',\n        sampling: 'lttb',\n        itemStyle: {\n          color: 'rgb(255, 70, 131)'\n        },\n        areaStyle: {\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n            {\n              offset: 0,\n              color: 'rgb(255, 158, 68)'\n            },\n            {\n              offset: 1,\n              color: 'rgb(255, 70, 131)'\n            }\n          ])\n        },\n        data: data\n      }\n    ]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pie Chart with Rich Text Labels in ECharts (JavaScript)\nDESCRIPTION: This code sets up a pie chart using ECharts, featuring custom rich text labels. It includes data for GDP and population of various countries, and demonstrates advanced label styling with icons, different fonts, and colors.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pie-rich-text.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'The World Population (2011)',\n    subtext: 'From United Nations, Total population, both sexes combined, as of 1 July (thousands)',\n    left: 'center',\n    top: 0\n  },\n  tooltip: {\n    trigger: 'item',\n    formatter: '{a} <br/>{b} : {c} ({d}%)'\n  },\n  legend: {\n    bottom: 10,\n    left: 'center',\n    data: [\n      'China',\n      'India',\n      'United States',\n      'Indonesia',\n      'Brazil',\n      'Pakistan',\n      'Nigeria',\n      'Bangladesh',\n      'Russia',\n      'Japan'\n    ]\n  },\n  series: [\n    {\n      type: 'pie',\n      radius: '65%',\n      center: ['50%', '50%'],\n      selectedMode: 'single',\n      data: [\n        {\n          value: 1344130000,\n          name: 'China',\n          label: {\n            formatter: [\n              '{title|{b}}',\n              '{valueInfo|\\n{c} ({d}%)}']\n              .join(''),\n            rich: {\n              title: {\n                color: '#eee',\n                align: 'center'\n              },\n              valueInfo: {\n                color: '#fff',\n                align: 'center',\n                fontSize: 14\n              }\n            }\n          }\n        },\n        { value: 1247240000, name: 'India' },\n        { value: 313085000, name: 'United States' },\n        { value: 242325000, name: 'Indonesia' },\n        { value: 196655000, name: 'Brazil' },\n        { value: 176745000, name: 'Pakistan' },\n        { value: 162470000, name: 'Nigeria' },\n        { value: 150495000, name: 'Bangladesh' },\n        { value: 143296000, name: 'Russia' },\n        { value: 127817277, name: 'Japan' }\n      ],\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Pie Chart for Website Referrer Sources using ECharts in JavaScript\nDESCRIPTION: This code snippet sets up an ECharts pie chart to visualize the distribution of user visit sources for a website. It includes data for different referral sources, configures chart title, tooltip, and legend, and customizes the pie chart's appearance and behavior.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pie-simple.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Referer of a Website',\n    subtext: 'Fake Data',\n    left: 'center'\n  },\n  tooltip: {\n    trigger: 'item'\n  },\n  legend: {\n    orient: 'vertical',\n    left: 'left'\n  },\n  series: [\n    {\n      name: 'Access From',\n      type: 'pie',\n      radius: '50%',\n      data: [\n        { value: 1048, name: 'Search Engine' },\n        { value: 735, name: 'Direct' },\n        { value: 580, name: 'Email' },\n        { value: 484, name: 'Union Ads' },\n        { value: 300, name: 'Video Ads' }\n      ],\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Watermark in ECharts Bar Chart for Download Statistics (JavaScript)\nDESCRIPTION: This snippet sets up an ECharts option object for a bar chart with a watermark. It includes configuration for the chart title, tooltip, xAxis, yAxis, and series data. The watermark is added using the graphic component.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/watermark.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'ECharts 下载统计',\n    left: 'center'\n  },\n  tooltip: {},\n  xAxis: {\n    data: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\n  },\n  yAxis: {},\n  series: [{\n    name: '下载量',\n    type: 'bar',\n    data: [24000, 24800, 27600, 29400, 32000, 33200, 38400, 39200, 50000, 60000, 63000, 65600]\n  }],\n  graphic: {\n    elements: [{\n      type: 'text',\n      left: 'center',\n      top: 'center',\n      style: {\n        text: 'Apache ECharts',\n        fontSize: 80,\n        fontWeight: 'bold',\n        lineDash: [0, 200],\n        lineDashOffset: 0,\n        fill: 'rgba(0, 0, 0, 0.1)',\n        lineHeight: 300\n      }\n    }]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Metal Bar Chart with ECharts GL in JavaScript\nDESCRIPTION: This code snippet sets up a 3D bar chart with metallic appearance using ECharts GL. It defines the chart options, including data generation, axis configuration, and custom shading for a metallic effect. The chart uses simplex noise for added visual texture.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/metal-bar3d.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n    tooltip: {},\n    backgroundColor: '#fff',\n    visualMap: {\n        show: false,\n        dimension: 2,\n        min: 0,\n        max: 30,\n        inRange: {\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n        }\n    },\n    xAxis3D: {\n        type: 'category',\n        data: ['12a', '1a', '2a', '3a', '4a', '5a', '6a',\n        '7a', '8a', '9a', '10a', '11a',\n        '12p', '1p', '2p', '3p', '4p', '5p',\n        '6p', '7p', '8p', '9p', '10p', '11p'],\n        name: 'Time',\n        nameGap: 16\n    },\n    yAxis3D: {\n        type: 'category',\n        data: ['Saturday', 'Friday', 'Thursday',\n        'Wednesday', 'Tuesday', 'Monday', 'Sunday'],\n        name: 'Day',\n        nameGap: 16\n    },\n    zAxis3D: {\n        type: 'value',\n        name: 'Value',\n        nameGap: 20\n    },\n    grid3D: {\n        boxWidth: 200,\n        boxDepth: 80,\n        light: {\n            main: {\n                intensity: 1.2\n            },\n            ambient: {\n                intensity: 0.3\n            }\n        },\n        viewControl: {\n            // projection: 'orthographic'\n        },\n        postEffect: {\n            enable: true,\n            SSAO: {\n                enable: true,\n                radius: 1\n            }\n        },\n        temporalSuperSampling: {\n            enable: true\n        }\n    },\n    series: [{\n        type: 'bar3D',\n        data: data.map(function (item) {\n            return {\n                value: [item[1], item[0], item[2]],\n            }\n        }),\n        shading: 'realistic',\n        realisticMaterial: {\n            roughness: 0.2,\n            metalness: 1\n        },\n        bevelSize: 0.3,\n        bevelSmoothness: 2,\n        label: {\n            show: false,\n            textStyle: {\n                fontSize: 16,\n                borderWidth: 1\n            }\n        },\n        itemStyle: {\n            opacity: 0.95\n        }\n    }]\n};\n\nvar noise = new SimplexNoise(Math.random);\nfunction generateData() {\n    var data = [];\n    for (var i = 0; i < 7; i++) {\n        for (var j = 0; j < 24; j++) {\n            var z = Math.max(0, noise.noise2D(i / 6, j / 24) * 30)\n            data.push([i, j, z]);\n        }\n    }\n    return data;\n}\nvar data = generateData();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Profit Chart with Apache ECharts in JavaScript\nDESCRIPTION: This code snippet sets up a custom profit chart using Apache ECharts. It defines the chart options, including axis configuration, series data, and styling for various chart elements such as the grid, tooltip, and legend.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/custom-profit.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Profit',\n    left: 'center'\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    }\n  },\n  legend: {\n    data: ['Profit', 'Expenses', 'Income'],\n    top: '10%'\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: [\n    {\n      type: 'category',\n      boundaryGap: false,\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'Profit',\n      type: 'line',\n      stack: 'Total',\n      label: {\n        show: true,\n        position: 'top'\n      },\n      areaStyle: {},\n      emphasis: {\n        focus: 'series'\n      },\n      data: [220, 182, 191, 234, 290, 330, 310]\n    },\n    {\n      name: 'Income',\n      type: 'line',\n      stack: 'Total',\n      areaStyle: {},\n      emphasis: {\n        focus: 'series'\n      },\n      data: [320, 332, 301, 334, 390, 330, 320]\n    },\n    {\n      name: 'Expenses',\n      type: 'line',\n      stack: 'Total',\n      label: {\n        show: true,\n        position: 'bottom'\n      },\n      areaStyle: {},\n      emphasis: {\n        focus: 'series'\n      },\n      data: [120, 132, 101, 134, 90, 230, 210]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Effect Scatter Chart in JavaScript with ECharts\nDESCRIPTION: This snippet demonstrates how to create a basic Effect Scatter Chart using ECharts. It sets up the chart options including series type, symbol size, and ripple effect.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-effect.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  xAxis: {},\n  yAxis: {},\n  series: [{\n    symbolSize: 20,\n    data: [\n      [10.0, 8.04],\n      [8.07, 6.95],\n      [13.0, 7.58],\n      [9.05, 8.81],\n      [11.0, 8.33],\n      [14.0, 7.66],\n      [13.4, 6.81],\n      [10.0, 6.33],\n      [14.0, 8.96],\n      [12.5, 6.82],\n      [9.15, 7.2],\n      [11.5, 7.2],\n      [3.03, 4.23],\n      [12.2, 7.83],\n      [2.02, 4.47],\n      [1.05, 3.33],\n      [4.05, 4.96],\n      [6.03, 7.24],\n      [12.0, 6.26],\n      [12.0, 8.84],\n      [7.08, 5.82],\n      [5.02, 5.68]\n    ],\n    type: 'effectScatter',\n    showEffectOn: 'render',\n    rippleEffect: {\n      brushType: 'stroke'\n    },\n    itemStyle: {\n      normal: {\n        shadowBlur: 10,\n        shadowColor: 'rgba(120, 36, 50, 0.5)',\n        shadowOffsetY: 5,\n        color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [\n          {\n            offset: 0,\n            color: 'rgb(251, 118, 123)'\n          },\n          {\n            offset: 1,\n            color: 'rgb(204, 46, 72)'\n          }\n        ])\n      }\n    }\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sunburst Chart with VisualMap in Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to set up a Sunburst chart with VisualMap in Apache ECharts. It includes data definition, chart options configuration, and visual mapping setup for color coding based on data values.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/sunburst-visualMap.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  visualMap: {\n    type: 'continuous',\n    min: 0,\n    max: 10,\n    inRange: {\n      color: ['#2F93C8', '#AEC48F', '#FFDB5C', '#F98862']\n    }\n  },\n  series: {\n    type: 'sunburst',\n    data: [\n      {\n        name: 'Grandpa',\n        children: [\n          {\n            name: 'Uncle Leo',\n            value: 15,\n            children: [\n              {\n                name: 'Cousin Jack',\n                value: 2\n              },\n              {\n                name: 'Cousin Mary',\n                value: 5,\n                children: [\n                  {\n                    name: 'Jackson',\n                    value: 2\n                  }\n                ]\n              },\n              {\n                name: 'Cousin Ben',\n                value: 4\n              }\n            ]\n          },\n          {\n            name: 'Father',\n            value: 10,\n            children: [\n              {\n                name: 'Me',\n                value: 5\n              },\n              {\n                name: 'Brother Peter',\n                value: 1\n              }\n            ]\n          }\n        ]\n      },\n      {\n        name: 'Nancy',\n        children: [\n          {\n            name: 'Uncle Nike',\n            children: [\n              {\n                name: 'Cousin Betty',\n                value: 1\n              },\n              {\n                name: 'Cousin Jenny',\n                value: 2\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    radius: [0, '90%'],\n    label: {\n      rotate: 'radial'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Parametric Surface Rose Chart with ECharts GL in JavaScript\nDESCRIPTION: This code snippet defines the options for creating a parametric surface rose chart using ECharts GL. It sets up the chart type, equation parameters, surface style, and camera positioning.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/parametric-surface-rose.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n    toolbox: {\n        feature: {\n            saveAsImage: {}\n        }\n    },\n    series: [{\n        type: 'surface',\n        parametric: true,\n        // shading: 'albedo',\n        parametricEquation: {\n            u: {\n                min: -2 * Math.PI,\n                max: 2 * Math.PI,\n                step: Math.PI / 20\n            },\n            v: {\n                min: -1.2,\n                max: 1.2,\n                step: 0.04\n            },\n            x: function (u, v) {\n                var denom = 1 + Math.pow(v, 2);\n                return Math.pow(1 - Math.pow(v, 2), 0.5) * Math.cos(u) / denom;\n            },\n            y: function (u, v) {\n                var denom = 1 + Math.pow(v, 2);\n                return Math.pow(1 - Math.pow(v, 2), 0.5) * Math.sin(u) / denom;\n            },\n            z: function (u, v) {\n                var denom = 1 + Math.pow(v, 2);\n                return v / denom;\n            }\n        },\n        itemStyle: {\n            color: function (params) {\n                var u = params.value[0];\n                return 'hsl(' + Math.round(180 * (1 + u / Math.PI)) + ',100%,45%)';\n            }\n        },\n        wireframe: {\n            show: false\n        }\n    }],\n    visualMap: {\n        show: false,\n        dimension: 1,\n        min: -1.2,\n        max: 1.2,\n        inRange: {\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n        }\n    }\n};\n\nmyChart.setOption(option);\n\nwindow.addEventListener('resize', function () {\n    myChart.resize();\n});\n```\n\n----------------------------------------\n\nTITLE: Building Apache ECharts from Source\nDESCRIPTION: Instructions for building ECharts source code using npm. Includes steps for installing dependencies, running development mode with watch capabilities, type checking, and creating production builds.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install the dependencies from NPM:\nnpm install\n\n# Rebuild source code immediately in watch mode when changing the source code.\n# It opens the `./test` directory, and you may open `-cases.html` to get the list\n# of all test cases.\n# If you wish to create a test case, run `npm run mktest:help` to learn more.\nnpm run dev\n\n# Check the correctness of TypeScript code.\nnpm run checktype\n\n# If intending to build and get all types of the \"production\" files:\nnpm run release\n```\n\n----------------------------------------\n\nTITLE: Configuring Weekly Temperature Change Line Chart with ECharts\nDESCRIPTION: This code snippet demonstrates how to configure an ECharts line chart to display temperature changes over a week. It includes setup for x-axis (days of week), y-axis (temperature range), series data for both maximum and minimum temperatures, tooltip configuration, and styling options.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-marker.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": {\n    \"text\": \"Temperature Change in the Coming Week\",\n    \"subtext\": \"°C\"\n  },\n  \"tooltip\": {\n    \"trigger\": \"axis\"\n  },\n  \"legend\": {\n    \"data\": [\"Highest\", \"Lowest\"]\n  },\n  \"toolbox\": {\n    \"show\": true,\n    \"feature\": {\n      \"dataZoom\": {\n        \"yAxisIndex\": \"none\"\n      },\n      \"dataView\": { \"readOnly\": false },\n      \"magicType\": { \"type\": [\"line\", \"bar\"] },\n      \"restore\": {},\n      \"saveAsImage\": {}\n    }\n  },\n  \"xAxis\": {\n    \"type\": \"category\",\n    \"boundaryGap\": false,\n    \"data\": [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n  },\n  \"yAxis\": {\n    \"type\": \"value\",\n    \"axisLabel\": {\n      \"formatter\": \"{value} °C\"\n    }\n  },\n  \"series\": [\n    {\n      \"name\": \"Highest\",\n      \"type\": \"line\",\n      \"data\": [11, 11, 15, 13, 12, 13, 10],\n      \"markPoint\": {\n        \"data\": [\n          { \"type\": \"max\", \"name\": \"Max\" },\n          { \"type\": \"min\", \"name\": \"Min\" }\n        ]\n      },\n      \"markLine\": {\n        \"data\": [{ \"type\": \"average\", \"name\": \"Avg\" }]\n      }\n    },\n    {\n      \"name\": \"Lowest\",\n      \"type\": \"line\",\n      \"data\": [1, -2, 2, 5, 3, 2, 0],\n      \"markPoint\": {\n        \"data\": [{ \"name\": \"Weekly Low\", \"value\": -2, \"xAxis\": 1, \"yAxis\": -1.5 }]\n      },\n      \"markLine\": {\n        \"data\": [\n          { \"type\": \"average\", \"name\": \"Avg\" },\n          [\n            {\n              \"symbol\": \"none\",\n              \"x\": \"90%\",\n              \"yAxis\": \"max\"\n            },\n            {\n              \"symbol\": \"circle\",\n              \"label\": {\n                \"position\": \"start\",\n                \"formatter\": \"Max\"\n              },\n              \"type\": \"max\",\n              \"name\": \"Highest point\"\n            }\n          ]\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple X-Axes in ECharts Line Chart\nDESCRIPTION: This code demonstrates how to create a line chart with two X-axes in ECharts. It defines grid layout, multiple X and Y axes with different positions and styles, and two data series with each series bound to a specific X-axis. The example uses different colors for each axis and its corresponding data series for better visualization.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/multiple-x-axis.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  legend: {\n    data: ['Precipitation', 'Temperature']\n  },\n  grid: {\n    top: 70,\n    bottom: 50\n  },\n  xAxis: [\n    {\n      type: 'category',\n      axisTick: {\n        alignWithLabel: true\n      },\n      axisLine: {\n        onZero: false,\n        lineStyle: {\n          color: '#5470c6'\n        }\n      },\n      axisPointer: {\n        label: {\n          formatter: function (params) {\n            return (\n              'Precipitation  ' +\n              params.value +\n              (params.seriesData.length ? '：' + params.seriesData[0].data : '')\n            );\n          }\n        }\n      },\n      // prettier-ignore\n      data: ['2016-1', '2016-2', '2016-3', '2016-4', '2016-5', '2016-6', '2016-7', '2016-8', '2016-9', '2016-10', '2016-11', '2016-12']\n    },\n    {\n      type: 'category',\n      axisTick: {\n        alignWithLabel: true\n      },\n      axisLine: {\n        onZero: false,\n        lineStyle: {\n          color: '#91cc75'\n        }\n      },\n      axisPointer: {\n        label: {\n          formatter: function (params) {\n            return (\n              'Temperature  ' +\n              params.value +\n              (params.seriesData.length ? '：' + params.seriesData[0].data : '')\n            );\n          }\n        }\n      },\n      // prettier-ignore\n      data: ['2015-1', '2015-2', '2015-3', '2015-4', '2015-5', '2015-6', '2015-7', '2015-8', '2015-9', '2015-10', '2015-11', '2015-12']\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'Precipitation',\n      type: 'line',\n      xAxisIndex: 0,\n      smooth: true,\n      emphasis: {\n        focus: 'series'\n      },\n      data: [\n        2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3\n      ]\n    },\n    {\n      name: 'Temperature',\n      type: 'line',\n      xAxisIndex: 1,\n      smooth: true,\n      emphasis: {\n        focus: 'series'\n      },\n      data: [\n        3.9, 5.9, 11.1, 18.7, 48.3, 69.2, 231.6, 46.6, 55.4, 18.4, 10.3, 0.7\n      ]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Sphere Visualization with Parametric Surface in ECharts GL\nDESCRIPTION: This code snippet sets up a 3D visualization of a sphere using parametric surface equations in ECharts GL. It defines the chart options including the 3D grid, light, and surface series with custom parametric equations for x, y, and z coordinates.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/sphere-parametric-surface.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n    tooltip: {},\n    visualMap: {\n        show: false,\n        dimension: 2,\n        min: -1,\n        max: 1,\n        inRange: {\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n        }\n    },\n    xAxis3D: {},\n    yAxis3D: {},\n    zAxis3D: {},\n    grid3D: {\n        show: false,\n        environment: '#000',\n        viewControl: {\n            distance: 100\n        }\n    },\n    series: [{\n        type: 'surface',\n        parametric: true,\n        // u and v both in range of [0, 1]\n        parametricEquation: {\n            u: {\n                min: 0,\n                max: Math.PI * 2,\n                step: Math.PI / 20\n            },\n            v: {\n                min: 0,\n                max: Math.PI,\n                step: Math.PI / 20\n            },\n            x: function (u, v) {\n                return Math.sin(v) * Math.sin(u);\n            },\n            y: function (u, v) {\n                return Math.sin(v) * Math.cos(u);\n            },\n            z: function (u, v) {\n                return Math.cos(v);\n            }\n        },\n        shading: 'realistic',\n        realisticMaterial: {\n            roughness: 0.4,\n            metalness: 0\n        },\n        itemStyle: {\n            borderWidth: 1,\n            borderColor: 'rgba(0, 0, 0, 0.8)'\n        }\n    }]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Id Transform in Apache ECharts\nDESCRIPTION: Shows how to register and use the ID transform to add a new dimension containing sequential IDs to a dataset. The transform allows specifying the index and name of the new ID dimension.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-simple-transform/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\necharts.registerTransform(ecSimpleTransform.aggregate);\n\nconst option = {\n    dataset: [{\n        source: [\n            ['aa', 'bb', 'cc', 'tag'],\n            [12, 0.33, 5200, 'AA'],\n            [21, 0.65, 8100, 'AA'],\n            ...\n        ]\n    }, {\n        transform: {\n            type: 'ecSimpleTransform:id',\n            config: {\n                dimensionIndex: 4,\n                dimensionName: 'ID'\n            }\n        }\n        // Then the result data will be:\n        // [\n        //     ['aa', 'bb', 'cc', 'tag', 'ID'],\n        //     [12, 0.33, 5200, 'AA', 0],\n        //     [21, 0.65, 8100, 'BB', 1],\n        //     ...\n        // ]\n    }],\n    // ...\n};\n\nconst myChart = echarts.init(dom);\nmyChart.setOption(option);\n```\n\n----------------------------------------\n\nTITLE: Configuring Monochrome Sunburst Chart in Apache ECharts\nDESCRIPTION: This code snippet defines the options for creating a monochrome sunburst chart. It includes data structure, visual style settings, and label configurations for both inner and outer rings of the chart.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/sunburst-monochrome.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  series: [\n    {\n      type: 'sunburst',\n      data: [\n        {\n          name: 'Grandpa',\n          children: [\n            {\n              name: 'Uncle Leo',\n              value: 15,\n              children: [\n                {\n                  name: 'Cousin Jack',\n                  value: 2\n                },\n                {\n                  name: 'Cousin Mary',\n                  value: 5,\n                  children: [\n                    {\n                      name: 'Jackson',\n                      value: 2\n                    }\n                  ]\n                },\n                {\n                  name: 'Cousin Ben',\n                  value: 4\n                }\n              ]\n            },\n            {\n              name: 'Father',\n              value: 10,\n              children: [\n                {\n                  name: 'Me',\n                  value: 5\n                },\n                {\n                  name: 'Brother Peter',\n                  value: 1\n                }\n              ]\n            }\n          ]\n        },\n        {\n          name: 'Nancy',\n          children: [\n            {\n              name: 'Uncle Nike',\n              children: [\n                {\n                  name: 'Cousin Betty',\n                  value: 1\n                },\n                {\n                  name: 'Cousin Jenny',\n                  value: 2\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      radius: ['0', '90%'],\n      label: {\n        rotate: 'radial'\n      },\n      itemStyle: {\n        borderRadius: 7,\n        borderWidth: 2\n      },\n      levels: [\n        {},\n        {\n          r0: '15%',\n          r: '35%',\n          itemStyle: {\n            borderWidth: 2\n          },\n          label: {\n            rotate: 'tangential'\n          }\n        },\n        {\n          r0: '35%',\n          r: '70%',\n          label: {\n            align: 'right'\n          }\n        },\n        {\n          r0: '70%',\n          r: '72%',\n          label: {\n            position: 'outside',\n            padding: 3,\n            silent: false\n          },\n          itemStyle: {\n            borderWidth: 3\n          }\n        }\n      ]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Air Quality Heatmap Chart in JavaScript with Apache ECharts\nDESCRIPTION: This code snippet sets up the configuration options for an air quality heatmap chart using Apache ECharts. It processes data, defines chart dimensions, sets up axes, visualMap, and series options for the heatmap representation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/heatmap-map.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$.get(ROOT_PATH + '/data/asset/data/hangzhou-air-quality.json', function (data) {\n  var dates = data.map(function (item) {\n    return item[0];\n  });\n  var dataItem = data[0];\n  option = {\n    tooltip: {\n      position: 'top'\n    },\n    grid: {\n      height: '50%',\n      top: '10%'\n    },\n    xAxis: {\n      type: 'category',\n      data: dates,\n      splitArea: {\n        show: true\n      }\n    },\n    yAxis: {\n      type: 'category',\n      data: dataItem.slice(1),\n      splitArea: {\n        show: true\n      }\n    },\n    visualMap: {\n      min: 0,\n      max: 300,\n      calculable: true,\n      orient: 'horizontal',\n      left: 'center',\n      bottom: '15%'\n    },\n    series: [\n      {\n        name: 'Punch Card',\n        type: 'heatmap',\n        data: data.map(function (item) {\n          return [item[0], item[1], item[2] || '-'];\n        }),\n        label: {\n          show: true\n        },\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\n          }\n        }\n      }\n    ]\n  };\n  myChart.setOption(option);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Scatter Nutrients Matrix Chart in Apache ECharts\nDESCRIPTION: This code snippet defines the configuration for a scatter nutrients matrix chart. It sets up multiple series, custom tooltips, and axis labels. The chart visualizes nutrient data across different food groups.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-nutrients-matrix.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    formatter: function (params) {\n      return (\n        params.value[2] +\n        ' diet: ' +\n        '<br>carbohydrate: ' +\n        params.value[0] +\n        'g <br>fat: ' +\n        params.value[1] +\n        'g <br>protein: ' +\n        params.value[3] +\n        'g '\n      );\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '7%',\n    bottom: '7%',\n    containLabel: true\n  },\n  xAxis: {\n    type: 'value',\n    name: 'carbohydrate',\n    nameTextStyle: {\n      fontSize: 12\n    }\n  },\n  yAxis: {\n    type: 'value',\n    name: 'fat',\n    nameTextStyle: {\n      fontSize: 12\n    }\n  },\n  series: [\n    {\n      symbolSize: 20,\n      data: [\n        [16.0, 5.0, 'Dairy', 4.0],\n        [86.0, 0.2, 'Fruit', 1.8],\n        [21.0, 0.1, 'Vegetables', 2.5],\n        [49.0, 13.0, 'Meat', 34.0],\n        [5.0, 0.1, 'Beverages', 0.0]\n      ],\n      type: 'scatter'\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Geo3D Chart with Variable Heights in ECharts\nDESCRIPTION: This code snippet sets up a Geo3D chart using ECharts. It configures the chart with a world map, sets visual properties like region height and color based on population data, and defines tooltip and legend components. The chart uses a custom series to render the 3D geographical representation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/geo3d-with-different-height.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noption = {\n    tooltip: {\n        show: true\n    },\n    visualMap: {\n        max: 1000000000,\n        calculable: true,\n        realtime: false,\n        inRange: {\n            colorLightness: [0.2, 0.9]\n        },\n        outOfRange: {\n            colorLightness: [0.2, 0.9]\n        },\n        controller: {\n            inRange: {\n                color: ['#c23531']\n            },\n            outOfRange: {\n                color: ['#999']\n            }\n        }\n    },\n    series: [{\n        type: 'map3D',\n        map: 'world',\n        shading: 'lambert',\n        realisticMaterial: {\n            roughness: 0.2,\n            metalness: 0\n        },\n        postEffect: {\n            enable: true,\n            SSAO: {\n                enable: true,\n                radius: 2,\n                intensity: 1\n            }\n        },\n        groundPlane: {\n            show: true\n        },\n        light: {\n            main: {\n                intensity: 2,\n                shadow: true,\n                shadowQuality: 'high',\n                alpha: 30\n            },\n            ambient: {\n                intensity: 0\n            },\n            ambientCubemap: {\n                texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',\n                exposure: 2,\n                diffuseIntensity: 0.2\n            }\n        },\n        viewControl: {\n            distance: 50,\n            alpha: 20\n        },\n        itemStyle: {\n            areaColor: '#093f78',\n            borderColor: '#111'\n        },\n        regionHeight: 1,\n        data: []\n    }]\n};\n\nvar data = [\n    {name: 'Afghanistan', value: 28397.812},\n    {name: 'Angola', value: 19549.124},\n    {name: 'Albania', value: 3150.143},\n    {name: 'United Arab Emirates', value: 8441.537},\n    {name: 'Argentina', value: 40374.224},\n    {name: 'Armenia', value: 2963.496},\n    {name: 'French Southern and Antarctic Lands', value: 268.065},\n    {name: 'Australia', value: 22404.488},\n    {name: 'Austria', value: 8401.924},\n    {name: 'Azerbaijan', value: 9094.718},\n    {name: 'Burundi', value: 9232.753},\n    {name: 'Belgium', value: 10941.288},\n    {name: 'Benin', value: 9509.798},\n    {name: 'Burkina Faso', value: 15540.284},\n    {name: 'Bangladesh', value: 151125.475},\n    {name: 'Bulgaria', value: 7389.175},\n    {name: 'The Bahamas', value: 66402.316},\n    {name: 'Bosnia and Herzegovina', value: 3845.929},\n    {name: 'Belarus', value: 9491.07},\n    {name: 'Belize', value: 308.595},\n    {name: 'Bermuda', value: 64.951},\n    {name: 'Bolivia', value: 716.939},\n    {name: 'Brazil', value: 195210.154},\n    {name: 'Brunei', value: 27.223},\n    {name: 'Bhutan', value: 716.939},\n    {name: 'Botswana', value: 1969.341},\n    {name: 'Central African Republic', value: 4349.921},\n    {name: 'Canada', value: 34126.24},\n    {name: 'Switzerland', value: 7830.534},\n    {name: 'Chile', value: 17150.76},\n    {name: 'China', value: 1359821.465},\n    {name: 'Ivory Coast', value: 60508.978},\n    {name: 'Cameroon', value: 20624.343},\n    {name: 'Democratic Republic of the Congo', value: 62191.161},\n    {name: 'Republic of the Congo', value: 3573.024},\n    {name: 'Colombia', value: 46444.798},\n    {name: 'Costa Rica', value: 4669.685},\n    {name: 'Cuba', value: 11281.768},\n    {name: 'Northern Cyprus', value: 1.468},\n    {name: 'Cyprus', value: 1103.685},\n    {name: 'Czech Republic', value: 10553.701},\n    {name: 'Germany', value: 83017.404},\n    {name: 'Djibouti', value: 834.036},\n    {name: 'Denmark', value: 5550.959},\n    {name: 'Dominican Republic', value: 10016.797},\n    {name: 'Algeria', value: 37062.82},\n    {name: 'Ecuador', value: 15001.072},\n    {name: 'Egypt', value: 78075.705},\n    {name: 'Eritrea', value: 5741.159},\n    {name: 'Spain', value: 46182.038},\n    {name: 'Estonia', value: 1298.533},\n    {name: 'Ethiopia', value: 87095.281},\n    {name: 'Finland', value: 5367.693},\n    {name: 'Fiji', value: 860.559},\n    {name: 'Falkland Islands', value: 49.581},\n    {name: 'France', value: 63230.866},\n    {name: 'Gabon', value: 1556.222},\n    {name: 'United Kingdom', value: 62066.35},\n    {name: 'Georgia', value: 4388.674},\n    {name: 'Ghana', value: 24262.901},\n    {name: 'Guinea', value: 10876.033},\n    {name: 'Gambia', value: 1680.64},\n    {name: 'Guinea Bissau', value: 10876.033},\n    {name: 'Equatorial Guinea', value: 696.167},\n    {name: 'Greece', value: 11109.999},\n    {name: 'Greenland', value: 56.546},\n    {name: 'Guatemala', value: 14341.576},\n    {name: 'French Guiana', value: 231.169},\n    {name: 'Guyana', value: 786.126},\n    {name: 'Honduras', value: 7621.204},\n    {name: 'Croatia', value: 4338.027},\n    {name: 'Haiti', value: 9896.4},\n    {name: 'Hungary', value: 10014.633},\n    {name: 'Indonesia', value: 240676.485},\n    {name: 'India', value: 1205624.648},\n    {name: 'Ireland', value: 4467.561},\n    {name: 'Iran', value: 240676.485},\n    {name: 'Iraq', value: 30962.38},\n    {name: 'Iceland', value: 318.042},\n    {name: 'Israel', value: 7420.368},\n    {name: 'Italy', value: 60508.978},\n    {name: 'Jamaica', value: 2741.485},\n    {name: 'Jordan', value: 6454.554},\n    {name: 'Japan', value: 127352.833},\n    {name: 'Kazakhstan', value: 15921.127},\n    {name: 'Kenya', value: 40909.194},\n    {name: 'Kyrgyzstan', value: 5334.223},\n    {name: 'Cambodia', value: 14364.931},\n    {name: 'South Korea', value: 51452.352},\n    {name: 'Kosovo', value: 97.743},\n    {name: 'Kuwait', value: 2991.58},\n    {name: 'Laos', value: 6395.713},\n    {name: 'Lebanon', value: 4341.092},\n    {name: 'Liberia', value: 3957.99},\n    {name: 'Libya', value: 6040.612},\n    {name: 'Sri Lanka', value: 20758.779},\n    {name: 'Lesotho', value: 2008.921},\n    {name: 'Lithuania', value: 3068.457},\n    {name: 'Luxembourg', value: 507.885},\n    {name: 'Latvia', value: 2090.519},\n    {name: 'Morocco', value: 31642.36},\n    {name: 'Moldova', value: 103.619},\n    {name: 'Madagascar', value: 21079.532},\n    {name: 'Mexico', value: 117886.404},\n    {name: 'Macedonia', value: 507.885},\n    {name: 'Mali', value: 13985.961},\n    {name: 'Myanmar', value: 51931.231},\n    {name: 'Montenegro', value: 620.078},\n    {name: 'Mongolia', value: 2712.738},\n    {name: 'Mozambique', value: 23967.265},\n    {name: 'Mauritania', value: 3609.42},\n    {name: 'Malawi', value: 15013.694},\n    {name: 'Malaysia', value: 28275.835},\n    {name: 'Namibia', value: 2178.967},\n    {name: 'New Caledonia', value: 246.379},\n    {name: 'Niger', value: 15893.746},\n    {name: 'Nigeria', value: 159707.78},\n    {name: 'Nicaragua', value: 5822.209},\n    {name: 'Netherlands', value: 16615.243},\n    {name: 'Norway', value: 4891.251},\n    {name: 'Nepal', value: 26846.016},\n    {name: 'New Zealand', value: 4368.136},\n    {name: 'Oman', value: 2802.768},\n    {name: 'Pakistan', value: 173149.306},\n    {name: 'Panama', value: 3678.128},\n    {name: 'Peru', value: 29262.83},\n    {name: 'Philippines', value: 93444.322},\n    {name: 'Papua New Guinea', value: 6858.945},\n    {name: 'Poland', value: 38198.754},\n    {name: 'Puerto Rico', value: 3709.671},\n    {name: 'North Korea', value: 1.468},\n    {name: 'Portugal', value: 10589.792},\n    {name: 'Paraguay', value: 6459.721},\n    {name: 'Qatar', value: 1749.713},\n    {name: 'Romania', value: 21861.476},\n    {name: 'Russia', value: 21861.476},\n    {name: 'Rwanda', value: 10836.732},\n    {name: 'Western Sahara', value: 514.648},\n    {name: 'Saudi Arabia', value: 27258.387},\n    {name: 'Sudan', value: 35652.002},\n    {name: 'South Sudan', value: 9940.929},\n    {name: 'Senegal', value: 12950.564},\n    {name: 'Solomon Islands', value: 526.447},\n    {name: 'Sierra Leone', value: 5751.976},\n    {name: 'El Salvador', value: 6218.195},\n    {name: 'Somaliland', value: 9636.173},\n    {name: 'Somalia', value: 9636.173},\n    {name: 'Republic of Serbia', value: 3573.024},\n    {name: 'Suriname', value: 524.96},\n    {name: 'Slovakia', value: 5433.437},\n    {name: 'Slovenia', value: 2054.232},\n    {name: 'Sweden', value: 9382.297},\n    {name: 'Swaziland', value: 1193.148},\n    {name: 'Syria', value: 7830.534},\n    {name: 'Chad', value: 11720.781},\n    {name: 'Togo', value: 6306.014},\n    {name: 'Thailand', value: 66402.316},\n    {name: 'Tajikistan', value: 7627.326},\n    {name: 'Turkmenistan', value: 5041.995},\n    {name: 'East Timor', value: 10016.797},\n    {name: 'Trinidad and Tobago', value: 1328.095},\n    {name: 'Tunisia', value: 10631.83},\n    {name: 'Turkey', value: 72137.546},\n    {name: 'United Republic of Tanzania', value: 44973.33},\n    {name: 'Uganda', value: 33987.213},\n    {name: 'Ukraine', value: 46050.22},\n    {name: 'Uruguay', value: 3371.982},\n    {name: 'United States of America', value: 312247.116},\n    {name: 'Uzbekistan', value: 27769.27},\n    {name: 'Venezuela', value: 236.299},\n    {name: 'Vietnam', value: 89047.397},\n    {name: 'Vanuatu', value: 236.299},\n    {name: 'West Bank', value: 13.565},\n    {name: 'Yemen', value: 22763.008},\n    {name: 'South Africa', value: 51452.352},\n    {name: 'Zambia', value: 13216.985},\n    {name: 'Zimbabwe', value: 13076.978}\n];\n\noption.series[0].data = data.map(function (d) {\n    d.value = d.value / 1000;\n    return d;\n});\n\nmyChart.setOption(option);\n```\n\n----------------------------------------\n\nTITLE: Configuring ECharts for Easing Function Visualization with JavaScript\nDESCRIPTION: Sets up an ECharts visualization that displays easing functions as lines on a graph. The example creates a line chart with multiple series, each representing a different easing function curve.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-easing.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Line Easing Visualizing',\n    subtext: 'By ecStat.regression'\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    }\n  },\n  xAxis: {\n    type: 'value',\n    splitLine: {\n      lineStyle: {\n        type: 'dashed'\n      }\n    },\n    splitNumber: 10\n  },\n  yAxis: {\n    type: 'value',\n    min: -40,\n    max: 60,\n    splitNumber: 10\n  },\n  visualMap: {\n    show: false,\n    dimension: 0,\n    pieces: [\n      {\n        lte: 0,\n        color: 'green'\n      },\n      {\n        gt: 0,\n        lte: 0.3,\n        color: 'cyan'\n      },\n      {\n        gt: 0.3,\n        lte: 0.7,\n        color: 'blue'\n      },\n      {\n        gt: 0.7,\n        color: 'purple'\n      }\n    ]\n  },\n  series: [\n    {\n      name: 'Easing',\n      type: 'line',\n      symbol: 'none',\n      smooth: true,\n      data: (function () {\n        let data = [];\n        let len = 10 / 0.04;\n        let x = 0;\n        for (let i = 0; i < len; i++) {\n          x = i * 0.04;\n          let y1 = (1 - x) * Math.cos(Math.PI / 4) + x * Math.cos((2 - 1) * Math.PI / 4);\n          let y2 = (1 - x) * Math.sin(Math.PI / 4) + x * Math.sin((2 - 1) * Math.PI / 4);\n          data.push([x, y1 * 30, y2 * 30]);\n        }\n        return data;\n      })()\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Globe and Animating Contour with ECharts GL and D3\nDESCRIPTION: This code sets up a globe visualization using ECharts GL and animates a contour on its surface using D3. It includes the creation of the ECharts instance, globe configuration, and the animation loop for updating the contour.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/animating-contour-on-globe.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar dom = document.getElementById('container');\nvar myChart = echarts.init(dom);\nvar app = {};\n\nvar option = null;\n\nfunction makeGlobe(data) {\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    var width = 800;\n    var height = 400;\n    canvas.width = width;\n    canvas.height = height;\n\n    var projection = d3.geoEquirectangular()\n        .scale(height / Math.PI)\n        .translate([width / 2, height / 2]);\n\n    var path = d3.geoPath()\n        .projection(projection)\n        .context(context);\n\n    var contours = d3.contours()\n        .size([width, height]);\n\n    return function(threshold) {\n        context.clearRect(0, 0, width, height);\n\n        context.beginPath();\n        path({type: 'Sphere'});\n        context.fillStyle = '#000';\n        context.fill();\n\n        context.beginPath();\n        path(topojson.feature(data, data.objects.land));\n        context.fillStyle = '#0E1B1B';\n        context.fill();\n        context.strokeStyle = '#16273E';\n        context.stroke();\n\n        context.beginPath();\n        path(topojson.mesh(data, data.objects.countries, function(a, b) { return a !== b; }));\n        context.strokeStyle = '#16273E';\n        context.stroke();\n\n        var thresholds = [];\n        for (var i = 1; i < 20; i++) {\n            thresholds.push((threshold + i / 20 - 1) % 1);\n        }\n\n        context.beginPath();\n        contours\n            .thresholds(thresholds)\n            (data.objects.noise.values)\n            .forEach(function (geometry) {\n                path(geometry);\n            });\n\n        context.globalCompositeOperation = 'lighter';\n        context.strokeStyle = 'rgba(0, 150, 200, 0.9)';\n        context.stroke();\n\n        context.globalCompositeOperation = 'source-over';\n\n        return canvas;\n    };\n}\n\nvar contourChart = echarts.init(document.createElement('canvas'), null, {\n    width: 4096,\n    height: 2048\n});\n\nvar img = new Image();\nimg.onload = function() {\n    var debug = {};\n    /**\n     * Prepare the canvases for color and depth\n     */\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    ctx.drawImage(img, 0, 0, img.width, img.height);\n\n    var canvasDepth = document.createElement('canvas');\n    var ctxDepth = canvasDepth.getContext('2d');\n    canvasDepth.width = img.width;\n    canvasDepth.height = img.height;\n    ctxDepth.drawImage(img, 0, 0, img.width, img.height);\n\n    var imageData = ctx.getImageData(0, 0, img.width, img.height).data;\n    var imageDataDepth = ctxDepth.getImageData(0, 0, img.width, img.height);\n    var depthData = imageDataDepth.data;\n\n    for (var i = 0; i < depthData.length; i += 4) {\n        var r = imageData[i];\n        var g = imageData[i + 1];\n        var b = imageData[i + 2];\n        var a = imageData[i + 3];\n\n        var gray = (r + g + b) / 3;\n\n        depthData[i] = gray;\n        depthData[i + 1] = gray;\n        depthData[i + 2] = gray;\n        depthData[i + 3] = 50;\n    }\n\n    ctxDepth.putImageData(imageDataDepth, 0, 0);\n\n    debug.diffuse = canvas;\n    debug.depth = canvasDepth;\n\n    option = {\n        globe: {\n            baseTexture: debug.diffuse,\n            heightTexture: debug.depth,\n\n            environment: '#000',\n\n            shading: 'realistic',\n            realisticMaterial: {\n                roughness: 0.8,\n                metalness: 0\n            },\n\n            postEffect: {\n                enable: true,\n                depthOfField: {\n                    enable: false,\n                    focalRange: 5000\n                }\n            },\n            light: {\n                ambient: {\n                    intensity: 0\n                },\n                main: {\n                    intensity: 1,\n                    shadow: false\n                },\n                ambientCubemap: {\n                    texture: 'asset/canyon.hdr',\n                    exposure: 0,\n                    diffuseIntensity: 0.2\n                }\n            },\n            viewControl: {\n                autoRotate: true\n            },\n\n            layers: [{\n                type: 'blend',\n                blendTo: 'emission',\n                texture: function() {\n                    return contourChart.getRenderedCanvas();\n                }\n            }]\n        },\n        series: []\n    };\n\n    myChart.setOption(option);\n\n    function update() {\n        var contourOption = {\n            backgroundColor: 'transparent',\n            geo: {\n                type: 'map',\n                map: 'world',\n                left: 0,\n                right: 0,\n                top: 0,\n                bottom: 0,\n                boundingCoords: [[-180, 90], [180, -90]],\n                silent: true\n            },\n            series: [{\n                type: 'custom',\n                progressive: 2000,\n                coordinateSystem: 'geo',\n                data: [],\n                renderItem: function() {}\n            }]\n        };\n        contourChart.setOption(contourOption);\n        \n        var t = Date.now() * 0.001 * 0.4;\n        contourChart.setOption({\n            series: [{\n                animation: false,\n                data: new Float32Array(4096 * 2048),\n                renderItem: function(params, api) {\n                    var x = api.value(0);\n                    var y = api.value(1);\n                    var v = Math.sin(y / 20 + t) * 3 + 3\n                        + Math.sin(x / 20 + t) * 3 + 3\n                        + Math.sin(Math.sqrt((x - 2048) * (x - 2048) + (y - 1024) * (y - 1024)) / 40 + t * 2) * 3;\n                    v = (Math.sin(v * 2.5 + t * 50) + 1) * 0.4 + 0.1;\n                    return v;\n                },\n                postEffect: {\n                    enable: true,\n                    bloomIntensity: 0.05\n                }\n            }]\n        });\n\n        myChart.setOption({\n            globe: {\n                layers: [{\n                    type: 'blend',\n                    blendTo: 'emission',\n                    texture: contourChart.getRenderedCanvas()\n                }]\n            }\n        });\n    }\n\n    setInterval(update, 20);\n}\n\nimg.src = 'asset/world.topo.bathy.200401.jpg';\n\nif (option && typeof option === \"object\") {\n    myChart.setOption(option, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Confidence Band Visualization with ECharts in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a confidence band visualization in ECharts. It defines a dataset containing base values and confidence interval ranges, then configures a chart with multiple series: a main line representing the data and two additional series for the upper and lower confidence bounds displayed as an area.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/confidence-band.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Confidence Band',\n    subtext: 'Example in MetricsGraphics.js',\n    left: 'center'\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      animation: false,\n      label: {\n        backgroundColor: '#ccc',\n        borderColor: '#aaa',\n        borderWidth: 1,\n        shadowBlur: 0,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0,\n        color: '#222'\n      }\n    },\n    formatter: function (params) {\n      return params[2].name + '<br />' + params[2].value;\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: {\n    type: 'category',\n    data: [\n      '1/1/2016',\n      '1/2/2016',\n      '1/3/2016',\n      '1/4/2016',\n      '1/5/2016',\n      '1/6/2016',\n      '1/7/2016',\n      '1/8/2016',\n      '1/9/2016',\n      '1/10/2016',\n      '1/11/2016',\n      '1/12/2016'\n    ]\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter: '{value} °C'\n    },\n    axisPointer: {\n      snap: true\n    }\n  },\n  series: [\n    {\n      name: 'L',\n      type: 'line',\n      data: [\n        0.1,\n        0.2,\n        0.3,\n        0.45,\n        0.45,\n        0.3,\n        0.25,\n        0.15,\n        0.1,\n        0.2,\n        0.3,\n        0.45\n      ],\n      smooth: true,\n      showSymbol: false,\n      lineStyle: {\n        width: 0\n      },\n      stack: 'confidence-band',\n      symbol: 'none'\n    },\n    {\n      name: 'U',\n      type: 'line',\n      data: [\n        0.9,\n        0.8,\n        0.7,\n        0.55,\n        0.55,\n        0.7,\n        0.75,\n        0.85,\n        0.9,\n        0.8,\n        0.7,\n        0.55\n      ],\n      smooth: true,\n      showSymbol: false,\n      lineStyle: {\n        width: 0\n      },\n      areaStyle: {\n        color: '#ccc'\n      },\n      stack: 'confidence-band',\n      symbol: 'none'\n    },\n    {\n      type: 'line',\n      data: [\n        0.5,\n        0.5,\n        0.5,\n        0.5,\n        0.5,\n        0.5,\n        0.5,\n        0.5,\n        0.5,\n        0.5,\n        0.5,\n        0.5\n      ],\n      smooth: true,\n      symbol: 'circle',\n      showSymbol: false,\n      lineStyle: {\n        color: 'red'\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dataset Sharing Between Multiple Charts in ECharts\nDESCRIPTION: This code creates multiple linked charts (line and pie) that share a common dataset. It demonstrates dataset definition, chart configuration, and event handling for interactive visualization. The example shows how selection in one chart can trigger filtering in another chart.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/dataset-link.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  legend: {},\n  tooltip: {\n    trigger: 'axis',\n    showContent: false\n  },\n  dataset: {\n    source: [\n      ['product', '2012', '2013', '2014', '2015', '2016', '2017'],\n      ['Milk Tea', 56.5, 82.1, 88.7, 70.1, 53.4, 85.1],\n      ['Matcha Latte', 51.1, 51.4, 55.1, 53.3, 73.8, 68.7],\n      ['Cheese Cocoa', 40.1, 62.2, 69.5, 36.4, 45.2, 32.5],\n      ['Walnut Brownie', 25.2, 37.1, 41.2, 18, 33.9, 49.1]\n    ]\n  },\n  xAxis: { type: 'category' },\n  yAxis: { gridIndex: 0 },\n  grid: { top: '55%' },\n  series: [\n    {\n      type: 'line',\n      smooth: true,\n      seriesLayoutBy: 'row',\n      emphasis: { focus: 'series' }\n    },\n    {\n      type: 'line',\n      smooth: true,\n      seriesLayoutBy: 'row',\n      emphasis: { focus: 'series' }\n    },\n    {\n      type: 'line',\n      smooth: true,\n      seriesLayoutBy: 'row',\n      emphasis: { focus: 'series' }\n    },\n    {\n      type: 'line',\n      smooth: true,\n      seriesLayoutBy: 'row',\n      emphasis: { focus: 'series' }\n    },\n    {\n      type: 'pie',\n      id: 'pie',\n      radius: '30%',\n      center: ['50%', '25%'],\n      emphasis: {\n        focus: 'self'\n      },\n      label: {\n        formatter: '{b}: {@2012} ({d}%)'\n      },\n      encode: {\n        itemName: 'product',\n        value: '2012',\n        tooltip: '2012'\n      }\n    }\n  ]\n};\n\nmyChart.on('updateAxisPointer', function (event) {\n  const xAxisInfo = event.axesInfo[0];\n  if (xAxisInfo) {\n    const dimension = xAxisInfo.value + 1;\n    myChart.setOption({\n      series: {\n        id: 'pie',\n        label: {\n          formatter: '{b}: {@[' + dimension + ']} ({d}%)'\n        },\n        encode: {\n          value: dimension,\n          tooltip: dimension\n        }\n      }\n    });\n  }\n});\n\nmyChart.setOption(option);\n```\n\n----------------------------------------\n\nTITLE: Front Matter YAML Configuration for Radar Chart Documentation\nDESCRIPTION: YAML front matter that defines metadata for a customized radar chart documentation page, including title, category, and Chinese title translation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/radar-custom.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Customized Radar Chart\ncategory: radar\ntitleCN: 自定义雷达图\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Left-Aligned Nodes in Sankey Chart with Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to create a Sankey chart with nodes aligned to the left using Apache ECharts. It sets up the chart options, including data series, node alignment, label formatting, and visual styling for links and nodes.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/sankey-nodeAlign-left.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  series: {\n    type: 'sankey',\n    layout: 'none',\n    emphasis: {\n      focus: 'adjacency'\n    },\n    nodeAlign: 'left',\n    data: [\n      { name: 'a' },\n      { name: 'b' },\n      { name: 'a1' },\n      { name: 'a2' },\n      { name: 'b1' },\n      { name: 'c' }\n    ],\n    links: [\n      { source: 'a', target: 'a1', value: 5 },\n      { source: 'a', target: 'a2', value: 3 },\n      { source: 'b', target: 'b1', value: 8 },\n      { source: 'a', target: 'b1', value: 3 },\n      { source: 'b1', target: 'a1', value: 1 },\n      { source: 'b1', target: 'c', value: 2 }\n    ],\n    orient: 'horizontal',\n    label: {\n      position: 'top'\n    },\n    lineStyle: {\n      color: 'source',\n      curveness: 0.5\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Car Dashboard Gauge Chart with Apache ECharts\nDESCRIPTION: This code snippet sets up a gauge chart that resembles a car dashboard. It includes multiple series for speed, rpm, and gas level, with custom styling for each gauge element. The chart uses advanced ECharts features like splitLine, axisTick, and pointer customization.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/gauge-car.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noption = {\n  tooltip: {\n    formatter: '{a} <br/>{b} : {c}%'\n  },\n  series: [\n    {\n      name: 'Speed',\n      type: 'gauge',\n      min: 0,\n      max: 220,\n      splitNumber: 11,\n      radius: '50%',\n      axisLine: {\n        lineStyle: {\n          width: 8,\n          color: [\n            [0.09, '#FF6E76'],\n            [0.82, '#75DAAD'],\n            [1, '#9FE6B8']\n          ]\n        }\n      },\n      pointer: {\n        icon: 'path://M12.8,0.7l12,40.1H0.7L12.8,0.7z',\n        length: '12%',\n        width: 20,\n        offsetCenter: [0, '-60%'],\n        itemStyle: {\n          color: 'inherit'\n        }\n      },\n      axisTick: {\n        length: 12,\n        lineStyle: {\n          color: 'inherit',\n          width: 2\n        }\n      },\n      splitLine: {\n        length: 20,\n        lineStyle: {\n          color: 'inherit',\n          width: 5\n        }\n      },\n      axisLabel: {\n        color: '#464646',\n        fontSize: 20,\n        distance: -60,\n        rotate: 'tangential',\n        formatter: function (value) {\n          if (value === 0) {\n            return '';\n          } else if (value === 1) {\n            return '0';\n          } else if (value === 2) {\n            return '20';\n          } else if (value === 3) {\n            return '40';\n          } else if (value === 4) {\n            return '60';\n          } else if (value === 5) {\n            return '80';\n          } else if (value === 6) {\n            return '100';\n          } else if (value === 7) {\n            return '120';\n          } else if (value === 8) {\n            return '140';\n          } else if (value === 9) {\n            return '160';\n          } else if (value === 10) {\n            return '180';\n          } else if (value === 11) {\n            return '200';\n          }\n          return '';\n        }\n      },\n      title: {\n        offsetCenter: [0, '-20%'],\n        fontSize: 30\n      },\n      detail: {\n        fontSize: 50,\n        offsetCenter: [0, '0%'],\n        valueAnimation: true,\n        formatter: function (value) {\n          return Math.round(value) + '';\n        },\n        color: 'inherit'\n      },\n      data: [{\n        value: 40,\n        name: 'km/h'\n      }]\n    },\n    {\n      name: 'Gas',\n      type: 'gauge',\n      center: ['75%', '50%'],\n      startAngle: 135,\n      endAngle: -45,\n      min: 0,\n      max: 2,\n      radius: '35%',\n      splitNumber: 2,\n      axisLine: {\n        lineStyle: {\n          width: 8,\n          color: [\n            [0.3, '#FF6E76'],\n            [0.7, '#FDDD60'],\n            [1, '#58D9F9']\n          ]\n        }\n      },\n      pointer: {\n        icon: 'path://M12.8,0.7l12,40.1H0.7L12.8,0.7z',\n        length: '12%',\n        width: 20,\n        offsetCenter: [0, '-60%'],\n        itemStyle: {\n          color: 'inherit'\n        }\n      },\n      axisTick: {\n        length: 12,\n        lineStyle: {\n          color: 'inherit',\n          width: 2\n        }\n      },\n      splitLine: {\n        length: 20,\n        lineStyle: {\n          color: 'inherit',\n          width: 5\n        }\n      },\n      axisLabel: {\n        color: '#464646',\n        fontSize: 20,\n        distance: -60,\n        rotate: 'tangential',\n        formatter: function (value) {\n          if (value === 0) {\n            return 'E';\n          } else if (value === 1) {\n            return 'Gas';\n          } else if (value === 2) {\n            return 'F';\n          }\n          return '';\n        }\n      },\n      title: {\n        offsetCenter: [0, '-20%'],\n        fontSize: 20\n      },\n      detail: {\n        fontSize: 30,\n        offsetCenter: [0, '0%'],\n        valueAnimation: true,\n        color: 'inherit'\n      },\n      data: [{\n        value: 0.5,\n        name: 'gas'\n      }]\n    },\n    {\n      name: 'Rpm',\n      type: 'gauge',\n      center: ['25%', '50%'],\n      radius: '35%',\n      min: 0,\n      max: 6,\n      startAngle: 135,\n      endAngle: -45,\n      splitNumber: 6,\n      axisLine: {\n        lineStyle: {\n          width: 8,\n          color: [\n            [0.16, '#58D9F9'],\n            [0.84, '#FDDD60'],\n            [1, '#FF6E76']\n          ]\n        }\n      },\n      pointer: {\n        icon: 'path://M12.8,0.7l12,40.1H0.7L12.8,0.7z',\n        length: '12%',\n        width: 20,\n        offsetCenter: [0, '-60%'],\n        itemStyle: {\n          color: 'inherit'\n        }\n      },\n      axisTick: {\n        length: 12,\n        lineStyle: {\n          color: 'inherit',\n          width: 2\n        }\n      },\n      splitLine: {\n        length: 20,\n        lineStyle: {\n          color: 'inherit',\n          width: 5\n        }\n      },\n      axisLabel: {\n        color: '#464646',\n        fontSize: 20,\n        distance: -60,\n        rotate: 'tangential',\n        formatter: function (value) {\n          if (value === 0) {\n            return '0';\n          } else if (value === 1) {\n            return '1';\n          } else if (value === 2) {\n            return '2';\n          } else if (value === 3) {\n            return '3';\n          } else if (value === 4) {\n            return '4';\n          } else if (value === 5) {\n            return '5';\n          } else if (value === 6) {\n            return '6';\n          }\n          return '';\n        }\n      },\n      title: {\n        offsetCenter: [0, '-20%'],\n        fontSize: 20\n      },\n      detail: {\n        fontSize: 30,\n        offsetCenter: [0, '0%'],\n        valueAnimation: true,\n        color: 'inherit'\n      },\n      data: [{\n        value: 2,\n        name: 'x1000 r/min'\n      }]\n    }\n  ]\n};\n\nsetInterval(function () {\n  const random = +(Math.random() * 60).toFixed(2);\n  myChart.setOption({\n    series: [{\n      data: [{\n        value: random\n      }]\n    }, {\n      data: [{\n        value: +(Math.random() * 2).toFixed(2)\n      }]\n    }, {\n      data: [{\n        value: +(Math.random() * 2).toFixed(2)\n      }]\n    }]\n  });\n}, 2000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Radial Tree Chart Options in JavaScript with Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to set up options for a radial tree chart using Apache ECharts. It includes data structure, layout settings, and style configurations for nodes and edges.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/tree-radial.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    trigger: 'item',\n    triggerOn: 'mousemove'\n  },\n  series: [\n    {\n      type: 'tree',\n      data: [data],\n      top: '18%',\n      bottom: '14%',\n      layout: 'radial',\n      symbol: 'emptyCircle',\n      symbolSize: 7,\n      initialTreeDepth: 3,\n      animationDurationUpdate: 750,\n      emphasis: {\n        focus: 'descendant'\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Dark-Themed Gauge Chart for Car Dashboard in JavaScript\nDESCRIPTION: This code snippet sets up a gauge chart using Apache ECharts to resemble a car's speedometer. It includes custom styling for a dark theme, multiple data series for different metrics, and a tooltip configuration.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/gauge-car-dark.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  backgroundColor: '#000',\n  tooltip: {\n    formatter: '{a} <br/>{b} : {c}%'\n  },\n  toolbox: {\n    feature: {\n      restore: {},\n      saveAsImage: {}\n    }\n  },\n  series: [\n    {\n      name: 'Pressure',\n      type: 'gauge',\n      min: 0,\n      max: 100,\n      splitNumber: 10,\n      radius: '80%',\n      axisLine: {\n        lineStyle: {\n          color: [\n            [0.09, 'lime'],\n            [0.82, '#1e90ff'],\n            [1, '#ff4500']\n          ],\n          width: 3,\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      axisLabel: {\n        fontWeight: 'bolder',\n        color: '#fff',\n        shadowColor: '#fff',\n        shadowBlur: 10\n      },\n      axisTick: {\n        length: 15,\n        lineStyle: {\n          color: 'auto',\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      splitLine: {\n        length: 25,\n        lineStyle: {\n          width: 3,\n          color: '#fff',\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      pointer: {\n        shadowColor: '#fff',\n        shadowBlur: 5\n      },\n      title: {\n        textStyle: {\n          fontWeight: 'bolder',\n          fontSize: 20,\n          fontStyle: 'italic',\n          color: '#fff',\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      detail: {\n        backgroundColor: 'rgba(30,144,255,0.1)',\n        borderWidth: 1,\n        borderColor: '#fff',\n        shadowColor: '#fff',\n        shadowBlur: 5,\n        offsetCenter: [0, '50%'],\n        textStyle: {\n          fontWeight: 'bolder',\n          color: '#fff'\n        }\n      },\n      data: [{ value: 40, name: 'km/h' }]\n    },\n    {\n      name: 'Rotate speed',\n      type: 'gauge',\n      center: ['20%', '55%'],\n      radius: '55%',\n      min: 0,\n      max: 7,\n      endAngle: 45,\n      splitNumber: 7,\n      axisLine: {\n        lineStyle: {\n          color: [\n            [0.29, 'lime'],\n            [0.86, '#1e90ff'],\n            [1, '#ff4500']\n          ],\n          width: 2,\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      axisLabel: {\n        fontWeight: 'bolder',\n        color: '#fff',\n        shadowColor: '#fff',\n        shadowBlur: 10\n      },\n      axisTick: {\n        length: 12,\n        lineStyle: {\n          color: 'auto',\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      splitLine: {\n        length: 20,\n        lineStyle: {\n          width: 3,\n          color: '#fff',\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      pointer: {\n        width: 5,\n        shadowColor: '#fff',\n        shadowBlur: 5\n      },\n      title: {\n        offsetCenter: [0, '-30%'],\n        textStyle: {\n          fontWeight: 'bolder',\n          fontStyle: 'italic',\n          color: '#fff',\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      detail: {\n        borderColor: '#fff',\n        shadowColor: '#fff',\n        shadowBlur: 5,\n        width: 80,\n        height: 30,\n        offsetCenter: [25, '20%'],\n        textStyle: {\n          fontWeight: 'bolder',\n          color: '#fff'\n        }\n      },\n      data: [{ value: 1.5, name: 'x1000 r/min' }]\n    },\n    {\n      name: 'Oil pressure',\n      type: 'gauge',\n      center: ['77%', '50%'],\n      radius: '25%',\n      min: 0,\n      max: 2,\n      startAngle: 135,\n      endAngle: 45,\n      splitNumber: 2,\n      axisLine: {\n        lineStyle: {\n          color: [\n            [0.2, 'lime'],\n            [0.8, '#1e90ff'],\n            [1, '#ff4500']\n          ],\n          width: 2,\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      axisTick: {\n        length: 12,\n        lineStyle: {\n          color: 'auto',\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      axisLabel: {\n        fontWeight: 'bolder',\n        color: '#fff',\n        shadowColor: '#fff',\n        shadowBlur: 10,\n        formatter: function (v) {\n          switch (v + '') {\n            case '0':\n              return 'L';\n            case '1':\n              return 'M';\n            case '2':\n              return 'H';\n          }\n        }\n      },\n      splitLine: {\n        length: 15,\n        lineStyle: {\n          width: 3,\n          color: '#fff',\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      pointer: {\n        width: 2,\n        shadowColor: '#fff',\n        shadowBlur: 5\n      },\n      title: {\n        show: false\n      },\n      detail: {\n        show: false\n      },\n      data: [{ value: 0.5, name: 'gas' }]\n    },\n    {\n      name: 'Gas',\n      type: 'gauge',\n      center: ['77%', '50%'],\n      radius: '25%',\n      min: 0,\n      max: 2,\n      startAngle: 315,\n      endAngle: 225,\n      splitNumber: 2,\n      axisLine: {\n        lineStyle: {\n          color: [\n            [0.2, 'lime'],\n            [0.8, '#1e90ff'],\n            [1, '#ff4500']\n          ],\n          width: 2,\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      axisTick: {\n        show: false\n      },\n      axisLabel: {\n        fontWeight: 'bolder',\n        color: '#fff',\n        shadowColor: '#fff',\n        shadowBlur: 10,\n        formatter: function (v) {\n          switch (v + '') {\n            case '0':\n              return 'E';\n            case '1':\n              return 'Gas';\n            case '2':\n              return 'F';\n          }\n        }\n      },\n      splitLine: {\n        length: 15,\n        lineStyle: {\n          width: 3,\n          color: '#fff',\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      pointer: {\n        width: 2,\n        shadowColor: '#fff',\n        shadowBlur: 5\n      },\n      title: {\n        show: false\n      },\n      detail: {\n        show: false\n      },\n      data: [{ value: 0.5, name: 'gas' }]\n    },\n    {\n      name: 'Water temperature',\n      type: 'gauge',\n      center: ['77%', '50%'],\n      radius: '25%',\n      min: 0,\n      max: 2,\n      startAngle: 315,\n      endAngle: 225,\n      splitNumber: 2,\n      axisLine: {\n        lineStyle: {\n          color: [\n            [0.2, 'lime'],\n            [0.8, '#1e90ff'],\n            [1, '#ff4500']\n          ],\n          width: 2,\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      axisTick: {\n        show: false\n      },\n      axisLabel: {\n        fontWeight: 'bolder',\n        color: '#fff',\n        shadowColor: '#fff',\n        shadowBlur: 10,\n        formatter: function (v) {\n          switch (v + '') {\n            case '0':\n              return 'H';\n            case '1':\n              return 'Water';\n            case '2':\n              return 'C';\n          }\n        }\n      },\n      splitLine: {\n        length: 15,\n        lineStyle: {\n          width: 3,\n          color: '#fff',\n          shadowColor: '#fff',\n          shadowBlur: 10\n        }\n      },\n      pointer: {\n        width: 2,\n        shadowColor: '#fff',\n        shadowBlur: 5\n      },\n      title: {\n        show: false\n      },\n      detail: {\n        show: false\n      },\n      data: [{ value: 0.5, name: 'gas' }]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Water Content Pictorial Bar Chart in ECharts\nDESCRIPTION: This code creates a pictorial bar chart showing water content in different parts of the human body. It uses custom images, colors, and styling to represent water percentages in brain, blood, and other body parts with values ranging from 83% to 31%.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pictorialBar-body-fill.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  backgroundColor: '#0f375f',\n  tooltip: {},\n  legend: {\n    data: ['all'],\n    textStyle: { color: '#ddd' }\n  },\n  xAxis: [\n    {\n      data: ['The brain', 'Blood', 'General\\nbody\\ncomposition', 'Muscle', 'Bone'],\n      axisTick: { show: false },\n      axisLine: { show: false },\n      axisLabel: {\n        margin: 20,\n        color: '#ddd',\n        fontSize: 14\n      }\n    }\n  ],\n  yAxis: {\n    splitLine: { show: false },\n    axisTick: { show: false },\n    axisLine: { show: false },\n    axisLabel: { show: false }\n  },\n  markLine: {\n    z: -1\n  },\n  animationEasing: 'elasticOut',\n  series: [\n    {\n      type: 'pictorialBar',\n      name: 'all',\n      hoverAnimation: true,\n      label: {\n        show: true,\n        position: 'top',\n        formatter: '{c} %',\n        fontSize: 16,\n        color: '#e54035'\n      },\n      symbol:\n        'path://M0,10 L10,10 C5.5,10 5.5,5 5,0 C4.5,5 4.5,10 0,10 z',\n      itemStyle: {\n        normal: {\n          color: {\n            type: 'linear',\n            x: 0,\n            y: 0,\n            x2: 0,\n            y2: 1,\n            colorStops: [\n              { offset: 0, color: '#e54035' },\n              { offset: 1, color: '#b9462c' }\n            ]\n          }\n        },\n        emphasis: {\n          opacity: 1\n        }\n      },\n      data: [\n        { value: 83, symbolOffset: [0, -5] },\n        { value: 92, symbolOffset: [0, -5] },\n        { value: 65, symbolOffset: [0, -5] },\n        { value: 72, symbolOffset: [0, -5] },\n        { value: 31, symbolOffset: [0, -5] }\n      ],\n      z: 10\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rounded Bar Chart on Polar Coordinate System using ECharts\nDESCRIPTION: This code snippet demonstrates the configuration of a rounded bar chart on a polar coordinate system using ECharts. It sets up the chart options including the coordinate system, series data, visual encoding, and interaction settings.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/polar-roundCap.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: [\n    {\n      text: 'Rounded Bar on Polar',\n      left: 'center'\n    },\n    {\n      text: 'Drink Consumption',\n      textStyle: {\n        fontSize: 14,\n        fontWeight: 'normal'\n      },\n      left: '5%',\n      top: '5%'\n    }\n  ],\n  polar: {\n    radius: [30, '80%']\n  },\n  angleAxis: {\n    max: 4,\n    startAngle: 75\n  },\n  radiusAxis: {\n    type: 'category',\n    data: ['a', 'b', 'c', 'd']\n  },\n  tooltip: {},\n  series: {\n    type: 'bar',\n    data: [2, 1.2, 2.4, 3.6],\n    coordinateSystem: 'polar',\n    label: {\n      show: true,\n      position: 'middle',\n      formatter: '{b}: {c}'\n    },\n    itemStyle: {\n      borderColor: 'white',\n      borderWidth: 1,\n      borderRadius: [0, 10, 10, 0]\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ECharts Option Player\nDESCRIPTION: Demonstrates how to initialize and use the ECharts Option Player. Shows configuration including chart instance management, series indexing, merge rules, data meta information for transitions, and option list setup. Also includes examples of player navigation methods.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-simple-option-player/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myChart = echarts.init(dom);\n\n// Firstly, Initialize with an array of echarts option info:\n\nconst player = ecSimpleOptionPlayer.create({\n\n    /**\n     * Mandatory.\n     *\n     * `chart` can be the echarts instance\n     * or chart instance getter function.\n     */\n    chart: function () {\n        return myChart;\n    },\n\n    /**\n     * Optional.\n     *\n     * By default `0`.\n     */\n    seriesIndex: 0,\n\n    /**\n     * Optional.\n     *\n     * If some component type are declared here,\n     * when changing option, those types of components will be updated\n     * follow the REPLACE_MERGE rule.\n     * That is, all of the old components will be replaced by the new one\n     * (except those mapped by the same id).\n     * If not specified, when option changed, component will follow the\n     * NORMAL_MERGE rule, where none of the existing components will be removed\n     * but only merged by new ones.\n     *\n     * See https://echarts.apache.org/en/api.html#echartsInstance.setOption\n     * for more details of REPLACE_MERGE and NORMAL_MERGE rule.\n     */\n    replaceMerge: ['xAxis', 'yAxis']\n\n    /**\n     * Mandatory.\n     *\n     * The data meta info used to determine how to make transition parameter when\n     * calling `myChart.setOption` internally.\n     *\n     * See the example below:\n     * `'aaa'`, `'bbb'` are \"dataMetaKey\", named by user,\n     * and can be referenced in `optionList` for each `option`.\n     *\n     * The rule is:\n     *     The field `dimensions` defines a list of dimension names.\n     *     The field `uniqueDimension` uniqueDimension a single dimension name.\n     *     If the `option_A` is about to switch to the `option_B`,\n     *     suppose `option_A` reference `dataMeta` `aaa` and `option_B` reference `dataMeta` `bbb`,\n     *     if `aaa.uniqueDimension` in `bbb.dimensions` or `bbb.uniqueDimension` in `aaa.dimensions`,\n     *     we can make transition animation (combine and separate effect).\n     */\n    dataMeta: {\n        aaa: {\n            dimensions: ['qqq', 'www', 'eee', 'rrr']\n        },\n        bbb: {\n            dimensions: ['ccc', 'www', 'eee'],\n            uniqueDimension: 'www',\n            // Can be 'duplicate' or 'split'\n            dividingMethod: 'duplicate'\n        },\n        ...\n    },\n\n    /**\n     * echarts option collection:\n     */\n    optionList: [\n        // dataMetaKey is the key of 'dataMeta'.\n        { key: 'Time_Income_Bar', option: option0, dataMetaKey: 'aaa' },\n        { key: 'Population_Income_Scatter', option: option1, dataMetaKey: 'bbb' },\n        { key: 'Time_Income_Pie', option: option2, dataMetaKey: 'aaa' },\n        ...\n    ]\n});\n\n\n// Then start to play:\n\n// Display next option (from the first option).\nplayer.next();\n// Display previous option.\nplayer.previous();\n// Display the specified option.\nplayer.go('Time_Income_Pie');\n// return `['Time_Income_Bar', 'Population_Income_Scatter', 'Time_Income_Pie']`\nplayer.getOptionKeys();\n```\n\n----------------------------------------\n\nTITLE: Configuring Pictorial Bar Chart for Vehicle Usage Visualization in ECharts\nDESCRIPTION: This code snippet sets up an ECharts option object to create a pictorial bar chart representing various modes of transportation. It uses custom SVG paths as symbols for each vehicle type and configures the chart layout, colors, and data series.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pictorialBar-vehicle.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'shadow'\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  yAxis: [\n    {\n      type: 'category',\n      data: ['reindeer', 'ship', 'plane', 'train', 'car'],\n      axisTick: {\n        alignWithLabel: true\n      }\n    }\n  ],\n  xAxis: [\n    {\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'value',\n      type: 'pictorialBar',\n      barCategoryGap: '-130%',\n      symbol: 'path://M-22.788,24.521c2.08-0.986,3.611-3.905,4.984-5.892 c-2.686,2.782-5.047,5.884-9.102,7.312c-0.992,0.005-0.25-2.016,0.34-2.362l1.852-0.41c0.564-0.218,0.785-0.842,0.902-1.347 c2.133-0.727,4.91-4.129,6.031-6.194c1.748-0.7,4.443-0.679,5.734-2.293c1.176-1.468,0.393-3.992,1.215-6.557 c0.24-0.754,0.574-1.581,1.008-2.293c-0.611,0.011-1.348-0.061-1.959-0.608c-1.391-1.245-0.785-2.086-1.297-3.313 c1.684,0.744,2.5,2.584,4.426,2.586C-8.46,3.012-8.255,2.901-8.04,2.824c6.031-1.952,15.182-0.165,19.498-3.937 c1.15-3.933-1.24-9.846-1.229-9.938c0.008-0.062-1.314-0.004-1.803-0.258c-1.119-0.771-6.531-3.75-0.17-3.33 c0.314-0.045,0.943,0.259,1.439,0.435c-0.289-1.694-0.92-0.144-3.311-1.946c0,0-1.1-0.855-1.764-1.98 c-0.836-1.09-2.01-2.825-2.992-4.031c-1.523-2.476,1.367,0.709,1.816,1.108c1.768,1.704,1.844,3.281,3.232,3.983 c0.195,0.126,1.292,1.032,1.771,0.647c0.432-0.349-0.137-1.55-0.131-1.568c2.676,3.438,4.562,8.175,6.107,10.788 c1.916-2.236,3.469-4.836,5.824-7.002c-0.629,1.768-1.445,3.32-2.432,4.771c0.903-0.02,2.969-0.349,3.469-1.523 c-0.902-1.088-2.961-6.21-2.961-6.21l0.219-0.456c1.962,1.361,4.292,2.626,5.166,5.266c0,0,2.334-1.417,2.326-1.41 c0.008,0.008-0.492-1.449-0.615-1.946c0,0-1.535-3.545-1.543-3.562c-0.006-0.016,0.219,0.406,0.219,0.406 c-0.045-0.18-0.545-3.859-0.727-4.861c-1.336-8.634-2.316-9.913-2.316-9.913c-1.201-1.539-1.855-3.14-1.938-3.254 c0-0.008-0.008-0.018-0.016-0.018c0.008,0,0.016,0.011,0.016,0.018c-0.008-0.008-0.055-0.058-0.137-0.137 c0.053,0.053,0.086,0.089,0.094,0.098c-2.689-2.834-7.512-4.233-12.238-3.382C2.857-25.656,9.254-23.125,12.316-20.224z',\n      symbolRepeat: 'fixed',\n      symbolMargin: '5%',\n      symbolClip: true,\n      symbolSize: 22.5,\n      symbolPosition: 'start',\n      symbolOffset: [20, 0],\n      symbolBoundingData: 300,\n      data: [300, 232, 201, 134, 190],\n      z: 10\n    },\n    {\n      name: 'full',\n      type: 'pictorialBar',\n      barGap: '-100%',\n      symbol: 'path://M-22.788,24.521c2.08-0.986,3.611-3.905,4.984-5.892 c-2.686,2.782-5.047,5.884-9.102,7.312c-0.992,0.005-0.25-2.016,0.34-2.362l1.852-0.41c0.564-0.218,0.785-0.842,0.902-1.347 c2.133-0.727,4.91-4.129,6.031-6.194c1.748-0.7,4.443-0.679,5.734-2.293c1.176-1.468,0.393-3.992,1.215-6.557 c0.24-0.754,0.574-1.581,1.008-2.293c-0.611,0.011-1.348-0.061-1.959-0.608c-1.391-1.245-0.785-2.086-1.297-3.313 c1.684,0.744,2.5,2.584,4.426,2.586C-8.46,3.012-8.255,2.901-8.04,2.824c6.031-1.952,15.182-0.165,19.498-3.937 c1.15-3.933-1.24-9.846-1.229-9.938c0.008-0.062-1.314-0.004-1.803-0.258c-1.119-0.771-6.531-3.75-0.17-3.33 c0.314-0.045,0.943,0.259,1.439,0.435c-0.289-1.694-0.92-0.144-3.311-1.946c0,0-1.1-0.855-1.764-1.98 c-0.836-1.09-2.01-2.825-2.992-4.031c-1.523-2.476,1.367,0.709,1.816,1.108c1.768,1.704,1.844,3.281,3.232,3.983 c0.195,0.126,1.292,1.032,1.771,0.647c0.432-0.349-0.137-1.55-0.131-1.568c2.676,3.438,4.562,8.175,6.107,10.788 c1.916-2.236,3.469-4.836,5.824-7.002c-0.629,1.768-1.445,3.32-2.432,4.771c0.903-0.02,2.969-0.349,3.469-1.523 c-0.902-1.088-2.961-6.21-2.961-6.21l0.219-0.456c1.962,1.361,4.292,2.626,5.166,5.266c0,0,2.334-1.417,2.326-1.41 c0.008,0.008-0.492-1.449-0.615-1.946c0,0-1.535-3.545-1.543-3.562c-0.006-0.016,0.219,0.406,0.219,0.406 c-0.045-0.18-0.545-3.859-0.727-4.861c-1.336-8.634-2.316-9.913-2.316-9.913c-1.201-1.539-1.855-3.14-1.938-3.254 c0-0.008-0.008-0.018-0.016-0.018c0.008,0,0.016,0.011,0.016,0.018c-0.008-0.008-0.055-0.058-0.137-0.137 c0.053,0.053,0.086,0.089,0.094,0.098c-2.689-2.834-7.512-4.233-12.238-3.382C2.857-25.656,9.254-23.125,12.316-20.224z',\n      symbolRepeat: 'fixed',\n      symbolMargin: '5%',\n      symbolClip: true,\n      symbolSize: 22.5,\n      symbolPosition: 'start',\n      symbolOffset: [20, 0],\n      symbolBoundingData: 300,\n      data: [300, 300, 300, 300, 300],\n      z: 5\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Step Line Chart with Area Fill in Apache ECharts\nDESCRIPTION: This code snippet shows how to create a step line chart with area fill. It uses the 'middle' step mode and includes customizations for the area style and emphasis effects.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-step.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Step Line'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {\n    data: ['Step Start', 'Step Middle', 'Step End']\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      name: 'Step Start',\n      type: 'line',\n      step: 'start',\n      data: [120, 132, 101, 134, 90, 230, 210]\n    },\n    {\n      name: 'Step Middle',\n      type: 'line',\n      step: 'middle',\n      data: [220, 282, 201, 234, 290, 430, 410]\n    },\n    {\n      name: 'Step End',\n      type: 'line',\n      step: 'end',\n      data: [450, 432, 401, 454, 590, 530, 510]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Pie Charts with Apache ECharts in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up the configuration for nested pie charts using Apache ECharts. It defines the chart options, including series data, label styles, and layout settings for both inner and outer pie rings.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pie-nest.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    trigger: 'item',\n    formatter: '{a} <br/>{b}: {c} ({d}%)'\n  },\n  legend: {\n    data: [\n      'Direct',\n      'Marketing',\n      'Search Engine',\n      'Email',\n      'Union Ads',\n      'Video Ads',\n      'Baidu',\n      'Google',\n      'Bing',\n      'Others'\n    ]\n  },\n  series: [\n    {\n      name: 'Access From',\n      type: 'pie',\n      selectedMode: 'single',\n      radius: [0, '30%'],\n      label: {\n        position: 'inner',\n        fontSize: 14\n      },\n      labelLine: {\n        show: false\n      },\n      data: [\n        { value: 1548, name: 'Search Engine' },\n        { value: 775, name: 'Direct' },\n        { value: 679, name: 'Marketing', selected: true }\n      ]\n    },\n    {\n      name: 'Access From',\n      type: 'pie',\n      radius: ['45%', '60%'],\n      labelLine: {\n        length: 30\n      },\n      label: {\n        formatter: '{a|{a}}\\n{hr|}\\n  {b|{b}: }{c}  {per|{d}%}  ',\n        backgroundColor: '#F6F8FC',\n        borderColor: '#8C8D8E',\n        borderWidth: 1,\n        borderRadius: 4,\n        rich: {\n          a: {\n            color: '#6E7079',\n            lineHeight: 22,\n            align: 'center'\n          },\n          hr: {\n            borderColor: '#8C8D8E',\n            width: '100%',\n            borderWidth: 1,\n            height: 0\n          },\n          b: {\n            color: '#4C5058',\n            fontSize: 14,\n            fontWeight: 'bold',\n            lineHeight: 33\n          },\n          per: {\n            color: '#fff',\n            backgroundColor: '#4C5058',\n            padding: [3, 4],\n            borderRadius: 4\n          }\n        }\n      },\n      data: [\n        { value: 1048, name: 'Baidu' },\n        { value: 335, name: 'Direct' },\n        { value: 310, name: 'Email' },\n        { value: 251, name: 'Google' },\n        { value: 234, name: 'Union Ads' },\n        { value: 147, name: 'Bing' },\n        { value: 135, name: 'Video Ads' },\n        { value: 102, name: 'Others' }\n      ]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Bar Chart for GitHub Punch Card using ECharts GL in JavaScript\nDESCRIPTION: This code snippet sets up the configuration for a 3D bar chart using ECharts GL. It defines the chart dimensions, axes, series data, and visual styling to create a punch card visualization of GitHub activity.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/bar3d-punch-card.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n    backgroundColor: '#fff',\n    visualMap: {\n        max: 20,\n        inRange: {\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n        }\n    },\n    xAxis3D: {\n        type: 'category',\n        data: ['12a', '1a', '2a', '3a', '4a', '5a', '6a',\n        '7a', '8a', '9a','10a','11a',\n        '12p', '1p', '2p', '3p', '4p', '5p',\n        '6p', '7p', '8p', '9p', '10p', '11p'],\n        name: 'Time'\n    },\n    yAxis3D: {\n        type: 'category',\n        data: ['Saturday', 'Friday', 'Thursday',\n        'Wednesday', 'Tuesday', 'Monday', 'Sunday'],\n        name: 'Weekday'\n    },\n    zAxis3D: {\n        type: 'value',\n        name: 'Commits'\n    },\n    grid3D: {\n        boxWidth: 200,\n        boxDepth: 80,\n        viewControl: {\n            // projection: 'orthographic'\n        },\n        light: {\n            main: {\n                intensity: 1.2,\n                shadow: true\n            },\n            ambient: {\n                intensity: 0.3\n            }\n        }\n    },\n    series: [{\n        type: 'bar3D',\n        data: [[ 0, 0, 5], [ 0, 1, 1], [ 0, 2, 0], [ 0, 3, 0], [ 0, 4, 0], [ 0, 5, 0], [ 0, 6, 0], [ 0, 7, 0], [ 0, 8, 0], [ 0, 9, 0], [ 0, 10, 0], [ 0, 11, 2], [ 0, 12, 4], [ 0, 13, 1], [ 0, 14, 1], [ 0, 15, 3], [ 0, 16, 4], [ 0, 17, 6], [ 0, 18, 4], [ 0, 19, 4], [ 0, 20, 3], [ 0, 21, 3], [ 0, 22, 2], [ 0, 23, 5], [ 1, 0, 7], [ 1, 1, 0], [ 1, 2, 0], [ 1, 3, 0], [ 1, 4, 0], [ 1, 5, 0], [ 1, 6, 0], [ 1, 7, 0], [ 1, 8, 0], [ 1, 9, 0], [ 1, 10, 5], [ 1, 11, 2], [ 1, 12, 2], [ 1, 13, 6], [ 1, 14, 9], [ 1, 15, 11], [ 1, 16, 6], [ 1, 17, 7], [ 1, 18, 8], [ 1, 19, 12], [ 1, 20, 5], [ 1, 21, 5], [ 1, 22, 7], [ 1, 23, 2], [ 2, 0, 1], [ 2, 1, 1], [ 2, 2, 0], [ 2, 3, 0], [ 2, 4, 0], [ 2, 5, 0], [ 2, 6, 0], [ 2, 7, 0], [ 2, 8, 0], [ 2, 9, 0], [ 2, 10, 3], [ 2, 11, 2], [ 2, 12, 1], [ 2, 13, 9], [ 2, 14, 8], [ 2, 15, 10], [ 2, 16, 6], [ 2, 17, 5], [ 2, 18, 5], [ 2, 19, 5], [ 2, 20, 7], [ 2, 21, 4], [ 2, 22, 2], [ 2, 23, 4], [ 3, 0, 7], [ 3, 1, 3], [ 3, 2, 0], [ 3, 3, 0], [ 3, 4, 0], [ 3, 5, 0], [ 3, 6, 0], [ 3, 7, 0], [ 3, 8, 1], [ 3, 9, 0], [ 3, 10, 5], [ 3, 11, 4], [ 3, 12, 7], [ 3, 13, 14], [ 3, 14, 13], [ 3, 15, 12], [ 3, 16, 9], [ 3, 17, 5], [ 3, 18, 5], [ 3, 19, 10], [ 3, 20, 6], [ 3, 21, 4], [ 3, 22, 4], [ 3, 23, 1], [ 4, 0, 1], [ 4, 1, 3], [ 4, 2, 0], [ 4, 3, 0], [ 4, 4, 0], [ 4, 5, 1], [ 4, 6, 0], [ 4, 7, 0], [ 4, 8, 0], [ 4, 9, 2], [ 4, 10, 4], [ 4, 11, 4], [ 4, 12, 2], [ 4, 13, 4], [ 4, 14, 4], [ 4, 15, 14], [ 4, 16, 12], [ 4, 17, 1], [ 4, 18, 8], [ 4, 19, 5], [ 4, 20, 3], [ 4, 21, 7], [ 4, 22, 3], [ 4, 23, 0], [ 5, 0, 2], [ 5, 1, 1], [ 5, 2, 0], [ 5, 3, 3], [ 5, 4, 0], [ 5, 5, 0], [ 5, 6, 0], [ 5, 7, 0], [ 5, 8, 2], [ 5, 9, 0], [ 5, 10, 4], [ 5, 11, 1], [ 5, 12, 5], [ 5, 13, 10], [ 5, 14, 5], [ 5, 15, 7], [ 5, 16, 11], [ 5, 17, 6], [ 5, 18, 0], [ 5, 19, 5], [ 5, 20, 3], [ 5, 21, 4], [ 5, 22, 2], [ 5, 23, 0], [ 6, 0, 1], [ 6, 1, 0], [ 6, 2, 0], [ 6, 3, 0], [ 6, 4, 0], [ 6, 5, 0], [ 6, 6, 0], [ 6, 7, 0], [ 6, 8, 0], [ 6, 9, 0], [ 6, 10, 1], [ 6, 11, 0], [ 6, 12, 2], [ 6, 13, 1], [ 6, 14, 3], [ 6, 15, 4], [ 6, 16, 0], [ 6, 17, 0], [ 6, 18, 0], [ 6, 19, 0], [ 6, 20, 1], [ 6, 21, 2], [ 6, 22, 2], [ 6, 23, 6]].map(function (item) {\n            return {\n                value: [item[1], item[0], item[2]],\n            }\n        }),\n        shading: 'lambert',\n        \n        label: {\n            textStyle: {\n                fontSize: 16,\n                borderWidth: 1\n            }\n        },\n        \n        emphasis: {\n            label: {\n                textStyle: {\n                    fontSize: 20,\n                    color: '#900'\n                }\n            },\n            itemStyle: {\n                color: '#900'\n            }\n        }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sunburst Chart for Drink Flavors in JavaScript\nDESCRIPTION: This snippet defines the configuration for a sunburst chart using Apache ECharts. It sets up the data structure, colors, and layout options to visualize a hierarchy of drink flavors.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/sunburst-drink.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  series: {\n    type: 'sunburst',\n    data: [\n      {\n        name: 'Grandpa',\n        children: [\n          {\n            name: 'Uncle Leo',\n            value: 15,\n            children: [\n              {\n                name: 'Cousin Jack',\n                value: 2\n              },\n              {\n                name: 'Cousin Mary',\n                value: 5,\n                children: [\n                  {\n                    name: 'Jackson',\n                    value: 2\n                  }\n                ]\n              },\n              {\n                name: 'Cousin Ben',\n                value: 4\n              }\n            ]\n          },\n          {\n            name: 'Father',\n            value: 10,\n            children: [\n              {\n                name: 'Me',\n                value: 5\n              },\n              {\n                name: 'Brother Peter',\n                value: 1\n              }\n            ]\n          }\n        ]\n      },\n      {\n        name: 'Nancy',\n        children: [\n          {\n            name: 'Uncle Nike',\n            children: [\n              {\n                name: 'Cousin Betty',\n                value: 1\n              },\n              {\n                name: 'Cousin Jenny',\n                value: 2\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    radius: [0, '90%'],\n    itemStyle: {\n      borderRadius: 7,\n      borderWidth: 2\n    },\n    label: {\n      show: false\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Spirits pictorialBar Chart in ECharts\nDESCRIPTION: This code snippet defines the configuration for an ECharts spirits-themed visualization using pictorialBar. It includes data definition, axis configuration, and styling for a chart showing percentages with spirit icons.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pictorialBar-spirit.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {},\n  legend: {\n    data: ['Amount']\n  },\n  xAxis: {\n    data: ['Spirits', 'Beer', 'Wine'],\n    axisTick: { show: false },\n    axisLine: { show: false },\n    axisLabel: { show: false }\n  },\n  yAxis: {\n    splitLine: { show: false },\n    axisTick: { show: false },\n    axisLine: { show: false },\n    axisLabel: { show: false }\n  },\n  markLine: {\n    z: -1\n  },\n  animationEasing: 'elasticOut',\n  series: [\n    {\n      type: 'pictorialBar',\n      name: 'Amount',\n      symbolRepeat: true,\n      symbolSize: ['80%', '60%'],\n      barCategoryGap: '40%',\n      data: [\n        {\n          value: 60,\n          symbol: 'image://https://echarts.apache.org/examples/data/asset/img/spirit.png'\n        },\n        {\n          value: 40,\n          symbol: 'image://https://echarts.apache.org/examples/data/asset/img/beer.png'\n        },\n        {\n          value: 12,\n          symbol: 'image://https://echarts.apache.org/examples/data/asset/img/wine.png'\n        }\n      ],\n      label: {\n        show: true,\n        formatter: function (params) {\n          return ((params.value / 100) * 100).toFixed(0) + '%';\n        },\n        position: 'top'\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boxplot Chart for Light Velocity Data using ECharts\nDESCRIPTION: This code snippet sets up the configuration for a boxplot chart in ECharts, visualizing light velocity data. It defines the chart dimensions, axis properties, data processing method, and visual styling options.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/boxplot-light-velocity.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: [\n    {\n      text: 'Michelson-Morley Experiment',\n      left: 'center'\n    },\n    {\n      text: 'upper: Q3 + 1.5 * IQR \\nlower: Q1 - 1.5 * IQR',\n      borderColor: '#999',\n      borderWidth: 1,\n      textStyle: {\n        fontWeight: 'normal',\n        fontSize: 14,\n        lineHeight: 20\n      },\n      left: '10%',\n      top: '90%'\n    }\n  ],\n  dataset: [\n    {\n      source: [\n        [850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960],\n        [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790, 810, 880, 880, 830, 800, 790, 760, 800],\n        [880, 880, 880, 860, 720, 720, 620, 860, 970, 950, 880, 910, 850, 870, 840, 840, 850, 840, 840, 840],\n        [890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920, 890, 860, 880, 720, 840, 850, 850, 780],\n        [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870, 810, 740, 810, 940, 950, 800, 810, 870]\n      ]\n    },\n    {\n      transform: {\n        type: 'boxplot',\n        config: { itemNameFormatter: 'expr {value}' }\n      }\n    },\n    {\n      fromDatasetIndex: 1,\n      fromTransformResult: 1\n    }\n  ],\n  tooltip: {\n    trigger: 'item',\n    axisPointer: {\n      type: 'shadow'\n    }\n  },\n  grid: {\n    left: '10%',\n    right: '10%',\n    bottom: '15%'\n  },\n  yAxis: {\n    type: 'category',\n    boundaryGap: true,\n    nameGap: 30,\n    splitArea: {\n      show: false\n    },\n    splitLine: {\n      show: false\n    }\n  },\n  xAxis: {\n    type: 'value',\n    name: 'km/s minus 299,000',\n    splitArea: {\n      show: true\n    }\n  },\n  series: [\n    {\n      name: 'boxplot',\n      type: 'boxplot',\n      datasetIndex: 1\n    },\n    {\n      name: 'outlier',\n      type: 'scatter',\n      datasetIndex: 2\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Area Pieces in ECharts Line Chart\nDESCRIPTION: This code snippet sets up an ECharts line chart with area highlighting using visualMap. It defines data, axis configurations, and visualMap settings to create a line chart with colored area pieces based on specific data ranges.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/area-pieces.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Customized Area Pieces'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    data: ['2014-01-01', '2014-01-02', '2014-01-03', '2014-01-04', '2014-01-05', '2014-01-06', '2014-01-07', '2014-01-08', '2014-01-09', '2014-01-10', '2014-01-11', '2014-01-12', '2014-01-13', '2014-01-14', '2014-01-15', '2014-01-16', '2014-01-17', '2014-01-18', '2014-01-19', '2014-01-20', '2014-01-21', '2014-01-22', '2014-01-23', '2014-01-24', '2014-01-25', '2014-01-26', '2014-01-27', '2014-01-28', '2014-01-29', '2014-01-30', '2014-01-31', '2014-02-01', '2014-02-02', '2014-02-03', '2014-02-04', '2014-02-05', '2014-02-06', '2014-02-07', '2014-02-08', '2014-02-09', '2014-02-10', '2014-02-11', '2014-02-12', '2014-02-13', '2014-02-14', '2014-02-15', '2014-02-16', '2014-02-17', '2014-02-18', '2014-02-19', '2014-02-20', '2014-02-21', '2014-02-22', '2014-02-23', '2014-02-24', '2014-02-25', '2014-02-26', '2014-02-27', '2014-02-28']\n  },\n  visualMap: {\n    top: 50,\n    right: 10,\n    textStyle: {\n      fontSize: 14\n    },\n    pieces: [\n      {\n        gt: 0,\n        lte: 50,\n        color: '#93CE07'\n      },\n      {\n        gt: 50,\n        lte: 100,\n        color: '#FBDB0F'\n      },\n      {\n        gt: 100,\n        lte: 150,\n        color: '#FC7D02'\n      },\n      {\n        gt: 150,\n        lte: 200,\n        color: '#FD0100'\n      },\n      {\n        gt: 200,\n        lte: 300,\n        color: '#AA069F'\n      },\n      {\n        gt: 300,\n        color: '#AC3B2A'\n      }\n    ],\n    outOfRange: {\n      color: '#999'\n    }\n  },\n  series: {\n    name: 'Customized Area Pieces',\n    type: 'line',\n    data: [1, 30, 95, 45, 500, 19, 300, 270, 32, 200, 90, 130, 45, 150, 170, 90, 100, 50, 80, 45, 87, 201, 285, 35, 45, 130, 155, 44, 246, 98, 48, 152, 198, 23, 123, 89, 112, 170, 265, 276, 200, 105, 185, 250, 180, 160, 190, 190, 280, 250, 267, 215, 211, 130, 150, 135, 212, 227, 280, 315]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Rendering Basic Sunburst Chart with Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to set up the configuration for a basic sunburst chart using Apache ECharts. It includes the series type, data structure, and various styling options for the chart elements.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/sunburst-simple.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  series: {\n    type: 'sunburst',\n    data: [\n      {\n        name: 'Grandpa',\n        children: [\n          {\n            name: 'Uncle Leo',\n            value: 15,\n            children: [\n              {\n                name: 'Cousin Jack',\n                value: 2\n              },\n              {\n                name: 'Cousin Mary',\n                value: 5,\n                children: [\n                  {\n                    name: 'Jackson',\n                    value: 2\n                  }\n                ]\n              },\n              {\n                name: 'Cousin Ben',\n                value: 4\n              }\n            ]\n          },\n          {\n            name: 'Father',\n            value: 10,\n            children: [\n              {\n                name: 'Me',\n                value: 5\n              },\n              {\n                name: 'Brother Peter',\n                value: 1\n              }\n            ]\n          }\n        ]\n      },\n      {\n        name: 'Nancy',\n        children: [\n          {\n            name: 'Uncle Nike',\n            children: [\n              {\n                name: 'Cousin Betty',\n                value: 1\n              },\n              {\n                name: 'Cousin Jenny',\n                value: 2\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    radius: [0, '90%'],\n    label: {\n      rotate: 'radial'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Wind Barb Chart Options in Apache ECharts\nDESCRIPTION: This snippet defines the options for creating a wind barb chart using Apache ECharts. It sets up the chart title, tooltip, legend, and axes configurations. The code also includes data preparation and custom series definition for wind barbs.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/wind-barb.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Wind Barb Chart'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {\n    data: ['Altitude', 'Wind Speed']\n  },\n  xAxis: {\n    type: 'value',\n    name: 'Wind Speed',\n    axisLabel: {\n      formatter: '{value} m/s'\n    }\n  },\n  yAxis: {\n    type: 'value',\n    name: 'Altitude',\n    axisLabel: {\n      formatter: '{value} km'\n    }\n  },\n  series: [\n    {\n      name: 'Altitude',\n      type: 'line',\n      data: data.map(function (item) {\n        return item[2];\n      })\n    },\n    {\n      name: 'Wind Speed',\n      type: 'custom',\n      renderItem: renderWindBarb,\n      data: data,\n      encode: {\n        x: 1,\n        y: 2\n      },\n      symbolSize: 35,\n      z: 10\n    }\n  ]\n};\n\nvar canvas = document.createElement('canvas');\nvar ctx = canvas.getContext('2d');\nvar barb = new WindBarb(ctx);\n\nfunction renderWindBarb(param, api) {\n  var point = api.coord([api.value(1), api.value(2)]);\n  var windSpeed = api.value(1);\n  var windDirection = api.value(0) + 180;\n\n  return {\n    type: 'group',\n    children: [{\n      type: 'image',\n      style: {\n        image: barb.getWindBarbImage(windSpeed, windDirection),\n        x: -api.size()[0] / 2,\n        y: -api.size()[1] / 2,\n        width: api.size()[0],\n        height: api.size()[1]\n      },\n      position: point\n    }]\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Using ECharts Regression Transform\nDESCRIPTION: Code showing how to register and use the regression transform in ECharts 5.0+, configuring the regression method and parameters.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\necharts.registerTransform(ecStat.transform.regression);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setOption({\n    dataset: [{\n        source: data\n    }, {\n        type: 'ecStat:regression',\n        config: {\n            method: regressionType,\n            ...opt\n        }\n    }],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Les Miserables Character Relationship Graph in ECharts\nDESCRIPTION: This code snippet demonstrates how to configure an ECharts graph to visualize character relationships from Les Miserables. It sets up a force-directed graph with node categories, tooltip configurations, and various layout parameters.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/graph.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Les Miserables',\n    subtext: 'Default layout',\n    top: 'bottom',\n    left: 'right'\n  },\n  tooltip: {},\n  legend: [\n    {\n      // selectedMode: 'single',\n      data: categories.map(function(a) {\n        return a.name;\n      })\n    }\n  ],\n  animationDuration: 1500,\n  animationEasingUpdate: 'quinticInOut',\n  series: [\n    {\n      name: 'Les Miserables',\n      type: 'graph',\n      layout: 'none',\n      data: graph.nodes,\n      links: graph.links,\n      categories: categories,\n      roam: true,\n      label: {\n        position: 'right',\n        formatter: '{b}'\n      },\n      lineStyle: {\n        color: 'source',\n        curveness: 0.3\n      },\n      emphasis: {\n        focus: 'adjacency',\n        lineStyle: {\n          width: 10\n        }\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Scatter Plot of Painter Color Choices with ECharts\nDESCRIPTION: This code sets up a 3D scatter plot using ECharts to visualize color choices of master painters. It defines the chart options including axes, data points, and visual elements. The data represents painters' predominant colors mapped to hue, saturation, and brightness values.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-painter-choice.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  backgroundColor: '#000',\n  globe: {\n    baseTexture: ROOT_PATH + '/data-gl/asset/earth.jpg',\n    heightTexture: ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n    shading: 'lambert',\n    light: {\n      ambient: {\n        intensity: 0.4\n      },\n      main: {\n        intensity: 0.4\n      }\n    },\n    viewControl: {\n      autoRotate: false\n    }\n  },\n  visualMap: {\n    show: false,\n    min: 0,\n    max: 500,\n    inRange: {\n      colorLightness: [0.1, 0.9]\n    }\n  },\n  series: [\n    {\n      type: 'scatter3D',\n      coordinateSystem: 'globe',\n      symbolSize: 8,\n      data: [[0, -90, 200], [0, 90, 280], [0, 0, 300], [90, 0, 200], [-90, 0, 300]],\n      itemStyle: {\n        color: 'rgb(50, 50, 150)',\n        opacity: 0.8\n      },\n      emphasis: {\n        itemStyle: {\n          color: '#fff'\n        }\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Step Line Chart in Apache ECharts\nDESCRIPTION: This snippet demonstrates the basic configuration for a step line chart with two data series. It uses the 'start' step mode and includes axis labels and a legend.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-step.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Step Line'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {\n    data: ['Step Start', 'Step Middle', 'Step End']\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      name: 'Step Start',\n      type: 'line',\n      step: 'start',\n      data: [120, 132, 101, 134, 90, 230, 210]\n    },\n    {\n      name: 'Step Middle',\n      type: 'line',\n      step: 'middle',\n      data: [220, 282, 201, 234, 290, 430, 410]\n    },\n    {\n      name: 'Step End',\n      type: 'line',\n      step: 'end',\n      data: [450, 432, 401, 454, 590, 530, 510]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Aggregate Transform with Apache ECharts 5\nDESCRIPTION: Demonstrates how to use the aggregate transform to summarize data by grouping and applying statistical methods. The transform supports various aggregation methods including sum, count, first, average, quartiles, min, and max.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-simple-transform/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\necharts.registerTransform(ecSimpleTransform.aggregate);\n\nconst option = {\n    dataset: [{\n        source: [\n            ['aa', 'bb', 'cc', 'tag'],\n            [12, 0.33, 5200, 'AA'],\n            [21, 0.65, 7100, 'AA'],\n            [51, 0.15, 1100, 'BB'],\n            [71, 0.75, 9100, 'BB'],\n            ...\n        ]\n    }, {\n        transform: {\n            type: 'ecSimpleTransform:aggregate',\n            config: {\n                resultDimensions: [\n                    // by default, use the same name with `from`.\n                    { from: 'aa', method: 'sum' },\n                    { from: 'bb', method: 'count' },\n                    { from: 'cc' }, // method by default: use the first value.\n                    { from: 'dd', method: 'Q1' },\n                    { from: 'tag' }\n                ],\n                groupBy: 'tag'\n            }\n        }\n        // Then the result data will be:\n        // [\n        //     ['aa', 'bb', 'cc', 'tag'],\n        //     [12, 0.33, 5200, 'AA'],\n        //     [21, 0.65, 8100, 'BB'],\n        //     ...\n        // ]\n    }],\n    // ...\n};\n\nconst myChart = echarts.init(dom);\nmyChart.setOption(option);\n```\n\n----------------------------------------\n\nTITLE: Configuring Large Scale Candlestick Chart in Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to set up a large-scale candlestick chart using Apache ECharts. It includes configuration for the chart layout, axis settings, data processing, and visual styling for the candlesticks.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/candlestick-large.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  dataset: {\n    source: data\n  },\n  title: {\n    text: 'Data Amount: ' + echarts.format.addCommas(data.length)\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'line'\n    }\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: false\n      }\n    }\n  },\n  grid: [\n    {\n      left: '10%',\n      right: '10%',\n      bottom: 200\n    }\n  ],\n  xAxis: [\n    {\n      type: 'category',\n      scale: true,\n      boundaryGap: false,\n      axisLine: { onZero: false },\n      axisLabel: { show: false },\n      axisTick: { show: false },\n      splitLine: { show: false },\n      splitNumber: 20,\n      min: 'dataMin',\n      max: 'dataMax'\n    }\n  ],\n  yAxis: [\n    {\n      scale: true,\n      splitArea: {\n        show: true\n      }\n    }\n  ],\n  dataZoom: [\n    {\n      type: 'inside',\n      start: 98,\n      end: 100,\n      minValueSpan: 10\n    },\n    {\n      show: true,\n      type: 'slider',\n      bottom: 60,\n      start: 98,\n      end: 100,\n      minValueSpan: 10\n    }\n  ],\n  series: [\n    {\n      type: 'candlestick',\n      encode: {\n        x: 0,\n        y: [1, 4, 3, 2]\n      },\n      itemStyle: {\n        color: '#eb5454',\n        color0: '#47b262',\n        borderColor: '#eb5454',\n        borderColor0: '#47b262'\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Two Value-Axes Polar Chart in ECharts\nDESCRIPTION: This code sets up a polar chart with two value axes using ECharts. It defines the chart type, data series, axis configurations, and visual styles. The chart displays angle and radius data on separate axes within a polar coordinate system.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-polar.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Two Value-Axes in Polar'\n  },\n  polar: {\n    center: ['50%', '54%']\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    }\n  },\n  angleAxis: {\n    type: 'value',\n    startAngle: 0\n  },\n  radiusAxis: {\n    min: 0\n  },\n  series: [\n    {\n      coordinateSystem: 'polar',\n      name: 'line',\n      type: 'line',\n      showSymbol: false,\n      data: data\n    }\n  ],\n  animationDuration: 2000\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Data Structure in JavaScript for Apache ECharts\nDESCRIPTION: This snippet shows how to structure data for a radial tree chart in Apache ECharts. It defines a hierarchical object representing nodes and their relationships in the tree.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/tree-radial.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = {\n  name: 'flare',\n  children: [\n    {\n      name: 'data',\n      children: [\n        {\n          name: 'converters',\n          children: [\n            { name: 'Converters', value: 721 },\n            { name: 'DelimitedTextConverter', value: 4294 }\n          ]\n        },\n        {\n          name: 'DataUtil',\n          value: 3322\n        }\n      ]\n    },\n    {\n      name: 'display',\n      children: [\n        { name: 'DirtySprite', value: 8833 },\n        { name: 'LineSprite', value: 1732 },\n        { name: 'RectSprite', value: 3623 }\n      ]\n    },\n    {\n      name: 'flex',\n      children: [{ name: 'FlareVis', value: 4116 }]\n    },\n    {\n      name: 'query',\n      children: [\n        { name: 'AggregateExpression', value: 1616 },\n        { name: 'And', value: 1027 },\n        { name: 'Arithmetic', value: 3891 },\n        { name: 'Average', value: 891 },\n        { name: 'BinaryExpression', value: 2893 },\n        { name: 'Comparison', value: 5103 },\n        { name: 'CompositeExpression', value: 3677 },\n        { name: 'Count', value: 781 },\n        { name: 'DateUtil', value: 4141 },\n        { name: 'Distinct', value: 933 },\n        { name: 'Expression', value: 5130 },\n        { name: 'ExpressionIterator', value: 3617 },\n        { name: 'Fn', value: 3240 },\n        { name: 'If', value: 2732 },\n        { name: 'IsA', value: 2039 },\n        { name: 'Literal', value: 1214 },\n        { name: 'Match', value: 3748 },\n        { name: 'Maximum', value: 843 },\n        {\n          name: 'methods',\n          children: [\n            { name: 'add', value: 593 },\n            { name: 'and', value: 330 },\n            { name: 'average', value: 287 },\n            { name: 'count', value: 277 },\n            { name: 'distinct', value: 292 },\n            { name: 'div', value: 595 },\n            { name: 'eq', value: 594 },\n            { name: 'fn', value: 460 },\n            { name: 'gt', value: 603 },\n            { name: 'gte', value: 625 },\n            { name: 'iff', value: 748 },\n            { name: 'isa', value: 461 },\n            { name: 'lt', value: 597 },\n            { name: 'lte', value: 619 },\n            { name: 'max', value: 283 },\n            { name: 'min', value: 283 },\n            { name: 'mod', value: 591 },\n            { name: 'mul', value: 603 },\n            { name: 'neq', value: 599 },\n            { name: 'not', value: 386 },\n            { name: 'or', value: 323 },\n            { name: 'orderby', value: 307 },\n            { name: 'range', value: 772 },\n            { name: 'select', value: 296 },\n            { name: 'stddev', value: 363 },\n            { name: 'sub', value: 600 },\n            { name: 'sum', value: 280 },\n            { name: 'update', value: 307 },\n            { name: 'variance', value: 335 },\n            { name: 'where', value: 299 },\n            { name: 'xor', value: 354 },\n            { name: '_', value: 264 }\n          ]\n        },\n        { name: 'Minimum', value: 843 },\n        { name: 'Not', value: 1554 },\n        { name: 'Or', value: 970 },\n        { name: 'Query', value: 13896 },\n        { name: 'Range', value: 1594 },\n        { name: 'StringUtil', value: 4130 },\n        { name: 'Sum', value: 791 },\n        { name: 'Variable', value: 1124 },\n        { name: 'Variance', value: 1876 },\n        { name: 'Xor', value: 1101 }\n      ]\n    },\n    {\n      name: 'scale',\n      children: [\n        { name: 'IScaleMap', value: 2105 },\n        { name: 'LinearScale', value: 1316 },\n        { name: 'LogScale', value: 3151 },\n        { name: 'OrdinalScale', value: 3770 },\n        { name: 'QuantileScale', value: 2435 },\n        { name: 'QuantitativeScale', value: 4839 },\n        { name: 'RootScale', value: 1756 },\n        { name: 'Scale', value: 4268 },\n        { name: 'ScaleType', value: 1821 },\n        { name: 'TimeScale', value: 5833 }\n      ]\n    },\n    {\n      name: 'util',\n      children: [\n        { name: 'Arrays', value: 8258 },\n        { name: 'Colors', value: 10001 },\n        { name: 'Dates', value: 8217 },\n        { name: 'Displays', value: 12555 },\n        { name: 'Filter', value: 2324 },\n        { name: 'Geometry', value: 10993 },\n        {\n          name: 'heap',\n          children: [{ name: 'FibonacciHeap', value: 9354 }, { name: 'HeapNode', value: 1233 }]\n        },\n        { name: 'IEvaluable', value: 335 },\n        { name: 'IPredicate', value: 383 },\n        { name: 'IValueProxy', value: 874 },\n        {\n          name: 'math',\n          children: [\n            { name: 'DenseMatrix', value: 3165 },\n            { name: 'IMatrix', value: 2815 },\n            { name: 'SparseMatrix', value: 3366 }\n          ]\n        },\n        { name: 'Maths', value: 17705 },\n        { name: 'Orientation', value: 1486 },\n        {\n          name: 'palette',\n          children: [\n            { name: 'ColorPalette', value: 6367 },\n            { name: 'Palette', value: 1229 },\n            { name: 'ShapePalette', value: 2059 },\n            { name: 'SizePalette', value: 2291 }\n          ]\n        },\n        { name: 'Property', value: 5559 },\n        { name: 'Shapes', value: 19118 },\n        { name: 'Sort', value: 6887 },\n        { name: 'Stats', value: 6557 },\n        { name: 'Strings', value: 22026 }\n      ]\n    },\n    {\n      name: 'vis',\n      children: [\n        {\n          name: 'axis',\n          children: [\n            { name: 'Axes', value: 1302 },\n            { name: 'Axis', value: 24593 },\n            { name: 'AxisGridLine', value: 652 },\n            { name: 'AxisLabel', value: 636 },\n            { name: 'CartesianAxes', value: 6703 }\n          ]\n        },\n        {\n          name: 'controls',\n          children: [\n            { name: 'AnchorControl', value: 2138 },\n            { name: 'ClickControl', value: 3824 },\n            { name: 'Control', value: 1353 },\n            { name: 'ControlList', value: 4665 },\n            { name: 'DragControl', value: 2649 },\n            { name: 'ExpandControl', value: 2832 },\n            { name: 'HoverControl', value: 4896 },\n            { name: 'IControl', value: 763 },\n            { name: 'PanZoomControl', value: 5222 },\n            { name: 'SelectionControl', value: 7862 },\n            { name: 'TooltipControl', value: 8435 }\n          ]\n        },\n        {\n          name: 'data',\n          children: [\n            { name: 'Data', value: 20544 },\n            { name: 'DataList', value: 19788 },\n            { name: 'DataSprite', value: 10349 },\n            { name: 'EdgeSprite', value: 3301 },\n            { name: 'NodeSprite', value: 19382 },\n            {\n              name: 'render',\n              children: [\n                { name: 'ArrowType', value: 698 },\n                { name: 'EdgeRenderer', value: 5569 },\n                { name: 'IRenderer', value: 353 },\n                { name: 'ShapeRenderer', value: 2247 }\n              ]\n            },\n            { name: 'ScaleBinding', value: 11275 },\n            { name: 'Tree', value: 7147 },\n            { name: 'TreeBuilder', value: 9930 }\n          ]\n        },\n        {\n          name: 'events',\n          children: [\n            { name: 'DataEvent', value: 2313 },\n            { name: 'SelectionEvent', value: 1880 },\n            { name: 'TooltipEvent', value: 1701 },\n            { name: 'VisualizationEvent', value: 1117 }\n          ]\n        },\n        {\n          name: 'legend',\n          children: [\n            { name: 'Legend', value: 20859 },\n            { name: 'LegendItem', value: 4614 },\n            { name: 'LegendRange', value: 10530 }\n          ]\n        },\n        {\n          name: 'operator',\n          children: [\n            {\n              name: 'distortion',\n              children: [\n                { name: 'BifocalDistortion', value: 4461 },\n                { name: 'Distortion', value: 6314 },\n                { name: 'FisheyeDistortion', value: 3444 }\n              ]\n            },\n            {\n              name: 'encoder',\n              children: [\n                { name: 'ColorEncoder', value: 3179 },\n                { name: 'Encoder', value: 4060 },\n                { name: 'PropertyEncoder', value: 4138 },\n                { name: 'ShapeEncoder', value: 1690 },\n                { name: 'SizeEncoder', value: 1830 }\n              ]\n            },\n            {\n              name: 'filter',\n              children: [\n                { name: 'FisheyeTreeFilter', value: 5219 },\n                { name: 'GraphDistanceFilter', value: 3165 },\n                { name: 'VisibilityFilter', value: 3509 }\n              ]\n            },\n            { name: 'IOperator', value: 1286 },\n            {\n              name: 'label',\n              children: [\n                { name: 'Labeler', value: 9956 },\n                { name: 'RadialLabeler', value: 3899 },\n                { name: 'StackedAreaLabeler', value: 3202 }\n              ]\n            },\n            {\n              name: 'layout',\n              children: [\n                { name: 'AxisLayout', value: 6725 },\n                { name: 'BundledEdgeRouter', value: 3727 },\n                { name: 'CircleLayout', value: 9317 },\n                { name: 'CirclePackingLayout', value: 12003 },\n                { name: 'DendrogramLayout', value: 4853 },\n                { name: 'ForceDirectedLayout', value: 8411 },\n                { name: 'IcicleTreeLayout', value: 4864 },\n                { name: 'IndentedTreeLayout', value: 3174 },\n                { name: 'Layout', value: 7881 },\n                { name: 'NodeLinkTreeLayout', value: 12870 },\n                { name: 'PieLayout', value: 2728 },\n                { name: 'RadialTreeLayout', value: 12348 },\n                { name: 'RandomLayout', value: 870 },\n                { name: 'StackedAreaLayout', value: 9121 },\n                { name: 'TreeMapLayout', value: 9191 }\n              ]\n            },\n            { name: 'Operator', value: 2490 },\n            { name: 'OperatorList', value: 5248 },\n            { name: 'OperatorSequence', value: 4190 },\n            { name: 'OperatorSwitch', value: 2581 },\n            { name: 'SortOperator', value: 2023 }\n          ]\n        },\n        { name: 'Visualization', value: 16540 }\n      ]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Vertical Calendar Heatmap in ECharts\nDESCRIPTION: This code configures a vertical calendar heatmap visualization showing data distribution across dates. It sets up the calendar coordinate system, defines visual mapping with a color range, and specifies the data series with values for specific dates.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/calendar-vertical.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    position: 'top'\n  },\n  visualMap: {\n    min: 0,\n    max: 1000,\n    calculable: true,\n    orient: 'horizontal',\n    left: 'center',\n    top: 'top'\n  },\n\n  calendar: {\n    left: 120,\n    orient: 'vertical',\n    range: '2017'\n  },\n\n  series: {\n    type: 'heatmap',\n    coordinateSystem: 'calendar',\n    calendarIndex: 0,\n    data: getVirtulData('2017')\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic 3D Scatter Plot Example\nDESCRIPTION: JavaScript code demonstrating how to create a basic 3D scatter plot using ECharts-GL\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-gl/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar chart = echarts.init(document.getElementById('main'));\nchart.setOption({\n    grid3D: {},\n    xAxis3D: {},\n    yAxis3D: {},\n    zAxis3D: {},\n    series: [{\n        type: 'scatter3D',\n        symbolSize: 50,\n        data: [[-1, -1, -1], [0, 0, 0], [1, 1, 1]],\n        itemStyle: {\n            opacity: 1\n        }\n    }]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Heatmap with Discrete Color Mapping in ECharts\nDESCRIPTION: This code snippet demonstrates how to create a heatmap chart with discrete color mapping using ECharts. It includes data generation, axis configuration, and visual mapping settings.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/heatmap-large-piecewise.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    position: 'top'\n  },\n  grid: {\n    height: '50%',\n    top: '10%'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['12a', '1a', '2a', '3a', '4a', '5a', '6a', '7a', '8a', '9a', '10a', '11a', '12p', '1p', '2p', '3p', '4p', '5p', '6p', '7p', '8p', '9p', '10p', '11p'],\n    splitArea: {\n      show: true\n    }\n  },\n  yAxis: {\n    type: 'category',\n    data: ['Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday', 'Sunday'],\n    splitArea: {\n      show: true\n    }\n  },\n  visualMap: {\n    min: 0,\n    max: 10,\n    calculable: true,\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '15%'\n  },\n  series: [\n    {\n      name: 'Punch Card',\n      type: 'heatmap',\n      data: [[0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4], [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1], [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0], [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0], [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6]],\n      label: {\n        show: true\n      },\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Clustering Transform with ECharts\nDESCRIPTION: Code to register the clustering transform with ECharts 5.0+ to enable data clustering capabilities.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\necharts.registerTransform(ecStat.transform.clustering);\n```\n\n----------------------------------------\n\nTITLE: Configuring Map and Scatter with Shared Geo in ECharts\nDESCRIPTION: This code snippet demonstrates how to set up a chart with a map and scatter series that share a single geo component. It includes data for China's provinces and cities, and configures various chart options such as tooltip, legend, and visual mapping.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/geo-map-scatter.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    trigger: 'item',\n    formatter: function (params) {\n      return params.name + ': ' + params.value[2];\n    }\n  },\n  legend: {\n    orient: 'vertical',\n    y: 'bottom',\n    x: 'right',\n    data: ['pm2.5'],\n    textStyle: {\n      color: '#fff'\n    }\n  },\n  visualMap: {\n    min: 0,\n    max: 200,\n    calculable: true,\n    inRange: {\n      color: ['#50a3ba', '#eac736', '#d94e5d']\n    },\n    textStyle: {\n      color: '#fff'\n    }\n  },\n  geo: {\n    map: 'china',\n    label: {\n      emphasis: {\n        show: false\n      }\n    },\n    itemStyle: {\n      normal: {\n        areaColor: '#323c48',\n        borderColor: '#111'\n      },\n      emphasis: {\n        areaColor: '#2a333d'\n      }\n    }\n  },\n  series: [\n    {\n      name: 'pm2.5',\n      type: 'scatter',\n      coordinateSystem: 'geo',\n      data: convertData(data),\n      symbolSize: function (val) {\n        return val[2] / 10;\n      },\n      label: {\n        normal: {\n          formatter: '{b}',\n          position: 'right',\n          show: false\n        },\n        emphasis: {\n          show: true\n        }\n      },\n      itemStyle: {\n        normal: {\n          color: '#ddb926'\n        }\n      }\n    },\n    {\n      name: 'Top 5',\n      type: 'effectScatter',\n      coordinateSystem: 'geo',\n      data: convertData(\n        data\n          .sort(function (a, b) {\n            return b.value - a.value;\n          })\n          .slice(0, 6)\n      ),\n      symbolSize: function (val) {\n        return val[2] / 10;\n      },\n      showEffectOn: 'render',\n      rippleEffect: {\n        brushType: 'stroke'\n      },\n      hoverAnimation: true,\n      label: {\n        normal: {\n          formatter: '{b}',\n          position: 'right',\n          show: true\n        }\n      },\n      itemStyle: {\n        normal: {\n          color: '#f4e925',\n          shadowBlur: 10,\n          shadowColor: '#333'\n        }\n      },\n      zlevel: 1\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Data and Options for Custom Cartesian Polygon Chart in JavaScript\nDESCRIPTION: This snippet defines the data and options for a custom cartesian polygon chart. It includes data points for multiple polygons and configures chart elements such as grid, tooltip, and legend.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/custom-cartesian-polygon.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Custom Cartesian Polygon'\n  },\n  tooltip: {},\n  legend: {\n    data: ['A', 'B', 'C', 'D', 'E']\n  },\n  xAxis: {\n    data: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  },\n  yAxis: {},\n  series: [{\n    type: 'custom',\n    renderItem: renderItem,\n    itemStyle: {\n      opacity: 0.5\n    },\n    data: [\n      {\n        name: 'A',\n        value: [\n          [1, 2],\n          [2, 4],\n          [4, 8],\n          [8, 4],\n          [4, 2]\n        ]\n      },\n      {\n        name: 'B',\n        value: [\n          [2, 1],\n          [1, 3],\n          [3, 6],\n          [6, 3]\n        ]\n      },\n      {\n        name: 'C',\n        value: [\n          [3, 2],\n          [2, 5],\n          [5, 7],\n          [7, 2]\n        ]\n      },\n      {\n        name: 'D',\n        value: [\n          [2, 1],\n          [1, 3],\n          [3, 4],\n          [4, 1]\n        ]\n      },\n      {\n        name: 'E',\n        value: [\n          [1, 1],\n          [1, 2],\n          [2, 2],\n          [2, 1]\n        ]\n      }\n    ]\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Textured Pie Chart with ECharts in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a pie chart with textured segments using ECharts. It defines the chart options, including data series, legend, and custom patterns for each slice.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pie-pattern.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  legend: {\n    top: 'bottom'\n  },\n  toolbox: {\n    show: true,\n    feature: {\n      mark: { show: true },\n      dataView: { show: true, readOnly: false },\n      restore: { show: true },\n      saveAsImage: { show: true }\n    }\n  },\n  series: [\n    {\n      name: 'Nightingale Chart',\n      type: 'pie',\n      radius: [20, 100],\n      center: ['50%', '50%'],\n      roseType: 'area',\n      itemStyle: {\n        borderRadius: 8\n      },\n      data: [\n        { value: 40, name: 'rose 1' },\n        { value: 38, name: 'rose 2' },\n        { value: 32, name: 'rose 3' },\n        { value: 30, name: 'rose 4' },\n        { value: 28, name: 'rose 5' },\n        { value: 26, name: 'rose 6' },\n        { value: 22, name: 'rose 7' },\n        { value: 18, name: 'rose 8' }\n      ]\n    }\n  ]\n};\n\napp.configParameters = {\n  rotate: {\n    min: -90,\n    max: 90\n  },\n  maskImage: {\n    options: [\n      'circle',\n      'rect',\n      'roundRect',\n      'triangle',\n      'diamond',\n      'pin',\n      'arrow'\n    ]\n  }\n};\n\napp.config = {\n  rotate: 0,\n  maskImage: 'circle'\n};\n\napp.configParameters.maskImage.options.push({\n  image: ROOT_PATH + '/data/asset/img/pig.png',\n  value: 'pig'\n});\n\napp.configParameters.maskImage.options.push({\n  image: ROOT_PATH + '/data/asset/img/goat.jpg',\n  value: 'goat'\n});\n\napp.configParameters.maskImage.options.push({\n  image: ROOT_PATH + '/data/asset/img/smiley.png',\n  value: 'smiley'\n});\n\nconst bgPatterns = {\n  gif: ROOT_PATH + '/data/asset/img/bg.gif',\n  png: ROOT_PATH + '/data/asset/img/bg.png',\n  jpg: ROOT_PATH + '/data/asset/img/bg.jpg'\n};\n\nconst bgImages = [\n  ROOT_PATH + '/data/asset/img/tree.png',\n  ROOT_PATH + '/data/asset/img/wheat.png',\n  ROOT_PATH + '/data/asset/img/grassflowers.jpeg'\n];\n\napp.updateMask = function (maskImage) {\n  let series = option.series;\n  for (let i = 0; i < series.length; ++i) {\n    series[i].itemStyle = series[i].itemStyle || {};\n    if (maskImage === 'circle') {\n      series[i].itemStyle.borderRadius = '100%';\n      series[i].itemStyle.decal = null;\n    } else if (\n      maskImage === 'rect' ||\n      maskImage === 'roundRect' ||\n      maskImage === 'triangle' ||\n      maskImage === 'diamond' ||\n      maskImage === 'pin' ||\n      maskImage === 'arrow'\n    ) {\n      series[i].itemStyle.borderRadius = 0;\n      series[i].itemStyle.decal = {\n        symbol: maskImage,\n        symbolSize: 1,\n        color: 'rgba(0, 0, 0, 0.2)'\n      };\n    } else {\n      series[i].itemStyle.borderRadius = 0;\n      series[i].itemStyle.decal = {\n        symbol: 'image://' + app.config.maskImage,\n        symbolSize: 0.8\n      };\n    }\n  }\n\n  myChart.setOption(option);\n};\n\napp.updateBackground = function () {\n  let bgColor;\n  let bgPatternSize = [150, 150];\n  if (Math.random() > 0.7) {\n    bgColor = {\n      image: bgImages[Math.floor(Math.random() * bgImages.length)],\n      repeat: 'repeat'\n    };\n  } else {\n    bgColor = {\n      image: bgPatterns[['gif', 'png', 'jpg'][Math.floor(Math.random() * 3)]],\n      repeat: 'repeat',\n      size: bgPatternSize\n    };\n  }\n  myChart.setOption({\n    backgroundColor: bgColor\n  });\n};\n\napp.rotating = false;\napp.rotate = function () {\n  app.rotating = !app.rotating;\n  myChart.setOption({\n    series: {\n      name: 'Nightingale Chart',\n      clockwise: app.rotating,\n      animation: app.rotating\n    }\n  });\n};\n\nsetTimeout(function () {\n  // Add shadow circles to simulate glowing effect\n  myChart.setOption({\n    graphic: [\n      {\n        type: 'circle',\n        left: 'center',\n        top: 'center',\n        shape: {\n          r: 115\n        },\n        style: {\n          fill: 'rgba(0,0,0,0.3)'\n        },\n        z: 100\n      },\n      {\n        type: 'circle',\n        left: 'center',\n        top: 'center',\n        shape: {\n          r: 110\n        },\n        style: {\n          fill: 'rgba(0,0,0,0.4)'\n        },\n        z: 100\n      }\n    ]\n  });\n}, 10);\n\napp.updateBackground();\n```\n\n----------------------------------------\n\nTITLE: Using Clustering Transform in ECharts\nDESCRIPTION: Example of using ecStat clustering transform within ECharts chart configuration.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setOption({\n    dataset: [{\n        source: data\n    }, {\n        type: 'ecStat:clustering',\n        config: config\n    }],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Heatmap on Baidu Map with Apache ECharts in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a heatmap visualization on a Baidu Map using Apache ECharts. It sets up the map, adds heatmap data points, and configures various options for the visualization.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/heatmap-bmap.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$.get('data/asset/data/hangzhou-tracks.json', function (data) {\n    var points = [].concat.apply(\n        [],\n        data.map(function (track) {\n            return track.map(function (seg) {\n                return seg.coord.concat([1]);\n            });\n        })\n    );\n    myChart.setOption(option = {\n        animation: false,\n        bmap: {\n            center: [120.13066322374, 30.240018034923],\n            zoom: 14,\n            roam: true\n        },\n        visualMap: {\n            show: false,\n            top: 'top',\n            min: 0,\n            max: 5,\n            seriesIndex: 0,\n            calculable: true,\n            inRange: {\n                color: ['blue', 'blue', 'green', 'yellow', 'red']\n            }\n        },\n        series: [{\n            type: 'heatmap',\n            coordinateSystem: 'bmap',\n            data: points,\n            pointSize: 5,\n            blurSize: 6\n        }]\n    });\n    // 添加百度地图插件\n    var bmap = myChart.getModel().getComponent('bmap').getBMap();\n    bmap.addControl(new BMap.MapTypeControl());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Sunburst Chart for Book Records with ECharts in JavaScript\nDESCRIPTION: This code snippet sets up the configuration for an ECharts sunburst chart to visualize book records. It defines the chart's appearance, data structure, and label formatting.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/sunburst-book.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  series: {\n    type: 'sunburst',\n    data: [\n      {\n        name: 'Grandpa',\n        children: [\n          {\n            name: 'Uncle Leo',\n            value: 15,\n            children: [\n              {\n                name: 'Cousin Jack',\n                value: 2\n              },\n              {\n                name: 'Cousin Mary',\n                value: 5,\n                children: [\n                  {\n                    name: 'Jackson',\n                    value: 2\n                  }\n                ]\n              },\n              {\n                name: 'Cousin Ben',\n                value: 4\n              }\n            ]\n          },\n          {\n            name: 'Father',\n            value: 10,\n            children: [\n              {\n                name: 'Me',\n                value: 5\n              },\n              {\n                name: 'Brother Peter',\n                value: 1\n              }\n            ]\n          }\n        ]\n      },\n      {\n        name: 'Nancy',\n        children: [\n          {\n            name: 'Uncle Nike',\n            children: [\n              {\n                name: 'Cousin Betty',\n                value: 1\n              },\n              {\n                name: 'Cousin Jenny',\n                value: 2\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    radius: [0, '90%'],\n    label: {\n      rotate: 'radial'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Rendering a Basic Calendar Chart with Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to create a simple calendar chart using Apache ECharts. It sets up the calendar configuration, defines the data series, and specifies visual mapping for data representation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/calendar-simple.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  visualMap: {\n    show: false,\n    min: 0,\n    max: 1000\n  },\n  calendar: {\n    range: '2017'\n  },\n  series: {\n    type: 'heatmap',\n    coordinateSystem: 'calendar',\n    data: getVirtulData(2017)\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Getting ECharts Runtime Performance Data\nDESCRIPTION: Retrieves detailed performance metrics of the current rendering stage from an ECharts instance, including preparation, update, and rendering times.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/custom-profile.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.getPerformance();\n```\n\n----------------------------------------\n\nTITLE: ECharts Transform Regression Result Format\nDESCRIPTION: Example of the regression transform result format when used with ECharts, showing the transformed dataset with predicted points.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndataset: [{\n    source: [...]\n}, {\n    transform: 'ecStat:regression',\n    // // The result of this dataset is like:\n    // [\n    //     // ValueOnX, ValueOnY\n    //     [  23,       51      ],\n    //     [  24,       62      ],\n    //     ...\n    // ]\n    // // The rest of the input dimensions that other than\n    // // config.dimensions specified are kept in the output.\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating Calendar Effectscatter Chart with ECharts\nDESCRIPTION: This code snippet demonstrates how to create a calendar effectscatter chart using ECharts. It sets up the chart options, including the calendar configuration, series data, and visual mapping. The chart displays data points with varying sizes and colors based on their values.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/calendar-effectscatter.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    position: 'top'\n  },\n  visualMap: {\n    min: 0,\n    max: 1000,\n    calculable: true,\n    orient: 'horizontal',\n    left: 'center',\n    top: 'top'\n  },\n  calendar: [\n    {\n      range: '2017',\n      cellSize: ['auto', 20]\n    }\n  ],\n  series: [\n    {\n      type: 'effectScatter',\n      coordinateSystem: 'calendar',\n      data: getVirtulData(2017),\n      symbolSize: function (val) {\n        return val[1] / 40;\n      },\n      showEffectOn: 'render',\n      rippleEffect: {\n        brushType: 'stroke'\n      },\n      hoverAnimation: true,\n      itemStyle: {\n        color: '#f4e925',\n        shadowBlur: 10,\n        shadowColor: '#333'\n      },\n      zlevel: 1\n    },\n    {\n      type: 'scatter',\n      coordinateSystem: 'calendar',\n      data: getVirtulData(2017),\n      symbolSize: function (val) {\n        return val[1] / 60;\n      },\n      itemStyle: {\n        color: '#f4e925'\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Dependencies Graph with Apache ECharts in JavaScript\nDESCRIPTION: This code snippet sets up an Apache ECharts graph to visualize NPM package dependencies. It configures the chart options, loads data from a JSON file, and defines the layout and styling of the graph nodes and edges.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/graph-npm.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.getJSON('data/npmdepgraph.json', function (json) {\n    var data = json.nodes.map(function (node) {\n        return {\n            x: null,\n            y: null,\n            id: node.id,\n            name: node.label,\n            symbolSize: node.size,\n            itemStyle: {\n                normal: {\n                    color: node.color\n                }\n            }\n        };\n    });\n    var edges = json.edges.map(function (edge) {\n        return {\n            source: edge.sourceID,\n            target: edge.targetID\n        };\n    });\n\n    myChart.setOption({\n        tooltip: {},\n        series: [{\n            type: 'graph',\n            layout: 'force',\n            animation: false,\n            label: {\n                normal: {\n                    position: 'right',\n                    formatter: '{b}'\n                }\n            },\n            draggable: true,\n            data: data,\n            categories: [\n                {\n                    name: 'Main',\n                    itemStyle: {\n                        normal: {\n                            color: \"#009800\"\n                        }\n                    }\n                },{\n                    name: 'One relationship',\n                    itemStyle: {\n                        normal: {\n                            color: \"#4592FF\"\n                        }\n                    }\n                }, {\n                    name: 'Two relationship',\n                    itemStyle: {\n                        normal: {\n                            color: \"#3592FF\"\n                        }\n                    }\n                }, {\n                    name: 'Three relationship',\n                    itemStyle: {\n                        normal: {\n                            color: \"#2592FF\"\n                        }\n                    }\n                }, {\n                    name: 'Four relationship',\n                    itemStyle: {\n                        normal: {\n                            color: \"#1592FF\"\n                        }\n                    }\n                }\n            ],\n            force: {\n                // initLayout: 'circular'\n                // repulsion: 20,\n                edgeLength: 5,\n                repulsion: 20,\n                gravity: 0.2\n            },\n            edges: edges\n        }]\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sankey Diagram with Custom Node Styles in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a Sankey diagram with custom styles for each individual node. It defines data nodes with specific categories and links between them, then applies custom colors to nodes based on their indices using the itemStyle property.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/sankey-itemstyle.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    trigger: 'item',\n    triggerOn: 'mousemove'\n  },\n  series: [\n    {\n      type: 'sankey',\n      data: [\n        {\n          name: 'a',\n          itemStyle: {\n            color: 'red'\n          }\n        },\n        {\n          name: 'b',\n          itemStyle: {\n            color: '#00f'\n          }\n        },\n        { name: 'a1' },\n        { name: 'a2' },\n        { name: 'b1' },\n        { name: 'c' }\n      ],\n      links: [\n        {\n          source: 'a',\n          target: 'a1',\n          value: 5\n        },\n        {\n          source: 'a',\n          target: 'a2',\n          value: 3\n        },\n        {\n          source: 'b',\n          target: 'b1',\n          value: 8\n        },\n        {\n          source: 'a',\n          target: 'b1',\n          value: 3\n        },\n        {\n          source: 'b1',\n          target: 'c',\n          value: 1\n        }\n      ],\n      emphasis: {\n        focus: 'adjacency'\n      },\n      lineStyle: {\n        color: 'gradient',\n        curveness: 0.5\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Chart Types with Value Axis Zoom in Apache ECharts\nDESCRIPTION: This code snippet defines an ECharts configuration for a visualization that combines both bar and line charts with zooming functionality on the value axis. It includes data visualization for rainfall and evaporation metrics across multiple months.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/mix-zoom-on-value.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      crossStyle: {\n        color: '#999'\n      }\n    }\n  },\n  toolbox: {\n    feature: {\n      dataView: { show: true, readOnly: false },\n      magicType: { show: true, type: ['line', 'bar'] },\n      restore: { show: true },\n      saveAsImage: { show: true }\n    }\n  },\n  legend: {\n    data: ['Evaporation', 'Precipitation', 'Temperature']\n  },\n  xAxis: [\n    {\n      type: 'category',\n      data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      axisPointer: {\n        type: 'shadow'\n      }\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value',\n      name: 'Precipitation',\n      min: 0,\n      max: 250,\n      interval: 50,\n      axisLabel: {\n        formatter: '{value} ml'\n      }\n    },\n    {\n      type: 'value',\n      name: 'Temperature',\n      min: 0,\n      max: 25,\n      interval: 5,\n      axisLabel: {\n        formatter: '{value} °C'\n      }\n    }\n  ],\n  dataZoom: [\n    {\n      type: 'inside',\n      start: 0,\n      end: 100,\n      yAxisIndex: [0]\n    },\n    {\n      show: true,\n      yAxisIndex: [0],\n      type: 'slider',\n      top: '90%',\n      start: 0,\n      end: 100\n    }\n  ],\n  series: [\n    {\n      name: 'Evaporation',\n      type: 'bar',\n      data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3]\n    },\n    {\n      name: 'Precipitation',\n      type: 'bar',\n      data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3]\n    },\n    {\n      name: 'Temperature',\n      type: 'line',\n      yAxisIndex: 1,\n      data: [2.0, 2.2, 3.3, 4.5, 6.3, 10.2, 20.3, 23.4, 23.0, 16.5, 12.0, 6.2]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Y Category Chart in Apache ECharts\nDESCRIPTION: This code snippet sets up the configuration for a line chart with categorical Y-axis in Apache ECharts. It defines the chart options including axis types, data, and styling.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-y-category.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Line Y Category'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {\n    data: ['Altitude (km) vs. temperature (°C)']\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter: '{value} °C'\n    }\n  },\n  yAxis: {\n    type: 'category',\n    axisLine: { onZero: false },\n    axisLabel: {\n      formatter: '{value} km'\n    },\n    boundaryGap: false,\n    data: ['0', '10', '20', '30', '40', '50', '60', '70', '80']\n  },\n  series: [\n    {\n      name: 'Altitude (km) vs. temperature (°C)',\n      type: 'line',\n      symbolSize: 10,\n      symbol: 'circle',\n      smooth: true,\n      lineStyle: {\n        width: 3,\n        shadowColor: 'rgba(0,0,0,0.3)',\n        shadowBlur: 10,\n        shadowOffsetY: 8\n      },\n      data: [15, -50, -56.5, -46.5, -22.1, -2.5, -27.7, -55.7, -76.5]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Data Structure for Regression Analysis\nDESCRIPTION: Illustrates the expected format of input data for regression analysis. The data consists of a two-dimensional array where each inner array contains an independent variable value and a dependent variable value.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n    [1, 2],\n    [3, 5],\n    ...\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Bar Chart with Apache ECharts in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a basic bar chart using Apache ECharts. It sets up the chart options with an x-axis containing product categories, a y-axis, and a single data series with corresponding values. The chart displays product sales data with five categories and their respective values.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/bar-simple.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  xAxis: {\n    type: 'category',\n    data: ['Matcha Latte', 'Milk Tea', 'Cheese Cocoa', 'Walnut Brownie']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      data: [43.3, 83.1, 86.4, 72.4],\n      type: 'bar'\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ECharts Simple Option Player in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize and use the ECharts Simple Option Player. It shows the creation of the player with various configuration options, including chart instance, series index, replaceMerge settings, dataMeta definitions, and optionList. It also includes examples of player control methods.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-simple-option-player/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myChart = echarts.init(dom);\n\n// Firstly, Initialize with an array of echarts option info:\n\nconst player = ecSimpleOptionPlayer.create({\n\n    /**\n     * Mandatory.\n     *\n     * `chart` can be the echarts instance\n     * or chart instance getter function.\n     */\n    chart: function () {\n        return myChart;\n    },\n\n    /**\n     * Optional.\n     *\n     * By default `0`.\n     */\n    seriesIndex: 0,\n\n    /**\n     * Optional.\n     *\n     * If some component type are declared here,\n     * when changing option, those types of components will be updated\n     * follow the REPLACE_MERGE rule.\n     * That is, all of the old components will be replaced by the new one\n     * (except those mapped by the same id).\n     * If not specified, when option changed, component will follow the\n     * NORMAL_MERGE rule, where none of the existing components will be removed\n     * but only merged by new ones.\n     *\n     * See https://echarts.apache.org/en/api.html#echartsInstance.setOption\n     * for more details of REPLACE_MERGE and NORMAL_MERGE rule.\n     */\n    replaceMerge: ['xAxis', 'yAxis']\n\n    /**\n     * Mandatory.\n     *\n     * The data meta info used to determine how to make transition parameter when\n     * calling `myChart.setOption` internally.\n     *\n     * See the example below:\n     * `'aaa'`, `'bbb'` are \"dataMetaKey\", named by user,\n     * and can be referenced in `optionList` for each `option`.\n     *\n     * The rule is:\n     *     The field `dimensions` defines a list of dimension names.\n     *     The field `uniqueDimension` uniqueDimension a single dimension name.\n     *     If the `option_A` is about to switch to the `option_B`,\n     *     suppose `option_A` reference `dataMeta` `aaa` and `option_B` reference `dataMeta` `bbb`,\n     *     if `aaa.uniqueDimension` in `bbb.dimensions` or `bbb.uniqueDimension` in `aaa.dimensions`,\n     *     we can make transition animation (combine and separate effect).\n     */\n    dataMeta: {\n        aaa: {\n            dimensions: ['qqq', 'www', 'eee', 'rrr']\n        },\n        bbb: {\n            dimensions: ['ccc', 'www', 'eee'],\n            uniqueDimension: 'www',\n            // Can be 'duplicate' or 'split'\n            dividingMethod: 'duplicate'\n        },\n        ...\n    },\n\n    /**\n     * echarts option collection:\n     */\n    optionList: [\n        // dataMetaKey is the key of 'dataMeta'.\n        { key: 'Time_Income_Bar', option: option0, dataMetaKey: 'aaa' },\n        { key: 'Population_Income_Scatter', option: option1, dataMetaKey: 'bbb' },\n        { key: 'Time_Income_Pie', option: option2, dataMetaKey: 'aaa' },\n        ...\n    ]\n});\n\n\n// Then start to play:\n\n// Display next option (from the first option).\nplayer.next();\n// Display previous option.\nplayer.previous();\n// Display the specified option.\nplayer.go('Time_Income_Pie');\n// return `['Time_Income_Bar', 'Population_Income_Scatter', 'Time_Income_Pie']`\nplayer.getOptionKeys();\n```\n\n----------------------------------------\n\nTITLE: Sample Data Input Format for Clustering in JavaScript\nDESCRIPTION: Example of the input data format used for clustering algorithms in ECharts-Stat, showing a multi-dimensional data array.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n    // dimensions:\n    // 0    1      2    3      4\n    [ 232,  4.21,  51,  0.323, 'xxx'],\n    [ 321,  1.62,  18,  0.139, 'xzx'],\n    [ 551,  11.21, 13,  0.641, 'yzy'],\n    ...\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring a Tree Chart with Polyline Edges in ECharts\nDESCRIPTION: This code demonstrates how to configure an ECharts tree visualization with polyline edge style. It sets up a simple tree structure with specified layout orientation, node size, and edge shape type, alongside data representing a hierarchical structure with parent-child relationships.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/tree-polyline.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    trigger: 'item',\n    triggerOn: 'mousemove'\n  },\n  series: [\n    {\n      type: 'tree',\n      data: [\n        {\n          name: 'flare',\n          children: [\n            {\n              name: 'data',\n              children: [\n                {\n                  name: 'converters',\n                  children: [\n                    { name: 'Converters', value: 721 },\n                    { name: 'DelimitedTextConverter', value: 4294 }\n                  ]\n                },\n                {\n                  name: 'DataUtil',\n                  value: 3322\n                }\n              ]\n            },\n            {\n              name: 'display',\n              children: [\n                { name: 'DirtySprite', value: 8833 },\n                { name: 'LineSprite', value: 1732 },\n                { name: 'RectSprite', value: 3623 }\n              ]\n            },\n            {\n              name: 'flex',\n              children: [{ name: 'FlareVis', value: 4116 }]\n            },\n            {\n              name: 'query',\n              children: [\n                { name: 'AggregateExpression', value: 1616 },\n                { name: 'And', value: 1027 },\n                { name: 'Arithmetic', value: 3891 },\n                { name: 'Average', value: 891 },\n                { name: 'BinaryExpression', value: 2893 },\n                { name: 'Comparison', value: 5103 },\n                { name: 'CompositeExpression', value: 3677 },\n                { name: 'Count', value: 781 },\n                { name: 'DateUtil', value: 4141 },\n                { name: 'Distinct', value: 933 },\n                { name: 'Expression', value: 5130 },\n                { name: 'ExpressionIterator', value: 3617 },\n                { name: 'Fn', value: 3240 },\n                { name: 'If', value: 2732 },\n                { name: 'IsA', value: 2039 },\n                { name: 'Literal', value: 1214 },\n                { name: 'Match', value: 3748 },\n                { name: 'Maximum', value: 843 },\n                {\n                  name: 'methods',\n                  children: [\n                    { name: 'add', value: 593 },\n                    { name: 'and', value: 330 },\n                    { name: 'average', value: 287 },\n                    { name: 'count', value: 277 },\n                    { name: 'distinct', value: 292 },\n                    { name: 'div', value: 595 },\n                    { name: 'eq', value: 594 },\n                    { name: 'fn', value: 460 },\n                    { name: 'gt', value: 603 },\n                    { name: 'gte', value: 625 },\n                    { name: 'iff', value: 748 },\n                    { name: 'isa', value: 461 },\n                    { name: 'lt', value: 597 },\n                    { name: 'lte', value: 619 },\n                    { name: 'max', value: 283 },\n                    { name: 'min', value: 283 },\n                    { name: 'mod', value: 591 },\n                    { name: 'mul', value: 603 },\n                    { name: 'neq', value: 599 },\n                    { name: 'not', value: 386 },\n                    { name: 'or', value: 323 },\n                    { name: 'orderby', value: 307 },\n                    { name: 'range', value: 772 },\n                    { name: 'select', value: 296 },\n                    { name: 'stddev', value: 363 },\n                    { name: 'sub', value: 600 },\n                    { name: 'sum', value: 280 },\n                    { name: 'update', value: 307 },\n                    { name: 'variance', value: 335 },\n                    { name: 'where', value: 299 },\n                    { name: 'xor', value: 354 },\n                    { name: '-', value: 264 }\n                  ]\n                },\n                { name: 'Minimum', value: 843 },\n                { name: 'Not', value: 1554 },\n                { name: 'Or', value: 970 },\n                { name: 'Query', value: 13896 },\n                { name: 'Range', value: 1594 },\n                { name: 'StringUtil', value: 4130 },\n                { name: 'Sum', value: 791 },\n                { name: 'Variable', value: 1124 },\n                { name: 'Variance', value: 1876 },\n                { name: 'Xor', value: 1101 }\n              ]\n            },\n            {\n              name: 'scale',\n              children: [\n                { name: 'IScaleMap', value: 2105 },\n                { name: 'LinearScale', value: 1316 },\n                { name: 'LogScale', value: 3151 },\n                { name: 'OrdinalScale', value: 3770 },\n                { name: 'QuantileScale', value: 2435 },\n                { name: 'QuantitativeScale', value: 4839 },\n                { name: 'RootScale', value: 1756 },\n                { name: 'Scale', value: 4268 },\n                { name: 'ScaleType', value: 1821 },\n                { name: 'TimeScale', value: 5833 }\n              ]\n            }\n          ]\n        }\n      ],\n      top: '5%',\n      left: '7%',\n      bottom: '2%',\n      right: '20%',\n      symbolSize: 7,\n      edgeShape: 'polyline',\n      edgeForkPosition: '63%',\n      initialTreeDepth: 3,\n      lineStyle: {\n        width: 2\n      },\n      label: {\n        backgroundColor: '#fff',\n        position: 'left',\n        verticalAlign: 'middle',\n        align: 'right'\n      },\n      leaves: {\n        label: {\n          position: 'right',\n          verticalAlign: 'middle',\n          align: 'left'\n        }\n      },\n      emphasis: {\n        focus: 'descendant'\n      },\n      expandAndCollapse: true,\n      animationDuration: 550,\n      animationDurationUpdate: 750\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Chart with Marklines in Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to create a line chart with marklines using Apache ECharts. It sets up the chart options, including x-axis categories, y-axis configuration, series data, and markline settings for average and maximum values.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-markline.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Temperature Change in the Coming Week'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {},\n  toolbox: {\n    show: true,\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none'\n      },\n      dataView: { readOnly: false },\n      magicType: { type: ['line', 'bar'] },\n      restore: {},\n      saveAsImage: {}\n    }\n  },\n  xAxis: {\n    type: 'category',\n    boundaryGap: false,\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter: '{value} °C'\n    }\n  },\n  series: [\n    {\n      name: 'Highest',\n      type: 'line',\n      data: [10, 11, 13, 11, 12, 12, 9],\n      markPoint: {\n        data: [\n          { type: 'max', name: 'Max' },\n          { type: 'min', name: 'Min' }\n        ]\n      },\n      markLine: {\n        data: [{ type: 'average', name: 'Avg' }]\n      }\n    },\n    {\n      name: 'Lowest',\n      type: 'line',\n      data: [1, -2, 2, 5, 3, 2, 0],\n      markPoint: {\n        data: [{ name: 'Week Lowest', value: -2, xAxis: 1, yAxis: -1.5 }]\n      },\n      markLine: {\n        data: [\n          { type: 'average', name: 'Avg' },\n          [\n            {\n              symbol: 'none',\n              x: '90%',\n              yAxis: 'max'\n            },\n            {\n              symbol: 'circle',\n              label: {\n                position: 'start',\n                formatter: 'Max'\n              },\n              type: 'max',\n              name: '最高点'\n            }\n          ]\n        ]\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Interactive Line Chart with ECharts\nDESCRIPTION: This code snippet sets up an ECharts line chart with the ability to add points by clicking. It defines the chart options, including axis configuration, series data, and click event handling.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-pen.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noption = {\n  title: {\n    text: 'Click to Add Points'\n  },\n  tooltip: {\n    formatter: function (params) {\n      params = params[0];\n      return (\n        params.seriesName +\n        ' : [ ' +\n        params.value[0] +\n        ', ' +\n        params.value[1] +\n        ' ]'\n      );\n    }\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  xAxis: {\n    type: 'value',\n    axisLine: { onZero: false }\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      id: 'a',\n      type: 'line',\n      smooth: true,\n      data: [\n        [1, 7],\n        [2, 3],\n        [3, 5],\n        [4, 4],\n        [5, 8]\n      ]\n    }\n  ]\n};\n\nlet zr = myChart.getZr();\n\nzr.on('click', function (params) {\n  let pointInPixel = [params.offsetX, params.offsetY];\n  let pointInGrid = myChart.convertFromPixel('grid', pointInPixel);\n  \n  if (myChart.containPixel('grid', pointInPixel)) {\n    option.series[0].data.push(pointInGrid);\n    myChart.setOption(option);\n  }\n});\n\nzr.on('mousemove', function (params) {\n  let pointInPixel = [params.offsetX, params.offsetY];\n  zr.setCursorStyle(\n    myChart.containPixel('grid', pointInPixel) ? 'copy' : 'default'\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Clustering Configuration Specification in JavaScript\nDESCRIPTION: Configuration object for the clustering algorithm, specifying which dimensions to use and where to store the cluster index results.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconfig = {\n    dimensions: [2, 3],\n    outputClusterIndexDimension: 5\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sunburst Label Position in Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to set up a sunburst chart with various label position options. It shows different configurations for positioning labels inside, outside, or centered within the sunburst segments.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/sunburst-label-position.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  series: [\n    {\n      type: 'sunburst',\n      data: [\n        {\n          name: 'Grandpa',\n          children: [\n            {\n              name: 'Uncle Leo',\n              value: 15,\n              children: [\n                {\n                  name: 'Cousin Jack',\n                  value: 2\n                },\n                {\n                  name: 'Cousin Mary',\n                  value: 5,\n                  children: [\n                    {\n                      name: 'Jackson',\n                      value: 2\n                    }\n                  ]\n                },\n                {\n                  name: 'Cousin Ben',\n                  value: 4\n                }\n              ]\n            },\n            {\n              name: 'Father',\n              value: 10,\n              children: [\n                {\n                  name: 'Me',\n                  value: 5\n                },\n                {\n                  name: 'Brother Peter',\n                  value: 1\n                }\n              ]\n            }\n          ]\n        },\n        {\n          name: 'Nancy',\n          children: [\n            {\n              name: 'Uncle Nike',\n              children: [\n                {\n                  name: 'Cousin Betty',\n                  value: 1\n                },\n                {\n                  name: 'Cousin Jenny',\n                  value: 2\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      label: {\n        rotate: 'radial'\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Dotted Bar Chart with ECharts PictorialBar in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a bar chart with dotted/striped effects using ECharts pictorialBar. The chart displays data with repeated symbol patterns that form bar-like structures. It uses a custom symbol shape and specific spacing to create a dotted appearance.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pictorialBar-dotted.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n    tooltip: {},\n    legend: {\n        data: ['bar', 'bar2']\n    },\n    xAxis: {\n        data: ['A', 'B', 'C', 'D', 'E'],\n        axisTick: { show: false }\n    },\n    yAxis: {\n        splitLine: { show: false }\n    },\n    animationDurationUpdate: 1000,\n    series: [{\n        name: 'bar',\n        type: 'pictorialBar',\n        itemStyle: {\n            color: '#d94e5d'\n        },\n        symbolRepeat: true,\n        symbolSize: ['30%', '15%'],\n        data: [20, 40, 60, 80, 70],\n        z: 10\n    }, {\n        name: 'bar2',\n        type: 'pictorialBar',\n        barGap: '-100%',\n        symbolPosition: 'end',\n        symbolRepeat: true,\n        symbolSize: ['30%', '12%'],\n        symbolOffset: [0, 5],\n        itemStyle: {\n            color: '#0f375f',\n            opacity: 0.8\n        },\n        data: [60, 40, 80, 60, 50]\n    }]\n};\n```\n\n----------------------------------------\n\nTITLE: Standalone Clustering with Single Output Type\nDESCRIPTION: Example of clustering result when using the standalone mode with 'single' output type, which returns both the clustered data and centroids.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nresult = {\n    data: [\n        // dim2, dim3 are used in clustering.\n        // All of the input data are kept in the output.\n        // dim5 is the output cluster index.\n        // dim6 is the output distance value.\n        // dimensions:\n        // 0    1      2    3      4      5  6\n        [ 232,  4.21,  51,  0.323, 'xxx', 0, 89 ],\n        [ 321,  1.62,  18,  0.139, 'xzx', 2, 23 ],\n        [ 551,  11.21, 13,  0.641, 'yzy', 0, ?? ],\n        ...\n    ],\n    centroids: [\n        // center of cluster0\n        [14, 0.145],\n        // center of cluster1\n        [24, 0.321],\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Globe Layers with ECharts GL in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a globe visualization with multiple layers using ECharts GL. It sets up the globe, atmosphere, and various data series including bar charts and scatter plots on the globe surface.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/globe-layers.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n    backgroundColor: '#000',\n    globe: {\n        baseTexture: ROOT_PATH + '/data-gl/asset/earth.jpg',\n        heightTexture: ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n\n        displacementScale: 0.1,\n\n        shading: 'realistic',\n        realisticMaterial: {\n            roughness: 0.9\n        },\n\n        postEffect: {\n            enable: true\n        },\n        light: {\n            main: {\n                intensity: 5,\n                shadow: true\n            },\n            ambientCubemap: {\n                texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n                diffuseIntensity: 0.2\n            }\n        },\n        viewControl: {\n            autoRotate: false\n        },\n        layers: [{\n            type: 'blend',\n            blendTo: 'emission',\n            texture: ROOT_PATH + '/data-gl/asset/night.jpg'\n        }, {\n            type: 'overlay',\n            texture: ROOT_PATH + '/data-gl/asset/clouds.png',\n            shading: 'lambert',\n            distance: 5\n        }]\n    },\n    series: [{\n        type: 'bar3D',\n        coordinateSystem: 'globe',\n        shading: 'realistic',\n        minHeight: 0.2,\n        maxHeight: 1,\n        silent: true,\n        instancing: true,\n        animation: false,\n        data: data\n    }, {\n        type: 'scatter3D',\n        coordinateSystem: 'globe',\n        blendMode: 'lighter',\n        symbolSize: 2,\n        animation: false,\n        data: data,\n        itemStyle: {\n            color: 'rgb(50, 50, 150)'\n        }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Forest Growth Visualization with echarts PictorialBar\nDESCRIPTION: This code creates an interactive visualization of forest growth over time using echarts pictorialBar chart type. It uses tree symbols to represent forest density with animated transitions between different years.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pictorialBar-forest.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  backgroundColor: '#031f2d',\n  title: {\n    text: 'Expansion of forest',\n    left: 'center',\n    top: 30,\n    textStyle: {\n      color: '#fff',\n      fontSize: 30\n    }\n  },\n  tooltip: {\n    formatter: '{b} : {c}%'\n  },\n  xAxis: {\n    splitLine: { show: false },\n    axisLine: { show: false },\n    axisTick: { show: false },\n    axisLabel: { show: false }\n  },\n  yAxis: {\n    splitLine: { show: false },\n    axisLine: { show: false },\n    axisTick: { show: false },\n    axisLabel: { show: false }\n  },\n  legend: {\n    left: 'left',\n    top: 'center',\n    align: 'left',\n    itemGap: 20,\n    textStyle: {\n      color: '#fff',\n      fontSize: 18,\n      fontWeight: 100\n    },\n    data: ['2016', '2017']\n  },\n  animationDuration: 2000,\n  animationDurationUpdate: 1000,\n  animationEasing: 'bounceOut',\n  series: [\n    {\n      name: '2016',\n      type: 'pictorialBar',\n      barCategoryGap: 0,\n      label: {\n        show: true,\n        position: 'top',\n        formatter: '{c} %',\n        fontSize: 28,\n        color: '#27727B'\n      },\n      z: 10,\n      itemStyle: {\n        normal: {\n          color: {\n            type: 'linear',\n            x: 0,\n            y: 0,\n            x2: 0,\n            y2: 1,\n            colorStops: [\n              {\n                offset: 0,\n                color: '#27727B'\n              },\n              {\n                offset: 1,\n                color: '#27727B'\n              }\n            ]\n          }\n        },\n        emphasis: {\n          opacity: 1\n        }\n      },\n      symbolRepeat: true,\n      symbolMargin: '5%',\n      symbol: 'image://https://echarts.apache.org/examples/data/asset/img/custom-tree.png',\n      symbolSize: ['100%', '30%'],\n      symbolBoundingData: 100,\n      data: [\n        {\n          value: 38.5,\n          symbol: 'image://https://echarts.apache.org/examples/data/asset/img/custom-tree.png',\n          symbolSize: ['100%', '30%']\n        }\n      ],\n      markLine: {\n        symbol: 'none',\n        lineStyle: {\n          normal: {\n            type: 'dashed',\n            color: '#fff',\n            width: 2\n          }\n        },\n        label: {\n          normal: {\n            show: false\n          }\n        },\n        data: [\n          {\n            yAxis: 38.5\n          }\n        ]\n      },\n      z: 11\n    },\n    {\n      name: '2017',\n      type: 'pictorialBar',\n      barCategoryGap: 0,\n      symbolRepeat: true,\n      symbolMargin: '5%',\n      symbol: 'image://https://echarts.apache.org/examples/data/asset/img/custom-tree.png',\n      symbolSize: ['100%', '30%'],\n      symbolBoundingData: 100,\n      label: {\n        show: true,\n        position: 'top',\n        formatter: '{c} %',\n        fontSize: 30,\n        color: '#1BAC8D',\n        fontWeight: 'bold'\n      },\n      itemStyle: {\n        normal: {\n          color: {\n            type: 'linear',\n            x: 0,\n            y: 0,\n            x2: 0,\n            y2: 1,\n            colorStops: [\n              {\n                offset: 0,\n                color: '#1BAC8D'\n              },\n              {\n                offset: 1,\n                color: '#1BAC8D'\n              }\n            ]\n          }\n        },\n        emphasis: {\n          opacity: 1\n        }\n      },\n      data: [\n        {\n          value: 62.8,\n          symbol: 'image://https://echarts.apache.org/examples/data/asset/img/custom-tree.png',\n          symbolSize: ['100%', '30%']\n        }\n      ],\n      markLine: {\n        symbol: 'none',\n        lineStyle: {\n          normal: {\n            type: 'dashed',\n            color: '#fff',\n            width: 2\n          }\n        },\n        label: {\n          normal: {\n            show: false\n          }\n        },\n        data: [\n          {\n            yAxis: 62.8\n          }\n        ]\n      },\n      z: 12\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Bar Label Rotation in Apache ECharts\nDESCRIPTION: This code snippet demonstrates how to set up a bar chart with rotated labels using ECharts. It shows configuration options for rotating text labels on bar charts to improve readability when space is limited.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/bar-label-rotation.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n---\ntitle: Bar Label Rotation\ncategory: bar\n---\n```\n\n----------------------------------------\n\nTITLE: Registering Histogram Transform with ECharts\nDESCRIPTION: Code to register the histogram transform with ECharts 5.0+ to enable data transformation capabilities.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\necharts.registerTransform(ecStat.transform.histogram);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Sankey Diagram in ECharts\nDESCRIPTION: This code snippet sets up a vertically oriented Sankey diagram using ECharts. It defines the chart options including data, node and link styles, and layout orientation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/sankey-vertical.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Sankey Diagram'\n  },\n  tooltip: {\n    trigger: 'item',\n    triggerOn: 'mousemove'\n  },\n  series: [\n    {\n      type: 'sankey',\n      emphasis: {\n        focus: 'adjacency'\n      },\n      orient: 'vertical',\n      data: [\n        { name: 'a' },\n        { name: 'b' },\n        { name: 'a1' },\n        { name: 'a2' },\n        { name: 'b1' },\n        { name: 'c' }\n      ],\n      links: [\n        {\n          source: 'a',\n          target: 'a1',\n          value: 5\n        },\n        {\n          source: 'a',\n          target: 'a2',\n          value: 3\n        },\n        {\n          source: 'b',\n          target: 'b1',\n          value: 8\n        },\n        {\n          source: 'a',\n          target: 'b1',\n          value: 3\n        },\n        {\n          source: 'b1',\n          target: 'a1',\n          value: 1\n        },\n        {\n          source: 'b1',\n          target: 'c',\n          value: 2\n        }\n      ],\n      lineStyle: {\n        color: 'source',\n        curveness: 0.5\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Province Switching Map Visualization in ECharts\nDESCRIPTION: This code demonstrates how to create an interactive map that allows users to switch between different provinces in China. It includes event handling for map navigation, data visualization for provinces, and color mapping for different regions.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/map-province.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Switch among 34 Provinces',\n    subtext: 'Double Click to Switch Province',\n    left: 'center'\n  },\n  tooltip: {\n    trigger: 'item',\n    showDelay: 0,\n    transitionDuration: 0.2\n  },\n  visualMap: {\n    left: 'right',\n    min: 0,\n    max: 1000,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    },\n    text: ['High', 'Low'],\n    calculable: true\n  },\n  toolbox: {\n    show: true,\n    //orient: 'vertical',\n    left: 'left',\n    top: 'top',\n    feature: {\n      dataView: { readOnly: false },\n      restore: {},\n      saveAsImage: {}\n    }\n  },\n  series: [\n    {\n      name: 'Province',\n      type: 'map',\n      map: 'china',\n      emphasis: {\n        label: {\n          show: true\n        }\n      },\n      data: [\n        { name: '北京', value: 199 },\n        { name: '天津', value: 42 },\n        { name: '河北', value: 102 },\n        { name: '山西', value: 81 },\n        { name: '内蒙古', value: 47 },\n        { name: '辽宁', value: 67 },\n        { name: '吉林', value: 82 },\n        { name: '黑龙江', value: 123 },\n        { name: '上海', value: 24 },\n        { name: '江苏', value: 92 },\n        { name: '浙江', value: 114 },\n        { name: '安徽', value: 109 },\n        { name: '福建', value: 116 },\n        { name: '江西', value: 91 },\n        { name: '山东', value: 119 },\n        { name: '河南', value: 137 },\n        { name: '湖北', value: 116 },\n        { name: '湖南', value: 114 },\n        { name: '广东', value: 123 },\n        { name: '广西', value: 59 },\n        { name: '海南', value: 14 },\n        { name: '重庆', value: 75 },\n        { name: '四川', value: 197 },\n        { name: '贵州', value: 71 },\n        { name: '云南', value: 126 },\n        { name: '西藏', value: 29 },\n        { name: '陕西', value: 77 },\n        { name: '甘肃', value: 90 },\n        { name: '青海', value: 57 },\n        { name: '宁夏', value: 52 },\n        { name: '新疆', value: 99 },\n        { name: '香港', value: 8 },\n        { name: '澳门', value: 5 },\n        { name: '台湾', value: 71 }\n      ]\n    }\n  ]\n};\n\nmyChart.on('dblclick', function (params) {\n  if (params.name === '上海') {\n    alert('暂无上海地图数据！');\n  } else if (params.name === '澳门') {\n    alert('暂无澳门地图数据！');\n  }\n  // 获取点击的省份\n  var name = params.name;\n  // 将当前点击的省份作为地图显示\n  $.get(\n    './vendors/echarts/map/json/province/' + name + '.json',\n    function (mapJson) {\n      echarts.registerMap(name, mapJson);\n      var option = myChart.getOption();\n      option.tooltip = {\n        trigger: 'item',\n        showDelay: 0,\n        transitionDuration: 0.2\n      };\n      option.series = [\n        {\n          name: name,\n          type: 'map',\n          mapType: name,\n          selectedMode: 'single',\n          tooltip: {\n            trigger: 'item'\n          },\n          emphasis: {\n            label: {\n              show: true\n            }\n          }\n        }\n      ];\n      myChart.setOption(option, true);\n    }\n  );\n});\n\n// Back to the country map\nmyChart.on('click', function (params) {\n  // if clicked the province\n  if (params.name in provinces) {\n    myChart.setOption(option, true);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Output of ECharts Performance Data\nDESCRIPTION: Shows the structure of performance data returned by getPerformance() method, including timing details for each stage of the rendering pipeline.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/custom-profile.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    updateDuration: 2.376,\n    updateView: {\n        markSeries: 0.113,\n        markView: 0.153,\n        createView: 0.215,\n        updateVisual: 0.208,\n        prepareAndUpdateLayers: 0.214,\n        updateLayout: 0.56,\n        task: 0.827,\n        buildPainter: 0.016,\n        pointsLayout: 0,\n        viewBuildStartTime: 1661958126522.958,\n        viewBuildEndTime: 1661958126524.916,\n        viewBuildDuration: 1.958\n    },\n    renderDuration: 1.285,\n    renderView: {\n        setBackgroundColor: 0.033,\n        renderSeries: 0.919,\n        renderComponents: 0.237,\n        paintStartTime: 1661958126524.927,\n        paintEndTime: 1661958126526.212,\n        paintDuration: 1.285\n    },\n    totalDuration: 3.661\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Data to Coordinate Axes in Apache ECharts\nDESCRIPTION: This snippet demonstrates how to use the encode property to map data dimensions to visual channels in Apache ECharts. It shows various encoding methods for different chart types.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/dataset-encode1.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n    dataset: {\n        source: [\n            ['product', '2015', '2016', '2017'],\n            ['Matcha Latte', 43.3, 85.8, 93.7],\n            ['Milk Tea', 83.1, 73.4, 55.1],\n            ['Cheese Cocoa', 86.4, 65.2, 82.5],\n            ['Walnut Brownie', 72.4, 53.9, 39.1]\n        ]\n    },\n    xAxis: { type: 'category' },\n    yAxis: {},\n    series: [\n        {\n            type: 'bar',\n            encode: {\n                // 将 \"amount\" 列映射到 X 轴。\n                x: 'amount',\n                // 将 \"product\" 列映射到 Y 轴。\n                y: 'product'\n            }\n        }\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Punch Card Visualization with ECharts\nDESCRIPTION: This code demonstrates how to create a GitHub-style punch card visualization using ECharts. It displays a scatter plot where the position represents the day and hour, and the size of each point represents the frequency or activity at that time.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-punchCard.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'GitHub Punch Card'\n  },\n  grid: {\n    left: 2,\n    bottom: 10,\n    right: 10,\n    containLabel: true\n  },\n  xAxis: {\n    type: 'category',\n    data: [\n      '12a', '1a', '2a', '3a', '4a', '5a', '6a',\n      '7a', '8a', '9a', '10a', '11a',\n      '12p', '1p', '2p', '3p', '4p', '5p',\n      '6p', '7p', '8p', '9p', '10p', '11p'\n    ],\n    boundaryGap: false,\n    splitLine: {\n      show: true,\n      lineStyle: {\n        type: 'dashed'\n      }\n    },\n    axisLine: {\n      show: false\n    }\n  },\n  yAxis: {\n    type: 'category',\n    data: ['Saturday', 'Friday', 'Thursday',\n      'Wednesday', 'Tuesday', 'Monday', 'Sunday'],\n    axisLine: {\n      show: false\n    }\n  },\n  series: [{\n    name: 'Punch Card',\n    type: 'scatter',\n    symbolSize: function (val) {\n      return val[2] * 2;\n    },\n    data: [\n      [0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5],\n      [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2],\n      [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4],\n      [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1],\n      [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0],\n      [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0],\n      [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6]\n    ],\n    itemStyle: {\n      opacity: 0.8\n    },\n    emphasis: {\n      itemStyle: {\n        color: '#a4edba'\n      }\n    }\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Graph Visualization with Apache ECharts in JavaScript\nDESCRIPTION: This code snippet sets up the initial graph data and options for an Apache ECharts graph visualization. It defines the chart container, initializes the ECharts instance, and specifies the graph layout and styling options.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/graph-force-dynamic.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chartDom = document.getElementById('main');\nvar myChart = echarts.init(chartDom);\nvar option;\n\noption = {\n  title: {\n    text: 'Graph Dynamic'\n  },\n  tooltip: {},\n  animationDurationUpdate: 1500,\n  animationEasingUpdate: 'quinticInOut',\n  series: [\n    {\n      type: 'graph',\n      layout: 'none',\n      symbolSize: 50,\n      roam: true,\n      label: {\n        show: true\n      },\n      edgeSymbol: ['circle', 'arrow'],\n      edgeSymbolSize: [4, 10],\n      edgeLabel: {\n        fontSize: 20\n      },\n      data: [\n        {\n          name: 'Node 1',\n          x: 300,\n          y: 300\n        },\n        {\n          name: 'Node 2',\n          x: 800,\n          y: 300\n        },\n        {\n          name: 'Node 3',\n          x: 550,\n          y: 100\n        },\n        {\n          name: 'Node 4',\n          x: 550,\n          y: 500\n        }\n      ],\n      links: [],\n      lineStyle: {\n        opacity: 0.9,\n        width: 2,\n        curveness: 0\n      }\n    }\n  ]\n};\n\noption && myChart.setOption(option);\n```\n\n----------------------------------------\n\nTITLE: Calculating Quantiles Using ecStat\nDESCRIPTION: Demonstrates how to calculate quantiles from an ordered numeric array using ecStat. The p parameter specifies which quantile to calculate (e.g., 0.25 for first quartile, 0.5 for median).\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar quantileValue = ecStat.statistics.quantile(dataList, p);\n```\n\n----------------------------------------\n\nTITLE: Initializing Simple Surface Plot with ECharts GL in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic 3D surface plot using ECharts GL. It sets up the chart options including the 3D axis, surface series, and visual map for coloring.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/simple-surface.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n    tooltip: {},\n    backgroundColor: '#fff',\n    visualMap: {\n        show: false,\n        dimension: 2,\n        min: -1,\n        max: 1,\n        inRange: {\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n        }\n    },\n    xAxis3D: {\n        type: 'value'\n    },\n    yAxis3D: {\n        type: 'value'\n    },\n    zAxis3D: {\n        type: 'value'\n    },\n    grid3D: {\n        viewControl: {\n            projection: 'orthographic'\n        }\n    },\n    series: [{\n        type: 'surface',\n        wireframe: {\n            show: false\n        },\n        equation: {\n            x: {\n                step: 0.05,\n                min: -3,\n                max: 3\n            },\n            y: {\n                step: 0.05,\n                min: -3,\n                max: 3\n            },\n            z: function (x, y) {\n                return Math.sin(x * x + y * y) * x / 3.14;\n            }\n        }\n    }]\n};\n```\n\n----------------------------------------\n\nTITLE: Using Matrix Data Structure in Apache ECharts\nDESCRIPTION: This snippet illustrates how to use the matrix data structure in Apache ECharts. It shows how to define a matrix dataset and map its dimensions to visual channels using the encode property.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/dataset-encode1.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n    dataset: {\n        source: [\n            [12, 23, 45, 56],\n            [34, 45, 56, 67],\n            [56, 67, 78, 89],\n            [78, 89, 90, 12]\n        ]\n    },\n    xAxis: {},\n    yAxis: {},\n    series: [\n        {\n            type: 'scatter',\n            encode: {\n                x: 1,\n                y: 2\n            },\n            symbolSize: 5\n        }\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Compiling and Rendering a Template with ETPL\nDESCRIPTION: Shows how to compile a template string and render it with data using ETPL.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar render = etpl.compile('Hello ${name}!');\nvar text = render({ name: 'etpl' });\n```\n\n----------------------------------------\n\nTITLE: Calculating Sample Variance Using ecStat\nDESCRIPTION: Shows how to calculate the sample variance of a numeric data sample using ecStat's statistics module. Returns 0 if the data list is empty or has less than 2 elements.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar varianceValue = ecStat.statistics.sampleVariance(dataList);\n```\n\n----------------------------------------\n\nTITLE: Importing Minimal ECharts-GL Components\nDESCRIPTION: JavaScript code showing how to selectively import specific 3D chart components for optimal bundle size\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-gl/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as echarts from 'echarts/core';\nimport { Scatter3DChart } from 'echarts-gl/charts';\nimport { Grid3DComponent } from 'echarts-gl/components';\n\necharts.use([Scatter3DChart, Grid3DComponent]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Globe with ECharts Surface in JavaScript\nDESCRIPTION: This code snippet initializes a 3D globe visualization using echarts-gl and adds an interactive ECharts Surface. It sets up the chart options, including globe properties, surface series, and emphasis effects.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/globe-with-echarts-surface.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n    backgroundColor: '#000',\n    globe: {\n        baseTexture: ROOT_PATH + '/data-gl/asset/earth.jpg',\n        heightTexture: ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n        displacementScale: 0.1,\n        shading: 'lambert',\n        environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n        light: {\n            ambient: {\n                intensity: 0.1\n            },\n            main: {\n                intensity: 1.5\n            }\n        },\n        layers: [{\n            type: 'blend',\n            blendTo: 'emission',\n            texture: ROOT_PATH + '/data-gl/asset/night.jpg'\n        }, {\n            type: 'overlay',\n            texture: ROOT_PATH + '/data-gl/asset/clouds.png',\n            shading: 'lambert',\n            distance: 5\n        }]\n    },\n    series: [{\n        type: 'surface',\n        name: 'Surface',\n        parametric: true,\n        wireframe: {\n            show: false\n        },\n        equation: {\n            u: {\n                min: -Math.PI,\n                max: Math.PI,\n                step: Math.PI / 20\n            },\n            v: {\n                min: 0,\n                max: Math.PI,\n                step: Math.PI / 20\n            },\n            x: function (u, v) {\n                return Math.sin(v) * Math.cos(u);\n            },\n            y: function (u, v) {\n                return Math.sin(v) * Math.sin(u);\n            },\n            z: function (u, v) {\n                return Math.cos(v);\n            }\n        },\n        itemStyle: {\n            color: '#ff0000'\n        },\n        emphasis: {\n            itemStyle: {\n                color: '#ffffff'\n            }\n        }\n    }]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Scatter Plot with ECharts-GL\nDESCRIPTION: JavaScript example showing how to initialize a 3D scatter plot chart using ECharts-GL. The example demonstrates setting up 3D axes, creating a scatter series with custom styling, and providing data points in 3D space.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-gl/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar chart = echarts.init(document.getElementById('main'));\nchart.setOption({\n    grid3D: {},\n    xAxis3D: {},\n    yAxis3D: {},\n    zAxis3D: {},\n    series: [{\n        type: 'scatter3D',\n        symbolSize: 50,\n        data: [[-1, -1, -1], [0, 0, 0], [1, 1, 1]],\n        itemStyle: {\n            opacity: 1\n        }\n    }]\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Deviation Calculation in JavaScript\nDESCRIPTION: Example of using the statistics.deviation method to calculate the sample standard deviation of a numeric array.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar sampleDeviation = ecStat.statistics.deviation(dataList);\n```\n\n----------------------------------------\n\nTITLE: Registering ecStat Clustering Transform\nDESCRIPTION: JavaScript code to register the ecStat clustering transform with ECharts.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\necharts.registerTransform(ecStat.transform.clustering);\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Axis for ECharts Line Chart in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure a line chart with a logarithmic y-axis using Apache ECharts. It sets up the chart options, defines the x and y axes, and specifies the data series for visualization.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-log.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Log Axis',\n    left: 'center'\n  },\n  tooltip: {\n    trigger: 'item',\n    formatter: '{a} <br/>{b} : {c}'\n  },\n  legend: {\n    left: 'left'\n  },\n  xAxis: {\n    type: 'category',\n    name: 'x',\n    splitLine: { show: false },\n    data: ['A', 'B', 'C', 'D', 'E', 'F']\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  yAxis: {\n    type: 'log',\n    name: 'y',\n    minorTick: {\n      show: true\n    },\n    minorSplitLine: {\n      show: true\n    }\n  },\n  series: [\n    {\n      name: 'Log2',\n      type: 'line',\n      data: [1, 3, 9, 27, 81, 247]\n    },\n    {\n      name: 'Log4',\n      type: 'line',\n      data: [1, 4, 16, 64, 256, 1024]\n    },\n    {\n      name: 'Log6',\n      type: 'line',\n      data: [1, 6, 36, 216, 1296, 7776]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Sample Variance in ECharts\nDESCRIPTION: Calculates the variance of a numeric array. Returns 0 if the array is empty or has length less than 2.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar varianceValue = ecStat.statistics.sampleVariance(dataList);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Dataset in Apache ECharts\nDESCRIPTION: This code demonstrates how to use the dataset component in Apache ECharts to create a simple bar chart. The dataset defines the data structure with product and data fields, which are then automatically mapped to the chart's visual elements.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/dataset-simple0.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  legend: {},\n  tooltip: {},\n  dataset: {\n    // Provide data directly.\n    source: [\n      ['product', '2015', '2016', '2017'],\n      ['Matcha Latte', 43.3, 85.8, 93.7],\n      ['Milk Tea', 83.1, 73.4, 55.1],\n      ['Cheese Cocoa', 86.4, 65.2, 82.5],\n      ['Walnut Brownie', 72.4, 53.9, 39.1]\n    ]\n  },\n  // Declare X axis, which is a category axis, mapping\n  // to the first column by default.\n  xAxis: { type: 'category' },\n  // Declare Y axis, which is a value axis.\n  yAxis: {},\n  // Declare several series, each of them mapped to a\n  // column of the dataset by default.\n  series: [{ type: 'bar' }, { type: 'bar' }, { type: 'bar' }]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Scatter Plot for Simplex Noise Visualization in ECharts\nDESCRIPTION: This code snippet sets up the configuration for an ECharts 3D scatter plot to visualize simplex noise. It defines the data generation, chart options, and visual properties for the scatter points.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/scatter3d-simplex-noise.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noption = {\n    visualMap: {\n        show: false,\n        min: -1,\n        max: 1,\n        inRange: {\n            colorLightness: [0.2, 1]\n        }\n    },\n    backgroundColor: '#000',\n    globe: {\n    },\n    series: [{\n        type: 'scatter3D',\n        data: data,\n        symbolSize: 2.5,\n        itemStyle: {\n            color: 'rgb(50, 50, 150)',\n            opacity: 1\n        }\n    }]\n};\n\nvar noise = new SimplexNoise(Math.random);\nfunction generateData(theta, min, max) {\n    var data = [];\n    for (var i = 0; i <= 20; i++) {\n        for (var j = 0; j <= 20; j++) {\n            var x = j / 20 * (max - min) + min;\n            var y = i / 20 * (max - min) + min;\n            var z = noise.noise3D(x, y, theta);\n            data.push([x, y, z]);\n        }\n    }\n    return data;\n}\n\nsetInterval(function () {\n    var data = generateData(Date.now() / 1e4, -1, 1);\n    myChart.setOption({\n        series: [{\n            data: data\n        }]\n    });\n}, 10);\n```\n\n----------------------------------------\n\nTITLE: Calculating Sample Variance with ecStat.statistics in JavaScript\nDESCRIPTION: This function calculates the sample variance of a numeric array. It returns 0 if the input array is empty or has less than 2 elements.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar varianceValue = ecStat.statistics.sampleVariance(dataList);\n```\n\n----------------------------------------\n\nTITLE: Using ecStat Histogram Standalone\nDESCRIPTION: JavaScript code showing standalone usage of ecStat histogram function.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar bins = ecStat.histogram(data, config);\n// or\nvar bins = ecStat.histogram(data, method);\n```\n\n----------------------------------------\n\nTITLE: Configuring Force Layout in ECharts Graph Series\nDESCRIPTION: This example demonstrates how to configure a force layout for a graph visualization in ECharts. The configuration includes parameters for repulsion, edge length, and gravity that control how nodes and edges are positioned in the visualization.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/graph-force2.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nseries: [{\n    type: 'graph',\n    layout: 'force',\n    force: {\n        // Initialize force layout parameters\n        // Node repulsion factor. Larger the repulsion, farther the nodes will be repelled from each other\n        repulsion: 100,\n        // Edge length, which can also be an array to represent different edge lengths\n        edgeLength: 50\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Bundling Handsontable with Browserify\nDESCRIPTION: Command to bundle Handsontable with Browserify, specifying all required module dependencies.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrowserify main.js -o bundle.js -r moment -r pikaday -r zeroclipboard -r numbro\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value in ECharts\nDESCRIPTION: Returns the maximum value from a numeric array.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar maxValue = ecStat.statistics.max(dataList);\n```\n\n----------------------------------------\n\nTITLE: Configuring Bar Chart with Background Color in ECharts\nDESCRIPTION: This snippet defines the options for creating a bar chart with background colors using ECharts. It sets up the grid, xAxis, yAxis, and series configurations, including custom background colors for each bar.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/bar-background.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      data: [\n        120,\n        {\n          value: 200,\n          itemStyle: {\n            color: '#a90000'\n          }\n        },\n        150,\n        80,\n        70,\n        110,\n        130\n      ],\n      type: 'bar',\n      showBackground: true,\n      backgroundStyle: {\n        color: 'rgba(180, 180, 180, 0.2)'\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Bundling Handsontable with Browserify\nDESCRIPTION: Command to bundle Handsontable with Browserify, specifying all required module dependencies.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrowserify main.js -o bundle.js -r moment -r pikaday -r zeroclipboard -r numbro\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with ecStat.statistics in JavaScript\nDESCRIPTION: This function returns the maximum value from a numeric array using the ecStat.statistics module.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar maxValue = ecStat.statistics.max(dataList);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ETPL: Compiling and Rendering Templates\nDESCRIPTION: Demonstrates the basic workflow of using ETPL: compiling a template string into a render function and then executing it with data to produce output.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar render = etpl.compile('Hello ${name}!');\nvar text = render({ name: 'etpl' });\n```\n\n----------------------------------------\n\nTITLE: Regression Analysis Output Structure Example\nDESCRIPTION: Shows the structure of the output object from the regression analysis. It includes the fitted data points, parameters of the regression model, and the mathematical expression of the fitted curve.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyRegression.points = [\n    // ValueOnX, ValueOnY\n    [  23,       51      ],\n    [  24,       62      ],\n    ...\n];\n// config.dimensions 之外的其他维度的数据\n// 也会保留在结果中。\n\n// this is the parameter of linear regression,\n// for other types, it shoule be a little different\nmyRegression.parameter = {\n    gradient: 1.695,\n    intercept: 3.008\n};\n\nmyRegression.expression = 'y = 1.7x + 3.01';\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum with ecStat.statistics in JavaScript\nDESCRIPTION: This function calculates the sum of all elements in a numeric array using the ecStat.statistics module.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar sumValue = ecStat.statistics.sum(dataList);\n```\n\n----------------------------------------\n\nTITLE: Using mergeDeep with Immutable Nested Structures in JavaScript\nDESCRIPTION: Demonstrates the mergeDeep method which allows for deep merging of nested immutable structures, combining the original data with new values.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar nested2 = nested.mergeDeep({a:{b:{d:6}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }\n```\n\n----------------------------------------\n\nTITLE: Using mergeDeep with Immutable Nested Structures in JavaScript\nDESCRIPTION: Demonstrates the mergeDeep method which allows for deep merging of nested immutable structures, combining the original data with new values.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar nested2 = nested.mergeDeep({a:{b:{d:6}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }\n```\n\n----------------------------------------\n\nTITLE: Configuring ECharts Options for Mountain Height Comparison Chart\nDESCRIPTION: This snippet sets up the configuration for a pictorial bar chart comparing mountain heights. It defines custom symbols for mountains, sets up the x and y axes, and configures the series data with custom styling.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pictorialBar-hill.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n  {\n    name: 'Mt. Everest',\n    height: 8844\n  },\n  {\n    name: 'K2',\n    height: 8611\n  },\n  {\n    name: 'Kangchenjunga',\n    height: 8586\n  },\n  {\n    name: 'Lhotse',\n    height: 8516\n  },\n  {\n    name: 'Makalu',\n    height: 8485\n  }\n];\n\nconst option = {\n  title: {\n    text: 'Top 5 tallest mountains'\n  },\n  tooltip: {},\n  legend: {\n    data: ['height']\n  },\n  xAxis: {\n    splitLine: { show: false },\n    data: data.map(function (item) {\n      return item.name;\n    })\n  },\n  yAxis: {\n    max: 'dataMax'\n  },\n  series: [\n    {\n      type: 'pictorialBar',\n      name: 'height',\n      symbolRepeat: true,\n      symbolSize: ['100%', '30%'],\n      data: data.map(function (item) {\n        return {\n          value: item.height,\n          symbol:\n            'path://M0,10 L10,10 C5.5,10 5.5,5 5,0 C4.5,5 4.5,10 0,10 z'\n        };\n      }),\n      label: {\n        show: true,\n        position: 'top',\n        formatter: '{c} m'\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphGL for Large Internet Data Visualization\nDESCRIPTION: A frontmatter configuration for a GraphGL visualization example that demonstrates handling large internet data. The configuration specifies the title, category, theme, and required scripts for rendering the visualization.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/graphgl-large-internet.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: GraphGL - Large Internet\ncategory: graphGL\ntheme: dark\ntitleCN: GraphGL - Large Internet\nscripts: http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js\n---\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum Using ecStat\nDESCRIPTION: Shows how to calculate the sum of all values in a numeric data sample using ecStat's statistics module.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar sumValue = ecStat.statistics.sum(dataList);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Globe Visualization with ECharts-GL\nDESCRIPTION: This JavaScript snippet demonstrates how to create a simple globe visualization using ECharts-GL. It initializes the chart, sets options including a globe component, and renders the chart in a specified DOM element.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/globe-echarts-gl-hello-world.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar chart = echarts.init(document.getElementById('main'));\nchart.setOption({\n    globe: {}\n});\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Polar Heatmap Documentation\nDESCRIPTION: YAML metadata block defining the title and category for a polar heatmap documentation page. Includes both English and Chinese titles.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/custom-polar-heatmap.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Polar Heatmap\ncategory: custom\ntitleCN: Polar Heatmap\n---\n```\n\n----------------------------------------\n\nTITLE: Using Id Transform with Apache ECharts 5\nDESCRIPTION: Demonstrates how to use the id transform to add unique identifiers to data points. This transform adds a new dimension with sequential IDs to the dataset.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-simple-transform/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\necharts.registerTransform(ecSimpleTransform.aggregate);\n\nconst option = {\n    dataset: [{\n        source: [\n            ['aa', 'bb', 'cc', 'tag'],\n            [12, 0.33, 5200, 'AA'],\n            [21, 0.65, 8100, 'AA'],\n            ...\n        ]\n    }, {\n        transform: {\n            type: 'ecSimpleTransform:id',\n            config: {\n                dimensionIndex: 4,\n                dimensionName: 'ID'\n            }\n        }\n        // Then the result data will be:\n        // [\n        //     ['aa', 'bb', 'cc', 'tag', 'ID'],\n        //     [12, 0.33, 5200, 'AA', 0],\n        //     [21, 0.65, 8100, 'BB', 1],\n        //     ...\n        // ]\n    }],\n    // ...\n};\n\nconst myChart = echarts.init(dom);\nmyChart.setOption(option);\n```\n\n----------------------------------------\n\nTITLE: Converting Immutable Collections to JavaScript Objects\nDESCRIPTION: Demonstrates how to convert Immutable.js collections back to raw JavaScript objects and arrays using toObject(), toArray(), toJS(), and JSON.stringify().\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar deep = Immutable.Map({ a: 1, b: 2, c: Immutable.List.of(3, 4, 5) });\ndeep.toObject() // { a: 1, b: 2, c: List [ 3, 4, 5 ] }\ndeep.toArray() // [ 1, 2, List [ 3, 4, 5 ] ]\ndeep.toJS() // { a: 1, b: 2, c: [ 3, 4, 5 ] }\nJSON.stringify(deep) // '{\"a\":1,\"b\":2,\"c\":[3,4,5]}'\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Building Visualization with ECharts GL\nDESCRIPTION: This snippet sets up a 3D map visualization of buildings using ECharts GL. It configures the map view, adds a geo3D component with building layer, and defines visual settings for the buildings. The data is loaded from a GeoJSON file.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/map3d-buildings.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$.getJSON('data-gl/asset/data/buildings.json', function (buildingGeoJSON) {\n    echarts.registerMap('buildings', buildingGeoJSON);\n\n    var regions = buildingGeoJSON.features.map(function (feature) {\n        return {\n            name: feature.properties.name,\n            value: Math.random()\n        };\n    });\n\n    myChart.setOption({\n        light: {\n            main: {\n                intensity: 1,\n                shadow: true,\n                shadowQuality: 'high',\n                alpha: 30\n            },\n            ambient: {\n                intensity: 0\n            },\n            ambientCubemap: {\n                texture: 'data-gl/asset/canyon.hdr',\n                exposure: 1,\n                diffuseIntensity: 0.5\n            }\n        },\n        geo3D: {\n            map: 'buildings',\n            shading: 'realistic',\n            realisticMaterial: {\n                roughness: 0.6,\n                metalness: 0\n            },\n            postEffect: {\n                enable: true,\n                SSAO: {\n                    enable: true,\n                    radius: 4,\n                    intensity: 1.5\n                }\n            },\n            groundPlane: {\n                show: true,\n                color: '#333'\n            },\n            light: {\n                main: {\n                    intensity: 1,\n                    shadow: true,\n                    shadowQuality: 'high',\n                    alpha: 30\n                },\n                ambient: {\n                    intensity: 0\n                },\n                ambientCubemap: {\n                    texture: 'data-gl/asset/canyon.hdr',\n                    exposure: 1,\n                    diffuseIntensity: 0.5\n                }\n            },\n            viewControl: {\n                distance: 50,\n                panMouseButton: 'left',\n                rotateMouseButton: 'right'\n            },\n            itemStyle: {\n                color: 'rgb(65, 105, 225)'\n            },\n            regions: regions\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Heatmap Page Metadata in Markdown\nDESCRIPTION: YAML frontmatter block defining the page title, category and Chinese title for the horizontal calendar heatmap documentation page.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/calendar-horizontal.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Calendar Heatmap Horizontal\ncategory: calendar\ntitleCN: 横向日力图\n---\n```\n\n----------------------------------------\n\nTITLE: Converting Immutable Collections Back to JavaScript Objects\nDESCRIPTION: Shows how to convert Immutable collections back to plain JavaScript objects and arrays using methods like toArray(), toObject(), toJS(), and toJSON().\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar deep = Immutable.Map({ a: 1, b: 2, c: Immutable.List.of(3, 4, 5) });\ndeep.toObject() // { a: 1, b: 2, c: List [ 3, 4, 5 ] }\ndeep.toArray() // [ 1, 2, List [ 3, 4, 5 ] ]\ndeep.toJS() // { a: 1, b: 2, c: [ 3, 4, 5 ] }\nJSON.stringify(deep) // '{\"a\":1,\"b\":2,\"c\":[3,4,5]}'\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Heatmap Metadata in Markdown Front Matter\nDESCRIPTION: Front matter section that defines metadata for a calendar heatmap visualization page. It includes the English title 'Calendar Heatmap', categories 'calendar' and 'heatmap', and a Chinese title '日历热力图'.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/calendar-heatmap.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Calendar Heatmap\ncategory: calendar, heatmap\ntitleCN: 日历热力图\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Handsontable Instance\nDESCRIPTION: HTML and JavaScript code to create a basic Handsontable instance with sample data and row/column headers.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n  [\"\", \"Ford\", \"Volvo\", \"Toyota\", \"Honda\"],\n  [\"2016\", 10, 11, 12, 13],\n  [\"2017\", 20, 11, 14, 13],\n  [\"2018\", 30, 15, 12, 13]\n];\n\nvar container = document.getElementById('example');\nvar hot = new Handsontable(container, {\n  data: data,\n  rowHeaders: true,\n  colHeaders: true\n});\n```\n\n----------------------------------------\n\nTITLE: Using Collection Operations with Immutable Maps\nDESCRIPTION: Shows how to use functional collection operations like map() on immutable data structures, similar to ES6 collections.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = Immutable.Map({a:1, b:2, c:3, d:4});\nalpha.map((v, k) => k.toUpperCase()).join();\n// 'A,B,C,D'\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable with Sample Data\nDESCRIPTION: JavaScript code to initialize Handsontable with sample data in a 2D array format, enabling row and column headers for a basic spreadsheet configuration.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n  [\"\", \"Ford\", \"Volvo\", \"Toyota\", \"Honda\"],\n  [\"2016\", 10, 11, 12, 13],\n  [\"2017\", 20, 11, 14, 13],\n  [\"2018\", 30, 15, 12, 13]\n];\n\nvar container = document.getElementById('example');\nvar hot = new Handsontable(container, {\n  data: data,\n  rowHeaders: true,\n  colHeaders: true\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Scatter Data and Calculating Exponential Regression in JavaScript\nDESCRIPTION: This snippet generates random scatter data points and calculates the exponential regression line. It uses the least squares method to fit an exponential curve to the data.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-exponential-regression.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction generateData() {\n    let data = [];\n    for (let i = 0; i < 100; i++) {\n        let x = (Math.random() * 10).toFixed(2) - 0;\n        let y = (Math.exp(0.5 * x) + (Math.random() * 2).toFixed(2) - 1).toFixed(2) - 0;\n        data.push([x, y]);\n    }\n    return data;\n}\n\nlet data = generateData();\n\nfunction exponentialRegression(data) {\n    let sumX = 0;\n    let sumY = 0;\n    let sumXY = 0;\n    let sumXX = 0;\n    let n = data.length;\n\n    for (let i = 0; i < n; i++) {\n        let x = data[i][0];\n        let y = Math.log(data[i][1]);\n        sumX += x;\n        sumY += y;\n        sumXY += x * y;\n        sumXX += x * x;\n    }\n\n    let b = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    let a = Math.exp((sumY - b * sumX) / n);\n\n    return [a, b];\n}\n\nlet [a, b] = exponentialRegression(data);\n\nfunction exponentialRegressionLine(a, b, data) {\n    return data.map(function(item) {\n        return [item[0], a * Math.exp(b * item[0])];\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gauge Component Metadata in YAML for Apache ECharts\nDESCRIPTION: This YAML snippet defines the metadata for the Gauge component documentation in Apache ECharts. It specifies the title in English and Chinese, as well as the category for organization purposes.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/gauge.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Gauge\ncategory: gauge\ntitleCN: Gauge\n---\n```\n\n----------------------------------------\n\nTITLE: Using Seq for Lazy Evaluation on JavaScript Objects\nDESCRIPTION: Shows how to use Immutable.Seq for efficient, lazy operations on regular JavaScript objects without creating intermediate collections.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar myObject = {a:1,b:2,c:3};\nImmutable.Seq(myObject).map(x => x * x).toObject();\n// { a: 1, b: 4, c: 9 }\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Sequences in Immutable.js with Various Operations\nDESCRIPTION: Shows examples of converting Maps to Sequences, chaining operations efficiently, and working with infinite ranges demonstrating the power of lazy evaluation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar seq = Immutable.Map({a:1, b:1, c:1}).toSeq();\n\nseq.flip().map(key => key.toUpperCase()).flip().toObject();\n// Map { A: 1, B: 1, C: 1 }\n\nImmutable.Range(1, Infinity)\n  .skip(1000)\n  .map(n => -n)\n  .filter(n => n % 2 === 0)\n  .take(2)\n  .reduce((r, n) => r * n, 1);\n// 1006008\n```\n\n----------------------------------------\n\nTITLE: Defining ThemeRiver Chart Metadata in YAML\nDESCRIPTION: This YAML front matter defines the metadata for a ThemeRiver chart visualization in ECharts. It specifies the English title 'ThemeRiver', category 'themeRiver', and Chinese title '主题河流图' which will be used for documentation and navigation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/themeRiver-basic.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: ThemeRiver\ncategory: themeRiver\ntitleCN: 主题河流图\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable with Sample Data\nDESCRIPTION: JavaScript code that initializes a basic Handsontable instance with sample data and enables row and column headers.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n  [\"\", \"Ford\", \"Volvo\", \"Toyota\", \"Honda\"],\n  [\"2016\", 10, 11, 12, 13],\n  [\"2017\", 20, 11, 14, 13],\n  [\"2018\", 30, 15, 12, 13]\n];\n\nvar container = document.getElementById('example');\nvar hot = new Handsontable(container, {\n  data: data,\n  rowHeaders: true,\n  colHeaders: true\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Immutable Collections to JavaScript Objects\nDESCRIPTION: Demonstrates various methods to convert Immutable collections back to plain JavaScript objects and arrays, including shallow and deep conversions.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar deep = Immutable.Map({ a: 1, b: 2, c: Immutable.List.of(3, 4, 5) });\ndeep.toObject() // { a: 1, b: 2, c: List [ 3, 4, 5 ] }\ndeep.toArray() // [ 1, 2, List [ 3, 4, 5 ] ]\ndeep.toJS() // { a: 1, b: 2, c: [ 3, 4, 5 ] }\nJSON.stringify(deep) // '{\"a\":1,\"b\":2,\"c\":[3,4,5]}'\n```\n\n----------------------------------------\n\nTITLE: Regression Data Format Example in JavaScript\nDESCRIPTION: Example of the data format used for regression, showing a two-dimensional numeric array where each element has an X and Y value.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n    [1, 2],\n    [3, 5],\n    ...\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Sunburst Chart with Rotated Labels in ECharts\nDESCRIPTION: This code snippet demonstrates how to create a sunburst chart with rotated labels using ECharts. It includes data generation, chart options configuration, and label rotation settings.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/sunburst-label-rotate.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  silent: true,\n  series: {\n    radius: ['15%', '80%'],\n    type: 'sunburst',\n    sort: undefined,\n    emphasis: {\n      focus: 'ancestor'\n    },\n    data: [{\n      value: 8,\n      children: [{\n        value: 4,\n        children: [{\n          value: 2\n        }, {\n          value: 1\n        }, {\n          value: 1\n        }]\n      }, {\n        value: 2\n      }]\n    }, {\n      value: 4,\n      children: [{\n        children: [{\n          value: 2\n        }]\n      }]\n    }, {\n      value: 4,\n      children: [{\n        children: [{\n          value: 2\n        }]\n      }]\n    }, {\n      value: 3,\n      children: [{\n        children: [{\n          value: 1\n        }]\n      }]\n    }],\n    label: {\n      color: '#000',\n      textBorderColor: '#fff',\n      textBorderWidth: 2,\n      formatter: function (param) {\n        var depth = param.treePathInfo.length;\n        if (depth === 2) {\n          return 'radial';\n        } else if (depth === 3) {\n          return 'tangential';\n        } else if (depth === 4) {\n          return '1f';\n        }\n        return '';\n      }\n    },\n    levels: [{\n      // Inner\n    }, {\n      r0: '15%',\n      r: '35%',\n      label: {\n        rotate: 'radial'\n      }\n    }, {\n      r0: '35%',\n      r: '70%',\n      label: {\n        rotate: 'tangential'\n      }\n    }, {\n      r0: '70%',\n      r: '72%',\n      label: {\n        position: 'outside',\n        padding: 3,\n        silent: false\n      }\n    }]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for ECharts Gantt Chart Example\nDESCRIPTION: This code snippet defines the metadata for an ECharts example that creates a Gantt chart for visualizing airport flight schedules. It specifies the title, categories, and Chinese title for the chart.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/custom-gantt-flight.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Gantt Chart of Airport Flights\ncategory: custom, dataZoom, drag\ntitleCN: 机场航班甘特图\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Immutable Structures\nDESCRIPTION: Shows how to create nested immutable data structures using fromJS() method with complex objects.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar nested = Immutable.fromJS({a:{b:{c:[3,4,5]}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } }\n```\n\n----------------------------------------\n\nTITLE: Batching Mutations with withMutations in Immutable.js\nDESCRIPTION: Shows how to use withMutations to apply multiple changes to an immutable collection in a performance-optimized way, creating only one new immutable instance instead of multiple intermediate ones.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar list1 = Immutable.List.of(1,2,3);\nvar list2 = list1.withMutations(function (list) {\n  list.push(4).push(5).push(6);\n});\nassert(list1.size === 3);\nassert(list2.size === 6);\n```\n\n----------------------------------------\n\nTITLE: Front Matter Configuration for Stacked Bar3D in ECharts\nDESCRIPTION: YAML front matter that defines the configuration for a Stacked Bar3D chart documentation page in ECharts. It specifies the title in English and Chinese, the category, and includes external scripts for simplex noise and ECharts GL functionality.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/stacked-bar3d.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Stacked Bar3D\ncategory: bar3D\ntitleCN: Stacked Bar3D\nscripts: https://rawgit.com/jwagner/simplex-noise.js/master/simplex-noise.js,http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js\n---\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Immutable Structures\nDESCRIPTION: Demonstrates merging nested immutable structures using mergeDeep() method.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar nested2 = nested.mergeDeep({a:{b:{d:6}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for ECharts GPS Visualization Example\nDESCRIPTION: This YAML frontmatter defines metadata for an ECharts example that visualizes 10 million GPS points. It specifies the title in English and Chinese, and categorizes the example under scatterGL.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/scatterGL-gps.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 10 million Bulk GPS points\ntitleCN: 1 千万 GPS 点可视化\ncategory: scatterGL\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering 3D Mollusc Shell Surface with ECharts GL in JavaScript\nDESCRIPTION: This code snippet sets up an ECharts GL configuration to render a 3D parametric surface resembling a mollusc shell. It defines the equations for the shell's shape, sets up the coordinate system, and configures the surface series with custom shading and lighting effects.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/surface-mollusc-shell.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noption = {\n    toolbox: {\n        feature: {\n            saveAsImage: {}\n        }\n    },\n    tooltip: {},\n    backgroundColor: '#fff',\n    visualMap: {\n        show: false,\n        dimension: 2,\n        min: -1,\n        max: 1,\n        inRange: {\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n        }\n    },\n    xAxis3D: {\n        type: 'value'\n    },\n    yAxis3D: {\n        type: 'value'\n    },\n    zAxis3D: {\n        type: 'value'\n    },\n    grid3D: {\n        viewControl: {\n            // projection: 'orthographic'\n        }\n    },\n    series: [{\n        type: 'surface',\n        parametric: true,\n        // shading: 'albedo',\n        wireframe: {\n            show: false\n        },\n        equation: {\n            u: {\n                min: -13.2,\n                max: 10,\n                step: 0.2\n            },\n            v: {\n                min: -Math.PI,\n                max: Math.PI,\n                step: Math.PI / 20\n            },\n            x: function (u, v) {\n                return Math.cos(v) * (1.2 ** u - 1);\n            },\n            y: function (u, v) {\n                return Math.sin(v) * (1.2 ** u - 1);\n            },\n            z: function (u, v) {\n                return 1.2 ** u;\n            }\n        }\n    }]\n};\n```\n\n----------------------------------------\n\nTITLE: Using ecStat Clustering Transform in ECharts\nDESCRIPTION: ECharts option configuration using ecStat clustering transform.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setOption({\n    dataset: [{\n        source: data\n    }, {\n        type: 'ecStat:clustering',\n        config: config\n    }],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Immutable Structures in JavaScript\nDESCRIPTION: Shows how to create nested immutable structures using Immutable.js, including the use of fromJS and mergeDeep methods.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar nested = Immutable.fromJS({a:{b:{c:[3,4,5]}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } }\n\nvar nested2 = nested.mergeDeep({a:{b:{d:6}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }\n```\n\n----------------------------------------\n\nTITLE: Defining Hexagonal Binning Documentation Metadata\nDESCRIPTION: YAML frontmatter block defining the documentation page metadata including title, category and Chinese title for hexagonal binning visualization.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/custom-hexbin.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hexagonal Binning\ncategory: custom, map\ntitleCN: Hexagonal Binning\n---\n```\n\n----------------------------------------\n\nTITLE: ECharts Transform Implementation of Clustering\nDESCRIPTION: Example showing how to implement clustering as an ECharts transform (available since ECharts 5.0), with configuration parameters for cluster count and output dimensions.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndataset: [{\n    source: [ ... ],\n}, {\n    transform: 'ecStat:clustering',\n    config: {\n        clusterCount: 6,\n        outputClusterIndexDimension: 5,\n        outputCentroidDimensions: [6, 7]\n    }\n    // The result data of this dataset will be:\n    // [\n    //    // dim2, dim3 are used in clustering.\n    //    // All of the input data are kept in the output.\n    //    // dim5 is the output cluster index.\n    //    // dim6 is the output distance value.\n    //    // dimensions:\n    //    // 0    1      2    3       4       5   6   7\n    //    [ 232,  4.21,  51,  0.323,  'xxx',  0,  14, 0.145 ],\n    //    [ 321,  1.62,  18,  0.139,  'xzx',  2,  24, 0.321 ],\n    //    [ 551,  11.21, 13,  0.641,  'yzy',  0,  14, 0.145 ],\n    //    ...\n    // ]\n}, {\n    fromDatasetIndex: 1,\n    fromTransformResult: 1\n    // The result data of this dataset will be:\n    // centroids: [\n    //     // center of cluster0\n    //     [14, 0.145],\n    //     // center of cluster1\n    //     [24, 0.321],\n    //     ...\n    // ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Using Histogram Function Standalone\nDESCRIPTION: Examples of using the histogram function directly without ECharts transformation, showing different ways to call the function.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar bins = ecStat.histogram(data, config);\n// or\nvar bins = ecStat.histogram(data, method);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Nested Immutable Structures in JavaScript\nDESCRIPTION: Demonstrates how to access and update nested immutable structures using getIn, updateIn, and other methods from Immutable.js.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nnested2.getIn(['a', 'b', 'd']); // 6\n\nvar nested3 = nested2.updateIn(['a', 'b', 'd'], value => value + 1);\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }\n\nvar nested4 = nested3.updateIn(['a', 'b', 'c'], list => list.push(6));\n// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Immutable.js Maps\nDESCRIPTION: Demonstrates the basic usage of Immutable.js Maps, showing how to create an immutable map, set values, and retrieve values while maintaining immutability.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Immutable = require('immutable');\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n----------------------------------------\n\nTITLE: Creating Disk Usage Treemap Visualization with ECharts in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a treemap visualization for disk usage using ECharts. It includes data preparation, chart configuration options, and rendering the chart to a DOM element.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/treemap-disk.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$.get('data/disk.tree.json', function (diskData) {\n    var formatUtil = echarts.format;\n\n    function getLevelOption() {\n        return [\n            {\n                itemStyle: {\n                    borderWidth: 0,\n                    gapWidth: 5\n                }\n            },\n            {\n                itemStyle: {\n                    gapWidth: 1\n                }\n            },\n            {\n                colorSaturation: [0.35, 0.5],\n                itemStyle: {\n                    gapWidth: 1,\n                    borderColorSaturation: 0.6\n                }\n            }\n        ];\n    }\n\n    myChart.setOption(option = {\n        title: {\n            text: 'Disk Usage',\n            left: 'center'\n        },\n\n        tooltip: {\n            formatter: function (info) {\n                var value = info.value;\n                var treePathInfo = info.treePathInfo;\n                var treePath = [];\n\n                for (var i = 1; i < treePathInfo.length; i++) {\n                    treePath.push(treePathInfo[i].name);\n                }\n\n                return [\n                    '<div class=\"tooltip-title\">' + formatUtil.encodeHTML(treePath.join('/')) + '</div>',\n                    'Disk Usage: ' + formatUtil.addCommas(value) + ' KB',\n                ].join('');\n            }\n        },\n\n        series: [\n            {\n                name: 'Disk Usage',\n                type: 'treemap',\n                visibleMin: 300,\n                label: {\n                    show: true,\n                    formatter: '{b}'\n                },\n                upperLabel: {\n                    show: true,\n                    height: 30\n                },\n                itemStyle: {\n                    borderColor: '#fff'\n                },\n                levels: getLevelOption(),\n                data: diskData\n            }\n        ]\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for ECharts World Population Map Example\nDESCRIPTION: YAML frontmatter that specifies the title, category, and Chinese title (titleCN) for an ECharts map visualization example. This metadata is used to categorize and identify the visualization in the ECharts documentation or gallery.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/map-world-dataRange.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: World Population (2010)\ncategory: map\ntitleCN: World Population (2010)\n---\n```\n\n----------------------------------------\n\nTITLE: Comparing Immutable Structures in JavaScript\nDESCRIPTION: Shows how to compare immutable structures using Immutable.is() and the equals() method, demonstrating value equality vs reference equality.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:1, c:1});\nvar map2 = Immutable.Map({a:1, b:1, c:1});\nassert(map1 !== map2); // two different instances\nassert(Immutable.is(map1, map2)); // have equivalent values\nassert(map1.equals(map2)); // alternatively use the equals method\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Boxplot Chart\nDESCRIPTION: YAML frontmatter metadata defining a boxplot chart example with both English and Chinese titles.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/boxplot-light-velocity2.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Boxplot Light Velocity2\ncategory: boxplot\ntitleCN: Boxplot Light Velocity2\n---\n```\n\n----------------------------------------\n\nTITLE: Using jQuery Mouse Wheel Plugin with Event Binding\nDESCRIPTION: Examples demonstrating two methods of binding the mousewheel event using jQuery. The first example uses the .on() method, while the second uses the plugin's helper method. Both log the normalized delta values and deltaFactor to the console.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// using on\n$('#my_elem').on('mousewheel', function(event) {\n    console.log(event.deltaX, event.deltaY, event.deltaFactor);\n});\n\n// using the event helper\n$('#my_elem').mousewheel(function(event) {\n    console.log(event.deltaX, event.deltaY, event.deltaFactor);\n});\n```\n\n----------------------------------------\n\nTITLE: Map and Join Operations on Immutable Collections\nDESCRIPTION: Shows how to use collection operations like map() and join() on Immutable.js data structures.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = Immutable.Map({a:1, b:2, c:3, d:4});\nalpha.map((v, k) => k.toUpperCase()).join();\n// 'A,B,C,D'\n```\n\n----------------------------------------\n\nTITLE: Configuring ECharts flowGL Example Metadata\nDESCRIPTION: YAML frontmatter configuration for an ECharts flowGL example page, specifying the title, category, Chinese title translation, and theme settings.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/flowGL-noise.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Flow on the cartesian\ncategory: flowGL\ntitleCN: 直角坐标系上的向量场\ntheme: dark\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing ECharts Instance and Setting Options for Wish List Chart\nDESCRIPTION: This snippet initializes an ECharts instance and sets up the configuration for a pictorial bar chart representing a Christmas wish list. It defines the chart dimensions, legend, tooltip, and grid layout.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pictorialBar-hill.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'shadow'\n    }\n  },\n  legend: {\n    data: ['Wish', 'Actual']\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: {\n    type: 'value',\n    boundaryGap: [0, 0.01]\n  },\n  yAxis: {\n    type: 'category',\n    data: ['Bicycle', 'Clothes', 'Book', 'Pencil']\n  },\n  series: [\n    {\n      name: 'Wish',\n      type: 'pictorialBar',\n      symbol: 'rect',\n      symbolRepeat: true,\n      symbolSize: [20, 5],\n      symbolMargin: 2,\n      itemStyle: {\n        normal: {\n          barBorderRadius: 5,\n          color: '#ddb926'\n        }\n      },\n      data: [80, 40, 46, 55]\n    },\n    {\n      name: 'Actual',\n      type: 'pictorialBar',\n      symbol: 'rect',\n      symbolRepeat: true,\n      symbolSize: [20, 5],\n      symbolMargin: 2,\n      itemStyle: {\n        normal: {\n          barBorderRadius: 5,\n          color: '#fd666d'\n        }\n      },\n      data: [77, 39, 42, 50]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: ECharts Visualization Metadata in YAML\nDESCRIPTION: Metadata configuration for an ECharts Globe visualization example that uses 3D bars to represent global population. Includes title, category, and required JavaScript dependencies.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/global-population-bar3d-on-globe.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Global Population - Bar3D on Globe\ncategory: bar3D\ntitleCN: Global Population - Bar3D on Globe\nscripts: http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Immutable.js with Node.js\nDESCRIPTION: Demonstrates the basic usage of Immutable.js in a Node.js environment, showing how to create an immutable Map and how modifications return new instances.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Immutable = require('immutable');\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n----------------------------------------\n\nTITLE: Setting Up Weibo Checkin Visualization with Mapbox and ECharts GL\nDESCRIPTION: This markdown front matter defines the configuration for a visualization that displays Weibo checkin data on a Mapbox map. It loads necessary scripts including ECharts GL, Mapbox GL JS, and a token file for Mapbox API access.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/scatter3d-weibo-checkin-on-mapbox.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Weibo checkin on Mapbox\ncategory: scatter3D\ntitleCN: Weibo checkin on Mapbox\nscripts: http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js,https://api.mapbox.com/mapbox-gl-js/v0.38.0/mapbox-gl.js,http://echarts.baidu.com/resource/echarts-gl-latest/mapboxgl-token.js\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Modularity in ECharts Options\nDESCRIPTION: Shows how to configure the graph modularity extension within an ECharts option object. The example demonstrates both simple boolean activation and advanced configuration with resolution and sorting parameters for community detection.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-graph-modularity/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsetOption({\n\n    ...\n\n    series: [{\n        type: 'graph',\n        layout: 'force',\n        // Set modularity property true and extension will automatically detect different communities\n        // and assign each different color.\n        modularity: true\n\n        // Specify resolution. Higher resolution will produce less communities\n        modularity: {\n            resolution: 5,\n            // If sort the communities\n            sort: false\n        }\n\n        ...\n    }]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Immutable Structures with fromJS in JavaScript\nDESCRIPTION: Shows how to create nested immutable data structures using the fromJS method, which converts a JavaScript object with nested arrays and objects into immutable Maps and Lists.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar nested = Immutable.fromJS({a:{b:{c:[3,4,5]}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } }\n```\n\n----------------------------------------\n\nTITLE: Basic Immutable.js Usage in Node.js\nDESCRIPTION: Demonstrates how to require the Immutable.js library in a Node.js application and create immutable maps with basic operations.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Immutable = require('immutable');\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for ThemeRiver Example\nDESCRIPTION: YAML frontmatter configuration defining the title, category and Chinese title for a ThemeRiver LastFM visualization example page.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/themeRiver-lastfm.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: ThemeRiver Lastfm\ncategory: themeRiver\ntitleCN: ThemeRiver Lastfm\n---\n```\n\n----------------------------------------\n\nTITLE: Standalone Regression Result Format in JavaScript\nDESCRIPTION: Example of the regression result object when using the standalone mode, showing points, parameters, and the generated mathematical expression.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmyRegression.points = [\n    // ValueOnX, ValueOnY\n    [  23,       51      ],\n    [  24,       62      ],\n    ...\n];\n// The rest of the input dimensions that other than\n// config.dimensions specified are kept in the output.\n\n// This is the parameter of linear regression,\n// for other types, it should be a little different\nmyRegression.parameter = {\n    gradient: 1.695,\n    intercept: 3.008\n};\n\nmyRegression.expression = 'y = 1.7x + 3.01';\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for ECharts Globe Population Visualization\nDESCRIPTION: YAML front matter that configures the page metadata for a 3D scatter visualization of global population. It specifies the title, category, and includes the echarts-gl extension script necessary for 3D visualizations.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/scatter3d-globe-population.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Scatter3D - Globe Population\ncategory: scatter3D\ntitleCN: Scatter3D - Globe Population\nscripts: http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js\n---\n```\n\n----------------------------------------\n\nTITLE: Immutable Collections with JavaScript-like API\nDESCRIPTION: Demonstrates how Immutable.js provides collections with APIs similar to ES6 Array, Map and Set, but with immutable semantics that return new collections instead of modifying in place.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar list1 = Immutable.List.of(1, 2);\nvar list2 = list1.push(3, 4, 5);\nvar list3 = list2.unshift(0);\nvar list4 = list1.concat(list2, list3);\nassert(list1.size === 2);\nassert(list2.size === 5);\nassert(list3.size === 6);\nassert(list4.size === 13);\nassert(list4.get(0) === 1);\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for ECharts Documentation\nDESCRIPTION: YAML frontmatter block that defines metadata for an ECharts documentation page about treemap parent labels. Includes title, category, and Chinese title properties.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/treemap-show-parent.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Show Parent Labels\ncategory: treemap\ntitleCN: Show Parent Labels\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Lazy Sequences with Immutable.Seq in JavaScript\nDESCRIPTION: Demonstrates creating a lazy sequence with filter and map operations that doesn't perform any work until the result is actually used, showing the laziness property of Seq.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8)\n  .filter(x => x % 2).map(x => x * x);\n```\n\n----------------------------------------\n\nTITLE: Browser Integration with Script Tag\nDESCRIPTION: Shows how to include and use Immutable.js in a browser environment using a script tag\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"immutable.min.js\"></script>\n<script>\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n</script>\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Tree Chart Documentation\nDESCRIPTION: YAML frontmatter configuration defining the page title, category and Chinese language title for a tree chart documentation page.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/tree-vertical.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: From Top to Bottom Tree\ncategory: tree\ntitleCN: 从上到下树状图\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Scatter Plot on Single Axis in ECharts\nDESCRIPTION: Configuration for creating a scatter plot on a single horizontal axis in ECharts. It sets up a dataset with random values, configures a single horizontal axis, and creates scatter symbols with varying sizes based on data values.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-single-axis.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noption = {\n  title: {\n    text: 'Scatter on Single Axis',\n    left: 'center'\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'shadow'\n    }\n  },\n  singleAxis: {\n    top: 50,\n    bottom: 50,\n    axisTick: {},\n    axisLabel: {},\n    type: 'value',\n    axisPointer: {\n      animation: true,\n      label: {\n        show: true\n      }\n    },\n    splitLine: {\n      show: true,\n      lineStyle: {\n        type: 'dashed',\n        opacity: 0.2\n      }\n    }\n  },\n  series: [\n    {\n      type: 'scatter',\n      data: [\n        [12, 5],\n        [34, 8],\n        [56, 3],\n        [10, 3],\n        [23, 1],\n        [78, 6],\n        [39, 5],\n        [64, 2],\n        [80, 8],\n        [27, 4],\n        [55, 1],\n        [51, 3],\n        [91, 2],\n        [81, 7],\n        [19, 2],\n        [35, 1],\n        [85, 5],\n        [32, 2],\n        [9, 5],\n        [37, 6],\n        [65, 8],\n        [69, 4],\n        [28, 2],\n        [43, 3],\n        [41, 4],\n        [58, 2],\n        [74, 5],\n        [22, 9],\n        [48, 5],\n        [57, 2],\n        [24, 7],\n        [38, 2],\n        [25, 1],\n        [17, 6],\n        [30, 6],\n        [87, 4],\n        [99, 8],\n        [40, 1],\n        [94, 4],\n        [44, 3],\n        [29, 5],\n        [18, 5],\n        [77, 6],\n        [57, 6],\n        [65, 7],\n        [90, 2],\n        [42, 8],\n        [31, 5],\n        [19, 5],\n        [59, 6]\n      ],\n      symbolSize: function (dataItem) {\n        return dataItem[1] * 4;\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Using ecStat Clustering Standalone\nDESCRIPTION: JavaScript code showing standalone usage of ecStat clustering function.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = ecStat.clustering.hierarchicalKMeans(data, config);\n// or\nvar result = ecStat.clustering.hierarchicalKMeans(data, clusterCount, stepByStep);\n```\n\n----------------------------------------\n\nTITLE: Immutable Value Equality Example\nDESCRIPTION: Shows how to properly compare immutable collections using equals() method\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 2);\nassert(map1.equals(map2) === true);\nvar map3 = map1.set('b', 50);\nassert(map1.equals(map3) === false);\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Sankey Chart\nDESCRIPTION: YAML front matter configuration that defines metadata for a basic Sankey chart example, including title and category information.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/sankey-simple.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Basic Sankey\ncategory: sankey\ntitleCN: Basic Sankey\n---\n```\n\n----------------------------------------\n\nTITLE: Standalone Usage of Regression in JavaScript\nDESCRIPTION: Examples of how to use regression functions in standalone mode, showing both general regression and polynomial regression with order parameter.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar myRegression = ecStat.regression(regressionType, data, opt);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myRegression = ecStat.regression('polynomial', data, order);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Immutable List Operations\nDESCRIPTION: Shows how operations on Immutable Lists create new collections rather than modifying existing ones, with methods like push, unshift, and concat.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar list1 = Immutable.List.of(1, 2);\nvar list2 = list1.push(3, 4, 5);\nvar list3 = list2.unshift(0);\nvar list4 = list1.concat(list2, list3);\nassert(list1.size === 2);\nassert(list2.size === 5);\nassert(list3.size === 6);\nassert(list4.size === 13);\nassert(list4.get(0) === 1);\n```\n\n----------------------------------------\n\nTITLE: Immutable List Operations\nDESCRIPTION: Demonstrates common operations with Immutable.js Lists, including push, unshift, and concat which return new immutable collections instead of modifying the original.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar list1 = Immutable.List.of(1, 2);\nvar list2 = list1.push(3, 4, 5);\nvar list3 = list2.unshift(0);\nvar list4 = list1.concat(list2, list3);\nassert(list1.size === 2);\nassert(list2.size === 5);\nassert(list3.size === 6);\nassert(list4.size === 13);\nassert(list4.get(0) === 1);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Nested Immutable Structures\nDESCRIPTION: Demonstrates how to use getIn, updateIn methods to access and modify deeply nested values in immutable data structures without mutating the original structure.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnested2.getIn(['a', 'b', 'd']); // 6\n\nvar nested3 = nested2.updateIn(['a', 'b', 'd'], value => value + 1);\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }\n\nvar nested4 = nested3.updateIn(['a', 'b', 'c'], list => list.push(6));\n// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Chart Metadata in YAML\nDESCRIPTION: This YAML snippet defines metadata for the calendar charts documentation page. It specifies the title, category, and Chinese title for the page.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/calendar-charts.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Calendar Charts\ncategory: calendar, scatter\ntitleCN: 日力图\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Aggregate Transform in Apache ECharts\nDESCRIPTION: Demonstrates how to register and use the aggregate transform to perform operations like sum, count, and statistical calculations on datasets. The transform groups data by a specified dimension and applies various aggregation methods to other dimensions.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-simple-transform/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\necharts.registerTransform(ecSimpleTransform.aggregate);\n\nconst option = {\n    dataset: [{\n        source: [\n            ['aa', 'bb', 'cc', 'tag'],\n            [12, 0.33, 5200, 'AA'],\n            [21, 0.65, 7100, 'AA'],\n            [51, 0.15, 1100, 'BB'],\n            [71, 0.75, 9100, 'BB'],\n            ...\n        ]\n    }, {\n        transform: {\n            type: 'ecSimpleTransform:aggregate',\n            config: {\n                resultDimensions: [\n                    // by default, use the same name with `from`.\n                    { from: 'aa', method: 'sum' },\n                    { from: 'bb', method: 'count' },\n                    { from: 'cc' }, // method by default: use the first value.\n                    { from: 'dd', method: 'Q1' },\n                    { from: 'tag' }\n                ],\n                groupBy: 'tag'\n            }\n        }\n        // Then the result data will be:\n        // [\n        //     ['aa', 'bb', 'cc', 'tag'],\n        //     [12, 0.33, 5200, 'AA'],\n        //     [21, 0.65, 8100, 'BB'],\n        //     ...\n        // ]\n    }],\n    // ...\n};\n\nconst myChart = echarts.init(dom);\nmyChart.setOption(option);\n```\n\n----------------------------------------\n\nTITLE: Configuring ECharts Example Metadata in YAML\nDESCRIPTION: YAML front matter defining metadata for an ECharts example. It specifies the title, category, and required external scripts for a global wind visualization using flowGL and Baidu Maps integration.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/global-wind-visualization-2.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Global Wind Visualization 2\ncategory: flowGL\ntitleCN: Global Wind Visualization 2\nscripts: https://api.map.baidu.com/api?v=2.0&ak=KOmVjPVUAey1G2E8zNhPiuQ6QiEmAwZu,http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js&__ec_v__=20190126,/dep/echarts/latest/extension/bmap.min.js\n---\n```\n\n----------------------------------------\n\nTITLE: Batching Mutations with withMutations for Performance\nDESCRIPTION: Demonstrates how to use withMutations to apply multiple changes to an immutable structure in a single operation for better performance, creating only one new immutable instance.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar list1 = Immutable.List.of(1,2,3);\nvar list2 = list1.withMutations(function (list) {\n  list.push(4).push(5).push(6);\n});\nassert(list1.size === 3);\nassert(list2.size === 6);\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Cycle Plot Documentation\nDESCRIPTION: YAML frontmatter metadata defining the title, category and Chinese title for the Cycle Plot documentation page.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/cycle-plot.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Cycle Plot\ncategory: custom\ntitleCN: Cycle Plot\n---\n```\n\n----------------------------------------\n\nTITLE: Importing ECharts-GL Script in HTML\nDESCRIPTION: This snippet shows how to include the ECharts-GL library in an HTML file using a CDN link. This is a prerequisite for using ECharts-GL functionality in the webpage.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/globe-echarts-gl-hello-world.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/gh/ecomfe/echarts-gl/dist/echarts-gl.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Collection Operations on Immutable Map\nDESCRIPTION: Demonstrates collection operations like map() on Immutable.Map, similar to ES6 Array operations.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = Immutable.Map({a:1, b:2, c:3, d:4});\nalpha.map((v, k) => k.toUpperCase()).join();\n// 'A,B,C,D'\n```\n\n----------------------------------------\n\nTITLE: Including Immutable.js in Browser via Script Tag\nDESCRIPTION: Shows how to include the Immutable.js library in a browser application using a script tag and demonstrates basic usage.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"immutable.min.js\"></script>\n<script>\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n</script>\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for ECharts Documentation\nDESCRIPTION: Metadata configuration for an ECharts documentation page about basic parallel coordinates visualization. Defines the title in both English and Chinese along with the category.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/parallel-simple.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Basic Parallel\ncategory: parallel\ntitleCN: Basic Parallel\n---\n```\n\n----------------------------------------\n\nTITLE: Registering Regression Transform with ECharts\nDESCRIPTION: Demonstrates how to register the regression transform function with ECharts. This enables the use of statistical regression analysis within ECharts visualizations starting from version 5.0.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\necharts.registerTransform(ecStat.transform.regression);\n```\n\n----------------------------------------\n\nTITLE: Loading ecStat via Script Tag\nDESCRIPTION: Example of loading ecStat via a script tag in HTML and performing a hierarchical k-means clustering operation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src='./dist/ecStat.js'></script>\n<script>\n\nvar result = ecStat.clustering.hierarchicalKMeans(data, clusterNumber, false);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: ES6 vs ES3 Arrow Function Example in JavaScript\nDESCRIPTION: Demonstrates the difference between ES6 arrow functions and ES3 function syntax. The example shows how the modern syntax gets transpiled to support all browsers.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// ES6\nfoo.map(x => x * x);\n// ES3\nfoo.map(function (x) { return x * x; });\n```\n\n----------------------------------------\n\nTITLE: Enabling Profile Feature in ECharts\nDESCRIPTION: Shows how to enable the profile feature in ECharts by setting useDirtyRect to true in the initialization config to analyze rendering performance.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/custom-profile.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chart = echarts.init(dom, null, {\n    useDirtyRect: true,\n    profile: true\n});\n```\n\n----------------------------------------\n\nTITLE: Standalone Clustering Result Format in JavaScript\nDESCRIPTION: Demonstrates the output format when using the clustering function standalone, including cluster assignments and centroids.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nresult = {\n    data: [\n        // dim2, dim3 are used in clustering.\n        // All of the input data are kept in the output.\n        // dim5 is the output cluster index.\n        // dim6 is the output distance value.\n        // dimensions:\n        // 0    1      2    3      4      5  6\n        [ 232,  4.21,  51,  0.323, 'xxx', 0, 89 ],\n        [ 321,  1.62,  18,  0.139, 'xzx', 2, 23 ],\n        [ 551,  11.21, 13,  0.641, 'yzy', 0, ?? ],\n        ...\n    ],\n    centroids: [\n        // center of cluster0\n        [14, 0.145],\n        // center of cluster1\n        [24, 0.321],\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Graph Modularity Extension in JavaScript\nDESCRIPTION: This code shows how to import ECharts and the graph modularity extension in a JavaScript module. It's typically used in modern JavaScript applications that use ES6 modules.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-graph-modularity/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as echarts from 'echarts';\nimport 'echarts-graph-modularity';\n```\n\n----------------------------------------\n\nTITLE: Including Geo3D Dependencies in JavaScript\nDESCRIPTION: This snippet shows the script tags required to include the ECharts GL library and the world map data for using the Geo3D component.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/geo3d.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js\"></script>\n<script src=\"/dep/echarts/map/js/world.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Regression Transform in ECharts\nDESCRIPTION: Shows how to set up a regression transform in ECharts options. This configuration creates a derived dataset that contains regression analysis results based on the source data.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setOption({\n    dataset: [{\n        source: data\n    }, {\n        type: 'ecStat:regression',\n        config: {\n            method: regressionType,\n            ...opt\n        }\n    }],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Statistical Functions in JavaScript\nDESCRIPTION: Demonstrates usage of basic statistical functions like deviation calculation from the ecStat library.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar sampleDeviation = ecStat.statistics.deviation(dataList);\n```\n\n----------------------------------------\n\nTITLE: Comparing ES6 and ES3 syntax with Arrow Functions in JavaScript\nDESCRIPTION: This example demonstrates the difference between ES6 arrow function syntax and the equivalent ES3 function syntax that would be generated through transpilation for browser compatibility.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// ES6\nfoo.map(x => x * x);\n// ES3\nfoo.map(function (x) { return x * x; });\n```\n\n----------------------------------------\n\nTITLE: Histogram Data Examples\nDESCRIPTION: Examples of one-dimensional and two-dimensional array formats that can be used as input data for the histogram function.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// One-dimension array\nvar data = [8.6, 8.8, 10.5, 10.7, 10.8, 11.0, ... ];\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Two-dimension array\nvar data = [[8.3, 143], [8.6, 214], ...];\n```\n\n----------------------------------------\n\nTITLE: Standalone Clustering with Multiple Output Type\nDESCRIPTION: Example of clustering result when using the standalone mode with 'multiple' output type, which organizes points by cluster and returns centroids.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nresult = {\n    pointsInCluster: [\n        // points in cluster0\n        [\n            [ 232,  4.21,  51,  0.323, 'xxx' ],\n            [ 551,  11.21, 13,  0.641, 'yzy' ],\n            ...\n        ],\n        // points in cluster1\n        [\n            [ 321,  1.62,  18,  0.139, 'xzx' ],\n            ...\n        ],\n        ...\n    ],\n    centroids: [\n        // center of cluster0\n        [14, 0.145],\n        // center of cluster1\n        [24, 0.321],\n        ...\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation Using ecStat\nDESCRIPTION: Demonstrates how to calculate the standard deviation of a numeric data sample using ecStat's statistics module. Returns 0 if the data list is empty or has less than 2 elements.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar sampleDeviation = ecStat.statistics.deviation(dataList);\n```\n\n----------------------------------------\n\nTITLE: Using Immutable.js with TypeScript\nDESCRIPTION: Shows how to use Immutable.js with TypeScript, utilizing type declarations for type safety and IDE support.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n///<reference path='./node_modules/immutable/dist/Immutable.d.ts'/>\nimport Immutable = require('immutable');\nvar map1: Immutable.Map<string, number>;\nmap1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n----------------------------------------\n\nTITLE: Installing ECharts-GL via NPM\nDESCRIPTION: Commands to install ECharts and ECharts-GL packages using npm package manager\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-gl/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install echarts\nnpm install echarts-gl\n```\n\n----------------------------------------\n\nTITLE: Using Regression Analysis Independently\nDESCRIPTION: Demonstrates how to use the regression analysis function independently from ECharts. This is useful for performing regression analysis without necessarily visualizing the results immediately.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myRegression = ecStat.regression(regressionType, data, opt);\n// or\nvar myRegression = ecStat.regression('polynomial', data, order);\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean in ECharts\nDESCRIPTION: Computes the arithmetic mean (average) of a numeric array.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar meanValue = ecStat.statistics.mean(dataList);\n```\n\n----------------------------------------\n\nTITLE: Referencing Immutable Objects\nDESCRIPTION: Shows how immutable objects can be efficiently copied by simply creating a new reference to them, rather than copying the entire data structure.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar clone = map1;\n```\n\n----------------------------------------\n\nTITLE: Computing Quantile in ECharts\nDESCRIPTION: Calculates the quantile value for a sorted numeric array at a given probability p (0-1). Returns special cases for p<=0 and p>=1.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar quantileValue = ecStat.statistics.quantile(dataList, p);\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum in ECharts\nDESCRIPTION: Computes the sum of all values in a numeric array.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar sumValue = ecStat.statistics.sum(dataList);\n```\n\n----------------------------------------\n\nTITLE: Installing Immutable.js via NPM\nDESCRIPTION: Commands to install the immutable.js library using npm package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install immutable\n```\n\n----------------------------------------\n\nTITLE: Using Histogram Transform in ECharts\nDESCRIPTION: Example of using ecStat histogram transform within ECharts chart configuration to process data.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setOption({\n    dataset: [{\n        source: data\n    }, {\n        type: 'ecStat:histogram',\n        config: config\n    }],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean Value Using ecStat\nDESCRIPTION: Shows how to calculate the arithmetic mean (average) of a numeric data sample using ecStat's statistics module.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar meanValue = ecStat.statistics.mean(dataList);\n```\n\n----------------------------------------\n\nTITLE: Including ECharts-GL via CDN Scripts\nDESCRIPTION: HTML script tags to include both ECharts and ECharts-GL libraries from CDN for direct use in web pages without a build step.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-gl/README.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/echarts-gl/dist/echarts-gl.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Computing Quantile with ecStat.statistics in JavaScript\nDESCRIPTION: This function computes the quantile of a sorted numeric array for a given probability p. It handles edge cases for p <= 0, p >= 1, and empty arrays.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar quantileValue = ecStat.statistics.quantile(dataList, p);\n```\n\n----------------------------------------\n\nTITLE: Installing ECharts-GL with npm\nDESCRIPTION: Commands for installing ECharts and ECharts-GL via npm package manager for use with webpack or other build systems.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-gl/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install echarts\nnpm install echarts-gl\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable with Bower\nDESCRIPTION: Command to install Handsontable using Bower package manager, saving it as a dependency in bower.json.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbower install handsontable --save\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable with Bower\nDESCRIPTION: Command to install Handsontable using Bower package manager, saving it as a dependency in bower.json.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbower install handsontable --save\n```\n\n----------------------------------------\n\nTITLE: Calculating Median in ECharts\nDESCRIPTION: Computes the median value of a sorted numeric array.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar medianValue = ecStat.statistics.median(dataList);\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value Using ecStat\nDESCRIPTION: Shows how to find the maximum value in a numeric data sample using ecStat's statistics module.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar maxValue = ecStat.statistics.max(dataList);\n```\n\n----------------------------------------\n\nTITLE: Importing Full ECharts-GL with ES Modules\nDESCRIPTION: JavaScript code to import the complete ECharts library and ECharts-GL extension using ES module syntax.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-gl/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\n```\n\n----------------------------------------\n\nTITLE: Implementing Legacy Merge Function\nDESCRIPTION: Shows implementation of backwards compatible merge API for legacy systems.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * 执行模板渲染，并将渲染后的字符串作为innerHTML填充到HTML元素中。\n * 兼容老版本的模板引擎api\n * \n * @param {HTMLElement} element 渲染字符串填充的HTML元素\n * @param {string} name target名称\n * @param {Object=} data 模板数据\n */\netpl.merge = function ( element, name, data ) {\n    if ( element ) {\n        element.innerHTML = this.render( name, data );\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Histogram Transform Result Example\nDESCRIPTION: Sample showing the structure of the result data from the histogram transform in ECharts.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndataset: [{\n    source: [...]\n}, {\n    transform: 'ecStat:histogram'\n    // // The result data of this dataset is like:\n    // [\n    //     // MeanOfV0V1, VCount, V0, V1, DisplayableName\n    //     [  10,         212           8,  12, '8 - 12'],\n    //     ...\n    // ]\n    // // The rest of the input dimensions that other than\n    // // config.dimensions specified are kept in the output.\n}]\n```\n\n----------------------------------------\n\nTITLE: Importing Complete ECharts-GL Package\nDESCRIPTION: JavaScript code to import the full ECharts library and ECharts-GL extension\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-gl/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Merge Function for ETPL\nDESCRIPTION: Provides a custom implementation of the 'merge' function for compatibility with older versions of the template engine.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * 执行模板渲染，并将渲染后的字符串作为innerHTML填充到HTML元素中。\n * 兼容老版本的模板引擎api\n * \n * @param {HTMLElement} element 渲染字符串填充的HTML元素\n * @param {string} name target名称\n * @param {Object=} data 模板数据\n */\netpl.merge = function ( element, name, data ) {\n    if ( element ) {\n        element.innerHTML = this.render( name, data );\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean with ecStat.statistics in JavaScript\nDESCRIPTION: This function calculates the arithmetic mean (average) of a numeric array using the ecStat.statistics module.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar meanValue = ecStat.statistics.mean(dataList);\n```\n\n----------------------------------------\n\nTITLE: Histogram Method Usage Examples\nDESCRIPTION: Examples showing how to call the histogram function with different binning methods to calculate the number of bins.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar bins = ecStat.histogram(data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bins = ecStat.histogram(data, 'scott');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bins = ecStat.histogram(data, 'freedmanDiaconis');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bins = ecStat.histogram(data, 'sturges');\n```\n\n----------------------------------------\n\nTITLE: Installing Graph Modularity Extension via CDN in HTML\nDESCRIPTION: This snippet shows how to include the ECharts library and the graph modularity extension using script tags in HTML. It's a quick way to add the functionality to a web page.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-graph-modularity/README.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"echarts.min.js\"></script>\n<script src=\"echarts-graph-modularity.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Requiring ETPL in AMD Environment (Synchronous)\nDESCRIPTION: Demonstrates how to require the ETPL module synchronously in an AMD environment within a module definition.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function (require) {\n    var etpl = require('etpl');\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with ecStat.statistics in JavaScript\nDESCRIPTION: This function returns the minimum value from a numeric array using the ecStat.statistics module.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar minValue = ecStat.statistics.min(dataList);\n```\n\n----------------------------------------\n\nTITLE: Installing ECharts Graph Modularity Extension via NPM\nDESCRIPTION: Shows how to install the graph modularity extension using NPM package manager. This is useful for projects using module bundlers like webpack or rollup.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-graph-modularity/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install echarts-graph-modularity\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Value Using ecStat\nDESCRIPTION: Demonstrates how to calculate the median value of an ordered numeric array using ecStat's statistics module.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar medianValue = ecStat.statistics.median(dataList);\n```\n\n----------------------------------------\n\nTITLE: Requiring ETPL in AMD Environment (Asynchronous)\nDESCRIPTION: Demonstrates asynchronous requiring of the ETPL module in an AMD environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire([ 'etpl' ], function (etpl) {\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Clustering Dimensions in JavaScript\nDESCRIPTION: Demonstrates how to specify which dimensions to use for clustering and where to output the cluster index.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconfig = {\n    dimensions: [2, 3],\n    outputClusterIndexDimension: 5\n}\n```\n\n----------------------------------------\n\nTITLE: Using Clustering Function Standalone\nDESCRIPTION: Examples of using the hierarchical k-means clustering function directly without ECharts transformation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = ecStat.clustering.hierarchicalKMeans(data, config);\n// or\nvar result = ecStat.clustering.hierarchicalKMeans(data, clusterCount, stepByStep);\n```\n\n----------------------------------------\n\nTITLE: Importing ECharts Graph Modularity Extension in ES Modules\nDESCRIPTION: Demonstrates how to import the graph modularity extension in a JavaScript module environment. This code imports both the main ECharts library and the extension to enable community detection functionality.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-graph-modularity/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as echarts from 'echarts';\nimport 'echarts-graph-modularity';\n```\n\n----------------------------------------\n\nTITLE: Installing ETPL via npm for Node.js\nDESCRIPTION: Shows the npm command to install ETPL for use in a Node.js environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install etpl\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value Using ecStat\nDESCRIPTION: Demonstrates how to find the minimum value in a numeric data sample using ecStat's statistics module.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.zh-CN.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar minValue = ecStat.statistics.min(dataList);\n```\n\n----------------------------------------\n\nTITLE: Loading ETpl in Node.js\nDESCRIPTION: Example of requiring ETpl module in Node.js environment after npm installation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar etpl = require('etpl');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating package.json Exports Configuration in ECharts\nDESCRIPTION: This snippet shows an example of how the 'exports' field in package.json might be configured to route imports to physical files in the ECharts project.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts/package.README.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"exports\": { \"./xxx\": \"./yyy/zzz.js\" } }\n```\n\n----------------------------------------\n\nTITLE: Clustering Data Example\nDESCRIPTION: Example of multi-dimensional data format that can be used as input for the clustering function.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n    [232, 4.21, 51, 0.323, 19],\n    [321, 1.62, 18, 0.139, 10],\n    [551, 11.21, 13, 0.641, 15],\n    ...\n];\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Container for Handsontable\nDESCRIPTION: HTML markup that creates an empty div element which will be used as a container for the Handsontable spreadsheet.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example\"></div>\n```\n\n----------------------------------------\n\nTITLE: Loading Handsontable with AMD Module Pattern\nDESCRIPTION: Example of requiring Handsontable using the AMD module pattern and initializing a basic spreadsheet with sample data.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['handsontable'], function(Handsontable) {\n    var hot = new Handsontable(document.getElementById('example'), {\n      data: [[1, 2, 3, 4], [1, 2, 3, 4]]\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Loading ETpl via HTML Script Tag\nDESCRIPTION: Shows how to include ETpl in browser environment using a script tag to get global etpl variable.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"etpl.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Interoperating with JavaScript Objects\nDESCRIPTION: Demonstrates how Immutable.js can accept plain JavaScript objects and arrays in its operations, allowing for seamless integration with existing JavaScript code.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:2, c:3, d:4});\nvar map2 = Immutable.Map({c:10, a:20, t:30});\nvar obj = {d:100, o:200, g:300};\nvar map3 = map1.merge(map2, obj);\n// Map { a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 }\n```\n\n----------------------------------------\n\nTITLE: Loading Handsontable with AMD Module Pattern\nDESCRIPTION: Example of requiring Handsontable using the AMD module pattern and initializing a basic spreadsheet with sample data.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['handsontable'], function(Handsontable) {\n    var hot = new Handsontable(document.getElementById('example'), {\n      data: [[1, 2, 3, 4], [1, 2, 3, 4]]\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Histogram Result Data Example\nDESCRIPTION: Example of the data format returned by the histogram function when used in standalone mode.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar bins.data = [\n    // MeanOfV0V1, VCount, V0, V1, DisplayableName\n    [  10,         212,          8,  12, '8 - 12'],\n    ...\n];\n// The rest of the input dimensions that other than\n// config.dimensions specified are kept in the output.\n```\n\n----------------------------------------\n\nTITLE: Equality Checking in Immutable.js\nDESCRIPTION: Demonstrates how to properly check equality of immutable collections using equals() method instead of reference equality.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 2);\nassert(map1.equals(map2) === true);\nvar map3 = map1.set('b', 50);\nassert(map1.equals(map3) === false);\n```\n\n----------------------------------------\n\nTITLE: Clustering Data Input Example in JavaScript\nDESCRIPTION: Shows an example of input data format for the clustering function, with multiple dimensions per data point.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n    // dimensions:\n    // 0    1      2    3      4\n    [ 232,  4.21,  51,  0.323, 'xxx'],\n    [ 321,  1.62,  18,  0.139, 'xzx'],\n    [ 551,  11.21, 13,  0.641, 'yzy'],\n    ...\n];\n```\n\n----------------------------------------\n\nTITLE: Bundling Handsontable with Browserify\nDESCRIPTION: Command to bundle Handsontable with Browserify, specifying all the required module dependencies such as moment, pikaday, zeroclipboard, and numbro.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrowserify main.js -o bundle.js -r moment -r pikaday -r zeroclipboard -r numbro\n```\n\n----------------------------------------\n\nTITLE: Creating References to Immutable Objects\nDESCRIPTION: Demonstrates how immutable objects can be efficiently \"copied\" by simply creating new references to them, which is memory-efficient.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar clone = map1;\n```\n\n----------------------------------------\n\nTITLE: Customizing Latinize Character Mappings\nDESCRIPTION: Examples showing how to modify the character translation table used by Latinize.js, including special handling for German umlauts.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/latinize/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlatinize.characters['Ω'] = 'O';\n\n// modify the behavior for German umlauts\n_.extend(latinize.characters,\n  {'Ä': 'Ae', 'Ä': 'Ae', 'Ü': 'Ue', 'ä': 'ae', 'ö': 'oe', 'ü': 'ue'});\n```\n\n----------------------------------------\n\nTITLE: Creating References to Immutable Objects\nDESCRIPTION: Demonstrates how immutable objects can be efficiently \"copied\" by simply creating new references to them, which is memory-efficient.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar clone = map1;\n```\n\n----------------------------------------\n\nTITLE: Importing Handsontable with CommonJS\nDESCRIPTION: Example showing how to import Handsontable in a CommonJS environment using the require function.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar handsontable = require('handsontable');\n```\n\n----------------------------------------\n\nTITLE: Importing Handsontable with CommonJS\nDESCRIPTION: Example showing how to import Handsontable in a CommonJS environment using the require function.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar handsontable = require('handsontable');\n```\n\n----------------------------------------\n\nTITLE: Customizing Latinize Character Mappings\nDESCRIPTION: Examples of modifying the character translation table in Latinize.js, including special handling for German umlauts\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/latinize/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlatinize.characters['Ω'] = 'O';\n\n// modify the behavior for German umlauts\n_.extend(latinize.characters,\n  {'Ä': 'Ae', 'Ä': 'Ae', 'Ü': 'Ue', 'ä': 'ae', 'ö': 'oe', 'ü': 'ue'});\n```\n\n----------------------------------------\n\nTITLE: Using Immutable.js in Browser with Script Tag\nDESCRIPTION: Shows how to include and use Immutable.js in a browser environment using a script tag.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"immutable.min.js\"></script>\n<script>\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Clustering as ECharts Transform in JavaScript\nDESCRIPTION: Shows how to use the clustering function as an ECharts transform, including configuration options and expected output format.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndataset: [{\n    source: [ ... ],\n}, {\n    transform: 'ecStat:clustering',\n    config: {\n        clusterCount: 6,\n        outputClusterIndexDimension: 5,\n        outputCentroidDimensions: [6, 7]\n    }\n    // The result data of this dataset will be:\n    // [\n    //    // dim2, dim3 are used in clustering.\n    //    // All of the input data are kept in the output.\n    //    // dim5 is the output cluster index.\n    //    // dim6 is the output distance value.\n    //    // dimensions:\n    //    // 0    1      2    3       4       5   6   7\n    //    [ 232,  4.21,  51,  0.323,  'xxx',  0,  14, 0.145 ],\n    //    [ 321,  1.62,  18,  0.139,  'xzx',  2,  24, 0.321 ],\n    //    [ 551,  11.21, 13,  0.641,  'yzy',  0,  14, 0.145 ],\n    //    ...\n    // ]\n}, {\n    fromDatasetIndex: 1,\n    fromTransformResult: 1\n    // The result data of this dataset will be:\n    // centroids: [\n    //     // center of cluster0\n    //     [14, 0.145],\n    //     // center of cluster1\n    //     [24, 0.321],\n    //     ...\n    // ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Loading Handsontable with AMD Module Pattern\nDESCRIPTION: Example of loading Handsontable using the AMD (Asynchronous Module Definition) pattern with a require function and initializing a basic spreadsheet.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['handsontable'], function(Handsontable) {\n    var hot = new Handsontable(document.getElementById('example'), {\n      data: [[1, 2, 3, 4], [1, 2, 3, 4]]\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Latinize in Browser\nDESCRIPTION: Example of using Latinize.js directly in a browser environment with HTML script tags.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/latinize/README.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"../latinize.js\"></script>\n<script>\n    document.write(latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Comparing ES6 and ES3 Arrow Function Syntax in JavaScript\nDESCRIPTION: Demonstrates the difference between ES6 arrow function syntax and its ES3 equivalent using a map operation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// ES6\nfoo.map(x => x * x);\n// ES3\nfoo.map(function (x) { return x * x; });\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable via npm\nDESCRIPTION: Command to install Handsontable using npm package manager with the --save flag to add it to package.json dependencies.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable --save\n```\n\n----------------------------------------\n\nTITLE: Using ecStat in Browser\nDESCRIPTION: HTML snippet demonstrating how to include and use ecStat in a browser environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src='./dist/ecStat.js'></script>\n<script>\n\nvar result = ecStat.clustering.hierarchicalKMeans(data, clusterNumber, false);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Immutable.js via npm\nDESCRIPTION: Shows how to install the immutable library using npm package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install immutable\n```\n\n----------------------------------------\n\nTITLE: Regression Analysis Usage in ECharts and Standalone in JavaScript\nDESCRIPTION: Shows how to use the regression function both as an ECharts transform and standalone, including parameter specifications.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\necharts.registerTransform(ecStat.transform.regression);\n\nchart.setOption({\n    dataset: [{\n        source: data\n    }, {\n        type: 'ecStat:regression',\n        config: {\n            method: regressionType,\n            ...opt\n        }\n    }],\n    ...\n});\n\n// Standalone usage\nvar myRegression = ecStat.regression(regressionType, data, opt);\n// or\nvar myRegression = ecStat.regression('polynomial', data, order);\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable with AMD\nDESCRIPTION: Example of how to require and initialize Handsontable in an AMD environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['handsontable'], function(Handsontable) {\n    var hot = new Handsontable(document.getElementById('example'), {\n      data: [[1, 2, 3, 4], [1, 2, 3, 4]]\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing ecStat via npm\nDESCRIPTION: Command to install ecStat using npm package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install echarts-stat\n```\n\n----------------------------------------\n\nTITLE: Event Binding Examples for jQuery Mouse Wheel Plugin\nDESCRIPTION: This snippet demonstrates two ways to bind the mousewheel event: using jQuery's .on() method and using the plugin's custom mousewheel() helper method. Both examples log the normalized delta values and deltaFactor to the console.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// using on\n$('#my_elem').on('mousewheel', function(event) {\n    console.log(event.deltaX, event.deltaY, event.deltaFactor);\n});\n\n// using the event helper\n$('#my_elem').mousewheel(function(event) {\n    console.log(event.deltaX, event.deltaY, event.deltaFactor);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing ecStat via npm\nDESCRIPTION: Command for installing the ecStat package using npm package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install echarts-stat\n```\n\n----------------------------------------\n\nTITLE: Integrating jQuery Mouse Wheel with Browserify\nDESCRIPTION: Server-side Node.js code example showing how to set up Browserify with the jQuery Mouse Wheel plugin using Express. This demonstrates the required dependencies and configuration for use in a Node.js server environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require('express');\nvar app = express.createServer();\n\napp.use(require('browserify')({\n    require : [ 'jquery-browserify', 'jquery-mousewheel' ]\n}));\n```\n\n----------------------------------------\n\nTITLE: Computing Median with ecStat.statistics in JavaScript\nDESCRIPTION: This function computes the median of a sorted numeric array using the ecStat.statistics module.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-stat/README.md#2025-04-09_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar medianValue = ecStat.statistics.median(dataList);\n```\n\n----------------------------------------\n\nTITLE: Deep Equality Comparison in Immutable Collections\nDESCRIPTION: Shows how to compare immutable collections for value equality using Immutable.is and the equals method, which perform deep equality checks.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:1, c:1});\nvar map2 = Immutable.Map({a:1, b:1, c:1});\nassert(map1 !== map2); // two different instances\nassert(Immutable.is(map1, map2)); // have equivalent values\nassert(map1.equals(map2)); // alternatively use the equals method\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with bower\nDESCRIPTION: Shell commands for installing tslib using bower, with specific version recommendations based on the TypeScript version being used.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# TypeScript 3.9.2 or later\nbower install tslib\n\n# TypeScript 3.8.4 or earlier\nbower install tslib@^1\n\n# TypeScript 2.3.2 or earlier\nbower install tslib@1.6.1\n```\n\n----------------------------------------\n\nTITLE: Client-side Browserify Implementation for jQuery Mouse Wheel Plugin\nDESCRIPTION: This snippet shows how to require and initialize the jQuery Mouse Wheel Plugin on the client side when using Browserify. It requires jQuery first and then passes it to the mousewheel plugin.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar $ = require('jquery-browserify');\nrequire('jquery-mousewheel')($);\n```\n\n----------------------------------------\n\nTITLE: Using mergeDeep for Nested Structure Manipulation\nDESCRIPTION: Shows how to use the mergeDeep method to combine nested immutable structures while preserving existing data and adding new properties at deep levels.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar nested2 = nested.mergeDeep({a:{b:{d:6}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration Example\nDESCRIPTION: Demonstrates using Immutable.js with TypeScript including type declarations\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n///<reference path='./node_modules/immutable/dist/Immutable.d.ts'/>\nimport Immutable = require('immutable');\nvar map1: Immutable.Map<string, number>;\nmap1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with bower\nDESCRIPTION: Shell commands for installing tslib using bower for different TypeScript versions.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# TypeScript 3.9.2 or later\nbower install tslib\n\n# TypeScript 3.8.4 or earlier\nbower install tslib@^1\n\n# TypeScript 2.3.2 or earlier\nbower install tslib@1.6.1\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable via Bower\nDESCRIPTION: Command to install Handsontable using Bower package manager with the --save flag to add it to bower.json dependencies.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbower install handsontable --save\n```\n\n----------------------------------------\n\nTITLE: Registering ecStat Histogram Transform\nDESCRIPTION: JavaScript code to register the ecStat histogram transform with ECharts.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\necharts.registerTransform(ecStat.transform.histogram);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration Example\nDESCRIPTION: Demonstrates using Immutable.js with TypeScript including type declarations\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n///<reference path='./node_modules/immutable/dist/Immutable.d.ts'/>\nimport Immutable = require('immutable');\nvar map1: Immutable.Map<string, number>;\nmap1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n----------------------------------------\n\nTITLE: Microsoft Corporation Copyright and License Notice in JavaScript\nDESCRIPTION: A copyright and license notice contained in a JavaScript file comment block. The license permits use, copy, modification, and distribution of the software without fee while disclaiming warranties and liability.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/tslib@2.3.0/CopyrightNotice.txt#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n```\n\n----------------------------------------\n\nTITLE: Loading ETPL in AMD Environment with Synchronous Require\nDESCRIPTION: Demonstrates how to load the ETPL module in an AMD environment using synchronous require pattern.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function (require) {\n    var etpl = require('etpl');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Immutable Map Usage in JavaScript\nDESCRIPTION: Demonstrates creating and manipulating immutable Maps using the Immutable.js library\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Immutable = require('immutable');\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Apache ECharts\nDESCRIPTION: Key configurations in package.json for Apache ECharts, including the exports field and module type. This setup officially exports zrender.js and provides limited visibility to internal files for backward compatibility.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/zrender/package.README.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    // Officially exported module\n    \"./zrender.js\": \"./zrender.js\",\n    // Legacy internal file visibility\n    // ...\n  },\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading ETPL in AMD Environment with Asynchronous Require\nDESCRIPTION: Shows how to load the ETPL module in an AMD environment using asynchronous require pattern.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire([ 'etpl' ], function (etpl) {\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in ECharts\nDESCRIPTION: Returns the minimum value from a numeric array.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-stat/README.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar minValue = ecStat.statistics.min(dataList);\n```\n\n----------------------------------------\n\nTITLE: Installing Immutable.js via NPM\nDESCRIPTION: Command to install the immutable package using npm package manager\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install immutable\n```\n\n----------------------------------------\n\nTITLE: Coding Style Standards for Immutable JS\nDESCRIPTION: Defines the coding style standards for contributing to Immutable JS, including indentation, line length, quote usage, and general formatting rules.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* 2 spaces for indentation (no tabs)\n* 80 character line length strongly preferred.\n* Prefer ''' over \"\"\n* ES6 Harmony when possible.\n* Use semicolons;\n* Trailing commas,\n* Avd abbr wrds.\n```\n\n----------------------------------------\n\nTITLE: Basic ETpl Template Compilation\nDESCRIPTION: Shows how to compile a simple template string into a render function.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar render = etpl.compile('Hello ${name}!');\n```\n\n----------------------------------------\n\nTITLE: Batching Mutations with withMutations\nDESCRIPTION: Shows how to efficiently apply multiple mutations to an immutable collection using withMutations() method.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar list1 = Immutable.List.of(1,2,3);\nvar list2 = list1.withMutations(function (list) {\n  list.push(4).push(5).push(6);\n});\nassert(list1.size === 3);\nassert(list2.size === 6);\n```\n\n----------------------------------------\n\nTITLE: Pull Request Process for Immutable JS in Markdown\nDESCRIPTION: A numbered list of steps required to submit a pull request to the Immutable JS project, including forking, testing, and code quality requirements.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n 1. Fork the repo and create your branch from `master`.\n 2. Install all dependencies. (`npm install`)\n 3. Install the grunt CLI tools. (`npm install -g grunt-cli`)\n 4. If you've added code, add tests.\n 5. If you've changed APIs, update the documentation.\n 6. Build generated JS, run tests and ensure your code passes lint. (`grunt`)\n 7. Be sure to commit the generated JS in `/dist`.\n 8. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for a Flights Visualization Example\nDESCRIPTION: YAML front matter that defines the configuration for a flight routes visualization example. It specifies the title in English and Chinese, assigns the example to the 'lines3D' category, and includes the echarts-gl JavaScript library.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/lines3d-flights.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Flights\ncategory: lines3D\ntitleCN: Flights\nscripts: http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js\n---\n```\n\n----------------------------------------\n\nTITLE: Using Latinize.js with AMD\nDESCRIPTION: Example showing how to load and use the Latinize.js library using AMD (Asynchronous Module Definition) pattern.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/latinize/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['latinize'], function(latinize){\n  latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů');\n});\n```\n\n----------------------------------------\n\nTITLE: Minimal Import of ECharts-GL Components\nDESCRIPTION: JavaScript code demonstrating tree-shaking with ECharts-GL by importing only specific components and charts needed for your visualization.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-gl/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as echarts from 'echarts/core';\nimport { Scatter3DChart } from 'echarts-gl/charts';\nimport { Grid3DComponent } from 'echarts-gl/components';\n\necharts.use([Scatter3DChart, Grid3DComponent]);\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Immutable Structures\nDESCRIPTION: Shows various operations for accessing and updating nested immutable data using getIn() and updateIn() methods.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nnested2.getIn(['a', 'b', 'd']); // 6\n\nvar nested3 = nested2.updateIn(['a', 'b', 'd'], value => value + 1);\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }\n\nvar nested4 = nested3.updateIn(['a', 'b', 'c'], list => list.push(6));\n// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Immutable Structures\nDESCRIPTION: Shows various operations for accessing and updating nested immutable data using getIn() and updateIn() methods.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nnested2.getIn(['a', 'b', 'd']); // 6\n\nvar nested3 = nested2.updateIn(['a', 'b', 'd'], value => value + 1);\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }\n\nvar nested4 = nested3.updateIn(['a', 'b', 'c'], list => list.push(6));\n// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Map3D Alcohol Consumption\nDESCRIPTION: YAML configuration block defining metadata and required script dependencies for Map3D visualization. Includes title, category, and external script references for ECharts GL and world map data.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/map3d-alcohol-consumption.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Map3D - Alcohol Consumption\ncategory: map3D\ntitleCN: Map3D - Alcohol Consumption\nscripts: http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js,/dep/echarts/map/js/world.js\n---\n```\n\n----------------------------------------\n\nTITLE: Using Latinize.js with AMD\nDESCRIPTION: Example of loading and using the Latinize.js library with AMD (Asynchronous Module Definition) pattern.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/latinize/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['latinize'], function(latinize){\n  latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů');\n});\n```\n\n----------------------------------------\n\nTITLE: Working with JavaScript Objects and Immutable Collections\nDESCRIPTION: Shows how Immutable.js can accept plain JavaScript objects and arrays as input to its methods, enabling interoperability with existing code.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:2, c:3, d:4});\nvar map2 = Immutable.Map({c:10, a:20, t:30});\nvar obj = {d:100, o:200, g:300};\nvar map3 = map1.merge(map2, obj);\n// Map { a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Flight Path Visualization with lines3D on geo3D in ECharts\nDESCRIPTION: Markdown frontmatter configuration for an ECharts example page that demonstrates how to visualize flight paths using 3D lines on a geographic 3D surface. The configuration includes the title, category, and required script dependencies.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/lines3d-flights-on-geo3d.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Flights on Geo3D\ncategory: lines3D\ntitleCN: Flights on Geo3D\nscripts: /dep/echarts/map/js/world.js,http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js\n---\nVisualize flights with lines3D on geo3D\n```\n\n----------------------------------------\n\nTITLE: Using Latinize in Browser\nDESCRIPTION: Example of using Latinize.js directly in the browser with a script tag\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/latinize/README.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"../latinize.js\"></script>\n<script>\n    document.write(latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Including ECharts-GL via CDN Scripts\nDESCRIPTION: HTML script tags to include ECharts and ECharts-GL libraries from CDN\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-gl/README.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/echarts-gl/dist/echarts-gl.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating References to Immutable Objects\nDESCRIPTION: Shows how immutable objects can be efficiently \"copied\" by simply creating a new reference without duplicating the data.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar clone = map1;\n```\n\n----------------------------------------\n\nTITLE: Globe with Iron Material Configuration in Markdown\nDESCRIPTION: Markdown file defining the metadata for an ECharts GL example that showcases a globe visualization with iron material. It includes details about the required script dependency for ECharts GL.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/iron-globe.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Iron globe\ncategory: globe\ntitleCN: Iron globe\nscripts: http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js\n---\nGlobe with complex iron material\n```\n\n----------------------------------------\n\nTITLE: Requiring ETPL in AMD Environment (Synchronous)\nDESCRIPTION: Shows how to require the ETPL module synchronously in an AMD (Asynchronous Module Definition) environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function (require) {\n    var etpl = require('etpl');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Equality with Immutable Collections\nDESCRIPTION: Demonstrates how to properly check equality between immutable collections using equals() method rather than reference equality.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 2);\nassert(map1.equals(map2) === true);\nvar map3 = map1.set('b', 50);\nassert(map1.equals(map3) === false);\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for GitHub Punch Card Chart\nDESCRIPTION: YAML configuration block that defines the metadata for an ECharts scatter plot example, including English and Chinese titles and the chart category.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-polar-punchCard.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Punch Card of Github\ncategory: scatter\ntitleCN: Punch Card of Github\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration for Air Quality Map Visualization\nDESCRIPTION: YAML frontmatter configuration defining visualization properties including title in English and Chinese, along with category tags for scatter and map visualizations.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/effectScatter-bmap.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Air Quality - Baidu Map\ncategory: scatter, map\ntitleCN: 全国主要城市空气质量 - 百度地图\n---\n```\n\n----------------------------------------\n\nTITLE: Requiring ETPL in Node.js\nDESCRIPTION: Demonstrates how to require the ETPL module in a Node.js environment after installation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar etpl = require('etpl');\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Modularity in ECharts Options\nDESCRIPTION: This snippet illustrates how to set up the graph modularity feature in the ECharts configuration options. It shows how to enable modularity and set custom options like resolution and sorting.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-graph-modularity/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsetOption({\n\n    ...\n\n    series: [{\n        type: 'graph',\n        layout: 'force',\n        // Set modularity property true and extension will automatically detect different communities\n        // and assign each different color.\n        modularity: true\n\n        // Specify resolution. Higher resolution will produce less communities\n        modularity: {\n            resolution: 5,\n            // If sort the communities\n            sort: false\n        }\n\n        ...\n    }]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Seq for Efficient JavaScript Object Operations\nDESCRIPTION: Shows how to use Immutable.Seq to perform collection operations on JavaScript objects efficiently with lazy evaluation.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar myObject = {a:1,b:2,c:3};\nImmutable.Seq(myObject).map(x => x * x).toObject();\n// { a: 1, b: 4, c: 9 }\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration block defining the title, category and Chinese title for the USA population map visualization.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/map-usa.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: USA Population Estimates (2012)\ncategory: map\ntitleCN: USA Population Estimates (2012)\n---\n```\n\n----------------------------------------\n\nTITLE: Installing ETPL via NPM for Node.js\nDESCRIPTION: Command to install ETPL in a Node.js environment using NPM package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install etpl\n```\n\n----------------------------------------\n\nTITLE: Including Immutable.js in Browser via Script Tag\nDESCRIPTION: Shows how to include Immutable.js in a web page using a script tag and provides a simple usage example.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"immutable.min.js\"></script>\n<script>\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Line Chart Definition in YAML Front Matter\nDESCRIPTION: YAML front matter metadata for a documentation page defining a basic line chart example. Includes title, category, and difficulty level specifications.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-simple.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Basic Line Chart\ncategory: line\ntitleCN: Basic Line Chart\ndifficulty: 0\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Map World Documentation in ECharts\nDESCRIPTION: YAML front matter that defines metadata for the Map World documentation page in ECharts. It specifies the title in English, the category as 'map', and includes a title in Chinese.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/map-world.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Map World\ncategory: map\ntitleCN: Map World\n---\n```\n\n----------------------------------------\n\nTITLE: Installing ECharts Graph Modularity Extension via Script Tags\nDESCRIPTION: Demonstrates how to include the graph modularity extension in an HTML page using script tags. This approach loads both the main ECharts library and the extension directly in the browser.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-graph-modularity/README.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"echarts.min.js\"></script>\n<script src=\"echarts-graph-modularity.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Coding Style Guidelines for Immutable JS in Markdown\nDESCRIPTION: The coding style conventions to follow when contributing to Immutable JS, including indentation standards, character limits, and syntax preferences.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/CONTRIBUTING.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* 2 spaces for indentation (no tabs)\n* 80 character line length strongly preferred.\n* Prefer `'` over `\"`\n* ES6 Harmony when possible.\n* Use semicolons;\n* Trailing commas,\n* Avd abbr wrds.\n```\n\n----------------------------------------\n\nTITLE: Defining Doughnut Chart Metadata in YAML for Apache ECharts\nDESCRIPTION: This YAML snippet defines the metadata for a doughnut chart example in the Apache ECharts documentation. It specifies the English title, category, and Chinese title for the chart type.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pie-doughnut.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Doughnut Chart\ncategory: pie\ntitleCN: 环形图\n---\n```\n\n----------------------------------------\n\nTITLE: TypeScript Helper Function Example Without tslib\nDESCRIPTION: An example showing how TypeScript emits helper functions like __assign without using tslib, which results in duplicate declarations and larger file sizes.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nexports.x = {};\nexports.y = __assign({}, exports.x);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ECharts Line Chart Front Matter\nDESCRIPTION: YAML front matter that defines metadata for an electricity distribution chart visualization. Specifies the chart title in English and Chinese along with the chart category.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/line-sections.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Distribution of Electricity\ncategory: line\ntitleCN: 一天用电量分布\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Pie Chart Documentation\nDESCRIPTION: YAML front matter block defining metadata for a customized pie chart documentation page, including title in English and Chinese, and category specification.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/pie-custom.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Customized Pie\ncategory: pie\ntitleCN: Customized Pie\n---\n```\n\n----------------------------------------\n\nTITLE: Setting importHelpers in tsconfig.json\nDESCRIPTION: JSON configuration example showing how to enable the importHelpers compiler option in a TypeScript project configuration file.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"importHelpers\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing jQuery MouseWheel with Browserify Client-Side\nDESCRIPTION: Browser-side JavaScript code demonstrating how to require and initialize the jQuery mousewheel plugin using Browserify module system.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar $ = require('jquery-browserify');\nrequire('jquery-mousewheel')($);\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Force Layout Documentation\nDESCRIPTION: This snippet defines the frontmatter for a Markdown documentation page about force layout in ECharts. It specifies the title, category, and Chinese title for the page.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/graph-force.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Force Layout\ncategory: graph\ntitleCN: 力引导布局\n---\n```\n\n----------------------------------------\n\nTITLE: Bower paths configuration for tslib\nDESCRIPTION: TypeScript configuration showing how to set up paths mapping for tslib when using Bower package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"amd\",\n        \"importHelpers\": true,\n        \"baseUrl\": \"./\",\n        \"paths\": {\n            \"tslib\" : [\"bower_components/tslib/tslib.d.ts\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MouseWheel Event Handlers in jQuery\nDESCRIPTION: Examples showing how to bind mousewheel events using both the jQuery 'on' method and the plugin's helper method. Both approaches log the normalized delta values and delta factor to the console.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// using on\n$('#my_elem').on('mousewheel', function(event) {\n    console.log(event.deltaX, event.deltaY, event.deltaFactor);\n});\n\n// using the event helper\n$('#my_elem').mousewheel(function(event) {\n    console.log(event.deltaX, event.deltaY, event.deltaFactor);\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for ECharts Example\nDESCRIPTION: YAML frontmatter configuration that defines the title, category and Chinese title for an ECharts polynomial regression example.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-polynomial-regression.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Polynomial Regression\ncategory: scatter\ntitleCN: Polynomial Regression\n---\n```\n\n----------------------------------------\n\nTITLE: JSPM paths configuration for tslib\nDESCRIPTION: TypeScript configuration showing how to set up paths mapping for tslib when using JSPM package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"system\",\n        \"importHelpers\": true,\n        \"baseUrl\": \"./\",\n        \"paths\": {\n            \"tslib\" : [\"jspm_packages/npm/tslib@2.x.y/tslib.d.ts\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Immutable Collection Equality Comparison\nDESCRIPTION: Demonstrates different ways to compare immutable collections for equality using is() and equals() methods.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:1, c:1});\nvar map2 = Immutable.Map({a:1, b:1, c:1});\nassert(map1 !== map2); // two different instances\nassert(Immutable.is(map1, map2)); // have equivalent values\nassert(map1.equals(map2)); // alternatively use the equals method\n```\n\n----------------------------------------\n\nTITLE: Browserify Integration Example for jQuery Mouse Wheel Plugin\nDESCRIPTION: This code demonstrates how to use the jQuery Mouse Wheel Plugin with Browserify. It shows the server-side Node.js setup with Express and the client-side code for requiring both jQuery and the mousewheel plugin.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require('express');\nvar app = express.createServer();\n\napp.use(require('browserify')({\n    require : [ 'jquery-browserify', 'jquery-mousewheel' ]\n}));\n```\n\n----------------------------------------\n\nTITLE: Browser-side Browserify Integration for jQuery Mouse Wheel\nDESCRIPTION: Client-side JavaScript code showing how to require jQuery and the mousewheel plugin when using Browserify in the browser. This pattern enables modular front-end code with proper dependency management.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar $ = require('jquery-browserify');\nrequire('jquery-mousewheel')($);\n```\n\n----------------------------------------\n\nTITLE: Bower Configuration for tslib in tsconfig.json\nDESCRIPTION: Configuration for bower users showing how to set up paths mapping for tslib in the TypeScript configuration file.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"amd\",\n        \"importHelpers\": true,\n        \"baseUrl\": \"./\",\n        \"paths\": {\n            \"tslib\" : [\"bower_components/tslib/tslib.d.ts\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Latinize with AMD\nDESCRIPTION: Example of using Latinize.js in an AMD (Asynchronous Module Definition) environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/latinize/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['latinize'], function(latinize){\n  latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů');\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating jQuery Mouse Wheel with Browserify\nDESCRIPTION: Server-side Node.js code example for setting up Browserify with jQuery Mouse Wheel plugin using Express. This code creates an Express server and configures Browserify to require both jQuery and the mousewheel plugin.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require('express');\nvar app = express.createServer();\n\napp.use(require('browserify')({\n    require : [ 'jquery-browserify', 'jquery-mousewheel' ]\n}));\n```\n\n----------------------------------------\n\nTITLE: Declaring Copyright and License for Apache ECharts Website\nDESCRIPTION: This code snippet outlines the copyright notice and license terms for the Apache ECharts website project. It grants permission to use, modify, and distribute the software while disclaiming warranties and limiting liability.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/tslib@2.3.0/CopyrightNotice.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n```\n\n----------------------------------------\n\nTITLE: ES6 vs ES3 Arrow Function Example\nDESCRIPTION: Demonstrates the difference between ES6 arrow function syntax and its ES3 equivalent for map operations.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// ES6\nfoo.map(x => x * x);\n// ES3\nfoo.map(function (x) { return x * x; });\n```\n\n----------------------------------------\n\nTITLE: Modifying Latinize Character Mapping\nDESCRIPTION: Examples showing how to access and modify the character translation table in Latinize.js, including customizing behavior for specific characters like German umlauts.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/latinize/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlatinize.characters['Ω'] = 'O';\n\n// modify the behavior for German umlauts\n_.extend(latinize.characters,\n  {'Ä': 'Ae', 'Ä': 'Ae', 'Ü': 'Ue', 'ä': 'ae', 'ö': 'oe', 'ü': 'ue'});\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery MouseWheel with Browserify\nDESCRIPTION: Command line instructions for installing the jQuery mousewheel plugin and jQuery-browserify using npm package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jquery-mousewheel\nnpm install jquery-browserify\n```\n\n----------------------------------------\n\nTITLE: Defining Copyright and License for TypeScript Declaration in Apache ECharts Website\nDESCRIPTION: This code snippet defines the copyright and license information for the TypeScript declaration file used in the Apache ECharts website project. It specifies that the code is provided under the Apache License, Version 2.0, and includes disclaimers regarding warranties and conditions.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts-gl/dist/echarts-gl.min.js.LICENSE.txt#2025-04-09_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n```\n\n----------------------------------------\n\nTITLE: Installing Latinize.js with Bower\nDESCRIPTION: Command to install Latinize.js using Bower package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/latinize/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbower install latinize\n```\n\n----------------------------------------\n\nTITLE: Installing Latinize.js with Bower\nDESCRIPTION: Command to install Latinize.js using Bower package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/latinize/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbower install latinize\n```\n\n----------------------------------------\n\nTITLE: Client-side Browserify Integration with jQuery Mouse Wheel\nDESCRIPTION: Browser-side JavaScript code showing how to require jQuery and the jQuery Mouse Wheel plugin when using Browserify. This demonstrates the client-side implementation after the server has been configured.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar $ = require('jquery-browserify');\nrequire('jquery-mousewheel')($);\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable via npm\nDESCRIPTION: Command to install Handsontable using npm package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable --save\n```\n\n----------------------------------------\n\nTITLE: Using Seq for Lazy Evaluation on JavaScript Objects\nDESCRIPTION: Demonstrates using Immutable.Seq for efficient, lazy operations on plain JavaScript objects without creating intermediate collections.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar myObject = {a:1,b:2,c:3};\nImmutable.Seq(myObject).map(x => x * x).toObject();\n// { a: 1, b: 4, c: 9 }\n```\n\n----------------------------------------\n\nTITLE: Installing Latinize.js with npm\nDESCRIPTION: Command to install Latinize.js using npm package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/latinize/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install latinize\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable with npm\nDESCRIPTION: Command to install Handsontable using npm package manager, saving it as a dependency in package.json.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable --save\n```\n\n----------------------------------------\n\nTITLE: Modifying Latinize.js character mappings\nDESCRIPTION: Examples showing how to access and modify the character translation table to customize the latinization behavior, including special handling for German umlauts.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/latinize/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlatinize.characters['Ω'] = 'O';\n\n// modify the behavior for German umlauts\n_.extend(latinize.characters,\n  {'Ä': 'Ae', 'Ä': 'Ae', 'Ü': 'Ue', 'ä': 'ae', 'ö': 'oe', 'ü': 'ue'});\n```\n\n----------------------------------------\n\nTITLE: Modifying Latinize.js character mappings\nDESCRIPTION: Examples showing how to access and modify the character translation table to customize the latinization behavior, including special handling for German umlauts.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/latinize/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlatinize.characters['Ω'] = 'O';\n\n// modify the behavior for German umlauts\n_.extend(latinize.characters,\n  {'Ä': 'Ae', 'Ä': 'Ae', 'Ü': 'Ue', 'ä': 'ae', 'ö': 'oe', 'ü': 'ue'});\n```\n\n----------------------------------------\n\nTITLE: Using Immutable.js with AMD Loader\nDESCRIPTION: Demonstrates loading Immutable.js using an AMD loader like RequireJS in a browser environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['./immutable.min.js'], function (Immutable) {\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Handsontable with CommonJS Module Pattern\nDESCRIPTION: Example of importing Handsontable using the CommonJS module pattern for environments like Node.js.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar handsontable = require('handsontable');\n```\n\n----------------------------------------\n\nTITLE: Using Immutable.js with AMD Loader\nDESCRIPTION: Demonstrates loading Immutable.js using an AMD loader like RequireJS in a browser environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['./immutable.min.js'], function (Immutable) {\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n});\n```\n\n----------------------------------------\n\nTITLE: Using Latinize.js in browser\nDESCRIPTION: Example showing how to include and use the Latinize.js library directly in a browser environment with script tags.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/latinize/README.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"../latinize.js\"></script>\n<script>\n    document.write(latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Latinize.js in Node.js\nDESCRIPTION: Example showing how to require and use the Latinize.js library in a Node.js environment to convert accented characters to latin characters.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/latinize/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar latinize = require('latinize');\nlatinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'); // => 'ExAmPlE aeiouycdenrstzu'\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with npm\nDESCRIPTION: Shell commands for installing tslib using npm for different TypeScript versions.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# TypeScript 3.9.2 or later\nnpm install tslib\n\n# TypeScript 3.8.4 or earlier\nnpm install tslib@^1\n\n# TypeScript 2.3.2 or earlier\nnpm install tslib@1.6.1\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with npm\nDESCRIPTION: Shell commands for installing tslib using npm, with specific version recommendations based on the TypeScript version being used.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# TypeScript 3.9.2 or later\nnpm install tslib\n\n# TypeScript 3.8.4 or earlier\nnpm install tslib@^1\n\n# TypeScript 2.3.2 or earlier\nnpm install tslib@1.6.1\n```\n\n----------------------------------------\n\nTITLE: Installing Latinize via Package Managers\nDESCRIPTION: Commands to install Latinize.js using npm or bower package managers.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/latinize/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install latinize\n```\n\nLANGUAGE: bash\nCODE:\n```\nbower install latinize\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Nested Immutable Structures in JavaScript\nDESCRIPTION: Shows how to use getIn, updateIn methods to access and modify values in deeply nested immutable structures without mutating the original data.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nnested2.getIn(['a', 'b', 'd']); // 6\n\nvar nested3 = nested2.updateIn(['a', 'b', 'd'], value => value + 1);\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }\n\nvar nested4 = nested3.updateIn(['a', 'b', 'c'], list => list.push(6));\n// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }\n```\n\n----------------------------------------\n\nTITLE: Installing Latinize.js with npm\nDESCRIPTION: Command to install Latinize.js using npm package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/latinize/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install latinize\n```\n\n----------------------------------------\n\nTITLE: Installing Latinize via Package Managers\nDESCRIPTION: Commands to install Latinize.js using npm or bower package managers\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/latinize/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install latinize\n```\n\nLANGUAGE: bash\nCODE:\n```\nbower install latinize\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with yarn\nDESCRIPTION: Shell commands for installing tslib using yarn for different TypeScript versions.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# TypeScript 3.9.2 or later\nyarn add tslib\n\n# TypeScript 3.8.4 or earlier\nyarn add tslib@^1\n\n# TypeScript 2.3.2 or earlier\nyarn add tslib@1.6.1\n```\n\n----------------------------------------\n\nTITLE: Value Equality with Immutable Collections\nDESCRIPTION: Shows how to properly compare immutable collections using .equals() method instead of reference equality, treating them as values rather than objects.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 2);\nassert(map1.equals(map2) === true);\nvar map3 = map1.set('b', 50);\nassert(map1.equals(map3) === false);\n```\n\n----------------------------------------\n\nTITLE: Including ETPL in Browser via Script Tag\nDESCRIPTION: Demonstrates how to include ETPL in a browser environment using a script tag, which makes a global 'etpl' variable available.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"etpl.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading ETpl in AMD Environment - Asynchronous\nDESCRIPTION: Shows how to load ETpl module using asynchronous require in AMD environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire([ 'etpl' ], function (etpl) {\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Immutable.js via npm\nDESCRIPTION: Shows how to install the Immutable.js library using npm package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install immutable\n```\n\n----------------------------------------\n\nTITLE: Using Immutable.js with AMD Loader\nDESCRIPTION: Demonstrates how to use Immutable.js with an AMD loader like RequireJS in a browser environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['./immutable.min.js'], function (Immutable) {\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n});\n```\n\n----------------------------------------\n\nTITLE: Requiring ETPL in AMD Environment (Asynchronous)\nDESCRIPTION: Shows how to require the ETPL module asynchronously in an AMD environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire([ 'etpl' ], function (etpl) {\n});\n```\n\n----------------------------------------\n\nTITLE: Including ETPL in Browser Environment via Script Tag\nDESCRIPTION: Shows how to include ETPL in a browser environment using a script tag, which makes the 'etpl' variable globally available.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"etpl.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Latinize.js with bower\nDESCRIPTION: Command to install Latinize.js using bower package manager.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/latinize/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbower install latinize\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Sequences with Immutable.js in JavaScript\nDESCRIPTION: Illustrates the concept of lazy sequences in Immutable.js, showing how operations are only performed when necessary.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8)\n  .filter(x => x % 2).map(x => x * x);\n\nconsole.log(oddSquares.get(1)); // 9\n\nvar seq = Immutable.Map({a:1, b:1, c:1}).toSeq();\n\nseq.flip().map(key => key.toUpperCase()).flip().toObject();\n// Map { A: 1, B: 1, C: 1 }\n\nImmutable.Range(1, Infinity)\n  .skip(1000)\n  .map(n => -n)\n  .filter(n => n % 2 === 0)\n  .take(2)\n  .reduce((r, n) => r * n, 1);\n```\n\n----------------------------------------\n\nTITLE: Implementing Legacy 'merge' API for ETPL 3\nDESCRIPTION: Implementation of the deprecated 'merge' API that was removed in ETPL 3. This function renders a template and sets it as the innerHTML of an HTML element.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * 执行模板渲染，并将渲染后的字符串作为innerHTML填充到HTML元素中。\n * 兼容老版本的模板引擎api\n * \n * @param {HTMLElement} element 渲染字符串填充的HTML元素\n * @param {string} name target名称\n * @param {Object=} data 模板数据\n */\netpl.merge = function ( element, name, data ) {\n    if ( element ) {\n        element.innerHTML = this.render( name, data );\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Requiring ETPL in Node.js Environment\nDESCRIPTION: Shows how to load the ETPL module in a Node.js environment using require.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar etpl = require('etpl');\n```\n\n----------------------------------------\n\nTITLE: Merging Immutable Maps with JavaScript Objects\nDESCRIPTION: Demonstrates how Immutable.js can accept raw JavaScript objects and other immutable collections as arguments to methods like merge().\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar map1 = Immutable.Map({a:1, b:2, c:3, d:4});\nvar map2 = Immutable.Map({c:10, a:20, t:30});\nvar obj = {d:100, o:200, g:300};\nvar map3 = map1.merge(map2, obj);\n// Map { a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 }\n```\n\n----------------------------------------\n\nTITLE: Importing ETPL via Script Tag in HTML\nDESCRIPTION: Shows how to include ETPL in a browser environment using a script tag, which creates a global 'etpl' variable.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"etpl.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Building Apache ECharts Source Code\nDESCRIPTION: Instructions for building the Apache ECharts source code. This includes installing dependencies, running the development server, checking TypeScript code, and creating a production build.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install the dependencies from NPM:\nnpm install\n\n# Rebuild source code immediately in watch mode when changing the source code.\n# It opens the `./test` directory, and you may open `-cases.html` to get the list\n# of all test cases.\n# If you wish to create a test case, run `npm run mktest:help` to learn more.\nnpm run dev\n\n# Check the correctness of TypeScript code.\nnpm run checktype\n\n# If intending to build and get all types of the \"production\" files:\nnpm run release\n```\n\n----------------------------------------\n\nTITLE: Using Immutable.js with TypeScript\nDESCRIPTION: Shows how to use Immutable.js collections in TypeScript with type generics and type declarations.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n///<reference path='./node_modules/immutable/dist/Immutable.d.ts'/>\nimport Immutable = require('immutable');\nvar map1: Immutable.Map<string, number>;\nmap1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n----------------------------------------\n\nTITLE: JSPM Configuration for tslib in tsconfig.json\nDESCRIPTION: Configuration for JSPM users showing how to set up paths mapping for tslib in the TypeScript configuration file.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"system\",\n        \"importHelpers\": true,\n        \"baseUrl\": \"./\",\n        \"paths\": {\n            \"tslib\" : [\"jspm_packages/npm/tslib@2.x.y/tslib.d.ts\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Collections to Lazy Sequences\nDESCRIPTION: Demonstrates how to convert any immutable collection to a lazy Seq using the toSeq method for more efficient operations.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar seq = Immutable.Map({a:1, b:1, c:1}).toSeq();\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with yarn\nDESCRIPTION: Shell commands for installing tslib using yarn, with specific version recommendations based on the TypeScript version being used.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# TypeScript 3.9.2 or later\nyarn add tslib\n\n# TypeScript 3.8.4 or earlier\nyarn add tslib@^1\n\n# TypeScript 2.3.2 or earlier\nyarn add tslib@1.6.1\n```\n\n----------------------------------------\n\nTITLE: Lazy Evaluation in Seq Operations\nDESCRIPTION: Shows how lazy evaluation in Seq only performs the necessary work when values are actually accessed, improving performance by avoiding unnecessary computations.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(oddSquares.get(1)); // 9\n```\n\n----------------------------------------\n\nTITLE: TypeScript Helper Function Example With tslib\nDESCRIPTION: The same functionality as the previous example but using tslib with the --importHelpers flag, resulting in smaller file size by importing helper functions instead of declaring them inline.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvar tslib_1 = require(\"tslib\");\nexports.x = {};\nexports.y = tslib_1.__assign({}, exports.x);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Immutable Data Structures with fromJS\nDESCRIPTION: Demonstrates how to create deeply nested immutable data structures using the fromJS method, which converts a JavaScript object into nested Immutable Maps and Lists.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar nested = Immutable.fromJS({a:{b:{c:[3,4,5]}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } }\n```\n\n----------------------------------------\n\nTITLE: AMD Module Usage with RequireJS\nDESCRIPTION: Example of using Immutable.js with an AMD loader like RequireJS\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/immutable/3.7.4/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['./immutable.min.js'], function (Immutable) {\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n});\n```\n\n----------------------------------------\n\nTITLE: Code Style Guidelines for Immutable JS\nDESCRIPTION: Defines coding style requirements including indentation, line length, quote preferences, and general syntax conventions for contributing to Immutable JS.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/immutable/3.7.4/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* 2 spaces for indentation (no tabs)\n* 80 character line length strongly preferred.\n* Prefer '\\'' over '\"'\n* ES6 Harmony when possible.\n* Use semicolons;\n* Trailing commas,\n* Avd abbr wrds.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Backwards-Compatible merge Function\nDESCRIPTION: Provides a custom implementation of the 'merge' function for compatibility with older versions of the template engine.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * 执行模板渲染，并将渲染后的字符串作为innerHTML填充到HTML元素中。\n * 兼容老版本的模板引擎api\n * \n * @param {HTMLElement} element 渲染字符串填充的HTML元素\n * @param {string} name target名称\n * @param {Object=} data 模板数据\n */\netpl.merge = function ( element, name, data ) {\n    if ( element ) {\n        element.innerHTML = this.render( name, data );\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing ETPL via npm in Node.js Environment\nDESCRIPTION: Provides the command to install ETPL using npm in a Node.js environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install etpl\n```\n\n----------------------------------------\n\nTITLE: Loading ETpl in AMD Environment - Synchronous\nDESCRIPTION: Demonstrates how to load ETpl module using synchronous require in AMD environment.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function (require) {\n    var etpl = require('etpl');\n});\n```\n\n----------------------------------------\n\nTITLE: Compiling and Rendering a Template with ETPL\nDESCRIPTION: Illustrates the basic usage of ETPL, including compiling a template and rendering it with data.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar render = etpl.compile('Hello ${name}!');\nvar text = render({ name: 'etpl' });\n```\n\n----------------------------------------\n\nTITLE: Rendering ETpl Template\nDESCRIPTION: Demonstrates how to render a compiled template by passing data object.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/etpl/3.0.0/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = render({ name: 'etpl' });\n```\n\n----------------------------------------\n\nTITLE: tsconfig.json Configuration for tslib\nDESCRIPTION: How to enable the importHelpers compiler option in tsconfig.json to use tslib in your TypeScript project.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"importHelpers\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Line Configuration for tslib\nDESCRIPTION: How to enable the importHelpers compiler option via the TypeScript command line to use tslib in your project.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ntsc --importHelpers file.ts\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with JSPM\nDESCRIPTION: Shell commands for installing tslib using JSPM, with specific version recommendations based on the TypeScript version being used.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# TypeScript 3.9.2 or later\njspm install tslib\n\n# TypeScript 3.8.4 or earlier\njspm install tslib@^1\n\n# TypeScript 2.3.2 or earlier\njspm install tslib@1.6.1\n```\n\n----------------------------------------\n\nTITLE: Setting importHelpers via command line\nDESCRIPTION: Command line example showing how to enable the importHelpers compiler option in TypeScript.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ntsc --importHelpers file.ts\n```\n\n----------------------------------------\n\nTITLE: Installing tslib with JSPM\nDESCRIPTION: Shell commands for installing tslib using JSPM for different TypeScript versions.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# TypeScript 3.9.2 or later\njspm install tslib\n\n# TypeScript 3.8.4 or earlier\njspm install tslib@^1\n\n# TypeScript 2.3.2 or earlier\njspm install tslib@1.6.1\n```\n\n----------------------------------------\n\nTITLE: TypeScript code example with importHelpers\nDESCRIPTION: An example of TypeScript emitted code when using the --importHelpers flag, showing how the helper function is imported from tslib instead of being defined inline.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvar tslib_1 = require(\"tslib\");\nexports.x = {};\nexports.y = tslib_1.__assign({}, exports.x);\n```\n\n----------------------------------------\n\nTITLE: TypeScript code example without importHelpers\nDESCRIPTION: An example of TypeScript emitted code without using the --importHelpers flag, showing inline helper function implementation for __assign.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/tslib@2.3.0/README.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nexports.x = {};\nexports.y = __assign({}, exports.x);\n\n```\n\n----------------------------------------\n\nTITLE: Using Latinize.js in Browser\nDESCRIPTION: Example of including and using the Latinize.js library directly in a browser environment with HTML script tags.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/latinize/README.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"../latinize.js\"></script>\n<script>\n    document.write(latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Latinize.js in Node.js\nDESCRIPTION: Example of importing and using the Latinize.js library in a Node.js environment to convert accented characters to their latin equivalents.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/latinize/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar latinize = require('latinize');\nlatinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'); // => 'ExAmPlE aeiouycdenrstzu'\n```\n\n----------------------------------------\n\nTITLE: Using Latinize.js in Node.js\nDESCRIPTION: Example of importing and using the Latinize.js library in a Node.js environment to convert accented characters to their latin equivalents.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/latinize/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar latinize = require('latinize');\nlatinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'); // => 'ExAmPlE aeiouycdenrstzu'\n```\n\n----------------------------------------\n\nTITLE: Using Latinize with AMD\nDESCRIPTION: Example of using Latinize.js with AMD (Asynchronous Module Definition) loading\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/latinize/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['latinize'], function(latinize){\n  latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Latinize in Node.js\nDESCRIPTION: Example of using Latinize.js in a Node.js environment to convert accented characters to latin equivalents.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/en/vendors/latinize/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar latinize = require('latinize');\nlatinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'); // => 'ExAmPlE aeiouycdenrstzu'\n```\n\n----------------------------------------\n\nTITLE: Bundling Handsontable with Browserify\nDESCRIPTION: Command to bundle Handsontable with Browserify, specifying required module names for all dependencies.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrowserify main.js -o bundle.js -r moment -r pikaday -r zeroclipboard -r numbro\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable via npm or Bower\nDESCRIPTION: Commands to install Handsontable using npm or Bower package managers. These are the recommended installation methods.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/zh/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable --save\n```\n\nLANGUAGE: bash\nCODE:\n```\nbower install handsontable --save\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Container for Handsontable\nDESCRIPTION: HTML markup creating an empty div element with id 'example' that will be used as a container for the Handsontable spreadsheet.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/handsontable/0.26.1/README.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using jQuery Mouse Wheel Plugin with Event Binding\nDESCRIPTION: Examples showing how to use the jQuery Mouse Wheel Plugin using both the '.on()' method and the plugin's helper method. Both approaches log the normalized delta values and delta factor to the console.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// using on\n$('#my_elem').on('mousewheel', function(event) {\n    console.log(event.deltaX, event.deltaY, event.deltaFactor);\n});\n\n// using the event helper\n$('#my_elem').mousewheel(function(event) {\n    console.log(event.deltaX, event.deltaY, event.deltaFactor);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Browserify Server-Side Integration\nDESCRIPTION: Node.js server-side code showing how to configure Browserify to require both jQuery and the mousewheel plugin in an Express application.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/vendors/jquery-mousewheel/3.1.11/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require('express');\nvar app = express.createServer();\n\napp.use(require('browserify')({\n    require : [ 'jquery-browserify', 'jquery-mousewheel' ]\n}));\n```\n\n----------------------------------------\n\nTITLE: Module Import Example for ECharts\nDESCRIPTION: Demonstrates the correct way to specify file extensions when importing ECharts modules after v5.5.0. Shows both incorrect and correct import syntax.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/zrender@5.6.1/package.README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'xxx/xxx/xxx'      // Incorrect - may cause resolution issues\nimport 'xxx/xxx/xxx.js'  // Correct - fully specified extension\n```\n\n----------------------------------------\n\nTITLE: Package.json Export Path Example\nDESCRIPTION: Example showing the structure of an export path configuration in package.json that creates an alias route to a physical file.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/en/js/vendors/echarts/package.README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"exports\": { \"./xxx\": \"./yyy/zzz.js\" } }\n```\n\n----------------------------------------\n\nTITLE: Listing Public Exports in ECharts package.json\nDESCRIPTION: This snippet enumerates the officially exported entries in the ECharts package. These are the public APIs available to users of the library.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts/package.README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n+ `'echarts'`\n+ `'echarts/index.js'`\n+ `'echarts/index.blank.js'`\n+ `'echarts/index.common.js'`\n+ `'echarts/index.simple.js'`\n+ `'echarts/core.js'`\n+ `'echarts/charts.js'`\n+ `'echarts/components.js'`\n+ `'echarts/features.js'`\n+ `'echarts/renderers.js'`\n+ `'echarts/i18n/*`\n+ `'echarts/theme/*`\n+ `'echarts/types/*`\n+ `'echarts/extension/*`\n+ `'echarts/dist/*`\n+ `'echarts/ssr/client/index.js'`\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for GraphGL GPU Layout Documentation\nDESCRIPTION: YAML front matter defining the configuration for a documentation page about GraphGL GPU Layout. It includes the title, category, theme setting, Chinese title equivalent, and required script resources for ECharts GL.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/graphgl-gpu-layout.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: GraphGL GPU Layout\ncategory: graphGL\ntheme: dark\ntitleCN: GraphGL GPU Layout\nscripts: http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring ECharts GL Country Carousel Visualization in YAML\nDESCRIPTION: This YAML configuration sets up a project for a country carousel visualization. It specifies the title, category, and required scripts including ECharts GL and world map data.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/globe-country-carousel.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Country Carousel\ncategory: globe\ntitleCN: Country Carousel\nscripts: http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js,/dep/echarts/map/js/world.js\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontend Matter Configuration for ECharts Demo\nDESCRIPTION: YAML configuration block defining the demo title, category, and required JavaScript dependencies including ECharts GL, SimplexNoise, and export utilities.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data-gl/meta/bar3d-noise-modified-from-marpi-demo.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Noise modified from marpi's demo \ncategory: bar3D\ntitleCN: Noise modified from marpi's demo \nscripts: http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js,https://demo.marpi.pl/biomes/SimplexNoise.js,https://rawgit.com/ecomfe/echarts-gl/master/test/lib/download.js,https://rawgit.com/ecomfe/echarts-gl/master/test/js/exportGL2PLY.js\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Map China Example in ECharts\nDESCRIPTION: YAML frontmatter that defines the title, category, and Chinese title for the Map China example in the ECharts documentation website.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/map-china.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Map China\ncategory: map\ntitleCN: Map China\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Treemap Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a documentation page about basic treemap visualization in ECharts.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/treemap-simple.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Basic Treemap\ncategory: treemap\ntitleCN: Basic Treemap\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring ECharts Air Quality Example Metadata\nDESCRIPTION: YAML frontmatter block defining metadata for an ECharts scatter plot example, including title in English and Chinese and category classification.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-map.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Air Quality\ncategory: scatter\ntitleCN: 全国主要城市空气质量\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Scatter Chart Metadata in YAML\nDESCRIPTION: YAML front matter configuration that defines metadata for a basic scatter chart documentation page. Specifies the title, category, Chinese title variant, and difficulty level.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/scatter-simple.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Basic Scatter Chart\ncategory: scatter\ntitleCN: Basic Scatter Chart,\ndifficulty: 0\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Example YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration that defines metadata for a graph example documentation page, including title, category and Chinese title variant.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/v4/examples/data/meta/graph-simple.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Simple Graph\ncategory: graph\ntitleCN: Graph 简单示例\n---\n```\n\n----------------------------------------\n\nTITLE: Running gulp release command for ECharts Website in development mode\nDESCRIPTION: This command runs the gulp release task in development mode for the ECharts Website project.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngulp release --dev\n```\n\n----------------------------------------\n\nTITLE: Executing release script for ECharts Documentation\nDESCRIPTION: This command executes the release shell script for the ECharts Documentation project.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsh release.sh\n```\n\n----------------------------------------\n\nTITLE: Running gulp release command for ECharts Examples in development mode\nDESCRIPTION: This command runs the gulp release task in development mode for the ECharts Examples project.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngulp release --dev\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Notice Comment Block\nDESCRIPTION: Standard Microsoft copyright notice and Apache 2.0 license header block used in source files. Includes copyright statement, license reference, warranty disclaimer, and link to full license text.\nSOURCE: https://github.com/apache/echarts-website/blob/asf-site/zh/js/vendors/echarts-gl/dist/echarts-gl.min.js.LICENSE.txt#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n```"
  }
]