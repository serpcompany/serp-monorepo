[
  {
    "owner": "themesberg",
    "repo": "flowbite-react",
    "content": "TITLE: Adding Flowbite React to Existing Project using CLI\nDESCRIPTION: This command uses the Flowbite React CLI to automatically set up and configure Flowbite React in an existing project. It simplifies the integration process for projects that are already set up.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Implementing Application-wide Customization with ThemeProvider in React\nDESCRIPTION: This example shows how to use ThemeProvider and createTheme for application-wide customization of Flowbite React components, including custom button colors and sizes.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, createTheme, ThemeProvider } from \"flowbite-react\";\n\nconst customTheme = createTheme({\n  button: {\n    color: {\n      primary: \"bg-red-500 hover:bg-red-600\",\n      secondary: \"bg-blue-500 hover:bg-blue-600\",\n    },\n    size: {\n      lg: \"px-6 py-3 text-lg\",\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={customTheme}>\n      <Button color=\"primary\">Red Button</Button>\n      <Button color=\"secondary\" size=\"lg\">\n        Large Blue Button\n      </Button>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flowbite React Project\nDESCRIPTION: This command scaffolds a new Flowbite React application, guiding the user through project setup including directory name, template selection, and Git repository initialization.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest\n```\n\n----------------------------------------\n\nTITLE: Inheritance Control in Nested Flowbite React Components\nDESCRIPTION: This example illustrates how to use the applyTheme prop for controlling theme inheritance in nested Flowbite React components, specifically with a Navbar component.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme, Navbar, NavbarCollapse, NavbarLink, ThemeProvider } from \"flowbite-react\";\n\nconst theme = createTheme({\n  navbar: {\n    root: {\n      base: \"bg-white shadow-lg\",\n    },\n    collapse: {\n      base: \"w-full md:block md:w-auto\",\n      list: \"mt-4 flex flex-col md:mt-0 md:flex-row md:space-x-8\",\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Navbar>\n        <NavbarCollapse\n          applyTheme={{\n            list: \"replace\", // Replace entire list styles\n          }}\n        >\n          <NavbarLink href=\"#\">Custom Layout</NavbarLink>\n        </NavbarCollapse>\n      </Navbar>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Flowbite React into Existing Project\nDESCRIPTION: This command integrates Flowbite React into an existing project, performing automated setup steps including Tailwind CSS verification, dependency installation, and configuration file creation.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating New Flowbite React Project using CLI\nDESCRIPTION: This command uses the Flowbite React project creation CLI to scaffold a new application with Flowbite React pre-configured. It's the recommended way to start a new project with Flowbite React.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Components with Flowbite React in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom theme for form components and apply it to Label and TextInput components. It shows nested theme properties, clearing specific styles, and controlling how new styles are merged or replaced.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme, Label, TextInput } from \"flowbite-react\";\n\nconst formTheme = createTheme({\n  label: {\n    root: {\n      base: \"text-sm font-medium\",\n      disabled: \"opacity-50\",\n      colors: {\n        default: \"text-gray-900\",\n        error: \"text-red-700\",\n      },\n    },\n  },\n  textInput: {\n    base: \"block w-full\",\n    field: {\n      base: \"rounded-lg border\",\n      input: {\n        base: \"px-3 py-2\",\n        sizes: {\n          sm: \"text-sm\",\n          md: \"text-base\",\n        },\n        colors: {\n          gray: \"border-gray-300 bg-gray-50\",\n          error: \"border-red-500 bg-red-50\",\n        },\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <form>\n      {/* Label with error state */}\n      <Label\n        theme={formTheme.label}\n        color=\"error\"\n        clearTheme={{\n          root: { disabled: true }, // Remove disabled styles\n        }}\n      >\n        Email\n      </Label>\n\n      {/* Input with custom styling */}\n      <TextInput\n        theme={formTheme.textInput}\n        color=\"error\"\n        size=\"sm\"\n        applyTheme={{\n          field: {\n            input: {\n              colors: { error: \"replace\" }, // Replace error styles\n              sizes: { sm: \"merge\" }, // Merge size styles\n            },\n          },\n        }}\n      />\n\n      {/* Combining multiple controls */}\n      <TextInput\n        theme={formTheme.textInput}\n        clearTheme={{\n          field: {\n            input: { sizes: true }, // Remove all size variations\n          },\n        }}\n        applyTheme={{\n          base: \"merge\", // Merge base styles\n          field: { base: \"replace\" }, // Replace field base styles\n        }}\n      />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Flowbite React in Existing Project using CLI\nDESCRIPTION: This command adds Flowbite React to an existing project, setting up all necessary dependencies and configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/packages/ui/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Custom Component Usage Examples\nDESCRIPTION: Examples demonstrating various ways to use the custom component with different theming options and configurations\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/custom-components.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme, ThemeProvider } from \"flowbite-react\";\nimport { MyComponent } from \"./MyComponent\";\n\nconst theme = createTheme({\n  myComponent: {\n    base: \"flex items-center gap-2 rounded-lg p-2\",\n    color: {\n      info: \"bg-blue-100 text-blue-800\",\n      success: \"bg-green-100 text-green-800\",\n      error: \"bg-red-100 text-red-800\",\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <MyComponent>Default Component</MyComponent>\n\n      <MyComponent color=\"success\">Success Component</MyComponent>\n\n      <MyComponent\n        theme={{\n          base: \"flex items-center gap-4 rounded-full p-3\",\n          color: {\n            info: \"bg-purple-100 text-purple-800\",\n          },\n        }}\n      >\n        Custom Theme\n      </MyComponent>\n\n      <MyComponent clearTheme={{ color: true }}>Default Color Theme</MyComponent>\n\n      <MyComponent\n        theme={{\n          base: \"shadow-lg\",\n        }}\n        applyTheme={{\n          base: \"merge\",\n        }}\n      >\n        Merged Styles\n      </MyComponent>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Flowbite React Project with Next.js\nDESCRIPTION: Command to create a new Next.js project with Flowbite React using the project creation CLI. This sets up a complete project with all necessary configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/nextjs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t nextjs\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flowbite React Vite Project with CLI\nDESCRIPTION: Command to create a new Vite project with Flowbite React using the CLI tool. This automatically sets up a new project with Tailwind CSS, Flowbite React, and all necessary configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vite.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t vite\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Theme Toggle in React with Flowbite\nDESCRIPTION: A simple implementation of the DarkThemeToggle component that automatically handles theme detection and provides a user interface for switching between light and dark modes.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/dark-mode.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DarkThemeToggle } from \"flowbite-react\";\n\nexport default function MyPage() {\n  return (\n    // ...\n    <DarkThemeToggle />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Using Flowbite React Documentation for AI Integration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to fetch LLM-optimized documentation, full documentation, and specific component documentation in markdown format from Flowbite React. It also shows how to use the fetched documentation in a ChatGPT prompt for generating code examples.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/ai-integration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Fetching LLM-optimized documentation for context-efficient prompting\nconst llmDocs = await fetch(\"https://flowbite-react.com/llms.txt\").then((res) => res.text());\n\n// Getting full documentation for comprehensive LLM processing\nconst fullDocs = await fetch(\"https://flowbite-react.com/llms-full.txt\").then((res) => res.text());\n\n// Accessing specific component documentation in markdown format\nconst buttonDocs = await fetch(\"https://flowbite-react.com/docs/components/button.md\").then((res) => res.text());\n\n// Using markdown documentation in a ChatGPT prompt\nconst chatGptPrompt = `Based on this Flowbite React Button component documentation:\n${buttonDocs}\n\nGenerate a code example for a primary button with an icon.`;\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Values in Flowbite React Components\nDESCRIPTION: This snippet showcases how to use the applyTheme prop to control theme value application in Flowbite React components, demonstrating merging and replacing of styles.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, createTheme, ThemeProvider } from \"flowbite-react\";\n\nconst baseTheme = createTheme({\n  button: {\n    base: \"rounded-lg shadow-md\",\n    color: {\n      primary: \"bg-blue-500 text-white\",\n    },\n  },\n});\n\nconst customTheme = createTheme({\n  button: {\n    base: \"border-2\",\n    color: {\n      primary: \"bg-red-500\",\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={baseTheme}>\n      {/* Merges themes: rounded-lg shadow-md border-2 */}\n      <Button theme={customTheme.button}>Merged Styles</Button>\n\n      {/* Replaces base completely: only border-2 remains */}\n      <Button theme={customTheme.button} applyTheme={{ base: \"replace\" }}>\n        Replaced Base Style\n      </Button>\n\n      {/* Replaces color completely: loses text-white */}\n      <Button theme={customTheme.button} applyTheme={{ color: { primary: \"replace\" } }}>\n        Replaced Color\n      </Button>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React in Existing Project\nDESCRIPTION: Command to initialize Flowbite React in an existing Next.js project using the initialization CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/nextjs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating Flowbite React Project with Bun using CLI\nDESCRIPTION: Uses the create-flowbite-react CLI to set up a new Bun project with Flowbite React, Tailwind CSS, and all necessary configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/bun.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t bun\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Themes with ThemeProvider in React\nDESCRIPTION: This snippet demonstrates how to use nested ThemeProvider components to create localized theme changes while inheriting from parent themes in Flowbite React.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, createTheme, ThemeProvider } from \"flowbite-react\";\n\nconst mainTheme = createTheme({\n  button: {\n    color: {\n      primary: \"bg-blue-500 hover:bg-blue-600\",\n    },\n    size: {\n      lg: \"px-6 py-3\",\n    },\n  },\n});\n\nconst sectionTheme = createTheme({\n  button: {\n    color: {\n      primary: \"bg-green-500 hover:bg-green-600\",\n      // size.lg from mainTheme is preserved\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={mainTheme}>\n      <Button size=\"lg\">Blue Large Button</Button>\n      <ThemeProvider theme={sectionTheme}>\n        {/* Inherits size.lg from mainTheme */}\n        <Button size=\"lg\">Green Large Button</Button>\n      </ThemeProvider>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using create-flowbite-react with Command Line Arguments\nDESCRIPTION: Syntax for running create-flowbite-react with command line arguments to specify project setup parameters non-interactively.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/packages/cli/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest <project-directory> [options]\n```\n\n----------------------------------------\n\nTITLE: Clearing Theme Values in Flowbite React Components\nDESCRIPTION: This snippet shows how to use the clearTheme prop to selectively or completely remove theme values from Flowbite React components, reverting them to their default styles.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, createTheme, ThemeProvider } from \"flowbite-react\";\n\nconst theme = createTheme({\n  button: {\n    color: {\n      primary: \"bg-red-500 hover:bg-red-600\",\n    },\n    base: \"rounded-lg\",\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button>Red Rounded Button</Button>\n      {/* Clear specific theme property */}\n      <Button clearTheme={{ color: true }}>Default Color, Still Rounded</Button>\n      {/* Clear all button theme values */}\n      <Button clearTheme>Completely Default Button</Button>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Flowbite React project with TanStack Router\nDESCRIPTION: Command to create a new project with Flowbite React and TanStack Router using the create-flowbite-react CLI tool.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-router.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t tanstack-router\n```\n\n----------------------------------------\n\nTITLE: Creating New Flowbite React Project using CLI\nDESCRIPTION: This command creates a new Flowbite React application using popular React frameworks and technologies. It prompts for directory name, template, and git repository initialization.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/packages/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest\n```\n\n----------------------------------------\n\nTITLE: Creating New Flowbite React Project with Meteor.js\nDESCRIPTION: Command to create a new Meteor.js project with Flowbite React using the project creation CLI. Sets up a complete project with Tailwind CSS and all required configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/meteorjs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t meteorjs\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Component Control with Theme Props in React\nDESCRIPTION: This snippet shows how to apply granular theming control to nested components in Flowbite React, focusing on the Navbar component and its child components.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme, Navbar, NavbarCollapse, NavbarLink, ThemeProvider } from \"flowbite-react\";\n\nconst navTheme = createTheme({\n  navbar: {\n    root: {\n      base: \"bg-white shadow-lg\",\n    },\n    collapse: {\n      base: \"w-full md:block md:w-auto\",\n      list: \"mt-4 flex flex-col md:mt-0 md:flex-row md:space-x-8\",\n    },\n    link: {\n      base: \"block px-3 py-2\",\n      active: {\n        on: \"text-blue-600\",\n        off: \"text-gray-900\",\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={navTheme}>\n      <Navbar>\n        {/* Control collapse styles */}\n        <NavbarCollapse\n          clearTheme={{ list: true }} // Remove default list styles\n          applyTheme={{ base: \"replace\" }} // Replace base styles\n        >\n          {/* Control individual link styles */}\n          <NavbarLink\n            href=\"#\"\n            active\n            theme={{\n              base: \"font-medium\",\n              active: {\n                on: \"text-green-600\", // Override active state\n              },\n            }}\n            applyTheme={{\n              active: { on: \"merge\" }, // Merge active state styles\n            }}\n          >\n            Custom Link\n          </NavbarLink>\n        </NavbarCollapse>\n      </Navbar>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Tailwind CSS from v3 to v4\nDESCRIPTION: Command to execute the official Tailwind CSS upgrade process from version 3 to version 4. This is executed using npx to run the @tailwindcss/upgrade package.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/compatibility.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tailwindcss/upgrade\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Button in a Client Component with Flowbite React\nDESCRIPTION: This example shows how to implement a Flowbite React Button with a click handler in a client component, using the 'use client' directive.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/server-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport { Button } from \"flowbite-react\";\n\nfunction ClientComponent() {\n  // ✅ Works: Button with click handler\n  return <Button onClick={() => console.log(\"clicked!\")}>Interactive Button</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rsbuild Project with Flowbite React\nDESCRIPTION: Command to create a new Rsbuild project with Flowbite React, Tailwind CSS, and all necessary configurations using the project creation CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rsbuild.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t rsbuild\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Components in a React Application\nDESCRIPTION: Example React TSX code showing how to import and use a Button component from the Flowbite React library in a React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vite.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default function App() {\n  return <Button>Click me</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Level Control with Theme Props in React\nDESCRIPTION: This example demonstrates how to use theme, clearTheme, and applyTheme props for granular control over component styling in Flowbite React, focusing on the Card component.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card, createTheme } from \"flowbite-react\";\n\nconst cardTheme = createTheme({\n  card: {\n    root: {\n      base: \"rounded-xl bg-white shadow-md\",\n      children: \"space-y-4 p-6\",\n    },\n    img: {\n      base: \"rounded-t-xl\",\n      horizontal: \"h-full w-full rounded-l-xl\",\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <>\n      {/* Basic theme override */}\n      <Card theme={cardTheme.card}>Basic Theme Override</Card>\n\n      {/* Clear specific nested properties */}\n      <Card\n        theme={cardTheme.card}\n        clearTheme={{\n          root: { children: true }, // Clear only padding and spacing\n          img: { horizontal: true }, // Clear horizontal image styles\n        }}\n      >\n        Selective Clearing\n      </Card>\n\n      {/* Control how new styles are applied */}\n      <Card\n        theme={cardTheme.card}\n        applyTheme={{\n          root: { base: \"replace\" }, // Replace entire base styles\n          img: { base: \"merge\" }, // Merge with existing image styles\n        }}\n      >\n        Controlled Style Application\n      </Card>\n\n      {/* Combining all three props */}\n      <Card theme={cardTheme.card} clearTheme={{ root: { children: true } }} applyTheme={{ img: { base: \"replace\" } }}>\n        Complex Style Control\n      </Card>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Component Blueprint Implementation\nDESCRIPTION: Complete implementation of a custom Flowbite React component with theming support, including type declarations and theme resolution\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/custom-components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { createTheme } from \"flowbite-react/helpers/create-theme\";\nimport { get } from \"flowbite-react/helpers/get\";\nimport { resolveProps } from \"flowbite-react/helpers/resolve-props\";\nimport { useResolveTheme } from \"flowbite-react/helpers/resolve-theme\";\nimport { twMerge } from \"flowbite-react/helpers/tailwind-merge\";\nimport { useThemeProvider } from \"flowbite-react/theme/provider\";\nimport type { ThemingProps } from \"flowbite-react/types\";\nimport { forwardRef, type ComponentProps } from \"react\";\n\ndeclare module \"flowbite-react/types\" {\n  interface FlowbiteTheme {\n    myComponent: MyComponentTheme;\n  }\n\n  interface FlowbiteProps {\n    myComponent: Partial<WithoutThemingProps<MyComponentProps>>;\n  }\n}\n\nexport interface MyComponentTheme {\n  base: string;\n  color: MyComponentColors;\n}\n\nexport interface MyComponentColors {\n  info: string;\n  success: string;\n  error: string;\n}\n\nexport const myComponentTheme = createTheme<MyComponentTheme>({\n  base: \"flex items-center font-medium\",\n  color: {\n    info: \"text-blue-600\",\n    success: \"text-green-600\",\n    error: \"text-red-600\",\n  },\n});\n\nexport interface MyComponentProps extends ComponentProps<\"div\">, ThemingProps<MyComponentTheme> {\n  color?: keyof MyComponentColors;\n}\n\nexport const MyComponent = forwardRef<HTMLDivElement, MyComponentProps>((props, ref) => {\n  const provider = useThemeProvider();\n\n  const theme = useResolveTheme(\n    [myComponentTheme, provider.theme?.myComponent, props.theme],\n    [get(provider.clearTheme, \"myComponent\"), props.clearTheme],\n    [get(provider.applyTheme, \"myComponent\"), props.applyTheme],\n  );\n\n  const { children, color = \"info\", className, ...restProps } = resolveProps(props, provider.props?.myComponent);\n\n  return (\n    <div ref={ref} className={twMerge(theme.base, theme.color[color], className)} {...restProps}>\n      {children}\n    </div>\n  );\n});\n\nMyComponent.displayName = \"MyComponent\";\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to Existing Project\nDESCRIPTION: Command to initialize Flowbite React in an existing project. This will install necessary dependencies and set up required configurations automatically.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to an Existing Rsbuild Project\nDESCRIPTION: Command to initialize Flowbite React in an existing Rsbuild project, which automatically installs dependencies and configures Tailwind CSS.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rsbuild.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Example Flowbite React Component Usage\nDESCRIPTION: Sample code demonstrating how to use a Flowbite React Button component in a Waku project with React Server Components.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/waku.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// src/pages/index.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default async function HomePage() {\n  return (\n    <>\n      <Button>Click me</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Theme Clearing in Flowbite React Components\nDESCRIPTION: This example demonstrates how to clear specific nested properties of a theme while keeping others intact using the clearTheme prop in Flowbite React components.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card, createTheme, ThemeProvider } from \"flowbite-react\";\n\nconst theme = createTheme({\n  card: {\n    root: {\n      base: \"rounded-xl shadow-lg\",\n      children: \"space-y-4 p-6\",\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Card>Regular Card</Card>\n      <Card clearTheme={{ root: { children: true } }}>\n        {/* Keeps rounded-xl and shadow-lg, but clears padding and spacing */}\n      </Card>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Flowbite React Component Usage\nDESCRIPTION: Example of using a Flowbite React Button component in a Next.js page component.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/nextjs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// app/page.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default function Page() {\n  return <Button>Click me</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Components\nDESCRIPTION: Example of using a Flowbite React Button component in a React component.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/adonisjs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// inertia/pages/home.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default function Home() {\n  return <Button>Click me</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flowbite React Project with Modern.js\nDESCRIPTION: This command uses the Flowbite React CLI to create a new Modern.js project with Flowbite React, Tailwind CSS, and all necessary configurations pre-set.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/modernjs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t modernjs\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Event Handler in a Client Component with Flowbite React\nDESCRIPTION: This example shows the correct way to implement a Button with an event handler in a client component using the 'use client' directive.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/server-components.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport { Button } from \"flowbite-react\";\n\nfunction ClientComponent() {\n  return <Button onClick={() => console.log(\"clicked!\")}>This Works Fine</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React components in TanStack Start\nDESCRIPTION: Example of how to use Flowbite React components in a TanStack Start route file, demonstrating the import and implementation of a Button component.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-start.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\nimport { createFileRoute } from \"@tanstack/react-router\";\nimport { Button } from \"flowbite-react\";\n\nexport const Route = createFileRoute(\"/\")({ \n  component: Home,\n});\n\nfunction Home() {\n  return (\n    <div className=\"p-2\">\n      <Button>Click me</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dark Mode with ThemeConfig Component\nDESCRIPTION: Implementation of the ThemeConfig component to disable dark mode at application runtime, preventing the dark mode toggle functionality from working.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/dark-mode.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeConfig } from \"flowbite-react\";\n\nfunction App() {\n  return (\n    <>\n      <ThemeConfig dark={false} />\n      {/* Your application */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component from Flowbite React\nDESCRIPTION: This snippet shows how to import the Button component from the Flowbite React library, which is the first step to using buttons in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Creating New Components via CLI\nDESCRIPTION: Command line instruction for creating new components using the Flowbite React CLI tool.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/config.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest create my-component\n```\n\n----------------------------------------\n\nTITLE: Creating new Flowbite React project with @lazarv/react-server\nDESCRIPTION: Command to create a new @lazarv/react-server project with Flowbite React, Tailwind CSS, and all necessary configurations using the project creation CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-server.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t react-server\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Components in Astro\nDESCRIPTION: Demonstrates how to use Flowbite React components in an Astro page after successful installation.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/astro.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// src/pages/index.astro\n---\nimport { Button } from \"flowbite-react\";\nimport RootLayout from \"../layouts/index.astro\";\n---\n\n<RootLayout>\n  <Button>Click me</Button>\n</RootLayout>\n```\n\n----------------------------------------\n\nTITLE: Type Safety and IntelliSense with Flowbite React Themes\nDESCRIPTION: This snippet demonstrates how the createTheme helper ensures type safety and enables Tailwind CSS IntelliSense in the IDE when creating custom themes for Flowbite React components.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme } from \"flowbite-react\";\n\n// Full theme customization\nconst theme = createTheme({\n  button: {\n    color: {\n      primary: \"bg-blue-500 hover:bg-blue-600\", // ✓ Tailwind CSS IntelliSense\n      custom: 123, // ✗ Type error: expected string\n    },\n  },\n});\n\n// Single component theme\nconst buttonTheme = createTheme({\n  button: {\n    size: {\n      xl: \"px-8 py-4 text-xl\", // ✓ Tailwind CSS IntelliSense\n    },\n  },\n}).button;\n```\n\n----------------------------------------\n\nTITLE: Updating React Application with ThemeConfig in TSX\nDESCRIPTION: Render the ThemeConfig component at the root of your React application, specifying the same prefix used in the configuration files. This ensures all Flowbite React components use the specified prefix for their Tailwind CSS classes.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/prefix.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeConfig } from \"flowbite-react\";\n\nexport default function App() {\n  return (\n    <>\n      <ThemeConfig prefix=\"tw\" />\n      {/* ... */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MegaMenu Component from Flowbite React\nDESCRIPTION: This snippet demonstrates how to import the MegaMenu component from the Flowbite React library. This is the first step in using the mega menu functionality in a React project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/mega-menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MegaMenu } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to existing @lazarv/react-server project\nDESCRIPTION: Command to add Flowbite React to an existing @lazarv/react-server project using the initialization CLI. This installs Flowbite React, configures Tailwind CSS, and sets up necessary configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-server.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Theme Merging Strategy in React\nDESCRIPTION: This snippet illustrates the theme merging strategy in Flowbite React, showing how different levels of customization can be applied using theme, clearTheme, and applyTheme props.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, createTheme, ThemeProvider } from \"flowbite-react\";\n\nconst baseTheme = createTheme({\n  button: {\n    base: \"rounded-lg shadow-md\",\n    color: {\n      primary: \"bg-blue-500 text-white\",\n    },\n  },\n});\n\nconst customTheme = createTheme({\n  button: {\n    base: \"border-2\",\n    color: {\n      primary: \"bg-red-500\",\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={baseTheme}>\n      {/* Merges themes: rounded-lg shadow-md border-2 */}\n      <Button theme={customTheme.button}>Merged Styles</Button>\n\n      {/* Replaces base completely: only border-2 remains */}\n      <Button theme={customTheme.button} applyTheme={{ base: \"replace\" }}>\n        Replaced Base Style\n      </Button>\n\n      {/* Replaces color completely: loses text-white */}\n      <Button theme={customTheme.button} applyTheme={{ color: { primary: \"replace\" } }}>\n        Replaced Color\n      </Button>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React components in TanStack Router routes\nDESCRIPTION: TypeScript React example showing how to use Flowbite React components within a TanStack Router route definition.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-router.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/index.tsx\nimport { createFileRoute } from \"@tanstack/react-router\";\nimport { Button } from \"flowbite-react\";\n\nexport const Route = createFileRoute(\"/\")({  \n  component: HomeComponent,\n});\n\nfunction HomeComponent() {\n  return (\n    <div className=\"p-2\">\n      <Button>Click me</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Component with className in React\nDESCRIPTION: This snippet demonstrates how to use the className prop to override or extend the default styles of a Button component in Flowbite React.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"flowbite-react\";\n\nfunction App() {\n  return <Button className=\"bg-red-500 hover:bg-red-600\">Custom Button</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React components in a Vike page\nDESCRIPTION: Example of importing and using a Button component from Flowbite React in a Vike page component. This demonstrates how to implement Flowbite React UI components after installation.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vike.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/index/+Page.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default function Page() {\n  return <Button>Click me</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running create-flowbite-react in Interactive Mode\nDESCRIPTION: Command to execute the create-flowbite-react CLI in interactive mode, which will prompt you for project directory, template choice, and git initialization preferences.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/packages/cli/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React in a Manual Setup\nDESCRIPTION: Command to install and initialize Flowbite React in a manually configured Blitz.js project. This handles installation of dependencies and configuration of both Tailwind CSS and Vite plugins.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/blitzjs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Migrating Compound Components in Flowbite React\nDESCRIPTION: This TypeScript/JSX snippet demonstrates the migration process for compound components, transforming Accordion.Panel to AccordionPanel and updating import statements.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/cli.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { Accordion } from \"flowbite-react\";\n\n<Accordion.Panel>...</Accordion.Panel>\n\n// After\nimport { AccordionPanel } from \"flowbite-react\";\n\n<AccordionPanel>...</AccordionPanel>\n```\n\n----------------------------------------\n\nTITLE: Hydrating Flowbite React Components in Astro\nDESCRIPTION: Shows how to make Flowbite React components interactive by adding client-side hydration directives.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/astro.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<DarkThemeToggle client:load />\n```\n\n----------------------------------------\n\nTITLE: Customizing Colors in Tailwind CSS v3 Configuration\nDESCRIPTION: This snippet demonstrates how to customize colors by extending the theme in the tailwind.config.js file for Tailwind CSS v3. It overrides the primary color shades.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/colors.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nexport default {\n  theme: {\n    extend: {\n      colors: {\n        // Override primary colors\n        primary: {\n          50: \"#f0f9ff\",\n          100: \"#e0f2fe\",\n          200: \"#bae6fd\",\n          300: \"#7dd3fc\",\n          400: \"#38bdf8\",\n          500: \"#0ea5e9\",\n          600: \"#0284c7\",\n          700: \"#0369a1\",\n          800: \"#075985\",\n          900: \"#0c4a6e\",\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Base Colors in JavaScript for Flowbite React\nDESCRIPTION: This snippet defines the complete set of base colors with their full spectrum for use in Flowbite React components. It includes shades for gray, red, orange, yellow, green, teal, blue, indigo, purple, and pink.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/colors.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst baseColors = {\n  gray: {\n    50: \"#F9FAFB\",\n    100: \"#F3F4F6\",\n    200: \"#E5E7EB\",\n    300: \"#D1D5DB\",\n    400: \"#9CA3AF\",\n    500: \"#6B7280\",\n    600: \"#4B5563\",\n    700: \"#374151\",\n    800: \"#1F2937\",\n    900: \"#111827\",\n  },\n  red: {\n    50: \"#FDF2F2\",\n    100: \"#FDE8E8\",\n    200: \"#FBD5D5\",\n    300: \"#F8B4B4\",\n    400: \"#F98080\",\n    500: \"#F05252\",\n    600: \"#E02424\",\n    700: \"#C81E1E\",\n    800: \"#9B1C1C\",\n    900: \"#771D1D\",\n  },\n  orange: {\n    50: \"#FFF8F1\",\n    100: \"#FEECDC\",\n    200: \"#FCD9BD\",\n    300: \"#FDBA8C\",\n    400: \"#FF8A4C\",\n    500: \"#FF5A1F\",\n    600: \"#D03801\",\n    700: \"#B43403\",\n    800: \"#8A2C0D\",\n    900: \"#771D1D\",\n  },\n  yellow: {\n    50: \"#FDFDEA\",\n    100: \"#FDF6B2\",\n    200: \"#FCE96A\",\n    300: \"#FACA15\",\n    400: \"#E3A008\",\n    500: \"#C27803\",\n    600: \"#9F580A\",\n    700: \"#8E4B10\",\n    800: \"#723B13\",\n    900: \"#633112\",\n  },\n  green: {\n    50: \"#F3FAF7\",\n    100: \"#DEF7EC\",\n    200: \"#BCF0DA\",\n    300: \"#84E1BC\",\n    400: \"#31C48D\",\n    500: \"#0E9F6E\",\n    600: \"#057A55\",\n    700: \"#046C4E\",\n    800: \"#03543F\",\n    900: \"#014737\",\n  },\n  teal: {\n    50: \"#EDFAFA\",\n    100: \"#D5F5F6\",\n    200: \"#AFECEF\",\n    300: \"#7EDCE2\",\n    400: \"#16BDCA\",\n    500: \"#0694A2\",\n    600: \"#047481\",\n    700: \"#036672\",\n    800: \"#05505C\",\n    900: \"#014451\",\n  },\n  blue: {\n    50: \"#EBF5FF\",\n    100: \"#E1EFFE\",\n    200: \"#C3DDFD\",\n    300: \"#A4CAFE\",\n    400: \"#76A9FA\",\n    500: \"#3F83F8\",\n    600: \"#1C64F2\",\n    700: \"#1A56DB\",\n    800: \"#1E429F\",\n    900: \"#233876\",\n  },\n  indigo: {\n    50: \"#F0F5FF\",\n    100: \"#E5EDFF\",\n    200: \"#CDDBFE\",\n    300: \"#B4C6FC\",\n    400: \"#8DA2FB\",\n    500: \"#6875F5\",\n    600: \"#5850EC\",\n    700: \"#5145CD\",\n    800: \"#42389D\",\n    900: \"#362F78\",\n  },\n  purple: {\n    50: \"#F6F5FF\",\n    100: \"#EDEBFE\",\n    200: \"#DCD7FE\",\n    300: \"#CABFFD\",\n    400: \"#AC94FA\",\n    500: \"#9061F9\",\n    600: \"#7E3AF2\",\n    700: \"#6C2BD9\",\n    800: \"#5521B5\",\n    900: \"#4A1D96\",\n  },\n  pink: {\n    50: \"#FDF2F8\",\n    100: \"#FCE8F3\",\n    200: \"#FAD1E8\",\n    300: \"#F8B4D9\",\n    400: \"#F17EB8\",\n    500: \"#E74694\",\n    600: \"#D61F69\",\n    700: \"#BF125D\",\n    800: \"#99154B\",\n    900: \"#751A3D\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to an Existing Vite Project\nDESCRIPTION: Command to add Flowbite React to an existing Vite project using the initialization CLI. This automatically installs dependencies and configures Tailwind CSS with the Flowbite plugin.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vite.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to an Existing RedwoodJS Project\nDESCRIPTION: Command to initialize Flowbite React in an existing RedwoodJS project. This installs Flowbite React and its dependencies, configures Tailwind CSS, and sets up necessary configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/redwoodjs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Importing Flowbite React Form Components\nDESCRIPTION: Example showing how to import various form components from the flowbite-react library, including Button, Checkbox, FileInput, Label, Radio, RangeSlider, Select, Textarea, TextInput, and ToggleSwitch\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/forms.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// only import what you want to use\nimport {\n  Button,\n  Checkbox,\n  FileInput,\n  Label,\n  Radio,\n  RangeSlider,\n  Select,\n  Textarea,\n  TextInput,\n  ToggleSwitch,\n} from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to an existing TanStack Start project\nDESCRIPTION: Command to initialize Flowbite React in an existing TanStack Start project, which installs dependencies and configures Tailwind CSS automatically.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-start.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: UseThemeMode Hook TypeScript Interface Definition\nDESCRIPTION: TypeScript type definitions for the useThemeMode hook API, showing the available properties and methods for managing theme state in Flowbite React applications.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/dark-mode.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype ThemeMode = \"light\" | \"dark\" | \"auto\";\n\ndeclare const useThemeMode: () => {\n  mode: ThemeMode;\n  computedMode: ThemeMode; // \"light\" | \"dark\"\n  setMode: (mode: ThemeMode) => void;\n  toggleMode: () => void;\n  clearMode: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Components in a Farm Project\nDESCRIPTION: Example React component that demonstrates importing and using a Flowbite React Button component in a Farm project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/farm.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// src/main.tsx\nimport { Button } from \"flowbite-react\";\n\nexport function Main() {\n  return (\n    <>\n      <Button>Click me</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new TanStack Start project with Flowbite React\nDESCRIPTION: Command to create a new TanStack Start project with Flowbite React, Tailwind CSS, and all necessary configurations using the project creation CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-start.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t tanstack-start\n```\n\n----------------------------------------\n\nTITLE: Creating New AdonisJS Project with Flowbite React\nDESCRIPTION: Command to create a new AdonisJS project with Flowbite React pre-configured using the project creation CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/adonisjs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t adonisjs\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to Existing Farm Project\nDESCRIPTION: Command to initialize Flowbite React in an existing Farm project, which installs Flowbite React and dependencies, configures Tailwind CSS, and sets up necessary configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/farm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React with React Router CLI\nDESCRIPTION: Command to create a new React Router project with Flowbite React using the project creation CLI. This sets up a complete project with all necessary configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-router.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t react-router\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Component in Laravel\nDESCRIPTION: Example of how to use a Flowbite React component (Button) in a Laravel project after installation. This code should be placed in a React component file.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/laravel.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// resources/js/pages/welcome.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default function Welcome() {\n  return <Button>Click me</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flowbite React in Existing Rspack Project\nDESCRIPTION: Command to add Flowbite React to an existing Rspack project using the initialization CLI. This installs Flowbite React and sets up required configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rspack.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React with NextJS Template using CLI\nDESCRIPTION: This command uses the Flowbite React CLI to create a new project named 'my-app' using the NextJS template. It demonstrates how to use the '--template' or '-t' flag to specify a particular framework template.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/cli.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest my-app -t nextjs\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Components in Gatsby\nDESCRIPTION: Example of importing and using a Button component from Flowbite React in a Gatsby page. This demonstrates how to use components from the library after installation.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/gatsby.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// src/pages/index.tsx (or .jsx)\nimport { Button } from \"flowbite-react\";\n\nexport default function IndexPage() {\n  return <Button>Click me</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Navbar Component from Flowbite React\nDESCRIPTION: This snippet shows how to import the Navbar component from the Flowbite React library. This is the first step in using the navbar component in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/navbar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Navbar } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Creating New Gatsby Project with Flowbite React using CLI\nDESCRIPTION: Command to create a new Gatsby project with Flowbite React pre-configured. This sets up a complete project with Tailwind CSS, Flowbite React, dark mode support, and example components.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/gatsby.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t gatsby\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from Flowbite-React\nDESCRIPTION: Basic import statement for using the Card component from the Flowbite-React library.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to an existing TanStack Router project\nDESCRIPTION: Command to add Flowbite React to an existing TanStack Router project using the flowbite-react initialization CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-router.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Initializing Flowbite React in Existing Project\nDESCRIPTION: Command to add Flowbite React to an existing React Router project using the initialization CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-router.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Components in a Rsbuild Project\nDESCRIPTION: Example React component that demonstrates how to import and use a Button component from Flowbite React in a Rsbuild application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rsbuild.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\nimport { Button } from \"flowbite-react\";\n\nexport function App() {\n  return (\n    <>\n      <Button>Click me</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Component from Flowbite React\nDESCRIPTION: Basic import statement for the Accordion component from Flowbite React, which is required before using any accordion functionality in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Creating Flowbite React Astro Project with CLI\nDESCRIPTION: Uses the Flowbite React CLI to create a new Astro project with Flowbite React, Tailwind CSS, and all necessary configurations pre-set.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/astro.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t astro\n```\n\n----------------------------------------\n\nTITLE: Importing Drawer Component from Flowbite-React\nDESCRIPTION: Basic import statement for the Drawer component from the flowbite-react library.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/drawer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Drawer } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Creating New Flowbite React Project\nDESCRIPTION: Command to create a new Flowbite React project using the CLI tool. This will prompt for directory name, template selection, and git repository initialization options.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Flowbite React CLI Options\nDESCRIPTION: This JSON snippet shows the configuration options available in the .flowbite-react/config.json file, including component paths, TypeScript usage, and React Server Components support.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://unpkg.com/flowbite-react/schema.json\",\n  \"components\": [],\n  \"dark\": true,\n  \"path\": \"src/components\",\n  \"prefix\": \"\",\n  \"rsc\": true,\n  \"tsx\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Button Component in App\nDESCRIPTION: Demonstrates how to use a Flowbite React component (Button) in the main App component after installation.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/bun.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default function App() {\n  return <Button>Click me</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Component from Flowbite-React\nDESCRIPTION: Basic import statement to include the Modal component from the Flowbite-React library in your project\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/modal.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Modal } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Creating a RedwoodJS Project with Flowbite React using CLI\nDESCRIPTION: Command to create a new RedwoodJS project with Flowbite React pre-configured using the project creation CLI. This sets up a new project with all necessary dependencies and configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/redwoodjs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t redwoodjs\n```\n\n----------------------------------------\n\nTITLE: Importing Clipboard Component in React\nDESCRIPTION: This snippet shows how to import the Clipboard component from the flowbite-react library. This import is necessary to use the clipboard functionality in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/clipboard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Clipboard } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vike project with Flowbite React using CLI\nDESCRIPTION: Command to create a new Vike project with Flowbite React pre-configured using the create-flowbite-react CLI tool. This sets up a new project with all necessary dependencies and configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vike.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t vike\n```\n\n----------------------------------------\n\nTITLE: Implementing an Interactive Widget with Flowbite React in a Client Component\nDESCRIPTION: This snippet demonstrates how to create an interactive widget using Flowbite React components in a client component, showcasing the use of the 'use client' directive for interactivity.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/server-components.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport { Button, Modal } from \"flowbite-react\";\n\nfunction InteractiveWidget() {\n  // ✅ Use client components when you need interactivity\n  return <Button onClick={() => setIsOpen(true)}>Open Modal</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in Modern.js\nDESCRIPTION: This TypeScript code updates the Modern.js configuration file to include Tailwind CSS. It imports necessary modules and adds Tailwind CSS to the PostCSS plugins.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/modernjs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { appTools, defineConfig } from \"@modern-js/app-tools\";\nimport tailwindcss from \"@tailwindcss/postcss\";\n\n// https://modernjs.dev/en/configure/app/usage\nexport default defineConfig({\n  runtime: {\n    router: true,\n  },\n  plugins: [\n    appTools({\n      bundler: \"rspack\", // Set to 'webpack' to enable webpack\n    }),\n  ],\n  tools: {\n    postcss: {\n      postcssOptions: {\n        plugins: [tailwindcss],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Sidebar Component from Flowbite React\nDESCRIPTION: Basic import statement for the Sidebar component from the Flowbite React library. This is the first step required to use the sidebar functionality in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/sidebar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Sidebar } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Flowbite React Configuration\nDESCRIPTION: Configuration options for customizing component generation in .flowbite-react/config.json\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/custom-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://unpkg.com/flowbite-react/schema.json\",\n  \"components\": [],\n  \"path\": \"src/components\",\n  \"prefix\": \"\",\n  \"rsc\": true,\n  \"tsx\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tailwind CSS v3 Prefix in JavaScript Configuration\nDESCRIPTION: Configure the prefix in Tailwind CSS v3 setup using the 'prefix' property in the configuration object. This method allows for special characters in the prefix.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/prefix.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nexport default {\n  prefix: \"tw-\",\n  // ... rest of your config\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React in Modern.js Project\nDESCRIPTION: This command installs Flowbite React and its dependencies, configures Tailwind CSS to include Flowbite React plugin, and sets up necessary configurations in a Modern.js project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/modernjs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Implementing a Static Button in a Server Component using Flowbite React\nDESCRIPTION: This snippet demonstrates how to use a Flowbite React Button component in a server component without any interactivity.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/server-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"flowbite-react\";\n\nfunction ServerComponent() {\n  // ✅ Works: Static button without interactions\n  return <Button>Click Me</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ThemeModeScript for Dark Mode Support\nDESCRIPTION: Enhanced gatsby-ssr.js configuration that adds ThemeModeScript to prevent page flickering when dark mode is set. This is important for server-side rendered applications like Gatsby.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/gatsby.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// gatsby-ssr.js\nimport { ThemeModeScript } from \"flowbite-react\";\n\nexport const onRenderBody = ({ setPreBodyComponents }) => {\n  setPreBodyComponents([ThemeModeScript]);\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Event Handler in a Server Component with Flowbite React\nDESCRIPTION: This snippet illustrates an incorrect implementation of a Button with an event handler in a server component, which will cause an error.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/server-components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// This will cause an error!\nimport { Button } from \"flowbite-react\";\n\nfunction ServerComponent() {\n  return <Button onClick={() => console.log(\"clicked!\")}>This Won't Work</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Schema for Flowbite React\nDESCRIPTION: JSON schema definition for the config.json file that controls Flowbite React's component style generation and management settings.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/config.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"components\": {\n      \"description\": \"List of component names to generate styles for. Empty array enables automatic detection.\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"*\"\n          // ...rest of the components\n        ]\n      },\n      \"uniqueItems\": true\n    },\n    \"dark\": {\n      \"description\": \"Whether to generate dark mode styles\",\n      \"type\": \"boolean\",\n      \"default\": true\n    },\n    \"path\": {\n      \"description\": \"Path where components will be created, relative to the project root\",\n      \"type\": \"string\",\n      \"default\": \"src/components\"\n    },\n    \"prefix\": {\n      \"description\": \"Optional prefix to apply to all Tailwind CSS classes\",\n      \"type\": \"string\"\n    },\n    \"rsc\": {\n      \"description\": \"Whether to include the 'use client' directive for React Server Components\",\n      \"type\": \"boolean\",\n      \"default\": true\n    },\n    \"tsx\": {\n      \"description\": \"Whether to use TypeScript (.tsx) or JavaScript (.jsx) for component creation\",\n      \"type\": \"boolean\",\n      \"default\": true\n    }\n  },\n  \"required\": [\"components\", \"dark\", \"path\", \"prefix\", \"rsc\", \"tsx\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v4 Prefix in CSS\nDESCRIPTION: Set the prefix for Tailwind CSS v4 using the @import statement with the prefix function. Note that special characters are not allowed in this version.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/prefix.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\" prefix(tw);\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React in Existing Project\nDESCRIPTION: Command to initialize Flowbite React in an existing Parcel project\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode in App Router\nDESCRIPTION: Implementation of dark mode support in Next.js App Router layout to prevent page flicker before hydration.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/nextjs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// app/layout.tsx\nimport { ThemeModeScript } from \"flowbite-react\";\n\nexport default function RootLayout({ children }) {\n  return (\n    <html suppressHydrationWarning>\n      <head>\n        <ThemeModeScript />\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode in Astro Layout\nDESCRIPTION: Adds the ThemeModeScript component to the root layout to prevent dark mode flickering.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/astro.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// src/layouts/index.astro\n---\nimport { ThemeModeScript } from \"flowbite-react\";\n---\n\n<html lang=\"en\">\n  <head>\n    <ThemeModeScript />\n  </head>\n  <body>\n    <slot />\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React Manually\nDESCRIPTION: Command to install Flowbite React and its dependencies, configure Tailwind CSS, and set up Vite plugin for manual integration.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/laravel.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Flowbite React Prefix in JSON\nDESCRIPTION: Modify the 'prefix' property in the .flowbite-react/config.json file to set a custom prefix for Flowbite React components.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/prefix.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://unpkg.com/flowbite-react/schema.json\",\n  \"components\": [],\n  \"dark\": true,\n  \"path\": \"components\",\n  \"prefix\": \"tw\",\n  \"rsc\": true,\n  \"tsx\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Components in a Blitz.js Page\nDESCRIPTION: Example of how to use Flowbite React components in a Blitz.js application. This imports a Button component from Flowbite React and renders it with some basic styling and content.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/blitzjs.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// app/pages/index.tsx\nimport { Button } from \"flowbite-react\";\n\nfunction Home() {\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"mb-4 text-2xl font-bold\">Welcome to Blitz.js with Flowbite React</h1>\n      <Button>Click me</Button>\n    </div>\n  );\n}\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React Manually\nDESCRIPTION: Command to install and initialize Flowbite React in a Vite project that already has Tailwind CSS configured.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vite.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Components\nDESCRIPTION: Example of importing and using a Flowbite React component (Button) in a React component file.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rspack.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\nimport { Button } from \"flowbite-react\";\n\nexport function App() {\n  return (\n    <>\n      <Button>Click me</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Tailwind CSS\nDESCRIPTION: TypeScript configuration for Vite to include the Tailwind CSS plugin. This sets up the necessary Vite plugins in the configuration file.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vite.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport tailwindcss from \"@tailwindcss/vite\";\nimport react from \"@vitejs/plugin-react\";\nimport { defineConfig } from \"vite\";\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react(), tailwindcss()],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React Manually\nDESCRIPTION: Command to install Flowbite React and configure it with Tailwind CSS and Vite in a Gatsby project. This is part of the manual setup process.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/gatsby.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Support\nDESCRIPTION: React component setup to prevent dark mode flickering using ThemeModeScript from Flowbite React.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/adonisjs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// inertia/app/ssr.tsx\nimport { createInertiaApp } from \"@inertiajs/react\";\nimport { ThemeModeScript } from \"flowbite-react\";\nimport ReactDOMServer from \"react-dom/server\";\n\nexport default function render(page: any) {\n  return createInertiaApp({\n    page,\n    render: ReactDOMServer.renderToString,\n    resolve: (name) => {\n      const pages = import.meta.glob(\"../pages/**/*.tsx\", { eager: true });\n      return pages[`../pages/${name}.tsx`];\n    },\n    setup: ({ App, props }) => (\n      <>\n        <ThemeModeScript />\n        <App {...props} />\n      </>\n    ),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React components in a Remix application\nDESCRIPTION: Example of importing and using a Button component from Flowbite React in a Remix route file.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/remix.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_index.tsx\n\nimport { Button } from \"flowbite-react\";\n\nexport default function Index() {\n  return <Button>Click me</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React manually\nDESCRIPTION: Command to install and initialize Flowbite React in a manually created Vike project. This handles the installation of dependencies and configuration of Tailwind CSS.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vike.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Components\nDESCRIPTION: Example of using a Flowbite React Button component in the application\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"flowbite-react\";\n\nexport default function App() {\n  return <Button>Click me</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Mode Configuration Example\nDESCRIPTION: Example configuration for automatic component detection mode where the system scans codebase for component imports.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/config.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://unpkg.com/flowbite-react/schema.json\",\n  \"components\": [],\n  \"path\": \"src/components\",\n  \"prefix\": \"\",\n  \"rsc\": true,\n  \"tsx\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode in @lazarv/react-server with Flowbite React\nDESCRIPTION: React code snippet showing how to add the ThemeModeScript component to the root layout for supporting dark mode in a @lazarv/react-server application with Flowbite React.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-server.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\nimport { ThemeModeScript } from \"flowbite-react\";\n\nexport function App() {\n  return (\n    <html lang=\"en\" className=\"h-screen\" suppressHydrationWarning>\n      <head>\n        <ThemeModeScript />\n      </head>\n      {/* Rest of your app */}\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode in Remix with ThemeModeScript\nDESCRIPTION: Code snippet showing how to prevent page flicker with dark mode in Remix by rendering the ThemeModeScript component in the head tag of app/root.tsx.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/remix.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeModeScript } from \"flowbite-react\";\n\nexport default function Layout() {\n  return (\n    <html lang=\"en\">\n      <head>\n        {/* ... */}\n        <ThemeModeScript />\n      </head>\n      <body>{/* ... */}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FileInput Component - React/Flowbite\nDESCRIPTION: Basic import statement for the FileInput component from Flowbite React library. This import is required before using any FileInput functionality in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/forms/file-input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FileInput } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Creating New Bun Project with React and Tailwind CSS\nDESCRIPTION: Sets up a new Bun project directory and initializes it with React and Tailwind CSS templates.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/bun.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-app && cd my-app\nbun init\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React components in @lazarv/react-server\nDESCRIPTION: Example of using a Flowbite React component (Button) in a @lazarv/react-server application, demonstrating the integration and usage of the library.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-server.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default function App() {\n  return (\n    <html lang=\"en\" className=\"h-screen\" suppressHydrationWarning>\n      <head></head>\n      <body\n        className=\"flex min-h-full w-full flex-col items-center justify-center dark:bg-zinc-900 dark:text-gray-400\"\n        suppressHydrationWarning\n      >\n        <Button>Click me</Button>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Remix project with Flowbite React using CLI\nDESCRIPTION: Command to create a new Remix project with Flowbite React, Tailwind CSS, and all necessary configurations using the create-flowbite-react CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/remix.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t remix\n```\n\n----------------------------------------\n\nTITLE: Component-Specific Theme in Flowbite React\nDESCRIPTION: This example shows how to apply a custom theme to a specific component instance using the theme prop in Flowbite React.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, createTheme } from \"flowbite-react\";\n\nconst buttonTheme = createTheme({\n  button: {\n    color: {\n      custom: \"bg-purple-500 text-white hover:bg-purple-600\",\n    },\n  },\n}).button;\n\nfunction App() {\n  return (\n    <Button theme={buttonTheme} color=\"custom\">\n      Purple Button\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to Existing Gatsby Project\nDESCRIPTION: Command to add Flowbite React to an existing Gatsby project. This installs Flowbite React and its dependencies, configures Tailwind CSS, and sets up dark mode support.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/gatsby.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Importing ListGroup Component from Flowbite-React\nDESCRIPTION: Basic import statement to use the ListGroup component from the Flowbite-React library.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/list-group.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListGroup } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Creating a New Vite Project Manually\nDESCRIPTION: Command to create a new Vite project with React and TypeScript as the first step in the manual setup process.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vite.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-vite@latest my-app\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Example Flowbite React Component Usage\nDESCRIPTION: Sample React component demonstrating how to use Flowbite React components in a Meteor.js application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/meteorjs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// imports/ui/App.tsx (or .jsx)\nimport { Button } from \"flowbite-react\";\nimport React from \"react\";\n\nexport const App = () => (\n  <>\n    <Button>Click me</Button>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Project with Flowbite React using CLI\nDESCRIPTION: Command to create a new Laravel project with Flowbite React, Tailwind CSS, and all necessary configurations using the project creation CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/laravel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t laravel\n```\n\n----------------------------------------\n\nTITLE: Provider-Level Props in Flowbite React\nDESCRIPTION: This snippet demonstrates how to use the props prop in ThemeProvider to set default props for all components within its scope, and how these props are merged and overridden in nested providers and individual components.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, ThemeProvider } from \"flowbite-react\";\n\nfunction App() {\n  return (\n    <ThemeProvider\n      props={{\n        // Set default props for all buttons\n        button: {\n          color: \"success\",\n          size: \"lg\",\n        },\n      }}\n    >\n      {/* Will be large and green */}\n      <Button>Inherits Provider Props</Button>\n\n      {/* Will be large and red (color prop overrides provider) */}\n      <Button color=\"error\">Overrides Color Prop</Button>\n\n      {/* Nested providers merge props by default */}\n      <ThemeProvider\n        props={{\n          button: {\n            size: \"sm\", // Override size while keeping color from parent\n          },\n        }}\n      >\n        {/* Will be small and green */}\n        <Button>Inherits Merged Props</Button>\n      </ThemeProvider>\n\n      {/* root={true} prevents props inheritance */}\n      <ThemeProvider\n        root\n        props={{\n          button: {\n            size: \"sm\",\n          },\n        }}\n      >\n        {/* Will be small with default color */}\n        <Button>Independent Props</Button>\n      </ThemeProvider>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flowbite React in Existing Astro Project\nDESCRIPTION: Uses the Flowbite React initialization CLI to add Flowbite React to an existing Astro project, including installation of dependencies and configuration of Tailwind CSS.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/astro.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Importing the List Component in React\nDESCRIPTION: Basic import statement to use the List component from Flowbite React in your project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/typography/list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { List } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS for Vite\nDESCRIPTION: Command to install Tailwind CSS and its Vite plugin as part of the manual setup process for a Flowbite React project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vite.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss @tailwindcss/vite\n```\n\n----------------------------------------\n\nTITLE: Library Mode Component Example\nDESCRIPTION: Example of using Flowbite React Button component in library mode.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-router.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default function App() {\n  return (\n    <>\n      <Button>Click me</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Blitz.js Project with Flowbite React using CLI\nDESCRIPTION: Command to quickly create a new Blitz.js project with Flowbite React and Tailwind CSS pre-configured. This sets up a complete project with dark mode support and example components.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/blitzjs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t blitzjs\n```\n\n----------------------------------------\n\nTITLE: Preventing Theme Inheritance with root Prop in React\nDESCRIPTION: This example shows how to use the root prop in ThemeProvider to prevent theme inheritance from parent providers in Flowbite React, creating isolated theme sections.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/theme.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, createTheme, ThemeProvider } from \"flowbite-react\";\n\nconst mainTheme = createTheme({\n  button: {\n    color: {\n      primary: \"bg-blue-500 hover:bg-blue-600\",\n    },\n    size: {\n      lg: \"px-6 py-3\",\n    },\n  },\n});\n\nconst isolatedTheme = createTheme({\n  button: {\n    color: {\n      primary: \"bg-green-500 hover:bg-green-600\",\n    },\n    // No size definitions\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={mainTheme}>\n      <Button size=\"lg\">Large Blue Button</Button>\n\n      {/* root={true} prevents merging with mainTheme */}\n      <ThemeProvider theme={isolatedTheme} root>\n        <Button size=\"lg\">\n          {/* size=\"lg\" will use default theme since isolatedTheme\n              doesn't define sizes and parent theme is ignored */}\n        </Button>\n      </ThemeProvider>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Component in Modern.js\nDESCRIPTION: This TSX code demonstrates how to use a Flowbite React component (Button) in a Modern.js project after installation. It imports the Button component and renders it within a div.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/modernjs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/page.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default function Index() {\n  return (\n    <div className=\"p-4\">\n      <Button>Click me</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode in Flowbite React JSON Configuration\nDESCRIPTION: JSON configuration for disabling dark mode during build time in the .flowbite-react/config.json file, which prevents dark mode classes from being generated and reduces CSS bundle size.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/dark-mode.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://unpkg.com/flowbite-react/schema.json\",\n  \"components\": [],\n  \"dark\": false,\n  \"path\": \"src/components\",\n  \"prefix\": \"\",\n  \"rsc\": true,\n  \"tsx\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TanStack Start project from scratch\nDESCRIPTION: Command to create a new TanStack Start project from scratch using degit to clone the basic example repository.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-start.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit https://github.com/tanstack/router/examples/react/start-basic start-basic\ncd start-basic\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React Components in RedwoodJS\nDESCRIPTION: Example of importing and using a Flowbite React Button component in a RedwoodJS homepage. This demonstrates how to integrate Flowbite React UI components after installation.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/redwoodjs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// web/src/pages/HomePage/HomePage.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default function HomePage() {\n  return (\n    <>\n      <Button>Click me</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Waku Project with Flowbite React\nDESCRIPTION: Command to create a new Waku project with Flowbite React using the project creation CLI. This sets up a complete project with Tailwind CSS and all necessary configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/waku.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t waku\n```\n\n----------------------------------------\n\nTITLE: Customizing HR Component Theme in React\nDESCRIPTION: This example shows how to access and customize the theme for the HR component.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/typography/hr.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme name=\"hr\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Dropdown Component from Flowbite React\nDESCRIPTION: This snippet shows how to import the Dropdown component from the Flowbite React library. This is the first step in using the dropdown functionality in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/dropdown.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dropdown } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Defining Background Images for UI Components in JavaScript\nDESCRIPTION: This snippet defines a set of background images used for various UI components in Flowbite React. It includes SVG data URIs for arrow-down, check, dash, and dot icons.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/colors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst backgroundImage = {\n  \"arrow-down-icon\":\n    \"url('data:image/svg+xml,%3Csvg%20aria-hidden%3D%22true%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill%3D%22none%22%20viewBox%3D%220%200%2010%206%22%3E%3Cpath%20stroke%3D%22%236B7280%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-width%3D%222%22%20d%3D%22m1%201%204%204%204-4%22%2F%3E%3C%2Fsvg%3E')\",\n  \"check-icon\":\n    \"url('data:image/svg+xml,%3Csvg%20aria-hidden%3D%27true%27%20xmlns%3D%27http://www.w3.org/2000/svg%27%20fill%3D%27none%27%20viewBox%3D%270%200%2016%2012%27%3E%3Cpath%20stroke%3D%27white%27%20stroke-linecap%3D%27round%27%20stroke-linejoin%3D%27round%27%20stroke-width%3D%273%27%20d%3D%27M1%205.917%205.724%2010.5%2015%201.5%27/%3E%3C/svg%3E')\",\n  \"dash-icon\":\n    \"url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill%3D%22none%22%20viewBox%3D%220%200%2016%2012%22%3E%3Cpath%20stroke%3D%22white%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-width%3D%223%22%20d%3D%22M0.5%206h14%22%2F%3E%3C%2Fsvg%3E')\",\n  \"dot-icon\":\n    \"url('data:image/svg+xml,%3Csvg%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22white%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Ccircle%20cx%3D%228%22%20cy%3D%228%22%20r%3D%223%22%2F%3E%3C%2Fsvg%3E')\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating New Astro Project\nDESCRIPTION: Creates a new Astro project using the Astro CLI as part of the manual setup process.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/astro.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-astro@latest\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Component from Flowbite React\nDESCRIPTION: Basic import statement for the Tooltip component from the Flowbite React library. This import is required before using any tooltip functionality in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Creating Flowbite React Rspack Project via CLI\nDESCRIPTION: Command to create a new Rspack project with Flowbite React using the project creation CLI. This sets up a new project with all necessary configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rspack.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t rspack\n```\n\n----------------------------------------\n\nTITLE: Rendering Square-shaped HR Component in React\nDESCRIPTION: This example demonstrates how to use the HR component as a square shape instead of a line to separate content.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/typography/hr.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example name=\"hr.square\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Datepicker Component from Flowbite React\nDESCRIPTION: Shows how to import the Datepicker component from the flowbite-react library to use in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/datepicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Datepicker } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Manual Mode Configuration Example\nDESCRIPTION: Example configuration for manual mode where specific components are explicitly listed for style generation.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/config.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://unpkg.com/flowbite-react/schema.json\",\n  \"components\": [\"Button\", \"Card\", \"Modal\"],\n  \"path\": \"src/components\",\n  \"prefix\": \"\",\n  \"rsc\": true,\n  \"tsx\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New RedwoodJS Project Manually\nDESCRIPTION: Commands to create a new RedwoodJS project manually, install dependencies, and generate a homepage. This is part of the manual setup process for integrating Flowbite React.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/redwoodjs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create redwood-app my-redwood-app\ncd my-redwood-app\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Rendering Trimmed HR Component in React\nDESCRIPTION: This example shows how to create a shorter version of the horizontal line using the HR component.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/typography/hr.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example name=\"hr.trimmed\" />\n```\n\n----------------------------------------\n\nTITLE: Quick Start CLI Command for New Farm Project with Flowbite React\nDESCRIPTION: Command to create a new Farm project with Flowbite React, Tailwind CSS, and all necessary configurations using the project creation CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/farm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t farm\n```\n\n----------------------------------------\n\nTITLE: Rendering HR Component with Text in React\nDESCRIPTION: This example shows how to add text in the middle of the HR component.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/typography/hr.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example name=\"hr.text\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Footer Component from Flowbite React\nDESCRIPTION: Basic import statement to use the Footer component from the flowbite-react library. This import is required before using any footer-related components in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/footer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Footer } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Using Flowbite React CLI\nDESCRIPTION: Command to generate a new component using the Flowbite React CLI tool\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/custom-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest create my-component\n```\n\n----------------------------------------\n\nTITLE: Generating a Homepage in RedwoodJS\nDESCRIPTION: Command to create a new homepage in RedwoodJS using the CLI. This generates a page component at the root path.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/redwoodjs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn redwood generate page home /\n```\n\n----------------------------------------\n\nTITLE: Creating New Next.js Project\nDESCRIPTION: Command to create a new Next.js project using create-next-app CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/nextjs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Box Shadow Utilities in JavaScript\nDESCRIPTION: This snippet adds a custom box shadow utility for light shadows to the existing set of box shadow styles in Flowbite React.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/colors.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst boxShadow = {\n  \"sm-light\": \"0 2px 5px 0px rgba(255, 255, 255, 0.08)\",\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon HR Component in React\nDESCRIPTION: This example demonstrates how to add a custom SVG icon in the middle of the HR element.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/typography/hr.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example name=\"hr.icon\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Blockquote Component in React\nDESCRIPTION: Basic import statement for the Blockquote component from Flowbite React, which is required before using any blockquote functionality in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/typography/blockquote.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Blockquote } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React Manually\nDESCRIPTION: Command to install and initialize Flowbite React in a manually configured Rsbuild project, which handles dependencies and plugin configuration.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rsbuild.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode in Pages Router\nDESCRIPTION: Implementation of dark mode support in Next.js Pages Router _document file to prevent page flicker before hydration.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/nextjs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/_document.tsx\nimport { ThemeModeScript } from \"flowbite-react\";\n\nexport default function Document() {\n  return (\n    <Html suppressHydrationWarning>\n      <Head>\n        <ThemeModeScript />\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AdonisJS Project with Inertia.js\nDESCRIPTION: Command to create a new AdonisJS project with Inertia.js and React support for manual setup.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/adonisjs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-adonisjs@latest -K=inertia --adapter=react\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to an existing Remix project\nDESCRIPTION: Command to add Flowbite React to an existing Remix project using the initialization CLI, which automatically installs dependencies and configures Tailwind CSS.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/remix.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Customizing Colors in Tailwind CSS v4 Using CSS Variables\nDESCRIPTION: This snippet shows how to customize colors in Tailwind CSS v4 by defining color variables in the base layer using CSS. It sets custom values for the primary color shades.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/colors.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n\n@theme {\n  --color-primary-50: #f0f9ff;\n  --color-primary-100: #e0f2fe;\n  --color-primary-200: #bae6fd;\n  --color-primary-300: #7dd3fc;\n  --color-primary-400: #38bdf8;\n  --color-primary-500: #0ea5e9;\n  --color-primary-600: #0284c7;\n  --color-primary-700: #0369a1;\n  --color-primary-800: #075985;\n  --color-primary-900: #0c4a6e;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flowbite React in Existing Project\nDESCRIPTION: Command to initialize Flowbite React in an existing AdonisJS project using the initialization CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/adonisjs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React in Web Directory\nDESCRIPTION: Command to initialize Flowbite React in the web directory of a RedwoodJS project. This installs dependencies and configures Tailwind CSS and Vite for Flowbite React.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/redwoodjs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd web && npx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS and PostCSS for Rspack\nDESCRIPTION: Command to install Tailwind CSS, PostCSS, and related dependencies for a Rspack project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rspack.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss @tailwindcss/postcss postcss postcss-loader\n```\n\n----------------------------------------\n\nTITLE: Creating New Rspack Project\nDESCRIPTION: Command to create a new Rspack project from scratch, selecting the React template when prompted.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rspack.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-rspack@latest\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to Existing Laravel Project\nDESCRIPTION: Command to add Flowbite React to an existing Laravel project using the initialization CLI, which installs dependencies and configures Tailwind CSS.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/laravel.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Colors in JavaScript for Flowbite React\nDESCRIPTION: This snippet defines the default semantic colors used throughout Flowbite React components. It includes shades for the primary color.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/customize/colors.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst semanticColors = {\n  primary: {\n    50: \"#EBF5FF\",\n    100: \"#E1EFFE\",\n    200: \"#C3DDFD\",\n    300: \"#A4CAFE\",\n    400: \"#76A9FA\",\n    500: \"#3F83F8\",\n    600: \"#1C64F2\",\n    700: \"#1A56DB\",\n    800: \"#1E429F\",\n    900: \"#233876\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router in main.tsx\nDESCRIPTION: Setup code for React Router using BrowserRouter component in the main application file.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-router.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { BrowserRouter } from \"react-router\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Flowbite React in Existing Modern.js Project\nDESCRIPTION: This command uses the Flowbite React initialization CLI to add Flowbite React to an existing Modern.js project, installing dependencies and configuring Tailwind CSS.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/modernjs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack for PostCSS\nDESCRIPTION: TypeScript configuration to enable the postcss-loader in the Rspack configuration file.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rspack.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\"postcss-loader\"],\n        type: \"css\",\n      },\n      // ...\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vike project manually\nDESCRIPTION: Command to create a new Vike project with React and Tailwind CSS support using the official Vike template. This is the first step in the manual setup process.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vike.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-vike@latest --react --tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to Existing Bun Project\nDESCRIPTION: Initializes Flowbite React in an existing Bun project using the flowbite-react CLI, which installs dependencies and configures Tailwind CSS.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/bun.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode in React Main Entry Point\nDESCRIPTION: Adds the ThemeModeScript component to the main React entry point to prevent dark mode flickering.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/bun.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/main.tsx\nimport { ThemeModeScript } from \"flowbite-react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ThemeModeScript />\n    <App />\n  </React.StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Including Tailwind CSS in Modern.js Styles\nDESCRIPTION: This CSS code imports Tailwind CSS into the Modern.js project's main CSS file.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/modernjs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React in Existing Project\nDESCRIPTION: Command to initialize Flowbite React in an existing Waku project. This installs all dependencies and configures Tailwind CSS automatically.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/waku.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating PostCSS Configuration File\nDESCRIPTION: Command to create a new PostCSS configuration file for the project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rspack.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntouch postcss.config.mjs\n```\n\n----------------------------------------\n\nTITLE: Creating New Modern.js Project\nDESCRIPTION: This command creates a new Modern.js project using the Modern.js CLI. It prompts the user to select 'Web Application' and 'React' options.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/modernjs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modern-js/create@latest my-app\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to an existing Vike project\nDESCRIPTION: Command to initialize Flowbite React in an existing Vike project using the flowbite-react initialization CLI. This installs Flowbite React and configures Tailwind CSS automatically.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vike.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Tailwind CSS and TanStack Router plugins\nDESCRIPTION: TypeScript configuration for Vite that includes the TanStack Router plugin, React plugin, and Tailwind CSS plugin.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-router.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport tailwindcss from \"@tailwindcss/vite\";\nimport { TanStackRouterVite } from \"@tanstack/router-plugin/vite\";\nimport react from \"@vitejs/plugin-react\";\nimport { defineConfig } from \"vite\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    TanStackRouterVite({\n      target: \"react\",\n      autoCodeSplitting: true,\n    }),\n    react(),\n    tailwindcss(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Flowbite React Project with CLI\nDESCRIPTION: Command to create a new Parcel project with Flowbite React using the creation CLI\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest -t parcel\n```\n\n----------------------------------------\n\nTITLE: Adding Flowbite React to an Existing Blitz.js Project\nDESCRIPTION: Command to initialize Flowbite React in an existing Blitz.js project. This automatically installs dependencies and configures Tailwind CSS with the Flowbite React plugin.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/blitzjs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Parcel\nDESCRIPTION: JSON configuration for package.json with start and build scripts for Parcel\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"flowbite-react-parcel\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"parcel src/index.html\",\n    \"build\": \"parcel build src/index.html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Tailwind CSS\nDESCRIPTION: Configuration for adding Tailwind CSS plugin to Vite setup.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/adonisjs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport tailwindcss from \"@tailwindcss/vite\";\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [\n    // ...\n    tailwindcss(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Flowbite React in Existing Project\nDESCRIPTION: Command to initialize Flowbite React in an existing Meteor.js project, installing dependencies and configuring Tailwind CSS.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/meteorjs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Using Layout in Astro Pages\nDESCRIPTION: Demonstrates how to import and use the root layout in Astro pages.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/astro.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// src/pages/index.astro\n---\nimport RootLayout from \"../layouts/index.astro\";\n---\n\n<RootLayout>\n  // Your content here\n</RootLayout>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS file in main.tsx\nDESCRIPTION: TypeScript React code to import the CSS file in the main entry point of the application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-router.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./index.css\";\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React\nDESCRIPTION: Command to install Flowbite React and configure it with the necessary dependencies and plugins using the initialization CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-router.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in App Stylesheet\nDESCRIPTION: CSS import statement to include Tailwind CSS in the main application stylesheet for a Rsbuild project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rsbuild.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS Dependencies\nDESCRIPTION: Command to install Tailwind CSS and its Vite plugin for manual setup.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/adonisjs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss @tailwindcss/vite\n```\n\n----------------------------------------\n\nTITLE: Creating a new TanStack Router project\nDESCRIPTION: Command to create a new TanStack Router project from scratch using the TanStack Router creation CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-router.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tanstack/create-router@latest\n```\n\n----------------------------------------\n\nTITLE: Framework Mode Component Example\nDESCRIPTION: Example of using Flowbite React Button component in framework mode.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-router.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/home.tsx\nimport { Button } from \"flowbite-react\";\n\nexport default function Home() {\n  return (\n    <>\n      <Button>Click me</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React manually\nDESCRIPTION: Command to install and configure Flowbite React in a manual setup, which installs dependencies and sets up Tailwind CSS and Vite configurations.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-start.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React in Astro\nDESCRIPTION: Installs Flowbite React and its dependencies, configures Tailwind CSS and Vite to include Flowbite React plugin.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/astro.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS import to CSS file\nDESCRIPTION: CSS import statement to include Tailwind CSS in the project's main CSS file.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-router.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in Main CSS File\nDESCRIPTION: CSS import statement to include Tailwind CSS in the main CSS file of the project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rspack.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Creating New Meteor.js Project\nDESCRIPTION: Commands to create new Meteor.js projects, with options for both JavaScript and TypeScript versions.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/meteorjs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create meteor-project\ncd meteor-project\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create meteor-project --typescript\ncd meteor-project\n```\n\n----------------------------------------\n\nTITLE: Setting up React Router Library Mode\nDESCRIPTION: Commands to create a new project and install React Router in library mode.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-router.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-vite@latest my-app\ncd my-app\nnpm install react-router\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React manually\nDESCRIPTION: Command to install Flowbite React and its dependencies, configure Tailwind CSS, and set up Vite plugin as part of the manual setup process.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-server.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS for Rsbuild\nDESCRIPTION: Command to install Tailwind CSS and its PostCSS plugin as development dependencies for a Rsbuild project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rsbuild.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss @tailwindcss/postcss\n```\n\n----------------------------------------\n\nTITLE: Creating a Project with Specific Template\nDESCRIPTION: Example of creating a new project by specifying the template name with the --template or -t flag.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/packages/cli/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest my-app --template react-router\n# or using shortcut\nnpx create-flowbite-react@latest my-app -t react-router\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Imports\nDESCRIPTION: CSS configuration to import Tailwind CSS into the main stylesheet.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/meteorjs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Components in React\nDESCRIPTION: This snippet shows how to import the TabItem and Tabs components from the flowbite-react library. These components are essential for creating tab interfaces in a React application using Flowbite.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/tabs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TabItem, Tabs } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind CSS\nDESCRIPTION: JavaScript configuration to add Tailwind CSS PostCSS plugin to the PostCSS configuration file.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rspack.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('postcss-load-config').Config} */\nexport default {\n  plugins: {\n    \"@tailwindcss/postcss\": {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React in manual setup\nDESCRIPTION: Command to install Flowbite React and its dependencies as part of the manual setup process, which also configures Tailwind CSS and Vite plugins.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/remix.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS Dependencies\nDESCRIPTION: This command installs Tailwind CSS and its dependencies in a Modern.js project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/modernjs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss @tailwindcss/postcss\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Development Environment - Bash\nDESCRIPTION: Commands for setting up a local development environment by cloning the repository and adding the upstream remote.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/contributing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your username>/flowbite-react.git\ncd flowbite-react\ngit remote add upstream https://github.com/themesberg/flowbite-react.git\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS Import\nDESCRIPTION: CSS import statement to include Tailwind CSS in the project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-router.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Component in React\nDESCRIPTION: This snippet shows how to import the Popover component from Flowbite React. This is a prerequisite step before using the popover component in your React project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/popover.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Popover } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS with Tailwind Plugin\nDESCRIPTION: PostCSS configuration that includes the Tailwind CSS plugin, enabling Tailwind CSS processing in the Farm project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/farm.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('postcss-load-config').Config} */\nexport default {\n  plugins: {\n    \"@tailwindcss/postcss\": {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding React Support to Astro\nDESCRIPTION: Installs React support in an Astro project using the Astro CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/astro.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx astro add react\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS in RedwoodJS\nDESCRIPTION: Command to install and configure Tailwind CSS in a RedwoodJS project. This sets up all necessary Tailwind configuration files and updates CSS files with Tailwind directives.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/redwoodjs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw setup ui tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Prettier in Flowbite React\nDESCRIPTION: This snippet demonstrates the command to run Prettier for formatting code in the Flowbite React project. It uses the 'bun' package manager to execute the 'format' script.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/contributing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```\nbun run format\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Basic React App Component\nDESCRIPTION: Initial React component setup\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  return <h1>Hello world!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Component from Flowbite React\nDESCRIPTION: This snippet demonstrates how to import the Toast component from the Flowbite React library. This is the first step in using the toast functionality in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/toast.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toast } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Farm with PostCSS Plugin\nDESCRIPTION: Configuration for adding the PostCSS plugin to the Farm configuration file, which enables CSS processing for Tailwind CSS.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/farm.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@farmfe/core\";\nimport farmPluginPostcss from \"@farmfe/js-plugin-postcss\";\n\nexport default defineConfig({\n  plugins: [\"@farmfe/plugin-react\", farmPluginPostcss()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in Astro\nDESCRIPTION: Installs and configures Tailwind CSS in an Astro project using the Astro CLI.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/astro.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx astro add tailwind\n```\n\n----------------------------------------\n\nTITLE: Creating React Entry Point\nDESCRIPTION: TypeScript React entry point file that initializes the application\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./app\";\n\nimport \"./index.css\";\n\nconst root = createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Default HR Component in React\nDESCRIPTION: This example demonstrates how to use the basic HR component to separate text content with a horizontal line.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/typography/hr.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example name=\"hr.root\" />\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes - Bash\nDESCRIPTION: Command for pushing changes to the forked repository.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/contributing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin fix/accordion-alwaysopen\n```\n\n----------------------------------------\n\nTITLE: Importing Rating Component from Flowbite React\nDESCRIPTION: Basic import statement to use the Rating component from the flowbite-react library.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Rating } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind CSS in Blitz.js\nDESCRIPTION: JavaScript configuration for PostCSS to enable Tailwind CSS processing in a Blitz.js project. This exports a configuration object with the Tailwind PostCSS plugin.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/blitzjs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('postcss-load-config').Config} */\nconst config = {\n  plugins: {\n    \"@tailwindcss/postcss\": {},\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS with Vite\nDESCRIPTION: Command to install Tailwind CSS and its Vite plugin for library mode setup.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-router.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss @tailwindcss/vite\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML Entry Point\nDESCRIPTION: HTML template file with React root element and TypeScript entry point\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Flowbite React Parcel</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"./index.tsx\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing KBD Component from Flowbite-React\nDESCRIPTION: Basic import statement to use the KBD component from the Flowbite-React library\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/kbd.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Kbd } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - Bash\nDESCRIPTION: Command for installing project dependencies using Bun package manager.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/contributing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Component from Flowbite-React\nDESCRIPTION: This snippet shows how to import the Pagination component from the Flowbite-React library. This import is necessary before using the Pagination component in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/pagination.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pagination } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Flowbite React\nDESCRIPTION: Basic Vite configuration setup required for Flowbite React integration.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/waku.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Tailwind CSS\nDESCRIPTION: Configuration for Vite to include Tailwind CSS plugin.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-router.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport tailwindcss from \"@tailwindcss/vite\";\nimport react from \"@vitejs/plugin-react\";\nimport { defineConfig } from \"vite\";\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react(), tailwindcss()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel RC\nDESCRIPTION: Parcel configuration file setup\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"@parcel/config-default\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Component from Flowbite React\nDESCRIPTION: This code snippet demonstrates how to import the Progress component from the Flowbite React library. This import is necessary before using the Progress component in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/progress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Progress } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Importing Carousel Component from Flowbite React\nDESCRIPTION: Basic import statement for the Carousel component from the Flowbite React library. This is the first step required before implementing any carousel functionality in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/carousel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Carousel } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS Dependencies\nDESCRIPTION: Command to install Tailwind CSS and its peer dependencies for Meteor.js project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/meteorjs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss @tailwindcss/postcss postcss postcss-load-config\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS Dependencies\nDESCRIPTION: Command to install Tailwind CSS and PostCSS dependencies\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss @tailwindcss/postcss\n```\n\n----------------------------------------\n\nTITLE: Creating PostCSS Configuration File\nDESCRIPTION: Command to create a PostCSS configuration file for Tailwind CSS integration with Rsbuild.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rsbuild.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntouch postcss.config.mjs\n```\n\n----------------------------------------\n\nTITLE: Importing Timeline Component from Flowbite React\nDESCRIPTION: Basic import statement to use the Timeline component from the Flowbite React library. This import is required before using any timeline functionality in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/timeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Timeline } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Importing Banner Component from Flowbite React\nDESCRIPTION: This snippet shows how to import the Banner component from the flowbite-react library. This is the first step in using the sticky banner component in a React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/banner.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Banner } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Correct Tailwind CSS Version\nDESCRIPTION: Command to install Tailwind CSS v3 in a Gatsby project. This is needed when the Gatsby CLI template is configured for v3 but installs v4 by default.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/gatsby.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss@^3\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS\nDESCRIPTION: PostCSS configuration for Tailwind CSS\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"@tailwindcss/postcss\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS Imports to CSS File\nDESCRIPTION: CSS code to import Tailwind CSS styles into the main CSS file of a Vite project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/vite.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Importing Table Component from Flowbite-React\nDESCRIPTION: Shows how to import the Table component from the flowbite-react library. This is the first step in using the Table component in a React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/table.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Table } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component from Flowbite-React\nDESCRIPTION: Shows how to import the Badge component from the flowbite-react library to use it in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS for Farm Project\nDESCRIPTION: Command to install Tailwind CSS and its PostCSS plugin as development dependencies.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/farm.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss @tailwindcss/postcss\n```\n\n----------------------------------------\n\nTITLE: Setting up Tailwind CSS Imports\nDESCRIPTION: CSS file importing Tailwind CSS framework\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in Project CSS\nDESCRIPTION: CSS import statement to include Tailwind CSS in the project's main CSS file.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/farm.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Component from Flowbite-React\nDESCRIPTION: Basic import statement to use the Alert component from the flowbite-react package.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/alert.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Importing Spinner Component - React/Flowbite\nDESCRIPTION: Basic import statement for the Spinner component from the flowbite-react library. This is required before using the spinner component in your React application.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/spinner.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spinner } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Project with Nested Template Version\nDESCRIPTION: Example showing how to create a project using a specific nested template version using dot notation.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/packages/cli/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Using dot notation for nested versions\nnpx create-flowbite-react@latest my-app --template react-router.framework\n# or using shortcut\nnpx create-flowbite-react@latest my-app -t react-router.framework\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS Dependencies for Blitz.js\nDESCRIPTION: Command to install Tailwind CSS and its dependencies in a Blitz.js project. This includes the Tailwind CSS core library, PostCSS integration, and the PostCSS processor.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/blitzjs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss @tailwindcss/postcss postcss\n```\n\n----------------------------------------\n\nTITLE: Creating a CSS file for Tailwind\nDESCRIPTION: Command to create a new CSS file for Tailwind CSS imports in the src directory.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-router.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/index.css\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in React\nDESCRIPTION: Basic import statement for the Avatar component from the flowbite-react package.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component - React/Flowbite\nDESCRIPTION: Basic import statement for the Button component from the Flowbite React library, which is required to create button groups.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/button-group.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Automated VS Code Setup Command\nDESCRIPTION: Command to automatically configure VS Code settings using Flowbite React CLI tool\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/editor-setup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest setup vscode\n```\n\n----------------------------------------\n\nTITLE: Creating React Router Framework Project\nDESCRIPTION: Commands to create a new project using React Router in framework mode.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-router.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-router@latest my-app\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS Import\nDESCRIPTION: CSS import statement to include Tailwind CSS in the application stylesheet.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/adonisjs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Creating VS Code Directory\nDESCRIPTION: Command to create a .vscode directory in the project root for VS Code settings\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/editor-setup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir .vscode\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumb Component from Flowbite React\nDESCRIPTION: This snippet shows how to import the Breadcrumb component from the flowbite-react library. This is the first step in using the breadcrumb component in a React project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/breadcrumb.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Breadcrumb } from \"flowbite-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Tailwind Plugin\nDESCRIPTION: Command to install the ESLint plugin for Tailwind CSS\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/editor-setup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D eslint-plugin-tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Creating a New Farm Project for Manual Setup\nDESCRIPTION: Commands to create a new Farm project from scratch when manually setting up Flowbite React integration.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/farm.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-farm@latest farm-project\ncd farm-project\n```\n\n----------------------------------------\n\nTITLE: ESLint Flat Configuration\nDESCRIPTION: JavaScript configuration for ESLint with Tailwind CSS support using the new flat config format\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/editor-setup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport tailwindcss from \"eslint-plugin-tailwindcss\";\n\nexport default [\n  ...tailwindcss.configs[\"flat/recommended\"],\n  {\n    settings: {\n      tailwindcss: {\n        callees: [\"twMerge\", \"createTheme\"],\n        classRegex: \"^(class(Name)|theme)?$\",\n      },\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Prettier Config File\nDESCRIPTION: Command to create a Prettier configuration file\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/editor-setup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntouch prettier.config.js\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS and its Vite plugin\nDESCRIPTION: Command to install Tailwind CSS and the Tailwind CSS Vite plugin as development dependencies.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-router.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss @tailwindcss/vite\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Dependencies\nDESCRIPTION: Command to install Prettier and its Tailwind CSS plugin for code formatting\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/editor-setup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D prettier prettier-plugin-tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS for Farm Project\nDESCRIPTION: Command to install PostCSS and its Farm plugin, which is a prerequisite for using Tailwind CSS.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/farm.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @farmfe/js-plugin-postcss postcss\n```\n\n----------------------------------------\n\nTITLE: Creating New Gatsby Project Manually\nDESCRIPTION: Command to create a new Gatsby project manually. During setup, select Tailwind CSS when prompted about styling systems.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/gatsby.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm init gatsby\n```\n\n----------------------------------------\n\nTITLE: Prettier Configuration with Tailwind Support\nDESCRIPTION: JavaScript configuration for Prettier including Tailwind CSS plugin and custom attributes\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/editor-setup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('prettier').Config} */\nmodule.exports = {\n  plugins: [\"prettier-plugin-tailwindcss\"],\n  // tailwindcss\n  tailwindAttributes: [\"theme\"],\n  tailwindFunctions: [\"twMerge\", \"createTheme\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind CSS\nDESCRIPTION: PostCSS configuration that includes the Tailwind CSS plugin for proper CSS processing in a Rsbuild project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rsbuild.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('postcss-load-config').Config} */\nexport default {\n  plugins: {\n    \"@tailwindcss/postcss\": {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: VS Code Tailwind CSS Settings Configuration\nDESCRIPTION: JSON configuration for VS Code to enable Tailwind CSS support including custom class attributes and regex patterns\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/editor-setup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files.associations\": {\n    \"*.css\": \"tailwindcss\"\n  },\n  \"tailwindCSS.classAttributes\": [\"class\", \"className\", \"theme\"],\n  \"tailwindCSS.experimental.classRegex\": [\n    [\"twMerge\\\\(([^)]*)\\\\)\", \"[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\"],\n    [\"createTheme(?:<\\\\w+>)?\\\\s*\\\\(([^)]*)\\\\)\", \"{?\\\\s?[\\\\w].*:\\\\s*?[\\\"'`]([^\\\"'`]*).*?,?\\\\s?}?\"]  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Blitz.js Project Manually\nDESCRIPTION: Commands to create a new Blitz.js project from scratch. This installs the Blitz CLI globally, creates a new project, and navigates into the project directory.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/blitzjs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g blitz\nblitz new blitzjs-project\ncd blitzjs-project\n```\n\n----------------------------------------\n\nTITLE: Creating New Laravel Project with React Support\nDESCRIPTION: Command to create a new Laravel project with Inertia.js and React support for manual setup of Flowbite React.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/laravel.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlaravel new flowbite-react-laravel --react\n```\n\n----------------------------------------\n\nTITLE: ESLint Legacy Configuration\nDESCRIPTION: JavaScript configuration for ESLint with Tailwind CSS support in legacy format\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/editor-setup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import(\"eslint\").Linter.Config} */\nmodule.exports = {\n  // ...\n  extends: [\n    // ...\n    \"plugin:tailwindcss/recommended\",\n  ],\n  settings: {\n    // ...\n    tailwindcss: {\n      callees: [\"twMerge\", \"createTheme\"],\n      classRegex: \"^(class(Name)|theme)?$\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite React with Initialization CLI\nDESCRIPTION: Command to install and initialize Flowbite React, which handles installation of dependencies and configuration of Tailwind CSS and Vite plugins.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/farm.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating VS Code Settings File\nDESCRIPTION: Command to create a settings.json file for VS Code configuration\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/editor-setup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntouch .vscode/settings.json\n```\n\n----------------------------------------\n\nTITLE: Removing Tailwind CSS browser script from HTML\nDESCRIPTION: HTML code that should be removed from index.html when using the Vite plugin for Tailwind CSS instead of the browser script.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/tanstack-router.mdx#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@tailwindcss/browser@4\"></script>\n<style type=\"text/tailwindcss\">\n  html {\n    color-scheme: light dark;\n  }\n  * {\n    @apply border-gray-200 dark:border-gray-800;\n  }\n  body {\n    @apply bg-gray-50 text-gray-950 dark:bg-gray-900 dark:text-gray-200;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a new Remix project for manual setup\nDESCRIPTION: Command to create a new Remix project as the first step in the manual setup process for integrating Flowbite React.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/remix.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest\n```\n\n----------------------------------------\n\nTITLE: Updating CSS for Tailwind Integration in Blitz.js\nDESCRIPTION: CSS modification to import Tailwind CSS styles in a Blitz.js project's global stylesheet. This is required to enable Tailwind's utility classes.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/blitzjs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rsbuild Project Manually\nDESCRIPTION: Command to create a new Rsbuild project for manual setup, where you'll need to select the React option when prompted.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/rsbuild.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-rsbuild@latest\n```\n\n----------------------------------------\n\nTITLE: Creating new @lazarv/react-server project\nDESCRIPTION: Command to create a new @lazarv/react-server project from scratch as part of the manual setup process.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/react-server.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @lazarv/create-react-server@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch - Bash\nDESCRIPTION: Command for creating a new branch for development work.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/contributing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b fix/accordion-alwaysopen\n```\n\n----------------------------------------\n\nTITLE: Creating Basic gatsby-ssr.js File for Dark Mode\nDESCRIPTION: Initial setup of the gatsby-ssr.js file with the onRenderBody function. This is the first step in configuring dark mode support to prevent page flickering.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/gatsby.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// gatsby-ssr.js\nexport const onRenderBody = ({ setPreBodyComponents }) => {\n  setPreBodyComponents([]);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating New Waku Project Manually\nDESCRIPTION: Command to create a new Waku project from scratch for manual setup process.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/waku.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-waku@latest\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server - Bash\nDESCRIPTION: Command for launching the local development server.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/contributing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Creating PostCSS Configuration File\nDESCRIPTION: Command to create a PostCSS configuration file for Farm project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/farm.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntouch postcss.config.mjs\n```\n\n----------------------------------------\n\nTITLE: Creating New Parcel Project\nDESCRIPTION: Commands to create a new Parcel project and install necessary dependencies\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir flowbite-react-parcel\ncd flowbite-react-parcel\nnpm init -y\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react react-dom\nnpm install -D parcel @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Creating PostCSS Config\nDESCRIPTION: Commands and configuration for setting up PostCSS with Tailwind CSS in a Meteor.js project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/meteorjs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntouch postcss.config.mjs\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('postcss-load-config').Config} */\nconst config = {\n  plugins: {\n    \"@tailwindcss/postcss\": {},\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Week Start Configuration Options in JSON Format\nDESCRIPTION: A JSON object showing the mapping between numeric values (0-6) and the corresponding days of the week for configuring the weekStart property of the Datepicker component.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/components/datepicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"0\": \"Sunday\",\n  \"1\": \"Monday\",\n  \"2\": \"Tuesday\",\n  \"3\": \"Wednesday\",\n  \"4\": \"Thursday\",\n  \"5\": \"Friday\",\n  \"6\": \"Saturday\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript\nDESCRIPTION: TypeScript configuration for React and modern JavaScript features\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/parcel.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"src\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up VSCode for Flowbite React\nDESCRIPTION: Command to configure VSCode for Flowbite React development. This sets up editor configurations for an optimal development experience.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/redwoodjs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx flowbite-react@latest setup vscode\n```\n\n----------------------------------------\n\nTITLE: Running Build and Test Commands - Bash\nDESCRIPTION: Commands for formatting, linting, testing, and building the project.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/contributing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbun run format && bun run lint:fix && bun run test && bun run build\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flowbite React Project with Options\nDESCRIPTION: This bash command demonstrates creating a new Flowbite React project with specific options, including template selection and Git repository initialization.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/getting-started/cli.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-flowbite-react@latest my-app -t nextjs --git\n```\n\n----------------------------------------\n\nTITLE: Creating a PostCSS Configuration File\nDESCRIPTION: Command to create an empty PostCSS configuration file that will be used to integrate Tailwind CSS with Blitz.js.\nSOURCE: https://github.com/themesberg/flowbite-react/blob/main/apps/web/content/docs/guides/blitzjs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntouch postcss.config.mjs\n```"
  }
]